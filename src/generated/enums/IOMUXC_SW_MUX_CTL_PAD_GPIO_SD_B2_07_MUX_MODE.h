/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE : uint8_t
{
    _0_usdhc2_STROBE /*!< Select mux mode: ALT0 mux port: USDHC2_STROBE of
                        instance: USDHC2 */
        ,
    _1_flexspi1_A_SCLK = 1 /*!< Select mux mode: ALT1 mux port: FLEXSPI1_A_SCLK
                              of instance: FLEXSPI1 */
        ,
    _2_ENET_1G_TX_DATA2 = 2 /*!< Select mux mode: ALT2 mux port:
                               ENET_1G_TX_DATA02 of instance: ENET_1G */
        ,
    _3_lpuart3_CTS_B = 3 /*!< Select mux mode: ALT3 mux port: LPUART3_CTS_B of
                            instance: LPUART3 */
        ,
    _4_gpt6_CAPTURE2 = 4 /*!< Select mux mode: ALT4 mux port: GPT6_CAPTURE2 of
                            instance: GPT6 */
        ,
    _5_gpio_mux4_IO16 = 5 /*!< Select mux mode: ALT5 mux port: GPIO_MUX4_IO16
                             of instance: GPIO_MUX4 */
        ,
    _6_lpspi2_SCK = 6 /*!< Select mux mode: ALT6 mux port: LPSPI2_SCK of
                         instance: LPSPI2 */
        ,
    _8_enet_TX_ER =
        8 /*!< Select mux mode: ALT8 mux port: ENET_TX_ER of instance: ENET */,
    _9_CCM_enet_qos_clock_generate_REF_CLK =
        9 /*!< Select mux mode: ALT9 mux port: ENET_QOS_REF_CLK of instance:
             ENET_QOS */
        ,
    _10_gpio10_IO16 = 10 /*!< Select mux mode: ALT10 mux port: GPIO10_IO16 of
                            instance: GPIO10 */
};
static_assert(sizeof(IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE) == 1);

/**
 * Converts IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE instance)
{
    const char *result =
        "UNKNOWN IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE";

    switch (instance)
    {
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE::_0_usdhc2_STROBE:
        result = "_0_usdhc2_STROBE";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE::_1_flexspi1_A_SCLK:
        result = "_1_flexspi1_A_SCLK";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE::_2_ENET_1G_TX_DATA2:
        result = "_2_ENET_1G_TX_DATA2";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE::_3_lpuart3_CTS_B:
        result = "_3_lpuart3_CTS_B";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE::_4_gpt6_CAPTURE2:
        result = "_4_gpt6_CAPTURE2";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE::_5_gpio_mux4_IO16:
        result = "_5_gpio_mux4_IO16";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE::_6_lpspi2_SCK:
        result = "_6_lpspi2_SCK";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE::_8_enet_TX_ER:
        result = "_8_enet_TX_ER";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE::
        _9_CCM_enet_qos_clock_generate_REF_CLK:
        result = "_9_CCM_enet_qos_clock_generate_REF_CLK";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE::_10_gpio10_IO16:
        result = "_10_gpio10_IO16";
        break;
    }

    return result;
}

/**
 * Converts a C string to IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0_usdhc2_STROBE", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE::_0_usdhc2_STROBE;
    }
    else if ((result = !strncmp(data, "_1_flexspi1_A_SCLK", 18)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE::_1_flexspi1_A_SCLK;
    }
    else if ((result = !strncmp(data, "_2_ENET_1G_TX_DATA2", 19)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE::_2_ENET_1G_TX_DATA2;
    }
    else if ((result = !strncmp(data, "_3_lpuart3_CTS_B", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE::_3_lpuart3_CTS_B;
    }
    else if ((result = !strncmp(data, "_4_gpt6_CAPTURE2", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE::_4_gpt6_CAPTURE2;
    }
    else if ((result = !strncmp(data, "_5_gpio_mux4_IO16", 17)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE::_5_gpio_mux4_IO16;
    }
    else if ((result = !strncmp(data, "_6_lpspi2_SCK", 13)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE::_6_lpspi2_SCK;
    }
    else if ((result = !strncmp(data, "_8_enet_TX_ER", 13)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE::_8_enet_TX_ER;
    }
    else if ((result = !strncmp(data, "_9_CCM_enet_qos_clock_generate_REF_CLK",
                                38)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE::
            _9_CCM_enet_qos_clock_generate_REF_CLK;
    }
    else if ((result = !strncmp(data, "_10_gpio10_IO16", 15)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B2_07_MUX_MODE::_10_gpio10_IO16;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
