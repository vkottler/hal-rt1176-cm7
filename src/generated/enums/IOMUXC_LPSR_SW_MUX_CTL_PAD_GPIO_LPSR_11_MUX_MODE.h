/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE : uint8_t
{
    _0_jtag_mux_TDO /*!< Select mux mode: ALT0 mux port: JTAG_MUX_TDO of
                       instance: JTAG_MUX */
        ,
    _1_lpuart11_RTS_B = 1 /*!< Select mux mode: ALT1 mux port: LPUART11_RTS_B
                             of instance: LPUART11 */
        ,
    _2_lpi2c6_SCL = 2 /*!< Select mux mode: ALT2 mux port: LPI2C6_SCL of
                         instance: LPI2C6 */
        ,
    _3_mic_BITSTREAM2 = 3 /*!< Select mux mode: ALT3 mux port: MIC_BITSTREAM2
                             of instance: MIC */
        ,
    _4_lpspi6_SDO = 4 /*!< Select mux mode: ALT4 mux port: LPSPI6_SOUT of
                         instance: LPSPI6 */
        ,
    _5_gpio_mux6_IO11 = 5 /*!< Select mux mode: ALT5 mux port: GPIO_MUX6_IO11
                             of instance: GPIO_MUX6 */
        ,
    _6_lpi2c5_SDAS = 6 /*!< Select mux mode: ALT6 mux port: LPI2C5_SDAS of
                          instance: LPI2C5 */
        ,
    _7_ARM_TRACE_SWO = 7 /*!< Select mux mode: ALT7 mux port: ARM_TRACE_SWO of
                            instance: ARM */
        ,
    _8_lpuart12_RX = 8 /*!< Select mux mode: ALT8 mux port: LPUART12_RXD of
                          instance: LPUART12 */
        ,
    _10_gpio12_IO11 = 10 /*!< Select mux mode: ALT10 mux port: GPIO12_IO11 of
                            instance: GPIO12 */
};
static_assert(sizeof(IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE) == 1);

/**
 * Converts IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(
    IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE instance)
{
    const char *result =
        "UNKNOWN IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE";

    switch (instance)
    {
    case IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE::_0_jtag_mux_TDO:
        result = "_0_jtag_mux_TDO";
        break;
    case IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE::_1_lpuart11_RTS_B:
        result = "_1_lpuart11_RTS_B";
        break;
    case IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE::_2_lpi2c6_SCL:
        result = "_2_lpi2c6_SCL";
        break;
    case IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE::_3_mic_BITSTREAM2:
        result = "_3_mic_BITSTREAM2";
        break;
    case IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE::_4_lpspi6_SDO:
        result = "_4_lpspi6_SDO";
        break;
    case IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE::_5_gpio_mux6_IO11:
        result = "_5_gpio_mux6_IO11";
        break;
    case IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE::_6_lpi2c5_SDAS:
        result = "_6_lpi2c5_SDAS";
        break;
    case IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE::_7_ARM_TRACE_SWO:
        result = "_7_ARM_TRACE_SWO";
        break;
    case IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE::_8_lpuart12_RX:
        result = "_8_lpuart12_RX";
        break;
    case IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE::_10_gpio12_IO11:
        result = "_10_gpio12_IO11";
        break;
    }

    return result;
}

/**
 * Converts a C string to IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(
    const char *data, IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0_jtag_mux_TDO", 15)))
    {
        output =
            IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE::_0_jtag_mux_TDO;
    }
    else if ((result = !strncmp(data, "_1_lpuart11_RTS_B", 17)))
    {
        output = IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE::
            _1_lpuart11_RTS_B;
    }
    else if ((result = !strncmp(data, "_2_lpi2c6_SCL", 13)))
    {
        output =
            IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE::_2_lpi2c6_SCL;
    }
    else if ((result = !strncmp(data, "_3_mic_BITSTREAM2", 17)))
    {
        output = IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE::
            _3_mic_BITSTREAM2;
    }
    else if ((result = !strncmp(data, "_4_lpspi6_SDO", 13)))
    {
        output =
            IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE::_4_lpspi6_SDO;
    }
    else if ((result = !strncmp(data, "_5_gpio_mux6_IO11", 17)))
    {
        output = IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE::
            _5_gpio_mux6_IO11;
    }
    else if ((result = !strncmp(data, "_6_lpi2c5_SDAS", 14)))
    {
        output =
            IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE::_6_lpi2c5_SDAS;
    }
    else if ((result = !strncmp(data, "_7_ARM_TRACE_SWO", 16)))
    {
        output =
            IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE::_7_ARM_TRACE_SWO;
    }
    else if ((result = !strncmp(data, "_8_lpuart12_RX", 14)))
    {
        output =
            IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE::_8_lpuart12_RX;
    }
    else if ((result = !strncmp(data, "_10_gpio12_IO11", 15)))
    {
        output =
            IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE::_10_gpio12_IO11;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
