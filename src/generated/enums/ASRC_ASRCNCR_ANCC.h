/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class ASRC_ASRCNCR_ANCC : uint8_t
{
    zero_chan /*!< 0 channels in C (Pair C is disabled) */,
    one_chan = 1 /*!< 1 channel in C */,
    two_chan = 2 /*!< 2 channels in C */,
    three_chan = 3 /*!< 3 channels in C */,
    four_chan = 4 /*!< 4 channels in C */,
    five_chan = 5 /*!< 5 channels in C */,
    six_chan = 6 /*!< 6 channels in C */,
    seven_chan = 7 /*!< 7 channels in C */,
    eight_chan = 8 /*!< 8 channels in C */,
    nine_chan = 9 /*!< 9 channels in C */,
    ten_chan = 10 /*!< 10 channels in C */,
    not_used = 15 /*!< Should not be used. */
};
static_assert(sizeof(ASRC_ASRCNCR_ANCC) == 1);

/**
 * Converts ASRC_ASRCNCR_ANCC to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(ASRC_ASRCNCR_ANCC instance)
{
    const char *result = "UNKNOWN ASRC_ASRCNCR_ANCC";

    switch (instance)
    {
    case ASRC_ASRCNCR_ANCC::zero_chan:
        result = "zero_chan";
        break;
    case ASRC_ASRCNCR_ANCC::one_chan:
        result = "one_chan";
        break;
    case ASRC_ASRCNCR_ANCC::two_chan:
        result = "two_chan";
        break;
    case ASRC_ASRCNCR_ANCC::three_chan:
        result = "three_chan";
        break;
    case ASRC_ASRCNCR_ANCC::four_chan:
        result = "four_chan";
        break;
    case ASRC_ASRCNCR_ANCC::five_chan:
        result = "five_chan";
        break;
    case ASRC_ASRCNCR_ANCC::six_chan:
        result = "six_chan";
        break;
    case ASRC_ASRCNCR_ANCC::seven_chan:
        result = "seven_chan";
        break;
    case ASRC_ASRCNCR_ANCC::eight_chan:
        result = "eight_chan";
        break;
    case ASRC_ASRCNCR_ANCC::nine_chan:
        result = "nine_chan";
        break;
    case ASRC_ASRCNCR_ANCC::ten_chan:
        result = "ten_chan";
        break;
    case ASRC_ASRCNCR_ANCC::not_used:
        result = "not_used";
        break;
    }

    return result;
}

/**
 * Converts a C string to ASRC_ASRCNCR_ANCC.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, ASRC_ASRCNCR_ANCC &output)
{
    bool result = false;

    if ((result = !strncmp(data, "zero_chan", 9)))
    {
        output = ASRC_ASRCNCR_ANCC::zero_chan;
    }
    else if ((result = !strncmp(data, "one_chan", 8)))
    {
        output = ASRC_ASRCNCR_ANCC::one_chan;
    }
    else if ((result = !strncmp(data, "two_chan", 8)))
    {
        output = ASRC_ASRCNCR_ANCC::two_chan;
    }
    else if ((result = !strncmp(data, "three_chan", 10)))
    {
        output = ASRC_ASRCNCR_ANCC::three_chan;
    }
    else if ((result = !strncmp(data, "four_chan", 9)))
    {
        output = ASRC_ASRCNCR_ANCC::four_chan;
    }
    else if ((result = !strncmp(data, "five_chan", 9)))
    {
        output = ASRC_ASRCNCR_ANCC::five_chan;
    }
    else if ((result = !strncmp(data, "six_chan", 8)))
    {
        output = ASRC_ASRCNCR_ANCC::six_chan;
    }
    else if ((result = !strncmp(data, "seven_chan", 10)))
    {
        output = ASRC_ASRCNCR_ANCC::seven_chan;
    }
    else if ((result = !strncmp(data, "eight_chan", 10)))
    {
        output = ASRC_ASRCNCR_ANCC::eight_chan;
    }
    else if ((result = !strncmp(data, "nine_chan", 9)))
    {
        output = ASRC_ASRCNCR_ANCC::nine_chan;
    }
    else if ((result = !strncmp(data, "ten_chan", 8)))
    {
        output = ASRC_ASRCNCR_ANCC::ten_chan;
    }
    else if ((result = !strncmp(data, "not_used", 8)))
    {
        output = ASRC_ASRCNCR_ANCC::not_used;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
