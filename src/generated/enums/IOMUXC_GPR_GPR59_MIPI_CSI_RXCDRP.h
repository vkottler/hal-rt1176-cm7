/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class IOMUXC_GPR_GPR59_MIPI_CSI_RXCDRP : uint8_t
{
    _0 /*!< 344mV */,
    _01 = 1 /*!< 325mV (Default) */,
    _10 = 2 /*!< 307mV */,
    _11 = 3 /*!< Invalid */
};
static_assert(sizeof(IOMUXC_GPR_GPR59_MIPI_CSI_RXCDRP) == 1);

/**
 * Converts IOMUXC_GPR_GPR59_MIPI_CSI_RXCDRP to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(IOMUXC_GPR_GPR59_MIPI_CSI_RXCDRP instance)
{
    const char *result = "UNKNOWN IOMUXC_GPR_GPR59_MIPI_CSI_RXCDRP";

    switch (instance)
    {
    case IOMUXC_GPR_GPR59_MIPI_CSI_RXCDRP::_0:
        result = "_0";
        break;
    case IOMUXC_GPR_GPR59_MIPI_CSI_RXCDRP::_01:
        result = "_01";
        break;
    case IOMUXC_GPR_GPR59_MIPI_CSI_RXCDRP::_10:
        result = "_10";
        break;
    case IOMUXC_GPR_GPR59_MIPI_CSI_RXCDRP::_11:
        result = "_11";
        break;
    }

    return result;
}

/**
 * Converts a C string to IOMUXC_GPR_GPR59_MIPI_CSI_RXCDRP.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        IOMUXC_GPR_GPR59_MIPI_CSI_RXCDRP &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0", 2)))
    {
        output = IOMUXC_GPR_GPR59_MIPI_CSI_RXCDRP::_0;
    }
    else if ((result = !strncmp(data, "_01", 3)))
    {
        output = IOMUXC_GPR_GPR59_MIPI_CSI_RXCDRP::_01;
    }
    else if ((result = !strncmp(data, "_10", 3)))
    {
        output = IOMUXC_GPR_GPR59_MIPI_CSI_RXCDRP::_10;
    }
    else if ((result = !strncmp(data, "_11", 3)))
    {
        output = IOMUXC_GPR_GPR59_MIPI_CSI_RXCDRP::_11;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
