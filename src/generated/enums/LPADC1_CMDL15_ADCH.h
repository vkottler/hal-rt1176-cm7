/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class LPADC1_CMDL15_ADCH : uint8_t
{
    _0 /*!< Select CH0A or CH0B or CH0A/CH0B pair. */,
    _1 = 1 /*!< Select CH1A or CH1B or CH1A/CH1B pair. */,
    _2 = 2 /*!< Select CH2A or CH2B or CH2A/CH2B pair. */,
    _3 = 3 /*!< Select CH3A or CH3B or CH3A/CH3B pair. */,
    _4 =
        4 /*!< Select corresponding channel CHnA or CHnB or CHnA/CHnB pair. */,
    _5 =
        5 /*!< Select corresponding channel CHnA or CHnB or CHnA/CHnB pair. */,
    _6 =
        6 /*!< Select corresponding channel CHnA or CHnB or CHnA/CHnB pair. */,
    _7 =
        7 /*!< Select corresponding channel CHnA or CHnB or CHnA/CHnB pair. */,
    _8 =
        8 /*!< Select corresponding channel CHnA or CHnB or CHnA/CHnB pair. */,
    _9 =
        9 /*!< Select corresponding channel CHnA or CHnB or CHnA/CHnB pair. */,
    _30 = 30 /*!< Select CH30A or CH30B or CH30A/CH30B pair. */,
    _31 = 31 /*!< Select CH31A or CH31B or CH31A/CH31B pair. */
};
static_assert(sizeof(LPADC1_CMDL15_ADCH) == 1);

/**
 * Converts LPADC1_CMDL15_ADCH to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(LPADC1_CMDL15_ADCH instance)
{
    const char *result = "UNKNOWN LPADC1_CMDL15_ADCH";

    switch (instance)
    {
    case LPADC1_CMDL15_ADCH::_0:
        result = "_0";
        break;
    case LPADC1_CMDL15_ADCH::_1:
        result = "_1";
        break;
    case LPADC1_CMDL15_ADCH::_2:
        result = "_2";
        break;
    case LPADC1_CMDL15_ADCH::_3:
        result = "_3";
        break;
    case LPADC1_CMDL15_ADCH::_4:
        result = "_4";
        break;
    case LPADC1_CMDL15_ADCH::_5:
        result = "_5";
        break;
    case LPADC1_CMDL15_ADCH::_6:
        result = "_6";
        break;
    case LPADC1_CMDL15_ADCH::_7:
        result = "_7";
        break;
    case LPADC1_CMDL15_ADCH::_8:
        result = "_8";
        break;
    case LPADC1_CMDL15_ADCH::_9:
        result = "_9";
        break;
    case LPADC1_CMDL15_ADCH::_30:
        result = "_30";
        break;
    case LPADC1_CMDL15_ADCH::_31:
        result = "_31";
        break;
    }

    return result;
}

/**
 * Converts a C string to LPADC1_CMDL15_ADCH.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, LPADC1_CMDL15_ADCH &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0", 2)))
    {
        output = LPADC1_CMDL15_ADCH::_0;
    }
    else if ((result = !strncmp(data, "_1", 2)))
    {
        output = LPADC1_CMDL15_ADCH::_1;
    }
    else if ((result = !strncmp(data, "_2", 2)))
    {
        output = LPADC1_CMDL15_ADCH::_2;
    }
    else if ((result = !strncmp(data, "_3", 2)))
    {
        output = LPADC1_CMDL15_ADCH::_3;
    }
    else if ((result = !strncmp(data, "_4", 2)))
    {
        output = LPADC1_CMDL15_ADCH::_4;
    }
    else if ((result = !strncmp(data, "_5", 2)))
    {
        output = LPADC1_CMDL15_ADCH::_5;
    }
    else if ((result = !strncmp(data, "_6", 2)))
    {
        output = LPADC1_CMDL15_ADCH::_6;
    }
    else if ((result = !strncmp(data, "_7", 2)))
    {
        output = LPADC1_CMDL15_ADCH::_7;
    }
    else if ((result = !strncmp(data, "_8", 2)))
    {
        output = LPADC1_CMDL15_ADCH::_8;
    }
    else if ((result = !strncmp(data, "_9", 2)))
    {
        output = LPADC1_CMDL15_ADCH::_9;
    }
    else if ((result = !strncmp(data, "_30", 3)))
    {
        output = LPADC1_CMDL15_ADCH::_30;
    }
    else if ((result = !strncmp(data, "_31", 3)))
    {
        output = LPADC1_CMDL15_ADCH::_31;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
