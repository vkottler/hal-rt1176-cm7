/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class SNVS_HPCR_PI_FREQ : uint8_t
{
    _0 /*!< - bit 0 of the HPRTCLR is selected as a source of the periodic
          interrupt */
        ,
    _1 = 1 /*!< - bit 1 of the HPRTCLR is selected as a source of the periodic
              interrupt */
        ,
    _2 = 2 /*!< - bit 2 of the HPRTCLR is selected as a source of the periodic
              interrupt */
        ,
    _3 = 3 /*!< - bit 3 of the HPRTCLR is selected as a source of the periodic
              interrupt */
        ,
    _4 = 4 /*!< - bit 4 of the HPRTCLR is selected as a source of the periodic
              interrupt */
        ,
    _5 = 5 /*!< - bit 5 of the HPRTCLR is selected as a source of the periodic
              interrupt */
        ,
    _6 = 6 /*!< - bit 6 of the HPRTCLR is selected as a source of the periodic
              interrupt */
        ,
    _7 = 7 /*!< - bit 7 of the HPRTCLR is selected as a source of the periodic
              interrupt */
        ,
    _8 = 8 /*!< - bit 8 of the HPRTCLR is selected as a source of the periodic
              interrupt */
        ,
    _9 = 9 /*!< - bit 9 of the HPRTCLR is selected as a source of the periodic
              interrupt */
        ,
    _10 = 10 /*!< - bit 10 of the HPRTCLR is selected as a source of the
                periodic interrupt */
        ,
    _11 = 11 /*!< - bit 11 of the HPRTCLR is selected as a source of the
                periodic interrupt */
        ,
    _12 = 12 /*!< - bit 12 of the HPRTCLR is selected as a source of the
                periodic interrupt */
        ,
    _13 = 13 /*!< - bit 13 of the HPRTCLR is selected as a source of the
                periodic interrupt */
        ,
    _14 = 14 /*!< - bit 14 of the HPRTCLR is selected as a source of the
                periodic interrupt */
        ,
    _1r5 = 15 /*!< - bit 15 of the HPRTCLR is selected as a source of the
                 periodic interrupt */
};
static_assert(sizeof(SNVS_HPCR_PI_FREQ) == 1);

/**
 * Converts SNVS_HPCR_PI_FREQ to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(SNVS_HPCR_PI_FREQ instance)
{
    const char *result = "UNKNOWN SNVS_HPCR_PI_FREQ";

    switch (instance)
    {
    case SNVS_HPCR_PI_FREQ::_0:
        result = "_0";
        break;
    case SNVS_HPCR_PI_FREQ::_1:
        result = "_1";
        break;
    case SNVS_HPCR_PI_FREQ::_2:
        result = "_2";
        break;
    case SNVS_HPCR_PI_FREQ::_3:
        result = "_3";
        break;
    case SNVS_HPCR_PI_FREQ::_4:
        result = "_4";
        break;
    case SNVS_HPCR_PI_FREQ::_5:
        result = "_5";
        break;
    case SNVS_HPCR_PI_FREQ::_6:
        result = "_6";
        break;
    case SNVS_HPCR_PI_FREQ::_7:
        result = "_7";
        break;
    case SNVS_HPCR_PI_FREQ::_8:
        result = "_8";
        break;
    case SNVS_HPCR_PI_FREQ::_9:
        result = "_9";
        break;
    case SNVS_HPCR_PI_FREQ::_10:
        result = "_10";
        break;
    case SNVS_HPCR_PI_FREQ::_11:
        result = "_11";
        break;
    case SNVS_HPCR_PI_FREQ::_12:
        result = "_12";
        break;
    case SNVS_HPCR_PI_FREQ::_13:
        result = "_13";
        break;
    case SNVS_HPCR_PI_FREQ::_14:
        result = "_14";
        break;
    case SNVS_HPCR_PI_FREQ::_1r5:
        result = "_1r5";
        break;
    }

    return result;
}

/**
 * Converts a C string to SNVS_HPCR_PI_FREQ.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, SNVS_HPCR_PI_FREQ &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0", 2)))
    {
        output = SNVS_HPCR_PI_FREQ::_0;
    }
    else if ((result = !strncmp(data, "_1", 2)))
    {
        output = SNVS_HPCR_PI_FREQ::_1;
    }
    else if ((result = !strncmp(data, "_2", 2)))
    {
        output = SNVS_HPCR_PI_FREQ::_2;
    }
    else if ((result = !strncmp(data, "_3", 2)))
    {
        output = SNVS_HPCR_PI_FREQ::_3;
    }
    else if ((result = !strncmp(data, "_4", 2)))
    {
        output = SNVS_HPCR_PI_FREQ::_4;
    }
    else if ((result = !strncmp(data, "_5", 2)))
    {
        output = SNVS_HPCR_PI_FREQ::_5;
    }
    else if ((result = !strncmp(data, "_6", 2)))
    {
        output = SNVS_HPCR_PI_FREQ::_6;
    }
    else if ((result = !strncmp(data, "_7", 2)))
    {
        output = SNVS_HPCR_PI_FREQ::_7;
    }
    else if ((result = !strncmp(data, "_8", 2)))
    {
        output = SNVS_HPCR_PI_FREQ::_8;
    }
    else if ((result = !strncmp(data, "_9", 2)))
    {
        output = SNVS_HPCR_PI_FREQ::_9;
    }
    else if ((result = !strncmp(data, "_10", 3)))
    {
        output = SNVS_HPCR_PI_FREQ::_10;
    }
    else if ((result = !strncmp(data, "_11", 3)))
    {
        output = SNVS_HPCR_PI_FREQ::_11;
    }
    else if ((result = !strncmp(data, "_12", 3)))
    {
        output = SNVS_HPCR_PI_FREQ::_12;
    }
    else if ((result = !strncmp(data, "_13", 3)))
    {
        output = SNVS_HPCR_PI_FREQ::_13;
    }
    else if ((result = !strncmp(data, "_14", 3)))
    {
        output = SNVS_HPCR_PI_FREQ::_14;
    }
    else if ((result = !strncmp(data, "_1r5", 4)))
    {
        output = SNVS_HPCR_PI_FREQ::_1r5;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
