/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE : uint8_t
{
    _0_video_mux_LCDIF_DATA10 /*!< Select mux mode: ALT0 mux port:
                                 VIDEO_MUX_LCDIF_DATA10 of instance: VIDEO_MUX
                               */
        ,
    _1_ENET_TX_DATA0 = 1 /*!< Select mux mode: ALT1 mux port: ENET_TX_DATA00 of
                            instance: ENET */
        ,
    _2_pit1_TRIGGER3 = 2 /*!< Select mux mode: ALT2 mux port: PIT1_TRIGGER3 of
                            instance: PIT1 */
        ,
    _3_ARM_TRACE0 =
        3 /*!< Select mux mode: ALT3 mux port: ARM_TRACE00 of instance: ARM */,
    _4_sai1_TX_DATA1 = 4 /*!< Select mux mode: ALT4 mux port: SAI1_TX_DATA01 of
                            instance: SAI1 */
        ,
    _5_gpio_mux5_IO3 = 5 /*!< Select mux mode: ALT5 mux port: GPIO_MUX5_IO03 of
                            instance: GPIO_MUX5 */
        ,
    _6_src_BT_CFG8 =
        6 /*!< Select mux mode: ALT6 mux port: SRC_BT_CFG08 of instance: SRC */
        ,
    _8_ENET_QOS_TX_DATA0 = 8 /*!< Select mux mode: ALT8 mux port:
                                ENET_QOS_TX_DATA00 of instance: ENET_QOS */
        ,
    _10_gpio11_IO3 = 10 /*!< Select mux mode: ALT10 mux port: GPIO11_IO03 of
                           instance: GPIO11 */
};
static_assert(sizeof(IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE) == 1);

/**
 * Converts IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(
    IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE instance)
{
    const char *result =
        "UNKNOWN IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE";

    switch (instance)
    {
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE::
        _0_video_mux_LCDIF_DATA10:
        result = "_0_video_mux_LCDIF_DATA10";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE::_1_ENET_TX_DATA0:
        result = "_1_ENET_TX_DATA0";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE::_2_pit1_TRIGGER3:
        result = "_2_pit1_TRIGGER3";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE::_3_ARM_TRACE0:
        result = "_3_ARM_TRACE0";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE::_4_sai1_TX_DATA1:
        result = "_4_sai1_TX_DATA1";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE::_5_gpio_mux5_IO3:
        result = "_5_gpio_mux5_IO3";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE::_6_src_BT_CFG8:
        result = "_6_src_BT_CFG8";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE::_8_ENET_QOS_TX_DATA0:
        result = "_8_ENET_QOS_TX_DATA0";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE::_10_gpio11_IO3:
        result = "_10_gpio11_IO3";
        break;
    }

    return result;
}

/**
 * Converts a C string to IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0_video_mux_LCDIF_DATA10", 25)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE::
            _0_video_mux_LCDIF_DATA10;
    }
    else if ((result = !strncmp(data, "_1_ENET_TX_DATA0", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE::_1_ENET_TX_DATA0;
    }
    else if ((result = !strncmp(data, "_2_pit1_TRIGGER3", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE::_2_pit1_TRIGGER3;
    }
    else if ((result = !strncmp(data, "_3_ARM_TRACE0", 13)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE::_3_ARM_TRACE0;
    }
    else if ((result = !strncmp(data, "_4_sai1_TX_DATA1", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE::_4_sai1_TX_DATA1;
    }
    else if ((result = !strncmp(data, "_5_gpio_mux5_IO3", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE::_5_gpio_mux5_IO3;
    }
    else if ((result = !strncmp(data, "_6_src_BT_CFG8", 14)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE::_6_src_BT_CFG8;
    }
    else if ((result = !strncmp(data, "_8_ENET_QOS_TX_DATA0", 20)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE::
            _8_ENET_QOS_TX_DATA0;
    }
    else if ((result = !strncmp(data, "_10_gpio11_IO3", 14)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_02_MUX_MODE::_10_gpio11_IO3;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
