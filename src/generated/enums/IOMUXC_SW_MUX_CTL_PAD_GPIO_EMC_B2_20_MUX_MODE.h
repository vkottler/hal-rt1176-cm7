/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE : uint8_t
{
    _0_semc_CLKX1 /*!< Select mux mode: ALT0 mux port: SEMC_CLKX01 of instance:
                     SEMC */
        ,
    _1_enet_MDIO =
        1 /*!< Select mux mode: ALT1 mux port: ENET_MDIO of instance: ENET */,
    _2_enet_1g_MDIO = 2 /*!< Select mux mode: ALT2 mux port: ENET_1G_MDIO of
                           instance: ENET_1G */
        ,
    _3_CCM_enet_qos_clock_generate_REF_CLK =
        3 /*!< Select mux mode: ALT3 mux port: ENET_QOS_REF_CLK of instance:
             ENET_QOS */
        ,
    _4_flexspi2_A_DATA7 = 4 /*!< Select mux mode: ALT4 mux port:
                               FLEXSPI2_A_DATA07 of instance: FLEXSPI2 */
        ,
    _5_gpio_mux2_IO30 = 5 /*!< Select mux mode: ALT5 mux port: GPIO_MUX2_IO30
                             of instance: GPIO_MUX2 */
        ,
    _8_enet_qos_MDIO = 8 /*!< Select mux mode: ALT8 mux port: ENET_QOS_MDIO of
                            instance: ENET_QOS */
        ,
    _9_qtimer3_TIMER3 =
        9 /*!< Select mux mode: ALT9 mux port: TMR3_TIMER3 of instance: TMR3 */
        ,
    _10_gpio8_IO30 = 10 /*!< Select mux mode: ALT10 mux port: GPIO8_IO30 of
                           instance: GPIO8 */
};
static_assert(sizeof(IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE) == 1);

/**
 * Converts IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(
    IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE instance)
{
    const char *result =
        "UNKNOWN IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE";

    switch (instance)
    {
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE::_0_semc_CLKX1:
        result = "_0_semc_CLKX1";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE::_1_enet_MDIO:
        result = "_1_enet_MDIO";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE::_2_enet_1g_MDIO:
        result = "_2_enet_1g_MDIO";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE::
        _3_CCM_enet_qos_clock_generate_REF_CLK:
        result = "_3_CCM_enet_qos_clock_generate_REF_CLK";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE::_4_flexspi2_A_DATA7:
        result = "_4_flexspi2_A_DATA7";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE::_5_gpio_mux2_IO30:
        result = "_5_gpio_mux2_IO30";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE::_8_enet_qos_MDIO:
        result = "_8_enet_qos_MDIO";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE::_9_qtimer3_TIMER3:
        result = "_9_qtimer3_TIMER3";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE::_10_gpio8_IO30:
        result = "_10_gpio8_IO30";
        break;
    }

    return result;
}

/**
 * Converts a C string to IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0_semc_CLKX1", 13)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE::_0_semc_CLKX1;
    }
    else if ((result = !strncmp(data, "_1_enet_MDIO", 12)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE::_1_enet_MDIO;
    }
    else if ((result = !strncmp(data, "_2_enet_1g_MDIO", 15)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE::_2_enet_1g_MDIO;
    }
    else if ((result = !strncmp(data, "_3_CCM_enet_qos_clock_generate_REF_CLK",
                                38)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE::
            _3_CCM_enet_qos_clock_generate_REF_CLK;
    }
    else if ((result = !strncmp(data, "_4_flexspi2_A_DATA7", 19)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE::_4_flexspi2_A_DATA7;
    }
    else if ((result = !strncmp(data, "_5_gpio_mux2_IO30", 17)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE::_5_gpio_mux2_IO30;
    }
    else if ((result = !strncmp(data, "_8_enet_qos_MDIO", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE::_8_enet_qos_MDIO;
    }
    else if ((result = !strncmp(data, "_9_qtimer3_TIMER3", 17)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE::_9_qtimer3_TIMER3;
    }
    else if ((result = !strncmp(data, "_10_gpio8_IO30", 14)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_20_MUX_MODE::_10_gpio8_IO30;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
