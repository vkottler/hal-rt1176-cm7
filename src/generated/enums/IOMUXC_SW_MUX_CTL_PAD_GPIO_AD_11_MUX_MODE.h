/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE : uint8_t
{
    _0_usb_OTG1_OC /*!< Select mux mode: ALT0 mux port: USB_OTG1_OC of
                      instance: USB */
        ,
    _1_lpi2c1_SDAS = 1 /*!< Select mux mode: ALT1 mux port: LPI2C1_SDAS of
                          instance: LPI2C1 */
        ,
    _2_EMVSIM2_POWER_FAIL = 2 /*!< Select mux mode: ALT2 mux port:
                                 EMVSIM2_POWER_FAIL of instance: EMVSIM2 */
        ,
    _3_gpt3_CLK =
        3 /*!< Select mux mode: ALT3 mux port: GPT3_CLK of instance: GPT3 */,
    _4_video_mux_CSI_DATA10 =
        4 /*!< Select mux mode: ALT4 mux port: VIDEO_MUX_CSI_DATA10 of
             instance: VIDEO_MUX */
        ,
    _5_gpio_mux3_IO10 = 5 /*!< Select mux mode: ALT5 mux port: GPIO_MUX3_IO10
                             of instance: GPIO_MUX3 */
        ,
    _6_enet_1588_EVENT3_OUT = 6 /*!< Select mux mode: ALT6 mux port:
                                   ENET_1588_EVENT3_OUT of instance: ENET */
        ,
    _8_flexio2_FLEXIO11 = 8 /*!< Select mux mode: ALT8 mux port: FLEXIO2_D11 of
                               instance: FLEXIO2 */
        ,
    _10_gpio9_IO10 = 10 /*!< Select mux mode: ALT10 mux port: GPIO9_IO10 of
                           instance: GPIO9 */
        ,
    _11_flexpwm2_PWMX1 = 11 /*!< Select mux mode: ALT11 mux port:
                               FLEXPWM2_PWM1_X of instance: FLEXPWM2 */
};
static_assert(sizeof(IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE) == 1);

/**
 * Converts IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(
    IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE instance)
{
    const char *result = "UNKNOWN IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE";

    switch (instance)
    {
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE::_0_usb_OTG1_OC:
        result = "_0_usb_OTG1_OC";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE::_1_lpi2c1_SDAS:
        result = "_1_lpi2c1_SDAS";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE::_2_EMVSIM2_POWER_FAIL:
        result = "_2_EMVSIM2_POWER_FAIL";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE::_3_gpt3_CLK:
        result = "_3_gpt3_CLK";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE::_4_video_mux_CSI_DATA10:
        result = "_4_video_mux_CSI_DATA10";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE::_5_gpio_mux3_IO10:
        result = "_5_gpio_mux3_IO10";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE::_6_enet_1588_EVENT3_OUT:
        result = "_6_enet_1588_EVENT3_OUT";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE::_8_flexio2_FLEXIO11:
        result = "_8_flexio2_FLEXIO11";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE::_10_gpio9_IO10:
        result = "_10_gpio9_IO10";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE::_11_flexpwm2_PWMX1:
        result = "_11_flexpwm2_PWMX1";
        break;
    }

    return result;
}

/**
 * Converts a C string to IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0_usb_OTG1_OC", 14)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE::_0_usb_OTG1_OC;
    }
    else if ((result = !strncmp(data, "_1_lpi2c1_SDAS", 14)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE::_1_lpi2c1_SDAS;
    }
    else if ((result = !strncmp(data, "_2_EMVSIM2_POWER_FAIL", 21)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE::_2_EMVSIM2_POWER_FAIL;
    }
    else if ((result = !strncmp(data, "_3_gpt3_CLK", 11)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE::_3_gpt3_CLK;
    }
    else if ((result = !strncmp(data, "_4_video_mux_CSI_DATA10", 23)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE::_4_video_mux_CSI_DATA10;
    }
    else if ((result = !strncmp(data, "_5_gpio_mux3_IO10", 17)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE::_5_gpio_mux3_IO10;
    }
    else if ((result = !strncmp(data, "_6_enet_1588_EVENT3_OUT", 23)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE::_6_enet_1588_EVENT3_OUT;
    }
    else if ((result = !strncmp(data, "_8_flexio2_FLEXIO11", 19)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE::_8_flexio2_FLEXIO11;
    }
    else if ((result = !strncmp(data, "_10_gpio9_IO10", 14)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE::_10_gpio9_IO10;
    }
    else if ((result = !strncmp(data, "_11_flexpwm2_PWMX1", 18)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_11_MUX_MODE::_11_flexpwm2_PWMX1;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
