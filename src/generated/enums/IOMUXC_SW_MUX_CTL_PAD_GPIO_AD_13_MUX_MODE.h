/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE : uint8_t
{
    _0_spdif_SR_CLK /*!< Select mux mode: ALT0 mux port: SPDIF_SR_CLK of
                       instance: SPDIF */
        ,
    _1_pit1_TRIGGER0 = 1 /*!< Select mux mode: ALT1 mux port: PIT1_TRIGGER0 of
                            instance: PIT1 */
        ,
    _2_gpt1_CAPTURE2 = 2 /*!< Select mux mode: ALT2 mux port: GPT1_CAPTURE2 of
                            instance: GPT1 */
        ,
    _3_flexspi1_B_DATA2 = 3 /*!< Select mux mode: ALT3 mux port:
                               FLEXSPI1_B_DATA02 of instance: FLEXSPI1 */
        ,
    _4_video_mux_CSI_MCLK = 4 /*!< Select mux mode: ALT4 mux port:
                                 VIDEO_MUX_CSI_MCLK of instance: VIDEO_MUX */
        ,
    _5_gpio_mux3_IO12 = 5 /*!< Select mux mode: ALT5 mux port: GPIO_MUX3_IO12
                             of instance: GPIO_MUX3 */
        ,
    _6_ENET_TX_DATA2 = 6 /*!< Select mux mode: ALT6 mux port: ENET_TX_DATA02 of
                            instance: ENET */
        ,
    _8_flexio2_FLEXIO13 = 8 /*!< Select mux mode: ALT8 mux port: FLEXIO2_D13 of
                               instance: FLEXIO2 */
        ,
    _9_anatop_32K_OUT = 9 /*!< Select mux mode: ALT9 mux port: REF_CLK_32K of
                             instance: XTAL OSC */
        ,
    _10_gpio9_IO12 = 10 /*!< Select mux mode: ALT10 mux port: GPIO9_IO12 of
                           instance: GPIO9 */
        ,
    _11_flexpwm2_PWMX3 = 11 /*!< Select mux mode: ALT11 mux port:
                               FLEXPWM2_PWM3_X of instance: FLEXPWM2 */
};
static_assert(sizeof(IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE) == 1);

/**
 * Converts IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(
    IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE instance)
{
    const char *result = "UNKNOWN IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE";

    switch (instance)
    {
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_0_spdif_SR_CLK:
        result = "_0_spdif_SR_CLK";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_1_pit1_TRIGGER0:
        result = "_1_pit1_TRIGGER0";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_2_gpt1_CAPTURE2:
        result = "_2_gpt1_CAPTURE2";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_3_flexspi1_B_DATA2:
        result = "_3_flexspi1_B_DATA2";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_4_video_mux_CSI_MCLK:
        result = "_4_video_mux_CSI_MCLK";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_5_gpio_mux3_IO12:
        result = "_5_gpio_mux3_IO12";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_6_ENET_TX_DATA2:
        result = "_6_ENET_TX_DATA2";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_8_flexio2_FLEXIO13:
        result = "_8_flexio2_FLEXIO13";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_9_anatop_32K_OUT:
        result = "_9_anatop_32K_OUT";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_10_gpio9_IO12:
        result = "_10_gpio9_IO12";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_11_flexpwm2_PWMX3:
        result = "_11_flexpwm2_PWMX3";
        break;
    }

    return result;
}

/**
 * Converts a C string to IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0_spdif_SR_CLK", 15)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_0_spdif_SR_CLK;
    }
    else if ((result = !strncmp(data, "_1_pit1_TRIGGER0", 16)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_1_pit1_TRIGGER0;
    }
    else if ((result = !strncmp(data, "_2_gpt1_CAPTURE2", 16)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_2_gpt1_CAPTURE2;
    }
    else if ((result = !strncmp(data, "_3_flexspi1_B_DATA2", 19)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_3_flexspi1_B_DATA2;
    }
    else if ((result = !strncmp(data, "_4_video_mux_CSI_MCLK", 21)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_4_video_mux_CSI_MCLK;
    }
    else if ((result = !strncmp(data, "_5_gpio_mux3_IO12", 17)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_5_gpio_mux3_IO12;
    }
    else if ((result = !strncmp(data, "_6_ENET_TX_DATA2", 16)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_6_ENET_TX_DATA2;
    }
    else if ((result = !strncmp(data, "_8_flexio2_FLEXIO13", 19)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_8_flexio2_FLEXIO13;
    }
    else if ((result = !strncmp(data, "_9_anatop_32K_OUT", 17)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_9_anatop_32K_OUT;
    }
    else if ((result = !strncmp(data, "_10_gpio9_IO12", 14)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_10_gpio9_IO12;
    }
    else if ((result = !strncmp(data, "_11_flexpwm2_PWMX3", 18)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_13_MUX_MODE::_11_flexpwm2_PWMX3;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
