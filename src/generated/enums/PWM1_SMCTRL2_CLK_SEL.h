/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class PWM1_SMCTRL2_CLK_SEL : uint8_t
{
    IPBUS /*!< The IPBus clock is used as the clock for the local prescaler and
             counter. */
        ,
    EXT_CLK = 1 /*!< EXT_CLK is used as the clock for the local prescaler and
                   counter. */
        ,
    AUX_CLK =
        2 /*!< Submodule 0's clock (AUX_CLK) is used as the source clock for
             the local prescaler and counter. This setting should not be used
             in submodule 0 as it will force the clock to logic 0. */
};
static_assert(sizeof(PWM1_SMCTRL2_CLK_SEL) == 1);

/**
 * Converts PWM1_SMCTRL2_CLK_SEL to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PWM1_SMCTRL2_CLK_SEL instance)
{
    const char *result = "UNKNOWN PWM1_SMCTRL2_CLK_SEL";

    switch (instance)
    {
    case PWM1_SMCTRL2_CLK_SEL::IPBUS:
        result = "IPBUS";
        break;
    case PWM1_SMCTRL2_CLK_SEL::EXT_CLK:
        result = "EXT_CLK";
        break;
    case PWM1_SMCTRL2_CLK_SEL::AUX_CLK:
        result = "AUX_CLK";
        break;
    }

    return result;
}

/**
 * Converts a C string to PWM1_SMCTRL2_CLK_SEL.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PWM1_SMCTRL2_CLK_SEL &output)
{
    bool result = false;

    if ((result = !strncmp(data, "IPBUS", 5)))
    {
        output = PWM1_SMCTRL2_CLK_SEL::IPBUS;
    }
    else if ((result = !strncmp(data, "EXT_CLK", 7)))
    {
        output = PWM1_SMCTRL2_CLK_SEL::EXT_CLK;
    }
    else if ((result = !strncmp(data, "AUX_CLK", 7)))
    {
        output = PWM1_SMCTRL2_CLK_SEL::AUX_CLK;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
