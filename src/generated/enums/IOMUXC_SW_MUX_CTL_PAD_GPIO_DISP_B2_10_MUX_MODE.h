/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE : uint8_t
{
    _0_video_mux_LCDIF_DATA18 /*!< Select mux mode: ALT0 mux port:
                                 VIDEO_MUX_LCDIF_DATA18 of instance: VIDEO_MUX
                               */
        ,
    _1_EMVSIM2_TRXD = 1 /*!< Select mux mode: ALT1 mux port: EMVSIM2_IO of
                           instance: EMVSIM2 */
        ,
    _2_lpuart2_TX = 2 /*!< Select mux mode: ALT2 mux port: LPUART2_TXD of
                         instance: LPUART2 */
        ,
    _3_WDOG2_RESET_B_DEB = 3 /*!< Select mux mode: ALT3 mux port:
                                WDOG2_RESET_B_DEB of instance: WDOG2 */
        ,
    _4_XBAR1_INOUT38 = 4 /*!< Select mux mode: ALT4 mux port: XBAR1_INOUT38 of
                            instance: XBAR1 */
        ,
    _5_gpio_mux5_IO11 = 5 /*!< Select mux mode: ALT5 mux port: GPIO_MUX5_IO11
                             of instance: GPIO_MUX5 */
        ,
    _6_lpi2c3_SCL = 6 /*!< Select mux mode: ALT6 mux port: LPI2C3_SCL of
                         instance: LPI2C3 */
        ,
    _8_enet_qos_RX_ER = 8 /*!< Select mux mode: ALT8 mux port: ENET_QOS_RX_ER
                             of instance: ENET_QOS */
        ,
    _9_spdif_IN =
        9 /*!< Select mux mode: ALT9 mux port: SPDIF_IN of instance: SPDIF */,
    _10_gpio11_IO11 = 10 /*!< Select mux mode: ALT10 mux port: GPIO11_IO11 of
                            instance: GPIO11 */
};
static_assert(sizeof(IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE) == 1);

/**
 * Converts IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(
    IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE instance)
{
    const char *result =
        "UNKNOWN IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE";

    switch (instance)
    {
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE::
        _0_video_mux_LCDIF_DATA18:
        result = "_0_video_mux_LCDIF_DATA18";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE::_1_EMVSIM2_TRXD:
        result = "_1_EMVSIM2_TRXD";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE::_2_lpuart2_TX:
        result = "_2_lpuart2_TX";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE::_3_WDOG2_RESET_B_DEB:
        result = "_3_WDOG2_RESET_B_DEB";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE::_4_XBAR1_INOUT38:
        result = "_4_XBAR1_INOUT38";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE::_5_gpio_mux5_IO11:
        result = "_5_gpio_mux5_IO11";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE::_6_lpi2c3_SCL:
        result = "_6_lpi2c3_SCL";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE::_8_enet_qos_RX_ER:
        result = "_8_enet_qos_RX_ER";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE::_9_spdif_IN:
        result = "_9_spdif_IN";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE::_10_gpio11_IO11:
        result = "_10_gpio11_IO11";
        break;
    }

    return result;
}

/**
 * Converts a C string to IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0_video_mux_LCDIF_DATA18", 25)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE::
            _0_video_mux_LCDIF_DATA18;
    }
    else if ((result = !strncmp(data, "_1_EMVSIM2_TRXD", 15)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE::_1_EMVSIM2_TRXD;
    }
    else if ((result = !strncmp(data, "_2_lpuart2_TX", 13)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE::_2_lpuart2_TX;
    }
    else if ((result = !strncmp(data, "_3_WDOG2_RESET_B_DEB", 20)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE::
            _3_WDOG2_RESET_B_DEB;
    }
    else if ((result = !strncmp(data, "_4_XBAR1_INOUT38", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE::_4_XBAR1_INOUT38;
    }
    else if ((result = !strncmp(data, "_5_gpio_mux5_IO11", 17)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE::_5_gpio_mux5_IO11;
    }
    else if ((result = !strncmp(data, "_6_lpi2c3_SCL", 13)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE::_6_lpi2c3_SCL;
    }
    else if ((result = !strncmp(data, "_8_enet_qos_RX_ER", 17)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE::_8_enet_qos_RX_ER;
    }
    else if ((result = !strncmp(data, "_9_spdif_IN", 11)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE::_9_spdif_IN;
    }
    else if ((result = !strncmp(data, "_10_gpio11_IO11", 15)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_10_MUX_MODE::_10_gpio11_IO11;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
