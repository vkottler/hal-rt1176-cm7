/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class TMR1_CTRL0_OUTMODE : uint8_t
{
    COUNTER_ACTIVE /*!< Asserted while counter is active */,
    CLEAR_OFLAG = 1 /*!< Clear OFLAG output on successful compare */,
    SET_OFLAG = 2 /*!< Set OFLAG output on successful compare */,
    TOGGLE_OFLAG_SUCCESS = 3 /*!< Toggle OFLAG output on successful compare */,
    TOGGLE_OFLAG_ALT =
        4 /*!< Toggle OFLAG output using alternating compare registers */,
    CLEAR_ON_SECONDARY =
        5 /*!< Set on compare, cleared on secondary source input edge */,
    CLEAR_ON_ROLLOVER = 6 /*!< Set on compare, cleared on counter rollover */,
    ENABLE_GATED_OUT =
        7 /*!< Enable gated clock output while counter is active */
};
static_assert(sizeof(TMR1_CTRL0_OUTMODE) == 1);

/**
 * Converts TMR1_CTRL0_OUTMODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(TMR1_CTRL0_OUTMODE instance)
{
    const char *result = "UNKNOWN TMR1_CTRL0_OUTMODE";

    switch (instance)
    {
    case TMR1_CTRL0_OUTMODE::COUNTER_ACTIVE:
        result = "COUNTER_ACTIVE";
        break;
    case TMR1_CTRL0_OUTMODE::CLEAR_OFLAG:
        result = "CLEAR_OFLAG";
        break;
    case TMR1_CTRL0_OUTMODE::SET_OFLAG:
        result = "SET_OFLAG";
        break;
    case TMR1_CTRL0_OUTMODE::TOGGLE_OFLAG_SUCCESS:
        result = "TOGGLE_OFLAG_SUCCESS";
        break;
    case TMR1_CTRL0_OUTMODE::TOGGLE_OFLAG_ALT:
        result = "TOGGLE_OFLAG_ALT";
        break;
    case TMR1_CTRL0_OUTMODE::CLEAR_ON_SECONDARY:
        result = "CLEAR_ON_SECONDARY";
        break;
    case TMR1_CTRL0_OUTMODE::CLEAR_ON_ROLLOVER:
        result = "CLEAR_ON_ROLLOVER";
        break;
    case TMR1_CTRL0_OUTMODE::ENABLE_GATED_OUT:
        result = "ENABLE_GATED_OUT";
        break;
    }

    return result;
}

/**
 * Converts a C string to TMR1_CTRL0_OUTMODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, TMR1_CTRL0_OUTMODE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "COUNTER_ACTIVE", 14)))
    {
        output = TMR1_CTRL0_OUTMODE::COUNTER_ACTIVE;
    }
    else if ((result = !strncmp(data, "CLEAR_OFLAG", 11)))
    {
        output = TMR1_CTRL0_OUTMODE::CLEAR_OFLAG;
    }
    else if ((result = !strncmp(data, "SET_OFLAG", 9)))
    {
        output = TMR1_CTRL0_OUTMODE::SET_OFLAG;
    }
    else if ((result = !strncmp(data, "TOGGLE_OFLAG_SUCCESS", 20)))
    {
        output = TMR1_CTRL0_OUTMODE::TOGGLE_OFLAG_SUCCESS;
    }
    else if ((result = !strncmp(data, "TOGGLE_OFLAG_ALT", 16)))
    {
        output = TMR1_CTRL0_OUTMODE::TOGGLE_OFLAG_ALT;
    }
    else if ((result = !strncmp(data, "CLEAR_ON_SECONDARY", 18)))
    {
        output = TMR1_CTRL0_OUTMODE::CLEAR_ON_SECONDARY;
    }
    else if ((result = !strncmp(data, "CLEAR_ON_ROLLOVER", 17)))
    {
        output = TMR1_CTRL0_OUTMODE::CLEAR_ON_ROLLOVER;
    }
    else if ((result = !strncmp(data, "ENABLE_GATED_OUT", 16)))
    {
        output = TMR1_CTRL0_OUTMODE::ENABLE_GATED_OUT;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
