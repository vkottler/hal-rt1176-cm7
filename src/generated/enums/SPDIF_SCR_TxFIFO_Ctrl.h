/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class SPDIF_SCR_TxFIFO_Ctrl : uint8_t
{
    send_zero /*!< Send out digital zero on SPDIF Tx */,
    normal = 1 /*!< Tx Normal operation */,
    reset_one = 2 /*!< Reset to 1 sample remaining */
};
static_assert(sizeof(SPDIF_SCR_TxFIFO_Ctrl) == 1);

/**
 * Converts SPDIF_SCR_TxFIFO_Ctrl to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(SPDIF_SCR_TxFIFO_Ctrl instance)
{
    const char *result = "UNKNOWN SPDIF_SCR_TxFIFO_Ctrl";

    switch (instance)
    {
    case SPDIF_SCR_TxFIFO_Ctrl::send_zero:
        result = "send_zero";
        break;
    case SPDIF_SCR_TxFIFO_Ctrl::normal:
        result = "normal";
        break;
    case SPDIF_SCR_TxFIFO_Ctrl::reset_one:
        result = "reset_one";
        break;
    }

    return result;
}

/**
 * Converts a C string to SPDIF_SCR_TxFIFO_Ctrl.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, SPDIF_SCR_TxFIFO_Ctrl &output)
{
    bool result = false;

    if ((result = !strncmp(data, "send_zero", 9)))
    {
        output = SPDIF_SCR_TxFIFO_Ctrl::send_zero;
    }
    else if ((result = !strncmp(data, "normal", 6)))
    {
        output = SPDIF_SCR_TxFIFO_Ctrl::normal;
    }
    else if ((result = !strncmp(data, "reset_one", 9)))
    {
        output = SPDIF_SCR_TxFIFO_Ctrl::reset_one;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
