/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class RDC_SEMAPHORE1_RSTGT_R_RSTGSM : uint8_t
{
    _0 /*!< Idle, waiting for the first data pattern write. */,
    _1 = 1 /*!< Waiting for the second data pattern write. */,
    _2 = 2 /*!< The 2-write sequence has completed. Generate the specified gate
              reset(s). After the reset is performed, this machine returns to
              the idle (waiting for first data pattern write) state. The "01"
              state persists for only one clock cycle. Software will never be
              able to observe this state. */
        ,
    _3 = 3 /*!< This state encoding is never used and therefore reserved. */
};
static_assert(sizeof(RDC_SEMAPHORE1_RSTGT_R_RSTGSM) == 1);

/**
 * Converts RDC_SEMAPHORE1_RSTGT_R_RSTGSM to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(RDC_SEMAPHORE1_RSTGT_R_RSTGSM instance)
{
    const char *result = "UNKNOWN RDC_SEMAPHORE1_RSTGT_R_RSTGSM";

    switch (instance)
    {
    case RDC_SEMAPHORE1_RSTGT_R_RSTGSM::_0:
        result = "_0";
        break;
    case RDC_SEMAPHORE1_RSTGT_R_RSTGSM::_1:
        result = "_1";
        break;
    case RDC_SEMAPHORE1_RSTGT_R_RSTGSM::_2:
        result = "_2";
        break;
    case RDC_SEMAPHORE1_RSTGT_R_RSTGSM::_3:
        result = "_3";
        break;
    }

    return result;
}

/**
 * Converts a C string to RDC_SEMAPHORE1_RSTGT_R_RSTGSM.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        RDC_SEMAPHORE1_RSTGT_R_RSTGSM &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0", 2)))
    {
        output = RDC_SEMAPHORE1_RSTGT_R_RSTGSM::_0;
    }
    else if ((result = !strncmp(data, "_1", 2)))
    {
        output = RDC_SEMAPHORE1_RSTGT_R_RSTGSM::_1;
    }
    else if ((result = !strncmp(data, "_2", 2)))
    {
        output = RDC_SEMAPHORE1_RSTGT_R_RSTGSM::_2;
    }
    else if ((result = !strncmp(data, "_3", 2)))
    {
        output = RDC_SEMAPHORE1_RSTGT_R_RSTGSM::_3;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
