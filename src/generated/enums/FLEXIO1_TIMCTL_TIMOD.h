/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class FLEXIO1_TIMCTL_TIMOD : uint8_t
{
    disable /*!< Timer Disabled. */,
    dual8bit_baud = 1 /*!< Dual 8-bit counters baud mode. */,
    dual8bit_pwm_h = 2 /*!< Dual 8-bit counters PWM high mode. */,
    single16bit = 3 /*!< Single 16-bit counter mode. */,
    single16bit_disable = 4 /*!< Single 16-bit counter disable mode. */,
    dual8bit_word = 5 /*!< Dual 8-bit counters word mode. */,
    dual8bit_pwm_l = 6 /*!< Dual 8-bit counters PWM low mode. */,
    single16bit_in_capture = 7 /*!< Single 16-bit input capture mode. */
};
static_assert(sizeof(FLEXIO1_TIMCTL_TIMOD) == 1);

/**
 * Converts FLEXIO1_TIMCTL_TIMOD to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(FLEXIO1_TIMCTL_TIMOD instance)
{
    const char *result = "UNKNOWN FLEXIO1_TIMCTL_TIMOD";

    switch (instance)
    {
    case FLEXIO1_TIMCTL_TIMOD::disable:
        result = "disable";
        break;
    case FLEXIO1_TIMCTL_TIMOD::dual8bit_baud:
        result = "dual8bit_baud";
        break;
    case FLEXIO1_TIMCTL_TIMOD::dual8bit_pwm_h:
        result = "dual8bit_pwm_h";
        break;
    case FLEXIO1_TIMCTL_TIMOD::single16bit:
        result = "single16bit";
        break;
    case FLEXIO1_TIMCTL_TIMOD::single16bit_disable:
        result = "single16bit_disable";
        break;
    case FLEXIO1_TIMCTL_TIMOD::dual8bit_word:
        result = "dual8bit_word";
        break;
    case FLEXIO1_TIMCTL_TIMOD::dual8bit_pwm_l:
        result = "dual8bit_pwm_l";
        break;
    case FLEXIO1_TIMCTL_TIMOD::single16bit_in_capture:
        result = "single16bit_in_capture";
        break;
    }

    return result;
}

/**
 * Converts a C string to FLEXIO1_TIMCTL_TIMOD.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, FLEXIO1_TIMCTL_TIMOD &output)
{
    bool result = false;

    if ((result = !strncmp(data, "disable", 7)))
    {
        output = FLEXIO1_TIMCTL_TIMOD::disable;
    }
    else if ((result = !strncmp(data, "dual8bit_baud", 13)))
    {
        output = FLEXIO1_TIMCTL_TIMOD::dual8bit_baud;
    }
    else if ((result = !strncmp(data, "dual8bit_pwm_h", 14)))
    {
        output = FLEXIO1_TIMCTL_TIMOD::dual8bit_pwm_h;
    }
    else if ((result = !strncmp(data, "single16bit", 11)))
    {
        output = FLEXIO1_TIMCTL_TIMOD::single16bit;
    }
    else if ((result = !strncmp(data, "single16bit_disable", 19)))
    {
        output = FLEXIO1_TIMCTL_TIMOD::single16bit_disable;
    }
    else if ((result = !strncmp(data, "dual8bit_word", 13)))
    {
        output = FLEXIO1_TIMCTL_TIMOD::dual8bit_word;
    }
    else if ((result = !strncmp(data, "dual8bit_pwm_l", 14)))
    {
        output = FLEXIO1_TIMCTL_TIMOD::dual8bit_pwm_l;
    }
    else if ((result = !strncmp(data, "single16bit_in_capture", 22)))
    {
        output = FLEXIO1_TIMCTL_TIMOD::single16bit_in_capture;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
