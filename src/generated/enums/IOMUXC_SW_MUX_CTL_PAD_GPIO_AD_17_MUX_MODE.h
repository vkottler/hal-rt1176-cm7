/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE : uint8_t
{
    _0_sai1_MCLK /*!< Select mux mode: ALT0 mux port: SAI1_MCLK of instance:
                    SAI1 */
        ,
    _1_ACMP1_OUT =
        1 /*!< Select mux mode: ALT1 mux port: ACMP1_OUT of instance: ACMP1 */,
    _2_gpt1_CLK =
        2 /*!< Select mux mode: ALT2 mux port: GPT1_CLK of instance: GPT1 */,
    _3_flexspi1_A_DQS = 3 /*!< Select mux mode: ALT3 mux port: FLEXSPI1_A_DQS
                             of instance: FLEXSPI1 */
        ,
    _4_video_mux_CSI_DATA8 =
        4 /*!< Select mux mode: ALT4 mux port: VIDEO_MUX_CSI_DATA08 of
             instance: VIDEO_MUX */
        ,
    _5_gpio_mux3_IO16 = 5 /*!< Select mux mode: ALT5 mux port: GPIO_MUX3_IO16
                             of instance: GPIO_MUX3 */
        ,
    _6_ENET_RX_DATA2 = 6 /*!< Select mux mode: ALT6 mux port: ENET_RX_DATA02 of
                            instance: ENET */
        ,
    _8_flexio2_FLEXIO17 = 8 /*!< Select mux mode: ALT8 mux port: FLEXIO2_D17 of
                               instance: FLEXIO2 */
        ,
    _9_enet_1g_MDIO = 9 /*!< Select mux mode: ALT9 mux port: ENET_1G_MDIO of
                           instance: ENET_1G */
        ,
    _10_gpio9_IO16 = 10 /*!< Select mux mode: ALT10 mux port: GPIO9_IO16 of
                           instance: GPIO9 */
        ,
    _11_flexpwm3_PWMX3 = 11 /*!< Select mux mode: ALT11 mux port:
                               FLEXPWM3_PWM3_X of instance: FLEXPWM3 */
};
static_assert(sizeof(IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE) == 1);

/**
 * Converts IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(
    IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE instance)
{
    const char *result = "UNKNOWN IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE";

    switch (instance)
    {
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_0_sai1_MCLK:
        result = "_0_sai1_MCLK";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_1_ACMP1_OUT:
        result = "_1_ACMP1_OUT";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_2_gpt1_CLK:
        result = "_2_gpt1_CLK";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_3_flexspi1_A_DQS:
        result = "_3_flexspi1_A_DQS";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_4_video_mux_CSI_DATA8:
        result = "_4_video_mux_CSI_DATA8";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_5_gpio_mux3_IO16:
        result = "_5_gpio_mux3_IO16";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_6_ENET_RX_DATA2:
        result = "_6_ENET_RX_DATA2";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_8_flexio2_FLEXIO17:
        result = "_8_flexio2_FLEXIO17";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_9_enet_1g_MDIO:
        result = "_9_enet_1g_MDIO";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_10_gpio9_IO16:
        result = "_10_gpio9_IO16";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_11_flexpwm3_PWMX3:
        result = "_11_flexpwm3_PWMX3";
        break;
    }

    return result;
}

/**
 * Converts a C string to IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0_sai1_MCLK", 12)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_0_sai1_MCLK;
    }
    else if ((result = !strncmp(data, "_1_ACMP1_OUT", 12)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_1_ACMP1_OUT;
    }
    else if ((result = !strncmp(data, "_2_gpt1_CLK", 11)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_2_gpt1_CLK;
    }
    else if ((result = !strncmp(data, "_3_flexspi1_A_DQS", 17)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_3_flexspi1_A_DQS;
    }
    else if ((result = !strncmp(data, "_4_video_mux_CSI_DATA8", 22)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_4_video_mux_CSI_DATA8;
    }
    else if ((result = !strncmp(data, "_5_gpio_mux3_IO16", 17)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_5_gpio_mux3_IO16;
    }
    else if ((result = !strncmp(data, "_6_ENET_RX_DATA2", 16)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_6_ENET_RX_DATA2;
    }
    else if ((result = !strncmp(data, "_8_flexio2_FLEXIO17", 19)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_8_flexio2_FLEXIO17;
    }
    else if ((result = !strncmp(data, "_9_enet_1g_MDIO", 15)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_9_enet_1g_MDIO;
    }
    else if ((result = !strncmp(data, "_10_gpio9_IO16", 14)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_10_gpio9_IO16;
    }
    else if ((result = !strncmp(data, "_11_flexpwm3_PWMX3", 18)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_17_MUX_MODE::_11_flexpwm3_PWMX3;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
