/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE : uint8_t
{
    _0_video_mux_LCDIF_DATA8 /*!< Select mux mode: ALT0 mux port:
                                VIDEO_MUX_LCDIF_DATA08 of instance: VIDEO_MUX
                              */
        ,
    _1_WDOG1_B =
        1 /*!< Select mux mode: ALT1 mux port: WDOG1_B of instance: WDOG1 */,
    _2_mqs_RIGHT =
        2 /*!< Select mux mode: ALT2 mux port: MQS_RIGHT of instance: MQS */,
    _3_enet_1g_TX_ER = 3 /*!< Select mux mode: ALT3 mux port: ENET_1G_TX_ER of
                            instance: ENET_1G */
        ,
    _4_sai1_TX_DATA3 = 4 /*!< Select mux mode: ALT4 mux port: SAI1_TX_DATA03 of
                            instance: SAI1 */
        ,
    _5_gpio_mux5_IO1 = 5 /*!< Select mux mode: ALT5 mux port: GPIO_MUX5_IO01 of
                            instance: GPIO_MUX5 */
        ,
    _6_src_BT_CFG6 =
        6 /*!< Select mux mode: ALT6 mux port: SRC_BT_CFG06 of instance: SRC */
        ,
    _8_enet_qos_TX_ER = 8 /*!< Select mux mode: ALT8 mux port: ENET_QOS_TX_ER
                             of instance: ENET_QOS */
        ,
    _10_gpio11_IO1 = 10 /*!< Select mux mode: ALT10 mux port: GPIO11_IO01 of
                           instance: GPIO11 */
};
static_assert(sizeof(IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE) == 1);

/**
 * Converts IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(
    IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE instance)
{
    const char *result =
        "UNKNOWN IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE";

    switch (instance)
    {
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE::
        _0_video_mux_LCDIF_DATA8:
        result = "_0_video_mux_LCDIF_DATA8";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE::_1_WDOG1_B:
        result = "_1_WDOG1_B";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE::_2_mqs_RIGHT:
        result = "_2_mqs_RIGHT";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE::_3_enet_1g_TX_ER:
        result = "_3_enet_1g_TX_ER";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE::_4_sai1_TX_DATA3:
        result = "_4_sai1_TX_DATA3";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE::_5_gpio_mux5_IO1:
        result = "_5_gpio_mux5_IO1";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE::_6_src_BT_CFG6:
        result = "_6_src_BT_CFG6";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE::_8_enet_qos_TX_ER:
        result = "_8_enet_qos_TX_ER";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE::_10_gpio11_IO1:
        result = "_10_gpio11_IO1";
        break;
    }

    return result;
}

/**
 * Converts a C string to IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0_video_mux_LCDIF_DATA8", 24)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE::
            _0_video_mux_LCDIF_DATA8;
    }
    else if ((result = !strncmp(data, "_1_WDOG1_B", 10)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE::_1_WDOG1_B;
    }
    else if ((result = !strncmp(data, "_2_mqs_RIGHT", 12)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE::_2_mqs_RIGHT;
    }
    else if ((result = !strncmp(data, "_3_enet_1g_TX_ER", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE::_3_enet_1g_TX_ER;
    }
    else if ((result = !strncmp(data, "_4_sai1_TX_DATA3", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE::_4_sai1_TX_DATA3;
    }
    else if ((result = !strncmp(data, "_5_gpio_mux5_IO1", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE::_5_gpio_mux5_IO1;
    }
    else if ((result = !strncmp(data, "_6_src_BT_CFG6", 14)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE::_6_src_BT_CFG6;
    }
    else if ((result = !strncmp(data, "_8_enet_qos_TX_ER", 17)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE::_8_enet_qos_TX_ER;
    }
    else if ((result = !strncmp(data, "_10_gpio11_IO1", 14)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_00_MUX_MODE::_10_gpio11_IO1;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
