/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class LPUART1_BAUD_OSR : uint8_t
{
    DEFAULT /*!< Writing 0 to this field results in an oversampling ratio of 16
             */
        ,
    OSR_4 = 3 /*!< Oversampling ratio of 4, requires BOTHEDGE to be set. */,
    OSR_5 = 4 /*!< Oversampling ratio of 5, requires BOTHEDGE to be set. */,
    OSR_6 = 5 /*!< Oversampling ratio of 6, requires BOTHEDGE to be set. */,
    OSR_7 = 6 /*!< Oversampling ratio of 7, requires BOTHEDGE to be set. */,
    OSR_8 = 7 /*!< Oversampling ratio of 8. */,
    OSR_9 = 8 /*!< Oversampling ratio of 9. */,
    OSR_10 = 9 /*!< Oversampling ratio of 10. */,
    OSR_11 = 10 /*!< Oversampling ratio of 11. */,
    OSR_12 = 11 /*!< Oversampling ratio of 12. */,
    OSR_13 = 12 /*!< Oversampling ratio of 13. */,
    OSR_14 = 13 /*!< Oversampling ratio of 14. */,
    OSR_15 = 14 /*!< Oversampling ratio of 15. */,
    OSR_16 = 15 /*!< Oversampling ratio of 16. */,
    OSR_17 = 16 /*!< Oversampling ratio of 17. */,
    OSR_18 = 17 /*!< Oversampling ratio of 18. */,
    OSR_19 = 18 /*!< Oversampling ratio of 19. */,
    OSR_20 = 19 /*!< Oversampling ratio of 20. */,
    OSR_21 = 20 /*!< Oversampling ratio of 21. */,
    OSR_22 = 21 /*!< Oversampling ratio of 22. */,
    OSR_23 = 22 /*!< Oversampling ratio of 23. */,
    OSR_24 = 23 /*!< Oversampling ratio of 24. */,
    OSR_25 = 24 /*!< Oversampling ratio of 25. */,
    OSR_26 = 25 /*!< Oversampling ratio of 26. */,
    OSR_27 = 26 /*!< Oversampling ratio of 27. */,
    OSR_28 = 27 /*!< Oversampling ratio of 28. */,
    OSR_29 = 28 /*!< Oversampling ratio of 29. */,
    OSR_30 = 29 /*!< Oversampling ratio of 30. */,
    OSR_31 = 30 /*!< Oversampling ratio of 31. */,
    OSR_32 = 31 /*!< Oversampling ratio of 32. */
};
static_assert(sizeof(LPUART1_BAUD_OSR) == 1);

/**
 * Converts LPUART1_BAUD_OSR to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(LPUART1_BAUD_OSR instance)
{
    const char *result = "UNKNOWN LPUART1_BAUD_OSR";

    switch (instance)
    {
    case LPUART1_BAUD_OSR::DEFAULT:
        result = "DEFAULT";
        break;
    case LPUART1_BAUD_OSR::OSR_4:
        result = "OSR_4";
        break;
    case LPUART1_BAUD_OSR::OSR_5:
        result = "OSR_5";
        break;
    case LPUART1_BAUD_OSR::OSR_6:
        result = "OSR_6";
        break;
    case LPUART1_BAUD_OSR::OSR_7:
        result = "OSR_7";
        break;
    case LPUART1_BAUD_OSR::OSR_8:
        result = "OSR_8";
        break;
    case LPUART1_BAUD_OSR::OSR_9:
        result = "OSR_9";
        break;
    case LPUART1_BAUD_OSR::OSR_10:
        result = "OSR_10";
        break;
    case LPUART1_BAUD_OSR::OSR_11:
        result = "OSR_11";
        break;
    case LPUART1_BAUD_OSR::OSR_12:
        result = "OSR_12";
        break;
    case LPUART1_BAUD_OSR::OSR_13:
        result = "OSR_13";
        break;
    case LPUART1_BAUD_OSR::OSR_14:
        result = "OSR_14";
        break;
    case LPUART1_BAUD_OSR::OSR_15:
        result = "OSR_15";
        break;
    case LPUART1_BAUD_OSR::OSR_16:
        result = "OSR_16";
        break;
    case LPUART1_BAUD_OSR::OSR_17:
        result = "OSR_17";
        break;
    case LPUART1_BAUD_OSR::OSR_18:
        result = "OSR_18";
        break;
    case LPUART1_BAUD_OSR::OSR_19:
        result = "OSR_19";
        break;
    case LPUART1_BAUD_OSR::OSR_20:
        result = "OSR_20";
        break;
    case LPUART1_BAUD_OSR::OSR_21:
        result = "OSR_21";
        break;
    case LPUART1_BAUD_OSR::OSR_22:
        result = "OSR_22";
        break;
    case LPUART1_BAUD_OSR::OSR_23:
        result = "OSR_23";
        break;
    case LPUART1_BAUD_OSR::OSR_24:
        result = "OSR_24";
        break;
    case LPUART1_BAUD_OSR::OSR_25:
        result = "OSR_25";
        break;
    case LPUART1_BAUD_OSR::OSR_26:
        result = "OSR_26";
        break;
    case LPUART1_BAUD_OSR::OSR_27:
        result = "OSR_27";
        break;
    case LPUART1_BAUD_OSR::OSR_28:
        result = "OSR_28";
        break;
    case LPUART1_BAUD_OSR::OSR_29:
        result = "OSR_29";
        break;
    case LPUART1_BAUD_OSR::OSR_30:
        result = "OSR_30";
        break;
    case LPUART1_BAUD_OSR::OSR_31:
        result = "OSR_31";
        break;
    case LPUART1_BAUD_OSR::OSR_32:
        result = "OSR_32";
        break;
    }

    return result;
}

/**
 * Converts a C string to LPUART1_BAUD_OSR.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, LPUART1_BAUD_OSR &output)
{
    bool result = false;

    if ((result = !strncmp(data, "DEFAULT", 7)))
    {
        output = LPUART1_BAUD_OSR::DEFAULT;
    }
    else if ((result = !strncmp(data, "OSR_4", 5)))
    {
        output = LPUART1_BAUD_OSR::OSR_4;
    }
    else if ((result = !strncmp(data, "OSR_5", 5)))
    {
        output = LPUART1_BAUD_OSR::OSR_5;
    }
    else if ((result = !strncmp(data, "OSR_6", 5)))
    {
        output = LPUART1_BAUD_OSR::OSR_6;
    }
    else if ((result = !strncmp(data, "OSR_7", 5)))
    {
        output = LPUART1_BAUD_OSR::OSR_7;
    }
    else if ((result = !strncmp(data, "OSR_8", 5)))
    {
        output = LPUART1_BAUD_OSR::OSR_8;
    }
    else if ((result = !strncmp(data, "OSR_9", 5)))
    {
        output = LPUART1_BAUD_OSR::OSR_9;
    }
    else if ((result = !strncmp(data, "OSR_10", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_10;
    }
    else if ((result = !strncmp(data, "OSR_11", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_11;
    }
    else if ((result = !strncmp(data, "OSR_12", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_12;
    }
    else if ((result = !strncmp(data, "OSR_13", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_13;
    }
    else if ((result = !strncmp(data, "OSR_14", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_14;
    }
    else if ((result = !strncmp(data, "OSR_15", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_15;
    }
    else if ((result = !strncmp(data, "OSR_16", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_16;
    }
    else if ((result = !strncmp(data, "OSR_17", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_17;
    }
    else if ((result = !strncmp(data, "OSR_18", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_18;
    }
    else if ((result = !strncmp(data, "OSR_19", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_19;
    }
    else if ((result = !strncmp(data, "OSR_20", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_20;
    }
    else if ((result = !strncmp(data, "OSR_21", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_21;
    }
    else if ((result = !strncmp(data, "OSR_22", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_22;
    }
    else if ((result = !strncmp(data, "OSR_23", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_23;
    }
    else if ((result = !strncmp(data, "OSR_24", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_24;
    }
    else if ((result = !strncmp(data, "OSR_25", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_25;
    }
    else if ((result = !strncmp(data, "OSR_26", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_26;
    }
    else if ((result = !strncmp(data, "OSR_27", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_27;
    }
    else if ((result = !strncmp(data, "OSR_28", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_28;
    }
    else if ((result = !strncmp(data, "OSR_29", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_29;
    }
    else if ((result = !strncmp(data, "OSR_30", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_30;
    }
    else if ((result = !strncmp(data, "OSR_31", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_31;
    }
    else if ((result = !strncmp(data, "OSR_32", 6)))
    {
        output = LPUART1_BAUD_OSR::OSR_32;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
