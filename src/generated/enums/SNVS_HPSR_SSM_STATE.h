/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class SNVS_HPSR_SSM_STATE : uint8_t
{
    INIT /*!< Init */,
    HARD_FAIL = 1 /*!< Hard Fail */,
    SOFT_FAIL = 3 /*!< Soft Fail */,
    INTERMEDIATE =
        8 /*!< Init Intermediate (transition state between Init and Check - SSM
             stays in this state only one clock cycle) */
        ,
    CHECK = 9 /*!< Check */,
    NON_SECURE = 11 /*!< Non-Secure */,
    TRUSTED = 13 /*!< Trusted */,
    SECURE = 15 /*!< Secure */
};
static_assert(sizeof(SNVS_HPSR_SSM_STATE) == 1);

/**
 * Converts SNVS_HPSR_SSM_STATE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(SNVS_HPSR_SSM_STATE instance)
{
    const char *result = "UNKNOWN SNVS_HPSR_SSM_STATE";

    switch (instance)
    {
    case SNVS_HPSR_SSM_STATE::INIT:
        result = "INIT";
        break;
    case SNVS_HPSR_SSM_STATE::HARD_FAIL:
        result = "HARD_FAIL";
        break;
    case SNVS_HPSR_SSM_STATE::SOFT_FAIL:
        result = "SOFT_FAIL";
        break;
    case SNVS_HPSR_SSM_STATE::INTERMEDIATE:
        result = "INTERMEDIATE";
        break;
    case SNVS_HPSR_SSM_STATE::CHECK:
        result = "CHECK";
        break;
    case SNVS_HPSR_SSM_STATE::NON_SECURE:
        result = "NON_SECURE";
        break;
    case SNVS_HPSR_SSM_STATE::TRUSTED:
        result = "TRUSTED";
        break;
    case SNVS_HPSR_SSM_STATE::SECURE:
        result = "SECURE";
        break;
    }

    return result;
}

/**
 * Converts a C string to SNVS_HPSR_SSM_STATE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, SNVS_HPSR_SSM_STATE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "INIT", 4)))
    {
        output = SNVS_HPSR_SSM_STATE::INIT;
    }
    else if ((result = !strncmp(data, "HARD_FAIL", 9)))
    {
        output = SNVS_HPSR_SSM_STATE::HARD_FAIL;
    }
    else if ((result = !strncmp(data, "SOFT_FAIL", 9)))
    {
        output = SNVS_HPSR_SSM_STATE::SOFT_FAIL;
    }
    else if ((result = !strncmp(data, "INTERMEDIATE", 12)))
    {
        output = SNVS_HPSR_SSM_STATE::INTERMEDIATE;
    }
    else if ((result = !strncmp(data, "CHECK", 5)))
    {
        output = SNVS_HPSR_SSM_STATE::CHECK;
    }
    else if ((result = !strncmp(data, "NON_SECURE", 10)))
    {
        output = SNVS_HPSR_SSM_STATE::NON_SECURE;
    }
    else if ((result = !strncmp(data, "TRUSTED", 7)))
    {
        output = SNVS_HPSR_SSM_STATE::TRUSTED;
    }
    else if ((result = !strncmp(data, "SECURE", 6)))
    {
        output = SNVS_HPSR_SSM_STATE::SECURE;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
