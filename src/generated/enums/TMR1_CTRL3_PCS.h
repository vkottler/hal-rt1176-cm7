/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class TMR1_CTRL3_PCS : uint8_t
{
    COUNTER0_IN /*!< Counter 0 input pin */,
    COUNTER1_IN = 1 /*!< Counter 1 input pin */,
    COUNTER2_IN = 2 /*!< Counter 2 input pin */,
    COUNTER3_IN = 3 /*!< Counter 3 input pin */,
    COUNTER0_OUT = 4 /*!< Counter 0 output */,
    COUNTER1_OUT = 5 /*!< Counter 1 output */,
    COUNTER2_OUT = 6 /*!< Counter 2 output */,
    COUNTER3_OUT = 7 /*!< Counter 3 output */,
    BUS_DIVBY1 = 8 /*!< IP bus clock divide by 1 prescaler */,
    BUS_DIVBY2 = 9 /*!< IP bus clock divide by 2 prescaler */,
    BUS_DIVBY4 = 10 /*!< IP bus clock divide by 4 prescaler */,
    BUS_DIVBY8 = 11 /*!< IP bus clock divide by 8 prescaler */,
    BUS_DIVBY16 = 12 /*!< IP bus clock divide by 16 prescaler */,
    BUS_DIVBY32 = 13 /*!< IP bus clock divide by 32 prescaler */,
    BUS_DIVBY64 = 14 /*!< IP bus clock divide by 64 prescaler */,
    BUS_DIVBY128 = 15 /*!< IP bus clock divide by 128 prescaler */
};
static_assert(sizeof(TMR1_CTRL3_PCS) == 1);

/**
 * Converts TMR1_CTRL3_PCS to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(TMR1_CTRL3_PCS instance)
{
    const char *result = "UNKNOWN TMR1_CTRL3_PCS";

    switch (instance)
    {
    case TMR1_CTRL3_PCS::COUNTER0_IN:
        result = "COUNTER0_IN";
        break;
    case TMR1_CTRL3_PCS::COUNTER1_IN:
        result = "COUNTER1_IN";
        break;
    case TMR1_CTRL3_PCS::COUNTER2_IN:
        result = "COUNTER2_IN";
        break;
    case TMR1_CTRL3_PCS::COUNTER3_IN:
        result = "COUNTER3_IN";
        break;
    case TMR1_CTRL3_PCS::COUNTER0_OUT:
        result = "COUNTER0_OUT";
        break;
    case TMR1_CTRL3_PCS::COUNTER1_OUT:
        result = "COUNTER1_OUT";
        break;
    case TMR1_CTRL3_PCS::COUNTER2_OUT:
        result = "COUNTER2_OUT";
        break;
    case TMR1_CTRL3_PCS::COUNTER3_OUT:
        result = "COUNTER3_OUT";
        break;
    case TMR1_CTRL3_PCS::BUS_DIVBY1:
        result = "BUS_DIVBY1";
        break;
    case TMR1_CTRL3_PCS::BUS_DIVBY2:
        result = "BUS_DIVBY2";
        break;
    case TMR1_CTRL3_PCS::BUS_DIVBY4:
        result = "BUS_DIVBY4";
        break;
    case TMR1_CTRL3_PCS::BUS_DIVBY8:
        result = "BUS_DIVBY8";
        break;
    case TMR1_CTRL3_PCS::BUS_DIVBY16:
        result = "BUS_DIVBY16";
        break;
    case TMR1_CTRL3_PCS::BUS_DIVBY32:
        result = "BUS_DIVBY32";
        break;
    case TMR1_CTRL3_PCS::BUS_DIVBY64:
        result = "BUS_DIVBY64";
        break;
    case TMR1_CTRL3_PCS::BUS_DIVBY128:
        result = "BUS_DIVBY128";
        break;
    }

    return result;
}

/**
 * Converts a C string to TMR1_CTRL3_PCS.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, TMR1_CTRL3_PCS &output)
{
    bool result = false;

    if ((result = !strncmp(data, "COUNTER0_IN", 11)))
    {
        output = TMR1_CTRL3_PCS::COUNTER0_IN;
    }
    else if ((result = !strncmp(data, "COUNTER1_IN", 11)))
    {
        output = TMR1_CTRL3_PCS::COUNTER1_IN;
    }
    else if ((result = !strncmp(data, "COUNTER2_IN", 11)))
    {
        output = TMR1_CTRL3_PCS::COUNTER2_IN;
    }
    else if ((result = !strncmp(data, "COUNTER3_IN", 11)))
    {
        output = TMR1_CTRL3_PCS::COUNTER3_IN;
    }
    else if ((result = !strncmp(data, "COUNTER0_OUT", 12)))
    {
        output = TMR1_CTRL3_PCS::COUNTER0_OUT;
    }
    else if ((result = !strncmp(data, "COUNTER1_OUT", 12)))
    {
        output = TMR1_CTRL3_PCS::COUNTER1_OUT;
    }
    else if ((result = !strncmp(data, "COUNTER2_OUT", 12)))
    {
        output = TMR1_CTRL3_PCS::COUNTER2_OUT;
    }
    else if ((result = !strncmp(data, "COUNTER3_OUT", 12)))
    {
        output = TMR1_CTRL3_PCS::COUNTER3_OUT;
    }
    else if ((result = !strncmp(data, "BUS_DIVBY1", 10)))
    {
        output = TMR1_CTRL3_PCS::BUS_DIVBY1;
    }
    else if ((result = !strncmp(data, "BUS_DIVBY2", 10)))
    {
        output = TMR1_CTRL3_PCS::BUS_DIVBY2;
    }
    else if ((result = !strncmp(data, "BUS_DIVBY4", 10)))
    {
        output = TMR1_CTRL3_PCS::BUS_DIVBY4;
    }
    else if ((result = !strncmp(data, "BUS_DIVBY8", 10)))
    {
        output = TMR1_CTRL3_PCS::BUS_DIVBY8;
    }
    else if ((result = !strncmp(data, "BUS_DIVBY16", 11)))
    {
        output = TMR1_CTRL3_PCS::BUS_DIVBY16;
    }
    else if ((result = !strncmp(data, "BUS_DIVBY32", 11)))
    {
        output = TMR1_CTRL3_PCS::BUS_DIVBY32;
    }
    else if ((result = !strncmp(data, "BUS_DIVBY64", 11)))
    {
        output = TMR1_CTRL3_PCS::BUS_DIVBY64;
    }
    else if ((result = !strncmp(data, "BUS_DIVBY128", 12)))
    {
        output = TMR1_CTRL3_PCS::BUS_DIVBY128;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
