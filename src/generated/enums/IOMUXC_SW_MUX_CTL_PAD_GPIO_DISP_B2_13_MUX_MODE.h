/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE : uint8_t
{
    _0_video_mux_LCDIF_DATA21 /*!< Select mux mode: ALT0 mux port:
                                 VIDEO_MUX_LCDIF_DATA21 of instance: VIDEO_MUX
                               */
        ,
    _1_EMVSIM2_SVEN = 1 /*!< Select mux mode: ALT1 mux port: EMVSIM2_SVEN of
                           instance: EMVSIM2 */
        ,
    _2_can1_RX = 2 /*!< Select mux mode: ALT2 mux port: FLEXCAN1_RX of
                      instance: FLEXCAN1 */
        ,
    _3_lpuart2_RTS_B = 3 /*!< Select mux mode: ALT3 mux port: LPUART2_RTS_B of
                            instance: LPUART2 */
        ,
    _4_enet_REF_CLK = 4 /*!< Select mux mode: ALT4 mux port: ENET_REF_CLK of
                           instance: ENET */
        ,
    _5_gpio_mux5_IO14 = 5 /*!< Select mux mode: ALT5 mux port: GPIO_MUX5_IO14
                             of instance: GPIO_MUX5 */
        ,
    _6_lpi2c4_SDA = 6 /*!< Select mux mode: ALT6 mux port: LPI2C4_SDA of
                         instance: LPI2C4 */
        ,
    _8_enet_qos_1588_EVENT0_OUT =
        8 /*!< Select mux mode: ALT8 mux port: ENET_QOS_1588_EVENT0_OUT of
             instance: ENET_QOS */
        ,
    _9_lpspi4_SDI = 9 /*!< Select mux mode: ALT9 mux port: LPSPI4_SIN of
                         instance: LPSPI4 */
        ,
    _10_gpio11_IO14 = 10 /*!< Select mux mode: ALT10 mux port: GPIO11_IO14 of
                            instance: GPIO11 */
};
static_assert(sizeof(IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE) == 1);

/**
 * Converts IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(
    IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE instance)
{
    const char *result =
        "UNKNOWN IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE";

    switch (instance)
    {
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE::
        _0_video_mux_LCDIF_DATA21:
        result = "_0_video_mux_LCDIF_DATA21";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE::_1_EMVSIM2_SVEN:
        result = "_1_EMVSIM2_SVEN";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE::_2_can1_RX:
        result = "_2_can1_RX";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE::_3_lpuart2_RTS_B:
        result = "_3_lpuart2_RTS_B";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE::_4_enet_REF_CLK:
        result = "_4_enet_REF_CLK";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE::_5_gpio_mux5_IO14:
        result = "_5_gpio_mux5_IO14";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE::_6_lpi2c4_SDA:
        result = "_6_lpi2c4_SDA";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE::
        _8_enet_qos_1588_EVENT0_OUT:
        result = "_8_enet_qos_1588_EVENT0_OUT";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE::_9_lpspi4_SDI:
        result = "_9_lpspi4_SDI";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE::_10_gpio11_IO14:
        result = "_10_gpio11_IO14";
        break;
    }

    return result;
}

/**
 * Converts a C string to IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0_video_mux_LCDIF_DATA21", 25)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE::
            _0_video_mux_LCDIF_DATA21;
    }
    else if ((result = !strncmp(data, "_1_EMVSIM2_SVEN", 15)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE::_1_EMVSIM2_SVEN;
    }
    else if ((result = !strncmp(data, "_2_can1_RX", 10)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE::_2_can1_RX;
    }
    else if ((result = !strncmp(data, "_3_lpuart2_RTS_B", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE::_3_lpuart2_RTS_B;
    }
    else if ((result = !strncmp(data, "_4_enet_REF_CLK", 15)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE::_4_enet_REF_CLK;
    }
    else if ((result = !strncmp(data, "_5_gpio_mux5_IO14", 17)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE::_5_gpio_mux5_IO14;
    }
    else if ((result = !strncmp(data, "_6_lpi2c4_SDA", 13)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE::_6_lpi2c4_SDA;
    }
    else if ((result = !strncmp(data, "_8_enet_qos_1588_EVENT0_OUT", 27)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE::
            _8_enet_qos_1588_EVENT0_OUT;
    }
    else if ((result = !strncmp(data, "_9_lpspi4_SDI", 13)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE::_9_lpspi4_SDI;
    }
    else if ((result = !strncmp(data, "_10_gpio11_IO14", 15)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_13_MUX_MODE::_10_gpio11_IO14;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
