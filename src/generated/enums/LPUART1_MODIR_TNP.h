/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class LPUART1_MODIR_TNP : uint8_t
{
    ONE_SAMPLE /*!< 1/OSR. */,
    TWO_SAMPLE = 1 /*!< 2/OSR. */,
    THREE_SAMPLE = 2 /*!< 3/OSR. */,
    FOUR_SAMPLE = 3 /*!< 4/OSR. */
};
static_assert(sizeof(LPUART1_MODIR_TNP) == 1);

/**
 * Converts LPUART1_MODIR_TNP to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(LPUART1_MODIR_TNP instance)
{
    const char *result = "UNKNOWN LPUART1_MODIR_TNP";

    switch (instance)
    {
    case LPUART1_MODIR_TNP::ONE_SAMPLE:
        result = "ONE_SAMPLE";
        break;
    case LPUART1_MODIR_TNP::TWO_SAMPLE:
        result = "TWO_SAMPLE";
        break;
    case LPUART1_MODIR_TNP::THREE_SAMPLE:
        result = "THREE_SAMPLE";
        break;
    case LPUART1_MODIR_TNP::FOUR_SAMPLE:
        result = "FOUR_SAMPLE";
        break;
    }

    return result;
}

/**
 * Converts a C string to LPUART1_MODIR_TNP.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, LPUART1_MODIR_TNP &output)
{
    bool result = false;

    if ((result = !strncmp(data, "ONE_SAMPLE", 10)))
    {
        output = LPUART1_MODIR_TNP::ONE_SAMPLE;
    }
    else if ((result = !strncmp(data, "TWO_SAMPLE", 10)))
    {
        output = LPUART1_MODIR_TNP::TWO_SAMPLE;
    }
    else if ((result = !strncmp(data, "THREE_SAMPLE", 12)))
    {
        output = LPUART1_MODIR_TNP::THREE_SAMPLE;
    }
    else if ((result = !strncmp(data, "FOUR_SAMPLE", 11)))
    {
        output = LPUART1_MODIR_TNP::FOUR_SAMPLE;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
