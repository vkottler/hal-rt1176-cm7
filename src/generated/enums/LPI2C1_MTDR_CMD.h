/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class LPI2C1_MTDR_CMD : uint8_t
{
    TRANSMIT_DATA_7_THROUGH_0 /*!< Transmit DATA[7:0] */,
    RECEIVE_DATA_7_THROUGH_0_PLUS_ONE =
        1 /*!< Receive (DATA[7:0] + 1) bytes */,
    GENERATE_STOP_CONDITION = 2 /*!< Generate STOP condition */,
    RECEIVE_AND_DISCARD_DATA_7_THROUGH_0_PLUS_ONE =
        3 /*!< Receive and discard (DATA[7:0] + 1) bytes */,
    GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_cont =
        4 /*!< Generate (repeated) START and transmit address in DATA[7:0] */,
    GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_cont_x =
        5 /*!< Generate (repeated) START and transmit address in DATA[7:0].
             This transfer expects a NACK to be returned. */
        ,
    GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_cont_x_x =
        6 /*!< Generate (repeated) START and transmit address in DATA[7:0]
             using high speed mode */
        ,
    GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_cont_x_x_x =
        7 /*!< Generate (repeated) START and transmit address in DATA[7:0]
             using high speed mode. This transfer expects a NACK to be
             returned. */
};
static_assert(sizeof(LPI2C1_MTDR_CMD) == 1);

/**
 * Converts LPI2C1_MTDR_CMD to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(LPI2C1_MTDR_CMD instance)
{
    const char *result = "UNKNOWN LPI2C1_MTDR_CMD";

    switch (instance)
    {
    case LPI2C1_MTDR_CMD::TRANSMIT_DATA_7_THROUGH_0:
        result = "TRANSMIT_DATA_7_THROUGH_0";
        break;
    case LPI2C1_MTDR_CMD::RECEIVE_DATA_7_THROUGH_0_PLUS_ONE:
        result = "RECEIVE_DATA_7_THROUGH_0_PLUS_ONE";
        break;
    case LPI2C1_MTDR_CMD::GENERATE_STOP_CONDITION:
        result = "GENERATE_STOP_CONDITION";
        break;
    case LPI2C1_MTDR_CMD::RECEIVE_AND_DISCARD_DATA_7_THROUGH_0_PLUS_ONE:
        result = "RECEIVE_AND_DISCARD_DATA_7_THROUGH_0_PLUS_ONE";
        break;
    case LPI2C1_MTDR_CMD::GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_cont:
        result = "GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_cont";
        break;
    case LPI2C1_MTDR_CMD::GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_cont_x:
        result = "GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_cont_x";
        break;
    case LPI2C1_MTDR_CMD::
        GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_cont_x_x:
        result = "GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_cont_x_x";
        break;
    case LPI2C1_MTDR_CMD::
        GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_cont_x_x_x:
        result = "GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_cont_x_x_x";
        break;
    }

    return result;
}

/**
 * Converts a C string to LPI2C1_MTDR_CMD.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, LPI2C1_MTDR_CMD &output)
{
    bool result = false;

    if ((result = !strncmp(data, "TRANSMIT_DATA_7_THROUGH_0", 25)))
    {
        output = LPI2C1_MTDR_CMD::TRANSMIT_DATA_7_THROUGH_0;
    }
    else if ((result =
                  !strncmp(data, "RECEIVE_DATA_7_THROUGH_0_PLUS_ONE", 33)))
    {
        output = LPI2C1_MTDR_CMD::RECEIVE_DATA_7_THROUGH_0_PLUS_ONE;
    }
    else if ((result = !strncmp(data, "GENERATE_STOP_CONDITION", 23)))
    {
        output = LPI2C1_MTDR_CMD::GENERATE_STOP_CONDITION;
    }
    else if ((result = !strncmp(
                  data, "RECEIVE_AND_DISCARD_DATA_7_THROUGH_0_PLUS_ONE", 45)))
    {
        output =
            LPI2C1_MTDR_CMD::RECEIVE_AND_DISCARD_DATA_7_THROUGH_0_PLUS_ONE;
    }
    else if ((result = !strncmp(
                  data, "GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_cont",
                  50)))
    {
        output = LPI2C1_MTDR_CMD::
            GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_cont;
    }
    else if ((result = !strncmp(
                  data, "GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_cont_x",
                  52)))
    {
        output = LPI2C1_MTDR_CMD::
            GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_cont_x;
    }
    else if ((result = !strncmp(
                  data,
                  "GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_cont_x_x",
                  54)))
    {
        output = LPI2C1_MTDR_CMD::
            GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_cont_x_x;
    }
    else if ((result = !strncmp(
                  data,
                  "GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_cont_x_x_x",
                  56)))
    {
        output = LPI2C1_MTDR_CMD::
            GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_cont_x_x_x;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
