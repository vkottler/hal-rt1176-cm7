/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class PXP_OUT_CTRL_CLR_FORMAT : uint8_t
{
    ARGB8888 /*!< 32-bit pixels */,
    RGB888 = 4 /*!< 32-bit pixels (unpacked 24-bit pixel in 32 bit DWORD.) */,
    RGB888P = 5 /*!< 24-bit pixels (packed 24-bit format) */,
    ARGB1555 = 8 /*!< 16-bit pixels */,
    ARGB4444 = 9 /*!< 16-bit pixels */,
    RGB555 = 12 /*!< 16-bit pixels */,
    RGB444 = 13 /*!< 16-bit pixels */,
    RGB565 = 14 /*!< 16-bit pixels */,
    YUV1P444 = 16 /*!< 32-bit pixels (1-plane XYUV unpacked) */,
    UYVY1P422 =
        18 /*!< 16-bit pixels (1-plane U0,Y0,V0,Y1 interleaved bytes) */,
    VYUY1P422 =
        19 /*!< 16-bit pixels (1-plane V0,Y0,U0,Y1 interleaved bytes) */,
    Y8 = 20 /*!< 8-bit monochrome pixels (1-plane Y luma output) */,
    Y4 = 21 /*!< 4-bit monochrome pixels (1-plane Y luma, 4 bit truncation) */,
    YUV2P422 = 24 /*!< 16-bit pixels (2-plane UV interleaved bytes) */,
    YUV2P420 = 25 /*!< 16-bit pixels (2-plane UV) */,
    YVU2P422 = 26 /*!< 16-bit pixels (2-plane VU interleaved bytes) */,
    YVU2P420 = 27 /*!< 16-bit pixels (2-plane VU) */
};
static_assert(sizeof(PXP_OUT_CTRL_CLR_FORMAT) == 1);

/**
 * Converts PXP_OUT_CTRL_CLR_FORMAT to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PXP_OUT_CTRL_CLR_FORMAT instance)
{
    const char *result = "UNKNOWN PXP_OUT_CTRL_CLR_FORMAT";

    switch (instance)
    {
    case PXP_OUT_CTRL_CLR_FORMAT::ARGB8888:
        result = "ARGB8888";
        break;
    case PXP_OUT_CTRL_CLR_FORMAT::RGB888:
        result = "RGB888";
        break;
    case PXP_OUT_CTRL_CLR_FORMAT::RGB888P:
        result = "RGB888P";
        break;
    case PXP_OUT_CTRL_CLR_FORMAT::ARGB1555:
        result = "ARGB1555";
        break;
    case PXP_OUT_CTRL_CLR_FORMAT::ARGB4444:
        result = "ARGB4444";
        break;
    case PXP_OUT_CTRL_CLR_FORMAT::RGB555:
        result = "RGB555";
        break;
    case PXP_OUT_CTRL_CLR_FORMAT::RGB444:
        result = "RGB444";
        break;
    case PXP_OUT_CTRL_CLR_FORMAT::RGB565:
        result = "RGB565";
        break;
    case PXP_OUT_CTRL_CLR_FORMAT::YUV1P444:
        result = "YUV1P444";
        break;
    case PXP_OUT_CTRL_CLR_FORMAT::UYVY1P422:
        result = "UYVY1P422";
        break;
    case PXP_OUT_CTRL_CLR_FORMAT::VYUY1P422:
        result = "VYUY1P422";
        break;
    case PXP_OUT_CTRL_CLR_FORMAT::Y8:
        result = "Y8";
        break;
    case PXP_OUT_CTRL_CLR_FORMAT::Y4:
        result = "Y4";
        break;
    case PXP_OUT_CTRL_CLR_FORMAT::YUV2P422:
        result = "YUV2P422";
        break;
    case PXP_OUT_CTRL_CLR_FORMAT::YUV2P420:
        result = "YUV2P420";
        break;
    case PXP_OUT_CTRL_CLR_FORMAT::YVU2P422:
        result = "YVU2P422";
        break;
    case PXP_OUT_CTRL_CLR_FORMAT::YVU2P420:
        result = "YVU2P420";
        break;
    }

    return result;
}

/**
 * Converts a C string to PXP_OUT_CTRL_CLR_FORMAT.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PXP_OUT_CTRL_CLR_FORMAT &output)
{
    bool result = false;

    if ((result = !strncmp(data, "ARGB8888", 8)))
    {
        output = PXP_OUT_CTRL_CLR_FORMAT::ARGB8888;
    }
    else if ((result = !strncmp(data, "RGB888", 6)))
    {
        output = PXP_OUT_CTRL_CLR_FORMAT::RGB888;
    }
    else if ((result = !strncmp(data, "RGB888P", 7)))
    {
        output = PXP_OUT_CTRL_CLR_FORMAT::RGB888P;
    }
    else if ((result = !strncmp(data, "ARGB1555", 8)))
    {
        output = PXP_OUT_CTRL_CLR_FORMAT::ARGB1555;
    }
    else if ((result = !strncmp(data, "ARGB4444", 8)))
    {
        output = PXP_OUT_CTRL_CLR_FORMAT::ARGB4444;
    }
    else if ((result = !strncmp(data, "RGB555", 6)))
    {
        output = PXP_OUT_CTRL_CLR_FORMAT::RGB555;
    }
    else if ((result = !strncmp(data, "RGB444", 6)))
    {
        output = PXP_OUT_CTRL_CLR_FORMAT::RGB444;
    }
    else if ((result = !strncmp(data, "RGB565", 6)))
    {
        output = PXP_OUT_CTRL_CLR_FORMAT::RGB565;
    }
    else if ((result = !strncmp(data, "YUV1P444", 8)))
    {
        output = PXP_OUT_CTRL_CLR_FORMAT::YUV1P444;
    }
    else if ((result = !strncmp(data, "UYVY1P422", 9)))
    {
        output = PXP_OUT_CTRL_CLR_FORMAT::UYVY1P422;
    }
    else if ((result = !strncmp(data, "VYUY1P422", 9)))
    {
        output = PXP_OUT_CTRL_CLR_FORMAT::VYUY1P422;
    }
    else if ((result = !strncmp(data, "Y8", 2)))
    {
        output = PXP_OUT_CTRL_CLR_FORMAT::Y8;
    }
    else if ((result = !strncmp(data, "Y4", 2)))
    {
        output = PXP_OUT_CTRL_CLR_FORMAT::Y4;
    }
    else if ((result = !strncmp(data, "YUV2P422", 8)))
    {
        output = PXP_OUT_CTRL_CLR_FORMAT::YUV2P422;
    }
    else if ((result = !strncmp(data, "YUV2P420", 8)))
    {
        output = PXP_OUT_CTRL_CLR_FORMAT::YUV2P420;
    }
    else if ((result = !strncmp(data, "YVU2P422", 8)))
    {
        output = PXP_OUT_CTRL_CLR_FORMAT::YVU2P422;
    }
    else if ((result = !strncmp(data, "YVU2P420", 8)))
    {
        output = PXP_OUT_CTRL_CLR_FORMAT::YVU2P420;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
