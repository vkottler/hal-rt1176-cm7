/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class EMVSIM1_DIVISOR_DIVISOR_VALUE : uint16_t
{
    invalid = 4 /*!< Invalid. As per ISO 7816 specification, minimum value of
                   F/D is 5 */
        ,
    valid = 9 /*!< Divisor value F/D */
};
static_assert(sizeof(EMVSIM1_DIVISOR_DIVISOR_VALUE) == 2);

/**
 * Converts EMVSIM1_DIVISOR_DIVISOR_VALUE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(EMVSIM1_DIVISOR_DIVISOR_VALUE instance)
{
    const char *result = "UNKNOWN EMVSIM1_DIVISOR_DIVISOR_VALUE";

    switch (instance)
    {
    case EMVSIM1_DIVISOR_DIVISOR_VALUE::invalid:
        result = "invalid";
        break;
    case EMVSIM1_DIVISOR_DIVISOR_VALUE::valid:
        result = "valid";
        break;
    }

    return result;
}

/**
 * Converts a C string to EMVSIM1_DIVISOR_DIVISOR_VALUE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        EMVSIM1_DIVISOR_DIVISOR_VALUE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "invalid", 7)))
    {
        output = EMVSIM1_DIVISOR_DIVISOR_VALUE::invalid;
    }
    else if ((result = !strncmp(data, "valid", 5)))
    {
        output = EMVSIM1_DIVISOR_DIVISOR_VALUE::valid;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
