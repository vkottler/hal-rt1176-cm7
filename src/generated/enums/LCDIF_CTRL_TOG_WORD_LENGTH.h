/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class LCDIF_CTRL_TOG_WORD_LENGTH : uint8_t
{
    _16_BIT /*!< Input data is 16 bits per pixel. */,
    _8_BIT = 1 /*!< Input data is 8 bits wide. */,
    _18_BIT = 2 /*!< Input data is 18 bits per pixel. */,
    _24_BIT = 3 /*!< Input data is 24 bits per pixel. */
};
static_assert(sizeof(LCDIF_CTRL_TOG_WORD_LENGTH) == 1);

/**
 * Converts LCDIF_CTRL_TOG_WORD_LENGTH to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(LCDIF_CTRL_TOG_WORD_LENGTH instance)
{
    const char *result = "UNKNOWN LCDIF_CTRL_TOG_WORD_LENGTH";

    switch (instance)
    {
    case LCDIF_CTRL_TOG_WORD_LENGTH::_16_BIT:
        result = "_16_BIT";
        break;
    case LCDIF_CTRL_TOG_WORD_LENGTH::_8_BIT:
        result = "_8_BIT";
        break;
    case LCDIF_CTRL_TOG_WORD_LENGTH::_18_BIT:
        result = "_18_BIT";
        break;
    case LCDIF_CTRL_TOG_WORD_LENGTH::_24_BIT:
        result = "_24_BIT";
        break;
    }

    return result;
}

/**
 * Converts a C string to LCDIF_CTRL_TOG_WORD_LENGTH.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, LCDIF_CTRL_TOG_WORD_LENGTH &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_16_BIT", 7)))
    {
        output = LCDIF_CTRL_TOG_WORD_LENGTH::_16_BIT;
    }
    else if ((result = !strncmp(data, "_8_BIT", 6)))
    {
        output = LCDIF_CTRL_TOG_WORD_LENGTH::_8_BIT;
    }
    else if ((result = !strncmp(data, "_18_BIT", 7)))
    {
        output = LCDIF_CTRL_TOG_WORD_LENGTH::_18_BIT;
    }
    else if ((result = !strncmp(data, "_24_BIT", 7)))
    {
        output = LCDIF_CTRL_TOG_WORD_LENGTH::_24_BIT;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
