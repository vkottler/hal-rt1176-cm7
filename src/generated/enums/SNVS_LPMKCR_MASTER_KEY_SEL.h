/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class SNVS_LPMKCR_MASTER_KEY_SEL : uint8_t
{
    OTPMK = 1 /*!< Select one time programmable master key. */,
    ZMK = 2 /*!< Select zeroizable master key when MKS_EN bit is set . */,
    COMBO = 3 /*!< Select combined master key when MKS_EN bit is set . */
};
static_assert(sizeof(SNVS_LPMKCR_MASTER_KEY_SEL) == 1);

/**
 * Converts SNVS_LPMKCR_MASTER_KEY_SEL to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(SNVS_LPMKCR_MASTER_KEY_SEL instance)
{
    const char *result = "UNKNOWN SNVS_LPMKCR_MASTER_KEY_SEL";

    switch (instance)
    {
    case SNVS_LPMKCR_MASTER_KEY_SEL::OTPMK:
        result = "OTPMK";
        break;
    case SNVS_LPMKCR_MASTER_KEY_SEL::ZMK:
        result = "ZMK";
        break;
    case SNVS_LPMKCR_MASTER_KEY_SEL::COMBO:
        result = "COMBO";
        break;
    }

    return result;
}

/**
 * Converts a C string to SNVS_LPMKCR_MASTER_KEY_SEL.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, SNVS_LPMKCR_MASTER_KEY_SEL &output)
{
    bool result = false;

    if ((result = !strncmp(data, "OTPMK", 5)))
    {
        output = SNVS_LPMKCR_MASTER_KEY_SEL::OTPMK;
    }
    else if ((result = !strncmp(data, "ZMK", 3)))
    {
        output = SNVS_LPMKCR_MASTER_KEY_SEL::ZMK;
    }
    else if ((result = !strncmp(data, "COMBO", 5)))
    {
        output = SNVS_LPMKCR_MASTER_KEY_SEL::COMBO;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
