/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE : uint8_t
{
    _0_lpuart1_CTS_B /*!< Select mux mode: ALT0 mux port: LPUART1_CTS_B of
                        instance: LPUART1 */
        ,
    _1_lpspi2_SDO = 1 /*!< Select mux mode: ALT1 mux port: LPSPI2_SOUT of
                         instance: LPSPI2 */
        ,
    _2_semc_CSX1 =
        2 /*!< Select mux mode: ALT2 mux port: SEMC_CSX01 of instance: SEMC */,
    _3_ENET_RX_DATA0 = 3 /*!< Select mux mode: ALT3 mux port: ENET_RX_DATA00 of
                            instance: ENET */
        ,
    _4_flexpwm2_PWMA1 = 4 /*!< Select mux mode: ALT4 mux port: FLEXPWM2_PWM1_A
                             of instance: FLEXPWM2 */
        ,
    _5_gpio_mux3_IO25 = 5 /*!< Select mux mode: ALT5 mux port: GPIO_MUX3_IO25
                             of instance: GPIO_MUX3 */
        ,
    _6_kpp_ROW4 =
        6 /*!< Select mux mode: ALT6 mux port: KPP_ROW04 of instance: KPP */,
    _8_flexio2_FLEXIO26 = 8 /*!< Select mux mode: ALT8 mux port: FLEXIO2_D26 of
                               instance: FLEXIO2 */
        ,
    _9_enet_qos_MDC = 9 /*!< Select mux mode: ALT9 mux port: ENET_QOS_MDC of
                           instance: ENET_QOS */
        ,
    _10_gpio9_IO25 = 10 /*!< Select mux mode: ALT10 mux port: GPIO9_IO25 of
                           instance: GPIO9 */
        ,
    _11_usdhc2_CD_B = 11 /*!< Select mux mode: ALT11 mux port: USDHC2_CD_B of
                            instance: USDHC2 */
};
static_assert(sizeof(IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE) == 1);

/**
 * Converts IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(
    IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE instance)
{
    const char *result = "UNKNOWN IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE";

    switch (instance)
    {
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_0_lpuart1_CTS_B:
        result = "_0_lpuart1_CTS_B";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_1_lpspi2_SDO:
        result = "_1_lpspi2_SDO";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_2_semc_CSX1:
        result = "_2_semc_CSX1";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_3_ENET_RX_DATA0:
        result = "_3_ENET_RX_DATA0";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_4_flexpwm2_PWMA1:
        result = "_4_flexpwm2_PWMA1";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_5_gpio_mux3_IO25:
        result = "_5_gpio_mux3_IO25";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_6_kpp_ROW4:
        result = "_6_kpp_ROW4";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_8_flexio2_FLEXIO26:
        result = "_8_flexio2_FLEXIO26";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_9_enet_qos_MDC:
        result = "_9_enet_qos_MDC";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_10_gpio9_IO25:
        result = "_10_gpio9_IO25";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_11_usdhc2_CD_B:
        result = "_11_usdhc2_CD_B";
        break;
    }

    return result;
}

/**
 * Converts a C string to IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0_lpuart1_CTS_B", 16)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_0_lpuart1_CTS_B;
    }
    else if ((result = !strncmp(data, "_1_lpspi2_SDO", 13)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_1_lpspi2_SDO;
    }
    else if ((result = !strncmp(data, "_2_semc_CSX1", 12)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_2_semc_CSX1;
    }
    else if ((result = !strncmp(data, "_3_ENET_RX_DATA0", 16)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_3_ENET_RX_DATA0;
    }
    else if ((result = !strncmp(data, "_4_flexpwm2_PWMA1", 17)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_4_flexpwm2_PWMA1;
    }
    else if ((result = !strncmp(data, "_5_gpio_mux3_IO25", 17)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_5_gpio_mux3_IO25;
    }
    else if ((result = !strncmp(data, "_6_kpp_ROW4", 11)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_6_kpp_ROW4;
    }
    else if ((result = !strncmp(data, "_8_flexio2_FLEXIO26", 19)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_8_flexio2_FLEXIO26;
    }
    else if ((result = !strncmp(data, "_9_enet_qos_MDC", 15)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_9_enet_qos_MDC;
    }
    else if ((result = !strncmp(data, "_10_gpio9_IO25", 14)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_10_gpio9_IO25;
    }
    else if ((result = !strncmp(data, "_11_usdhc2_CD_B", 15)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_26_MUX_MODE::_11_usdhc2_CD_B;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
