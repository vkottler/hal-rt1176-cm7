/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class PWM1_MCTRL2_MONPLL : uint8_t
{
    NOTLOCKED_DO_NOT_MON_PLL /*!< Not locked. Do not monitor PLL operation.
                                Resetting of the fractional delay block in case
                                of PLL losing lock will be controlled by
                                software. */
        ,
    NOTLOCKED_MON_PLL =
        1 /*!< Not locked. Monitor PLL operation to automatically disable the
             fractional delay block when the PLL encounters problems. */
        ,
    LOCKED_DO_NOT_MON_PLL =
        2 /*!< Locked. Do not monitor PLL operation. Resetting of the
             fractional delay block in case of PLL losing lock will be
             controlled by software. These bits are write protected until the
             next reset. */
        ,
    LOCKED_MON_PLL =
        3 /*!< Locked. Monitor PLL operation to automatically disable the
             fractional delay block when the PLL encounters problems. These
             bits are write protected until the next reset. */
};
static_assert(sizeof(PWM1_MCTRL2_MONPLL) == 1);

/**
 * Converts PWM1_MCTRL2_MONPLL to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PWM1_MCTRL2_MONPLL instance)
{
    const char *result = "UNKNOWN PWM1_MCTRL2_MONPLL";

    switch (instance)
    {
    case PWM1_MCTRL2_MONPLL::NOTLOCKED_DO_NOT_MON_PLL:
        result = "NOTLOCKED_DO_NOT_MON_PLL";
        break;
    case PWM1_MCTRL2_MONPLL::NOTLOCKED_MON_PLL:
        result = "NOTLOCKED_MON_PLL";
        break;
    case PWM1_MCTRL2_MONPLL::LOCKED_DO_NOT_MON_PLL:
        result = "LOCKED_DO_NOT_MON_PLL";
        break;
    case PWM1_MCTRL2_MONPLL::LOCKED_MON_PLL:
        result = "LOCKED_MON_PLL";
        break;
    }

    return result;
}

/**
 * Converts a C string to PWM1_MCTRL2_MONPLL.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PWM1_MCTRL2_MONPLL &output)
{
    bool result = false;

    if ((result = !strncmp(data, "NOTLOCKED_DO_NOT_MON_PLL", 24)))
    {
        output = PWM1_MCTRL2_MONPLL::NOTLOCKED_DO_NOT_MON_PLL;
    }
    else if ((result = !strncmp(data, "NOTLOCKED_MON_PLL", 17)))
    {
        output = PWM1_MCTRL2_MONPLL::NOTLOCKED_MON_PLL;
    }
    else if ((result = !strncmp(data, "LOCKED_DO_NOT_MON_PLL", 21)))
    {
        output = PWM1_MCTRL2_MONPLL::LOCKED_DO_NOT_MON_PLL;
    }
    else if ((result = !strncmp(data, "LOCKED_MON_PLL", 14)))
    {
        output = PWM1_MCTRL2_MONPLL::LOCKED_MON_PLL;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
