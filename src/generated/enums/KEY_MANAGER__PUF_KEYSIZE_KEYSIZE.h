/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class KEY_MANAGER__PUF_KEYSIZE_KEYSIZE : uint8_t
{
    _64 /*!< Key Size is 512 Bytes and KC Size is 532 Bytes */,
    _1 = 1 /*!< Key Size is 8 Bytes and KC Size is 52 Bytes */,
    _2 = 2 /*!< Key Size is 16 Bytes and KC Size is 52 Bytes */,
    _3 = 3 /*!< Key Size is 24 Bytes and KC Size is 52 Bytes */,
    _4 = 4 /*!< Key Size is 32 Bytes and KC Size is 52 Bytes */,
    _5 = 5 /*!< Key Size is 40 Bytes and KC Size is 84 Bytes */,
    _6 = 6 /*!< Key Size is 48 Bytes and KC Size is 84 Bytes */,
    _7 = 7 /*!< Key Size is 56 Bytes and KC Size is 84 Bytes */,
    _8 = 8 /*!< Key Size is 64 Bytes and KC Size is 84 Bytes */,
    _9 = 9 /*!< Key Size is 72 Bytes and KC Size is 116 Bytes */,
    _10 = 10 /*!< Key Size is 80 Bytes and KC Size is 116 Bytes */,
    _11 = 11 /*!< Key Size is 88 Bytes and KC Size is 116 Bytes */,
    _12 = 12 /*!< Key Size is 96 Bytes and KC Size is 116 Bytes */,
    _13 = 13 /*!< Key Size is 104 Bytes and KC Size is 148 Bytes */,
    _14 = 14 /*!< Key Size is 112 Bytes and KC Size is 148 Bytes */,
    _15 = 15 /*!< Key Size is 120 Bytes and KC Size is 148 Bytes */,
    _16 = 16 /*!< Key Size is 128 Bytes and KC Size is 148 Bytes */,
    _17 = 17 /*!< Key Size is 136 Bytes and KC Size is 180 Bytes */,
    _18 = 18 /*!< Key Size is 144 Bytes and KC Size is 180 Bytes */,
    _19 = 19 /*!< Key Size is 152 Bytes and KC Size is 180 Bytes */,
    _20 = 20 /*!< Key Size is 160 Bytes and KC Size is 180 Bytes */,
    _21 = 21 /*!< Key Size is 168 Bytes and KC Size is 212 Bytes */,
    _22 = 22 /*!< Key Size is 176 Bytes and KC Size is 212 Bytes */,
    _23 = 23 /*!< Key Size is 184 Bytes and KC Size is 212 Bytes */,
    _24 = 24 /*!< Key Size is 192 Bytes and KC Size is 212 Bytes */,
    _25 = 25 /*!< Key Size is 200 Bytes and KC Size is 244 Bytes */,
    _26 = 26 /*!< Key Size is 208 Bytes and KC Size is 244 Bytes */,
    _27 = 27 /*!< Key Size is 216 Bytes and KC Size is 244 Bytes */,
    _28 = 28 /*!< Key Size is 224 Bytes and KC Size is 244 Bytes */,
    _29 = 29 /*!< Key Size is 232 Bytes and KC Size is 276 Bytes */,
    _30 = 30 /*!< Key Size is 240 Bytes and KC Size is 276 Bytes */,
    _31 = 31 /*!< Key Size is 248 Bytes and KC Size is 276 Bytes */,
    _32 = 32 /*!< Key Size is 256 Bytes and KC Size is 276 Bytes */,
    _33 = 33 /*!< Key Size is 264 Bytes and KC Size is 308 Bytes */,
    _34 = 34 /*!< Key Size is 272 Bytes and KC Size is 308 Bytes */,
    _35 = 35 /*!< Key Size is 280 Bytes and KC Size is 308 Bytes */,
    _36 = 36 /*!< Key Size is 288 Bytes and KC Size is 308 Bytes */,
    _37 = 37 /*!< Key Size is 296 Bytes and KC Size is 340 Bytes */,
    _38 = 38 /*!< Key Size is 304 Bytes and KC Size is 340 Bytes */,
    _39 = 39 /*!< Key Size is 312 Bytes and KC Size is 340 Bytes */,
    _40 = 40 /*!< Key Size is 320 Bytes and KC Size is 340 Bytes */,
    _41 = 41 /*!< Key Size is 328 Bytes and KC Size is 372 Bytes */,
    _42 = 42 /*!< Key Size is 336 Bytes and KC Size is 372 Bytes */,
    _43 = 43 /*!< Key Size is 344 Bytes and KC Size is 372 Bytes */,
    _44 = 44 /*!< Key Size is 352 Bytes and KC Size is 372 Bytes */,
    _45 = 45 /*!< Key Size is 360 Bytes and KC Size is 404 Bytes */,
    _46 = 46 /*!< Key Size is 368 Bytes and KC Size is 404 Bytes */,
    _47 = 47 /*!< Key Size is 376 Bytes and KC Size is 404 Bytes */,
    _48 = 48 /*!< Key Size is 384 Bytes and KC Size is 404 Bytes */,
    _49 = 49 /*!< Key Size is 392 Bytes and KC Size is 436 Bytes */,
    _50 = 50 /*!< Key Size is 400 Bytes and KC Size is 436 Bytes */,
    _51 = 51 /*!< Key Size is 408 Bytes and KC Size is 436 Bytes */,
    _52 = 52 /*!< Key Size is 416 Bytes and KC Size is 436 Bytes */,
    _53 = 53 /*!< Key Size is 424 Bytes and KC Size is 468 Bytes */,
    _54 = 54 /*!< Key Size is 432 Bytes and KC Size is 468 Bytes */,
    _55 = 55 /*!< Key Size is 440 Bytes and KC Size is 468 Bytes */,
    _56 = 56 /*!< Key Size is 448 Bytes and KC Size is 468 Bytes */,
    _57 = 57 /*!< Key Size is 456 Bytes and KC Size is 500 Bytes */,
    _58 = 58 /*!< Key Size is 464 Bytes and KC Size is 500 Bytes */,
    _59 = 59 /*!< Key Size is 472 Bytes and KC Size is 500 Bytes */,
    _60 = 60 /*!< Key Size is 480 Bytes and KC Size is 500 Bytes */,
    _61 = 61 /*!< Key Size is 488 Bytes and KC Size is 532 Bytes */,
    _62 = 62 /*!< Key Size is 496 Bytes and KC Size is 532 Bytes */,
    _63 = 63 /*!< Key Size is 504 Bytes and KC Size is 532 Bytes */
};
static_assert(sizeof(KEY_MANAGER__PUF_KEYSIZE_KEYSIZE) == 1);

/**
 * Converts KEY_MANAGER__PUF_KEYSIZE_KEYSIZE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(KEY_MANAGER__PUF_KEYSIZE_KEYSIZE instance)
{
    const char *result = "UNKNOWN KEY_MANAGER__PUF_KEYSIZE_KEYSIZE";

    switch (instance)
    {
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_64:
        result = "_64";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_1:
        result = "_1";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_2:
        result = "_2";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_3:
        result = "_3";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_4:
        result = "_4";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_5:
        result = "_5";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_6:
        result = "_6";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_7:
        result = "_7";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_8:
        result = "_8";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_9:
        result = "_9";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_10:
        result = "_10";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_11:
        result = "_11";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_12:
        result = "_12";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_13:
        result = "_13";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_14:
        result = "_14";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_15:
        result = "_15";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_16:
        result = "_16";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_17:
        result = "_17";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_18:
        result = "_18";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_19:
        result = "_19";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_20:
        result = "_20";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_21:
        result = "_21";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_22:
        result = "_22";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_23:
        result = "_23";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_24:
        result = "_24";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_25:
        result = "_25";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_26:
        result = "_26";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_27:
        result = "_27";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_28:
        result = "_28";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_29:
        result = "_29";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_30:
        result = "_30";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_31:
        result = "_31";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_32:
        result = "_32";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_33:
        result = "_33";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_34:
        result = "_34";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_35:
        result = "_35";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_36:
        result = "_36";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_37:
        result = "_37";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_38:
        result = "_38";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_39:
        result = "_39";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_40:
        result = "_40";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_41:
        result = "_41";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_42:
        result = "_42";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_43:
        result = "_43";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_44:
        result = "_44";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_45:
        result = "_45";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_46:
        result = "_46";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_47:
        result = "_47";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_48:
        result = "_48";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_49:
        result = "_49";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_50:
        result = "_50";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_51:
        result = "_51";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_52:
        result = "_52";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_53:
        result = "_53";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_54:
        result = "_54";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_55:
        result = "_55";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_56:
        result = "_56";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_57:
        result = "_57";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_58:
        result = "_58";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_59:
        result = "_59";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_60:
        result = "_60";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_61:
        result = "_61";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_62:
        result = "_62";
        break;
    case KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_63:
        result = "_63";
        break;
    }

    return result;
}

/**
 * Converts a C string to KEY_MANAGER__PUF_KEYSIZE_KEYSIZE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        KEY_MANAGER__PUF_KEYSIZE_KEYSIZE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_64", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_64;
    }
    else if ((result = !strncmp(data, "_1", 2)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_1;
    }
    else if ((result = !strncmp(data, "_2", 2)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_2;
    }
    else if ((result = !strncmp(data, "_3", 2)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_3;
    }
    else if ((result = !strncmp(data, "_4", 2)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_4;
    }
    else if ((result = !strncmp(data, "_5", 2)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_5;
    }
    else if ((result = !strncmp(data, "_6", 2)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_6;
    }
    else if ((result = !strncmp(data, "_7", 2)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_7;
    }
    else if ((result = !strncmp(data, "_8", 2)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_8;
    }
    else if ((result = !strncmp(data, "_9", 2)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_9;
    }
    else if ((result = !strncmp(data, "_10", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_10;
    }
    else if ((result = !strncmp(data, "_11", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_11;
    }
    else if ((result = !strncmp(data, "_12", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_12;
    }
    else if ((result = !strncmp(data, "_13", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_13;
    }
    else if ((result = !strncmp(data, "_14", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_14;
    }
    else if ((result = !strncmp(data, "_15", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_15;
    }
    else if ((result = !strncmp(data, "_16", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_16;
    }
    else if ((result = !strncmp(data, "_17", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_17;
    }
    else if ((result = !strncmp(data, "_18", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_18;
    }
    else if ((result = !strncmp(data, "_19", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_19;
    }
    else if ((result = !strncmp(data, "_20", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_20;
    }
    else if ((result = !strncmp(data, "_21", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_21;
    }
    else if ((result = !strncmp(data, "_22", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_22;
    }
    else if ((result = !strncmp(data, "_23", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_23;
    }
    else if ((result = !strncmp(data, "_24", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_24;
    }
    else if ((result = !strncmp(data, "_25", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_25;
    }
    else if ((result = !strncmp(data, "_26", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_26;
    }
    else if ((result = !strncmp(data, "_27", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_27;
    }
    else if ((result = !strncmp(data, "_28", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_28;
    }
    else if ((result = !strncmp(data, "_29", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_29;
    }
    else if ((result = !strncmp(data, "_30", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_30;
    }
    else if ((result = !strncmp(data, "_31", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_31;
    }
    else if ((result = !strncmp(data, "_32", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_32;
    }
    else if ((result = !strncmp(data, "_33", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_33;
    }
    else if ((result = !strncmp(data, "_34", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_34;
    }
    else if ((result = !strncmp(data, "_35", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_35;
    }
    else if ((result = !strncmp(data, "_36", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_36;
    }
    else if ((result = !strncmp(data, "_37", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_37;
    }
    else if ((result = !strncmp(data, "_38", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_38;
    }
    else if ((result = !strncmp(data, "_39", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_39;
    }
    else if ((result = !strncmp(data, "_40", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_40;
    }
    else if ((result = !strncmp(data, "_41", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_41;
    }
    else if ((result = !strncmp(data, "_42", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_42;
    }
    else if ((result = !strncmp(data, "_43", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_43;
    }
    else if ((result = !strncmp(data, "_44", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_44;
    }
    else if ((result = !strncmp(data, "_45", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_45;
    }
    else if ((result = !strncmp(data, "_46", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_46;
    }
    else if ((result = !strncmp(data, "_47", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_47;
    }
    else if ((result = !strncmp(data, "_48", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_48;
    }
    else if ((result = !strncmp(data, "_49", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_49;
    }
    else if ((result = !strncmp(data, "_50", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_50;
    }
    else if ((result = !strncmp(data, "_51", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_51;
    }
    else if ((result = !strncmp(data, "_52", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_52;
    }
    else if ((result = !strncmp(data, "_53", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_53;
    }
    else if ((result = !strncmp(data, "_54", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_54;
    }
    else if ((result = !strncmp(data, "_55", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_55;
    }
    else if ((result = !strncmp(data, "_56", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_56;
    }
    else if ((result = !strncmp(data, "_57", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_57;
    }
    else if ((result = !strncmp(data, "_58", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_58;
    }
    else if ((result = !strncmp(data, "_59", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_59;
    }
    else if ((result = !strncmp(data, "_60", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_60;
    }
    else if ((result = !strncmp(data, "_61", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_61;
    }
    else if ((result = !strncmp(data, "_62", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_62;
    }
    else if ((result = !strncmp(data, "_63", 3)))
    {
        output = KEY_MANAGER__PUF_KEYSIZE_KEYSIZE::_63;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
