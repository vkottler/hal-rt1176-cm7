/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL : uint8_t
{
    _2 /*!< Divide by 2 */,
    _4 = 1 /*!< Divide by 4 */,
    _8 = 2 /*!< Divide by 8 */,
    _1 = 3 /*!< Divide by 1 */
};
static_assert(sizeof(ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL) == 1);

/**
 * Converts ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL instance)
{
    const char *result = "UNKNOWN ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL";

    switch (instance)
    {
    case ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL::_2:
        result = "_2";
        break;
    case ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL::_4:
        result = "_4";
        break;
    case ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL::_8:
        result = "_8";
        break;
    case ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL::_1:
        result = "_1";
        break;
    }

    return result;
}

/**
 * Converts a C string to ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_2", 2)))
    {
        output = ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL::_2;
    }
    else if ((result = !strncmp(data, "_4", 2)))
    {
        output = ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL::_4;
    }
    else if ((result = !strncmp(data, "_8", 2)))
    {
        output = ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL::_8;
    }
    else if ((result = !strncmp(data, "_1", 2)))
    {
        output = ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL::_1;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
