/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class PWM1_FCTRL20_NOCOMB : uint8_t
{
    ENABLED /*!< There is a combinational link from the fault inputs to the PWM
               outputs. The fault inputs are combined with the filtered and
               latched fault signals to disable the PWM outputs. */
        ,
    DISABLED = 1 /*!< The direct combinational path from the fault inputs to
                    the PWM outputs is disabled and the filtered and latched
                    fault signals are used to disable the PWM outputs. */
};
static_assert(sizeof(PWM1_FCTRL20_NOCOMB) == 1);

/**
 * Converts PWM1_FCTRL20_NOCOMB to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PWM1_FCTRL20_NOCOMB instance)
{
    const char *result = "UNKNOWN PWM1_FCTRL20_NOCOMB";

    switch (instance)
    {
    case PWM1_FCTRL20_NOCOMB::ENABLED:
        result = "ENABLED";
        break;
    case PWM1_FCTRL20_NOCOMB::DISABLED:
        result = "DISABLED";
        break;
    }

    return result;
}

/**
 * Converts a C string to PWM1_FCTRL20_NOCOMB.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PWM1_FCTRL20_NOCOMB &output)
{
    bool result = false;

    if ((result = !strncmp(data, "ENABLED", 7)))
    {
        output = PWM1_FCTRL20_NOCOMB::ENABLED;
    }
    else if ((result = !strncmp(data, "DISABLED", 8)))
    {
        output = PWM1_FCTRL20_NOCOMB::DISABLED;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
