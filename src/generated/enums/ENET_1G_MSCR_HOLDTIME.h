/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class ENET_1G_MSCR_HOLDTIME : uint8_t
{
    _1 /*!< 1 internal module clock cycle */,
    _2 = 1 /*!< 2 internal module clock cycles */,
    _3 = 2 /*!< 3 internal module clock cycles */,
    _8 = 7 /*!< 8 internal module clock cycles */
};
static_assert(sizeof(ENET_1G_MSCR_HOLDTIME) == 1);

/**
 * Converts ENET_1G_MSCR_HOLDTIME to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(ENET_1G_MSCR_HOLDTIME instance)
{
    const char *result = "UNKNOWN ENET_1G_MSCR_HOLDTIME";

    switch (instance)
    {
    case ENET_1G_MSCR_HOLDTIME::_1:
        result = "_1";
        break;
    case ENET_1G_MSCR_HOLDTIME::_2:
        result = "_2";
        break;
    case ENET_1G_MSCR_HOLDTIME::_3:
        result = "_3";
        break;
    case ENET_1G_MSCR_HOLDTIME::_8:
        result = "_8";
        break;
    }

    return result;
}

/**
 * Converts a C string to ENET_1G_MSCR_HOLDTIME.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, ENET_1G_MSCR_HOLDTIME &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_1", 2)))
    {
        output = ENET_1G_MSCR_HOLDTIME::_1;
    }
    else if ((result = !strncmp(data, "_2", 2)))
    {
        output = ENET_1G_MSCR_HOLDTIME::_2;
    }
    else if ((result = !strncmp(data, "_3", 2)))
    {
        output = ENET_1G_MSCR_HOLDTIME::_3;
    }
    else if ((result = !strncmp(data, "_8", 2)))
    {
        output = ENET_1G_MSCR_HOLDTIME::_8;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
