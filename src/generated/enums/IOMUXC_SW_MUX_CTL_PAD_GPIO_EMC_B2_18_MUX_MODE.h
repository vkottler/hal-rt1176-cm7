/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE : uint8_t
{
    _0_semc_DQS4 /*!< Select mux mode: ALT0 mux port: SEMC_DQS4 of instance:
                    SEMC */
        ,
    _1_XBAR1_INOUT16 = 1 /*!< Select mux mode: ALT1 mux port: XBAR1_INOUT16 of
                            instance: XBAR1 */
        ,
    _2_enet_1g_RX_ER = 2 /*!< Select mux mode: ALT2 mux port: ENET_1G_RX_ER of
                            instance: ENET_1G */
        ,
    _3_EWM_OUT_B =
        3 /*!< Select mux mode: ALT3 mux port: EWM_OUT_B of instance: EWM */,
    _4_flexspi2_A_DATA5 = 4 /*!< Select mux mode: ALT4 mux port:
                               FLEXSPI2_A_DATA05 of instance: FLEXSPI2 */
        ,
    _5_gpio_mux2_IO28 = 5 /*!< Select mux mode: ALT5 mux port: GPIO_MUX2_IO28
                             of instance: GPIO_MUX2 */
        ,
    _6_flexspi1_A_DQS = 6 /*!< Select mux mode: ALT6 mux port: FLEXSPI1_A_DQS
                             of instance: FLEXSPI1 */
        ,
    _8_WDOG1_B =
        8 /*!< Select mux mode: ALT8 mux port: WDOG1_B of instance: WDOG1 */,
    _9_qtimer3_TIMER1 =
        9 /*!< Select mux mode: ALT9 mux port: TMR3_TIMER1 of instance: TMR3 */
        ,
    _10_gpio8_IO28 = 10 /*!< Select mux mode: ALT10 mux port: GPIO8_IO28 of
                           instance: GPIO8 */
};
static_assert(sizeof(IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE) == 1);

/**
 * Converts IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(
    IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE instance)
{
    const char *result =
        "UNKNOWN IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE";

    switch (instance)
    {
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE::_0_semc_DQS4:
        result = "_0_semc_DQS4";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE::_1_XBAR1_INOUT16:
        result = "_1_XBAR1_INOUT16";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE::_2_enet_1g_RX_ER:
        result = "_2_enet_1g_RX_ER";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE::_3_EWM_OUT_B:
        result = "_3_EWM_OUT_B";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE::_4_flexspi2_A_DATA5:
        result = "_4_flexspi2_A_DATA5";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE::_5_gpio_mux2_IO28:
        result = "_5_gpio_mux2_IO28";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE::_6_flexspi1_A_DQS:
        result = "_6_flexspi1_A_DQS";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE::_8_WDOG1_B:
        result = "_8_WDOG1_B";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE::_9_qtimer3_TIMER1:
        result = "_9_qtimer3_TIMER1";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE::_10_gpio8_IO28:
        result = "_10_gpio8_IO28";
        break;
    }

    return result;
}

/**
 * Converts a C string to IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0_semc_DQS4", 12)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE::_0_semc_DQS4;
    }
    else if ((result = !strncmp(data, "_1_XBAR1_INOUT16", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE::_1_XBAR1_INOUT16;
    }
    else if ((result = !strncmp(data, "_2_enet_1g_RX_ER", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE::_2_enet_1g_RX_ER;
    }
    else if ((result = !strncmp(data, "_3_EWM_OUT_B", 12)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE::_3_EWM_OUT_B;
    }
    else if ((result = !strncmp(data, "_4_flexspi2_A_DATA5", 19)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE::_4_flexspi2_A_DATA5;
    }
    else if ((result = !strncmp(data, "_5_gpio_mux2_IO28", 17)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE::_5_gpio_mux2_IO28;
    }
    else if ((result = !strncmp(data, "_6_flexspi1_A_DQS", 17)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE::_6_flexspi1_A_DQS;
    }
    else if ((result = !strncmp(data, "_8_WDOG1_B", 10)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE::_8_WDOG1_B;
    }
    else if ((result = !strncmp(data, "_9_qtimer3_TIMER1", 17)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE::_9_qtimer3_TIMER1;
    }
    else if ((result = !strncmp(data, "_10_gpio8_IO28", 14)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_18_MUX_MODE::_10_gpio8_IO28;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
