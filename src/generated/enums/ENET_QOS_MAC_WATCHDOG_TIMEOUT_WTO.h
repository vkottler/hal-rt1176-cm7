/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO : uint8_t
{
    _2KBYTES /*!< 2 KB */,
    _3KBYTES = 1 /*!< 3 KB */,
    _4KBYTES = 2 /*!< 4 KB */,
    _5KBYTES = 3 /*!< 5 KB */,
    _6KBYTES = 4 /*!< 6 KB */,
    _7KBYTES = 5 /*!< 7 KB */,
    _8KBYTES = 6 /*!< 8 KB */,
    _9KBYTES = 7 /*!< 9 KB */,
    _10KBYTES = 8 /*!< 10 KB */,
    _11KBYTES = 9 /*!< 11 KB */,
    _12KBYTES = 10 /*!< 12 KB */,
    _13KBYTES = 11 /*!< 13 KB */,
    _14KBYTES = 12 /*!< 14 KB */,
    _15KBYTES = 13 /*!< 15 KB */,
    _16383BYTES = 14 /*!< 16383 Bytes */
};
static_assert(sizeof(ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO) == 1);

/**
 * Converts ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO instance)
{
    const char *result = "UNKNOWN ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO";

    switch (instance)
    {
    case ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_2KBYTES:
        result = "_2KBYTES";
        break;
    case ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_3KBYTES:
        result = "_3KBYTES";
        break;
    case ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_4KBYTES:
        result = "_4KBYTES";
        break;
    case ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_5KBYTES:
        result = "_5KBYTES";
        break;
    case ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_6KBYTES:
        result = "_6KBYTES";
        break;
    case ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_7KBYTES:
        result = "_7KBYTES";
        break;
    case ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_8KBYTES:
        result = "_8KBYTES";
        break;
    case ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_9KBYTES:
        result = "_9KBYTES";
        break;
    case ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_10KBYTES:
        result = "_10KBYTES";
        break;
    case ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_11KBYTES:
        result = "_11KBYTES";
        break;
    case ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_12KBYTES:
        result = "_12KBYTES";
        break;
    case ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_13KBYTES:
        result = "_13KBYTES";
        break;
    case ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_14KBYTES:
        result = "_14KBYTES";
        break;
    case ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_15KBYTES:
        result = "_15KBYTES";
        break;
    case ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_16383BYTES:
        result = "_16383BYTES";
        break;
    }

    return result;
}

/**
 * Converts a C string to ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_2KBYTES", 8)))
    {
        output = ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_2KBYTES;
    }
    else if ((result = !strncmp(data, "_3KBYTES", 8)))
    {
        output = ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_3KBYTES;
    }
    else if ((result = !strncmp(data, "_4KBYTES", 8)))
    {
        output = ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_4KBYTES;
    }
    else if ((result = !strncmp(data, "_5KBYTES", 8)))
    {
        output = ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_5KBYTES;
    }
    else if ((result = !strncmp(data, "_6KBYTES", 8)))
    {
        output = ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_6KBYTES;
    }
    else if ((result = !strncmp(data, "_7KBYTES", 8)))
    {
        output = ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_7KBYTES;
    }
    else if ((result = !strncmp(data, "_8KBYTES", 8)))
    {
        output = ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_8KBYTES;
    }
    else if ((result = !strncmp(data, "_9KBYTES", 8)))
    {
        output = ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_9KBYTES;
    }
    else if ((result = !strncmp(data, "_10KBYTES", 9)))
    {
        output = ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_10KBYTES;
    }
    else if ((result = !strncmp(data, "_11KBYTES", 9)))
    {
        output = ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_11KBYTES;
    }
    else if ((result = !strncmp(data, "_12KBYTES", 9)))
    {
        output = ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_12KBYTES;
    }
    else if ((result = !strncmp(data, "_13KBYTES", 9)))
    {
        output = ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_13KBYTES;
    }
    else if ((result = !strncmp(data, "_14KBYTES", 9)))
    {
        output = ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_14KBYTES;
    }
    else if ((result = !strncmp(data, "_15KBYTES", 9)))
    {
        output = ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_15KBYTES;
    }
    else if ((result = !strncmp(data, "_16383BYTES", 11)))
    {
        output = ENET_QOS_MAC_WATCHDOG_TIMEOUT_WTO::_16383BYTES;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
