/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class PWM1_SMCTRL_LDFQ : uint8_t
{
    PWM /*!< Every PWM opportunity */,
    _2PWM = 1 /*!< Every 2 PWM opportunities */,
    _3PWM = 2 /*!< Every 3 PWM opportunities */,
    _4PWM = 3 /*!< Every 4 PWM opportunities */,
    _5PWM = 4 /*!< Every 5 PWM opportunities */,
    _6PWM = 5 /*!< Every 6 PWM opportunities */,
    _7PWM = 6 /*!< Every 7 PWM opportunities */,
    _8PWM = 7 /*!< Every 8 PWM opportunities */,
    _9PWM = 8 /*!< Every 9 PWM opportunities */,
    _10PWM = 9 /*!< Every 10 PWM opportunities */,
    _11PWM = 10 /*!< Every 11 PWM opportunities */,
    _12PWM = 11 /*!< Every 12 PWM opportunities */,
    _13PWM = 12 /*!< Every 13 PWM opportunities */,
    _14PWM = 13 /*!< Every 14 PWM opportunities */,
    _15PWM = 14 /*!< Every 15 PWM opportunities */,
    _16PWM = 15 /*!< Every 16 PWM opportunities */
};
static_assert(sizeof(PWM1_SMCTRL_LDFQ) == 1);

/**
 * Converts PWM1_SMCTRL_LDFQ to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PWM1_SMCTRL_LDFQ instance)
{
    const char *result = "UNKNOWN PWM1_SMCTRL_LDFQ";

    switch (instance)
    {
    case PWM1_SMCTRL_LDFQ::PWM:
        result = "PWM";
        break;
    case PWM1_SMCTRL_LDFQ::_2PWM:
        result = "_2PWM";
        break;
    case PWM1_SMCTRL_LDFQ::_3PWM:
        result = "_3PWM";
        break;
    case PWM1_SMCTRL_LDFQ::_4PWM:
        result = "_4PWM";
        break;
    case PWM1_SMCTRL_LDFQ::_5PWM:
        result = "_5PWM";
        break;
    case PWM1_SMCTRL_LDFQ::_6PWM:
        result = "_6PWM";
        break;
    case PWM1_SMCTRL_LDFQ::_7PWM:
        result = "_7PWM";
        break;
    case PWM1_SMCTRL_LDFQ::_8PWM:
        result = "_8PWM";
        break;
    case PWM1_SMCTRL_LDFQ::_9PWM:
        result = "_9PWM";
        break;
    case PWM1_SMCTRL_LDFQ::_10PWM:
        result = "_10PWM";
        break;
    case PWM1_SMCTRL_LDFQ::_11PWM:
        result = "_11PWM";
        break;
    case PWM1_SMCTRL_LDFQ::_12PWM:
        result = "_12PWM";
        break;
    case PWM1_SMCTRL_LDFQ::_13PWM:
        result = "_13PWM";
        break;
    case PWM1_SMCTRL_LDFQ::_14PWM:
        result = "_14PWM";
        break;
    case PWM1_SMCTRL_LDFQ::_15PWM:
        result = "_15PWM";
        break;
    case PWM1_SMCTRL_LDFQ::_16PWM:
        result = "_16PWM";
        break;
    }

    return result;
}

/**
 * Converts a C string to PWM1_SMCTRL_LDFQ.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PWM1_SMCTRL_LDFQ &output)
{
    bool result = false;

    if ((result = !strncmp(data, "PWM", 3)))
    {
        output = PWM1_SMCTRL_LDFQ::PWM;
    }
    else if ((result = !strncmp(data, "_2PWM", 5)))
    {
        output = PWM1_SMCTRL_LDFQ::_2PWM;
    }
    else if ((result = !strncmp(data, "_3PWM", 5)))
    {
        output = PWM1_SMCTRL_LDFQ::_3PWM;
    }
    else if ((result = !strncmp(data, "_4PWM", 5)))
    {
        output = PWM1_SMCTRL_LDFQ::_4PWM;
    }
    else if ((result = !strncmp(data, "_5PWM", 5)))
    {
        output = PWM1_SMCTRL_LDFQ::_5PWM;
    }
    else if ((result = !strncmp(data, "_6PWM", 5)))
    {
        output = PWM1_SMCTRL_LDFQ::_6PWM;
    }
    else if ((result = !strncmp(data, "_7PWM", 5)))
    {
        output = PWM1_SMCTRL_LDFQ::_7PWM;
    }
    else if ((result = !strncmp(data, "_8PWM", 5)))
    {
        output = PWM1_SMCTRL_LDFQ::_8PWM;
    }
    else if ((result = !strncmp(data, "_9PWM", 5)))
    {
        output = PWM1_SMCTRL_LDFQ::_9PWM;
    }
    else if ((result = !strncmp(data, "_10PWM", 6)))
    {
        output = PWM1_SMCTRL_LDFQ::_10PWM;
    }
    else if ((result = !strncmp(data, "_11PWM", 6)))
    {
        output = PWM1_SMCTRL_LDFQ::_11PWM;
    }
    else if ((result = !strncmp(data, "_12PWM", 6)))
    {
        output = PWM1_SMCTRL_LDFQ::_12PWM;
    }
    else if ((result = !strncmp(data, "_13PWM", 6)))
    {
        output = PWM1_SMCTRL_LDFQ::_13PWM;
    }
    else if ((result = !strncmp(data, "_14PWM", 6)))
    {
        output = PWM1_SMCTRL_LDFQ::_14PWM;
    }
    else if ((result = !strncmp(data, "_15PWM", 6)))
    {
        output = PWM1_SMCTRL_LDFQ::_15PWM;
    }
    else if ((result = !strncmp(data, "_16PWM", 6)))
    {
        output = PWM1_SMCTRL_LDFQ::_16PWM;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
