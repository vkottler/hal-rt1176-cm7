/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class EMVSIM1_CLKCFG_GPCNT1_CLK_SEL : uint8_t
{
    disabled /*!< Disabled / Reset */,
    cardclk = 1 /*!< Card Clock */,
    rxclk = 2 /*!< Receive Clock */,
    txclk = 3 /*!< ETU Clock (transmit clock) */
};
static_assert(sizeof(EMVSIM1_CLKCFG_GPCNT1_CLK_SEL) == 1);

/**
 * Converts EMVSIM1_CLKCFG_GPCNT1_CLK_SEL to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(EMVSIM1_CLKCFG_GPCNT1_CLK_SEL instance)
{
    const char *result = "UNKNOWN EMVSIM1_CLKCFG_GPCNT1_CLK_SEL";

    switch (instance)
    {
    case EMVSIM1_CLKCFG_GPCNT1_CLK_SEL::disabled:
        result = "disabled";
        break;
    case EMVSIM1_CLKCFG_GPCNT1_CLK_SEL::cardclk:
        result = "cardclk";
        break;
    case EMVSIM1_CLKCFG_GPCNT1_CLK_SEL::rxclk:
        result = "rxclk";
        break;
    case EMVSIM1_CLKCFG_GPCNT1_CLK_SEL::txclk:
        result = "txclk";
        break;
    }

    return result;
}

/**
 * Converts a C string to EMVSIM1_CLKCFG_GPCNT1_CLK_SEL.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        EMVSIM1_CLKCFG_GPCNT1_CLK_SEL &output)
{
    bool result = false;

    if ((result = !strncmp(data, "disabled", 8)))
    {
        output = EMVSIM1_CLKCFG_GPCNT1_CLK_SEL::disabled;
    }
    else if ((result = !strncmp(data, "cardclk", 7)))
    {
        output = EMVSIM1_CLKCFG_GPCNT1_CLK_SEL::cardclk;
    }
    else if ((result = !strncmp(data, "rxclk", 5)))
    {
        output = EMVSIM1_CLKCFG_GPCNT1_CLK_SEL::rxclk;
    }
    else if ((result = !strncmp(data, "txclk", 5)))
    {
        output = EMVSIM1_CLKCFG_GPCNT1_CLK_SEL::txclk;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
