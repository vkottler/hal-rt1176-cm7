/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE : uint8_t
{
    _0_semc_DATA28 /*!< Select mux mode: ALT0 mux port: SEMC_DATA28 of
                      instance: SEMC */
        ,
    _2_enet_1g_TX_EN = 2 /*!< Select mux mode: ALT2 mux port: ENET_1G_TX_EN of
                            instance: ENET_1G */
        ,
    _3_sai3_RX_DATA = 3 /*!< Select mux mode: ALT3 mux port: SAI3_RX_DATA of
                           instance: SAI3 */
        ,
    _4_flexspi2_A_DATA0 = 4 /*!< Select mux mode: ALT4 mux port:
                               FLEXSPI2_A_DATA00 of instance: FLEXSPI2 */
        ,
    _5_gpio_mux2_IO23 = 5 /*!< Select mux mode: ALT5 mux port: GPIO_MUX2_IO23
                             of instance: GPIO_MUX2 */
        ,
    _6_XBAR1_INOUT33 = 6 /*!< Select mux mode: ALT6 mux port: XBAR1_INOUT33 of
                            instance: XBAR1 */
        ,
    _8_EMVSIM1_RST_B = 8 /*!< Select mux mode: ALT8 mux port: EMVSIM1_RST of
                            instance: EMVSIM1 */
        ,
    _9_qtimer2_TIMER0 =
        9 /*!< Select mux mode: ALT9 mux port: TMR2_TIMER0 of instance: TMR2 */
        ,
    _10_gpio8_IO23 = 10 /*!< Select mux mode: ALT10 mux port: GPIO8_IO23 of
                           instance: GPIO8 */
};
static_assert(sizeof(IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE) == 1);

/**
 * Converts IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(
    IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE instance)
{
    const char *result =
        "UNKNOWN IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE";

    switch (instance)
    {
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE::_0_semc_DATA28:
        result = "_0_semc_DATA28";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE::_2_enet_1g_TX_EN:
        result = "_2_enet_1g_TX_EN";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE::_3_sai3_RX_DATA:
        result = "_3_sai3_RX_DATA";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE::_4_flexspi2_A_DATA0:
        result = "_4_flexspi2_A_DATA0";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE::_5_gpio_mux2_IO23:
        result = "_5_gpio_mux2_IO23";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE::_6_XBAR1_INOUT33:
        result = "_6_XBAR1_INOUT33";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE::_8_EMVSIM1_RST_B:
        result = "_8_EMVSIM1_RST_B";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE::_9_qtimer2_TIMER0:
        result = "_9_qtimer2_TIMER0";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE::_10_gpio8_IO23:
        result = "_10_gpio8_IO23";
        break;
    }

    return result;
}

/**
 * Converts a C string to IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0_semc_DATA28", 14)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE::_0_semc_DATA28;
    }
    else if ((result = !strncmp(data, "_2_enet_1g_TX_EN", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE::_2_enet_1g_TX_EN;
    }
    else if ((result = !strncmp(data, "_3_sai3_RX_DATA", 15)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE::_3_sai3_RX_DATA;
    }
    else if ((result = !strncmp(data, "_4_flexspi2_A_DATA0", 19)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE::_4_flexspi2_A_DATA0;
    }
    else if ((result = !strncmp(data, "_5_gpio_mux2_IO23", 17)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE::_5_gpio_mux2_IO23;
    }
    else if ((result = !strncmp(data, "_6_XBAR1_INOUT33", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE::_6_XBAR1_INOUT33;
    }
    else if ((result = !strncmp(data, "_8_EMVSIM1_RST_B", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE::_8_EMVSIM1_RST_B;
    }
    else if ((result = !strncmp(data, "_9_qtimer2_TIMER0", 17)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE::_9_qtimer2_TIMER0;
    }
    else if ((result = !strncmp(data, "_10_gpio8_IO23", 14)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B2_13_MUX_MODE::_10_gpio8_IO23;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
