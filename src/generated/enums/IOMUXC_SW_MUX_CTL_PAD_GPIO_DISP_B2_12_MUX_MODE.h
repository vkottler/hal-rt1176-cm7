/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE : uint8_t
{
    _0_video_mux_LCDIF_DATA20 /*!< Select mux mode: ALT0 mux port:
                                 VIDEO_MUX_LCDIF_DATA20 of instance: VIDEO_MUX
                               */
        ,
    _1_EMVSIM2_RST_B = 1 /*!< Select mux mode: ALT1 mux port: EMVSIM2_RST of
                            instance: EMVSIM2 */
        ,
    _2_can1_TX = 2 /*!< Select mux mode: ALT2 mux port: FLEXCAN1_TX of
                      instance: FLEXCAN1 */
        ,
    _3_lpuart2_CTS_B = 3 /*!< Select mux mode: ALT3 mux port: LPUART2_CTS_B of
                            instance: LPUART2 */
        ,
    _4_XBAR1_INOUT40 = 4 /*!< Select mux mode: ALT4 mux port: XBAR1_INOUT40 of
                            instance: XBAR1 */
        ,
    _5_gpio_mux5_IO13 = 5 /*!< Select mux mode: ALT5 mux port: GPIO_MUX5_IO13
                             of instance: GPIO_MUX5 */
        ,
    _6_lpi2c4_SCL = 6 /*!< Select mux mode: ALT6 mux port: LPI2C4_SCL of
                         instance: LPI2C4 */
        ,
    _8_enet_qos_COL = 8 /*!< Select mux mode: ALT8 mux port: ENET_QOS_COL of
                           instance: ENET_QOS */
        ,
    _9_lpspi4_SCK = 9 /*!< Select mux mode: ALT9 mux port: LPSPI4_SCK of
                         instance: LPSPI4 */
        ,
    _10_gpio11_IO13 = 10 /*!< Select mux mode: ALT10 mux port: GPIO11_IO13 of
                            instance: GPIO11 */
};
static_assert(sizeof(IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE) == 1);

/**
 * Converts IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(
    IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE instance)
{
    const char *result =
        "UNKNOWN IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE";

    switch (instance)
    {
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE::
        _0_video_mux_LCDIF_DATA20:
        result = "_0_video_mux_LCDIF_DATA20";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE::_1_EMVSIM2_RST_B:
        result = "_1_EMVSIM2_RST_B";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE::_2_can1_TX:
        result = "_2_can1_TX";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE::_3_lpuart2_CTS_B:
        result = "_3_lpuart2_CTS_B";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE::_4_XBAR1_INOUT40:
        result = "_4_XBAR1_INOUT40";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE::_5_gpio_mux5_IO13:
        result = "_5_gpio_mux5_IO13";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE::_6_lpi2c4_SCL:
        result = "_6_lpi2c4_SCL";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE::_8_enet_qos_COL:
        result = "_8_enet_qos_COL";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE::_9_lpspi4_SCK:
        result = "_9_lpspi4_SCK";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE::_10_gpio11_IO13:
        result = "_10_gpio11_IO13";
        break;
    }

    return result;
}

/**
 * Converts a C string to IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0_video_mux_LCDIF_DATA20", 25)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE::
            _0_video_mux_LCDIF_DATA20;
    }
    else if ((result = !strncmp(data, "_1_EMVSIM2_RST_B", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE::_1_EMVSIM2_RST_B;
    }
    else if ((result = !strncmp(data, "_2_can1_TX", 10)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE::_2_can1_TX;
    }
    else if ((result = !strncmp(data, "_3_lpuart2_CTS_B", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE::_3_lpuart2_CTS_B;
    }
    else if ((result = !strncmp(data, "_4_XBAR1_INOUT40", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE::_4_XBAR1_INOUT40;
    }
    else if ((result = !strncmp(data, "_5_gpio_mux5_IO13", 17)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE::_5_gpio_mux5_IO13;
    }
    else if ((result = !strncmp(data, "_6_lpi2c4_SCL", 13)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE::_6_lpi2c4_SCL;
    }
    else if ((result = !strncmp(data, "_8_enet_qos_COL", 15)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE::_8_enet_qos_COL;
    }
    else if ((result = !strncmp(data, "_9_lpspi4_SCK", 13)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE::_9_lpspi4_SCK;
    }
    else if ((result = !strncmp(data, "_10_gpio11_IO13", 15)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_DISP_B2_12_MUX_MODE::_10_gpio11_IO13;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
