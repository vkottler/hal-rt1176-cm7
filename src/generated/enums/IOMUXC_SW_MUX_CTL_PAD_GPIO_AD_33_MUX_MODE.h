/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE : uint8_t
{
    _0_lpi2c1_SDA /*!< Select mux mode: ALT0 mux port: LPI2C1_SDA of instance:
                     LPI2C1 */
        ,
    _1_usbphy1_OTG_ID = 1 /*!< Select mux mode: ALT1 mux port: USBPHY1_OTG_ID
                             of instance: USBPHY1 */
        ,
    _2_XBAR1_INOUT17 = 2 /*!< Select mux mode: ALT2 mux port: XBAR1_INOUT17 of
                            instance: XBAR1 */
        ,
    _3_enet_MDIO =
        3 /*!< Select mux mode: ALT3 mux port: ENET_MDIO of instance: ENET */,
    _4_usdhc1_WP =
        4 /*!< Select mux mode: ALT4 mux port: USDHC1_WP of instance: USDHC1 */
        ,
    _5_gpio_mux4_IO0 = 5 /*!< Select mux mode: ALT5 mux port: GPIO_MUX4_IO00 of
                            instance: GPIO_MUX4 */
        ,
    _6_kpp_COL1 =
        6 /*!< Select mux mode: ALT6 mux port: KPP_COL01 of instance: KPP */,
    _8_lpuart10_RX = 8 /*!< Select mux mode: ALT8 mux port: LPUART10_RXD of
                          instance: LPUART10 */
        ,
    _9_enet_1g_MDIO = 9 /*!< Select mux mode: ALT9 mux port: ENET_1G_MDIO of
                           instance: ENET_1G */
        ,
    _10_gpio10_IO0 = 10 /*!< Select mux mode: ALT10 mux port: GPIO10_IO00 of
                           instance: GPIO10 */
};
static_assert(sizeof(IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE) == 1);

/**
 * Converts IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(
    IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE instance)
{
    const char *result = "UNKNOWN IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE";

    switch (instance)
    {
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE::_0_lpi2c1_SDA:
        result = "_0_lpi2c1_SDA";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE::_1_usbphy1_OTG_ID:
        result = "_1_usbphy1_OTG_ID";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE::_2_XBAR1_INOUT17:
        result = "_2_XBAR1_INOUT17";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE::_3_enet_MDIO:
        result = "_3_enet_MDIO";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE::_4_usdhc1_WP:
        result = "_4_usdhc1_WP";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE::_5_gpio_mux4_IO0:
        result = "_5_gpio_mux4_IO0";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE::_6_kpp_COL1:
        result = "_6_kpp_COL1";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE::_8_lpuart10_RX:
        result = "_8_lpuart10_RX";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE::_9_enet_1g_MDIO:
        result = "_9_enet_1g_MDIO";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE::_10_gpio10_IO0:
        result = "_10_gpio10_IO0";
        break;
    }

    return result;
}

/**
 * Converts a C string to IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0_lpi2c1_SDA", 13)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE::_0_lpi2c1_SDA;
    }
    else if ((result = !strncmp(data, "_1_usbphy1_OTG_ID", 17)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE::_1_usbphy1_OTG_ID;
    }
    else if ((result = !strncmp(data, "_2_XBAR1_INOUT17", 16)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE::_2_XBAR1_INOUT17;
    }
    else if ((result = !strncmp(data, "_3_enet_MDIO", 12)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE::_3_enet_MDIO;
    }
    else if ((result = !strncmp(data, "_4_usdhc1_WP", 12)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE::_4_usdhc1_WP;
    }
    else if ((result = !strncmp(data, "_5_gpio_mux4_IO0", 16)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE::_5_gpio_mux4_IO0;
    }
    else if ((result = !strncmp(data, "_6_kpp_COL1", 11)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE::_6_kpp_COL1;
    }
    else if ((result = !strncmp(data, "_8_lpuart10_RX", 14)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE::_8_lpuart10_RX;
    }
    else if ((result = !strncmp(data, "_9_enet_1g_MDIO", 15)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE::_9_enet_1g_MDIO;
    }
    else if ((result = !strncmp(data, "_10_gpio10_IO0", 14)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_33_MUX_MODE::_10_gpio10_IO0;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
