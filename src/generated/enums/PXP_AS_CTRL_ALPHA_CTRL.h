/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class PXP_AS_CTRL_ALPHA_CTRL : uint8_t
{
    Embedded /*!< Indicates that the AS pixel alpha value will be used to blend
                the AS with PS. The ALPHA field is ignored. */
        ,
    Override =
        1 /*!< Indicates that the value in the ALPHA field should be used
             instead of the alpha values present in the input pixels. */
        ,
    Multiply = 2 /*!< Indicates that the value in the ALPHA field should be
                    used to scale all pixel alpha values. Each pixel alpha is
                    multiplied by the value in the ALPHA field. */
        ,
    ROPs = 3 /*!< Enable ROPs. The ROP field indicates an operation to be
                performed on the alpha surface and PS pixels. */
};
static_assert(sizeof(PXP_AS_CTRL_ALPHA_CTRL) == 1);

/**
 * Converts PXP_AS_CTRL_ALPHA_CTRL to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PXP_AS_CTRL_ALPHA_CTRL instance)
{
    const char *result = "UNKNOWN PXP_AS_CTRL_ALPHA_CTRL";

    switch (instance)
    {
    case PXP_AS_CTRL_ALPHA_CTRL::Embedded:
        result = "Embedded";
        break;
    case PXP_AS_CTRL_ALPHA_CTRL::Override:
        result = "Override";
        break;
    case PXP_AS_CTRL_ALPHA_CTRL::Multiply:
        result = "Multiply";
        break;
    case PXP_AS_CTRL_ALPHA_CTRL::ROPs:
        result = "ROPs";
        break;
    }

    return result;
}

/**
 * Converts a C string to PXP_AS_CTRL_ALPHA_CTRL.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PXP_AS_CTRL_ALPHA_CTRL &output)
{
    bool result = false;

    if ((result = !strncmp(data, "Embedded", 8)))
    {
        output = PXP_AS_CTRL_ALPHA_CTRL::Embedded;
    }
    else if ((result = !strncmp(data, "Override", 8)))
    {
        output = PXP_AS_CTRL_ALPHA_CTRL::Override;
    }
    else if ((result = !strncmp(data, "Multiply", 8)))
    {
        output = PXP_AS_CTRL_ALPHA_CTRL::Multiply;
    }
    else if ((result = !strncmp(data, "ROPs", 4)))
    {
        output = PXP_AS_CTRL_ALPHA_CTRL::ROPs;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
