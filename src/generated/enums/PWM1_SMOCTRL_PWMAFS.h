/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class PWM1_SMOCTRL_PWMAFS : uint8_t
{
    LOGIC_0 /*!< Output is forced to logic 0 state prior to consideration of
               output polarity control. */
        ,
    LOGIC_1 = 1 /*!< Output is forced to logic 1 state prior to consideration
                   of output polarity control. */
        ,
    TRISTATED = 3 /*!< Output is tristated. */
};
static_assert(sizeof(PWM1_SMOCTRL_PWMAFS) == 1);

/**
 * Converts PWM1_SMOCTRL_PWMAFS to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PWM1_SMOCTRL_PWMAFS instance)
{
    const char *result = "UNKNOWN PWM1_SMOCTRL_PWMAFS";

    switch (instance)
    {
    case PWM1_SMOCTRL_PWMAFS::LOGIC_0:
        result = "LOGIC_0";
        break;
    case PWM1_SMOCTRL_PWMAFS::LOGIC_1:
        result = "LOGIC_1";
        break;
    case PWM1_SMOCTRL_PWMAFS::TRISTATED:
        result = "TRISTATED";
        break;
    }

    return result;
}

/**
 * Converts a C string to PWM1_SMOCTRL_PWMAFS.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PWM1_SMOCTRL_PWMAFS &output)
{
    bool result = false;

    if ((result = !strncmp(data, "LOGIC_0", 7)))
    {
        output = PWM1_SMOCTRL_PWMAFS::LOGIC_0;
    }
    else if ((result = !strncmp(data, "LOGIC_1", 7)))
    {
        output = PWM1_SMOCTRL_PWMAFS::LOGIC_1;
    }
    else if ((result = !strncmp(data, "TRISTATED", 9)))
    {
        output = PWM1_SMOCTRL_PWMAFS::TRISTATED;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
