/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class RDC_SEMAPHORE1_GATE_GTFSM : uint8_t
{
    _0 /*!< The gate is unlocked (free). */,
    _1 =
        1 /*!< The gate has been locked by processor with master_index = 0. */,
    _2 =
        2 /*!< The gate has been locked by processor with master_index = 1. */,
    _3 =
        3 /*!< The gate has been locked by processor with master_index = 2. */,
    _4 =
        4 /*!< The gate has been locked by processor with master_index = 3. */,
    _5 =
        5 /*!< The gate has been locked by processor with master_index = 4. */,
    _6 =
        6 /*!< The gate has been locked by processor with master_index = 5. */,
    _7 =
        7 /*!< The gate has been locked by processor with master_index = 6. */,
    _8 =
        8 /*!< The gate has been locked by processor with master_index = 7. */,
    _9 =
        9 /*!< The gate has been locked by processor with master_index = 8. */,
    _10 =
        10 /*!< The gate has been locked by processor with master_index = 9. */
        ,
    _11 = 11 /*!< The gate has been locked by processor with master_index = 10.
              */
        ,
    _12 = 12 /*!< The gate has been locked by processor with master_index = 11.
              */
        ,
    _13 = 13 /*!< The gate has been locked by processor with master_index = 12.
              */
        ,
    _14 = 14 /*!< The gate has been locked by processor with master_index = 13.
              */
        ,
    _15 = 15 /*!< The gate has been locked by processor with master_index = 14.
              */
};
static_assert(sizeof(RDC_SEMAPHORE1_GATE_GTFSM) == 1);

/**
 * Converts RDC_SEMAPHORE1_GATE_GTFSM to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(RDC_SEMAPHORE1_GATE_GTFSM instance)
{
    const char *result = "UNKNOWN RDC_SEMAPHORE1_GATE_GTFSM";

    switch (instance)
    {
    case RDC_SEMAPHORE1_GATE_GTFSM::_0:
        result = "_0";
        break;
    case RDC_SEMAPHORE1_GATE_GTFSM::_1:
        result = "_1";
        break;
    case RDC_SEMAPHORE1_GATE_GTFSM::_2:
        result = "_2";
        break;
    case RDC_SEMAPHORE1_GATE_GTFSM::_3:
        result = "_3";
        break;
    case RDC_SEMAPHORE1_GATE_GTFSM::_4:
        result = "_4";
        break;
    case RDC_SEMAPHORE1_GATE_GTFSM::_5:
        result = "_5";
        break;
    case RDC_SEMAPHORE1_GATE_GTFSM::_6:
        result = "_6";
        break;
    case RDC_SEMAPHORE1_GATE_GTFSM::_7:
        result = "_7";
        break;
    case RDC_SEMAPHORE1_GATE_GTFSM::_8:
        result = "_8";
        break;
    case RDC_SEMAPHORE1_GATE_GTFSM::_9:
        result = "_9";
        break;
    case RDC_SEMAPHORE1_GATE_GTFSM::_10:
        result = "_10";
        break;
    case RDC_SEMAPHORE1_GATE_GTFSM::_11:
        result = "_11";
        break;
    case RDC_SEMAPHORE1_GATE_GTFSM::_12:
        result = "_12";
        break;
    case RDC_SEMAPHORE1_GATE_GTFSM::_13:
        result = "_13";
        break;
    case RDC_SEMAPHORE1_GATE_GTFSM::_14:
        result = "_14";
        break;
    case RDC_SEMAPHORE1_GATE_GTFSM::_15:
        result = "_15";
        break;
    }

    return result;
}

/**
 * Converts a C string to RDC_SEMAPHORE1_GATE_GTFSM.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, RDC_SEMAPHORE1_GATE_GTFSM &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0", 2)))
    {
        output = RDC_SEMAPHORE1_GATE_GTFSM::_0;
    }
    else if ((result = !strncmp(data, "_1", 2)))
    {
        output = RDC_SEMAPHORE1_GATE_GTFSM::_1;
    }
    else if ((result = !strncmp(data, "_2", 2)))
    {
        output = RDC_SEMAPHORE1_GATE_GTFSM::_2;
    }
    else if ((result = !strncmp(data, "_3", 2)))
    {
        output = RDC_SEMAPHORE1_GATE_GTFSM::_3;
    }
    else if ((result = !strncmp(data, "_4", 2)))
    {
        output = RDC_SEMAPHORE1_GATE_GTFSM::_4;
    }
    else if ((result = !strncmp(data, "_5", 2)))
    {
        output = RDC_SEMAPHORE1_GATE_GTFSM::_5;
    }
    else if ((result = !strncmp(data, "_6", 2)))
    {
        output = RDC_SEMAPHORE1_GATE_GTFSM::_6;
    }
    else if ((result = !strncmp(data, "_7", 2)))
    {
        output = RDC_SEMAPHORE1_GATE_GTFSM::_7;
    }
    else if ((result = !strncmp(data, "_8", 2)))
    {
        output = RDC_SEMAPHORE1_GATE_GTFSM::_8;
    }
    else if ((result = !strncmp(data, "_9", 2)))
    {
        output = RDC_SEMAPHORE1_GATE_GTFSM::_9;
    }
    else if ((result = !strncmp(data, "_10", 3)))
    {
        output = RDC_SEMAPHORE1_GATE_GTFSM::_10;
    }
    else if ((result = !strncmp(data, "_11", 3)))
    {
        output = RDC_SEMAPHORE1_GATE_GTFSM::_11;
    }
    else if ((result = !strncmp(data, "_12", 3)))
    {
        output = RDC_SEMAPHORE1_GATE_GTFSM::_12;
    }
    else if ((result = !strncmp(data, "_13", 3)))
    {
        output = RDC_SEMAPHORE1_GATE_GTFSM::_13;
    }
    else if ((result = !strncmp(data, "_14", 3)))
    {
        output = RDC_SEMAPHORE1_GATE_GTFSM::_14;
    }
    else if ((result = !strncmp(data, "_15", 3)))
    {
        output = RDC_SEMAPHORE1_GATE_GTFSM::_15;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
