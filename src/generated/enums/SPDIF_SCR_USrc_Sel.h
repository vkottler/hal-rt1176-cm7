/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class SPDIF_SCR_USrc_Sel : uint8_t
{
    none /*!< No embedded U channel */,
    spdif_rxblock = 1 /*!< U channel from SPDIF receive block (CD mode) */,
    chip_transmit = 3 /*!< U channel from on chip transmitter */
};
static_assert(sizeof(SPDIF_SCR_USrc_Sel) == 1);

/**
 * Converts SPDIF_SCR_USrc_Sel to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(SPDIF_SCR_USrc_Sel instance)
{
    const char *result = "UNKNOWN SPDIF_SCR_USrc_Sel";

    switch (instance)
    {
    case SPDIF_SCR_USrc_Sel::none:
        result = "none";
        break;
    case SPDIF_SCR_USrc_Sel::spdif_rxblock:
        result = "spdif_rxblock";
        break;
    case SPDIF_SCR_USrc_Sel::chip_transmit:
        result = "chip_transmit";
        break;
    }

    return result;
}

/**
 * Converts a C string to SPDIF_SCR_USrc_Sel.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, SPDIF_SCR_USrc_Sel &output)
{
    bool result = false;

    if ((result = !strncmp(data, "none", 4)))
    {
        output = SPDIF_SCR_USrc_Sel::none;
    }
    else if ((result = !strncmp(data, "spdif_rxblock", 13)))
    {
        output = SPDIF_SCR_USrc_Sel::spdif_rxblock;
    }
    else if ((result = !strncmp(data, "chip_transmit", 13)))
    {
        output = SPDIF_SCR_USrc_Sel::chip_transmit;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
