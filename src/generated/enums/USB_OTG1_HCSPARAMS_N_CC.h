/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class USB_OTG1_HCSPARAMS_N_CC : uint8_t
{
    NO_COMP_CONTROLLER /*!< There is no internal Companion Controller and
                          port-ownership hand-off is not supported. */
        ,
    COMP_CONTROLLER = 1 /*!< There are internal companion controller(s) and
                           port-ownership hand-offs is supported. */
};
static_assert(sizeof(USB_OTG1_HCSPARAMS_N_CC) == 1);

/**
 * Converts USB_OTG1_HCSPARAMS_N_CC to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USB_OTG1_HCSPARAMS_N_CC instance)
{
    const char *result = "UNKNOWN USB_OTG1_HCSPARAMS_N_CC";

    switch (instance)
    {
    case USB_OTG1_HCSPARAMS_N_CC::NO_COMP_CONTROLLER:
        result = "NO_COMP_CONTROLLER";
        break;
    case USB_OTG1_HCSPARAMS_N_CC::COMP_CONTROLLER:
        result = "COMP_CONTROLLER";
        break;
    }

    return result;
}

/**
 * Converts a C string to USB_OTG1_HCSPARAMS_N_CC.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USB_OTG1_HCSPARAMS_N_CC &output)
{
    bool result = false;

    if ((result = !strncmp(data, "NO_COMP_CONTROLLER", 18)))
    {
        output = USB_OTG1_HCSPARAMS_N_CC::NO_COMP_CONTROLLER;
    }
    else if ((result = !strncmp(data, "COMP_CONTROLLER", 15)))
    {
        output = USB_OTG1_HCSPARAMS_N_CC::COMP_CONTROLLER;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
