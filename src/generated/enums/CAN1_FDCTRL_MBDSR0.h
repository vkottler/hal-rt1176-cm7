/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class CAN1_FDCTRL_MBDSR0 : uint8_t
{
    _8_bytes /*!< Selects 8 bytes per message buffer. */,
    _16_bytes = 1 /*!< Selects 16 bytes per message buffer. */,
    _32_bytes = 2 /*!< Selects 32 bytes per message buffer. */,
    _64_bytes = 3 /*!< Selects 64 bytes per message buffer. */
};
static_assert(sizeof(CAN1_FDCTRL_MBDSR0) == 1);

/**
 * Converts CAN1_FDCTRL_MBDSR0 to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(CAN1_FDCTRL_MBDSR0 instance)
{
    const char *result = "UNKNOWN CAN1_FDCTRL_MBDSR0";

    switch (instance)
    {
    case CAN1_FDCTRL_MBDSR0::_8_bytes:
        result = "_8_bytes";
        break;
    case CAN1_FDCTRL_MBDSR0::_16_bytes:
        result = "_16_bytes";
        break;
    case CAN1_FDCTRL_MBDSR0::_32_bytes:
        result = "_32_bytes";
        break;
    case CAN1_FDCTRL_MBDSR0::_64_bytes:
        result = "_64_bytes";
        break;
    }

    return result;
}

/**
 * Converts a C string to CAN1_FDCTRL_MBDSR0.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, CAN1_FDCTRL_MBDSR0 &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_8_bytes", 8)))
    {
        output = CAN1_FDCTRL_MBDSR0::_8_bytes;
    }
    else if ((result = !strncmp(data, "_16_bytes", 9)))
    {
        output = CAN1_FDCTRL_MBDSR0::_16_bytes;
    }
    else if ((result = !strncmp(data, "_32_bytes", 9)))
    {
        output = CAN1_FDCTRL_MBDSR0::_32_bytes;
    }
    else if ((result = !strncmp(data, "_64_bytes", 9)))
    {
        output = CAN1_FDCTRL_MBDSR0::_64_bytes;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
