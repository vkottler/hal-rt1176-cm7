/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class TMR1_CSCTRL0_CL1 : uint8_t
{
    NEVER /*!< Never preload */,
    COMP1 = 1 /*!< Load upon successful compare with the value in COMP1 */,
    COMP2 = 2 /*!< Load upon successful compare with the value in COMP2 */
};
static_assert(sizeof(TMR1_CSCTRL0_CL1) == 1);

/**
 * Converts TMR1_CSCTRL0_CL1 to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(TMR1_CSCTRL0_CL1 instance)
{
    const char *result = "UNKNOWN TMR1_CSCTRL0_CL1";

    switch (instance)
    {
    case TMR1_CSCTRL0_CL1::NEVER:
        result = "NEVER";
        break;
    case TMR1_CSCTRL0_CL1::COMP1:
        result = "COMP1";
        break;
    case TMR1_CSCTRL0_CL1::COMP2:
        result = "COMP2";
        break;
    }

    return result;
}

/**
 * Converts a C string to TMR1_CSCTRL0_CL1.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, TMR1_CSCTRL0_CL1 &output)
{
    bool result = false;

    if ((result = !strncmp(data, "NEVER", 5)))
    {
        output = TMR1_CSCTRL0_CL1::NEVER;
    }
    else if ((result = !strncmp(data, "COMP1", 5)))
    {
        output = TMR1_CSCTRL0_CL1::COMP1;
    }
    else if ((result = !strncmp(data, "COMP2", 5)))
    {
        output = TMR1_CSCTRL0_CL1::COMP2;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
