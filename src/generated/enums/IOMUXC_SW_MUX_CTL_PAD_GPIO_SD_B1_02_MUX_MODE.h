/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE : uint8_t
{
    _0_usdhc1_DATA0 /*!< Select mux mode: ALT0 mux port: USDHC1_DATA0 of
                       instance: USDHC1 */
        ,
    _2_XBAR1_INOUT22 = 2 /*!< Select mux mode: ALT2 mux port: XBAR1_INOUT22 of
                            instance: XBAR1 */
        ,
    _3_gpt4_COMPARE1 = 3 /*!< Select mux mode: ALT3 mux port: GPT4_COMPARE1 of
                            instance: GPT4 */
        ,
    _5_gpio_mux4_IO5 = 5 /*!< Select mux mode: ALT5 mux port: GPIO_MUX4_IO05 of
                            instance: GPIO_MUX4 */
        ,
    _6_flexspi2_A_DATA0 = 6 /*!< Select mux mode: ALT6 mux port:
                               FLEXSPI2_A_DATA00 of instance: FLEXSPI2 */
        ,
    _8_kpp_ROW6 =
        8 /*!< Select mux mode: ALT8 mux port: KPP_ROW06 of instance: KPP */,
    _9_flexspi1_A_SS1_B = 9 /*!< Select mux mode: ALT9 mux port:
                               FLEXSPI1_A_SS1_B of instance: FLEXSPI1 */
        ,
    _10_gpio10_IO5 = 10 /*!< Select mux mode: ALT10 mux port: GPIO10_IO05 of
                           instance: GPIO10 */
};
static_assert(sizeof(IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE) == 1);

/**
 * Converts IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE instance)
{
    const char *result =
        "UNKNOWN IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE";

    switch (instance)
    {
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE::_0_usdhc1_DATA0:
        result = "_0_usdhc1_DATA0";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE::_2_XBAR1_INOUT22:
        result = "_2_XBAR1_INOUT22";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE::_3_gpt4_COMPARE1:
        result = "_3_gpt4_COMPARE1";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE::_5_gpio_mux4_IO5:
        result = "_5_gpio_mux4_IO5";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE::_6_flexspi2_A_DATA0:
        result = "_6_flexspi2_A_DATA0";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE::_8_kpp_ROW6:
        result = "_8_kpp_ROW6";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE::_9_flexspi1_A_SS1_B:
        result = "_9_flexspi1_A_SS1_B";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE::_10_gpio10_IO5:
        result = "_10_gpio10_IO5";
        break;
    }

    return result;
}

/**
 * Converts a C string to IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0_usdhc1_DATA0", 15)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE::_0_usdhc1_DATA0;
    }
    else if ((result = !strncmp(data, "_2_XBAR1_INOUT22", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE::_2_XBAR1_INOUT22;
    }
    else if ((result = !strncmp(data, "_3_gpt4_COMPARE1", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE::_3_gpt4_COMPARE1;
    }
    else if ((result = !strncmp(data, "_5_gpio_mux4_IO5", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE::_5_gpio_mux4_IO5;
    }
    else if ((result = !strncmp(data, "_6_flexspi2_A_DATA0", 19)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE::_6_flexspi2_A_DATA0;
    }
    else if ((result = !strncmp(data, "_8_kpp_ROW6", 11)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE::_8_kpp_ROW6;
    }
    else if ((result = !strncmp(data, "_9_flexspi1_A_SS1_B", 19)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE::_9_flexspi1_A_SS1_B;
    }
    else if ((result = !strncmp(data, "_10_gpio10_IO5", 14)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02_MUX_MODE::_10_gpio10_IO5;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
