/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B1_12_MUX_MODE : uint8_t
{
    _0_semc_ADDR3 /*!< Select mux mode: ALT0 mux port: SEMC_ADDR03 of instance:
                     SEMC */
        ,
    _1_XBAR1_INOUT4 = 1 /*!< Select mux mode: ALT1 mux port: XBAR1_INOUT04 of
                           instance: XBAR1 */
        ,
    _2_gpt5_COMPARE2 = 2 /*!< Select mux mode: ALT2 mux port: GPT5_COMPARE2 of
                            instance: GPT5 */
        ,
    _5_gpio_mux1_IO12 = 5 /*!< Select mux mode: ALT5 mux port: GPIO_MUX1_IO12
                             of instance: GPIO_MUX1 */
        ,
    _8_flexio1_FLEXIO12 = 8 /*!< Select mux mode: ALT8 mux port: FLEXIO1_D12 of
                               instance: FLEXIO1 */
        ,
    _10_gpio7_IO12 = 10 /*!< Select mux mode: ALT10 mux port: GPIO7_IO12 of
                           instance: GPIO7 */
};
static_assert(sizeof(IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B1_12_MUX_MODE) == 1);

/**
 * Converts IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B1_12_MUX_MODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(
    IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B1_12_MUX_MODE instance)
{
    const char *result =
        "UNKNOWN IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B1_12_MUX_MODE";

    switch (instance)
    {
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B1_12_MUX_MODE::_0_semc_ADDR3:
        result = "_0_semc_ADDR3";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B1_12_MUX_MODE::_1_XBAR1_INOUT4:
        result = "_1_XBAR1_INOUT4";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B1_12_MUX_MODE::_2_gpt5_COMPARE2:
        result = "_2_gpt5_COMPARE2";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B1_12_MUX_MODE::_5_gpio_mux1_IO12:
        result = "_5_gpio_mux1_IO12";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B1_12_MUX_MODE::_8_flexio1_FLEXIO12:
        result = "_8_flexio1_FLEXIO12";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B1_12_MUX_MODE::_10_gpio7_IO12:
        result = "_10_gpio7_IO12";
        break;
    }

    return result;
}

/**
 * Converts a C string to IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B1_12_MUX_MODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B1_12_MUX_MODE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0_semc_ADDR3", 13)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B1_12_MUX_MODE::_0_semc_ADDR3;
    }
    else if ((result = !strncmp(data, "_1_XBAR1_INOUT4", 15)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B1_12_MUX_MODE::_1_XBAR1_INOUT4;
    }
    else if ((result = !strncmp(data, "_2_gpt5_COMPARE2", 16)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B1_12_MUX_MODE::_2_gpt5_COMPARE2;
    }
    else if ((result = !strncmp(data, "_5_gpio_mux1_IO12", 17)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B1_12_MUX_MODE::_5_gpio_mux1_IO12;
    }
    else if ((result = !strncmp(data, "_8_flexio1_FLEXIO12", 19)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B1_12_MUX_MODE::_8_flexio1_FLEXIO12;
    }
    else if ((result = !strncmp(data, "_10_gpio7_IO12", 14)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_B1_12_MUX_MODE::_10_gpio7_IO12;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
