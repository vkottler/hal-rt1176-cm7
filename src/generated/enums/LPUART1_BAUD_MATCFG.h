/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class LPUART1_BAUD_MATCFG : uint8_t
{
    ADDR_MATCH /*!< Address Match Wakeup */,
    IDLE_MATCH = 1 /*!< Idle Match Wakeup */,
    ONOFF_MATCH = 2 /*!< Match On and Match Off */,
    RWU_MATCH = 3 /*!< Enables RWU on Data Match and Match On/Off for
                     transmitter CTS input */
};
static_assert(sizeof(LPUART1_BAUD_MATCFG) == 1);

/**
 * Converts LPUART1_BAUD_MATCFG to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(LPUART1_BAUD_MATCFG instance)
{
    const char *result = "UNKNOWN LPUART1_BAUD_MATCFG";

    switch (instance)
    {
    case LPUART1_BAUD_MATCFG::ADDR_MATCH:
        result = "ADDR_MATCH";
        break;
    case LPUART1_BAUD_MATCFG::IDLE_MATCH:
        result = "IDLE_MATCH";
        break;
    case LPUART1_BAUD_MATCFG::ONOFF_MATCH:
        result = "ONOFF_MATCH";
        break;
    case LPUART1_BAUD_MATCFG::RWU_MATCH:
        result = "RWU_MATCH";
        break;
    }

    return result;
}

/**
 * Converts a C string to LPUART1_BAUD_MATCFG.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, LPUART1_BAUD_MATCFG &output)
{
    bool result = false;

    if ((result = !strncmp(data, "ADDR_MATCH", 10)))
    {
        output = LPUART1_BAUD_MATCFG::ADDR_MATCH;
    }
    else if ((result = !strncmp(data, "IDLE_MATCH", 10)))
    {
        output = LPUART1_BAUD_MATCFG::IDLE_MATCH;
    }
    else if ((result = !strncmp(data, "ONOFF_MATCH", 11)))
    {
        output = LPUART1_BAUD_MATCFG::ONOFF_MATCH;
    }
    else if ((result = !strncmp(data, "RWU_MATCH", 9)))
    {
        output = LPUART1_BAUD_MATCFG::RWU_MATCH;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
