/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class SPDIF_STC_SYSCLK_DF : uint16_t
{
    no_clk /*!< no clock signal */,
    div2 = 1 /*!< divider factor is 2 */,
    div512 = 511 /*!< divider factor is 512 */
};
static_assert(sizeof(SPDIF_STC_SYSCLK_DF) == 2);

/**
 * Converts SPDIF_STC_SYSCLK_DF to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(SPDIF_STC_SYSCLK_DF instance)
{
    const char *result = "UNKNOWN SPDIF_STC_SYSCLK_DF";

    switch (instance)
    {
    case SPDIF_STC_SYSCLK_DF::no_clk:
        result = "no_clk";
        break;
    case SPDIF_STC_SYSCLK_DF::div2:
        result = "div2";
        break;
    case SPDIF_STC_SYSCLK_DF::div512:
        result = "div512";
        break;
    }

    return result;
}

/**
 * Converts a C string to SPDIF_STC_SYSCLK_DF.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, SPDIF_STC_SYSCLK_DF &output)
{
    bool result = false;

    if ((result = !strncmp(data, "no_clk", 6)))
    {
        output = SPDIF_STC_SYSCLK_DF::no_clk;
    }
    else if ((result = !strncmp(data, "div2", 4)))
    {
        output = SPDIF_STC_SYSCLK_DF::div2;
    }
    else if ((result = !strncmp(data, "div512", 6)))
    {
        output = SPDIF_STC_SYSCLK_DF::div512;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
