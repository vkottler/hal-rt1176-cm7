/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE : uint8_t
{
    _0_spdif_LOCK /*!< Select mux mode: ALT0 mux port: SPDIF_LOCK of instance:
                     SPDIF */
        ,
    _1_lpi2c1_HREQ = 1 /*!< Select mux mode: ALT1 mux port: LPI2C1_HREQ of
                          instance: LPI2C1 */
        ,
    _2_gpt1_CAPTURE1 = 2 /*!< Select mux mode: ALT2 mux port: GPT1_CAPTURE1 of
                            instance: GPT1 */
        ,
    _3_flexspi1_B_DATA3 = 3 /*!< Select mux mode: ALT3 mux port:
                               FLEXSPI1_B_DATA03 of instance: FLEXSPI1 */
        ,
    _4_video_mux_CSI_PIXCLK =
        4 /*!< Select mux mode: ALT4 mux port: VIDEO_MUX_CSI_PIXCLK of
             instance: VIDEO_MUX */
        ,
    _5_gpio_mux3_IO11 = 5 /*!< Select mux mode: ALT5 mux port: GPIO_MUX3_IO11
                             of instance: GPIO_MUX3 */
        ,
    _6_ENET_TX_DATA3 = 6 /*!< Select mux mode: ALT6 mux port: ENET_TX_DATA03 of
                            instance: ENET */
        ,
    _8_flexio2_FLEXIO12 = 8 /*!< Select mux mode: ALT8 mux port: FLEXIO2_D12 of
                               instance: FLEXIO2 */
        ,
    _9_EWM_OUT_B =
        9 /*!< Select mux mode: ALT9 mux port: EWM_OUT_B of instance: EWM */,
    _10_gpio9_IO11 = 10 /*!< Select mux mode: ALT10 mux port: GPIO9_IO11 of
                           instance: GPIO9 */
        ,
    _11_flexpwm2_PWMX2 = 11 /*!< Select mux mode: ALT11 mux port:
                               FLEXPWM2_PWM2_X of instance: FLEXPWM2 */
};
static_assert(sizeof(IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE) == 1);

/**
 * Converts IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(
    IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE instance)
{
    const char *result = "UNKNOWN IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE";

    switch (instance)
    {
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_0_spdif_LOCK:
        result = "_0_spdif_LOCK";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_1_lpi2c1_HREQ:
        result = "_1_lpi2c1_HREQ";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_2_gpt1_CAPTURE1:
        result = "_2_gpt1_CAPTURE1";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_3_flexspi1_B_DATA3:
        result = "_3_flexspi1_B_DATA3";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_4_video_mux_CSI_PIXCLK:
        result = "_4_video_mux_CSI_PIXCLK";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_5_gpio_mux3_IO11:
        result = "_5_gpio_mux3_IO11";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_6_ENET_TX_DATA3:
        result = "_6_ENET_TX_DATA3";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_8_flexio2_FLEXIO12:
        result = "_8_flexio2_FLEXIO12";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_9_EWM_OUT_B:
        result = "_9_EWM_OUT_B";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_10_gpio9_IO11:
        result = "_10_gpio9_IO11";
        break;
    case IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_11_flexpwm2_PWMX2:
        result = "_11_flexpwm2_PWMX2";
        break;
    }

    return result;
}

/**
 * Converts a C string to IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_0_spdif_LOCK", 13)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_0_spdif_LOCK;
    }
    else if ((result = !strncmp(data, "_1_lpi2c1_HREQ", 14)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_1_lpi2c1_HREQ;
    }
    else if ((result = !strncmp(data, "_2_gpt1_CAPTURE1", 16)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_2_gpt1_CAPTURE1;
    }
    else if ((result = !strncmp(data, "_3_flexspi1_B_DATA3", 19)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_3_flexspi1_B_DATA3;
    }
    else if ((result = !strncmp(data, "_4_video_mux_CSI_PIXCLK", 23)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_4_video_mux_CSI_PIXCLK;
    }
    else if ((result = !strncmp(data, "_5_gpio_mux3_IO11", 17)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_5_gpio_mux3_IO11;
    }
    else if ((result = !strncmp(data, "_6_ENET_TX_DATA3", 16)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_6_ENET_TX_DATA3;
    }
    else if ((result = !strncmp(data, "_8_flexio2_FLEXIO12", 19)))
    {
        output =
            IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_8_flexio2_FLEXIO12;
    }
    else if ((result = !strncmp(data, "_9_EWM_OUT_B", 12)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_9_EWM_OUT_B;
    }
    else if ((result = !strncmp(data, "_10_gpio9_IO11", 14)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_10_gpio9_IO11;
    }
    else if ((result = !strncmp(data, "_11_flexpwm2_PWMX2", 18)))
    {
        output = IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_12_MUX_MODE::_11_flexpwm2_PWMX2;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
