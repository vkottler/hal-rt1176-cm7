/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace MIMXRT1176::CM7
{

enum class PWM1_SMCAPTCTRLX_EDGX0 : uint8_t
{
    DISABLED /*!< Disabled */,
    FALLING_EDGE = 1 /*!< Capture falling edges */,
    RISING_EDGE = 2 /*!< Capture rising edges */,
    ANY_EDGE = 3 /*!< Capture any edge */
};
static_assert(sizeof(PWM1_SMCAPTCTRLX_EDGX0) == 1);

/**
 * Converts PWM1_SMCAPTCTRLX_EDGX0 to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PWM1_SMCAPTCTRLX_EDGX0 instance)
{
    const char *result = "UNKNOWN PWM1_SMCAPTCTRLX_EDGX0";

    switch (instance)
    {
    case PWM1_SMCAPTCTRLX_EDGX0::DISABLED:
        result = "DISABLED";
        break;
    case PWM1_SMCAPTCTRLX_EDGX0::FALLING_EDGE:
        result = "FALLING_EDGE";
        break;
    case PWM1_SMCAPTCTRLX_EDGX0::RISING_EDGE:
        result = "RISING_EDGE";
        break;
    case PWM1_SMCAPTCTRLX_EDGX0::ANY_EDGE:
        result = "ANY_EDGE";
        break;
    }

    return result;
}

/**
 * Converts a C string to PWM1_SMCAPTCTRLX_EDGX0.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PWM1_SMCAPTCTRLX_EDGX0 &output)
{
    bool result = false;

    if ((result = !strncmp(data, "DISABLED", 8)))
    {
        output = PWM1_SMCAPTCTRLX_EDGX0::DISABLED;
    }
    else if ((result = !strncmp(data, "FALLING_EDGE", 12)))
    {
        output = PWM1_SMCAPTCTRLX_EDGX0::FALLING_EDGE;
    }
    else if ((result = !strncmp(data, "RISING_EDGE", 11)))
    {
        output = PWM1_SMCAPTCTRLX_EDGX0::RISING_EDGE;
    }
    else if ((result = !strncmp(data, "ANY_EDGE", 8)))
    {
        output = PWM1_SMCAPTCTRLX_EDGX0::ANY_EDGE;
    }

    return result;
}

}; // namespace MIMXRT1176::CM7
