/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/SRC_SRMR_CSU_RESET_MODE.h"
#include "../enums/SRC_SRMR_JTAGSW_RESET_MODE.h"
#include "../enums/SRC_SRMR_M4LOCKUP_RESET_MODE.h"
#include "../enums/SRC_SRMR_M4REQ_RESET_MODE.h"
#include "../enums/SRC_SRMR_M7LOCKUP_RESET_MODE.h"
#include "../enums/SRC_SRMR_M7REQ_RESET_MODE.h"
#include "../enums/SRC_SRMR_OVERVOLT_RESET_MODE.h"
#include "../enums/SRC_SRMR_TEMPSENSE_RESET_MODE.h"
#include "../enums/SRC_SRMR_WDOG3_RESET_MODE.h"
#include "../enums/SRC_SRMR_WDOG4_RESET_MODE.h"
#include "../enums/SRC_SRMR_WDOG_RESET_MODE.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * SRC
 */
struct [[gnu::packed]] src
{
    /* Constant attributes. */
    static constexpr std::size_t size = 820; /*!< src's size in bytes. */

    /* Fields. */
    uint32_t SCR;   /*!< (read-write) SRC Control Register */
    uint32_t SRMR;  /*!< (read-write) SRC Reset Mode Register */
    uint32_t SBMR1; /*!< (read-write) SRC Boot Mode Register 1 */
    uint32_t SBMR2; /*!< (read-write) SRC Boot Mode Register 2 */
    uint32_t SRSR;  /*!< (read-write) SRC Reset Status Register */
    static constexpr std::size_t GPR_length = 20;
    uint32_t GPR[GPR_length]; /*!< (read-write) SRC General Purpose Register */
    static constexpr std::size_t reserved_padding0_length = 103;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t AUTHEN_MEGA;   /*!< (read-write) Slice Authentication Register */
    uint32_t CTRL_MEGA;     /*!< (read-write) Slice Control Register */
    uint32_t SETPOINT_MEGA; /*!< (read-write) Slice Setpoint Config Register */
    uint32_t DOMAIN_MEGA;   /*!< (read-write) Slice Domain Config Register */
    uint32_t STAT_MEGA;     /*!< (read-write) Slice Status Register */
    static constexpr std::size_t reserved_padding1_length = 3;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    uint32_t AUTHEN_DISPLAY; /*!< (read-write) Slice Authentication Register */
    uint32_t CTRL_DISPLAY;   /*!< (read-write) Slice Control Register */
    uint32_t
        SETPOINT_DISPLAY; /*!< (read-write) Slice Setpoint Config Register */
    uint32_t DOMAIN_DISPLAY; /*!< (read-write) Slice Domain Config Register */
    uint32_t STAT_DISPLAY;   /*!< (read-write) Slice Status Register */
    static constexpr std::size_t reserved_padding2_length = 3;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    uint32_t AUTHEN_WAKEUP; /*!< (read-write) Slice Authentication Register */
    uint32_t CTRL_WAKEUP;   /*!< (read-write) Slice Control Register */
    uint32_t
        SETPOINT_WAKEUP;    /*!< (read-write) Slice Setpoint Config Register */
    uint32_t DOMAIN_WAKEUP; /*!< (read-write) Slice Domain Config Register */
    uint32_t STAT_WAKEUP;   /*!< (read-write) Slice Status Register */
    static constexpr std::size_t reserved_padding3_length = 11;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    uint32_t AUTHEN_M4CORE; /*!< (read-write) Slice Authentication Register */
    uint32_t CTRL_M4CORE;   /*!< (read-write) Slice Control Register */
    uint32_t
        SETPOINT_M4CORE;    /*!< (read-write) Slice Setpoint Config Register */
    uint32_t DOMAIN_M4CORE; /*!< (read-write) Slice Domain Config Register */
    uint32_t STAT_M4CORE;   /*!< (read-write) Slice Status Register */
    static constexpr std::size_t reserved_padding4_length = 3;
    const uint32_t reserved_padding4[reserved_padding4_length] = {};
    uint32_t AUTHEN_M7CORE; /*!< (read-write) Slice Authentication Register */
    uint32_t CTRL_M7CORE;   /*!< (read-write) Slice Control Register */
    uint32_t
        SETPOINT_M7CORE;    /*!< (read-write) Slice Setpoint Config Register */
    uint32_t DOMAIN_M7CORE; /*!< (read-write) Slice Domain Config Register */
    uint32_t STAT_M7CORE;   /*!< (read-write) Slice Status Register */
    static constexpr std::size_t reserved_padding5_length = 3;
    const uint32_t reserved_padding5[reserved_padding5_length] = {};
    uint32_t AUTHEN_M4DEBUG; /*!< (read-write) Slice Authentication Register */
    uint32_t CTRL_M4DEBUG;   /*!< (read-write) Slice Control Register */
    uint32_t
        SETPOINT_M4DEBUG; /*!< (read-write) Slice Setpoint Config Register */
    uint32_t DOMAIN_M4DEBUG; /*!< (read-write) Slice Domain Config Register */
    uint32_t STAT_M4DEBUG;   /*!< (read-write) Slice Status Register */
    static constexpr std::size_t reserved_padding6_length = 3;
    const uint32_t reserved_padding6[reserved_padding6_length] = {};
    uint32_t AUTHEN_M7DEBUG; /*!< (read-write) Slice Authentication Register */
    uint32_t CTRL_M7DEBUG;   /*!< (read-write) Slice Control Register */
    uint32_t
        SETPOINT_M7DEBUG; /*!< (read-write) Slice Setpoint Config Register */
    uint32_t DOMAIN_M7DEBUG; /*!< (read-write) Slice Domain Config Register */
    uint32_t STAT_M7DEBUG;   /*!< (read-write) Slice Status Register */
    static constexpr std::size_t reserved_padding7_length = 3;
    const uint32_t reserved_padding7[reserved_padding7_length] = {};
    uint32_t AUTHEN_USBPHY1; /*!< (read-write) Slice Authentication Register */
    uint32_t CTRL_USBPHY1;   /*!< (read-write) Slice Control Register */
    uint32_t
        SETPOINT_USBPHY1; /*!< (read-write) Slice Setpoint Config Register */
    uint32_t DOMAIN_USBPHY1; /*!< (read-write) Slice Domain Config Register */
    uint32_t STAT_USBPHY1;   /*!< (read-write) Slice Status Register */
    static constexpr std::size_t reserved_padding8_length = 3;
    const uint32_t reserved_padding8[reserved_padding8_length] = {};
    uint32_t AUTHEN_USBPHY2; /*!< (read-write) Slice Authentication Register */
    uint32_t CTRL_USBPHY2;   /*!< (read-write) Slice Control Register */
    uint32_t
        SETPOINT_USBPHY2; /*!< (read-write) Slice Setpoint Config Register */
    uint32_t DOMAIN_USBPHY2; /*!< (read-write) Slice Domain Config Register */
    uint32_t STAT_USBPHY2;   /*!< (read-write) Slice Status Register */

    /* Methods. */

    /**
     * Get SCR's BT_RELEASE_M7 bit.
     *
     * cm7 core reset will be held until boot core write this bit to 1 to
     * release it.
     */
    inline bool get_SCR_BT_RELEASE_M7() volatile
    {
        return SCR & (1u << 1u);
    }

    /**
     * Set SCR's BT_RELEASE_M7 bit.
     *
     * cm7 core reset will be held until boot core write this bit to 1 to
     * release it.
     */
    inline void set_SCR_BT_RELEASE_M7() volatile
    {
        SCR |= 1u << 1u;
    }

    /**
     * Clear SCR's BT_RELEASE_M7 bit.
     *
     * cm7 core reset will be held until boot core write this bit to 1 to
     * release it.
     */
    inline void clear_SCR_BT_RELEASE_M7() volatile
    {
        SCR &= ~(1u << 1u);
    }

    /**
     * Toggle SCR's BT_RELEASE_M7 bit.
     *
     * cm7 core reset will be held until boot core write this bit to 1 to
     * release it.
     */
    inline void toggle_SCR_BT_RELEASE_M7() volatile
    {
        SCR ^= 1u << 1u;
    }

    /**
     * Get SCR's BT_RELEASE_M4 bit.
     *
     * cm4 core reset will be held until boot core write this bit to 1 to
     * release it.
     */
    inline bool get_SCR_BT_RELEASE_M4() volatile
    {
        return SCR & (1u << 0u);
    }

    /**
     * Set SCR's BT_RELEASE_M4 bit.
     *
     * cm4 core reset will be held until boot core write this bit to 1 to
     * release it.
     */
    inline void set_SCR_BT_RELEASE_M4() volatile
    {
        SCR |= 1u << 0u;
    }

    /**
     * Clear SCR's BT_RELEASE_M4 bit.
     *
     * cm4 core reset will be held until boot core write this bit to 1 to
     * release it.
     */
    inline void clear_SCR_BT_RELEASE_M4() volatile
    {
        SCR &= ~(1u << 0u);
    }

    /**
     * Toggle SCR's BT_RELEASE_M4 bit.
     *
     * cm4 core reset will be held until boot core write this bit to 1 to
     * release it.
     */
    inline void toggle_SCR_BT_RELEASE_M4() volatile
    {
        SCR ^= 1u << 0u;
    }

    /**
     * Get all of SCR's bit fields.
     *
     * (read-write) SRC Control Register
     */
    inline void get_SCR(bool &BT_RELEASE_M7, bool &BT_RELEASE_M4) volatile
    {
        uint32_t curr = SCR;

        BT_RELEASE_M7 = curr & (1u << 1u);
        BT_RELEASE_M4 = curr & (1u << 0u);
    }

    /**
     * Set all of SCR's bit fields.
     *
     * (read-write) SRC Control Register
     */
    inline void set_SCR(bool BT_RELEASE_M7, bool BT_RELEASE_M4) volatile
    {
        uint32_t curr = SCR;

        curr &= ~(0b1u << 1u);
        curr |= (BT_RELEASE_M7 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (BT_RELEASE_M4 & 0b1u) << 0u;

        SCR = curr;
    }

    /**
     * Get SRMR's OVERVOLT_RESET_MODE field.
     *
     * Jtag SW reset mode configuration
     */
    inline SRC_SRMR_OVERVOLT_RESET_MODE get_SRMR_OVERVOLT_RESET_MODE() volatile
    {
        return SRC_SRMR_OVERVOLT_RESET_MODE((SRMR >> 20u) & 0b11u);
    }

    /**
     * Set SRMR's OVERVOLT_RESET_MODE field.
     *
     * Jtag SW reset mode configuration
     */
    inline void set_SRMR_OVERVOLT_RESET_MODE(
        SRC_SRMR_OVERVOLT_RESET_MODE value) volatile
    {
        uint32_t curr = SRMR;

        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(value) & 0b11u) << 20u;

        SRMR = curr;
    }

    /**
     * Get SRMR's JTAGSW_RESET_MODE field.
     *
     * Jtag SW reset mode configuration
     */
    inline SRC_SRMR_JTAGSW_RESET_MODE get_SRMR_JTAGSW_RESET_MODE() volatile
    {
        return SRC_SRMR_JTAGSW_RESET_MODE((SRMR >> 18u) & 0b11u);
    }

    /**
     * Set SRMR's JTAGSW_RESET_MODE field.
     *
     * Jtag SW reset mode configuration
     */
    inline void set_SRMR_JTAGSW_RESET_MODE(
        SRC_SRMR_JTAGSW_RESET_MODE value) volatile
    {
        uint32_t curr = SRMR;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        SRMR = curr;
    }

    /**
     * Get SRMR's CSU_RESET_MODE field.
     *
     * CSU reset mode configuration
     */
    inline SRC_SRMR_CSU_RESET_MODE get_SRMR_CSU_RESET_MODE() volatile
    {
        return SRC_SRMR_CSU_RESET_MODE((SRMR >> 16u) & 0b11u);
    }

    /**
     * Set SRMR's CSU_RESET_MODE field.
     *
     * CSU reset mode configuration
     */
    inline void set_SRMR_CSU_RESET_MODE(SRC_SRMR_CSU_RESET_MODE value) volatile
    {
        uint32_t curr = SRMR;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        SRMR = curr;
    }

    /**
     * Get SRMR's TEMPSENSE_RESET_MODE field.
     *
     * Tempsense reset mode configuration
     */
    inline SRC_SRMR_TEMPSENSE_RESET_MODE
    get_SRMR_TEMPSENSE_RESET_MODE() volatile
    {
        return SRC_SRMR_TEMPSENSE_RESET_MODE((SRMR >> 14u) & 0b11u);
    }

    /**
     * Set SRMR's TEMPSENSE_RESET_MODE field.
     *
     * Tempsense reset mode configuration
     */
    inline void set_SRMR_TEMPSENSE_RESET_MODE(
        SRC_SRMR_TEMPSENSE_RESET_MODE value) volatile
    {
        uint32_t curr = SRMR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        SRMR = curr;
    }

    /**
     * Get SRMR's M7REQ_RESET_MODE field.
     *
     * M7 request reset configuration
     */
    inline SRC_SRMR_M7REQ_RESET_MODE get_SRMR_M7REQ_RESET_MODE() volatile
    {
        return SRC_SRMR_M7REQ_RESET_MODE((SRMR >> 12u) & 0b11u);
    }

    /**
     * Set SRMR's M7REQ_RESET_MODE field.
     *
     * M7 request reset configuration
     */
    inline void set_SRMR_M7REQ_RESET_MODE(
        SRC_SRMR_M7REQ_RESET_MODE value) volatile
    {
        uint32_t curr = SRMR;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        SRMR = curr;
    }

    /**
     * Get SRMR's M4REQ_RESET_MODE field.
     *
     * M4 request reset configuration
     */
    inline SRC_SRMR_M4REQ_RESET_MODE get_SRMR_M4REQ_RESET_MODE() volatile
    {
        return SRC_SRMR_M4REQ_RESET_MODE((SRMR >> 10u) & 0b11u);
    }

    /**
     * Set SRMR's M4REQ_RESET_MODE field.
     *
     * M4 request reset configuration
     */
    inline void set_SRMR_M4REQ_RESET_MODE(
        SRC_SRMR_M4REQ_RESET_MODE value) volatile
    {
        uint32_t curr = SRMR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        SRMR = curr;
    }

    /**
     * Get SRMR's M7LOCKUP_RESET_MODE field.
     *
     * M7 core lockup reset mode configuration
     */
    inline SRC_SRMR_M7LOCKUP_RESET_MODE get_SRMR_M7LOCKUP_RESET_MODE() volatile
    {
        return SRC_SRMR_M7LOCKUP_RESET_MODE((SRMR >> 8u) & 0b11u);
    }

    /**
     * Set SRMR's M7LOCKUP_RESET_MODE field.
     *
     * M7 core lockup reset mode configuration
     */
    inline void set_SRMR_M7LOCKUP_RESET_MODE(
        SRC_SRMR_M7LOCKUP_RESET_MODE value) volatile
    {
        uint32_t curr = SRMR;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        SRMR = curr;
    }

    /**
     * Get SRMR's M4LOCKUP_RESET_MODE field.
     *
     * M4 core lockup reset mode configuration
     */
    inline SRC_SRMR_M4LOCKUP_RESET_MODE get_SRMR_M4LOCKUP_RESET_MODE() volatile
    {
        return SRC_SRMR_M4LOCKUP_RESET_MODE((SRMR >> 6u) & 0b11u);
    }

    /**
     * Set SRMR's M4LOCKUP_RESET_MODE field.
     *
     * M4 core lockup reset mode configuration
     */
    inline void set_SRMR_M4LOCKUP_RESET_MODE(
        SRC_SRMR_M4LOCKUP_RESET_MODE value) volatile
    {
        uint32_t curr = SRMR;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        SRMR = curr;
    }

    /**
     * Get SRMR's WDOG4_RESET_MODE field.
     *
     * Wdog4 reset mode configuration
     */
    inline SRC_SRMR_WDOG4_RESET_MODE get_SRMR_WDOG4_RESET_MODE() volatile
    {
        return SRC_SRMR_WDOG4_RESET_MODE((SRMR >> 4u) & 0b11u);
    }

    /**
     * Set SRMR's WDOG4_RESET_MODE field.
     *
     * Wdog4 reset mode configuration
     */
    inline void set_SRMR_WDOG4_RESET_MODE(
        SRC_SRMR_WDOG4_RESET_MODE value) volatile
    {
        uint32_t curr = SRMR;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        SRMR = curr;
    }

    /**
     * Get SRMR's WDOG3_RESET_MODE field.
     *
     * Wdog3 reset mode configuration
     */
    inline SRC_SRMR_WDOG3_RESET_MODE get_SRMR_WDOG3_RESET_MODE() volatile
    {
        return SRC_SRMR_WDOG3_RESET_MODE((SRMR >> 2u) & 0b11u);
    }

    /**
     * Set SRMR's WDOG3_RESET_MODE field.
     *
     * Wdog3 reset mode configuration
     */
    inline void set_SRMR_WDOG3_RESET_MODE(
        SRC_SRMR_WDOG3_RESET_MODE value) volatile
    {
        uint32_t curr = SRMR;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        SRMR = curr;
    }

    /**
     * Get SRMR's WDOG_RESET_MODE field.
     *
     * Wdog reset mode configuration
     */
    inline SRC_SRMR_WDOG_RESET_MODE get_SRMR_WDOG_RESET_MODE() volatile
    {
        return SRC_SRMR_WDOG_RESET_MODE((SRMR >> 0u) & 0b11u);
    }

    /**
     * Set SRMR's WDOG_RESET_MODE field.
     *
     * Wdog reset mode configuration
     */
    inline void set_SRMR_WDOG_RESET_MODE(
        SRC_SRMR_WDOG_RESET_MODE value) volatile
    {
        uint32_t curr = SRMR;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        SRMR = curr;
    }

    /**
     * Get all of SRMR's bit fields.
     *
     * (read-write) SRC Reset Mode Register
     */
    inline void get_SRMR(SRC_SRMR_OVERVOLT_RESET_MODE &OVERVOLT_RESET_MODE,
                         SRC_SRMR_JTAGSW_RESET_MODE &JTAGSW_RESET_MODE,
                         SRC_SRMR_CSU_RESET_MODE &CSU_RESET_MODE,
                         SRC_SRMR_TEMPSENSE_RESET_MODE &TEMPSENSE_RESET_MODE,
                         SRC_SRMR_M7REQ_RESET_MODE &M7REQ_RESET_MODE,
                         SRC_SRMR_M4REQ_RESET_MODE &M4REQ_RESET_MODE,
                         SRC_SRMR_M7LOCKUP_RESET_MODE &M7LOCKUP_RESET_MODE,
                         SRC_SRMR_M4LOCKUP_RESET_MODE &M4LOCKUP_RESET_MODE,
                         SRC_SRMR_WDOG4_RESET_MODE &WDOG4_RESET_MODE,
                         SRC_SRMR_WDOG3_RESET_MODE &WDOG3_RESET_MODE,
                         SRC_SRMR_WDOG_RESET_MODE &WDOG_RESET_MODE) volatile
    {
        uint32_t curr = SRMR;

        OVERVOLT_RESET_MODE =
            SRC_SRMR_OVERVOLT_RESET_MODE((curr >> 20u) & 0b11u);
        JTAGSW_RESET_MODE = SRC_SRMR_JTAGSW_RESET_MODE((curr >> 18u) & 0b11u);
        CSU_RESET_MODE = SRC_SRMR_CSU_RESET_MODE((curr >> 16u) & 0b11u);
        TEMPSENSE_RESET_MODE =
            SRC_SRMR_TEMPSENSE_RESET_MODE((curr >> 14u) & 0b11u);
        M7REQ_RESET_MODE = SRC_SRMR_M7REQ_RESET_MODE((curr >> 12u) & 0b11u);
        M4REQ_RESET_MODE = SRC_SRMR_M4REQ_RESET_MODE((curr >> 10u) & 0b11u);
        M7LOCKUP_RESET_MODE =
            SRC_SRMR_M7LOCKUP_RESET_MODE((curr >> 8u) & 0b11u);
        M4LOCKUP_RESET_MODE =
            SRC_SRMR_M4LOCKUP_RESET_MODE((curr >> 6u) & 0b11u);
        WDOG4_RESET_MODE = SRC_SRMR_WDOG4_RESET_MODE((curr >> 4u) & 0b11u);
        WDOG3_RESET_MODE = SRC_SRMR_WDOG3_RESET_MODE((curr >> 2u) & 0b11u);
        WDOG_RESET_MODE = SRC_SRMR_WDOG_RESET_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of SRMR's bit fields.
     *
     * (read-write) SRC Reset Mode Register
     */
    inline void set_SRMR(SRC_SRMR_OVERVOLT_RESET_MODE OVERVOLT_RESET_MODE,
                         SRC_SRMR_JTAGSW_RESET_MODE JTAGSW_RESET_MODE,
                         SRC_SRMR_CSU_RESET_MODE CSU_RESET_MODE,
                         SRC_SRMR_TEMPSENSE_RESET_MODE TEMPSENSE_RESET_MODE,
                         SRC_SRMR_M7REQ_RESET_MODE M7REQ_RESET_MODE,
                         SRC_SRMR_M4REQ_RESET_MODE M4REQ_RESET_MODE,
                         SRC_SRMR_M7LOCKUP_RESET_MODE M7LOCKUP_RESET_MODE,
                         SRC_SRMR_M4LOCKUP_RESET_MODE M4LOCKUP_RESET_MODE,
                         SRC_SRMR_WDOG4_RESET_MODE WDOG4_RESET_MODE,
                         SRC_SRMR_WDOG3_RESET_MODE WDOG3_RESET_MODE,
                         SRC_SRMR_WDOG_RESET_MODE WDOG_RESET_MODE) volatile
    {
        uint32_t curr = SRMR;

        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(OVERVOLT_RESET_MODE) & 0b11u) << 20u;
        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(JTAGSW_RESET_MODE) & 0b11u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(CSU_RESET_MODE) & 0b11u) << 16u;
        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(TEMPSENSE_RESET_MODE) & 0b11u) << 14u;
        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(M7REQ_RESET_MODE) & 0b11u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(M4REQ_RESET_MODE) & 0b11u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(M7LOCKUP_RESET_MODE) & 0b11u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(M4LOCKUP_RESET_MODE) & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(WDOG4_RESET_MODE) & 0b11u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(WDOG3_RESET_MODE) & 0b11u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(WDOG_RESET_MODE) & 0b11u) << 0u;

        SRMR = curr;
    }

    /**
     * Get SBMR1's BOOT_CFG4 field.
     *
     * Please see fusemap.
     */
    inline uint8_t get_SBMR1_BOOT_CFG4() volatile
    {
        return (SBMR1 >> 24u) & 0b11111111u;
    }

    /**
     * Get SBMR1's BOOT_CFG3 field.
     *
     * Please see fusemap.
     */
    inline uint8_t get_SBMR1_BOOT_CFG3() volatile
    {
        return (SBMR1 >> 16u) & 0b11111111u;
    }

    /**
     * Get SBMR1's BOOT_CFG2 field.
     *
     * Please see fusemap.
     */
    inline uint8_t get_SBMR1_BOOT_CFG2() volatile
    {
        return (SBMR1 >> 8u) & 0b11111111u;
    }

    /**
     * Get SBMR1's BOOT_CFG1 field.
     *
     * Please see fusemap.
     */
    inline uint8_t get_SBMR1_BOOT_CFG1() volatile
    {
        return (SBMR1 >> 0u) & 0b11111111u;
    }

    /**
     * Get all of SBMR1's bit fields.
     *
     * (read-write) SRC Boot Mode Register 1
     */
    inline void get_SBMR1(uint8_t &BOOT_CFG4, uint8_t &BOOT_CFG3,
                          uint8_t &BOOT_CFG2, uint8_t &BOOT_CFG1) volatile
    {
        uint32_t curr = SBMR1;

        BOOT_CFG4 = (curr >> 24u) & 0b11111111u;
        BOOT_CFG3 = (curr >> 16u) & 0b11111111u;
        BOOT_CFG2 = (curr >> 8u) & 0b11111111u;
        BOOT_CFG1 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get SBMR2's BMOD field.
     *
     * BMOD[1:0] shows the latched state of the BOOT_MODE1 and BOOT_MODE0
     * signals on the rising edge of POR_B
     */
    inline uint8_t get_SBMR2_BMOD() volatile
    {
        return (SBMR2 >> 24u) & 0b11u;
    }

    /**
     * Get SBMR2's BT_FUSE_SEL bit.
     *
     * BT_FUSE_SEL shows the state of the BT_FUSE_SEL fuse
     */
    inline bool get_SBMR2_BT_FUSE_SEL() volatile
    {
        return SBMR2 & (1u << 4u);
    }

    /**
     * Get SBMR2's SEC_CONFIG field.
     *
     * SECONFIG[1] shows the state of the SECONFIG[1] fuse
     */
    inline uint8_t get_SBMR2_SEC_CONFIG() volatile
    {
        return (SBMR2 >> 0u) & 0b11u;
    }

    /**
     * Get all of SBMR2's bit fields.
     *
     * (read-write) SRC Boot Mode Register 2
     */
    inline void get_SBMR2(uint8_t &BMOD, bool &BT_FUSE_SEL,
                          uint8_t &SEC_CONFIG) volatile
    {
        uint32_t curr = SBMR2;

        BMOD = (curr >> 24u) & 0b11u;
        BT_FUSE_SEL = curr & (1u << 4u);
        SEC_CONFIG = (curr >> 0u) & 0b11u;
    }

    /**
     * Get SRSR's CDOG_RST_M4 bit.
     *
     * Indicates a reset has been caused by CDOG reset.
     */
    inline bool get_SRSR_CDOG_RST_M4() volatile
    {
        return SRSR & (1u << 30u);
    }

    /**
     * Set SRSR's CDOG_RST_M4 bit.
     *
     * Indicates a reset has been caused by CDOG reset.
     */
    inline void set_SRSR_CDOG_RST_M4() volatile
    {
        SRSR |= 1u << 30u;
    }

    /**
     * Clear SRSR's CDOG_RST_M4 bit.
     *
     * Indicates a reset has been caused by CDOG reset.
     */
    inline void clear_SRSR_CDOG_RST_M4() volatile
    {
        SRSR &= ~(1u << 30u);
    }

    /**
     * Toggle SRSR's CDOG_RST_M4 bit.
     *
     * Indicates a reset has been caused by CDOG reset.
     */
    inline void toggle_SRSR_CDOG_RST_M4() volatile
    {
        SRSR ^= 1u << 30u;
    }

    /**
     * Get SRSR's OVERVOLT_RST_M4 bit.
     *
     * Indicates a reset has been caused by power suppy voltage over the
     * highest permitted level.
     */
    inline bool get_SRSR_OVERVOLT_RST_M4() volatile
    {
        return SRSR & (1u << 29u);
    }

    /**
     * Set SRSR's OVERVOLT_RST_M4 bit.
     *
     * Indicates a reset has been caused by power suppy voltage over the
     * highest permitted level.
     */
    inline void set_SRSR_OVERVOLT_RST_M4() volatile
    {
        SRSR |= 1u << 29u;
    }

    /**
     * Clear SRSR's OVERVOLT_RST_M4 bit.
     *
     * Indicates a reset has been caused by power suppy voltage over the
     * highest permitted level.
     */
    inline void clear_SRSR_OVERVOLT_RST_M4() volatile
    {
        SRSR &= ~(1u << 29u);
    }

    /**
     * Toggle SRSR's OVERVOLT_RST_M4 bit.
     *
     * Indicates a reset has been caused by power suppy voltage over the
     * highest permitted level.
     */
    inline void toggle_SRSR_OVERVOLT_RST_M4() volatile
    {
        SRSR ^= 1u << 29u;
    }

    /**
     * Get SRSR's M7_LOCKUP_M4 bit.
     *
     * Indicates a reset has been caused by M7 CPU lockup or software setting
     * of SYSRESETREQ bit in Application Interrupt and Reset Control Register
     * of the ARM core
     */
    inline bool get_SRSR_M7_LOCKUP_M4() volatile
    {
        return SRSR & (1u << 28u);
    }

    /**
     * Set SRSR's M7_LOCKUP_M4 bit.
     *
     * Indicates a reset has been caused by M7 CPU lockup or software setting
     * of SYSRESETREQ bit in Application Interrupt and Reset Control Register
     * of the ARM core
     */
    inline void set_SRSR_M7_LOCKUP_M4() volatile
    {
        SRSR |= 1u << 28u;
    }

    /**
     * Clear SRSR's M7_LOCKUP_M4 bit.
     *
     * Indicates a reset has been caused by M7 CPU lockup or software setting
     * of SYSRESETREQ bit in Application Interrupt and Reset Control Register
     * of the ARM core
     */
    inline void clear_SRSR_M7_LOCKUP_M4() volatile
    {
        SRSR &= ~(1u << 28u);
    }

    /**
     * Toggle SRSR's M7_LOCKUP_M4 bit.
     *
     * Indicates a reset has been caused by M7 CPU lockup or software setting
     * of SYSRESETREQ bit in Application Interrupt and Reset Control Register
     * of the ARM core
     */
    inline void toggle_SRSR_M7_LOCKUP_M4() volatile
    {
        SRSR ^= 1u << 28u;
    }

    /**
     * Get SRSR's M7_REQUEST_M4 bit.
     *
     * Indicates whether reset was the result of m7 reset request.
     */
    inline bool get_SRSR_M7_REQUEST_M4() volatile
    {
        return SRSR & (1u << 27u);
    }

    /**
     * Set SRSR's M7_REQUEST_M4 bit.
     *
     * Indicates whether reset was the result of m7 reset request.
     */
    inline void set_SRSR_M7_REQUEST_M4() volatile
    {
        SRSR |= 1u << 27u;
    }

    /**
     * Clear SRSR's M7_REQUEST_M4 bit.
     *
     * Indicates whether reset was the result of m7 reset request.
     */
    inline void clear_SRSR_M7_REQUEST_M4() volatile
    {
        SRSR &= ~(1u << 27u);
    }

    /**
     * Toggle SRSR's M7_REQUEST_M4 bit.
     *
     * Indicates whether reset was the result of m7 reset request.
     */
    inline void toggle_SRSR_M7_REQUEST_M4() volatile
    {
        SRSR ^= 1u << 27u;
    }

    /**
     * Get SRSR's TEMPSENSE_RST_B_M4 bit.
     *
     * Temper Sensor software reset
     */
    inline bool get_SRSR_TEMPSENSE_RST_B_M4() volatile
    {
        return SRSR & (1u << 26u);
    }

    /**
     * Set SRSR's TEMPSENSE_RST_B_M4 bit.
     *
     * Temper Sensor software reset
     */
    inline void set_SRSR_TEMPSENSE_RST_B_M4() volatile
    {
        SRSR |= 1u << 26u;
    }

    /**
     * Clear SRSR's TEMPSENSE_RST_B_M4 bit.
     *
     * Temper Sensor software reset
     */
    inline void clear_SRSR_TEMPSENSE_RST_B_M4() volatile
    {
        SRSR &= ~(1u << 26u);
    }

    /**
     * Toggle SRSR's TEMPSENSE_RST_B_M4 bit.
     *
     * Temper Sensor software reset
     */
    inline void toggle_SRSR_TEMPSENSE_RST_B_M4() volatile
    {
        SRSR ^= 1u << 26u;
    }

    /**
     * Get SRSR's WDOG4_RST_B_M4 bit.
     *
     * IC Watchdog4 Time-out reset
     */
    inline bool get_SRSR_WDOG4_RST_B_M4() volatile
    {
        return SRSR & (1u << 25u);
    }

    /**
     * Set SRSR's WDOG4_RST_B_M4 bit.
     *
     * IC Watchdog4 Time-out reset
     */
    inline void set_SRSR_WDOG4_RST_B_M4() volatile
    {
        SRSR |= 1u << 25u;
    }

    /**
     * Clear SRSR's WDOG4_RST_B_M4 bit.
     *
     * IC Watchdog4 Time-out reset
     */
    inline void clear_SRSR_WDOG4_RST_B_M4() volatile
    {
        SRSR &= ~(1u << 25u);
    }

    /**
     * Toggle SRSR's WDOG4_RST_B_M4 bit.
     *
     * IC Watchdog4 Time-out reset
     */
    inline void toggle_SRSR_WDOG4_RST_B_M4() volatile
    {
        SRSR ^= 1u << 25u;
    }

    /**
     * Get SRSR's WDOG3_RST_B_M4 bit.
     *
     * IC Watchdog3 Time-out reset
     */
    inline bool get_SRSR_WDOG3_RST_B_M4() volatile
    {
        return SRSR & (1u << 24u);
    }

    /**
     * Set SRSR's WDOG3_RST_B_M4 bit.
     *
     * IC Watchdog3 Time-out reset
     */
    inline void set_SRSR_WDOG3_RST_B_M4() volatile
    {
        SRSR |= 1u << 24u;
    }

    /**
     * Clear SRSR's WDOG3_RST_B_M4 bit.
     *
     * IC Watchdog3 Time-out reset
     */
    inline void clear_SRSR_WDOG3_RST_B_M4() volatile
    {
        SRSR &= ~(1u << 24u);
    }

    /**
     * Toggle SRSR's WDOG3_RST_B_M4 bit.
     *
     * IC Watchdog3 Time-out reset
     */
    inline void toggle_SRSR_WDOG3_RST_B_M4() volatile
    {
        SRSR ^= 1u << 24u;
    }

    /**
     * Get SRSR's JTAG_SW_RST_M4 bit.
     *
     * JTAG software reset. Indicates whether the reset was the result of
     * software reset from JTAG.
     */
    inline bool get_SRSR_JTAG_SW_RST_M4() volatile
    {
        return SRSR & (1u << 23u);
    }

    /**
     * Set SRSR's JTAG_SW_RST_M4 bit.
     *
     * JTAG software reset. Indicates whether the reset was the result of
     * software reset from JTAG.
     */
    inline void set_SRSR_JTAG_SW_RST_M4() volatile
    {
        SRSR |= 1u << 23u;
    }

    /**
     * Clear SRSR's JTAG_SW_RST_M4 bit.
     *
     * JTAG software reset. Indicates whether the reset was the result of
     * software reset from JTAG.
     */
    inline void clear_SRSR_JTAG_SW_RST_M4() volatile
    {
        SRSR &= ~(1u << 23u);
    }

    /**
     * Toggle SRSR's JTAG_SW_RST_M4 bit.
     *
     * JTAG software reset. Indicates whether the reset was the result of
     * software reset from JTAG.
     */
    inline void toggle_SRSR_JTAG_SW_RST_M4() volatile
    {
        SRSR ^= 1u << 23u;
    }

    /**
     * Get SRSR's JTAG_RST_B_M4 bit.
     *
     * HIGH - Z JTAG reset. Indicates whether the reset was the result of
     * HIGH-Z reset from JTAG.
     */
    inline bool get_SRSR_JTAG_RST_B_M4() volatile
    {
        return SRSR & (1u << 22u);
    }

    /**
     * Set SRSR's JTAG_RST_B_M4 bit.
     *
     * HIGH - Z JTAG reset. Indicates whether the reset was the result of
     * HIGH-Z reset from JTAG.
     */
    inline void set_SRSR_JTAG_RST_B_M4() volatile
    {
        SRSR |= 1u << 22u;
    }

    /**
     * Clear SRSR's JTAG_RST_B_M4 bit.
     *
     * HIGH - Z JTAG reset. Indicates whether the reset was the result of
     * HIGH-Z reset from JTAG.
     */
    inline void clear_SRSR_JTAG_RST_B_M4() volatile
    {
        SRSR &= ~(1u << 22u);
    }

    /**
     * Toggle SRSR's JTAG_RST_B_M4 bit.
     *
     * HIGH - Z JTAG reset. Indicates whether the reset was the result of
     * HIGH-Z reset from JTAG.
     */
    inline void toggle_SRSR_JTAG_RST_B_M4() volatile
    {
        SRSR ^= 1u << 22u;
    }

    /**
     * Get SRSR's WDOG_RST_B_M4 bit.
     *
     * IC Watchdog Time-out reset
     */
    inline bool get_SRSR_WDOG_RST_B_M4() volatile
    {
        return SRSR & (1u << 21u);
    }

    /**
     * Set SRSR's WDOG_RST_B_M4 bit.
     *
     * IC Watchdog Time-out reset
     */
    inline void set_SRSR_WDOG_RST_B_M4() volatile
    {
        SRSR |= 1u << 21u;
    }

    /**
     * Clear SRSR's WDOG_RST_B_M4 bit.
     *
     * IC Watchdog Time-out reset
     */
    inline void clear_SRSR_WDOG_RST_B_M4() volatile
    {
        SRSR &= ~(1u << 21u);
    }

    /**
     * Toggle SRSR's WDOG_RST_B_M4 bit.
     *
     * IC Watchdog Time-out reset
     */
    inline void toggle_SRSR_WDOG_RST_B_M4() volatile
    {
        SRSR ^= 1u << 21u;
    }

    /**
     * Get SRSR's IPP_USER_RESET_B_M4 bit.
     *
     * Indicates whether the reset was the result of the ipp_user_reset_b
     * qualified reset.
     */
    inline bool get_SRSR_IPP_USER_RESET_B_M4() volatile
    {
        return SRSR & (1u << 20u);
    }

    /**
     * Set SRSR's IPP_USER_RESET_B_M4 bit.
     *
     * Indicates whether the reset was the result of the ipp_user_reset_b
     * qualified reset.
     */
    inline void set_SRSR_IPP_USER_RESET_B_M4() volatile
    {
        SRSR |= 1u << 20u;
    }

    /**
     * Clear SRSR's IPP_USER_RESET_B_M4 bit.
     *
     * Indicates whether the reset was the result of the ipp_user_reset_b
     * qualified reset.
     */
    inline void clear_SRSR_IPP_USER_RESET_B_M4() volatile
    {
        SRSR &= ~(1u << 20u);
    }

    /**
     * Toggle SRSR's IPP_USER_RESET_B_M4 bit.
     *
     * Indicates whether the reset was the result of the ipp_user_reset_b
     * qualified reset.
     */
    inline void toggle_SRSR_IPP_USER_RESET_B_M4() volatile
    {
        SRSR ^= 1u << 20u;
    }

    /**
     * Get SRSR's CSU_RESET_B_M4 bit.
     *
     * Indicates whether the reset was the result of the csu_reset_b input.
     */
    inline bool get_SRSR_CSU_RESET_B_M4() volatile
    {
        return SRSR & (1u << 19u);
    }

    /**
     * Set SRSR's CSU_RESET_B_M4 bit.
     *
     * Indicates whether the reset was the result of the csu_reset_b input.
     */
    inline void set_SRSR_CSU_RESET_B_M4() volatile
    {
        SRSR |= 1u << 19u;
    }

    /**
     * Clear SRSR's CSU_RESET_B_M4 bit.
     *
     * Indicates whether the reset was the result of the csu_reset_b input.
     */
    inline void clear_SRSR_CSU_RESET_B_M4() volatile
    {
        SRSR &= ~(1u << 19u);
    }

    /**
     * Toggle SRSR's CSU_RESET_B_M4 bit.
     *
     * Indicates whether the reset was the result of the csu_reset_b input.
     */
    inline void toggle_SRSR_CSU_RESET_B_M4() volatile
    {
        SRSR ^= 1u << 19u;
    }

    /**
     * Get SRSR's M4_LOCKUP_M4 bit.
     *
     * Indicates a reset has been caused by M4 CPU lockup or software setting
     * of SYSRESETREQ bit in Application Interrupt and Reset Control Register
     * of the ARM core
     */
    inline bool get_SRSR_M4_LOCKUP_M4() volatile
    {
        return SRSR & (1u << 18u);
    }

    /**
     * Set SRSR's M4_LOCKUP_M4 bit.
     *
     * Indicates a reset has been caused by M4 CPU lockup or software setting
     * of SYSRESETREQ bit in Application Interrupt and Reset Control Register
     * of the ARM core
     */
    inline void set_SRSR_M4_LOCKUP_M4() volatile
    {
        SRSR |= 1u << 18u;
    }

    /**
     * Clear SRSR's M4_LOCKUP_M4 bit.
     *
     * Indicates a reset has been caused by M4 CPU lockup or software setting
     * of SYSRESETREQ bit in Application Interrupt and Reset Control Register
     * of the ARM core
     */
    inline void clear_SRSR_M4_LOCKUP_M4() volatile
    {
        SRSR &= ~(1u << 18u);
    }

    /**
     * Toggle SRSR's M4_LOCKUP_M4 bit.
     *
     * Indicates a reset has been caused by M4 CPU lockup or software setting
     * of SYSRESETREQ bit in Application Interrupt and Reset Control Register
     * of the ARM core
     */
    inline void toggle_SRSR_M4_LOCKUP_M4() volatile
    {
        SRSR ^= 1u << 18u;
    }

    /**
     * Get SRSR's M4_REQUEST_M4 bit.
     *
     * Indicates whether reset was the result of m4 reset request
     */
    inline bool get_SRSR_M4_REQUEST_M4() volatile
    {
        return SRSR & (1u << 17u);
    }

    /**
     * Set SRSR's M4_REQUEST_M4 bit.
     *
     * Indicates whether reset was the result of m4 reset request
     */
    inline void set_SRSR_M4_REQUEST_M4() volatile
    {
        SRSR |= 1u << 17u;
    }

    /**
     * Clear SRSR's M4_REQUEST_M4 bit.
     *
     * Indicates whether reset was the result of m4 reset request
     */
    inline void clear_SRSR_M4_REQUEST_M4() volatile
    {
        SRSR &= ~(1u << 17u);
    }

    /**
     * Toggle SRSR's M4_REQUEST_M4 bit.
     *
     * Indicates whether reset was the result of m4 reset request
     */
    inline void toggle_SRSR_M4_REQUEST_M4() volatile
    {
        SRSR ^= 1u << 17u;
    }

    /**
     * Get SRSR's IPP_RESET_B_M4 bit.
     *
     * Indicates whether reset was the result of ipp_reset_b pin (Power-up
     * sequence)
     */
    inline bool get_SRSR_IPP_RESET_B_M4() volatile
    {
        return SRSR & (1u << 16u);
    }

    /**
     * Set SRSR's IPP_RESET_B_M4 bit.
     *
     * Indicates whether reset was the result of ipp_reset_b pin (Power-up
     * sequence)
     */
    inline void set_SRSR_IPP_RESET_B_M4() volatile
    {
        SRSR |= 1u << 16u;
    }

    /**
     * Clear SRSR's IPP_RESET_B_M4 bit.
     *
     * Indicates whether reset was the result of ipp_reset_b pin (Power-up
     * sequence)
     */
    inline void clear_SRSR_IPP_RESET_B_M4() volatile
    {
        SRSR &= ~(1u << 16u);
    }

    /**
     * Toggle SRSR's IPP_RESET_B_M4 bit.
     *
     * Indicates whether reset was the result of ipp_reset_b pin (Power-up
     * sequence)
     */
    inline void toggle_SRSR_IPP_RESET_B_M4() volatile
    {
        SRSR ^= 1u << 16u;
    }

    /**
     * Get SRSR's CDOG_RST_M7 bit.
     *
     * Indicates a reset has been caused by CDOG reset.
     */
    inline bool get_SRSR_CDOG_RST_M7() volatile
    {
        return SRSR & (1u << 14u);
    }

    /**
     * Set SRSR's CDOG_RST_M7 bit.
     *
     * Indicates a reset has been caused by CDOG reset.
     */
    inline void set_SRSR_CDOG_RST_M7() volatile
    {
        SRSR |= 1u << 14u;
    }

    /**
     * Clear SRSR's CDOG_RST_M7 bit.
     *
     * Indicates a reset has been caused by CDOG reset.
     */
    inline void clear_SRSR_CDOG_RST_M7() volatile
    {
        SRSR &= ~(1u << 14u);
    }

    /**
     * Toggle SRSR's CDOG_RST_M7 bit.
     *
     * Indicates a reset has been caused by CDOG reset.
     */
    inline void toggle_SRSR_CDOG_RST_M7() volatile
    {
        SRSR ^= 1u << 14u;
    }

    /**
     * Get SRSR's OVERVOLT_RST_M7 bit.
     *
     * Indicates a reset has been caused by power suppy voltage over the
     * highest permitted level.
     */
    inline bool get_SRSR_OVERVOLT_RST_M7() volatile
    {
        return SRSR & (1u << 13u);
    }

    /**
     * Set SRSR's OVERVOLT_RST_M7 bit.
     *
     * Indicates a reset has been caused by power suppy voltage over the
     * highest permitted level.
     */
    inline void set_SRSR_OVERVOLT_RST_M7() volatile
    {
        SRSR |= 1u << 13u;
    }

    /**
     * Clear SRSR's OVERVOLT_RST_M7 bit.
     *
     * Indicates a reset has been caused by power suppy voltage over the
     * highest permitted level.
     */
    inline void clear_SRSR_OVERVOLT_RST_M7() volatile
    {
        SRSR &= ~(1u << 13u);
    }

    /**
     * Toggle SRSR's OVERVOLT_RST_M7 bit.
     *
     * Indicates a reset has been caused by power suppy voltage over the
     * highest permitted level.
     */
    inline void toggle_SRSR_OVERVOLT_RST_M7() volatile
    {
        SRSR ^= 1u << 13u;
    }

    /**
     * Get SRSR's M4_LOCKUP_M7 bit.
     *
     * Indicates a reset has been caused by M4 CPU lockup or software setting
     * of SYSRESETREQ bit in Application Interrupt and Reset Control Register
     * of the ARM core
     */
    inline bool get_SRSR_M4_LOCKUP_M7() volatile
    {
        return SRSR & (1u << 12u);
    }

    /**
     * Set SRSR's M4_LOCKUP_M7 bit.
     *
     * Indicates a reset has been caused by M4 CPU lockup or software setting
     * of SYSRESETREQ bit in Application Interrupt and Reset Control Register
     * of the ARM core
     */
    inline void set_SRSR_M4_LOCKUP_M7() volatile
    {
        SRSR |= 1u << 12u;
    }

    /**
     * Clear SRSR's M4_LOCKUP_M7 bit.
     *
     * Indicates a reset has been caused by M4 CPU lockup or software setting
     * of SYSRESETREQ bit in Application Interrupt and Reset Control Register
     * of the ARM core
     */
    inline void clear_SRSR_M4_LOCKUP_M7() volatile
    {
        SRSR &= ~(1u << 12u);
    }

    /**
     * Toggle SRSR's M4_LOCKUP_M7 bit.
     *
     * Indicates a reset has been caused by M4 CPU lockup or software setting
     * of SYSRESETREQ bit in Application Interrupt and Reset Control Register
     * of the ARM core
     */
    inline void toggle_SRSR_M4_LOCKUP_M7() volatile
    {
        SRSR ^= 1u << 12u;
    }

    /**
     * Get SRSR's M4_REQUEST_M7 bit.
     *
     * Indicates whether reset was the result of m4 reset request.
     */
    inline bool get_SRSR_M4_REQUEST_M7() volatile
    {
        return SRSR & (1u << 11u);
    }

    /**
     * Set SRSR's M4_REQUEST_M7 bit.
     *
     * Indicates whether reset was the result of m4 reset request.
     */
    inline void set_SRSR_M4_REQUEST_M7() volatile
    {
        SRSR |= 1u << 11u;
    }

    /**
     * Clear SRSR's M4_REQUEST_M7 bit.
     *
     * Indicates whether reset was the result of m4 reset request.
     */
    inline void clear_SRSR_M4_REQUEST_M7() volatile
    {
        SRSR &= ~(1u << 11u);
    }

    /**
     * Toggle SRSR's M4_REQUEST_M7 bit.
     *
     * Indicates whether reset was the result of m4 reset request.
     */
    inline void toggle_SRSR_M4_REQUEST_M7() volatile
    {
        SRSR ^= 1u << 11u;
    }

    /**
     * Get SRSR's TEMPSENSE_RST_B_M7 bit.
     *
     * Temper Sensor software reset
     */
    inline bool get_SRSR_TEMPSENSE_RST_B_M7() volatile
    {
        return SRSR & (1u << 10u);
    }

    /**
     * Set SRSR's TEMPSENSE_RST_B_M7 bit.
     *
     * Temper Sensor software reset
     */
    inline void set_SRSR_TEMPSENSE_RST_B_M7() volatile
    {
        SRSR |= 1u << 10u;
    }

    /**
     * Clear SRSR's TEMPSENSE_RST_B_M7 bit.
     *
     * Temper Sensor software reset
     */
    inline void clear_SRSR_TEMPSENSE_RST_B_M7() volatile
    {
        SRSR &= ~(1u << 10u);
    }

    /**
     * Toggle SRSR's TEMPSENSE_RST_B_M7 bit.
     *
     * Temper Sensor software reset
     */
    inline void toggle_SRSR_TEMPSENSE_RST_B_M7() volatile
    {
        SRSR ^= 1u << 10u;
    }

    /**
     * Get SRSR's WDOG4_RST_B_M7 bit.
     *
     * IC Watchdog4 Time-out reset
     */
    inline bool get_SRSR_WDOG4_RST_B_M7() volatile
    {
        return SRSR & (1u << 9u);
    }

    /**
     * Set SRSR's WDOG4_RST_B_M7 bit.
     *
     * IC Watchdog4 Time-out reset
     */
    inline void set_SRSR_WDOG4_RST_B_M7() volatile
    {
        SRSR |= 1u << 9u;
    }

    /**
     * Clear SRSR's WDOG4_RST_B_M7 bit.
     *
     * IC Watchdog4 Time-out reset
     */
    inline void clear_SRSR_WDOG4_RST_B_M7() volatile
    {
        SRSR &= ~(1u << 9u);
    }

    /**
     * Toggle SRSR's WDOG4_RST_B_M7 bit.
     *
     * IC Watchdog4 Time-out reset
     */
    inline void toggle_SRSR_WDOG4_RST_B_M7() volatile
    {
        SRSR ^= 1u << 9u;
    }

    /**
     * Get SRSR's WDOG3_RST_B_M7 bit.
     *
     * IC Watchdog3 Time-out reset
     */
    inline bool get_SRSR_WDOG3_RST_B_M7() volatile
    {
        return SRSR & (1u << 8u);
    }

    /**
     * Set SRSR's WDOG3_RST_B_M7 bit.
     *
     * IC Watchdog3 Time-out reset
     */
    inline void set_SRSR_WDOG3_RST_B_M7() volatile
    {
        SRSR |= 1u << 8u;
    }

    /**
     * Clear SRSR's WDOG3_RST_B_M7 bit.
     *
     * IC Watchdog3 Time-out reset
     */
    inline void clear_SRSR_WDOG3_RST_B_M7() volatile
    {
        SRSR &= ~(1u << 8u);
    }

    /**
     * Toggle SRSR's WDOG3_RST_B_M7 bit.
     *
     * IC Watchdog3 Time-out reset
     */
    inline void toggle_SRSR_WDOG3_RST_B_M7() volatile
    {
        SRSR ^= 1u << 8u;
    }

    /**
     * Get SRSR's JTAG_SW_RST_M7 bit.
     *
     * JTAG software reset. Indicates whether the reset was the result of
     * software reset from JTAG.
     */
    inline bool get_SRSR_JTAG_SW_RST_M7() volatile
    {
        return SRSR & (1u << 7u);
    }

    /**
     * Set SRSR's JTAG_SW_RST_M7 bit.
     *
     * JTAG software reset. Indicates whether the reset was the result of
     * software reset from JTAG.
     */
    inline void set_SRSR_JTAG_SW_RST_M7() volatile
    {
        SRSR |= 1u << 7u;
    }

    /**
     * Clear SRSR's JTAG_SW_RST_M7 bit.
     *
     * JTAG software reset. Indicates whether the reset was the result of
     * software reset from JTAG.
     */
    inline void clear_SRSR_JTAG_SW_RST_M7() volatile
    {
        SRSR &= ~(1u << 7u);
    }

    /**
     * Toggle SRSR's JTAG_SW_RST_M7 bit.
     *
     * JTAG software reset. Indicates whether the reset was the result of
     * software reset from JTAG.
     */
    inline void toggle_SRSR_JTAG_SW_RST_M7() volatile
    {
        SRSR ^= 1u << 7u;
    }

    /**
     * Get SRSR's JTAG_RST_B_M7 bit.
     *
     * HIGH - Z JTAG reset. Indicates whether the reset was the result of
     * HIGH-Z reset from JTAG.
     */
    inline bool get_SRSR_JTAG_RST_B_M7() volatile
    {
        return SRSR & (1u << 6u);
    }

    /**
     * Set SRSR's JTAG_RST_B_M7 bit.
     *
     * HIGH - Z JTAG reset. Indicates whether the reset was the result of
     * HIGH-Z reset from JTAG.
     */
    inline void set_SRSR_JTAG_RST_B_M7() volatile
    {
        SRSR |= 1u << 6u;
    }

    /**
     * Clear SRSR's JTAG_RST_B_M7 bit.
     *
     * HIGH - Z JTAG reset. Indicates whether the reset was the result of
     * HIGH-Z reset from JTAG.
     */
    inline void clear_SRSR_JTAG_RST_B_M7() volatile
    {
        SRSR &= ~(1u << 6u);
    }

    /**
     * Toggle SRSR's JTAG_RST_B_M7 bit.
     *
     * HIGH - Z JTAG reset. Indicates whether the reset was the result of
     * HIGH-Z reset from JTAG.
     */
    inline void toggle_SRSR_JTAG_RST_B_M7() volatile
    {
        SRSR ^= 1u << 6u;
    }

    /**
     * Get SRSR's WDOG_RST_B_M7 bit.
     *
     * IC Watchdog Time-out reset
     */
    inline bool get_SRSR_WDOG_RST_B_M7() volatile
    {
        return SRSR & (1u << 5u);
    }

    /**
     * Set SRSR's WDOG_RST_B_M7 bit.
     *
     * IC Watchdog Time-out reset
     */
    inline void set_SRSR_WDOG_RST_B_M7() volatile
    {
        SRSR |= 1u << 5u;
    }

    /**
     * Clear SRSR's WDOG_RST_B_M7 bit.
     *
     * IC Watchdog Time-out reset
     */
    inline void clear_SRSR_WDOG_RST_B_M7() volatile
    {
        SRSR &= ~(1u << 5u);
    }

    /**
     * Toggle SRSR's WDOG_RST_B_M7 bit.
     *
     * IC Watchdog Time-out reset
     */
    inline void toggle_SRSR_WDOG_RST_B_M7() volatile
    {
        SRSR ^= 1u << 5u;
    }

    /**
     * Get SRSR's IPP_USER_RESET_B_M7 bit.
     *
     * Indicates whether the reset was the result of the ipp_user_reset_b
     * qualified reset.
     */
    inline bool get_SRSR_IPP_USER_RESET_B_M7() volatile
    {
        return SRSR & (1u << 4u);
    }

    /**
     * Set SRSR's IPP_USER_RESET_B_M7 bit.
     *
     * Indicates whether the reset was the result of the ipp_user_reset_b
     * qualified reset.
     */
    inline void set_SRSR_IPP_USER_RESET_B_M7() volatile
    {
        SRSR |= 1u << 4u;
    }

    /**
     * Clear SRSR's IPP_USER_RESET_B_M7 bit.
     *
     * Indicates whether the reset was the result of the ipp_user_reset_b
     * qualified reset.
     */
    inline void clear_SRSR_IPP_USER_RESET_B_M7() volatile
    {
        SRSR &= ~(1u << 4u);
    }

    /**
     * Toggle SRSR's IPP_USER_RESET_B_M7 bit.
     *
     * Indicates whether the reset was the result of the ipp_user_reset_b
     * qualified reset.
     */
    inline void toggle_SRSR_IPP_USER_RESET_B_M7() volatile
    {
        SRSR ^= 1u << 4u;
    }

    /**
     * Get SRSR's CSU_RESET_B_M7 bit.
     *
     * Indicates whether the reset was the result of the csu_reset_b input.
     */
    inline bool get_SRSR_CSU_RESET_B_M7() volatile
    {
        return SRSR & (1u << 3u);
    }

    /**
     * Set SRSR's CSU_RESET_B_M7 bit.
     *
     * Indicates whether the reset was the result of the csu_reset_b input.
     */
    inline void set_SRSR_CSU_RESET_B_M7() volatile
    {
        SRSR |= 1u << 3u;
    }

    /**
     * Clear SRSR's CSU_RESET_B_M7 bit.
     *
     * Indicates whether the reset was the result of the csu_reset_b input.
     */
    inline void clear_SRSR_CSU_RESET_B_M7() volatile
    {
        SRSR &= ~(1u << 3u);
    }

    /**
     * Toggle SRSR's CSU_RESET_B_M7 bit.
     *
     * Indicates whether the reset was the result of the csu_reset_b input.
     */
    inline void toggle_SRSR_CSU_RESET_B_M7() volatile
    {
        SRSR ^= 1u << 3u;
    }

    /**
     * Get SRSR's M7_LOCKUP_M7 bit.
     *
     * Indicates a reset has been caused by M7 CPU lockup or software setting
     * of SYSRESETREQ bit in Application Interrupt and Reset Control Register
     * of the ARM core
     */
    inline bool get_SRSR_M7_LOCKUP_M7() volatile
    {
        return SRSR & (1u << 2u);
    }

    /**
     * Set SRSR's M7_LOCKUP_M7 bit.
     *
     * Indicates a reset has been caused by M7 CPU lockup or software setting
     * of SYSRESETREQ bit in Application Interrupt and Reset Control Register
     * of the ARM core
     */
    inline void set_SRSR_M7_LOCKUP_M7() volatile
    {
        SRSR |= 1u << 2u;
    }

    /**
     * Clear SRSR's M7_LOCKUP_M7 bit.
     *
     * Indicates a reset has been caused by M7 CPU lockup or software setting
     * of SYSRESETREQ bit in Application Interrupt and Reset Control Register
     * of the ARM core
     */
    inline void clear_SRSR_M7_LOCKUP_M7() volatile
    {
        SRSR &= ~(1u << 2u);
    }

    /**
     * Toggle SRSR's M7_LOCKUP_M7 bit.
     *
     * Indicates a reset has been caused by M7 CPU lockup or software setting
     * of SYSRESETREQ bit in Application Interrupt and Reset Control Register
     * of the ARM core
     */
    inline void toggle_SRSR_M7_LOCKUP_M7() volatile
    {
        SRSR ^= 1u << 2u;
    }

    /**
     * Get SRSR's M7_REQUEST_M7 bit.
     *
     * Indicates whether reset was the result of m7 reset request
     */
    inline bool get_SRSR_M7_REQUEST_M7() volatile
    {
        return SRSR & (1u << 1u);
    }

    /**
     * Set SRSR's M7_REQUEST_M7 bit.
     *
     * Indicates whether reset was the result of m7 reset request
     */
    inline void set_SRSR_M7_REQUEST_M7() volatile
    {
        SRSR |= 1u << 1u;
    }

    /**
     * Clear SRSR's M7_REQUEST_M7 bit.
     *
     * Indicates whether reset was the result of m7 reset request
     */
    inline void clear_SRSR_M7_REQUEST_M7() volatile
    {
        SRSR &= ~(1u << 1u);
    }

    /**
     * Toggle SRSR's M7_REQUEST_M7 bit.
     *
     * Indicates whether reset was the result of m7 reset request
     */
    inline void toggle_SRSR_M7_REQUEST_M7() volatile
    {
        SRSR ^= 1u << 1u;
    }

    /**
     * Get SRSR's IPP_RESET_B_M7 bit.
     *
     * Indicates whether reset was the result of ipp_reset_b pin (Power-up
     * sequence)
     */
    inline bool get_SRSR_IPP_RESET_B_M7() volatile
    {
        return SRSR & (1u << 0u);
    }

    /**
     * Set SRSR's IPP_RESET_B_M7 bit.
     *
     * Indicates whether reset was the result of ipp_reset_b pin (Power-up
     * sequence)
     */
    inline void set_SRSR_IPP_RESET_B_M7() volatile
    {
        SRSR |= 1u << 0u;
    }

    /**
     * Clear SRSR's IPP_RESET_B_M7 bit.
     *
     * Indicates whether reset was the result of ipp_reset_b pin (Power-up
     * sequence)
     */
    inline void clear_SRSR_IPP_RESET_B_M7() volatile
    {
        SRSR &= ~(1u << 0u);
    }

    /**
     * Toggle SRSR's IPP_RESET_B_M7 bit.
     *
     * Indicates whether reset was the result of ipp_reset_b pin (Power-up
     * sequence)
     */
    inline void toggle_SRSR_IPP_RESET_B_M7() volatile
    {
        SRSR ^= 1u << 0u;
    }

    /**
     * Get all of SRSR's bit fields.
     *
     * (read-write) SRC Reset Status Register
     */
    inline void get_SRSR(
        bool &CDOG_RST_M4, bool &OVERVOLT_RST_M4, bool &M7_LOCKUP_M4,
        bool &M7_REQUEST_M4, bool &TEMPSENSE_RST_B_M4, bool &WDOG4_RST_B_M4,
        bool &WDOG3_RST_B_M4, bool &JTAG_SW_RST_M4, bool &JTAG_RST_B_M4,
        bool &WDOG_RST_B_M4, bool &IPP_USER_RESET_B_M4, bool &CSU_RESET_B_M4,
        bool &M4_LOCKUP_M4, bool &M4_REQUEST_M4, bool &IPP_RESET_B_M4,
        bool &CDOG_RST_M7, bool &OVERVOLT_RST_M7, bool &M4_LOCKUP_M7,
        bool &M4_REQUEST_M7, bool &TEMPSENSE_RST_B_M7, bool &WDOG4_RST_B_M7,
        bool &WDOG3_RST_B_M7, bool &JTAG_SW_RST_M7, bool &JTAG_RST_B_M7,
        bool &WDOG_RST_B_M7, bool &IPP_USER_RESET_B_M7, bool &CSU_RESET_B_M7,
        bool &M7_LOCKUP_M7, bool &M7_REQUEST_M7, bool &IPP_RESET_B_M7) volatile
    {
        uint32_t curr = SRSR;

        CDOG_RST_M4 = curr & (1u << 30u);
        OVERVOLT_RST_M4 = curr & (1u << 29u);
        M7_LOCKUP_M4 = curr & (1u << 28u);
        M7_REQUEST_M4 = curr & (1u << 27u);
        TEMPSENSE_RST_B_M4 = curr & (1u << 26u);
        WDOG4_RST_B_M4 = curr & (1u << 25u);
        WDOG3_RST_B_M4 = curr & (1u << 24u);
        JTAG_SW_RST_M4 = curr & (1u << 23u);
        JTAG_RST_B_M4 = curr & (1u << 22u);
        WDOG_RST_B_M4 = curr & (1u << 21u);
        IPP_USER_RESET_B_M4 = curr & (1u << 20u);
        CSU_RESET_B_M4 = curr & (1u << 19u);
        M4_LOCKUP_M4 = curr & (1u << 18u);
        M4_REQUEST_M4 = curr & (1u << 17u);
        IPP_RESET_B_M4 = curr & (1u << 16u);
        CDOG_RST_M7 = curr & (1u << 14u);
        OVERVOLT_RST_M7 = curr & (1u << 13u);
        M4_LOCKUP_M7 = curr & (1u << 12u);
        M4_REQUEST_M7 = curr & (1u << 11u);
        TEMPSENSE_RST_B_M7 = curr & (1u << 10u);
        WDOG4_RST_B_M7 = curr & (1u << 9u);
        WDOG3_RST_B_M7 = curr & (1u << 8u);
        JTAG_SW_RST_M7 = curr & (1u << 7u);
        JTAG_RST_B_M7 = curr & (1u << 6u);
        WDOG_RST_B_M7 = curr & (1u << 5u);
        IPP_USER_RESET_B_M7 = curr & (1u << 4u);
        CSU_RESET_B_M7 = curr & (1u << 3u);
        M7_LOCKUP_M7 = curr & (1u << 2u);
        M7_REQUEST_M7 = curr & (1u << 1u);
        IPP_RESET_B_M7 = curr & (1u << 0u);
    }

    /**
     * Set all of SRSR's bit fields.
     *
     * (read-write) SRC Reset Status Register
     */
    inline void set_SRSR(
        bool CDOG_RST_M4, bool OVERVOLT_RST_M4, bool M7_LOCKUP_M4,
        bool M7_REQUEST_M4, bool TEMPSENSE_RST_B_M4, bool WDOG4_RST_B_M4,
        bool WDOG3_RST_B_M4, bool JTAG_SW_RST_M4, bool JTAG_RST_B_M4,
        bool WDOG_RST_B_M4, bool IPP_USER_RESET_B_M4, bool CSU_RESET_B_M4,
        bool M4_LOCKUP_M4, bool M4_REQUEST_M4, bool IPP_RESET_B_M4,
        bool CDOG_RST_M7, bool OVERVOLT_RST_M7, bool M4_LOCKUP_M7,
        bool M4_REQUEST_M7, bool TEMPSENSE_RST_B_M7, bool WDOG4_RST_B_M7,
        bool WDOG3_RST_B_M7, bool JTAG_SW_RST_M7, bool JTAG_RST_B_M7,
        bool WDOG_RST_B_M7, bool IPP_USER_RESET_B_M7, bool CSU_RESET_B_M7,
        bool M7_LOCKUP_M7, bool M7_REQUEST_M7, bool IPP_RESET_B_M7) volatile
    {
        uint32_t curr = SRSR;

        curr &= ~(0b1u << 30u);
        curr |= (CDOG_RST_M4 & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (OVERVOLT_RST_M4 & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (M7_LOCKUP_M4 & 0b1u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (M7_REQUEST_M4 & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (TEMPSENSE_RST_B_M4 & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (WDOG4_RST_B_M4 & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (WDOG3_RST_B_M4 & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (JTAG_SW_RST_M4 & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (JTAG_RST_B_M4 & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (WDOG_RST_B_M4 & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (IPP_USER_RESET_B_M4 & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (CSU_RESET_B_M4 & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (M4_LOCKUP_M4 & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (M4_REQUEST_M4 & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (IPP_RESET_B_M4 & 0b1u) << 16u;
        curr &= ~(0b1u << 14u);
        curr |= (CDOG_RST_M7 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (OVERVOLT_RST_M7 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (M4_LOCKUP_M7 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (M4_REQUEST_M7 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (TEMPSENSE_RST_B_M7 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (WDOG4_RST_B_M7 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (WDOG3_RST_B_M7 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (JTAG_SW_RST_M7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (JTAG_RST_B_M7 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (WDOG_RST_B_M7 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (IPP_USER_RESET_B_M7 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (CSU_RESET_B_M7 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (M7_LOCKUP_M7 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (M7_REQUEST_M7 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (IPP_RESET_B_M7 & 0b1u) << 0u;

        SRSR = curr;
    }

    /**
     * Get GPR's GPR field.
     *
     * General Purpose Register.
     */
    inline uint32_t get_GPR_GPR(std::size_t index) volatile
    {
        return (GPR[index] >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR's GPR field.
     *
     * General Purpose Register.
     */
    inline void set_GPR_GPR(std::size_t index, uint32_t value) volatile
    {
        uint32_t curr = GPR[index];

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR[index] = curr;
    }

    /**
     * Get AUTHEN_MEGA's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline bool get_AUTHEN_MEGA_LOCK_SETTING() volatile
    {
        return AUTHEN_MEGA & (1u << 31u);
    }

    /**
     * Set AUTHEN_MEGA's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void set_AUTHEN_MEGA_LOCK_SETTING() volatile
    {
        AUTHEN_MEGA |= 1u << 31u;
    }

    /**
     * Clear AUTHEN_MEGA's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void clear_AUTHEN_MEGA_LOCK_SETTING() volatile
    {
        AUTHEN_MEGA &= ~(1u << 31u);
    }

    /**
     * Toggle AUTHEN_MEGA's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void toggle_AUTHEN_MEGA_LOCK_SETTING() volatile
    {
        AUTHEN_MEGA ^= 1u << 31u;
    }

    /**
     * Get AUTHEN_MEGA's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline bool get_AUTHEN_MEGA_NONSECURE() volatile
    {
        return AUTHEN_MEGA & (1u << 25u);
    }

    /**
     * Set AUTHEN_MEGA's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void set_AUTHEN_MEGA_NONSECURE() volatile
    {
        AUTHEN_MEGA |= 1u << 25u;
    }

    /**
     * Clear AUTHEN_MEGA's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void clear_AUTHEN_MEGA_NONSECURE() volatile
    {
        AUTHEN_MEGA &= ~(1u << 25u);
    }

    /**
     * Toggle AUTHEN_MEGA's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void toggle_AUTHEN_MEGA_NONSECURE() volatile
    {
        AUTHEN_MEGA ^= 1u << 25u;
    }

    /**
     * Get AUTHEN_MEGA's USER bit.
     *
     * Allow user mode access
     */
    inline bool get_AUTHEN_MEGA_USER() volatile
    {
        return AUTHEN_MEGA & (1u << 24u);
    }

    /**
     * Set AUTHEN_MEGA's USER bit.
     *
     * Allow user mode access
     */
    inline void set_AUTHEN_MEGA_USER() volatile
    {
        AUTHEN_MEGA |= 1u << 24u;
    }

    /**
     * Clear AUTHEN_MEGA's USER bit.
     *
     * Allow user mode access
     */
    inline void clear_AUTHEN_MEGA_USER() volatile
    {
        AUTHEN_MEGA &= ~(1u << 24u);
    }

    /**
     * Toggle AUTHEN_MEGA's USER bit.
     *
     * Allow user mode access
     */
    inline void toggle_AUTHEN_MEGA_USER() volatile
    {
        AUTHEN_MEGA ^= 1u << 24u;
    }

    /**
     * Get AUTHEN_MEGA's LOCK_LIST bit.
     *
     * White list lock
     */
    inline bool get_AUTHEN_MEGA_LOCK_LIST() volatile
    {
        return AUTHEN_MEGA & (1u << 23u);
    }

    /**
     * Set AUTHEN_MEGA's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void set_AUTHEN_MEGA_LOCK_LIST() volatile
    {
        AUTHEN_MEGA |= 1u << 23u;
    }

    /**
     * Clear AUTHEN_MEGA's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void clear_AUTHEN_MEGA_LOCK_LIST() volatile
    {
        AUTHEN_MEGA &= ~(1u << 23u);
    }

    /**
     * Toggle AUTHEN_MEGA's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void toggle_AUTHEN_MEGA_LOCK_LIST() volatile
    {
        AUTHEN_MEGA ^= 1u << 23u;
    }

    /**
     * Get AUTHEN_MEGA's WHITE_LIST field.
     *
     * Domain ID white list
     */
    inline uint8_t get_AUTHEN_MEGA_WHITE_LIST() volatile
    {
        return (AUTHEN_MEGA >> 16u) & 0b1111u;
    }

    /**
     * Set AUTHEN_MEGA's WHITE_LIST field.
     *
     * Domain ID white list
     */
    inline void set_AUTHEN_MEGA_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = AUTHEN_MEGA;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        AUTHEN_MEGA = curr;
    }

    /**
     * Get AUTHEN_MEGA's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline bool get_AUTHEN_MEGA_LOCK_ASSIGN() volatile
    {
        return AUTHEN_MEGA & (1u << 15u);
    }

    /**
     * Set AUTHEN_MEGA's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void set_AUTHEN_MEGA_LOCK_ASSIGN() volatile
    {
        AUTHEN_MEGA |= 1u << 15u;
    }

    /**
     * Clear AUTHEN_MEGA's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void clear_AUTHEN_MEGA_LOCK_ASSIGN() volatile
    {
        AUTHEN_MEGA &= ~(1u << 15u);
    }

    /**
     * Toggle AUTHEN_MEGA's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void toggle_AUTHEN_MEGA_LOCK_ASSIGN() volatile
    {
        AUTHEN_MEGA ^= 1u << 15u;
    }

    /**
     * Get AUTHEN_MEGA's ASSIGN_LIST field.
     *
     * when this bitfield set to 1, reset of slice would be subject to
     * corresponding core status transition
     */
    inline uint8_t get_AUTHEN_MEGA_ASSIGN_LIST() volatile
    {
        return (AUTHEN_MEGA >> 8u) & 0b1111u;
    }

    /**
     * Set AUTHEN_MEGA's ASSIGN_LIST field.
     *
     * when this bitfield set to 1, reset of slice would be subject to
     * corresponding core status transition
     */
    inline void set_AUTHEN_MEGA_ASSIGN_LIST(uint8_t value) volatile
    {
        uint32_t curr = AUTHEN_MEGA;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        AUTHEN_MEGA = curr;
    }

    /**
     * Get AUTHEN_MEGA's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline bool get_AUTHEN_MEGA_LOCK_MODE() volatile
    {
        return AUTHEN_MEGA & (1u << 7u);
    }

    /**
     * Set AUTHEN_MEGA's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void set_AUTHEN_MEGA_LOCK_MODE() volatile
    {
        AUTHEN_MEGA |= 1u << 7u;
    }

    /**
     * Clear AUTHEN_MEGA's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void clear_AUTHEN_MEGA_LOCK_MODE() volatile
    {
        AUTHEN_MEGA &= ~(1u << 7u);
    }

    /**
     * Toggle AUTHEN_MEGA's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void toggle_AUTHEN_MEGA_LOCK_MODE() volatile
    {
        AUTHEN_MEGA ^= 1u << 7u;
    }

    /**
     * Get AUTHEN_MEGA's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline bool get_AUTHEN_MEGA_SETPOINT_MODE() volatile
    {
        return AUTHEN_MEGA & (1u << 1u);
    }

    /**
     * Set AUTHEN_MEGA's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void set_AUTHEN_MEGA_SETPOINT_MODE() volatile
    {
        AUTHEN_MEGA |= 1u << 1u;
    }

    /**
     * Clear AUTHEN_MEGA's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void clear_AUTHEN_MEGA_SETPOINT_MODE() volatile
    {
        AUTHEN_MEGA &= ~(1u << 1u);
    }

    /**
     * Toggle AUTHEN_MEGA's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void toggle_AUTHEN_MEGA_SETPOINT_MODE() volatile
    {
        AUTHEN_MEGA ^= 1u << 1u;
    }

    /**
     * Get AUTHEN_MEGA's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline bool get_AUTHEN_MEGA_DOMAIN_MODE() volatile
    {
        return AUTHEN_MEGA & (1u << 0u);
    }

    /**
     * Set AUTHEN_MEGA's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void set_AUTHEN_MEGA_DOMAIN_MODE() volatile
    {
        AUTHEN_MEGA |= 1u << 0u;
    }

    /**
     * Clear AUTHEN_MEGA's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void clear_AUTHEN_MEGA_DOMAIN_MODE() volatile
    {
        AUTHEN_MEGA &= ~(1u << 0u);
    }

    /**
     * Toggle AUTHEN_MEGA's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void toggle_AUTHEN_MEGA_DOMAIN_MODE() volatile
    {
        AUTHEN_MEGA ^= 1u << 0u;
    }

    /**
     * Get all of AUTHEN_MEGA's bit fields.
     *
     * (read-write) Slice Authentication Register
     */
    inline void get_AUTHEN_MEGA(bool &LOCK_SETTING, bool &NONSECURE,
                                bool &USER, bool &LOCK_LIST,
                                uint8_t &WHITE_LIST, bool &LOCK_ASSIGN,
                                uint8_t &ASSIGN_LIST, bool &LOCK_MODE,
                                bool &SETPOINT_MODE,
                                bool &DOMAIN_MODE) volatile
    {
        uint32_t curr = AUTHEN_MEGA;

        LOCK_SETTING = curr & (1u << 31u);
        NONSECURE = curr & (1u << 25u);
        USER = curr & (1u << 24u);
        LOCK_LIST = curr & (1u << 23u);
        WHITE_LIST = (curr >> 16u) & 0b1111u;
        LOCK_ASSIGN = curr & (1u << 15u);
        ASSIGN_LIST = (curr >> 8u) & 0b1111u;
        LOCK_MODE = curr & (1u << 7u);
        SETPOINT_MODE = curr & (1u << 1u);
        DOMAIN_MODE = curr & (1u << 0u);
    }

    /**
     * Set all of AUTHEN_MEGA's bit fields.
     *
     * (read-write) Slice Authentication Register
     */
    inline void set_AUTHEN_MEGA(bool LOCK_SETTING, bool NONSECURE, bool USER,
                                bool LOCK_LIST, uint8_t WHITE_LIST,
                                bool LOCK_ASSIGN, uint8_t ASSIGN_LIST,
                                bool LOCK_MODE, bool SETPOINT_MODE,
                                bool DOMAIN_MODE) volatile
    {
        uint32_t curr = AUTHEN_MEGA;

        curr &= ~(0b1u << 31u);
        curr |= (LOCK_SETTING & 0b1u) << 31u;
        curr &= ~(0b1u << 25u);
        curr |= (NONSECURE & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (USER & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (LOCK_LIST & 0b1u) << 23u;
        curr &= ~(0b1111u << 16u);
        curr |= (WHITE_LIST & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (LOCK_ASSIGN & 0b1u) << 15u;
        curr &= ~(0b1111u << 8u);
        curr |= (ASSIGN_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (LOCK_MODE & 0b1u) << 7u;
        curr &= ~(0b1u << 1u);
        curr |= (SETPOINT_MODE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (DOMAIN_MODE & 0b1u) << 0u;

        AUTHEN_MEGA = curr;
    }

    /**
     * Get CTRL_MEGA's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline bool get_CTRL_MEGA_SW_RESET() volatile
    {
        return CTRL_MEGA & (1u << 0u);
    }

    /**
     * Set CTRL_MEGA's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void set_CTRL_MEGA_SW_RESET() volatile
    {
        CTRL_MEGA |= 1u << 0u;
    }

    /**
     * Clear CTRL_MEGA's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void clear_CTRL_MEGA_SW_RESET() volatile
    {
        CTRL_MEGA &= ~(1u << 0u);
    }

    /**
     * Toggle CTRL_MEGA's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void toggle_CTRL_MEGA_SW_RESET() volatile
    {
        CTRL_MEGA ^= 1u << 0u;
    }

    /**
     * Get SETPOINT_MEGA's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline bool get_SETPOINT_MEGA_SETPOINT15() volatile
    {
        return SETPOINT_MEGA & (1u << 15u);
    }

    /**
     * Set SETPOINT_MEGA's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void set_SETPOINT_MEGA_SETPOINT15() volatile
    {
        SETPOINT_MEGA |= 1u << 15u;
    }

    /**
     * Clear SETPOINT_MEGA's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void clear_SETPOINT_MEGA_SETPOINT15() volatile
    {
        SETPOINT_MEGA &= ~(1u << 15u);
    }

    /**
     * Toggle SETPOINT_MEGA's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void toggle_SETPOINT_MEGA_SETPOINT15() volatile
    {
        SETPOINT_MEGA ^= 1u << 15u;
    }

    /**
     * Get SETPOINT_MEGA's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline bool get_SETPOINT_MEGA_SETPOINT14() volatile
    {
        return SETPOINT_MEGA & (1u << 14u);
    }

    /**
     * Set SETPOINT_MEGA's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void set_SETPOINT_MEGA_SETPOINT14() volatile
    {
        SETPOINT_MEGA |= 1u << 14u;
    }

    /**
     * Clear SETPOINT_MEGA's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void clear_SETPOINT_MEGA_SETPOINT14() volatile
    {
        SETPOINT_MEGA &= ~(1u << 14u);
    }

    /**
     * Toggle SETPOINT_MEGA's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void toggle_SETPOINT_MEGA_SETPOINT14() volatile
    {
        SETPOINT_MEGA ^= 1u << 14u;
    }

    /**
     * Get SETPOINT_MEGA's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline bool get_SETPOINT_MEGA_SETPOINT13() volatile
    {
        return SETPOINT_MEGA & (1u << 13u);
    }

    /**
     * Set SETPOINT_MEGA's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void set_SETPOINT_MEGA_SETPOINT13() volatile
    {
        SETPOINT_MEGA |= 1u << 13u;
    }

    /**
     * Clear SETPOINT_MEGA's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void clear_SETPOINT_MEGA_SETPOINT13() volatile
    {
        SETPOINT_MEGA &= ~(1u << 13u);
    }

    /**
     * Toggle SETPOINT_MEGA's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void toggle_SETPOINT_MEGA_SETPOINT13() volatile
    {
        SETPOINT_MEGA ^= 1u << 13u;
    }

    /**
     * Get SETPOINT_MEGA's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline bool get_SETPOINT_MEGA_SETPOINT12() volatile
    {
        return SETPOINT_MEGA & (1u << 12u);
    }

    /**
     * Set SETPOINT_MEGA's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void set_SETPOINT_MEGA_SETPOINT12() volatile
    {
        SETPOINT_MEGA |= 1u << 12u;
    }

    /**
     * Clear SETPOINT_MEGA's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void clear_SETPOINT_MEGA_SETPOINT12() volatile
    {
        SETPOINT_MEGA &= ~(1u << 12u);
    }

    /**
     * Toggle SETPOINT_MEGA's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void toggle_SETPOINT_MEGA_SETPOINT12() volatile
    {
        SETPOINT_MEGA ^= 1u << 12u;
    }

    /**
     * Get SETPOINT_MEGA's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline bool get_SETPOINT_MEGA_SETPOINT11() volatile
    {
        return SETPOINT_MEGA & (1u << 11u);
    }

    /**
     * Set SETPOINT_MEGA's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void set_SETPOINT_MEGA_SETPOINT11() volatile
    {
        SETPOINT_MEGA |= 1u << 11u;
    }

    /**
     * Clear SETPOINT_MEGA's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void clear_SETPOINT_MEGA_SETPOINT11() volatile
    {
        SETPOINT_MEGA &= ~(1u << 11u);
    }

    /**
     * Toggle SETPOINT_MEGA's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void toggle_SETPOINT_MEGA_SETPOINT11() volatile
    {
        SETPOINT_MEGA ^= 1u << 11u;
    }

    /**
     * Get SETPOINT_MEGA's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline bool get_SETPOINT_MEGA_SETPOINT10() volatile
    {
        return SETPOINT_MEGA & (1u << 10u);
    }

    /**
     * Set SETPOINT_MEGA's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void set_SETPOINT_MEGA_SETPOINT10() volatile
    {
        SETPOINT_MEGA |= 1u << 10u;
    }

    /**
     * Clear SETPOINT_MEGA's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void clear_SETPOINT_MEGA_SETPOINT10() volatile
    {
        SETPOINT_MEGA &= ~(1u << 10u);
    }

    /**
     * Toggle SETPOINT_MEGA's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void toggle_SETPOINT_MEGA_SETPOINT10() volatile
    {
        SETPOINT_MEGA ^= 1u << 10u;
    }

    /**
     * Get SETPOINT_MEGA's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline bool get_SETPOINT_MEGA_SETPOINT9() volatile
    {
        return SETPOINT_MEGA & (1u << 9u);
    }

    /**
     * Set SETPOINT_MEGA's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void set_SETPOINT_MEGA_SETPOINT9() volatile
    {
        SETPOINT_MEGA |= 1u << 9u;
    }

    /**
     * Clear SETPOINT_MEGA's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void clear_SETPOINT_MEGA_SETPOINT9() volatile
    {
        SETPOINT_MEGA &= ~(1u << 9u);
    }

    /**
     * Toggle SETPOINT_MEGA's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void toggle_SETPOINT_MEGA_SETPOINT9() volatile
    {
        SETPOINT_MEGA ^= 1u << 9u;
    }

    /**
     * Get SETPOINT_MEGA's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline bool get_SETPOINT_MEGA_SETPOINT8() volatile
    {
        return SETPOINT_MEGA & (1u << 8u);
    }

    /**
     * Set SETPOINT_MEGA's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void set_SETPOINT_MEGA_SETPOINT8() volatile
    {
        SETPOINT_MEGA |= 1u << 8u;
    }

    /**
     * Clear SETPOINT_MEGA's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void clear_SETPOINT_MEGA_SETPOINT8() volatile
    {
        SETPOINT_MEGA &= ~(1u << 8u);
    }

    /**
     * Toggle SETPOINT_MEGA's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void toggle_SETPOINT_MEGA_SETPOINT8() volatile
    {
        SETPOINT_MEGA ^= 1u << 8u;
    }

    /**
     * Get SETPOINT_MEGA's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline bool get_SETPOINT_MEGA_SETPOINT7() volatile
    {
        return SETPOINT_MEGA & (1u << 7u);
    }

    /**
     * Set SETPOINT_MEGA's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void set_SETPOINT_MEGA_SETPOINT7() volatile
    {
        SETPOINT_MEGA |= 1u << 7u;
    }

    /**
     * Clear SETPOINT_MEGA's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void clear_SETPOINT_MEGA_SETPOINT7() volatile
    {
        SETPOINT_MEGA &= ~(1u << 7u);
    }

    /**
     * Toggle SETPOINT_MEGA's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void toggle_SETPOINT_MEGA_SETPOINT7() volatile
    {
        SETPOINT_MEGA ^= 1u << 7u;
    }

    /**
     * Get SETPOINT_MEGA's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline bool get_SETPOINT_MEGA_SETPOINT6() volatile
    {
        return SETPOINT_MEGA & (1u << 6u);
    }

    /**
     * Set SETPOINT_MEGA's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void set_SETPOINT_MEGA_SETPOINT6() volatile
    {
        SETPOINT_MEGA |= 1u << 6u;
    }

    /**
     * Clear SETPOINT_MEGA's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void clear_SETPOINT_MEGA_SETPOINT6() volatile
    {
        SETPOINT_MEGA &= ~(1u << 6u);
    }

    /**
     * Toggle SETPOINT_MEGA's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void toggle_SETPOINT_MEGA_SETPOINT6() volatile
    {
        SETPOINT_MEGA ^= 1u << 6u;
    }

    /**
     * Get SETPOINT_MEGA's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline bool get_SETPOINT_MEGA_SETPOINT5() volatile
    {
        return SETPOINT_MEGA & (1u << 5u);
    }

    /**
     * Set SETPOINT_MEGA's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void set_SETPOINT_MEGA_SETPOINT5() volatile
    {
        SETPOINT_MEGA |= 1u << 5u;
    }

    /**
     * Clear SETPOINT_MEGA's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void clear_SETPOINT_MEGA_SETPOINT5() volatile
    {
        SETPOINT_MEGA &= ~(1u << 5u);
    }

    /**
     * Toggle SETPOINT_MEGA's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void toggle_SETPOINT_MEGA_SETPOINT5() volatile
    {
        SETPOINT_MEGA ^= 1u << 5u;
    }

    /**
     * Get SETPOINT_MEGA's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline bool get_SETPOINT_MEGA_SETPOINT4() volatile
    {
        return SETPOINT_MEGA & (1u << 4u);
    }

    /**
     * Set SETPOINT_MEGA's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void set_SETPOINT_MEGA_SETPOINT4() volatile
    {
        SETPOINT_MEGA |= 1u << 4u;
    }

    /**
     * Clear SETPOINT_MEGA's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void clear_SETPOINT_MEGA_SETPOINT4() volatile
    {
        SETPOINT_MEGA &= ~(1u << 4u);
    }

    /**
     * Toggle SETPOINT_MEGA's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void toggle_SETPOINT_MEGA_SETPOINT4() volatile
    {
        SETPOINT_MEGA ^= 1u << 4u;
    }

    /**
     * Get SETPOINT_MEGA's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline bool get_SETPOINT_MEGA_SETPOINT3() volatile
    {
        return SETPOINT_MEGA & (1u << 3u);
    }

    /**
     * Set SETPOINT_MEGA's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void set_SETPOINT_MEGA_SETPOINT3() volatile
    {
        SETPOINT_MEGA |= 1u << 3u;
    }

    /**
     * Clear SETPOINT_MEGA's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void clear_SETPOINT_MEGA_SETPOINT3() volatile
    {
        SETPOINT_MEGA &= ~(1u << 3u);
    }

    /**
     * Toggle SETPOINT_MEGA's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void toggle_SETPOINT_MEGA_SETPOINT3() volatile
    {
        SETPOINT_MEGA ^= 1u << 3u;
    }

    /**
     * Get SETPOINT_MEGA's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline bool get_SETPOINT_MEGA_SETPOINT2() volatile
    {
        return SETPOINT_MEGA & (1u << 2u);
    }

    /**
     * Set SETPOINT_MEGA's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void set_SETPOINT_MEGA_SETPOINT2() volatile
    {
        SETPOINT_MEGA |= 1u << 2u;
    }

    /**
     * Clear SETPOINT_MEGA's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void clear_SETPOINT_MEGA_SETPOINT2() volatile
    {
        SETPOINT_MEGA &= ~(1u << 2u);
    }

    /**
     * Toggle SETPOINT_MEGA's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void toggle_SETPOINT_MEGA_SETPOINT2() volatile
    {
        SETPOINT_MEGA ^= 1u << 2u;
    }

    /**
     * Get SETPOINT_MEGA's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline bool get_SETPOINT_MEGA_SETPOINT1() volatile
    {
        return SETPOINT_MEGA & (1u << 1u);
    }

    /**
     * Set SETPOINT_MEGA's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void set_SETPOINT_MEGA_SETPOINT1() volatile
    {
        SETPOINT_MEGA |= 1u << 1u;
    }

    /**
     * Clear SETPOINT_MEGA's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void clear_SETPOINT_MEGA_SETPOINT1() volatile
    {
        SETPOINT_MEGA &= ~(1u << 1u);
    }

    /**
     * Toggle SETPOINT_MEGA's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void toggle_SETPOINT_MEGA_SETPOINT1() volatile
    {
        SETPOINT_MEGA ^= 1u << 1u;
    }

    /**
     * Get SETPOINT_MEGA's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline bool get_SETPOINT_MEGA_SETPOINT0() volatile
    {
        return SETPOINT_MEGA & (1u << 0u);
    }

    /**
     * Set SETPOINT_MEGA's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void set_SETPOINT_MEGA_SETPOINT0() volatile
    {
        SETPOINT_MEGA |= 1u << 0u;
    }

    /**
     * Clear SETPOINT_MEGA's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void clear_SETPOINT_MEGA_SETPOINT0() volatile
    {
        SETPOINT_MEGA &= ~(1u << 0u);
    }

    /**
     * Toggle SETPOINT_MEGA's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void toggle_SETPOINT_MEGA_SETPOINT0() volatile
    {
        SETPOINT_MEGA ^= 1u << 0u;
    }

    /**
     * Get all of SETPOINT_MEGA's bit fields.
     *
     * (read-write) Slice Setpoint Config Register
     */
    inline void get_SETPOINT_MEGA(bool &SETPOINT15, bool &SETPOINT14,
                                  bool &SETPOINT13, bool &SETPOINT12,
                                  bool &SETPOINT11, bool &SETPOINT10,
                                  bool &SETPOINT9, bool &SETPOINT8,
                                  bool &SETPOINT7, bool &SETPOINT6,
                                  bool &SETPOINT5, bool &SETPOINT4,
                                  bool &SETPOINT3, bool &SETPOINT2,
                                  bool &SETPOINT1, bool &SETPOINT0) volatile
    {
        uint32_t curr = SETPOINT_MEGA;

        SETPOINT15 = curr & (1u << 15u);
        SETPOINT14 = curr & (1u << 14u);
        SETPOINT13 = curr & (1u << 13u);
        SETPOINT12 = curr & (1u << 12u);
        SETPOINT11 = curr & (1u << 11u);
        SETPOINT10 = curr & (1u << 10u);
        SETPOINT9 = curr & (1u << 9u);
        SETPOINT8 = curr & (1u << 8u);
        SETPOINT7 = curr & (1u << 7u);
        SETPOINT6 = curr & (1u << 6u);
        SETPOINT5 = curr & (1u << 5u);
        SETPOINT4 = curr & (1u << 4u);
        SETPOINT3 = curr & (1u << 3u);
        SETPOINT2 = curr & (1u << 2u);
        SETPOINT1 = curr & (1u << 1u);
        SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of SETPOINT_MEGA's bit fields.
     *
     * (read-write) Slice Setpoint Config Register
     */
    inline void set_SETPOINT_MEGA(bool SETPOINT15, bool SETPOINT14,
                                  bool SETPOINT13, bool SETPOINT12,
                                  bool SETPOINT11, bool SETPOINT10,
                                  bool SETPOINT9, bool SETPOINT8,
                                  bool SETPOINT7, bool SETPOINT6,
                                  bool SETPOINT5, bool SETPOINT4,
                                  bool SETPOINT3, bool SETPOINT2,
                                  bool SETPOINT1, bool SETPOINT0) volatile
    {
        uint32_t curr = SETPOINT_MEGA;

        curr &= ~(0b1u << 15u);
        curr |= (SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SETPOINT0 & 0b1u) << 0u;

        SETPOINT_MEGA = curr;
    }

    /**
     * Get DOMAIN_MEGA's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline bool get_DOMAIN_MEGA_CPU1_SUSP() volatile
    {
        return DOMAIN_MEGA & (1u << 7u);
    }

    /**
     * Set DOMAIN_MEGA's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void set_DOMAIN_MEGA_CPU1_SUSP() volatile
    {
        DOMAIN_MEGA |= 1u << 7u;
    }

    /**
     * Clear DOMAIN_MEGA's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void clear_DOMAIN_MEGA_CPU1_SUSP() volatile
    {
        DOMAIN_MEGA &= ~(1u << 7u);
    }

    /**
     * Toggle DOMAIN_MEGA's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void toggle_DOMAIN_MEGA_CPU1_SUSP() volatile
    {
        DOMAIN_MEGA ^= 1u << 7u;
    }

    /**
     * Get DOMAIN_MEGA's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline bool get_DOMAIN_MEGA_CPU1_STOP() volatile
    {
        return DOMAIN_MEGA & (1u << 6u);
    }

    /**
     * Set DOMAIN_MEGA's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void set_DOMAIN_MEGA_CPU1_STOP() volatile
    {
        DOMAIN_MEGA |= 1u << 6u;
    }

    /**
     * Clear DOMAIN_MEGA's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void clear_DOMAIN_MEGA_CPU1_STOP() volatile
    {
        DOMAIN_MEGA &= ~(1u << 6u);
    }

    /**
     * Toggle DOMAIN_MEGA's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void toggle_DOMAIN_MEGA_CPU1_STOP() volatile
    {
        DOMAIN_MEGA ^= 1u << 6u;
    }

    /**
     * Get DOMAIN_MEGA's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline bool get_DOMAIN_MEGA_CPU1_WAIT() volatile
    {
        return DOMAIN_MEGA & (1u << 5u);
    }

    /**
     * Set DOMAIN_MEGA's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void set_DOMAIN_MEGA_CPU1_WAIT() volatile
    {
        DOMAIN_MEGA |= 1u << 5u;
    }

    /**
     * Clear DOMAIN_MEGA's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void clear_DOMAIN_MEGA_CPU1_WAIT() volatile
    {
        DOMAIN_MEGA &= ~(1u << 5u);
    }

    /**
     * Toggle DOMAIN_MEGA's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void toggle_DOMAIN_MEGA_CPU1_WAIT() volatile
    {
        DOMAIN_MEGA ^= 1u << 5u;
    }

    /**
     * Get DOMAIN_MEGA's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline bool get_DOMAIN_MEGA_CPU1_RUN() volatile
    {
        return DOMAIN_MEGA & (1u << 4u);
    }

    /**
     * Set DOMAIN_MEGA's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void set_DOMAIN_MEGA_CPU1_RUN() volatile
    {
        DOMAIN_MEGA |= 1u << 4u;
    }

    /**
     * Clear DOMAIN_MEGA's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void clear_DOMAIN_MEGA_CPU1_RUN() volatile
    {
        DOMAIN_MEGA &= ~(1u << 4u);
    }

    /**
     * Toggle DOMAIN_MEGA's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void toggle_DOMAIN_MEGA_CPU1_RUN() volatile
    {
        DOMAIN_MEGA ^= 1u << 4u;
    }

    /**
     * Get DOMAIN_MEGA's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline bool get_DOMAIN_MEGA_CPU0_SUSP() volatile
    {
        return DOMAIN_MEGA & (1u << 3u);
    }

    /**
     * Set DOMAIN_MEGA's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void set_DOMAIN_MEGA_CPU0_SUSP() volatile
    {
        DOMAIN_MEGA |= 1u << 3u;
    }

    /**
     * Clear DOMAIN_MEGA's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void clear_DOMAIN_MEGA_CPU0_SUSP() volatile
    {
        DOMAIN_MEGA &= ~(1u << 3u);
    }

    /**
     * Toggle DOMAIN_MEGA's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void toggle_DOMAIN_MEGA_CPU0_SUSP() volatile
    {
        DOMAIN_MEGA ^= 1u << 3u;
    }

    /**
     * Get DOMAIN_MEGA's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline bool get_DOMAIN_MEGA_CPU0_STOP() volatile
    {
        return DOMAIN_MEGA & (1u << 2u);
    }

    /**
     * Set DOMAIN_MEGA's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void set_DOMAIN_MEGA_CPU0_STOP() volatile
    {
        DOMAIN_MEGA |= 1u << 2u;
    }

    /**
     * Clear DOMAIN_MEGA's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void clear_DOMAIN_MEGA_CPU0_STOP() volatile
    {
        DOMAIN_MEGA &= ~(1u << 2u);
    }

    /**
     * Toggle DOMAIN_MEGA's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void toggle_DOMAIN_MEGA_CPU0_STOP() volatile
    {
        DOMAIN_MEGA ^= 1u << 2u;
    }

    /**
     * Get DOMAIN_MEGA's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline bool get_DOMAIN_MEGA_CPU0_WAIT() volatile
    {
        return DOMAIN_MEGA & (1u << 1u);
    }

    /**
     * Set DOMAIN_MEGA's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void set_DOMAIN_MEGA_CPU0_WAIT() volatile
    {
        DOMAIN_MEGA |= 1u << 1u;
    }

    /**
     * Clear DOMAIN_MEGA's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void clear_DOMAIN_MEGA_CPU0_WAIT() volatile
    {
        DOMAIN_MEGA &= ~(1u << 1u);
    }

    /**
     * Toggle DOMAIN_MEGA's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void toggle_DOMAIN_MEGA_CPU0_WAIT() volatile
    {
        DOMAIN_MEGA ^= 1u << 1u;
    }

    /**
     * Get DOMAIN_MEGA's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline bool get_DOMAIN_MEGA_CPU0_RUN() volatile
    {
        return DOMAIN_MEGA & (1u << 0u);
    }

    /**
     * Set DOMAIN_MEGA's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void set_DOMAIN_MEGA_CPU0_RUN() volatile
    {
        DOMAIN_MEGA |= 1u << 0u;
    }

    /**
     * Clear DOMAIN_MEGA's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void clear_DOMAIN_MEGA_CPU0_RUN() volatile
    {
        DOMAIN_MEGA &= ~(1u << 0u);
    }

    /**
     * Toggle DOMAIN_MEGA's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void toggle_DOMAIN_MEGA_CPU0_RUN() volatile
    {
        DOMAIN_MEGA ^= 1u << 0u;
    }

    /**
     * Get all of DOMAIN_MEGA's bit fields.
     *
     * (read-write) Slice Domain Config Register
     */
    inline void get_DOMAIN_MEGA(bool &CPU1_SUSP, bool &CPU1_STOP,
                                bool &CPU1_WAIT, bool &CPU1_RUN,
                                bool &CPU0_SUSP, bool &CPU0_STOP,
                                bool &CPU0_WAIT, bool &CPU0_RUN) volatile
    {
        uint32_t curr = DOMAIN_MEGA;

        CPU1_SUSP = curr & (1u << 7u);
        CPU1_STOP = curr & (1u << 6u);
        CPU1_WAIT = curr & (1u << 5u);
        CPU1_RUN = curr & (1u << 4u);
        CPU0_SUSP = curr & (1u << 3u);
        CPU0_STOP = curr & (1u << 2u);
        CPU0_WAIT = curr & (1u << 1u);
        CPU0_RUN = curr & (1u << 0u);
    }

    /**
     * Set all of DOMAIN_MEGA's bit fields.
     *
     * (read-write) Slice Domain Config Register
     */
    inline void set_DOMAIN_MEGA(bool CPU1_SUSP, bool CPU1_STOP, bool CPU1_WAIT,
                                bool CPU1_RUN, bool CPU0_SUSP, bool CPU0_STOP,
                                bool CPU0_WAIT, bool CPU0_RUN) volatile
    {
        uint32_t curr = DOMAIN_MEGA;

        curr &= ~(0b1u << 7u);
        curr |= (CPU1_SUSP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CPU1_STOP & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (CPU1_WAIT & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (CPU1_RUN & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (CPU0_SUSP & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CPU0_STOP & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CPU0_WAIT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CPU0_RUN & 0b1u) << 0u;

        DOMAIN_MEGA = curr;
    }

    /**
     * Get STAT_MEGA's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline bool get_STAT_MEGA_RST_BY_SW() volatile
    {
        return STAT_MEGA & (1u << 3u);
    }

    /**
     * Set STAT_MEGA's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void set_STAT_MEGA_RST_BY_SW() volatile
    {
        STAT_MEGA |= 1u << 3u;
    }

    /**
     * Clear STAT_MEGA's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void clear_STAT_MEGA_RST_BY_SW() volatile
    {
        STAT_MEGA &= ~(1u << 3u);
    }

    /**
     * Toggle STAT_MEGA's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void toggle_STAT_MEGA_RST_BY_SW() volatile
    {
        STAT_MEGA ^= 1u << 3u;
    }

    /**
     * Get STAT_MEGA's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline bool get_STAT_MEGA_RST_BY_HW() volatile
    {
        return STAT_MEGA & (1u << 2u);
    }

    /**
     * Set STAT_MEGA's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void set_STAT_MEGA_RST_BY_HW() volatile
    {
        STAT_MEGA |= 1u << 2u;
    }

    /**
     * Clear STAT_MEGA's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void clear_STAT_MEGA_RST_BY_HW() volatile
    {
        STAT_MEGA &= ~(1u << 2u);
    }

    /**
     * Toggle STAT_MEGA's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void toggle_STAT_MEGA_RST_BY_HW() volatile
    {
        STAT_MEGA ^= 1u << 2u;
    }

    /**
     * Get STAT_MEGA's UNDER_RST bit.
     *
     * This is a Read Only bit. It indicate if the reset is in process.
     */
    inline bool get_STAT_MEGA_UNDER_RST() volatile
    {
        return STAT_MEGA & (1u << 0u);
    }

    /**
     * Get all of STAT_MEGA's bit fields.
     *
     * (read-write) Slice Status Register
     */
    inline void get_STAT_MEGA(bool &RST_BY_SW, bool &RST_BY_HW,
                              bool &UNDER_RST) volatile
    {
        uint32_t curr = STAT_MEGA;

        RST_BY_SW = curr & (1u << 3u);
        RST_BY_HW = curr & (1u << 2u);
        UNDER_RST = curr & (1u << 0u);
    }

    /**
     * Set all of STAT_MEGA's bit fields.
     *
     * (read-write) Slice Status Register
     */
    inline void set_STAT_MEGA(bool RST_BY_SW, bool RST_BY_HW) volatile
    {
        uint32_t curr = STAT_MEGA;

        curr &= ~(0b1u << 3u);
        curr |= (RST_BY_SW & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (RST_BY_HW & 0b1u) << 2u;

        STAT_MEGA = curr;
    }

    /**
     * Get AUTHEN_DISPLAY's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline bool get_AUTHEN_DISPLAY_LOCK_SETTING() volatile
    {
        return AUTHEN_DISPLAY & (1u << 31u);
    }

    /**
     * Set AUTHEN_DISPLAY's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void set_AUTHEN_DISPLAY_LOCK_SETTING() volatile
    {
        AUTHEN_DISPLAY |= 1u << 31u;
    }

    /**
     * Clear AUTHEN_DISPLAY's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void clear_AUTHEN_DISPLAY_LOCK_SETTING() volatile
    {
        AUTHEN_DISPLAY &= ~(1u << 31u);
    }

    /**
     * Toggle AUTHEN_DISPLAY's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void toggle_AUTHEN_DISPLAY_LOCK_SETTING() volatile
    {
        AUTHEN_DISPLAY ^= 1u << 31u;
    }

    /**
     * Get AUTHEN_DISPLAY's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline bool get_AUTHEN_DISPLAY_NONSECURE() volatile
    {
        return AUTHEN_DISPLAY & (1u << 25u);
    }

    /**
     * Set AUTHEN_DISPLAY's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void set_AUTHEN_DISPLAY_NONSECURE() volatile
    {
        AUTHEN_DISPLAY |= 1u << 25u;
    }

    /**
     * Clear AUTHEN_DISPLAY's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void clear_AUTHEN_DISPLAY_NONSECURE() volatile
    {
        AUTHEN_DISPLAY &= ~(1u << 25u);
    }

    /**
     * Toggle AUTHEN_DISPLAY's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void toggle_AUTHEN_DISPLAY_NONSECURE() volatile
    {
        AUTHEN_DISPLAY ^= 1u << 25u;
    }

    /**
     * Get AUTHEN_DISPLAY's USER bit.
     *
     * Allow user mode access
     */
    inline bool get_AUTHEN_DISPLAY_USER() volatile
    {
        return AUTHEN_DISPLAY & (1u << 24u);
    }

    /**
     * Set AUTHEN_DISPLAY's USER bit.
     *
     * Allow user mode access
     */
    inline void set_AUTHEN_DISPLAY_USER() volatile
    {
        AUTHEN_DISPLAY |= 1u << 24u;
    }

    /**
     * Clear AUTHEN_DISPLAY's USER bit.
     *
     * Allow user mode access
     */
    inline void clear_AUTHEN_DISPLAY_USER() volatile
    {
        AUTHEN_DISPLAY &= ~(1u << 24u);
    }

    /**
     * Toggle AUTHEN_DISPLAY's USER bit.
     *
     * Allow user mode access
     */
    inline void toggle_AUTHEN_DISPLAY_USER() volatile
    {
        AUTHEN_DISPLAY ^= 1u << 24u;
    }

    /**
     * Get AUTHEN_DISPLAY's LOCK_LIST bit.
     *
     * White list lock
     */
    inline bool get_AUTHEN_DISPLAY_LOCK_LIST() volatile
    {
        return AUTHEN_DISPLAY & (1u << 23u);
    }

    /**
     * Set AUTHEN_DISPLAY's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void set_AUTHEN_DISPLAY_LOCK_LIST() volatile
    {
        AUTHEN_DISPLAY |= 1u << 23u;
    }

    /**
     * Clear AUTHEN_DISPLAY's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void clear_AUTHEN_DISPLAY_LOCK_LIST() volatile
    {
        AUTHEN_DISPLAY &= ~(1u << 23u);
    }

    /**
     * Toggle AUTHEN_DISPLAY's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void toggle_AUTHEN_DISPLAY_LOCK_LIST() volatile
    {
        AUTHEN_DISPLAY ^= 1u << 23u;
    }

    /**
     * Get AUTHEN_DISPLAY's WHITE_LIST field.
     *
     * Domain ID white list
     */
    inline uint8_t get_AUTHEN_DISPLAY_WHITE_LIST() volatile
    {
        return (AUTHEN_DISPLAY >> 16u) & 0b1111u;
    }

    /**
     * Set AUTHEN_DISPLAY's WHITE_LIST field.
     *
     * Domain ID white list
     */
    inline void set_AUTHEN_DISPLAY_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = AUTHEN_DISPLAY;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        AUTHEN_DISPLAY = curr;
    }

    /**
     * Get AUTHEN_DISPLAY's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline bool get_AUTHEN_DISPLAY_LOCK_ASSIGN() volatile
    {
        return AUTHEN_DISPLAY & (1u << 15u);
    }

    /**
     * Set AUTHEN_DISPLAY's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void set_AUTHEN_DISPLAY_LOCK_ASSIGN() volatile
    {
        AUTHEN_DISPLAY |= 1u << 15u;
    }

    /**
     * Clear AUTHEN_DISPLAY's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void clear_AUTHEN_DISPLAY_LOCK_ASSIGN() volatile
    {
        AUTHEN_DISPLAY &= ~(1u << 15u);
    }

    /**
     * Toggle AUTHEN_DISPLAY's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void toggle_AUTHEN_DISPLAY_LOCK_ASSIGN() volatile
    {
        AUTHEN_DISPLAY ^= 1u << 15u;
    }

    /**
     * Get AUTHEN_DISPLAY's ASSIGN_LIST field.
     *
     * when this bitfield set to 1, reset of slice would be subject to
     * corresponding core status transition
     */
    inline uint8_t get_AUTHEN_DISPLAY_ASSIGN_LIST() volatile
    {
        return (AUTHEN_DISPLAY >> 8u) & 0b1111u;
    }

    /**
     * Set AUTHEN_DISPLAY's ASSIGN_LIST field.
     *
     * when this bitfield set to 1, reset of slice would be subject to
     * corresponding core status transition
     */
    inline void set_AUTHEN_DISPLAY_ASSIGN_LIST(uint8_t value) volatile
    {
        uint32_t curr = AUTHEN_DISPLAY;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        AUTHEN_DISPLAY = curr;
    }

    /**
     * Get AUTHEN_DISPLAY's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline bool get_AUTHEN_DISPLAY_LOCK_MODE() volatile
    {
        return AUTHEN_DISPLAY & (1u << 7u);
    }

    /**
     * Set AUTHEN_DISPLAY's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void set_AUTHEN_DISPLAY_LOCK_MODE() volatile
    {
        AUTHEN_DISPLAY |= 1u << 7u;
    }

    /**
     * Clear AUTHEN_DISPLAY's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void clear_AUTHEN_DISPLAY_LOCK_MODE() volatile
    {
        AUTHEN_DISPLAY &= ~(1u << 7u);
    }

    /**
     * Toggle AUTHEN_DISPLAY's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void toggle_AUTHEN_DISPLAY_LOCK_MODE() volatile
    {
        AUTHEN_DISPLAY ^= 1u << 7u;
    }

    /**
     * Get AUTHEN_DISPLAY's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline bool get_AUTHEN_DISPLAY_SETPOINT_MODE() volatile
    {
        return AUTHEN_DISPLAY & (1u << 1u);
    }

    /**
     * Set AUTHEN_DISPLAY's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void set_AUTHEN_DISPLAY_SETPOINT_MODE() volatile
    {
        AUTHEN_DISPLAY |= 1u << 1u;
    }

    /**
     * Clear AUTHEN_DISPLAY's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void clear_AUTHEN_DISPLAY_SETPOINT_MODE() volatile
    {
        AUTHEN_DISPLAY &= ~(1u << 1u);
    }

    /**
     * Toggle AUTHEN_DISPLAY's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void toggle_AUTHEN_DISPLAY_SETPOINT_MODE() volatile
    {
        AUTHEN_DISPLAY ^= 1u << 1u;
    }

    /**
     * Get AUTHEN_DISPLAY's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline bool get_AUTHEN_DISPLAY_DOMAIN_MODE() volatile
    {
        return AUTHEN_DISPLAY & (1u << 0u);
    }

    /**
     * Set AUTHEN_DISPLAY's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void set_AUTHEN_DISPLAY_DOMAIN_MODE() volatile
    {
        AUTHEN_DISPLAY |= 1u << 0u;
    }

    /**
     * Clear AUTHEN_DISPLAY's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void clear_AUTHEN_DISPLAY_DOMAIN_MODE() volatile
    {
        AUTHEN_DISPLAY &= ~(1u << 0u);
    }

    /**
     * Toggle AUTHEN_DISPLAY's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void toggle_AUTHEN_DISPLAY_DOMAIN_MODE() volatile
    {
        AUTHEN_DISPLAY ^= 1u << 0u;
    }

    /**
     * Get all of AUTHEN_DISPLAY's bit fields.
     *
     * (read-write) Slice Authentication Register
     */
    inline void get_AUTHEN_DISPLAY(bool &LOCK_SETTING, bool &NONSECURE,
                                   bool &USER, bool &LOCK_LIST,
                                   uint8_t &WHITE_LIST, bool &LOCK_ASSIGN,
                                   uint8_t &ASSIGN_LIST, bool &LOCK_MODE,
                                   bool &SETPOINT_MODE,
                                   bool &DOMAIN_MODE) volatile
    {
        uint32_t curr = AUTHEN_DISPLAY;

        LOCK_SETTING = curr & (1u << 31u);
        NONSECURE = curr & (1u << 25u);
        USER = curr & (1u << 24u);
        LOCK_LIST = curr & (1u << 23u);
        WHITE_LIST = (curr >> 16u) & 0b1111u;
        LOCK_ASSIGN = curr & (1u << 15u);
        ASSIGN_LIST = (curr >> 8u) & 0b1111u;
        LOCK_MODE = curr & (1u << 7u);
        SETPOINT_MODE = curr & (1u << 1u);
        DOMAIN_MODE = curr & (1u << 0u);
    }

    /**
     * Set all of AUTHEN_DISPLAY's bit fields.
     *
     * (read-write) Slice Authentication Register
     */
    inline void set_AUTHEN_DISPLAY(bool LOCK_SETTING, bool NONSECURE,
                                   bool USER, bool LOCK_LIST,
                                   uint8_t WHITE_LIST, bool LOCK_ASSIGN,
                                   uint8_t ASSIGN_LIST, bool LOCK_MODE,
                                   bool SETPOINT_MODE,
                                   bool DOMAIN_MODE) volatile
    {
        uint32_t curr = AUTHEN_DISPLAY;

        curr &= ~(0b1u << 31u);
        curr |= (LOCK_SETTING & 0b1u) << 31u;
        curr &= ~(0b1u << 25u);
        curr |= (NONSECURE & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (USER & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (LOCK_LIST & 0b1u) << 23u;
        curr &= ~(0b1111u << 16u);
        curr |= (WHITE_LIST & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (LOCK_ASSIGN & 0b1u) << 15u;
        curr &= ~(0b1111u << 8u);
        curr |= (ASSIGN_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (LOCK_MODE & 0b1u) << 7u;
        curr &= ~(0b1u << 1u);
        curr |= (SETPOINT_MODE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (DOMAIN_MODE & 0b1u) << 0u;

        AUTHEN_DISPLAY = curr;
    }

    /**
     * Get CTRL_DISPLAY's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline bool get_CTRL_DISPLAY_SW_RESET() volatile
    {
        return CTRL_DISPLAY & (1u << 0u);
    }

    /**
     * Set CTRL_DISPLAY's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void set_CTRL_DISPLAY_SW_RESET() volatile
    {
        CTRL_DISPLAY |= 1u << 0u;
    }

    /**
     * Clear CTRL_DISPLAY's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void clear_CTRL_DISPLAY_SW_RESET() volatile
    {
        CTRL_DISPLAY &= ~(1u << 0u);
    }

    /**
     * Toggle CTRL_DISPLAY's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void toggle_CTRL_DISPLAY_SW_RESET() volatile
    {
        CTRL_DISPLAY ^= 1u << 0u;
    }

    /**
     * Get SETPOINT_DISPLAY's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline bool get_SETPOINT_DISPLAY_SETPOINT15() volatile
    {
        return SETPOINT_DISPLAY & (1u << 15u);
    }

    /**
     * Set SETPOINT_DISPLAY's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void set_SETPOINT_DISPLAY_SETPOINT15() volatile
    {
        SETPOINT_DISPLAY |= 1u << 15u;
    }

    /**
     * Clear SETPOINT_DISPLAY's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void clear_SETPOINT_DISPLAY_SETPOINT15() volatile
    {
        SETPOINT_DISPLAY &= ~(1u << 15u);
    }

    /**
     * Toggle SETPOINT_DISPLAY's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void toggle_SETPOINT_DISPLAY_SETPOINT15() volatile
    {
        SETPOINT_DISPLAY ^= 1u << 15u;
    }

    /**
     * Get SETPOINT_DISPLAY's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline bool get_SETPOINT_DISPLAY_SETPOINT14() volatile
    {
        return SETPOINT_DISPLAY & (1u << 14u);
    }

    /**
     * Set SETPOINT_DISPLAY's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void set_SETPOINT_DISPLAY_SETPOINT14() volatile
    {
        SETPOINT_DISPLAY |= 1u << 14u;
    }

    /**
     * Clear SETPOINT_DISPLAY's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void clear_SETPOINT_DISPLAY_SETPOINT14() volatile
    {
        SETPOINT_DISPLAY &= ~(1u << 14u);
    }

    /**
     * Toggle SETPOINT_DISPLAY's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void toggle_SETPOINT_DISPLAY_SETPOINT14() volatile
    {
        SETPOINT_DISPLAY ^= 1u << 14u;
    }

    /**
     * Get SETPOINT_DISPLAY's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline bool get_SETPOINT_DISPLAY_SETPOINT13() volatile
    {
        return SETPOINT_DISPLAY & (1u << 13u);
    }

    /**
     * Set SETPOINT_DISPLAY's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void set_SETPOINT_DISPLAY_SETPOINT13() volatile
    {
        SETPOINT_DISPLAY |= 1u << 13u;
    }

    /**
     * Clear SETPOINT_DISPLAY's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void clear_SETPOINT_DISPLAY_SETPOINT13() volatile
    {
        SETPOINT_DISPLAY &= ~(1u << 13u);
    }

    /**
     * Toggle SETPOINT_DISPLAY's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void toggle_SETPOINT_DISPLAY_SETPOINT13() volatile
    {
        SETPOINT_DISPLAY ^= 1u << 13u;
    }

    /**
     * Get SETPOINT_DISPLAY's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline bool get_SETPOINT_DISPLAY_SETPOINT12() volatile
    {
        return SETPOINT_DISPLAY & (1u << 12u);
    }

    /**
     * Set SETPOINT_DISPLAY's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void set_SETPOINT_DISPLAY_SETPOINT12() volatile
    {
        SETPOINT_DISPLAY |= 1u << 12u;
    }

    /**
     * Clear SETPOINT_DISPLAY's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void clear_SETPOINT_DISPLAY_SETPOINT12() volatile
    {
        SETPOINT_DISPLAY &= ~(1u << 12u);
    }

    /**
     * Toggle SETPOINT_DISPLAY's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void toggle_SETPOINT_DISPLAY_SETPOINT12() volatile
    {
        SETPOINT_DISPLAY ^= 1u << 12u;
    }

    /**
     * Get SETPOINT_DISPLAY's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline bool get_SETPOINT_DISPLAY_SETPOINT11() volatile
    {
        return SETPOINT_DISPLAY & (1u << 11u);
    }

    /**
     * Set SETPOINT_DISPLAY's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void set_SETPOINT_DISPLAY_SETPOINT11() volatile
    {
        SETPOINT_DISPLAY |= 1u << 11u;
    }

    /**
     * Clear SETPOINT_DISPLAY's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void clear_SETPOINT_DISPLAY_SETPOINT11() volatile
    {
        SETPOINT_DISPLAY &= ~(1u << 11u);
    }

    /**
     * Toggle SETPOINT_DISPLAY's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void toggle_SETPOINT_DISPLAY_SETPOINT11() volatile
    {
        SETPOINT_DISPLAY ^= 1u << 11u;
    }

    /**
     * Get SETPOINT_DISPLAY's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline bool get_SETPOINT_DISPLAY_SETPOINT10() volatile
    {
        return SETPOINT_DISPLAY & (1u << 10u);
    }

    /**
     * Set SETPOINT_DISPLAY's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void set_SETPOINT_DISPLAY_SETPOINT10() volatile
    {
        SETPOINT_DISPLAY |= 1u << 10u;
    }

    /**
     * Clear SETPOINT_DISPLAY's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void clear_SETPOINT_DISPLAY_SETPOINT10() volatile
    {
        SETPOINT_DISPLAY &= ~(1u << 10u);
    }

    /**
     * Toggle SETPOINT_DISPLAY's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void toggle_SETPOINT_DISPLAY_SETPOINT10() volatile
    {
        SETPOINT_DISPLAY ^= 1u << 10u;
    }

    /**
     * Get SETPOINT_DISPLAY's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline bool get_SETPOINT_DISPLAY_SETPOINT9() volatile
    {
        return SETPOINT_DISPLAY & (1u << 9u);
    }

    /**
     * Set SETPOINT_DISPLAY's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void set_SETPOINT_DISPLAY_SETPOINT9() volatile
    {
        SETPOINT_DISPLAY |= 1u << 9u;
    }

    /**
     * Clear SETPOINT_DISPLAY's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void clear_SETPOINT_DISPLAY_SETPOINT9() volatile
    {
        SETPOINT_DISPLAY &= ~(1u << 9u);
    }

    /**
     * Toggle SETPOINT_DISPLAY's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void toggle_SETPOINT_DISPLAY_SETPOINT9() volatile
    {
        SETPOINT_DISPLAY ^= 1u << 9u;
    }

    /**
     * Get SETPOINT_DISPLAY's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline bool get_SETPOINT_DISPLAY_SETPOINT8() volatile
    {
        return SETPOINT_DISPLAY & (1u << 8u);
    }

    /**
     * Set SETPOINT_DISPLAY's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void set_SETPOINT_DISPLAY_SETPOINT8() volatile
    {
        SETPOINT_DISPLAY |= 1u << 8u;
    }

    /**
     * Clear SETPOINT_DISPLAY's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void clear_SETPOINT_DISPLAY_SETPOINT8() volatile
    {
        SETPOINT_DISPLAY &= ~(1u << 8u);
    }

    /**
     * Toggle SETPOINT_DISPLAY's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void toggle_SETPOINT_DISPLAY_SETPOINT8() volatile
    {
        SETPOINT_DISPLAY ^= 1u << 8u;
    }

    /**
     * Get SETPOINT_DISPLAY's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline bool get_SETPOINT_DISPLAY_SETPOINT7() volatile
    {
        return SETPOINT_DISPLAY & (1u << 7u);
    }

    /**
     * Set SETPOINT_DISPLAY's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void set_SETPOINT_DISPLAY_SETPOINT7() volatile
    {
        SETPOINT_DISPLAY |= 1u << 7u;
    }

    /**
     * Clear SETPOINT_DISPLAY's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void clear_SETPOINT_DISPLAY_SETPOINT7() volatile
    {
        SETPOINT_DISPLAY &= ~(1u << 7u);
    }

    /**
     * Toggle SETPOINT_DISPLAY's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void toggle_SETPOINT_DISPLAY_SETPOINT7() volatile
    {
        SETPOINT_DISPLAY ^= 1u << 7u;
    }

    /**
     * Get SETPOINT_DISPLAY's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline bool get_SETPOINT_DISPLAY_SETPOINT6() volatile
    {
        return SETPOINT_DISPLAY & (1u << 6u);
    }

    /**
     * Set SETPOINT_DISPLAY's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void set_SETPOINT_DISPLAY_SETPOINT6() volatile
    {
        SETPOINT_DISPLAY |= 1u << 6u;
    }

    /**
     * Clear SETPOINT_DISPLAY's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void clear_SETPOINT_DISPLAY_SETPOINT6() volatile
    {
        SETPOINT_DISPLAY &= ~(1u << 6u);
    }

    /**
     * Toggle SETPOINT_DISPLAY's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void toggle_SETPOINT_DISPLAY_SETPOINT6() volatile
    {
        SETPOINT_DISPLAY ^= 1u << 6u;
    }

    /**
     * Get SETPOINT_DISPLAY's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline bool get_SETPOINT_DISPLAY_SETPOINT5() volatile
    {
        return SETPOINT_DISPLAY & (1u << 5u);
    }

    /**
     * Set SETPOINT_DISPLAY's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void set_SETPOINT_DISPLAY_SETPOINT5() volatile
    {
        SETPOINT_DISPLAY |= 1u << 5u;
    }

    /**
     * Clear SETPOINT_DISPLAY's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void clear_SETPOINT_DISPLAY_SETPOINT5() volatile
    {
        SETPOINT_DISPLAY &= ~(1u << 5u);
    }

    /**
     * Toggle SETPOINT_DISPLAY's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void toggle_SETPOINT_DISPLAY_SETPOINT5() volatile
    {
        SETPOINT_DISPLAY ^= 1u << 5u;
    }

    /**
     * Get SETPOINT_DISPLAY's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline bool get_SETPOINT_DISPLAY_SETPOINT4() volatile
    {
        return SETPOINT_DISPLAY & (1u << 4u);
    }

    /**
     * Set SETPOINT_DISPLAY's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void set_SETPOINT_DISPLAY_SETPOINT4() volatile
    {
        SETPOINT_DISPLAY |= 1u << 4u;
    }

    /**
     * Clear SETPOINT_DISPLAY's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void clear_SETPOINT_DISPLAY_SETPOINT4() volatile
    {
        SETPOINT_DISPLAY &= ~(1u << 4u);
    }

    /**
     * Toggle SETPOINT_DISPLAY's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void toggle_SETPOINT_DISPLAY_SETPOINT4() volatile
    {
        SETPOINT_DISPLAY ^= 1u << 4u;
    }

    /**
     * Get SETPOINT_DISPLAY's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline bool get_SETPOINT_DISPLAY_SETPOINT3() volatile
    {
        return SETPOINT_DISPLAY & (1u << 3u);
    }

    /**
     * Set SETPOINT_DISPLAY's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void set_SETPOINT_DISPLAY_SETPOINT3() volatile
    {
        SETPOINT_DISPLAY |= 1u << 3u;
    }

    /**
     * Clear SETPOINT_DISPLAY's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void clear_SETPOINT_DISPLAY_SETPOINT3() volatile
    {
        SETPOINT_DISPLAY &= ~(1u << 3u);
    }

    /**
     * Toggle SETPOINT_DISPLAY's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void toggle_SETPOINT_DISPLAY_SETPOINT3() volatile
    {
        SETPOINT_DISPLAY ^= 1u << 3u;
    }

    /**
     * Get SETPOINT_DISPLAY's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline bool get_SETPOINT_DISPLAY_SETPOINT2() volatile
    {
        return SETPOINT_DISPLAY & (1u << 2u);
    }

    /**
     * Set SETPOINT_DISPLAY's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void set_SETPOINT_DISPLAY_SETPOINT2() volatile
    {
        SETPOINT_DISPLAY |= 1u << 2u;
    }

    /**
     * Clear SETPOINT_DISPLAY's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void clear_SETPOINT_DISPLAY_SETPOINT2() volatile
    {
        SETPOINT_DISPLAY &= ~(1u << 2u);
    }

    /**
     * Toggle SETPOINT_DISPLAY's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void toggle_SETPOINT_DISPLAY_SETPOINT2() volatile
    {
        SETPOINT_DISPLAY ^= 1u << 2u;
    }

    /**
     * Get SETPOINT_DISPLAY's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline bool get_SETPOINT_DISPLAY_SETPOINT1() volatile
    {
        return SETPOINT_DISPLAY & (1u << 1u);
    }

    /**
     * Set SETPOINT_DISPLAY's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void set_SETPOINT_DISPLAY_SETPOINT1() volatile
    {
        SETPOINT_DISPLAY |= 1u << 1u;
    }

    /**
     * Clear SETPOINT_DISPLAY's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void clear_SETPOINT_DISPLAY_SETPOINT1() volatile
    {
        SETPOINT_DISPLAY &= ~(1u << 1u);
    }

    /**
     * Toggle SETPOINT_DISPLAY's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void toggle_SETPOINT_DISPLAY_SETPOINT1() volatile
    {
        SETPOINT_DISPLAY ^= 1u << 1u;
    }

    /**
     * Get SETPOINT_DISPLAY's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline bool get_SETPOINT_DISPLAY_SETPOINT0() volatile
    {
        return SETPOINT_DISPLAY & (1u << 0u);
    }

    /**
     * Set SETPOINT_DISPLAY's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void set_SETPOINT_DISPLAY_SETPOINT0() volatile
    {
        SETPOINT_DISPLAY |= 1u << 0u;
    }

    /**
     * Clear SETPOINT_DISPLAY's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void clear_SETPOINT_DISPLAY_SETPOINT0() volatile
    {
        SETPOINT_DISPLAY &= ~(1u << 0u);
    }

    /**
     * Toggle SETPOINT_DISPLAY's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void toggle_SETPOINT_DISPLAY_SETPOINT0() volatile
    {
        SETPOINT_DISPLAY ^= 1u << 0u;
    }

    /**
     * Get all of SETPOINT_DISPLAY's bit fields.
     *
     * (read-write) Slice Setpoint Config Register
     */
    inline void get_SETPOINT_DISPLAY(bool &SETPOINT15, bool &SETPOINT14,
                                     bool &SETPOINT13, bool &SETPOINT12,
                                     bool &SETPOINT11, bool &SETPOINT10,
                                     bool &SETPOINT9, bool &SETPOINT8,
                                     bool &SETPOINT7, bool &SETPOINT6,
                                     bool &SETPOINT5, bool &SETPOINT4,
                                     bool &SETPOINT3, bool &SETPOINT2,
                                     bool &SETPOINT1, bool &SETPOINT0) volatile
    {
        uint32_t curr = SETPOINT_DISPLAY;

        SETPOINT15 = curr & (1u << 15u);
        SETPOINT14 = curr & (1u << 14u);
        SETPOINT13 = curr & (1u << 13u);
        SETPOINT12 = curr & (1u << 12u);
        SETPOINT11 = curr & (1u << 11u);
        SETPOINT10 = curr & (1u << 10u);
        SETPOINT9 = curr & (1u << 9u);
        SETPOINT8 = curr & (1u << 8u);
        SETPOINT7 = curr & (1u << 7u);
        SETPOINT6 = curr & (1u << 6u);
        SETPOINT5 = curr & (1u << 5u);
        SETPOINT4 = curr & (1u << 4u);
        SETPOINT3 = curr & (1u << 3u);
        SETPOINT2 = curr & (1u << 2u);
        SETPOINT1 = curr & (1u << 1u);
        SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of SETPOINT_DISPLAY's bit fields.
     *
     * (read-write) Slice Setpoint Config Register
     */
    inline void set_SETPOINT_DISPLAY(bool SETPOINT15, bool SETPOINT14,
                                     bool SETPOINT13, bool SETPOINT12,
                                     bool SETPOINT11, bool SETPOINT10,
                                     bool SETPOINT9, bool SETPOINT8,
                                     bool SETPOINT7, bool SETPOINT6,
                                     bool SETPOINT5, bool SETPOINT4,
                                     bool SETPOINT3, bool SETPOINT2,
                                     bool SETPOINT1, bool SETPOINT0) volatile
    {
        uint32_t curr = SETPOINT_DISPLAY;

        curr &= ~(0b1u << 15u);
        curr |= (SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SETPOINT0 & 0b1u) << 0u;

        SETPOINT_DISPLAY = curr;
    }

    /**
     * Get DOMAIN_DISPLAY's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline bool get_DOMAIN_DISPLAY_CPU1_SUSP() volatile
    {
        return DOMAIN_DISPLAY & (1u << 7u);
    }

    /**
     * Set DOMAIN_DISPLAY's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void set_DOMAIN_DISPLAY_CPU1_SUSP() volatile
    {
        DOMAIN_DISPLAY |= 1u << 7u;
    }

    /**
     * Clear DOMAIN_DISPLAY's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void clear_DOMAIN_DISPLAY_CPU1_SUSP() volatile
    {
        DOMAIN_DISPLAY &= ~(1u << 7u);
    }

    /**
     * Toggle DOMAIN_DISPLAY's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void toggle_DOMAIN_DISPLAY_CPU1_SUSP() volatile
    {
        DOMAIN_DISPLAY ^= 1u << 7u;
    }

    /**
     * Get DOMAIN_DISPLAY's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline bool get_DOMAIN_DISPLAY_CPU1_STOP() volatile
    {
        return DOMAIN_DISPLAY & (1u << 6u);
    }

    /**
     * Set DOMAIN_DISPLAY's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void set_DOMAIN_DISPLAY_CPU1_STOP() volatile
    {
        DOMAIN_DISPLAY |= 1u << 6u;
    }

    /**
     * Clear DOMAIN_DISPLAY's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void clear_DOMAIN_DISPLAY_CPU1_STOP() volatile
    {
        DOMAIN_DISPLAY &= ~(1u << 6u);
    }

    /**
     * Toggle DOMAIN_DISPLAY's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void toggle_DOMAIN_DISPLAY_CPU1_STOP() volatile
    {
        DOMAIN_DISPLAY ^= 1u << 6u;
    }

    /**
     * Get DOMAIN_DISPLAY's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline bool get_DOMAIN_DISPLAY_CPU1_WAIT() volatile
    {
        return DOMAIN_DISPLAY & (1u << 5u);
    }

    /**
     * Set DOMAIN_DISPLAY's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void set_DOMAIN_DISPLAY_CPU1_WAIT() volatile
    {
        DOMAIN_DISPLAY |= 1u << 5u;
    }

    /**
     * Clear DOMAIN_DISPLAY's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void clear_DOMAIN_DISPLAY_CPU1_WAIT() volatile
    {
        DOMAIN_DISPLAY &= ~(1u << 5u);
    }

    /**
     * Toggle DOMAIN_DISPLAY's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void toggle_DOMAIN_DISPLAY_CPU1_WAIT() volatile
    {
        DOMAIN_DISPLAY ^= 1u << 5u;
    }

    /**
     * Get DOMAIN_DISPLAY's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline bool get_DOMAIN_DISPLAY_CPU1_RUN() volatile
    {
        return DOMAIN_DISPLAY & (1u << 4u);
    }

    /**
     * Set DOMAIN_DISPLAY's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void set_DOMAIN_DISPLAY_CPU1_RUN() volatile
    {
        DOMAIN_DISPLAY |= 1u << 4u;
    }

    /**
     * Clear DOMAIN_DISPLAY's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void clear_DOMAIN_DISPLAY_CPU1_RUN() volatile
    {
        DOMAIN_DISPLAY &= ~(1u << 4u);
    }

    /**
     * Toggle DOMAIN_DISPLAY's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void toggle_DOMAIN_DISPLAY_CPU1_RUN() volatile
    {
        DOMAIN_DISPLAY ^= 1u << 4u;
    }

    /**
     * Get DOMAIN_DISPLAY's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline bool get_DOMAIN_DISPLAY_CPU0_SUSP() volatile
    {
        return DOMAIN_DISPLAY & (1u << 3u);
    }

    /**
     * Set DOMAIN_DISPLAY's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void set_DOMAIN_DISPLAY_CPU0_SUSP() volatile
    {
        DOMAIN_DISPLAY |= 1u << 3u;
    }

    /**
     * Clear DOMAIN_DISPLAY's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void clear_DOMAIN_DISPLAY_CPU0_SUSP() volatile
    {
        DOMAIN_DISPLAY &= ~(1u << 3u);
    }

    /**
     * Toggle DOMAIN_DISPLAY's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void toggle_DOMAIN_DISPLAY_CPU0_SUSP() volatile
    {
        DOMAIN_DISPLAY ^= 1u << 3u;
    }

    /**
     * Get DOMAIN_DISPLAY's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline bool get_DOMAIN_DISPLAY_CPU0_STOP() volatile
    {
        return DOMAIN_DISPLAY & (1u << 2u);
    }

    /**
     * Set DOMAIN_DISPLAY's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void set_DOMAIN_DISPLAY_CPU0_STOP() volatile
    {
        DOMAIN_DISPLAY |= 1u << 2u;
    }

    /**
     * Clear DOMAIN_DISPLAY's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void clear_DOMAIN_DISPLAY_CPU0_STOP() volatile
    {
        DOMAIN_DISPLAY &= ~(1u << 2u);
    }

    /**
     * Toggle DOMAIN_DISPLAY's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void toggle_DOMAIN_DISPLAY_CPU0_STOP() volatile
    {
        DOMAIN_DISPLAY ^= 1u << 2u;
    }

    /**
     * Get DOMAIN_DISPLAY's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline bool get_DOMAIN_DISPLAY_CPU0_WAIT() volatile
    {
        return DOMAIN_DISPLAY & (1u << 1u);
    }

    /**
     * Set DOMAIN_DISPLAY's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void set_DOMAIN_DISPLAY_CPU0_WAIT() volatile
    {
        DOMAIN_DISPLAY |= 1u << 1u;
    }

    /**
     * Clear DOMAIN_DISPLAY's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void clear_DOMAIN_DISPLAY_CPU0_WAIT() volatile
    {
        DOMAIN_DISPLAY &= ~(1u << 1u);
    }

    /**
     * Toggle DOMAIN_DISPLAY's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void toggle_DOMAIN_DISPLAY_CPU0_WAIT() volatile
    {
        DOMAIN_DISPLAY ^= 1u << 1u;
    }

    /**
     * Get DOMAIN_DISPLAY's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline bool get_DOMAIN_DISPLAY_CPU0_RUN() volatile
    {
        return DOMAIN_DISPLAY & (1u << 0u);
    }

    /**
     * Set DOMAIN_DISPLAY's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void set_DOMAIN_DISPLAY_CPU0_RUN() volatile
    {
        DOMAIN_DISPLAY |= 1u << 0u;
    }

    /**
     * Clear DOMAIN_DISPLAY's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void clear_DOMAIN_DISPLAY_CPU0_RUN() volatile
    {
        DOMAIN_DISPLAY &= ~(1u << 0u);
    }

    /**
     * Toggle DOMAIN_DISPLAY's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void toggle_DOMAIN_DISPLAY_CPU0_RUN() volatile
    {
        DOMAIN_DISPLAY ^= 1u << 0u;
    }

    /**
     * Get all of DOMAIN_DISPLAY's bit fields.
     *
     * (read-write) Slice Domain Config Register
     */
    inline void get_DOMAIN_DISPLAY(bool &CPU1_SUSP, bool &CPU1_STOP,
                                   bool &CPU1_WAIT, bool &CPU1_RUN,
                                   bool &CPU0_SUSP, bool &CPU0_STOP,
                                   bool &CPU0_WAIT, bool &CPU0_RUN) volatile
    {
        uint32_t curr = DOMAIN_DISPLAY;

        CPU1_SUSP = curr & (1u << 7u);
        CPU1_STOP = curr & (1u << 6u);
        CPU1_WAIT = curr & (1u << 5u);
        CPU1_RUN = curr & (1u << 4u);
        CPU0_SUSP = curr & (1u << 3u);
        CPU0_STOP = curr & (1u << 2u);
        CPU0_WAIT = curr & (1u << 1u);
        CPU0_RUN = curr & (1u << 0u);
    }

    /**
     * Set all of DOMAIN_DISPLAY's bit fields.
     *
     * (read-write) Slice Domain Config Register
     */
    inline void set_DOMAIN_DISPLAY(bool CPU1_SUSP, bool CPU1_STOP,
                                   bool CPU1_WAIT, bool CPU1_RUN,
                                   bool CPU0_SUSP, bool CPU0_STOP,
                                   bool CPU0_WAIT, bool CPU0_RUN) volatile
    {
        uint32_t curr = DOMAIN_DISPLAY;

        curr &= ~(0b1u << 7u);
        curr |= (CPU1_SUSP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CPU1_STOP & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (CPU1_WAIT & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (CPU1_RUN & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (CPU0_SUSP & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CPU0_STOP & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CPU0_WAIT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CPU0_RUN & 0b1u) << 0u;

        DOMAIN_DISPLAY = curr;
    }

    /**
     * Get STAT_DISPLAY's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline bool get_STAT_DISPLAY_RST_BY_SW() volatile
    {
        return STAT_DISPLAY & (1u << 3u);
    }

    /**
     * Set STAT_DISPLAY's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void set_STAT_DISPLAY_RST_BY_SW() volatile
    {
        STAT_DISPLAY |= 1u << 3u;
    }

    /**
     * Clear STAT_DISPLAY's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void clear_STAT_DISPLAY_RST_BY_SW() volatile
    {
        STAT_DISPLAY &= ~(1u << 3u);
    }

    /**
     * Toggle STAT_DISPLAY's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void toggle_STAT_DISPLAY_RST_BY_SW() volatile
    {
        STAT_DISPLAY ^= 1u << 3u;
    }

    /**
     * Get STAT_DISPLAY's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline bool get_STAT_DISPLAY_RST_BY_HW() volatile
    {
        return STAT_DISPLAY & (1u << 2u);
    }

    /**
     * Set STAT_DISPLAY's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void set_STAT_DISPLAY_RST_BY_HW() volatile
    {
        STAT_DISPLAY |= 1u << 2u;
    }

    /**
     * Clear STAT_DISPLAY's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void clear_STAT_DISPLAY_RST_BY_HW() volatile
    {
        STAT_DISPLAY &= ~(1u << 2u);
    }

    /**
     * Toggle STAT_DISPLAY's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void toggle_STAT_DISPLAY_RST_BY_HW() volatile
    {
        STAT_DISPLAY ^= 1u << 2u;
    }

    /**
     * Get STAT_DISPLAY's UNDER_RST bit.
     *
     * This is a Read Only bit. It indicate if the reset is in process.
     */
    inline bool get_STAT_DISPLAY_UNDER_RST() volatile
    {
        return STAT_DISPLAY & (1u << 0u);
    }

    /**
     * Get all of STAT_DISPLAY's bit fields.
     *
     * (read-write) Slice Status Register
     */
    inline void get_STAT_DISPLAY(bool &RST_BY_SW, bool &RST_BY_HW,
                                 bool &UNDER_RST) volatile
    {
        uint32_t curr = STAT_DISPLAY;

        RST_BY_SW = curr & (1u << 3u);
        RST_BY_HW = curr & (1u << 2u);
        UNDER_RST = curr & (1u << 0u);
    }

    /**
     * Set all of STAT_DISPLAY's bit fields.
     *
     * (read-write) Slice Status Register
     */
    inline void set_STAT_DISPLAY(bool RST_BY_SW, bool RST_BY_HW) volatile
    {
        uint32_t curr = STAT_DISPLAY;

        curr &= ~(0b1u << 3u);
        curr |= (RST_BY_SW & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (RST_BY_HW & 0b1u) << 2u;

        STAT_DISPLAY = curr;
    }

    /**
     * Get AUTHEN_WAKEUP's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline bool get_AUTHEN_WAKEUP_LOCK_SETTING() volatile
    {
        return AUTHEN_WAKEUP & (1u << 31u);
    }

    /**
     * Set AUTHEN_WAKEUP's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void set_AUTHEN_WAKEUP_LOCK_SETTING() volatile
    {
        AUTHEN_WAKEUP |= 1u << 31u;
    }

    /**
     * Clear AUTHEN_WAKEUP's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void clear_AUTHEN_WAKEUP_LOCK_SETTING() volatile
    {
        AUTHEN_WAKEUP &= ~(1u << 31u);
    }

    /**
     * Toggle AUTHEN_WAKEUP's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void toggle_AUTHEN_WAKEUP_LOCK_SETTING() volatile
    {
        AUTHEN_WAKEUP ^= 1u << 31u;
    }

    /**
     * Get AUTHEN_WAKEUP's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline bool get_AUTHEN_WAKEUP_NONSECURE() volatile
    {
        return AUTHEN_WAKEUP & (1u << 25u);
    }

    /**
     * Set AUTHEN_WAKEUP's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void set_AUTHEN_WAKEUP_NONSECURE() volatile
    {
        AUTHEN_WAKEUP |= 1u << 25u;
    }

    /**
     * Clear AUTHEN_WAKEUP's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void clear_AUTHEN_WAKEUP_NONSECURE() volatile
    {
        AUTHEN_WAKEUP &= ~(1u << 25u);
    }

    /**
     * Toggle AUTHEN_WAKEUP's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void toggle_AUTHEN_WAKEUP_NONSECURE() volatile
    {
        AUTHEN_WAKEUP ^= 1u << 25u;
    }

    /**
     * Get AUTHEN_WAKEUP's USER bit.
     *
     * Allow user mode access
     */
    inline bool get_AUTHEN_WAKEUP_USER() volatile
    {
        return AUTHEN_WAKEUP & (1u << 24u);
    }

    /**
     * Set AUTHEN_WAKEUP's USER bit.
     *
     * Allow user mode access
     */
    inline void set_AUTHEN_WAKEUP_USER() volatile
    {
        AUTHEN_WAKEUP |= 1u << 24u;
    }

    /**
     * Clear AUTHEN_WAKEUP's USER bit.
     *
     * Allow user mode access
     */
    inline void clear_AUTHEN_WAKEUP_USER() volatile
    {
        AUTHEN_WAKEUP &= ~(1u << 24u);
    }

    /**
     * Toggle AUTHEN_WAKEUP's USER bit.
     *
     * Allow user mode access
     */
    inline void toggle_AUTHEN_WAKEUP_USER() volatile
    {
        AUTHEN_WAKEUP ^= 1u << 24u;
    }

    /**
     * Get AUTHEN_WAKEUP's LOCK_LIST bit.
     *
     * White list lock
     */
    inline bool get_AUTHEN_WAKEUP_LOCK_LIST() volatile
    {
        return AUTHEN_WAKEUP & (1u << 23u);
    }

    /**
     * Set AUTHEN_WAKEUP's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void set_AUTHEN_WAKEUP_LOCK_LIST() volatile
    {
        AUTHEN_WAKEUP |= 1u << 23u;
    }

    /**
     * Clear AUTHEN_WAKEUP's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void clear_AUTHEN_WAKEUP_LOCK_LIST() volatile
    {
        AUTHEN_WAKEUP &= ~(1u << 23u);
    }

    /**
     * Toggle AUTHEN_WAKEUP's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void toggle_AUTHEN_WAKEUP_LOCK_LIST() volatile
    {
        AUTHEN_WAKEUP ^= 1u << 23u;
    }

    /**
     * Get AUTHEN_WAKEUP's WHITE_LIST field.
     *
     * Domain ID white list
     */
    inline uint8_t get_AUTHEN_WAKEUP_WHITE_LIST() volatile
    {
        return (AUTHEN_WAKEUP >> 16u) & 0b1111u;
    }

    /**
     * Set AUTHEN_WAKEUP's WHITE_LIST field.
     *
     * Domain ID white list
     */
    inline void set_AUTHEN_WAKEUP_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = AUTHEN_WAKEUP;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        AUTHEN_WAKEUP = curr;
    }

    /**
     * Get AUTHEN_WAKEUP's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline bool get_AUTHEN_WAKEUP_LOCK_ASSIGN() volatile
    {
        return AUTHEN_WAKEUP & (1u << 15u);
    }

    /**
     * Set AUTHEN_WAKEUP's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void set_AUTHEN_WAKEUP_LOCK_ASSIGN() volatile
    {
        AUTHEN_WAKEUP |= 1u << 15u;
    }

    /**
     * Clear AUTHEN_WAKEUP's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void clear_AUTHEN_WAKEUP_LOCK_ASSIGN() volatile
    {
        AUTHEN_WAKEUP &= ~(1u << 15u);
    }

    /**
     * Toggle AUTHEN_WAKEUP's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void toggle_AUTHEN_WAKEUP_LOCK_ASSIGN() volatile
    {
        AUTHEN_WAKEUP ^= 1u << 15u;
    }

    /**
     * Get AUTHEN_WAKEUP's ASSIGN_LIST field.
     *
     * when this bitfield set to 1, reset of slice would be subject to
     * corresponding core status transition
     */
    inline uint8_t get_AUTHEN_WAKEUP_ASSIGN_LIST() volatile
    {
        return (AUTHEN_WAKEUP >> 8u) & 0b1111u;
    }

    /**
     * Set AUTHEN_WAKEUP's ASSIGN_LIST field.
     *
     * when this bitfield set to 1, reset of slice would be subject to
     * corresponding core status transition
     */
    inline void set_AUTHEN_WAKEUP_ASSIGN_LIST(uint8_t value) volatile
    {
        uint32_t curr = AUTHEN_WAKEUP;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        AUTHEN_WAKEUP = curr;
    }

    /**
     * Get AUTHEN_WAKEUP's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline bool get_AUTHEN_WAKEUP_LOCK_MODE() volatile
    {
        return AUTHEN_WAKEUP & (1u << 7u);
    }

    /**
     * Set AUTHEN_WAKEUP's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void set_AUTHEN_WAKEUP_LOCK_MODE() volatile
    {
        AUTHEN_WAKEUP |= 1u << 7u;
    }

    /**
     * Clear AUTHEN_WAKEUP's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void clear_AUTHEN_WAKEUP_LOCK_MODE() volatile
    {
        AUTHEN_WAKEUP &= ~(1u << 7u);
    }

    /**
     * Toggle AUTHEN_WAKEUP's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void toggle_AUTHEN_WAKEUP_LOCK_MODE() volatile
    {
        AUTHEN_WAKEUP ^= 1u << 7u;
    }

    /**
     * Get AUTHEN_WAKEUP's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline bool get_AUTHEN_WAKEUP_SETPOINT_MODE() volatile
    {
        return AUTHEN_WAKEUP & (1u << 1u);
    }

    /**
     * Set AUTHEN_WAKEUP's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void set_AUTHEN_WAKEUP_SETPOINT_MODE() volatile
    {
        AUTHEN_WAKEUP |= 1u << 1u;
    }

    /**
     * Clear AUTHEN_WAKEUP's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void clear_AUTHEN_WAKEUP_SETPOINT_MODE() volatile
    {
        AUTHEN_WAKEUP &= ~(1u << 1u);
    }

    /**
     * Toggle AUTHEN_WAKEUP's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void toggle_AUTHEN_WAKEUP_SETPOINT_MODE() volatile
    {
        AUTHEN_WAKEUP ^= 1u << 1u;
    }

    /**
     * Get AUTHEN_WAKEUP's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline bool get_AUTHEN_WAKEUP_DOMAIN_MODE() volatile
    {
        return AUTHEN_WAKEUP & (1u << 0u);
    }

    /**
     * Set AUTHEN_WAKEUP's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void set_AUTHEN_WAKEUP_DOMAIN_MODE() volatile
    {
        AUTHEN_WAKEUP |= 1u << 0u;
    }

    /**
     * Clear AUTHEN_WAKEUP's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void clear_AUTHEN_WAKEUP_DOMAIN_MODE() volatile
    {
        AUTHEN_WAKEUP &= ~(1u << 0u);
    }

    /**
     * Toggle AUTHEN_WAKEUP's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void toggle_AUTHEN_WAKEUP_DOMAIN_MODE() volatile
    {
        AUTHEN_WAKEUP ^= 1u << 0u;
    }

    /**
     * Get all of AUTHEN_WAKEUP's bit fields.
     *
     * (read-write) Slice Authentication Register
     */
    inline void get_AUTHEN_WAKEUP(bool &LOCK_SETTING, bool &NONSECURE,
                                  bool &USER, bool &LOCK_LIST,
                                  uint8_t &WHITE_LIST, bool &LOCK_ASSIGN,
                                  uint8_t &ASSIGN_LIST, bool &LOCK_MODE,
                                  bool &SETPOINT_MODE,
                                  bool &DOMAIN_MODE) volatile
    {
        uint32_t curr = AUTHEN_WAKEUP;

        LOCK_SETTING = curr & (1u << 31u);
        NONSECURE = curr & (1u << 25u);
        USER = curr & (1u << 24u);
        LOCK_LIST = curr & (1u << 23u);
        WHITE_LIST = (curr >> 16u) & 0b1111u;
        LOCK_ASSIGN = curr & (1u << 15u);
        ASSIGN_LIST = (curr >> 8u) & 0b1111u;
        LOCK_MODE = curr & (1u << 7u);
        SETPOINT_MODE = curr & (1u << 1u);
        DOMAIN_MODE = curr & (1u << 0u);
    }

    /**
     * Set all of AUTHEN_WAKEUP's bit fields.
     *
     * (read-write) Slice Authentication Register
     */
    inline void set_AUTHEN_WAKEUP(bool LOCK_SETTING, bool NONSECURE, bool USER,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_ASSIGN, uint8_t ASSIGN_LIST,
                                  bool LOCK_MODE, bool SETPOINT_MODE,
                                  bool DOMAIN_MODE) volatile
    {
        uint32_t curr = AUTHEN_WAKEUP;

        curr &= ~(0b1u << 31u);
        curr |= (LOCK_SETTING & 0b1u) << 31u;
        curr &= ~(0b1u << 25u);
        curr |= (NONSECURE & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (USER & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (LOCK_LIST & 0b1u) << 23u;
        curr &= ~(0b1111u << 16u);
        curr |= (WHITE_LIST & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (LOCK_ASSIGN & 0b1u) << 15u;
        curr &= ~(0b1111u << 8u);
        curr |= (ASSIGN_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (LOCK_MODE & 0b1u) << 7u;
        curr &= ~(0b1u << 1u);
        curr |= (SETPOINT_MODE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (DOMAIN_MODE & 0b1u) << 0u;

        AUTHEN_WAKEUP = curr;
    }

    /**
     * Get CTRL_WAKEUP's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline bool get_CTRL_WAKEUP_SW_RESET() volatile
    {
        return CTRL_WAKEUP & (1u << 0u);
    }

    /**
     * Set CTRL_WAKEUP's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void set_CTRL_WAKEUP_SW_RESET() volatile
    {
        CTRL_WAKEUP |= 1u << 0u;
    }

    /**
     * Clear CTRL_WAKEUP's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void clear_CTRL_WAKEUP_SW_RESET() volatile
    {
        CTRL_WAKEUP &= ~(1u << 0u);
    }

    /**
     * Toggle CTRL_WAKEUP's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void toggle_CTRL_WAKEUP_SW_RESET() volatile
    {
        CTRL_WAKEUP ^= 1u << 0u;
    }

    /**
     * Get SETPOINT_WAKEUP's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline bool get_SETPOINT_WAKEUP_SETPOINT15() volatile
    {
        return SETPOINT_WAKEUP & (1u << 15u);
    }

    /**
     * Set SETPOINT_WAKEUP's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void set_SETPOINT_WAKEUP_SETPOINT15() volatile
    {
        SETPOINT_WAKEUP |= 1u << 15u;
    }

    /**
     * Clear SETPOINT_WAKEUP's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void clear_SETPOINT_WAKEUP_SETPOINT15() volatile
    {
        SETPOINT_WAKEUP &= ~(1u << 15u);
    }

    /**
     * Toggle SETPOINT_WAKEUP's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void toggle_SETPOINT_WAKEUP_SETPOINT15() volatile
    {
        SETPOINT_WAKEUP ^= 1u << 15u;
    }

    /**
     * Get SETPOINT_WAKEUP's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline bool get_SETPOINT_WAKEUP_SETPOINT14() volatile
    {
        return SETPOINT_WAKEUP & (1u << 14u);
    }

    /**
     * Set SETPOINT_WAKEUP's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void set_SETPOINT_WAKEUP_SETPOINT14() volatile
    {
        SETPOINT_WAKEUP |= 1u << 14u;
    }

    /**
     * Clear SETPOINT_WAKEUP's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void clear_SETPOINT_WAKEUP_SETPOINT14() volatile
    {
        SETPOINT_WAKEUP &= ~(1u << 14u);
    }

    /**
     * Toggle SETPOINT_WAKEUP's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void toggle_SETPOINT_WAKEUP_SETPOINT14() volatile
    {
        SETPOINT_WAKEUP ^= 1u << 14u;
    }

    /**
     * Get SETPOINT_WAKEUP's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline bool get_SETPOINT_WAKEUP_SETPOINT13() volatile
    {
        return SETPOINT_WAKEUP & (1u << 13u);
    }

    /**
     * Set SETPOINT_WAKEUP's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void set_SETPOINT_WAKEUP_SETPOINT13() volatile
    {
        SETPOINT_WAKEUP |= 1u << 13u;
    }

    /**
     * Clear SETPOINT_WAKEUP's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void clear_SETPOINT_WAKEUP_SETPOINT13() volatile
    {
        SETPOINT_WAKEUP &= ~(1u << 13u);
    }

    /**
     * Toggle SETPOINT_WAKEUP's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void toggle_SETPOINT_WAKEUP_SETPOINT13() volatile
    {
        SETPOINT_WAKEUP ^= 1u << 13u;
    }

    /**
     * Get SETPOINT_WAKEUP's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline bool get_SETPOINT_WAKEUP_SETPOINT12() volatile
    {
        return SETPOINT_WAKEUP & (1u << 12u);
    }

    /**
     * Set SETPOINT_WAKEUP's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void set_SETPOINT_WAKEUP_SETPOINT12() volatile
    {
        SETPOINT_WAKEUP |= 1u << 12u;
    }

    /**
     * Clear SETPOINT_WAKEUP's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void clear_SETPOINT_WAKEUP_SETPOINT12() volatile
    {
        SETPOINT_WAKEUP &= ~(1u << 12u);
    }

    /**
     * Toggle SETPOINT_WAKEUP's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void toggle_SETPOINT_WAKEUP_SETPOINT12() volatile
    {
        SETPOINT_WAKEUP ^= 1u << 12u;
    }

    /**
     * Get SETPOINT_WAKEUP's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline bool get_SETPOINT_WAKEUP_SETPOINT11() volatile
    {
        return SETPOINT_WAKEUP & (1u << 11u);
    }

    /**
     * Set SETPOINT_WAKEUP's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void set_SETPOINT_WAKEUP_SETPOINT11() volatile
    {
        SETPOINT_WAKEUP |= 1u << 11u;
    }

    /**
     * Clear SETPOINT_WAKEUP's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void clear_SETPOINT_WAKEUP_SETPOINT11() volatile
    {
        SETPOINT_WAKEUP &= ~(1u << 11u);
    }

    /**
     * Toggle SETPOINT_WAKEUP's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void toggle_SETPOINT_WAKEUP_SETPOINT11() volatile
    {
        SETPOINT_WAKEUP ^= 1u << 11u;
    }

    /**
     * Get SETPOINT_WAKEUP's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline bool get_SETPOINT_WAKEUP_SETPOINT10() volatile
    {
        return SETPOINT_WAKEUP & (1u << 10u);
    }

    /**
     * Set SETPOINT_WAKEUP's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void set_SETPOINT_WAKEUP_SETPOINT10() volatile
    {
        SETPOINT_WAKEUP |= 1u << 10u;
    }

    /**
     * Clear SETPOINT_WAKEUP's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void clear_SETPOINT_WAKEUP_SETPOINT10() volatile
    {
        SETPOINT_WAKEUP &= ~(1u << 10u);
    }

    /**
     * Toggle SETPOINT_WAKEUP's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void toggle_SETPOINT_WAKEUP_SETPOINT10() volatile
    {
        SETPOINT_WAKEUP ^= 1u << 10u;
    }

    /**
     * Get SETPOINT_WAKEUP's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline bool get_SETPOINT_WAKEUP_SETPOINT9() volatile
    {
        return SETPOINT_WAKEUP & (1u << 9u);
    }

    /**
     * Set SETPOINT_WAKEUP's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void set_SETPOINT_WAKEUP_SETPOINT9() volatile
    {
        SETPOINT_WAKEUP |= 1u << 9u;
    }

    /**
     * Clear SETPOINT_WAKEUP's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void clear_SETPOINT_WAKEUP_SETPOINT9() volatile
    {
        SETPOINT_WAKEUP &= ~(1u << 9u);
    }

    /**
     * Toggle SETPOINT_WAKEUP's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void toggle_SETPOINT_WAKEUP_SETPOINT9() volatile
    {
        SETPOINT_WAKEUP ^= 1u << 9u;
    }

    /**
     * Get SETPOINT_WAKEUP's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline bool get_SETPOINT_WAKEUP_SETPOINT8() volatile
    {
        return SETPOINT_WAKEUP & (1u << 8u);
    }

    /**
     * Set SETPOINT_WAKEUP's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void set_SETPOINT_WAKEUP_SETPOINT8() volatile
    {
        SETPOINT_WAKEUP |= 1u << 8u;
    }

    /**
     * Clear SETPOINT_WAKEUP's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void clear_SETPOINT_WAKEUP_SETPOINT8() volatile
    {
        SETPOINT_WAKEUP &= ~(1u << 8u);
    }

    /**
     * Toggle SETPOINT_WAKEUP's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void toggle_SETPOINT_WAKEUP_SETPOINT8() volatile
    {
        SETPOINT_WAKEUP ^= 1u << 8u;
    }

    /**
     * Get SETPOINT_WAKEUP's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline bool get_SETPOINT_WAKEUP_SETPOINT7() volatile
    {
        return SETPOINT_WAKEUP & (1u << 7u);
    }

    /**
     * Set SETPOINT_WAKEUP's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void set_SETPOINT_WAKEUP_SETPOINT7() volatile
    {
        SETPOINT_WAKEUP |= 1u << 7u;
    }

    /**
     * Clear SETPOINT_WAKEUP's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void clear_SETPOINT_WAKEUP_SETPOINT7() volatile
    {
        SETPOINT_WAKEUP &= ~(1u << 7u);
    }

    /**
     * Toggle SETPOINT_WAKEUP's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void toggle_SETPOINT_WAKEUP_SETPOINT7() volatile
    {
        SETPOINT_WAKEUP ^= 1u << 7u;
    }

    /**
     * Get SETPOINT_WAKEUP's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline bool get_SETPOINT_WAKEUP_SETPOINT6() volatile
    {
        return SETPOINT_WAKEUP & (1u << 6u);
    }

    /**
     * Set SETPOINT_WAKEUP's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void set_SETPOINT_WAKEUP_SETPOINT6() volatile
    {
        SETPOINT_WAKEUP |= 1u << 6u;
    }

    /**
     * Clear SETPOINT_WAKEUP's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void clear_SETPOINT_WAKEUP_SETPOINT6() volatile
    {
        SETPOINT_WAKEUP &= ~(1u << 6u);
    }

    /**
     * Toggle SETPOINT_WAKEUP's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void toggle_SETPOINT_WAKEUP_SETPOINT6() volatile
    {
        SETPOINT_WAKEUP ^= 1u << 6u;
    }

    /**
     * Get SETPOINT_WAKEUP's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline bool get_SETPOINT_WAKEUP_SETPOINT5() volatile
    {
        return SETPOINT_WAKEUP & (1u << 5u);
    }

    /**
     * Set SETPOINT_WAKEUP's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void set_SETPOINT_WAKEUP_SETPOINT5() volatile
    {
        SETPOINT_WAKEUP |= 1u << 5u;
    }

    /**
     * Clear SETPOINT_WAKEUP's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void clear_SETPOINT_WAKEUP_SETPOINT5() volatile
    {
        SETPOINT_WAKEUP &= ~(1u << 5u);
    }

    /**
     * Toggle SETPOINT_WAKEUP's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void toggle_SETPOINT_WAKEUP_SETPOINT5() volatile
    {
        SETPOINT_WAKEUP ^= 1u << 5u;
    }

    /**
     * Get SETPOINT_WAKEUP's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline bool get_SETPOINT_WAKEUP_SETPOINT4() volatile
    {
        return SETPOINT_WAKEUP & (1u << 4u);
    }

    /**
     * Set SETPOINT_WAKEUP's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void set_SETPOINT_WAKEUP_SETPOINT4() volatile
    {
        SETPOINT_WAKEUP |= 1u << 4u;
    }

    /**
     * Clear SETPOINT_WAKEUP's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void clear_SETPOINT_WAKEUP_SETPOINT4() volatile
    {
        SETPOINT_WAKEUP &= ~(1u << 4u);
    }

    /**
     * Toggle SETPOINT_WAKEUP's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void toggle_SETPOINT_WAKEUP_SETPOINT4() volatile
    {
        SETPOINT_WAKEUP ^= 1u << 4u;
    }

    /**
     * Get SETPOINT_WAKEUP's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline bool get_SETPOINT_WAKEUP_SETPOINT3() volatile
    {
        return SETPOINT_WAKEUP & (1u << 3u);
    }

    /**
     * Set SETPOINT_WAKEUP's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void set_SETPOINT_WAKEUP_SETPOINT3() volatile
    {
        SETPOINT_WAKEUP |= 1u << 3u;
    }

    /**
     * Clear SETPOINT_WAKEUP's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void clear_SETPOINT_WAKEUP_SETPOINT3() volatile
    {
        SETPOINT_WAKEUP &= ~(1u << 3u);
    }

    /**
     * Toggle SETPOINT_WAKEUP's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void toggle_SETPOINT_WAKEUP_SETPOINT3() volatile
    {
        SETPOINT_WAKEUP ^= 1u << 3u;
    }

    /**
     * Get SETPOINT_WAKEUP's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline bool get_SETPOINT_WAKEUP_SETPOINT2() volatile
    {
        return SETPOINT_WAKEUP & (1u << 2u);
    }

    /**
     * Set SETPOINT_WAKEUP's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void set_SETPOINT_WAKEUP_SETPOINT2() volatile
    {
        SETPOINT_WAKEUP |= 1u << 2u;
    }

    /**
     * Clear SETPOINT_WAKEUP's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void clear_SETPOINT_WAKEUP_SETPOINT2() volatile
    {
        SETPOINT_WAKEUP &= ~(1u << 2u);
    }

    /**
     * Toggle SETPOINT_WAKEUP's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void toggle_SETPOINT_WAKEUP_SETPOINT2() volatile
    {
        SETPOINT_WAKEUP ^= 1u << 2u;
    }

    /**
     * Get SETPOINT_WAKEUP's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline bool get_SETPOINT_WAKEUP_SETPOINT1() volatile
    {
        return SETPOINT_WAKEUP & (1u << 1u);
    }

    /**
     * Set SETPOINT_WAKEUP's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void set_SETPOINT_WAKEUP_SETPOINT1() volatile
    {
        SETPOINT_WAKEUP |= 1u << 1u;
    }

    /**
     * Clear SETPOINT_WAKEUP's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void clear_SETPOINT_WAKEUP_SETPOINT1() volatile
    {
        SETPOINT_WAKEUP &= ~(1u << 1u);
    }

    /**
     * Toggle SETPOINT_WAKEUP's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void toggle_SETPOINT_WAKEUP_SETPOINT1() volatile
    {
        SETPOINT_WAKEUP ^= 1u << 1u;
    }

    /**
     * Get SETPOINT_WAKEUP's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline bool get_SETPOINT_WAKEUP_SETPOINT0() volatile
    {
        return SETPOINT_WAKEUP & (1u << 0u);
    }

    /**
     * Set SETPOINT_WAKEUP's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void set_SETPOINT_WAKEUP_SETPOINT0() volatile
    {
        SETPOINT_WAKEUP |= 1u << 0u;
    }

    /**
     * Clear SETPOINT_WAKEUP's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void clear_SETPOINT_WAKEUP_SETPOINT0() volatile
    {
        SETPOINT_WAKEUP &= ~(1u << 0u);
    }

    /**
     * Toggle SETPOINT_WAKEUP's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void toggle_SETPOINT_WAKEUP_SETPOINT0() volatile
    {
        SETPOINT_WAKEUP ^= 1u << 0u;
    }

    /**
     * Get all of SETPOINT_WAKEUP's bit fields.
     *
     * (read-write) Slice Setpoint Config Register
     */
    inline void get_SETPOINT_WAKEUP(bool &SETPOINT15, bool &SETPOINT14,
                                    bool &SETPOINT13, bool &SETPOINT12,
                                    bool &SETPOINT11, bool &SETPOINT10,
                                    bool &SETPOINT9, bool &SETPOINT8,
                                    bool &SETPOINT7, bool &SETPOINT6,
                                    bool &SETPOINT5, bool &SETPOINT4,
                                    bool &SETPOINT3, bool &SETPOINT2,
                                    bool &SETPOINT1, bool &SETPOINT0) volatile
    {
        uint32_t curr = SETPOINT_WAKEUP;

        SETPOINT15 = curr & (1u << 15u);
        SETPOINT14 = curr & (1u << 14u);
        SETPOINT13 = curr & (1u << 13u);
        SETPOINT12 = curr & (1u << 12u);
        SETPOINT11 = curr & (1u << 11u);
        SETPOINT10 = curr & (1u << 10u);
        SETPOINT9 = curr & (1u << 9u);
        SETPOINT8 = curr & (1u << 8u);
        SETPOINT7 = curr & (1u << 7u);
        SETPOINT6 = curr & (1u << 6u);
        SETPOINT5 = curr & (1u << 5u);
        SETPOINT4 = curr & (1u << 4u);
        SETPOINT3 = curr & (1u << 3u);
        SETPOINT2 = curr & (1u << 2u);
        SETPOINT1 = curr & (1u << 1u);
        SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of SETPOINT_WAKEUP's bit fields.
     *
     * (read-write) Slice Setpoint Config Register
     */
    inline void set_SETPOINT_WAKEUP(bool SETPOINT15, bool SETPOINT14,
                                    bool SETPOINT13, bool SETPOINT12,
                                    bool SETPOINT11, bool SETPOINT10,
                                    bool SETPOINT9, bool SETPOINT8,
                                    bool SETPOINT7, bool SETPOINT6,
                                    bool SETPOINT5, bool SETPOINT4,
                                    bool SETPOINT3, bool SETPOINT2,
                                    bool SETPOINT1, bool SETPOINT0) volatile
    {
        uint32_t curr = SETPOINT_WAKEUP;

        curr &= ~(0b1u << 15u);
        curr |= (SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SETPOINT0 & 0b1u) << 0u;

        SETPOINT_WAKEUP = curr;
    }

    /**
     * Get DOMAIN_WAKEUP's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline bool get_DOMAIN_WAKEUP_CPU1_SUSP() volatile
    {
        return DOMAIN_WAKEUP & (1u << 7u);
    }

    /**
     * Set DOMAIN_WAKEUP's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void set_DOMAIN_WAKEUP_CPU1_SUSP() volatile
    {
        DOMAIN_WAKEUP |= 1u << 7u;
    }

    /**
     * Clear DOMAIN_WAKEUP's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void clear_DOMAIN_WAKEUP_CPU1_SUSP() volatile
    {
        DOMAIN_WAKEUP &= ~(1u << 7u);
    }

    /**
     * Toggle DOMAIN_WAKEUP's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void toggle_DOMAIN_WAKEUP_CPU1_SUSP() volatile
    {
        DOMAIN_WAKEUP ^= 1u << 7u;
    }

    /**
     * Get DOMAIN_WAKEUP's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline bool get_DOMAIN_WAKEUP_CPU1_STOP() volatile
    {
        return DOMAIN_WAKEUP & (1u << 6u);
    }

    /**
     * Set DOMAIN_WAKEUP's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void set_DOMAIN_WAKEUP_CPU1_STOP() volatile
    {
        DOMAIN_WAKEUP |= 1u << 6u;
    }

    /**
     * Clear DOMAIN_WAKEUP's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void clear_DOMAIN_WAKEUP_CPU1_STOP() volatile
    {
        DOMAIN_WAKEUP &= ~(1u << 6u);
    }

    /**
     * Toggle DOMAIN_WAKEUP's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void toggle_DOMAIN_WAKEUP_CPU1_STOP() volatile
    {
        DOMAIN_WAKEUP ^= 1u << 6u;
    }

    /**
     * Get DOMAIN_WAKEUP's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline bool get_DOMAIN_WAKEUP_CPU1_WAIT() volatile
    {
        return DOMAIN_WAKEUP & (1u << 5u);
    }

    /**
     * Set DOMAIN_WAKEUP's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void set_DOMAIN_WAKEUP_CPU1_WAIT() volatile
    {
        DOMAIN_WAKEUP |= 1u << 5u;
    }

    /**
     * Clear DOMAIN_WAKEUP's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void clear_DOMAIN_WAKEUP_CPU1_WAIT() volatile
    {
        DOMAIN_WAKEUP &= ~(1u << 5u);
    }

    /**
     * Toggle DOMAIN_WAKEUP's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void toggle_DOMAIN_WAKEUP_CPU1_WAIT() volatile
    {
        DOMAIN_WAKEUP ^= 1u << 5u;
    }

    /**
     * Get DOMAIN_WAKEUP's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline bool get_DOMAIN_WAKEUP_CPU1_RUN() volatile
    {
        return DOMAIN_WAKEUP & (1u << 4u);
    }

    /**
     * Set DOMAIN_WAKEUP's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void set_DOMAIN_WAKEUP_CPU1_RUN() volatile
    {
        DOMAIN_WAKEUP |= 1u << 4u;
    }

    /**
     * Clear DOMAIN_WAKEUP's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void clear_DOMAIN_WAKEUP_CPU1_RUN() volatile
    {
        DOMAIN_WAKEUP &= ~(1u << 4u);
    }

    /**
     * Toggle DOMAIN_WAKEUP's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void toggle_DOMAIN_WAKEUP_CPU1_RUN() volatile
    {
        DOMAIN_WAKEUP ^= 1u << 4u;
    }

    /**
     * Get DOMAIN_WAKEUP's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline bool get_DOMAIN_WAKEUP_CPU0_SUSP() volatile
    {
        return DOMAIN_WAKEUP & (1u << 3u);
    }

    /**
     * Set DOMAIN_WAKEUP's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void set_DOMAIN_WAKEUP_CPU0_SUSP() volatile
    {
        DOMAIN_WAKEUP |= 1u << 3u;
    }

    /**
     * Clear DOMAIN_WAKEUP's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void clear_DOMAIN_WAKEUP_CPU0_SUSP() volatile
    {
        DOMAIN_WAKEUP &= ~(1u << 3u);
    }

    /**
     * Toggle DOMAIN_WAKEUP's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void toggle_DOMAIN_WAKEUP_CPU0_SUSP() volatile
    {
        DOMAIN_WAKEUP ^= 1u << 3u;
    }

    /**
     * Get DOMAIN_WAKEUP's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline bool get_DOMAIN_WAKEUP_CPU0_STOP() volatile
    {
        return DOMAIN_WAKEUP & (1u << 2u);
    }

    /**
     * Set DOMAIN_WAKEUP's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void set_DOMAIN_WAKEUP_CPU0_STOP() volatile
    {
        DOMAIN_WAKEUP |= 1u << 2u;
    }

    /**
     * Clear DOMAIN_WAKEUP's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void clear_DOMAIN_WAKEUP_CPU0_STOP() volatile
    {
        DOMAIN_WAKEUP &= ~(1u << 2u);
    }

    /**
     * Toggle DOMAIN_WAKEUP's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void toggle_DOMAIN_WAKEUP_CPU0_STOP() volatile
    {
        DOMAIN_WAKEUP ^= 1u << 2u;
    }

    /**
     * Get DOMAIN_WAKEUP's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline bool get_DOMAIN_WAKEUP_CPU0_WAIT() volatile
    {
        return DOMAIN_WAKEUP & (1u << 1u);
    }

    /**
     * Set DOMAIN_WAKEUP's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void set_DOMAIN_WAKEUP_CPU0_WAIT() volatile
    {
        DOMAIN_WAKEUP |= 1u << 1u;
    }

    /**
     * Clear DOMAIN_WAKEUP's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void clear_DOMAIN_WAKEUP_CPU0_WAIT() volatile
    {
        DOMAIN_WAKEUP &= ~(1u << 1u);
    }

    /**
     * Toggle DOMAIN_WAKEUP's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void toggle_DOMAIN_WAKEUP_CPU0_WAIT() volatile
    {
        DOMAIN_WAKEUP ^= 1u << 1u;
    }

    /**
     * Get DOMAIN_WAKEUP's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline bool get_DOMAIN_WAKEUP_CPU0_RUN() volatile
    {
        return DOMAIN_WAKEUP & (1u << 0u);
    }

    /**
     * Set DOMAIN_WAKEUP's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void set_DOMAIN_WAKEUP_CPU0_RUN() volatile
    {
        DOMAIN_WAKEUP |= 1u << 0u;
    }

    /**
     * Clear DOMAIN_WAKEUP's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void clear_DOMAIN_WAKEUP_CPU0_RUN() volatile
    {
        DOMAIN_WAKEUP &= ~(1u << 0u);
    }

    /**
     * Toggle DOMAIN_WAKEUP's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void toggle_DOMAIN_WAKEUP_CPU0_RUN() volatile
    {
        DOMAIN_WAKEUP ^= 1u << 0u;
    }

    /**
     * Get all of DOMAIN_WAKEUP's bit fields.
     *
     * (read-write) Slice Domain Config Register
     */
    inline void get_DOMAIN_WAKEUP(bool &CPU1_SUSP, bool &CPU1_STOP,
                                  bool &CPU1_WAIT, bool &CPU1_RUN,
                                  bool &CPU0_SUSP, bool &CPU0_STOP,
                                  bool &CPU0_WAIT, bool &CPU0_RUN) volatile
    {
        uint32_t curr = DOMAIN_WAKEUP;

        CPU1_SUSP = curr & (1u << 7u);
        CPU1_STOP = curr & (1u << 6u);
        CPU1_WAIT = curr & (1u << 5u);
        CPU1_RUN = curr & (1u << 4u);
        CPU0_SUSP = curr & (1u << 3u);
        CPU0_STOP = curr & (1u << 2u);
        CPU0_WAIT = curr & (1u << 1u);
        CPU0_RUN = curr & (1u << 0u);
    }

    /**
     * Set all of DOMAIN_WAKEUP's bit fields.
     *
     * (read-write) Slice Domain Config Register
     */
    inline void set_DOMAIN_WAKEUP(bool CPU1_SUSP, bool CPU1_STOP,
                                  bool CPU1_WAIT, bool CPU1_RUN,
                                  bool CPU0_SUSP, bool CPU0_STOP,
                                  bool CPU0_WAIT, bool CPU0_RUN) volatile
    {
        uint32_t curr = DOMAIN_WAKEUP;

        curr &= ~(0b1u << 7u);
        curr |= (CPU1_SUSP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CPU1_STOP & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (CPU1_WAIT & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (CPU1_RUN & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (CPU0_SUSP & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CPU0_STOP & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CPU0_WAIT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CPU0_RUN & 0b1u) << 0u;

        DOMAIN_WAKEUP = curr;
    }

    /**
     * Get STAT_WAKEUP's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline bool get_STAT_WAKEUP_RST_BY_SW() volatile
    {
        return STAT_WAKEUP & (1u << 3u);
    }

    /**
     * Set STAT_WAKEUP's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void set_STAT_WAKEUP_RST_BY_SW() volatile
    {
        STAT_WAKEUP |= 1u << 3u;
    }

    /**
     * Clear STAT_WAKEUP's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void clear_STAT_WAKEUP_RST_BY_SW() volatile
    {
        STAT_WAKEUP &= ~(1u << 3u);
    }

    /**
     * Toggle STAT_WAKEUP's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void toggle_STAT_WAKEUP_RST_BY_SW() volatile
    {
        STAT_WAKEUP ^= 1u << 3u;
    }

    /**
     * Get STAT_WAKEUP's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline bool get_STAT_WAKEUP_RST_BY_HW() volatile
    {
        return STAT_WAKEUP & (1u << 2u);
    }

    /**
     * Set STAT_WAKEUP's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void set_STAT_WAKEUP_RST_BY_HW() volatile
    {
        STAT_WAKEUP |= 1u << 2u;
    }

    /**
     * Clear STAT_WAKEUP's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void clear_STAT_WAKEUP_RST_BY_HW() volatile
    {
        STAT_WAKEUP &= ~(1u << 2u);
    }

    /**
     * Toggle STAT_WAKEUP's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void toggle_STAT_WAKEUP_RST_BY_HW() volatile
    {
        STAT_WAKEUP ^= 1u << 2u;
    }

    /**
     * Get STAT_WAKEUP's UNDER_RST bit.
     *
     * This is a Read Only bit. It indicate if the reset is in process.
     */
    inline bool get_STAT_WAKEUP_UNDER_RST() volatile
    {
        return STAT_WAKEUP & (1u << 0u);
    }

    /**
     * Get all of STAT_WAKEUP's bit fields.
     *
     * (read-write) Slice Status Register
     */
    inline void get_STAT_WAKEUP(bool &RST_BY_SW, bool &RST_BY_HW,
                                bool &UNDER_RST) volatile
    {
        uint32_t curr = STAT_WAKEUP;

        RST_BY_SW = curr & (1u << 3u);
        RST_BY_HW = curr & (1u << 2u);
        UNDER_RST = curr & (1u << 0u);
    }

    /**
     * Set all of STAT_WAKEUP's bit fields.
     *
     * (read-write) Slice Status Register
     */
    inline void set_STAT_WAKEUP(bool RST_BY_SW, bool RST_BY_HW) volatile
    {
        uint32_t curr = STAT_WAKEUP;

        curr &= ~(0b1u << 3u);
        curr |= (RST_BY_SW & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (RST_BY_HW & 0b1u) << 2u;

        STAT_WAKEUP = curr;
    }

    /**
     * Get AUTHEN_M4CORE's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline bool get_AUTHEN_M4CORE_LOCK_SETTING() volatile
    {
        return AUTHEN_M4CORE & (1u << 31u);
    }

    /**
     * Set AUTHEN_M4CORE's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void set_AUTHEN_M4CORE_LOCK_SETTING() volatile
    {
        AUTHEN_M4CORE |= 1u << 31u;
    }

    /**
     * Clear AUTHEN_M4CORE's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void clear_AUTHEN_M4CORE_LOCK_SETTING() volatile
    {
        AUTHEN_M4CORE &= ~(1u << 31u);
    }

    /**
     * Toggle AUTHEN_M4CORE's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void toggle_AUTHEN_M4CORE_LOCK_SETTING() volatile
    {
        AUTHEN_M4CORE ^= 1u << 31u;
    }

    /**
     * Get AUTHEN_M4CORE's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline bool get_AUTHEN_M4CORE_NONSECURE() volatile
    {
        return AUTHEN_M4CORE & (1u << 25u);
    }

    /**
     * Set AUTHEN_M4CORE's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void set_AUTHEN_M4CORE_NONSECURE() volatile
    {
        AUTHEN_M4CORE |= 1u << 25u;
    }

    /**
     * Clear AUTHEN_M4CORE's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void clear_AUTHEN_M4CORE_NONSECURE() volatile
    {
        AUTHEN_M4CORE &= ~(1u << 25u);
    }

    /**
     * Toggle AUTHEN_M4CORE's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void toggle_AUTHEN_M4CORE_NONSECURE() volatile
    {
        AUTHEN_M4CORE ^= 1u << 25u;
    }

    /**
     * Get AUTHEN_M4CORE's USER bit.
     *
     * Allow user mode access
     */
    inline bool get_AUTHEN_M4CORE_USER() volatile
    {
        return AUTHEN_M4CORE & (1u << 24u);
    }

    /**
     * Set AUTHEN_M4CORE's USER bit.
     *
     * Allow user mode access
     */
    inline void set_AUTHEN_M4CORE_USER() volatile
    {
        AUTHEN_M4CORE |= 1u << 24u;
    }

    /**
     * Clear AUTHEN_M4CORE's USER bit.
     *
     * Allow user mode access
     */
    inline void clear_AUTHEN_M4CORE_USER() volatile
    {
        AUTHEN_M4CORE &= ~(1u << 24u);
    }

    /**
     * Toggle AUTHEN_M4CORE's USER bit.
     *
     * Allow user mode access
     */
    inline void toggle_AUTHEN_M4CORE_USER() volatile
    {
        AUTHEN_M4CORE ^= 1u << 24u;
    }

    /**
     * Get AUTHEN_M4CORE's LOCK_LIST bit.
     *
     * White list lock
     */
    inline bool get_AUTHEN_M4CORE_LOCK_LIST() volatile
    {
        return AUTHEN_M4CORE & (1u << 23u);
    }

    /**
     * Set AUTHEN_M4CORE's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void set_AUTHEN_M4CORE_LOCK_LIST() volatile
    {
        AUTHEN_M4CORE |= 1u << 23u;
    }

    /**
     * Clear AUTHEN_M4CORE's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void clear_AUTHEN_M4CORE_LOCK_LIST() volatile
    {
        AUTHEN_M4CORE &= ~(1u << 23u);
    }

    /**
     * Toggle AUTHEN_M4CORE's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void toggle_AUTHEN_M4CORE_LOCK_LIST() volatile
    {
        AUTHEN_M4CORE ^= 1u << 23u;
    }

    /**
     * Get AUTHEN_M4CORE's WHITE_LIST field.
     *
     * Domain ID white list
     */
    inline uint8_t get_AUTHEN_M4CORE_WHITE_LIST() volatile
    {
        return (AUTHEN_M4CORE >> 16u) & 0b1111u;
    }

    /**
     * Set AUTHEN_M4CORE's WHITE_LIST field.
     *
     * Domain ID white list
     */
    inline void set_AUTHEN_M4CORE_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = AUTHEN_M4CORE;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        AUTHEN_M4CORE = curr;
    }

    /**
     * Get AUTHEN_M4CORE's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline bool get_AUTHEN_M4CORE_LOCK_ASSIGN() volatile
    {
        return AUTHEN_M4CORE & (1u << 15u);
    }

    /**
     * Set AUTHEN_M4CORE's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void set_AUTHEN_M4CORE_LOCK_ASSIGN() volatile
    {
        AUTHEN_M4CORE |= 1u << 15u;
    }

    /**
     * Clear AUTHEN_M4CORE's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void clear_AUTHEN_M4CORE_LOCK_ASSIGN() volatile
    {
        AUTHEN_M4CORE &= ~(1u << 15u);
    }

    /**
     * Toggle AUTHEN_M4CORE's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void toggle_AUTHEN_M4CORE_LOCK_ASSIGN() volatile
    {
        AUTHEN_M4CORE ^= 1u << 15u;
    }

    /**
     * Get AUTHEN_M4CORE's ASSIGN_LIST field.
     *
     * when this bitfield set to 1, reset of slice would be subject to
     * corresponding core status transition
     */
    inline uint8_t get_AUTHEN_M4CORE_ASSIGN_LIST() volatile
    {
        return (AUTHEN_M4CORE >> 8u) & 0b1111u;
    }

    /**
     * Set AUTHEN_M4CORE's ASSIGN_LIST field.
     *
     * when this bitfield set to 1, reset of slice would be subject to
     * corresponding core status transition
     */
    inline void set_AUTHEN_M4CORE_ASSIGN_LIST(uint8_t value) volatile
    {
        uint32_t curr = AUTHEN_M4CORE;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        AUTHEN_M4CORE = curr;
    }

    /**
     * Get AUTHEN_M4CORE's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline bool get_AUTHEN_M4CORE_LOCK_MODE() volatile
    {
        return AUTHEN_M4CORE & (1u << 7u);
    }

    /**
     * Set AUTHEN_M4CORE's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void set_AUTHEN_M4CORE_LOCK_MODE() volatile
    {
        AUTHEN_M4CORE |= 1u << 7u;
    }

    /**
     * Clear AUTHEN_M4CORE's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void clear_AUTHEN_M4CORE_LOCK_MODE() volatile
    {
        AUTHEN_M4CORE &= ~(1u << 7u);
    }

    /**
     * Toggle AUTHEN_M4CORE's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void toggle_AUTHEN_M4CORE_LOCK_MODE() volatile
    {
        AUTHEN_M4CORE ^= 1u << 7u;
    }

    /**
     * Get AUTHEN_M4CORE's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline bool get_AUTHEN_M4CORE_SETPOINT_MODE() volatile
    {
        return AUTHEN_M4CORE & (1u << 1u);
    }

    /**
     * Set AUTHEN_M4CORE's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void set_AUTHEN_M4CORE_SETPOINT_MODE() volatile
    {
        AUTHEN_M4CORE |= 1u << 1u;
    }

    /**
     * Clear AUTHEN_M4CORE's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void clear_AUTHEN_M4CORE_SETPOINT_MODE() volatile
    {
        AUTHEN_M4CORE &= ~(1u << 1u);
    }

    /**
     * Toggle AUTHEN_M4CORE's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void toggle_AUTHEN_M4CORE_SETPOINT_MODE() volatile
    {
        AUTHEN_M4CORE ^= 1u << 1u;
    }

    /**
     * Get AUTHEN_M4CORE's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline bool get_AUTHEN_M4CORE_DOMAIN_MODE() volatile
    {
        return AUTHEN_M4CORE & (1u << 0u);
    }

    /**
     * Set AUTHEN_M4CORE's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void set_AUTHEN_M4CORE_DOMAIN_MODE() volatile
    {
        AUTHEN_M4CORE |= 1u << 0u;
    }

    /**
     * Clear AUTHEN_M4CORE's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void clear_AUTHEN_M4CORE_DOMAIN_MODE() volatile
    {
        AUTHEN_M4CORE &= ~(1u << 0u);
    }

    /**
     * Toggle AUTHEN_M4CORE's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void toggle_AUTHEN_M4CORE_DOMAIN_MODE() volatile
    {
        AUTHEN_M4CORE ^= 1u << 0u;
    }

    /**
     * Get all of AUTHEN_M4CORE's bit fields.
     *
     * (read-write) Slice Authentication Register
     */
    inline void get_AUTHEN_M4CORE(bool &LOCK_SETTING, bool &NONSECURE,
                                  bool &USER, bool &LOCK_LIST,
                                  uint8_t &WHITE_LIST, bool &LOCK_ASSIGN,
                                  uint8_t &ASSIGN_LIST, bool &LOCK_MODE,
                                  bool &SETPOINT_MODE,
                                  bool &DOMAIN_MODE) volatile
    {
        uint32_t curr = AUTHEN_M4CORE;

        LOCK_SETTING = curr & (1u << 31u);
        NONSECURE = curr & (1u << 25u);
        USER = curr & (1u << 24u);
        LOCK_LIST = curr & (1u << 23u);
        WHITE_LIST = (curr >> 16u) & 0b1111u;
        LOCK_ASSIGN = curr & (1u << 15u);
        ASSIGN_LIST = (curr >> 8u) & 0b1111u;
        LOCK_MODE = curr & (1u << 7u);
        SETPOINT_MODE = curr & (1u << 1u);
        DOMAIN_MODE = curr & (1u << 0u);
    }

    /**
     * Set all of AUTHEN_M4CORE's bit fields.
     *
     * (read-write) Slice Authentication Register
     */
    inline void set_AUTHEN_M4CORE(bool LOCK_SETTING, bool NONSECURE, bool USER,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_ASSIGN, uint8_t ASSIGN_LIST,
                                  bool LOCK_MODE, bool SETPOINT_MODE,
                                  bool DOMAIN_MODE) volatile
    {
        uint32_t curr = AUTHEN_M4CORE;

        curr &= ~(0b1u << 31u);
        curr |= (LOCK_SETTING & 0b1u) << 31u;
        curr &= ~(0b1u << 25u);
        curr |= (NONSECURE & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (USER & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (LOCK_LIST & 0b1u) << 23u;
        curr &= ~(0b1111u << 16u);
        curr |= (WHITE_LIST & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (LOCK_ASSIGN & 0b1u) << 15u;
        curr &= ~(0b1111u << 8u);
        curr |= (ASSIGN_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (LOCK_MODE & 0b1u) << 7u;
        curr &= ~(0b1u << 1u);
        curr |= (SETPOINT_MODE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (DOMAIN_MODE & 0b1u) << 0u;

        AUTHEN_M4CORE = curr;
    }

    /**
     * Get CTRL_M4CORE's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline bool get_CTRL_M4CORE_SW_RESET() volatile
    {
        return CTRL_M4CORE & (1u << 0u);
    }

    /**
     * Set CTRL_M4CORE's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void set_CTRL_M4CORE_SW_RESET() volatile
    {
        CTRL_M4CORE |= 1u << 0u;
    }

    /**
     * Clear CTRL_M4CORE's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void clear_CTRL_M4CORE_SW_RESET() volatile
    {
        CTRL_M4CORE &= ~(1u << 0u);
    }

    /**
     * Toggle CTRL_M4CORE's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void toggle_CTRL_M4CORE_SW_RESET() volatile
    {
        CTRL_M4CORE ^= 1u << 0u;
    }

    /**
     * Get SETPOINT_M4CORE's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline bool get_SETPOINT_M4CORE_SETPOINT15() volatile
    {
        return SETPOINT_M4CORE & (1u << 15u);
    }

    /**
     * Set SETPOINT_M4CORE's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void set_SETPOINT_M4CORE_SETPOINT15() volatile
    {
        SETPOINT_M4CORE |= 1u << 15u;
    }

    /**
     * Clear SETPOINT_M4CORE's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void clear_SETPOINT_M4CORE_SETPOINT15() volatile
    {
        SETPOINT_M4CORE &= ~(1u << 15u);
    }

    /**
     * Toggle SETPOINT_M4CORE's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void toggle_SETPOINT_M4CORE_SETPOINT15() volatile
    {
        SETPOINT_M4CORE ^= 1u << 15u;
    }

    /**
     * Get SETPOINT_M4CORE's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline bool get_SETPOINT_M4CORE_SETPOINT14() volatile
    {
        return SETPOINT_M4CORE & (1u << 14u);
    }

    /**
     * Set SETPOINT_M4CORE's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void set_SETPOINT_M4CORE_SETPOINT14() volatile
    {
        SETPOINT_M4CORE |= 1u << 14u;
    }

    /**
     * Clear SETPOINT_M4CORE's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void clear_SETPOINT_M4CORE_SETPOINT14() volatile
    {
        SETPOINT_M4CORE &= ~(1u << 14u);
    }

    /**
     * Toggle SETPOINT_M4CORE's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void toggle_SETPOINT_M4CORE_SETPOINT14() volatile
    {
        SETPOINT_M4CORE ^= 1u << 14u;
    }

    /**
     * Get SETPOINT_M4CORE's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline bool get_SETPOINT_M4CORE_SETPOINT13() volatile
    {
        return SETPOINT_M4CORE & (1u << 13u);
    }

    /**
     * Set SETPOINT_M4CORE's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void set_SETPOINT_M4CORE_SETPOINT13() volatile
    {
        SETPOINT_M4CORE |= 1u << 13u;
    }

    /**
     * Clear SETPOINT_M4CORE's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void clear_SETPOINT_M4CORE_SETPOINT13() volatile
    {
        SETPOINT_M4CORE &= ~(1u << 13u);
    }

    /**
     * Toggle SETPOINT_M4CORE's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void toggle_SETPOINT_M4CORE_SETPOINT13() volatile
    {
        SETPOINT_M4CORE ^= 1u << 13u;
    }

    /**
     * Get SETPOINT_M4CORE's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline bool get_SETPOINT_M4CORE_SETPOINT12() volatile
    {
        return SETPOINT_M4CORE & (1u << 12u);
    }

    /**
     * Set SETPOINT_M4CORE's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void set_SETPOINT_M4CORE_SETPOINT12() volatile
    {
        SETPOINT_M4CORE |= 1u << 12u;
    }

    /**
     * Clear SETPOINT_M4CORE's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void clear_SETPOINT_M4CORE_SETPOINT12() volatile
    {
        SETPOINT_M4CORE &= ~(1u << 12u);
    }

    /**
     * Toggle SETPOINT_M4CORE's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void toggle_SETPOINT_M4CORE_SETPOINT12() volatile
    {
        SETPOINT_M4CORE ^= 1u << 12u;
    }

    /**
     * Get SETPOINT_M4CORE's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline bool get_SETPOINT_M4CORE_SETPOINT11() volatile
    {
        return SETPOINT_M4CORE & (1u << 11u);
    }

    /**
     * Set SETPOINT_M4CORE's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void set_SETPOINT_M4CORE_SETPOINT11() volatile
    {
        SETPOINT_M4CORE |= 1u << 11u;
    }

    /**
     * Clear SETPOINT_M4CORE's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void clear_SETPOINT_M4CORE_SETPOINT11() volatile
    {
        SETPOINT_M4CORE &= ~(1u << 11u);
    }

    /**
     * Toggle SETPOINT_M4CORE's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void toggle_SETPOINT_M4CORE_SETPOINT11() volatile
    {
        SETPOINT_M4CORE ^= 1u << 11u;
    }

    /**
     * Get SETPOINT_M4CORE's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline bool get_SETPOINT_M4CORE_SETPOINT10() volatile
    {
        return SETPOINT_M4CORE & (1u << 10u);
    }

    /**
     * Set SETPOINT_M4CORE's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void set_SETPOINT_M4CORE_SETPOINT10() volatile
    {
        SETPOINT_M4CORE |= 1u << 10u;
    }

    /**
     * Clear SETPOINT_M4CORE's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void clear_SETPOINT_M4CORE_SETPOINT10() volatile
    {
        SETPOINT_M4CORE &= ~(1u << 10u);
    }

    /**
     * Toggle SETPOINT_M4CORE's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void toggle_SETPOINT_M4CORE_SETPOINT10() volatile
    {
        SETPOINT_M4CORE ^= 1u << 10u;
    }

    /**
     * Get SETPOINT_M4CORE's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline bool get_SETPOINT_M4CORE_SETPOINT9() volatile
    {
        return SETPOINT_M4CORE & (1u << 9u);
    }

    /**
     * Set SETPOINT_M4CORE's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void set_SETPOINT_M4CORE_SETPOINT9() volatile
    {
        SETPOINT_M4CORE |= 1u << 9u;
    }

    /**
     * Clear SETPOINT_M4CORE's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void clear_SETPOINT_M4CORE_SETPOINT9() volatile
    {
        SETPOINT_M4CORE &= ~(1u << 9u);
    }

    /**
     * Toggle SETPOINT_M4CORE's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void toggle_SETPOINT_M4CORE_SETPOINT9() volatile
    {
        SETPOINT_M4CORE ^= 1u << 9u;
    }

    /**
     * Get SETPOINT_M4CORE's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline bool get_SETPOINT_M4CORE_SETPOINT8() volatile
    {
        return SETPOINT_M4CORE & (1u << 8u);
    }

    /**
     * Set SETPOINT_M4CORE's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void set_SETPOINT_M4CORE_SETPOINT8() volatile
    {
        SETPOINT_M4CORE |= 1u << 8u;
    }

    /**
     * Clear SETPOINT_M4CORE's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void clear_SETPOINT_M4CORE_SETPOINT8() volatile
    {
        SETPOINT_M4CORE &= ~(1u << 8u);
    }

    /**
     * Toggle SETPOINT_M4CORE's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void toggle_SETPOINT_M4CORE_SETPOINT8() volatile
    {
        SETPOINT_M4CORE ^= 1u << 8u;
    }

    /**
     * Get SETPOINT_M4CORE's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline bool get_SETPOINT_M4CORE_SETPOINT7() volatile
    {
        return SETPOINT_M4CORE & (1u << 7u);
    }

    /**
     * Set SETPOINT_M4CORE's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void set_SETPOINT_M4CORE_SETPOINT7() volatile
    {
        SETPOINT_M4CORE |= 1u << 7u;
    }

    /**
     * Clear SETPOINT_M4CORE's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void clear_SETPOINT_M4CORE_SETPOINT7() volatile
    {
        SETPOINT_M4CORE &= ~(1u << 7u);
    }

    /**
     * Toggle SETPOINT_M4CORE's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void toggle_SETPOINT_M4CORE_SETPOINT7() volatile
    {
        SETPOINT_M4CORE ^= 1u << 7u;
    }

    /**
     * Get SETPOINT_M4CORE's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline bool get_SETPOINT_M4CORE_SETPOINT6() volatile
    {
        return SETPOINT_M4CORE & (1u << 6u);
    }

    /**
     * Set SETPOINT_M4CORE's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void set_SETPOINT_M4CORE_SETPOINT6() volatile
    {
        SETPOINT_M4CORE |= 1u << 6u;
    }

    /**
     * Clear SETPOINT_M4CORE's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void clear_SETPOINT_M4CORE_SETPOINT6() volatile
    {
        SETPOINT_M4CORE &= ~(1u << 6u);
    }

    /**
     * Toggle SETPOINT_M4CORE's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void toggle_SETPOINT_M4CORE_SETPOINT6() volatile
    {
        SETPOINT_M4CORE ^= 1u << 6u;
    }

    /**
     * Get SETPOINT_M4CORE's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline bool get_SETPOINT_M4CORE_SETPOINT5() volatile
    {
        return SETPOINT_M4CORE & (1u << 5u);
    }

    /**
     * Set SETPOINT_M4CORE's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void set_SETPOINT_M4CORE_SETPOINT5() volatile
    {
        SETPOINT_M4CORE |= 1u << 5u;
    }

    /**
     * Clear SETPOINT_M4CORE's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void clear_SETPOINT_M4CORE_SETPOINT5() volatile
    {
        SETPOINT_M4CORE &= ~(1u << 5u);
    }

    /**
     * Toggle SETPOINT_M4CORE's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void toggle_SETPOINT_M4CORE_SETPOINT5() volatile
    {
        SETPOINT_M4CORE ^= 1u << 5u;
    }

    /**
     * Get SETPOINT_M4CORE's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline bool get_SETPOINT_M4CORE_SETPOINT4() volatile
    {
        return SETPOINT_M4CORE & (1u << 4u);
    }

    /**
     * Set SETPOINT_M4CORE's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void set_SETPOINT_M4CORE_SETPOINT4() volatile
    {
        SETPOINT_M4CORE |= 1u << 4u;
    }

    /**
     * Clear SETPOINT_M4CORE's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void clear_SETPOINT_M4CORE_SETPOINT4() volatile
    {
        SETPOINT_M4CORE &= ~(1u << 4u);
    }

    /**
     * Toggle SETPOINT_M4CORE's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void toggle_SETPOINT_M4CORE_SETPOINT4() volatile
    {
        SETPOINT_M4CORE ^= 1u << 4u;
    }

    /**
     * Get SETPOINT_M4CORE's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline bool get_SETPOINT_M4CORE_SETPOINT3() volatile
    {
        return SETPOINT_M4CORE & (1u << 3u);
    }

    /**
     * Set SETPOINT_M4CORE's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void set_SETPOINT_M4CORE_SETPOINT3() volatile
    {
        SETPOINT_M4CORE |= 1u << 3u;
    }

    /**
     * Clear SETPOINT_M4CORE's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void clear_SETPOINT_M4CORE_SETPOINT3() volatile
    {
        SETPOINT_M4CORE &= ~(1u << 3u);
    }

    /**
     * Toggle SETPOINT_M4CORE's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void toggle_SETPOINT_M4CORE_SETPOINT3() volatile
    {
        SETPOINT_M4CORE ^= 1u << 3u;
    }

    /**
     * Get SETPOINT_M4CORE's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline bool get_SETPOINT_M4CORE_SETPOINT2() volatile
    {
        return SETPOINT_M4CORE & (1u << 2u);
    }

    /**
     * Set SETPOINT_M4CORE's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void set_SETPOINT_M4CORE_SETPOINT2() volatile
    {
        SETPOINT_M4CORE |= 1u << 2u;
    }

    /**
     * Clear SETPOINT_M4CORE's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void clear_SETPOINT_M4CORE_SETPOINT2() volatile
    {
        SETPOINT_M4CORE &= ~(1u << 2u);
    }

    /**
     * Toggle SETPOINT_M4CORE's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void toggle_SETPOINT_M4CORE_SETPOINT2() volatile
    {
        SETPOINT_M4CORE ^= 1u << 2u;
    }

    /**
     * Get SETPOINT_M4CORE's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline bool get_SETPOINT_M4CORE_SETPOINT1() volatile
    {
        return SETPOINT_M4CORE & (1u << 1u);
    }

    /**
     * Set SETPOINT_M4CORE's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void set_SETPOINT_M4CORE_SETPOINT1() volatile
    {
        SETPOINT_M4CORE |= 1u << 1u;
    }

    /**
     * Clear SETPOINT_M4CORE's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void clear_SETPOINT_M4CORE_SETPOINT1() volatile
    {
        SETPOINT_M4CORE &= ~(1u << 1u);
    }

    /**
     * Toggle SETPOINT_M4CORE's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void toggle_SETPOINT_M4CORE_SETPOINT1() volatile
    {
        SETPOINT_M4CORE ^= 1u << 1u;
    }

    /**
     * Get SETPOINT_M4CORE's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline bool get_SETPOINT_M4CORE_SETPOINT0() volatile
    {
        return SETPOINT_M4CORE & (1u << 0u);
    }

    /**
     * Set SETPOINT_M4CORE's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void set_SETPOINT_M4CORE_SETPOINT0() volatile
    {
        SETPOINT_M4CORE |= 1u << 0u;
    }

    /**
     * Clear SETPOINT_M4CORE's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void clear_SETPOINT_M4CORE_SETPOINT0() volatile
    {
        SETPOINT_M4CORE &= ~(1u << 0u);
    }

    /**
     * Toggle SETPOINT_M4CORE's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void toggle_SETPOINT_M4CORE_SETPOINT0() volatile
    {
        SETPOINT_M4CORE ^= 1u << 0u;
    }

    /**
     * Get all of SETPOINT_M4CORE's bit fields.
     *
     * (read-write) Slice Setpoint Config Register
     */
    inline void get_SETPOINT_M4CORE(bool &SETPOINT15, bool &SETPOINT14,
                                    bool &SETPOINT13, bool &SETPOINT12,
                                    bool &SETPOINT11, bool &SETPOINT10,
                                    bool &SETPOINT9, bool &SETPOINT8,
                                    bool &SETPOINT7, bool &SETPOINT6,
                                    bool &SETPOINT5, bool &SETPOINT4,
                                    bool &SETPOINT3, bool &SETPOINT2,
                                    bool &SETPOINT1, bool &SETPOINT0) volatile
    {
        uint32_t curr = SETPOINT_M4CORE;

        SETPOINT15 = curr & (1u << 15u);
        SETPOINT14 = curr & (1u << 14u);
        SETPOINT13 = curr & (1u << 13u);
        SETPOINT12 = curr & (1u << 12u);
        SETPOINT11 = curr & (1u << 11u);
        SETPOINT10 = curr & (1u << 10u);
        SETPOINT9 = curr & (1u << 9u);
        SETPOINT8 = curr & (1u << 8u);
        SETPOINT7 = curr & (1u << 7u);
        SETPOINT6 = curr & (1u << 6u);
        SETPOINT5 = curr & (1u << 5u);
        SETPOINT4 = curr & (1u << 4u);
        SETPOINT3 = curr & (1u << 3u);
        SETPOINT2 = curr & (1u << 2u);
        SETPOINT1 = curr & (1u << 1u);
        SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of SETPOINT_M4CORE's bit fields.
     *
     * (read-write) Slice Setpoint Config Register
     */
    inline void set_SETPOINT_M4CORE(bool SETPOINT15, bool SETPOINT14,
                                    bool SETPOINT13, bool SETPOINT12,
                                    bool SETPOINT11, bool SETPOINT10,
                                    bool SETPOINT9, bool SETPOINT8,
                                    bool SETPOINT7, bool SETPOINT6,
                                    bool SETPOINT5, bool SETPOINT4,
                                    bool SETPOINT3, bool SETPOINT2,
                                    bool SETPOINT1, bool SETPOINT0) volatile
    {
        uint32_t curr = SETPOINT_M4CORE;

        curr &= ~(0b1u << 15u);
        curr |= (SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SETPOINT0 & 0b1u) << 0u;

        SETPOINT_M4CORE = curr;
    }

    /**
     * Get DOMAIN_M4CORE's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline bool get_DOMAIN_M4CORE_CPU1_SUSP() volatile
    {
        return DOMAIN_M4CORE & (1u << 7u);
    }

    /**
     * Set DOMAIN_M4CORE's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void set_DOMAIN_M4CORE_CPU1_SUSP() volatile
    {
        DOMAIN_M4CORE |= 1u << 7u;
    }

    /**
     * Clear DOMAIN_M4CORE's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void clear_DOMAIN_M4CORE_CPU1_SUSP() volatile
    {
        DOMAIN_M4CORE &= ~(1u << 7u);
    }

    /**
     * Toggle DOMAIN_M4CORE's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void toggle_DOMAIN_M4CORE_CPU1_SUSP() volatile
    {
        DOMAIN_M4CORE ^= 1u << 7u;
    }

    /**
     * Get DOMAIN_M4CORE's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline bool get_DOMAIN_M4CORE_CPU1_STOP() volatile
    {
        return DOMAIN_M4CORE & (1u << 6u);
    }

    /**
     * Set DOMAIN_M4CORE's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void set_DOMAIN_M4CORE_CPU1_STOP() volatile
    {
        DOMAIN_M4CORE |= 1u << 6u;
    }

    /**
     * Clear DOMAIN_M4CORE's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void clear_DOMAIN_M4CORE_CPU1_STOP() volatile
    {
        DOMAIN_M4CORE &= ~(1u << 6u);
    }

    /**
     * Toggle DOMAIN_M4CORE's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void toggle_DOMAIN_M4CORE_CPU1_STOP() volatile
    {
        DOMAIN_M4CORE ^= 1u << 6u;
    }

    /**
     * Get DOMAIN_M4CORE's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline bool get_DOMAIN_M4CORE_CPU1_WAIT() volatile
    {
        return DOMAIN_M4CORE & (1u << 5u);
    }

    /**
     * Set DOMAIN_M4CORE's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void set_DOMAIN_M4CORE_CPU1_WAIT() volatile
    {
        DOMAIN_M4CORE |= 1u << 5u;
    }

    /**
     * Clear DOMAIN_M4CORE's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void clear_DOMAIN_M4CORE_CPU1_WAIT() volatile
    {
        DOMAIN_M4CORE &= ~(1u << 5u);
    }

    /**
     * Toggle DOMAIN_M4CORE's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void toggle_DOMAIN_M4CORE_CPU1_WAIT() volatile
    {
        DOMAIN_M4CORE ^= 1u << 5u;
    }

    /**
     * Get DOMAIN_M4CORE's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline bool get_DOMAIN_M4CORE_CPU1_RUN() volatile
    {
        return DOMAIN_M4CORE & (1u << 4u);
    }

    /**
     * Set DOMAIN_M4CORE's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void set_DOMAIN_M4CORE_CPU1_RUN() volatile
    {
        DOMAIN_M4CORE |= 1u << 4u;
    }

    /**
     * Clear DOMAIN_M4CORE's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void clear_DOMAIN_M4CORE_CPU1_RUN() volatile
    {
        DOMAIN_M4CORE &= ~(1u << 4u);
    }

    /**
     * Toggle DOMAIN_M4CORE's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void toggle_DOMAIN_M4CORE_CPU1_RUN() volatile
    {
        DOMAIN_M4CORE ^= 1u << 4u;
    }

    /**
     * Get DOMAIN_M4CORE's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline bool get_DOMAIN_M4CORE_CPU0_SUSP() volatile
    {
        return DOMAIN_M4CORE & (1u << 3u);
    }

    /**
     * Set DOMAIN_M4CORE's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void set_DOMAIN_M4CORE_CPU0_SUSP() volatile
    {
        DOMAIN_M4CORE |= 1u << 3u;
    }

    /**
     * Clear DOMAIN_M4CORE's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void clear_DOMAIN_M4CORE_CPU0_SUSP() volatile
    {
        DOMAIN_M4CORE &= ~(1u << 3u);
    }

    /**
     * Toggle DOMAIN_M4CORE's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void toggle_DOMAIN_M4CORE_CPU0_SUSP() volatile
    {
        DOMAIN_M4CORE ^= 1u << 3u;
    }

    /**
     * Get DOMAIN_M4CORE's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline bool get_DOMAIN_M4CORE_CPU0_STOP() volatile
    {
        return DOMAIN_M4CORE & (1u << 2u);
    }

    /**
     * Set DOMAIN_M4CORE's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void set_DOMAIN_M4CORE_CPU0_STOP() volatile
    {
        DOMAIN_M4CORE |= 1u << 2u;
    }

    /**
     * Clear DOMAIN_M4CORE's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void clear_DOMAIN_M4CORE_CPU0_STOP() volatile
    {
        DOMAIN_M4CORE &= ~(1u << 2u);
    }

    /**
     * Toggle DOMAIN_M4CORE's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void toggle_DOMAIN_M4CORE_CPU0_STOP() volatile
    {
        DOMAIN_M4CORE ^= 1u << 2u;
    }

    /**
     * Get DOMAIN_M4CORE's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline bool get_DOMAIN_M4CORE_CPU0_WAIT() volatile
    {
        return DOMAIN_M4CORE & (1u << 1u);
    }

    /**
     * Set DOMAIN_M4CORE's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void set_DOMAIN_M4CORE_CPU0_WAIT() volatile
    {
        DOMAIN_M4CORE |= 1u << 1u;
    }

    /**
     * Clear DOMAIN_M4CORE's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void clear_DOMAIN_M4CORE_CPU0_WAIT() volatile
    {
        DOMAIN_M4CORE &= ~(1u << 1u);
    }

    /**
     * Toggle DOMAIN_M4CORE's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void toggle_DOMAIN_M4CORE_CPU0_WAIT() volatile
    {
        DOMAIN_M4CORE ^= 1u << 1u;
    }

    /**
     * Get DOMAIN_M4CORE's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline bool get_DOMAIN_M4CORE_CPU0_RUN() volatile
    {
        return DOMAIN_M4CORE & (1u << 0u);
    }

    /**
     * Set DOMAIN_M4CORE's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void set_DOMAIN_M4CORE_CPU0_RUN() volatile
    {
        DOMAIN_M4CORE |= 1u << 0u;
    }

    /**
     * Clear DOMAIN_M4CORE's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void clear_DOMAIN_M4CORE_CPU0_RUN() volatile
    {
        DOMAIN_M4CORE &= ~(1u << 0u);
    }

    /**
     * Toggle DOMAIN_M4CORE's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void toggle_DOMAIN_M4CORE_CPU0_RUN() volatile
    {
        DOMAIN_M4CORE ^= 1u << 0u;
    }

    /**
     * Get all of DOMAIN_M4CORE's bit fields.
     *
     * (read-write) Slice Domain Config Register
     */
    inline void get_DOMAIN_M4CORE(bool &CPU1_SUSP, bool &CPU1_STOP,
                                  bool &CPU1_WAIT, bool &CPU1_RUN,
                                  bool &CPU0_SUSP, bool &CPU0_STOP,
                                  bool &CPU0_WAIT, bool &CPU0_RUN) volatile
    {
        uint32_t curr = DOMAIN_M4CORE;

        CPU1_SUSP = curr & (1u << 7u);
        CPU1_STOP = curr & (1u << 6u);
        CPU1_WAIT = curr & (1u << 5u);
        CPU1_RUN = curr & (1u << 4u);
        CPU0_SUSP = curr & (1u << 3u);
        CPU0_STOP = curr & (1u << 2u);
        CPU0_WAIT = curr & (1u << 1u);
        CPU0_RUN = curr & (1u << 0u);
    }

    /**
     * Set all of DOMAIN_M4CORE's bit fields.
     *
     * (read-write) Slice Domain Config Register
     */
    inline void set_DOMAIN_M4CORE(bool CPU1_SUSP, bool CPU1_STOP,
                                  bool CPU1_WAIT, bool CPU1_RUN,
                                  bool CPU0_SUSP, bool CPU0_STOP,
                                  bool CPU0_WAIT, bool CPU0_RUN) volatile
    {
        uint32_t curr = DOMAIN_M4CORE;

        curr &= ~(0b1u << 7u);
        curr |= (CPU1_SUSP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CPU1_STOP & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (CPU1_WAIT & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (CPU1_RUN & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (CPU0_SUSP & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CPU0_STOP & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CPU0_WAIT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CPU0_RUN & 0b1u) << 0u;

        DOMAIN_M4CORE = curr;
    }

    /**
     * Get STAT_M4CORE's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline bool get_STAT_M4CORE_RST_BY_SW() volatile
    {
        return STAT_M4CORE & (1u << 3u);
    }

    /**
     * Set STAT_M4CORE's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void set_STAT_M4CORE_RST_BY_SW() volatile
    {
        STAT_M4CORE |= 1u << 3u;
    }

    /**
     * Clear STAT_M4CORE's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void clear_STAT_M4CORE_RST_BY_SW() volatile
    {
        STAT_M4CORE &= ~(1u << 3u);
    }

    /**
     * Toggle STAT_M4CORE's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void toggle_STAT_M4CORE_RST_BY_SW() volatile
    {
        STAT_M4CORE ^= 1u << 3u;
    }

    /**
     * Get STAT_M4CORE's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline bool get_STAT_M4CORE_RST_BY_HW() volatile
    {
        return STAT_M4CORE & (1u << 2u);
    }

    /**
     * Set STAT_M4CORE's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void set_STAT_M4CORE_RST_BY_HW() volatile
    {
        STAT_M4CORE |= 1u << 2u;
    }

    /**
     * Clear STAT_M4CORE's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void clear_STAT_M4CORE_RST_BY_HW() volatile
    {
        STAT_M4CORE &= ~(1u << 2u);
    }

    /**
     * Toggle STAT_M4CORE's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void toggle_STAT_M4CORE_RST_BY_HW() volatile
    {
        STAT_M4CORE ^= 1u << 2u;
    }

    /**
     * Get STAT_M4CORE's UNDER_RST bit.
     *
     * This is a Read Only bit. It indicate if the reset is in process.
     */
    inline bool get_STAT_M4CORE_UNDER_RST() volatile
    {
        return STAT_M4CORE & (1u << 0u);
    }

    /**
     * Get all of STAT_M4CORE's bit fields.
     *
     * (read-write) Slice Status Register
     */
    inline void get_STAT_M4CORE(bool &RST_BY_SW, bool &RST_BY_HW,
                                bool &UNDER_RST) volatile
    {
        uint32_t curr = STAT_M4CORE;

        RST_BY_SW = curr & (1u << 3u);
        RST_BY_HW = curr & (1u << 2u);
        UNDER_RST = curr & (1u << 0u);
    }

    /**
     * Set all of STAT_M4CORE's bit fields.
     *
     * (read-write) Slice Status Register
     */
    inline void set_STAT_M4CORE(bool RST_BY_SW, bool RST_BY_HW) volatile
    {
        uint32_t curr = STAT_M4CORE;

        curr &= ~(0b1u << 3u);
        curr |= (RST_BY_SW & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (RST_BY_HW & 0b1u) << 2u;

        STAT_M4CORE = curr;
    }

    /**
     * Get AUTHEN_M7CORE's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline bool get_AUTHEN_M7CORE_LOCK_SETTING() volatile
    {
        return AUTHEN_M7CORE & (1u << 31u);
    }

    /**
     * Set AUTHEN_M7CORE's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void set_AUTHEN_M7CORE_LOCK_SETTING() volatile
    {
        AUTHEN_M7CORE |= 1u << 31u;
    }

    /**
     * Clear AUTHEN_M7CORE's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void clear_AUTHEN_M7CORE_LOCK_SETTING() volatile
    {
        AUTHEN_M7CORE &= ~(1u << 31u);
    }

    /**
     * Toggle AUTHEN_M7CORE's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void toggle_AUTHEN_M7CORE_LOCK_SETTING() volatile
    {
        AUTHEN_M7CORE ^= 1u << 31u;
    }

    /**
     * Get AUTHEN_M7CORE's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline bool get_AUTHEN_M7CORE_NONSECURE() volatile
    {
        return AUTHEN_M7CORE & (1u << 25u);
    }

    /**
     * Set AUTHEN_M7CORE's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void set_AUTHEN_M7CORE_NONSECURE() volatile
    {
        AUTHEN_M7CORE |= 1u << 25u;
    }

    /**
     * Clear AUTHEN_M7CORE's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void clear_AUTHEN_M7CORE_NONSECURE() volatile
    {
        AUTHEN_M7CORE &= ~(1u << 25u);
    }

    /**
     * Toggle AUTHEN_M7CORE's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void toggle_AUTHEN_M7CORE_NONSECURE() volatile
    {
        AUTHEN_M7CORE ^= 1u << 25u;
    }

    /**
     * Get AUTHEN_M7CORE's USER bit.
     *
     * Allow user mode access
     */
    inline bool get_AUTHEN_M7CORE_USER() volatile
    {
        return AUTHEN_M7CORE & (1u << 24u);
    }

    /**
     * Set AUTHEN_M7CORE's USER bit.
     *
     * Allow user mode access
     */
    inline void set_AUTHEN_M7CORE_USER() volatile
    {
        AUTHEN_M7CORE |= 1u << 24u;
    }

    /**
     * Clear AUTHEN_M7CORE's USER bit.
     *
     * Allow user mode access
     */
    inline void clear_AUTHEN_M7CORE_USER() volatile
    {
        AUTHEN_M7CORE &= ~(1u << 24u);
    }

    /**
     * Toggle AUTHEN_M7CORE's USER bit.
     *
     * Allow user mode access
     */
    inline void toggle_AUTHEN_M7CORE_USER() volatile
    {
        AUTHEN_M7CORE ^= 1u << 24u;
    }

    /**
     * Get AUTHEN_M7CORE's LOCK_LIST bit.
     *
     * White list lock
     */
    inline bool get_AUTHEN_M7CORE_LOCK_LIST() volatile
    {
        return AUTHEN_M7CORE & (1u << 23u);
    }

    /**
     * Set AUTHEN_M7CORE's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void set_AUTHEN_M7CORE_LOCK_LIST() volatile
    {
        AUTHEN_M7CORE |= 1u << 23u;
    }

    /**
     * Clear AUTHEN_M7CORE's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void clear_AUTHEN_M7CORE_LOCK_LIST() volatile
    {
        AUTHEN_M7CORE &= ~(1u << 23u);
    }

    /**
     * Toggle AUTHEN_M7CORE's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void toggle_AUTHEN_M7CORE_LOCK_LIST() volatile
    {
        AUTHEN_M7CORE ^= 1u << 23u;
    }

    /**
     * Get AUTHEN_M7CORE's WHITE_LIST field.
     *
     * Domain ID white list
     */
    inline uint8_t get_AUTHEN_M7CORE_WHITE_LIST() volatile
    {
        return (AUTHEN_M7CORE >> 16u) & 0b1111u;
    }

    /**
     * Set AUTHEN_M7CORE's WHITE_LIST field.
     *
     * Domain ID white list
     */
    inline void set_AUTHEN_M7CORE_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = AUTHEN_M7CORE;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        AUTHEN_M7CORE = curr;
    }

    /**
     * Get AUTHEN_M7CORE's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline bool get_AUTHEN_M7CORE_LOCK_ASSIGN() volatile
    {
        return AUTHEN_M7CORE & (1u << 15u);
    }

    /**
     * Set AUTHEN_M7CORE's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void set_AUTHEN_M7CORE_LOCK_ASSIGN() volatile
    {
        AUTHEN_M7CORE |= 1u << 15u;
    }

    /**
     * Clear AUTHEN_M7CORE's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void clear_AUTHEN_M7CORE_LOCK_ASSIGN() volatile
    {
        AUTHEN_M7CORE &= ~(1u << 15u);
    }

    /**
     * Toggle AUTHEN_M7CORE's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void toggle_AUTHEN_M7CORE_LOCK_ASSIGN() volatile
    {
        AUTHEN_M7CORE ^= 1u << 15u;
    }

    /**
     * Get AUTHEN_M7CORE's ASSIGN_LIST field.
     *
     * when this bitfield set to 1, reset of slice would be subject to
     * corresponding core status transition
     */
    inline uint8_t get_AUTHEN_M7CORE_ASSIGN_LIST() volatile
    {
        return (AUTHEN_M7CORE >> 8u) & 0b1111u;
    }

    /**
     * Set AUTHEN_M7CORE's ASSIGN_LIST field.
     *
     * when this bitfield set to 1, reset of slice would be subject to
     * corresponding core status transition
     */
    inline void set_AUTHEN_M7CORE_ASSIGN_LIST(uint8_t value) volatile
    {
        uint32_t curr = AUTHEN_M7CORE;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        AUTHEN_M7CORE = curr;
    }

    /**
     * Get AUTHEN_M7CORE's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline bool get_AUTHEN_M7CORE_LOCK_MODE() volatile
    {
        return AUTHEN_M7CORE & (1u << 7u);
    }

    /**
     * Set AUTHEN_M7CORE's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void set_AUTHEN_M7CORE_LOCK_MODE() volatile
    {
        AUTHEN_M7CORE |= 1u << 7u;
    }

    /**
     * Clear AUTHEN_M7CORE's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void clear_AUTHEN_M7CORE_LOCK_MODE() volatile
    {
        AUTHEN_M7CORE &= ~(1u << 7u);
    }

    /**
     * Toggle AUTHEN_M7CORE's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void toggle_AUTHEN_M7CORE_LOCK_MODE() volatile
    {
        AUTHEN_M7CORE ^= 1u << 7u;
    }

    /**
     * Get AUTHEN_M7CORE's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline bool get_AUTHEN_M7CORE_SETPOINT_MODE() volatile
    {
        return AUTHEN_M7CORE & (1u << 1u);
    }

    /**
     * Set AUTHEN_M7CORE's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void set_AUTHEN_M7CORE_SETPOINT_MODE() volatile
    {
        AUTHEN_M7CORE |= 1u << 1u;
    }

    /**
     * Clear AUTHEN_M7CORE's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void clear_AUTHEN_M7CORE_SETPOINT_MODE() volatile
    {
        AUTHEN_M7CORE &= ~(1u << 1u);
    }

    /**
     * Toggle AUTHEN_M7CORE's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void toggle_AUTHEN_M7CORE_SETPOINT_MODE() volatile
    {
        AUTHEN_M7CORE ^= 1u << 1u;
    }

    /**
     * Get AUTHEN_M7CORE's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline bool get_AUTHEN_M7CORE_DOMAIN_MODE() volatile
    {
        return AUTHEN_M7CORE & (1u << 0u);
    }

    /**
     * Set AUTHEN_M7CORE's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void set_AUTHEN_M7CORE_DOMAIN_MODE() volatile
    {
        AUTHEN_M7CORE |= 1u << 0u;
    }

    /**
     * Clear AUTHEN_M7CORE's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void clear_AUTHEN_M7CORE_DOMAIN_MODE() volatile
    {
        AUTHEN_M7CORE &= ~(1u << 0u);
    }

    /**
     * Toggle AUTHEN_M7CORE's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void toggle_AUTHEN_M7CORE_DOMAIN_MODE() volatile
    {
        AUTHEN_M7CORE ^= 1u << 0u;
    }

    /**
     * Get all of AUTHEN_M7CORE's bit fields.
     *
     * (read-write) Slice Authentication Register
     */
    inline void get_AUTHEN_M7CORE(bool &LOCK_SETTING, bool &NONSECURE,
                                  bool &USER, bool &LOCK_LIST,
                                  uint8_t &WHITE_LIST, bool &LOCK_ASSIGN,
                                  uint8_t &ASSIGN_LIST, bool &LOCK_MODE,
                                  bool &SETPOINT_MODE,
                                  bool &DOMAIN_MODE) volatile
    {
        uint32_t curr = AUTHEN_M7CORE;

        LOCK_SETTING = curr & (1u << 31u);
        NONSECURE = curr & (1u << 25u);
        USER = curr & (1u << 24u);
        LOCK_LIST = curr & (1u << 23u);
        WHITE_LIST = (curr >> 16u) & 0b1111u;
        LOCK_ASSIGN = curr & (1u << 15u);
        ASSIGN_LIST = (curr >> 8u) & 0b1111u;
        LOCK_MODE = curr & (1u << 7u);
        SETPOINT_MODE = curr & (1u << 1u);
        DOMAIN_MODE = curr & (1u << 0u);
    }

    /**
     * Set all of AUTHEN_M7CORE's bit fields.
     *
     * (read-write) Slice Authentication Register
     */
    inline void set_AUTHEN_M7CORE(bool LOCK_SETTING, bool NONSECURE, bool USER,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_ASSIGN, uint8_t ASSIGN_LIST,
                                  bool LOCK_MODE, bool SETPOINT_MODE,
                                  bool DOMAIN_MODE) volatile
    {
        uint32_t curr = AUTHEN_M7CORE;

        curr &= ~(0b1u << 31u);
        curr |= (LOCK_SETTING & 0b1u) << 31u;
        curr &= ~(0b1u << 25u);
        curr |= (NONSECURE & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (USER & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (LOCK_LIST & 0b1u) << 23u;
        curr &= ~(0b1111u << 16u);
        curr |= (WHITE_LIST & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (LOCK_ASSIGN & 0b1u) << 15u;
        curr &= ~(0b1111u << 8u);
        curr |= (ASSIGN_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (LOCK_MODE & 0b1u) << 7u;
        curr &= ~(0b1u << 1u);
        curr |= (SETPOINT_MODE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (DOMAIN_MODE & 0b1u) << 0u;

        AUTHEN_M7CORE = curr;
    }

    /**
     * Get CTRL_M7CORE's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline bool get_CTRL_M7CORE_SW_RESET() volatile
    {
        return CTRL_M7CORE & (1u << 0u);
    }

    /**
     * Set CTRL_M7CORE's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void set_CTRL_M7CORE_SW_RESET() volatile
    {
        CTRL_M7CORE |= 1u << 0u;
    }

    /**
     * Clear CTRL_M7CORE's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void clear_CTRL_M7CORE_SW_RESET() volatile
    {
        CTRL_M7CORE &= ~(1u << 0u);
    }

    /**
     * Toggle CTRL_M7CORE's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void toggle_CTRL_M7CORE_SW_RESET() volatile
    {
        CTRL_M7CORE ^= 1u << 0u;
    }

    /**
     * Get SETPOINT_M7CORE's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline bool get_SETPOINT_M7CORE_SETPOINT15() volatile
    {
        return SETPOINT_M7CORE & (1u << 15u);
    }

    /**
     * Set SETPOINT_M7CORE's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void set_SETPOINT_M7CORE_SETPOINT15() volatile
    {
        SETPOINT_M7CORE |= 1u << 15u;
    }

    /**
     * Clear SETPOINT_M7CORE's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void clear_SETPOINT_M7CORE_SETPOINT15() volatile
    {
        SETPOINT_M7CORE &= ~(1u << 15u);
    }

    /**
     * Toggle SETPOINT_M7CORE's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void toggle_SETPOINT_M7CORE_SETPOINT15() volatile
    {
        SETPOINT_M7CORE ^= 1u << 15u;
    }

    /**
     * Get SETPOINT_M7CORE's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline bool get_SETPOINT_M7CORE_SETPOINT14() volatile
    {
        return SETPOINT_M7CORE & (1u << 14u);
    }

    /**
     * Set SETPOINT_M7CORE's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void set_SETPOINT_M7CORE_SETPOINT14() volatile
    {
        SETPOINT_M7CORE |= 1u << 14u;
    }

    /**
     * Clear SETPOINT_M7CORE's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void clear_SETPOINT_M7CORE_SETPOINT14() volatile
    {
        SETPOINT_M7CORE &= ~(1u << 14u);
    }

    /**
     * Toggle SETPOINT_M7CORE's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void toggle_SETPOINT_M7CORE_SETPOINT14() volatile
    {
        SETPOINT_M7CORE ^= 1u << 14u;
    }

    /**
     * Get SETPOINT_M7CORE's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline bool get_SETPOINT_M7CORE_SETPOINT13() volatile
    {
        return SETPOINT_M7CORE & (1u << 13u);
    }

    /**
     * Set SETPOINT_M7CORE's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void set_SETPOINT_M7CORE_SETPOINT13() volatile
    {
        SETPOINT_M7CORE |= 1u << 13u;
    }

    /**
     * Clear SETPOINT_M7CORE's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void clear_SETPOINT_M7CORE_SETPOINT13() volatile
    {
        SETPOINT_M7CORE &= ~(1u << 13u);
    }

    /**
     * Toggle SETPOINT_M7CORE's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void toggle_SETPOINT_M7CORE_SETPOINT13() volatile
    {
        SETPOINT_M7CORE ^= 1u << 13u;
    }

    /**
     * Get SETPOINT_M7CORE's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline bool get_SETPOINT_M7CORE_SETPOINT12() volatile
    {
        return SETPOINT_M7CORE & (1u << 12u);
    }

    /**
     * Set SETPOINT_M7CORE's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void set_SETPOINT_M7CORE_SETPOINT12() volatile
    {
        SETPOINT_M7CORE |= 1u << 12u;
    }

    /**
     * Clear SETPOINT_M7CORE's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void clear_SETPOINT_M7CORE_SETPOINT12() volatile
    {
        SETPOINT_M7CORE &= ~(1u << 12u);
    }

    /**
     * Toggle SETPOINT_M7CORE's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void toggle_SETPOINT_M7CORE_SETPOINT12() volatile
    {
        SETPOINT_M7CORE ^= 1u << 12u;
    }

    /**
     * Get SETPOINT_M7CORE's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline bool get_SETPOINT_M7CORE_SETPOINT11() volatile
    {
        return SETPOINT_M7CORE & (1u << 11u);
    }

    /**
     * Set SETPOINT_M7CORE's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void set_SETPOINT_M7CORE_SETPOINT11() volatile
    {
        SETPOINT_M7CORE |= 1u << 11u;
    }

    /**
     * Clear SETPOINT_M7CORE's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void clear_SETPOINT_M7CORE_SETPOINT11() volatile
    {
        SETPOINT_M7CORE &= ~(1u << 11u);
    }

    /**
     * Toggle SETPOINT_M7CORE's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void toggle_SETPOINT_M7CORE_SETPOINT11() volatile
    {
        SETPOINT_M7CORE ^= 1u << 11u;
    }

    /**
     * Get SETPOINT_M7CORE's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline bool get_SETPOINT_M7CORE_SETPOINT10() volatile
    {
        return SETPOINT_M7CORE & (1u << 10u);
    }

    /**
     * Set SETPOINT_M7CORE's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void set_SETPOINT_M7CORE_SETPOINT10() volatile
    {
        SETPOINT_M7CORE |= 1u << 10u;
    }

    /**
     * Clear SETPOINT_M7CORE's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void clear_SETPOINT_M7CORE_SETPOINT10() volatile
    {
        SETPOINT_M7CORE &= ~(1u << 10u);
    }

    /**
     * Toggle SETPOINT_M7CORE's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void toggle_SETPOINT_M7CORE_SETPOINT10() volatile
    {
        SETPOINT_M7CORE ^= 1u << 10u;
    }

    /**
     * Get SETPOINT_M7CORE's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline bool get_SETPOINT_M7CORE_SETPOINT9() volatile
    {
        return SETPOINT_M7CORE & (1u << 9u);
    }

    /**
     * Set SETPOINT_M7CORE's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void set_SETPOINT_M7CORE_SETPOINT9() volatile
    {
        SETPOINT_M7CORE |= 1u << 9u;
    }

    /**
     * Clear SETPOINT_M7CORE's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void clear_SETPOINT_M7CORE_SETPOINT9() volatile
    {
        SETPOINT_M7CORE &= ~(1u << 9u);
    }

    /**
     * Toggle SETPOINT_M7CORE's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void toggle_SETPOINT_M7CORE_SETPOINT9() volatile
    {
        SETPOINT_M7CORE ^= 1u << 9u;
    }

    /**
     * Get SETPOINT_M7CORE's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline bool get_SETPOINT_M7CORE_SETPOINT8() volatile
    {
        return SETPOINT_M7CORE & (1u << 8u);
    }

    /**
     * Set SETPOINT_M7CORE's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void set_SETPOINT_M7CORE_SETPOINT8() volatile
    {
        SETPOINT_M7CORE |= 1u << 8u;
    }

    /**
     * Clear SETPOINT_M7CORE's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void clear_SETPOINT_M7CORE_SETPOINT8() volatile
    {
        SETPOINT_M7CORE &= ~(1u << 8u);
    }

    /**
     * Toggle SETPOINT_M7CORE's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void toggle_SETPOINT_M7CORE_SETPOINT8() volatile
    {
        SETPOINT_M7CORE ^= 1u << 8u;
    }

    /**
     * Get SETPOINT_M7CORE's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline bool get_SETPOINT_M7CORE_SETPOINT7() volatile
    {
        return SETPOINT_M7CORE & (1u << 7u);
    }

    /**
     * Set SETPOINT_M7CORE's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void set_SETPOINT_M7CORE_SETPOINT7() volatile
    {
        SETPOINT_M7CORE |= 1u << 7u;
    }

    /**
     * Clear SETPOINT_M7CORE's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void clear_SETPOINT_M7CORE_SETPOINT7() volatile
    {
        SETPOINT_M7CORE &= ~(1u << 7u);
    }

    /**
     * Toggle SETPOINT_M7CORE's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void toggle_SETPOINT_M7CORE_SETPOINT7() volatile
    {
        SETPOINT_M7CORE ^= 1u << 7u;
    }

    /**
     * Get SETPOINT_M7CORE's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline bool get_SETPOINT_M7CORE_SETPOINT6() volatile
    {
        return SETPOINT_M7CORE & (1u << 6u);
    }

    /**
     * Set SETPOINT_M7CORE's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void set_SETPOINT_M7CORE_SETPOINT6() volatile
    {
        SETPOINT_M7CORE |= 1u << 6u;
    }

    /**
     * Clear SETPOINT_M7CORE's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void clear_SETPOINT_M7CORE_SETPOINT6() volatile
    {
        SETPOINT_M7CORE &= ~(1u << 6u);
    }

    /**
     * Toggle SETPOINT_M7CORE's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void toggle_SETPOINT_M7CORE_SETPOINT6() volatile
    {
        SETPOINT_M7CORE ^= 1u << 6u;
    }

    /**
     * Get SETPOINT_M7CORE's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline bool get_SETPOINT_M7CORE_SETPOINT5() volatile
    {
        return SETPOINT_M7CORE & (1u << 5u);
    }

    /**
     * Set SETPOINT_M7CORE's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void set_SETPOINT_M7CORE_SETPOINT5() volatile
    {
        SETPOINT_M7CORE |= 1u << 5u;
    }

    /**
     * Clear SETPOINT_M7CORE's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void clear_SETPOINT_M7CORE_SETPOINT5() volatile
    {
        SETPOINT_M7CORE &= ~(1u << 5u);
    }

    /**
     * Toggle SETPOINT_M7CORE's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void toggle_SETPOINT_M7CORE_SETPOINT5() volatile
    {
        SETPOINT_M7CORE ^= 1u << 5u;
    }

    /**
     * Get SETPOINT_M7CORE's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline bool get_SETPOINT_M7CORE_SETPOINT4() volatile
    {
        return SETPOINT_M7CORE & (1u << 4u);
    }

    /**
     * Set SETPOINT_M7CORE's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void set_SETPOINT_M7CORE_SETPOINT4() volatile
    {
        SETPOINT_M7CORE |= 1u << 4u;
    }

    /**
     * Clear SETPOINT_M7CORE's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void clear_SETPOINT_M7CORE_SETPOINT4() volatile
    {
        SETPOINT_M7CORE &= ~(1u << 4u);
    }

    /**
     * Toggle SETPOINT_M7CORE's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void toggle_SETPOINT_M7CORE_SETPOINT4() volatile
    {
        SETPOINT_M7CORE ^= 1u << 4u;
    }

    /**
     * Get SETPOINT_M7CORE's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline bool get_SETPOINT_M7CORE_SETPOINT3() volatile
    {
        return SETPOINT_M7CORE & (1u << 3u);
    }

    /**
     * Set SETPOINT_M7CORE's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void set_SETPOINT_M7CORE_SETPOINT3() volatile
    {
        SETPOINT_M7CORE |= 1u << 3u;
    }

    /**
     * Clear SETPOINT_M7CORE's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void clear_SETPOINT_M7CORE_SETPOINT3() volatile
    {
        SETPOINT_M7CORE &= ~(1u << 3u);
    }

    /**
     * Toggle SETPOINT_M7CORE's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void toggle_SETPOINT_M7CORE_SETPOINT3() volatile
    {
        SETPOINT_M7CORE ^= 1u << 3u;
    }

    /**
     * Get SETPOINT_M7CORE's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline bool get_SETPOINT_M7CORE_SETPOINT2() volatile
    {
        return SETPOINT_M7CORE & (1u << 2u);
    }

    /**
     * Set SETPOINT_M7CORE's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void set_SETPOINT_M7CORE_SETPOINT2() volatile
    {
        SETPOINT_M7CORE |= 1u << 2u;
    }

    /**
     * Clear SETPOINT_M7CORE's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void clear_SETPOINT_M7CORE_SETPOINT2() volatile
    {
        SETPOINT_M7CORE &= ~(1u << 2u);
    }

    /**
     * Toggle SETPOINT_M7CORE's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void toggle_SETPOINT_M7CORE_SETPOINT2() volatile
    {
        SETPOINT_M7CORE ^= 1u << 2u;
    }

    /**
     * Get SETPOINT_M7CORE's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline bool get_SETPOINT_M7CORE_SETPOINT1() volatile
    {
        return SETPOINT_M7CORE & (1u << 1u);
    }

    /**
     * Set SETPOINT_M7CORE's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void set_SETPOINT_M7CORE_SETPOINT1() volatile
    {
        SETPOINT_M7CORE |= 1u << 1u;
    }

    /**
     * Clear SETPOINT_M7CORE's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void clear_SETPOINT_M7CORE_SETPOINT1() volatile
    {
        SETPOINT_M7CORE &= ~(1u << 1u);
    }

    /**
     * Toggle SETPOINT_M7CORE's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void toggle_SETPOINT_M7CORE_SETPOINT1() volatile
    {
        SETPOINT_M7CORE ^= 1u << 1u;
    }

    /**
     * Get SETPOINT_M7CORE's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline bool get_SETPOINT_M7CORE_SETPOINT0() volatile
    {
        return SETPOINT_M7CORE & (1u << 0u);
    }

    /**
     * Set SETPOINT_M7CORE's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void set_SETPOINT_M7CORE_SETPOINT0() volatile
    {
        SETPOINT_M7CORE |= 1u << 0u;
    }

    /**
     * Clear SETPOINT_M7CORE's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void clear_SETPOINT_M7CORE_SETPOINT0() volatile
    {
        SETPOINT_M7CORE &= ~(1u << 0u);
    }

    /**
     * Toggle SETPOINT_M7CORE's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void toggle_SETPOINT_M7CORE_SETPOINT0() volatile
    {
        SETPOINT_M7CORE ^= 1u << 0u;
    }

    /**
     * Get all of SETPOINT_M7CORE's bit fields.
     *
     * (read-write) Slice Setpoint Config Register
     */
    inline void get_SETPOINT_M7CORE(bool &SETPOINT15, bool &SETPOINT14,
                                    bool &SETPOINT13, bool &SETPOINT12,
                                    bool &SETPOINT11, bool &SETPOINT10,
                                    bool &SETPOINT9, bool &SETPOINT8,
                                    bool &SETPOINT7, bool &SETPOINT6,
                                    bool &SETPOINT5, bool &SETPOINT4,
                                    bool &SETPOINT3, bool &SETPOINT2,
                                    bool &SETPOINT1, bool &SETPOINT0) volatile
    {
        uint32_t curr = SETPOINT_M7CORE;

        SETPOINT15 = curr & (1u << 15u);
        SETPOINT14 = curr & (1u << 14u);
        SETPOINT13 = curr & (1u << 13u);
        SETPOINT12 = curr & (1u << 12u);
        SETPOINT11 = curr & (1u << 11u);
        SETPOINT10 = curr & (1u << 10u);
        SETPOINT9 = curr & (1u << 9u);
        SETPOINT8 = curr & (1u << 8u);
        SETPOINT7 = curr & (1u << 7u);
        SETPOINT6 = curr & (1u << 6u);
        SETPOINT5 = curr & (1u << 5u);
        SETPOINT4 = curr & (1u << 4u);
        SETPOINT3 = curr & (1u << 3u);
        SETPOINT2 = curr & (1u << 2u);
        SETPOINT1 = curr & (1u << 1u);
        SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of SETPOINT_M7CORE's bit fields.
     *
     * (read-write) Slice Setpoint Config Register
     */
    inline void set_SETPOINT_M7CORE(bool SETPOINT15, bool SETPOINT14,
                                    bool SETPOINT13, bool SETPOINT12,
                                    bool SETPOINT11, bool SETPOINT10,
                                    bool SETPOINT9, bool SETPOINT8,
                                    bool SETPOINT7, bool SETPOINT6,
                                    bool SETPOINT5, bool SETPOINT4,
                                    bool SETPOINT3, bool SETPOINT2,
                                    bool SETPOINT1, bool SETPOINT0) volatile
    {
        uint32_t curr = SETPOINT_M7CORE;

        curr &= ~(0b1u << 15u);
        curr |= (SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SETPOINT0 & 0b1u) << 0u;

        SETPOINT_M7CORE = curr;
    }

    /**
     * Get DOMAIN_M7CORE's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline bool get_DOMAIN_M7CORE_CPU1_SUSP() volatile
    {
        return DOMAIN_M7CORE & (1u << 7u);
    }

    /**
     * Set DOMAIN_M7CORE's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void set_DOMAIN_M7CORE_CPU1_SUSP() volatile
    {
        DOMAIN_M7CORE |= 1u << 7u;
    }

    /**
     * Clear DOMAIN_M7CORE's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void clear_DOMAIN_M7CORE_CPU1_SUSP() volatile
    {
        DOMAIN_M7CORE &= ~(1u << 7u);
    }

    /**
     * Toggle DOMAIN_M7CORE's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void toggle_DOMAIN_M7CORE_CPU1_SUSP() volatile
    {
        DOMAIN_M7CORE ^= 1u << 7u;
    }

    /**
     * Get DOMAIN_M7CORE's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline bool get_DOMAIN_M7CORE_CPU1_STOP() volatile
    {
        return DOMAIN_M7CORE & (1u << 6u);
    }

    /**
     * Set DOMAIN_M7CORE's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void set_DOMAIN_M7CORE_CPU1_STOP() volatile
    {
        DOMAIN_M7CORE |= 1u << 6u;
    }

    /**
     * Clear DOMAIN_M7CORE's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void clear_DOMAIN_M7CORE_CPU1_STOP() volatile
    {
        DOMAIN_M7CORE &= ~(1u << 6u);
    }

    /**
     * Toggle DOMAIN_M7CORE's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void toggle_DOMAIN_M7CORE_CPU1_STOP() volatile
    {
        DOMAIN_M7CORE ^= 1u << 6u;
    }

    /**
     * Get DOMAIN_M7CORE's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline bool get_DOMAIN_M7CORE_CPU1_WAIT() volatile
    {
        return DOMAIN_M7CORE & (1u << 5u);
    }

    /**
     * Set DOMAIN_M7CORE's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void set_DOMAIN_M7CORE_CPU1_WAIT() volatile
    {
        DOMAIN_M7CORE |= 1u << 5u;
    }

    /**
     * Clear DOMAIN_M7CORE's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void clear_DOMAIN_M7CORE_CPU1_WAIT() volatile
    {
        DOMAIN_M7CORE &= ~(1u << 5u);
    }

    /**
     * Toggle DOMAIN_M7CORE's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void toggle_DOMAIN_M7CORE_CPU1_WAIT() volatile
    {
        DOMAIN_M7CORE ^= 1u << 5u;
    }

    /**
     * Get DOMAIN_M7CORE's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline bool get_DOMAIN_M7CORE_CPU1_RUN() volatile
    {
        return DOMAIN_M7CORE & (1u << 4u);
    }

    /**
     * Set DOMAIN_M7CORE's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void set_DOMAIN_M7CORE_CPU1_RUN() volatile
    {
        DOMAIN_M7CORE |= 1u << 4u;
    }

    /**
     * Clear DOMAIN_M7CORE's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void clear_DOMAIN_M7CORE_CPU1_RUN() volatile
    {
        DOMAIN_M7CORE &= ~(1u << 4u);
    }

    /**
     * Toggle DOMAIN_M7CORE's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void toggle_DOMAIN_M7CORE_CPU1_RUN() volatile
    {
        DOMAIN_M7CORE ^= 1u << 4u;
    }

    /**
     * Get DOMAIN_M7CORE's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline bool get_DOMAIN_M7CORE_CPU0_SUSP() volatile
    {
        return DOMAIN_M7CORE & (1u << 3u);
    }

    /**
     * Set DOMAIN_M7CORE's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void set_DOMAIN_M7CORE_CPU0_SUSP() volatile
    {
        DOMAIN_M7CORE |= 1u << 3u;
    }

    /**
     * Clear DOMAIN_M7CORE's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void clear_DOMAIN_M7CORE_CPU0_SUSP() volatile
    {
        DOMAIN_M7CORE &= ~(1u << 3u);
    }

    /**
     * Toggle DOMAIN_M7CORE's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void toggle_DOMAIN_M7CORE_CPU0_SUSP() volatile
    {
        DOMAIN_M7CORE ^= 1u << 3u;
    }

    /**
     * Get DOMAIN_M7CORE's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline bool get_DOMAIN_M7CORE_CPU0_STOP() volatile
    {
        return DOMAIN_M7CORE & (1u << 2u);
    }

    /**
     * Set DOMAIN_M7CORE's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void set_DOMAIN_M7CORE_CPU0_STOP() volatile
    {
        DOMAIN_M7CORE |= 1u << 2u;
    }

    /**
     * Clear DOMAIN_M7CORE's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void clear_DOMAIN_M7CORE_CPU0_STOP() volatile
    {
        DOMAIN_M7CORE &= ~(1u << 2u);
    }

    /**
     * Toggle DOMAIN_M7CORE's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void toggle_DOMAIN_M7CORE_CPU0_STOP() volatile
    {
        DOMAIN_M7CORE ^= 1u << 2u;
    }

    /**
     * Get DOMAIN_M7CORE's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline bool get_DOMAIN_M7CORE_CPU0_WAIT() volatile
    {
        return DOMAIN_M7CORE & (1u << 1u);
    }

    /**
     * Set DOMAIN_M7CORE's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void set_DOMAIN_M7CORE_CPU0_WAIT() volatile
    {
        DOMAIN_M7CORE |= 1u << 1u;
    }

    /**
     * Clear DOMAIN_M7CORE's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void clear_DOMAIN_M7CORE_CPU0_WAIT() volatile
    {
        DOMAIN_M7CORE &= ~(1u << 1u);
    }

    /**
     * Toggle DOMAIN_M7CORE's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void toggle_DOMAIN_M7CORE_CPU0_WAIT() volatile
    {
        DOMAIN_M7CORE ^= 1u << 1u;
    }

    /**
     * Get DOMAIN_M7CORE's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline bool get_DOMAIN_M7CORE_CPU0_RUN() volatile
    {
        return DOMAIN_M7CORE & (1u << 0u);
    }

    /**
     * Set DOMAIN_M7CORE's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void set_DOMAIN_M7CORE_CPU0_RUN() volatile
    {
        DOMAIN_M7CORE |= 1u << 0u;
    }

    /**
     * Clear DOMAIN_M7CORE's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void clear_DOMAIN_M7CORE_CPU0_RUN() volatile
    {
        DOMAIN_M7CORE &= ~(1u << 0u);
    }

    /**
     * Toggle DOMAIN_M7CORE's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void toggle_DOMAIN_M7CORE_CPU0_RUN() volatile
    {
        DOMAIN_M7CORE ^= 1u << 0u;
    }

    /**
     * Get all of DOMAIN_M7CORE's bit fields.
     *
     * (read-write) Slice Domain Config Register
     */
    inline void get_DOMAIN_M7CORE(bool &CPU1_SUSP, bool &CPU1_STOP,
                                  bool &CPU1_WAIT, bool &CPU1_RUN,
                                  bool &CPU0_SUSP, bool &CPU0_STOP,
                                  bool &CPU0_WAIT, bool &CPU0_RUN) volatile
    {
        uint32_t curr = DOMAIN_M7CORE;

        CPU1_SUSP = curr & (1u << 7u);
        CPU1_STOP = curr & (1u << 6u);
        CPU1_WAIT = curr & (1u << 5u);
        CPU1_RUN = curr & (1u << 4u);
        CPU0_SUSP = curr & (1u << 3u);
        CPU0_STOP = curr & (1u << 2u);
        CPU0_WAIT = curr & (1u << 1u);
        CPU0_RUN = curr & (1u << 0u);
    }

    /**
     * Set all of DOMAIN_M7CORE's bit fields.
     *
     * (read-write) Slice Domain Config Register
     */
    inline void set_DOMAIN_M7CORE(bool CPU1_SUSP, bool CPU1_STOP,
                                  bool CPU1_WAIT, bool CPU1_RUN,
                                  bool CPU0_SUSP, bool CPU0_STOP,
                                  bool CPU0_WAIT, bool CPU0_RUN) volatile
    {
        uint32_t curr = DOMAIN_M7CORE;

        curr &= ~(0b1u << 7u);
        curr |= (CPU1_SUSP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CPU1_STOP & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (CPU1_WAIT & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (CPU1_RUN & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (CPU0_SUSP & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CPU0_STOP & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CPU0_WAIT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CPU0_RUN & 0b1u) << 0u;

        DOMAIN_M7CORE = curr;
    }

    /**
     * Get STAT_M7CORE's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline bool get_STAT_M7CORE_RST_BY_SW() volatile
    {
        return STAT_M7CORE & (1u << 3u);
    }

    /**
     * Set STAT_M7CORE's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void set_STAT_M7CORE_RST_BY_SW() volatile
    {
        STAT_M7CORE |= 1u << 3u;
    }

    /**
     * Clear STAT_M7CORE's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void clear_STAT_M7CORE_RST_BY_SW() volatile
    {
        STAT_M7CORE &= ~(1u << 3u);
    }

    /**
     * Toggle STAT_M7CORE's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void toggle_STAT_M7CORE_RST_BY_SW() volatile
    {
        STAT_M7CORE ^= 1u << 3u;
    }

    /**
     * Get STAT_M7CORE's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline bool get_STAT_M7CORE_RST_BY_HW() volatile
    {
        return STAT_M7CORE & (1u << 2u);
    }

    /**
     * Set STAT_M7CORE's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void set_STAT_M7CORE_RST_BY_HW() volatile
    {
        STAT_M7CORE |= 1u << 2u;
    }

    /**
     * Clear STAT_M7CORE's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void clear_STAT_M7CORE_RST_BY_HW() volatile
    {
        STAT_M7CORE &= ~(1u << 2u);
    }

    /**
     * Toggle STAT_M7CORE's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void toggle_STAT_M7CORE_RST_BY_HW() volatile
    {
        STAT_M7CORE ^= 1u << 2u;
    }

    /**
     * Get STAT_M7CORE's UNDER_RST bit.
     *
     * This is a Read Only bit. It indicate if the reset is in process.
     */
    inline bool get_STAT_M7CORE_UNDER_RST() volatile
    {
        return STAT_M7CORE & (1u << 0u);
    }

    /**
     * Get all of STAT_M7CORE's bit fields.
     *
     * (read-write) Slice Status Register
     */
    inline void get_STAT_M7CORE(bool &RST_BY_SW, bool &RST_BY_HW,
                                bool &UNDER_RST) volatile
    {
        uint32_t curr = STAT_M7CORE;

        RST_BY_SW = curr & (1u << 3u);
        RST_BY_HW = curr & (1u << 2u);
        UNDER_RST = curr & (1u << 0u);
    }

    /**
     * Set all of STAT_M7CORE's bit fields.
     *
     * (read-write) Slice Status Register
     */
    inline void set_STAT_M7CORE(bool RST_BY_SW, bool RST_BY_HW) volatile
    {
        uint32_t curr = STAT_M7CORE;

        curr &= ~(0b1u << 3u);
        curr |= (RST_BY_SW & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (RST_BY_HW & 0b1u) << 2u;

        STAT_M7CORE = curr;
    }

    /**
     * Get AUTHEN_M4DEBUG's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline bool get_AUTHEN_M4DEBUG_LOCK_SETTING() volatile
    {
        return AUTHEN_M4DEBUG & (1u << 31u);
    }

    /**
     * Set AUTHEN_M4DEBUG's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void set_AUTHEN_M4DEBUG_LOCK_SETTING() volatile
    {
        AUTHEN_M4DEBUG |= 1u << 31u;
    }

    /**
     * Clear AUTHEN_M4DEBUG's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void clear_AUTHEN_M4DEBUG_LOCK_SETTING() volatile
    {
        AUTHEN_M4DEBUG &= ~(1u << 31u);
    }

    /**
     * Toggle AUTHEN_M4DEBUG's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void toggle_AUTHEN_M4DEBUG_LOCK_SETTING() volatile
    {
        AUTHEN_M4DEBUG ^= 1u << 31u;
    }

    /**
     * Get AUTHEN_M4DEBUG's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline bool get_AUTHEN_M4DEBUG_NONSECURE() volatile
    {
        return AUTHEN_M4DEBUG & (1u << 25u);
    }

    /**
     * Set AUTHEN_M4DEBUG's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void set_AUTHEN_M4DEBUG_NONSECURE() volatile
    {
        AUTHEN_M4DEBUG |= 1u << 25u;
    }

    /**
     * Clear AUTHEN_M4DEBUG's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void clear_AUTHEN_M4DEBUG_NONSECURE() volatile
    {
        AUTHEN_M4DEBUG &= ~(1u << 25u);
    }

    /**
     * Toggle AUTHEN_M4DEBUG's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void toggle_AUTHEN_M4DEBUG_NONSECURE() volatile
    {
        AUTHEN_M4DEBUG ^= 1u << 25u;
    }

    /**
     * Get AUTHEN_M4DEBUG's USER bit.
     *
     * Allow user mode access
     */
    inline bool get_AUTHEN_M4DEBUG_USER() volatile
    {
        return AUTHEN_M4DEBUG & (1u << 24u);
    }

    /**
     * Set AUTHEN_M4DEBUG's USER bit.
     *
     * Allow user mode access
     */
    inline void set_AUTHEN_M4DEBUG_USER() volatile
    {
        AUTHEN_M4DEBUG |= 1u << 24u;
    }

    /**
     * Clear AUTHEN_M4DEBUG's USER bit.
     *
     * Allow user mode access
     */
    inline void clear_AUTHEN_M4DEBUG_USER() volatile
    {
        AUTHEN_M4DEBUG &= ~(1u << 24u);
    }

    /**
     * Toggle AUTHEN_M4DEBUG's USER bit.
     *
     * Allow user mode access
     */
    inline void toggle_AUTHEN_M4DEBUG_USER() volatile
    {
        AUTHEN_M4DEBUG ^= 1u << 24u;
    }

    /**
     * Get AUTHEN_M4DEBUG's LOCK_LIST bit.
     *
     * White list lock
     */
    inline bool get_AUTHEN_M4DEBUG_LOCK_LIST() volatile
    {
        return AUTHEN_M4DEBUG & (1u << 23u);
    }

    /**
     * Set AUTHEN_M4DEBUG's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void set_AUTHEN_M4DEBUG_LOCK_LIST() volatile
    {
        AUTHEN_M4DEBUG |= 1u << 23u;
    }

    /**
     * Clear AUTHEN_M4DEBUG's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void clear_AUTHEN_M4DEBUG_LOCK_LIST() volatile
    {
        AUTHEN_M4DEBUG &= ~(1u << 23u);
    }

    /**
     * Toggle AUTHEN_M4DEBUG's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void toggle_AUTHEN_M4DEBUG_LOCK_LIST() volatile
    {
        AUTHEN_M4DEBUG ^= 1u << 23u;
    }

    /**
     * Get AUTHEN_M4DEBUG's WHITE_LIST field.
     *
     * Domain ID white list
     */
    inline uint8_t get_AUTHEN_M4DEBUG_WHITE_LIST() volatile
    {
        return (AUTHEN_M4DEBUG >> 16u) & 0b1111u;
    }

    /**
     * Set AUTHEN_M4DEBUG's WHITE_LIST field.
     *
     * Domain ID white list
     */
    inline void set_AUTHEN_M4DEBUG_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = AUTHEN_M4DEBUG;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        AUTHEN_M4DEBUG = curr;
    }

    /**
     * Get AUTHEN_M4DEBUG's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline bool get_AUTHEN_M4DEBUG_LOCK_ASSIGN() volatile
    {
        return AUTHEN_M4DEBUG & (1u << 15u);
    }

    /**
     * Set AUTHEN_M4DEBUG's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void set_AUTHEN_M4DEBUG_LOCK_ASSIGN() volatile
    {
        AUTHEN_M4DEBUG |= 1u << 15u;
    }

    /**
     * Clear AUTHEN_M4DEBUG's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void clear_AUTHEN_M4DEBUG_LOCK_ASSIGN() volatile
    {
        AUTHEN_M4DEBUG &= ~(1u << 15u);
    }

    /**
     * Toggle AUTHEN_M4DEBUG's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void toggle_AUTHEN_M4DEBUG_LOCK_ASSIGN() volatile
    {
        AUTHEN_M4DEBUG ^= 1u << 15u;
    }

    /**
     * Get AUTHEN_M4DEBUG's ASSIGN_LIST field.
     *
     * when this bitfield set to 1, reset of slice would be subject to
     * corresponding core status transition
     */
    inline uint8_t get_AUTHEN_M4DEBUG_ASSIGN_LIST() volatile
    {
        return (AUTHEN_M4DEBUG >> 8u) & 0b1111u;
    }

    /**
     * Set AUTHEN_M4DEBUG's ASSIGN_LIST field.
     *
     * when this bitfield set to 1, reset of slice would be subject to
     * corresponding core status transition
     */
    inline void set_AUTHEN_M4DEBUG_ASSIGN_LIST(uint8_t value) volatile
    {
        uint32_t curr = AUTHEN_M4DEBUG;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        AUTHEN_M4DEBUG = curr;
    }

    /**
     * Get AUTHEN_M4DEBUG's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline bool get_AUTHEN_M4DEBUG_LOCK_MODE() volatile
    {
        return AUTHEN_M4DEBUG & (1u << 7u);
    }

    /**
     * Set AUTHEN_M4DEBUG's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void set_AUTHEN_M4DEBUG_LOCK_MODE() volatile
    {
        AUTHEN_M4DEBUG |= 1u << 7u;
    }

    /**
     * Clear AUTHEN_M4DEBUG's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void clear_AUTHEN_M4DEBUG_LOCK_MODE() volatile
    {
        AUTHEN_M4DEBUG &= ~(1u << 7u);
    }

    /**
     * Toggle AUTHEN_M4DEBUG's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void toggle_AUTHEN_M4DEBUG_LOCK_MODE() volatile
    {
        AUTHEN_M4DEBUG ^= 1u << 7u;
    }

    /**
     * Get AUTHEN_M4DEBUG's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline bool get_AUTHEN_M4DEBUG_SETPOINT_MODE() volatile
    {
        return AUTHEN_M4DEBUG & (1u << 1u);
    }

    /**
     * Set AUTHEN_M4DEBUG's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void set_AUTHEN_M4DEBUG_SETPOINT_MODE() volatile
    {
        AUTHEN_M4DEBUG |= 1u << 1u;
    }

    /**
     * Clear AUTHEN_M4DEBUG's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void clear_AUTHEN_M4DEBUG_SETPOINT_MODE() volatile
    {
        AUTHEN_M4DEBUG &= ~(1u << 1u);
    }

    /**
     * Toggle AUTHEN_M4DEBUG's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void toggle_AUTHEN_M4DEBUG_SETPOINT_MODE() volatile
    {
        AUTHEN_M4DEBUG ^= 1u << 1u;
    }

    /**
     * Get AUTHEN_M4DEBUG's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline bool get_AUTHEN_M4DEBUG_DOMAIN_MODE() volatile
    {
        return AUTHEN_M4DEBUG & (1u << 0u);
    }

    /**
     * Set AUTHEN_M4DEBUG's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void set_AUTHEN_M4DEBUG_DOMAIN_MODE() volatile
    {
        AUTHEN_M4DEBUG |= 1u << 0u;
    }

    /**
     * Clear AUTHEN_M4DEBUG's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void clear_AUTHEN_M4DEBUG_DOMAIN_MODE() volatile
    {
        AUTHEN_M4DEBUG &= ~(1u << 0u);
    }

    /**
     * Toggle AUTHEN_M4DEBUG's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void toggle_AUTHEN_M4DEBUG_DOMAIN_MODE() volatile
    {
        AUTHEN_M4DEBUG ^= 1u << 0u;
    }

    /**
     * Get all of AUTHEN_M4DEBUG's bit fields.
     *
     * (read-write) Slice Authentication Register
     */
    inline void get_AUTHEN_M4DEBUG(bool &LOCK_SETTING, bool &NONSECURE,
                                   bool &USER, bool &LOCK_LIST,
                                   uint8_t &WHITE_LIST, bool &LOCK_ASSIGN,
                                   uint8_t &ASSIGN_LIST, bool &LOCK_MODE,
                                   bool &SETPOINT_MODE,
                                   bool &DOMAIN_MODE) volatile
    {
        uint32_t curr = AUTHEN_M4DEBUG;

        LOCK_SETTING = curr & (1u << 31u);
        NONSECURE = curr & (1u << 25u);
        USER = curr & (1u << 24u);
        LOCK_LIST = curr & (1u << 23u);
        WHITE_LIST = (curr >> 16u) & 0b1111u;
        LOCK_ASSIGN = curr & (1u << 15u);
        ASSIGN_LIST = (curr >> 8u) & 0b1111u;
        LOCK_MODE = curr & (1u << 7u);
        SETPOINT_MODE = curr & (1u << 1u);
        DOMAIN_MODE = curr & (1u << 0u);
    }

    /**
     * Set all of AUTHEN_M4DEBUG's bit fields.
     *
     * (read-write) Slice Authentication Register
     */
    inline void set_AUTHEN_M4DEBUG(bool LOCK_SETTING, bool NONSECURE,
                                   bool USER, bool LOCK_LIST,
                                   uint8_t WHITE_LIST, bool LOCK_ASSIGN,
                                   uint8_t ASSIGN_LIST, bool LOCK_MODE,
                                   bool SETPOINT_MODE,
                                   bool DOMAIN_MODE) volatile
    {
        uint32_t curr = AUTHEN_M4DEBUG;

        curr &= ~(0b1u << 31u);
        curr |= (LOCK_SETTING & 0b1u) << 31u;
        curr &= ~(0b1u << 25u);
        curr |= (NONSECURE & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (USER & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (LOCK_LIST & 0b1u) << 23u;
        curr &= ~(0b1111u << 16u);
        curr |= (WHITE_LIST & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (LOCK_ASSIGN & 0b1u) << 15u;
        curr &= ~(0b1111u << 8u);
        curr |= (ASSIGN_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (LOCK_MODE & 0b1u) << 7u;
        curr &= ~(0b1u << 1u);
        curr |= (SETPOINT_MODE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (DOMAIN_MODE & 0b1u) << 0u;

        AUTHEN_M4DEBUG = curr;
    }

    /**
     * Get CTRL_M4DEBUG's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline bool get_CTRL_M4DEBUG_SW_RESET() volatile
    {
        return CTRL_M4DEBUG & (1u << 0u);
    }

    /**
     * Set CTRL_M4DEBUG's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void set_CTRL_M4DEBUG_SW_RESET() volatile
    {
        CTRL_M4DEBUG |= 1u << 0u;
    }

    /**
     * Clear CTRL_M4DEBUG's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void clear_CTRL_M4DEBUG_SW_RESET() volatile
    {
        CTRL_M4DEBUG &= ~(1u << 0u);
    }

    /**
     * Toggle CTRL_M4DEBUG's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void toggle_CTRL_M4DEBUG_SW_RESET() volatile
    {
        CTRL_M4DEBUG ^= 1u << 0u;
    }

    /**
     * Get SETPOINT_M4DEBUG's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline bool get_SETPOINT_M4DEBUG_SETPOINT15() volatile
    {
        return SETPOINT_M4DEBUG & (1u << 15u);
    }

    /**
     * Set SETPOINT_M4DEBUG's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void set_SETPOINT_M4DEBUG_SETPOINT15() volatile
    {
        SETPOINT_M4DEBUG |= 1u << 15u;
    }

    /**
     * Clear SETPOINT_M4DEBUG's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void clear_SETPOINT_M4DEBUG_SETPOINT15() volatile
    {
        SETPOINT_M4DEBUG &= ~(1u << 15u);
    }

    /**
     * Toggle SETPOINT_M4DEBUG's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void toggle_SETPOINT_M4DEBUG_SETPOINT15() volatile
    {
        SETPOINT_M4DEBUG ^= 1u << 15u;
    }

    /**
     * Get SETPOINT_M4DEBUG's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline bool get_SETPOINT_M4DEBUG_SETPOINT14() volatile
    {
        return SETPOINT_M4DEBUG & (1u << 14u);
    }

    /**
     * Set SETPOINT_M4DEBUG's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void set_SETPOINT_M4DEBUG_SETPOINT14() volatile
    {
        SETPOINT_M4DEBUG |= 1u << 14u;
    }

    /**
     * Clear SETPOINT_M4DEBUG's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void clear_SETPOINT_M4DEBUG_SETPOINT14() volatile
    {
        SETPOINT_M4DEBUG &= ~(1u << 14u);
    }

    /**
     * Toggle SETPOINT_M4DEBUG's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void toggle_SETPOINT_M4DEBUG_SETPOINT14() volatile
    {
        SETPOINT_M4DEBUG ^= 1u << 14u;
    }

    /**
     * Get SETPOINT_M4DEBUG's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline bool get_SETPOINT_M4DEBUG_SETPOINT13() volatile
    {
        return SETPOINT_M4DEBUG & (1u << 13u);
    }

    /**
     * Set SETPOINT_M4DEBUG's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void set_SETPOINT_M4DEBUG_SETPOINT13() volatile
    {
        SETPOINT_M4DEBUG |= 1u << 13u;
    }

    /**
     * Clear SETPOINT_M4DEBUG's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void clear_SETPOINT_M4DEBUG_SETPOINT13() volatile
    {
        SETPOINT_M4DEBUG &= ~(1u << 13u);
    }

    /**
     * Toggle SETPOINT_M4DEBUG's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void toggle_SETPOINT_M4DEBUG_SETPOINT13() volatile
    {
        SETPOINT_M4DEBUG ^= 1u << 13u;
    }

    /**
     * Get SETPOINT_M4DEBUG's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline bool get_SETPOINT_M4DEBUG_SETPOINT12() volatile
    {
        return SETPOINT_M4DEBUG & (1u << 12u);
    }

    /**
     * Set SETPOINT_M4DEBUG's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void set_SETPOINT_M4DEBUG_SETPOINT12() volatile
    {
        SETPOINT_M4DEBUG |= 1u << 12u;
    }

    /**
     * Clear SETPOINT_M4DEBUG's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void clear_SETPOINT_M4DEBUG_SETPOINT12() volatile
    {
        SETPOINT_M4DEBUG &= ~(1u << 12u);
    }

    /**
     * Toggle SETPOINT_M4DEBUG's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void toggle_SETPOINT_M4DEBUG_SETPOINT12() volatile
    {
        SETPOINT_M4DEBUG ^= 1u << 12u;
    }

    /**
     * Get SETPOINT_M4DEBUG's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline bool get_SETPOINT_M4DEBUG_SETPOINT11() volatile
    {
        return SETPOINT_M4DEBUG & (1u << 11u);
    }

    /**
     * Set SETPOINT_M4DEBUG's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void set_SETPOINT_M4DEBUG_SETPOINT11() volatile
    {
        SETPOINT_M4DEBUG |= 1u << 11u;
    }

    /**
     * Clear SETPOINT_M4DEBUG's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void clear_SETPOINT_M4DEBUG_SETPOINT11() volatile
    {
        SETPOINT_M4DEBUG &= ~(1u << 11u);
    }

    /**
     * Toggle SETPOINT_M4DEBUG's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void toggle_SETPOINT_M4DEBUG_SETPOINT11() volatile
    {
        SETPOINT_M4DEBUG ^= 1u << 11u;
    }

    /**
     * Get SETPOINT_M4DEBUG's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline bool get_SETPOINT_M4DEBUG_SETPOINT10() volatile
    {
        return SETPOINT_M4DEBUG & (1u << 10u);
    }

    /**
     * Set SETPOINT_M4DEBUG's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void set_SETPOINT_M4DEBUG_SETPOINT10() volatile
    {
        SETPOINT_M4DEBUG |= 1u << 10u;
    }

    /**
     * Clear SETPOINT_M4DEBUG's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void clear_SETPOINT_M4DEBUG_SETPOINT10() volatile
    {
        SETPOINT_M4DEBUG &= ~(1u << 10u);
    }

    /**
     * Toggle SETPOINT_M4DEBUG's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void toggle_SETPOINT_M4DEBUG_SETPOINT10() volatile
    {
        SETPOINT_M4DEBUG ^= 1u << 10u;
    }

    /**
     * Get SETPOINT_M4DEBUG's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline bool get_SETPOINT_M4DEBUG_SETPOINT9() volatile
    {
        return SETPOINT_M4DEBUG & (1u << 9u);
    }

    /**
     * Set SETPOINT_M4DEBUG's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void set_SETPOINT_M4DEBUG_SETPOINT9() volatile
    {
        SETPOINT_M4DEBUG |= 1u << 9u;
    }

    /**
     * Clear SETPOINT_M4DEBUG's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void clear_SETPOINT_M4DEBUG_SETPOINT9() volatile
    {
        SETPOINT_M4DEBUG &= ~(1u << 9u);
    }

    /**
     * Toggle SETPOINT_M4DEBUG's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void toggle_SETPOINT_M4DEBUG_SETPOINT9() volatile
    {
        SETPOINT_M4DEBUG ^= 1u << 9u;
    }

    /**
     * Get SETPOINT_M4DEBUG's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline bool get_SETPOINT_M4DEBUG_SETPOINT8() volatile
    {
        return SETPOINT_M4DEBUG & (1u << 8u);
    }

    /**
     * Set SETPOINT_M4DEBUG's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void set_SETPOINT_M4DEBUG_SETPOINT8() volatile
    {
        SETPOINT_M4DEBUG |= 1u << 8u;
    }

    /**
     * Clear SETPOINT_M4DEBUG's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void clear_SETPOINT_M4DEBUG_SETPOINT8() volatile
    {
        SETPOINT_M4DEBUG &= ~(1u << 8u);
    }

    /**
     * Toggle SETPOINT_M4DEBUG's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void toggle_SETPOINT_M4DEBUG_SETPOINT8() volatile
    {
        SETPOINT_M4DEBUG ^= 1u << 8u;
    }

    /**
     * Get SETPOINT_M4DEBUG's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline bool get_SETPOINT_M4DEBUG_SETPOINT7() volatile
    {
        return SETPOINT_M4DEBUG & (1u << 7u);
    }

    /**
     * Set SETPOINT_M4DEBUG's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void set_SETPOINT_M4DEBUG_SETPOINT7() volatile
    {
        SETPOINT_M4DEBUG |= 1u << 7u;
    }

    /**
     * Clear SETPOINT_M4DEBUG's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void clear_SETPOINT_M4DEBUG_SETPOINT7() volatile
    {
        SETPOINT_M4DEBUG &= ~(1u << 7u);
    }

    /**
     * Toggle SETPOINT_M4DEBUG's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void toggle_SETPOINT_M4DEBUG_SETPOINT7() volatile
    {
        SETPOINT_M4DEBUG ^= 1u << 7u;
    }

    /**
     * Get SETPOINT_M4DEBUG's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline bool get_SETPOINT_M4DEBUG_SETPOINT6() volatile
    {
        return SETPOINT_M4DEBUG & (1u << 6u);
    }

    /**
     * Set SETPOINT_M4DEBUG's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void set_SETPOINT_M4DEBUG_SETPOINT6() volatile
    {
        SETPOINT_M4DEBUG |= 1u << 6u;
    }

    /**
     * Clear SETPOINT_M4DEBUG's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void clear_SETPOINT_M4DEBUG_SETPOINT6() volatile
    {
        SETPOINT_M4DEBUG &= ~(1u << 6u);
    }

    /**
     * Toggle SETPOINT_M4DEBUG's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void toggle_SETPOINT_M4DEBUG_SETPOINT6() volatile
    {
        SETPOINT_M4DEBUG ^= 1u << 6u;
    }

    /**
     * Get SETPOINT_M4DEBUG's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline bool get_SETPOINT_M4DEBUG_SETPOINT5() volatile
    {
        return SETPOINT_M4DEBUG & (1u << 5u);
    }

    /**
     * Set SETPOINT_M4DEBUG's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void set_SETPOINT_M4DEBUG_SETPOINT5() volatile
    {
        SETPOINT_M4DEBUG |= 1u << 5u;
    }

    /**
     * Clear SETPOINT_M4DEBUG's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void clear_SETPOINT_M4DEBUG_SETPOINT5() volatile
    {
        SETPOINT_M4DEBUG &= ~(1u << 5u);
    }

    /**
     * Toggle SETPOINT_M4DEBUG's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void toggle_SETPOINT_M4DEBUG_SETPOINT5() volatile
    {
        SETPOINT_M4DEBUG ^= 1u << 5u;
    }

    /**
     * Get SETPOINT_M4DEBUG's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline bool get_SETPOINT_M4DEBUG_SETPOINT4() volatile
    {
        return SETPOINT_M4DEBUG & (1u << 4u);
    }

    /**
     * Set SETPOINT_M4DEBUG's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void set_SETPOINT_M4DEBUG_SETPOINT4() volatile
    {
        SETPOINT_M4DEBUG |= 1u << 4u;
    }

    /**
     * Clear SETPOINT_M4DEBUG's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void clear_SETPOINT_M4DEBUG_SETPOINT4() volatile
    {
        SETPOINT_M4DEBUG &= ~(1u << 4u);
    }

    /**
     * Toggle SETPOINT_M4DEBUG's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void toggle_SETPOINT_M4DEBUG_SETPOINT4() volatile
    {
        SETPOINT_M4DEBUG ^= 1u << 4u;
    }

    /**
     * Get SETPOINT_M4DEBUG's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline bool get_SETPOINT_M4DEBUG_SETPOINT3() volatile
    {
        return SETPOINT_M4DEBUG & (1u << 3u);
    }

    /**
     * Set SETPOINT_M4DEBUG's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void set_SETPOINT_M4DEBUG_SETPOINT3() volatile
    {
        SETPOINT_M4DEBUG |= 1u << 3u;
    }

    /**
     * Clear SETPOINT_M4DEBUG's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void clear_SETPOINT_M4DEBUG_SETPOINT3() volatile
    {
        SETPOINT_M4DEBUG &= ~(1u << 3u);
    }

    /**
     * Toggle SETPOINT_M4DEBUG's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void toggle_SETPOINT_M4DEBUG_SETPOINT3() volatile
    {
        SETPOINT_M4DEBUG ^= 1u << 3u;
    }

    /**
     * Get SETPOINT_M4DEBUG's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline bool get_SETPOINT_M4DEBUG_SETPOINT2() volatile
    {
        return SETPOINT_M4DEBUG & (1u << 2u);
    }

    /**
     * Set SETPOINT_M4DEBUG's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void set_SETPOINT_M4DEBUG_SETPOINT2() volatile
    {
        SETPOINT_M4DEBUG |= 1u << 2u;
    }

    /**
     * Clear SETPOINT_M4DEBUG's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void clear_SETPOINT_M4DEBUG_SETPOINT2() volatile
    {
        SETPOINT_M4DEBUG &= ~(1u << 2u);
    }

    /**
     * Toggle SETPOINT_M4DEBUG's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void toggle_SETPOINT_M4DEBUG_SETPOINT2() volatile
    {
        SETPOINT_M4DEBUG ^= 1u << 2u;
    }

    /**
     * Get SETPOINT_M4DEBUG's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline bool get_SETPOINT_M4DEBUG_SETPOINT1() volatile
    {
        return SETPOINT_M4DEBUG & (1u << 1u);
    }

    /**
     * Set SETPOINT_M4DEBUG's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void set_SETPOINT_M4DEBUG_SETPOINT1() volatile
    {
        SETPOINT_M4DEBUG |= 1u << 1u;
    }

    /**
     * Clear SETPOINT_M4DEBUG's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void clear_SETPOINT_M4DEBUG_SETPOINT1() volatile
    {
        SETPOINT_M4DEBUG &= ~(1u << 1u);
    }

    /**
     * Toggle SETPOINT_M4DEBUG's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void toggle_SETPOINT_M4DEBUG_SETPOINT1() volatile
    {
        SETPOINT_M4DEBUG ^= 1u << 1u;
    }

    /**
     * Get SETPOINT_M4DEBUG's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline bool get_SETPOINT_M4DEBUG_SETPOINT0() volatile
    {
        return SETPOINT_M4DEBUG & (1u << 0u);
    }

    /**
     * Set SETPOINT_M4DEBUG's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void set_SETPOINT_M4DEBUG_SETPOINT0() volatile
    {
        SETPOINT_M4DEBUG |= 1u << 0u;
    }

    /**
     * Clear SETPOINT_M4DEBUG's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void clear_SETPOINT_M4DEBUG_SETPOINT0() volatile
    {
        SETPOINT_M4DEBUG &= ~(1u << 0u);
    }

    /**
     * Toggle SETPOINT_M4DEBUG's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void toggle_SETPOINT_M4DEBUG_SETPOINT0() volatile
    {
        SETPOINT_M4DEBUG ^= 1u << 0u;
    }

    /**
     * Get all of SETPOINT_M4DEBUG's bit fields.
     *
     * (read-write) Slice Setpoint Config Register
     */
    inline void get_SETPOINT_M4DEBUG(bool &SETPOINT15, bool &SETPOINT14,
                                     bool &SETPOINT13, bool &SETPOINT12,
                                     bool &SETPOINT11, bool &SETPOINT10,
                                     bool &SETPOINT9, bool &SETPOINT8,
                                     bool &SETPOINT7, bool &SETPOINT6,
                                     bool &SETPOINT5, bool &SETPOINT4,
                                     bool &SETPOINT3, bool &SETPOINT2,
                                     bool &SETPOINT1, bool &SETPOINT0) volatile
    {
        uint32_t curr = SETPOINT_M4DEBUG;

        SETPOINT15 = curr & (1u << 15u);
        SETPOINT14 = curr & (1u << 14u);
        SETPOINT13 = curr & (1u << 13u);
        SETPOINT12 = curr & (1u << 12u);
        SETPOINT11 = curr & (1u << 11u);
        SETPOINT10 = curr & (1u << 10u);
        SETPOINT9 = curr & (1u << 9u);
        SETPOINT8 = curr & (1u << 8u);
        SETPOINT7 = curr & (1u << 7u);
        SETPOINT6 = curr & (1u << 6u);
        SETPOINT5 = curr & (1u << 5u);
        SETPOINT4 = curr & (1u << 4u);
        SETPOINT3 = curr & (1u << 3u);
        SETPOINT2 = curr & (1u << 2u);
        SETPOINT1 = curr & (1u << 1u);
        SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of SETPOINT_M4DEBUG's bit fields.
     *
     * (read-write) Slice Setpoint Config Register
     */
    inline void set_SETPOINT_M4DEBUG(bool SETPOINT15, bool SETPOINT14,
                                     bool SETPOINT13, bool SETPOINT12,
                                     bool SETPOINT11, bool SETPOINT10,
                                     bool SETPOINT9, bool SETPOINT8,
                                     bool SETPOINT7, bool SETPOINT6,
                                     bool SETPOINT5, bool SETPOINT4,
                                     bool SETPOINT3, bool SETPOINT2,
                                     bool SETPOINT1, bool SETPOINT0) volatile
    {
        uint32_t curr = SETPOINT_M4DEBUG;

        curr &= ~(0b1u << 15u);
        curr |= (SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SETPOINT0 & 0b1u) << 0u;

        SETPOINT_M4DEBUG = curr;
    }

    /**
     * Get DOMAIN_M4DEBUG's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline bool get_DOMAIN_M4DEBUG_CPU1_SUSP() volatile
    {
        return DOMAIN_M4DEBUG & (1u << 7u);
    }

    /**
     * Set DOMAIN_M4DEBUG's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void set_DOMAIN_M4DEBUG_CPU1_SUSP() volatile
    {
        DOMAIN_M4DEBUG |= 1u << 7u;
    }

    /**
     * Clear DOMAIN_M4DEBUG's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void clear_DOMAIN_M4DEBUG_CPU1_SUSP() volatile
    {
        DOMAIN_M4DEBUG &= ~(1u << 7u);
    }

    /**
     * Toggle DOMAIN_M4DEBUG's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void toggle_DOMAIN_M4DEBUG_CPU1_SUSP() volatile
    {
        DOMAIN_M4DEBUG ^= 1u << 7u;
    }

    /**
     * Get DOMAIN_M4DEBUG's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline bool get_DOMAIN_M4DEBUG_CPU1_STOP() volatile
    {
        return DOMAIN_M4DEBUG & (1u << 6u);
    }

    /**
     * Set DOMAIN_M4DEBUG's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void set_DOMAIN_M4DEBUG_CPU1_STOP() volatile
    {
        DOMAIN_M4DEBUG |= 1u << 6u;
    }

    /**
     * Clear DOMAIN_M4DEBUG's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void clear_DOMAIN_M4DEBUG_CPU1_STOP() volatile
    {
        DOMAIN_M4DEBUG &= ~(1u << 6u);
    }

    /**
     * Toggle DOMAIN_M4DEBUG's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void toggle_DOMAIN_M4DEBUG_CPU1_STOP() volatile
    {
        DOMAIN_M4DEBUG ^= 1u << 6u;
    }

    /**
     * Get DOMAIN_M4DEBUG's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline bool get_DOMAIN_M4DEBUG_CPU1_WAIT() volatile
    {
        return DOMAIN_M4DEBUG & (1u << 5u);
    }

    /**
     * Set DOMAIN_M4DEBUG's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void set_DOMAIN_M4DEBUG_CPU1_WAIT() volatile
    {
        DOMAIN_M4DEBUG |= 1u << 5u;
    }

    /**
     * Clear DOMAIN_M4DEBUG's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void clear_DOMAIN_M4DEBUG_CPU1_WAIT() volatile
    {
        DOMAIN_M4DEBUG &= ~(1u << 5u);
    }

    /**
     * Toggle DOMAIN_M4DEBUG's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void toggle_DOMAIN_M4DEBUG_CPU1_WAIT() volatile
    {
        DOMAIN_M4DEBUG ^= 1u << 5u;
    }

    /**
     * Get DOMAIN_M4DEBUG's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline bool get_DOMAIN_M4DEBUG_CPU1_RUN() volatile
    {
        return DOMAIN_M4DEBUG & (1u << 4u);
    }

    /**
     * Set DOMAIN_M4DEBUG's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void set_DOMAIN_M4DEBUG_CPU1_RUN() volatile
    {
        DOMAIN_M4DEBUG |= 1u << 4u;
    }

    /**
     * Clear DOMAIN_M4DEBUG's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void clear_DOMAIN_M4DEBUG_CPU1_RUN() volatile
    {
        DOMAIN_M4DEBUG &= ~(1u << 4u);
    }

    /**
     * Toggle DOMAIN_M4DEBUG's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void toggle_DOMAIN_M4DEBUG_CPU1_RUN() volatile
    {
        DOMAIN_M4DEBUG ^= 1u << 4u;
    }

    /**
     * Get DOMAIN_M4DEBUG's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline bool get_DOMAIN_M4DEBUG_CPU0_SUSP() volatile
    {
        return DOMAIN_M4DEBUG & (1u << 3u);
    }

    /**
     * Set DOMAIN_M4DEBUG's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void set_DOMAIN_M4DEBUG_CPU0_SUSP() volatile
    {
        DOMAIN_M4DEBUG |= 1u << 3u;
    }

    /**
     * Clear DOMAIN_M4DEBUG's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void clear_DOMAIN_M4DEBUG_CPU0_SUSP() volatile
    {
        DOMAIN_M4DEBUG &= ~(1u << 3u);
    }

    /**
     * Toggle DOMAIN_M4DEBUG's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void toggle_DOMAIN_M4DEBUG_CPU0_SUSP() volatile
    {
        DOMAIN_M4DEBUG ^= 1u << 3u;
    }

    /**
     * Get DOMAIN_M4DEBUG's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline bool get_DOMAIN_M4DEBUG_CPU0_STOP() volatile
    {
        return DOMAIN_M4DEBUG & (1u << 2u);
    }

    /**
     * Set DOMAIN_M4DEBUG's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void set_DOMAIN_M4DEBUG_CPU0_STOP() volatile
    {
        DOMAIN_M4DEBUG |= 1u << 2u;
    }

    /**
     * Clear DOMAIN_M4DEBUG's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void clear_DOMAIN_M4DEBUG_CPU0_STOP() volatile
    {
        DOMAIN_M4DEBUG &= ~(1u << 2u);
    }

    /**
     * Toggle DOMAIN_M4DEBUG's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void toggle_DOMAIN_M4DEBUG_CPU0_STOP() volatile
    {
        DOMAIN_M4DEBUG ^= 1u << 2u;
    }

    /**
     * Get DOMAIN_M4DEBUG's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline bool get_DOMAIN_M4DEBUG_CPU0_WAIT() volatile
    {
        return DOMAIN_M4DEBUG & (1u << 1u);
    }

    /**
     * Set DOMAIN_M4DEBUG's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void set_DOMAIN_M4DEBUG_CPU0_WAIT() volatile
    {
        DOMAIN_M4DEBUG |= 1u << 1u;
    }

    /**
     * Clear DOMAIN_M4DEBUG's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void clear_DOMAIN_M4DEBUG_CPU0_WAIT() volatile
    {
        DOMAIN_M4DEBUG &= ~(1u << 1u);
    }

    /**
     * Toggle DOMAIN_M4DEBUG's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void toggle_DOMAIN_M4DEBUG_CPU0_WAIT() volatile
    {
        DOMAIN_M4DEBUG ^= 1u << 1u;
    }

    /**
     * Get DOMAIN_M4DEBUG's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline bool get_DOMAIN_M4DEBUG_CPU0_RUN() volatile
    {
        return DOMAIN_M4DEBUG & (1u << 0u);
    }

    /**
     * Set DOMAIN_M4DEBUG's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void set_DOMAIN_M4DEBUG_CPU0_RUN() volatile
    {
        DOMAIN_M4DEBUG |= 1u << 0u;
    }

    /**
     * Clear DOMAIN_M4DEBUG's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void clear_DOMAIN_M4DEBUG_CPU0_RUN() volatile
    {
        DOMAIN_M4DEBUG &= ~(1u << 0u);
    }

    /**
     * Toggle DOMAIN_M4DEBUG's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void toggle_DOMAIN_M4DEBUG_CPU0_RUN() volatile
    {
        DOMAIN_M4DEBUG ^= 1u << 0u;
    }

    /**
     * Get all of DOMAIN_M4DEBUG's bit fields.
     *
     * (read-write) Slice Domain Config Register
     */
    inline void get_DOMAIN_M4DEBUG(bool &CPU1_SUSP, bool &CPU1_STOP,
                                   bool &CPU1_WAIT, bool &CPU1_RUN,
                                   bool &CPU0_SUSP, bool &CPU0_STOP,
                                   bool &CPU0_WAIT, bool &CPU0_RUN) volatile
    {
        uint32_t curr = DOMAIN_M4DEBUG;

        CPU1_SUSP = curr & (1u << 7u);
        CPU1_STOP = curr & (1u << 6u);
        CPU1_WAIT = curr & (1u << 5u);
        CPU1_RUN = curr & (1u << 4u);
        CPU0_SUSP = curr & (1u << 3u);
        CPU0_STOP = curr & (1u << 2u);
        CPU0_WAIT = curr & (1u << 1u);
        CPU0_RUN = curr & (1u << 0u);
    }

    /**
     * Set all of DOMAIN_M4DEBUG's bit fields.
     *
     * (read-write) Slice Domain Config Register
     */
    inline void set_DOMAIN_M4DEBUG(bool CPU1_SUSP, bool CPU1_STOP,
                                   bool CPU1_WAIT, bool CPU1_RUN,
                                   bool CPU0_SUSP, bool CPU0_STOP,
                                   bool CPU0_WAIT, bool CPU0_RUN) volatile
    {
        uint32_t curr = DOMAIN_M4DEBUG;

        curr &= ~(0b1u << 7u);
        curr |= (CPU1_SUSP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CPU1_STOP & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (CPU1_WAIT & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (CPU1_RUN & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (CPU0_SUSP & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CPU0_STOP & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CPU0_WAIT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CPU0_RUN & 0b1u) << 0u;

        DOMAIN_M4DEBUG = curr;
    }

    /**
     * Get STAT_M4DEBUG's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline bool get_STAT_M4DEBUG_RST_BY_SW() volatile
    {
        return STAT_M4DEBUG & (1u << 3u);
    }

    /**
     * Set STAT_M4DEBUG's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void set_STAT_M4DEBUG_RST_BY_SW() volatile
    {
        STAT_M4DEBUG |= 1u << 3u;
    }

    /**
     * Clear STAT_M4DEBUG's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void clear_STAT_M4DEBUG_RST_BY_SW() volatile
    {
        STAT_M4DEBUG &= ~(1u << 3u);
    }

    /**
     * Toggle STAT_M4DEBUG's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void toggle_STAT_M4DEBUG_RST_BY_SW() volatile
    {
        STAT_M4DEBUG ^= 1u << 3u;
    }

    /**
     * Get STAT_M4DEBUG's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline bool get_STAT_M4DEBUG_RST_BY_HW() volatile
    {
        return STAT_M4DEBUG & (1u << 2u);
    }

    /**
     * Set STAT_M4DEBUG's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void set_STAT_M4DEBUG_RST_BY_HW() volatile
    {
        STAT_M4DEBUG |= 1u << 2u;
    }

    /**
     * Clear STAT_M4DEBUG's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void clear_STAT_M4DEBUG_RST_BY_HW() volatile
    {
        STAT_M4DEBUG &= ~(1u << 2u);
    }

    /**
     * Toggle STAT_M4DEBUG's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void toggle_STAT_M4DEBUG_RST_BY_HW() volatile
    {
        STAT_M4DEBUG ^= 1u << 2u;
    }

    /**
     * Get STAT_M4DEBUG's UNDER_RST bit.
     *
     * This is a Read Only bit. It indicate if the reset is in process.
     */
    inline bool get_STAT_M4DEBUG_UNDER_RST() volatile
    {
        return STAT_M4DEBUG & (1u << 0u);
    }

    /**
     * Get all of STAT_M4DEBUG's bit fields.
     *
     * (read-write) Slice Status Register
     */
    inline void get_STAT_M4DEBUG(bool &RST_BY_SW, bool &RST_BY_HW,
                                 bool &UNDER_RST) volatile
    {
        uint32_t curr = STAT_M4DEBUG;

        RST_BY_SW = curr & (1u << 3u);
        RST_BY_HW = curr & (1u << 2u);
        UNDER_RST = curr & (1u << 0u);
    }

    /**
     * Set all of STAT_M4DEBUG's bit fields.
     *
     * (read-write) Slice Status Register
     */
    inline void set_STAT_M4DEBUG(bool RST_BY_SW, bool RST_BY_HW) volatile
    {
        uint32_t curr = STAT_M4DEBUG;

        curr &= ~(0b1u << 3u);
        curr |= (RST_BY_SW & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (RST_BY_HW & 0b1u) << 2u;

        STAT_M4DEBUG = curr;
    }

    /**
     * Get AUTHEN_M7DEBUG's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline bool get_AUTHEN_M7DEBUG_LOCK_SETTING() volatile
    {
        return AUTHEN_M7DEBUG & (1u << 31u);
    }

    /**
     * Set AUTHEN_M7DEBUG's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void set_AUTHEN_M7DEBUG_LOCK_SETTING() volatile
    {
        AUTHEN_M7DEBUG |= 1u << 31u;
    }

    /**
     * Clear AUTHEN_M7DEBUG's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void clear_AUTHEN_M7DEBUG_LOCK_SETTING() volatile
    {
        AUTHEN_M7DEBUG &= ~(1u << 31u);
    }

    /**
     * Toggle AUTHEN_M7DEBUG's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void toggle_AUTHEN_M7DEBUG_LOCK_SETTING() volatile
    {
        AUTHEN_M7DEBUG ^= 1u << 31u;
    }

    /**
     * Get AUTHEN_M7DEBUG's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline bool get_AUTHEN_M7DEBUG_NONSECURE() volatile
    {
        return AUTHEN_M7DEBUG & (1u << 25u);
    }

    /**
     * Set AUTHEN_M7DEBUG's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void set_AUTHEN_M7DEBUG_NONSECURE() volatile
    {
        AUTHEN_M7DEBUG |= 1u << 25u;
    }

    /**
     * Clear AUTHEN_M7DEBUG's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void clear_AUTHEN_M7DEBUG_NONSECURE() volatile
    {
        AUTHEN_M7DEBUG &= ~(1u << 25u);
    }

    /**
     * Toggle AUTHEN_M7DEBUG's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void toggle_AUTHEN_M7DEBUG_NONSECURE() volatile
    {
        AUTHEN_M7DEBUG ^= 1u << 25u;
    }

    /**
     * Get AUTHEN_M7DEBUG's USER bit.
     *
     * Allow user mode access
     */
    inline bool get_AUTHEN_M7DEBUG_USER() volatile
    {
        return AUTHEN_M7DEBUG & (1u << 24u);
    }

    /**
     * Set AUTHEN_M7DEBUG's USER bit.
     *
     * Allow user mode access
     */
    inline void set_AUTHEN_M7DEBUG_USER() volatile
    {
        AUTHEN_M7DEBUG |= 1u << 24u;
    }

    /**
     * Clear AUTHEN_M7DEBUG's USER bit.
     *
     * Allow user mode access
     */
    inline void clear_AUTHEN_M7DEBUG_USER() volatile
    {
        AUTHEN_M7DEBUG &= ~(1u << 24u);
    }

    /**
     * Toggle AUTHEN_M7DEBUG's USER bit.
     *
     * Allow user mode access
     */
    inline void toggle_AUTHEN_M7DEBUG_USER() volatile
    {
        AUTHEN_M7DEBUG ^= 1u << 24u;
    }

    /**
     * Get AUTHEN_M7DEBUG's LOCK_LIST bit.
     *
     * White list lock
     */
    inline bool get_AUTHEN_M7DEBUG_LOCK_LIST() volatile
    {
        return AUTHEN_M7DEBUG & (1u << 23u);
    }

    /**
     * Set AUTHEN_M7DEBUG's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void set_AUTHEN_M7DEBUG_LOCK_LIST() volatile
    {
        AUTHEN_M7DEBUG |= 1u << 23u;
    }

    /**
     * Clear AUTHEN_M7DEBUG's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void clear_AUTHEN_M7DEBUG_LOCK_LIST() volatile
    {
        AUTHEN_M7DEBUG &= ~(1u << 23u);
    }

    /**
     * Toggle AUTHEN_M7DEBUG's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void toggle_AUTHEN_M7DEBUG_LOCK_LIST() volatile
    {
        AUTHEN_M7DEBUG ^= 1u << 23u;
    }

    /**
     * Get AUTHEN_M7DEBUG's WHITE_LIST field.
     *
     * Domain ID white list
     */
    inline uint8_t get_AUTHEN_M7DEBUG_WHITE_LIST() volatile
    {
        return (AUTHEN_M7DEBUG >> 16u) & 0b1111u;
    }

    /**
     * Set AUTHEN_M7DEBUG's WHITE_LIST field.
     *
     * Domain ID white list
     */
    inline void set_AUTHEN_M7DEBUG_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = AUTHEN_M7DEBUG;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        AUTHEN_M7DEBUG = curr;
    }

    /**
     * Get AUTHEN_M7DEBUG's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline bool get_AUTHEN_M7DEBUG_LOCK_ASSIGN() volatile
    {
        return AUTHEN_M7DEBUG & (1u << 15u);
    }

    /**
     * Set AUTHEN_M7DEBUG's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void set_AUTHEN_M7DEBUG_LOCK_ASSIGN() volatile
    {
        AUTHEN_M7DEBUG |= 1u << 15u;
    }

    /**
     * Clear AUTHEN_M7DEBUG's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void clear_AUTHEN_M7DEBUG_LOCK_ASSIGN() volatile
    {
        AUTHEN_M7DEBUG &= ~(1u << 15u);
    }

    /**
     * Toggle AUTHEN_M7DEBUG's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void toggle_AUTHEN_M7DEBUG_LOCK_ASSIGN() volatile
    {
        AUTHEN_M7DEBUG ^= 1u << 15u;
    }

    /**
     * Get AUTHEN_M7DEBUG's ASSIGN_LIST field.
     *
     * when this bitfield set to 1, reset of slice would be subject to
     * corresponding core status transition
     */
    inline uint8_t get_AUTHEN_M7DEBUG_ASSIGN_LIST() volatile
    {
        return (AUTHEN_M7DEBUG >> 8u) & 0b1111u;
    }

    /**
     * Set AUTHEN_M7DEBUG's ASSIGN_LIST field.
     *
     * when this bitfield set to 1, reset of slice would be subject to
     * corresponding core status transition
     */
    inline void set_AUTHEN_M7DEBUG_ASSIGN_LIST(uint8_t value) volatile
    {
        uint32_t curr = AUTHEN_M7DEBUG;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        AUTHEN_M7DEBUG = curr;
    }

    /**
     * Get AUTHEN_M7DEBUG's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline bool get_AUTHEN_M7DEBUG_LOCK_MODE() volatile
    {
        return AUTHEN_M7DEBUG & (1u << 7u);
    }

    /**
     * Set AUTHEN_M7DEBUG's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void set_AUTHEN_M7DEBUG_LOCK_MODE() volatile
    {
        AUTHEN_M7DEBUG |= 1u << 7u;
    }

    /**
     * Clear AUTHEN_M7DEBUG's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void clear_AUTHEN_M7DEBUG_LOCK_MODE() volatile
    {
        AUTHEN_M7DEBUG &= ~(1u << 7u);
    }

    /**
     * Toggle AUTHEN_M7DEBUG's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void toggle_AUTHEN_M7DEBUG_LOCK_MODE() volatile
    {
        AUTHEN_M7DEBUG ^= 1u << 7u;
    }

    /**
     * Get AUTHEN_M7DEBUG's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline bool get_AUTHEN_M7DEBUG_SETPOINT_MODE() volatile
    {
        return AUTHEN_M7DEBUG & (1u << 1u);
    }

    /**
     * Set AUTHEN_M7DEBUG's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void set_AUTHEN_M7DEBUG_SETPOINT_MODE() volatile
    {
        AUTHEN_M7DEBUG |= 1u << 1u;
    }

    /**
     * Clear AUTHEN_M7DEBUG's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void clear_AUTHEN_M7DEBUG_SETPOINT_MODE() volatile
    {
        AUTHEN_M7DEBUG &= ~(1u << 1u);
    }

    /**
     * Toggle AUTHEN_M7DEBUG's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void toggle_AUTHEN_M7DEBUG_SETPOINT_MODE() volatile
    {
        AUTHEN_M7DEBUG ^= 1u << 1u;
    }

    /**
     * Get AUTHEN_M7DEBUG's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline bool get_AUTHEN_M7DEBUG_DOMAIN_MODE() volatile
    {
        return AUTHEN_M7DEBUG & (1u << 0u);
    }

    /**
     * Set AUTHEN_M7DEBUG's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void set_AUTHEN_M7DEBUG_DOMAIN_MODE() volatile
    {
        AUTHEN_M7DEBUG |= 1u << 0u;
    }

    /**
     * Clear AUTHEN_M7DEBUG's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void clear_AUTHEN_M7DEBUG_DOMAIN_MODE() volatile
    {
        AUTHEN_M7DEBUG &= ~(1u << 0u);
    }

    /**
     * Toggle AUTHEN_M7DEBUG's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void toggle_AUTHEN_M7DEBUG_DOMAIN_MODE() volatile
    {
        AUTHEN_M7DEBUG ^= 1u << 0u;
    }

    /**
     * Get all of AUTHEN_M7DEBUG's bit fields.
     *
     * (read-write) Slice Authentication Register
     */
    inline void get_AUTHEN_M7DEBUG(bool &LOCK_SETTING, bool &NONSECURE,
                                   bool &USER, bool &LOCK_LIST,
                                   uint8_t &WHITE_LIST, bool &LOCK_ASSIGN,
                                   uint8_t &ASSIGN_LIST, bool &LOCK_MODE,
                                   bool &SETPOINT_MODE,
                                   bool &DOMAIN_MODE) volatile
    {
        uint32_t curr = AUTHEN_M7DEBUG;

        LOCK_SETTING = curr & (1u << 31u);
        NONSECURE = curr & (1u << 25u);
        USER = curr & (1u << 24u);
        LOCK_LIST = curr & (1u << 23u);
        WHITE_LIST = (curr >> 16u) & 0b1111u;
        LOCK_ASSIGN = curr & (1u << 15u);
        ASSIGN_LIST = (curr >> 8u) & 0b1111u;
        LOCK_MODE = curr & (1u << 7u);
        SETPOINT_MODE = curr & (1u << 1u);
        DOMAIN_MODE = curr & (1u << 0u);
    }

    /**
     * Set all of AUTHEN_M7DEBUG's bit fields.
     *
     * (read-write) Slice Authentication Register
     */
    inline void set_AUTHEN_M7DEBUG(bool LOCK_SETTING, bool NONSECURE,
                                   bool USER, bool LOCK_LIST,
                                   uint8_t WHITE_LIST, bool LOCK_ASSIGN,
                                   uint8_t ASSIGN_LIST, bool LOCK_MODE,
                                   bool SETPOINT_MODE,
                                   bool DOMAIN_MODE) volatile
    {
        uint32_t curr = AUTHEN_M7DEBUG;

        curr &= ~(0b1u << 31u);
        curr |= (LOCK_SETTING & 0b1u) << 31u;
        curr &= ~(0b1u << 25u);
        curr |= (NONSECURE & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (USER & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (LOCK_LIST & 0b1u) << 23u;
        curr &= ~(0b1111u << 16u);
        curr |= (WHITE_LIST & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (LOCK_ASSIGN & 0b1u) << 15u;
        curr &= ~(0b1111u << 8u);
        curr |= (ASSIGN_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (LOCK_MODE & 0b1u) << 7u;
        curr &= ~(0b1u << 1u);
        curr |= (SETPOINT_MODE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (DOMAIN_MODE & 0b1u) << 0u;

        AUTHEN_M7DEBUG = curr;
    }

    /**
     * Get CTRL_M7DEBUG's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline bool get_CTRL_M7DEBUG_SW_RESET() volatile
    {
        return CTRL_M7DEBUG & (1u << 0u);
    }

    /**
     * Set CTRL_M7DEBUG's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void set_CTRL_M7DEBUG_SW_RESET() volatile
    {
        CTRL_M7DEBUG |= 1u << 0u;
    }

    /**
     * Clear CTRL_M7DEBUG's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void clear_CTRL_M7DEBUG_SW_RESET() volatile
    {
        CTRL_M7DEBUG &= ~(1u << 0u);
    }

    /**
     * Toggle CTRL_M7DEBUG's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void toggle_CTRL_M7DEBUG_SW_RESET() volatile
    {
        CTRL_M7DEBUG ^= 1u << 0u;
    }

    /**
     * Get SETPOINT_M7DEBUG's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline bool get_SETPOINT_M7DEBUG_SETPOINT15() volatile
    {
        return SETPOINT_M7DEBUG & (1u << 15u);
    }

    /**
     * Set SETPOINT_M7DEBUG's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void set_SETPOINT_M7DEBUG_SETPOINT15() volatile
    {
        SETPOINT_M7DEBUG |= 1u << 15u;
    }

    /**
     * Clear SETPOINT_M7DEBUG's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void clear_SETPOINT_M7DEBUG_SETPOINT15() volatile
    {
        SETPOINT_M7DEBUG &= ~(1u << 15u);
    }

    /**
     * Toggle SETPOINT_M7DEBUG's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void toggle_SETPOINT_M7DEBUG_SETPOINT15() volatile
    {
        SETPOINT_M7DEBUG ^= 1u << 15u;
    }

    /**
     * Get SETPOINT_M7DEBUG's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline bool get_SETPOINT_M7DEBUG_SETPOINT14() volatile
    {
        return SETPOINT_M7DEBUG & (1u << 14u);
    }

    /**
     * Set SETPOINT_M7DEBUG's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void set_SETPOINT_M7DEBUG_SETPOINT14() volatile
    {
        SETPOINT_M7DEBUG |= 1u << 14u;
    }

    /**
     * Clear SETPOINT_M7DEBUG's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void clear_SETPOINT_M7DEBUG_SETPOINT14() volatile
    {
        SETPOINT_M7DEBUG &= ~(1u << 14u);
    }

    /**
     * Toggle SETPOINT_M7DEBUG's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void toggle_SETPOINT_M7DEBUG_SETPOINT14() volatile
    {
        SETPOINT_M7DEBUG ^= 1u << 14u;
    }

    /**
     * Get SETPOINT_M7DEBUG's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline bool get_SETPOINT_M7DEBUG_SETPOINT13() volatile
    {
        return SETPOINT_M7DEBUG & (1u << 13u);
    }

    /**
     * Set SETPOINT_M7DEBUG's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void set_SETPOINT_M7DEBUG_SETPOINT13() volatile
    {
        SETPOINT_M7DEBUG |= 1u << 13u;
    }

    /**
     * Clear SETPOINT_M7DEBUG's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void clear_SETPOINT_M7DEBUG_SETPOINT13() volatile
    {
        SETPOINT_M7DEBUG &= ~(1u << 13u);
    }

    /**
     * Toggle SETPOINT_M7DEBUG's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void toggle_SETPOINT_M7DEBUG_SETPOINT13() volatile
    {
        SETPOINT_M7DEBUG ^= 1u << 13u;
    }

    /**
     * Get SETPOINT_M7DEBUG's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline bool get_SETPOINT_M7DEBUG_SETPOINT12() volatile
    {
        return SETPOINT_M7DEBUG & (1u << 12u);
    }

    /**
     * Set SETPOINT_M7DEBUG's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void set_SETPOINT_M7DEBUG_SETPOINT12() volatile
    {
        SETPOINT_M7DEBUG |= 1u << 12u;
    }

    /**
     * Clear SETPOINT_M7DEBUG's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void clear_SETPOINT_M7DEBUG_SETPOINT12() volatile
    {
        SETPOINT_M7DEBUG &= ~(1u << 12u);
    }

    /**
     * Toggle SETPOINT_M7DEBUG's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void toggle_SETPOINT_M7DEBUG_SETPOINT12() volatile
    {
        SETPOINT_M7DEBUG ^= 1u << 12u;
    }

    /**
     * Get SETPOINT_M7DEBUG's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline bool get_SETPOINT_M7DEBUG_SETPOINT11() volatile
    {
        return SETPOINT_M7DEBUG & (1u << 11u);
    }

    /**
     * Set SETPOINT_M7DEBUG's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void set_SETPOINT_M7DEBUG_SETPOINT11() volatile
    {
        SETPOINT_M7DEBUG |= 1u << 11u;
    }

    /**
     * Clear SETPOINT_M7DEBUG's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void clear_SETPOINT_M7DEBUG_SETPOINT11() volatile
    {
        SETPOINT_M7DEBUG &= ~(1u << 11u);
    }

    /**
     * Toggle SETPOINT_M7DEBUG's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void toggle_SETPOINT_M7DEBUG_SETPOINT11() volatile
    {
        SETPOINT_M7DEBUG ^= 1u << 11u;
    }

    /**
     * Get SETPOINT_M7DEBUG's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline bool get_SETPOINT_M7DEBUG_SETPOINT10() volatile
    {
        return SETPOINT_M7DEBUG & (1u << 10u);
    }

    /**
     * Set SETPOINT_M7DEBUG's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void set_SETPOINT_M7DEBUG_SETPOINT10() volatile
    {
        SETPOINT_M7DEBUG |= 1u << 10u;
    }

    /**
     * Clear SETPOINT_M7DEBUG's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void clear_SETPOINT_M7DEBUG_SETPOINT10() volatile
    {
        SETPOINT_M7DEBUG &= ~(1u << 10u);
    }

    /**
     * Toggle SETPOINT_M7DEBUG's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void toggle_SETPOINT_M7DEBUG_SETPOINT10() volatile
    {
        SETPOINT_M7DEBUG ^= 1u << 10u;
    }

    /**
     * Get SETPOINT_M7DEBUG's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline bool get_SETPOINT_M7DEBUG_SETPOINT9() volatile
    {
        return SETPOINT_M7DEBUG & (1u << 9u);
    }

    /**
     * Set SETPOINT_M7DEBUG's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void set_SETPOINT_M7DEBUG_SETPOINT9() volatile
    {
        SETPOINT_M7DEBUG |= 1u << 9u;
    }

    /**
     * Clear SETPOINT_M7DEBUG's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void clear_SETPOINT_M7DEBUG_SETPOINT9() volatile
    {
        SETPOINT_M7DEBUG &= ~(1u << 9u);
    }

    /**
     * Toggle SETPOINT_M7DEBUG's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void toggle_SETPOINT_M7DEBUG_SETPOINT9() volatile
    {
        SETPOINT_M7DEBUG ^= 1u << 9u;
    }

    /**
     * Get SETPOINT_M7DEBUG's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline bool get_SETPOINT_M7DEBUG_SETPOINT8() volatile
    {
        return SETPOINT_M7DEBUG & (1u << 8u);
    }

    /**
     * Set SETPOINT_M7DEBUG's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void set_SETPOINT_M7DEBUG_SETPOINT8() volatile
    {
        SETPOINT_M7DEBUG |= 1u << 8u;
    }

    /**
     * Clear SETPOINT_M7DEBUG's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void clear_SETPOINT_M7DEBUG_SETPOINT8() volatile
    {
        SETPOINT_M7DEBUG &= ~(1u << 8u);
    }

    /**
     * Toggle SETPOINT_M7DEBUG's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void toggle_SETPOINT_M7DEBUG_SETPOINT8() volatile
    {
        SETPOINT_M7DEBUG ^= 1u << 8u;
    }

    /**
     * Get SETPOINT_M7DEBUG's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline bool get_SETPOINT_M7DEBUG_SETPOINT7() volatile
    {
        return SETPOINT_M7DEBUG & (1u << 7u);
    }

    /**
     * Set SETPOINT_M7DEBUG's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void set_SETPOINT_M7DEBUG_SETPOINT7() volatile
    {
        SETPOINT_M7DEBUG |= 1u << 7u;
    }

    /**
     * Clear SETPOINT_M7DEBUG's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void clear_SETPOINT_M7DEBUG_SETPOINT7() volatile
    {
        SETPOINT_M7DEBUG &= ~(1u << 7u);
    }

    /**
     * Toggle SETPOINT_M7DEBUG's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void toggle_SETPOINT_M7DEBUG_SETPOINT7() volatile
    {
        SETPOINT_M7DEBUG ^= 1u << 7u;
    }

    /**
     * Get SETPOINT_M7DEBUG's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline bool get_SETPOINT_M7DEBUG_SETPOINT6() volatile
    {
        return SETPOINT_M7DEBUG & (1u << 6u);
    }

    /**
     * Set SETPOINT_M7DEBUG's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void set_SETPOINT_M7DEBUG_SETPOINT6() volatile
    {
        SETPOINT_M7DEBUG |= 1u << 6u;
    }

    /**
     * Clear SETPOINT_M7DEBUG's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void clear_SETPOINT_M7DEBUG_SETPOINT6() volatile
    {
        SETPOINT_M7DEBUG &= ~(1u << 6u);
    }

    /**
     * Toggle SETPOINT_M7DEBUG's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void toggle_SETPOINT_M7DEBUG_SETPOINT6() volatile
    {
        SETPOINT_M7DEBUG ^= 1u << 6u;
    }

    /**
     * Get SETPOINT_M7DEBUG's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline bool get_SETPOINT_M7DEBUG_SETPOINT5() volatile
    {
        return SETPOINT_M7DEBUG & (1u << 5u);
    }

    /**
     * Set SETPOINT_M7DEBUG's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void set_SETPOINT_M7DEBUG_SETPOINT5() volatile
    {
        SETPOINT_M7DEBUG |= 1u << 5u;
    }

    /**
     * Clear SETPOINT_M7DEBUG's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void clear_SETPOINT_M7DEBUG_SETPOINT5() volatile
    {
        SETPOINT_M7DEBUG &= ~(1u << 5u);
    }

    /**
     * Toggle SETPOINT_M7DEBUG's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void toggle_SETPOINT_M7DEBUG_SETPOINT5() volatile
    {
        SETPOINT_M7DEBUG ^= 1u << 5u;
    }

    /**
     * Get SETPOINT_M7DEBUG's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline bool get_SETPOINT_M7DEBUG_SETPOINT4() volatile
    {
        return SETPOINT_M7DEBUG & (1u << 4u);
    }

    /**
     * Set SETPOINT_M7DEBUG's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void set_SETPOINT_M7DEBUG_SETPOINT4() volatile
    {
        SETPOINT_M7DEBUG |= 1u << 4u;
    }

    /**
     * Clear SETPOINT_M7DEBUG's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void clear_SETPOINT_M7DEBUG_SETPOINT4() volatile
    {
        SETPOINT_M7DEBUG &= ~(1u << 4u);
    }

    /**
     * Toggle SETPOINT_M7DEBUG's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void toggle_SETPOINT_M7DEBUG_SETPOINT4() volatile
    {
        SETPOINT_M7DEBUG ^= 1u << 4u;
    }

    /**
     * Get SETPOINT_M7DEBUG's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline bool get_SETPOINT_M7DEBUG_SETPOINT3() volatile
    {
        return SETPOINT_M7DEBUG & (1u << 3u);
    }

    /**
     * Set SETPOINT_M7DEBUG's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void set_SETPOINT_M7DEBUG_SETPOINT3() volatile
    {
        SETPOINT_M7DEBUG |= 1u << 3u;
    }

    /**
     * Clear SETPOINT_M7DEBUG's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void clear_SETPOINT_M7DEBUG_SETPOINT3() volatile
    {
        SETPOINT_M7DEBUG &= ~(1u << 3u);
    }

    /**
     * Toggle SETPOINT_M7DEBUG's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void toggle_SETPOINT_M7DEBUG_SETPOINT3() volatile
    {
        SETPOINT_M7DEBUG ^= 1u << 3u;
    }

    /**
     * Get SETPOINT_M7DEBUG's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline bool get_SETPOINT_M7DEBUG_SETPOINT2() volatile
    {
        return SETPOINT_M7DEBUG & (1u << 2u);
    }

    /**
     * Set SETPOINT_M7DEBUG's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void set_SETPOINT_M7DEBUG_SETPOINT2() volatile
    {
        SETPOINT_M7DEBUG |= 1u << 2u;
    }

    /**
     * Clear SETPOINT_M7DEBUG's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void clear_SETPOINT_M7DEBUG_SETPOINT2() volatile
    {
        SETPOINT_M7DEBUG &= ~(1u << 2u);
    }

    /**
     * Toggle SETPOINT_M7DEBUG's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void toggle_SETPOINT_M7DEBUG_SETPOINT2() volatile
    {
        SETPOINT_M7DEBUG ^= 1u << 2u;
    }

    /**
     * Get SETPOINT_M7DEBUG's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline bool get_SETPOINT_M7DEBUG_SETPOINT1() volatile
    {
        return SETPOINT_M7DEBUG & (1u << 1u);
    }

    /**
     * Set SETPOINT_M7DEBUG's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void set_SETPOINT_M7DEBUG_SETPOINT1() volatile
    {
        SETPOINT_M7DEBUG |= 1u << 1u;
    }

    /**
     * Clear SETPOINT_M7DEBUG's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void clear_SETPOINT_M7DEBUG_SETPOINT1() volatile
    {
        SETPOINT_M7DEBUG &= ~(1u << 1u);
    }

    /**
     * Toggle SETPOINT_M7DEBUG's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void toggle_SETPOINT_M7DEBUG_SETPOINT1() volatile
    {
        SETPOINT_M7DEBUG ^= 1u << 1u;
    }

    /**
     * Get SETPOINT_M7DEBUG's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline bool get_SETPOINT_M7DEBUG_SETPOINT0() volatile
    {
        return SETPOINT_M7DEBUG & (1u << 0u);
    }

    /**
     * Set SETPOINT_M7DEBUG's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void set_SETPOINT_M7DEBUG_SETPOINT0() volatile
    {
        SETPOINT_M7DEBUG |= 1u << 0u;
    }

    /**
     * Clear SETPOINT_M7DEBUG's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void clear_SETPOINT_M7DEBUG_SETPOINT0() volatile
    {
        SETPOINT_M7DEBUG &= ~(1u << 0u);
    }

    /**
     * Toggle SETPOINT_M7DEBUG's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void toggle_SETPOINT_M7DEBUG_SETPOINT0() volatile
    {
        SETPOINT_M7DEBUG ^= 1u << 0u;
    }

    /**
     * Get all of SETPOINT_M7DEBUG's bit fields.
     *
     * (read-write) Slice Setpoint Config Register
     */
    inline void get_SETPOINT_M7DEBUG(bool &SETPOINT15, bool &SETPOINT14,
                                     bool &SETPOINT13, bool &SETPOINT12,
                                     bool &SETPOINT11, bool &SETPOINT10,
                                     bool &SETPOINT9, bool &SETPOINT8,
                                     bool &SETPOINT7, bool &SETPOINT6,
                                     bool &SETPOINT5, bool &SETPOINT4,
                                     bool &SETPOINT3, bool &SETPOINT2,
                                     bool &SETPOINT1, bool &SETPOINT0) volatile
    {
        uint32_t curr = SETPOINT_M7DEBUG;

        SETPOINT15 = curr & (1u << 15u);
        SETPOINT14 = curr & (1u << 14u);
        SETPOINT13 = curr & (1u << 13u);
        SETPOINT12 = curr & (1u << 12u);
        SETPOINT11 = curr & (1u << 11u);
        SETPOINT10 = curr & (1u << 10u);
        SETPOINT9 = curr & (1u << 9u);
        SETPOINT8 = curr & (1u << 8u);
        SETPOINT7 = curr & (1u << 7u);
        SETPOINT6 = curr & (1u << 6u);
        SETPOINT5 = curr & (1u << 5u);
        SETPOINT4 = curr & (1u << 4u);
        SETPOINT3 = curr & (1u << 3u);
        SETPOINT2 = curr & (1u << 2u);
        SETPOINT1 = curr & (1u << 1u);
        SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of SETPOINT_M7DEBUG's bit fields.
     *
     * (read-write) Slice Setpoint Config Register
     */
    inline void set_SETPOINT_M7DEBUG(bool SETPOINT15, bool SETPOINT14,
                                     bool SETPOINT13, bool SETPOINT12,
                                     bool SETPOINT11, bool SETPOINT10,
                                     bool SETPOINT9, bool SETPOINT8,
                                     bool SETPOINT7, bool SETPOINT6,
                                     bool SETPOINT5, bool SETPOINT4,
                                     bool SETPOINT3, bool SETPOINT2,
                                     bool SETPOINT1, bool SETPOINT0) volatile
    {
        uint32_t curr = SETPOINT_M7DEBUG;

        curr &= ~(0b1u << 15u);
        curr |= (SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SETPOINT0 & 0b1u) << 0u;

        SETPOINT_M7DEBUG = curr;
    }

    /**
     * Get DOMAIN_M7DEBUG's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline bool get_DOMAIN_M7DEBUG_CPU1_SUSP() volatile
    {
        return DOMAIN_M7DEBUG & (1u << 7u);
    }

    /**
     * Set DOMAIN_M7DEBUG's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void set_DOMAIN_M7DEBUG_CPU1_SUSP() volatile
    {
        DOMAIN_M7DEBUG |= 1u << 7u;
    }

    /**
     * Clear DOMAIN_M7DEBUG's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void clear_DOMAIN_M7DEBUG_CPU1_SUSP() volatile
    {
        DOMAIN_M7DEBUG &= ~(1u << 7u);
    }

    /**
     * Toggle DOMAIN_M7DEBUG's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void toggle_DOMAIN_M7DEBUG_CPU1_SUSP() volatile
    {
        DOMAIN_M7DEBUG ^= 1u << 7u;
    }

    /**
     * Get DOMAIN_M7DEBUG's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline bool get_DOMAIN_M7DEBUG_CPU1_STOP() volatile
    {
        return DOMAIN_M7DEBUG & (1u << 6u);
    }

    /**
     * Set DOMAIN_M7DEBUG's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void set_DOMAIN_M7DEBUG_CPU1_STOP() volatile
    {
        DOMAIN_M7DEBUG |= 1u << 6u;
    }

    /**
     * Clear DOMAIN_M7DEBUG's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void clear_DOMAIN_M7DEBUG_CPU1_STOP() volatile
    {
        DOMAIN_M7DEBUG &= ~(1u << 6u);
    }

    /**
     * Toggle DOMAIN_M7DEBUG's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void toggle_DOMAIN_M7DEBUG_CPU1_STOP() volatile
    {
        DOMAIN_M7DEBUG ^= 1u << 6u;
    }

    /**
     * Get DOMAIN_M7DEBUG's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline bool get_DOMAIN_M7DEBUG_CPU1_WAIT() volatile
    {
        return DOMAIN_M7DEBUG & (1u << 5u);
    }

    /**
     * Set DOMAIN_M7DEBUG's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void set_DOMAIN_M7DEBUG_CPU1_WAIT() volatile
    {
        DOMAIN_M7DEBUG |= 1u << 5u;
    }

    /**
     * Clear DOMAIN_M7DEBUG's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void clear_DOMAIN_M7DEBUG_CPU1_WAIT() volatile
    {
        DOMAIN_M7DEBUG &= ~(1u << 5u);
    }

    /**
     * Toggle DOMAIN_M7DEBUG's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void toggle_DOMAIN_M7DEBUG_CPU1_WAIT() volatile
    {
        DOMAIN_M7DEBUG ^= 1u << 5u;
    }

    /**
     * Get DOMAIN_M7DEBUG's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline bool get_DOMAIN_M7DEBUG_CPU1_RUN() volatile
    {
        return DOMAIN_M7DEBUG & (1u << 4u);
    }

    /**
     * Set DOMAIN_M7DEBUG's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void set_DOMAIN_M7DEBUG_CPU1_RUN() volatile
    {
        DOMAIN_M7DEBUG |= 1u << 4u;
    }

    /**
     * Clear DOMAIN_M7DEBUG's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void clear_DOMAIN_M7DEBUG_CPU1_RUN() volatile
    {
        DOMAIN_M7DEBUG &= ~(1u << 4u);
    }

    /**
     * Toggle DOMAIN_M7DEBUG's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void toggle_DOMAIN_M7DEBUG_CPU1_RUN() volatile
    {
        DOMAIN_M7DEBUG ^= 1u << 4u;
    }

    /**
     * Get DOMAIN_M7DEBUG's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline bool get_DOMAIN_M7DEBUG_CPU0_SUSP() volatile
    {
        return DOMAIN_M7DEBUG & (1u << 3u);
    }

    /**
     * Set DOMAIN_M7DEBUG's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void set_DOMAIN_M7DEBUG_CPU0_SUSP() volatile
    {
        DOMAIN_M7DEBUG |= 1u << 3u;
    }

    /**
     * Clear DOMAIN_M7DEBUG's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void clear_DOMAIN_M7DEBUG_CPU0_SUSP() volatile
    {
        DOMAIN_M7DEBUG &= ~(1u << 3u);
    }

    /**
     * Toggle DOMAIN_M7DEBUG's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void toggle_DOMAIN_M7DEBUG_CPU0_SUSP() volatile
    {
        DOMAIN_M7DEBUG ^= 1u << 3u;
    }

    /**
     * Get DOMAIN_M7DEBUG's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline bool get_DOMAIN_M7DEBUG_CPU0_STOP() volatile
    {
        return DOMAIN_M7DEBUG & (1u << 2u);
    }

    /**
     * Set DOMAIN_M7DEBUG's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void set_DOMAIN_M7DEBUG_CPU0_STOP() volatile
    {
        DOMAIN_M7DEBUG |= 1u << 2u;
    }

    /**
     * Clear DOMAIN_M7DEBUG's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void clear_DOMAIN_M7DEBUG_CPU0_STOP() volatile
    {
        DOMAIN_M7DEBUG &= ~(1u << 2u);
    }

    /**
     * Toggle DOMAIN_M7DEBUG's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void toggle_DOMAIN_M7DEBUG_CPU0_STOP() volatile
    {
        DOMAIN_M7DEBUG ^= 1u << 2u;
    }

    /**
     * Get DOMAIN_M7DEBUG's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline bool get_DOMAIN_M7DEBUG_CPU0_WAIT() volatile
    {
        return DOMAIN_M7DEBUG & (1u << 1u);
    }

    /**
     * Set DOMAIN_M7DEBUG's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void set_DOMAIN_M7DEBUG_CPU0_WAIT() volatile
    {
        DOMAIN_M7DEBUG |= 1u << 1u;
    }

    /**
     * Clear DOMAIN_M7DEBUG's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void clear_DOMAIN_M7DEBUG_CPU0_WAIT() volatile
    {
        DOMAIN_M7DEBUG &= ~(1u << 1u);
    }

    /**
     * Toggle DOMAIN_M7DEBUG's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void toggle_DOMAIN_M7DEBUG_CPU0_WAIT() volatile
    {
        DOMAIN_M7DEBUG ^= 1u << 1u;
    }

    /**
     * Get DOMAIN_M7DEBUG's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline bool get_DOMAIN_M7DEBUG_CPU0_RUN() volatile
    {
        return DOMAIN_M7DEBUG & (1u << 0u);
    }

    /**
     * Set DOMAIN_M7DEBUG's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void set_DOMAIN_M7DEBUG_CPU0_RUN() volatile
    {
        DOMAIN_M7DEBUG |= 1u << 0u;
    }

    /**
     * Clear DOMAIN_M7DEBUG's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void clear_DOMAIN_M7DEBUG_CPU0_RUN() volatile
    {
        DOMAIN_M7DEBUG &= ~(1u << 0u);
    }

    /**
     * Toggle DOMAIN_M7DEBUG's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void toggle_DOMAIN_M7DEBUG_CPU0_RUN() volatile
    {
        DOMAIN_M7DEBUG ^= 1u << 0u;
    }

    /**
     * Get all of DOMAIN_M7DEBUG's bit fields.
     *
     * (read-write) Slice Domain Config Register
     */
    inline void get_DOMAIN_M7DEBUG(bool &CPU1_SUSP, bool &CPU1_STOP,
                                   bool &CPU1_WAIT, bool &CPU1_RUN,
                                   bool &CPU0_SUSP, bool &CPU0_STOP,
                                   bool &CPU0_WAIT, bool &CPU0_RUN) volatile
    {
        uint32_t curr = DOMAIN_M7DEBUG;

        CPU1_SUSP = curr & (1u << 7u);
        CPU1_STOP = curr & (1u << 6u);
        CPU1_WAIT = curr & (1u << 5u);
        CPU1_RUN = curr & (1u << 4u);
        CPU0_SUSP = curr & (1u << 3u);
        CPU0_STOP = curr & (1u << 2u);
        CPU0_WAIT = curr & (1u << 1u);
        CPU0_RUN = curr & (1u << 0u);
    }

    /**
     * Set all of DOMAIN_M7DEBUG's bit fields.
     *
     * (read-write) Slice Domain Config Register
     */
    inline void set_DOMAIN_M7DEBUG(bool CPU1_SUSP, bool CPU1_STOP,
                                   bool CPU1_WAIT, bool CPU1_RUN,
                                   bool CPU0_SUSP, bool CPU0_STOP,
                                   bool CPU0_WAIT, bool CPU0_RUN) volatile
    {
        uint32_t curr = DOMAIN_M7DEBUG;

        curr &= ~(0b1u << 7u);
        curr |= (CPU1_SUSP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CPU1_STOP & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (CPU1_WAIT & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (CPU1_RUN & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (CPU0_SUSP & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CPU0_STOP & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CPU0_WAIT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CPU0_RUN & 0b1u) << 0u;

        DOMAIN_M7DEBUG = curr;
    }

    /**
     * Get STAT_M7DEBUG's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline bool get_STAT_M7DEBUG_RST_BY_SW() volatile
    {
        return STAT_M7DEBUG & (1u << 3u);
    }

    /**
     * Set STAT_M7DEBUG's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void set_STAT_M7DEBUG_RST_BY_SW() volatile
    {
        STAT_M7DEBUG |= 1u << 3u;
    }

    /**
     * Clear STAT_M7DEBUG's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void clear_STAT_M7DEBUG_RST_BY_SW() volatile
    {
        STAT_M7DEBUG &= ~(1u << 3u);
    }

    /**
     * Toggle STAT_M7DEBUG's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void toggle_STAT_M7DEBUG_RST_BY_SW() volatile
    {
        STAT_M7DEBUG ^= 1u << 3u;
    }

    /**
     * Get STAT_M7DEBUG's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline bool get_STAT_M7DEBUG_RST_BY_HW() volatile
    {
        return STAT_M7DEBUG & (1u << 2u);
    }

    /**
     * Set STAT_M7DEBUG's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void set_STAT_M7DEBUG_RST_BY_HW() volatile
    {
        STAT_M7DEBUG |= 1u << 2u;
    }

    /**
     * Clear STAT_M7DEBUG's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void clear_STAT_M7DEBUG_RST_BY_HW() volatile
    {
        STAT_M7DEBUG &= ~(1u << 2u);
    }

    /**
     * Toggle STAT_M7DEBUG's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void toggle_STAT_M7DEBUG_RST_BY_HW() volatile
    {
        STAT_M7DEBUG ^= 1u << 2u;
    }

    /**
     * Get STAT_M7DEBUG's UNDER_RST bit.
     *
     * This is a Read Only bit. It indicate if the reset is in process.
     */
    inline bool get_STAT_M7DEBUG_UNDER_RST() volatile
    {
        return STAT_M7DEBUG & (1u << 0u);
    }

    /**
     * Get all of STAT_M7DEBUG's bit fields.
     *
     * (read-write) Slice Status Register
     */
    inline void get_STAT_M7DEBUG(bool &RST_BY_SW, bool &RST_BY_HW,
                                 bool &UNDER_RST) volatile
    {
        uint32_t curr = STAT_M7DEBUG;

        RST_BY_SW = curr & (1u << 3u);
        RST_BY_HW = curr & (1u << 2u);
        UNDER_RST = curr & (1u << 0u);
    }

    /**
     * Set all of STAT_M7DEBUG's bit fields.
     *
     * (read-write) Slice Status Register
     */
    inline void set_STAT_M7DEBUG(bool RST_BY_SW, bool RST_BY_HW) volatile
    {
        uint32_t curr = STAT_M7DEBUG;

        curr &= ~(0b1u << 3u);
        curr |= (RST_BY_SW & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (RST_BY_HW & 0b1u) << 2u;

        STAT_M7DEBUG = curr;
    }

    /**
     * Get AUTHEN_USBPHY1's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline bool get_AUTHEN_USBPHY1_LOCK_SETTING() volatile
    {
        return AUTHEN_USBPHY1 & (1u << 31u);
    }

    /**
     * Set AUTHEN_USBPHY1's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void set_AUTHEN_USBPHY1_LOCK_SETTING() volatile
    {
        AUTHEN_USBPHY1 |= 1u << 31u;
    }

    /**
     * Clear AUTHEN_USBPHY1's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void clear_AUTHEN_USBPHY1_LOCK_SETTING() volatile
    {
        AUTHEN_USBPHY1 &= ~(1u << 31u);
    }

    /**
     * Toggle AUTHEN_USBPHY1's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void toggle_AUTHEN_USBPHY1_LOCK_SETTING() volatile
    {
        AUTHEN_USBPHY1 ^= 1u << 31u;
    }

    /**
     * Get AUTHEN_USBPHY1's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline bool get_AUTHEN_USBPHY1_NONSECURE() volatile
    {
        return AUTHEN_USBPHY1 & (1u << 25u);
    }

    /**
     * Set AUTHEN_USBPHY1's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void set_AUTHEN_USBPHY1_NONSECURE() volatile
    {
        AUTHEN_USBPHY1 |= 1u << 25u;
    }

    /**
     * Clear AUTHEN_USBPHY1's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void clear_AUTHEN_USBPHY1_NONSECURE() volatile
    {
        AUTHEN_USBPHY1 &= ~(1u << 25u);
    }

    /**
     * Toggle AUTHEN_USBPHY1's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void toggle_AUTHEN_USBPHY1_NONSECURE() volatile
    {
        AUTHEN_USBPHY1 ^= 1u << 25u;
    }

    /**
     * Get AUTHEN_USBPHY1's USER bit.
     *
     * Allow user mode access
     */
    inline bool get_AUTHEN_USBPHY1_USER() volatile
    {
        return AUTHEN_USBPHY1 & (1u << 24u);
    }

    /**
     * Set AUTHEN_USBPHY1's USER bit.
     *
     * Allow user mode access
     */
    inline void set_AUTHEN_USBPHY1_USER() volatile
    {
        AUTHEN_USBPHY1 |= 1u << 24u;
    }

    /**
     * Clear AUTHEN_USBPHY1's USER bit.
     *
     * Allow user mode access
     */
    inline void clear_AUTHEN_USBPHY1_USER() volatile
    {
        AUTHEN_USBPHY1 &= ~(1u << 24u);
    }

    /**
     * Toggle AUTHEN_USBPHY1's USER bit.
     *
     * Allow user mode access
     */
    inline void toggle_AUTHEN_USBPHY1_USER() volatile
    {
        AUTHEN_USBPHY1 ^= 1u << 24u;
    }

    /**
     * Get AUTHEN_USBPHY1's LOCK_LIST bit.
     *
     * White list lock
     */
    inline bool get_AUTHEN_USBPHY1_LOCK_LIST() volatile
    {
        return AUTHEN_USBPHY1 & (1u << 23u);
    }

    /**
     * Set AUTHEN_USBPHY1's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void set_AUTHEN_USBPHY1_LOCK_LIST() volatile
    {
        AUTHEN_USBPHY1 |= 1u << 23u;
    }

    /**
     * Clear AUTHEN_USBPHY1's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void clear_AUTHEN_USBPHY1_LOCK_LIST() volatile
    {
        AUTHEN_USBPHY1 &= ~(1u << 23u);
    }

    /**
     * Toggle AUTHEN_USBPHY1's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void toggle_AUTHEN_USBPHY1_LOCK_LIST() volatile
    {
        AUTHEN_USBPHY1 ^= 1u << 23u;
    }

    /**
     * Get AUTHEN_USBPHY1's WHITE_LIST field.
     *
     * Domain ID white list
     */
    inline uint8_t get_AUTHEN_USBPHY1_WHITE_LIST() volatile
    {
        return (AUTHEN_USBPHY1 >> 16u) & 0b1111u;
    }

    /**
     * Set AUTHEN_USBPHY1's WHITE_LIST field.
     *
     * Domain ID white list
     */
    inline void set_AUTHEN_USBPHY1_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = AUTHEN_USBPHY1;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        AUTHEN_USBPHY1 = curr;
    }

    /**
     * Get AUTHEN_USBPHY1's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline bool get_AUTHEN_USBPHY1_LOCK_ASSIGN() volatile
    {
        return AUTHEN_USBPHY1 & (1u << 15u);
    }

    /**
     * Set AUTHEN_USBPHY1's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void set_AUTHEN_USBPHY1_LOCK_ASSIGN() volatile
    {
        AUTHEN_USBPHY1 |= 1u << 15u;
    }

    /**
     * Clear AUTHEN_USBPHY1's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void clear_AUTHEN_USBPHY1_LOCK_ASSIGN() volatile
    {
        AUTHEN_USBPHY1 &= ~(1u << 15u);
    }

    /**
     * Toggle AUTHEN_USBPHY1's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void toggle_AUTHEN_USBPHY1_LOCK_ASSIGN() volatile
    {
        AUTHEN_USBPHY1 ^= 1u << 15u;
    }

    /**
     * Get AUTHEN_USBPHY1's ASSIGN_LIST field.
     *
     * when this bitfield set to 1, reset of slice would be subject to
     * corresponding core status transition
     */
    inline uint8_t get_AUTHEN_USBPHY1_ASSIGN_LIST() volatile
    {
        return (AUTHEN_USBPHY1 >> 8u) & 0b1111u;
    }

    /**
     * Set AUTHEN_USBPHY1's ASSIGN_LIST field.
     *
     * when this bitfield set to 1, reset of slice would be subject to
     * corresponding core status transition
     */
    inline void set_AUTHEN_USBPHY1_ASSIGN_LIST(uint8_t value) volatile
    {
        uint32_t curr = AUTHEN_USBPHY1;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        AUTHEN_USBPHY1 = curr;
    }

    /**
     * Get AUTHEN_USBPHY1's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline bool get_AUTHEN_USBPHY1_LOCK_MODE() volatile
    {
        return AUTHEN_USBPHY1 & (1u << 7u);
    }

    /**
     * Set AUTHEN_USBPHY1's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void set_AUTHEN_USBPHY1_LOCK_MODE() volatile
    {
        AUTHEN_USBPHY1 |= 1u << 7u;
    }

    /**
     * Clear AUTHEN_USBPHY1's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void clear_AUTHEN_USBPHY1_LOCK_MODE() volatile
    {
        AUTHEN_USBPHY1 &= ~(1u << 7u);
    }

    /**
     * Toggle AUTHEN_USBPHY1's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void toggle_AUTHEN_USBPHY1_LOCK_MODE() volatile
    {
        AUTHEN_USBPHY1 ^= 1u << 7u;
    }

    /**
     * Get AUTHEN_USBPHY1's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline bool get_AUTHEN_USBPHY1_SETPOINT_MODE() volatile
    {
        return AUTHEN_USBPHY1 & (1u << 1u);
    }

    /**
     * Set AUTHEN_USBPHY1's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void set_AUTHEN_USBPHY1_SETPOINT_MODE() volatile
    {
        AUTHEN_USBPHY1 |= 1u << 1u;
    }

    /**
     * Clear AUTHEN_USBPHY1's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void clear_AUTHEN_USBPHY1_SETPOINT_MODE() volatile
    {
        AUTHEN_USBPHY1 &= ~(1u << 1u);
    }

    /**
     * Toggle AUTHEN_USBPHY1's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void toggle_AUTHEN_USBPHY1_SETPOINT_MODE() volatile
    {
        AUTHEN_USBPHY1 ^= 1u << 1u;
    }

    /**
     * Get AUTHEN_USBPHY1's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline bool get_AUTHEN_USBPHY1_DOMAIN_MODE() volatile
    {
        return AUTHEN_USBPHY1 & (1u << 0u);
    }

    /**
     * Set AUTHEN_USBPHY1's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void set_AUTHEN_USBPHY1_DOMAIN_MODE() volatile
    {
        AUTHEN_USBPHY1 |= 1u << 0u;
    }

    /**
     * Clear AUTHEN_USBPHY1's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void clear_AUTHEN_USBPHY1_DOMAIN_MODE() volatile
    {
        AUTHEN_USBPHY1 &= ~(1u << 0u);
    }

    /**
     * Toggle AUTHEN_USBPHY1's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void toggle_AUTHEN_USBPHY1_DOMAIN_MODE() volatile
    {
        AUTHEN_USBPHY1 ^= 1u << 0u;
    }

    /**
     * Get all of AUTHEN_USBPHY1's bit fields.
     *
     * (read-write) Slice Authentication Register
     */
    inline void get_AUTHEN_USBPHY1(bool &LOCK_SETTING, bool &NONSECURE,
                                   bool &USER, bool &LOCK_LIST,
                                   uint8_t &WHITE_LIST, bool &LOCK_ASSIGN,
                                   uint8_t &ASSIGN_LIST, bool &LOCK_MODE,
                                   bool &SETPOINT_MODE,
                                   bool &DOMAIN_MODE) volatile
    {
        uint32_t curr = AUTHEN_USBPHY1;

        LOCK_SETTING = curr & (1u << 31u);
        NONSECURE = curr & (1u << 25u);
        USER = curr & (1u << 24u);
        LOCK_LIST = curr & (1u << 23u);
        WHITE_LIST = (curr >> 16u) & 0b1111u;
        LOCK_ASSIGN = curr & (1u << 15u);
        ASSIGN_LIST = (curr >> 8u) & 0b1111u;
        LOCK_MODE = curr & (1u << 7u);
        SETPOINT_MODE = curr & (1u << 1u);
        DOMAIN_MODE = curr & (1u << 0u);
    }

    /**
     * Set all of AUTHEN_USBPHY1's bit fields.
     *
     * (read-write) Slice Authentication Register
     */
    inline void set_AUTHEN_USBPHY1(bool LOCK_SETTING, bool NONSECURE,
                                   bool USER, bool LOCK_LIST,
                                   uint8_t WHITE_LIST, bool LOCK_ASSIGN,
                                   uint8_t ASSIGN_LIST, bool LOCK_MODE,
                                   bool SETPOINT_MODE,
                                   bool DOMAIN_MODE) volatile
    {
        uint32_t curr = AUTHEN_USBPHY1;

        curr &= ~(0b1u << 31u);
        curr |= (LOCK_SETTING & 0b1u) << 31u;
        curr &= ~(0b1u << 25u);
        curr |= (NONSECURE & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (USER & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (LOCK_LIST & 0b1u) << 23u;
        curr &= ~(0b1111u << 16u);
        curr |= (WHITE_LIST & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (LOCK_ASSIGN & 0b1u) << 15u;
        curr &= ~(0b1111u << 8u);
        curr |= (ASSIGN_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (LOCK_MODE & 0b1u) << 7u;
        curr &= ~(0b1u << 1u);
        curr |= (SETPOINT_MODE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (DOMAIN_MODE & 0b1u) << 0u;

        AUTHEN_USBPHY1 = curr;
    }

    /**
     * Get CTRL_USBPHY1's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline bool get_CTRL_USBPHY1_SW_RESET() volatile
    {
        return CTRL_USBPHY1 & (1u << 0u);
    }

    /**
     * Set CTRL_USBPHY1's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void set_CTRL_USBPHY1_SW_RESET() volatile
    {
        CTRL_USBPHY1 |= 1u << 0u;
    }

    /**
     * Clear CTRL_USBPHY1's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void clear_CTRL_USBPHY1_SW_RESET() volatile
    {
        CTRL_USBPHY1 &= ~(1u << 0u);
    }

    /**
     * Toggle CTRL_USBPHY1's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void toggle_CTRL_USBPHY1_SW_RESET() volatile
    {
        CTRL_USBPHY1 ^= 1u << 0u;
    }

    /**
     * Get SETPOINT_USBPHY1's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline bool get_SETPOINT_USBPHY1_SETPOINT15() volatile
    {
        return SETPOINT_USBPHY1 & (1u << 15u);
    }

    /**
     * Set SETPOINT_USBPHY1's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void set_SETPOINT_USBPHY1_SETPOINT15() volatile
    {
        SETPOINT_USBPHY1 |= 1u << 15u;
    }

    /**
     * Clear SETPOINT_USBPHY1's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void clear_SETPOINT_USBPHY1_SETPOINT15() volatile
    {
        SETPOINT_USBPHY1 &= ~(1u << 15u);
    }

    /**
     * Toggle SETPOINT_USBPHY1's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void toggle_SETPOINT_USBPHY1_SETPOINT15() volatile
    {
        SETPOINT_USBPHY1 ^= 1u << 15u;
    }

    /**
     * Get SETPOINT_USBPHY1's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline bool get_SETPOINT_USBPHY1_SETPOINT14() volatile
    {
        return SETPOINT_USBPHY1 & (1u << 14u);
    }

    /**
     * Set SETPOINT_USBPHY1's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void set_SETPOINT_USBPHY1_SETPOINT14() volatile
    {
        SETPOINT_USBPHY1 |= 1u << 14u;
    }

    /**
     * Clear SETPOINT_USBPHY1's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void clear_SETPOINT_USBPHY1_SETPOINT14() volatile
    {
        SETPOINT_USBPHY1 &= ~(1u << 14u);
    }

    /**
     * Toggle SETPOINT_USBPHY1's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void toggle_SETPOINT_USBPHY1_SETPOINT14() volatile
    {
        SETPOINT_USBPHY1 ^= 1u << 14u;
    }

    /**
     * Get SETPOINT_USBPHY1's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline bool get_SETPOINT_USBPHY1_SETPOINT13() volatile
    {
        return SETPOINT_USBPHY1 & (1u << 13u);
    }

    /**
     * Set SETPOINT_USBPHY1's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void set_SETPOINT_USBPHY1_SETPOINT13() volatile
    {
        SETPOINT_USBPHY1 |= 1u << 13u;
    }

    /**
     * Clear SETPOINT_USBPHY1's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void clear_SETPOINT_USBPHY1_SETPOINT13() volatile
    {
        SETPOINT_USBPHY1 &= ~(1u << 13u);
    }

    /**
     * Toggle SETPOINT_USBPHY1's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void toggle_SETPOINT_USBPHY1_SETPOINT13() volatile
    {
        SETPOINT_USBPHY1 ^= 1u << 13u;
    }

    /**
     * Get SETPOINT_USBPHY1's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline bool get_SETPOINT_USBPHY1_SETPOINT12() volatile
    {
        return SETPOINT_USBPHY1 & (1u << 12u);
    }

    /**
     * Set SETPOINT_USBPHY1's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void set_SETPOINT_USBPHY1_SETPOINT12() volatile
    {
        SETPOINT_USBPHY1 |= 1u << 12u;
    }

    /**
     * Clear SETPOINT_USBPHY1's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void clear_SETPOINT_USBPHY1_SETPOINT12() volatile
    {
        SETPOINT_USBPHY1 &= ~(1u << 12u);
    }

    /**
     * Toggle SETPOINT_USBPHY1's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void toggle_SETPOINT_USBPHY1_SETPOINT12() volatile
    {
        SETPOINT_USBPHY1 ^= 1u << 12u;
    }

    /**
     * Get SETPOINT_USBPHY1's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline bool get_SETPOINT_USBPHY1_SETPOINT11() volatile
    {
        return SETPOINT_USBPHY1 & (1u << 11u);
    }

    /**
     * Set SETPOINT_USBPHY1's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void set_SETPOINT_USBPHY1_SETPOINT11() volatile
    {
        SETPOINT_USBPHY1 |= 1u << 11u;
    }

    /**
     * Clear SETPOINT_USBPHY1's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void clear_SETPOINT_USBPHY1_SETPOINT11() volatile
    {
        SETPOINT_USBPHY1 &= ~(1u << 11u);
    }

    /**
     * Toggle SETPOINT_USBPHY1's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void toggle_SETPOINT_USBPHY1_SETPOINT11() volatile
    {
        SETPOINT_USBPHY1 ^= 1u << 11u;
    }

    /**
     * Get SETPOINT_USBPHY1's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline bool get_SETPOINT_USBPHY1_SETPOINT10() volatile
    {
        return SETPOINT_USBPHY1 & (1u << 10u);
    }

    /**
     * Set SETPOINT_USBPHY1's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void set_SETPOINT_USBPHY1_SETPOINT10() volatile
    {
        SETPOINT_USBPHY1 |= 1u << 10u;
    }

    /**
     * Clear SETPOINT_USBPHY1's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void clear_SETPOINT_USBPHY1_SETPOINT10() volatile
    {
        SETPOINT_USBPHY1 &= ~(1u << 10u);
    }

    /**
     * Toggle SETPOINT_USBPHY1's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void toggle_SETPOINT_USBPHY1_SETPOINT10() volatile
    {
        SETPOINT_USBPHY1 ^= 1u << 10u;
    }

    /**
     * Get SETPOINT_USBPHY1's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline bool get_SETPOINT_USBPHY1_SETPOINT9() volatile
    {
        return SETPOINT_USBPHY1 & (1u << 9u);
    }

    /**
     * Set SETPOINT_USBPHY1's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void set_SETPOINT_USBPHY1_SETPOINT9() volatile
    {
        SETPOINT_USBPHY1 |= 1u << 9u;
    }

    /**
     * Clear SETPOINT_USBPHY1's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void clear_SETPOINT_USBPHY1_SETPOINT9() volatile
    {
        SETPOINT_USBPHY1 &= ~(1u << 9u);
    }

    /**
     * Toggle SETPOINT_USBPHY1's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void toggle_SETPOINT_USBPHY1_SETPOINT9() volatile
    {
        SETPOINT_USBPHY1 ^= 1u << 9u;
    }

    /**
     * Get SETPOINT_USBPHY1's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline bool get_SETPOINT_USBPHY1_SETPOINT8() volatile
    {
        return SETPOINT_USBPHY1 & (1u << 8u);
    }

    /**
     * Set SETPOINT_USBPHY1's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void set_SETPOINT_USBPHY1_SETPOINT8() volatile
    {
        SETPOINT_USBPHY1 |= 1u << 8u;
    }

    /**
     * Clear SETPOINT_USBPHY1's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void clear_SETPOINT_USBPHY1_SETPOINT8() volatile
    {
        SETPOINT_USBPHY1 &= ~(1u << 8u);
    }

    /**
     * Toggle SETPOINT_USBPHY1's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void toggle_SETPOINT_USBPHY1_SETPOINT8() volatile
    {
        SETPOINT_USBPHY1 ^= 1u << 8u;
    }

    /**
     * Get SETPOINT_USBPHY1's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline bool get_SETPOINT_USBPHY1_SETPOINT7() volatile
    {
        return SETPOINT_USBPHY1 & (1u << 7u);
    }

    /**
     * Set SETPOINT_USBPHY1's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void set_SETPOINT_USBPHY1_SETPOINT7() volatile
    {
        SETPOINT_USBPHY1 |= 1u << 7u;
    }

    /**
     * Clear SETPOINT_USBPHY1's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void clear_SETPOINT_USBPHY1_SETPOINT7() volatile
    {
        SETPOINT_USBPHY1 &= ~(1u << 7u);
    }

    /**
     * Toggle SETPOINT_USBPHY1's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void toggle_SETPOINT_USBPHY1_SETPOINT7() volatile
    {
        SETPOINT_USBPHY1 ^= 1u << 7u;
    }

    /**
     * Get SETPOINT_USBPHY1's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline bool get_SETPOINT_USBPHY1_SETPOINT6() volatile
    {
        return SETPOINT_USBPHY1 & (1u << 6u);
    }

    /**
     * Set SETPOINT_USBPHY1's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void set_SETPOINT_USBPHY1_SETPOINT6() volatile
    {
        SETPOINT_USBPHY1 |= 1u << 6u;
    }

    /**
     * Clear SETPOINT_USBPHY1's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void clear_SETPOINT_USBPHY1_SETPOINT6() volatile
    {
        SETPOINT_USBPHY1 &= ~(1u << 6u);
    }

    /**
     * Toggle SETPOINT_USBPHY1's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void toggle_SETPOINT_USBPHY1_SETPOINT6() volatile
    {
        SETPOINT_USBPHY1 ^= 1u << 6u;
    }

    /**
     * Get SETPOINT_USBPHY1's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline bool get_SETPOINT_USBPHY1_SETPOINT5() volatile
    {
        return SETPOINT_USBPHY1 & (1u << 5u);
    }

    /**
     * Set SETPOINT_USBPHY1's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void set_SETPOINT_USBPHY1_SETPOINT5() volatile
    {
        SETPOINT_USBPHY1 |= 1u << 5u;
    }

    /**
     * Clear SETPOINT_USBPHY1's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void clear_SETPOINT_USBPHY1_SETPOINT5() volatile
    {
        SETPOINT_USBPHY1 &= ~(1u << 5u);
    }

    /**
     * Toggle SETPOINT_USBPHY1's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void toggle_SETPOINT_USBPHY1_SETPOINT5() volatile
    {
        SETPOINT_USBPHY1 ^= 1u << 5u;
    }

    /**
     * Get SETPOINT_USBPHY1's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline bool get_SETPOINT_USBPHY1_SETPOINT4() volatile
    {
        return SETPOINT_USBPHY1 & (1u << 4u);
    }

    /**
     * Set SETPOINT_USBPHY1's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void set_SETPOINT_USBPHY1_SETPOINT4() volatile
    {
        SETPOINT_USBPHY1 |= 1u << 4u;
    }

    /**
     * Clear SETPOINT_USBPHY1's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void clear_SETPOINT_USBPHY1_SETPOINT4() volatile
    {
        SETPOINT_USBPHY1 &= ~(1u << 4u);
    }

    /**
     * Toggle SETPOINT_USBPHY1's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void toggle_SETPOINT_USBPHY1_SETPOINT4() volatile
    {
        SETPOINT_USBPHY1 ^= 1u << 4u;
    }

    /**
     * Get SETPOINT_USBPHY1's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline bool get_SETPOINT_USBPHY1_SETPOINT3() volatile
    {
        return SETPOINT_USBPHY1 & (1u << 3u);
    }

    /**
     * Set SETPOINT_USBPHY1's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void set_SETPOINT_USBPHY1_SETPOINT3() volatile
    {
        SETPOINT_USBPHY1 |= 1u << 3u;
    }

    /**
     * Clear SETPOINT_USBPHY1's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void clear_SETPOINT_USBPHY1_SETPOINT3() volatile
    {
        SETPOINT_USBPHY1 &= ~(1u << 3u);
    }

    /**
     * Toggle SETPOINT_USBPHY1's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void toggle_SETPOINT_USBPHY1_SETPOINT3() volatile
    {
        SETPOINT_USBPHY1 ^= 1u << 3u;
    }

    /**
     * Get SETPOINT_USBPHY1's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline bool get_SETPOINT_USBPHY1_SETPOINT2() volatile
    {
        return SETPOINT_USBPHY1 & (1u << 2u);
    }

    /**
     * Set SETPOINT_USBPHY1's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void set_SETPOINT_USBPHY1_SETPOINT2() volatile
    {
        SETPOINT_USBPHY1 |= 1u << 2u;
    }

    /**
     * Clear SETPOINT_USBPHY1's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void clear_SETPOINT_USBPHY1_SETPOINT2() volatile
    {
        SETPOINT_USBPHY1 &= ~(1u << 2u);
    }

    /**
     * Toggle SETPOINT_USBPHY1's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void toggle_SETPOINT_USBPHY1_SETPOINT2() volatile
    {
        SETPOINT_USBPHY1 ^= 1u << 2u;
    }

    /**
     * Get SETPOINT_USBPHY1's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline bool get_SETPOINT_USBPHY1_SETPOINT1() volatile
    {
        return SETPOINT_USBPHY1 & (1u << 1u);
    }

    /**
     * Set SETPOINT_USBPHY1's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void set_SETPOINT_USBPHY1_SETPOINT1() volatile
    {
        SETPOINT_USBPHY1 |= 1u << 1u;
    }

    /**
     * Clear SETPOINT_USBPHY1's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void clear_SETPOINT_USBPHY1_SETPOINT1() volatile
    {
        SETPOINT_USBPHY1 &= ~(1u << 1u);
    }

    /**
     * Toggle SETPOINT_USBPHY1's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void toggle_SETPOINT_USBPHY1_SETPOINT1() volatile
    {
        SETPOINT_USBPHY1 ^= 1u << 1u;
    }

    /**
     * Get SETPOINT_USBPHY1's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline bool get_SETPOINT_USBPHY1_SETPOINT0() volatile
    {
        return SETPOINT_USBPHY1 & (1u << 0u);
    }

    /**
     * Set SETPOINT_USBPHY1's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void set_SETPOINT_USBPHY1_SETPOINT0() volatile
    {
        SETPOINT_USBPHY1 |= 1u << 0u;
    }

    /**
     * Clear SETPOINT_USBPHY1's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void clear_SETPOINT_USBPHY1_SETPOINT0() volatile
    {
        SETPOINT_USBPHY1 &= ~(1u << 0u);
    }

    /**
     * Toggle SETPOINT_USBPHY1's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void toggle_SETPOINT_USBPHY1_SETPOINT0() volatile
    {
        SETPOINT_USBPHY1 ^= 1u << 0u;
    }

    /**
     * Get all of SETPOINT_USBPHY1's bit fields.
     *
     * (read-write) Slice Setpoint Config Register
     */
    inline void get_SETPOINT_USBPHY1(bool &SETPOINT15, bool &SETPOINT14,
                                     bool &SETPOINT13, bool &SETPOINT12,
                                     bool &SETPOINT11, bool &SETPOINT10,
                                     bool &SETPOINT9, bool &SETPOINT8,
                                     bool &SETPOINT7, bool &SETPOINT6,
                                     bool &SETPOINT5, bool &SETPOINT4,
                                     bool &SETPOINT3, bool &SETPOINT2,
                                     bool &SETPOINT1, bool &SETPOINT0) volatile
    {
        uint32_t curr = SETPOINT_USBPHY1;

        SETPOINT15 = curr & (1u << 15u);
        SETPOINT14 = curr & (1u << 14u);
        SETPOINT13 = curr & (1u << 13u);
        SETPOINT12 = curr & (1u << 12u);
        SETPOINT11 = curr & (1u << 11u);
        SETPOINT10 = curr & (1u << 10u);
        SETPOINT9 = curr & (1u << 9u);
        SETPOINT8 = curr & (1u << 8u);
        SETPOINT7 = curr & (1u << 7u);
        SETPOINT6 = curr & (1u << 6u);
        SETPOINT5 = curr & (1u << 5u);
        SETPOINT4 = curr & (1u << 4u);
        SETPOINT3 = curr & (1u << 3u);
        SETPOINT2 = curr & (1u << 2u);
        SETPOINT1 = curr & (1u << 1u);
        SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of SETPOINT_USBPHY1's bit fields.
     *
     * (read-write) Slice Setpoint Config Register
     */
    inline void set_SETPOINT_USBPHY1(bool SETPOINT15, bool SETPOINT14,
                                     bool SETPOINT13, bool SETPOINT12,
                                     bool SETPOINT11, bool SETPOINT10,
                                     bool SETPOINT9, bool SETPOINT8,
                                     bool SETPOINT7, bool SETPOINT6,
                                     bool SETPOINT5, bool SETPOINT4,
                                     bool SETPOINT3, bool SETPOINT2,
                                     bool SETPOINT1, bool SETPOINT0) volatile
    {
        uint32_t curr = SETPOINT_USBPHY1;

        curr &= ~(0b1u << 15u);
        curr |= (SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SETPOINT0 & 0b1u) << 0u;

        SETPOINT_USBPHY1 = curr;
    }

    /**
     * Get DOMAIN_USBPHY1's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline bool get_DOMAIN_USBPHY1_CPU1_SUSP() volatile
    {
        return DOMAIN_USBPHY1 & (1u << 7u);
    }

    /**
     * Set DOMAIN_USBPHY1's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void set_DOMAIN_USBPHY1_CPU1_SUSP() volatile
    {
        DOMAIN_USBPHY1 |= 1u << 7u;
    }

    /**
     * Clear DOMAIN_USBPHY1's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void clear_DOMAIN_USBPHY1_CPU1_SUSP() volatile
    {
        DOMAIN_USBPHY1 &= ~(1u << 7u);
    }

    /**
     * Toggle DOMAIN_USBPHY1's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void toggle_DOMAIN_USBPHY1_CPU1_SUSP() volatile
    {
        DOMAIN_USBPHY1 ^= 1u << 7u;
    }

    /**
     * Get DOMAIN_USBPHY1's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline bool get_DOMAIN_USBPHY1_CPU1_STOP() volatile
    {
        return DOMAIN_USBPHY1 & (1u << 6u);
    }

    /**
     * Set DOMAIN_USBPHY1's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void set_DOMAIN_USBPHY1_CPU1_STOP() volatile
    {
        DOMAIN_USBPHY1 |= 1u << 6u;
    }

    /**
     * Clear DOMAIN_USBPHY1's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void clear_DOMAIN_USBPHY1_CPU1_STOP() volatile
    {
        DOMAIN_USBPHY1 &= ~(1u << 6u);
    }

    /**
     * Toggle DOMAIN_USBPHY1's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void toggle_DOMAIN_USBPHY1_CPU1_STOP() volatile
    {
        DOMAIN_USBPHY1 ^= 1u << 6u;
    }

    /**
     * Get DOMAIN_USBPHY1's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline bool get_DOMAIN_USBPHY1_CPU1_WAIT() volatile
    {
        return DOMAIN_USBPHY1 & (1u << 5u);
    }

    /**
     * Set DOMAIN_USBPHY1's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void set_DOMAIN_USBPHY1_CPU1_WAIT() volatile
    {
        DOMAIN_USBPHY1 |= 1u << 5u;
    }

    /**
     * Clear DOMAIN_USBPHY1's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void clear_DOMAIN_USBPHY1_CPU1_WAIT() volatile
    {
        DOMAIN_USBPHY1 &= ~(1u << 5u);
    }

    /**
     * Toggle DOMAIN_USBPHY1's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void toggle_DOMAIN_USBPHY1_CPU1_WAIT() volatile
    {
        DOMAIN_USBPHY1 ^= 1u << 5u;
    }

    /**
     * Get DOMAIN_USBPHY1's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline bool get_DOMAIN_USBPHY1_CPU1_RUN() volatile
    {
        return DOMAIN_USBPHY1 & (1u << 4u);
    }

    /**
     * Set DOMAIN_USBPHY1's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void set_DOMAIN_USBPHY1_CPU1_RUN() volatile
    {
        DOMAIN_USBPHY1 |= 1u << 4u;
    }

    /**
     * Clear DOMAIN_USBPHY1's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void clear_DOMAIN_USBPHY1_CPU1_RUN() volatile
    {
        DOMAIN_USBPHY1 &= ~(1u << 4u);
    }

    /**
     * Toggle DOMAIN_USBPHY1's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void toggle_DOMAIN_USBPHY1_CPU1_RUN() volatile
    {
        DOMAIN_USBPHY1 ^= 1u << 4u;
    }

    /**
     * Get DOMAIN_USBPHY1's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline bool get_DOMAIN_USBPHY1_CPU0_SUSP() volatile
    {
        return DOMAIN_USBPHY1 & (1u << 3u);
    }

    /**
     * Set DOMAIN_USBPHY1's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void set_DOMAIN_USBPHY1_CPU0_SUSP() volatile
    {
        DOMAIN_USBPHY1 |= 1u << 3u;
    }

    /**
     * Clear DOMAIN_USBPHY1's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void clear_DOMAIN_USBPHY1_CPU0_SUSP() volatile
    {
        DOMAIN_USBPHY1 &= ~(1u << 3u);
    }

    /**
     * Toggle DOMAIN_USBPHY1's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void toggle_DOMAIN_USBPHY1_CPU0_SUSP() volatile
    {
        DOMAIN_USBPHY1 ^= 1u << 3u;
    }

    /**
     * Get DOMAIN_USBPHY1's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline bool get_DOMAIN_USBPHY1_CPU0_STOP() volatile
    {
        return DOMAIN_USBPHY1 & (1u << 2u);
    }

    /**
     * Set DOMAIN_USBPHY1's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void set_DOMAIN_USBPHY1_CPU0_STOP() volatile
    {
        DOMAIN_USBPHY1 |= 1u << 2u;
    }

    /**
     * Clear DOMAIN_USBPHY1's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void clear_DOMAIN_USBPHY1_CPU0_STOP() volatile
    {
        DOMAIN_USBPHY1 &= ~(1u << 2u);
    }

    /**
     * Toggle DOMAIN_USBPHY1's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void toggle_DOMAIN_USBPHY1_CPU0_STOP() volatile
    {
        DOMAIN_USBPHY1 ^= 1u << 2u;
    }

    /**
     * Get DOMAIN_USBPHY1's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline bool get_DOMAIN_USBPHY1_CPU0_WAIT() volatile
    {
        return DOMAIN_USBPHY1 & (1u << 1u);
    }

    /**
     * Set DOMAIN_USBPHY1's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void set_DOMAIN_USBPHY1_CPU0_WAIT() volatile
    {
        DOMAIN_USBPHY1 |= 1u << 1u;
    }

    /**
     * Clear DOMAIN_USBPHY1's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void clear_DOMAIN_USBPHY1_CPU0_WAIT() volatile
    {
        DOMAIN_USBPHY1 &= ~(1u << 1u);
    }

    /**
     * Toggle DOMAIN_USBPHY1's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void toggle_DOMAIN_USBPHY1_CPU0_WAIT() volatile
    {
        DOMAIN_USBPHY1 ^= 1u << 1u;
    }

    /**
     * Get DOMAIN_USBPHY1's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline bool get_DOMAIN_USBPHY1_CPU0_RUN() volatile
    {
        return DOMAIN_USBPHY1 & (1u << 0u);
    }

    /**
     * Set DOMAIN_USBPHY1's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void set_DOMAIN_USBPHY1_CPU0_RUN() volatile
    {
        DOMAIN_USBPHY1 |= 1u << 0u;
    }

    /**
     * Clear DOMAIN_USBPHY1's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void clear_DOMAIN_USBPHY1_CPU0_RUN() volatile
    {
        DOMAIN_USBPHY1 &= ~(1u << 0u);
    }

    /**
     * Toggle DOMAIN_USBPHY1's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void toggle_DOMAIN_USBPHY1_CPU0_RUN() volatile
    {
        DOMAIN_USBPHY1 ^= 1u << 0u;
    }

    /**
     * Get all of DOMAIN_USBPHY1's bit fields.
     *
     * (read-write) Slice Domain Config Register
     */
    inline void get_DOMAIN_USBPHY1(bool &CPU1_SUSP, bool &CPU1_STOP,
                                   bool &CPU1_WAIT, bool &CPU1_RUN,
                                   bool &CPU0_SUSP, bool &CPU0_STOP,
                                   bool &CPU0_WAIT, bool &CPU0_RUN) volatile
    {
        uint32_t curr = DOMAIN_USBPHY1;

        CPU1_SUSP = curr & (1u << 7u);
        CPU1_STOP = curr & (1u << 6u);
        CPU1_WAIT = curr & (1u << 5u);
        CPU1_RUN = curr & (1u << 4u);
        CPU0_SUSP = curr & (1u << 3u);
        CPU0_STOP = curr & (1u << 2u);
        CPU0_WAIT = curr & (1u << 1u);
        CPU0_RUN = curr & (1u << 0u);
    }

    /**
     * Set all of DOMAIN_USBPHY1's bit fields.
     *
     * (read-write) Slice Domain Config Register
     */
    inline void set_DOMAIN_USBPHY1(bool CPU1_SUSP, bool CPU1_STOP,
                                   bool CPU1_WAIT, bool CPU1_RUN,
                                   bool CPU0_SUSP, bool CPU0_STOP,
                                   bool CPU0_WAIT, bool CPU0_RUN) volatile
    {
        uint32_t curr = DOMAIN_USBPHY1;

        curr &= ~(0b1u << 7u);
        curr |= (CPU1_SUSP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CPU1_STOP & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (CPU1_WAIT & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (CPU1_RUN & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (CPU0_SUSP & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CPU0_STOP & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CPU0_WAIT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CPU0_RUN & 0b1u) << 0u;

        DOMAIN_USBPHY1 = curr;
    }

    /**
     * Get STAT_USBPHY1's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline bool get_STAT_USBPHY1_RST_BY_SW() volatile
    {
        return STAT_USBPHY1 & (1u << 3u);
    }

    /**
     * Set STAT_USBPHY1's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void set_STAT_USBPHY1_RST_BY_SW() volatile
    {
        STAT_USBPHY1 |= 1u << 3u;
    }

    /**
     * Clear STAT_USBPHY1's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void clear_STAT_USBPHY1_RST_BY_SW() volatile
    {
        STAT_USBPHY1 &= ~(1u << 3u);
    }

    /**
     * Toggle STAT_USBPHY1's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void toggle_STAT_USBPHY1_RST_BY_SW() volatile
    {
        STAT_USBPHY1 ^= 1u << 3u;
    }

    /**
     * Get STAT_USBPHY1's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline bool get_STAT_USBPHY1_RST_BY_HW() volatile
    {
        return STAT_USBPHY1 & (1u << 2u);
    }

    /**
     * Set STAT_USBPHY1's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void set_STAT_USBPHY1_RST_BY_HW() volatile
    {
        STAT_USBPHY1 |= 1u << 2u;
    }

    /**
     * Clear STAT_USBPHY1's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void clear_STAT_USBPHY1_RST_BY_HW() volatile
    {
        STAT_USBPHY1 &= ~(1u << 2u);
    }

    /**
     * Toggle STAT_USBPHY1's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void toggle_STAT_USBPHY1_RST_BY_HW() volatile
    {
        STAT_USBPHY1 ^= 1u << 2u;
    }

    /**
     * Get STAT_USBPHY1's UNDER_RST bit.
     *
     * This is a Read Only bit. It indicate if the reset is in process.
     */
    inline bool get_STAT_USBPHY1_UNDER_RST() volatile
    {
        return STAT_USBPHY1 & (1u << 0u);
    }

    /**
     * Get all of STAT_USBPHY1's bit fields.
     *
     * (read-write) Slice Status Register
     */
    inline void get_STAT_USBPHY1(bool &RST_BY_SW, bool &RST_BY_HW,
                                 bool &UNDER_RST) volatile
    {
        uint32_t curr = STAT_USBPHY1;

        RST_BY_SW = curr & (1u << 3u);
        RST_BY_HW = curr & (1u << 2u);
        UNDER_RST = curr & (1u << 0u);
    }

    /**
     * Set all of STAT_USBPHY1's bit fields.
     *
     * (read-write) Slice Status Register
     */
    inline void set_STAT_USBPHY1(bool RST_BY_SW, bool RST_BY_HW) volatile
    {
        uint32_t curr = STAT_USBPHY1;

        curr &= ~(0b1u << 3u);
        curr |= (RST_BY_SW & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (RST_BY_HW & 0b1u) << 2u;

        STAT_USBPHY1 = curr;
    }

    /**
     * Get AUTHEN_USBPHY2's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline bool get_AUTHEN_USBPHY2_LOCK_SETTING() volatile
    {
        return AUTHEN_USBPHY2 & (1u << 31u);
    }

    /**
     * Set AUTHEN_USBPHY2's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void set_AUTHEN_USBPHY2_LOCK_SETTING() volatile
    {
        AUTHEN_USBPHY2 |= 1u << 31u;
    }

    /**
     * Clear AUTHEN_USBPHY2's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void clear_AUTHEN_USBPHY2_LOCK_SETTING() volatile
    {
        AUTHEN_USBPHY2 &= ~(1u << 31u);
    }

    /**
     * Toggle AUTHEN_USBPHY2's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void toggle_AUTHEN_USBPHY2_LOCK_SETTING() volatile
    {
        AUTHEN_USBPHY2 ^= 1u << 31u;
    }

    /**
     * Get AUTHEN_USBPHY2's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline bool get_AUTHEN_USBPHY2_NONSECURE() volatile
    {
        return AUTHEN_USBPHY2 & (1u << 25u);
    }

    /**
     * Set AUTHEN_USBPHY2's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void set_AUTHEN_USBPHY2_NONSECURE() volatile
    {
        AUTHEN_USBPHY2 |= 1u << 25u;
    }

    /**
     * Clear AUTHEN_USBPHY2's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void clear_AUTHEN_USBPHY2_NONSECURE() volatile
    {
        AUTHEN_USBPHY2 &= ~(1u << 25u);
    }

    /**
     * Toggle AUTHEN_USBPHY2's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void toggle_AUTHEN_USBPHY2_NONSECURE() volatile
    {
        AUTHEN_USBPHY2 ^= 1u << 25u;
    }

    /**
     * Get AUTHEN_USBPHY2's USER bit.
     *
     * Allow user mode access
     */
    inline bool get_AUTHEN_USBPHY2_USER() volatile
    {
        return AUTHEN_USBPHY2 & (1u << 24u);
    }

    /**
     * Set AUTHEN_USBPHY2's USER bit.
     *
     * Allow user mode access
     */
    inline void set_AUTHEN_USBPHY2_USER() volatile
    {
        AUTHEN_USBPHY2 |= 1u << 24u;
    }

    /**
     * Clear AUTHEN_USBPHY2's USER bit.
     *
     * Allow user mode access
     */
    inline void clear_AUTHEN_USBPHY2_USER() volatile
    {
        AUTHEN_USBPHY2 &= ~(1u << 24u);
    }

    /**
     * Toggle AUTHEN_USBPHY2's USER bit.
     *
     * Allow user mode access
     */
    inline void toggle_AUTHEN_USBPHY2_USER() volatile
    {
        AUTHEN_USBPHY2 ^= 1u << 24u;
    }

    /**
     * Get AUTHEN_USBPHY2's LOCK_LIST bit.
     *
     * White list lock
     */
    inline bool get_AUTHEN_USBPHY2_LOCK_LIST() volatile
    {
        return AUTHEN_USBPHY2 & (1u << 23u);
    }

    /**
     * Set AUTHEN_USBPHY2's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void set_AUTHEN_USBPHY2_LOCK_LIST() volatile
    {
        AUTHEN_USBPHY2 |= 1u << 23u;
    }

    /**
     * Clear AUTHEN_USBPHY2's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void clear_AUTHEN_USBPHY2_LOCK_LIST() volatile
    {
        AUTHEN_USBPHY2 &= ~(1u << 23u);
    }

    /**
     * Toggle AUTHEN_USBPHY2's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void toggle_AUTHEN_USBPHY2_LOCK_LIST() volatile
    {
        AUTHEN_USBPHY2 ^= 1u << 23u;
    }

    /**
     * Get AUTHEN_USBPHY2's WHITE_LIST field.
     *
     * Domain ID white list
     */
    inline uint8_t get_AUTHEN_USBPHY2_WHITE_LIST() volatile
    {
        return (AUTHEN_USBPHY2 >> 16u) & 0b1111u;
    }

    /**
     * Set AUTHEN_USBPHY2's WHITE_LIST field.
     *
     * Domain ID white list
     */
    inline void set_AUTHEN_USBPHY2_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = AUTHEN_USBPHY2;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        AUTHEN_USBPHY2 = curr;
    }

    /**
     * Get AUTHEN_USBPHY2's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline bool get_AUTHEN_USBPHY2_LOCK_ASSIGN() volatile
    {
        return AUTHEN_USBPHY2 & (1u << 15u);
    }

    /**
     * Set AUTHEN_USBPHY2's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void set_AUTHEN_USBPHY2_LOCK_ASSIGN() volatile
    {
        AUTHEN_USBPHY2 |= 1u << 15u;
    }

    /**
     * Clear AUTHEN_USBPHY2's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void clear_AUTHEN_USBPHY2_LOCK_ASSIGN() volatile
    {
        AUTHEN_USBPHY2 &= ~(1u << 15u);
    }

    /**
     * Toggle AUTHEN_USBPHY2's LOCK_ASSIGN bit.
     *
     * Assign list lock
     */
    inline void toggle_AUTHEN_USBPHY2_LOCK_ASSIGN() volatile
    {
        AUTHEN_USBPHY2 ^= 1u << 15u;
    }

    /**
     * Get AUTHEN_USBPHY2's ASSIGN_LIST field.
     *
     * when this bitfield set to 1, reset of slice would be subject to
     * corresponding core status transition
     */
    inline uint8_t get_AUTHEN_USBPHY2_ASSIGN_LIST() volatile
    {
        return (AUTHEN_USBPHY2 >> 8u) & 0b1111u;
    }

    /**
     * Set AUTHEN_USBPHY2's ASSIGN_LIST field.
     *
     * when this bitfield set to 1, reset of slice would be subject to
     * corresponding core status transition
     */
    inline void set_AUTHEN_USBPHY2_ASSIGN_LIST(uint8_t value) volatile
    {
        uint32_t curr = AUTHEN_USBPHY2;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        AUTHEN_USBPHY2 = curr;
    }

    /**
     * Get AUTHEN_USBPHY2's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline bool get_AUTHEN_USBPHY2_LOCK_MODE() volatile
    {
        return AUTHEN_USBPHY2 & (1u << 7u);
    }

    /**
     * Set AUTHEN_USBPHY2's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void set_AUTHEN_USBPHY2_LOCK_MODE() volatile
    {
        AUTHEN_USBPHY2 |= 1u << 7u;
    }

    /**
     * Clear AUTHEN_USBPHY2's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void clear_AUTHEN_USBPHY2_LOCK_MODE() volatile
    {
        AUTHEN_USBPHY2 &= ~(1u << 7u);
    }

    /**
     * Toggle AUTHEN_USBPHY2's LOCK_MODE bit.
     *
     * Domain/Setpoint mode lock
     */
    inline void toggle_AUTHEN_USBPHY2_LOCK_MODE() volatile
    {
        AUTHEN_USBPHY2 ^= 1u << 7u;
    }

    /**
     * Get AUTHEN_USBPHY2's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline bool get_AUTHEN_USBPHY2_SETPOINT_MODE() volatile
    {
        return AUTHEN_USBPHY2 & (1u << 1u);
    }

    /**
     * Set AUTHEN_USBPHY2's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void set_AUTHEN_USBPHY2_SETPOINT_MODE() volatile
    {
        AUTHEN_USBPHY2 |= 1u << 1u;
    }

    /**
     * Clear AUTHEN_USBPHY2's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void clear_AUTHEN_USBPHY2_SETPOINT_MODE() volatile
    {
        AUTHEN_USBPHY2 &= ~(1u << 1u);
    }

    /**
     * Toggle AUTHEN_USBPHY2's SETPOINT_MODE bit.
     *
     * Control whether reset slice is in Setpoint mode
     */
    inline void toggle_AUTHEN_USBPHY2_SETPOINT_MODE() volatile
    {
        AUTHEN_USBPHY2 ^= 1u << 1u;
    }

    /**
     * Get AUTHEN_USBPHY2's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline bool get_AUTHEN_USBPHY2_DOMAIN_MODE() volatile
    {
        return AUTHEN_USBPHY2 & (1u << 0u);
    }

    /**
     * Set AUTHEN_USBPHY2's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void set_AUTHEN_USBPHY2_DOMAIN_MODE() volatile
    {
        AUTHEN_USBPHY2 |= 1u << 0u;
    }

    /**
     * Clear AUTHEN_USBPHY2's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void clear_AUTHEN_USBPHY2_DOMAIN_MODE() volatile
    {
        AUTHEN_USBPHY2 &= ~(1u << 0u);
    }

    /**
     * Toggle AUTHEN_USBPHY2's DOMAIN_MODE bit.
     *
     * Control whether reset slice is in domain mode
     */
    inline void toggle_AUTHEN_USBPHY2_DOMAIN_MODE() volatile
    {
        AUTHEN_USBPHY2 ^= 1u << 0u;
    }

    /**
     * Get all of AUTHEN_USBPHY2's bit fields.
     *
     * (read-write) Slice Authentication Register
     */
    inline void get_AUTHEN_USBPHY2(bool &LOCK_SETTING, bool &NONSECURE,
                                   bool &USER, bool &LOCK_LIST,
                                   uint8_t &WHITE_LIST, bool &LOCK_ASSIGN,
                                   uint8_t &ASSIGN_LIST, bool &LOCK_MODE,
                                   bool &SETPOINT_MODE,
                                   bool &DOMAIN_MODE) volatile
    {
        uint32_t curr = AUTHEN_USBPHY2;

        LOCK_SETTING = curr & (1u << 31u);
        NONSECURE = curr & (1u << 25u);
        USER = curr & (1u << 24u);
        LOCK_LIST = curr & (1u << 23u);
        WHITE_LIST = (curr >> 16u) & 0b1111u;
        LOCK_ASSIGN = curr & (1u << 15u);
        ASSIGN_LIST = (curr >> 8u) & 0b1111u;
        LOCK_MODE = curr & (1u << 7u);
        SETPOINT_MODE = curr & (1u << 1u);
        DOMAIN_MODE = curr & (1u << 0u);
    }

    /**
     * Set all of AUTHEN_USBPHY2's bit fields.
     *
     * (read-write) Slice Authentication Register
     */
    inline void set_AUTHEN_USBPHY2(bool LOCK_SETTING, bool NONSECURE,
                                   bool USER, bool LOCK_LIST,
                                   uint8_t WHITE_LIST, bool LOCK_ASSIGN,
                                   uint8_t ASSIGN_LIST, bool LOCK_MODE,
                                   bool SETPOINT_MODE,
                                   bool DOMAIN_MODE) volatile
    {
        uint32_t curr = AUTHEN_USBPHY2;

        curr &= ~(0b1u << 31u);
        curr |= (LOCK_SETTING & 0b1u) << 31u;
        curr &= ~(0b1u << 25u);
        curr |= (NONSECURE & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (USER & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (LOCK_LIST & 0b1u) << 23u;
        curr &= ~(0b1111u << 16u);
        curr |= (WHITE_LIST & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (LOCK_ASSIGN & 0b1u) << 15u;
        curr &= ~(0b1111u << 8u);
        curr |= (ASSIGN_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (LOCK_MODE & 0b1u) << 7u;
        curr &= ~(0b1u << 1u);
        curr |= (SETPOINT_MODE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (DOMAIN_MODE & 0b1u) << 0u;

        AUTHEN_USBPHY2 = curr;
    }

    /**
     * Get CTRL_USBPHY2's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline bool get_CTRL_USBPHY2_SW_RESET() volatile
    {
        return CTRL_USBPHY2 & (1u << 0u);
    }

    /**
     * Set CTRL_USBPHY2's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void set_CTRL_USBPHY2_SW_RESET() volatile
    {
        CTRL_USBPHY2 |= 1u << 0u;
    }

    /**
     * Clear CTRL_USBPHY2's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void clear_CTRL_USBPHY2_SW_RESET() volatile
    {
        CTRL_USBPHY2 &= ~(1u << 0u);
    }

    /**
     * Toggle CTRL_USBPHY2's SW_RESET bit.
     *
     * This is a self clearing bit
     */
    inline void toggle_CTRL_USBPHY2_SW_RESET() volatile
    {
        CTRL_USBPHY2 ^= 1u << 0u;
    }

    /**
     * Get SETPOINT_USBPHY2's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline bool get_SETPOINT_USBPHY2_SETPOINT15() volatile
    {
        return SETPOINT_USBPHY2 & (1u << 15u);
    }

    /**
     * Set SETPOINT_USBPHY2's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void set_SETPOINT_USBPHY2_SETPOINT15() volatile
    {
        SETPOINT_USBPHY2 |= 1u << 15u;
    }

    /**
     * Clear SETPOINT_USBPHY2's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void clear_SETPOINT_USBPHY2_SETPOINT15() volatile
    {
        SETPOINT_USBPHY2 &= ~(1u << 15u);
    }

    /**
     * Toggle SETPOINT_USBPHY2's SETPOINT15 bit.
     *
     * SETPOINT15
     */
    inline void toggle_SETPOINT_USBPHY2_SETPOINT15() volatile
    {
        SETPOINT_USBPHY2 ^= 1u << 15u;
    }

    /**
     * Get SETPOINT_USBPHY2's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline bool get_SETPOINT_USBPHY2_SETPOINT14() volatile
    {
        return SETPOINT_USBPHY2 & (1u << 14u);
    }

    /**
     * Set SETPOINT_USBPHY2's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void set_SETPOINT_USBPHY2_SETPOINT14() volatile
    {
        SETPOINT_USBPHY2 |= 1u << 14u;
    }

    /**
     * Clear SETPOINT_USBPHY2's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void clear_SETPOINT_USBPHY2_SETPOINT14() volatile
    {
        SETPOINT_USBPHY2 &= ~(1u << 14u);
    }

    /**
     * Toggle SETPOINT_USBPHY2's SETPOINT14 bit.
     *
     * SETPOINT14
     */
    inline void toggle_SETPOINT_USBPHY2_SETPOINT14() volatile
    {
        SETPOINT_USBPHY2 ^= 1u << 14u;
    }

    /**
     * Get SETPOINT_USBPHY2's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline bool get_SETPOINT_USBPHY2_SETPOINT13() volatile
    {
        return SETPOINT_USBPHY2 & (1u << 13u);
    }

    /**
     * Set SETPOINT_USBPHY2's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void set_SETPOINT_USBPHY2_SETPOINT13() volatile
    {
        SETPOINT_USBPHY2 |= 1u << 13u;
    }

    /**
     * Clear SETPOINT_USBPHY2's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void clear_SETPOINT_USBPHY2_SETPOINT13() volatile
    {
        SETPOINT_USBPHY2 &= ~(1u << 13u);
    }

    /**
     * Toggle SETPOINT_USBPHY2's SETPOINT13 bit.
     *
     * SETPOINT13
     */
    inline void toggle_SETPOINT_USBPHY2_SETPOINT13() volatile
    {
        SETPOINT_USBPHY2 ^= 1u << 13u;
    }

    /**
     * Get SETPOINT_USBPHY2's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline bool get_SETPOINT_USBPHY2_SETPOINT12() volatile
    {
        return SETPOINT_USBPHY2 & (1u << 12u);
    }

    /**
     * Set SETPOINT_USBPHY2's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void set_SETPOINT_USBPHY2_SETPOINT12() volatile
    {
        SETPOINT_USBPHY2 |= 1u << 12u;
    }

    /**
     * Clear SETPOINT_USBPHY2's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void clear_SETPOINT_USBPHY2_SETPOINT12() volatile
    {
        SETPOINT_USBPHY2 &= ~(1u << 12u);
    }

    /**
     * Toggle SETPOINT_USBPHY2's SETPOINT12 bit.
     *
     * SETPOINT12
     */
    inline void toggle_SETPOINT_USBPHY2_SETPOINT12() volatile
    {
        SETPOINT_USBPHY2 ^= 1u << 12u;
    }

    /**
     * Get SETPOINT_USBPHY2's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline bool get_SETPOINT_USBPHY2_SETPOINT11() volatile
    {
        return SETPOINT_USBPHY2 & (1u << 11u);
    }

    /**
     * Set SETPOINT_USBPHY2's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void set_SETPOINT_USBPHY2_SETPOINT11() volatile
    {
        SETPOINT_USBPHY2 |= 1u << 11u;
    }

    /**
     * Clear SETPOINT_USBPHY2's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void clear_SETPOINT_USBPHY2_SETPOINT11() volatile
    {
        SETPOINT_USBPHY2 &= ~(1u << 11u);
    }

    /**
     * Toggle SETPOINT_USBPHY2's SETPOINT11 bit.
     *
     * SETPOINT11
     */
    inline void toggle_SETPOINT_USBPHY2_SETPOINT11() volatile
    {
        SETPOINT_USBPHY2 ^= 1u << 11u;
    }

    /**
     * Get SETPOINT_USBPHY2's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline bool get_SETPOINT_USBPHY2_SETPOINT10() volatile
    {
        return SETPOINT_USBPHY2 & (1u << 10u);
    }

    /**
     * Set SETPOINT_USBPHY2's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void set_SETPOINT_USBPHY2_SETPOINT10() volatile
    {
        SETPOINT_USBPHY2 |= 1u << 10u;
    }

    /**
     * Clear SETPOINT_USBPHY2's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void clear_SETPOINT_USBPHY2_SETPOINT10() volatile
    {
        SETPOINT_USBPHY2 &= ~(1u << 10u);
    }

    /**
     * Toggle SETPOINT_USBPHY2's SETPOINT10 bit.
     *
     * SETPOINT10
     */
    inline void toggle_SETPOINT_USBPHY2_SETPOINT10() volatile
    {
        SETPOINT_USBPHY2 ^= 1u << 10u;
    }

    /**
     * Get SETPOINT_USBPHY2's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline bool get_SETPOINT_USBPHY2_SETPOINT9() volatile
    {
        return SETPOINT_USBPHY2 & (1u << 9u);
    }

    /**
     * Set SETPOINT_USBPHY2's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void set_SETPOINT_USBPHY2_SETPOINT9() volatile
    {
        SETPOINT_USBPHY2 |= 1u << 9u;
    }

    /**
     * Clear SETPOINT_USBPHY2's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void clear_SETPOINT_USBPHY2_SETPOINT9() volatile
    {
        SETPOINT_USBPHY2 &= ~(1u << 9u);
    }

    /**
     * Toggle SETPOINT_USBPHY2's SETPOINT9 bit.
     *
     * SETPOINT9
     */
    inline void toggle_SETPOINT_USBPHY2_SETPOINT9() volatile
    {
        SETPOINT_USBPHY2 ^= 1u << 9u;
    }

    /**
     * Get SETPOINT_USBPHY2's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline bool get_SETPOINT_USBPHY2_SETPOINT8() volatile
    {
        return SETPOINT_USBPHY2 & (1u << 8u);
    }

    /**
     * Set SETPOINT_USBPHY2's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void set_SETPOINT_USBPHY2_SETPOINT8() volatile
    {
        SETPOINT_USBPHY2 |= 1u << 8u;
    }

    /**
     * Clear SETPOINT_USBPHY2's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void clear_SETPOINT_USBPHY2_SETPOINT8() volatile
    {
        SETPOINT_USBPHY2 &= ~(1u << 8u);
    }

    /**
     * Toggle SETPOINT_USBPHY2's SETPOINT8 bit.
     *
     * SETPOINT8
     */
    inline void toggle_SETPOINT_USBPHY2_SETPOINT8() volatile
    {
        SETPOINT_USBPHY2 ^= 1u << 8u;
    }

    /**
     * Get SETPOINT_USBPHY2's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline bool get_SETPOINT_USBPHY2_SETPOINT7() volatile
    {
        return SETPOINT_USBPHY2 & (1u << 7u);
    }

    /**
     * Set SETPOINT_USBPHY2's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void set_SETPOINT_USBPHY2_SETPOINT7() volatile
    {
        SETPOINT_USBPHY2 |= 1u << 7u;
    }

    /**
     * Clear SETPOINT_USBPHY2's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void clear_SETPOINT_USBPHY2_SETPOINT7() volatile
    {
        SETPOINT_USBPHY2 &= ~(1u << 7u);
    }

    /**
     * Toggle SETPOINT_USBPHY2's SETPOINT7 bit.
     *
     * SETPOINT7
     */
    inline void toggle_SETPOINT_USBPHY2_SETPOINT7() volatile
    {
        SETPOINT_USBPHY2 ^= 1u << 7u;
    }

    /**
     * Get SETPOINT_USBPHY2's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline bool get_SETPOINT_USBPHY2_SETPOINT6() volatile
    {
        return SETPOINT_USBPHY2 & (1u << 6u);
    }

    /**
     * Set SETPOINT_USBPHY2's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void set_SETPOINT_USBPHY2_SETPOINT6() volatile
    {
        SETPOINT_USBPHY2 |= 1u << 6u;
    }

    /**
     * Clear SETPOINT_USBPHY2's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void clear_SETPOINT_USBPHY2_SETPOINT6() volatile
    {
        SETPOINT_USBPHY2 &= ~(1u << 6u);
    }

    /**
     * Toggle SETPOINT_USBPHY2's SETPOINT6 bit.
     *
     * SETPOINT6
     */
    inline void toggle_SETPOINT_USBPHY2_SETPOINT6() volatile
    {
        SETPOINT_USBPHY2 ^= 1u << 6u;
    }

    /**
     * Get SETPOINT_USBPHY2's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline bool get_SETPOINT_USBPHY2_SETPOINT5() volatile
    {
        return SETPOINT_USBPHY2 & (1u << 5u);
    }

    /**
     * Set SETPOINT_USBPHY2's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void set_SETPOINT_USBPHY2_SETPOINT5() volatile
    {
        SETPOINT_USBPHY2 |= 1u << 5u;
    }

    /**
     * Clear SETPOINT_USBPHY2's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void clear_SETPOINT_USBPHY2_SETPOINT5() volatile
    {
        SETPOINT_USBPHY2 &= ~(1u << 5u);
    }

    /**
     * Toggle SETPOINT_USBPHY2's SETPOINT5 bit.
     *
     * SETPOINT5
     */
    inline void toggle_SETPOINT_USBPHY2_SETPOINT5() volatile
    {
        SETPOINT_USBPHY2 ^= 1u << 5u;
    }

    /**
     * Get SETPOINT_USBPHY2's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline bool get_SETPOINT_USBPHY2_SETPOINT4() volatile
    {
        return SETPOINT_USBPHY2 & (1u << 4u);
    }

    /**
     * Set SETPOINT_USBPHY2's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void set_SETPOINT_USBPHY2_SETPOINT4() volatile
    {
        SETPOINT_USBPHY2 |= 1u << 4u;
    }

    /**
     * Clear SETPOINT_USBPHY2's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void clear_SETPOINT_USBPHY2_SETPOINT4() volatile
    {
        SETPOINT_USBPHY2 &= ~(1u << 4u);
    }

    /**
     * Toggle SETPOINT_USBPHY2's SETPOINT4 bit.
     *
     * SETPOINT4
     */
    inline void toggle_SETPOINT_USBPHY2_SETPOINT4() volatile
    {
        SETPOINT_USBPHY2 ^= 1u << 4u;
    }

    /**
     * Get SETPOINT_USBPHY2's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline bool get_SETPOINT_USBPHY2_SETPOINT3() volatile
    {
        return SETPOINT_USBPHY2 & (1u << 3u);
    }

    /**
     * Set SETPOINT_USBPHY2's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void set_SETPOINT_USBPHY2_SETPOINT3() volatile
    {
        SETPOINT_USBPHY2 |= 1u << 3u;
    }

    /**
     * Clear SETPOINT_USBPHY2's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void clear_SETPOINT_USBPHY2_SETPOINT3() volatile
    {
        SETPOINT_USBPHY2 &= ~(1u << 3u);
    }

    /**
     * Toggle SETPOINT_USBPHY2's SETPOINT3 bit.
     *
     * SETPOINT3
     */
    inline void toggle_SETPOINT_USBPHY2_SETPOINT3() volatile
    {
        SETPOINT_USBPHY2 ^= 1u << 3u;
    }

    /**
     * Get SETPOINT_USBPHY2's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline bool get_SETPOINT_USBPHY2_SETPOINT2() volatile
    {
        return SETPOINT_USBPHY2 & (1u << 2u);
    }

    /**
     * Set SETPOINT_USBPHY2's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void set_SETPOINT_USBPHY2_SETPOINT2() volatile
    {
        SETPOINT_USBPHY2 |= 1u << 2u;
    }

    /**
     * Clear SETPOINT_USBPHY2's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void clear_SETPOINT_USBPHY2_SETPOINT2() volatile
    {
        SETPOINT_USBPHY2 &= ~(1u << 2u);
    }

    /**
     * Toggle SETPOINT_USBPHY2's SETPOINT2 bit.
     *
     * SETPOINT2
     */
    inline void toggle_SETPOINT_USBPHY2_SETPOINT2() volatile
    {
        SETPOINT_USBPHY2 ^= 1u << 2u;
    }

    /**
     * Get SETPOINT_USBPHY2's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline bool get_SETPOINT_USBPHY2_SETPOINT1() volatile
    {
        return SETPOINT_USBPHY2 & (1u << 1u);
    }

    /**
     * Set SETPOINT_USBPHY2's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void set_SETPOINT_USBPHY2_SETPOINT1() volatile
    {
        SETPOINT_USBPHY2 |= 1u << 1u;
    }

    /**
     * Clear SETPOINT_USBPHY2's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void clear_SETPOINT_USBPHY2_SETPOINT1() volatile
    {
        SETPOINT_USBPHY2 &= ~(1u << 1u);
    }

    /**
     * Toggle SETPOINT_USBPHY2's SETPOINT1 bit.
     *
     * SETPOINT1
     */
    inline void toggle_SETPOINT_USBPHY2_SETPOINT1() volatile
    {
        SETPOINT_USBPHY2 ^= 1u << 1u;
    }

    /**
     * Get SETPOINT_USBPHY2's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline bool get_SETPOINT_USBPHY2_SETPOINT0() volatile
    {
        return SETPOINT_USBPHY2 & (1u << 0u);
    }

    /**
     * Set SETPOINT_USBPHY2's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void set_SETPOINT_USBPHY2_SETPOINT0() volatile
    {
        SETPOINT_USBPHY2 |= 1u << 0u;
    }

    /**
     * Clear SETPOINT_USBPHY2's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void clear_SETPOINT_USBPHY2_SETPOINT0() volatile
    {
        SETPOINT_USBPHY2 &= ~(1u << 0u);
    }

    /**
     * Toggle SETPOINT_USBPHY2's SETPOINT0 bit.
     *
     * SETPOINT0
     */
    inline void toggle_SETPOINT_USBPHY2_SETPOINT0() volatile
    {
        SETPOINT_USBPHY2 ^= 1u << 0u;
    }

    /**
     * Get all of SETPOINT_USBPHY2's bit fields.
     *
     * (read-write) Slice Setpoint Config Register
     */
    inline void get_SETPOINT_USBPHY2(bool &SETPOINT15, bool &SETPOINT14,
                                     bool &SETPOINT13, bool &SETPOINT12,
                                     bool &SETPOINT11, bool &SETPOINT10,
                                     bool &SETPOINT9, bool &SETPOINT8,
                                     bool &SETPOINT7, bool &SETPOINT6,
                                     bool &SETPOINT5, bool &SETPOINT4,
                                     bool &SETPOINT3, bool &SETPOINT2,
                                     bool &SETPOINT1, bool &SETPOINT0) volatile
    {
        uint32_t curr = SETPOINT_USBPHY2;

        SETPOINT15 = curr & (1u << 15u);
        SETPOINT14 = curr & (1u << 14u);
        SETPOINT13 = curr & (1u << 13u);
        SETPOINT12 = curr & (1u << 12u);
        SETPOINT11 = curr & (1u << 11u);
        SETPOINT10 = curr & (1u << 10u);
        SETPOINT9 = curr & (1u << 9u);
        SETPOINT8 = curr & (1u << 8u);
        SETPOINT7 = curr & (1u << 7u);
        SETPOINT6 = curr & (1u << 6u);
        SETPOINT5 = curr & (1u << 5u);
        SETPOINT4 = curr & (1u << 4u);
        SETPOINT3 = curr & (1u << 3u);
        SETPOINT2 = curr & (1u << 2u);
        SETPOINT1 = curr & (1u << 1u);
        SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of SETPOINT_USBPHY2's bit fields.
     *
     * (read-write) Slice Setpoint Config Register
     */
    inline void set_SETPOINT_USBPHY2(bool SETPOINT15, bool SETPOINT14,
                                     bool SETPOINT13, bool SETPOINT12,
                                     bool SETPOINT11, bool SETPOINT10,
                                     bool SETPOINT9, bool SETPOINT8,
                                     bool SETPOINT7, bool SETPOINT6,
                                     bool SETPOINT5, bool SETPOINT4,
                                     bool SETPOINT3, bool SETPOINT2,
                                     bool SETPOINT1, bool SETPOINT0) volatile
    {
        uint32_t curr = SETPOINT_USBPHY2;

        curr &= ~(0b1u << 15u);
        curr |= (SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SETPOINT0 & 0b1u) << 0u;

        SETPOINT_USBPHY2 = curr;
    }

    /**
     * Get DOMAIN_USBPHY2's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline bool get_DOMAIN_USBPHY2_CPU1_SUSP() volatile
    {
        return DOMAIN_USBPHY2 & (1u << 7u);
    }

    /**
     * Set DOMAIN_USBPHY2's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void set_DOMAIN_USBPHY2_CPU1_SUSP() volatile
    {
        DOMAIN_USBPHY2 |= 1u << 7u;
    }

    /**
     * Clear DOMAIN_USBPHY2's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void clear_DOMAIN_USBPHY2_CPU1_SUSP() volatile
    {
        DOMAIN_USBPHY2 &= ~(1u << 7u);
    }

    /**
     * Toggle DOMAIN_USBPHY2's CPU1_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void toggle_DOMAIN_USBPHY2_CPU1_SUSP() volatile
    {
        DOMAIN_USBPHY2 ^= 1u << 7u;
    }

    /**
     * Get DOMAIN_USBPHY2's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline bool get_DOMAIN_USBPHY2_CPU1_STOP() volatile
    {
        return DOMAIN_USBPHY2 & (1u << 6u);
    }

    /**
     * Set DOMAIN_USBPHY2's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void set_DOMAIN_USBPHY2_CPU1_STOP() volatile
    {
        DOMAIN_USBPHY2 |= 1u << 6u;
    }

    /**
     * Clear DOMAIN_USBPHY2's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void clear_DOMAIN_USBPHY2_CPU1_STOP() volatile
    {
        DOMAIN_USBPHY2 &= ~(1u << 6u);
    }

    /**
     * Toggle DOMAIN_USBPHY2's CPU1_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void toggle_DOMAIN_USBPHY2_CPU1_STOP() volatile
    {
        DOMAIN_USBPHY2 ^= 1u << 6u;
    }

    /**
     * Get DOMAIN_USBPHY2's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline bool get_DOMAIN_USBPHY2_CPU1_WAIT() volatile
    {
        return DOMAIN_USBPHY2 & (1u << 5u);
    }

    /**
     * Set DOMAIN_USBPHY2's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void set_DOMAIN_USBPHY2_CPU1_WAIT() volatile
    {
        DOMAIN_USBPHY2 |= 1u << 5u;
    }

    /**
     * Clear DOMAIN_USBPHY2's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void clear_DOMAIN_USBPHY2_CPU1_WAIT() volatile
    {
        DOMAIN_USBPHY2 &= ~(1u << 5u);
    }

    /**
     * Toggle DOMAIN_USBPHY2's CPU1_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void toggle_DOMAIN_USBPHY2_CPU1_WAIT() volatile
    {
        DOMAIN_USBPHY2 ^= 1u << 5u;
    }

    /**
     * Get DOMAIN_USBPHY2's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline bool get_DOMAIN_USBPHY2_CPU1_RUN() volatile
    {
        return DOMAIN_USBPHY2 & (1u << 4u);
    }

    /**
     * Set DOMAIN_USBPHY2's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void set_DOMAIN_USBPHY2_CPU1_RUN() volatile
    {
        DOMAIN_USBPHY2 |= 1u << 4u;
    }

    /**
     * Clear DOMAIN_USBPHY2's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void clear_DOMAIN_USBPHY2_CPU1_RUN() volatile
    {
        DOMAIN_USBPHY2 &= ~(1u << 4u);
    }

    /**
     * Toggle DOMAIN_USBPHY2's CPU1_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void toggle_DOMAIN_USBPHY2_CPU1_RUN() volatile
    {
        DOMAIN_USBPHY2 ^= 1u << 4u;
    }

    /**
     * Get DOMAIN_USBPHY2's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline bool get_DOMAIN_USBPHY2_CPU0_SUSP() volatile
    {
        return DOMAIN_USBPHY2 & (1u << 3u);
    }

    /**
     * Set DOMAIN_USBPHY2's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void set_DOMAIN_USBPHY2_CPU0_SUSP() volatile
    {
        DOMAIN_USBPHY2 |= 1u << 3u;
    }

    /**
     * Clear DOMAIN_USBPHY2's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void clear_DOMAIN_USBPHY2_CPU0_SUSP() volatile
    {
        DOMAIN_USBPHY2 &= ~(1u << 3u);
    }

    /**
     * Toggle DOMAIN_USBPHY2's CPU0_SUSP bit.
     *
     * CPU mode setting for SUSPEND
     */
    inline void toggle_DOMAIN_USBPHY2_CPU0_SUSP() volatile
    {
        DOMAIN_USBPHY2 ^= 1u << 3u;
    }

    /**
     * Get DOMAIN_USBPHY2's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline bool get_DOMAIN_USBPHY2_CPU0_STOP() volatile
    {
        return DOMAIN_USBPHY2 & (1u << 2u);
    }

    /**
     * Set DOMAIN_USBPHY2's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void set_DOMAIN_USBPHY2_CPU0_STOP() volatile
    {
        DOMAIN_USBPHY2 |= 1u << 2u;
    }

    /**
     * Clear DOMAIN_USBPHY2's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void clear_DOMAIN_USBPHY2_CPU0_STOP() volatile
    {
        DOMAIN_USBPHY2 &= ~(1u << 2u);
    }

    /**
     * Toggle DOMAIN_USBPHY2's CPU0_STOP bit.
     *
     * CPU mode setting for STOP
     */
    inline void toggle_DOMAIN_USBPHY2_CPU0_STOP() volatile
    {
        DOMAIN_USBPHY2 ^= 1u << 2u;
    }

    /**
     * Get DOMAIN_USBPHY2's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline bool get_DOMAIN_USBPHY2_CPU0_WAIT() volatile
    {
        return DOMAIN_USBPHY2 & (1u << 1u);
    }

    /**
     * Set DOMAIN_USBPHY2's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void set_DOMAIN_USBPHY2_CPU0_WAIT() volatile
    {
        DOMAIN_USBPHY2 |= 1u << 1u;
    }

    /**
     * Clear DOMAIN_USBPHY2's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void clear_DOMAIN_USBPHY2_CPU0_WAIT() volatile
    {
        DOMAIN_USBPHY2 &= ~(1u << 1u);
    }

    /**
     * Toggle DOMAIN_USBPHY2's CPU0_WAIT bit.
     *
     * CPU mode setting for WAIT
     */
    inline void toggle_DOMAIN_USBPHY2_CPU0_WAIT() volatile
    {
        DOMAIN_USBPHY2 ^= 1u << 1u;
    }

    /**
     * Get DOMAIN_USBPHY2's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline bool get_DOMAIN_USBPHY2_CPU0_RUN() volatile
    {
        return DOMAIN_USBPHY2 & (1u << 0u);
    }

    /**
     * Set DOMAIN_USBPHY2's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void set_DOMAIN_USBPHY2_CPU0_RUN() volatile
    {
        DOMAIN_USBPHY2 |= 1u << 0u;
    }

    /**
     * Clear DOMAIN_USBPHY2's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void clear_DOMAIN_USBPHY2_CPU0_RUN() volatile
    {
        DOMAIN_USBPHY2 &= ~(1u << 0u);
    }

    /**
     * Toggle DOMAIN_USBPHY2's CPU0_RUN bit.
     *
     * CPU mode setting for RUN
     */
    inline void toggle_DOMAIN_USBPHY2_CPU0_RUN() volatile
    {
        DOMAIN_USBPHY2 ^= 1u << 0u;
    }

    /**
     * Get all of DOMAIN_USBPHY2's bit fields.
     *
     * (read-write) Slice Domain Config Register
     */
    inline void get_DOMAIN_USBPHY2(bool &CPU1_SUSP, bool &CPU1_STOP,
                                   bool &CPU1_WAIT, bool &CPU1_RUN,
                                   bool &CPU0_SUSP, bool &CPU0_STOP,
                                   bool &CPU0_WAIT, bool &CPU0_RUN) volatile
    {
        uint32_t curr = DOMAIN_USBPHY2;

        CPU1_SUSP = curr & (1u << 7u);
        CPU1_STOP = curr & (1u << 6u);
        CPU1_WAIT = curr & (1u << 5u);
        CPU1_RUN = curr & (1u << 4u);
        CPU0_SUSP = curr & (1u << 3u);
        CPU0_STOP = curr & (1u << 2u);
        CPU0_WAIT = curr & (1u << 1u);
        CPU0_RUN = curr & (1u << 0u);
    }

    /**
     * Set all of DOMAIN_USBPHY2's bit fields.
     *
     * (read-write) Slice Domain Config Register
     */
    inline void set_DOMAIN_USBPHY2(bool CPU1_SUSP, bool CPU1_STOP,
                                   bool CPU1_WAIT, bool CPU1_RUN,
                                   bool CPU0_SUSP, bool CPU0_STOP,
                                   bool CPU0_WAIT, bool CPU0_RUN) volatile
    {
        uint32_t curr = DOMAIN_USBPHY2;

        curr &= ~(0b1u << 7u);
        curr |= (CPU1_SUSP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CPU1_STOP & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (CPU1_WAIT & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (CPU1_RUN & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (CPU0_SUSP & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CPU0_STOP & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CPU0_WAIT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CPU0_RUN & 0b1u) << 0u;

        DOMAIN_USBPHY2 = curr;
    }

    /**
     * Get STAT_USBPHY2's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline bool get_STAT_USBPHY2_RST_BY_SW() volatile
    {
        return STAT_USBPHY2 & (1u << 3u);
    }

    /**
     * Set STAT_USBPHY2's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void set_STAT_USBPHY2_RST_BY_SW() volatile
    {
        STAT_USBPHY2 |= 1u << 3u;
    }

    /**
     * Clear STAT_USBPHY2's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void clear_STAT_USBPHY2_RST_BY_SW() volatile
    {
        STAT_USBPHY2 &= ~(1u << 3u);
    }

    /**
     * Toggle STAT_USBPHY2's RST_BY_SW bit.
     *
     * This bit indicate if the reset is caused by setting SW_RESET bit.
     */
    inline void toggle_STAT_USBPHY2_RST_BY_SW() volatile
    {
        STAT_USBPHY2 ^= 1u << 3u;
    }

    /**
     * Get STAT_USBPHY2's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline bool get_STAT_USBPHY2_RST_BY_HW() volatile
    {
        return STAT_USBPHY2 & (1u << 2u);
    }

    /**
     * Set STAT_USBPHY2's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void set_STAT_USBPHY2_RST_BY_HW() volatile
    {
        STAT_USBPHY2 |= 1u << 2u;
    }

    /**
     * Clear STAT_USBPHY2's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void clear_STAT_USBPHY2_RST_BY_HW() volatile
    {
        STAT_USBPHY2 &= ~(1u << 2u);
    }

    /**
     * Toggle STAT_USBPHY2's RST_BY_HW bit.
     *
     * This bit indicate if the reset is caused by the power mode transfer.
     */
    inline void toggle_STAT_USBPHY2_RST_BY_HW() volatile
    {
        STAT_USBPHY2 ^= 1u << 2u;
    }

    /**
     * Get STAT_USBPHY2's UNDER_RST bit.
     *
     * This is a Read Only bit. It indicate if the reset is in process.
     */
    inline bool get_STAT_USBPHY2_UNDER_RST() volatile
    {
        return STAT_USBPHY2 & (1u << 0u);
    }

    /**
     * Get all of STAT_USBPHY2's bit fields.
     *
     * (read-write) Slice Status Register
     */
    inline void get_STAT_USBPHY2(bool &RST_BY_SW, bool &RST_BY_HW,
                                 bool &UNDER_RST) volatile
    {
        uint32_t curr = STAT_USBPHY2;

        RST_BY_SW = curr & (1u << 3u);
        RST_BY_HW = curr & (1u << 2u);
        UNDER_RST = curr & (1u << 0u);
    }

    /**
     * Set all of STAT_USBPHY2's bit fields.
     *
     * (read-write) Slice Status Register
     */
    inline void set_STAT_USBPHY2(bool RST_BY_SW, bool RST_BY_HW) volatile
    {
        uint32_t curr = STAT_USBPHY2;

        curr &= ~(0b1u << 3u);
        curr |= (RST_BY_SW & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (RST_BY_HW & 0b1u) << 2u;

        STAT_USBPHY2 = curr;
    }
};

static_assert(sizeof(src) == src::size);

static volatile src *const SRC = reinterpret_cast<src *>(0x40C04000);

}; // namespace MIMXRT1176::CM7
