/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/DSI_HOST_DPHY_INTFC_CO_CO.h"
#include "../enums/DSI_HOST_DPHY_INTFC_RXCDRP_RXCDRP.h"
#include "../enums/DSI_HOST_DPHY_INTFC_TX_RCAL_TX_RCAL.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * DSI HOST DPHY INTFC
 */
struct [[gnu::packed]] dsi_host_dphy_intfc
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        72; /*!< dsi_host_dphy_intfc's size in bytes. */

    /* Fields. */
    uint32_t PD_TX;             /*!< (read-write) PD_TX */
    uint32_t M_PRG_HS_PREPARE;  /*!< (read-write) M_PRG_HS_PREPARE */
    uint32_t MC_PRG_HS_PREPARE; /*!< (read-write) MC_PRG_HS_PREPARE */
    uint32_t M_PRG_HS_ZERO;     /*!< (read-write) M_PRG_HS_ZERO */
    uint32_t MC_PRG_HS_ZERO;    /*!< (read-write) MC_PRG_HS_ZERO */
    uint32_t M_PRG_HS_TRAIL;    /*!< (read-write) M_PRG_HS_TRAIL */
    uint32_t MC_PRG_HS_TRAIL;   /*!< (read-write) MC_PRG_HS_TRAIL */
    uint32_t PD_PLL;            /*!< (read-write) PD_PLL */
    uint32_t TST;               /*!< (read-write) TST */
    uint32_t CN;                /*!< (read-write) CN */
    uint32_t CM;                /*!< (read-write) CM */
    uint32_t CO;                /*!< (read-write) CO */
    uint32_t LOCK;              /*!< (read-write) LOCK */
    uint32_t LOCK_BYP;          /*!< (read-write) LOCK_BYP */
    uint32_t TX_RCAL;           /*!< (read-write) TX_RCAL */
    uint32_t AUTO_PD_EN;        /*!< (read-write) AUTO_PD_EN */
    uint32_t RXLPRP;            /*!< (read-write) RXLPRP */
    uint32_t RXCDRP;            /*!< (read-write) RXCDRP */

    /* Methods. */

    /**
     * Get PD_TX's PD_TX bit.
     *
     * Power Down input for D-PHY
     */
    inline bool get_PD_TX_PD_TX() volatile
    {
        return PD_TX & (1u << 0u);
    }

    /**
     * Set PD_TX's PD_TX bit.
     *
     * Power Down input for D-PHY
     */
    inline void set_PD_TX_PD_TX() volatile
    {
        PD_TX |= 1u << 0u;
    }

    /**
     * Clear PD_TX's PD_TX bit.
     *
     * Power Down input for D-PHY
     */
    inline void clear_PD_TX_PD_TX() volatile
    {
        PD_TX &= ~(1u << 0u);
    }

    /**
     * Toggle PD_TX's PD_TX bit.
     *
     * Power Down input for D-PHY
     */
    inline void toggle_PD_TX_PD_TX() volatile
    {
        PD_TX ^= 1u << 0u;
    }

    /**
     * Get M_PRG_HS_PREPARE's M_PRG_HS_PREPARE field.
     *
     * DPHY m_PRG_HS_PREPARE input
     */
    inline uint8_t get_M_PRG_HS_PREPARE_M_PRG_HS_PREPARE() volatile
    {
        return (M_PRG_HS_PREPARE >> 0u) & 0b11u;
    }

    /**
     * Set M_PRG_HS_PREPARE's M_PRG_HS_PREPARE field.
     *
     * DPHY m_PRG_HS_PREPARE input
     */
    inline void set_M_PRG_HS_PREPARE_M_PRG_HS_PREPARE(uint8_t value) volatile
    {
        uint32_t curr = M_PRG_HS_PREPARE;

        curr &= ~(0b11u << 0u);
        curr |= (value & 0b11u) << 0u;

        M_PRG_HS_PREPARE = curr;
    }

    /**
     * Get MC_PRG_HS_PREPARE's MC_PRG_HS_PREPARE bit.
     *
     * DPHY mc_PRG_HS_PREPARE input
     */
    inline bool get_MC_PRG_HS_PREPARE_MC_PRG_HS_PREPARE() volatile
    {
        return MC_PRG_HS_PREPARE & (1u << 0u);
    }

    /**
     * Set MC_PRG_HS_PREPARE's MC_PRG_HS_PREPARE bit.
     *
     * DPHY mc_PRG_HS_PREPARE input
     */
    inline void set_MC_PRG_HS_PREPARE_MC_PRG_HS_PREPARE() volatile
    {
        MC_PRG_HS_PREPARE |= 1u << 0u;
    }

    /**
     * Clear MC_PRG_HS_PREPARE's MC_PRG_HS_PREPARE bit.
     *
     * DPHY mc_PRG_HS_PREPARE input
     */
    inline void clear_MC_PRG_HS_PREPARE_MC_PRG_HS_PREPARE() volatile
    {
        MC_PRG_HS_PREPARE &= ~(1u << 0u);
    }

    /**
     * Toggle MC_PRG_HS_PREPARE's MC_PRG_HS_PREPARE bit.
     *
     * DPHY mc_PRG_HS_PREPARE input
     */
    inline void toggle_MC_PRG_HS_PREPARE_MC_PRG_HS_PREPARE() volatile
    {
        MC_PRG_HS_PREPARE ^= 1u << 0u;
    }

    /**
     * Get M_PRG_HS_ZERO's M_PRG_HS_ZERO field.
     *
     * DPHY m_PRG_HS_ZERO input
     */
    inline uint8_t get_M_PRG_HS_ZERO_M_PRG_HS_ZERO() volatile
    {
        return (M_PRG_HS_ZERO >> 0u) & 0b11111u;
    }

    /**
     * Set M_PRG_HS_ZERO's M_PRG_HS_ZERO field.
     *
     * DPHY m_PRG_HS_ZERO input
     */
    inline void set_M_PRG_HS_ZERO_M_PRG_HS_ZERO(uint8_t value) volatile
    {
        uint32_t curr = M_PRG_HS_ZERO;

        curr &= ~(0b11111u << 0u);
        curr |= (value & 0b11111u) << 0u;

        M_PRG_HS_ZERO = curr;
    }

    /**
     * Get MC_PRG_HS_ZERO's MC_PRG_HS_ZERO field.
     *
     * DPHY mc_PRG_HS_ZERO input
     */
    inline uint8_t get_MC_PRG_HS_ZERO_MC_PRG_HS_ZERO() volatile
    {
        return (MC_PRG_HS_ZERO >> 0u) & 0b111111u;
    }

    /**
     * Set MC_PRG_HS_ZERO's MC_PRG_HS_ZERO field.
     *
     * DPHY mc_PRG_HS_ZERO input
     */
    inline void set_MC_PRG_HS_ZERO_MC_PRG_HS_ZERO(uint8_t value) volatile
    {
        uint32_t curr = MC_PRG_HS_ZERO;

        curr &= ~(0b111111u << 0u);
        curr |= (value & 0b111111u) << 0u;

        MC_PRG_HS_ZERO = curr;
    }

    /**
     * Get M_PRG_HS_TRAIL's M_PRG_HS_TRAIL field.
     *
     * DPHY m_PRG_HS_TRAIL input
     */
    inline uint8_t get_M_PRG_HS_TRAIL_M_PRG_HS_TRAIL() volatile
    {
        return (M_PRG_HS_TRAIL >> 0u) & 0b1111u;
    }

    /**
     * Set M_PRG_HS_TRAIL's M_PRG_HS_TRAIL field.
     *
     * DPHY m_PRG_HS_TRAIL input
     */
    inline void set_M_PRG_HS_TRAIL_M_PRG_HS_TRAIL(uint8_t value) volatile
    {
        uint32_t curr = M_PRG_HS_TRAIL;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        M_PRG_HS_TRAIL = curr;
    }

    /**
     * Get MC_PRG_HS_TRAIL's MC_PRG_HS_TRAIL field.
     *
     * DPHY mc_PRG_HS_TRAIL input
     */
    inline uint8_t get_MC_PRG_HS_TRAIL_MC_PRG_HS_TRAIL() volatile
    {
        return (MC_PRG_HS_TRAIL >> 0u) & 0b1111u;
    }

    /**
     * Set MC_PRG_HS_TRAIL's MC_PRG_HS_TRAIL field.
     *
     * DPHY mc_PRG_HS_TRAIL input
     */
    inline void set_MC_PRG_HS_TRAIL_MC_PRG_HS_TRAIL(uint8_t value) volatile
    {
        uint32_t curr = MC_PRG_HS_TRAIL;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        MC_PRG_HS_TRAIL = curr;
    }

    /**
     * Get PD_PLL's PD_PLL bit.
     *
     * Power-down signal
     */
    inline bool get_PD_PLL_PD_PLL() volatile
    {
        return PD_PLL & (1u << 0u);
    }

    /**
     * Set PD_PLL's PD_PLL bit.
     *
     * Power-down signal
     */
    inline void set_PD_PLL_PD_PLL() volatile
    {
        PD_PLL |= 1u << 0u;
    }

    /**
     * Clear PD_PLL's PD_PLL bit.
     *
     * Power-down signal
     */
    inline void clear_PD_PLL_PD_PLL() volatile
    {
        PD_PLL &= ~(1u << 0u);
    }

    /**
     * Toggle PD_PLL's PD_PLL bit.
     *
     * Power-down signal
     */
    inline void toggle_PD_PLL_PD_PLL() volatile
    {
        PD_PLL ^= 1u << 0u;
    }

    /**
     * Get TST's TST field.
     *
     * Test
     */
    inline uint8_t get_TST_TST() volatile
    {
        return (TST >> 0u) & 0b111111u;
    }

    /**
     * Set TST's TST field.
     *
     * Test
     */
    inline void set_TST_TST(uint8_t value) volatile
    {
        uint32_t curr = TST;

        curr &= ~(0b111111u << 0u);
        curr |= (value & 0b111111u) << 0u;

        TST = curr;
    }

    /**
     * Get CN's CN field.
     *
     * Control N divider
     */
    inline uint8_t get_CN_CN() volatile
    {
        return (CN >> 0u) & 0b11111u;
    }

    /**
     * Set CN's CN field.
     *
     * Control N divider
     */
    inline void set_CN_CN(uint8_t value) volatile
    {
        uint32_t curr = CN;

        curr &= ~(0b11111u << 0u);
        curr |= (value & 0b11111u) << 0u;

        CN = curr;
    }

    /**
     * Get CM's CM field.
     *
     * Control M divider
     */
    inline uint8_t get_CM_CM() volatile
    {
        return (CM >> 0u) & 0b11111111u;
    }

    /**
     * Set CM's CM field.
     *
     * Control M divider
     */
    inline void set_CM_CM(uint8_t value) volatile
    {
        uint32_t curr = CM;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        CM = curr;
    }

    /**
     * Get CO's CO field.
     *
     * Control O divider
     */
    inline DSI_HOST_DPHY_INTFC_CO_CO get_CO_CO() volatile
    {
        return DSI_HOST_DPHY_INTFC_CO_CO((CO >> 0u) & 0b11u);
    }

    /**
     * Set CO's CO field.
     *
     * Control O divider
     */
    inline void set_CO_CO(DSI_HOST_DPHY_INTFC_CO_CO value) volatile
    {
        uint32_t curr = CO;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        CO = curr;
    }

    /**
     * Get LOCK's LOCK bit.
     *
     * Lock Detect output
     */
    inline bool get_LOCK_LOCK() volatile
    {
        return LOCK & (1u << 0u);
    }

    /**
     * Get LOCK_BYP's LOCK_BYP bit.
     *
     * DPHY LOCK_BYP input
     */
    inline bool get_LOCK_BYP_LOCK_BYP() volatile
    {
        return LOCK_BYP & (1u << 0u);
    }

    /**
     * Set LOCK_BYP's LOCK_BYP bit.
     *
     * DPHY LOCK_BYP input
     */
    inline void set_LOCK_BYP_LOCK_BYP() volatile
    {
        LOCK_BYP |= 1u << 0u;
    }

    /**
     * Clear LOCK_BYP's LOCK_BYP bit.
     *
     * DPHY LOCK_BYP input
     */
    inline void clear_LOCK_BYP_LOCK_BYP() volatile
    {
        LOCK_BYP &= ~(1u << 0u);
    }

    /**
     * Toggle LOCK_BYP's LOCK_BYP bit.
     *
     * DPHY LOCK_BYP input
     */
    inline void toggle_LOCK_BYP_LOCK_BYP() volatile
    {
        LOCK_BYP ^= 1u << 0u;
    }

    /**
     * Get TX_RCAL's TX_RCAL field.
     *
     * On-chip termination control bits for manual calibration of HS-TX
     */
    inline DSI_HOST_DPHY_INTFC_TX_RCAL_TX_RCAL get_TX_RCAL_TX_RCAL() volatile
    {
        return DSI_HOST_DPHY_INTFC_TX_RCAL_TX_RCAL((TX_RCAL >> 0u) & 0b11u);
    }

    /**
     * Set TX_RCAL's TX_RCAL field.
     *
     * On-chip termination control bits for manual calibration of HS-TX
     */
    inline void set_TX_RCAL_TX_RCAL(
        DSI_HOST_DPHY_INTFC_TX_RCAL_TX_RCAL value) volatile
    {
        uint32_t curr = TX_RCAL;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        TX_RCAL = curr;
    }

    /**
     * Get AUTO_PD_EN's AUTO_PD_EN bit.
     *
     * DPHY AUTO_PD_EN input
     */
    inline bool get_AUTO_PD_EN_AUTO_PD_EN() volatile
    {
        return AUTO_PD_EN & (1u << 0u);
    }

    /**
     * Set AUTO_PD_EN's AUTO_PD_EN bit.
     *
     * DPHY AUTO_PD_EN input
     */
    inline void set_AUTO_PD_EN_AUTO_PD_EN() volatile
    {
        AUTO_PD_EN |= 1u << 0u;
    }

    /**
     * Clear AUTO_PD_EN's AUTO_PD_EN bit.
     *
     * DPHY AUTO_PD_EN input
     */
    inline void clear_AUTO_PD_EN_AUTO_PD_EN() volatile
    {
        AUTO_PD_EN &= ~(1u << 0u);
    }

    /**
     * Toggle AUTO_PD_EN's AUTO_PD_EN bit.
     *
     * DPHY AUTO_PD_EN input
     */
    inline void toggle_AUTO_PD_EN_AUTO_PD_EN() volatile
    {
        AUTO_PD_EN ^= 1u << 0u;
    }

    /**
     * Get RXLPRP's RXLPRP field.
     *
     * DPHY RXLPRP input
     */
    inline uint8_t get_RXLPRP_RXLPRP() volatile
    {
        return (RXLPRP >> 0u) & 0b11u;
    }

    /**
     * Set RXLPRP's RXLPRP field.
     *
     * DPHY RXLPRP input
     */
    inline void set_RXLPRP_RXLPRP(uint8_t value) volatile
    {
        uint32_t curr = RXLPRP;

        curr &= ~(0b11u << 0u);
        curr |= (value & 0b11u) << 0u;

        RXLPRP = curr;
    }

    /**
     * Get RXCDRP's RXCDRP field.
     *
     * DPHY RXCDRP input
     */
    inline DSI_HOST_DPHY_INTFC_RXCDRP_RXCDRP get_RXCDRP_RXCDRP() volatile
    {
        return DSI_HOST_DPHY_INTFC_RXCDRP_RXCDRP((RXCDRP >> 0u) & 0b11u);
    }

    /**
     * Set RXCDRP's RXCDRP field.
     *
     * DPHY RXCDRP input
     */
    inline void set_RXCDRP_RXCDRP(
        DSI_HOST_DPHY_INTFC_RXCDRP_RXCDRP value) volatile
    {
        uint32_t curr = RXCDRP;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        RXCDRP = curr;
    }
};

static_assert(sizeof(dsi_host_dphy_intfc) == dsi_host_dphy_intfc::size);

static volatile dsi_host_dphy_intfc *const DSI_HOST_DPHY_INTFC =
    reinterpret_cast<dsi_host_dphy_intfc *>(0x4080C300);

}; // namespace MIMXRT1176::CM7
