/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/IOMUXC_LPSR_CAN3_IPP_IND_CANRX_SELECT_INPUT_DAISY.h"
#include "../enums/IOMUXC_LPSR_LPUART12_IPP_IND_LPUART_RXD_SELECT_INPUT_DAISY.h"
#include "../enums/IOMUXC_LPSR_LPUART12_IPP_IND_LPUART_TXD_SELECT_INPUT_DAISY.h"
#include "../enums/IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_00_MUX_MODE.h"
#include "../enums/IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_01_MUX_MODE.h"
#include "../enums/IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_02_MUX_MODE.h"
#include "../enums/IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_03_MUX_MODE.h"
#include "../enums/IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_04_MUX_MODE.h"
#include "../enums/IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_05_MUX_MODE.h"
#include "../enums/IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_06_MUX_MODE.h"
#include "../enums/IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_07_MUX_MODE.h"
#include "../enums/IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_08_MUX_MODE.h"
#include "../enums/IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_09_MUX_MODE.h"
#include "../enums/IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_10_MUX_MODE.h"
#include "../enums/IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE.h"
#include "../enums/IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_12_MUX_MODE.h"
#include "../enums/IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_13_MUX_MODE.h"
#include "../enums/IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_14_MUX_MODE.h"
#include "../enums/IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_15_MUX_MODE.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_00_DWP.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_00_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_01_DWP.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_01_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_02_DWP.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_02_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_03_DWP.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_03_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_04_DWP.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_04_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_05_DWP.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_05_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_06_DWP.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_06_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_07_DWP.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_07_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_08_DWP.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_08_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_09_DWP.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_09_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_10_DWP.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_10_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_11_DWP.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_11_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_12_DWP.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_12_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_13_DWP.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_13_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_14_DWP.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_14_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_15_DWP.h"
#include "../enums/IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_15_DWP_LOCK.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * IOMUXC LPSR
 */
struct [[gnu::packed]] iomuxc_lpsr
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        224; /*!< iomuxc_lpsr's size in bytes. */

    /* Fields. */
    uint32_t SW_MUX_CTL_PAD_GPIO_LPSR_00; /*!< (read-write)
                                             SW_MUX_CTL_PAD_GPIO_LPSR_00 SW MUX
                                             Control Register */
    uint32_t SW_MUX_CTL_PAD_GPIO_LPSR_01; /*!< (read-write)
                                             SW_MUX_CTL_PAD_GPIO_LPSR_01 SW MUX
                                             Control Register */
    uint32_t SW_MUX_CTL_PAD_GPIO_LPSR_02; /*!< (read-write)
                                             SW_MUX_CTL_PAD_GPIO_LPSR_02 SW MUX
                                             Control Register */
    uint32_t SW_MUX_CTL_PAD_GPIO_LPSR_03; /*!< (read-write)
                                             SW_MUX_CTL_PAD_GPIO_LPSR_03 SW MUX
                                             Control Register */
    uint32_t SW_MUX_CTL_PAD_GPIO_LPSR_04; /*!< (read-write)
                                             SW_MUX_CTL_PAD_GPIO_LPSR_04 SW MUX
                                             Control Register */
    uint32_t SW_MUX_CTL_PAD_GPIO_LPSR_05; /*!< (read-write)
                                             SW_MUX_CTL_PAD_GPIO_LPSR_05 SW MUX
                                             Control Register */
    uint32_t SW_MUX_CTL_PAD_GPIO_LPSR_06; /*!< (read-write)
                                             SW_MUX_CTL_PAD_GPIO_LPSR_06 SW MUX
                                             Control Register */
    uint32_t SW_MUX_CTL_PAD_GPIO_LPSR_07; /*!< (read-write)
                                             SW_MUX_CTL_PAD_GPIO_LPSR_07 SW MUX
                                             Control Register */
    uint32_t SW_MUX_CTL_PAD_GPIO_LPSR_08; /*!< (read-write)
                                             SW_MUX_CTL_PAD_GPIO_LPSR_08 SW MUX
                                             Control Register */
    uint32_t SW_MUX_CTL_PAD_GPIO_LPSR_09; /*!< (read-write)
                                             SW_MUX_CTL_PAD_GPIO_LPSR_09 SW MUX
                                             Control Register */
    uint32_t SW_MUX_CTL_PAD_GPIO_LPSR_10; /*!< (read-write)
                                             SW_MUX_CTL_PAD_GPIO_LPSR_10 SW MUX
                                             Control Register */
    uint32_t SW_MUX_CTL_PAD_GPIO_LPSR_11; /*!< (read-write)
                                             SW_MUX_CTL_PAD_GPIO_LPSR_11 SW MUX
                                             Control Register */
    uint32_t SW_MUX_CTL_PAD_GPIO_LPSR_12; /*!< (read-write)
                                             SW_MUX_CTL_PAD_GPIO_LPSR_12 SW MUX
                                             Control Register */
    uint32_t SW_MUX_CTL_PAD_GPIO_LPSR_13; /*!< (read-write)
                                             SW_MUX_CTL_PAD_GPIO_LPSR_13 SW MUX
                                             Control Register */
    uint32_t SW_MUX_CTL_PAD_GPIO_LPSR_14; /*!< (read-write)
                                             SW_MUX_CTL_PAD_GPIO_LPSR_14 SW MUX
                                             Control Register */
    uint32_t SW_MUX_CTL_PAD_GPIO_LPSR_15; /*!< (read-write)
                                             SW_MUX_CTL_PAD_GPIO_LPSR_15 SW MUX
                                             Control Register */
    uint32_t SW_PAD_CTL_PAD_GPIO_LPSR_00; /*!< (read-write)
                                             SW_PAD_CTL_PAD_GPIO_LPSR_00 SW PAD
                                             Control Register */
    uint32_t SW_PAD_CTL_PAD_GPIO_LPSR_01; /*!< (read-write)
                                             SW_PAD_CTL_PAD_GPIO_LPSR_01 SW PAD
                                             Control Register */
    uint32_t SW_PAD_CTL_PAD_GPIO_LPSR_02; /*!< (read-write)
                                             SW_PAD_CTL_PAD_GPIO_LPSR_02 SW PAD
                                             Control Register */
    uint32_t SW_PAD_CTL_PAD_GPIO_LPSR_03; /*!< (read-write)
                                             SW_PAD_CTL_PAD_GPIO_LPSR_03 SW PAD
                                             Control Register */
    uint32_t SW_PAD_CTL_PAD_GPIO_LPSR_04; /*!< (read-write)
                                             SW_PAD_CTL_PAD_GPIO_LPSR_04 SW PAD
                                             Control Register */
    uint32_t SW_PAD_CTL_PAD_GPIO_LPSR_05; /*!< (read-write)
                                             SW_PAD_CTL_PAD_GPIO_LPSR_05 SW PAD
                                             Control Register */
    uint32_t SW_PAD_CTL_PAD_GPIO_LPSR_06; /*!< (read-write)
                                             SW_PAD_CTL_PAD_GPIO_LPSR_06 SW PAD
                                             Control Register */
    uint32_t SW_PAD_CTL_PAD_GPIO_LPSR_07; /*!< (read-write)
                                             SW_PAD_CTL_PAD_GPIO_LPSR_07 SW PAD
                                             Control Register */
    uint32_t SW_PAD_CTL_PAD_GPIO_LPSR_08; /*!< (read-write)
                                             SW_PAD_CTL_PAD_GPIO_LPSR_08 SW PAD
                                             Control Register */
    uint32_t SW_PAD_CTL_PAD_GPIO_LPSR_09; /*!< (read-write)
                                             SW_PAD_CTL_PAD_GPIO_LPSR_09 SW PAD
                                             Control Register */
    uint32_t SW_PAD_CTL_PAD_GPIO_LPSR_10; /*!< (read-write)
                                             SW_PAD_CTL_PAD_GPIO_LPSR_10 SW PAD
                                             Control Register */
    uint32_t SW_PAD_CTL_PAD_GPIO_LPSR_11; /*!< (read-write)
                                             SW_PAD_CTL_PAD_GPIO_LPSR_11 SW PAD
                                             Control Register */
    uint32_t SW_PAD_CTL_PAD_GPIO_LPSR_12; /*!< (read-write)
                                             SW_PAD_CTL_PAD_GPIO_LPSR_12 SW PAD
                                             Control Register */
    uint32_t SW_PAD_CTL_PAD_GPIO_LPSR_13; /*!< (read-write)
                                             SW_PAD_CTL_PAD_GPIO_LPSR_13 SW PAD
                                             Control Register */
    uint32_t SW_PAD_CTL_PAD_GPIO_LPSR_14; /*!< (read-write)
                                             SW_PAD_CTL_PAD_GPIO_LPSR_14 SW PAD
                                             Control Register */
    uint32_t SW_PAD_CTL_PAD_GPIO_LPSR_15; /*!< (read-write)
                                             SW_PAD_CTL_PAD_GPIO_LPSR_15 SW PAD
                                             Control Register */
    uint32_t
        CAN3_IPP_IND_CANRX_SELECT_INPUT; /*!< (read-write)
                                            CAN3_IPP_IND_CANRX_SELECT_INPUT
                                            DAISY Register */
    uint32_t
        LPI2C5_IPP_IND_LPI2C_SCL_SELECT_INPUT; /*!< (read-write)
                                                  LPI2C5_IPP_IND_LPI2C_SCL_SELECT_INPUT
                                                  DAISY Register */
    uint32_t
        LPI2C5_IPP_IND_LPI2C_SDA_SELECT_INPUT; /*!< (read-write)
                                                  LPI2C5_IPP_IND_LPI2C_SDA_SELECT_INPUT
                                                  DAISY Register */
    uint32_t
        LPI2C6_IPP_IND_LPI2C_SCL_SELECT_INPUT; /*!< (read-write)
                                                  LPI2C6_IPP_IND_LPI2C_SCL_SELECT_INPUT
                                                  DAISY Register */
    uint32_t
        LPI2C6_IPP_IND_LPI2C_SDA_SELECT_INPUT; /*!< (read-write)
                                                  LPI2C6_IPP_IND_LPI2C_SDA_SELECT_INPUT
                                                  DAISY Register */
    uint32_t
        LPSPI5_IPP_IND_LPSPI_PCS_SELECT_INPUT_0; /*!< (read-write)
                                                    LPSPI5_IPP_IND_LPSPI_PCS_SELECT_INPUT_0
                                                    DAISY Register */
    uint32_t
        LPSPI5_IPP_IND_LPSPI_SCK_SELECT_INPUT; /*!< (read-write)
                                                  LPSPI5_IPP_IND_LPSPI_SCK_SELECT_INPUT
                                                  DAISY Register */
    uint32_t
        LPSPI5_IPP_IND_LPSPI_SDI_SELECT_INPUT; /*!< (read-write)
                                                  LPSPI5_IPP_IND_LPSPI_SDI_SELECT_INPUT
                                                  DAISY Register */
    uint32_t
        LPSPI5_IPP_IND_LPSPI_SDO_SELECT_INPUT; /*!< (read-write)
                                                  LPSPI5_IPP_IND_LPSPI_SDO_SELECT_INPUT
                                                  DAISY Register */
    uint32_t
        LPUART11_IPP_IND_LPUART_RXD_SELECT_INPUT; /*!< (read-write)
                                                     LPUART11_IPP_IND_LPUART_RXD_SELECT_INPUT
                                                     DAISY Register */
    uint32_t
        LPUART11_IPP_IND_LPUART_TXD_SELECT_INPUT; /*!< (read-write)
                                                     LPUART11_IPP_IND_LPUART_TXD_SELECT_INPUT
                                                     DAISY Register */
    uint32_t
        LPUART12_IPP_IND_LPUART_RXD_SELECT_INPUT; /*!< (read-write)
                                                     LPUART12_IPP_IND_LPUART_RXD_SELECT_INPUT
                                                     DAISY Register */
    uint32_t
        LPUART12_IPP_IND_LPUART_TXD_SELECT_INPUT; /*!< (read-write)
                                                     LPUART12_IPP_IND_LPUART_TXD_SELECT_INPUT
                                                     DAISY Register */
    uint32_t
        MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_0; /*!< (read-write)
                                                         MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_0
                                                         DAISY Register */
    uint32_t
        MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_1; /*!< (read-write)
                                                         MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_1
                                                         DAISY Register */
    uint32_t
        MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_2; /*!< (read-write)
                                                         MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_2
                                                         DAISY Register */
    uint32_t
        MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_3; /*!< (read-write)
                                                         MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_3
                                                         DAISY Register */
    uint32_t
        NMI_GLUE_IPP_IND_NMI_SELECT_INPUT; /*!< (read-write)
                                              NMI_GLUE_IPP_IND_NMI_SELECT_INPUT
                                              DAISY Register */
    uint32_t
        SAI4_IPG_CLK_SAI_MCLK_SELECT_INPUT; /*!< (read-write)
                                               SAI4_IPG_CLK_SAI_MCLK_SELECT_INPUT
                                               DAISY Register */
    uint32_t
        SAI4_IPP_IND_SAI_RXBCLK_SELECT_INPUT; /*!< (read-write)
                                                 SAI4_IPP_IND_SAI_RXBCLK_SELECT_INPUT
                                                 DAISY Register */
    uint32_t
        SAI4_IPP_IND_SAI_RXDATA_SELECT_INPUT_0; /*!< (read-write)
                                                   SAI4_IPP_IND_SAI_RXDATA_SELECT_INPUT_0
                                                   DAISY Register */
    uint32_t
        SAI4_IPP_IND_SAI_RXSYNC_SELECT_INPUT; /*!< (read-write)
                                                 SAI4_IPP_IND_SAI_RXSYNC_SELECT_INPUT
                                                 DAISY Register */
    uint32_t
        SAI4_IPP_IND_SAI_TXBCLK_SELECT_INPUT; /*!< (read-write)
                                                 SAI4_IPP_IND_SAI_TXBCLK_SELECT_INPUT
                                                 DAISY Register */
    uint32_t
        SAI4_IPP_IND_SAI_TXSYNC_SELECT_INPUT; /*!< (read-write)
                                                 SAI4_IPP_IND_SAI_TXSYNC_SELECT_INPUT
                                                 DAISY Register */

    /* Methods. */

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_00's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_LPSR_00_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_LPSR_00 & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_00's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_00_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_00 |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_LPSR_00's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_LPSR_00_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_00 &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_LPSR_00's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_LPSR_00_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_00 ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_00's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_00_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_LPSR_00_MUX_MODE() volatile
    {
        return IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_00_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_LPSR_00 >> 0u) & 0b1111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_00's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_00_MUX_MODE(
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_00_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_00;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_00 = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_LPSR_00's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_00 SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_LPSR_00(
        bool &SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_00_MUX_MODE &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_00;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_00_MUX_MODE(
            (curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_LPSR_00's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_00 SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_00(
        bool SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_00_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_00;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_00 = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_01's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_LPSR_01_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_LPSR_01 & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_01's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_01_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_01 |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_LPSR_01's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_LPSR_01_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_01 &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_LPSR_01's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_LPSR_01_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_01 ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_01's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_01_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_LPSR_01_MUX_MODE() volatile
    {
        return IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_01_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_LPSR_01 >> 0u) & 0b1111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_01's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_01_MUX_MODE(
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_01_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_01;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_01 = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_LPSR_01's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_01 SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_LPSR_01(
        bool &SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_01_MUX_MODE &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_01;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_01_MUX_MODE(
            (curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_LPSR_01's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_01 SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_01(
        bool SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_01_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_01;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_01 = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_02's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_LPSR_02_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_LPSR_02 & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_02's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_02_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_02 |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_LPSR_02's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_LPSR_02_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_02 &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_LPSR_02's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_LPSR_02_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_02 ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_02's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_02_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_LPSR_02_MUX_MODE() volatile
    {
        return IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_02_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_LPSR_02 >> 0u) & 0b1111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_02's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_02_MUX_MODE(
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_02_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_02;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_02 = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_LPSR_02's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_02 SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_LPSR_02(
        bool &SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_02_MUX_MODE &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_02;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_02_MUX_MODE(
            (curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_LPSR_02's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_02 SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_02(
        bool SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_02_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_02;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_02 = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_03's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_LPSR_03_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_LPSR_03 & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_03's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_03_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_03 |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_LPSR_03's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_LPSR_03_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_03 &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_LPSR_03's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_LPSR_03_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_03 ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_03's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_03_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_LPSR_03_MUX_MODE() volatile
    {
        return IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_03_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_LPSR_03 >> 0u) & 0b1111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_03's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_03_MUX_MODE(
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_03_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_03;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_03 = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_LPSR_03's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_03 SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_LPSR_03(
        bool &SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_03_MUX_MODE &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_03;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_03_MUX_MODE(
            (curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_LPSR_03's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_03 SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_03(
        bool SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_03_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_03;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_03 = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_04's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_LPSR_04_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_LPSR_04 & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_04's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_04_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_04 |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_LPSR_04's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_LPSR_04_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_04 &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_LPSR_04's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_LPSR_04_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_04 ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_04's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_04_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_LPSR_04_MUX_MODE() volatile
    {
        return IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_04_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_LPSR_04 >> 0u) & 0b1111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_04's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_04_MUX_MODE(
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_04_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_04;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_04 = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_LPSR_04's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_04 SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_LPSR_04(
        bool &SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_04_MUX_MODE &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_04;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_04_MUX_MODE(
            (curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_LPSR_04's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_04 SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_04(
        bool SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_04_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_04;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_04 = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_05's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_LPSR_05_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_LPSR_05 & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_05's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_05_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_05 |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_LPSR_05's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_LPSR_05_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_05 &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_LPSR_05's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_LPSR_05_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_05 ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_05's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_05_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_LPSR_05_MUX_MODE() volatile
    {
        return IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_05_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_LPSR_05 >> 0u) & 0b1111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_05's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_05_MUX_MODE(
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_05_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_05;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_05 = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_LPSR_05's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_05 SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_LPSR_05(
        bool &SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_05_MUX_MODE &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_05;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_05_MUX_MODE(
            (curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_LPSR_05's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_05 SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_05(
        bool SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_05_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_05;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_05 = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_06's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_LPSR_06_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_LPSR_06 & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_06's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_06_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_06 |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_LPSR_06's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_LPSR_06_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_06 &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_LPSR_06's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_LPSR_06_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_06 ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_06's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_06_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_LPSR_06_MUX_MODE() volatile
    {
        return IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_06_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_LPSR_06 >> 0u) & 0b1111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_06's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_06_MUX_MODE(
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_06_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_06;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_06 = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_LPSR_06's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_06 SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_LPSR_06(
        bool &SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_06_MUX_MODE &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_06;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_06_MUX_MODE(
            (curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_LPSR_06's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_06 SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_06(
        bool SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_06_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_06;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_06 = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_07's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_LPSR_07_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_LPSR_07 & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_07's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_07_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_07 |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_LPSR_07's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_LPSR_07_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_07 &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_LPSR_07's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_LPSR_07_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_07 ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_07's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_07_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_LPSR_07_MUX_MODE() volatile
    {
        return IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_07_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_LPSR_07 >> 0u) & 0b1111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_07's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_07_MUX_MODE(
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_07_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_07;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_07 = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_LPSR_07's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_07 SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_LPSR_07(
        bool &SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_07_MUX_MODE &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_07;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_07_MUX_MODE(
            (curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_LPSR_07's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_07 SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_07(
        bool SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_07_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_07;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_07 = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_08's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_LPSR_08_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_LPSR_08 & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_08's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_08_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_08 |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_LPSR_08's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_LPSR_08_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_08 &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_LPSR_08's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_LPSR_08_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_08 ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_08's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_08_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_LPSR_08_MUX_MODE() volatile
    {
        return IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_08_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_LPSR_08 >> 0u) & 0b1111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_08's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_08_MUX_MODE(
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_08_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_08;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_08 = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_LPSR_08's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_08 SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_LPSR_08(
        bool &SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_08_MUX_MODE &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_08;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_08_MUX_MODE(
            (curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_LPSR_08's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_08 SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_08(
        bool SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_08_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_08;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_08 = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_09's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_LPSR_09_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_LPSR_09 & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_09's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_09_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_09 |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_LPSR_09's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_LPSR_09_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_09 &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_LPSR_09's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_LPSR_09_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_09 ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_09's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_09_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_LPSR_09_MUX_MODE() volatile
    {
        return IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_09_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_LPSR_09 >> 0u) & 0b1111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_09's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_09_MUX_MODE(
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_09_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_09;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_09 = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_LPSR_09's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_09 SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_LPSR_09(
        bool &SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_09_MUX_MODE &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_09;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_09_MUX_MODE(
            (curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_LPSR_09's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_09 SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_09(
        bool SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_09_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_09;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_09 = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_10's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_LPSR_10_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_LPSR_10 & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_10's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_10_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_10 |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_LPSR_10's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_LPSR_10_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_10 &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_LPSR_10's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_LPSR_10_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_10 ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_10's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_10_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_LPSR_10_MUX_MODE() volatile
    {
        return IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_10_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_LPSR_10 >> 0u) & 0b1111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_10's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_10_MUX_MODE(
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_10_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_10;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_10 = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_LPSR_10's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_10 SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_LPSR_10(
        bool &SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_10_MUX_MODE &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_10;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_10_MUX_MODE(
            (curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_LPSR_10's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_10 SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_10(
        bool SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_10_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_10;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_10 = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_11's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_LPSR_11_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_LPSR_11 & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_11's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_11_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_11 |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_LPSR_11's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_LPSR_11_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_11 &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_LPSR_11's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_LPSR_11_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_11 ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_11's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE() volatile
    {
        return IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_LPSR_11 >> 0u) & 0b1111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_11's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE(
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_11;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_11 = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_LPSR_11's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_11 SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_LPSR_11(
        bool &SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_11;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE(
            (curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_LPSR_11's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_11 SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_11(
        bool SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_11_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_11;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_11 = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_12's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_LPSR_12_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_LPSR_12 & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_12's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_12_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_12 |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_LPSR_12's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_LPSR_12_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_12 &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_LPSR_12's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_LPSR_12_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_12 ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_12's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_12_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_LPSR_12_MUX_MODE() volatile
    {
        return IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_12_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_LPSR_12 >> 0u) & 0b1111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_12's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_12_MUX_MODE(
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_12_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_12;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_12 = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_LPSR_12's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_12 SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_LPSR_12(
        bool &SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_12_MUX_MODE &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_12;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_12_MUX_MODE(
            (curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_LPSR_12's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_12 SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_12(
        bool SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_12_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_12;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_12 = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_13's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_LPSR_13_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_LPSR_13 & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_13's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_13_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_13 |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_LPSR_13's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_LPSR_13_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_13 &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_LPSR_13's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_LPSR_13_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_13 ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_13's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_13_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_LPSR_13_MUX_MODE() volatile
    {
        return IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_13_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_LPSR_13 >> 0u) & 0b1111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_13's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_13_MUX_MODE(
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_13_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_13;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_13 = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_LPSR_13's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_13 SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_LPSR_13(
        bool &SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_13_MUX_MODE &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_13;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_13_MUX_MODE(
            (curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_LPSR_13's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_13 SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_13(
        bool SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_13_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_13;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_13 = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_14's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_LPSR_14_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_LPSR_14 & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_14's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_14_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_14 |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_LPSR_14's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_LPSR_14_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_14 &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_LPSR_14's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_LPSR_14_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_14 ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_14's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_14_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_LPSR_14_MUX_MODE() volatile
    {
        return IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_14_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_LPSR_14 >> 0u) & 0b1111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_14's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_14_MUX_MODE(
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_14_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_14;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_14 = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_LPSR_14's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_14 SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_LPSR_14(
        bool &SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_14_MUX_MODE &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_14;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_14_MUX_MODE(
            (curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_LPSR_14's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_14 SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_14(
        bool SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_14_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_14;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_14 = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_15's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_LPSR_15_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_LPSR_15 & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_15's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_15_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_15 |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_LPSR_15's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_LPSR_15_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_15 &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_LPSR_15's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_LPSR_15_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_LPSR_15 ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_LPSR_15's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_15_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_LPSR_15_MUX_MODE() volatile
    {
        return IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_15_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_LPSR_15 >> 0u) & 0b1111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_LPSR_15's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_15_MUX_MODE(
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_15_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_15;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_15 = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_LPSR_15's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_15 SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_LPSR_15(
        bool &SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_15_MUX_MODE &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_15;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_15_MUX_MODE(
            (curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_LPSR_15's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_LPSR_15 SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_LPSR_15(
        bool SION,
        IOMUXC_LPSR_SW_MUX_CTL_PAD_GPIO_LPSR_15_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_LPSR_15;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b1111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_LPSR_15 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_00's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_00_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_LPSR_00_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_00_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_LPSR_00 >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_00's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_00_DWP_LOCK(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_00_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_00;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_LPSR_00 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_00's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_00_DWP
    get_SW_PAD_CTL_PAD_GPIO_LPSR_00_DWP() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_00_DWP(
            (SW_PAD_CTL_PAD_GPIO_LPSR_00 >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_00's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_00_DWP(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_00_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_00;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_LPSR_00 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_00's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_00_ODE_LPSR() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_00 & (1u << 5u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_00's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_00_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_00 |= 1u << 5u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_00's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_00_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_00 &= ~(1u << 5u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_00's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_00_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_00 ^= 1u << 5u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_00's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_00_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_00 & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_00's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_00_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_00 |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_00's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_00_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_00 &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_00's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_00_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_00 ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_00's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_00_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_00 & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_00's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_00_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_00 |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_00's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_00_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_00 &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_00's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_00_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_00 ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_00's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_00_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_00 & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_00's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_00_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_00 |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_00's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_00_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_00 &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_00's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_00_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_00 ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_00's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_00_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_00 & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_00's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_00_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_00 |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_00's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_00_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_00 &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_00's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_00_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_00 ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_LPSR_00's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_00 SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_LPSR_00(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_00_DWP_LOCK &DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_00_DWP &DWP, bool &ODE_LPSR,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_00;

        DWP_LOCK = IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_00_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP =
            IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_00_DWP((curr >> 28u) & 0b11u);
        ODE_LPSR = curr & (1u << 5u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_LPSR_00's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_00 SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_00(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_00_DWP_LOCK DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_00_DWP DWP, bool ODE_LPSR,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_00;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 5u);
        curr |= (ODE_LPSR & 0b1u) << 5u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_LPSR_00 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_01's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_01_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_LPSR_01_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_01_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_LPSR_01 >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_01's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_01_DWP_LOCK(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_01_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_01;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_LPSR_01 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_01's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_01_DWP
    get_SW_PAD_CTL_PAD_GPIO_LPSR_01_DWP() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_01_DWP(
            (SW_PAD_CTL_PAD_GPIO_LPSR_01 >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_01's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_01_DWP(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_01_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_01;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_LPSR_01 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_01's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_01_ODE_LPSR() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_01 & (1u << 5u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_01's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_01_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_01 |= 1u << 5u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_01's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_01_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_01 &= ~(1u << 5u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_01's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_01_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_01 ^= 1u << 5u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_01's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_01_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_01 & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_01's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_01_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_01 |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_01's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_01_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_01 &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_01's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_01_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_01 ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_01's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_01_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_01 & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_01's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_01_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_01 |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_01's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_01_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_01 &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_01's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_01_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_01 ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_01's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_01_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_01 & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_01's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_01_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_01 |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_01's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_01_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_01 &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_01's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_01_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_01 ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_01's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_01_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_01 & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_01's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_01_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_01 |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_01's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_01_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_01 &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_01's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_01_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_01 ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_LPSR_01's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_01 SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_LPSR_01(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_01_DWP_LOCK &DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_01_DWP &DWP, bool &ODE_LPSR,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_01;

        DWP_LOCK = IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_01_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP =
            IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_01_DWP((curr >> 28u) & 0b11u);
        ODE_LPSR = curr & (1u << 5u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_LPSR_01's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_01 SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_01(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_01_DWP_LOCK DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_01_DWP DWP, bool ODE_LPSR,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_01;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 5u);
        curr |= (ODE_LPSR & 0b1u) << 5u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_LPSR_01 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_02's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_02_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_LPSR_02_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_02_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_LPSR_02 >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_02's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_02_DWP_LOCK(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_02_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_02;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_LPSR_02 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_02's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_02_DWP
    get_SW_PAD_CTL_PAD_GPIO_LPSR_02_DWP() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_02_DWP(
            (SW_PAD_CTL_PAD_GPIO_LPSR_02 >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_02's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_02_DWP(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_02_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_02;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_LPSR_02 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_02's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_02_ODE_LPSR() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_02 & (1u << 5u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_02's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_02_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_02 |= 1u << 5u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_02's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_02_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_02 &= ~(1u << 5u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_02's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_02_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_02 ^= 1u << 5u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_02's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_02_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_02 & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_02's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_02_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_02 |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_02's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_02_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_02 &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_02's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_02_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_02 ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_02's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_02_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_02 & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_02's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_02_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_02 |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_02's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_02_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_02 &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_02's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_02_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_02 ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_02's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_02_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_02 & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_02's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_02_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_02 |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_02's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_02_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_02 &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_02's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_02_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_02 ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_02's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_02_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_02 & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_02's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_02_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_02 |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_02's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_02_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_02 &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_02's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_02_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_02 ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_LPSR_02's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_02 SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_LPSR_02(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_02_DWP_LOCK &DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_02_DWP &DWP, bool &ODE_LPSR,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_02;

        DWP_LOCK = IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_02_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP =
            IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_02_DWP((curr >> 28u) & 0b11u);
        ODE_LPSR = curr & (1u << 5u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_LPSR_02's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_02 SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_02(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_02_DWP_LOCK DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_02_DWP DWP, bool ODE_LPSR,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_02;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 5u);
        curr |= (ODE_LPSR & 0b1u) << 5u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_LPSR_02 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_03's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_03_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_LPSR_03_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_03_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_LPSR_03 >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_03's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_03_DWP_LOCK(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_03_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_03;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_LPSR_03 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_03's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_03_DWP
    get_SW_PAD_CTL_PAD_GPIO_LPSR_03_DWP() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_03_DWP(
            (SW_PAD_CTL_PAD_GPIO_LPSR_03 >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_03's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_03_DWP(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_03_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_03;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_LPSR_03 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_03's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_03_ODE_LPSR() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_03 & (1u << 5u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_03's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_03_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_03 |= 1u << 5u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_03's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_03_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_03 &= ~(1u << 5u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_03's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_03_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_03 ^= 1u << 5u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_03's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_03_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_03 & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_03's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_03_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_03 |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_03's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_03_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_03 &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_03's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_03_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_03 ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_03's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_03_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_03 & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_03's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_03_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_03 |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_03's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_03_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_03 &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_03's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_03_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_03 ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_03's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_03_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_03 & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_03's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_03_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_03 |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_03's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_03_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_03 &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_03's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_03_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_03 ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_03's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_03_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_03 & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_03's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_03_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_03 |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_03's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_03_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_03 &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_03's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_03_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_03 ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_LPSR_03's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_03 SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_LPSR_03(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_03_DWP_LOCK &DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_03_DWP &DWP, bool &ODE_LPSR,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_03;

        DWP_LOCK = IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_03_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP =
            IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_03_DWP((curr >> 28u) & 0b11u);
        ODE_LPSR = curr & (1u << 5u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_LPSR_03's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_03 SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_03(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_03_DWP_LOCK DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_03_DWP DWP, bool ODE_LPSR,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_03;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 5u);
        curr |= (ODE_LPSR & 0b1u) << 5u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_LPSR_03 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_04's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_04_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_LPSR_04_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_04_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_LPSR_04 >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_04's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_04_DWP_LOCK(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_04_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_04;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_LPSR_04 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_04's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_04_DWP
    get_SW_PAD_CTL_PAD_GPIO_LPSR_04_DWP() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_04_DWP(
            (SW_PAD_CTL_PAD_GPIO_LPSR_04 >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_04's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_04_DWP(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_04_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_04;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_LPSR_04 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_04's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_04_ODE_LPSR() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_04 & (1u << 5u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_04's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_04_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_04 |= 1u << 5u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_04's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_04_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_04 &= ~(1u << 5u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_04's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_04_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_04 ^= 1u << 5u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_04's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_04_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_04 & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_04's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_04_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_04 |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_04's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_04_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_04 &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_04's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_04_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_04 ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_04's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_04_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_04 & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_04's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_04_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_04 |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_04's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_04_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_04 &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_04's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_04_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_04 ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_04's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_04_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_04 & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_04's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_04_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_04 |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_04's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_04_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_04 &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_04's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_04_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_04 ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_04's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_04_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_04 & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_04's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_04_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_04 |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_04's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_04_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_04 &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_04's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_04_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_04 ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_LPSR_04's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_04 SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_LPSR_04(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_04_DWP_LOCK &DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_04_DWP &DWP, bool &ODE_LPSR,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_04;

        DWP_LOCK = IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_04_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP =
            IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_04_DWP((curr >> 28u) & 0b11u);
        ODE_LPSR = curr & (1u << 5u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_LPSR_04's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_04 SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_04(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_04_DWP_LOCK DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_04_DWP DWP, bool ODE_LPSR,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_04;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 5u);
        curr |= (ODE_LPSR & 0b1u) << 5u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_LPSR_04 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_05's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_05_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_LPSR_05_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_05_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_LPSR_05 >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_05's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_05_DWP_LOCK(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_05_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_05;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_LPSR_05 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_05's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_05_DWP
    get_SW_PAD_CTL_PAD_GPIO_LPSR_05_DWP() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_05_DWP(
            (SW_PAD_CTL_PAD_GPIO_LPSR_05 >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_05's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_05_DWP(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_05_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_05;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_LPSR_05 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_05's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_05_ODE_LPSR() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_05 & (1u << 5u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_05's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_05_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_05 |= 1u << 5u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_05's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_05_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_05 &= ~(1u << 5u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_05's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_05_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_05 ^= 1u << 5u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_05's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_05_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_05 & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_05's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_05_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_05 |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_05's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_05_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_05 &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_05's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_05_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_05 ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_05's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_05_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_05 & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_05's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_05_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_05 |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_05's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_05_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_05 &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_05's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_05_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_05 ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_05's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_05_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_05 & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_05's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_05_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_05 |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_05's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_05_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_05 &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_05's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_05_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_05 ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_05's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_05_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_05 & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_05's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_05_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_05 |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_05's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_05_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_05 &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_05's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_05_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_05 ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_LPSR_05's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_05 SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_LPSR_05(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_05_DWP_LOCK &DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_05_DWP &DWP, bool &ODE_LPSR,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_05;

        DWP_LOCK = IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_05_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP =
            IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_05_DWP((curr >> 28u) & 0b11u);
        ODE_LPSR = curr & (1u << 5u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_LPSR_05's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_05 SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_05(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_05_DWP_LOCK DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_05_DWP DWP, bool ODE_LPSR,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_05;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 5u);
        curr |= (ODE_LPSR & 0b1u) << 5u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_LPSR_05 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_06's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_06_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_LPSR_06_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_06_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_LPSR_06 >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_06's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_06_DWP_LOCK(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_06_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_06;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_LPSR_06 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_06's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_06_DWP
    get_SW_PAD_CTL_PAD_GPIO_LPSR_06_DWP() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_06_DWP(
            (SW_PAD_CTL_PAD_GPIO_LPSR_06 >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_06's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_06_DWP(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_06_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_06;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_LPSR_06 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_06's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_06_ODE_LPSR() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_06 & (1u << 5u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_06's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_06_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_06 |= 1u << 5u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_06's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_06_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_06 &= ~(1u << 5u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_06's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_06_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_06 ^= 1u << 5u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_06's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_06_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_06 & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_06's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_06_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_06 |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_06's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_06_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_06 &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_06's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_06_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_06 ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_06's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_06_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_06 & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_06's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_06_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_06 |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_06's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_06_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_06 &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_06's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_06_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_06 ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_06's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_06_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_06 & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_06's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_06_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_06 |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_06's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_06_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_06 &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_06's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_06_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_06 ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_06's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_06_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_06 & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_06's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_06_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_06 |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_06's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_06_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_06 &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_06's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_06_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_06 ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_LPSR_06's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_06 SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_LPSR_06(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_06_DWP_LOCK &DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_06_DWP &DWP, bool &ODE_LPSR,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_06;

        DWP_LOCK = IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_06_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP =
            IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_06_DWP((curr >> 28u) & 0b11u);
        ODE_LPSR = curr & (1u << 5u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_LPSR_06's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_06 SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_06(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_06_DWP_LOCK DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_06_DWP DWP, bool ODE_LPSR,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_06;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 5u);
        curr |= (ODE_LPSR & 0b1u) << 5u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_LPSR_06 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_07's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_07_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_LPSR_07_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_07_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_LPSR_07 >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_07's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_07_DWP_LOCK(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_07_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_07;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_LPSR_07 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_07's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_07_DWP
    get_SW_PAD_CTL_PAD_GPIO_LPSR_07_DWP() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_07_DWP(
            (SW_PAD_CTL_PAD_GPIO_LPSR_07 >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_07's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_07_DWP(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_07_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_07;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_LPSR_07 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_07's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_07_ODE_LPSR() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_07 & (1u << 5u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_07's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_07_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_07 |= 1u << 5u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_07's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_07_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_07 &= ~(1u << 5u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_07's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_07_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_07 ^= 1u << 5u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_07's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_07_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_07 & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_07's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_07_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_07 |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_07's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_07_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_07 &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_07's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_07_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_07 ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_07's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_07_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_07 & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_07's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_07_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_07 |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_07's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_07_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_07 &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_07's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_07_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_07 ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_07's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_07_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_07 & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_07's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_07_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_07 |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_07's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_07_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_07 &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_07's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_07_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_07 ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_07's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_07_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_07 & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_07's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_07_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_07 |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_07's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_07_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_07 &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_07's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_07_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_07 ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_LPSR_07's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_07 SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_LPSR_07(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_07_DWP_LOCK &DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_07_DWP &DWP, bool &ODE_LPSR,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_07;

        DWP_LOCK = IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_07_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP =
            IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_07_DWP((curr >> 28u) & 0b11u);
        ODE_LPSR = curr & (1u << 5u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_LPSR_07's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_07 SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_07(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_07_DWP_LOCK DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_07_DWP DWP, bool ODE_LPSR,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_07;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 5u);
        curr |= (ODE_LPSR & 0b1u) << 5u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_LPSR_07 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_08's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_08_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_LPSR_08_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_08_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_LPSR_08 >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_08's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_08_DWP_LOCK(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_08_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_08;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_LPSR_08 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_08's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_08_DWP
    get_SW_PAD_CTL_PAD_GPIO_LPSR_08_DWP() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_08_DWP(
            (SW_PAD_CTL_PAD_GPIO_LPSR_08 >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_08's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_08_DWP(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_08_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_08;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_LPSR_08 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_08's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_08_ODE_LPSR() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_08 & (1u << 5u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_08's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_08_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_08 |= 1u << 5u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_08's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_08_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_08 &= ~(1u << 5u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_08's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_08_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_08 ^= 1u << 5u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_08's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_08_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_08 & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_08's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_08_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_08 |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_08's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_08_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_08 &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_08's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_08_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_08 ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_08's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_08_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_08 & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_08's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_08_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_08 |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_08's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_08_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_08 &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_08's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_08_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_08 ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_08's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_08_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_08 & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_08's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_08_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_08 |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_08's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_08_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_08 &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_08's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_08_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_08 ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_08's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_08_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_08 & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_08's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_08_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_08 |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_08's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_08_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_08 &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_08's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_08_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_08 ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_LPSR_08's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_08 SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_LPSR_08(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_08_DWP_LOCK &DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_08_DWP &DWP, bool &ODE_LPSR,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_08;

        DWP_LOCK = IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_08_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP =
            IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_08_DWP((curr >> 28u) & 0b11u);
        ODE_LPSR = curr & (1u << 5u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_LPSR_08's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_08 SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_08(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_08_DWP_LOCK DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_08_DWP DWP, bool ODE_LPSR,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_08;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 5u);
        curr |= (ODE_LPSR & 0b1u) << 5u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_LPSR_08 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_09's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_09_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_LPSR_09_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_09_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_LPSR_09 >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_09's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_09_DWP_LOCK(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_09_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_09;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_LPSR_09 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_09's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_09_DWP
    get_SW_PAD_CTL_PAD_GPIO_LPSR_09_DWP() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_09_DWP(
            (SW_PAD_CTL_PAD_GPIO_LPSR_09 >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_09's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_09_DWP(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_09_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_09;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_LPSR_09 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_09's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_09_ODE_LPSR() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_09 & (1u << 5u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_09's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_09_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_09 |= 1u << 5u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_09's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_09_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_09 &= ~(1u << 5u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_09's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_09_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_09 ^= 1u << 5u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_09's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_09_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_09 & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_09's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_09_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_09 |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_09's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_09_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_09 &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_09's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_09_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_09 ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_09's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_09_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_09 & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_09's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_09_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_09 |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_09's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_09_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_09 &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_09's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_09_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_09 ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_09's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_09_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_09 & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_09's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_09_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_09 |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_09's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_09_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_09 &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_09's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_09_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_09 ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_09's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_09_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_09 & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_09's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_09_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_09 |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_09's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_09_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_09 &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_09's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_09_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_09 ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_LPSR_09's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_09 SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_LPSR_09(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_09_DWP_LOCK &DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_09_DWP &DWP, bool &ODE_LPSR,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_09;

        DWP_LOCK = IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_09_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP =
            IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_09_DWP((curr >> 28u) & 0b11u);
        ODE_LPSR = curr & (1u << 5u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_LPSR_09's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_09 SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_09(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_09_DWP_LOCK DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_09_DWP DWP, bool ODE_LPSR,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_09;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 5u);
        curr |= (ODE_LPSR & 0b1u) << 5u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_LPSR_09 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_10's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_10_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_LPSR_10_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_10_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_LPSR_10 >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_10's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_10_DWP_LOCK(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_10_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_10;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_LPSR_10 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_10's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_10_DWP
    get_SW_PAD_CTL_PAD_GPIO_LPSR_10_DWP() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_10_DWP(
            (SW_PAD_CTL_PAD_GPIO_LPSR_10 >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_10's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_10_DWP(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_10_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_10;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_LPSR_10 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_10's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_10_ODE_LPSR() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_10 & (1u << 5u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_10's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_10_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_10 |= 1u << 5u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_10's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_10_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_10 &= ~(1u << 5u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_10's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_10_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_10 ^= 1u << 5u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_10's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_10_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_10 & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_10's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_10_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_10 |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_10's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_10_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_10 &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_10's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_10_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_10 ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_10's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_10_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_10 & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_10's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_10_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_10 |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_10's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_10_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_10 &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_10's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_10_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_10 ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_10's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_10_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_10 & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_10's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_10_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_10 |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_10's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_10_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_10 &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_10's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_10_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_10 ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_10's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_10_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_10 & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_10's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_10_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_10 |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_10's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_10_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_10 &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_10's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_10_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_10 ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_LPSR_10's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_10 SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_LPSR_10(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_10_DWP_LOCK &DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_10_DWP &DWP, bool &ODE_LPSR,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_10;

        DWP_LOCK = IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_10_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP =
            IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_10_DWP((curr >> 28u) & 0b11u);
        ODE_LPSR = curr & (1u << 5u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_LPSR_10's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_10 SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_10(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_10_DWP_LOCK DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_10_DWP DWP, bool ODE_LPSR,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_10;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 5u);
        curr |= (ODE_LPSR & 0b1u) << 5u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_LPSR_10 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_11's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_11_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_LPSR_11_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_11_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_LPSR_11 >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_11's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_11_DWP_LOCK(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_11_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_11;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_LPSR_11 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_11's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_11_DWP
    get_SW_PAD_CTL_PAD_GPIO_LPSR_11_DWP() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_11_DWP(
            (SW_PAD_CTL_PAD_GPIO_LPSR_11 >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_11's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_11_DWP(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_11_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_11;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_LPSR_11 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_11's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_11_ODE_LPSR() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_11 & (1u << 5u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_11's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_11_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_11 |= 1u << 5u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_11's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_11_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_11 &= ~(1u << 5u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_11's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_11_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_11 ^= 1u << 5u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_11's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_11_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_11 & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_11's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_11_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_11 |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_11's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_11_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_11 &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_11's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_11_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_11 ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_11's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_11_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_11 & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_11's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_11_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_11 |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_11's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_11_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_11 &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_11's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_11_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_11 ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_11's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_11_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_11 & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_11's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_11_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_11 |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_11's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_11_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_11 &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_11's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_11_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_11 ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_11's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_11_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_11 & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_11's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_11_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_11 |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_11's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_11_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_11 &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_11's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_11_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_11 ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_LPSR_11's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_11 SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_LPSR_11(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_11_DWP_LOCK &DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_11_DWP &DWP, bool &ODE_LPSR,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_11;

        DWP_LOCK = IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_11_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP =
            IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_11_DWP((curr >> 28u) & 0b11u);
        ODE_LPSR = curr & (1u << 5u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_LPSR_11's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_11 SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_11(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_11_DWP_LOCK DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_11_DWP DWP, bool ODE_LPSR,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_11;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 5u);
        curr |= (ODE_LPSR & 0b1u) << 5u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_LPSR_11 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_12's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_12_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_LPSR_12_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_12_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_LPSR_12 >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_12's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_12_DWP_LOCK(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_12_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_12;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_LPSR_12 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_12's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_12_DWP
    get_SW_PAD_CTL_PAD_GPIO_LPSR_12_DWP() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_12_DWP(
            (SW_PAD_CTL_PAD_GPIO_LPSR_12 >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_12's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_12_DWP(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_12_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_12;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_LPSR_12 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_12's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_12_ODE_LPSR() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_12 & (1u << 5u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_12's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_12_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_12 |= 1u << 5u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_12's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_12_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_12 &= ~(1u << 5u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_12's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_12_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_12 ^= 1u << 5u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_12's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_12_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_12 & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_12's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_12_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_12 |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_12's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_12_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_12 &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_12's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_12_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_12 ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_12's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_12_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_12 & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_12's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_12_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_12 |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_12's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_12_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_12 &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_12's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_12_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_12 ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_12's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_12_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_12 & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_12's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_12_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_12 |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_12's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_12_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_12 &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_12's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_12_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_12 ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_12's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_12_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_12 & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_12's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_12_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_12 |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_12's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_12_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_12 &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_12's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_12_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_12 ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_LPSR_12's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_12 SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_LPSR_12(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_12_DWP_LOCK &DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_12_DWP &DWP, bool &ODE_LPSR,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_12;

        DWP_LOCK = IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_12_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP =
            IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_12_DWP((curr >> 28u) & 0b11u);
        ODE_LPSR = curr & (1u << 5u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_LPSR_12's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_12 SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_12(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_12_DWP_LOCK DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_12_DWP DWP, bool ODE_LPSR,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_12;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 5u);
        curr |= (ODE_LPSR & 0b1u) << 5u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_LPSR_12 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_13's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_13_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_LPSR_13_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_13_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_LPSR_13 >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_13's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_13_DWP_LOCK(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_13_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_13;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_LPSR_13 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_13's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_13_DWP
    get_SW_PAD_CTL_PAD_GPIO_LPSR_13_DWP() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_13_DWP(
            (SW_PAD_CTL_PAD_GPIO_LPSR_13 >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_13's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_13_DWP(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_13_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_13;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_LPSR_13 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_13's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_13_ODE_LPSR() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_13 & (1u << 5u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_13's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_13_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_13 |= 1u << 5u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_13's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_13_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_13 &= ~(1u << 5u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_13's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_13_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_13 ^= 1u << 5u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_13's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_13_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_13 & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_13's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_13_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_13 |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_13's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_13_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_13 &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_13's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_13_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_13 ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_13's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_13_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_13 & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_13's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_13_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_13 |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_13's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_13_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_13 &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_13's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_13_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_13 ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_13's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_13_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_13 & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_13's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_13_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_13 |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_13's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_13_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_13 &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_13's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_13_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_13 ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_13's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_13_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_13 & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_13's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_13_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_13 |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_13's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_13_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_13 &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_13's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_13_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_13 ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_LPSR_13's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_13 SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_LPSR_13(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_13_DWP_LOCK &DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_13_DWP &DWP, bool &ODE_LPSR,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_13;

        DWP_LOCK = IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_13_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP =
            IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_13_DWP((curr >> 28u) & 0b11u);
        ODE_LPSR = curr & (1u << 5u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_LPSR_13's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_13 SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_13(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_13_DWP_LOCK DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_13_DWP DWP, bool ODE_LPSR,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_13;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 5u);
        curr |= (ODE_LPSR & 0b1u) << 5u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_LPSR_13 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_14's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_14_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_LPSR_14_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_14_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_LPSR_14 >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_14's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_14_DWP_LOCK(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_14_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_14;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_LPSR_14 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_14's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_14_DWP
    get_SW_PAD_CTL_PAD_GPIO_LPSR_14_DWP() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_14_DWP(
            (SW_PAD_CTL_PAD_GPIO_LPSR_14 >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_14's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_14_DWP(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_14_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_14;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_LPSR_14 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_14's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_14_ODE_LPSR() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_14 & (1u << 5u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_14's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_14_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_14 |= 1u << 5u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_14's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_14_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_14 &= ~(1u << 5u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_14's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_14_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_14 ^= 1u << 5u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_14's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_14_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_14 & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_14's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_14_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_14 |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_14's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_14_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_14 &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_14's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_14_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_14 ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_14's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_14_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_14 & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_14's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_14_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_14 |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_14's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_14_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_14 &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_14's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_14_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_14 ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_14's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_14_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_14 & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_14's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_14_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_14 |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_14's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_14_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_14 &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_14's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_14_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_14 ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_14's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_14_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_14 & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_14's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_14_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_14 |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_14's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_14_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_14 &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_14's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_14_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_14 ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_LPSR_14's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_14 SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_LPSR_14(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_14_DWP_LOCK &DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_14_DWP &DWP, bool &ODE_LPSR,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_14;

        DWP_LOCK = IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_14_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP =
            IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_14_DWP((curr >> 28u) & 0b11u);
        ODE_LPSR = curr & (1u << 5u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_LPSR_14's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_14 SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_14(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_14_DWP_LOCK DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_14_DWP DWP, bool ODE_LPSR,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_14;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 5u);
        curr |= (ODE_LPSR & 0b1u) << 5u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_LPSR_14 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_15's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_15_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_LPSR_15_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_15_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_LPSR_15 >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_15's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_15_DWP_LOCK(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_15_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_15;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_LPSR_15 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_15's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_15_DWP
    get_SW_PAD_CTL_PAD_GPIO_LPSR_15_DWP() volatile
    {
        return IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_15_DWP(
            (SW_PAD_CTL_PAD_GPIO_LPSR_15 >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_15's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_15_DWP(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_15_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_15;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_LPSR_15 = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_15's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_15_ODE_LPSR() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_15 & (1u << 5u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_15's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_15_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_15 |= 1u << 5u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_15's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_15_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_15 &= ~(1u << 5u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_15's ODE_LPSR bit.
     *
     * Open Drain LPSR Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_15_ODE_LPSR() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_15 ^= 1u << 5u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_15's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_15_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_15 & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_15's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_15_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_15 |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_15's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_15_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_15 &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_15's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_15_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_15 ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_15's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_15_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_15 & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_15's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_15_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_15 |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_15's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_15_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_15 &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_15's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_15_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_15 ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_15's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_15_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_15 & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_15's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_15_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_15 |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_15's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_15_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_15 &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_15's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_15_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_15 ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_LPSR_15's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_LPSR_15_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_LPSR_15 & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_LPSR_15's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_15_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_15 |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_LPSR_15's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_LPSR_15_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_15 &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_LPSR_15's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_LPSR_15_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_LPSR_15 ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_LPSR_15's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_15 SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_LPSR_15(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_15_DWP_LOCK &DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_15_DWP &DWP, bool &ODE_LPSR,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_15;

        DWP_LOCK = IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_15_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP =
            IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_15_DWP((curr >> 28u) & 0b11u);
        ODE_LPSR = curr & (1u << 5u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_LPSR_15's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_LPSR_15 SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_LPSR_15(
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_15_DWP_LOCK DWP_LOCK,
        IOMUXC_LPSR_SW_PAD_CTL_PAD_GPIO_LPSR_15_DWP DWP, bool ODE_LPSR,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_LPSR_15;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 5u);
        curr |= (ODE_LPSR & 0b1u) << 5u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_LPSR_15 = curr;
    }

    /**
     * Get CAN3_IPP_IND_CANRX_SELECT_INPUT's DAISY field.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline IOMUXC_LPSR_CAN3_IPP_IND_CANRX_SELECT_INPUT_DAISY
    get_CAN3_IPP_IND_CANRX_SELECT_INPUT_DAISY() volatile
    {
        return IOMUXC_LPSR_CAN3_IPP_IND_CANRX_SELECT_INPUT_DAISY(
            (CAN3_IPP_IND_CANRX_SELECT_INPUT >> 0u) & 0b11u);
    }

    /**
     * Set CAN3_IPP_IND_CANRX_SELECT_INPUT's DAISY field.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void set_CAN3_IPP_IND_CANRX_SELECT_INPUT_DAISY(
        IOMUXC_LPSR_CAN3_IPP_IND_CANRX_SELECT_INPUT_DAISY value) volatile
    {
        uint32_t curr = CAN3_IPP_IND_CANRX_SELECT_INPUT;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        CAN3_IPP_IND_CANRX_SELECT_INPUT = curr;
    }

    /**
     * Get LPI2C5_IPP_IND_LPI2C_SCL_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline bool get_LPI2C5_IPP_IND_LPI2C_SCL_SELECT_INPUT_DAISY() volatile
    {
        return LPI2C5_IPP_IND_LPI2C_SCL_SELECT_INPUT & (1u << 0u);
    }

    /**
     * Set LPI2C5_IPP_IND_LPI2C_SCL_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void set_LPI2C5_IPP_IND_LPI2C_SCL_SELECT_INPUT_DAISY() volatile
    {
        LPI2C5_IPP_IND_LPI2C_SCL_SELECT_INPUT |= 1u << 0u;
    }

    /**
     * Clear LPI2C5_IPP_IND_LPI2C_SCL_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void clear_LPI2C5_IPP_IND_LPI2C_SCL_SELECT_INPUT_DAISY() volatile
    {
        LPI2C5_IPP_IND_LPI2C_SCL_SELECT_INPUT &= ~(1u << 0u);
    }

    /**
     * Toggle LPI2C5_IPP_IND_LPI2C_SCL_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void toggle_LPI2C5_IPP_IND_LPI2C_SCL_SELECT_INPUT_DAISY() volatile
    {
        LPI2C5_IPP_IND_LPI2C_SCL_SELECT_INPUT ^= 1u << 0u;
    }

    /**
     * Get LPI2C5_IPP_IND_LPI2C_SDA_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline bool get_LPI2C5_IPP_IND_LPI2C_SDA_SELECT_INPUT_DAISY() volatile
    {
        return LPI2C5_IPP_IND_LPI2C_SDA_SELECT_INPUT & (1u << 0u);
    }

    /**
     * Set LPI2C5_IPP_IND_LPI2C_SDA_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void set_LPI2C5_IPP_IND_LPI2C_SDA_SELECT_INPUT_DAISY() volatile
    {
        LPI2C5_IPP_IND_LPI2C_SDA_SELECT_INPUT |= 1u << 0u;
    }

    /**
     * Clear LPI2C5_IPP_IND_LPI2C_SDA_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void clear_LPI2C5_IPP_IND_LPI2C_SDA_SELECT_INPUT_DAISY() volatile
    {
        LPI2C5_IPP_IND_LPI2C_SDA_SELECT_INPUT &= ~(1u << 0u);
    }

    /**
     * Toggle LPI2C5_IPP_IND_LPI2C_SDA_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void toggle_LPI2C5_IPP_IND_LPI2C_SDA_SELECT_INPUT_DAISY() volatile
    {
        LPI2C5_IPP_IND_LPI2C_SDA_SELECT_INPUT ^= 1u << 0u;
    }

    /**
     * Get LPI2C6_IPP_IND_LPI2C_SCL_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline bool get_LPI2C6_IPP_IND_LPI2C_SCL_SELECT_INPUT_DAISY() volatile
    {
        return LPI2C6_IPP_IND_LPI2C_SCL_SELECT_INPUT & (1u << 0u);
    }

    /**
     * Set LPI2C6_IPP_IND_LPI2C_SCL_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void set_LPI2C6_IPP_IND_LPI2C_SCL_SELECT_INPUT_DAISY() volatile
    {
        LPI2C6_IPP_IND_LPI2C_SCL_SELECT_INPUT |= 1u << 0u;
    }

    /**
     * Clear LPI2C6_IPP_IND_LPI2C_SCL_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void clear_LPI2C6_IPP_IND_LPI2C_SCL_SELECT_INPUT_DAISY() volatile
    {
        LPI2C6_IPP_IND_LPI2C_SCL_SELECT_INPUT &= ~(1u << 0u);
    }

    /**
     * Toggle LPI2C6_IPP_IND_LPI2C_SCL_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void toggle_LPI2C6_IPP_IND_LPI2C_SCL_SELECT_INPUT_DAISY() volatile
    {
        LPI2C6_IPP_IND_LPI2C_SCL_SELECT_INPUT ^= 1u << 0u;
    }

    /**
     * Get LPI2C6_IPP_IND_LPI2C_SDA_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline bool get_LPI2C6_IPP_IND_LPI2C_SDA_SELECT_INPUT_DAISY() volatile
    {
        return LPI2C6_IPP_IND_LPI2C_SDA_SELECT_INPUT & (1u << 0u);
    }

    /**
     * Set LPI2C6_IPP_IND_LPI2C_SDA_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void set_LPI2C6_IPP_IND_LPI2C_SDA_SELECT_INPUT_DAISY() volatile
    {
        LPI2C6_IPP_IND_LPI2C_SDA_SELECT_INPUT |= 1u << 0u;
    }

    /**
     * Clear LPI2C6_IPP_IND_LPI2C_SDA_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void clear_LPI2C6_IPP_IND_LPI2C_SDA_SELECT_INPUT_DAISY() volatile
    {
        LPI2C6_IPP_IND_LPI2C_SDA_SELECT_INPUT &= ~(1u << 0u);
    }

    /**
     * Toggle LPI2C6_IPP_IND_LPI2C_SDA_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void toggle_LPI2C6_IPP_IND_LPI2C_SDA_SELECT_INPUT_DAISY() volatile
    {
        LPI2C6_IPP_IND_LPI2C_SDA_SELECT_INPUT ^= 1u << 0u;
    }

    /**
     * Get LPSPI5_IPP_IND_LPSPI_PCS_SELECT_INPUT_0's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline bool get_LPSPI5_IPP_IND_LPSPI_PCS_SELECT_INPUT_0_DAISY() volatile
    {
        return LPSPI5_IPP_IND_LPSPI_PCS_SELECT_INPUT_0 & (1u << 0u);
    }

    /**
     * Set LPSPI5_IPP_IND_LPSPI_PCS_SELECT_INPUT_0's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void set_LPSPI5_IPP_IND_LPSPI_PCS_SELECT_INPUT_0_DAISY() volatile
    {
        LPSPI5_IPP_IND_LPSPI_PCS_SELECT_INPUT_0 |= 1u << 0u;
    }

    /**
     * Clear LPSPI5_IPP_IND_LPSPI_PCS_SELECT_INPUT_0's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void clear_LPSPI5_IPP_IND_LPSPI_PCS_SELECT_INPUT_0_DAISY() volatile
    {
        LPSPI5_IPP_IND_LPSPI_PCS_SELECT_INPUT_0 &= ~(1u << 0u);
    }

    /**
     * Toggle LPSPI5_IPP_IND_LPSPI_PCS_SELECT_INPUT_0's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void toggle_LPSPI5_IPP_IND_LPSPI_PCS_SELECT_INPUT_0_DAISY() volatile
    {
        LPSPI5_IPP_IND_LPSPI_PCS_SELECT_INPUT_0 ^= 1u << 0u;
    }

    /**
     * Get LPSPI5_IPP_IND_LPSPI_SCK_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline bool get_LPSPI5_IPP_IND_LPSPI_SCK_SELECT_INPUT_DAISY() volatile
    {
        return LPSPI5_IPP_IND_LPSPI_SCK_SELECT_INPUT & (1u << 0u);
    }

    /**
     * Set LPSPI5_IPP_IND_LPSPI_SCK_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void set_LPSPI5_IPP_IND_LPSPI_SCK_SELECT_INPUT_DAISY() volatile
    {
        LPSPI5_IPP_IND_LPSPI_SCK_SELECT_INPUT |= 1u << 0u;
    }

    /**
     * Clear LPSPI5_IPP_IND_LPSPI_SCK_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void clear_LPSPI5_IPP_IND_LPSPI_SCK_SELECT_INPUT_DAISY() volatile
    {
        LPSPI5_IPP_IND_LPSPI_SCK_SELECT_INPUT &= ~(1u << 0u);
    }

    /**
     * Toggle LPSPI5_IPP_IND_LPSPI_SCK_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void toggle_LPSPI5_IPP_IND_LPSPI_SCK_SELECT_INPUT_DAISY() volatile
    {
        LPSPI5_IPP_IND_LPSPI_SCK_SELECT_INPUT ^= 1u << 0u;
    }

    /**
     * Get LPSPI5_IPP_IND_LPSPI_SDI_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline bool get_LPSPI5_IPP_IND_LPSPI_SDI_SELECT_INPUT_DAISY() volatile
    {
        return LPSPI5_IPP_IND_LPSPI_SDI_SELECT_INPUT & (1u << 0u);
    }

    /**
     * Set LPSPI5_IPP_IND_LPSPI_SDI_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void set_LPSPI5_IPP_IND_LPSPI_SDI_SELECT_INPUT_DAISY() volatile
    {
        LPSPI5_IPP_IND_LPSPI_SDI_SELECT_INPUT |= 1u << 0u;
    }

    /**
     * Clear LPSPI5_IPP_IND_LPSPI_SDI_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void clear_LPSPI5_IPP_IND_LPSPI_SDI_SELECT_INPUT_DAISY() volatile
    {
        LPSPI5_IPP_IND_LPSPI_SDI_SELECT_INPUT &= ~(1u << 0u);
    }

    /**
     * Toggle LPSPI5_IPP_IND_LPSPI_SDI_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void toggle_LPSPI5_IPP_IND_LPSPI_SDI_SELECT_INPUT_DAISY() volatile
    {
        LPSPI5_IPP_IND_LPSPI_SDI_SELECT_INPUT ^= 1u << 0u;
    }

    /**
     * Get LPSPI5_IPP_IND_LPSPI_SDO_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline bool get_LPSPI5_IPP_IND_LPSPI_SDO_SELECT_INPUT_DAISY() volatile
    {
        return LPSPI5_IPP_IND_LPSPI_SDO_SELECT_INPUT & (1u << 0u);
    }

    /**
     * Set LPSPI5_IPP_IND_LPSPI_SDO_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void set_LPSPI5_IPP_IND_LPSPI_SDO_SELECT_INPUT_DAISY() volatile
    {
        LPSPI5_IPP_IND_LPSPI_SDO_SELECT_INPUT |= 1u << 0u;
    }

    /**
     * Clear LPSPI5_IPP_IND_LPSPI_SDO_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void clear_LPSPI5_IPP_IND_LPSPI_SDO_SELECT_INPUT_DAISY() volatile
    {
        LPSPI5_IPP_IND_LPSPI_SDO_SELECT_INPUT &= ~(1u << 0u);
    }

    /**
     * Toggle LPSPI5_IPP_IND_LPSPI_SDO_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void toggle_LPSPI5_IPP_IND_LPSPI_SDO_SELECT_INPUT_DAISY() volatile
    {
        LPSPI5_IPP_IND_LPSPI_SDO_SELECT_INPUT ^= 1u << 0u;
    }

    /**
     * Get LPUART11_IPP_IND_LPUART_RXD_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline bool get_LPUART11_IPP_IND_LPUART_RXD_SELECT_INPUT_DAISY() volatile
    {
        return LPUART11_IPP_IND_LPUART_RXD_SELECT_INPUT & (1u << 0u);
    }

    /**
     * Set LPUART11_IPP_IND_LPUART_RXD_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void set_LPUART11_IPP_IND_LPUART_RXD_SELECT_INPUT_DAISY() volatile
    {
        LPUART11_IPP_IND_LPUART_RXD_SELECT_INPUT |= 1u << 0u;
    }

    /**
     * Clear LPUART11_IPP_IND_LPUART_RXD_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void clear_LPUART11_IPP_IND_LPUART_RXD_SELECT_INPUT_DAISY() volatile
    {
        LPUART11_IPP_IND_LPUART_RXD_SELECT_INPUT &= ~(1u << 0u);
    }

    /**
     * Toggle LPUART11_IPP_IND_LPUART_RXD_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void
    toggle_LPUART11_IPP_IND_LPUART_RXD_SELECT_INPUT_DAISY() volatile
    {
        LPUART11_IPP_IND_LPUART_RXD_SELECT_INPUT ^= 1u << 0u;
    }

    /**
     * Get LPUART11_IPP_IND_LPUART_TXD_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline bool get_LPUART11_IPP_IND_LPUART_TXD_SELECT_INPUT_DAISY() volatile
    {
        return LPUART11_IPP_IND_LPUART_TXD_SELECT_INPUT & (1u << 0u);
    }

    /**
     * Set LPUART11_IPP_IND_LPUART_TXD_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void set_LPUART11_IPP_IND_LPUART_TXD_SELECT_INPUT_DAISY() volatile
    {
        LPUART11_IPP_IND_LPUART_TXD_SELECT_INPUT |= 1u << 0u;
    }

    /**
     * Clear LPUART11_IPP_IND_LPUART_TXD_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void clear_LPUART11_IPP_IND_LPUART_TXD_SELECT_INPUT_DAISY() volatile
    {
        LPUART11_IPP_IND_LPUART_TXD_SELECT_INPUT &= ~(1u << 0u);
    }

    /**
     * Toggle LPUART11_IPP_IND_LPUART_TXD_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void
    toggle_LPUART11_IPP_IND_LPUART_TXD_SELECT_INPUT_DAISY() volatile
    {
        LPUART11_IPP_IND_LPUART_TXD_SELECT_INPUT ^= 1u << 0u;
    }

    /**
     * Get LPUART12_IPP_IND_LPUART_RXD_SELECT_INPUT's DAISY field.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline IOMUXC_LPSR_LPUART12_IPP_IND_LPUART_RXD_SELECT_INPUT_DAISY
    get_LPUART12_IPP_IND_LPUART_RXD_SELECT_INPUT_DAISY() volatile
    {
        return IOMUXC_LPSR_LPUART12_IPP_IND_LPUART_RXD_SELECT_INPUT_DAISY(
            (LPUART12_IPP_IND_LPUART_RXD_SELECT_INPUT >> 0u) & 0b11u);
    }

    /**
     * Set LPUART12_IPP_IND_LPUART_RXD_SELECT_INPUT's DAISY field.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void set_LPUART12_IPP_IND_LPUART_RXD_SELECT_INPUT_DAISY(
        IOMUXC_LPSR_LPUART12_IPP_IND_LPUART_RXD_SELECT_INPUT_DAISY
            value) volatile
    {
        uint32_t curr = LPUART12_IPP_IND_LPUART_RXD_SELECT_INPUT;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        LPUART12_IPP_IND_LPUART_RXD_SELECT_INPUT = curr;
    }

    /**
     * Get LPUART12_IPP_IND_LPUART_TXD_SELECT_INPUT's DAISY field.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline IOMUXC_LPSR_LPUART12_IPP_IND_LPUART_TXD_SELECT_INPUT_DAISY
    get_LPUART12_IPP_IND_LPUART_TXD_SELECT_INPUT_DAISY() volatile
    {
        return IOMUXC_LPSR_LPUART12_IPP_IND_LPUART_TXD_SELECT_INPUT_DAISY(
            (LPUART12_IPP_IND_LPUART_TXD_SELECT_INPUT >> 0u) & 0b11u);
    }

    /**
     * Set LPUART12_IPP_IND_LPUART_TXD_SELECT_INPUT's DAISY field.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void set_LPUART12_IPP_IND_LPUART_TXD_SELECT_INPUT_DAISY(
        IOMUXC_LPSR_LPUART12_IPP_IND_LPUART_TXD_SELECT_INPUT_DAISY
            value) volatile
    {
        uint32_t curr = LPUART12_IPP_IND_LPUART_TXD_SELECT_INPUT;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        LPUART12_IPP_IND_LPUART_TXD_SELECT_INPUT = curr;
    }

    /**
     * Get MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_0's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline bool
    get_MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_0_DAISY() volatile
    {
        return MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_0 & (1u << 0u);
    }

    /**
     * Set MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_0's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void
    set_MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_0_DAISY() volatile
    {
        MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_0 |= 1u << 0u;
    }

    /**
     * Clear MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_0's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void
    clear_MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_0_DAISY() volatile
    {
        MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_0 &= ~(1u << 0u);
    }

    /**
     * Toggle MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_0's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void
    toggle_MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_0_DAISY() volatile
    {
        MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_0 ^= 1u << 0u;
    }

    /**
     * Get MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_1's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline bool
    get_MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_1_DAISY() volatile
    {
        return MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_1 & (1u << 0u);
    }

    /**
     * Set MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_1's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void
    set_MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_1_DAISY() volatile
    {
        MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_1 |= 1u << 0u;
    }

    /**
     * Clear MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_1's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void
    clear_MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_1_DAISY() volatile
    {
        MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_1 &= ~(1u << 0u);
    }

    /**
     * Toggle MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_1's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void
    toggle_MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_1_DAISY() volatile
    {
        MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_1 ^= 1u << 0u;
    }

    /**
     * Get MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_2's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline bool
    get_MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_2_DAISY() volatile
    {
        return MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_2 & (1u << 0u);
    }

    /**
     * Set MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_2's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void
    set_MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_2_DAISY() volatile
    {
        MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_2 |= 1u << 0u;
    }

    /**
     * Clear MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_2's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void
    clear_MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_2_DAISY() volatile
    {
        MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_2 &= ~(1u << 0u);
    }

    /**
     * Toggle MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_2's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void
    toggle_MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_2_DAISY() volatile
    {
        MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_2 ^= 1u << 0u;
    }

    /**
     * Get MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_3's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline bool
    get_MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_3_DAISY() volatile
    {
        return MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_3 & (1u << 0u);
    }

    /**
     * Set MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_3's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void
    set_MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_3_DAISY() volatile
    {
        MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_3 |= 1u << 0u;
    }

    /**
     * Clear MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_3's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void
    clear_MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_3_DAISY() volatile
    {
        MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_3 &= ~(1u << 0u);
    }

    /**
     * Toggle MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_3's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void
    toggle_MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_3_DAISY() volatile
    {
        MIC_IPP_IND_MIC_PDM_BITSTREAM_SELECT_INPUT_3 ^= 1u << 0u;
    }

    /**
     * Get NMI_GLUE_IPP_IND_NMI_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline bool get_NMI_GLUE_IPP_IND_NMI_SELECT_INPUT_DAISY() volatile
    {
        return NMI_GLUE_IPP_IND_NMI_SELECT_INPUT & (1u << 0u);
    }

    /**
     * Set NMI_GLUE_IPP_IND_NMI_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void set_NMI_GLUE_IPP_IND_NMI_SELECT_INPUT_DAISY() volatile
    {
        NMI_GLUE_IPP_IND_NMI_SELECT_INPUT |= 1u << 0u;
    }

    /**
     * Clear NMI_GLUE_IPP_IND_NMI_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void clear_NMI_GLUE_IPP_IND_NMI_SELECT_INPUT_DAISY() volatile
    {
        NMI_GLUE_IPP_IND_NMI_SELECT_INPUT &= ~(1u << 0u);
    }

    /**
     * Toggle NMI_GLUE_IPP_IND_NMI_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void toggle_NMI_GLUE_IPP_IND_NMI_SELECT_INPUT_DAISY() volatile
    {
        NMI_GLUE_IPP_IND_NMI_SELECT_INPUT ^= 1u << 0u;
    }

    /**
     * Get SAI4_IPG_CLK_SAI_MCLK_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline bool get_SAI4_IPG_CLK_SAI_MCLK_SELECT_INPUT_DAISY() volatile
    {
        return SAI4_IPG_CLK_SAI_MCLK_SELECT_INPUT & (1u << 0u);
    }

    /**
     * Set SAI4_IPG_CLK_SAI_MCLK_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void set_SAI4_IPG_CLK_SAI_MCLK_SELECT_INPUT_DAISY() volatile
    {
        SAI4_IPG_CLK_SAI_MCLK_SELECT_INPUT |= 1u << 0u;
    }

    /**
     * Clear SAI4_IPG_CLK_SAI_MCLK_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void clear_SAI4_IPG_CLK_SAI_MCLK_SELECT_INPUT_DAISY() volatile
    {
        SAI4_IPG_CLK_SAI_MCLK_SELECT_INPUT &= ~(1u << 0u);
    }

    /**
     * Toggle SAI4_IPG_CLK_SAI_MCLK_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void toggle_SAI4_IPG_CLK_SAI_MCLK_SELECT_INPUT_DAISY() volatile
    {
        SAI4_IPG_CLK_SAI_MCLK_SELECT_INPUT ^= 1u << 0u;
    }

    /**
     * Get SAI4_IPP_IND_SAI_RXBCLK_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline bool get_SAI4_IPP_IND_SAI_RXBCLK_SELECT_INPUT_DAISY() volatile
    {
        return SAI4_IPP_IND_SAI_RXBCLK_SELECT_INPUT & (1u << 0u);
    }

    /**
     * Set SAI4_IPP_IND_SAI_RXBCLK_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void set_SAI4_IPP_IND_SAI_RXBCLK_SELECT_INPUT_DAISY() volatile
    {
        SAI4_IPP_IND_SAI_RXBCLK_SELECT_INPUT |= 1u << 0u;
    }

    /**
     * Clear SAI4_IPP_IND_SAI_RXBCLK_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void clear_SAI4_IPP_IND_SAI_RXBCLK_SELECT_INPUT_DAISY() volatile
    {
        SAI4_IPP_IND_SAI_RXBCLK_SELECT_INPUT &= ~(1u << 0u);
    }

    /**
     * Toggle SAI4_IPP_IND_SAI_RXBCLK_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void toggle_SAI4_IPP_IND_SAI_RXBCLK_SELECT_INPUT_DAISY() volatile
    {
        SAI4_IPP_IND_SAI_RXBCLK_SELECT_INPUT ^= 1u << 0u;
    }

    /**
     * Get SAI4_IPP_IND_SAI_RXDATA_SELECT_INPUT_0's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline bool get_SAI4_IPP_IND_SAI_RXDATA_SELECT_INPUT_0_DAISY() volatile
    {
        return SAI4_IPP_IND_SAI_RXDATA_SELECT_INPUT_0 & (1u << 0u);
    }

    /**
     * Set SAI4_IPP_IND_SAI_RXDATA_SELECT_INPUT_0's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void set_SAI4_IPP_IND_SAI_RXDATA_SELECT_INPUT_0_DAISY() volatile
    {
        SAI4_IPP_IND_SAI_RXDATA_SELECT_INPUT_0 |= 1u << 0u;
    }

    /**
     * Clear SAI4_IPP_IND_SAI_RXDATA_SELECT_INPUT_0's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void clear_SAI4_IPP_IND_SAI_RXDATA_SELECT_INPUT_0_DAISY() volatile
    {
        SAI4_IPP_IND_SAI_RXDATA_SELECT_INPUT_0 &= ~(1u << 0u);
    }

    /**
     * Toggle SAI4_IPP_IND_SAI_RXDATA_SELECT_INPUT_0's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void toggle_SAI4_IPP_IND_SAI_RXDATA_SELECT_INPUT_0_DAISY() volatile
    {
        SAI4_IPP_IND_SAI_RXDATA_SELECT_INPUT_0 ^= 1u << 0u;
    }

    /**
     * Get SAI4_IPP_IND_SAI_RXSYNC_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline bool get_SAI4_IPP_IND_SAI_RXSYNC_SELECT_INPUT_DAISY() volatile
    {
        return SAI4_IPP_IND_SAI_RXSYNC_SELECT_INPUT & (1u << 0u);
    }

    /**
     * Set SAI4_IPP_IND_SAI_RXSYNC_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void set_SAI4_IPP_IND_SAI_RXSYNC_SELECT_INPUT_DAISY() volatile
    {
        SAI4_IPP_IND_SAI_RXSYNC_SELECT_INPUT |= 1u << 0u;
    }

    /**
     * Clear SAI4_IPP_IND_SAI_RXSYNC_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void clear_SAI4_IPP_IND_SAI_RXSYNC_SELECT_INPUT_DAISY() volatile
    {
        SAI4_IPP_IND_SAI_RXSYNC_SELECT_INPUT &= ~(1u << 0u);
    }

    /**
     * Toggle SAI4_IPP_IND_SAI_RXSYNC_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void toggle_SAI4_IPP_IND_SAI_RXSYNC_SELECT_INPUT_DAISY() volatile
    {
        SAI4_IPP_IND_SAI_RXSYNC_SELECT_INPUT ^= 1u << 0u;
    }

    /**
     * Get SAI4_IPP_IND_SAI_TXBCLK_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline bool get_SAI4_IPP_IND_SAI_TXBCLK_SELECT_INPUT_DAISY() volatile
    {
        return SAI4_IPP_IND_SAI_TXBCLK_SELECT_INPUT & (1u << 0u);
    }

    /**
     * Set SAI4_IPP_IND_SAI_TXBCLK_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void set_SAI4_IPP_IND_SAI_TXBCLK_SELECT_INPUT_DAISY() volatile
    {
        SAI4_IPP_IND_SAI_TXBCLK_SELECT_INPUT |= 1u << 0u;
    }

    /**
     * Clear SAI4_IPP_IND_SAI_TXBCLK_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void clear_SAI4_IPP_IND_SAI_TXBCLK_SELECT_INPUT_DAISY() volatile
    {
        SAI4_IPP_IND_SAI_TXBCLK_SELECT_INPUT &= ~(1u << 0u);
    }

    /**
     * Toggle SAI4_IPP_IND_SAI_TXBCLK_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void toggle_SAI4_IPP_IND_SAI_TXBCLK_SELECT_INPUT_DAISY() volatile
    {
        SAI4_IPP_IND_SAI_TXBCLK_SELECT_INPUT ^= 1u << 0u;
    }

    /**
     * Get SAI4_IPP_IND_SAI_TXSYNC_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline bool get_SAI4_IPP_IND_SAI_TXSYNC_SELECT_INPUT_DAISY() volatile
    {
        return SAI4_IPP_IND_SAI_TXSYNC_SELECT_INPUT & (1u << 0u);
    }

    /**
     * Set SAI4_IPP_IND_SAI_TXSYNC_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void set_SAI4_IPP_IND_SAI_TXSYNC_SELECT_INPUT_DAISY() volatile
    {
        SAI4_IPP_IND_SAI_TXSYNC_SELECT_INPUT |= 1u << 0u;
    }

    /**
     * Clear SAI4_IPP_IND_SAI_TXSYNC_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void clear_SAI4_IPP_IND_SAI_TXSYNC_SELECT_INPUT_DAISY() volatile
    {
        SAI4_IPP_IND_SAI_TXSYNC_SELECT_INPUT &= ~(1u << 0u);
    }

    /**
     * Toggle SAI4_IPP_IND_SAI_TXSYNC_SELECT_INPUT's DAISY bit.
     *
     * Selecting Pads Involved in Daisy Chain.
     */
    inline void toggle_SAI4_IPP_IND_SAI_TXSYNC_SELECT_INPUT_DAISY() volatile
    {
        SAI4_IPP_IND_SAI_TXSYNC_SELECT_INPUT ^= 1u << 0u;
    }
};

static_assert(sizeof(iomuxc_lpsr) == iomuxc_lpsr::size);

static volatile iomuxc_lpsr *const IOMUXC_LPSR =
    reinterpret_cast<iomuxc_lpsr *>(0x40C08000);

}; // namespace MIMXRT1176::CM7
