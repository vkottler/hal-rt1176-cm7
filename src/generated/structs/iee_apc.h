/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * IEE_APC
 */
struct [[gnu::packed]] iee_apc
{
    /* Constant attributes. */
    static constexpr std::size_t size = 128; /*!< iee_apc's size in bytes. */

    /* Fields. */
    uint32_t
        REGION0_TOP_ADDR; /*!< (read-write) End address of IEE region (n) */
    uint32_t
        REGION0_BOT_ADDR; /*!< (read-write) Start address of IEE region (n) */
    uint32_t REGION0_RDC_D0; /*!< (read-write) Region control of core domain 0
                                for region (n) */
    uint32_t REGION0_RDC_D1; /*!< (read-write) Region control of core domain 1
                                for region (n) */
    uint32_t
        REGION1_TOP_ADDR; /*!< (read-write) End address of IEE region (n) */
    uint32_t
        REGION1_BOT_ADDR; /*!< (read-write) Start address of IEE region (n) */
    uint32_t REGION1_RDC_D0; /*!< (read-write) Region control of core domain 0
                                for region (n) */
    uint32_t REGION1_RDC_D1; /*!< (read-write) Region control of core domain 1
                                for region (n) */
    uint32_t
        REGION2_TOP_ADDR; /*!< (read-write) End address of IEE region (n) */
    uint32_t
        REGION2_BOT_ADDR; /*!< (read-write) Start address of IEE region (n) */
    uint32_t REGION2_RDC_D0; /*!< (read-write) Region control of core domain 0
                                for region (n) */
    uint32_t REGION2_RDC_D1; /*!< (read-write) Region control of core domain 1
                                for region (n) */
    uint32_t
        REGION3_TOP_ADDR; /*!< (read-write) End address of IEE region (n) */
    uint32_t
        REGION3_BOT_ADDR; /*!< (read-write) Start address of IEE region (n) */
    uint32_t REGION3_RDC_D0; /*!< (read-write) Region control of core domain 0
                                for region (n) */
    uint32_t REGION3_RDC_D1; /*!< (read-write) Region control of core domain 1
                                for region (n) */
    uint32_t
        REGION4_TOP_ADDR; /*!< (read-write) End address of IEE region (n) */
    uint32_t
        REGION4_BOT_ADDR; /*!< (read-write) Start address of IEE region (n) */
    uint32_t REGION4_RDC_D0; /*!< (read-write) Region control of core domain 0
                                for region (n) */
    uint32_t REGION4_RDC_D1; /*!< (read-write) Region control of core domain 1
                                for region (n) */
    uint32_t
        REGION5_TOP_ADDR; /*!< (read-write) End address of IEE region (n) */
    uint32_t
        REGION5_BOT_ADDR; /*!< (read-write) Start address of IEE region (n) */
    uint32_t REGION5_RDC_D0; /*!< (read-write) Region control of core domain 0
                                for region (n) */
    uint32_t REGION5_RDC_D1; /*!< (read-write) Region control of core domain 1
                                for region (n) */
    uint32_t
        REGION6_TOP_ADDR; /*!< (read-write) End address of IEE region (n) */
    uint32_t
        REGION6_BOT_ADDR; /*!< (read-write) Start address of IEE region (n) */
    uint32_t REGION6_RDC_D0; /*!< (read-write) Region control of core domain 0
                                for region (n) */
    uint32_t REGION6_RDC_D1; /*!< (read-write) Region control of core domain 1
                                for region (n) */
    uint32_t
        REGION7_TOP_ADDR; /*!< (read-write) End address of IEE region (n) */
    uint32_t
        REGION7_BOT_ADDR; /*!< (read-write) Start address of IEE region (n) */
    uint32_t REGION7_RDC_D0; /*!< (read-write) Region control of core domain 0
                                for region (n) */
    uint32_t REGION7_RDC_D1; /*!< (read-write) Region control of core domain 1
                                for region (n) */

    /* Methods. */

    /**
     * Get REGION0_TOP_ADDR's TOP_ADDR field.
     *
     * End address of IEE region
     */
    inline uint32_t get_REGION0_TOP_ADDR_TOP_ADDR() volatile
    {
        return (REGION0_TOP_ADDR >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set REGION0_TOP_ADDR's TOP_ADDR field.
     *
     * End address of IEE region
     */
    inline void set_REGION0_TOP_ADDR_TOP_ADDR(uint32_t value) volatile
    {
        uint32_t curr = REGION0_TOP_ADDR;

        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111u) << 0u;

        REGION0_TOP_ADDR = curr;
    }

    /**
     * Get REGION0_BOT_ADDR's BOT_ADDR field.
     *
     * Start address of IEE region
     */
    inline uint32_t get_REGION0_BOT_ADDR_BOT_ADDR() volatile
    {
        return (REGION0_BOT_ADDR >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set REGION0_BOT_ADDR's BOT_ADDR field.
     *
     * Start address of IEE region
     */
    inline void set_REGION0_BOT_ADDR_BOT_ADDR(uint32_t value) volatile
    {
        uint32_t curr = REGION0_BOT_ADDR;

        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111u) << 0u;

        REGION0_BOT_ADDR = curr;
    }

    /**
     * Get REGION0_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline bool get_REGION0_RDC_D0_RDC_D0_LOCK() volatile
    {
        return REGION0_RDC_D0 & (1u << 1u);
    }

    /**
     * Set REGION0_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void set_REGION0_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION0_RDC_D0 |= 1u << 1u;
    }

    /**
     * Clear REGION0_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void clear_REGION0_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION0_RDC_D0 &= ~(1u << 1u);
    }

    /**
     * Toggle REGION0_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void toggle_REGION0_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION0_RDC_D0 ^= 1u << 1u;
    }

    /**
     * Get REGION0_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline bool get_REGION0_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        return REGION0_RDC_D0 & (1u << 0u);
    }

    /**
     * Set REGION0_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void set_REGION0_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION0_RDC_D0 |= 1u << 0u;
    }

    /**
     * Clear REGION0_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void clear_REGION0_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION0_RDC_D0 &= ~(1u << 0u);
    }

    /**
     * Toggle REGION0_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void toggle_REGION0_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION0_RDC_D0 ^= 1u << 0u;
    }

    /**
     * Get all of REGION0_RDC_D0's bit fields.
     *
     * (read-write) Region control of core domain 0 for region (n)
     */
    inline void get_REGION0_RDC_D0(bool &RDC_D0_LOCK,
                                   bool &RDC_D0_WRITE_DIS) volatile
    {
        uint32_t curr = REGION0_RDC_D0;

        RDC_D0_LOCK = curr & (1u << 1u);
        RDC_D0_WRITE_DIS = curr & (1u << 0u);
    }

    /**
     * Set all of REGION0_RDC_D0's bit fields.
     *
     * (read-write) Region control of core domain 0 for region (n)
     */
    inline void set_REGION0_RDC_D0(bool RDC_D0_LOCK,
                                   bool RDC_D0_WRITE_DIS) volatile
    {
        uint32_t curr = REGION0_RDC_D0;

        curr &= ~(0b1u << 1u);
        curr |= (RDC_D0_LOCK & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RDC_D0_WRITE_DIS & 0b1u) << 0u;

        REGION0_RDC_D0 = curr;
    }

    /**
     * Get REGION0_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline bool get_REGION0_RDC_D1_RDC_D1_LOCK() volatile
    {
        return REGION0_RDC_D1 & (1u << 1u);
    }

    /**
     * Set REGION0_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void set_REGION0_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION0_RDC_D1 |= 1u << 1u;
    }

    /**
     * Clear REGION0_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void clear_REGION0_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION0_RDC_D1 &= ~(1u << 1u);
    }

    /**
     * Toggle REGION0_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void toggle_REGION0_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION0_RDC_D1 ^= 1u << 1u;
    }

    /**
     * Get REGION0_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline bool get_REGION0_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        return REGION0_RDC_D1 & (1u << 0u);
    }

    /**
     * Set REGION0_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void set_REGION0_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION0_RDC_D1 |= 1u << 0u;
    }

    /**
     * Clear REGION0_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void clear_REGION0_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION0_RDC_D1 &= ~(1u << 0u);
    }

    /**
     * Toggle REGION0_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void toggle_REGION0_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION0_RDC_D1 ^= 1u << 0u;
    }

    /**
     * Get all of REGION0_RDC_D1's bit fields.
     *
     * (read-write) Region control of core domain 1 for region (n)
     */
    inline void get_REGION0_RDC_D1(bool &RDC_D1_LOCK,
                                   bool &RDC_D1_WRITE_DIS) volatile
    {
        uint32_t curr = REGION0_RDC_D1;

        RDC_D1_LOCK = curr & (1u << 1u);
        RDC_D1_WRITE_DIS = curr & (1u << 0u);
    }

    /**
     * Set all of REGION0_RDC_D1's bit fields.
     *
     * (read-write) Region control of core domain 1 for region (n)
     */
    inline void set_REGION0_RDC_D1(bool RDC_D1_LOCK,
                                   bool RDC_D1_WRITE_DIS) volatile
    {
        uint32_t curr = REGION0_RDC_D1;

        curr &= ~(0b1u << 1u);
        curr |= (RDC_D1_LOCK & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RDC_D1_WRITE_DIS & 0b1u) << 0u;

        REGION0_RDC_D1 = curr;
    }

    /**
     * Get REGION1_TOP_ADDR's TOP_ADDR field.
     *
     * End address of IEE region
     */
    inline uint32_t get_REGION1_TOP_ADDR_TOP_ADDR() volatile
    {
        return (REGION1_TOP_ADDR >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set REGION1_TOP_ADDR's TOP_ADDR field.
     *
     * End address of IEE region
     */
    inline void set_REGION1_TOP_ADDR_TOP_ADDR(uint32_t value) volatile
    {
        uint32_t curr = REGION1_TOP_ADDR;

        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111u) << 0u;

        REGION1_TOP_ADDR = curr;
    }

    /**
     * Get REGION1_BOT_ADDR's BOT_ADDR field.
     *
     * Start address of IEE region
     */
    inline uint32_t get_REGION1_BOT_ADDR_BOT_ADDR() volatile
    {
        return (REGION1_BOT_ADDR >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set REGION1_BOT_ADDR's BOT_ADDR field.
     *
     * Start address of IEE region
     */
    inline void set_REGION1_BOT_ADDR_BOT_ADDR(uint32_t value) volatile
    {
        uint32_t curr = REGION1_BOT_ADDR;

        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111u) << 0u;

        REGION1_BOT_ADDR = curr;
    }

    /**
     * Get REGION1_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline bool get_REGION1_RDC_D0_RDC_D0_LOCK() volatile
    {
        return REGION1_RDC_D0 & (1u << 1u);
    }

    /**
     * Set REGION1_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void set_REGION1_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION1_RDC_D0 |= 1u << 1u;
    }

    /**
     * Clear REGION1_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void clear_REGION1_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION1_RDC_D0 &= ~(1u << 1u);
    }

    /**
     * Toggle REGION1_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void toggle_REGION1_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION1_RDC_D0 ^= 1u << 1u;
    }

    /**
     * Get REGION1_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline bool get_REGION1_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        return REGION1_RDC_D0 & (1u << 0u);
    }

    /**
     * Set REGION1_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void set_REGION1_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION1_RDC_D0 |= 1u << 0u;
    }

    /**
     * Clear REGION1_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void clear_REGION1_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION1_RDC_D0 &= ~(1u << 0u);
    }

    /**
     * Toggle REGION1_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void toggle_REGION1_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION1_RDC_D0 ^= 1u << 0u;
    }

    /**
     * Get all of REGION1_RDC_D0's bit fields.
     *
     * (read-write) Region control of core domain 0 for region (n)
     */
    inline void get_REGION1_RDC_D0(bool &RDC_D0_LOCK,
                                   bool &RDC_D0_WRITE_DIS) volatile
    {
        uint32_t curr = REGION1_RDC_D0;

        RDC_D0_LOCK = curr & (1u << 1u);
        RDC_D0_WRITE_DIS = curr & (1u << 0u);
    }

    /**
     * Set all of REGION1_RDC_D0's bit fields.
     *
     * (read-write) Region control of core domain 0 for region (n)
     */
    inline void set_REGION1_RDC_D0(bool RDC_D0_LOCK,
                                   bool RDC_D0_WRITE_DIS) volatile
    {
        uint32_t curr = REGION1_RDC_D0;

        curr &= ~(0b1u << 1u);
        curr |= (RDC_D0_LOCK & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RDC_D0_WRITE_DIS & 0b1u) << 0u;

        REGION1_RDC_D0 = curr;
    }

    /**
     * Get REGION1_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline bool get_REGION1_RDC_D1_RDC_D1_LOCK() volatile
    {
        return REGION1_RDC_D1 & (1u << 1u);
    }

    /**
     * Set REGION1_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void set_REGION1_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION1_RDC_D1 |= 1u << 1u;
    }

    /**
     * Clear REGION1_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void clear_REGION1_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION1_RDC_D1 &= ~(1u << 1u);
    }

    /**
     * Toggle REGION1_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void toggle_REGION1_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION1_RDC_D1 ^= 1u << 1u;
    }

    /**
     * Get REGION1_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline bool get_REGION1_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        return REGION1_RDC_D1 & (1u << 0u);
    }

    /**
     * Set REGION1_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void set_REGION1_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION1_RDC_D1 |= 1u << 0u;
    }

    /**
     * Clear REGION1_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void clear_REGION1_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION1_RDC_D1 &= ~(1u << 0u);
    }

    /**
     * Toggle REGION1_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void toggle_REGION1_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION1_RDC_D1 ^= 1u << 0u;
    }

    /**
     * Get all of REGION1_RDC_D1's bit fields.
     *
     * (read-write) Region control of core domain 1 for region (n)
     */
    inline void get_REGION1_RDC_D1(bool &RDC_D1_LOCK,
                                   bool &RDC_D1_WRITE_DIS) volatile
    {
        uint32_t curr = REGION1_RDC_D1;

        RDC_D1_LOCK = curr & (1u << 1u);
        RDC_D1_WRITE_DIS = curr & (1u << 0u);
    }

    /**
     * Set all of REGION1_RDC_D1's bit fields.
     *
     * (read-write) Region control of core domain 1 for region (n)
     */
    inline void set_REGION1_RDC_D1(bool RDC_D1_LOCK,
                                   bool RDC_D1_WRITE_DIS) volatile
    {
        uint32_t curr = REGION1_RDC_D1;

        curr &= ~(0b1u << 1u);
        curr |= (RDC_D1_LOCK & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RDC_D1_WRITE_DIS & 0b1u) << 0u;

        REGION1_RDC_D1 = curr;
    }

    /**
     * Get REGION2_TOP_ADDR's TOP_ADDR field.
     *
     * End address of IEE region
     */
    inline uint32_t get_REGION2_TOP_ADDR_TOP_ADDR() volatile
    {
        return (REGION2_TOP_ADDR >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set REGION2_TOP_ADDR's TOP_ADDR field.
     *
     * End address of IEE region
     */
    inline void set_REGION2_TOP_ADDR_TOP_ADDR(uint32_t value) volatile
    {
        uint32_t curr = REGION2_TOP_ADDR;

        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111u) << 0u;

        REGION2_TOP_ADDR = curr;
    }

    /**
     * Get REGION2_BOT_ADDR's BOT_ADDR field.
     *
     * Start address of IEE region
     */
    inline uint32_t get_REGION2_BOT_ADDR_BOT_ADDR() volatile
    {
        return (REGION2_BOT_ADDR >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set REGION2_BOT_ADDR's BOT_ADDR field.
     *
     * Start address of IEE region
     */
    inline void set_REGION2_BOT_ADDR_BOT_ADDR(uint32_t value) volatile
    {
        uint32_t curr = REGION2_BOT_ADDR;

        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111u) << 0u;

        REGION2_BOT_ADDR = curr;
    }

    /**
     * Get REGION2_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline bool get_REGION2_RDC_D0_RDC_D0_LOCK() volatile
    {
        return REGION2_RDC_D0 & (1u << 1u);
    }

    /**
     * Set REGION2_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void set_REGION2_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION2_RDC_D0 |= 1u << 1u;
    }

    /**
     * Clear REGION2_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void clear_REGION2_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION2_RDC_D0 &= ~(1u << 1u);
    }

    /**
     * Toggle REGION2_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void toggle_REGION2_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION2_RDC_D0 ^= 1u << 1u;
    }

    /**
     * Get REGION2_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline bool get_REGION2_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        return REGION2_RDC_D0 & (1u << 0u);
    }

    /**
     * Set REGION2_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void set_REGION2_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION2_RDC_D0 |= 1u << 0u;
    }

    /**
     * Clear REGION2_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void clear_REGION2_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION2_RDC_D0 &= ~(1u << 0u);
    }

    /**
     * Toggle REGION2_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void toggle_REGION2_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION2_RDC_D0 ^= 1u << 0u;
    }

    /**
     * Get all of REGION2_RDC_D0's bit fields.
     *
     * (read-write) Region control of core domain 0 for region (n)
     */
    inline void get_REGION2_RDC_D0(bool &RDC_D0_LOCK,
                                   bool &RDC_D0_WRITE_DIS) volatile
    {
        uint32_t curr = REGION2_RDC_D0;

        RDC_D0_LOCK = curr & (1u << 1u);
        RDC_D0_WRITE_DIS = curr & (1u << 0u);
    }

    /**
     * Set all of REGION2_RDC_D0's bit fields.
     *
     * (read-write) Region control of core domain 0 for region (n)
     */
    inline void set_REGION2_RDC_D0(bool RDC_D0_LOCK,
                                   bool RDC_D0_WRITE_DIS) volatile
    {
        uint32_t curr = REGION2_RDC_D0;

        curr &= ~(0b1u << 1u);
        curr |= (RDC_D0_LOCK & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RDC_D0_WRITE_DIS & 0b1u) << 0u;

        REGION2_RDC_D0 = curr;
    }

    /**
     * Get REGION2_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline bool get_REGION2_RDC_D1_RDC_D1_LOCK() volatile
    {
        return REGION2_RDC_D1 & (1u << 1u);
    }

    /**
     * Set REGION2_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void set_REGION2_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION2_RDC_D1 |= 1u << 1u;
    }

    /**
     * Clear REGION2_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void clear_REGION2_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION2_RDC_D1 &= ~(1u << 1u);
    }

    /**
     * Toggle REGION2_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void toggle_REGION2_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION2_RDC_D1 ^= 1u << 1u;
    }

    /**
     * Get REGION2_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline bool get_REGION2_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        return REGION2_RDC_D1 & (1u << 0u);
    }

    /**
     * Set REGION2_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void set_REGION2_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION2_RDC_D1 |= 1u << 0u;
    }

    /**
     * Clear REGION2_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void clear_REGION2_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION2_RDC_D1 &= ~(1u << 0u);
    }

    /**
     * Toggle REGION2_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void toggle_REGION2_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION2_RDC_D1 ^= 1u << 0u;
    }

    /**
     * Get all of REGION2_RDC_D1's bit fields.
     *
     * (read-write) Region control of core domain 1 for region (n)
     */
    inline void get_REGION2_RDC_D1(bool &RDC_D1_LOCK,
                                   bool &RDC_D1_WRITE_DIS) volatile
    {
        uint32_t curr = REGION2_RDC_D1;

        RDC_D1_LOCK = curr & (1u << 1u);
        RDC_D1_WRITE_DIS = curr & (1u << 0u);
    }

    /**
     * Set all of REGION2_RDC_D1's bit fields.
     *
     * (read-write) Region control of core domain 1 for region (n)
     */
    inline void set_REGION2_RDC_D1(bool RDC_D1_LOCK,
                                   bool RDC_D1_WRITE_DIS) volatile
    {
        uint32_t curr = REGION2_RDC_D1;

        curr &= ~(0b1u << 1u);
        curr |= (RDC_D1_LOCK & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RDC_D1_WRITE_DIS & 0b1u) << 0u;

        REGION2_RDC_D1 = curr;
    }

    /**
     * Get REGION3_TOP_ADDR's TOP_ADDR field.
     *
     * End address of IEE region
     */
    inline uint32_t get_REGION3_TOP_ADDR_TOP_ADDR() volatile
    {
        return (REGION3_TOP_ADDR >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set REGION3_TOP_ADDR's TOP_ADDR field.
     *
     * End address of IEE region
     */
    inline void set_REGION3_TOP_ADDR_TOP_ADDR(uint32_t value) volatile
    {
        uint32_t curr = REGION3_TOP_ADDR;

        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111u) << 0u;

        REGION3_TOP_ADDR = curr;
    }

    /**
     * Get REGION3_BOT_ADDR's BOT_ADDR field.
     *
     * Start address of IEE region
     */
    inline uint32_t get_REGION3_BOT_ADDR_BOT_ADDR() volatile
    {
        return (REGION3_BOT_ADDR >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set REGION3_BOT_ADDR's BOT_ADDR field.
     *
     * Start address of IEE region
     */
    inline void set_REGION3_BOT_ADDR_BOT_ADDR(uint32_t value) volatile
    {
        uint32_t curr = REGION3_BOT_ADDR;

        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111u) << 0u;

        REGION3_BOT_ADDR = curr;
    }

    /**
     * Get REGION3_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline bool get_REGION3_RDC_D0_RDC_D0_LOCK() volatile
    {
        return REGION3_RDC_D0 & (1u << 1u);
    }

    /**
     * Set REGION3_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void set_REGION3_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION3_RDC_D0 |= 1u << 1u;
    }

    /**
     * Clear REGION3_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void clear_REGION3_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION3_RDC_D0 &= ~(1u << 1u);
    }

    /**
     * Toggle REGION3_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void toggle_REGION3_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION3_RDC_D0 ^= 1u << 1u;
    }

    /**
     * Get REGION3_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline bool get_REGION3_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        return REGION3_RDC_D0 & (1u << 0u);
    }

    /**
     * Set REGION3_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void set_REGION3_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION3_RDC_D0 |= 1u << 0u;
    }

    /**
     * Clear REGION3_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void clear_REGION3_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION3_RDC_D0 &= ~(1u << 0u);
    }

    /**
     * Toggle REGION3_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void toggle_REGION3_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION3_RDC_D0 ^= 1u << 0u;
    }

    /**
     * Get all of REGION3_RDC_D0's bit fields.
     *
     * (read-write) Region control of core domain 0 for region (n)
     */
    inline void get_REGION3_RDC_D0(bool &RDC_D0_LOCK,
                                   bool &RDC_D0_WRITE_DIS) volatile
    {
        uint32_t curr = REGION3_RDC_D0;

        RDC_D0_LOCK = curr & (1u << 1u);
        RDC_D0_WRITE_DIS = curr & (1u << 0u);
    }

    /**
     * Set all of REGION3_RDC_D0's bit fields.
     *
     * (read-write) Region control of core domain 0 for region (n)
     */
    inline void set_REGION3_RDC_D0(bool RDC_D0_LOCK,
                                   bool RDC_D0_WRITE_DIS) volatile
    {
        uint32_t curr = REGION3_RDC_D0;

        curr &= ~(0b1u << 1u);
        curr |= (RDC_D0_LOCK & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RDC_D0_WRITE_DIS & 0b1u) << 0u;

        REGION3_RDC_D0 = curr;
    }

    /**
     * Get REGION3_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline bool get_REGION3_RDC_D1_RDC_D1_LOCK() volatile
    {
        return REGION3_RDC_D1 & (1u << 1u);
    }

    /**
     * Set REGION3_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void set_REGION3_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION3_RDC_D1 |= 1u << 1u;
    }

    /**
     * Clear REGION3_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void clear_REGION3_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION3_RDC_D1 &= ~(1u << 1u);
    }

    /**
     * Toggle REGION3_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void toggle_REGION3_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION3_RDC_D1 ^= 1u << 1u;
    }

    /**
     * Get REGION3_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline bool get_REGION3_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        return REGION3_RDC_D1 & (1u << 0u);
    }

    /**
     * Set REGION3_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void set_REGION3_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION3_RDC_D1 |= 1u << 0u;
    }

    /**
     * Clear REGION3_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void clear_REGION3_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION3_RDC_D1 &= ~(1u << 0u);
    }

    /**
     * Toggle REGION3_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void toggle_REGION3_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION3_RDC_D1 ^= 1u << 0u;
    }

    /**
     * Get all of REGION3_RDC_D1's bit fields.
     *
     * (read-write) Region control of core domain 1 for region (n)
     */
    inline void get_REGION3_RDC_D1(bool &RDC_D1_LOCK,
                                   bool &RDC_D1_WRITE_DIS) volatile
    {
        uint32_t curr = REGION3_RDC_D1;

        RDC_D1_LOCK = curr & (1u << 1u);
        RDC_D1_WRITE_DIS = curr & (1u << 0u);
    }

    /**
     * Set all of REGION3_RDC_D1's bit fields.
     *
     * (read-write) Region control of core domain 1 for region (n)
     */
    inline void set_REGION3_RDC_D1(bool RDC_D1_LOCK,
                                   bool RDC_D1_WRITE_DIS) volatile
    {
        uint32_t curr = REGION3_RDC_D1;

        curr &= ~(0b1u << 1u);
        curr |= (RDC_D1_LOCK & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RDC_D1_WRITE_DIS & 0b1u) << 0u;

        REGION3_RDC_D1 = curr;
    }

    /**
     * Get REGION4_TOP_ADDR's TOP_ADDR field.
     *
     * End address of IEE region
     */
    inline uint32_t get_REGION4_TOP_ADDR_TOP_ADDR() volatile
    {
        return (REGION4_TOP_ADDR >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set REGION4_TOP_ADDR's TOP_ADDR field.
     *
     * End address of IEE region
     */
    inline void set_REGION4_TOP_ADDR_TOP_ADDR(uint32_t value) volatile
    {
        uint32_t curr = REGION4_TOP_ADDR;

        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111u) << 0u;

        REGION4_TOP_ADDR = curr;
    }

    /**
     * Get REGION4_BOT_ADDR's BOT_ADDR field.
     *
     * Start address of IEE region
     */
    inline uint32_t get_REGION4_BOT_ADDR_BOT_ADDR() volatile
    {
        return (REGION4_BOT_ADDR >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set REGION4_BOT_ADDR's BOT_ADDR field.
     *
     * Start address of IEE region
     */
    inline void set_REGION4_BOT_ADDR_BOT_ADDR(uint32_t value) volatile
    {
        uint32_t curr = REGION4_BOT_ADDR;

        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111u) << 0u;

        REGION4_BOT_ADDR = curr;
    }

    /**
     * Get REGION4_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline bool get_REGION4_RDC_D0_RDC_D0_LOCK() volatile
    {
        return REGION4_RDC_D0 & (1u << 1u);
    }

    /**
     * Set REGION4_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void set_REGION4_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION4_RDC_D0 |= 1u << 1u;
    }

    /**
     * Clear REGION4_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void clear_REGION4_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION4_RDC_D0 &= ~(1u << 1u);
    }

    /**
     * Toggle REGION4_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void toggle_REGION4_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION4_RDC_D0 ^= 1u << 1u;
    }

    /**
     * Get REGION4_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline bool get_REGION4_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        return REGION4_RDC_D0 & (1u << 0u);
    }

    /**
     * Set REGION4_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void set_REGION4_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION4_RDC_D0 |= 1u << 0u;
    }

    /**
     * Clear REGION4_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void clear_REGION4_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION4_RDC_D0 &= ~(1u << 0u);
    }

    /**
     * Toggle REGION4_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void toggle_REGION4_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION4_RDC_D0 ^= 1u << 0u;
    }

    /**
     * Get all of REGION4_RDC_D0's bit fields.
     *
     * (read-write) Region control of core domain 0 for region (n)
     */
    inline void get_REGION4_RDC_D0(bool &RDC_D0_LOCK,
                                   bool &RDC_D0_WRITE_DIS) volatile
    {
        uint32_t curr = REGION4_RDC_D0;

        RDC_D0_LOCK = curr & (1u << 1u);
        RDC_D0_WRITE_DIS = curr & (1u << 0u);
    }

    /**
     * Set all of REGION4_RDC_D0's bit fields.
     *
     * (read-write) Region control of core domain 0 for region (n)
     */
    inline void set_REGION4_RDC_D0(bool RDC_D0_LOCK,
                                   bool RDC_D0_WRITE_DIS) volatile
    {
        uint32_t curr = REGION4_RDC_D0;

        curr &= ~(0b1u << 1u);
        curr |= (RDC_D0_LOCK & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RDC_D0_WRITE_DIS & 0b1u) << 0u;

        REGION4_RDC_D0 = curr;
    }

    /**
     * Get REGION4_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline bool get_REGION4_RDC_D1_RDC_D1_LOCK() volatile
    {
        return REGION4_RDC_D1 & (1u << 1u);
    }

    /**
     * Set REGION4_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void set_REGION4_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION4_RDC_D1 |= 1u << 1u;
    }

    /**
     * Clear REGION4_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void clear_REGION4_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION4_RDC_D1 &= ~(1u << 1u);
    }

    /**
     * Toggle REGION4_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void toggle_REGION4_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION4_RDC_D1 ^= 1u << 1u;
    }

    /**
     * Get REGION4_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline bool get_REGION4_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        return REGION4_RDC_D1 & (1u << 0u);
    }

    /**
     * Set REGION4_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void set_REGION4_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION4_RDC_D1 |= 1u << 0u;
    }

    /**
     * Clear REGION4_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void clear_REGION4_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION4_RDC_D1 &= ~(1u << 0u);
    }

    /**
     * Toggle REGION4_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void toggle_REGION4_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION4_RDC_D1 ^= 1u << 0u;
    }

    /**
     * Get all of REGION4_RDC_D1's bit fields.
     *
     * (read-write) Region control of core domain 1 for region (n)
     */
    inline void get_REGION4_RDC_D1(bool &RDC_D1_LOCK,
                                   bool &RDC_D1_WRITE_DIS) volatile
    {
        uint32_t curr = REGION4_RDC_D1;

        RDC_D1_LOCK = curr & (1u << 1u);
        RDC_D1_WRITE_DIS = curr & (1u << 0u);
    }

    /**
     * Set all of REGION4_RDC_D1's bit fields.
     *
     * (read-write) Region control of core domain 1 for region (n)
     */
    inline void set_REGION4_RDC_D1(bool RDC_D1_LOCK,
                                   bool RDC_D1_WRITE_DIS) volatile
    {
        uint32_t curr = REGION4_RDC_D1;

        curr &= ~(0b1u << 1u);
        curr |= (RDC_D1_LOCK & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RDC_D1_WRITE_DIS & 0b1u) << 0u;

        REGION4_RDC_D1 = curr;
    }

    /**
     * Get REGION5_TOP_ADDR's TOP_ADDR field.
     *
     * End address of IEE region
     */
    inline uint32_t get_REGION5_TOP_ADDR_TOP_ADDR() volatile
    {
        return (REGION5_TOP_ADDR >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set REGION5_TOP_ADDR's TOP_ADDR field.
     *
     * End address of IEE region
     */
    inline void set_REGION5_TOP_ADDR_TOP_ADDR(uint32_t value) volatile
    {
        uint32_t curr = REGION5_TOP_ADDR;

        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111u) << 0u;

        REGION5_TOP_ADDR = curr;
    }

    /**
     * Get REGION5_BOT_ADDR's BOT_ADDR field.
     *
     * Start address of IEE region
     */
    inline uint32_t get_REGION5_BOT_ADDR_BOT_ADDR() volatile
    {
        return (REGION5_BOT_ADDR >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set REGION5_BOT_ADDR's BOT_ADDR field.
     *
     * Start address of IEE region
     */
    inline void set_REGION5_BOT_ADDR_BOT_ADDR(uint32_t value) volatile
    {
        uint32_t curr = REGION5_BOT_ADDR;

        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111u) << 0u;

        REGION5_BOT_ADDR = curr;
    }

    /**
     * Get REGION5_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline bool get_REGION5_RDC_D0_RDC_D0_LOCK() volatile
    {
        return REGION5_RDC_D0 & (1u << 1u);
    }

    /**
     * Set REGION5_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void set_REGION5_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION5_RDC_D0 |= 1u << 1u;
    }

    /**
     * Clear REGION5_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void clear_REGION5_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION5_RDC_D0 &= ~(1u << 1u);
    }

    /**
     * Toggle REGION5_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void toggle_REGION5_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION5_RDC_D0 ^= 1u << 1u;
    }

    /**
     * Get REGION5_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline bool get_REGION5_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        return REGION5_RDC_D0 & (1u << 0u);
    }

    /**
     * Set REGION5_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void set_REGION5_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION5_RDC_D0 |= 1u << 0u;
    }

    /**
     * Clear REGION5_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void clear_REGION5_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION5_RDC_D0 &= ~(1u << 0u);
    }

    /**
     * Toggle REGION5_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void toggle_REGION5_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION5_RDC_D0 ^= 1u << 0u;
    }

    /**
     * Get all of REGION5_RDC_D0's bit fields.
     *
     * (read-write) Region control of core domain 0 for region (n)
     */
    inline void get_REGION5_RDC_D0(bool &RDC_D0_LOCK,
                                   bool &RDC_D0_WRITE_DIS) volatile
    {
        uint32_t curr = REGION5_RDC_D0;

        RDC_D0_LOCK = curr & (1u << 1u);
        RDC_D0_WRITE_DIS = curr & (1u << 0u);
    }

    /**
     * Set all of REGION5_RDC_D0's bit fields.
     *
     * (read-write) Region control of core domain 0 for region (n)
     */
    inline void set_REGION5_RDC_D0(bool RDC_D0_LOCK,
                                   bool RDC_D0_WRITE_DIS) volatile
    {
        uint32_t curr = REGION5_RDC_D0;

        curr &= ~(0b1u << 1u);
        curr |= (RDC_D0_LOCK & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RDC_D0_WRITE_DIS & 0b1u) << 0u;

        REGION5_RDC_D0 = curr;
    }

    /**
     * Get REGION5_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline bool get_REGION5_RDC_D1_RDC_D1_LOCK() volatile
    {
        return REGION5_RDC_D1 & (1u << 1u);
    }

    /**
     * Set REGION5_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void set_REGION5_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION5_RDC_D1 |= 1u << 1u;
    }

    /**
     * Clear REGION5_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void clear_REGION5_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION5_RDC_D1 &= ~(1u << 1u);
    }

    /**
     * Toggle REGION5_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void toggle_REGION5_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION5_RDC_D1 ^= 1u << 1u;
    }

    /**
     * Get REGION5_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline bool get_REGION5_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        return REGION5_RDC_D1 & (1u << 0u);
    }

    /**
     * Set REGION5_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void set_REGION5_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION5_RDC_D1 |= 1u << 0u;
    }

    /**
     * Clear REGION5_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void clear_REGION5_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION5_RDC_D1 &= ~(1u << 0u);
    }

    /**
     * Toggle REGION5_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void toggle_REGION5_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION5_RDC_D1 ^= 1u << 0u;
    }

    /**
     * Get all of REGION5_RDC_D1's bit fields.
     *
     * (read-write) Region control of core domain 1 for region (n)
     */
    inline void get_REGION5_RDC_D1(bool &RDC_D1_LOCK,
                                   bool &RDC_D1_WRITE_DIS) volatile
    {
        uint32_t curr = REGION5_RDC_D1;

        RDC_D1_LOCK = curr & (1u << 1u);
        RDC_D1_WRITE_DIS = curr & (1u << 0u);
    }

    /**
     * Set all of REGION5_RDC_D1's bit fields.
     *
     * (read-write) Region control of core domain 1 for region (n)
     */
    inline void set_REGION5_RDC_D1(bool RDC_D1_LOCK,
                                   bool RDC_D1_WRITE_DIS) volatile
    {
        uint32_t curr = REGION5_RDC_D1;

        curr &= ~(0b1u << 1u);
        curr |= (RDC_D1_LOCK & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RDC_D1_WRITE_DIS & 0b1u) << 0u;

        REGION5_RDC_D1 = curr;
    }

    /**
     * Get REGION6_TOP_ADDR's TOP_ADDR field.
     *
     * End address of IEE region
     */
    inline uint32_t get_REGION6_TOP_ADDR_TOP_ADDR() volatile
    {
        return (REGION6_TOP_ADDR >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set REGION6_TOP_ADDR's TOP_ADDR field.
     *
     * End address of IEE region
     */
    inline void set_REGION6_TOP_ADDR_TOP_ADDR(uint32_t value) volatile
    {
        uint32_t curr = REGION6_TOP_ADDR;

        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111u) << 0u;

        REGION6_TOP_ADDR = curr;
    }

    /**
     * Get REGION6_BOT_ADDR's BOT_ADDR field.
     *
     * Start address of IEE region
     */
    inline uint32_t get_REGION6_BOT_ADDR_BOT_ADDR() volatile
    {
        return (REGION6_BOT_ADDR >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set REGION6_BOT_ADDR's BOT_ADDR field.
     *
     * Start address of IEE region
     */
    inline void set_REGION6_BOT_ADDR_BOT_ADDR(uint32_t value) volatile
    {
        uint32_t curr = REGION6_BOT_ADDR;

        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111u) << 0u;

        REGION6_BOT_ADDR = curr;
    }

    /**
     * Get REGION6_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline bool get_REGION6_RDC_D0_RDC_D0_LOCK() volatile
    {
        return REGION6_RDC_D0 & (1u << 1u);
    }

    /**
     * Set REGION6_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void set_REGION6_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION6_RDC_D0 |= 1u << 1u;
    }

    /**
     * Clear REGION6_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void clear_REGION6_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION6_RDC_D0 &= ~(1u << 1u);
    }

    /**
     * Toggle REGION6_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void toggle_REGION6_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION6_RDC_D0 ^= 1u << 1u;
    }

    /**
     * Get REGION6_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline bool get_REGION6_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        return REGION6_RDC_D0 & (1u << 0u);
    }

    /**
     * Set REGION6_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void set_REGION6_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION6_RDC_D0 |= 1u << 0u;
    }

    /**
     * Clear REGION6_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void clear_REGION6_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION6_RDC_D0 &= ~(1u << 0u);
    }

    /**
     * Toggle REGION6_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void toggle_REGION6_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION6_RDC_D0 ^= 1u << 0u;
    }

    /**
     * Get all of REGION6_RDC_D0's bit fields.
     *
     * (read-write) Region control of core domain 0 for region (n)
     */
    inline void get_REGION6_RDC_D0(bool &RDC_D0_LOCK,
                                   bool &RDC_D0_WRITE_DIS) volatile
    {
        uint32_t curr = REGION6_RDC_D0;

        RDC_D0_LOCK = curr & (1u << 1u);
        RDC_D0_WRITE_DIS = curr & (1u << 0u);
    }

    /**
     * Set all of REGION6_RDC_D0's bit fields.
     *
     * (read-write) Region control of core domain 0 for region (n)
     */
    inline void set_REGION6_RDC_D0(bool RDC_D0_LOCK,
                                   bool RDC_D0_WRITE_DIS) volatile
    {
        uint32_t curr = REGION6_RDC_D0;

        curr &= ~(0b1u << 1u);
        curr |= (RDC_D0_LOCK & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RDC_D0_WRITE_DIS & 0b1u) << 0u;

        REGION6_RDC_D0 = curr;
    }

    /**
     * Get REGION6_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline bool get_REGION6_RDC_D1_RDC_D1_LOCK() volatile
    {
        return REGION6_RDC_D1 & (1u << 1u);
    }

    /**
     * Set REGION6_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void set_REGION6_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION6_RDC_D1 |= 1u << 1u;
    }

    /**
     * Clear REGION6_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void clear_REGION6_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION6_RDC_D1 &= ~(1u << 1u);
    }

    /**
     * Toggle REGION6_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void toggle_REGION6_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION6_RDC_D1 ^= 1u << 1u;
    }

    /**
     * Get REGION6_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline bool get_REGION6_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        return REGION6_RDC_D1 & (1u << 0u);
    }

    /**
     * Set REGION6_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void set_REGION6_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION6_RDC_D1 |= 1u << 0u;
    }

    /**
     * Clear REGION6_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void clear_REGION6_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION6_RDC_D1 &= ~(1u << 0u);
    }

    /**
     * Toggle REGION6_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void toggle_REGION6_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION6_RDC_D1 ^= 1u << 0u;
    }

    /**
     * Get all of REGION6_RDC_D1's bit fields.
     *
     * (read-write) Region control of core domain 1 for region (n)
     */
    inline void get_REGION6_RDC_D1(bool &RDC_D1_LOCK,
                                   bool &RDC_D1_WRITE_DIS) volatile
    {
        uint32_t curr = REGION6_RDC_D1;

        RDC_D1_LOCK = curr & (1u << 1u);
        RDC_D1_WRITE_DIS = curr & (1u << 0u);
    }

    /**
     * Set all of REGION6_RDC_D1's bit fields.
     *
     * (read-write) Region control of core domain 1 for region (n)
     */
    inline void set_REGION6_RDC_D1(bool RDC_D1_LOCK,
                                   bool RDC_D1_WRITE_DIS) volatile
    {
        uint32_t curr = REGION6_RDC_D1;

        curr &= ~(0b1u << 1u);
        curr |= (RDC_D1_LOCK & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RDC_D1_WRITE_DIS & 0b1u) << 0u;

        REGION6_RDC_D1 = curr;
    }

    /**
     * Get REGION7_TOP_ADDR's TOP_ADDR field.
     *
     * End address of IEE region
     */
    inline uint32_t get_REGION7_TOP_ADDR_TOP_ADDR() volatile
    {
        return (REGION7_TOP_ADDR >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set REGION7_TOP_ADDR's TOP_ADDR field.
     *
     * End address of IEE region
     */
    inline void set_REGION7_TOP_ADDR_TOP_ADDR(uint32_t value) volatile
    {
        uint32_t curr = REGION7_TOP_ADDR;

        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111u) << 0u;

        REGION7_TOP_ADDR = curr;
    }

    /**
     * Get REGION7_BOT_ADDR's BOT_ADDR field.
     *
     * Start address of IEE region
     */
    inline uint32_t get_REGION7_BOT_ADDR_BOT_ADDR() volatile
    {
        return (REGION7_BOT_ADDR >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set REGION7_BOT_ADDR's BOT_ADDR field.
     *
     * Start address of IEE region
     */
    inline void set_REGION7_BOT_ADDR_BOT_ADDR(uint32_t value) volatile
    {
        uint32_t curr = REGION7_BOT_ADDR;

        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111u) << 0u;

        REGION7_BOT_ADDR = curr;
    }

    /**
     * Get REGION7_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline bool get_REGION7_RDC_D0_RDC_D0_LOCK() volatile
    {
        return REGION7_RDC_D0 & (1u << 1u);
    }

    /**
     * Set REGION7_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void set_REGION7_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION7_RDC_D0 |= 1u << 1u;
    }

    /**
     * Clear REGION7_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void clear_REGION7_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION7_RDC_D0 &= ~(1u << 1u);
    }

    /**
     * Toggle REGION7_RDC_D0's RDC_D0_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void toggle_REGION7_RDC_D0_RDC_D0_LOCK() volatile
    {
        REGION7_RDC_D0 ^= 1u << 1u;
    }

    /**
     * Get REGION7_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline bool get_REGION7_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        return REGION7_RDC_D0 & (1u << 0u);
    }

    /**
     * Set REGION7_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void set_REGION7_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION7_RDC_D0 |= 1u << 0u;
    }

    /**
     * Clear REGION7_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void clear_REGION7_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION7_RDC_D0 &= ~(1u << 0u);
    }

    /**
     * Toggle REGION7_RDC_D0's RDC_D0_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void toggle_REGION7_RDC_D0_RDC_D0_WRITE_DIS() volatile
    {
        REGION7_RDC_D0 ^= 1u << 0u;
    }

    /**
     * Get all of REGION7_RDC_D0's bit fields.
     *
     * (read-write) Region control of core domain 0 for region (n)
     */
    inline void get_REGION7_RDC_D0(bool &RDC_D0_LOCK,
                                   bool &RDC_D0_WRITE_DIS) volatile
    {
        uint32_t curr = REGION7_RDC_D0;

        RDC_D0_LOCK = curr & (1u << 1u);
        RDC_D0_WRITE_DIS = curr & (1u << 0u);
    }

    /**
     * Set all of REGION7_RDC_D0's bit fields.
     *
     * (read-write) Region control of core domain 0 for region (n)
     */
    inline void set_REGION7_RDC_D0(bool RDC_D0_LOCK,
                                   bool RDC_D0_WRITE_DIS) volatile
    {
        uint32_t curr = REGION7_RDC_D0;

        curr &= ~(0b1u << 1u);
        curr |= (RDC_D0_LOCK & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RDC_D0_WRITE_DIS & 0b1u) << 0u;

        REGION7_RDC_D0 = curr;
    }

    /**
     * Get REGION7_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline bool get_REGION7_RDC_D1_RDC_D1_LOCK() volatile
    {
        return REGION7_RDC_D1 & (1u << 1u);
    }

    /**
     * Set REGION7_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void set_REGION7_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION7_RDC_D1 |= 1u << 1u;
    }

    /**
     * Clear REGION7_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void clear_REGION7_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION7_RDC_D1 &= ~(1u << 1u);
    }

    /**
     * Toggle REGION7_RDC_D1's RDC_D1_LOCK bit.
     *
     * Lock bit for bit 0
     */
    inline void toggle_REGION7_RDC_D1_RDC_D1_LOCK() volatile
    {
        REGION7_RDC_D1 ^= 1u << 1u;
    }

    /**
     * Get REGION7_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline bool get_REGION7_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        return REGION7_RDC_D1 & (1u << 0u);
    }

    /**
     * Set REGION7_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void set_REGION7_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION7_RDC_D1 |= 1u << 0u;
    }

    /**
     * Clear REGION7_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void clear_REGION7_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION7_RDC_D1 &= ~(1u << 0u);
    }

    /**
     * Toggle REGION7_RDC_D1's RDC_D1_WRITE_DIS bit.
     *
     * Write disable of core domain 1
     */
    inline void toggle_REGION7_RDC_D1_RDC_D1_WRITE_DIS() volatile
    {
        REGION7_RDC_D1 ^= 1u << 0u;
    }

    /**
     * Get all of REGION7_RDC_D1's bit fields.
     *
     * (read-write) Region control of core domain 1 for region (n)
     */
    inline void get_REGION7_RDC_D1(bool &RDC_D1_LOCK,
                                   bool &RDC_D1_WRITE_DIS) volatile
    {
        uint32_t curr = REGION7_RDC_D1;

        RDC_D1_LOCK = curr & (1u << 1u);
        RDC_D1_WRITE_DIS = curr & (1u << 0u);
    }

    /**
     * Set all of REGION7_RDC_D1's bit fields.
     *
     * (read-write) Region control of core domain 1 for region (n)
     */
    inline void set_REGION7_RDC_D1(bool RDC_D1_LOCK,
                                   bool RDC_D1_WRITE_DIS) volatile
    {
        uint32_t curr = REGION7_RDC_D1;

        curr &= ~(0b1u << 1u);
        curr |= (RDC_D1_LOCK & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RDC_D1_WRITE_DIS & 0b1u) << 0u;

        REGION7_RDC_D1 = curr;
    }
};

static_assert(sizeof(iee_apc) == iee_apc::size);

static volatile iee_apc *const IEE_APC =
    reinterpret_cast<iee_apc *>(0x40068000);

}; // namespace MIMXRT1176::CM7
