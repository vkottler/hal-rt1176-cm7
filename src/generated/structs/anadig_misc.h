/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * MX6RT_ANADIG_REGISTER
 */
struct [[gnu::packed]] anadig_misc
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        2372; /*!< anadig_misc's size in bytes. */

    /* Fields. */
    static constexpr std::size_t reserved_padding0_length = 512;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t MISC_DIFPROG; /*!< (read-write) Chip Silicon Version Register */
    static constexpr std::size_t reserved_padding1_length = 7;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    uint32_t VDDSOC_AI_CTRL; /*!< (read-write) VDDSOC_AI_CTRL_REGISTER */
    static constexpr std::size_t reserved_padding2_length = 3;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    uint32_t VDDSOC_AI_WDATA; /*!< (read-write) VDDSOC_AI_WDATA_REGISTER */
    static constexpr std::size_t reserved_padding3_length = 3;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    uint32_t VDDSOC_AI_RDATA; /*!< (read-write) VDDSOC_AI_RDATA_REGISTER */
    static constexpr std::size_t reserved_padding4_length = 3;
    const uint32_t reserved_padding4[reserved_padding4_length] = {};
    uint32_t VDDSOC2PLL_AI_CTRL_1G; /*!< (read-write)
                                       VDDSOC2PLL_AI_CTRL_1G_REGISTER */
    static constexpr std::size_t reserved_padding5_length = 3;
    const uint32_t reserved_padding5[reserved_padding5_length] = {};
    uint32_t VDDSOC2PLL_AI_WDATA_1G; /*!< (read-write)
                                        VDDSOC2PLL_AI_WDATA_1G_REGISTER */
    static constexpr std::size_t reserved_padding6_length = 3;
    const uint32_t reserved_padding6[reserved_padding6_length] = {};
    uint32_t VDDSOC2PLL_AI_RDATA_1G; /*!< (read-write)
                                        VDDSOC2PLL_AI_RDATA_1G_REGISTER */
    static constexpr std::size_t reserved_padding7_length = 3;
    const uint32_t reserved_padding7[reserved_padding7_length] = {};
    uint32_t VDDSOC2PLL_AI_CTRL_AUDIO; /*!< (read-write)
                                          VDDSOC_AI_CTRL_AUDIO_REGISTER */
    static constexpr std::size_t reserved_padding8_length = 3;
    const uint32_t reserved_padding8[reserved_padding8_length] = {};
    uint32_t VDDSOC2PLL_AI_WDATA_AUDIO; /*!< (read-write)
                                           VDDSOC_AI_WDATA_AUDIO_REGISTER */
    static constexpr std::size_t reserved_padding9_length = 3;
    const uint32_t reserved_padding9[reserved_padding9_length] = {};
    uint32_t VDDSOC2PLL_AI_RDATA_AUDIO; /*!< (read-write)
                                           VDDSOC2PLL_AI_RDATA_REGISTER */
    static constexpr std::size_t reserved_padding10_length = 3;
    const uint32_t reserved_padding10[reserved_padding10_length] = {};
    uint32_t VDDSOC2PLL_AI_CTRL_VIDEO; /*!< (read-write)
                                          VDDSOC2PLL_AI_CTRL_VIDEO_REGISTER */
    static constexpr std::size_t reserved_padding11_length = 3;
    const uint32_t reserved_padding11[reserved_padding11_length] = {};
    uint32_t
        VDDSOC2PLL_AI_WDATA_VIDEO; /*!< (read-write)
                                      VDDSOC2PLL_AI_WDATA_VIDEO_REGISTER */
    static constexpr std::size_t reserved_padding12_length = 3;
    const uint32_t reserved_padding12[reserved_padding12_length] = {};
    uint32_t
        VDDSOC2PLL_AI_RDATA_VIDEO; /*!< (read-write)
                                      VDDSOC2PLL_AI_RDATA_VIDEO_REGISTER */
    static constexpr std::size_t reserved_padding13_length = 3;
    const uint32_t reserved_padding13[reserved_padding13_length] = {};
    uint32_t VDDLPSR_AI_CTRL; /*!< (read-write) VDDSOC_AI_CTRL_REGISTER */
    static constexpr std::size_t reserved_padding14_length = 3;
    const uint32_t reserved_padding14[reserved_padding14_length] = {};
    uint32_t VDDLPSR_AI_WDATA; /*!< (read-write) VDDLPSR_AI_WDATA_REGISTER */
    static constexpr std::size_t reserved_padding15_length = 3;
    const uint32_t reserved_padding15[reserved_padding15_length] = {};
    uint32_t VDDLPSR_AI_RDATA_REFTOP; /*!< (read-write)
                                         VDDLPSR_AI_RDATA_REFTOP_REGISTER */
    static constexpr std::size_t reserved_padding16_length = 3;
    const uint32_t reserved_padding16[reserved_padding16_length] = {};
    uint32_t VDDLPSR_AI_RDATA_TMPSNS; /*!< (read-write)
                                         VDDLPSR_AI_RDATA_TMPSNS_REGISTER */
    static constexpr std::size_t reserved_padding17_length = 3;
    const uint32_t reserved_padding17[reserved_padding17_length] = {};
    uint32_t
        VDDLPSR_AI400M_CTRL; /*!< (read-write) VDDLPSR_AI400M_CTRL_REGISTER */
    static constexpr std::size_t reserved_padding18_length = 3;
    const uint32_t reserved_padding18[reserved_padding18_length] = {};
    uint32_t VDDLPSR_AI400M_WDATA; /*!< (read-write)
                                      VDDLPSR_AI400M_WDATA_REGISTER */
    static constexpr std::size_t reserved_padding19_length = 3;
    const uint32_t reserved_padding19[reserved_padding19_length] = {};
    uint32_t VDDLPSR_AI400M_RDATA; /*!< (read-write)
                                      VDDLPSR_AI400M_RDATA_REGISTER */

    /* Methods. */

    /**
     * Get MISC_DIFPROG's CHIPID field.
     *
     * Chip ID
     */
    inline uint32_t get_MISC_DIFPROG_CHIPID() volatile
    {
        return (MISC_DIFPROG >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get VDDSOC_AI_CTRL's VDDSOC_AIRWB bit.
     *
     * VDDSOC_AIRWB
     */
    inline bool get_VDDSOC_AI_CTRL_VDDSOC_AIRWB() volatile
    {
        return VDDSOC_AI_CTRL & (1u << 16u);
    }

    /**
     * Set VDDSOC_AI_CTRL's VDDSOC_AIRWB bit.
     *
     * VDDSOC_AIRWB
     */
    inline void set_VDDSOC_AI_CTRL_VDDSOC_AIRWB() volatile
    {
        VDDSOC_AI_CTRL |= 1u << 16u;
    }

    /**
     * Clear VDDSOC_AI_CTRL's VDDSOC_AIRWB bit.
     *
     * VDDSOC_AIRWB
     */
    inline void clear_VDDSOC_AI_CTRL_VDDSOC_AIRWB() volatile
    {
        VDDSOC_AI_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle VDDSOC_AI_CTRL's VDDSOC_AIRWB bit.
     *
     * VDDSOC_AIRWB
     */
    inline void toggle_VDDSOC_AI_CTRL_VDDSOC_AIRWB() volatile
    {
        VDDSOC_AI_CTRL ^= 1u << 16u;
    }

    /**
     * Get VDDSOC_AI_CTRL's VDDSOC_AI_ADDR field.
     *
     * VDDSOC_AI_ADDR
     */
    inline uint8_t get_VDDSOC_AI_CTRL_VDDSOC_AI_ADDR() volatile
    {
        return (VDDSOC_AI_CTRL >> 0u) & 0b11111111u;
    }

    /**
     * Set VDDSOC_AI_CTRL's VDDSOC_AI_ADDR field.
     *
     * VDDSOC_AI_ADDR
     */
    inline void set_VDDSOC_AI_CTRL_VDDSOC_AI_ADDR(uint8_t value) volatile
    {
        uint32_t curr = VDDSOC_AI_CTRL;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        VDDSOC_AI_CTRL = curr;
    }

    /**
     * Get all of VDDSOC_AI_CTRL's bit fields.
     *
     * (read-write) VDDSOC_AI_CTRL_REGISTER
     */
    inline void get_VDDSOC_AI_CTRL(bool &VDDSOC_AIRWB,
                                   uint8_t &VDDSOC_AI_ADDR) volatile
    {
        uint32_t curr = VDDSOC_AI_CTRL;

        VDDSOC_AIRWB = curr & (1u << 16u);
        VDDSOC_AI_ADDR = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of VDDSOC_AI_CTRL's bit fields.
     *
     * (read-write) VDDSOC_AI_CTRL_REGISTER
     */
    inline void set_VDDSOC_AI_CTRL(bool VDDSOC_AIRWB,
                                   uint8_t VDDSOC_AI_ADDR) volatile
    {
        uint32_t curr = VDDSOC_AI_CTRL;

        curr &= ~(0b1u << 16u);
        curr |= (VDDSOC_AIRWB & 0b1u) << 16u;
        curr &= ~(0b11111111u << 0u);
        curr |= (VDDSOC_AI_ADDR & 0b11111111u) << 0u;

        VDDSOC_AI_CTRL = curr;
    }

    /**
     * Get VDDSOC_AI_WDATA's VDDSOC_AI_WDATA field.
     *
     * VDDSOC_AI_WDATA
     */
    inline uint32_t get_VDDSOC_AI_WDATA_VDDSOC_AI_WDATA() volatile
    {
        return (VDDSOC_AI_WDATA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set VDDSOC_AI_WDATA's VDDSOC_AI_WDATA field.
     *
     * VDDSOC_AI_WDATA
     */
    inline void set_VDDSOC_AI_WDATA_VDDSOC_AI_WDATA(uint32_t value) volatile
    {
        uint32_t curr = VDDSOC_AI_WDATA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        VDDSOC_AI_WDATA = curr;
    }

    /**
     * Get VDDSOC_AI_RDATA's VDDSOC_AI_RDATA field.
     *
     * VDDSOC_AI_RDATA
     */
    inline uint32_t get_VDDSOC_AI_RDATA_VDDSOC_AI_RDATA() volatile
    {
        return (VDDSOC_AI_RDATA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get VDDSOC2PLL_AI_CTRL_1G's VDDSOC2PLL_AIRWB_1G bit.
     *
     * VDDSOC2PLL_AIRWB_1G
     */
    inline bool get_VDDSOC2PLL_AI_CTRL_1G_VDDSOC2PLL_AIRWB_1G() volatile
    {
        return VDDSOC2PLL_AI_CTRL_1G & (1u << 16u);
    }

    /**
     * Set VDDSOC2PLL_AI_CTRL_1G's VDDSOC2PLL_AIRWB_1G bit.
     *
     * VDDSOC2PLL_AIRWB_1G
     */
    inline void set_VDDSOC2PLL_AI_CTRL_1G_VDDSOC2PLL_AIRWB_1G() volatile
    {
        VDDSOC2PLL_AI_CTRL_1G |= 1u << 16u;
    }

    /**
     * Clear VDDSOC2PLL_AI_CTRL_1G's VDDSOC2PLL_AIRWB_1G bit.
     *
     * VDDSOC2PLL_AIRWB_1G
     */
    inline void clear_VDDSOC2PLL_AI_CTRL_1G_VDDSOC2PLL_AIRWB_1G() volatile
    {
        VDDSOC2PLL_AI_CTRL_1G &= ~(1u << 16u);
    }

    /**
     * Toggle VDDSOC2PLL_AI_CTRL_1G's VDDSOC2PLL_AIRWB_1G bit.
     *
     * VDDSOC2PLL_AIRWB_1G
     */
    inline void toggle_VDDSOC2PLL_AI_CTRL_1G_VDDSOC2PLL_AIRWB_1G() volatile
    {
        VDDSOC2PLL_AI_CTRL_1G ^= 1u << 16u;
    }

    /**
     * Get VDDSOC2PLL_AI_CTRL_1G's VDDSOC2PLL_AITOGGLE_DONE_1G bit.
     *
     * VDDSOC2PLL_AITOGGLE_DONE_1G
     */
    inline bool
    get_VDDSOC2PLL_AI_CTRL_1G_VDDSOC2PLL_AITOGGLE_DONE_1G() volatile
    {
        return VDDSOC2PLL_AI_CTRL_1G & (1u << 9u);
    }

    /**
     * Get VDDSOC2PLL_AI_CTRL_1G's VDDSOC2PLL_AITOGGLE_1G bit.
     *
     * VDDSOC2PLL_AITOGGLE_1G
     */
    inline bool get_VDDSOC2PLL_AI_CTRL_1G_VDDSOC2PLL_AITOGGLE_1G() volatile
    {
        return VDDSOC2PLL_AI_CTRL_1G & (1u << 8u);
    }

    /**
     * Set VDDSOC2PLL_AI_CTRL_1G's VDDSOC2PLL_AITOGGLE_1G bit.
     *
     * VDDSOC2PLL_AITOGGLE_1G
     */
    inline void set_VDDSOC2PLL_AI_CTRL_1G_VDDSOC2PLL_AITOGGLE_1G() volatile
    {
        VDDSOC2PLL_AI_CTRL_1G |= 1u << 8u;
    }

    /**
     * Clear VDDSOC2PLL_AI_CTRL_1G's VDDSOC2PLL_AITOGGLE_1G bit.
     *
     * VDDSOC2PLL_AITOGGLE_1G
     */
    inline void clear_VDDSOC2PLL_AI_CTRL_1G_VDDSOC2PLL_AITOGGLE_1G() volatile
    {
        VDDSOC2PLL_AI_CTRL_1G &= ~(1u << 8u);
    }

    /**
     * Toggle VDDSOC2PLL_AI_CTRL_1G's VDDSOC2PLL_AITOGGLE_1G bit.
     *
     * VDDSOC2PLL_AITOGGLE_1G
     */
    inline void toggle_VDDSOC2PLL_AI_CTRL_1G_VDDSOC2PLL_AITOGGLE_1G() volatile
    {
        VDDSOC2PLL_AI_CTRL_1G ^= 1u << 8u;
    }

    /**
     * Get VDDSOC2PLL_AI_CTRL_1G's VDDSOC2PLL_AIADDR_1G field.
     *
     * VDDSOC2PLL_AIADDR_1G
     */
    inline uint8_t get_VDDSOC2PLL_AI_CTRL_1G_VDDSOC2PLL_AIADDR_1G() volatile
    {
        return (VDDSOC2PLL_AI_CTRL_1G >> 0u) & 0b11111111u;
    }

    /**
     * Set VDDSOC2PLL_AI_CTRL_1G's VDDSOC2PLL_AIADDR_1G field.
     *
     * VDDSOC2PLL_AIADDR_1G
     */
    inline void set_VDDSOC2PLL_AI_CTRL_1G_VDDSOC2PLL_AIADDR_1G(
        uint8_t value) volatile
    {
        uint32_t curr = VDDSOC2PLL_AI_CTRL_1G;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        VDDSOC2PLL_AI_CTRL_1G = curr;
    }

    /**
     * Get all of VDDSOC2PLL_AI_CTRL_1G's bit fields.
     *
     * (read-write) VDDSOC2PLL_AI_CTRL_1G_REGISTER
     */
    inline void get_VDDSOC2PLL_AI_CTRL_1G(
        bool &VDDSOC2PLL_AIRWB_1G, bool &VDDSOC2PLL_AITOGGLE_DONE_1G,
        bool &VDDSOC2PLL_AITOGGLE_1G, uint8_t &VDDSOC2PLL_AIADDR_1G) volatile
    {
        uint32_t curr = VDDSOC2PLL_AI_CTRL_1G;

        VDDSOC2PLL_AIRWB_1G = curr & (1u << 16u);
        VDDSOC2PLL_AITOGGLE_DONE_1G = curr & (1u << 9u);
        VDDSOC2PLL_AITOGGLE_1G = curr & (1u << 8u);
        VDDSOC2PLL_AIADDR_1G = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of VDDSOC2PLL_AI_CTRL_1G's bit fields.
     *
     * (read-write) VDDSOC2PLL_AI_CTRL_1G_REGISTER
     */
    inline void set_VDDSOC2PLL_AI_CTRL_1G(
        bool VDDSOC2PLL_AIRWB_1G, bool VDDSOC2PLL_AITOGGLE_1G,
        uint8_t VDDSOC2PLL_AIADDR_1G) volatile
    {
        uint32_t curr = VDDSOC2PLL_AI_CTRL_1G;

        curr &= ~(0b1u << 16u);
        curr |= (VDDSOC2PLL_AIRWB_1G & 0b1u) << 16u;
        curr &= ~(0b1u << 8u);
        curr |= (VDDSOC2PLL_AITOGGLE_1G & 0b1u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (VDDSOC2PLL_AIADDR_1G & 0b11111111u) << 0u;

        VDDSOC2PLL_AI_CTRL_1G = curr;
    }

    /**
     * Get VDDSOC2PLL_AI_WDATA_1G's VDDSOC2PLL_AI_WDATA_1G field.
     *
     * VDDSOC2PLL_AI_WDATA_1G
     */
    inline uint32_t
    get_VDDSOC2PLL_AI_WDATA_1G_VDDSOC2PLL_AI_WDATA_1G() volatile
    {
        return (VDDSOC2PLL_AI_WDATA_1G >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Set VDDSOC2PLL_AI_WDATA_1G's VDDSOC2PLL_AI_WDATA_1G field.
     *
     * VDDSOC2PLL_AI_WDATA_1G
     */
    inline void set_VDDSOC2PLL_AI_WDATA_1G_VDDSOC2PLL_AI_WDATA_1G(
        uint32_t value) volatile
    {
        uint32_t curr = VDDSOC2PLL_AI_WDATA_1G;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        VDDSOC2PLL_AI_WDATA_1G = curr;
    }

    /**
     * Get VDDSOC2PLL_AI_RDATA_1G's VDDSOC2PLL_AI_RDATA_1G field.
     *
     * VDDSOC2PLL_AI_RDATA_1G
     */
    inline uint32_t
    get_VDDSOC2PLL_AI_RDATA_1G_VDDSOC2PLL_AI_RDATA_1G() volatile
    {
        return (VDDSOC2PLL_AI_RDATA_1G >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get VDDSOC2PLL_AI_CTRL_AUDIO's VDDSOC2PLL_AIRWB_AUDIO bit.
     *
     * VDDSOC_AIRWB
     */
    inline bool get_VDDSOC2PLL_AI_CTRL_AUDIO_VDDSOC2PLL_AIRWB_AUDIO() volatile
    {
        return VDDSOC2PLL_AI_CTRL_AUDIO & (1u << 16u);
    }

    /**
     * Set VDDSOC2PLL_AI_CTRL_AUDIO's VDDSOC2PLL_AIRWB_AUDIO bit.
     *
     * VDDSOC_AIRWB
     */
    inline void set_VDDSOC2PLL_AI_CTRL_AUDIO_VDDSOC2PLL_AIRWB_AUDIO() volatile
    {
        VDDSOC2PLL_AI_CTRL_AUDIO |= 1u << 16u;
    }

    /**
     * Clear VDDSOC2PLL_AI_CTRL_AUDIO's VDDSOC2PLL_AIRWB_AUDIO bit.
     *
     * VDDSOC_AIRWB
     */
    inline void
    clear_VDDSOC2PLL_AI_CTRL_AUDIO_VDDSOC2PLL_AIRWB_AUDIO() volatile
    {
        VDDSOC2PLL_AI_CTRL_AUDIO &= ~(1u << 16u);
    }

    /**
     * Toggle VDDSOC2PLL_AI_CTRL_AUDIO's VDDSOC2PLL_AIRWB_AUDIO bit.
     *
     * VDDSOC_AIRWB
     */
    inline void
    toggle_VDDSOC2PLL_AI_CTRL_AUDIO_VDDSOC2PLL_AIRWB_AUDIO() volatile
    {
        VDDSOC2PLL_AI_CTRL_AUDIO ^= 1u << 16u;
    }

    /**
     * Get VDDSOC2PLL_AI_CTRL_AUDIO's VDDSOC2PLL_AITOGGLE_DONE_AUDIO bit.
     *
     * VDDSOC2PLL_AITOGGLE_DONE_AUDIO
     */
    inline bool
    get_VDDSOC2PLL_AI_CTRL_AUDIO_VDDSOC2PLL_AITOGGLE_DONE_AUDIO() volatile
    {
        return VDDSOC2PLL_AI_CTRL_AUDIO & (1u << 9u);
    }

    /**
     * Get VDDSOC2PLL_AI_CTRL_AUDIO's VDDSOC2PLL_AITOGGLE_AUDIO bit.
     *
     * VDDSOC2PLL_AITOGGLE_AUDIO
     */
    inline bool
    get_VDDSOC2PLL_AI_CTRL_AUDIO_VDDSOC2PLL_AITOGGLE_AUDIO() volatile
    {
        return VDDSOC2PLL_AI_CTRL_AUDIO & (1u << 8u);
    }

    /**
     * Set VDDSOC2PLL_AI_CTRL_AUDIO's VDDSOC2PLL_AITOGGLE_AUDIO bit.
     *
     * VDDSOC2PLL_AITOGGLE_AUDIO
     */
    inline void
    set_VDDSOC2PLL_AI_CTRL_AUDIO_VDDSOC2PLL_AITOGGLE_AUDIO() volatile
    {
        VDDSOC2PLL_AI_CTRL_AUDIO |= 1u << 8u;
    }

    /**
     * Clear VDDSOC2PLL_AI_CTRL_AUDIO's VDDSOC2PLL_AITOGGLE_AUDIO bit.
     *
     * VDDSOC2PLL_AITOGGLE_AUDIO
     */
    inline void
    clear_VDDSOC2PLL_AI_CTRL_AUDIO_VDDSOC2PLL_AITOGGLE_AUDIO() volatile
    {
        VDDSOC2PLL_AI_CTRL_AUDIO &= ~(1u << 8u);
    }

    /**
     * Toggle VDDSOC2PLL_AI_CTRL_AUDIO's VDDSOC2PLL_AITOGGLE_AUDIO bit.
     *
     * VDDSOC2PLL_AITOGGLE_AUDIO
     */
    inline void
    toggle_VDDSOC2PLL_AI_CTRL_AUDIO_VDDSOC2PLL_AITOGGLE_AUDIO() volatile
    {
        VDDSOC2PLL_AI_CTRL_AUDIO ^= 1u << 8u;
    }

    /**
     * Get VDDSOC2PLL_AI_CTRL_AUDIO's VDDSOC2PLL_AI_ADDR_AUDIO field.
     *
     * VDDSOC2PLL_AI_ADDR_AUDIO
     */
    inline uint8_t
    get_VDDSOC2PLL_AI_CTRL_AUDIO_VDDSOC2PLL_AI_ADDR_AUDIO() volatile
    {
        return (VDDSOC2PLL_AI_CTRL_AUDIO >> 0u) & 0b11111111u;
    }

    /**
     * Set VDDSOC2PLL_AI_CTRL_AUDIO's VDDSOC2PLL_AI_ADDR_AUDIO field.
     *
     * VDDSOC2PLL_AI_ADDR_AUDIO
     */
    inline void set_VDDSOC2PLL_AI_CTRL_AUDIO_VDDSOC2PLL_AI_ADDR_AUDIO(
        uint8_t value) volatile
    {
        uint32_t curr = VDDSOC2PLL_AI_CTRL_AUDIO;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        VDDSOC2PLL_AI_CTRL_AUDIO = curr;
    }

    /**
     * Get all of VDDSOC2PLL_AI_CTRL_AUDIO's bit fields.
     *
     * (read-write) VDDSOC_AI_CTRL_AUDIO_REGISTER
     */
    inline void get_VDDSOC2PLL_AI_CTRL_AUDIO(
        bool &VDDSOC2PLL_AIRWB_AUDIO, bool &VDDSOC2PLL_AITOGGLE_DONE_AUDIO,
        bool &VDDSOC2PLL_AITOGGLE_AUDIO,
        uint8_t &VDDSOC2PLL_AI_ADDR_AUDIO) volatile
    {
        uint32_t curr = VDDSOC2PLL_AI_CTRL_AUDIO;

        VDDSOC2PLL_AIRWB_AUDIO = curr & (1u << 16u);
        VDDSOC2PLL_AITOGGLE_DONE_AUDIO = curr & (1u << 9u);
        VDDSOC2PLL_AITOGGLE_AUDIO = curr & (1u << 8u);
        VDDSOC2PLL_AI_ADDR_AUDIO = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of VDDSOC2PLL_AI_CTRL_AUDIO's bit fields.
     *
     * (read-write) VDDSOC_AI_CTRL_AUDIO_REGISTER
     */
    inline void set_VDDSOC2PLL_AI_CTRL_AUDIO(
        bool VDDSOC2PLL_AIRWB_AUDIO, bool VDDSOC2PLL_AITOGGLE_AUDIO,
        uint8_t VDDSOC2PLL_AI_ADDR_AUDIO) volatile
    {
        uint32_t curr = VDDSOC2PLL_AI_CTRL_AUDIO;

        curr &= ~(0b1u << 16u);
        curr |= (VDDSOC2PLL_AIRWB_AUDIO & 0b1u) << 16u;
        curr &= ~(0b1u << 8u);
        curr |= (VDDSOC2PLL_AITOGGLE_AUDIO & 0b1u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (VDDSOC2PLL_AI_ADDR_AUDIO & 0b11111111u) << 0u;

        VDDSOC2PLL_AI_CTRL_AUDIO = curr;
    }

    /**
     * Get VDDSOC2PLL_AI_WDATA_AUDIO's VDDSOC2PLL_AI_WDATA_AUDIO field.
     *
     * VDDSOC2PLL_AI_WDATA_AUDIO
     */
    inline uint32_t
    get_VDDSOC2PLL_AI_WDATA_AUDIO_VDDSOC2PLL_AI_WDATA_AUDIO() volatile
    {
        return (VDDSOC2PLL_AI_WDATA_AUDIO >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Set VDDSOC2PLL_AI_WDATA_AUDIO's VDDSOC2PLL_AI_WDATA_AUDIO field.
     *
     * VDDSOC2PLL_AI_WDATA_AUDIO
     */
    inline void set_VDDSOC2PLL_AI_WDATA_AUDIO_VDDSOC2PLL_AI_WDATA_AUDIO(
        uint32_t value) volatile
    {
        uint32_t curr = VDDSOC2PLL_AI_WDATA_AUDIO;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        VDDSOC2PLL_AI_WDATA_AUDIO = curr;
    }

    /**
     * Get VDDSOC2PLL_AI_RDATA_AUDIO's VDDSOC2PLL_AI_RDATA_AUDIO field.
     *
     * VDDSOC2PLL_AI_RDATA_AUDIO
     */
    inline uint32_t
    get_VDDSOC2PLL_AI_RDATA_AUDIO_VDDSOC2PLL_AI_RDATA_AUDIO() volatile
    {
        return (VDDSOC2PLL_AI_RDATA_AUDIO >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get VDDSOC2PLL_AI_CTRL_VIDEO's VDDSOC2PLL_AIRWB_VIDEO bit.
     *
     * VDDSOC2PLL_AIRWB_VIDEO
     */
    inline bool get_VDDSOC2PLL_AI_CTRL_VIDEO_VDDSOC2PLL_AIRWB_VIDEO() volatile
    {
        return VDDSOC2PLL_AI_CTRL_VIDEO & (1u << 16u);
    }

    /**
     * Set VDDSOC2PLL_AI_CTRL_VIDEO's VDDSOC2PLL_AIRWB_VIDEO bit.
     *
     * VDDSOC2PLL_AIRWB_VIDEO
     */
    inline void set_VDDSOC2PLL_AI_CTRL_VIDEO_VDDSOC2PLL_AIRWB_VIDEO() volatile
    {
        VDDSOC2PLL_AI_CTRL_VIDEO |= 1u << 16u;
    }

    /**
     * Clear VDDSOC2PLL_AI_CTRL_VIDEO's VDDSOC2PLL_AIRWB_VIDEO bit.
     *
     * VDDSOC2PLL_AIRWB_VIDEO
     */
    inline void
    clear_VDDSOC2PLL_AI_CTRL_VIDEO_VDDSOC2PLL_AIRWB_VIDEO() volatile
    {
        VDDSOC2PLL_AI_CTRL_VIDEO &= ~(1u << 16u);
    }

    /**
     * Toggle VDDSOC2PLL_AI_CTRL_VIDEO's VDDSOC2PLL_AIRWB_VIDEO bit.
     *
     * VDDSOC2PLL_AIRWB_VIDEO
     */
    inline void
    toggle_VDDSOC2PLL_AI_CTRL_VIDEO_VDDSOC2PLL_AIRWB_VIDEO() volatile
    {
        VDDSOC2PLL_AI_CTRL_VIDEO ^= 1u << 16u;
    }

    /**
     * Get VDDSOC2PLL_AI_CTRL_VIDEO's VDDSOC2PLL_AITOGGLE_DONE_VIDEO bit.
     *
     * VDDSOC2PLL_AITOGGLE_DONE_VIDEO
     */
    inline bool
    get_VDDSOC2PLL_AI_CTRL_VIDEO_VDDSOC2PLL_AITOGGLE_DONE_VIDEO() volatile
    {
        return VDDSOC2PLL_AI_CTRL_VIDEO & (1u << 9u);
    }

    /**
     * Get VDDSOC2PLL_AI_CTRL_VIDEO's VDDSOC2PLL_AITOGGLE_VIDEO bit.
     *
     * VDDSOC2PLL_AITOGGLE_VIDEO
     */
    inline bool
    get_VDDSOC2PLL_AI_CTRL_VIDEO_VDDSOC2PLL_AITOGGLE_VIDEO() volatile
    {
        return VDDSOC2PLL_AI_CTRL_VIDEO & (1u << 8u);
    }

    /**
     * Set VDDSOC2PLL_AI_CTRL_VIDEO's VDDSOC2PLL_AITOGGLE_VIDEO bit.
     *
     * VDDSOC2PLL_AITOGGLE_VIDEO
     */
    inline void
    set_VDDSOC2PLL_AI_CTRL_VIDEO_VDDSOC2PLL_AITOGGLE_VIDEO() volatile
    {
        VDDSOC2PLL_AI_CTRL_VIDEO |= 1u << 8u;
    }

    /**
     * Clear VDDSOC2PLL_AI_CTRL_VIDEO's VDDSOC2PLL_AITOGGLE_VIDEO bit.
     *
     * VDDSOC2PLL_AITOGGLE_VIDEO
     */
    inline void
    clear_VDDSOC2PLL_AI_CTRL_VIDEO_VDDSOC2PLL_AITOGGLE_VIDEO() volatile
    {
        VDDSOC2PLL_AI_CTRL_VIDEO &= ~(1u << 8u);
    }

    /**
     * Toggle VDDSOC2PLL_AI_CTRL_VIDEO's VDDSOC2PLL_AITOGGLE_VIDEO bit.
     *
     * VDDSOC2PLL_AITOGGLE_VIDEO
     */
    inline void
    toggle_VDDSOC2PLL_AI_CTRL_VIDEO_VDDSOC2PLL_AITOGGLE_VIDEO() volatile
    {
        VDDSOC2PLL_AI_CTRL_VIDEO ^= 1u << 8u;
    }

    /**
     * Get VDDSOC2PLL_AI_CTRL_VIDEO's VDDSOC2PLL_AIADDR_VIDEO field.
     *
     * VDDSOC2PLL_AIADDR_VIDEO
     */
    inline uint8_t
    get_VDDSOC2PLL_AI_CTRL_VIDEO_VDDSOC2PLL_AIADDR_VIDEO() volatile
    {
        return (VDDSOC2PLL_AI_CTRL_VIDEO >> 0u) & 0b11111111u;
    }

    /**
     * Set VDDSOC2PLL_AI_CTRL_VIDEO's VDDSOC2PLL_AIADDR_VIDEO field.
     *
     * VDDSOC2PLL_AIADDR_VIDEO
     */
    inline void set_VDDSOC2PLL_AI_CTRL_VIDEO_VDDSOC2PLL_AIADDR_VIDEO(
        uint8_t value) volatile
    {
        uint32_t curr = VDDSOC2PLL_AI_CTRL_VIDEO;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        VDDSOC2PLL_AI_CTRL_VIDEO = curr;
    }

    /**
     * Get all of VDDSOC2PLL_AI_CTRL_VIDEO's bit fields.
     *
     * (read-write) VDDSOC2PLL_AI_CTRL_VIDEO_REGISTER
     */
    inline void get_VDDSOC2PLL_AI_CTRL_VIDEO(
        bool &VDDSOC2PLL_AIRWB_VIDEO, bool &VDDSOC2PLL_AITOGGLE_DONE_VIDEO,
        bool &VDDSOC2PLL_AITOGGLE_VIDEO,
        uint8_t &VDDSOC2PLL_AIADDR_VIDEO) volatile
    {
        uint32_t curr = VDDSOC2PLL_AI_CTRL_VIDEO;

        VDDSOC2PLL_AIRWB_VIDEO = curr & (1u << 16u);
        VDDSOC2PLL_AITOGGLE_DONE_VIDEO = curr & (1u << 9u);
        VDDSOC2PLL_AITOGGLE_VIDEO = curr & (1u << 8u);
        VDDSOC2PLL_AIADDR_VIDEO = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of VDDSOC2PLL_AI_CTRL_VIDEO's bit fields.
     *
     * (read-write) VDDSOC2PLL_AI_CTRL_VIDEO_REGISTER
     */
    inline void set_VDDSOC2PLL_AI_CTRL_VIDEO(
        bool VDDSOC2PLL_AIRWB_VIDEO, bool VDDSOC2PLL_AITOGGLE_VIDEO,
        uint8_t VDDSOC2PLL_AIADDR_VIDEO) volatile
    {
        uint32_t curr = VDDSOC2PLL_AI_CTRL_VIDEO;

        curr &= ~(0b1u << 16u);
        curr |= (VDDSOC2PLL_AIRWB_VIDEO & 0b1u) << 16u;
        curr &= ~(0b1u << 8u);
        curr |= (VDDSOC2PLL_AITOGGLE_VIDEO & 0b1u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (VDDSOC2PLL_AIADDR_VIDEO & 0b11111111u) << 0u;

        VDDSOC2PLL_AI_CTRL_VIDEO = curr;
    }

    /**
     * Get VDDSOC2PLL_AI_WDATA_VIDEO's VDDSOC2PLL_AI_WDATA_VIDEO field.
     *
     * VDDSOC2PLL_AI_WDATA_VIDEO
     */
    inline uint32_t
    get_VDDSOC2PLL_AI_WDATA_VIDEO_VDDSOC2PLL_AI_WDATA_VIDEO() volatile
    {
        return (VDDSOC2PLL_AI_WDATA_VIDEO >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Set VDDSOC2PLL_AI_WDATA_VIDEO's VDDSOC2PLL_AI_WDATA_VIDEO field.
     *
     * VDDSOC2PLL_AI_WDATA_VIDEO
     */
    inline void set_VDDSOC2PLL_AI_WDATA_VIDEO_VDDSOC2PLL_AI_WDATA_VIDEO(
        uint32_t value) volatile
    {
        uint32_t curr = VDDSOC2PLL_AI_WDATA_VIDEO;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        VDDSOC2PLL_AI_WDATA_VIDEO = curr;
    }

    /**
     * Get VDDSOC2PLL_AI_RDATA_VIDEO's VDDSOC2PLL_AI_RDATA_VIDEO field.
     *
     * VDDSOC2PLL_AI_RDATA_VIDEO
     */
    inline uint32_t
    get_VDDSOC2PLL_AI_RDATA_VIDEO_VDDSOC2PLL_AI_RDATA_VIDEO() volatile
    {
        return (VDDSOC2PLL_AI_RDATA_VIDEO >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get VDDLPSR_AI_CTRL's VDDLPSR_AIRWB bit.
     *
     * VDDLPSR_AIRWB
     */
    inline bool get_VDDLPSR_AI_CTRL_VDDLPSR_AIRWB() volatile
    {
        return VDDLPSR_AI_CTRL & (1u << 16u);
    }

    /**
     * Set VDDLPSR_AI_CTRL's VDDLPSR_AIRWB bit.
     *
     * VDDLPSR_AIRWB
     */
    inline void set_VDDLPSR_AI_CTRL_VDDLPSR_AIRWB() volatile
    {
        VDDLPSR_AI_CTRL |= 1u << 16u;
    }

    /**
     * Clear VDDLPSR_AI_CTRL's VDDLPSR_AIRWB bit.
     *
     * VDDLPSR_AIRWB
     */
    inline void clear_VDDLPSR_AI_CTRL_VDDLPSR_AIRWB() volatile
    {
        VDDLPSR_AI_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle VDDLPSR_AI_CTRL's VDDLPSR_AIRWB bit.
     *
     * VDDLPSR_AIRWB
     */
    inline void toggle_VDDLPSR_AI_CTRL_VDDLPSR_AIRWB() volatile
    {
        VDDLPSR_AI_CTRL ^= 1u << 16u;
    }

    /**
     * Get VDDLPSR_AI_CTRL's VDDLPSR_AI_ADDR field.
     *
     * VDDLPSR_AI_ADDR
     */
    inline uint8_t get_VDDLPSR_AI_CTRL_VDDLPSR_AI_ADDR() volatile
    {
        return (VDDLPSR_AI_CTRL >> 0u) & 0b11111111u;
    }

    /**
     * Set VDDLPSR_AI_CTRL's VDDLPSR_AI_ADDR field.
     *
     * VDDLPSR_AI_ADDR
     */
    inline void set_VDDLPSR_AI_CTRL_VDDLPSR_AI_ADDR(uint8_t value) volatile
    {
        uint32_t curr = VDDLPSR_AI_CTRL;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        VDDLPSR_AI_CTRL = curr;
    }

    /**
     * Get all of VDDLPSR_AI_CTRL's bit fields.
     *
     * (read-write) VDDSOC_AI_CTRL_REGISTER
     */
    inline void get_VDDLPSR_AI_CTRL(bool &VDDLPSR_AIRWB,
                                    uint8_t &VDDLPSR_AI_ADDR) volatile
    {
        uint32_t curr = VDDLPSR_AI_CTRL;

        VDDLPSR_AIRWB = curr & (1u << 16u);
        VDDLPSR_AI_ADDR = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of VDDLPSR_AI_CTRL's bit fields.
     *
     * (read-write) VDDSOC_AI_CTRL_REGISTER
     */
    inline void set_VDDLPSR_AI_CTRL(bool VDDLPSR_AIRWB,
                                    uint8_t VDDLPSR_AI_ADDR) volatile
    {
        uint32_t curr = VDDLPSR_AI_CTRL;

        curr &= ~(0b1u << 16u);
        curr |= (VDDLPSR_AIRWB & 0b1u) << 16u;
        curr &= ~(0b11111111u << 0u);
        curr |= (VDDLPSR_AI_ADDR & 0b11111111u) << 0u;

        VDDLPSR_AI_CTRL = curr;
    }

    /**
     * Get VDDLPSR_AI_WDATA's VDDLPSR_AI_WDATA field.
     *
     * VDD_LPSR_AI_WDATA
     */
    inline uint32_t get_VDDLPSR_AI_WDATA_VDDLPSR_AI_WDATA() volatile
    {
        return (VDDLPSR_AI_WDATA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set VDDLPSR_AI_WDATA's VDDLPSR_AI_WDATA field.
     *
     * VDD_LPSR_AI_WDATA
     */
    inline void set_VDDLPSR_AI_WDATA_VDDLPSR_AI_WDATA(uint32_t value) volatile
    {
        uint32_t curr = VDDLPSR_AI_WDATA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        VDDLPSR_AI_WDATA = curr;
    }

    /**
     * Get VDDLPSR_AI_RDATA_REFTOP's VDDLPSR_AI_RDATA_REFTOP field.
     *
     * VDDLPSR_AI_RDATA_REFTOP
     */
    inline uint32_t
    get_VDDLPSR_AI_RDATA_REFTOP_VDDLPSR_AI_RDATA_REFTOP() volatile
    {
        return (VDDLPSR_AI_RDATA_REFTOP >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get VDDLPSR_AI_RDATA_TMPSNS's VDDLPSR_AI_RDATA_TMPSNS field.
     *
     * VDDLPSR_AI_RDATA_TMPSNS
     */
    inline uint32_t
    get_VDDLPSR_AI_RDATA_TMPSNS_VDDLPSR_AI_RDATA_TMPSNS() volatile
    {
        return (VDDLPSR_AI_RDATA_TMPSNS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get VDDLPSR_AI400M_CTRL's VDDLPSR_AI400M_RWB bit.
     *
     * VDDLPSR_AI400M_RWB
     */
    inline bool get_VDDLPSR_AI400M_CTRL_VDDLPSR_AI400M_RWB() volatile
    {
        return VDDLPSR_AI400M_CTRL & (1u << 16u);
    }

    /**
     * Set VDDLPSR_AI400M_CTRL's VDDLPSR_AI400M_RWB bit.
     *
     * VDDLPSR_AI400M_RWB
     */
    inline void set_VDDLPSR_AI400M_CTRL_VDDLPSR_AI400M_RWB() volatile
    {
        VDDLPSR_AI400M_CTRL |= 1u << 16u;
    }

    /**
     * Clear VDDLPSR_AI400M_CTRL's VDDLPSR_AI400M_RWB bit.
     *
     * VDDLPSR_AI400M_RWB
     */
    inline void clear_VDDLPSR_AI400M_CTRL_VDDLPSR_AI400M_RWB() volatile
    {
        VDDLPSR_AI400M_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle VDDLPSR_AI400M_CTRL's VDDLPSR_AI400M_RWB bit.
     *
     * VDDLPSR_AI400M_RWB
     */
    inline void toggle_VDDLPSR_AI400M_CTRL_VDDLPSR_AI400M_RWB() volatile
    {
        VDDLPSR_AI400M_CTRL ^= 1u << 16u;
    }

    /**
     * Get VDDLPSR_AI400M_CTRL's VDDLPSR_AITOGGLE_DONE_400M bit.
     *
     * VDDLPSR_AITOGGLE_DONE_400M
     */
    inline bool get_VDDLPSR_AI400M_CTRL_VDDLPSR_AITOGGLE_DONE_400M() volatile
    {
        return VDDLPSR_AI400M_CTRL & (1u << 9u);
    }

    /**
     * Get VDDLPSR_AI400M_CTRL's VDDLPSR_AITOGGLE_400M bit.
     *
     * VDDLPSR_AITOGGLE_400M
     */
    inline bool get_VDDLPSR_AI400M_CTRL_VDDLPSR_AITOGGLE_400M() volatile
    {
        return VDDLPSR_AI400M_CTRL & (1u << 8u);
    }

    /**
     * Set VDDLPSR_AI400M_CTRL's VDDLPSR_AITOGGLE_400M bit.
     *
     * VDDLPSR_AITOGGLE_400M
     */
    inline void set_VDDLPSR_AI400M_CTRL_VDDLPSR_AITOGGLE_400M() volatile
    {
        VDDLPSR_AI400M_CTRL |= 1u << 8u;
    }

    /**
     * Clear VDDLPSR_AI400M_CTRL's VDDLPSR_AITOGGLE_400M bit.
     *
     * VDDLPSR_AITOGGLE_400M
     */
    inline void clear_VDDLPSR_AI400M_CTRL_VDDLPSR_AITOGGLE_400M() volatile
    {
        VDDLPSR_AI400M_CTRL &= ~(1u << 8u);
    }

    /**
     * Toggle VDDLPSR_AI400M_CTRL's VDDLPSR_AITOGGLE_400M bit.
     *
     * VDDLPSR_AITOGGLE_400M
     */
    inline void toggle_VDDLPSR_AI400M_CTRL_VDDLPSR_AITOGGLE_400M() volatile
    {
        VDDLPSR_AI400M_CTRL ^= 1u << 8u;
    }

    /**
     * Get VDDLPSR_AI400M_CTRL's VDDLPSR_AI400M_ADDR field.
     *
     * VDDLPSR_AI400M_ADDR
     */
    inline uint8_t get_VDDLPSR_AI400M_CTRL_VDDLPSR_AI400M_ADDR() volatile
    {
        return (VDDLPSR_AI400M_CTRL >> 0u) & 0b11111111u;
    }

    /**
     * Set VDDLPSR_AI400M_CTRL's VDDLPSR_AI400M_ADDR field.
     *
     * VDDLPSR_AI400M_ADDR
     */
    inline void set_VDDLPSR_AI400M_CTRL_VDDLPSR_AI400M_ADDR(
        uint8_t value) volatile
    {
        uint32_t curr = VDDLPSR_AI400M_CTRL;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        VDDLPSR_AI400M_CTRL = curr;
    }

    /**
     * Get all of VDDLPSR_AI400M_CTRL's bit fields.
     *
     * (read-write) VDDLPSR_AI400M_CTRL_REGISTER
     */
    inline void get_VDDLPSR_AI400M_CTRL(bool &VDDLPSR_AI400M_RWB,
                                        bool &VDDLPSR_AITOGGLE_DONE_400M,
                                        bool &VDDLPSR_AITOGGLE_400M,
                                        uint8_t &VDDLPSR_AI400M_ADDR) volatile
    {
        uint32_t curr = VDDLPSR_AI400M_CTRL;

        VDDLPSR_AI400M_RWB = curr & (1u << 16u);
        VDDLPSR_AITOGGLE_DONE_400M = curr & (1u << 9u);
        VDDLPSR_AITOGGLE_400M = curr & (1u << 8u);
        VDDLPSR_AI400M_ADDR = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of VDDLPSR_AI400M_CTRL's bit fields.
     *
     * (read-write) VDDLPSR_AI400M_CTRL_REGISTER
     */
    inline void set_VDDLPSR_AI400M_CTRL(bool VDDLPSR_AI400M_RWB,
                                        bool VDDLPSR_AITOGGLE_400M,
                                        uint8_t VDDLPSR_AI400M_ADDR) volatile
    {
        uint32_t curr = VDDLPSR_AI400M_CTRL;

        curr &= ~(0b1u << 16u);
        curr |= (VDDLPSR_AI400M_RWB & 0b1u) << 16u;
        curr &= ~(0b1u << 8u);
        curr |= (VDDLPSR_AITOGGLE_400M & 0b1u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (VDDLPSR_AI400M_ADDR & 0b11111111u) << 0u;

        VDDLPSR_AI400M_CTRL = curr;
    }

    /**
     * Get VDDLPSR_AI400M_WDATA's VDDLPSR_AI400M_WDATA field.
     *
     * VDDLPSR_AI400M_WDATA
     */
    inline uint32_t get_VDDLPSR_AI400M_WDATA_VDDLPSR_AI400M_WDATA() volatile
    {
        return (VDDLPSR_AI400M_WDATA >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Set VDDLPSR_AI400M_WDATA's VDDLPSR_AI400M_WDATA field.
     *
     * VDDLPSR_AI400M_WDATA
     */
    inline void set_VDDLPSR_AI400M_WDATA_VDDLPSR_AI400M_WDATA(
        uint32_t value) volatile
    {
        uint32_t curr = VDDLPSR_AI400M_WDATA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        VDDLPSR_AI400M_WDATA = curr;
    }

    /**
     * Get VDDLPSR_AI400M_RDATA's VDDLPSR_AI400M_RDATA field.
     *
     * VDDLPSR_AI400M_RDATA
     */
    inline uint32_t get_VDDLPSR_AI400M_RDATA_VDDLPSR_AI400M_RDATA() volatile
    {
        return (VDDLPSR_AI400M_RDATA >> 0u) &
               0b11111111111111111111111111111111u;
    }
};

static_assert(sizeof(anadig_misc) == anadig_misc::size);

static volatile anadig_misc *const ANADIG_MISC =
    reinterpret_cast<anadig_misc *>(0x40C84000);

}; // namespace MIMXRT1176::CM7
