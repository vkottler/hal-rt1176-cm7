/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/SPDIF_SCR_InputSrcSel.h"
#include "../enums/SPDIF_SCR_RxFIFOFull_Sel.h"
#include "../enums/SPDIF_SCR_TxFIFOEmpty_Sel.h"
#include "../enums/SPDIF_SCR_TxFIFO_Ctrl.h"
#include "../enums/SPDIF_SCR_TxSel.h"
#include "../enums/SPDIF_SCR_USrc_Sel.h"
#include "../enums/SPDIF_SRPC_ClkSrc_Sel.h"
#include "../enums/SPDIF_SRPC_GainSel.h"
#include "../enums/SPDIF_STC_SYSCLK_DF.h"
#include "../enums/SPDIF_STC_TxClk_DF.h"
#include "../enums/SPDIF_STC_TxClk_Source.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * SPDIF
 */
struct [[gnu::packed]] spdif
{
    /* Constant attributes. */
    static constexpr std::size_t size = 84; /*!< spdif's size in bytes. */

    /* Fields. */
    uint32_t SCR;    /*!< (read-write) SPDIF Configuration Register */
    uint32_t SRCD;   /*!< (read-write) CDText Control Register */
    uint32_t SRPC;   /*!< (read-write) PhaseConfig Register */
    uint32_t SIE;    /*!< (read-write) InterruptEn Register */
    uint32_t SIC;    /*!< (read-write) InterruptClear Register */
    uint32_t SRL;    /*!< (read-write) SPDIFRxLeft Register */
    uint32_t SRR;    /*!< (read-write) SPDIFRxRight Register */
    uint32_t SRCSH;  /*!< (read-write) SPDIFRxCChannel_h Register */
    uint32_t SRCSL;  /*!< (read-write) SPDIFRxCChannel_l Register */
    uint32_t SRU;    /*!< (read-write) UchannelRx Register */
    uint32_t SRQ;    /*!< (read-write) QchannelRx Register */
    uint32_t STL;    /*!< (read-write) SPDIFTxLeft Register */
    uint32_t STR;    /*!< (read-write) SPDIFTxRight Register */
    uint32_t STCSCH; /*!< (read-write) SPDIFTxCChannelCons_h Register */
    uint32_t STCSCL; /*!< (read-write) SPDIFTxCChannelCons_l Register */
    static constexpr std::size_t reserved_padding0_length = 2;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t SRFM; /*!< (read-write) FreqMeas Register */
    static constexpr std::size_t reserved_padding1_length = 2;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    uint32_t STC; /*!< (read-write) SPDIFTxClk Register */

    /* Methods. */

    /**
     * Get SCR's RxFIFO_Ctrl bit.
     *
     * RxFIFO_Ctrl
     */
    inline bool get_SCR_RxFIFO_Ctrl() volatile
    {
        return SCR & (1u << 23u);
    }

    /**
     * Set SCR's RxFIFO_Ctrl bit.
     *
     * RxFIFO_Ctrl
     */
    inline void set_SCR_RxFIFO_Ctrl() volatile
    {
        SCR |= 1u << 23u;
    }

    /**
     * Clear SCR's RxFIFO_Ctrl bit.
     *
     * RxFIFO_Ctrl
     */
    inline void clear_SCR_RxFIFO_Ctrl() volatile
    {
        SCR &= ~(1u << 23u);
    }

    /**
     * Toggle SCR's RxFIFO_Ctrl bit.
     *
     * RxFIFO_Ctrl
     */
    inline void toggle_SCR_RxFIFO_Ctrl() volatile
    {
        SCR ^= 1u << 23u;
    }

    /**
     * Get SCR's RxFIFO_Off_On bit.
     *
     * RxFIFO_Off_On
     */
    inline bool get_SCR_RxFIFO_Off_On() volatile
    {
        return SCR & (1u << 22u);
    }

    /**
     * Set SCR's RxFIFO_Off_On bit.
     *
     * RxFIFO_Off_On
     */
    inline void set_SCR_RxFIFO_Off_On() volatile
    {
        SCR |= 1u << 22u;
    }

    /**
     * Clear SCR's RxFIFO_Off_On bit.
     *
     * RxFIFO_Off_On
     */
    inline void clear_SCR_RxFIFO_Off_On() volatile
    {
        SCR &= ~(1u << 22u);
    }

    /**
     * Toggle SCR's RxFIFO_Off_On bit.
     *
     * RxFIFO_Off_On
     */
    inline void toggle_SCR_RxFIFO_Off_On() volatile
    {
        SCR ^= 1u << 22u;
    }

    /**
     * Get SCR's RxFIFO_Rst bit.
     *
     * RxFIFO_Rst
     */
    inline bool get_SCR_RxFIFO_Rst() volatile
    {
        return SCR & (1u << 21u);
    }

    /**
     * Set SCR's RxFIFO_Rst bit.
     *
     * RxFIFO_Rst
     */
    inline void set_SCR_RxFIFO_Rst() volatile
    {
        SCR |= 1u << 21u;
    }

    /**
     * Clear SCR's RxFIFO_Rst bit.
     *
     * RxFIFO_Rst
     */
    inline void clear_SCR_RxFIFO_Rst() volatile
    {
        SCR &= ~(1u << 21u);
    }

    /**
     * Toggle SCR's RxFIFO_Rst bit.
     *
     * RxFIFO_Rst
     */
    inline void toggle_SCR_RxFIFO_Rst() volatile
    {
        SCR ^= 1u << 21u;
    }

    /**
     * Get SCR's RxFIFOFull_Sel field.
     *
     * RxFIFOFull_Sel
     */
    inline SPDIF_SCR_RxFIFOFull_Sel get_SCR_RxFIFOFull_Sel() volatile
    {
        return SPDIF_SCR_RxFIFOFull_Sel((SCR >> 19u) & 0b11u);
    }

    /**
     * Set SCR's RxFIFOFull_Sel field.
     *
     * RxFIFOFull_Sel
     */
    inline void set_SCR_RxFIFOFull_Sel(SPDIF_SCR_RxFIFOFull_Sel value) volatile
    {
        uint32_t curr = SCR;

        curr &= ~(0b11u << 19u);
        curr |= (std::to_underlying(value) & 0b11u) << 19u;

        SCR = curr;
    }

    /**
     * Get SCR's RxAutoSync bit.
     *
     * RxAutoSync
     */
    inline bool get_SCR_RxAutoSync() volatile
    {
        return SCR & (1u << 18u);
    }

    /**
     * Set SCR's RxAutoSync bit.
     *
     * RxAutoSync
     */
    inline void set_SCR_RxAutoSync() volatile
    {
        SCR |= 1u << 18u;
    }

    /**
     * Clear SCR's RxAutoSync bit.
     *
     * RxAutoSync
     */
    inline void clear_SCR_RxAutoSync() volatile
    {
        SCR &= ~(1u << 18u);
    }

    /**
     * Toggle SCR's RxAutoSync bit.
     *
     * RxAutoSync
     */
    inline void toggle_SCR_RxAutoSync() volatile
    {
        SCR ^= 1u << 18u;
    }

    /**
     * Get SCR's TxAutoSync bit.
     *
     * TxAutoSync
     */
    inline bool get_SCR_TxAutoSync() volatile
    {
        return SCR & (1u << 17u);
    }

    /**
     * Set SCR's TxAutoSync bit.
     *
     * TxAutoSync
     */
    inline void set_SCR_TxAutoSync() volatile
    {
        SCR |= 1u << 17u;
    }

    /**
     * Clear SCR's TxAutoSync bit.
     *
     * TxAutoSync
     */
    inline void clear_SCR_TxAutoSync() volatile
    {
        SCR &= ~(1u << 17u);
    }

    /**
     * Toggle SCR's TxAutoSync bit.
     *
     * TxAutoSync
     */
    inline void toggle_SCR_TxAutoSync() volatile
    {
        SCR ^= 1u << 17u;
    }

    /**
     * Get SCR's TxFIFOEmpty_Sel field.
     *
     * TxFIFOEmpty_Sel
     */
    inline SPDIF_SCR_TxFIFOEmpty_Sel get_SCR_TxFIFOEmpty_Sel() volatile
    {
        return SPDIF_SCR_TxFIFOEmpty_Sel((SCR >> 15u) & 0b11u);
    }

    /**
     * Set SCR's TxFIFOEmpty_Sel field.
     *
     * TxFIFOEmpty_Sel
     */
    inline void set_SCR_TxFIFOEmpty_Sel(
        SPDIF_SCR_TxFIFOEmpty_Sel value) volatile
    {
        uint32_t curr = SCR;

        curr &= ~(0b11u << 15u);
        curr |= (std::to_underlying(value) & 0b11u) << 15u;

        SCR = curr;
    }

    /**
     * Get SCR's LOW_POWER bit.
     *
     * LOW_POWER
     */
    inline bool get_SCR_LOW_POWER() volatile
    {
        return SCR & (1u << 13u);
    }

    /**
     * Set SCR's LOW_POWER bit.
     *
     * LOW_POWER
     */
    inline void set_SCR_LOW_POWER() volatile
    {
        SCR |= 1u << 13u;
    }

    /**
     * Clear SCR's LOW_POWER bit.
     *
     * LOW_POWER
     */
    inline void clear_SCR_LOW_POWER() volatile
    {
        SCR &= ~(1u << 13u);
    }

    /**
     * Toggle SCR's LOW_POWER bit.
     *
     * LOW_POWER
     */
    inline void toggle_SCR_LOW_POWER() volatile
    {
        SCR ^= 1u << 13u;
    }

    /**
     * Get SCR's soft_reset bit.
     *
     * soft_reset
     */
    inline bool get_SCR_soft_reset() volatile
    {
        return SCR & (1u << 12u);
    }

    /**
     * Set SCR's soft_reset bit.
     *
     * soft_reset
     */
    inline void set_SCR_soft_reset() volatile
    {
        SCR |= 1u << 12u;
    }

    /**
     * Clear SCR's soft_reset bit.
     *
     * soft_reset
     */
    inline void clear_SCR_soft_reset() volatile
    {
        SCR &= ~(1u << 12u);
    }

    /**
     * Toggle SCR's soft_reset bit.
     *
     * soft_reset
     */
    inline void toggle_SCR_soft_reset() volatile
    {
        SCR ^= 1u << 12u;
    }

    /**
     * Get SCR's TxFIFO_Ctrl field.
     *
     * TxFIFO_Ctrl
     */
    inline SPDIF_SCR_TxFIFO_Ctrl get_SCR_TxFIFO_Ctrl() volatile
    {
        return SPDIF_SCR_TxFIFO_Ctrl((SCR >> 10u) & 0b11u);
    }

    /**
     * Set SCR's TxFIFO_Ctrl field.
     *
     * TxFIFO_Ctrl
     */
    inline void set_SCR_TxFIFO_Ctrl(SPDIF_SCR_TxFIFO_Ctrl value) volatile
    {
        uint32_t curr = SCR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        SCR = curr;
    }

    /**
     * Get SCR's DMA_Rx_En bit.
     *
     * DMA_Rx_En
     */
    inline bool get_SCR_DMA_Rx_En() volatile
    {
        return SCR & (1u << 9u);
    }

    /**
     * Set SCR's DMA_Rx_En bit.
     *
     * DMA_Rx_En
     */
    inline void set_SCR_DMA_Rx_En() volatile
    {
        SCR |= 1u << 9u;
    }

    /**
     * Clear SCR's DMA_Rx_En bit.
     *
     * DMA_Rx_En
     */
    inline void clear_SCR_DMA_Rx_En() volatile
    {
        SCR &= ~(1u << 9u);
    }

    /**
     * Toggle SCR's DMA_Rx_En bit.
     *
     * DMA_Rx_En
     */
    inline void toggle_SCR_DMA_Rx_En() volatile
    {
        SCR ^= 1u << 9u;
    }

    /**
     * Get SCR's DMA_TX_En bit.
     *
     * DMA_TX_En
     */
    inline bool get_SCR_DMA_TX_En() volatile
    {
        return SCR & (1u << 8u);
    }

    /**
     * Set SCR's DMA_TX_En bit.
     *
     * DMA_TX_En
     */
    inline void set_SCR_DMA_TX_En() volatile
    {
        SCR |= 1u << 8u;
    }

    /**
     * Clear SCR's DMA_TX_En bit.
     *
     * DMA_TX_En
     */
    inline void clear_SCR_DMA_TX_En() volatile
    {
        SCR &= ~(1u << 8u);
    }

    /**
     * Toggle SCR's DMA_TX_En bit.
     *
     * DMA_TX_En
     */
    inline void toggle_SCR_DMA_TX_En() volatile
    {
        SCR ^= 1u << 8u;
    }

    /**
     * Get SCR's InputSrcSel field.
     *
     * InputSrcSel
     */
    inline SPDIF_SCR_InputSrcSel get_SCR_InputSrcSel() volatile
    {
        return SPDIF_SCR_InputSrcSel((SCR >> 6u) & 0b11u);
    }

    /**
     * Set SCR's InputSrcSel field.
     *
     * InputSrcSel
     */
    inline void set_SCR_InputSrcSel(SPDIF_SCR_InputSrcSel value) volatile
    {
        uint32_t curr = SCR;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        SCR = curr;
    }

    /**
     * Get SCR's ValCtrl bit.
     *
     * ValCtrl
     */
    inline bool get_SCR_ValCtrl() volatile
    {
        return SCR & (1u << 5u);
    }

    /**
     * Set SCR's ValCtrl bit.
     *
     * ValCtrl
     */
    inline void set_SCR_ValCtrl() volatile
    {
        SCR |= 1u << 5u;
    }

    /**
     * Clear SCR's ValCtrl bit.
     *
     * ValCtrl
     */
    inline void clear_SCR_ValCtrl() volatile
    {
        SCR &= ~(1u << 5u);
    }

    /**
     * Toggle SCR's ValCtrl bit.
     *
     * ValCtrl
     */
    inline void toggle_SCR_ValCtrl() volatile
    {
        SCR ^= 1u << 5u;
    }

    /**
     * Get SCR's TxSel field.
     *
     * TxSel
     */
    inline SPDIF_SCR_TxSel get_SCR_TxSel() volatile
    {
        return SPDIF_SCR_TxSel((SCR >> 2u) & 0b111u);
    }

    /**
     * Set SCR's TxSel field.
     *
     * TxSel
     */
    inline void set_SCR_TxSel(SPDIF_SCR_TxSel value) volatile
    {
        uint32_t curr = SCR;

        curr &= ~(0b111u << 2u);
        curr |= (std::to_underlying(value) & 0b111u) << 2u;

        SCR = curr;
    }

    /**
     * Get SCR's USrc_Sel field.
     *
     * USrc_Sel
     */
    inline SPDIF_SCR_USrc_Sel get_SCR_USrc_Sel() volatile
    {
        return SPDIF_SCR_USrc_Sel((SCR >> 0u) & 0b11u);
    }

    /**
     * Set SCR's USrc_Sel field.
     *
     * USrc_Sel
     */
    inline void set_SCR_USrc_Sel(SPDIF_SCR_USrc_Sel value) volatile
    {
        uint32_t curr = SCR;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        SCR = curr;
    }

    /**
     * Get all of SCR's bit fields.
     *
     * (read-write) SPDIF Configuration Register
     */
    inline void get_SCR(bool &RxFIFO_Ctrl, bool &RxFIFO_Off_On,
                        bool &RxFIFO_Rst,
                        SPDIF_SCR_RxFIFOFull_Sel &RxFIFOFull_Sel,
                        bool &RxAutoSync, bool &TxAutoSync,
                        SPDIF_SCR_TxFIFOEmpty_Sel &TxFIFOEmpty_Sel,
                        bool &LOW_POWER, bool &soft_reset,
                        SPDIF_SCR_TxFIFO_Ctrl &TxFIFO_Ctrl, bool &DMA_Rx_En,
                        bool &DMA_TX_En, SPDIF_SCR_InputSrcSel &InputSrcSel,
                        bool &ValCtrl, SPDIF_SCR_TxSel &TxSel,
                        SPDIF_SCR_USrc_Sel &USrc_Sel) volatile
    {
        uint32_t curr = SCR;

        RxFIFO_Ctrl = curr & (1u << 23u);
        RxFIFO_Off_On = curr & (1u << 22u);
        RxFIFO_Rst = curr & (1u << 21u);
        RxFIFOFull_Sel = SPDIF_SCR_RxFIFOFull_Sel((curr >> 19u) & 0b11u);
        RxAutoSync = curr & (1u << 18u);
        TxAutoSync = curr & (1u << 17u);
        TxFIFOEmpty_Sel = SPDIF_SCR_TxFIFOEmpty_Sel((curr >> 15u) & 0b11u);
        LOW_POWER = curr & (1u << 13u);
        soft_reset = curr & (1u << 12u);
        TxFIFO_Ctrl = SPDIF_SCR_TxFIFO_Ctrl((curr >> 10u) & 0b11u);
        DMA_Rx_En = curr & (1u << 9u);
        DMA_TX_En = curr & (1u << 8u);
        InputSrcSel = SPDIF_SCR_InputSrcSel((curr >> 6u) & 0b11u);
        ValCtrl = curr & (1u << 5u);
        TxSel = SPDIF_SCR_TxSel((curr >> 2u) & 0b111u);
        USrc_Sel = SPDIF_SCR_USrc_Sel((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of SCR's bit fields.
     *
     * (read-write) SPDIF Configuration Register
     */
    inline void set_SCR(bool RxFIFO_Ctrl, bool RxFIFO_Off_On, bool RxFIFO_Rst,
                        SPDIF_SCR_RxFIFOFull_Sel RxFIFOFull_Sel,
                        bool RxAutoSync, bool TxAutoSync,
                        SPDIF_SCR_TxFIFOEmpty_Sel TxFIFOEmpty_Sel,
                        bool LOW_POWER, bool soft_reset,
                        SPDIF_SCR_TxFIFO_Ctrl TxFIFO_Ctrl, bool DMA_Rx_En,
                        bool DMA_TX_En, SPDIF_SCR_InputSrcSel InputSrcSel,
                        bool ValCtrl, SPDIF_SCR_TxSel TxSel,
                        SPDIF_SCR_USrc_Sel USrc_Sel) volatile
    {
        uint32_t curr = SCR;

        curr &= ~(0b1u << 23u);
        curr |= (RxFIFO_Ctrl & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (RxFIFO_Off_On & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (RxFIFO_Rst & 0b1u) << 21u;
        curr &= ~(0b11u << 19u);
        curr |= (std::to_underlying(RxFIFOFull_Sel) & 0b11u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (RxAutoSync & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (TxAutoSync & 0b1u) << 17u;
        curr &= ~(0b11u << 15u);
        curr |= (std::to_underlying(TxFIFOEmpty_Sel) & 0b11u) << 15u;
        curr &= ~(0b1u << 13u);
        curr |= (LOW_POWER & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (soft_reset & 0b1u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(TxFIFO_Ctrl) & 0b11u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (DMA_Rx_En & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (DMA_TX_En & 0b1u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(InputSrcSel) & 0b11u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (ValCtrl & 0b1u) << 5u;
        curr &= ~(0b111u << 2u);
        curr |= (std::to_underlying(TxSel) & 0b111u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(USrc_Sel) & 0b11u) << 0u;

        SCR = curr;
    }

    /**
     * Get SRCD's USyncMode bit.
     *
     * USyncMode
     */
    inline bool get_SRCD_USyncMode() volatile
    {
        return SRCD & (1u << 1u);
    }

    /**
     * Set SRCD's USyncMode bit.
     *
     * USyncMode
     */
    inline void set_SRCD_USyncMode() volatile
    {
        SRCD |= 1u << 1u;
    }

    /**
     * Clear SRCD's USyncMode bit.
     *
     * USyncMode
     */
    inline void clear_SRCD_USyncMode() volatile
    {
        SRCD &= ~(1u << 1u);
    }

    /**
     * Toggle SRCD's USyncMode bit.
     *
     * USyncMode
     */
    inline void toggle_SRCD_USyncMode() volatile
    {
        SRCD ^= 1u << 1u;
    }

    /**
     * Get SRPC's ClkSrc_Sel field.
     *
     * ClkSrc_Sel
     */
    inline SPDIF_SRPC_ClkSrc_Sel get_SRPC_ClkSrc_Sel() volatile
    {
        return SPDIF_SRPC_ClkSrc_Sel((SRPC >> 7u) & 0b1111u);
    }

    /**
     * Set SRPC's ClkSrc_Sel field.
     *
     * ClkSrc_Sel
     */
    inline void set_SRPC_ClkSrc_Sel(SPDIF_SRPC_ClkSrc_Sel value) volatile
    {
        uint32_t curr = SRPC;

        curr &= ~(0b1111u << 7u);
        curr |= (std::to_underlying(value) & 0b1111u) << 7u;

        SRPC = curr;
    }

    /**
     * Get SRPC's LOCK bit.
     *
     * LOCK
     */
    inline bool get_SRPC_LOCK() volatile
    {
        return SRPC & (1u << 6u);
    }

    /**
     * Get SRPC's GainSel field.
     *
     * GainSel
     */
    inline SPDIF_SRPC_GainSel get_SRPC_GainSel() volatile
    {
        return SPDIF_SRPC_GainSel((SRPC >> 3u) & 0b111u);
    }

    /**
     * Set SRPC's GainSel field.
     *
     * GainSel
     */
    inline void set_SRPC_GainSel(SPDIF_SRPC_GainSel value) volatile
    {
        uint32_t curr = SRPC;

        curr &= ~(0b111u << 3u);
        curr |= (std::to_underlying(value) & 0b111u) << 3u;

        SRPC = curr;
    }

    /**
     * Get all of SRPC's bit fields.
     *
     * (read-write) PhaseConfig Register
     */
    inline void get_SRPC(SPDIF_SRPC_ClkSrc_Sel &ClkSrc_Sel, bool &LOCK,
                         SPDIF_SRPC_GainSel &GainSel) volatile
    {
        uint32_t curr = SRPC;

        ClkSrc_Sel = SPDIF_SRPC_ClkSrc_Sel((curr >> 7u) & 0b1111u);
        LOCK = curr & (1u << 6u);
        GainSel = SPDIF_SRPC_GainSel((curr >> 3u) & 0b111u);
    }

    /**
     * Set all of SRPC's bit fields.
     *
     * (read-write) PhaseConfig Register
     */
    inline void set_SRPC(SPDIF_SRPC_ClkSrc_Sel ClkSrc_Sel,
                         SPDIF_SRPC_GainSel GainSel) volatile
    {
        uint32_t curr = SRPC;

        curr &= ~(0b1111u << 7u);
        curr |= (std::to_underlying(ClkSrc_Sel) & 0b1111u) << 7u;
        curr &= ~(0b111u << 3u);
        curr |= (std::to_underlying(GainSel) & 0b111u) << 3u;

        SRPC = curr;
    }

    /**
     * Get SIE's Lock bit.
     *
     * Lock
     */
    inline bool get_SIE_Lock() volatile
    {
        return SIE & (1u << 20u);
    }

    /**
     * Set SIE's Lock bit.
     *
     * Lock
     */
    inline void set_SIE_Lock() volatile
    {
        SIE |= 1u << 20u;
    }

    /**
     * Clear SIE's Lock bit.
     *
     * Lock
     */
    inline void clear_SIE_Lock() volatile
    {
        SIE &= ~(1u << 20u);
    }

    /**
     * Toggle SIE's Lock bit.
     *
     * Lock
     */
    inline void toggle_SIE_Lock() volatile
    {
        SIE ^= 1u << 20u;
    }

    /**
     * Get SIE's TxUnOv bit.
     *
     * TxUnOv
     */
    inline bool get_SIE_TxUnOv() volatile
    {
        return SIE & (1u << 19u);
    }

    /**
     * Set SIE's TxUnOv bit.
     *
     * TxUnOv
     */
    inline void set_SIE_TxUnOv() volatile
    {
        SIE |= 1u << 19u;
    }

    /**
     * Clear SIE's TxUnOv bit.
     *
     * TxUnOv
     */
    inline void clear_SIE_TxUnOv() volatile
    {
        SIE &= ~(1u << 19u);
    }

    /**
     * Toggle SIE's TxUnOv bit.
     *
     * TxUnOv
     */
    inline void toggle_SIE_TxUnOv() volatile
    {
        SIE ^= 1u << 19u;
    }

    /**
     * Get SIE's TxResyn bit.
     *
     * TxResyn
     */
    inline bool get_SIE_TxResyn() volatile
    {
        return SIE & (1u << 18u);
    }

    /**
     * Set SIE's TxResyn bit.
     *
     * TxResyn
     */
    inline void set_SIE_TxResyn() volatile
    {
        SIE |= 1u << 18u;
    }

    /**
     * Clear SIE's TxResyn bit.
     *
     * TxResyn
     */
    inline void clear_SIE_TxResyn() volatile
    {
        SIE &= ~(1u << 18u);
    }

    /**
     * Toggle SIE's TxResyn bit.
     *
     * TxResyn
     */
    inline void toggle_SIE_TxResyn() volatile
    {
        SIE ^= 1u << 18u;
    }

    /**
     * Get SIE's CNew bit.
     *
     * CNew
     */
    inline bool get_SIE_CNew() volatile
    {
        return SIE & (1u << 17u);
    }

    /**
     * Set SIE's CNew bit.
     *
     * CNew
     */
    inline void set_SIE_CNew() volatile
    {
        SIE |= 1u << 17u;
    }

    /**
     * Clear SIE's CNew bit.
     *
     * CNew
     */
    inline void clear_SIE_CNew() volatile
    {
        SIE &= ~(1u << 17u);
    }

    /**
     * Toggle SIE's CNew bit.
     *
     * CNew
     */
    inline void toggle_SIE_CNew() volatile
    {
        SIE ^= 1u << 17u;
    }

    /**
     * Get SIE's ValNoGood bit.
     *
     * ValNoGood
     */
    inline bool get_SIE_ValNoGood() volatile
    {
        return SIE & (1u << 16u);
    }

    /**
     * Set SIE's ValNoGood bit.
     *
     * ValNoGood
     */
    inline void set_SIE_ValNoGood() volatile
    {
        SIE |= 1u << 16u;
    }

    /**
     * Clear SIE's ValNoGood bit.
     *
     * ValNoGood
     */
    inline void clear_SIE_ValNoGood() volatile
    {
        SIE &= ~(1u << 16u);
    }

    /**
     * Toggle SIE's ValNoGood bit.
     *
     * ValNoGood
     */
    inline void toggle_SIE_ValNoGood() volatile
    {
        SIE ^= 1u << 16u;
    }

    /**
     * Get SIE's SymErr bit.
     *
     * SymErr
     */
    inline bool get_SIE_SymErr() volatile
    {
        return SIE & (1u << 15u);
    }

    /**
     * Set SIE's SymErr bit.
     *
     * SymErr
     */
    inline void set_SIE_SymErr() volatile
    {
        SIE |= 1u << 15u;
    }

    /**
     * Clear SIE's SymErr bit.
     *
     * SymErr
     */
    inline void clear_SIE_SymErr() volatile
    {
        SIE &= ~(1u << 15u);
    }

    /**
     * Toggle SIE's SymErr bit.
     *
     * SymErr
     */
    inline void toggle_SIE_SymErr() volatile
    {
        SIE ^= 1u << 15u;
    }

    /**
     * Get SIE's BitErr bit.
     *
     * BitErr
     */
    inline bool get_SIE_BitErr() volatile
    {
        return SIE & (1u << 14u);
    }

    /**
     * Set SIE's BitErr bit.
     *
     * BitErr
     */
    inline void set_SIE_BitErr() volatile
    {
        SIE |= 1u << 14u;
    }

    /**
     * Clear SIE's BitErr bit.
     *
     * BitErr
     */
    inline void clear_SIE_BitErr() volatile
    {
        SIE &= ~(1u << 14u);
    }

    /**
     * Toggle SIE's BitErr bit.
     *
     * BitErr
     */
    inline void toggle_SIE_BitErr() volatile
    {
        SIE ^= 1u << 14u;
    }

    /**
     * Get SIE's URxFul bit.
     *
     * URxFul
     */
    inline bool get_SIE_URxFul() volatile
    {
        return SIE & (1u << 10u);
    }

    /**
     * Set SIE's URxFul bit.
     *
     * URxFul
     */
    inline void set_SIE_URxFul() volatile
    {
        SIE |= 1u << 10u;
    }

    /**
     * Clear SIE's URxFul bit.
     *
     * URxFul
     */
    inline void clear_SIE_URxFul() volatile
    {
        SIE &= ~(1u << 10u);
    }

    /**
     * Toggle SIE's URxFul bit.
     *
     * URxFul
     */
    inline void toggle_SIE_URxFul() volatile
    {
        SIE ^= 1u << 10u;
    }

    /**
     * Get SIE's URxOv bit.
     *
     * URxOv
     */
    inline bool get_SIE_URxOv() volatile
    {
        return SIE & (1u << 9u);
    }

    /**
     * Set SIE's URxOv bit.
     *
     * URxOv
     */
    inline void set_SIE_URxOv() volatile
    {
        SIE |= 1u << 9u;
    }

    /**
     * Clear SIE's URxOv bit.
     *
     * URxOv
     */
    inline void clear_SIE_URxOv() volatile
    {
        SIE &= ~(1u << 9u);
    }

    /**
     * Toggle SIE's URxOv bit.
     *
     * URxOv
     */
    inline void toggle_SIE_URxOv() volatile
    {
        SIE ^= 1u << 9u;
    }

    /**
     * Get SIE's QRxFul bit.
     *
     * QRxFul
     */
    inline bool get_SIE_QRxFul() volatile
    {
        return SIE & (1u << 8u);
    }

    /**
     * Set SIE's QRxFul bit.
     *
     * QRxFul
     */
    inline void set_SIE_QRxFul() volatile
    {
        SIE |= 1u << 8u;
    }

    /**
     * Clear SIE's QRxFul bit.
     *
     * QRxFul
     */
    inline void clear_SIE_QRxFul() volatile
    {
        SIE &= ~(1u << 8u);
    }

    /**
     * Toggle SIE's QRxFul bit.
     *
     * QRxFul
     */
    inline void toggle_SIE_QRxFul() volatile
    {
        SIE ^= 1u << 8u;
    }

    /**
     * Get SIE's QRxOv bit.
     *
     * QRxOv
     */
    inline bool get_SIE_QRxOv() volatile
    {
        return SIE & (1u << 7u);
    }

    /**
     * Set SIE's QRxOv bit.
     *
     * QRxOv
     */
    inline void set_SIE_QRxOv() volatile
    {
        SIE |= 1u << 7u;
    }

    /**
     * Clear SIE's QRxOv bit.
     *
     * QRxOv
     */
    inline void clear_SIE_QRxOv() volatile
    {
        SIE &= ~(1u << 7u);
    }

    /**
     * Toggle SIE's QRxOv bit.
     *
     * QRxOv
     */
    inline void toggle_SIE_QRxOv() volatile
    {
        SIE ^= 1u << 7u;
    }

    /**
     * Get SIE's UQSync bit.
     *
     * UQSync
     */
    inline bool get_SIE_UQSync() volatile
    {
        return SIE & (1u << 6u);
    }

    /**
     * Set SIE's UQSync bit.
     *
     * UQSync
     */
    inline void set_SIE_UQSync() volatile
    {
        SIE |= 1u << 6u;
    }

    /**
     * Clear SIE's UQSync bit.
     *
     * UQSync
     */
    inline void clear_SIE_UQSync() volatile
    {
        SIE &= ~(1u << 6u);
    }

    /**
     * Toggle SIE's UQSync bit.
     *
     * UQSync
     */
    inline void toggle_SIE_UQSync() volatile
    {
        SIE ^= 1u << 6u;
    }

    /**
     * Get SIE's UQErr bit.
     *
     * UQErr
     */
    inline bool get_SIE_UQErr() volatile
    {
        return SIE & (1u << 5u);
    }

    /**
     * Set SIE's UQErr bit.
     *
     * UQErr
     */
    inline void set_SIE_UQErr() volatile
    {
        SIE |= 1u << 5u;
    }

    /**
     * Clear SIE's UQErr bit.
     *
     * UQErr
     */
    inline void clear_SIE_UQErr() volatile
    {
        SIE &= ~(1u << 5u);
    }

    /**
     * Toggle SIE's UQErr bit.
     *
     * UQErr
     */
    inline void toggle_SIE_UQErr() volatile
    {
        SIE ^= 1u << 5u;
    }

    /**
     * Get SIE's RxFIFOUnOv bit.
     *
     * RxFIFOUnOv
     */
    inline bool get_SIE_RxFIFOUnOv() volatile
    {
        return SIE & (1u << 4u);
    }

    /**
     * Set SIE's RxFIFOUnOv bit.
     *
     * RxFIFOUnOv
     */
    inline void set_SIE_RxFIFOUnOv() volatile
    {
        SIE |= 1u << 4u;
    }

    /**
     * Clear SIE's RxFIFOUnOv bit.
     *
     * RxFIFOUnOv
     */
    inline void clear_SIE_RxFIFOUnOv() volatile
    {
        SIE &= ~(1u << 4u);
    }

    /**
     * Toggle SIE's RxFIFOUnOv bit.
     *
     * RxFIFOUnOv
     */
    inline void toggle_SIE_RxFIFOUnOv() volatile
    {
        SIE ^= 1u << 4u;
    }

    /**
     * Get SIE's RxFIFOResyn bit.
     *
     * RxFIFOResyn
     */
    inline bool get_SIE_RxFIFOResyn() volatile
    {
        return SIE & (1u << 3u);
    }

    /**
     * Set SIE's RxFIFOResyn bit.
     *
     * RxFIFOResyn
     */
    inline void set_SIE_RxFIFOResyn() volatile
    {
        SIE |= 1u << 3u;
    }

    /**
     * Clear SIE's RxFIFOResyn bit.
     *
     * RxFIFOResyn
     */
    inline void clear_SIE_RxFIFOResyn() volatile
    {
        SIE &= ~(1u << 3u);
    }

    /**
     * Toggle SIE's RxFIFOResyn bit.
     *
     * RxFIFOResyn
     */
    inline void toggle_SIE_RxFIFOResyn() volatile
    {
        SIE ^= 1u << 3u;
    }

    /**
     * Get SIE's LockLoss bit.
     *
     * LockLoss
     */
    inline bool get_SIE_LockLoss() volatile
    {
        return SIE & (1u << 2u);
    }

    /**
     * Set SIE's LockLoss bit.
     *
     * LockLoss
     */
    inline void set_SIE_LockLoss() volatile
    {
        SIE |= 1u << 2u;
    }

    /**
     * Clear SIE's LockLoss bit.
     *
     * LockLoss
     */
    inline void clear_SIE_LockLoss() volatile
    {
        SIE &= ~(1u << 2u);
    }

    /**
     * Toggle SIE's LockLoss bit.
     *
     * LockLoss
     */
    inline void toggle_SIE_LockLoss() volatile
    {
        SIE ^= 1u << 2u;
    }

    /**
     * Get SIE's TxEm bit.
     *
     * TxEm
     */
    inline bool get_SIE_TxEm() volatile
    {
        return SIE & (1u << 1u);
    }

    /**
     * Set SIE's TxEm bit.
     *
     * TxEm
     */
    inline void set_SIE_TxEm() volatile
    {
        SIE |= 1u << 1u;
    }

    /**
     * Clear SIE's TxEm bit.
     *
     * TxEm
     */
    inline void clear_SIE_TxEm() volatile
    {
        SIE &= ~(1u << 1u);
    }

    /**
     * Toggle SIE's TxEm bit.
     *
     * TxEm
     */
    inline void toggle_SIE_TxEm() volatile
    {
        SIE ^= 1u << 1u;
    }

    /**
     * Get SIE's RxFIFOFul bit.
     *
     * RxFIFOFul
     */
    inline bool get_SIE_RxFIFOFul() volatile
    {
        return SIE & (1u << 0u);
    }

    /**
     * Set SIE's RxFIFOFul bit.
     *
     * RxFIFOFul
     */
    inline void set_SIE_RxFIFOFul() volatile
    {
        SIE |= 1u << 0u;
    }

    /**
     * Clear SIE's RxFIFOFul bit.
     *
     * RxFIFOFul
     */
    inline void clear_SIE_RxFIFOFul() volatile
    {
        SIE &= ~(1u << 0u);
    }

    /**
     * Toggle SIE's RxFIFOFul bit.
     *
     * RxFIFOFul
     */
    inline void toggle_SIE_RxFIFOFul() volatile
    {
        SIE ^= 1u << 0u;
    }

    /**
     * Get all of SIE's bit fields.
     *
     * (read-write) InterruptEn Register
     */
    inline void get_SIE(bool &Lock, bool &TxUnOv, bool &TxResyn, bool &CNew,
                        bool &ValNoGood, bool &SymErr, bool &BitErr,
                        bool &URxFul, bool &URxOv, bool &QRxFul, bool &QRxOv,
                        bool &UQSync, bool &UQErr, bool &RxFIFOUnOv,
                        bool &RxFIFOResyn, bool &LockLoss, bool &TxEm,
                        bool &RxFIFOFul) volatile
    {
        uint32_t curr = SIE;

        Lock = curr & (1u << 20u);
        TxUnOv = curr & (1u << 19u);
        TxResyn = curr & (1u << 18u);
        CNew = curr & (1u << 17u);
        ValNoGood = curr & (1u << 16u);
        SymErr = curr & (1u << 15u);
        BitErr = curr & (1u << 14u);
        URxFul = curr & (1u << 10u);
        URxOv = curr & (1u << 9u);
        QRxFul = curr & (1u << 8u);
        QRxOv = curr & (1u << 7u);
        UQSync = curr & (1u << 6u);
        UQErr = curr & (1u << 5u);
        RxFIFOUnOv = curr & (1u << 4u);
        RxFIFOResyn = curr & (1u << 3u);
        LockLoss = curr & (1u << 2u);
        TxEm = curr & (1u << 1u);
        RxFIFOFul = curr & (1u << 0u);
    }

    /**
     * Set all of SIE's bit fields.
     *
     * (read-write) InterruptEn Register
     */
    inline void set_SIE(bool Lock, bool TxUnOv, bool TxResyn, bool CNew,
                        bool ValNoGood, bool SymErr, bool BitErr, bool URxFul,
                        bool URxOv, bool QRxFul, bool QRxOv, bool UQSync,
                        bool UQErr, bool RxFIFOUnOv, bool RxFIFOResyn,
                        bool LockLoss, bool TxEm, bool RxFIFOFul) volatile
    {
        uint32_t curr = SIE;

        curr &= ~(0b1u << 20u);
        curr |= (Lock & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (TxUnOv & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (TxResyn & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (CNew & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (ValNoGood & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (SymErr & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (BitErr & 0b1u) << 14u;
        curr &= ~(0b1u << 10u);
        curr |= (URxFul & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (URxOv & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (QRxFul & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (QRxOv & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (UQSync & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (UQErr & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (RxFIFOUnOv & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (RxFIFOResyn & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (LockLoss & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (TxEm & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RxFIFOFul & 0b1u) << 0u;

        SIE = curr;
    }

    /**
     * Set SIC's Lock bit.
     *
     * Lock
     */
    inline void set_SIC_Lock() volatile
    {
        SIC |= 1u << 20u;
    }

    /**
     * Clear SIC's Lock bit.
     *
     * Lock
     */
    inline void clear_SIC_Lock() volatile
    {
        SIC &= ~(1u << 20u);
    }

    /**
     * Toggle SIC's Lock bit.
     *
     * Lock
     */
    inline void toggle_SIC_Lock() volatile
    {
        SIC ^= 1u << 20u;
    }

    /**
     * Set SIC's TxUnOv bit.
     *
     * TxUnOv
     */
    inline void set_SIC_TxUnOv() volatile
    {
        SIC |= 1u << 19u;
    }

    /**
     * Clear SIC's TxUnOv bit.
     *
     * TxUnOv
     */
    inline void clear_SIC_TxUnOv() volatile
    {
        SIC &= ~(1u << 19u);
    }

    /**
     * Toggle SIC's TxUnOv bit.
     *
     * TxUnOv
     */
    inline void toggle_SIC_TxUnOv() volatile
    {
        SIC ^= 1u << 19u;
    }

    /**
     * Set SIC's TxResyn bit.
     *
     * TxResyn
     */
    inline void set_SIC_TxResyn() volatile
    {
        SIC |= 1u << 18u;
    }

    /**
     * Clear SIC's TxResyn bit.
     *
     * TxResyn
     */
    inline void clear_SIC_TxResyn() volatile
    {
        SIC &= ~(1u << 18u);
    }

    /**
     * Toggle SIC's TxResyn bit.
     *
     * TxResyn
     */
    inline void toggle_SIC_TxResyn() volatile
    {
        SIC ^= 1u << 18u;
    }

    /**
     * Set SIC's CNew bit.
     *
     * CNew
     */
    inline void set_SIC_CNew() volatile
    {
        SIC |= 1u << 17u;
    }

    /**
     * Clear SIC's CNew bit.
     *
     * CNew
     */
    inline void clear_SIC_CNew() volatile
    {
        SIC &= ~(1u << 17u);
    }

    /**
     * Toggle SIC's CNew bit.
     *
     * CNew
     */
    inline void toggle_SIC_CNew() volatile
    {
        SIC ^= 1u << 17u;
    }

    /**
     * Set SIC's ValNoGood bit.
     *
     * ValNoGood
     */
    inline void set_SIC_ValNoGood() volatile
    {
        SIC |= 1u << 16u;
    }

    /**
     * Clear SIC's ValNoGood bit.
     *
     * ValNoGood
     */
    inline void clear_SIC_ValNoGood() volatile
    {
        SIC &= ~(1u << 16u);
    }

    /**
     * Toggle SIC's ValNoGood bit.
     *
     * ValNoGood
     */
    inline void toggle_SIC_ValNoGood() volatile
    {
        SIC ^= 1u << 16u;
    }

    /**
     * Set SIC's SymErr bit.
     *
     * SymErr
     */
    inline void set_SIC_SymErr() volatile
    {
        SIC |= 1u << 15u;
    }

    /**
     * Clear SIC's SymErr bit.
     *
     * SymErr
     */
    inline void clear_SIC_SymErr() volatile
    {
        SIC &= ~(1u << 15u);
    }

    /**
     * Toggle SIC's SymErr bit.
     *
     * SymErr
     */
    inline void toggle_SIC_SymErr() volatile
    {
        SIC ^= 1u << 15u;
    }

    /**
     * Set SIC's BitErr bit.
     *
     * BitErr
     */
    inline void set_SIC_BitErr() volatile
    {
        SIC |= 1u << 14u;
    }

    /**
     * Clear SIC's BitErr bit.
     *
     * BitErr
     */
    inline void clear_SIC_BitErr() volatile
    {
        SIC &= ~(1u << 14u);
    }

    /**
     * Toggle SIC's BitErr bit.
     *
     * BitErr
     */
    inline void toggle_SIC_BitErr() volatile
    {
        SIC ^= 1u << 14u;
    }

    /**
     * Set SIC's URxOv bit.
     *
     * URxOv
     */
    inline void set_SIC_URxOv() volatile
    {
        SIC |= 1u << 9u;
    }

    /**
     * Clear SIC's URxOv bit.
     *
     * URxOv
     */
    inline void clear_SIC_URxOv() volatile
    {
        SIC &= ~(1u << 9u);
    }

    /**
     * Toggle SIC's URxOv bit.
     *
     * URxOv
     */
    inline void toggle_SIC_URxOv() volatile
    {
        SIC ^= 1u << 9u;
    }

    /**
     * Set SIC's QRxOv bit.
     *
     * QRxOv
     */
    inline void set_SIC_QRxOv() volatile
    {
        SIC |= 1u << 7u;
    }

    /**
     * Clear SIC's QRxOv bit.
     *
     * QRxOv
     */
    inline void clear_SIC_QRxOv() volatile
    {
        SIC &= ~(1u << 7u);
    }

    /**
     * Toggle SIC's QRxOv bit.
     *
     * QRxOv
     */
    inline void toggle_SIC_QRxOv() volatile
    {
        SIC ^= 1u << 7u;
    }

    /**
     * Set SIC's UQSync bit.
     *
     * UQSync
     */
    inline void set_SIC_UQSync() volatile
    {
        SIC |= 1u << 6u;
    }

    /**
     * Clear SIC's UQSync bit.
     *
     * UQSync
     */
    inline void clear_SIC_UQSync() volatile
    {
        SIC &= ~(1u << 6u);
    }

    /**
     * Toggle SIC's UQSync bit.
     *
     * UQSync
     */
    inline void toggle_SIC_UQSync() volatile
    {
        SIC ^= 1u << 6u;
    }

    /**
     * Set SIC's UQErr bit.
     *
     * UQErr
     */
    inline void set_SIC_UQErr() volatile
    {
        SIC |= 1u << 5u;
    }

    /**
     * Clear SIC's UQErr bit.
     *
     * UQErr
     */
    inline void clear_SIC_UQErr() volatile
    {
        SIC &= ~(1u << 5u);
    }

    /**
     * Toggle SIC's UQErr bit.
     *
     * UQErr
     */
    inline void toggle_SIC_UQErr() volatile
    {
        SIC ^= 1u << 5u;
    }

    /**
     * Set SIC's RxFIFOUnOv bit.
     *
     * RxFIFOUnOv
     */
    inline void set_SIC_RxFIFOUnOv() volatile
    {
        SIC |= 1u << 4u;
    }

    /**
     * Clear SIC's RxFIFOUnOv bit.
     *
     * RxFIFOUnOv
     */
    inline void clear_SIC_RxFIFOUnOv() volatile
    {
        SIC &= ~(1u << 4u);
    }

    /**
     * Toggle SIC's RxFIFOUnOv bit.
     *
     * RxFIFOUnOv
     */
    inline void toggle_SIC_RxFIFOUnOv() volatile
    {
        SIC ^= 1u << 4u;
    }

    /**
     * Set SIC's RxFIFOResyn bit.
     *
     * RxFIFOResyn
     */
    inline void set_SIC_RxFIFOResyn() volatile
    {
        SIC |= 1u << 3u;
    }

    /**
     * Clear SIC's RxFIFOResyn bit.
     *
     * RxFIFOResyn
     */
    inline void clear_SIC_RxFIFOResyn() volatile
    {
        SIC &= ~(1u << 3u);
    }

    /**
     * Toggle SIC's RxFIFOResyn bit.
     *
     * RxFIFOResyn
     */
    inline void toggle_SIC_RxFIFOResyn() volatile
    {
        SIC ^= 1u << 3u;
    }

    /**
     * Set SIC's LockLoss bit.
     *
     * LockLoss
     */
    inline void set_SIC_LockLoss() volatile
    {
        SIC |= 1u << 2u;
    }

    /**
     * Clear SIC's LockLoss bit.
     *
     * LockLoss
     */
    inline void clear_SIC_LockLoss() volatile
    {
        SIC &= ~(1u << 2u);
    }

    /**
     * Toggle SIC's LockLoss bit.
     *
     * LockLoss
     */
    inline void toggle_SIC_LockLoss() volatile
    {
        SIC ^= 1u << 2u;
    }

    /**
     * Set all of SIC's bit fields.
     *
     * (read-write) InterruptClear Register
     */
    inline void set_SIC(bool Lock, bool TxUnOv, bool TxResyn, bool CNew,
                        bool ValNoGood, bool SymErr, bool BitErr, bool URxOv,
                        bool QRxOv, bool UQSync, bool UQErr, bool RxFIFOUnOv,
                        bool RxFIFOResyn, bool LockLoss) volatile
    {
        uint32_t curr = SIC;

        curr &= ~(0b1u << 20u);
        curr |= (Lock & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (TxUnOv & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (TxResyn & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (CNew & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (ValNoGood & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (SymErr & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (BitErr & 0b1u) << 14u;
        curr &= ~(0b1u << 9u);
        curr |= (URxOv & 0b1u) << 9u;
        curr &= ~(0b1u << 7u);
        curr |= (QRxOv & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (UQSync & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (UQErr & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (RxFIFOUnOv & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (RxFIFOResyn & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (LockLoss & 0b1u) << 2u;

        SIC = curr;
    }

    /**
     * Get SRL's RxDataLeft field.
     *
     * RxDataLeft
     */
    inline uint32_t get_SRL_RxDataLeft() volatile
    {
        return (SRL >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Get SRR's RxDataRight field.
     *
     * RxDataRight
     */
    inline uint32_t get_SRR_RxDataRight() volatile
    {
        return (SRR >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Get SRCSH's RxCChannel_h field.
     *
     * RxCChannel_h
     */
    inline uint32_t get_SRCSH_RxCChannel_h() volatile
    {
        return (SRCSH >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Get SRCSL's RxCChannel_l field.
     *
     * RxCChannel_l
     */
    inline uint32_t get_SRCSL_RxCChannel_l() volatile
    {
        return (SRCSL >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Get SRU's RxUChannel field.
     *
     * RxUChannel
     */
    inline uint32_t get_SRU_RxUChannel() volatile
    {
        return (SRU >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Get SRQ's RxQChannel field.
     *
     * RxQChannel
     */
    inline uint32_t get_SRQ_RxQChannel() volatile
    {
        return (SRQ >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Set STL's TxDataLeft field.
     *
     * TxDataLeft
     */
    inline void set_STL_TxDataLeft(uint32_t value) volatile
    {
        uint32_t curr = STL;

        curr &= ~(0b111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111u) << 0u;

        STL = curr;
    }

    /**
     * Set STR's TxDataRight field.
     *
     * TxDataRight
     */
    inline void set_STR_TxDataRight(uint32_t value) volatile
    {
        uint32_t curr = STR;

        curr &= ~(0b111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111u) << 0u;

        STR = curr;
    }

    /**
     * Get STCSCH's TxCChannelCons_h field.
     *
     * TxCChannelCons_h
     */
    inline uint32_t get_STCSCH_TxCChannelCons_h() volatile
    {
        return (STCSCH >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Set STCSCH's TxCChannelCons_h field.
     *
     * TxCChannelCons_h
     */
    inline void set_STCSCH_TxCChannelCons_h(uint32_t value) volatile
    {
        uint32_t curr = STCSCH;

        curr &= ~(0b111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111u) << 0u;

        STCSCH = curr;
    }

    /**
     * Get STCSCL's TxCChannelCons_l field.
     *
     * TxCChannelCons_l
     */
    inline uint32_t get_STCSCL_TxCChannelCons_l() volatile
    {
        return (STCSCL >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Set STCSCL's TxCChannelCons_l field.
     *
     * TxCChannelCons_l
     */
    inline void set_STCSCL_TxCChannelCons_l(uint32_t value) volatile
    {
        uint32_t curr = STCSCL;

        curr &= ~(0b111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111u) << 0u;

        STCSCL = curr;
    }

    /**
     * Get SRFM's FreqMeas field.
     *
     * FreqMeas
     */
    inline uint32_t get_SRFM_FreqMeas() volatile
    {
        return (SRFM >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Get STC's SYSCLK_DF field.
     *
     * SYSCLK_DF
     */
    inline SPDIF_STC_SYSCLK_DF get_STC_SYSCLK_DF() volatile
    {
        return SPDIF_STC_SYSCLK_DF((STC >> 11u) & 0b111111111u);
    }

    /**
     * Set STC's SYSCLK_DF field.
     *
     * SYSCLK_DF
     */
    inline void set_STC_SYSCLK_DF(SPDIF_STC_SYSCLK_DF value) volatile
    {
        uint32_t curr = STC;

        curr &= ~(0b111111111u << 11u);
        curr |= (std::to_underlying(value) & 0b111111111u) << 11u;

        STC = curr;
    }

    /**
     * Get STC's TxClk_Source field.
     *
     * TxClk_Source
     */
    inline SPDIF_STC_TxClk_Source get_STC_TxClk_Source() volatile
    {
        return SPDIF_STC_TxClk_Source((STC >> 8u) & 0b111u);
    }

    /**
     * Set STC's TxClk_Source field.
     *
     * TxClk_Source
     */
    inline void set_STC_TxClk_Source(SPDIF_STC_TxClk_Source value) volatile
    {
        uint32_t curr = STC;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        STC = curr;
    }

    /**
     * Get STC's tx_all_clk_en bit.
     *
     * tx_all_clk_en
     */
    inline bool get_STC_tx_all_clk_en() volatile
    {
        return STC & (1u << 7u);
    }

    /**
     * Set STC's tx_all_clk_en bit.
     *
     * tx_all_clk_en
     */
    inline void set_STC_tx_all_clk_en() volatile
    {
        STC |= 1u << 7u;
    }

    /**
     * Clear STC's tx_all_clk_en bit.
     *
     * tx_all_clk_en
     */
    inline void clear_STC_tx_all_clk_en() volatile
    {
        STC &= ~(1u << 7u);
    }

    /**
     * Toggle STC's tx_all_clk_en bit.
     *
     * tx_all_clk_en
     */
    inline void toggle_STC_tx_all_clk_en() volatile
    {
        STC ^= 1u << 7u;
    }

    /**
     * Get STC's TxClk_DF field.
     *
     * TxClk_DF
     */
    inline SPDIF_STC_TxClk_DF get_STC_TxClk_DF() volatile
    {
        return SPDIF_STC_TxClk_DF((STC >> 0u) & 0b1111111u);
    }

    /**
     * Set STC's TxClk_DF field.
     *
     * TxClk_DF
     */
    inline void set_STC_TxClk_DF(SPDIF_STC_TxClk_DF value) volatile
    {
        uint32_t curr = STC;

        curr &= ~(0b1111111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111111u) << 0u;

        STC = curr;
    }

    /**
     * Get all of STC's bit fields.
     *
     * (read-write) SPDIFTxClk Register
     */
    inline void get_STC(SPDIF_STC_SYSCLK_DF &SYSCLK_DF,
                        SPDIF_STC_TxClk_Source &TxClk_Source,
                        bool &tx_all_clk_en,
                        SPDIF_STC_TxClk_DF &TxClk_DF) volatile
    {
        uint32_t curr = STC;

        SYSCLK_DF = SPDIF_STC_SYSCLK_DF((curr >> 11u) & 0b111111111u);
        TxClk_Source = SPDIF_STC_TxClk_Source((curr >> 8u) & 0b111u);
        tx_all_clk_en = curr & (1u << 7u);
        TxClk_DF = SPDIF_STC_TxClk_DF((curr >> 0u) & 0b1111111u);
    }

    /**
     * Set all of STC's bit fields.
     *
     * (read-write) SPDIFTxClk Register
     */
    inline void set_STC(SPDIF_STC_SYSCLK_DF SYSCLK_DF,
                        SPDIF_STC_TxClk_Source TxClk_Source,
                        bool tx_all_clk_en,
                        SPDIF_STC_TxClk_DF TxClk_DF) volatile
    {
        uint32_t curr = STC;

        curr &= ~(0b111111111u << 11u);
        curr |= (std::to_underlying(SYSCLK_DF) & 0b111111111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(TxClk_Source) & 0b111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (tx_all_clk_en & 0b1u) << 7u;
        curr &= ~(0b1111111u << 0u);
        curr |= (std::to_underlying(TxClk_DF) & 0b1111111u) << 0u;

        STC = curr;
    }
};

static_assert(sizeof(spdif) == spdif::size);

static volatile spdif *const SPDIF = reinterpret_cast<spdif *>(0x40400000);

}; // namespace MIMXRT1176::CM7
