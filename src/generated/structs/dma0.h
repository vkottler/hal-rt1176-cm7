/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/DMA0_TCD0_ATTR_SMOD.h"
#include "../enums/DMA0_TCD0_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD0_CSR_BWC.h"
#include "../enums/DMA0_TCD10_ATTR_SMOD.h"
#include "../enums/DMA0_TCD10_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD10_CSR_BWC.h"
#include "../enums/DMA0_TCD11_ATTR_SMOD.h"
#include "../enums/DMA0_TCD11_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD11_CSR_BWC.h"
#include "../enums/DMA0_TCD12_ATTR_SMOD.h"
#include "../enums/DMA0_TCD12_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD12_CSR_BWC.h"
#include "../enums/DMA0_TCD13_ATTR_SMOD.h"
#include "../enums/DMA0_TCD13_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD13_CSR_BWC.h"
#include "../enums/DMA0_TCD14_ATTR_SMOD.h"
#include "../enums/DMA0_TCD14_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD14_CSR_BWC.h"
#include "../enums/DMA0_TCD15_ATTR_SMOD.h"
#include "../enums/DMA0_TCD15_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD15_CSR_BWC.h"
#include "../enums/DMA0_TCD16_ATTR_SMOD.h"
#include "../enums/DMA0_TCD16_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD16_CSR_BWC.h"
#include "../enums/DMA0_TCD17_ATTR_SMOD.h"
#include "../enums/DMA0_TCD17_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD17_CSR_BWC.h"
#include "../enums/DMA0_TCD18_ATTR_SMOD.h"
#include "../enums/DMA0_TCD18_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD18_CSR_BWC.h"
#include "../enums/DMA0_TCD19_ATTR_SMOD.h"
#include "../enums/DMA0_TCD19_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD19_CSR_BWC.h"
#include "../enums/DMA0_TCD1_ATTR_SMOD.h"
#include "../enums/DMA0_TCD1_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD1_CSR_BWC.h"
#include "../enums/DMA0_TCD20_ATTR_SMOD.h"
#include "../enums/DMA0_TCD20_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD20_CSR_BWC.h"
#include "../enums/DMA0_TCD21_ATTR_SMOD.h"
#include "../enums/DMA0_TCD21_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD21_CSR_BWC.h"
#include "../enums/DMA0_TCD22_ATTR_SMOD.h"
#include "../enums/DMA0_TCD22_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD22_CSR_BWC.h"
#include "../enums/DMA0_TCD23_ATTR_SMOD.h"
#include "../enums/DMA0_TCD23_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD23_CSR_BWC.h"
#include "../enums/DMA0_TCD24_ATTR_SMOD.h"
#include "../enums/DMA0_TCD24_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD24_CSR_BWC.h"
#include "../enums/DMA0_TCD25_ATTR_SMOD.h"
#include "../enums/DMA0_TCD25_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD25_CSR_BWC.h"
#include "../enums/DMA0_TCD26_ATTR_SMOD.h"
#include "../enums/DMA0_TCD26_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD26_CSR_BWC.h"
#include "../enums/DMA0_TCD27_ATTR_SMOD.h"
#include "../enums/DMA0_TCD27_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD27_CSR_BWC.h"
#include "../enums/DMA0_TCD28_ATTR_SMOD.h"
#include "../enums/DMA0_TCD28_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD28_CSR_BWC.h"
#include "../enums/DMA0_TCD29_ATTR_SMOD.h"
#include "../enums/DMA0_TCD29_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD29_CSR_BWC.h"
#include "../enums/DMA0_TCD2_ATTR_SMOD.h"
#include "../enums/DMA0_TCD2_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD2_CSR_BWC.h"
#include "../enums/DMA0_TCD30_ATTR_SMOD.h"
#include "../enums/DMA0_TCD30_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD30_CSR_BWC.h"
#include "../enums/DMA0_TCD31_ATTR_SMOD.h"
#include "../enums/DMA0_TCD31_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD31_CSR_BWC.h"
#include "../enums/DMA0_TCD3_ATTR_SMOD.h"
#include "../enums/DMA0_TCD3_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD3_CSR_BWC.h"
#include "../enums/DMA0_TCD4_ATTR_SMOD.h"
#include "../enums/DMA0_TCD4_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD4_CSR_BWC.h"
#include "../enums/DMA0_TCD5_ATTR_SMOD.h"
#include "../enums/DMA0_TCD5_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD5_CSR_BWC.h"
#include "../enums/DMA0_TCD6_ATTR_SMOD.h"
#include "../enums/DMA0_TCD6_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD6_CSR_BWC.h"
#include "../enums/DMA0_TCD7_ATTR_SMOD.h"
#include "../enums/DMA0_TCD7_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD7_CSR_BWC.h"
#include "../enums/DMA0_TCD8_ATTR_SMOD.h"
#include "../enums/DMA0_TCD8_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD8_CSR_BWC.h"
#include "../enums/DMA0_TCD9_ATTR_SMOD.h"
#include "../enums/DMA0_TCD9_ATTR_SSIZE.h"
#include "../enums/DMA0_TCD9_CSR_BWC.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * DMA
 */
struct [[gnu::packed]] dma0
{
    /* Constant attributes. */
    static constexpr std::size_t size = 5118; /*!< dma0's size in bytes. */

    /* Fields. */
    uint32_t CR; /*!< (read-write) Control */
    uint32_t ES; /*!< (read-write) Error Status */
    const uint32_t reserved_padding0 = {};
    uint32_t ERQ; /*!< (read-write) Enable Request */
    const uint32_t reserved_padding1 = {};
    uint32_t EEI; /*!< (read-write) Enable Error Interrupt */
    uint8_t CEEI; /*!< (read-write) Clear Enable Error Interrupt */
    uint8_t SEEI; /*!< (read-write) Set Enable Error Interrupt */
    uint8_t CERQ; /*!< (read-write) Clear Enable Request */
    uint8_t SERQ; /*!< (read-write) Set Enable Request */
    uint8_t CDNE; /*!< (read-write) Clear DONE Status Bit */
    uint8_t SSRT; /*!< (read-write) Set START Bit */
    uint8_t CERR; /*!< (read-write) Clear Error */
    uint8_t CINT; /*!< (read-write) Clear Interrupt Request */
    const uint32_t reserved_padding2 = {};
    uint32_t INT; /*!< (read-write) Interrupt Request */
    const uint32_t reserved_padding3 = {};
    uint32_t ERR; /*!< (read-write) Error */
    const uint32_t reserved_padding4 = {};
    uint32_t HRS; /*!< (read-write) Hardware Request Status */
    static constexpr std::size_t reserved_padding5_length = 3;
    const uint32_t reserved_padding5[reserved_padding5_length] = {};
    uint32_t EARS; /*!< (read-write) Enable Asynchronous Request in Stop */
    static constexpr std::size_t reserved_padding6_length = 46;
    const uint32_t reserved_padding6[reserved_padding6_length] = {};
    uint8_t DCHPRI3;  /*!< (read-write) Channel Priority */
    uint8_t DCHPRI2;  /*!< (read-write) Channel Priority */
    uint8_t DCHPRI1;  /*!< (read-write) Channel Priority */
    uint8_t DCHPRI0;  /*!< (read-write) Channel Priority */
    uint8_t DCHPRI7;  /*!< (read-write) Channel Priority */
    uint8_t DCHPRI6;  /*!< (read-write) Channel Priority */
    uint8_t DCHPRI5;  /*!< (read-write) Channel Priority */
    uint8_t DCHPRI4;  /*!< (read-write) Channel Priority */
    uint8_t DCHPRI11; /*!< (read-write) Channel Priority */
    uint8_t DCHPRI10; /*!< (read-write) Channel Priority */
    uint8_t DCHPRI9;  /*!< (read-write) Channel Priority */
    uint8_t DCHPRI8;  /*!< (read-write) Channel Priority */
    uint8_t DCHPRI15; /*!< (read-write) Channel Priority */
    uint8_t DCHPRI14; /*!< (read-write) Channel Priority */
    uint8_t DCHPRI13; /*!< (read-write) Channel Priority */
    uint8_t DCHPRI12; /*!< (read-write) Channel Priority */
    uint8_t DCHPRI19; /*!< (read-write) Channel Priority */
    uint8_t DCHPRI18; /*!< (read-write) Channel Priority */
    uint8_t DCHPRI17; /*!< (read-write) Channel Priority */
    uint8_t DCHPRI16; /*!< (read-write) Channel Priority */
    uint8_t DCHPRI23; /*!< (read-write) Channel Priority */
    uint8_t DCHPRI22; /*!< (read-write) Channel Priority */
    uint8_t DCHPRI21; /*!< (read-write) Channel Priority */
    uint8_t DCHPRI20; /*!< (read-write) Channel Priority */
    uint8_t DCHPRI27; /*!< (read-write) Channel Priority */
    uint8_t DCHPRI26; /*!< (read-write) Channel Priority */
    uint8_t DCHPRI25; /*!< (read-write) Channel Priority */
    uint8_t DCHPRI24; /*!< (read-write) Channel Priority */
    uint8_t DCHPRI31; /*!< (read-write) Channel Priority */
    uint8_t DCHPRI30; /*!< (read-write) Channel Priority */
    uint8_t DCHPRI29; /*!< (read-write) Channel Priority */
    uint8_t DCHPRI28; /*!< (read-write) Channel Priority */
    static constexpr std::size_t reserved_padding7_length = 952;
    const uint32_t reserved_padding7[reserved_padding7_length] = {};
    uint32_t TCD0_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD0_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD0_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    uint32_t TCD0_NBYTES_MLNO; /*!< (read-write) TCD Minor Byte Count (Minor
                                  Loop Mapping Disabled) */
    uint32_t
        TCD0_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD0_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD0_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    uint16_t
        TCD0_CITER_ELINKNO; /*!< (read-write) TCD Current Minor Loop Link,
                               Major Loop Count (Channel Linking Disabled) */
    uint32_t TCD0_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                               Adjustment/Scatter Gather Address */
    uint16_t TCD0_CSR;      /*!< (read-write) TCD Control and Status */
    uint16_t
        TCD0_BITER_ELINKNO; /*!< (read-write) TCD Beginning Minor Loop Link,
                               Major Loop Count (Channel Linking Disabled) */
    uint32_t TCD1_SADDR;    /*!< (read-write) TCD Source Address */
    uint16_t TCD1_SOFF; /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD1_ATTR; /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding8 = {};
    uint32_t
        TCD1_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD1_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD1_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding9_length = 2;
    const uint8_t reserved_padding9[reserved_padding9_length] = {};
    uint32_t TCD1_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                               Adjustment/Scatter Gather Address */
    uint16_t TCD1_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding10_length = 2;
    const uint8_t reserved_padding10[reserved_padding10_length] = {};
    uint32_t TCD2_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD2_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD2_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding11 = {};
    uint32_t
        TCD2_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD2_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD2_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding12_length = 2;
    const uint8_t reserved_padding12[reserved_padding12_length] = {};
    uint32_t TCD2_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                               Adjustment/Scatter Gather Address */
    uint16_t TCD2_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding13_length = 2;
    const uint8_t reserved_padding13[reserved_padding13_length] = {};
    uint32_t TCD3_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD3_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD3_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding14 = {};
    uint32_t
        TCD3_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD3_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD3_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding15_length = 2;
    const uint8_t reserved_padding15[reserved_padding15_length] = {};
    uint32_t TCD3_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                               Adjustment/Scatter Gather Address */
    uint16_t TCD3_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding16_length = 2;
    const uint8_t reserved_padding16[reserved_padding16_length] = {};
    uint32_t TCD4_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD4_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD4_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding17 = {};
    uint32_t
        TCD4_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD4_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD4_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding18_length = 2;
    const uint8_t reserved_padding18[reserved_padding18_length] = {};
    uint32_t TCD4_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                               Adjustment/Scatter Gather Address */
    uint16_t TCD4_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding19_length = 2;
    const uint8_t reserved_padding19[reserved_padding19_length] = {};
    uint32_t TCD5_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD5_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD5_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding20 = {};
    uint32_t
        TCD5_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD5_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD5_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding21_length = 2;
    const uint8_t reserved_padding21[reserved_padding21_length] = {};
    uint32_t TCD5_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                               Adjustment/Scatter Gather Address */
    uint16_t TCD5_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding22_length = 2;
    const uint8_t reserved_padding22[reserved_padding22_length] = {};
    uint32_t TCD6_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD6_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD6_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding23 = {};
    uint32_t
        TCD6_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD6_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD6_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding24_length = 2;
    const uint8_t reserved_padding24[reserved_padding24_length] = {};
    uint32_t TCD6_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                               Adjustment/Scatter Gather Address */
    uint16_t TCD6_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding25_length = 2;
    const uint8_t reserved_padding25[reserved_padding25_length] = {};
    uint32_t TCD7_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD7_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD7_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding26 = {};
    uint32_t
        TCD7_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD7_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD7_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding27_length = 2;
    const uint8_t reserved_padding27[reserved_padding27_length] = {};
    uint32_t TCD7_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                               Adjustment/Scatter Gather Address */
    uint16_t TCD7_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding28_length = 2;
    const uint8_t reserved_padding28[reserved_padding28_length] = {};
    uint32_t TCD8_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD8_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD8_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding29 = {};
    uint32_t
        TCD8_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD8_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD8_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding30_length = 2;
    const uint8_t reserved_padding30[reserved_padding30_length] = {};
    uint32_t TCD8_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                               Adjustment/Scatter Gather Address */
    uint16_t TCD8_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding31_length = 2;
    const uint8_t reserved_padding31[reserved_padding31_length] = {};
    uint32_t TCD9_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD9_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD9_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding32 = {};
    uint32_t
        TCD9_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD9_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD9_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding33_length = 2;
    const uint8_t reserved_padding33[reserved_padding33_length] = {};
    uint32_t TCD9_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                               Adjustment/Scatter Gather Address */
    uint16_t TCD9_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding34_length = 2;
    const uint8_t reserved_padding34[reserved_padding34_length] = {};
    uint32_t TCD10_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD10_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD10_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding35 = {};
    uint32_t
        TCD10_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD10_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD10_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding36_length = 2;
    const uint8_t reserved_padding36[reserved_padding36_length] = {};
    uint32_t TCD10_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD10_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding37_length = 2;
    const uint8_t reserved_padding37[reserved_padding37_length] = {};
    uint32_t TCD11_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD11_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD11_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding38 = {};
    uint32_t
        TCD11_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD11_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD11_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding39_length = 2;
    const uint8_t reserved_padding39[reserved_padding39_length] = {};
    uint32_t TCD11_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD11_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding40_length = 2;
    const uint8_t reserved_padding40[reserved_padding40_length] = {};
    uint32_t TCD12_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD12_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD12_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding41 = {};
    uint32_t
        TCD12_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD12_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD12_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding42_length = 2;
    const uint8_t reserved_padding42[reserved_padding42_length] = {};
    uint32_t TCD12_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD12_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding43_length = 2;
    const uint8_t reserved_padding43[reserved_padding43_length] = {};
    uint32_t TCD13_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD13_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD13_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding44 = {};
    uint32_t
        TCD13_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD13_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD13_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding45_length = 2;
    const uint8_t reserved_padding45[reserved_padding45_length] = {};
    uint32_t TCD13_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD13_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding46_length = 2;
    const uint8_t reserved_padding46[reserved_padding46_length] = {};
    uint32_t TCD14_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD14_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD14_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding47 = {};
    uint32_t
        TCD14_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD14_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD14_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding48_length = 2;
    const uint8_t reserved_padding48[reserved_padding48_length] = {};
    uint32_t TCD14_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD14_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding49_length = 2;
    const uint8_t reserved_padding49[reserved_padding49_length] = {};
    uint32_t TCD15_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD15_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD15_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding50 = {};
    uint32_t
        TCD15_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD15_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD15_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding51_length = 2;
    const uint8_t reserved_padding51[reserved_padding51_length] = {};
    uint32_t TCD15_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD15_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding52_length = 2;
    const uint8_t reserved_padding52[reserved_padding52_length] = {};
    uint32_t TCD16_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD16_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD16_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding53 = {};
    uint32_t
        TCD16_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD16_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD16_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding54_length = 2;
    const uint8_t reserved_padding54[reserved_padding54_length] = {};
    uint32_t TCD16_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD16_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding55_length = 2;
    const uint8_t reserved_padding55[reserved_padding55_length] = {};
    uint32_t TCD17_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD17_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD17_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding56 = {};
    uint32_t
        TCD17_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD17_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD17_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding57_length = 2;
    const uint8_t reserved_padding57[reserved_padding57_length] = {};
    uint32_t TCD17_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD17_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding58_length = 2;
    const uint8_t reserved_padding58[reserved_padding58_length] = {};
    uint32_t TCD18_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD18_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD18_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding59 = {};
    uint32_t
        TCD18_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD18_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD18_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding60_length = 2;
    const uint8_t reserved_padding60[reserved_padding60_length] = {};
    uint32_t TCD18_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD18_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding61_length = 2;
    const uint8_t reserved_padding61[reserved_padding61_length] = {};
    uint32_t TCD19_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD19_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD19_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding62 = {};
    uint32_t
        TCD19_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD19_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD19_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding63_length = 2;
    const uint8_t reserved_padding63[reserved_padding63_length] = {};
    uint32_t TCD19_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD19_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding64_length = 2;
    const uint8_t reserved_padding64[reserved_padding64_length] = {};
    uint32_t TCD20_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD20_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD20_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding65 = {};
    uint32_t
        TCD20_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD20_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD20_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding66_length = 2;
    const uint8_t reserved_padding66[reserved_padding66_length] = {};
    uint32_t TCD20_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD20_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding67_length = 2;
    const uint8_t reserved_padding67[reserved_padding67_length] = {};
    uint32_t TCD21_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD21_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD21_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding68 = {};
    uint32_t
        TCD21_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD21_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD21_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding69_length = 2;
    const uint8_t reserved_padding69[reserved_padding69_length] = {};
    uint32_t TCD21_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD21_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding70_length = 2;
    const uint8_t reserved_padding70[reserved_padding70_length] = {};
    uint32_t TCD22_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD22_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD22_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding71 = {};
    uint32_t
        TCD22_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD22_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD22_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding72_length = 2;
    const uint8_t reserved_padding72[reserved_padding72_length] = {};
    uint32_t TCD22_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD22_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding73_length = 2;
    const uint8_t reserved_padding73[reserved_padding73_length] = {};
    uint32_t TCD23_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD23_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD23_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding74 = {};
    uint32_t
        TCD23_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD23_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD23_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding75_length = 2;
    const uint8_t reserved_padding75[reserved_padding75_length] = {};
    uint32_t TCD23_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD23_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding76_length = 2;
    const uint8_t reserved_padding76[reserved_padding76_length] = {};
    uint32_t TCD24_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD24_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD24_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding77 = {};
    uint32_t
        TCD24_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD24_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD24_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding78_length = 2;
    const uint8_t reserved_padding78[reserved_padding78_length] = {};
    uint32_t TCD24_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD24_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding79_length = 2;
    const uint8_t reserved_padding79[reserved_padding79_length] = {};
    uint32_t TCD25_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD25_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD25_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding80 = {};
    uint32_t
        TCD25_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD25_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD25_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding81_length = 2;
    const uint8_t reserved_padding81[reserved_padding81_length] = {};
    uint32_t TCD25_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD25_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding82_length = 2;
    const uint8_t reserved_padding82[reserved_padding82_length] = {};
    uint32_t TCD26_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD26_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD26_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding83 = {};
    uint32_t
        TCD26_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD26_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD26_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding84_length = 2;
    const uint8_t reserved_padding84[reserved_padding84_length] = {};
    uint32_t TCD26_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD26_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding85_length = 2;
    const uint8_t reserved_padding85[reserved_padding85_length] = {};
    uint32_t TCD27_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD27_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD27_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding86 = {};
    uint32_t
        TCD27_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD27_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD27_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding87_length = 2;
    const uint8_t reserved_padding87[reserved_padding87_length] = {};
    uint32_t TCD27_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD27_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding88_length = 2;
    const uint8_t reserved_padding88[reserved_padding88_length] = {};
    uint32_t TCD28_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD28_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD28_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding89 = {};
    uint32_t
        TCD28_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD28_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD28_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding90_length = 2;
    const uint8_t reserved_padding90[reserved_padding90_length] = {};
    uint32_t TCD28_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD28_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding91_length = 2;
    const uint8_t reserved_padding91[reserved_padding91_length] = {};
    uint32_t TCD29_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD29_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD29_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding92 = {};
    uint32_t
        TCD29_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD29_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD29_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding93_length = 2;
    const uint8_t reserved_padding93[reserved_padding93_length] = {};
    uint32_t TCD29_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD29_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding94_length = 2;
    const uint8_t reserved_padding94[reserved_padding94_length] = {};
    uint32_t TCD30_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD30_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD30_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding95 = {};
    uint32_t
        TCD30_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD30_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD30_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding96_length = 2;
    const uint8_t reserved_padding96[reserved_padding96_length] = {};
    uint32_t TCD30_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD30_CSR;      /*!< (read-write) TCD Control and Status */
    static constexpr std::size_t reserved_padding97_length = 2;
    const uint8_t reserved_padding97[reserved_padding97_length] = {};
    uint32_t TCD31_SADDR; /*!< (read-write) TCD Source Address */
    uint16_t TCD31_SOFF;  /*!< (read-write) TCD Signed Source Address Offset */
    uint16_t TCD31_ATTR;  /*!< (read-write) TCD Transfer Attributes */
    const uint32_t reserved_padding98 = {};
    uint32_t
        TCD31_SLAST; /*!< (read-write) TCD Last Source Address Adjustment */
    uint32_t TCD31_DADDR; /*!< (read-write) TCD Destination Address */
    uint16_t
        TCD31_DOFF; /*!< (read-write) TCD Signed Destination Address Offset */
    static constexpr std::size_t reserved_padding99_length = 2;
    const uint8_t reserved_padding99[reserved_padding99_length] = {};
    uint32_t TCD31_DLASTSGA; /*!< (read-write) TCD Last Destination Address
                                Adjustment/Scatter Gather Address */
    uint16_t TCD31_CSR;      /*!< (read-write) TCD Control and Status */

    /* Methods. */

    /**
     * Get CR's ACTIVE bit.
     *
     * eDMA Active Status
     */
    inline bool get_CR_ACTIVE() volatile
    {
        return CR & (1u << 31u);
    }

    /**
     * Get CR's VERSION field.
     *
     * eDMA version number
     */
    inline uint8_t get_CR_VERSION() volatile
    {
        return (CR >> 24u) & 0b1111111u;
    }

    /**
     * Get CR's CX bit.
     *
     * Cancel Transfer
     */
    inline bool get_CR_CX() volatile
    {
        return CR & (1u << 17u);
    }

    /**
     * Set CR's CX bit.
     *
     * Cancel Transfer
     */
    inline void set_CR_CX() volatile
    {
        CR |= 1u << 17u;
    }

    /**
     * Clear CR's CX bit.
     *
     * Cancel Transfer
     */
    inline void clear_CR_CX() volatile
    {
        CR &= ~(1u << 17u);
    }

    /**
     * Toggle CR's CX bit.
     *
     * Cancel Transfer
     */
    inline void toggle_CR_CX() volatile
    {
        CR ^= 1u << 17u;
    }

    /**
     * Get CR's ECX bit.
     *
     * Error Cancel Transfer
     */
    inline bool get_CR_ECX() volatile
    {
        return CR & (1u << 16u);
    }

    /**
     * Set CR's ECX bit.
     *
     * Error Cancel Transfer
     */
    inline void set_CR_ECX() volatile
    {
        CR |= 1u << 16u;
    }

    /**
     * Clear CR's ECX bit.
     *
     * Error Cancel Transfer
     */
    inline void clear_CR_ECX() volatile
    {
        CR &= ~(1u << 16u);
    }

    /**
     * Toggle CR's ECX bit.
     *
     * Error Cancel Transfer
     */
    inline void toggle_CR_ECX() volatile
    {
        CR ^= 1u << 16u;
    }

    /**
     * Get CR's GRP1PRI bit.
     *
     * Channel Group 1 Priority
     */
    inline bool get_CR_GRP1PRI() volatile
    {
        return CR & (1u << 10u);
    }

    /**
     * Set CR's GRP1PRI bit.
     *
     * Channel Group 1 Priority
     */
    inline void set_CR_GRP1PRI() volatile
    {
        CR |= 1u << 10u;
    }

    /**
     * Clear CR's GRP1PRI bit.
     *
     * Channel Group 1 Priority
     */
    inline void clear_CR_GRP1PRI() volatile
    {
        CR &= ~(1u << 10u);
    }

    /**
     * Toggle CR's GRP1PRI bit.
     *
     * Channel Group 1 Priority
     */
    inline void toggle_CR_GRP1PRI() volatile
    {
        CR ^= 1u << 10u;
    }

    /**
     * Get CR's GRP0PRI bit.
     *
     * Channel Group 0 Priority
     */
    inline bool get_CR_GRP0PRI() volatile
    {
        return CR & (1u << 8u);
    }

    /**
     * Set CR's GRP0PRI bit.
     *
     * Channel Group 0 Priority
     */
    inline void set_CR_GRP0PRI() volatile
    {
        CR |= 1u << 8u;
    }

    /**
     * Clear CR's GRP0PRI bit.
     *
     * Channel Group 0 Priority
     */
    inline void clear_CR_GRP0PRI() volatile
    {
        CR &= ~(1u << 8u);
    }

    /**
     * Toggle CR's GRP0PRI bit.
     *
     * Channel Group 0 Priority
     */
    inline void toggle_CR_GRP0PRI() volatile
    {
        CR ^= 1u << 8u;
    }

    /**
     * Get CR's EMLM bit.
     *
     * Enable Minor Loop Mapping
     */
    inline bool get_CR_EMLM() volatile
    {
        return CR & (1u << 7u);
    }

    /**
     * Set CR's EMLM bit.
     *
     * Enable Minor Loop Mapping
     */
    inline void set_CR_EMLM() volatile
    {
        CR |= 1u << 7u;
    }

    /**
     * Clear CR's EMLM bit.
     *
     * Enable Minor Loop Mapping
     */
    inline void clear_CR_EMLM() volatile
    {
        CR &= ~(1u << 7u);
    }

    /**
     * Toggle CR's EMLM bit.
     *
     * Enable Minor Loop Mapping
     */
    inline void toggle_CR_EMLM() volatile
    {
        CR ^= 1u << 7u;
    }

    /**
     * Get CR's CLM bit.
     *
     * Continuous Link Mode
     */
    inline bool get_CR_CLM() volatile
    {
        return CR & (1u << 6u);
    }

    /**
     * Set CR's CLM bit.
     *
     * Continuous Link Mode
     */
    inline void set_CR_CLM() volatile
    {
        CR |= 1u << 6u;
    }

    /**
     * Clear CR's CLM bit.
     *
     * Continuous Link Mode
     */
    inline void clear_CR_CLM() volatile
    {
        CR &= ~(1u << 6u);
    }

    /**
     * Toggle CR's CLM bit.
     *
     * Continuous Link Mode
     */
    inline void toggle_CR_CLM() volatile
    {
        CR ^= 1u << 6u;
    }

    /**
     * Get CR's HALT bit.
     *
     * Halt eDMA Operations
     */
    inline bool get_CR_HALT() volatile
    {
        return CR & (1u << 5u);
    }

    /**
     * Set CR's HALT bit.
     *
     * Halt eDMA Operations
     */
    inline void set_CR_HALT() volatile
    {
        CR |= 1u << 5u;
    }

    /**
     * Clear CR's HALT bit.
     *
     * Halt eDMA Operations
     */
    inline void clear_CR_HALT() volatile
    {
        CR &= ~(1u << 5u);
    }

    /**
     * Toggle CR's HALT bit.
     *
     * Halt eDMA Operations
     */
    inline void toggle_CR_HALT() volatile
    {
        CR ^= 1u << 5u;
    }

    /**
     * Get CR's HOE bit.
     *
     * Halt On Error
     */
    inline bool get_CR_HOE() volatile
    {
        return CR & (1u << 4u);
    }

    /**
     * Set CR's HOE bit.
     *
     * Halt On Error
     */
    inline void set_CR_HOE() volatile
    {
        CR |= 1u << 4u;
    }

    /**
     * Clear CR's HOE bit.
     *
     * Halt On Error
     */
    inline void clear_CR_HOE() volatile
    {
        CR &= ~(1u << 4u);
    }

    /**
     * Toggle CR's HOE bit.
     *
     * Halt On Error
     */
    inline void toggle_CR_HOE() volatile
    {
        CR ^= 1u << 4u;
    }

    /**
     * Get CR's ERGA bit.
     *
     * Enable Round Robin Group Arbitration
     */
    inline bool get_CR_ERGA() volatile
    {
        return CR & (1u << 3u);
    }

    /**
     * Set CR's ERGA bit.
     *
     * Enable Round Robin Group Arbitration
     */
    inline void set_CR_ERGA() volatile
    {
        CR |= 1u << 3u;
    }

    /**
     * Clear CR's ERGA bit.
     *
     * Enable Round Robin Group Arbitration
     */
    inline void clear_CR_ERGA() volatile
    {
        CR &= ~(1u << 3u);
    }

    /**
     * Toggle CR's ERGA bit.
     *
     * Enable Round Robin Group Arbitration
     */
    inline void toggle_CR_ERGA() volatile
    {
        CR ^= 1u << 3u;
    }

    /**
     * Get CR's ERCA bit.
     *
     * Enable Round Robin Channel Arbitration
     */
    inline bool get_CR_ERCA() volatile
    {
        return CR & (1u << 2u);
    }

    /**
     * Set CR's ERCA bit.
     *
     * Enable Round Robin Channel Arbitration
     */
    inline void set_CR_ERCA() volatile
    {
        CR |= 1u << 2u;
    }

    /**
     * Clear CR's ERCA bit.
     *
     * Enable Round Robin Channel Arbitration
     */
    inline void clear_CR_ERCA() volatile
    {
        CR &= ~(1u << 2u);
    }

    /**
     * Toggle CR's ERCA bit.
     *
     * Enable Round Robin Channel Arbitration
     */
    inline void toggle_CR_ERCA() volatile
    {
        CR ^= 1u << 2u;
    }

    /**
     * Get CR's EDBG bit.
     *
     * Enable Debug
     */
    inline bool get_CR_EDBG() volatile
    {
        return CR & (1u << 1u);
    }

    /**
     * Set CR's EDBG bit.
     *
     * Enable Debug
     */
    inline void set_CR_EDBG() volatile
    {
        CR |= 1u << 1u;
    }

    /**
     * Clear CR's EDBG bit.
     *
     * Enable Debug
     */
    inline void clear_CR_EDBG() volatile
    {
        CR &= ~(1u << 1u);
    }

    /**
     * Toggle CR's EDBG bit.
     *
     * Enable Debug
     */
    inline void toggle_CR_EDBG() volatile
    {
        CR ^= 1u << 1u;
    }

    /**
     * Get all of CR's bit fields.
     *
     * (read-write) Control
     */
    inline void get_CR(bool &ACTIVE, uint8_t &VERSION, bool &CX, bool &ECX,
                       bool &GRP1PRI, bool &GRP0PRI, bool &EMLM, bool &CLM,
                       bool &HALT, bool &HOE, bool &ERGA, bool &ERCA,
                       bool &EDBG) volatile
    {
        uint32_t curr = CR;

        ACTIVE = curr & (1u << 31u);
        VERSION = (curr >> 24u) & 0b1111111u;
        CX = curr & (1u << 17u);
        ECX = curr & (1u << 16u);
        GRP1PRI = curr & (1u << 10u);
        GRP0PRI = curr & (1u << 8u);
        EMLM = curr & (1u << 7u);
        CLM = curr & (1u << 6u);
        HALT = curr & (1u << 5u);
        HOE = curr & (1u << 4u);
        ERGA = curr & (1u << 3u);
        ERCA = curr & (1u << 2u);
        EDBG = curr & (1u << 1u);
    }

    /**
     * Set all of CR's bit fields.
     *
     * (read-write) Control
     */
    inline void set_CR(bool CX, bool ECX, bool GRP1PRI, bool GRP0PRI,
                       bool EMLM, bool CLM, bool HALT, bool HOE, bool ERGA,
                       bool ERCA, bool EDBG) volatile
    {
        uint32_t curr = CR;

        curr &= ~(0b1u << 17u);
        curr |= (CX & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (ECX & 0b1u) << 16u;
        curr &= ~(0b1u << 10u);
        curr |= (GRP1PRI & 0b1u) << 10u;
        curr &= ~(0b1u << 8u);
        curr |= (GRP0PRI & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (EMLM & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CLM & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (HALT & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (HOE & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (ERGA & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (ERCA & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (EDBG & 0b1u) << 1u;

        CR = curr;
    }

    /**
     * Get ES's VLD bit.
     *
     * Logical OR of all ERR status fields
     */
    inline bool get_ES_VLD() volatile
    {
        return ES & (1u << 31u);
    }

    /**
     * Get ES's ECX bit.
     *
     * Transfer Canceled
     */
    inline bool get_ES_ECX() volatile
    {
        return ES & (1u << 16u);
    }

    /**
     * Get ES's GPE bit.
     *
     * Group Priority Error
     */
    inline bool get_ES_GPE() volatile
    {
        return ES & (1u << 15u);
    }

    /**
     * Get ES's CPE bit.
     *
     * Channel Priority Error
     */
    inline bool get_ES_CPE() volatile
    {
        return ES & (1u << 14u);
    }

    /**
     * Get ES's ERRCHN field.
     *
     * Error Channel Number or Canceled Channel Number
     */
    inline uint8_t get_ES_ERRCHN() volatile
    {
        return (ES >> 8u) & 0b11111u;
    }

    /**
     * Get ES's SAE bit.
     *
     * Source Address Error
     */
    inline bool get_ES_SAE() volatile
    {
        return ES & (1u << 7u);
    }

    /**
     * Get ES's SOE bit.
     *
     * Source Offset Error
     */
    inline bool get_ES_SOE() volatile
    {
        return ES & (1u << 6u);
    }

    /**
     * Get ES's DAE bit.
     *
     * Destination Address Error
     */
    inline bool get_ES_DAE() volatile
    {
        return ES & (1u << 5u);
    }

    /**
     * Get ES's DOE bit.
     *
     * Destination Offset Error
     */
    inline bool get_ES_DOE() volatile
    {
        return ES & (1u << 4u);
    }

    /**
     * Get ES's NCE bit.
     *
     * NBYTES/CITER Configuration Error
     */
    inline bool get_ES_NCE() volatile
    {
        return ES & (1u << 3u);
    }

    /**
     * Get ES's SGE bit.
     *
     * Scatter/Gather Configuration Error
     */
    inline bool get_ES_SGE() volatile
    {
        return ES & (1u << 2u);
    }

    /**
     * Get ES's SBE bit.
     *
     * Source Bus Error
     */
    inline bool get_ES_SBE() volatile
    {
        return ES & (1u << 1u);
    }

    /**
     * Get ES's DBE bit.
     *
     * Destination Bus Error
     */
    inline bool get_ES_DBE() volatile
    {
        return ES & (1u << 0u);
    }

    /**
     * Get all of ES's bit fields.
     *
     * (read-write) Error Status
     */
    inline void get_ES(bool &VLD, bool &ECX, bool &GPE, bool &CPE,
                       uint8_t &ERRCHN, bool &SAE, bool &SOE, bool &DAE,
                       bool &DOE, bool &NCE, bool &SGE, bool &SBE,
                       bool &DBE) volatile
    {
        uint32_t curr = ES;

        VLD = curr & (1u << 31u);
        ECX = curr & (1u << 16u);
        GPE = curr & (1u << 15u);
        CPE = curr & (1u << 14u);
        ERRCHN = (curr >> 8u) & 0b11111u;
        SAE = curr & (1u << 7u);
        SOE = curr & (1u << 6u);
        DAE = curr & (1u << 5u);
        DOE = curr & (1u << 4u);
        NCE = curr & (1u << 3u);
        SGE = curr & (1u << 2u);
        SBE = curr & (1u << 1u);
        DBE = curr & (1u << 0u);
    }

    /**
     * Get ERQ's ERQ31 bit.
     *
     * Enable DMA Request 31
     */
    inline bool get_ERQ_ERQ31() volatile
    {
        return ERQ & (1u << 31u);
    }

    /**
     * Set ERQ's ERQ31 bit.
     *
     * Enable DMA Request 31
     */
    inline void set_ERQ_ERQ31() volatile
    {
        ERQ |= 1u << 31u;
    }

    /**
     * Clear ERQ's ERQ31 bit.
     *
     * Enable DMA Request 31
     */
    inline void clear_ERQ_ERQ31() volatile
    {
        ERQ &= ~(1u << 31u);
    }

    /**
     * Toggle ERQ's ERQ31 bit.
     *
     * Enable DMA Request 31
     */
    inline void toggle_ERQ_ERQ31() volatile
    {
        ERQ ^= 1u << 31u;
    }

    /**
     * Get ERQ's ERQ30 bit.
     *
     * Enable DMA Request 30
     */
    inline bool get_ERQ_ERQ30() volatile
    {
        return ERQ & (1u << 30u);
    }

    /**
     * Set ERQ's ERQ30 bit.
     *
     * Enable DMA Request 30
     */
    inline void set_ERQ_ERQ30() volatile
    {
        ERQ |= 1u << 30u;
    }

    /**
     * Clear ERQ's ERQ30 bit.
     *
     * Enable DMA Request 30
     */
    inline void clear_ERQ_ERQ30() volatile
    {
        ERQ &= ~(1u << 30u);
    }

    /**
     * Toggle ERQ's ERQ30 bit.
     *
     * Enable DMA Request 30
     */
    inline void toggle_ERQ_ERQ30() volatile
    {
        ERQ ^= 1u << 30u;
    }

    /**
     * Get ERQ's ERQ29 bit.
     *
     * Enable DMA Request 29
     */
    inline bool get_ERQ_ERQ29() volatile
    {
        return ERQ & (1u << 29u);
    }

    /**
     * Set ERQ's ERQ29 bit.
     *
     * Enable DMA Request 29
     */
    inline void set_ERQ_ERQ29() volatile
    {
        ERQ |= 1u << 29u;
    }

    /**
     * Clear ERQ's ERQ29 bit.
     *
     * Enable DMA Request 29
     */
    inline void clear_ERQ_ERQ29() volatile
    {
        ERQ &= ~(1u << 29u);
    }

    /**
     * Toggle ERQ's ERQ29 bit.
     *
     * Enable DMA Request 29
     */
    inline void toggle_ERQ_ERQ29() volatile
    {
        ERQ ^= 1u << 29u;
    }

    /**
     * Get ERQ's ERQ28 bit.
     *
     * Enable DMA Request 28
     */
    inline bool get_ERQ_ERQ28() volatile
    {
        return ERQ & (1u << 28u);
    }

    /**
     * Set ERQ's ERQ28 bit.
     *
     * Enable DMA Request 28
     */
    inline void set_ERQ_ERQ28() volatile
    {
        ERQ |= 1u << 28u;
    }

    /**
     * Clear ERQ's ERQ28 bit.
     *
     * Enable DMA Request 28
     */
    inline void clear_ERQ_ERQ28() volatile
    {
        ERQ &= ~(1u << 28u);
    }

    /**
     * Toggle ERQ's ERQ28 bit.
     *
     * Enable DMA Request 28
     */
    inline void toggle_ERQ_ERQ28() volatile
    {
        ERQ ^= 1u << 28u;
    }

    /**
     * Get ERQ's ERQ27 bit.
     *
     * Enable DMA Request 27
     */
    inline bool get_ERQ_ERQ27() volatile
    {
        return ERQ & (1u << 27u);
    }

    /**
     * Set ERQ's ERQ27 bit.
     *
     * Enable DMA Request 27
     */
    inline void set_ERQ_ERQ27() volatile
    {
        ERQ |= 1u << 27u;
    }

    /**
     * Clear ERQ's ERQ27 bit.
     *
     * Enable DMA Request 27
     */
    inline void clear_ERQ_ERQ27() volatile
    {
        ERQ &= ~(1u << 27u);
    }

    /**
     * Toggle ERQ's ERQ27 bit.
     *
     * Enable DMA Request 27
     */
    inline void toggle_ERQ_ERQ27() volatile
    {
        ERQ ^= 1u << 27u;
    }

    /**
     * Get ERQ's ERQ26 bit.
     *
     * Enable DMA Request 26
     */
    inline bool get_ERQ_ERQ26() volatile
    {
        return ERQ & (1u << 26u);
    }

    /**
     * Set ERQ's ERQ26 bit.
     *
     * Enable DMA Request 26
     */
    inline void set_ERQ_ERQ26() volatile
    {
        ERQ |= 1u << 26u;
    }

    /**
     * Clear ERQ's ERQ26 bit.
     *
     * Enable DMA Request 26
     */
    inline void clear_ERQ_ERQ26() volatile
    {
        ERQ &= ~(1u << 26u);
    }

    /**
     * Toggle ERQ's ERQ26 bit.
     *
     * Enable DMA Request 26
     */
    inline void toggle_ERQ_ERQ26() volatile
    {
        ERQ ^= 1u << 26u;
    }

    /**
     * Get ERQ's ERQ25 bit.
     *
     * Enable DMA Request 25
     */
    inline bool get_ERQ_ERQ25() volatile
    {
        return ERQ & (1u << 25u);
    }

    /**
     * Set ERQ's ERQ25 bit.
     *
     * Enable DMA Request 25
     */
    inline void set_ERQ_ERQ25() volatile
    {
        ERQ |= 1u << 25u;
    }

    /**
     * Clear ERQ's ERQ25 bit.
     *
     * Enable DMA Request 25
     */
    inline void clear_ERQ_ERQ25() volatile
    {
        ERQ &= ~(1u << 25u);
    }

    /**
     * Toggle ERQ's ERQ25 bit.
     *
     * Enable DMA Request 25
     */
    inline void toggle_ERQ_ERQ25() volatile
    {
        ERQ ^= 1u << 25u;
    }

    /**
     * Get ERQ's ERQ24 bit.
     *
     * Enable DMA Request 24
     */
    inline bool get_ERQ_ERQ24() volatile
    {
        return ERQ & (1u << 24u);
    }

    /**
     * Set ERQ's ERQ24 bit.
     *
     * Enable DMA Request 24
     */
    inline void set_ERQ_ERQ24() volatile
    {
        ERQ |= 1u << 24u;
    }

    /**
     * Clear ERQ's ERQ24 bit.
     *
     * Enable DMA Request 24
     */
    inline void clear_ERQ_ERQ24() volatile
    {
        ERQ &= ~(1u << 24u);
    }

    /**
     * Toggle ERQ's ERQ24 bit.
     *
     * Enable DMA Request 24
     */
    inline void toggle_ERQ_ERQ24() volatile
    {
        ERQ ^= 1u << 24u;
    }

    /**
     * Get ERQ's ERQ23 bit.
     *
     * Enable DMA Request 23
     */
    inline bool get_ERQ_ERQ23() volatile
    {
        return ERQ & (1u << 23u);
    }

    /**
     * Set ERQ's ERQ23 bit.
     *
     * Enable DMA Request 23
     */
    inline void set_ERQ_ERQ23() volatile
    {
        ERQ |= 1u << 23u;
    }

    /**
     * Clear ERQ's ERQ23 bit.
     *
     * Enable DMA Request 23
     */
    inline void clear_ERQ_ERQ23() volatile
    {
        ERQ &= ~(1u << 23u);
    }

    /**
     * Toggle ERQ's ERQ23 bit.
     *
     * Enable DMA Request 23
     */
    inline void toggle_ERQ_ERQ23() volatile
    {
        ERQ ^= 1u << 23u;
    }

    /**
     * Get ERQ's ERQ22 bit.
     *
     * Enable DMA Request 22
     */
    inline bool get_ERQ_ERQ22() volatile
    {
        return ERQ & (1u << 22u);
    }

    /**
     * Set ERQ's ERQ22 bit.
     *
     * Enable DMA Request 22
     */
    inline void set_ERQ_ERQ22() volatile
    {
        ERQ |= 1u << 22u;
    }

    /**
     * Clear ERQ's ERQ22 bit.
     *
     * Enable DMA Request 22
     */
    inline void clear_ERQ_ERQ22() volatile
    {
        ERQ &= ~(1u << 22u);
    }

    /**
     * Toggle ERQ's ERQ22 bit.
     *
     * Enable DMA Request 22
     */
    inline void toggle_ERQ_ERQ22() volatile
    {
        ERQ ^= 1u << 22u;
    }

    /**
     * Get ERQ's ERQ21 bit.
     *
     * Enable DMA Request 21
     */
    inline bool get_ERQ_ERQ21() volatile
    {
        return ERQ & (1u << 21u);
    }

    /**
     * Set ERQ's ERQ21 bit.
     *
     * Enable DMA Request 21
     */
    inline void set_ERQ_ERQ21() volatile
    {
        ERQ |= 1u << 21u;
    }

    /**
     * Clear ERQ's ERQ21 bit.
     *
     * Enable DMA Request 21
     */
    inline void clear_ERQ_ERQ21() volatile
    {
        ERQ &= ~(1u << 21u);
    }

    /**
     * Toggle ERQ's ERQ21 bit.
     *
     * Enable DMA Request 21
     */
    inline void toggle_ERQ_ERQ21() volatile
    {
        ERQ ^= 1u << 21u;
    }

    /**
     * Get ERQ's ERQ20 bit.
     *
     * Enable DMA Request 20
     */
    inline bool get_ERQ_ERQ20() volatile
    {
        return ERQ & (1u << 20u);
    }

    /**
     * Set ERQ's ERQ20 bit.
     *
     * Enable DMA Request 20
     */
    inline void set_ERQ_ERQ20() volatile
    {
        ERQ |= 1u << 20u;
    }

    /**
     * Clear ERQ's ERQ20 bit.
     *
     * Enable DMA Request 20
     */
    inline void clear_ERQ_ERQ20() volatile
    {
        ERQ &= ~(1u << 20u);
    }

    /**
     * Toggle ERQ's ERQ20 bit.
     *
     * Enable DMA Request 20
     */
    inline void toggle_ERQ_ERQ20() volatile
    {
        ERQ ^= 1u << 20u;
    }

    /**
     * Get ERQ's ERQ19 bit.
     *
     * Enable DMA Request 19
     */
    inline bool get_ERQ_ERQ19() volatile
    {
        return ERQ & (1u << 19u);
    }

    /**
     * Set ERQ's ERQ19 bit.
     *
     * Enable DMA Request 19
     */
    inline void set_ERQ_ERQ19() volatile
    {
        ERQ |= 1u << 19u;
    }

    /**
     * Clear ERQ's ERQ19 bit.
     *
     * Enable DMA Request 19
     */
    inline void clear_ERQ_ERQ19() volatile
    {
        ERQ &= ~(1u << 19u);
    }

    /**
     * Toggle ERQ's ERQ19 bit.
     *
     * Enable DMA Request 19
     */
    inline void toggle_ERQ_ERQ19() volatile
    {
        ERQ ^= 1u << 19u;
    }

    /**
     * Get ERQ's ERQ18 bit.
     *
     * Enable DMA Request 18
     */
    inline bool get_ERQ_ERQ18() volatile
    {
        return ERQ & (1u << 18u);
    }

    /**
     * Set ERQ's ERQ18 bit.
     *
     * Enable DMA Request 18
     */
    inline void set_ERQ_ERQ18() volatile
    {
        ERQ |= 1u << 18u;
    }

    /**
     * Clear ERQ's ERQ18 bit.
     *
     * Enable DMA Request 18
     */
    inline void clear_ERQ_ERQ18() volatile
    {
        ERQ &= ~(1u << 18u);
    }

    /**
     * Toggle ERQ's ERQ18 bit.
     *
     * Enable DMA Request 18
     */
    inline void toggle_ERQ_ERQ18() volatile
    {
        ERQ ^= 1u << 18u;
    }

    /**
     * Get ERQ's ERQ17 bit.
     *
     * Enable DMA Request 17
     */
    inline bool get_ERQ_ERQ17() volatile
    {
        return ERQ & (1u << 17u);
    }

    /**
     * Set ERQ's ERQ17 bit.
     *
     * Enable DMA Request 17
     */
    inline void set_ERQ_ERQ17() volatile
    {
        ERQ |= 1u << 17u;
    }

    /**
     * Clear ERQ's ERQ17 bit.
     *
     * Enable DMA Request 17
     */
    inline void clear_ERQ_ERQ17() volatile
    {
        ERQ &= ~(1u << 17u);
    }

    /**
     * Toggle ERQ's ERQ17 bit.
     *
     * Enable DMA Request 17
     */
    inline void toggle_ERQ_ERQ17() volatile
    {
        ERQ ^= 1u << 17u;
    }

    /**
     * Get ERQ's ERQ16 bit.
     *
     * Enable DMA Request 16
     */
    inline bool get_ERQ_ERQ16() volatile
    {
        return ERQ & (1u << 16u);
    }

    /**
     * Set ERQ's ERQ16 bit.
     *
     * Enable DMA Request 16
     */
    inline void set_ERQ_ERQ16() volatile
    {
        ERQ |= 1u << 16u;
    }

    /**
     * Clear ERQ's ERQ16 bit.
     *
     * Enable DMA Request 16
     */
    inline void clear_ERQ_ERQ16() volatile
    {
        ERQ &= ~(1u << 16u);
    }

    /**
     * Toggle ERQ's ERQ16 bit.
     *
     * Enable DMA Request 16
     */
    inline void toggle_ERQ_ERQ16() volatile
    {
        ERQ ^= 1u << 16u;
    }

    /**
     * Get ERQ's ERQ15 bit.
     *
     * Enable DMA Request 15
     */
    inline bool get_ERQ_ERQ15() volatile
    {
        return ERQ & (1u << 15u);
    }

    /**
     * Set ERQ's ERQ15 bit.
     *
     * Enable DMA Request 15
     */
    inline void set_ERQ_ERQ15() volatile
    {
        ERQ |= 1u << 15u;
    }

    /**
     * Clear ERQ's ERQ15 bit.
     *
     * Enable DMA Request 15
     */
    inline void clear_ERQ_ERQ15() volatile
    {
        ERQ &= ~(1u << 15u);
    }

    /**
     * Toggle ERQ's ERQ15 bit.
     *
     * Enable DMA Request 15
     */
    inline void toggle_ERQ_ERQ15() volatile
    {
        ERQ ^= 1u << 15u;
    }

    /**
     * Get ERQ's ERQ14 bit.
     *
     * Enable DMA Request 14
     */
    inline bool get_ERQ_ERQ14() volatile
    {
        return ERQ & (1u << 14u);
    }

    /**
     * Set ERQ's ERQ14 bit.
     *
     * Enable DMA Request 14
     */
    inline void set_ERQ_ERQ14() volatile
    {
        ERQ |= 1u << 14u;
    }

    /**
     * Clear ERQ's ERQ14 bit.
     *
     * Enable DMA Request 14
     */
    inline void clear_ERQ_ERQ14() volatile
    {
        ERQ &= ~(1u << 14u);
    }

    /**
     * Toggle ERQ's ERQ14 bit.
     *
     * Enable DMA Request 14
     */
    inline void toggle_ERQ_ERQ14() volatile
    {
        ERQ ^= 1u << 14u;
    }

    /**
     * Get ERQ's ERQ13 bit.
     *
     * Enable DMA Request 13
     */
    inline bool get_ERQ_ERQ13() volatile
    {
        return ERQ & (1u << 13u);
    }

    /**
     * Set ERQ's ERQ13 bit.
     *
     * Enable DMA Request 13
     */
    inline void set_ERQ_ERQ13() volatile
    {
        ERQ |= 1u << 13u;
    }

    /**
     * Clear ERQ's ERQ13 bit.
     *
     * Enable DMA Request 13
     */
    inline void clear_ERQ_ERQ13() volatile
    {
        ERQ &= ~(1u << 13u);
    }

    /**
     * Toggle ERQ's ERQ13 bit.
     *
     * Enable DMA Request 13
     */
    inline void toggle_ERQ_ERQ13() volatile
    {
        ERQ ^= 1u << 13u;
    }

    /**
     * Get ERQ's ERQ12 bit.
     *
     * Enable DMA Request 12
     */
    inline bool get_ERQ_ERQ12() volatile
    {
        return ERQ & (1u << 12u);
    }

    /**
     * Set ERQ's ERQ12 bit.
     *
     * Enable DMA Request 12
     */
    inline void set_ERQ_ERQ12() volatile
    {
        ERQ |= 1u << 12u;
    }

    /**
     * Clear ERQ's ERQ12 bit.
     *
     * Enable DMA Request 12
     */
    inline void clear_ERQ_ERQ12() volatile
    {
        ERQ &= ~(1u << 12u);
    }

    /**
     * Toggle ERQ's ERQ12 bit.
     *
     * Enable DMA Request 12
     */
    inline void toggle_ERQ_ERQ12() volatile
    {
        ERQ ^= 1u << 12u;
    }

    /**
     * Get ERQ's ERQ11 bit.
     *
     * Enable DMA Request 11
     */
    inline bool get_ERQ_ERQ11() volatile
    {
        return ERQ & (1u << 11u);
    }

    /**
     * Set ERQ's ERQ11 bit.
     *
     * Enable DMA Request 11
     */
    inline void set_ERQ_ERQ11() volatile
    {
        ERQ |= 1u << 11u;
    }

    /**
     * Clear ERQ's ERQ11 bit.
     *
     * Enable DMA Request 11
     */
    inline void clear_ERQ_ERQ11() volatile
    {
        ERQ &= ~(1u << 11u);
    }

    /**
     * Toggle ERQ's ERQ11 bit.
     *
     * Enable DMA Request 11
     */
    inline void toggle_ERQ_ERQ11() volatile
    {
        ERQ ^= 1u << 11u;
    }

    /**
     * Get ERQ's ERQ10 bit.
     *
     * Enable DMA Request 10
     */
    inline bool get_ERQ_ERQ10() volatile
    {
        return ERQ & (1u << 10u);
    }

    /**
     * Set ERQ's ERQ10 bit.
     *
     * Enable DMA Request 10
     */
    inline void set_ERQ_ERQ10() volatile
    {
        ERQ |= 1u << 10u;
    }

    /**
     * Clear ERQ's ERQ10 bit.
     *
     * Enable DMA Request 10
     */
    inline void clear_ERQ_ERQ10() volatile
    {
        ERQ &= ~(1u << 10u);
    }

    /**
     * Toggle ERQ's ERQ10 bit.
     *
     * Enable DMA Request 10
     */
    inline void toggle_ERQ_ERQ10() volatile
    {
        ERQ ^= 1u << 10u;
    }

    /**
     * Get ERQ's ERQ9 bit.
     *
     * Enable DMA Request 9
     */
    inline bool get_ERQ_ERQ9() volatile
    {
        return ERQ & (1u << 9u);
    }

    /**
     * Set ERQ's ERQ9 bit.
     *
     * Enable DMA Request 9
     */
    inline void set_ERQ_ERQ9() volatile
    {
        ERQ |= 1u << 9u;
    }

    /**
     * Clear ERQ's ERQ9 bit.
     *
     * Enable DMA Request 9
     */
    inline void clear_ERQ_ERQ9() volatile
    {
        ERQ &= ~(1u << 9u);
    }

    /**
     * Toggle ERQ's ERQ9 bit.
     *
     * Enable DMA Request 9
     */
    inline void toggle_ERQ_ERQ9() volatile
    {
        ERQ ^= 1u << 9u;
    }

    /**
     * Get ERQ's ERQ8 bit.
     *
     * Enable DMA Request 8
     */
    inline bool get_ERQ_ERQ8() volatile
    {
        return ERQ & (1u << 8u);
    }

    /**
     * Set ERQ's ERQ8 bit.
     *
     * Enable DMA Request 8
     */
    inline void set_ERQ_ERQ8() volatile
    {
        ERQ |= 1u << 8u;
    }

    /**
     * Clear ERQ's ERQ8 bit.
     *
     * Enable DMA Request 8
     */
    inline void clear_ERQ_ERQ8() volatile
    {
        ERQ &= ~(1u << 8u);
    }

    /**
     * Toggle ERQ's ERQ8 bit.
     *
     * Enable DMA Request 8
     */
    inline void toggle_ERQ_ERQ8() volatile
    {
        ERQ ^= 1u << 8u;
    }

    /**
     * Get ERQ's ERQ7 bit.
     *
     * Enable DMA Request 7
     */
    inline bool get_ERQ_ERQ7() volatile
    {
        return ERQ & (1u << 7u);
    }

    /**
     * Set ERQ's ERQ7 bit.
     *
     * Enable DMA Request 7
     */
    inline void set_ERQ_ERQ7() volatile
    {
        ERQ |= 1u << 7u;
    }

    /**
     * Clear ERQ's ERQ7 bit.
     *
     * Enable DMA Request 7
     */
    inline void clear_ERQ_ERQ7() volatile
    {
        ERQ &= ~(1u << 7u);
    }

    /**
     * Toggle ERQ's ERQ7 bit.
     *
     * Enable DMA Request 7
     */
    inline void toggle_ERQ_ERQ7() volatile
    {
        ERQ ^= 1u << 7u;
    }

    /**
     * Get ERQ's ERQ6 bit.
     *
     * Enable DMA Request 6
     */
    inline bool get_ERQ_ERQ6() volatile
    {
        return ERQ & (1u << 6u);
    }

    /**
     * Set ERQ's ERQ6 bit.
     *
     * Enable DMA Request 6
     */
    inline void set_ERQ_ERQ6() volatile
    {
        ERQ |= 1u << 6u;
    }

    /**
     * Clear ERQ's ERQ6 bit.
     *
     * Enable DMA Request 6
     */
    inline void clear_ERQ_ERQ6() volatile
    {
        ERQ &= ~(1u << 6u);
    }

    /**
     * Toggle ERQ's ERQ6 bit.
     *
     * Enable DMA Request 6
     */
    inline void toggle_ERQ_ERQ6() volatile
    {
        ERQ ^= 1u << 6u;
    }

    /**
     * Get ERQ's ERQ5 bit.
     *
     * Enable DMA Request 5
     */
    inline bool get_ERQ_ERQ5() volatile
    {
        return ERQ & (1u << 5u);
    }

    /**
     * Set ERQ's ERQ5 bit.
     *
     * Enable DMA Request 5
     */
    inline void set_ERQ_ERQ5() volatile
    {
        ERQ |= 1u << 5u;
    }

    /**
     * Clear ERQ's ERQ5 bit.
     *
     * Enable DMA Request 5
     */
    inline void clear_ERQ_ERQ5() volatile
    {
        ERQ &= ~(1u << 5u);
    }

    /**
     * Toggle ERQ's ERQ5 bit.
     *
     * Enable DMA Request 5
     */
    inline void toggle_ERQ_ERQ5() volatile
    {
        ERQ ^= 1u << 5u;
    }

    /**
     * Get ERQ's ERQ4 bit.
     *
     * Enable DMA Request 4
     */
    inline bool get_ERQ_ERQ4() volatile
    {
        return ERQ & (1u << 4u);
    }

    /**
     * Set ERQ's ERQ4 bit.
     *
     * Enable DMA Request 4
     */
    inline void set_ERQ_ERQ4() volatile
    {
        ERQ |= 1u << 4u;
    }

    /**
     * Clear ERQ's ERQ4 bit.
     *
     * Enable DMA Request 4
     */
    inline void clear_ERQ_ERQ4() volatile
    {
        ERQ &= ~(1u << 4u);
    }

    /**
     * Toggle ERQ's ERQ4 bit.
     *
     * Enable DMA Request 4
     */
    inline void toggle_ERQ_ERQ4() volatile
    {
        ERQ ^= 1u << 4u;
    }

    /**
     * Get ERQ's ERQ3 bit.
     *
     * Enable DMA Request 3
     */
    inline bool get_ERQ_ERQ3() volatile
    {
        return ERQ & (1u << 3u);
    }

    /**
     * Set ERQ's ERQ3 bit.
     *
     * Enable DMA Request 3
     */
    inline void set_ERQ_ERQ3() volatile
    {
        ERQ |= 1u << 3u;
    }

    /**
     * Clear ERQ's ERQ3 bit.
     *
     * Enable DMA Request 3
     */
    inline void clear_ERQ_ERQ3() volatile
    {
        ERQ &= ~(1u << 3u);
    }

    /**
     * Toggle ERQ's ERQ3 bit.
     *
     * Enable DMA Request 3
     */
    inline void toggle_ERQ_ERQ3() volatile
    {
        ERQ ^= 1u << 3u;
    }

    /**
     * Get ERQ's ERQ2 bit.
     *
     * Enable DMA Request 2
     */
    inline bool get_ERQ_ERQ2() volatile
    {
        return ERQ & (1u << 2u);
    }

    /**
     * Set ERQ's ERQ2 bit.
     *
     * Enable DMA Request 2
     */
    inline void set_ERQ_ERQ2() volatile
    {
        ERQ |= 1u << 2u;
    }

    /**
     * Clear ERQ's ERQ2 bit.
     *
     * Enable DMA Request 2
     */
    inline void clear_ERQ_ERQ2() volatile
    {
        ERQ &= ~(1u << 2u);
    }

    /**
     * Toggle ERQ's ERQ2 bit.
     *
     * Enable DMA Request 2
     */
    inline void toggle_ERQ_ERQ2() volatile
    {
        ERQ ^= 1u << 2u;
    }

    /**
     * Get ERQ's ERQ1 bit.
     *
     * Enable DMA Request 1
     */
    inline bool get_ERQ_ERQ1() volatile
    {
        return ERQ & (1u << 1u);
    }

    /**
     * Set ERQ's ERQ1 bit.
     *
     * Enable DMA Request 1
     */
    inline void set_ERQ_ERQ1() volatile
    {
        ERQ |= 1u << 1u;
    }

    /**
     * Clear ERQ's ERQ1 bit.
     *
     * Enable DMA Request 1
     */
    inline void clear_ERQ_ERQ1() volatile
    {
        ERQ &= ~(1u << 1u);
    }

    /**
     * Toggle ERQ's ERQ1 bit.
     *
     * Enable DMA Request 1
     */
    inline void toggle_ERQ_ERQ1() volatile
    {
        ERQ ^= 1u << 1u;
    }

    /**
     * Get ERQ's ERQ0 bit.
     *
     * Enable DMA Request 0
     */
    inline bool get_ERQ_ERQ0() volatile
    {
        return ERQ & (1u << 0u);
    }

    /**
     * Set ERQ's ERQ0 bit.
     *
     * Enable DMA Request 0
     */
    inline void set_ERQ_ERQ0() volatile
    {
        ERQ |= 1u << 0u;
    }

    /**
     * Clear ERQ's ERQ0 bit.
     *
     * Enable DMA Request 0
     */
    inline void clear_ERQ_ERQ0() volatile
    {
        ERQ &= ~(1u << 0u);
    }

    /**
     * Toggle ERQ's ERQ0 bit.
     *
     * Enable DMA Request 0
     */
    inline void toggle_ERQ_ERQ0() volatile
    {
        ERQ ^= 1u << 0u;
    }

    /**
     * Get all of ERQ's bit fields.
     *
     * (read-write) Enable Request
     */
    inline void get_ERQ(bool &ERQ31, bool &ERQ30, bool &ERQ29, bool &ERQ28,
                        bool &ERQ27, bool &ERQ26, bool &ERQ25, bool &ERQ24,
                        bool &ERQ23, bool &ERQ22, bool &ERQ21, bool &ERQ20,
                        bool &ERQ19, bool &ERQ18, bool &ERQ17, bool &ERQ16,
                        bool &ERQ15, bool &ERQ14, bool &ERQ13, bool &ERQ12,
                        bool &ERQ11, bool &ERQ10, bool &ERQ9, bool &ERQ8,
                        bool &ERQ7, bool &ERQ6, bool &ERQ5, bool &ERQ4,
                        bool &ERQ3, bool &ERQ2, bool &ERQ1,
                        bool &ERQ0) volatile
    {
        uint32_t curr = ERQ;

        ERQ31 = curr & (1u << 31u);
        ERQ30 = curr & (1u << 30u);
        ERQ29 = curr & (1u << 29u);
        ERQ28 = curr & (1u << 28u);
        ERQ27 = curr & (1u << 27u);
        ERQ26 = curr & (1u << 26u);
        ERQ25 = curr & (1u << 25u);
        ERQ24 = curr & (1u << 24u);
        ERQ23 = curr & (1u << 23u);
        ERQ22 = curr & (1u << 22u);
        ERQ21 = curr & (1u << 21u);
        ERQ20 = curr & (1u << 20u);
        ERQ19 = curr & (1u << 19u);
        ERQ18 = curr & (1u << 18u);
        ERQ17 = curr & (1u << 17u);
        ERQ16 = curr & (1u << 16u);
        ERQ15 = curr & (1u << 15u);
        ERQ14 = curr & (1u << 14u);
        ERQ13 = curr & (1u << 13u);
        ERQ12 = curr & (1u << 12u);
        ERQ11 = curr & (1u << 11u);
        ERQ10 = curr & (1u << 10u);
        ERQ9 = curr & (1u << 9u);
        ERQ8 = curr & (1u << 8u);
        ERQ7 = curr & (1u << 7u);
        ERQ6 = curr & (1u << 6u);
        ERQ5 = curr & (1u << 5u);
        ERQ4 = curr & (1u << 4u);
        ERQ3 = curr & (1u << 3u);
        ERQ2 = curr & (1u << 2u);
        ERQ1 = curr & (1u << 1u);
        ERQ0 = curr & (1u << 0u);
    }

    /**
     * Set all of ERQ's bit fields.
     *
     * (read-write) Enable Request
     */
    inline void set_ERQ(bool ERQ31, bool ERQ30, bool ERQ29, bool ERQ28,
                        bool ERQ27, bool ERQ26, bool ERQ25, bool ERQ24,
                        bool ERQ23, bool ERQ22, bool ERQ21, bool ERQ20,
                        bool ERQ19, bool ERQ18, bool ERQ17, bool ERQ16,
                        bool ERQ15, bool ERQ14, bool ERQ13, bool ERQ12,
                        bool ERQ11, bool ERQ10, bool ERQ9, bool ERQ8,
                        bool ERQ7, bool ERQ6, bool ERQ5, bool ERQ4, bool ERQ3,
                        bool ERQ2, bool ERQ1, bool ERQ0) volatile
    {
        uint32_t curr = ERQ;

        curr &= ~(0b1u << 31u);
        curr |= (ERQ31 & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (ERQ30 & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (ERQ29 & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (ERQ28 & 0b1u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (ERQ27 & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (ERQ26 & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (ERQ25 & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (ERQ24 & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (ERQ23 & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (ERQ22 & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (ERQ21 & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (ERQ20 & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (ERQ19 & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (ERQ18 & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (ERQ17 & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (ERQ16 & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (ERQ15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (ERQ14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (ERQ13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (ERQ12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (ERQ11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (ERQ10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (ERQ9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (ERQ8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (ERQ7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (ERQ6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (ERQ5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ERQ4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (ERQ3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (ERQ2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (ERQ1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ERQ0 & 0b1u) << 0u;

        ERQ = curr;
    }

    /**
     * Get EEI's EEI31 bit.
     *
     * Enable Error Interrupt 31
     */
    inline bool get_EEI_EEI31() volatile
    {
        return EEI & (1u << 31u);
    }

    /**
     * Set EEI's EEI31 bit.
     *
     * Enable Error Interrupt 31
     */
    inline void set_EEI_EEI31() volatile
    {
        EEI |= 1u << 31u;
    }

    /**
     * Clear EEI's EEI31 bit.
     *
     * Enable Error Interrupt 31
     */
    inline void clear_EEI_EEI31() volatile
    {
        EEI &= ~(1u << 31u);
    }

    /**
     * Toggle EEI's EEI31 bit.
     *
     * Enable Error Interrupt 31
     */
    inline void toggle_EEI_EEI31() volatile
    {
        EEI ^= 1u << 31u;
    }

    /**
     * Get EEI's EEI30 bit.
     *
     * Enable Error Interrupt 30
     */
    inline bool get_EEI_EEI30() volatile
    {
        return EEI & (1u << 30u);
    }

    /**
     * Set EEI's EEI30 bit.
     *
     * Enable Error Interrupt 30
     */
    inline void set_EEI_EEI30() volatile
    {
        EEI |= 1u << 30u;
    }

    /**
     * Clear EEI's EEI30 bit.
     *
     * Enable Error Interrupt 30
     */
    inline void clear_EEI_EEI30() volatile
    {
        EEI &= ~(1u << 30u);
    }

    /**
     * Toggle EEI's EEI30 bit.
     *
     * Enable Error Interrupt 30
     */
    inline void toggle_EEI_EEI30() volatile
    {
        EEI ^= 1u << 30u;
    }

    /**
     * Get EEI's EEI29 bit.
     *
     * Enable Error Interrupt 29
     */
    inline bool get_EEI_EEI29() volatile
    {
        return EEI & (1u << 29u);
    }

    /**
     * Set EEI's EEI29 bit.
     *
     * Enable Error Interrupt 29
     */
    inline void set_EEI_EEI29() volatile
    {
        EEI |= 1u << 29u;
    }

    /**
     * Clear EEI's EEI29 bit.
     *
     * Enable Error Interrupt 29
     */
    inline void clear_EEI_EEI29() volatile
    {
        EEI &= ~(1u << 29u);
    }

    /**
     * Toggle EEI's EEI29 bit.
     *
     * Enable Error Interrupt 29
     */
    inline void toggle_EEI_EEI29() volatile
    {
        EEI ^= 1u << 29u;
    }

    /**
     * Get EEI's EEI28 bit.
     *
     * Enable Error Interrupt 28
     */
    inline bool get_EEI_EEI28() volatile
    {
        return EEI & (1u << 28u);
    }

    /**
     * Set EEI's EEI28 bit.
     *
     * Enable Error Interrupt 28
     */
    inline void set_EEI_EEI28() volatile
    {
        EEI |= 1u << 28u;
    }

    /**
     * Clear EEI's EEI28 bit.
     *
     * Enable Error Interrupt 28
     */
    inline void clear_EEI_EEI28() volatile
    {
        EEI &= ~(1u << 28u);
    }

    /**
     * Toggle EEI's EEI28 bit.
     *
     * Enable Error Interrupt 28
     */
    inline void toggle_EEI_EEI28() volatile
    {
        EEI ^= 1u << 28u;
    }

    /**
     * Get EEI's EEI27 bit.
     *
     * Enable Error Interrupt 27
     */
    inline bool get_EEI_EEI27() volatile
    {
        return EEI & (1u << 27u);
    }

    /**
     * Set EEI's EEI27 bit.
     *
     * Enable Error Interrupt 27
     */
    inline void set_EEI_EEI27() volatile
    {
        EEI |= 1u << 27u;
    }

    /**
     * Clear EEI's EEI27 bit.
     *
     * Enable Error Interrupt 27
     */
    inline void clear_EEI_EEI27() volatile
    {
        EEI &= ~(1u << 27u);
    }

    /**
     * Toggle EEI's EEI27 bit.
     *
     * Enable Error Interrupt 27
     */
    inline void toggle_EEI_EEI27() volatile
    {
        EEI ^= 1u << 27u;
    }

    /**
     * Get EEI's EEI26 bit.
     *
     * Enable Error Interrupt 26
     */
    inline bool get_EEI_EEI26() volatile
    {
        return EEI & (1u << 26u);
    }

    /**
     * Set EEI's EEI26 bit.
     *
     * Enable Error Interrupt 26
     */
    inline void set_EEI_EEI26() volatile
    {
        EEI |= 1u << 26u;
    }

    /**
     * Clear EEI's EEI26 bit.
     *
     * Enable Error Interrupt 26
     */
    inline void clear_EEI_EEI26() volatile
    {
        EEI &= ~(1u << 26u);
    }

    /**
     * Toggle EEI's EEI26 bit.
     *
     * Enable Error Interrupt 26
     */
    inline void toggle_EEI_EEI26() volatile
    {
        EEI ^= 1u << 26u;
    }

    /**
     * Get EEI's EEI25 bit.
     *
     * Enable Error Interrupt 25
     */
    inline bool get_EEI_EEI25() volatile
    {
        return EEI & (1u << 25u);
    }

    /**
     * Set EEI's EEI25 bit.
     *
     * Enable Error Interrupt 25
     */
    inline void set_EEI_EEI25() volatile
    {
        EEI |= 1u << 25u;
    }

    /**
     * Clear EEI's EEI25 bit.
     *
     * Enable Error Interrupt 25
     */
    inline void clear_EEI_EEI25() volatile
    {
        EEI &= ~(1u << 25u);
    }

    /**
     * Toggle EEI's EEI25 bit.
     *
     * Enable Error Interrupt 25
     */
    inline void toggle_EEI_EEI25() volatile
    {
        EEI ^= 1u << 25u;
    }

    /**
     * Get EEI's EEI24 bit.
     *
     * Enable Error Interrupt 24
     */
    inline bool get_EEI_EEI24() volatile
    {
        return EEI & (1u << 24u);
    }

    /**
     * Set EEI's EEI24 bit.
     *
     * Enable Error Interrupt 24
     */
    inline void set_EEI_EEI24() volatile
    {
        EEI |= 1u << 24u;
    }

    /**
     * Clear EEI's EEI24 bit.
     *
     * Enable Error Interrupt 24
     */
    inline void clear_EEI_EEI24() volatile
    {
        EEI &= ~(1u << 24u);
    }

    /**
     * Toggle EEI's EEI24 bit.
     *
     * Enable Error Interrupt 24
     */
    inline void toggle_EEI_EEI24() volatile
    {
        EEI ^= 1u << 24u;
    }

    /**
     * Get EEI's EEI23 bit.
     *
     * Enable Error Interrupt 23
     */
    inline bool get_EEI_EEI23() volatile
    {
        return EEI & (1u << 23u);
    }

    /**
     * Set EEI's EEI23 bit.
     *
     * Enable Error Interrupt 23
     */
    inline void set_EEI_EEI23() volatile
    {
        EEI |= 1u << 23u;
    }

    /**
     * Clear EEI's EEI23 bit.
     *
     * Enable Error Interrupt 23
     */
    inline void clear_EEI_EEI23() volatile
    {
        EEI &= ~(1u << 23u);
    }

    /**
     * Toggle EEI's EEI23 bit.
     *
     * Enable Error Interrupt 23
     */
    inline void toggle_EEI_EEI23() volatile
    {
        EEI ^= 1u << 23u;
    }

    /**
     * Get EEI's EEI22 bit.
     *
     * Enable Error Interrupt 22
     */
    inline bool get_EEI_EEI22() volatile
    {
        return EEI & (1u << 22u);
    }

    /**
     * Set EEI's EEI22 bit.
     *
     * Enable Error Interrupt 22
     */
    inline void set_EEI_EEI22() volatile
    {
        EEI |= 1u << 22u;
    }

    /**
     * Clear EEI's EEI22 bit.
     *
     * Enable Error Interrupt 22
     */
    inline void clear_EEI_EEI22() volatile
    {
        EEI &= ~(1u << 22u);
    }

    /**
     * Toggle EEI's EEI22 bit.
     *
     * Enable Error Interrupt 22
     */
    inline void toggle_EEI_EEI22() volatile
    {
        EEI ^= 1u << 22u;
    }

    /**
     * Get EEI's EEI21 bit.
     *
     * Enable Error Interrupt 21
     */
    inline bool get_EEI_EEI21() volatile
    {
        return EEI & (1u << 21u);
    }

    /**
     * Set EEI's EEI21 bit.
     *
     * Enable Error Interrupt 21
     */
    inline void set_EEI_EEI21() volatile
    {
        EEI |= 1u << 21u;
    }

    /**
     * Clear EEI's EEI21 bit.
     *
     * Enable Error Interrupt 21
     */
    inline void clear_EEI_EEI21() volatile
    {
        EEI &= ~(1u << 21u);
    }

    /**
     * Toggle EEI's EEI21 bit.
     *
     * Enable Error Interrupt 21
     */
    inline void toggle_EEI_EEI21() volatile
    {
        EEI ^= 1u << 21u;
    }

    /**
     * Get EEI's EEI20 bit.
     *
     * Enable Error Interrupt 20
     */
    inline bool get_EEI_EEI20() volatile
    {
        return EEI & (1u << 20u);
    }

    /**
     * Set EEI's EEI20 bit.
     *
     * Enable Error Interrupt 20
     */
    inline void set_EEI_EEI20() volatile
    {
        EEI |= 1u << 20u;
    }

    /**
     * Clear EEI's EEI20 bit.
     *
     * Enable Error Interrupt 20
     */
    inline void clear_EEI_EEI20() volatile
    {
        EEI &= ~(1u << 20u);
    }

    /**
     * Toggle EEI's EEI20 bit.
     *
     * Enable Error Interrupt 20
     */
    inline void toggle_EEI_EEI20() volatile
    {
        EEI ^= 1u << 20u;
    }

    /**
     * Get EEI's EEI19 bit.
     *
     * Enable Error Interrupt 19
     */
    inline bool get_EEI_EEI19() volatile
    {
        return EEI & (1u << 19u);
    }

    /**
     * Set EEI's EEI19 bit.
     *
     * Enable Error Interrupt 19
     */
    inline void set_EEI_EEI19() volatile
    {
        EEI |= 1u << 19u;
    }

    /**
     * Clear EEI's EEI19 bit.
     *
     * Enable Error Interrupt 19
     */
    inline void clear_EEI_EEI19() volatile
    {
        EEI &= ~(1u << 19u);
    }

    /**
     * Toggle EEI's EEI19 bit.
     *
     * Enable Error Interrupt 19
     */
    inline void toggle_EEI_EEI19() volatile
    {
        EEI ^= 1u << 19u;
    }

    /**
     * Get EEI's EEI18 bit.
     *
     * Enable Error Interrupt 18
     */
    inline bool get_EEI_EEI18() volatile
    {
        return EEI & (1u << 18u);
    }

    /**
     * Set EEI's EEI18 bit.
     *
     * Enable Error Interrupt 18
     */
    inline void set_EEI_EEI18() volatile
    {
        EEI |= 1u << 18u;
    }

    /**
     * Clear EEI's EEI18 bit.
     *
     * Enable Error Interrupt 18
     */
    inline void clear_EEI_EEI18() volatile
    {
        EEI &= ~(1u << 18u);
    }

    /**
     * Toggle EEI's EEI18 bit.
     *
     * Enable Error Interrupt 18
     */
    inline void toggle_EEI_EEI18() volatile
    {
        EEI ^= 1u << 18u;
    }

    /**
     * Get EEI's EEI17 bit.
     *
     * Enable Error Interrupt 17
     */
    inline bool get_EEI_EEI17() volatile
    {
        return EEI & (1u << 17u);
    }

    /**
     * Set EEI's EEI17 bit.
     *
     * Enable Error Interrupt 17
     */
    inline void set_EEI_EEI17() volatile
    {
        EEI |= 1u << 17u;
    }

    /**
     * Clear EEI's EEI17 bit.
     *
     * Enable Error Interrupt 17
     */
    inline void clear_EEI_EEI17() volatile
    {
        EEI &= ~(1u << 17u);
    }

    /**
     * Toggle EEI's EEI17 bit.
     *
     * Enable Error Interrupt 17
     */
    inline void toggle_EEI_EEI17() volatile
    {
        EEI ^= 1u << 17u;
    }

    /**
     * Get EEI's EEI16 bit.
     *
     * Enable Error Interrupt 16
     */
    inline bool get_EEI_EEI16() volatile
    {
        return EEI & (1u << 16u);
    }

    /**
     * Set EEI's EEI16 bit.
     *
     * Enable Error Interrupt 16
     */
    inline void set_EEI_EEI16() volatile
    {
        EEI |= 1u << 16u;
    }

    /**
     * Clear EEI's EEI16 bit.
     *
     * Enable Error Interrupt 16
     */
    inline void clear_EEI_EEI16() volatile
    {
        EEI &= ~(1u << 16u);
    }

    /**
     * Toggle EEI's EEI16 bit.
     *
     * Enable Error Interrupt 16
     */
    inline void toggle_EEI_EEI16() volatile
    {
        EEI ^= 1u << 16u;
    }

    /**
     * Get EEI's EEI15 bit.
     *
     * Enable Error Interrupt 15
     */
    inline bool get_EEI_EEI15() volatile
    {
        return EEI & (1u << 15u);
    }

    /**
     * Set EEI's EEI15 bit.
     *
     * Enable Error Interrupt 15
     */
    inline void set_EEI_EEI15() volatile
    {
        EEI |= 1u << 15u;
    }

    /**
     * Clear EEI's EEI15 bit.
     *
     * Enable Error Interrupt 15
     */
    inline void clear_EEI_EEI15() volatile
    {
        EEI &= ~(1u << 15u);
    }

    /**
     * Toggle EEI's EEI15 bit.
     *
     * Enable Error Interrupt 15
     */
    inline void toggle_EEI_EEI15() volatile
    {
        EEI ^= 1u << 15u;
    }

    /**
     * Get EEI's EEI14 bit.
     *
     * Enable Error Interrupt 14
     */
    inline bool get_EEI_EEI14() volatile
    {
        return EEI & (1u << 14u);
    }

    /**
     * Set EEI's EEI14 bit.
     *
     * Enable Error Interrupt 14
     */
    inline void set_EEI_EEI14() volatile
    {
        EEI |= 1u << 14u;
    }

    /**
     * Clear EEI's EEI14 bit.
     *
     * Enable Error Interrupt 14
     */
    inline void clear_EEI_EEI14() volatile
    {
        EEI &= ~(1u << 14u);
    }

    /**
     * Toggle EEI's EEI14 bit.
     *
     * Enable Error Interrupt 14
     */
    inline void toggle_EEI_EEI14() volatile
    {
        EEI ^= 1u << 14u;
    }

    /**
     * Get EEI's EEI13 bit.
     *
     * Enable Error Interrupt 13
     */
    inline bool get_EEI_EEI13() volatile
    {
        return EEI & (1u << 13u);
    }

    /**
     * Set EEI's EEI13 bit.
     *
     * Enable Error Interrupt 13
     */
    inline void set_EEI_EEI13() volatile
    {
        EEI |= 1u << 13u;
    }

    /**
     * Clear EEI's EEI13 bit.
     *
     * Enable Error Interrupt 13
     */
    inline void clear_EEI_EEI13() volatile
    {
        EEI &= ~(1u << 13u);
    }

    /**
     * Toggle EEI's EEI13 bit.
     *
     * Enable Error Interrupt 13
     */
    inline void toggle_EEI_EEI13() volatile
    {
        EEI ^= 1u << 13u;
    }

    /**
     * Get EEI's EEI12 bit.
     *
     * Enable Error Interrupt 12
     */
    inline bool get_EEI_EEI12() volatile
    {
        return EEI & (1u << 12u);
    }

    /**
     * Set EEI's EEI12 bit.
     *
     * Enable Error Interrupt 12
     */
    inline void set_EEI_EEI12() volatile
    {
        EEI |= 1u << 12u;
    }

    /**
     * Clear EEI's EEI12 bit.
     *
     * Enable Error Interrupt 12
     */
    inline void clear_EEI_EEI12() volatile
    {
        EEI &= ~(1u << 12u);
    }

    /**
     * Toggle EEI's EEI12 bit.
     *
     * Enable Error Interrupt 12
     */
    inline void toggle_EEI_EEI12() volatile
    {
        EEI ^= 1u << 12u;
    }

    /**
     * Get EEI's EEI11 bit.
     *
     * Enable Error Interrupt 11
     */
    inline bool get_EEI_EEI11() volatile
    {
        return EEI & (1u << 11u);
    }

    /**
     * Set EEI's EEI11 bit.
     *
     * Enable Error Interrupt 11
     */
    inline void set_EEI_EEI11() volatile
    {
        EEI |= 1u << 11u;
    }

    /**
     * Clear EEI's EEI11 bit.
     *
     * Enable Error Interrupt 11
     */
    inline void clear_EEI_EEI11() volatile
    {
        EEI &= ~(1u << 11u);
    }

    /**
     * Toggle EEI's EEI11 bit.
     *
     * Enable Error Interrupt 11
     */
    inline void toggle_EEI_EEI11() volatile
    {
        EEI ^= 1u << 11u;
    }

    /**
     * Get EEI's EEI10 bit.
     *
     * Enable Error Interrupt 10
     */
    inline bool get_EEI_EEI10() volatile
    {
        return EEI & (1u << 10u);
    }

    /**
     * Set EEI's EEI10 bit.
     *
     * Enable Error Interrupt 10
     */
    inline void set_EEI_EEI10() volatile
    {
        EEI |= 1u << 10u;
    }

    /**
     * Clear EEI's EEI10 bit.
     *
     * Enable Error Interrupt 10
     */
    inline void clear_EEI_EEI10() volatile
    {
        EEI &= ~(1u << 10u);
    }

    /**
     * Toggle EEI's EEI10 bit.
     *
     * Enable Error Interrupt 10
     */
    inline void toggle_EEI_EEI10() volatile
    {
        EEI ^= 1u << 10u;
    }

    /**
     * Get EEI's EEI9 bit.
     *
     * Enable Error Interrupt 9
     */
    inline bool get_EEI_EEI9() volatile
    {
        return EEI & (1u << 9u);
    }

    /**
     * Set EEI's EEI9 bit.
     *
     * Enable Error Interrupt 9
     */
    inline void set_EEI_EEI9() volatile
    {
        EEI |= 1u << 9u;
    }

    /**
     * Clear EEI's EEI9 bit.
     *
     * Enable Error Interrupt 9
     */
    inline void clear_EEI_EEI9() volatile
    {
        EEI &= ~(1u << 9u);
    }

    /**
     * Toggle EEI's EEI9 bit.
     *
     * Enable Error Interrupt 9
     */
    inline void toggle_EEI_EEI9() volatile
    {
        EEI ^= 1u << 9u;
    }

    /**
     * Get EEI's EEI8 bit.
     *
     * Enable Error Interrupt 8
     */
    inline bool get_EEI_EEI8() volatile
    {
        return EEI & (1u << 8u);
    }

    /**
     * Set EEI's EEI8 bit.
     *
     * Enable Error Interrupt 8
     */
    inline void set_EEI_EEI8() volatile
    {
        EEI |= 1u << 8u;
    }

    /**
     * Clear EEI's EEI8 bit.
     *
     * Enable Error Interrupt 8
     */
    inline void clear_EEI_EEI8() volatile
    {
        EEI &= ~(1u << 8u);
    }

    /**
     * Toggle EEI's EEI8 bit.
     *
     * Enable Error Interrupt 8
     */
    inline void toggle_EEI_EEI8() volatile
    {
        EEI ^= 1u << 8u;
    }

    /**
     * Get EEI's EEI7 bit.
     *
     * Enable Error Interrupt 7
     */
    inline bool get_EEI_EEI7() volatile
    {
        return EEI & (1u << 7u);
    }

    /**
     * Set EEI's EEI7 bit.
     *
     * Enable Error Interrupt 7
     */
    inline void set_EEI_EEI7() volatile
    {
        EEI |= 1u << 7u;
    }

    /**
     * Clear EEI's EEI7 bit.
     *
     * Enable Error Interrupt 7
     */
    inline void clear_EEI_EEI7() volatile
    {
        EEI &= ~(1u << 7u);
    }

    /**
     * Toggle EEI's EEI7 bit.
     *
     * Enable Error Interrupt 7
     */
    inline void toggle_EEI_EEI7() volatile
    {
        EEI ^= 1u << 7u;
    }

    /**
     * Get EEI's EEI6 bit.
     *
     * Enable Error Interrupt 6
     */
    inline bool get_EEI_EEI6() volatile
    {
        return EEI & (1u << 6u);
    }

    /**
     * Set EEI's EEI6 bit.
     *
     * Enable Error Interrupt 6
     */
    inline void set_EEI_EEI6() volatile
    {
        EEI |= 1u << 6u;
    }

    /**
     * Clear EEI's EEI6 bit.
     *
     * Enable Error Interrupt 6
     */
    inline void clear_EEI_EEI6() volatile
    {
        EEI &= ~(1u << 6u);
    }

    /**
     * Toggle EEI's EEI6 bit.
     *
     * Enable Error Interrupt 6
     */
    inline void toggle_EEI_EEI6() volatile
    {
        EEI ^= 1u << 6u;
    }

    /**
     * Get EEI's EEI5 bit.
     *
     * Enable Error Interrupt 5
     */
    inline bool get_EEI_EEI5() volatile
    {
        return EEI & (1u << 5u);
    }

    /**
     * Set EEI's EEI5 bit.
     *
     * Enable Error Interrupt 5
     */
    inline void set_EEI_EEI5() volatile
    {
        EEI |= 1u << 5u;
    }

    /**
     * Clear EEI's EEI5 bit.
     *
     * Enable Error Interrupt 5
     */
    inline void clear_EEI_EEI5() volatile
    {
        EEI &= ~(1u << 5u);
    }

    /**
     * Toggle EEI's EEI5 bit.
     *
     * Enable Error Interrupt 5
     */
    inline void toggle_EEI_EEI5() volatile
    {
        EEI ^= 1u << 5u;
    }

    /**
     * Get EEI's EEI4 bit.
     *
     * Enable Error Interrupt 4
     */
    inline bool get_EEI_EEI4() volatile
    {
        return EEI & (1u << 4u);
    }

    /**
     * Set EEI's EEI4 bit.
     *
     * Enable Error Interrupt 4
     */
    inline void set_EEI_EEI4() volatile
    {
        EEI |= 1u << 4u;
    }

    /**
     * Clear EEI's EEI4 bit.
     *
     * Enable Error Interrupt 4
     */
    inline void clear_EEI_EEI4() volatile
    {
        EEI &= ~(1u << 4u);
    }

    /**
     * Toggle EEI's EEI4 bit.
     *
     * Enable Error Interrupt 4
     */
    inline void toggle_EEI_EEI4() volatile
    {
        EEI ^= 1u << 4u;
    }

    /**
     * Get EEI's EEI3 bit.
     *
     * Enable Error Interrupt 3
     */
    inline bool get_EEI_EEI3() volatile
    {
        return EEI & (1u << 3u);
    }

    /**
     * Set EEI's EEI3 bit.
     *
     * Enable Error Interrupt 3
     */
    inline void set_EEI_EEI3() volatile
    {
        EEI |= 1u << 3u;
    }

    /**
     * Clear EEI's EEI3 bit.
     *
     * Enable Error Interrupt 3
     */
    inline void clear_EEI_EEI3() volatile
    {
        EEI &= ~(1u << 3u);
    }

    /**
     * Toggle EEI's EEI3 bit.
     *
     * Enable Error Interrupt 3
     */
    inline void toggle_EEI_EEI3() volatile
    {
        EEI ^= 1u << 3u;
    }

    /**
     * Get EEI's EEI2 bit.
     *
     * Enable Error Interrupt 2
     */
    inline bool get_EEI_EEI2() volatile
    {
        return EEI & (1u << 2u);
    }

    /**
     * Set EEI's EEI2 bit.
     *
     * Enable Error Interrupt 2
     */
    inline void set_EEI_EEI2() volatile
    {
        EEI |= 1u << 2u;
    }

    /**
     * Clear EEI's EEI2 bit.
     *
     * Enable Error Interrupt 2
     */
    inline void clear_EEI_EEI2() volatile
    {
        EEI &= ~(1u << 2u);
    }

    /**
     * Toggle EEI's EEI2 bit.
     *
     * Enable Error Interrupt 2
     */
    inline void toggle_EEI_EEI2() volatile
    {
        EEI ^= 1u << 2u;
    }

    /**
     * Get EEI's EEI1 bit.
     *
     * Enable Error Interrupt 1
     */
    inline bool get_EEI_EEI1() volatile
    {
        return EEI & (1u << 1u);
    }

    /**
     * Set EEI's EEI1 bit.
     *
     * Enable Error Interrupt 1
     */
    inline void set_EEI_EEI1() volatile
    {
        EEI |= 1u << 1u;
    }

    /**
     * Clear EEI's EEI1 bit.
     *
     * Enable Error Interrupt 1
     */
    inline void clear_EEI_EEI1() volatile
    {
        EEI &= ~(1u << 1u);
    }

    /**
     * Toggle EEI's EEI1 bit.
     *
     * Enable Error Interrupt 1
     */
    inline void toggle_EEI_EEI1() volatile
    {
        EEI ^= 1u << 1u;
    }

    /**
     * Get EEI's EEI0 bit.
     *
     * Enable Error Interrupt 0
     */
    inline bool get_EEI_EEI0() volatile
    {
        return EEI & (1u << 0u);
    }

    /**
     * Set EEI's EEI0 bit.
     *
     * Enable Error Interrupt 0
     */
    inline void set_EEI_EEI0() volatile
    {
        EEI |= 1u << 0u;
    }

    /**
     * Clear EEI's EEI0 bit.
     *
     * Enable Error Interrupt 0
     */
    inline void clear_EEI_EEI0() volatile
    {
        EEI &= ~(1u << 0u);
    }

    /**
     * Toggle EEI's EEI0 bit.
     *
     * Enable Error Interrupt 0
     */
    inline void toggle_EEI_EEI0() volatile
    {
        EEI ^= 1u << 0u;
    }

    /**
     * Get all of EEI's bit fields.
     *
     * (read-write) Enable Error Interrupt
     */
    inline void get_EEI(bool &EEI31, bool &EEI30, bool &EEI29, bool &EEI28,
                        bool &EEI27, bool &EEI26, bool &EEI25, bool &EEI24,
                        bool &EEI23, bool &EEI22, bool &EEI21, bool &EEI20,
                        bool &EEI19, bool &EEI18, bool &EEI17, bool &EEI16,
                        bool &EEI15, bool &EEI14, bool &EEI13, bool &EEI12,
                        bool &EEI11, bool &EEI10, bool &EEI9, bool &EEI8,
                        bool &EEI7, bool &EEI6, bool &EEI5, bool &EEI4,
                        bool &EEI3, bool &EEI2, bool &EEI1,
                        bool &EEI0) volatile
    {
        uint32_t curr = EEI;

        EEI31 = curr & (1u << 31u);
        EEI30 = curr & (1u << 30u);
        EEI29 = curr & (1u << 29u);
        EEI28 = curr & (1u << 28u);
        EEI27 = curr & (1u << 27u);
        EEI26 = curr & (1u << 26u);
        EEI25 = curr & (1u << 25u);
        EEI24 = curr & (1u << 24u);
        EEI23 = curr & (1u << 23u);
        EEI22 = curr & (1u << 22u);
        EEI21 = curr & (1u << 21u);
        EEI20 = curr & (1u << 20u);
        EEI19 = curr & (1u << 19u);
        EEI18 = curr & (1u << 18u);
        EEI17 = curr & (1u << 17u);
        EEI16 = curr & (1u << 16u);
        EEI15 = curr & (1u << 15u);
        EEI14 = curr & (1u << 14u);
        EEI13 = curr & (1u << 13u);
        EEI12 = curr & (1u << 12u);
        EEI11 = curr & (1u << 11u);
        EEI10 = curr & (1u << 10u);
        EEI9 = curr & (1u << 9u);
        EEI8 = curr & (1u << 8u);
        EEI7 = curr & (1u << 7u);
        EEI6 = curr & (1u << 6u);
        EEI5 = curr & (1u << 5u);
        EEI4 = curr & (1u << 4u);
        EEI3 = curr & (1u << 3u);
        EEI2 = curr & (1u << 2u);
        EEI1 = curr & (1u << 1u);
        EEI0 = curr & (1u << 0u);
    }

    /**
     * Set all of EEI's bit fields.
     *
     * (read-write) Enable Error Interrupt
     */
    inline void set_EEI(bool EEI31, bool EEI30, bool EEI29, bool EEI28,
                        bool EEI27, bool EEI26, bool EEI25, bool EEI24,
                        bool EEI23, bool EEI22, bool EEI21, bool EEI20,
                        bool EEI19, bool EEI18, bool EEI17, bool EEI16,
                        bool EEI15, bool EEI14, bool EEI13, bool EEI12,
                        bool EEI11, bool EEI10, bool EEI9, bool EEI8,
                        bool EEI7, bool EEI6, bool EEI5, bool EEI4, bool EEI3,
                        bool EEI2, bool EEI1, bool EEI0) volatile
    {
        uint32_t curr = EEI;

        curr &= ~(0b1u << 31u);
        curr |= (EEI31 & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (EEI30 & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (EEI29 & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (EEI28 & 0b1u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (EEI27 & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (EEI26 & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (EEI25 & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (EEI24 & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (EEI23 & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (EEI22 & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (EEI21 & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (EEI20 & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (EEI19 & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (EEI18 & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (EEI17 & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (EEI16 & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (EEI15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (EEI14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (EEI13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (EEI12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (EEI11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (EEI10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (EEI9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (EEI8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (EEI7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (EEI6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (EEI5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (EEI4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (EEI3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (EEI2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (EEI1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (EEI0 & 0b1u) << 0u;

        EEI = curr;
    }

    /**
     * Get CEEI's NOP bit.
     *
     * No Op Enable
     */
    inline bool get_CEEI_NOP() volatile
    {
        return CEEI & (1u << 7u);
    }

    /**
     * Set CEEI's NOP bit.
     *
     * No Op Enable
     */
    inline void set_CEEI_NOP() volatile
    {
        CEEI |= 1u << 7u;
    }

    /**
     * Clear CEEI's NOP bit.
     *
     * No Op Enable
     */
    inline void clear_CEEI_NOP() volatile
    {
        CEEI &= ~(1u << 7u);
    }

    /**
     * Toggle CEEI's NOP bit.
     *
     * No Op Enable
     */
    inline void toggle_CEEI_NOP() volatile
    {
        CEEI ^= 1u << 7u;
    }

    /**
     * Get CEEI's CAEE bit.
     *
     * Clear All Enable Error Interrupts
     */
    inline bool get_CEEI_CAEE() volatile
    {
        return CEEI & (1u << 6u);
    }

    /**
     * Set CEEI's CAEE bit.
     *
     * Clear All Enable Error Interrupts
     */
    inline void set_CEEI_CAEE() volatile
    {
        CEEI |= 1u << 6u;
    }

    /**
     * Clear CEEI's CAEE bit.
     *
     * Clear All Enable Error Interrupts
     */
    inline void clear_CEEI_CAEE() volatile
    {
        CEEI &= ~(1u << 6u);
    }

    /**
     * Toggle CEEI's CAEE bit.
     *
     * Clear All Enable Error Interrupts
     */
    inline void toggle_CEEI_CAEE() volatile
    {
        CEEI ^= 1u << 6u;
    }

    /**
     * Get CEEI's CEEI field.
     *
     * Clear Enable Error Interrupt
     */
    inline uint8_t get_CEEI_CEEI() volatile
    {
        return (CEEI >> 0u) & 0b11111u;
    }

    /**
     * Set CEEI's CEEI field.
     *
     * Clear Enable Error Interrupt
     */
    inline void set_CEEI_CEEI(uint8_t value) volatile
    {
        uint8_t curr = CEEI;

        curr &= ~(0b11111u << 0u);
        curr |= (value & 0b11111u) << 0u;

        CEEI = curr;
    }

    /**
     * Get all of CEEI's bit fields.
     *
     * (read-write) Clear Enable Error Interrupt
     */
    inline void get_CEEI(bool &NOP, bool &CAEE, uint8_t &CEEI) volatile
    {
        uint8_t curr = CEEI;

        NOP = curr & (1u << 7u);
        CAEE = curr & (1u << 6u);
        CEEI = (curr >> 0u) & 0b11111u;
    }

    /**
     * Set all of CEEI's bit fields.
     *
     * (read-write) Clear Enable Error Interrupt
     */
    inline void set_CEEI(bool NOP, bool CAEE, uint8_t CEEI) volatile
    {
        uint8_t curr = CEEI;

        curr &= ~(0b1u << 7u);
        curr |= (NOP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CAEE & 0b1u) << 6u;
        curr &= ~(0b11111u << 0u);
        curr |= (CEEI & 0b11111u) << 0u;

        CEEI = curr;
    }

    /**
     * Get SEEI's NOP bit.
     *
     * No Op Enable
     */
    inline bool get_SEEI_NOP() volatile
    {
        return SEEI & (1u << 7u);
    }

    /**
     * Set SEEI's NOP bit.
     *
     * No Op Enable
     */
    inline void set_SEEI_NOP() volatile
    {
        SEEI |= 1u << 7u;
    }

    /**
     * Clear SEEI's NOP bit.
     *
     * No Op Enable
     */
    inline void clear_SEEI_NOP() volatile
    {
        SEEI &= ~(1u << 7u);
    }

    /**
     * Toggle SEEI's NOP bit.
     *
     * No Op Enable
     */
    inline void toggle_SEEI_NOP() volatile
    {
        SEEI ^= 1u << 7u;
    }

    /**
     * Get SEEI's SAEE bit.
     *
     * Set All Enable Error Interrupts
     */
    inline bool get_SEEI_SAEE() volatile
    {
        return SEEI & (1u << 6u);
    }

    /**
     * Set SEEI's SAEE bit.
     *
     * Set All Enable Error Interrupts
     */
    inline void set_SEEI_SAEE() volatile
    {
        SEEI |= 1u << 6u;
    }

    /**
     * Clear SEEI's SAEE bit.
     *
     * Set All Enable Error Interrupts
     */
    inline void clear_SEEI_SAEE() volatile
    {
        SEEI &= ~(1u << 6u);
    }

    /**
     * Toggle SEEI's SAEE bit.
     *
     * Set All Enable Error Interrupts
     */
    inline void toggle_SEEI_SAEE() volatile
    {
        SEEI ^= 1u << 6u;
    }

    /**
     * Get SEEI's SEEI field.
     *
     * Set Enable Error Interrupt
     */
    inline uint8_t get_SEEI_SEEI() volatile
    {
        return (SEEI >> 0u) & 0b11111u;
    }

    /**
     * Set SEEI's SEEI field.
     *
     * Set Enable Error Interrupt
     */
    inline void set_SEEI_SEEI(uint8_t value) volatile
    {
        uint8_t curr = SEEI;

        curr &= ~(0b11111u << 0u);
        curr |= (value & 0b11111u) << 0u;

        SEEI = curr;
    }

    /**
     * Get all of SEEI's bit fields.
     *
     * (read-write) Set Enable Error Interrupt
     */
    inline void get_SEEI(bool &NOP, bool &SAEE, uint8_t &SEEI) volatile
    {
        uint8_t curr = SEEI;

        NOP = curr & (1u << 7u);
        SAEE = curr & (1u << 6u);
        SEEI = (curr >> 0u) & 0b11111u;
    }

    /**
     * Set all of SEEI's bit fields.
     *
     * (read-write) Set Enable Error Interrupt
     */
    inline void set_SEEI(bool NOP, bool SAEE, uint8_t SEEI) volatile
    {
        uint8_t curr = SEEI;

        curr &= ~(0b1u << 7u);
        curr |= (NOP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (SAEE & 0b1u) << 6u;
        curr &= ~(0b11111u << 0u);
        curr |= (SEEI & 0b11111u) << 0u;

        SEEI = curr;
    }

    /**
     * Get CERQ's NOP bit.
     *
     * No Op Enable
     */
    inline bool get_CERQ_NOP() volatile
    {
        return CERQ & (1u << 7u);
    }

    /**
     * Set CERQ's NOP bit.
     *
     * No Op Enable
     */
    inline void set_CERQ_NOP() volatile
    {
        CERQ |= 1u << 7u;
    }

    /**
     * Clear CERQ's NOP bit.
     *
     * No Op Enable
     */
    inline void clear_CERQ_NOP() volatile
    {
        CERQ &= ~(1u << 7u);
    }

    /**
     * Toggle CERQ's NOP bit.
     *
     * No Op Enable
     */
    inline void toggle_CERQ_NOP() volatile
    {
        CERQ ^= 1u << 7u;
    }

    /**
     * Get CERQ's CAER bit.
     *
     * Clear All Enable Requests
     */
    inline bool get_CERQ_CAER() volatile
    {
        return CERQ & (1u << 6u);
    }

    /**
     * Set CERQ's CAER bit.
     *
     * Clear All Enable Requests
     */
    inline void set_CERQ_CAER() volatile
    {
        CERQ |= 1u << 6u;
    }

    /**
     * Clear CERQ's CAER bit.
     *
     * Clear All Enable Requests
     */
    inline void clear_CERQ_CAER() volatile
    {
        CERQ &= ~(1u << 6u);
    }

    /**
     * Toggle CERQ's CAER bit.
     *
     * Clear All Enable Requests
     */
    inline void toggle_CERQ_CAER() volatile
    {
        CERQ ^= 1u << 6u;
    }

    /**
     * Get CERQ's CERQ field.
     *
     * Clear Enable Request
     */
    inline uint8_t get_CERQ_CERQ() volatile
    {
        return (CERQ >> 0u) & 0b11111u;
    }

    /**
     * Set CERQ's CERQ field.
     *
     * Clear Enable Request
     */
    inline void set_CERQ_CERQ(uint8_t value) volatile
    {
        uint8_t curr = CERQ;

        curr &= ~(0b11111u << 0u);
        curr |= (value & 0b11111u) << 0u;

        CERQ = curr;
    }

    /**
     * Get all of CERQ's bit fields.
     *
     * (read-write) Clear Enable Request
     */
    inline void get_CERQ(bool &NOP, bool &CAER, uint8_t &CERQ) volatile
    {
        uint8_t curr = CERQ;

        NOP = curr & (1u << 7u);
        CAER = curr & (1u << 6u);
        CERQ = (curr >> 0u) & 0b11111u;
    }

    /**
     * Set all of CERQ's bit fields.
     *
     * (read-write) Clear Enable Request
     */
    inline void set_CERQ(bool NOP, bool CAER, uint8_t CERQ) volatile
    {
        uint8_t curr = CERQ;

        curr &= ~(0b1u << 7u);
        curr |= (NOP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CAER & 0b1u) << 6u;
        curr &= ~(0b11111u << 0u);
        curr |= (CERQ & 0b11111u) << 0u;

        CERQ = curr;
    }

    /**
     * Get SERQ's NOP bit.
     *
     * No Op Enable
     */
    inline bool get_SERQ_NOP() volatile
    {
        return SERQ & (1u << 7u);
    }

    /**
     * Set SERQ's NOP bit.
     *
     * No Op Enable
     */
    inline void set_SERQ_NOP() volatile
    {
        SERQ |= 1u << 7u;
    }

    /**
     * Clear SERQ's NOP bit.
     *
     * No Op Enable
     */
    inline void clear_SERQ_NOP() volatile
    {
        SERQ &= ~(1u << 7u);
    }

    /**
     * Toggle SERQ's NOP bit.
     *
     * No Op Enable
     */
    inline void toggle_SERQ_NOP() volatile
    {
        SERQ ^= 1u << 7u;
    }

    /**
     * Get SERQ's SAER bit.
     *
     * Set All Enable Requests
     */
    inline bool get_SERQ_SAER() volatile
    {
        return SERQ & (1u << 6u);
    }

    /**
     * Set SERQ's SAER bit.
     *
     * Set All Enable Requests
     */
    inline void set_SERQ_SAER() volatile
    {
        SERQ |= 1u << 6u;
    }

    /**
     * Clear SERQ's SAER bit.
     *
     * Set All Enable Requests
     */
    inline void clear_SERQ_SAER() volatile
    {
        SERQ &= ~(1u << 6u);
    }

    /**
     * Toggle SERQ's SAER bit.
     *
     * Set All Enable Requests
     */
    inline void toggle_SERQ_SAER() volatile
    {
        SERQ ^= 1u << 6u;
    }

    /**
     * Get SERQ's SERQ field.
     *
     * Set Enable Request
     */
    inline uint8_t get_SERQ_SERQ() volatile
    {
        return (SERQ >> 0u) & 0b11111u;
    }

    /**
     * Set SERQ's SERQ field.
     *
     * Set Enable Request
     */
    inline void set_SERQ_SERQ(uint8_t value) volatile
    {
        uint8_t curr = SERQ;

        curr &= ~(0b11111u << 0u);
        curr |= (value & 0b11111u) << 0u;

        SERQ = curr;
    }

    /**
     * Get all of SERQ's bit fields.
     *
     * (read-write) Set Enable Request
     */
    inline void get_SERQ(bool &NOP, bool &SAER, uint8_t &SERQ) volatile
    {
        uint8_t curr = SERQ;

        NOP = curr & (1u << 7u);
        SAER = curr & (1u << 6u);
        SERQ = (curr >> 0u) & 0b11111u;
    }

    /**
     * Set all of SERQ's bit fields.
     *
     * (read-write) Set Enable Request
     */
    inline void set_SERQ(bool NOP, bool SAER, uint8_t SERQ) volatile
    {
        uint8_t curr = SERQ;

        curr &= ~(0b1u << 7u);
        curr |= (NOP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (SAER & 0b1u) << 6u;
        curr &= ~(0b11111u << 0u);
        curr |= (SERQ & 0b11111u) << 0u;

        SERQ = curr;
    }

    /**
     * Get CDNE's NOP bit.
     *
     * No Op Enable
     */
    inline bool get_CDNE_NOP() volatile
    {
        return CDNE & (1u << 7u);
    }

    /**
     * Set CDNE's NOP bit.
     *
     * No Op Enable
     */
    inline void set_CDNE_NOP() volatile
    {
        CDNE |= 1u << 7u;
    }

    /**
     * Clear CDNE's NOP bit.
     *
     * No Op Enable
     */
    inline void clear_CDNE_NOP() volatile
    {
        CDNE &= ~(1u << 7u);
    }

    /**
     * Toggle CDNE's NOP bit.
     *
     * No Op Enable
     */
    inline void toggle_CDNE_NOP() volatile
    {
        CDNE ^= 1u << 7u;
    }

    /**
     * Get CDNE's CADN bit.
     *
     * Clears All DONE fields
     */
    inline bool get_CDNE_CADN() volatile
    {
        return CDNE & (1u << 6u);
    }

    /**
     * Set CDNE's CADN bit.
     *
     * Clears All DONE fields
     */
    inline void set_CDNE_CADN() volatile
    {
        CDNE |= 1u << 6u;
    }

    /**
     * Clear CDNE's CADN bit.
     *
     * Clears All DONE fields
     */
    inline void clear_CDNE_CADN() volatile
    {
        CDNE &= ~(1u << 6u);
    }

    /**
     * Toggle CDNE's CADN bit.
     *
     * Clears All DONE fields
     */
    inline void toggle_CDNE_CADN() volatile
    {
        CDNE ^= 1u << 6u;
    }

    /**
     * Get CDNE's CDNE field.
     *
     * Clear DONE field
     */
    inline uint8_t get_CDNE_CDNE() volatile
    {
        return (CDNE >> 0u) & 0b11111u;
    }

    /**
     * Set CDNE's CDNE field.
     *
     * Clear DONE field
     */
    inline void set_CDNE_CDNE(uint8_t value) volatile
    {
        uint8_t curr = CDNE;

        curr &= ~(0b11111u << 0u);
        curr |= (value & 0b11111u) << 0u;

        CDNE = curr;
    }

    /**
     * Get all of CDNE's bit fields.
     *
     * (read-write) Clear DONE Status Bit
     */
    inline void get_CDNE(bool &NOP, bool &CADN, uint8_t &CDNE) volatile
    {
        uint8_t curr = CDNE;

        NOP = curr & (1u << 7u);
        CADN = curr & (1u << 6u);
        CDNE = (curr >> 0u) & 0b11111u;
    }

    /**
     * Set all of CDNE's bit fields.
     *
     * (read-write) Clear DONE Status Bit
     */
    inline void set_CDNE(bool NOP, bool CADN, uint8_t CDNE) volatile
    {
        uint8_t curr = CDNE;

        curr &= ~(0b1u << 7u);
        curr |= (NOP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CADN & 0b1u) << 6u;
        curr &= ~(0b11111u << 0u);
        curr |= (CDNE & 0b11111u) << 0u;

        CDNE = curr;
    }

    /**
     * Get SSRT's NOP bit.
     *
     * No Op Enable
     */
    inline bool get_SSRT_NOP() volatile
    {
        return SSRT & (1u << 7u);
    }

    /**
     * Set SSRT's NOP bit.
     *
     * No Op Enable
     */
    inline void set_SSRT_NOP() volatile
    {
        SSRT |= 1u << 7u;
    }

    /**
     * Clear SSRT's NOP bit.
     *
     * No Op Enable
     */
    inline void clear_SSRT_NOP() volatile
    {
        SSRT &= ~(1u << 7u);
    }

    /**
     * Toggle SSRT's NOP bit.
     *
     * No Op Enable
     */
    inline void toggle_SSRT_NOP() volatile
    {
        SSRT ^= 1u << 7u;
    }

    /**
     * Get SSRT's SAST bit.
     *
     * Set All START fields (activates all channels)
     */
    inline bool get_SSRT_SAST() volatile
    {
        return SSRT & (1u << 6u);
    }

    /**
     * Set SSRT's SAST bit.
     *
     * Set All START fields (activates all channels)
     */
    inline void set_SSRT_SAST() volatile
    {
        SSRT |= 1u << 6u;
    }

    /**
     * Clear SSRT's SAST bit.
     *
     * Set All START fields (activates all channels)
     */
    inline void clear_SSRT_SAST() volatile
    {
        SSRT &= ~(1u << 6u);
    }

    /**
     * Toggle SSRT's SAST bit.
     *
     * Set All START fields (activates all channels)
     */
    inline void toggle_SSRT_SAST() volatile
    {
        SSRT ^= 1u << 6u;
    }

    /**
     * Get SSRT's SSRT field.
     *
     * Set START field
     */
    inline uint8_t get_SSRT_SSRT() volatile
    {
        return (SSRT >> 0u) & 0b11111u;
    }

    /**
     * Set SSRT's SSRT field.
     *
     * Set START field
     */
    inline void set_SSRT_SSRT(uint8_t value) volatile
    {
        uint8_t curr = SSRT;

        curr &= ~(0b11111u << 0u);
        curr |= (value & 0b11111u) << 0u;

        SSRT = curr;
    }

    /**
     * Get all of SSRT's bit fields.
     *
     * (read-write) Set START Bit
     */
    inline void get_SSRT(bool &NOP, bool &SAST, uint8_t &SSRT) volatile
    {
        uint8_t curr = SSRT;

        NOP = curr & (1u << 7u);
        SAST = curr & (1u << 6u);
        SSRT = (curr >> 0u) & 0b11111u;
    }

    /**
     * Set all of SSRT's bit fields.
     *
     * (read-write) Set START Bit
     */
    inline void set_SSRT(bool NOP, bool SAST, uint8_t SSRT) volatile
    {
        uint8_t curr = SSRT;

        curr &= ~(0b1u << 7u);
        curr |= (NOP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (SAST & 0b1u) << 6u;
        curr &= ~(0b11111u << 0u);
        curr |= (SSRT & 0b11111u) << 0u;

        SSRT = curr;
    }

    /**
     * Get CERR's NOP bit.
     *
     * No Op Enable
     */
    inline bool get_CERR_NOP() volatile
    {
        return CERR & (1u << 7u);
    }

    /**
     * Set CERR's NOP bit.
     *
     * No Op Enable
     */
    inline void set_CERR_NOP() volatile
    {
        CERR |= 1u << 7u;
    }

    /**
     * Clear CERR's NOP bit.
     *
     * No Op Enable
     */
    inline void clear_CERR_NOP() volatile
    {
        CERR &= ~(1u << 7u);
    }

    /**
     * Toggle CERR's NOP bit.
     *
     * No Op Enable
     */
    inline void toggle_CERR_NOP() volatile
    {
        CERR ^= 1u << 7u;
    }

    /**
     * Get CERR's CAEI bit.
     *
     * Clear All Error Indicators
     */
    inline bool get_CERR_CAEI() volatile
    {
        return CERR & (1u << 6u);
    }

    /**
     * Set CERR's CAEI bit.
     *
     * Clear All Error Indicators
     */
    inline void set_CERR_CAEI() volatile
    {
        CERR |= 1u << 6u;
    }

    /**
     * Clear CERR's CAEI bit.
     *
     * Clear All Error Indicators
     */
    inline void clear_CERR_CAEI() volatile
    {
        CERR &= ~(1u << 6u);
    }

    /**
     * Toggle CERR's CAEI bit.
     *
     * Clear All Error Indicators
     */
    inline void toggle_CERR_CAEI() volatile
    {
        CERR ^= 1u << 6u;
    }

    /**
     * Get CERR's CERR field.
     *
     * Clear Error Indicator
     */
    inline uint8_t get_CERR_CERR() volatile
    {
        return (CERR >> 0u) & 0b11111u;
    }

    /**
     * Set CERR's CERR field.
     *
     * Clear Error Indicator
     */
    inline void set_CERR_CERR(uint8_t value) volatile
    {
        uint8_t curr = CERR;

        curr &= ~(0b11111u << 0u);
        curr |= (value & 0b11111u) << 0u;

        CERR = curr;
    }

    /**
     * Get all of CERR's bit fields.
     *
     * (read-write) Clear Error
     */
    inline void get_CERR(bool &NOP, bool &CAEI, uint8_t &CERR) volatile
    {
        uint8_t curr = CERR;

        NOP = curr & (1u << 7u);
        CAEI = curr & (1u << 6u);
        CERR = (curr >> 0u) & 0b11111u;
    }

    /**
     * Set all of CERR's bit fields.
     *
     * (read-write) Clear Error
     */
    inline void set_CERR(bool NOP, bool CAEI, uint8_t CERR) volatile
    {
        uint8_t curr = CERR;

        curr &= ~(0b1u << 7u);
        curr |= (NOP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CAEI & 0b1u) << 6u;
        curr &= ~(0b11111u << 0u);
        curr |= (CERR & 0b11111u) << 0u;

        CERR = curr;
    }

    /**
     * Get CINT's NOP bit.
     *
     * No Op Enable
     */
    inline bool get_CINT_NOP() volatile
    {
        return CINT & (1u << 7u);
    }

    /**
     * Set CINT's NOP bit.
     *
     * No Op Enable
     */
    inline void set_CINT_NOP() volatile
    {
        CINT |= 1u << 7u;
    }

    /**
     * Clear CINT's NOP bit.
     *
     * No Op Enable
     */
    inline void clear_CINT_NOP() volatile
    {
        CINT &= ~(1u << 7u);
    }

    /**
     * Toggle CINT's NOP bit.
     *
     * No Op Enable
     */
    inline void toggle_CINT_NOP() volatile
    {
        CINT ^= 1u << 7u;
    }

    /**
     * Get CINT's CAIR bit.
     *
     * Clear All Interrupt Requests
     */
    inline bool get_CINT_CAIR() volatile
    {
        return CINT & (1u << 6u);
    }

    /**
     * Set CINT's CAIR bit.
     *
     * Clear All Interrupt Requests
     */
    inline void set_CINT_CAIR() volatile
    {
        CINT |= 1u << 6u;
    }

    /**
     * Clear CINT's CAIR bit.
     *
     * Clear All Interrupt Requests
     */
    inline void clear_CINT_CAIR() volatile
    {
        CINT &= ~(1u << 6u);
    }

    /**
     * Toggle CINT's CAIR bit.
     *
     * Clear All Interrupt Requests
     */
    inline void toggle_CINT_CAIR() volatile
    {
        CINT ^= 1u << 6u;
    }

    /**
     * Get CINT's CINT field.
     *
     * Clear Interrupt Request
     */
    inline uint8_t get_CINT_CINT() volatile
    {
        return (CINT >> 0u) & 0b11111u;
    }

    /**
     * Set CINT's CINT field.
     *
     * Clear Interrupt Request
     */
    inline void set_CINT_CINT(uint8_t value) volatile
    {
        uint8_t curr = CINT;

        curr &= ~(0b11111u << 0u);
        curr |= (value & 0b11111u) << 0u;

        CINT = curr;
    }

    /**
     * Get all of CINT's bit fields.
     *
     * (read-write) Clear Interrupt Request
     */
    inline void get_CINT(bool &NOP, bool &CAIR, uint8_t &CINT) volatile
    {
        uint8_t curr = CINT;

        NOP = curr & (1u << 7u);
        CAIR = curr & (1u << 6u);
        CINT = (curr >> 0u) & 0b11111u;
    }

    /**
     * Set all of CINT's bit fields.
     *
     * (read-write) Clear Interrupt Request
     */
    inline void set_CINT(bool NOP, bool CAIR, uint8_t CINT) volatile
    {
        uint8_t curr = CINT;

        curr &= ~(0b1u << 7u);
        curr |= (NOP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CAIR & 0b1u) << 6u;
        curr &= ~(0b11111u << 0u);
        curr |= (CINT & 0b11111u) << 0u;

        CINT = curr;
    }

    /**
     * Get INT's INT31 bit.
     *
     * Interrupt Request 31
     */
    inline bool get_INT_INT31() volatile
    {
        return INT & (1u << 31u);
    }

    /**
     * Set INT's INT31 bit.
     *
     * Interrupt Request 31
     */
    inline void set_INT_INT31() volatile
    {
        INT |= 1u << 31u;
    }

    /**
     * Clear INT's INT31 bit.
     *
     * Interrupt Request 31
     */
    inline void clear_INT_INT31() volatile
    {
        INT &= ~(1u << 31u);
    }

    /**
     * Toggle INT's INT31 bit.
     *
     * Interrupt Request 31
     */
    inline void toggle_INT_INT31() volatile
    {
        INT ^= 1u << 31u;
    }

    /**
     * Get INT's INT30 bit.
     *
     * Interrupt Request 30
     */
    inline bool get_INT_INT30() volatile
    {
        return INT & (1u << 30u);
    }

    /**
     * Set INT's INT30 bit.
     *
     * Interrupt Request 30
     */
    inline void set_INT_INT30() volatile
    {
        INT |= 1u << 30u;
    }

    /**
     * Clear INT's INT30 bit.
     *
     * Interrupt Request 30
     */
    inline void clear_INT_INT30() volatile
    {
        INT &= ~(1u << 30u);
    }

    /**
     * Toggle INT's INT30 bit.
     *
     * Interrupt Request 30
     */
    inline void toggle_INT_INT30() volatile
    {
        INT ^= 1u << 30u;
    }

    /**
     * Get INT's INT29 bit.
     *
     * Interrupt Request 29
     */
    inline bool get_INT_INT29() volatile
    {
        return INT & (1u << 29u);
    }

    /**
     * Set INT's INT29 bit.
     *
     * Interrupt Request 29
     */
    inline void set_INT_INT29() volatile
    {
        INT |= 1u << 29u;
    }

    /**
     * Clear INT's INT29 bit.
     *
     * Interrupt Request 29
     */
    inline void clear_INT_INT29() volatile
    {
        INT &= ~(1u << 29u);
    }

    /**
     * Toggle INT's INT29 bit.
     *
     * Interrupt Request 29
     */
    inline void toggle_INT_INT29() volatile
    {
        INT ^= 1u << 29u;
    }

    /**
     * Get INT's INT28 bit.
     *
     * Interrupt Request 28
     */
    inline bool get_INT_INT28() volatile
    {
        return INT & (1u << 28u);
    }

    /**
     * Set INT's INT28 bit.
     *
     * Interrupt Request 28
     */
    inline void set_INT_INT28() volatile
    {
        INT |= 1u << 28u;
    }

    /**
     * Clear INT's INT28 bit.
     *
     * Interrupt Request 28
     */
    inline void clear_INT_INT28() volatile
    {
        INT &= ~(1u << 28u);
    }

    /**
     * Toggle INT's INT28 bit.
     *
     * Interrupt Request 28
     */
    inline void toggle_INT_INT28() volatile
    {
        INT ^= 1u << 28u;
    }

    /**
     * Get INT's INT27 bit.
     *
     * Interrupt Request 27
     */
    inline bool get_INT_INT27() volatile
    {
        return INT & (1u << 27u);
    }

    /**
     * Set INT's INT27 bit.
     *
     * Interrupt Request 27
     */
    inline void set_INT_INT27() volatile
    {
        INT |= 1u << 27u;
    }

    /**
     * Clear INT's INT27 bit.
     *
     * Interrupt Request 27
     */
    inline void clear_INT_INT27() volatile
    {
        INT &= ~(1u << 27u);
    }

    /**
     * Toggle INT's INT27 bit.
     *
     * Interrupt Request 27
     */
    inline void toggle_INT_INT27() volatile
    {
        INT ^= 1u << 27u;
    }

    /**
     * Get INT's INT26 bit.
     *
     * Interrupt Request 26
     */
    inline bool get_INT_INT26() volatile
    {
        return INT & (1u << 26u);
    }

    /**
     * Set INT's INT26 bit.
     *
     * Interrupt Request 26
     */
    inline void set_INT_INT26() volatile
    {
        INT |= 1u << 26u;
    }

    /**
     * Clear INT's INT26 bit.
     *
     * Interrupt Request 26
     */
    inline void clear_INT_INT26() volatile
    {
        INT &= ~(1u << 26u);
    }

    /**
     * Toggle INT's INT26 bit.
     *
     * Interrupt Request 26
     */
    inline void toggle_INT_INT26() volatile
    {
        INT ^= 1u << 26u;
    }

    /**
     * Get INT's INT25 bit.
     *
     * Interrupt Request 25
     */
    inline bool get_INT_INT25() volatile
    {
        return INT & (1u << 25u);
    }

    /**
     * Set INT's INT25 bit.
     *
     * Interrupt Request 25
     */
    inline void set_INT_INT25() volatile
    {
        INT |= 1u << 25u;
    }

    /**
     * Clear INT's INT25 bit.
     *
     * Interrupt Request 25
     */
    inline void clear_INT_INT25() volatile
    {
        INT &= ~(1u << 25u);
    }

    /**
     * Toggle INT's INT25 bit.
     *
     * Interrupt Request 25
     */
    inline void toggle_INT_INT25() volatile
    {
        INT ^= 1u << 25u;
    }

    /**
     * Get INT's INT24 bit.
     *
     * Interrupt Request 24
     */
    inline bool get_INT_INT24() volatile
    {
        return INT & (1u << 24u);
    }

    /**
     * Set INT's INT24 bit.
     *
     * Interrupt Request 24
     */
    inline void set_INT_INT24() volatile
    {
        INT |= 1u << 24u;
    }

    /**
     * Clear INT's INT24 bit.
     *
     * Interrupt Request 24
     */
    inline void clear_INT_INT24() volatile
    {
        INT &= ~(1u << 24u);
    }

    /**
     * Toggle INT's INT24 bit.
     *
     * Interrupt Request 24
     */
    inline void toggle_INT_INT24() volatile
    {
        INT ^= 1u << 24u;
    }

    /**
     * Get INT's INT23 bit.
     *
     * Interrupt Request 23
     */
    inline bool get_INT_INT23() volatile
    {
        return INT & (1u << 23u);
    }

    /**
     * Set INT's INT23 bit.
     *
     * Interrupt Request 23
     */
    inline void set_INT_INT23() volatile
    {
        INT |= 1u << 23u;
    }

    /**
     * Clear INT's INT23 bit.
     *
     * Interrupt Request 23
     */
    inline void clear_INT_INT23() volatile
    {
        INT &= ~(1u << 23u);
    }

    /**
     * Toggle INT's INT23 bit.
     *
     * Interrupt Request 23
     */
    inline void toggle_INT_INT23() volatile
    {
        INT ^= 1u << 23u;
    }

    /**
     * Get INT's INT22 bit.
     *
     * Interrupt Request 22
     */
    inline bool get_INT_INT22() volatile
    {
        return INT & (1u << 22u);
    }

    /**
     * Set INT's INT22 bit.
     *
     * Interrupt Request 22
     */
    inline void set_INT_INT22() volatile
    {
        INT |= 1u << 22u;
    }

    /**
     * Clear INT's INT22 bit.
     *
     * Interrupt Request 22
     */
    inline void clear_INT_INT22() volatile
    {
        INT &= ~(1u << 22u);
    }

    /**
     * Toggle INT's INT22 bit.
     *
     * Interrupt Request 22
     */
    inline void toggle_INT_INT22() volatile
    {
        INT ^= 1u << 22u;
    }

    /**
     * Get INT's INT21 bit.
     *
     * Interrupt Request 21
     */
    inline bool get_INT_INT21() volatile
    {
        return INT & (1u << 21u);
    }

    /**
     * Set INT's INT21 bit.
     *
     * Interrupt Request 21
     */
    inline void set_INT_INT21() volatile
    {
        INT |= 1u << 21u;
    }

    /**
     * Clear INT's INT21 bit.
     *
     * Interrupt Request 21
     */
    inline void clear_INT_INT21() volatile
    {
        INT &= ~(1u << 21u);
    }

    /**
     * Toggle INT's INT21 bit.
     *
     * Interrupt Request 21
     */
    inline void toggle_INT_INT21() volatile
    {
        INT ^= 1u << 21u;
    }

    /**
     * Get INT's INT20 bit.
     *
     * Interrupt Request 20
     */
    inline bool get_INT_INT20() volatile
    {
        return INT & (1u << 20u);
    }

    /**
     * Set INT's INT20 bit.
     *
     * Interrupt Request 20
     */
    inline void set_INT_INT20() volatile
    {
        INT |= 1u << 20u;
    }

    /**
     * Clear INT's INT20 bit.
     *
     * Interrupt Request 20
     */
    inline void clear_INT_INT20() volatile
    {
        INT &= ~(1u << 20u);
    }

    /**
     * Toggle INT's INT20 bit.
     *
     * Interrupt Request 20
     */
    inline void toggle_INT_INT20() volatile
    {
        INT ^= 1u << 20u;
    }

    /**
     * Get INT's INT19 bit.
     *
     * Interrupt Request 19
     */
    inline bool get_INT_INT19() volatile
    {
        return INT & (1u << 19u);
    }

    /**
     * Set INT's INT19 bit.
     *
     * Interrupt Request 19
     */
    inline void set_INT_INT19() volatile
    {
        INT |= 1u << 19u;
    }

    /**
     * Clear INT's INT19 bit.
     *
     * Interrupt Request 19
     */
    inline void clear_INT_INT19() volatile
    {
        INT &= ~(1u << 19u);
    }

    /**
     * Toggle INT's INT19 bit.
     *
     * Interrupt Request 19
     */
    inline void toggle_INT_INT19() volatile
    {
        INT ^= 1u << 19u;
    }

    /**
     * Get INT's INT18 bit.
     *
     * Interrupt Request 18
     */
    inline bool get_INT_INT18() volatile
    {
        return INT & (1u << 18u);
    }

    /**
     * Set INT's INT18 bit.
     *
     * Interrupt Request 18
     */
    inline void set_INT_INT18() volatile
    {
        INT |= 1u << 18u;
    }

    /**
     * Clear INT's INT18 bit.
     *
     * Interrupt Request 18
     */
    inline void clear_INT_INT18() volatile
    {
        INT &= ~(1u << 18u);
    }

    /**
     * Toggle INT's INT18 bit.
     *
     * Interrupt Request 18
     */
    inline void toggle_INT_INT18() volatile
    {
        INT ^= 1u << 18u;
    }

    /**
     * Get INT's INT17 bit.
     *
     * Interrupt Request 17
     */
    inline bool get_INT_INT17() volatile
    {
        return INT & (1u << 17u);
    }

    /**
     * Set INT's INT17 bit.
     *
     * Interrupt Request 17
     */
    inline void set_INT_INT17() volatile
    {
        INT |= 1u << 17u;
    }

    /**
     * Clear INT's INT17 bit.
     *
     * Interrupt Request 17
     */
    inline void clear_INT_INT17() volatile
    {
        INT &= ~(1u << 17u);
    }

    /**
     * Toggle INT's INT17 bit.
     *
     * Interrupt Request 17
     */
    inline void toggle_INT_INT17() volatile
    {
        INT ^= 1u << 17u;
    }

    /**
     * Get INT's INT16 bit.
     *
     * Interrupt Request 16
     */
    inline bool get_INT_INT16() volatile
    {
        return INT & (1u << 16u);
    }

    /**
     * Set INT's INT16 bit.
     *
     * Interrupt Request 16
     */
    inline void set_INT_INT16() volatile
    {
        INT |= 1u << 16u;
    }

    /**
     * Clear INT's INT16 bit.
     *
     * Interrupt Request 16
     */
    inline void clear_INT_INT16() volatile
    {
        INT &= ~(1u << 16u);
    }

    /**
     * Toggle INT's INT16 bit.
     *
     * Interrupt Request 16
     */
    inline void toggle_INT_INT16() volatile
    {
        INT ^= 1u << 16u;
    }

    /**
     * Get INT's INT15 bit.
     *
     * Interrupt Request 15
     */
    inline bool get_INT_INT15() volatile
    {
        return INT & (1u << 15u);
    }

    /**
     * Set INT's INT15 bit.
     *
     * Interrupt Request 15
     */
    inline void set_INT_INT15() volatile
    {
        INT |= 1u << 15u;
    }

    /**
     * Clear INT's INT15 bit.
     *
     * Interrupt Request 15
     */
    inline void clear_INT_INT15() volatile
    {
        INT &= ~(1u << 15u);
    }

    /**
     * Toggle INT's INT15 bit.
     *
     * Interrupt Request 15
     */
    inline void toggle_INT_INT15() volatile
    {
        INT ^= 1u << 15u;
    }

    /**
     * Get INT's INT14 bit.
     *
     * Interrupt Request 14
     */
    inline bool get_INT_INT14() volatile
    {
        return INT & (1u << 14u);
    }

    /**
     * Set INT's INT14 bit.
     *
     * Interrupt Request 14
     */
    inline void set_INT_INT14() volatile
    {
        INT |= 1u << 14u;
    }

    /**
     * Clear INT's INT14 bit.
     *
     * Interrupt Request 14
     */
    inline void clear_INT_INT14() volatile
    {
        INT &= ~(1u << 14u);
    }

    /**
     * Toggle INT's INT14 bit.
     *
     * Interrupt Request 14
     */
    inline void toggle_INT_INT14() volatile
    {
        INT ^= 1u << 14u;
    }

    /**
     * Get INT's INT13 bit.
     *
     * Interrupt Request 13
     */
    inline bool get_INT_INT13() volatile
    {
        return INT & (1u << 13u);
    }

    /**
     * Set INT's INT13 bit.
     *
     * Interrupt Request 13
     */
    inline void set_INT_INT13() volatile
    {
        INT |= 1u << 13u;
    }

    /**
     * Clear INT's INT13 bit.
     *
     * Interrupt Request 13
     */
    inline void clear_INT_INT13() volatile
    {
        INT &= ~(1u << 13u);
    }

    /**
     * Toggle INT's INT13 bit.
     *
     * Interrupt Request 13
     */
    inline void toggle_INT_INT13() volatile
    {
        INT ^= 1u << 13u;
    }

    /**
     * Get INT's INT12 bit.
     *
     * Interrupt Request 12
     */
    inline bool get_INT_INT12() volatile
    {
        return INT & (1u << 12u);
    }

    /**
     * Set INT's INT12 bit.
     *
     * Interrupt Request 12
     */
    inline void set_INT_INT12() volatile
    {
        INT |= 1u << 12u;
    }

    /**
     * Clear INT's INT12 bit.
     *
     * Interrupt Request 12
     */
    inline void clear_INT_INT12() volatile
    {
        INT &= ~(1u << 12u);
    }

    /**
     * Toggle INT's INT12 bit.
     *
     * Interrupt Request 12
     */
    inline void toggle_INT_INT12() volatile
    {
        INT ^= 1u << 12u;
    }

    /**
     * Get INT's INT11 bit.
     *
     * Interrupt Request 11
     */
    inline bool get_INT_INT11() volatile
    {
        return INT & (1u << 11u);
    }

    /**
     * Set INT's INT11 bit.
     *
     * Interrupt Request 11
     */
    inline void set_INT_INT11() volatile
    {
        INT |= 1u << 11u;
    }

    /**
     * Clear INT's INT11 bit.
     *
     * Interrupt Request 11
     */
    inline void clear_INT_INT11() volatile
    {
        INT &= ~(1u << 11u);
    }

    /**
     * Toggle INT's INT11 bit.
     *
     * Interrupt Request 11
     */
    inline void toggle_INT_INT11() volatile
    {
        INT ^= 1u << 11u;
    }

    /**
     * Get INT's INT10 bit.
     *
     * Interrupt Request 10
     */
    inline bool get_INT_INT10() volatile
    {
        return INT & (1u << 10u);
    }

    /**
     * Set INT's INT10 bit.
     *
     * Interrupt Request 10
     */
    inline void set_INT_INT10() volatile
    {
        INT |= 1u << 10u;
    }

    /**
     * Clear INT's INT10 bit.
     *
     * Interrupt Request 10
     */
    inline void clear_INT_INT10() volatile
    {
        INT &= ~(1u << 10u);
    }

    /**
     * Toggle INT's INT10 bit.
     *
     * Interrupt Request 10
     */
    inline void toggle_INT_INT10() volatile
    {
        INT ^= 1u << 10u;
    }

    /**
     * Get INT's INT9 bit.
     *
     * Interrupt Request 9
     */
    inline bool get_INT_INT9() volatile
    {
        return INT & (1u << 9u);
    }

    /**
     * Set INT's INT9 bit.
     *
     * Interrupt Request 9
     */
    inline void set_INT_INT9() volatile
    {
        INT |= 1u << 9u;
    }

    /**
     * Clear INT's INT9 bit.
     *
     * Interrupt Request 9
     */
    inline void clear_INT_INT9() volatile
    {
        INT &= ~(1u << 9u);
    }

    /**
     * Toggle INT's INT9 bit.
     *
     * Interrupt Request 9
     */
    inline void toggle_INT_INT9() volatile
    {
        INT ^= 1u << 9u;
    }

    /**
     * Get INT's INT8 bit.
     *
     * Interrupt Request 8
     */
    inline bool get_INT_INT8() volatile
    {
        return INT & (1u << 8u);
    }

    /**
     * Set INT's INT8 bit.
     *
     * Interrupt Request 8
     */
    inline void set_INT_INT8() volatile
    {
        INT |= 1u << 8u;
    }

    /**
     * Clear INT's INT8 bit.
     *
     * Interrupt Request 8
     */
    inline void clear_INT_INT8() volatile
    {
        INT &= ~(1u << 8u);
    }

    /**
     * Toggle INT's INT8 bit.
     *
     * Interrupt Request 8
     */
    inline void toggle_INT_INT8() volatile
    {
        INT ^= 1u << 8u;
    }

    /**
     * Get INT's INT7 bit.
     *
     * Interrupt Request 7
     */
    inline bool get_INT_INT7() volatile
    {
        return INT & (1u << 7u);
    }

    /**
     * Set INT's INT7 bit.
     *
     * Interrupt Request 7
     */
    inline void set_INT_INT7() volatile
    {
        INT |= 1u << 7u;
    }

    /**
     * Clear INT's INT7 bit.
     *
     * Interrupt Request 7
     */
    inline void clear_INT_INT7() volatile
    {
        INT &= ~(1u << 7u);
    }

    /**
     * Toggle INT's INT7 bit.
     *
     * Interrupt Request 7
     */
    inline void toggle_INT_INT7() volatile
    {
        INT ^= 1u << 7u;
    }

    /**
     * Get INT's INT6 bit.
     *
     * Interrupt Request 6
     */
    inline bool get_INT_INT6() volatile
    {
        return INT & (1u << 6u);
    }

    /**
     * Set INT's INT6 bit.
     *
     * Interrupt Request 6
     */
    inline void set_INT_INT6() volatile
    {
        INT |= 1u << 6u;
    }

    /**
     * Clear INT's INT6 bit.
     *
     * Interrupt Request 6
     */
    inline void clear_INT_INT6() volatile
    {
        INT &= ~(1u << 6u);
    }

    /**
     * Toggle INT's INT6 bit.
     *
     * Interrupt Request 6
     */
    inline void toggle_INT_INT6() volatile
    {
        INT ^= 1u << 6u;
    }

    /**
     * Get INT's INT5 bit.
     *
     * Interrupt Request 5
     */
    inline bool get_INT_INT5() volatile
    {
        return INT & (1u << 5u);
    }

    /**
     * Set INT's INT5 bit.
     *
     * Interrupt Request 5
     */
    inline void set_INT_INT5() volatile
    {
        INT |= 1u << 5u;
    }

    /**
     * Clear INT's INT5 bit.
     *
     * Interrupt Request 5
     */
    inline void clear_INT_INT5() volatile
    {
        INT &= ~(1u << 5u);
    }

    /**
     * Toggle INT's INT5 bit.
     *
     * Interrupt Request 5
     */
    inline void toggle_INT_INT5() volatile
    {
        INT ^= 1u << 5u;
    }

    /**
     * Get INT's INT4 bit.
     *
     * Interrupt Request 4
     */
    inline bool get_INT_INT4() volatile
    {
        return INT & (1u << 4u);
    }

    /**
     * Set INT's INT4 bit.
     *
     * Interrupt Request 4
     */
    inline void set_INT_INT4() volatile
    {
        INT |= 1u << 4u;
    }

    /**
     * Clear INT's INT4 bit.
     *
     * Interrupt Request 4
     */
    inline void clear_INT_INT4() volatile
    {
        INT &= ~(1u << 4u);
    }

    /**
     * Toggle INT's INT4 bit.
     *
     * Interrupt Request 4
     */
    inline void toggle_INT_INT4() volatile
    {
        INT ^= 1u << 4u;
    }

    /**
     * Get INT's INT3 bit.
     *
     * Interrupt Request 3
     */
    inline bool get_INT_INT3() volatile
    {
        return INT & (1u << 3u);
    }

    /**
     * Set INT's INT3 bit.
     *
     * Interrupt Request 3
     */
    inline void set_INT_INT3() volatile
    {
        INT |= 1u << 3u;
    }

    /**
     * Clear INT's INT3 bit.
     *
     * Interrupt Request 3
     */
    inline void clear_INT_INT3() volatile
    {
        INT &= ~(1u << 3u);
    }

    /**
     * Toggle INT's INT3 bit.
     *
     * Interrupt Request 3
     */
    inline void toggle_INT_INT3() volatile
    {
        INT ^= 1u << 3u;
    }

    /**
     * Get INT's INT2 bit.
     *
     * Interrupt Request 2
     */
    inline bool get_INT_INT2() volatile
    {
        return INT & (1u << 2u);
    }

    /**
     * Set INT's INT2 bit.
     *
     * Interrupt Request 2
     */
    inline void set_INT_INT2() volatile
    {
        INT |= 1u << 2u;
    }

    /**
     * Clear INT's INT2 bit.
     *
     * Interrupt Request 2
     */
    inline void clear_INT_INT2() volatile
    {
        INT &= ~(1u << 2u);
    }

    /**
     * Toggle INT's INT2 bit.
     *
     * Interrupt Request 2
     */
    inline void toggle_INT_INT2() volatile
    {
        INT ^= 1u << 2u;
    }

    /**
     * Get INT's INT1 bit.
     *
     * Interrupt Request 1
     */
    inline bool get_INT_INT1() volatile
    {
        return INT & (1u << 1u);
    }

    /**
     * Set INT's INT1 bit.
     *
     * Interrupt Request 1
     */
    inline void set_INT_INT1() volatile
    {
        INT |= 1u << 1u;
    }

    /**
     * Clear INT's INT1 bit.
     *
     * Interrupt Request 1
     */
    inline void clear_INT_INT1() volatile
    {
        INT &= ~(1u << 1u);
    }

    /**
     * Toggle INT's INT1 bit.
     *
     * Interrupt Request 1
     */
    inline void toggle_INT_INT1() volatile
    {
        INT ^= 1u << 1u;
    }

    /**
     * Get INT's INT0 bit.
     *
     * Interrupt Request 0
     */
    inline bool get_INT_INT0() volatile
    {
        return INT & (1u << 0u);
    }

    /**
     * Set INT's INT0 bit.
     *
     * Interrupt Request 0
     */
    inline void set_INT_INT0() volatile
    {
        INT |= 1u << 0u;
    }

    /**
     * Clear INT's INT0 bit.
     *
     * Interrupt Request 0
     */
    inline void clear_INT_INT0() volatile
    {
        INT &= ~(1u << 0u);
    }

    /**
     * Toggle INT's INT0 bit.
     *
     * Interrupt Request 0
     */
    inline void toggle_INT_INT0() volatile
    {
        INT ^= 1u << 0u;
    }

    /**
     * Get all of INT's bit fields.
     *
     * (read-write) Interrupt Request
     */
    inline void get_INT(bool &INT31, bool &INT30, bool &INT29, bool &INT28,
                        bool &INT27, bool &INT26, bool &INT25, bool &INT24,
                        bool &INT23, bool &INT22, bool &INT21, bool &INT20,
                        bool &INT19, bool &INT18, bool &INT17, bool &INT16,
                        bool &INT15, bool &INT14, bool &INT13, bool &INT12,
                        bool &INT11, bool &INT10, bool &INT9, bool &INT8,
                        bool &INT7, bool &INT6, bool &INT5, bool &INT4,
                        bool &INT3, bool &INT2, bool &INT1,
                        bool &INT0) volatile
    {
        uint32_t curr = INT;

        INT31 = curr & (1u << 31u);
        INT30 = curr & (1u << 30u);
        INT29 = curr & (1u << 29u);
        INT28 = curr & (1u << 28u);
        INT27 = curr & (1u << 27u);
        INT26 = curr & (1u << 26u);
        INT25 = curr & (1u << 25u);
        INT24 = curr & (1u << 24u);
        INT23 = curr & (1u << 23u);
        INT22 = curr & (1u << 22u);
        INT21 = curr & (1u << 21u);
        INT20 = curr & (1u << 20u);
        INT19 = curr & (1u << 19u);
        INT18 = curr & (1u << 18u);
        INT17 = curr & (1u << 17u);
        INT16 = curr & (1u << 16u);
        INT15 = curr & (1u << 15u);
        INT14 = curr & (1u << 14u);
        INT13 = curr & (1u << 13u);
        INT12 = curr & (1u << 12u);
        INT11 = curr & (1u << 11u);
        INT10 = curr & (1u << 10u);
        INT9 = curr & (1u << 9u);
        INT8 = curr & (1u << 8u);
        INT7 = curr & (1u << 7u);
        INT6 = curr & (1u << 6u);
        INT5 = curr & (1u << 5u);
        INT4 = curr & (1u << 4u);
        INT3 = curr & (1u << 3u);
        INT2 = curr & (1u << 2u);
        INT1 = curr & (1u << 1u);
        INT0 = curr & (1u << 0u);
    }

    /**
     * Set all of INT's bit fields.
     *
     * (read-write) Interrupt Request
     */
    inline void set_INT(bool INT31, bool INT30, bool INT29, bool INT28,
                        bool INT27, bool INT26, bool INT25, bool INT24,
                        bool INT23, bool INT22, bool INT21, bool INT20,
                        bool INT19, bool INT18, bool INT17, bool INT16,
                        bool INT15, bool INT14, bool INT13, bool INT12,
                        bool INT11, bool INT10, bool INT9, bool INT8,
                        bool INT7, bool INT6, bool INT5, bool INT4, bool INT3,
                        bool INT2, bool INT1, bool INT0) volatile
    {
        uint32_t curr = INT;

        curr &= ~(0b1u << 31u);
        curr |= (INT31 & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (INT30 & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (INT29 & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (INT28 & 0b1u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (INT27 & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (INT26 & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (INT25 & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (INT24 & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (INT23 & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (INT22 & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (INT21 & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (INT20 & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (INT19 & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (INT18 & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (INT17 & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (INT16 & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (INT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (INT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (INT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (INT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (INT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (INT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (INT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (INT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (INT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (INT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (INT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (INT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (INT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (INT0 & 0b1u) << 0u;

        INT = curr;
    }

    /**
     * Get ERR's ERR31 bit.
     *
     * Error In Channel 31
     */
    inline bool get_ERR_ERR31() volatile
    {
        return ERR & (1u << 31u);
    }

    /**
     * Set ERR's ERR31 bit.
     *
     * Error In Channel 31
     */
    inline void set_ERR_ERR31() volatile
    {
        ERR |= 1u << 31u;
    }

    /**
     * Clear ERR's ERR31 bit.
     *
     * Error In Channel 31
     */
    inline void clear_ERR_ERR31() volatile
    {
        ERR &= ~(1u << 31u);
    }

    /**
     * Toggle ERR's ERR31 bit.
     *
     * Error In Channel 31
     */
    inline void toggle_ERR_ERR31() volatile
    {
        ERR ^= 1u << 31u;
    }

    /**
     * Get ERR's ERR30 bit.
     *
     * Error In Channel 30
     */
    inline bool get_ERR_ERR30() volatile
    {
        return ERR & (1u << 30u);
    }

    /**
     * Set ERR's ERR30 bit.
     *
     * Error In Channel 30
     */
    inline void set_ERR_ERR30() volatile
    {
        ERR |= 1u << 30u;
    }

    /**
     * Clear ERR's ERR30 bit.
     *
     * Error In Channel 30
     */
    inline void clear_ERR_ERR30() volatile
    {
        ERR &= ~(1u << 30u);
    }

    /**
     * Toggle ERR's ERR30 bit.
     *
     * Error In Channel 30
     */
    inline void toggle_ERR_ERR30() volatile
    {
        ERR ^= 1u << 30u;
    }

    /**
     * Get ERR's ERR29 bit.
     *
     * Error In Channel 29
     */
    inline bool get_ERR_ERR29() volatile
    {
        return ERR & (1u << 29u);
    }

    /**
     * Set ERR's ERR29 bit.
     *
     * Error In Channel 29
     */
    inline void set_ERR_ERR29() volatile
    {
        ERR |= 1u << 29u;
    }

    /**
     * Clear ERR's ERR29 bit.
     *
     * Error In Channel 29
     */
    inline void clear_ERR_ERR29() volatile
    {
        ERR &= ~(1u << 29u);
    }

    /**
     * Toggle ERR's ERR29 bit.
     *
     * Error In Channel 29
     */
    inline void toggle_ERR_ERR29() volatile
    {
        ERR ^= 1u << 29u;
    }

    /**
     * Get ERR's ERR28 bit.
     *
     * Error In Channel 28
     */
    inline bool get_ERR_ERR28() volatile
    {
        return ERR & (1u << 28u);
    }

    /**
     * Set ERR's ERR28 bit.
     *
     * Error In Channel 28
     */
    inline void set_ERR_ERR28() volatile
    {
        ERR |= 1u << 28u;
    }

    /**
     * Clear ERR's ERR28 bit.
     *
     * Error In Channel 28
     */
    inline void clear_ERR_ERR28() volatile
    {
        ERR &= ~(1u << 28u);
    }

    /**
     * Toggle ERR's ERR28 bit.
     *
     * Error In Channel 28
     */
    inline void toggle_ERR_ERR28() volatile
    {
        ERR ^= 1u << 28u;
    }

    /**
     * Get ERR's ERR27 bit.
     *
     * Error In Channel 27
     */
    inline bool get_ERR_ERR27() volatile
    {
        return ERR & (1u << 27u);
    }

    /**
     * Set ERR's ERR27 bit.
     *
     * Error In Channel 27
     */
    inline void set_ERR_ERR27() volatile
    {
        ERR |= 1u << 27u;
    }

    /**
     * Clear ERR's ERR27 bit.
     *
     * Error In Channel 27
     */
    inline void clear_ERR_ERR27() volatile
    {
        ERR &= ~(1u << 27u);
    }

    /**
     * Toggle ERR's ERR27 bit.
     *
     * Error In Channel 27
     */
    inline void toggle_ERR_ERR27() volatile
    {
        ERR ^= 1u << 27u;
    }

    /**
     * Get ERR's ERR26 bit.
     *
     * Error In Channel 26
     */
    inline bool get_ERR_ERR26() volatile
    {
        return ERR & (1u << 26u);
    }

    /**
     * Set ERR's ERR26 bit.
     *
     * Error In Channel 26
     */
    inline void set_ERR_ERR26() volatile
    {
        ERR |= 1u << 26u;
    }

    /**
     * Clear ERR's ERR26 bit.
     *
     * Error In Channel 26
     */
    inline void clear_ERR_ERR26() volatile
    {
        ERR &= ~(1u << 26u);
    }

    /**
     * Toggle ERR's ERR26 bit.
     *
     * Error In Channel 26
     */
    inline void toggle_ERR_ERR26() volatile
    {
        ERR ^= 1u << 26u;
    }

    /**
     * Get ERR's ERR25 bit.
     *
     * Error In Channel 25
     */
    inline bool get_ERR_ERR25() volatile
    {
        return ERR & (1u << 25u);
    }

    /**
     * Set ERR's ERR25 bit.
     *
     * Error In Channel 25
     */
    inline void set_ERR_ERR25() volatile
    {
        ERR |= 1u << 25u;
    }

    /**
     * Clear ERR's ERR25 bit.
     *
     * Error In Channel 25
     */
    inline void clear_ERR_ERR25() volatile
    {
        ERR &= ~(1u << 25u);
    }

    /**
     * Toggle ERR's ERR25 bit.
     *
     * Error In Channel 25
     */
    inline void toggle_ERR_ERR25() volatile
    {
        ERR ^= 1u << 25u;
    }

    /**
     * Get ERR's ERR24 bit.
     *
     * Error In Channel 24
     */
    inline bool get_ERR_ERR24() volatile
    {
        return ERR & (1u << 24u);
    }

    /**
     * Set ERR's ERR24 bit.
     *
     * Error In Channel 24
     */
    inline void set_ERR_ERR24() volatile
    {
        ERR |= 1u << 24u;
    }

    /**
     * Clear ERR's ERR24 bit.
     *
     * Error In Channel 24
     */
    inline void clear_ERR_ERR24() volatile
    {
        ERR &= ~(1u << 24u);
    }

    /**
     * Toggle ERR's ERR24 bit.
     *
     * Error In Channel 24
     */
    inline void toggle_ERR_ERR24() volatile
    {
        ERR ^= 1u << 24u;
    }

    /**
     * Get ERR's ERR23 bit.
     *
     * Error In Channel 23
     */
    inline bool get_ERR_ERR23() volatile
    {
        return ERR & (1u << 23u);
    }

    /**
     * Set ERR's ERR23 bit.
     *
     * Error In Channel 23
     */
    inline void set_ERR_ERR23() volatile
    {
        ERR |= 1u << 23u;
    }

    /**
     * Clear ERR's ERR23 bit.
     *
     * Error In Channel 23
     */
    inline void clear_ERR_ERR23() volatile
    {
        ERR &= ~(1u << 23u);
    }

    /**
     * Toggle ERR's ERR23 bit.
     *
     * Error In Channel 23
     */
    inline void toggle_ERR_ERR23() volatile
    {
        ERR ^= 1u << 23u;
    }

    /**
     * Get ERR's ERR22 bit.
     *
     * Error In Channel 22
     */
    inline bool get_ERR_ERR22() volatile
    {
        return ERR & (1u << 22u);
    }

    /**
     * Set ERR's ERR22 bit.
     *
     * Error In Channel 22
     */
    inline void set_ERR_ERR22() volatile
    {
        ERR |= 1u << 22u;
    }

    /**
     * Clear ERR's ERR22 bit.
     *
     * Error In Channel 22
     */
    inline void clear_ERR_ERR22() volatile
    {
        ERR &= ~(1u << 22u);
    }

    /**
     * Toggle ERR's ERR22 bit.
     *
     * Error In Channel 22
     */
    inline void toggle_ERR_ERR22() volatile
    {
        ERR ^= 1u << 22u;
    }

    /**
     * Get ERR's ERR21 bit.
     *
     * Error In Channel 21
     */
    inline bool get_ERR_ERR21() volatile
    {
        return ERR & (1u << 21u);
    }

    /**
     * Set ERR's ERR21 bit.
     *
     * Error In Channel 21
     */
    inline void set_ERR_ERR21() volatile
    {
        ERR |= 1u << 21u;
    }

    /**
     * Clear ERR's ERR21 bit.
     *
     * Error In Channel 21
     */
    inline void clear_ERR_ERR21() volatile
    {
        ERR &= ~(1u << 21u);
    }

    /**
     * Toggle ERR's ERR21 bit.
     *
     * Error In Channel 21
     */
    inline void toggle_ERR_ERR21() volatile
    {
        ERR ^= 1u << 21u;
    }

    /**
     * Get ERR's ERR20 bit.
     *
     * Error In Channel 20
     */
    inline bool get_ERR_ERR20() volatile
    {
        return ERR & (1u << 20u);
    }

    /**
     * Set ERR's ERR20 bit.
     *
     * Error In Channel 20
     */
    inline void set_ERR_ERR20() volatile
    {
        ERR |= 1u << 20u;
    }

    /**
     * Clear ERR's ERR20 bit.
     *
     * Error In Channel 20
     */
    inline void clear_ERR_ERR20() volatile
    {
        ERR &= ~(1u << 20u);
    }

    /**
     * Toggle ERR's ERR20 bit.
     *
     * Error In Channel 20
     */
    inline void toggle_ERR_ERR20() volatile
    {
        ERR ^= 1u << 20u;
    }

    /**
     * Get ERR's ERR19 bit.
     *
     * Error In Channel 19
     */
    inline bool get_ERR_ERR19() volatile
    {
        return ERR & (1u << 19u);
    }

    /**
     * Set ERR's ERR19 bit.
     *
     * Error In Channel 19
     */
    inline void set_ERR_ERR19() volatile
    {
        ERR |= 1u << 19u;
    }

    /**
     * Clear ERR's ERR19 bit.
     *
     * Error In Channel 19
     */
    inline void clear_ERR_ERR19() volatile
    {
        ERR &= ~(1u << 19u);
    }

    /**
     * Toggle ERR's ERR19 bit.
     *
     * Error In Channel 19
     */
    inline void toggle_ERR_ERR19() volatile
    {
        ERR ^= 1u << 19u;
    }

    /**
     * Get ERR's ERR18 bit.
     *
     * Error In Channel 18
     */
    inline bool get_ERR_ERR18() volatile
    {
        return ERR & (1u << 18u);
    }

    /**
     * Set ERR's ERR18 bit.
     *
     * Error In Channel 18
     */
    inline void set_ERR_ERR18() volatile
    {
        ERR |= 1u << 18u;
    }

    /**
     * Clear ERR's ERR18 bit.
     *
     * Error In Channel 18
     */
    inline void clear_ERR_ERR18() volatile
    {
        ERR &= ~(1u << 18u);
    }

    /**
     * Toggle ERR's ERR18 bit.
     *
     * Error In Channel 18
     */
    inline void toggle_ERR_ERR18() volatile
    {
        ERR ^= 1u << 18u;
    }

    /**
     * Get ERR's ERR17 bit.
     *
     * Error In Channel 17
     */
    inline bool get_ERR_ERR17() volatile
    {
        return ERR & (1u << 17u);
    }

    /**
     * Set ERR's ERR17 bit.
     *
     * Error In Channel 17
     */
    inline void set_ERR_ERR17() volatile
    {
        ERR |= 1u << 17u;
    }

    /**
     * Clear ERR's ERR17 bit.
     *
     * Error In Channel 17
     */
    inline void clear_ERR_ERR17() volatile
    {
        ERR &= ~(1u << 17u);
    }

    /**
     * Toggle ERR's ERR17 bit.
     *
     * Error In Channel 17
     */
    inline void toggle_ERR_ERR17() volatile
    {
        ERR ^= 1u << 17u;
    }

    /**
     * Get ERR's ERR16 bit.
     *
     * Error In Channel 16
     */
    inline bool get_ERR_ERR16() volatile
    {
        return ERR & (1u << 16u);
    }

    /**
     * Set ERR's ERR16 bit.
     *
     * Error In Channel 16
     */
    inline void set_ERR_ERR16() volatile
    {
        ERR |= 1u << 16u;
    }

    /**
     * Clear ERR's ERR16 bit.
     *
     * Error In Channel 16
     */
    inline void clear_ERR_ERR16() volatile
    {
        ERR &= ~(1u << 16u);
    }

    /**
     * Toggle ERR's ERR16 bit.
     *
     * Error In Channel 16
     */
    inline void toggle_ERR_ERR16() volatile
    {
        ERR ^= 1u << 16u;
    }

    /**
     * Get ERR's ERR15 bit.
     *
     * Error In Channel 15
     */
    inline bool get_ERR_ERR15() volatile
    {
        return ERR & (1u << 15u);
    }

    /**
     * Set ERR's ERR15 bit.
     *
     * Error In Channel 15
     */
    inline void set_ERR_ERR15() volatile
    {
        ERR |= 1u << 15u;
    }

    /**
     * Clear ERR's ERR15 bit.
     *
     * Error In Channel 15
     */
    inline void clear_ERR_ERR15() volatile
    {
        ERR &= ~(1u << 15u);
    }

    /**
     * Toggle ERR's ERR15 bit.
     *
     * Error In Channel 15
     */
    inline void toggle_ERR_ERR15() volatile
    {
        ERR ^= 1u << 15u;
    }

    /**
     * Get ERR's ERR14 bit.
     *
     * Error In Channel 14
     */
    inline bool get_ERR_ERR14() volatile
    {
        return ERR & (1u << 14u);
    }

    /**
     * Set ERR's ERR14 bit.
     *
     * Error In Channel 14
     */
    inline void set_ERR_ERR14() volatile
    {
        ERR |= 1u << 14u;
    }

    /**
     * Clear ERR's ERR14 bit.
     *
     * Error In Channel 14
     */
    inline void clear_ERR_ERR14() volatile
    {
        ERR &= ~(1u << 14u);
    }

    /**
     * Toggle ERR's ERR14 bit.
     *
     * Error In Channel 14
     */
    inline void toggle_ERR_ERR14() volatile
    {
        ERR ^= 1u << 14u;
    }

    /**
     * Get ERR's ERR13 bit.
     *
     * Error In Channel 13
     */
    inline bool get_ERR_ERR13() volatile
    {
        return ERR & (1u << 13u);
    }

    /**
     * Set ERR's ERR13 bit.
     *
     * Error In Channel 13
     */
    inline void set_ERR_ERR13() volatile
    {
        ERR |= 1u << 13u;
    }

    /**
     * Clear ERR's ERR13 bit.
     *
     * Error In Channel 13
     */
    inline void clear_ERR_ERR13() volatile
    {
        ERR &= ~(1u << 13u);
    }

    /**
     * Toggle ERR's ERR13 bit.
     *
     * Error In Channel 13
     */
    inline void toggle_ERR_ERR13() volatile
    {
        ERR ^= 1u << 13u;
    }

    /**
     * Get ERR's ERR12 bit.
     *
     * Error In Channel 12
     */
    inline bool get_ERR_ERR12() volatile
    {
        return ERR & (1u << 12u);
    }

    /**
     * Set ERR's ERR12 bit.
     *
     * Error In Channel 12
     */
    inline void set_ERR_ERR12() volatile
    {
        ERR |= 1u << 12u;
    }

    /**
     * Clear ERR's ERR12 bit.
     *
     * Error In Channel 12
     */
    inline void clear_ERR_ERR12() volatile
    {
        ERR &= ~(1u << 12u);
    }

    /**
     * Toggle ERR's ERR12 bit.
     *
     * Error In Channel 12
     */
    inline void toggle_ERR_ERR12() volatile
    {
        ERR ^= 1u << 12u;
    }

    /**
     * Get ERR's ERR11 bit.
     *
     * Error In Channel 11
     */
    inline bool get_ERR_ERR11() volatile
    {
        return ERR & (1u << 11u);
    }

    /**
     * Set ERR's ERR11 bit.
     *
     * Error In Channel 11
     */
    inline void set_ERR_ERR11() volatile
    {
        ERR |= 1u << 11u;
    }

    /**
     * Clear ERR's ERR11 bit.
     *
     * Error In Channel 11
     */
    inline void clear_ERR_ERR11() volatile
    {
        ERR &= ~(1u << 11u);
    }

    /**
     * Toggle ERR's ERR11 bit.
     *
     * Error In Channel 11
     */
    inline void toggle_ERR_ERR11() volatile
    {
        ERR ^= 1u << 11u;
    }

    /**
     * Get ERR's ERR10 bit.
     *
     * Error In Channel 10
     */
    inline bool get_ERR_ERR10() volatile
    {
        return ERR & (1u << 10u);
    }

    /**
     * Set ERR's ERR10 bit.
     *
     * Error In Channel 10
     */
    inline void set_ERR_ERR10() volatile
    {
        ERR |= 1u << 10u;
    }

    /**
     * Clear ERR's ERR10 bit.
     *
     * Error In Channel 10
     */
    inline void clear_ERR_ERR10() volatile
    {
        ERR &= ~(1u << 10u);
    }

    /**
     * Toggle ERR's ERR10 bit.
     *
     * Error In Channel 10
     */
    inline void toggle_ERR_ERR10() volatile
    {
        ERR ^= 1u << 10u;
    }

    /**
     * Get ERR's ERR9 bit.
     *
     * Error In Channel 9
     */
    inline bool get_ERR_ERR9() volatile
    {
        return ERR & (1u << 9u);
    }

    /**
     * Set ERR's ERR9 bit.
     *
     * Error In Channel 9
     */
    inline void set_ERR_ERR9() volatile
    {
        ERR |= 1u << 9u;
    }

    /**
     * Clear ERR's ERR9 bit.
     *
     * Error In Channel 9
     */
    inline void clear_ERR_ERR9() volatile
    {
        ERR &= ~(1u << 9u);
    }

    /**
     * Toggle ERR's ERR9 bit.
     *
     * Error In Channel 9
     */
    inline void toggle_ERR_ERR9() volatile
    {
        ERR ^= 1u << 9u;
    }

    /**
     * Get ERR's ERR8 bit.
     *
     * Error In Channel 8
     */
    inline bool get_ERR_ERR8() volatile
    {
        return ERR & (1u << 8u);
    }

    /**
     * Set ERR's ERR8 bit.
     *
     * Error In Channel 8
     */
    inline void set_ERR_ERR8() volatile
    {
        ERR |= 1u << 8u;
    }

    /**
     * Clear ERR's ERR8 bit.
     *
     * Error In Channel 8
     */
    inline void clear_ERR_ERR8() volatile
    {
        ERR &= ~(1u << 8u);
    }

    /**
     * Toggle ERR's ERR8 bit.
     *
     * Error In Channel 8
     */
    inline void toggle_ERR_ERR8() volatile
    {
        ERR ^= 1u << 8u;
    }

    /**
     * Get ERR's ERR7 bit.
     *
     * Error In Channel 7
     */
    inline bool get_ERR_ERR7() volatile
    {
        return ERR & (1u << 7u);
    }

    /**
     * Set ERR's ERR7 bit.
     *
     * Error In Channel 7
     */
    inline void set_ERR_ERR7() volatile
    {
        ERR |= 1u << 7u;
    }

    /**
     * Clear ERR's ERR7 bit.
     *
     * Error In Channel 7
     */
    inline void clear_ERR_ERR7() volatile
    {
        ERR &= ~(1u << 7u);
    }

    /**
     * Toggle ERR's ERR7 bit.
     *
     * Error In Channel 7
     */
    inline void toggle_ERR_ERR7() volatile
    {
        ERR ^= 1u << 7u;
    }

    /**
     * Get ERR's ERR6 bit.
     *
     * Error In Channel 6
     */
    inline bool get_ERR_ERR6() volatile
    {
        return ERR & (1u << 6u);
    }

    /**
     * Set ERR's ERR6 bit.
     *
     * Error In Channel 6
     */
    inline void set_ERR_ERR6() volatile
    {
        ERR |= 1u << 6u;
    }

    /**
     * Clear ERR's ERR6 bit.
     *
     * Error In Channel 6
     */
    inline void clear_ERR_ERR6() volatile
    {
        ERR &= ~(1u << 6u);
    }

    /**
     * Toggle ERR's ERR6 bit.
     *
     * Error In Channel 6
     */
    inline void toggle_ERR_ERR6() volatile
    {
        ERR ^= 1u << 6u;
    }

    /**
     * Get ERR's ERR5 bit.
     *
     * Error In Channel 5
     */
    inline bool get_ERR_ERR5() volatile
    {
        return ERR & (1u << 5u);
    }

    /**
     * Set ERR's ERR5 bit.
     *
     * Error In Channel 5
     */
    inline void set_ERR_ERR5() volatile
    {
        ERR |= 1u << 5u;
    }

    /**
     * Clear ERR's ERR5 bit.
     *
     * Error In Channel 5
     */
    inline void clear_ERR_ERR5() volatile
    {
        ERR &= ~(1u << 5u);
    }

    /**
     * Toggle ERR's ERR5 bit.
     *
     * Error In Channel 5
     */
    inline void toggle_ERR_ERR5() volatile
    {
        ERR ^= 1u << 5u;
    }

    /**
     * Get ERR's ERR4 bit.
     *
     * Error In Channel 4
     */
    inline bool get_ERR_ERR4() volatile
    {
        return ERR & (1u << 4u);
    }

    /**
     * Set ERR's ERR4 bit.
     *
     * Error In Channel 4
     */
    inline void set_ERR_ERR4() volatile
    {
        ERR |= 1u << 4u;
    }

    /**
     * Clear ERR's ERR4 bit.
     *
     * Error In Channel 4
     */
    inline void clear_ERR_ERR4() volatile
    {
        ERR &= ~(1u << 4u);
    }

    /**
     * Toggle ERR's ERR4 bit.
     *
     * Error In Channel 4
     */
    inline void toggle_ERR_ERR4() volatile
    {
        ERR ^= 1u << 4u;
    }

    /**
     * Get ERR's ERR3 bit.
     *
     * Error In Channel 3
     */
    inline bool get_ERR_ERR3() volatile
    {
        return ERR & (1u << 3u);
    }

    /**
     * Set ERR's ERR3 bit.
     *
     * Error In Channel 3
     */
    inline void set_ERR_ERR3() volatile
    {
        ERR |= 1u << 3u;
    }

    /**
     * Clear ERR's ERR3 bit.
     *
     * Error In Channel 3
     */
    inline void clear_ERR_ERR3() volatile
    {
        ERR &= ~(1u << 3u);
    }

    /**
     * Toggle ERR's ERR3 bit.
     *
     * Error In Channel 3
     */
    inline void toggle_ERR_ERR3() volatile
    {
        ERR ^= 1u << 3u;
    }

    /**
     * Get ERR's ERR2 bit.
     *
     * Error In Channel 2
     */
    inline bool get_ERR_ERR2() volatile
    {
        return ERR & (1u << 2u);
    }

    /**
     * Set ERR's ERR2 bit.
     *
     * Error In Channel 2
     */
    inline void set_ERR_ERR2() volatile
    {
        ERR |= 1u << 2u;
    }

    /**
     * Clear ERR's ERR2 bit.
     *
     * Error In Channel 2
     */
    inline void clear_ERR_ERR2() volatile
    {
        ERR &= ~(1u << 2u);
    }

    /**
     * Toggle ERR's ERR2 bit.
     *
     * Error In Channel 2
     */
    inline void toggle_ERR_ERR2() volatile
    {
        ERR ^= 1u << 2u;
    }

    /**
     * Get ERR's ERR1 bit.
     *
     * Error In Channel 1
     */
    inline bool get_ERR_ERR1() volatile
    {
        return ERR & (1u << 1u);
    }

    /**
     * Set ERR's ERR1 bit.
     *
     * Error In Channel 1
     */
    inline void set_ERR_ERR1() volatile
    {
        ERR |= 1u << 1u;
    }

    /**
     * Clear ERR's ERR1 bit.
     *
     * Error In Channel 1
     */
    inline void clear_ERR_ERR1() volatile
    {
        ERR &= ~(1u << 1u);
    }

    /**
     * Toggle ERR's ERR1 bit.
     *
     * Error In Channel 1
     */
    inline void toggle_ERR_ERR1() volatile
    {
        ERR ^= 1u << 1u;
    }

    /**
     * Get ERR's ERR0 bit.
     *
     * Error In Channel 0
     */
    inline bool get_ERR_ERR0() volatile
    {
        return ERR & (1u << 0u);
    }

    /**
     * Set ERR's ERR0 bit.
     *
     * Error In Channel 0
     */
    inline void set_ERR_ERR0() volatile
    {
        ERR |= 1u << 0u;
    }

    /**
     * Clear ERR's ERR0 bit.
     *
     * Error In Channel 0
     */
    inline void clear_ERR_ERR0() volatile
    {
        ERR &= ~(1u << 0u);
    }

    /**
     * Toggle ERR's ERR0 bit.
     *
     * Error In Channel 0
     */
    inline void toggle_ERR_ERR0() volatile
    {
        ERR ^= 1u << 0u;
    }

    /**
     * Get all of ERR's bit fields.
     *
     * (read-write) Error
     */
    inline void get_ERR(bool &ERR31, bool &ERR30, bool &ERR29, bool &ERR28,
                        bool &ERR27, bool &ERR26, bool &ERR25, bool &ERR24,
                        bool &ERR23, bool &ERR22, bool &ERR21, bool &ERR20,
                        bool &ERR19, bool &ERR18, bool &ERR17, bool &ERR16,
                        bool &ERR15, bool &ERR14, bool &ERR13, bool &ERR12,
                        bool &ERR11, bool &ERR10, bool &ERR9, bool &ERR8,
                        bool &ERR7, bool &ERR6, bool &ERR5, bool &ERR4,
                        bool &ERR3, bool &ERR2, bool &ERR1,
                        bool &ERR0) volatile
    {
        uint32_t curr = ERR;

        ERR31 = curr & (1u << 31u);
        ERR30 = curr & (1u << 30u);
        ERR29 = curr & (1u << 29u);
        ERR28 = curr & (1u << 28u);
        ERR27 = curr & (1u << 27u);
        ERR26 = curr & (1u << 26u);
        ERR25 = curr & (1u << 25u);
        ERR24 = curr & (1u << 24u);
        ERR23 = curr & (1u << 23u);
        ERR22 = curr & (1u << 22u);
        ERR21 = curr & (1u << 21u);
        ERR20 = curr & (1u << 20u);
        ERR19 = curr & (1u << 19u);
        ERR18 = curr & (1u << 18u);
        ERR17 = curr & (1u << 17u);
        ERR16 = curr & (1u << 16u);
        ERR15 = curr & (1u << 15u);
        ERR14 = curr & (1u << 14u);
        ERR13 = curr & (1u << 13u);
        ERR12 = curr & (1u << 12u);
        ERR11 = curr & (1u << 11u);
        ERR10 = curr & (1u << 10u);
        ERR9 = curr & (1u << 9u);
        ERR8 = curr & (1u << 8u);
        ERR7 = curr & (1u << 7u);
        ERR6 = curr & (1u << 6u);
        ERR5 = curr & (1u << 5u);
        ERR4 = curr & (1u << 4u);
        ERR3 = curr & (1u << 3u);
        ERR2 = curr & (1u << 2u);
        ERR1 = curr & (1u << 1u);
        ERR0 = curr & (1u << 0u);
    }

    /**
     * Set all of ERR's bit fields.
     *
     * (read-write) Error
     */
    inline void set_ERR(bool ERR31, bool ERR30, bool ERR29, bool ERR28,
                        bool ERR27, bool ERR26, bool ERR25, bool ERR24,
                        bool ERR23, bool ERR22, bool ERR21, bool ERR20,
                        bool ERR19, bool ERR18, bool ERR17, bool ERR16,
                        bool ERR15, bool ERR14, bool ERR13, bool ERR12,
                        bool ERR11, bool ERR10, bool ERR9, bool ERR8,
                        bool ERR7, bool ERR6, bool ERR5, bool ERR4, bool ERR3,
                        bool ERR2, bool ERR1, bool ERR0) volatile
    {
        uint32_t curr = ERR;

        curr &= ~(0b1u << 31u);
        curr |= (ERR31 & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (ERR30 & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (ERR29 & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (ERR28 & 0b1u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (ERR27 & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (ERR26 & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (ERR25 & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (ERR24 & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (ERR23 & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (ERR22 & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (ERR21 & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (ERR20 & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (ERR19 & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (ERR18 & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (ERR17 & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (ERR16 & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (ERR15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (ERR14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (ERR13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (ERR12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (ERR11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (ERR10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (ERR9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (ERR8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (ERR7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (ERR6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (ERR5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ERR4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (ERR3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (ERR2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (ERR1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ERR0 & 0b1u) << 0u;

        ERR = curr;
    }

    /**
     * Get HRS's HRS31 bit.
     *
     * Hardware Request Status Channel 31
     */
    inline bool get_HRS_HRS31() volatile
    {
        return HRS & (1u << 31u);
    }

    /**
     * Get HRS's HRS30 bit.
     *
     * Hardware Request Status Channel 30
     */
    inline bool get_HRS_HRS30() volatile
    {
        return HRS & (1u << 30u);
    }

    /**
     * Get HRS's HRS29 bit.
     *
     * Hardware Request Status Channel 29
     */
    inline bool get_HRS_HRS29() volatile
    {
        return HRS & (1u << 29u);
    }

    /**
     * Get HRS's HRS28 bit.
     *
     * Hardware Request Status Channel 28
     */
    inline bool get_HRS_HRS28() volatile
    {
        return HRS & (1u << 28u);
    }

    /**
     * Get HRS's HRS27 bit.
     *
     * Hardware Request Status Channel 27
     */
    inline bool get_HRS_HRS27() volatile
    {
        return HRS & (1u << 27u);
    }

    /**
     * Get HRS's HRS26 bit.
     *
     * Hardware Request Status Channel 26
     */
    inline bool get_HRS_HRS26() volatile
    {
        return HRS & (1u << 26u);
    }

    /**
     * Get HRS's HRS25 bit.
     *
     * Hardware Request Status Channel 25
     */
    inline bool get_HRS_HRS25() volatile
    {
        return HRS & (1u << 25u);
    }

    /**
     * Get HRS's HRS24 bit.
     *
     * Hardware Request Status Channel 24
     */
    inline bool get_HRS_HRS24() volatile
    {
        return HRS & (1u << 24u);
    }

    /**
     * Get HRS's HRS23 bit.
     *
     * Hardware Request Status Channel 23
     */
    inline bool get_HRS_HRS23() volatile
    {
        return HRS & (1u << 23u);
    }

    /**
     * Get HRS's HRS22 bit.
     *
     * Hardware Request Status Channel 22
     */
    inline bool get_HRS_HRS22() volatile
    {
        return HRS & (1u << 22u);
    }

    /**
     * Get HRS's HRS21 bit.
     *
     * Hardware Request Status Channel 21
     */
    inline bool get_HRS_HRS21() volatile
    {
        return HRS & (1u << 21u);
    }

    /**
     * Get HRS's HRS20 bit.
     *
     * Hardware Request Status Channel 20
     */
    inline bool get_HRS_HRS20() volatile
    {
        return HRS & (1u << 20u);
    }

    /**
     * Get HRS's HRS19 bit.
     *
     * Hardware Request Status Channel 19
     */
    inline bool get_HRS_HRS19() volatile
    {
        return HRS & (1u << 19u);
    }

    /**
     * Get HRS's HRS18 bit.
     *
     * Hardware Request Status Channel 18
     */
    inline bool get_HRS_HRS18() volatile
    {
        return HRS & (1u << 18u);
    }

    /**
     * Get HRS's HRS17 bit.
     *
     * Hardware Request Status Channel 17
     */
    inline bool get_HRS_HRS17() volatile
    {
        return HRS & (1u << 17u);
    }

    /**
     * Get HRS's HRS16 bit.
     *
     * Hardware Request Status Channel 16
     */
    inline bool get_HRS_HRS16() volatile
    {
        return HRS & (1u << 16u);
    }

    /**
     * Get HRS's HRS15 bit.
     *
     * Hardware Request Status Channel 15
     */
    inline bool get_HRS_HRS15() volatile
    {
        return HRS & (1u << 15u);
    }

    /**
     * Get HRS's HRS14 bit.
     *
     * Hardware Request Status Channel 14
     */
    inline bool get_HRS_HRS14() volatile
    {
        return HRS & (1u << 14u);
    }

    /**
     * Get HRS's HRS13 bit.
     *
     * Hardware Request Status Channel 13
     */
    inline bool get_HRS_HRS13() volatile
    {
        return HRS & (1u << 13u);
    }

    /**
     * Get HRS's HRS12 bit.
     *
     * Hardware Request Status Channel 12
     */
    inline bool get_HRS_HRS12() volatile
    {
        return HRS & (1u << 12u);
    }

    /**
     * Get HRS's HRS11 bit.
     *
     * Hardware Request Status Channel 11
     */
    inline bool get_HRS_HRS11() volatile
    {
        return HRS & (1u << 11u);
    }

    /**
     * Get HRS's HRS10 bit.
     *
     * Hardware Request Status Channel 10
     */
    inline bool get_HRS_HRS10() volatile
    {
        return HRS & (1u << 10u);
    }

    /**
     * Get HRS's HRS9 bit.
     *
     * Hardware Request Status Channel 9
     */
    inline bool get_HRS_HRS9() volatile
    {
        return HRS & (1u << 9u);
    }

    /**
     * Get HRS's HRS8 bit.
     *
     * Hardware Request Status Channel 8
     */
    inline bool get_HRS_HRS8() volatile
    {
        return HRS & (1u << 8u);
    }

    /**
     * Get HRS's HRS7 bit.
     *
     * Hardware Request Status Channel 7
     */
    inline bool get_HRS_HRS7() volatile
    {
        return HRS & (1u << 7u);
    }

    /**
     * Get HRS's HRS6 bit.
     *
     * Hardware Request Status Channel 6
     */
    inline bool get_HRS_HRS6() volatile
    {
        return HRS & (1u << 6u);
    }

    /**
     * Get HRS's HRS5 bit.
     *
     * Hardware Request Status Channel 5
     */
    inline bool get_HRS_HRS5() volatile
    {
        return HRS & (1u << 5u);
    }

    /**
     * Get HRS's HRS4 bit.
     *
     * Hardware Request Status Channel 4
     */
    inline bool get_HRS_HRS4() volatile
    {
        return HRS & (1u << 4u);
    }

    /**
     * Get HRS's HRS3 bit.
     *
     * Hardware Request Status Channel 3
     */
    inline bool get_HRS_HRS3() volatile
    {
        return HRS & (1u << 3u);
    }

    /**
     * Get HRS's HRS2 bit.
     *
     * Hardware Request Status Channel 2
     */
    inline bool get_HRS_HRS2() volatile
    {
        return HRS & (1u << 2u);
    }

    /**
     * Get HRS's HRS1 bit.
     *
     * Hardware Request Status Channel 1
     */
    inline bool get_HRS_HRS1() volatile
    {
        return HRS & (1u << 1u);
    }

    /**
     * Get HRS's HRS0 bit.
     *
     * Hardware Request Status Channel 0
     */
    inline bool get_HRS_HRS0() volatile
    {
        return HRS & (1u << 0u);
    }

    /**
     * Get all of HRS's bit fields.
     *
     * (read-write) Hardware Request Status
     */
    inline void get_HRS(bool &HRS31, bool &HRS30, bool &HRS29, bool &HRS28,
                        bool &HRS27, bool &HRS26, bool &HRS25, bool &HRS24,
                        bool &HRS23, bool &HRS22, bool &HRS21, bool &HRS20,
                        bool &HRS19, bool &HRS18, bool &HRS17, bool &HRS16,
                        bool &HRS15, bool &HRS14, bool &HRS13, bool &HRS12,
                        bool &HRS11, bool &HRS10, bool &HRS9, bool &HRS8,
                        bool &HRS7, bool &HRS6, bool &HRS5, bool &HRS4,
                        bool &HRS3, bool &HRS2, bool &HRS1,
                        bool &HRS0) volatile
    {
        uint32_t curr = HRS;

        HRS31 = curr & (1u << 31u);
        HRS30 = curr & (1u << 30u);
        HRS29 = curr & (1u << 29u);
        HRS28 = curr & (1u << 28u);
        HRS27 = curr & (1u << 27u);
        HRS26 = curr & (1u << 26u);
        HRS25 = curr & (1u << 25u);
        HRS24 = curr & (1u << 24u);
        HRS23 = curr & (1u << 23u);
        HRS22 = curr & (1u << 22u);
        HRS21 = curr & (1u << 21u);
        HRS20 = curr & (1u << 20u);
        HRS19 = curr & (1u << 19u);
        HRS18 = curr & (1u << 18u);
        HRS17 = curr & (1u << 17u);
        HRS16 = curr & (1u << 16u);
        HRS15 = curr & (1u << 15u);
        HRS14 = curr & (1u << 14u);
        HRS13 = curr & (1u << 13u);
        HRS12 = curr & (1u << 12u);
        HRS11 = curr & (1u << 11u);
        HRS10 = curr & (1u << 10u);
        HRS9 = curr & (1u << 9u);
        HRS8 = curr & (1u << 8u);
        HRS7 = curr & (1u << 7u);
        HRS6 = curr & (1u << 6u);
        HRS5 = curr & (1u << 5u);
        HRS4 = curr & (1u << 4u);
        HRS3 = curr & (1u << 3u);
        HRS2 = curr & (1u << 2u);
        HRS1 = curr & (1u << 1u);
        HRS0 = curr & (1u << 0u);
    }

    /**
     * Get EARS's EDREQ_31 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 31.
     */
    inline bool get_EARS_EDREQ_31() volatile
    {
        return EARS & (1u << 31u);
    }

    /**
     * Set EARS's EDREQ_31 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 31.
     */
    inline void set_EARS_EDREQ_31() volatile
    {
        EARS |= 1u << 31u;
    }

    /**
     * Clear EARS's EDREQ_31 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 31.
     */
    inline void clear_EARS_EDREQ_31() volatile
    {
        EARS &= ~(1u << 31u);
    }

    /**
     * Toggle EARS's EDREQ_31 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 31.
     */
    inline void toggle_EARS_EDREQ_31() volatile
    {
        EARS ^= 1u << 31u;
    }

    /**
     * Get EARS's EDREQ_30 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 30.
     */
    inline bool get_EARS_EDREQ_30() volatile
    {
        return EARS & (1u << 30u);
    }

    /**
     * Set EARS's EDREQ_30 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 30.
     */
    inline void set_EARS_EDREQ_30() volatile
    {
        EARS |= 1u << 30u;
    }

    /**
     * Clear EARS's EDREQ_30 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 30.
     */
    inline void clear_EARS_EDREQ_30() volatile
    {
        EARS &= ~(1u << 30u);
    }

    /**
     * Toggle EARS's EDREQ_30 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 30.
     */
    inline void toggle_EARS_EDREQ_30() volatile
    {
        EARS ^= 1u << 30u;
    }

    /**
     * Get EARS's EDREQ_29 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 29.
     */
    inline bool get_EARS_EDREQ_29() volatile
    {
        return EARS & (1u << 29u);
    }

    /**
     * Set EARS's EDREQ_29 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 29.
     */
    inline void set_EARS_EDREQ_29() volatile
    {
        EARS |= 1u << 29u;
    }

    /**
     * Clear EARS's EDREQ_29 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 29.
     */
    inline void clear_EARS_EDREQ_29() volatile
    {
        EARS &= ~(1u << 29u);
    }

    /**
     * Toggle EARS's EDREQ_29 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 29.
     */
    inline void toggle_EARS_EDREQ_29() volatile
    {
        EARS ^= 1u << 29u;
    }

    /**
     * Get EARS's EDREQ_28 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 28.
     */
    inline bool get_EARS_EDREQ_28() volatile
    {
        return EARS & (1u << 28u);
    }

    /**
     * Set EARS's EDREQ_28 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 28.
     */
    inline void set_EARS_EDREQ_28() volatile
    {
        EARS |= 1u << 28u;
    }

    /**
     * Clear EARS's EDREQ_28 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 28.
     */
    inline void clear_EARS_EDREQ_28() volatile
    {
        EARS &= ~(1u << 28u);
    }

    /**
     * Toggle EARS's EDREQ_28 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 28.
     */
    inline void toggle_EARS_EDREQ_28() volatile
    {
        EARS ^= 1u << 28u;
    }

    /**
     * Get EARS's EDREQ_27 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 27.
     */
    inline bool get_EARS_EDREQ_27() volatile
    {
        return EARS & (1u << 27u);
    }

    /**
     * Set EARS's EDREQ_27 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 27.
     */
    inline void set_EARS_EDREQ_27() volatile
    {
        EARS |= 1u << 27u;
    }

    /**
     * Clear EARS's EDREQ_27 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 27.
     */
    inline void clear_EARS_EDREQ_27() volatile
    {
        EARS &= ~(1u << 27u);
    }

    /**
     * Toggle EARS's EDREQ_27 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 27.
     */
    inline void toggle_EARS_EDREQ_27() volatile
    {
        EARS ^= 1u << 27u;
    }

    /**
     * Get EARS's EDREQ_26 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 26.
     */
    inline bool get_EARS_EDREQ_26() volatile
    {
        return EARS & (1u << 26u);
    }

    /**
     * Set EARS's EDREQ_26 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 26.
     */
    inline void set_EARS_EDREQ_26() volatile
    {
        EARS |= 1u << 26u;
    }

    /**
     * Clear EARS's EDREQ_26 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 26.
     */
    inline void clear_EARS_EDREQ_26() volatile
    {
        EARS &= ~(1u << 26u);
    }

    /**
     * Toggle EARS's EDREQ_26 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 26.
     */
    inline void toggle_EARS_EDREQ_26() volatile
    {
        EARS ^= 1u << 26u;
    }

    /**
     * Get EARS's EDREQ_25 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 25.
     */
    inline bool get_EARS_EDREQ_25() volatile
    {
        return EARS & (1u << 25u);
    }

    /**
     * Set EARS's EDREQ_25 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 25.
     */
    inline void set_EARS_EDREQ_25() volatile
    {
        EARS |= 1u << 25u;
    }

    /**
     * Clear EARS's EDREQ_25 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 25.
     */
    inline void clear_EARS_EDREQ_25() volatile
    {
        EARS &= ~(1u << 25u);
    }

    /**
     * Toggle EARS's EDREQ_25 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 25.
     */
    inline void toggle_EARS_EDREQ_25() volatile
    {
        EARS ^= 1u << 25u;
    }

    /**
     * Get EARS's EDREQ_24 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 24.
     */
    inline bool get_EARS_EDREQ_24() volatile
    {
        return EARS & (1u << 24u);
    }

    /**
     * Set EARS's EDREQ_24 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 24.
     */
    inline void set_EARS_EDREQ_24() volatile
    {
        EARS |= 1u << 24u;
    }

    /**
     * Clear EARS's EDREQ_24 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 24.
     */
    inline void clear_EARS_EDREQ_24() volatile
    {
        EARS &= ~(1u << 24u);
    }

    /**
     * Toggle EARS's EDREQ_24 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 24.
     */
    inline void toggle_EARS_EDREQ_24() volatile
    {
        EARS ^= 1u << 24u;
    }

    /**
     * Get EARS's EDREQ_23 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 23.
     */
    inline bool get_EARS_EDREQ_23() volatile
    {
        return EARS & (1u << 23u);
    }

    /**
     * Set EARS's EDREQ_23 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 23.
     */
    inline void set_EARS_EDREQ_23() volatile
    {
        EARS |= 1u << 23u;
    }

    /**
     * Clear EARS's EDREQ_23 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 23.
     */
    inline void clear_EARS_EDREQ_23() volatile
    {
        EARS &= ~(1u << 23u);
    }

    /**
     * Toggle EARS's EDREQ_23 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 23.
     */
    inline void toggle_EARS_EDREQ_23() volatile
    {
        EARS ^= 1u << 23u;
    }

    /**
     * Get EARS's EDREQ_22 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 22.
     */
    inline bool get_EARS_EDREQ_22() volatile
    {
        return EARS & (1u << 22u);
    }

    /**
     * Set EARS's EDREQ_22 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 22.
     */
    inline void set_EARS_EDREQ_22() volatile
    {
        EARS |= 1u << 22u;
    }

    /**
     * Clear EARS's EDREQ_22 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 22.
     */
    inline void clear_EARS_EDREQ_22() volatile
    {
        EARS &= ~(1u << 22u);
    }

    /**
     * Toggle EARS's EDREQ_22 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 22.
     */
    inline void toggle_EARS_EDREQ_22() volatile
    {
        EARS ^= 1u << 22u;
    }

    /**
     * Get EARS's EDREQ_21 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 21.
     */
    inline bool get_EARS_EDREQ_21() volatile
    {
        return EARS & (1u << 21u);
    }

    /**
     * Set EARS's EDREQ_21 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 21.
     */
    inline void set_EARS_EDREQ_21() volatile
    {
        EARS |= 1u << 21u;
    }

    /**
     * Clear EARS's EDREQ_21 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 21.
     */
    inline void clear_EARS_EDREQ_21() volatile
    {
        EARS &= ~(1u << 21u);
    }

    /**
     * Toggle EARS's EDREQ_21 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 21.
     */
    inline void toggle_EARS_EDREQ_21() volatile
    {
        EARS ^= 1u << 21u;
    }

    /**
     * Get EARS's EDREQ_20 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 20.
     */
    inline bool get_EARS_EDREQ_20() volatile
    {
        return EARS & (1u << 20u);
    }

    /**
     * Set EARS's EDREQ_20 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 20.
     */
    inline void set_EARS_EDREQ_20() volatile
    {
        EARS |= 1u << 20u;
    }

    /**
     * Clear EARS's EDREQ_20 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 20.
     */
    inline void clear_EARS_EDREQ_20() volatile
    {
        EARS &= ~(1u << 20u);
    }

    /**
     * Toggle EARS's EDREQ_20 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 20.
     */
    inline void toggle_EARS_EDREQ_20() volatile
    {
        EARS ^= 1u << 20u;
    }

    /**
     * Get EARS's EDREQ_19 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 19.
     */
    inline bool get_EARS_EDREQ_19() volatile
    {
        return EARS & (1u << 19u);
    }

    /**
     * Set EARS's EDREQ_19 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 19.
     */
    inline void set_EARS_EDREQ_19() volatile
    {
        EARS |= 1u << 19u;
    }

    /**
     * Clear EARS's EDREQ_19 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 19.
     */
    inline void clear_EARS_EDREQ_19() volatile
    {
        EARS &= ~(1u << 19u);
    }

    /**
     * Toggle EARS's EDREQ_19 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 19.
     */
    inline void toggle_EARS_EDREQ_19() volatile
    {
        EARS ^= 1u << 19u;
    }

    /**
     * Get EARS's EDREQ_18 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 18.
     */
    inline bool get_EARS_EDREQ_18() volatile
    {
        return EARS & (1u << 18u);
    }

    /**
     * Set EARS's EDREQ_18 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 18.
     */
    inline void set_EARS_EDREQ_18() volatile
    {
        EARS |= 1u << 18u;
    }

    /**
     * Clear EARS's EDREQ_18 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 18.
     */
    inline void clear_EARS_EDREQ_18() volatile
    {
        EARS &= ~(1u << 18u);
    }

    /**
     * Toggle EARS's EDREQ_18 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 18.
     */
    inline void toggle_EARS_EDREQ_18() volatile
    {
        EARS ^= 1u << 18u;
    }

    /**
     * Get EARS's EDREQ_17 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 17.
     */
    inline bool get_EARS_EDREQ_17() volatile
    {
        return EARS & (1u << 17u);
    }

    /**
     * Set EARS's EDREQ_17 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 17.
     */
    inline void set_EARS_EDREQ_17() volatile
    {
        EARS |= 1u << 17u;
    }

    /**
     * Clear EARS's EDREQ_17 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 17.
     */
    inline void clear_EARS_EDREQ_17() volatile
    {
        EARS &= ~(1u << 17u);
    }

    /**
     * Toggle EARS's EDREQ_17 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 17.
     */
    inline void toggle_EARS_EDREQ_17() volatile
    {
        EARS ^= 1u << 17u;
    }

    /**
     * Get EARS's EDREQ_16 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 16.
     */
    inline bool get_EARS_EDREQ_16() volatile
    {
        return EARS & (1u << 16u);
    }

    /**
     * Set EARS's EDREQ_16 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 16.
     */
    inline void set_EARS_EDREQ_16() volatile
    {
        EARS |= 1u << 16u;
    }

    /**
     * Clear EARS's EDREQ_16 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 16.
     */
    inline void clear_EARS_EDREQ_16() volatile
    {
        EARS &= ~(1u << 16u);
    }

    /**
     * Toggle EARS's EDREQ_16 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 16.
     */
    inline void toggle_EARS_EDREQ_16() volatile
    {
        EARS ^= 1u << 16u;
    }

    /**
     * Get EARS's EDREQ_15 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 15.
     */
    inline bool get_EARS_EDREQ_15() volatile
    {
        return EARS & (1u << 15u);
    }

    /**
     * Set EARS's EDREQ_15 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 15.
     */
    inline void set_EARS_EDREQ_15() volatile
    {
        EARS |= 1u << 15u;
    }

    /**
     * Clear EARS's EDREQ_15 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 15.
     */
    inline void clear_EARS_EDREQ_15() volatile
    {
        EARS &= ~(1u << 15u);
    }

    /**
     * Toggle EARS's EDREQ_15 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 15.
     */
    inline void toggle_EARS_EDREQ_15() volatile
    {
        EARS ^= 1u << 15u;
    }

    /**
     * Get EARS's EDREQ_14 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 14.
     */
    inline bool get_EARS_EDREQ_14() volatile
    {
        return EARS & (1u << 14u);
    }

    /**
     * Set EARS's EDREQ_14 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 14.
     */
    inline void set_EARS_EDREQ_14() volatile
    {
        EARS |= 1u << 14u;
    }

    /**
     * Clear EARS's EDREQ_14 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 14.
     */
    inline void clear_EARS_EDREQ_14() volatile
    {
        EARS &= ~(1u << 14u);
    }

    /**
     * Toggle EARS's EDREQ_14 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 14.
     */
    inline void toggle_EARS_EDREQ_14() volatile
    {
        EARS ^= 1u << 14u;
    }

    /**
     * Get EARS's EDREQ_13 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 13.
     */
    inline bool get_EARS_EDREQ_13() volatile
    {
        return EARS & (1u << 13u);
    }

    /**
     * Set EARS's EDREQ_13 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 13.
     */
    inline void set_EARS_EDREQ_13() volatile
    {
        EARS |= 1u << 13u;
    }

    /**
     * Clear EARS's EDREQ_13 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 13.
     */
    inline void clear_EARS_EDREQ_13() volatile
    {
        EARS &= ~(1u << 13u);
    }

    /**
     * Toggle EARS's EDREQ_13 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 13.
     */
    inline void toggle_EARS_EDREQ_13() volatile
    {
        EARS ^= 1u << 13u;
    }

    /**
     * Get EARS's EDREQ_12 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 12.
     */
    inline bool get_EARS_EDREQ_12() volatile
    {
        return EARS & (1u << 12u);
    }

    /**
     * Set EARS's EDREQ_12 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 12.
     */
    inline void set_EARS_EDREQ_12() volatile
    {
        EARS |= 1u << 12u;
    }

    /**
     * Clear EARS's EDREQ_12 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 12.
     */
    inline void clear_EARS_EDREQ_12() volatile
    {
        EARS &= ~(1u << 12u);
    }

    /**
     * Toggle EARS's EDREQ_12 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 12.
     */
    inline void toggle_EARS_EDREQ_12() volatile
    {
        EARS ^= 1u << 12u;
    }

    /**
     * Get EARS's EDREQ_11 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 11.
     */
    inline bool get_EARS_EDREQ_11() volatile
    {
        return EARS & (1u << 11u);
    }

    /**
     * Set EARS's EDREQ_11 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 11.
     */
    inline void set_EARS_EDREQ_11() volatile
    {
        EARS |= 1u << 11u;
    }

    /**
     * Clear EARS's EDREQ_11 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 11.
     */
    inline void clear_EARS_EDREQ_11() volatile
    {
        EARS &= ~(1u << 11u);
    }

    /**
     * Toggle EARS's EDREQ_11 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 11.
     */
    inline void toggle_EARS_EDREQ_11() volatile
    {
        EARS ^= 1u << 11u;
    }

    /**
     * Get EARS's EDREQ_10 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 10.
     */
    inline bool get_EARS_EDREQ_10() volatile
    {
        return EARS & (1u << 10u);
    }

    /**
     * Set EARS's EDREQ_10 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 10.
     */
    inline void set_EARS_EDREQ_10() volatile
    {
        EARS |= 1u << 10u;
    }

    /**
     * Clear EARS's EDREQ_10 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 10.
     */
    inline void clear_EARS_EDREQ_10() volatile
    {
        EARS &= ~(1u << 10u);
    }

    /**
     * Toggle EARS's EDREQ_10 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 10.
     */
    inline void toggle_EARS_EDREQ_10() volatile
    {
        EARS ^= 1u << 10u;
    }

    /**
     * Get EARS's EDREQ_9 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 9.
     */
    inline bool get_EARS_EDREQ_9() volatile
    {
        return EARS & (1u << 9u);
    }

    /**
     * Set EARS's EDREQ_9 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 9.
     */
    inline void set_EARS_EDREQ_9() volatile
    {
        EARS |= 1u << 9u;
    }

    /**
     * Clear EARS's EDREQ_9 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 9.
     */
    inline void clear_EARS_EDREQ_9() volatile
    {
        EARS &= ~(1u << 9u);
    }

    /**
     * Toggle EARS's EDREQ_9 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 9.
     */
    inline void toggle_EARS_EDREQ_9() volatile
    {
        EARS ^= 1u << 9u;
    }

    /**
     * Get EARS's EDREQ_8 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 8.
     */
    inline bool get_EARS_EDREQ_8() volatile
    {
        return EARS & (1u << 8u);
    }

    /**
     * Set EARS's EDREQ_8 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 8.
     */
    inline void set_EARS_EDREQ_8() volatile
    {
        EARS |= 1u << 8u;
    }

    /**
     * Clear EARS's EDREQ_8 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 8.
     */
    inline void clear_EARS_EDREQ_8() volatile
    {
        EARS &= ~(1u << 8u);
    }

    /**
     * Toggle EARS's EDREQ_8 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 8.
     */
    inline void toggle_EARS_EDREQ_8() volatile
    {
        EARS ^= 1u << 8u;
    }

    /**
     * Get EARS's EDREQ_7 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 7.
     */
    inline bool get_EARS_EDREQ_7() volatile
    {
        return EARS & (1u << 7u);
    }

    /**
     * Set EARS's EDREQ_7 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 7.
     */
    inline void set_EARS_EDREQ_7() volatile
    {
        EARS |= 1u << 7u;
    }

    /**
     * Clear EARS's EDREQ_7 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 7.
     */
    inline void clear_EARS_EDREQ_7() volatile
    {
        EARS &= ~(1u << 7u);
    }

    /**
     * Toggle EARS's EDREQ_7 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 7.
     */
    inline void toggle_EARS_EDREQ_7() volatile
    {
        EARS ^= 1u << 7u;
    }

    /**
     * Get EARS's EDREQ_6 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 6.
     */
    inline bool get_EARS_EDREQ_6() volatile
    {
        return EARS & (1u << 6u);
    }

    /**
     * Set EARS's EDREQ_6 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 6.
     */
    inline void set_EARS_EDREQ_6() volatile
    {
        EARS |= 1u << 6u;
    }

    /**
     * Clear EARS's EDREQ_6 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 6.
     */
    inline void clear_EARS_EDREQ_6() volatile
    {
        EARS &= ~(1u << 6u);
    }

    /**
     * Toggle EARS's EDREQ_6 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 6.
     */
    inline void toggle_EARS_EDREQ_6() volatile
    {
        EARS ^= 1u << 6u;
    }

    /**
     * Get EARS's EDREQ_5 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 5.
     */
    inline bool get_EARS_EDREQ_5() volatile
    {
        return EARS & (1u << 5u);
    }

    /**
     * Set EARS's EDREQ_5 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 5.
     */
    inline void set_EARS_EDREQ_5() volatile
    {
        EARS |= 1u << 5u;
    }

    /**
     * Clear EARS's EDREQ_5 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 5.
     */
    inline void clear_EARS_EDREQ_5() volatile
    {
        EARS &= ~(1u << 5u);
    }

    /**
     * Toggle EARS's EDREQ_5 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 5.
     */
    inline void toggle_EARS_EDREQ_5() volatile
    {
        EARS ^= 1u << 5u;
    }

    /**
     * Get EARS's EDREQ_4 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 4.
     */
    inline bool get_EARS_EDREQ_4() volatile
    {
        return EARS & (1u << 4u);
    }

    /**
     * Set EARS's EDREQ_4 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 4.
     */
    inline void set_EARS_EDREQ_4() volatile
    {
        EARS |= 1u << 4u;
    }

    /**
     * Clear EARS's EDREQ_4 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 4.
     */
    inline void clear_EARS_EDREQ_4() volatile
    {
        EARS &= ~(1u << 4u);
    }

    /**
     * Toggle EARS's EDREQ_4 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 4.
     */
    inline void toggle_EARS_EDREQ_4() volatile
    {
        EARS ^= 1u << 4u;
    }

    /**
     * Get EARS's EDREQ_3 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 3.
     */
    inline bool get_EARS_EDREQ_3() volatile
    {
        return EARS & (1u << 3u);
    }

    /**
     * Set EARS's EDREQ_3 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 3.
     */
    inline void set_EARS_EDREQ_3() volatile
    {
        EARS |= 1u << 3u;
    }

    /**
     * Clear EARS's EDREQ_3 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 3.
     */
    inline void clear_EARS_EDREQ_3() volatile
    {
        EARS &= ~(1u << 3u);
    }

    /**
     * Toggle EARS's EDREQ_3 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 3.
     */
    inline void toggle_EARS_EDREQ_3() volatile
    {
        EARS ^= 1u << 3u;
    }

    /**
     * Get EARS's EDREQ_2 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 2.
     */
    inline bool get_EARS_EDREQ_2() volatile
    {
        return EARS & (1u << 2u);
    }

    /**
     * Set EARS's EDREQ_2 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 2.
     */
    inline void set_EARS_EDREQ_2() volatile
    {
        EARS |= 1u << 2u;
    }

    /**
     * Clear EARS's EDREQ_2 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 2.
     */
    inline void clear_EARS_EDREQ_2() volatile
    {
        EARS &= ~(1u << 2u);
    }

    /**
     * Toggle EARS's EDREQ_2 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 2.
     */
    inline void toggle_EARS_EDREQ_2() volatile
    {
        EARS ^= 1u << 2u;
    }

    /**
     * Get EARS's EDREQ_1 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 1.
     */
    inline bool get_EARS_EDREQ_1() volatile
    {
        return EARS & (1u << 1u);
    }

    /**
     * Set EARS's EDREQ_1 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 1.
     */
    inline void set_EARS_EDREQ_1() volatile
    {
        EARS |= 1u << 1u;
    }

    /**
     * Clear EARS's EDREQ_1 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 1.
     */
    inline void clear_EARS_EDREQ_1() volatile
    {
        EARS &= ~(1u << 1u);
    }

    /**
     * Toggle EARS's EDREQ_1 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 1.
     */
    inline void toggle_EARS_EDREQ_1() volatile
    {
        EARS ^= 1u << 1u;
    }

    /**
     * Get EARS's EDREQ_0 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 0.
     */
    inline bool get_EARS_EDREQ_0() volatile
    {
        return EARS & (1u << 0u);
    }

    /**
     * Set EARS's EDREQ_0 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 0.
     */
    inline void set_EARS_EDREQ_0() volatile
    {
        EARS |= 1u << 0u;
    }

    /**
     * Clear EARS's EDREQ_0 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 0.
     */
    inline void clear_EARS_EDREQ_0() volatile
    {
        EARS &= ~(1u << 0u);
    }

    /**
     * Toggle EARS's EDREQ_0 bit.
     *
     * Enable asynchronous DMA request in stop mode for channel 0.
     */
    inline void toggle_EARS_EDREQ_0() volatile
    {
        EARS ^= 1u << 0u;
    }

    /**
     * Get all of EARS's bit fields.
     *
     * (read-write) Enable Asynchronous Request in Stop
     */
    inline void get_EARS(bool &EDREQ_31, bool &EDREQ_30, bool &EDREQ_29,
                         bool &EDREQ_28, bool &EDREQ_27, bool &EDREQ_26,
                         bool &EDREQ_25, bool &EDREQ_24, bool &EDREQ_23,
                         bool &EDREQ_22, bool &EDREQ_21, bool &EDREQ_20,
                         bool &EDREQ_19, bool &EDREQ_18, bool &EDREQ_17,
                         bool &EDREQ_16, bool &EDREQ_15, bool &EDREQ_14,
                         bool &EDREQ_13, bool &EDREQ_12, bool &EDREQ_11,
                         bool &EDREQ_10, bool &EDREQ_9, bool &EDREQ_8,
                         bool &EDREQ_7, bool &EDREQ_6, bool &EDREQ_5,
                         bool &EDREQ_4, bool &EDREQ_3, bool &EDREQ_2,
                         bool &EDREQ_1, bool &EDREQ_0) volatile
    {
        uint32_t curr = EARS;

        EDREQ_31 = curr & (1u << 31u);
        EDREQ_30 = curr & (1u << 30u);
        EDREQ_29 = curr & (1u << 29u);
        EDREQ_28 = curr & (1u << 28u);
        EDREQ_27 = curr & (1u << 27u);
        EDREQ_26 = curr & (1u << 26u);
        EDREQ_25 = curr & (1u << 25u);
        EDREQ_24 = curr & (1u << 24u);
        EDREQ_23 = curr & (1u << 23u);
        EDREQ_22 = curr & (1u << 22u);
        EDREQ_21 = curr & (1u << 21u);
        EDREQ_20 = curr & (1u << 20u);
        EDREQ_19 = curr & (1u << 19u);
        EDREQ_18 = curr & (1u << 18u);
        EDREQ_17 = curr & (1u << 17u);
        EDREQ_16 = curr & (1u << 16u);
        EDREQ_15 = curr & (1u << 15u);
        EDREQ_14 = curr & (1u << 14u);
        EDREQ_13 = curr & (1u << 13u);
        EDREQ_12 = curr & (1u << 12u);
        EDREQ_11 = curr & (1u << 11u);
        EDREQ_10 = curr & (1u << 10u);
        EDREQ_9 = curr & (1u << 9u);
        EDREQ_8 = curr & (1u << 8u);
        EDREQ_7 = curr & (1u << 7u);
        EDREQ_6 = curr & (1u << 6u);
        EDREQ_5 = curr & (1u << 5u);
        EDREQ_4 = curr & (1u << 4u);
        EDREQ_3 = curr & (1u << 3u);
        EDREQ_2 = curr & (1u << 2u);
        EDREQ_1 = curr & (1u << 1u);
        EDREQ_0 = curr & (1u << 0u);
    }

    /**
     * Set all of EARS's bit fields.
     *
     * (read-write) Enable Asynchronous Request in Stop
     */
    inline void set_EARS(bool EDREQ_31, bool EDREQ_30, bool EDREQ_29,
                         bool EDREQ_28, bool EDREQ_27, bool EDREQ_26,
                         bool EDREQ_25, bool EDREQ_24, bool EDREQ_23,
                         bool EDREQ_22, bool EDREQ_21, bool EDREQ_20,
                         bool EDREQ_19, bool EDREQ_18, bool EDREQ_17,
                         bool EDREQ_16, bool EDREQ_15, bool EDREQ_14,
                         bool EDREQ_13, bool EDREQ_12, bool EDREQ_11,
                         bool EDREQ_10, bool EDREQ_9, bool EDREQ_8,
                         bool EDREQ_7, bool EDREQ_6, bool EDREQ_5,
                         bool EDREQ_4, bool EDREQ_3, bool EDREQ_2,
                         bool EDREQ_1, bool EDREQ_0) volatile
    {
        uint32_t curr = EARS;

        curr &= ~(0b1u << 31u);
        curr |= (EDREQ_31 & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (EDREQ_30 & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (EDREQ_29 & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (EDREQ_28 & 0b1u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (EDREQ_27 & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (EDREQ_26 & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (EDREQ_25 & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (EDREQ_24 & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (EDREQ_23 & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (EDREQ_22 & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (EDREQ_21 & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (EDREQ_20 & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (EDREQ_19 & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (EDREQ_18 & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (EDREQ_17 & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (EDREQ_16 & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (EDREQ_15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (EDREQ_14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (EDREQ_13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (EDREQ_12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (EDREQ_11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (EDREQ_10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (EDREQ_9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (EDREQ_8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (EDREQ_7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (EDREQ_6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (EDREQ_5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (EDREQ_4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (EDREQ_3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (EDREQ_2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (EDREQ_1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (EDREQ_0 & 0b1u) << 0u;

        EARS = curr;
    }

    /**
     * Get DCHPRI3's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI3_ECP() volatile
    {
        return DCHPRI3 & (1u << 7u);
    }

    /**
     * Set DCHPRI3's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI3_ECP() volatile
    {
        DCHPRI3 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI3's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI3_ECP() volatile
    {
        DCHPRI3 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI3's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI3_ECP() volatile
    {
        DCHPRI3 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI3's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI3_DPA() volatile
    {
        return DCHPRI3 & (1u << 6u);
    }

    /**
     * Set DCHPRI3's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI3_DPA() volatile
    {
        DCHPRI3 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI3's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI3_DPA() volatile
    {
        DCHPRI3 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI3's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI3_DPA() volatile
    {
        DCHPRI3 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI3's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI3_GRPPRI() volatile
    {
        return (DCHPRI3 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI3's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI3_CHPRI() volatile
    {
        return (DCHPRI3 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI3's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI3_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI3;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI3 = curr;
    }

    /**
     * Get all of DCHPRI3's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI3(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                            uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI3;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI3's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI3(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI3;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI3 = curr;
    }

    /**
     * Get DCHPRI2's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI2_ECP() volatile
    {
        return DCHPRI2 & (1u << 7u);
    }

    /**
     * Set DCHPRI2's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI2_ECP() volatile
    {
        DCHPRI2 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI2's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI2_ECP() volatile
    {
        DCHPRI2 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI2's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI2_ECP() volatile
    {
        DCHPRI2 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI2's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI2_DPA() volatile
    {
        return DCHPRI2 & (1u << 6u);
    }

    /**
     * Set DCHPRI2's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI2_DPA() volatile
    {
        DCHPRI2 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI2's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI2_DPA() volatile
    {
        DCHPRI2 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI2's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI2_DPA() volatile
    {
        DCHPRI2 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI2's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI2_GRPPRI() volatile
    {
        return (DCHPRI2 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI2's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI2_CHPRI() volatile
    {
        return (DCHPRI2 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI2's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI2_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI2;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI2 = curr;
    }

    /**
     * Get all of DCHPRI2's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI2(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                            uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI2;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI2's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI2(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI2;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI2 = curr;
    }

    /**
     * Get DCHPRI1's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI1_ECP() volatile
    {
        return DCHPRI1 & (1u << 7u);
    }

    /**
     * Set DCHPRI1's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI1_ECP() volatile
    {
        DCHPRI1 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI1's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI1_ECP() volatile
    {
        DCHPRI1 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI1's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI1_ECP() volatile
    {
        DCHPRI1 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI1's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI1_DPA() volatile
    {
        return DCHPRI1 & (1u << 6u);
    }

    /**
     * Set DCHPRI1's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI1_DPA() volatile
    {
        DCHPRI1 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI1's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI1_DPA() volatile
    {
        DCHPRI1 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI1's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI1_DPA() volatile
    {
        DCHPRI1 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI1's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI1_GRPPRI() volatile
    {
        return (DCHPRI1 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI1's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI1_CHPRI() volatile
    {
        return (DCHPRI1 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI1's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI1_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI1;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI1 = curr;
    }

    /**
     * Get all of DCHPRI1's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI1(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                            uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI1;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI1's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI1(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI1;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI1 = curr;
    }

    /**
     * Get DCHPRI0's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI0_ECP() volatile
    {
        return DCHPRI0 & (1u << 7u);
    }

    /**
     * Set DCHPRI0's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI0_ECP() volatile
    {
        DCHPRI0 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI0's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI0_ECP() volatile
    {
        DCHPRI0 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI0's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI0_ECP() volatile
    {
        DCHPRI0 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI0's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI0_DPA() volatile
    {
        return DCHPRI0 & (1u << 6u);
    }

    /**
     * Set DCHPRI0's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI0_DPA() volatile
    {
        DCHPRI0 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI0's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI0_DPA() volatile
    {
        DCHPRI0 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI0's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI0_DPA() volatile
    {
        DCHPRI0 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI0's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI0_GRPPRI() volatile
    {
        return (DCHPRI0 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI0's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI0_CHPRI() volatile
    {
        return (DCHPRI0 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI0's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI0_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI0;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI0 = curr;
    }

    /**
     * Get all of DCHPRI0's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI0(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                            uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI0;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI0's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI0(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI0;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI0 = curr;
    }

    /**
     * Get DCHPRI7's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI7_ECP() volatile
    {
        return DCHPRI7 & (1u << 7u);
    }

    /**
     * Set DCHPRI7's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI7_ECP() volatile
    {
        DCHPRI7 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI7's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI7_ECP() volatile
    {
        DCHPRI7 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI7's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI7_ECP() volatile
    {
        DCHPRI7 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI7's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI7_DPA() volatile
    {
        return DCHPRI7 & (1u << 6u);
    }

    /**
     * Set DCHPRI7's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI7_DPA() volatile
    {
        DCHPRI7 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI7's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI7_DPA() volatile
    {
        DCHPRI7 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI7's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI7_DPA() volatile
    {
        DCHPRI7 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI7's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI7_GRPPRI() volatile
    {
        return (DCHPRI7 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI7's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI7_CHPRI() volatile
    {
        return (DCHPRI7 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI7's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI7_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI7;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI7 = curr;
    }

    /**
     * Get all of DCHPRI7's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI7(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                            uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI7;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI7's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI7(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI7;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI7 = curr;
    }

    /**
     * Get DCHPRI6's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI6_ECP() volatile
    {
        return DCHPRI6 & (1u << 7u);
    }

    /**
     * Set DCHPRI6's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI6_ECP() volatile
    {
        DCHPRI6 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI6's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI6_ECP() volatile
    {
        DCHPRI6 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI6's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI6_ECP() volatile
    {
        DCHPRI6 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI6's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI6_DPA() volatile
    {
        return DCHPRI6 & (1u << 6u);
    }

    /**
     * Set DCHPRI6's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI6_DPA() volatile
    {
        DCHPRI6 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI6's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI6_DPA() volatile
    {
        DCHPRI6 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI6's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI6_DPA() volatile
    {
        DCHPRI6 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI6's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI6_GRPPRI() volatile
    {
        return (DCHPRI6 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI6's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI6_CHPRI() volatile
    {
        return (DCHPRI6 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI6's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI6_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI6;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI6 = curr;
    }

    /**
     * Get all of DCHPRI6's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI6(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                            uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI6;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI6's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI6(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI6;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI6 = curr;
    }

    /**
     * Get DCHPRI5's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI5_ECP() volatile
    {
        return DCHPRI5 & (1u << 7u);
    }

    /**
     * Set DCHPRI5's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI5_ECP() volatile
    {
        DCHPRI5 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI5's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI5_ECP() volatile
    {
        DCHPRI5 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI5's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI5_ECP() volatile
    {
        DCHPRI5 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI5's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI5_DPA() volatile
    {
        return DCHPRI5 & (1u << 6u);
    }

    /**
     * Set DCHPRI5's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI5_DPA() volatile
    {
        DCHPRI5 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI5's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI5_DPA() volatile
    {
        DCHPRI5 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI5's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI5_DPA() volatile
    {
        DCHPRI5 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI5's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI5_GRPPRI() volatile
    {
        return (DCHPRI5 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI5's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI5_CHPRI() volatile
    {
        return (DCHPRI5 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI5's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI5_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI5;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI5 = curr;
    }

    /**
     * Get all of DCHPRI5's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI5(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                            uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI5;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI5's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI5(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI5;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI5 = curr;
    }

    /**
     * Get DCHPRI4's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI4_ECP() volatile
    {
        return DCHPRI4 & (1u << 7u);
    }

    /**
     * Set DCHPRI4's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI4_ECP() volatile
    {
        DCHPRI4 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI4's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI4_ECP() volatile
    {
        DCHPRI4 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI4's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI4_ECP() volatile
    {
        DCHPRI4 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI4's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI4_DPA() volatile
    {
        return DCHPRI4 & (1u << 6u);
    }

    /**
     * Set DCHPRI4's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI4_DPA() volatile
    {
        DCHPRI4 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI4's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI4_DPA() volatile
    {
        DCHPRI4 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI4's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI4_DPA() volatile
    {
        DCHPRI4 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI4's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI4_GRPPRI() volatile
    {
        return (DCHPRI4 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI4's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI4_CHPRI() volatile
    {
        return (DCHPRI4 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI4's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI4_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI4;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI4 = curr;
    }

    /**
     * Get all of DCHPRI4's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI4(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                            uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI4;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI4's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI4(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI4;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI4 = curr;
    }

    /**
     * Get DCHPRI11's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI11_ECP() volatile
    {
        return DCHPRI11 & (1u << 7u);
    }

    /**
     * Set DCHPRI11's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI11_ECP() volatile
    {
        DCHPRI11 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI11's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI11_ECP() volatile
    {
        DCHPRI11 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI11's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI11_ECP() volatile
    {
        DCHPRI11 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI11's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI11_DPA() volatile
    {
        return DCHPRI11 & (1u << 6u);
    }

    /**
     * Set DCHPRI11's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI11_DPA() volatile
    {
        DCHPRI11 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI11's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI11_DPA() volatile
    {
        DCHPRI11 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI11's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI11_DPA() volatile
    {
        DCHPRI11 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI11's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI11_GRPPRI() volatile
    {
        return (DCHPRI11 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI11's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI11_CHPRI() volatile
    {
        return (DCHPRI11 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI11's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI11_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI11;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI11 = curr;
    }

    /**
     * Get all of DCHPRI11's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI11(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI11;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI11's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI11(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI11;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI11 = curr;
    }

    /**
     * Get DCHPRI10's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI10_ECP() volatile
    {
        return DCHPRI10 & (1u << 7u);
    }

    /**
     * Set DCHPRI10's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI10_ECP() volatile
    {
        DCHPRI10 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI10's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI10_ECP() volatile
    {
        DCHPRI10 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI10's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI10_ECP() volatile
    {
        DCHPRI10 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI10's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI10_DPA() volatile
    {
        return DCHPRI10 & (1u << 6u);
    }

    /**
     * Set DCHPRI10's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI10_DPA() volatile
    {
        DCHPRI10 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI10's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI10_DPA() volatile
    {
        DCHPRI10 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI10's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI10_DPA() volatile
    {
        DCHPRI10 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI10's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI10_GRPPRI() volatile
    {
        return (DCHPRI10 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI10's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI10_CHPRI() volatile
    {
        return (DCHPRI10 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI10's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI10_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI10;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI10 = curr;
    }

    /**
     * Get all of DCHPRI10's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI10(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI10;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI10's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI10(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI10;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI10 = curr;
    }

    /**
     * Get DCHPRI9's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI9_ECP() volatile
    {
        return DCHPRI9 & (1u << 7u);
    }

    /**
     * Set DCHPRI9's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI9_ECP() volatile
    {
        DCHPRI9 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI9's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI9_ECP() volatile
    {
        DCHPRI9 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI9's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI9_ECP() volatile
    {
        DCHPRI9 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI9's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI9_DPA() volatile
    {
        return DCHPRI9 & (1u << 6u);
    }

    /**
     * Set DCHPRI9's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI9_DPA() volatile
    {
        DCHPRI9 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI9's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI9_DPA() volatile
    {
        DCHPRI9 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI9's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI9_DPA() volatile
    {
        DCHPRI9 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI9's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI9_GRPPRI() volatile
    {
        return (DCHPRI9 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI9's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI9_CHPRI() volatile
    {
        return (DCHPRI9 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI9's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI9_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI9;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI9 = curr;
    }

    /**
     * Get all of DCHPRI9's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI9(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                            uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI9;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI9's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI9(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI9;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI9 = curr;
    }

    /**
     * Get DCHPRI8's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI8_ECP() volatile
    {
        return DCHPRI8 & (1u << 7u);
    }

    /**
     * Set DCHPRI8's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI8_ECP() volatile
    {
        DCHPRI8 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI8's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI8_ECP() volatile
    {
        DCHPRI8 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI8's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI8_ECP() volatile
    {
        DCHPRI8 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI8's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI8_DPA() volatile
    {
        return DCHPRI8 & (1u << 6u);
    }

    /**
     * Set DCHPRI8's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI8_DPA() volatile
    {
        DCHPRI8 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI8's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI8_DPA() volatile
    {
        DCHPRI8 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI8's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI8_DPA() volatile
    {
        DCHPRI8 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI8's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI8_GRPPRI() volatile
    {
        return (DCHPRI8 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI8's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI8_CHPRI() volatile
    {
        return (DCHPRI8 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI8's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI8_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI8;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI8 = curr;
    }

    /**
     * Get all of DCHPRI8's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI8(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                            uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI8;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI8's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI8(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI8;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI8 = curr;
    }

    /**
     * Get DCHPRI15's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI15_ECP() volatile
    {
        return DCHPRI15 & (1u << 7u);
    }

    /**
     * Set DCHPRI15's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI15_ECP() volatile
    {
        DCHPRI15 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI15's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI15_ECP() volatile
    {
        DCHPRI15 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI15's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI15_ECP() volatile
    {
        DCHPRI15 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI15's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI15_DPA() volatile
    {
        return DCHPRI15 & (1u << 6u);
    }

    /**
     * Set DCHPRI15's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI15_DPA() volatile
    {
        DCHPRI15 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI15's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI15_DPA() volatile
    {
        DCHPRI15 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI15's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI15_DPA() volatile
    {
        DCHPRI15 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI15's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI15_GRPPRI() volatile
    {
        return (DCHPRI15 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI15's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI15_CHPRI() volatile
    {
        return (DCHPRI15 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI15's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI15_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI15;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI15 = curr;
    }

    /**
     * Get all of DCHPRI15's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI15(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI15;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI15's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI15(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI15;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI15 = curr;
    }

    /**
     * Get DCHPRI14's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI14_ECP() volatile
    {
        return DCHPRI14 & (1u << 7u);
    }

    /**
     * Set DCHPRI14's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI14_ECP() volatile
    {
        DCHPRI14 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI14's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI14_ECP() volatile
    {
        DCHPRI14 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI14's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI14_ECP() volatile
    {
        DCHPRI14 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI14's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI14_DPA() volatile
    {
        return DCHPRI14 & (1u << 6u);
    }

    /**
     * Set DCHPRI14's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI14_DPA() volatile
    {
        DCHPRI14 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI14's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI14_DPA() volatile
    {
        DCHPRI14 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI14's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI14_DPA() volatile
    {
        DCHPRI14 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI14's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI14_GRPPRI() volatile
    {
        return (DCHPRI14 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI14's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI14_CHPRI() volatile
    {
        return (DCHPRI14 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI14's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI14_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI14;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI14 = curr;
    }

    /**
     * Get all of DCHPRI14's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI14(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI14;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI14's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI14(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI14;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI14 = curr;
    }

    /**
     * Get DCHPRI13's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI13_ECP() volatile
    {
        return DCHPRI13 & (1u << 7u);
    }

    /**
     * Set DCHPRI13's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI13_ECP() volatile
    {
        DCHPRI13 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI13's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI13_ECP() volatile
    {
        DCHPRI13 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI13's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI13_ECP() volatile
    {
        DCHPRI13 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI13's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI13_DPA() volatile
    {
        return DCHPRI13 & (1u << 6u);
    }

    /**
     * Set DCHPRI13's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI13_DPA() volatile
    {
        DCHPRI13 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI13's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI13_DPA() volatile
    {
        DCHPRI13 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI13's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI13_DPA() volatile
    {
        DCHPRI13 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI13's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI13_GRPPRI() volatile
    {
        return (DCHPRI13 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI13's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI13_CHPRI() volatile
    {
        return (DCHPRI13 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI13's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI13_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI13;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI13 = curr;
    }

    /**
     * Get all of DCHPRI13's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI13(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI13;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI13's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI13(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI13;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI13 = curr;
    }

    /**
     * Get DCHPRI12's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI12_ECP() volatile
    {
        return DCHPRI12 & (1u << 7u);
    }

    /**
     * Set DCHPRI12's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI12_ECP() volatile
    {
        DCHPRI12 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI12's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI12_ECP() volatile
    {
        DCHPRI12 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI12's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI12_ECP() volatile
    {
        DCHPRI12 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI12's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI12_DPA() volatile
    {
        return DCHPRI12 & (1u << 6u);
    }

    /**
     * Set DCHPRI12's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI12_DPA() volatile
    {
        DCHPRI12 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI12's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI12_DPA() volatile
    {
        DCHPRI12 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI12's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI12_DPA() volatile
    {
        DCHPRI12 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI12's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI12_GRPPRI() volatile
    {
        return (DCHPRI12 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI12's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI12_CHPRI() volatile
    {
        return (DCHPRI12 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI12's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI12_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI12;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI12 = curr;
    }

    /**
     * Get all of DCHPRI12's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI12(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI12;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI12's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI12(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI12;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI12 = curr;
    }

    /**
     * Get DCHPRI19's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI19_ECP() volatile
    {
        return DCHPRI19 & (1u << 7u);
    }

    /**
     * Set DCHPRI19's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI19_ECP() volatile
    {
        DCHPRI19 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI19's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI19_ECP() volatile
    {
        DCHPRI19 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI19's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI19_ECP() volatile
    {
        DCHPRI19 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI19's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI19_DPA() volatile
    {
        return DCHPRI19 & (1u << 6u);
    }

    /**
     * Set DCHPRI19's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI19_DPA() volatile
    {
        DCHPRI19 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI19's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI19_DPA() volatile
    {
        DCHPRI19 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI19's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI19_DPA() volatile
    {
        DCHPRI19 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI19's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI19_GRPPRI() volatile
    {
        return (DCHPRI19 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI19's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI19_CHPRI() volatile
    {
        return (DCHPRI19 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI19's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI19_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI19;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI19 = curr;
    }

    /**
     * Get all of DCHPRI19's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI19(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI19;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI19's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI19(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI19;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI19 = curr;
    }

    /**
     * Get DCHPRI18's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI18_ECP() volatile
    {
        return DCHPRI18 & (1u << 7u);
    }

    /**
     * Set DCHPRI18's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI18_ECP() volatile
    {
        DCHPRI18 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI18's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI18_ECP() volatile
    {
        DCHPRI18 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI18's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI18_ECP() volatile
    {
        DCHPRI18 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI18's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI18_DPA() volatile
    {
        return DCHPRI18 & (1u << 6u);
    }

    /**
     * Set DCHPRI18's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI18_DPA() volatile
    {
        DCHPRI18 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI18's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI18_DPA() volatile
    {
        DCHPRI18 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI18's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI18_DPA() volatile
    {
        DCHPRI18 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI18's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI18_GRPPRI() volatile
    {
        return (DCHPRI18 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI18's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI18_CHPRI() volatile
    {
        return (DCHPRI18 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI18's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI18_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI18;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI18 = curr;
    }

    /**
     * Get all of DCHPRI18's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI18(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI18;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI18's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI18(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI18;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI18 = curr;
    }

    /**
     * Get DCHPRI17's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI17_ECP() volatile
    {
        return DCHPRI17 & (1u << 7u);
    }

    /**
     * Set DCHPRI17's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI17_ECP() volatile
    {
        DCHPRI17 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI17's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI17_ECP() volatile
    {
        DCHPRI17 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI17's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI17_ECP() volatile
    {
        DCHPRI17 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI17's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI17_DPA() volatile
    {
        return DCHPRI17 & (1u << 6u);
    }

    /**
     * Set DCHPRI17's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI17_DPA() volatile
    {
        DCHPRI17 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI17's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI17_DPA() volatile
    {
        DCHPRI17 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI17's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI17_DPA() volatile
    {
        DCHPRI17 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI17's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI17_GRPPRI() volatile
    {
        return (DCHPRI17 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI17's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI17_CHPRI() volatile
    {
        return (DCHPRI17 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI17's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI17_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI17;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI17 = curr;
    }

    /**
     * Get all of DCHPRI17's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI17(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI17;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI17's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI17(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI17;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI17 = curr;
    }

    /**
     * Get DCHPRI16's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI16_ECP() volatile
    {
        return DCHPRI16 & (1u << 7u);
    }

    /**
     * Set DCHPRI16's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI16_ECP() volatile
    {
        DCHPRI16 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI16's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI16_ECP() volatile
    {
        DCHPRI16 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI16's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI16_ECP() volatile
    {
        DCHPRI16 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI16's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI16_DPA() volatile
    {
        return DCHPRI16 & (1u << 6u);
    }

    /**
     * Set DCHPRI16's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI16_DPA() volatile
    {
        DCHPRI16 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI16's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI16_DPA() volatile
    {
        DCHPRI16 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI16's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI16_DPA() volatile
    {
        DCHPRI16 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI16's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI16_GRPPRI() volatile
    {
        return (DCHPRI16 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI16's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI16_CHPRI() volatile
    {
        return (DCHPRI16 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI16's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI16_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI16;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI16 = curr;
    }

    /**
     * Get all of DCHPRI16's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI16(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI16;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI16's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI16(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI16;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI16 = curr;
    }

    /**
     * Get DCHPRI23's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI23_ECP() volatile
    {
        return DCHPRI23 & (1u << 7u);
    }

    /**
     * Set DCHPRI23's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI23_ECP() volatile
    {
        DCHPRI23 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI23's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI23_ECP() volatile
    {
        DCHPRI23 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI23's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI23_ECP() volatile
    {
        DCHPRI23 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI23's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI23_DPA() volatile
    {
        return DCHPRI23 & (1u << 6u);
    }

    /**
     * Set DCHPRI23's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI23_DPA() volatile
    {
        DCHPRI23 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI23's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI23_DPA() volatile
    {
        DCHPRI23 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI23's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI23_DPA() volatile
    {
        DCHPRI23 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI23's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI23_GRPPRI() volatile
    {
        return (DCHPRI23 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI23's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI23_CHPRI() volatile
    {
        return (DCHPRI23 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI23's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI23_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI23;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI23 = curr;
    }

    /**
     * Get all of DCHPRI23's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI23(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI23;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI23's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI23(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI23;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI23 = curr;
    }

    /**
     * Get DCHPRI22's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI22_ECP() volatile
    {
        return DCHPRI22 & (1u << 7u);
    }

    /**
     * Set DCHPRI22's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI22_ECP() volatile
    {
        DCHPRI22 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI22's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI22_ECP() volatile
    {
        DCHPRI22 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI22's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI22_ECP() volatile
    {
        DCHPRI22 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI22's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI22_DPA() volatile
    {
        return DCHPRI22 & (1u << 6u);
    }

    /**
     * Set DCHPRI22's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI22_DPA() volatile
    {
        DCHPRI22 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI22's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI22_DPA() volatile
    {
        DCHPRI22 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI22's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI22_DPA() volatile
    {
        DCHPRI22 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI22's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI22_GRPPRI() volatile
    {
        return (DCHPRI22 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI22's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI22_CHPRI() volatile
    {
        return (DCHPRI22 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI22's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI22_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI22;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI22 = curr;
    }

    /**
     * Get all of DCHPRI22's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI22(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI22;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI22's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI22(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI22;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI22 = curr;
    }

    /**
     * Get DCHPRI21's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI21_ECP() volatile
    {
        return DCHPRI21 & (1u << 7u);
    }

    /**
     * Set DCHPRI21's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI21_ECP() volatile
    {
        DCHPRI21 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI21's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI21_ECP() volatile
    {
        DCHPRI21 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI21's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI21_ECP() volatile
    {
        DCHPRI21 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI21's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI21_DPA() volatile
    {
        return DCHPRI21 & (1u << 6u);
    }

    /**
     * Set DCHPRI21's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI21_DPA() volatile
    {
        DCHPRI21 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI21's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI21_DPA() volatile
    {
        DCHPRI21 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI21's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI21_DPA() volatile
    {
        DCHPRI21 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI21's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI21_GRPPRI() volatile
    {
        return (DCHPRI21 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI21's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI21_CHPRI() volatile
    {
        return (DCHPRI21 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI21's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI21_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI21;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI21 = curr;
    }

    /**
     * Get all of DCHPRI21's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI21(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI21;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI21's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI21(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI21;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI21 = curr;
    }

    /**
     * Get DCHPRI20's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI20_ECP() volatile
    {
        return DCHPRI20 & (1u << 7u);
    }

    /**
     * Set DCHPRI20's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI20_ECP() volatile
    {
        DCHPRI20 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI20's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI20_ECP() volatile
    {
        DCHPRI20 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI20's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI20_ECP() volatile
    {
        DCHPRI20 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI20's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI20_DPA() volatile
    {
        return DCHPRI20 & (1u << 6u);
    }

    /**
     * Set DCHPRI20's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI20_DPA() volatile
    {
        DCHPRI20 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI20's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI20_DPA() volatile
    {
        DCHPRI20 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI20's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI20_DPA() volatile
    {
        DCHPRI20 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI20's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI20_GRPPRI() volatile
    {
        return (DCHPRI20 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI20's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI20_CHPRI() volatile
    {
        return (DCHPRI20 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI20's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI20_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI20;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI20 = curr;
    }

    /**
     * Get all of DCHPRI20's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI20(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI20;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI20's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI20(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI20;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI20 = curr;
    }

    /**
     * Get DCHPRI27's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI27_ECP() volatile
    {
        return DCHPRI27 & (1u << 7u);
    }

    /**
     * Set DCHPRI27's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI27_ECP() volatile
    {
        DCHPRI27 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI27's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI27_ECP() volatile
    {
        DCHPRI27 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI27's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI27_ECP() volatile
    {
        DCHPRI27 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI27's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI27_DPA() volatile
    {
        return DCHPRI27 & (1u << 6u);
    }

    /**
     * Set DCHPRI27's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI27_DPA() volatile
    {
        DCHPRI27 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI27's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI27_DPA() volatile
    {
        DCHPRI27 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI27's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI27_DPA() volatile
    {
        DCHPRI27 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI27's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI27_GRPPRI() volatile
    {
        return (DCHPRI27 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI27's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI27_CHPRI() volatile
    {
        return (DCHPRI27 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI27's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI27_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI27;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI27 = curr;
    }

    /**
     * Get all of DCHPRI27's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI27(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI27;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI27's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI27(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI27;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI27 = curr;
    }

    /**
     * Get DCHPRI26's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI26_ECP() volatile
    {
        return DCHPRI26 & (1u << 7u);
    }

    /**
     * Set DCHPRI26's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI26_ECP() volatile
    {
        DCHPRI26 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI26's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI26_ECP() volatile
    {
        DCHPRI26 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI26's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI26_ECP() volatile
    {
        DCHPRI26 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI26's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI26_DPA() volatile
    {
        return DCHPRI26 & (1u << 6u);
    }

    /**
     * Set DCHPRI26's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI26_DPA() volatile
    {
        DCHPRI26 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI26's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI26_DPA() volatile
    {
        DCHPRI26 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI26's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI26_DPA() volatile
    {
        DCHPRI26 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI26's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI26_GRPPRI() volatile
    {
        return (DCHPRI26 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI26's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI26_CHPRI() volatile
    {
        return (DCHPRI26 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI26's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI26_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI26;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI26 = curr;
    }

    /**
     * Get all of DCHPRI26's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI26(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI26;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI26's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI26(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI26;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI26 = curr;
    }

    /**
     * Get DCHPRI25's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI25_ECP() volatile
    {
        return DCHPRI25 & (1u << 7u);
    }

    /**
     * Set DCHPRI25's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI25_ECP() volatile
    {
        DCHPRI25 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI25's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI25_ECP() volatile
    {
        DCHPRI25 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI25's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI25_ECP() volatile
    {
        DCHPRI25 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI25's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI25_DPA() volatile
    {
        return DCHPRI25 & (1u << 6u);
    }

    /**
     * Set DCHPRI25's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI25_DPA() volatile
    {
        DCHPRI25 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI25's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI25_DPA() volatile
    {
        DCHPRI25 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI25's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI25_DPA() volatile
    {
        DCHPRI25 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI25's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI25_GRPPRI() volatile
    {
        return (DCHPRI25 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI25's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI25_CHPRI() volatile
    {
        return (DCHPRI25 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI25's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI25_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI25;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI25 = curr;
    }

    /**
     * Get all of DCHPRI25's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI25(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI25;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI25's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI25(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI25;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI25 = curr;
    }

    /**
     * Get DCHPRI24's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI24_ECP() volatile
    {
        return DCHPRI24 & (1u << 7u);
    }

    /**
     * Set DCHPRI24's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI24_ECP() volatile
    {
        DCHPRI24 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI24's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI24_ECP() volatile
    {
        DCHPRI24 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI24's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI24_ECP() volatile
    {
        DCHPRI24 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI24's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI24_DPA() volatile
    {
        return DCHPRI24 & (1u << 6u);
    }

    /**
     * Set DCHPRI24's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI24_DPA() volatile
    {
        DCHPRI24 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI24's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI24_DPA() volatile
    {
        DCHPRI24 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI24's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI24_DPA() volatile
    {
        DCHPRI24 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI24's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI24_GRPPRI() volatile
    {
        return (DCHPRI24 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI24's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI24_CHPRI() volatile
    {
        return (DCHPRI24 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI24's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI24_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI24;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI24 = curr;
    }

    /**
     * Get all of DCHPRI24's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI24(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI24;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI24's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI24(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI24;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI24 = curr;
    }

    /**
     * Get DCHPRI31's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI31_ECP() volatile
    {
        return DCHPRI31 & (1u << 7u);
    }

    /**
     * Set DCHPRI31's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI31_ECP() volatile
    {
        DCHPRI31 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI31's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI31_ECP() volatile
    {
        DCHPRI31 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI31's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI31_ECP() volatile
    {
        DCHPRI31 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI31's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI31_DPA() volatile
    {
        return DCHPRI31 & (1u << 6u);
    }

    /**
     * Set DCHPRI31's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI31_DPA() volatile
    {
        DCHPRI31 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI31's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI31_DPA() volatile
    {
        DCHPRI31 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI31's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI31_DPA() volatile
    {
        DCHPRI31 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI31's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI31_GRPPRI() volatile
    {
        return (DCHPRI31 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI31's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI31_CHPRI() volatile
    {
        return (DCHPRI31 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI31's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI31_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI31;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI31 = curr;
    }

    /**
     * Get all of DCHPRI31's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI31(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI31;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI31's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI31(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI31;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI31 = curr;
    }

    /**
     * Get DCHPRI30's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI30_ECP() volatile
    {
        return DCHPRI30 & (1u << 7u);
    }

    /**
     * Set DCHPRI30's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI30_ECP() volatile
    {
        DCHPRI30 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI30's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI30_ECP() volatile
    {
        DCHPRI30 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI30's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI30_ECP() volatile
    {
        DCHPRI30 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI30's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI30_DPA() volatile
    {
        return DCHPRI30 & (1u << 6u);
    }

    /**
     * Set DCHPRI30's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI30_DPA() volatile
    {
        DCHPRI30 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI30's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI30_DPA() volatile
    {
        DCHPRI30 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI30's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI30_DPA() volatile
    {
        DCHPRI30 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI30's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI30_GRPPRI() volatile
    {
        return (DCHPRI30 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI30's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI30_CHPRI() volatile
    {
        return (DCHPRI30 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI30's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI30_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI30;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI30 = curr;
    }

    /**
     * Get all of DCHPRI30's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI30(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI30;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI30's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI30(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI30;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI30 = curr;
    }

    /**
     * Get DCHPRI29's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI29_ECP() volatile
    {
        return DCHPRI29 & (1u << 7u);
    }

    /**
     * Set DCHPRI29's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI29_ECP() volatile
    {
        DCHPRI29 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI29's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI29_ECP() volatile
    {
        DCHPRI29 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI29's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI29_ECP() volatile
    {
        DCHPRI29 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI29's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI29_DPA() volatile
    {
        return DCHPRI29 & (1u << 6u);
    }

    /**
     * Set DCHPRI29's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI29_DPA() volatile
    {
        DCHPRI29 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI29's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI29_DPA() volatile
    {
        DCHPRI29 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI29's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI29_DPA() volatile
    {
        DCHPRI29 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI29's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI29_GRPPRI() volatile
    {
        return (DCHPRI29 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI29's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI29_CHPRI() volatile
    {
        return (DCHPRI29 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI29's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI29_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI29;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI29 = curr;
    }

    /**
     * Get all of DCHPRI29's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI29(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI29;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI29's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI29(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI29;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI29 = curr;
    }

    /**
     * Get DCHPRI28's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline bool get_DCHPRI28_ECP() volatile
    {
        return DCHPRI28 & (1u << 7u);
    }

    /**
     * Set DCHPRI28's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void set_DCHPRI28_ECP() volatile
    {
        DCHPRI28 |= 1u << 7u;
    }

    /**
     * Clear DCHPRI28's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void clear_DCHPRI28_ECP() volatile
    {
        DCHPRI28 &= ~(1u << 7u);
    }

    /**
     * Toggle DCHPRI28's ECP bit.
     *
     * Enable Channel Preemption. This field resets to 0.
     */
    inline void toggle_DCHPRI28_ECP() volatile
    {
        DCHPRI28 ^= 1u << 7u;
    }

    /**
     * Get DCHPRI28's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline bool get_DCHPRI28_DPA() volatile
    {
        return DCHPRI28 & (1u << 6u);
    }

    /**
     * Set DCHPRI28's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void set_DCHPRI28_DPA() volatile
    {
        DCHPRI28 |= 1u << 6u;
    }

    /**
     * Clear DCHPRI28's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void clear_DCHPRI28_DPA() volatile
    {
        DCHPRI28 &= ~(1u << 6u);
    }

    /**
     * Toggle DCHPRI28's DPA bit.
     *
     * Disable Preempt Ability. This field resets to 0.
     */
    inline void toggle_DCHPRI28_DPA() volatile
    {
        DCHPRI28 ^= 1u << 6u;
    }

    /**
     * Get DCHPRI28's GRPPRI field.
     *
     * Channel n Current Group Priority
     */
    inline uint8_t get_DCHPRI28_GRPPRI() volatile
    {
        return (DCHPRI28 >> 4u) & 0b11u;
    }

    /**
     * Get DCHPRI28's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline uint8_t get_DCHPRI28_CHPRI() volatile
    {
        return (DCHPRI28 >> 0u) & 0b1111u;
    }

    /**
     * Set DCHPRI28's CHPRI field.
     *
     * Channel n Arbitration Priority
     */
    inline void set_DCHPRI28_CHPRI(uint8_t value) volatile
    {
        uint8_t curr = DCHPRI28;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DCHPRI28 = curr;
    }

    /**
     * Get all of DCHPRI28's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void get_DCHPRI28(bool &ECP, bool &DPA, uint8_t &GRPPRI,
                             uint8_t &CHPRI) volatile
    {
        uint8_t curr = DCHPRI28;

        ECP = curr & (1u << 7u);
        DPA = curr & (1u << 6u);
        GRPPRI = (curr >> 4u) & 0b11u;
        CHPRI = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of DCHPRI28's bit fields.
     *
     * (read-write) Channel Priority
     */
    inline void set_DCHPRI28(bool ECP, bool DPA, uint8_t CHPRI) volatile
    {
        uint8_t curr = DCHPRI28;

        curr &= ~(0b1u << 7u);
        curr |= (ECP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DPA & 0b1u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (CHPRI & 0b1111u) << 0u;

        DCHPRI28 = curr;
    }

    /**
     * Get TCD0_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD0_SADDR_SADDR() volatile
    {
        return (TCD0_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD0_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD0_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD0_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD0_SADDR = curr;
    }

    /**
     * Get TCD0_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD0_SOFF_SOFF() volatile
    {
        return (TCD0_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD0_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD0_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD0_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD0_SOFF = curr;
    }

    /**
     * Get TCD0_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD0_ATTR_SMOD get_TCD0_ATTR_SMOD() volatile
    {
        return DMA0_TCD0_ATTR_SMOD((TCD0_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD0_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD0_ATTR_SMOD(DMA0_TCD0_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD0_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD0_ATTR = curr;
    }

    /**
     * Get TCD0_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD0_ATTR_SSIZE get_TCD0_ATTR_SSIZE() volatile
    {
        return DMA0_TCD0_ATTR_SSIZE((TCD0_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD0_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD0_ATTR_SSIZE(DMA0_TCD0_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD0_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD0_ATTR = curr;
    }

    /**
     * Get TCD0_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD0_ATTR_DMOD() volatile
    {
        return (TCD0_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD0_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD0_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD0_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD0_ATTR = curr;
    }

    /**
     * Get TCD0_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD0_ATTR_DSIZE() volatile
    {
        return (TCD0_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD0_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD0_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD0_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD0_ATTR = curr;
    }

    /**
     * Get all of TCD0_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD0_ATTR(DMA0_TCD0_ATTR_SMOD &SMOD,
                              DMA0_TCD0_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                              uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD0_ATTR;

        SMOD = DMA0_TCD0_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD0_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD0_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD0_ATTR(DMA0_TCD0_ATTR_SMOD SMOD,
                              DMA0_TCD0_ATTR_SSIZE SSIZE, uint8_t DMOD,
                              uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD0_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD0_ATTR = curr;
    }

    /**
     * Get TCD0_NBYTES_MLNO's NBYTES field.
     *
     * Minor Byte Transfer Count
     */
    inline uint32_t get_TCD0_NBYTES_MLNO_NBYTES() volatile
    {
        return (TCD0_NBYTES_MLNO >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD0_NBYTES_MLNO's NBYTES field.
     *
     * Minor Byte Transfer Count
     */
    inline void set_TCD0_NBYTES_MLNO_NBYTES(uint32_t value) volatile
    {
        uint32_t curr = TCD0_NBYTES_MLNO;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD0_NBYTES_MLNO = curr;
    }

    /**
     * Get TCD0_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD0_SLAST_SLAST() volatile
    {
        return (TCD0_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD0_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD0_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD0_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD0_SLAST = curr;
    }

    /**
     * Get TCD0_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD0_DADDR_DADDR() volatile
    {
        return (TCD0_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD0_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD0_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD0_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD0_DADDR = curr;
    }

    /**
     * Get TCD0_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD0_DOFF_DOFF() volatile
    {
        return (TCD0_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD0_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD0_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD0_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD0_DOFF = curr;
    }

    /**
     * Get TCD0_CITER_ELINKNO's ELINK bit.
     *
     * Enable channel-to-channel linking on minor-loop complete
     */
    inline bool get_TCD0_CITER_ELINKNO_ELINK() volatile
    {
        return TCD0_CITER_ELINKNO & (1u << 15u);
    }

    /**
     * Set TCD0_CITER_ELINKNO's ELINK bit.
     *
     * Enable channel-to-channel linking on minor-loop complete
     */
    inline void set_TCD0_CITER_ELINKNO_ELINK() volatile
    {
        TCD0_CITER_ELINKNO |= 1u << 15u;
    }

    /**
     * Clear TCD0_CITER_ELINKNO's ELINK bit.
     *
     * Enable channel-to-channel linking on minor-loop complete
     */
    inline void clear_TCD0_CITER_ELINKNO_ELINK() volatile
    {
        TCD0_CITER_ELINKNO &= ~(1u << 15u);
    }

    /**
     * Toggle TCD0_CITER_ELINKNO's ELINK bit.
     *
     * Enable channel-to-channel linking on minor-loop complete
     */
    inline void toggle_TCD0_CITER_ELINKNO_ELINK() volatile
    {
        TCD0_CITER_ELINKNO ^= 1u << 15u;
    }

    /**
     * Get TCD0_CITER_ELINKNO's CITER field.
     *
     * Current Major Iteration Count
     */
    inline uint16_t get_TCD0_CITER_ELINKNO_CITER() volatile
    {
        return (TCD0_CITER_ELINKNO >> 0u) & 0b111111111111111u;
    }

    /**
     * Set TCD0_CITER_ELINKNO's CITER field.
     *
     * Current Major Iteration Count
     */
    inline void set_TCD0_CITER_ELINKNO_CITER(uint16_t value) volatile
    {
        uint16_t curr = TCD0_CITER_ELINKNO;

        curr &= ~(0b111111111111111u << 0u);
        curr |= (value & 0b111111111111111u) << 0u;

        TCD0_CITER_ELINKNO = curr;
    }

    /**
     * Get all of TCD0_CITER_ELINKNO's bit fields.
     *
     * (read-write) TCD Current Minor Loop Link, Major Loop Count (Channel
     * Linking Disabled)
     */
    inline void get_TCD0_CITER_ELINKNO(bool &ELINK, uint16_t &CITER) volatile
    {
        uint16_t curr = TCD0_CITER_ELINKNO;

        ELINK = curr & (1u << 15u);
        CITER = (curr >> 0u) & 0b111111111111111u;
    }

    /**
     * Set all of TCD0_CITER_ELINKNO's bit fields.
     *
     * (read-write) TCD Current Minor Loop Link, Major Loop Count (Channel
     * Linking Disabled)
     */
    inline void set_TCD0_CITER_ELINKNO(bool ELINK, uint16_t CITER) volatile
    {
        uint16_t curr = TCD0_CITER_ELINKNO;

        curr &= ~(0b1u << 15u);
        curr |= (ELINK & 0b1u) << 15u;
        curr &= ~(0b111111111111111u << 0u);
        curr |= (CITER & 0b111111111111111u) << 0u;

        TCD0_CITER_ELINKNO = curr;
    }

    /**
     * Get TCD0_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD0_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD0_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD0_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD0_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD0_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD0_DLASTSGA = curr;
    }

    /**
     * Get TCD0_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD0_CSR_BWC get_TCD0_CSR_BWC() volatile
    {
        return DMA0_TCD0_CSR_BWC((TCD0_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD0_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD0_CSR_BWC(DMA0_TCD0_CSR_BWC value) volatile
    {
        uint16_t curr = TCD0_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD0_CSR = curr;
    }

    /**
     * Get TCD0_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD0_CSR_MAJORLINKCH() volatile
    {
        return (TCD0_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD0_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD0_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD0_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD0_CSR = curr;
    }

    /**
     * Get TCD0_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD0_CSR_DONE() volatile
    {
        return TCD0_CSR & (1u << 7u);
    }

    /**
     * Set TCD0_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD0_CSR_DONE() volatile
    {
        TCD0_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD0_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD0_CSR_DONE() volatile
    {
        TCD0_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD0_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD0_CSR_DONE() volatile
    {
        TCD0_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD0_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD0_CSR_ACTIVE() volatile
    {
        return TCD0_CSR & (1u << 6u);
    }

    /**
     * Get TCD0_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD0_CSR_MAJORELINK() volatile
    {
        return TCD0_CSR & (1u << 5u);
    }

    /**
     * Set TCD0_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD0_CSR_MAJORELINK() volatile
    {
        TCD0_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD0_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD0_CSR_MAJORELINK() volatile
    {
        TCD0_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD0_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD0_CSR_MAJORELINK() volatile
    {
        TCD0_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD0_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD0_CSR_ESG() volatile
    {
        return TCD0_CSR & (1u << 4u);
    }

    /**
     * Set TCD0_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD0_CSR_ESG() volatile
    {
        TCD0_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD0_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD0_CSR_ESG() volatile
    {
        TCD0_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD0_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD0_CSR_ESG() volatile
    {
        TCD0_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD0_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD0_CSR_DREQ() volatile
    {
        return TCD0_CSR & (1u << 3u);
    }

    /**
     * Set TCD0_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD0_CSR_DREQ() volatile
    {
        TCD0_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD0_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD0_CSR_DREQ() volatile
    {
        TCD0_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD0_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD0_CSR_DREQ() volatile
    {
        TCD0_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD0_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD0_CSR_INTHALF() volatile
    {
        return TCD0_CSR & (1u << 2u);
    }

    /**
     * Set TCD0_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD0_CSR_INTHALF() volatile
    {
        TCD0_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD0_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD0_CSR_INTHALF() volatile
    {
        TCD0_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD0_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD0_CSR_INTHALF() volatile
    {
        TCD0_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD0_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD0_CSR_INTMAJOR() volatile
    {
        return TCD0_CSR & (1u << 1u);
    }

    /**
     * Set TCD0_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD0_CSR_INTMAJOR() volatile
    {
        TCD0_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD0_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD0_CSR_INTMAJOR() volatile
    {
        TCD0_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD0_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD0_CSR_INTMAJOR() volatile
    {
        TCD0_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD0_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD0_CSR_START() volatile
    {
        return TCD0_CSR & (1u << 0u);
    }

    /**
     * Set TCD0_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD0_CSR_START() volatile
    {
        TCD0_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD0_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD0_CSR_START() volatile
    {
        TCD0_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD0_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD0_CSR_START() volatile
    {
        TCD0_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD0_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD0_CSR(DMA0_TCD0_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                             bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                             bool &ESG, bool &DREQ, bool &INTHALF,
                             bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD0_CSR;

        BWC = DMA0_TCD0_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD0_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD0_CSR(DMA0_TCD0_CSR_BWC BWC, uint8_t MAJORLINKCH,
                             bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                             bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD0_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD0_CSR = curr;
    }

    /**
     * Get TCD0_BITER_ELINKNO's ELINK bit.
     *
     * Enables channel-to-channel linking on minor loop complete
     */
    inline bool get_TCD0_BITER_ELINKNO_ELINK() volatile
    {
        return TCD0_BITER_ELINKNO & (1u << 15u);
    }

    /**
     * Set TCD0_BITER_ELINKNO's ELINK bit.
     *
     * Enables channel-to-channel linking on minor loop complete
     */
    inline void set_TCD0_BITER_ELINKNO_ELINK() volatile
    {
        TCD0_BITER_ELINKNO |= 1u << 15u;
    }

    /**
     * Clear TCD0_BITER_ELINKNO's ELINK bit.
     *
     * Enables channel-to-channel linking on minor loop complete
     */
    inline void clear_TCD0_BITER_ELINKNO_ELINK() volatile
    {
        TCD0_BITER_ELINKNO &= ~(1u << 15u);
    }

    /**
     * Toggle TCD0_BITER_ELINKNO's ELINK bit.
     *
     * Enables channel-to-channel linking on minor loop complete
     */
    inline void toggle_TCD0_BITER_ELINKNO_ELINK() volatile
    {
        TCD0_BITER_ELINKNO ^= 1u << 15u;
    }

    /**
     * Get TCD0_BITER_ELINKNO's BITER field.
     *
     * Starting Major Iteration Count
     */
    inline uint16_t get_TCD0_BITER_ELINKNO_BITER() volatile
    {
        return (TCD0_BITER_ELINKNO >> 0u) & 0b111111111111111u;
    }

    /**
     * Set TCD0_BITER_ELINKNO's BITER field.
     *
     * Starting Major Iteration Count
     */
    inline void set_TCD0_BITER_ELINKNO_BITER(uint16_t value) volatile
    {
        uint16_t curr = TCD0_BITER_ELINKNO;

        curr &= ~(0b111111111111111u << 0u);
        curr |= (value & 0b111111111111111u) << 0u;

        TCD0_BITER_ELINKNO = curr;
    }

    /**
     * Get all of TCD0_BITER_ELINKNO's bit fields.
     *
     * (read-write) TCD Beginning Minor Loop Link, Major Loop Count (Channel
     * Linking Disabled)
     */
    inline void get_TCD0_BITER_ELINKNO(bool &ELINK, uint16_t &BITER) volatile
    {
        uint16_t curr = TCD0_BITER_ELINKNO;

        ELINK = curr & (1u << 15u);
        BITER = (curr >> 0u) & 0b111111111111111u;
    }

    /**
     * Set all of TCD0_BITER_ELINKNO's bit fields.
     *
     * (read-write) TCD Beginning Minor Loop Link, Major Loop Count (Channel
     * Linking Disabled)
     */
    inline void set_TCD0_BITER_ELINKNO(bool ELINK, uint16_t BITER) volatile
    {
        uint16_t curr = TCD0_BITER_ELINKNO;

        curr &= ~(0b1u << 15u);
        curr |= (ELINK & 0b1u) << 15u;
        curr &= ~(0b111111111111111u << 0u);
        curr |= (BITER & 0b111111111111111u) << 0u;

        TCD0_BITER_ELINKNO = curr;
    }

    /**
     * Get TCD1_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD1_SADDR_SADDR() volatile
    {
        return (TCD1_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD1_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD1_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD1_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD1_SADDR = curr;
    }

    /**
     * Get TCD1_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD1_SOFF_SOFF() volatile
    {
        return (TCD1_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD1_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD1_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD1_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD1_SOFF = curr;
    }

    /**
     * Get TCD1_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD1_ATTR_SMOD get_TCD1_ATTR_SMOD() volatile
    {
        return DMA0_TCD1_ATTR_SMOD((TCD1_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD1_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD1_ATTR_SMOD(DMA0_TCD1_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD1_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD1_ATTR = curr;
    }

    /**
     * Get TCD1_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD1_ATTR_SSIZE get_TCD1_ATTR_SSIZE() volatile
    {
        return DMA0_TCD1_ATTR_SSIZE((TCD1_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD1_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD1_ATTR_SSIZE(DMA0_TCD1_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD1_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD1_ATTR = curr;
    }

    /**
     * Get TCD1_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD1_ATTR_DMOD() volatile
    {
        return (TCD1_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD1_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD1_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD1_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD1_ATTR = curr;
    }

    /**
     * Get TCD1_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD1_ATTR_DSIZE() volatile
    {
        return (TCD1_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD1_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD1_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD1_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD1_ATTR = curr;
    }

    /**
     * Get all of TCD1_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD1_ATTR(DMA0_TCD1_ATTR_SMOD &SMOD,
                              DMA0_TCD1_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                              uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD1_ATTR;

        SMOD = DMA0_TCD1_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD1_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD1_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD1_ATTR(DMA0_TCD1_ATTR_SMOD SMOD,
                              DMA0_TCD1_ATTR_SSIZE SSIZE, uint8_t DMOD,
                              uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD1_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD1_ATTR = curr;
    }

    /**
     * Get TCD1_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD1_SLAST_SLAST() volatile
    {
        return (TCD1_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD1_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD1_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD1_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD1_SLAST = curr;
    }

    /**
     * Get TCD1_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD1_DADDR_DADDR() volatile
    {
        return (TCD1_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD1_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD1_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD1_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD1_DADDR = curr;
    }

    /**
     * Get TCD1_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD1_DOFF_DOFF() volatile
    {
        return (TCD1_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD1_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD1_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD1_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD1_DOFF = curr;
    }

    /**
     * Get TCD1_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD1_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD1_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD1_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD1_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD1_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD1_DLASTSGA = curr;
    }

    /**
     * Get TCD1_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD1_CSR_BWC get_TCD1_CSR_BWC() volatile
    {
        return DMA0_TCD1_CSR_BWC((TCD1_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD1_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD1_CSR_BWC(DMA0_TCD1_CSR_BWC value) volatile
    {
        uint16_t curr = TCD1_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD1_CSR = curr;
    }

    /**
     * Get TCD1_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD1_CSR_MAJORLINKCH() volatile
    {
        return (TCD1_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD1_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD1_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD1_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD1_CSR = curr;
    }

    /**
     * Get TCD1_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD1_CSR_DONE() volatile
    {
        return TCD1_CSR & (1u << 7u);
    }

    /**
     * Set TCD1_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD1_CSR_DONE() volatile
    {
        TCD1_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD1_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD1_CSR_DONE() volatile
    {
        TCD1_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD1_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD1_CSR_DONE() volatile
    {
        TCD1_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD1_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD1_CSR_ACTIVE() volatile
    {
        return TCD1_CSR & (1u << 6u);
    }

    /**
     * Get TCD1_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD1_CSR_MAJORELINK() volatile
    {
        return TCD1_CSR & (1u << 5u);
    }

    /**
     * Set TCD1_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD1_CSR_MAJORELINK() volatile
    {
        TCD1_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD1_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD1_CSR_MAJORELINK() volatile
    {
        TCD1_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD1_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD1_CSR_MAJORELINK() volatile
    {
        TCD1_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD1_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD1_CSR_ESG() volatile
    {
        return TCD1_CSR & (1u << 4u);
    }

    /**
     * Set TCD1_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD1_CSR_ESG() volatile
    {
        TCD1_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD1_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD1_CSR_ESG() volatile
    {
        TCD1_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD1_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD1_CSR_ESG() volatile
    {
        TCD1_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD1_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD1_CSR_DREQ() volatile
    {
        return TCD1_CSR & (1u << 3u);
    }

    /**
     * Set TCD1_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD1_CSR_DREQ() volatile
    {
        TCD1_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD1_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD1_CSR_DREQ() volatile
    {
        TCD1_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD1_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD1_CSR_DREQ() volatile
    {
        TCD1_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD1_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD1_CSR_INTHALF() volatile
    {
        return TCD1_CSR & (1u << 2u);
    }

    /**
     * Set TCD1_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD1_CSR_INTHALF() volatile
    {
        TCD1_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD1_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD1_CSR_INTHALF() volatile
    {
        TCD1_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD1_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD1_CSR_INTHALF() volatile
    {
        TCD1_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD1_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD1_CSR_INTMAJOR() volatile
    {
        return TCD1_CSR & (1u << 1u);
    }

    /**
     * Set TCD1_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD1_CSR_INTMAJOR() volatile
    {
        TCD1_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD1_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD1_CSR_INTMAJOR() volatile
    {
        TCD1_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD1_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD1_CSR_INTMAJOR() volatile
    {
        TCD1_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD1_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD1_CSR_START() volatile
    {
        return TCD1_CSR & (1u << 0u);
    }

    /**
     * Set TCD1_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD1_CSR_START() volatile
    {
        TCD1_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD1_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD1_CSR_START() volatile
    {
        TCD1_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD1_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD1_CSR_START() volatile
    {
        TCD1_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD1_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD1_CSR(DMA0_TCD1_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                             bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                             bool &ESG, bool &DREQ, bool &INTHALF,
                             bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD1_CSR;

        BWC = DMA0_TCD1_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD1_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD1_CSR(DMA0_TCD1_CSR_BWC BWC, uint8_t MAJORLINKCH,
                             bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                             bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD1_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD1_CSR = curr;
    }

    /**
     * Get TCD2_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD2_SADDR_SADDR() volatile
    {
        return (TCD2_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD2_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD2_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD2_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD2_SADDR = curr;
    }

    /**
     * Get TCD2_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD2_SOFF_SOFF() volatile
    {
        return (TCD2_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD2_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD2_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD2_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD2_SOFF = curr;
    }

    /**
     * Get TCD2_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD2_ATTR_SMOD get_TCD2_ATTR_SMOD() volatile
    {
        return DMA0_TCD2_ATTR_SMOD((TCD2_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD2_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD2_ATTR_SMOD(DMA0_TCD2_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD2_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD2_ATTR = curr;
    }

    /**
     * Get TCD2_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD2_ATTR_SSIZE get_TCD2_ATTR_SSIZE() volatile
    {
        return DMA0_TCD2_ATTR_SSIZE((TCD2_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD2_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD2_ATTR_SSIZE(DMA0_TCD2_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD2_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD2_ATTR = curr;
    }

    /**
     * Get TCD2_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD2_ATTR_DMOD() volatile
    {
        return (TCD2_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD2_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD2_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD2_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD2_ATTR = curr;
    }

    /**
     * Get TCD2_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD2_ATTR_DSIZE() volatile
    {
        return (TCD2_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD2_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD2_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD2_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD2_ATTR = curr;
    }

    /**
     * Get all of TCD2_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD2_ATTR(DMA0_TCD2_ATTR_SMOD &SMOD,
                              DMA0_TCD2_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                              uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD2_ATTR;

        SMOD = DMA0_TCD2_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD2_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD2_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD2_ATTR(DMA0_TCD2_ATTR_SMOD SMOD,
                              DMA0_TCD2_ATTR_SSIZE SSIZE, uint8_t DMOD,
                              uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD2_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD2_ATTR = curr;
    }

    /**
     * Get TCD2_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD2_SLAST_SLAST() volatile
    {
        return (TCD2_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD2_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD2_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD2_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD2_SLAST = curr;
    }

    /**
     * Get TCD2_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD2_DADDR_DADDR() volatile
    {
        return (TCD2_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD2_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD2_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD2_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD2_DADDR = curr;
    }

    /**
     * Get TCD2_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD2_DOFF_DOFF() volatile
    {
        return (TCD2_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD2_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD2_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD2_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD2_DOFF = curr;
    }

    /**
     * Get TCD2_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD2_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD2_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD2_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD2_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD2_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD2_DLASTSGA = curr;
    }

    /**
     * Get TCD2_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD2_CSR_BWC get_TCD2_CSR_BWC() volatile
    {
        return DMA0_TCD2_CSR_BWC((TCD2_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD2_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD2_CSR_BWC(DMA0_TCD2_CSR_BWC value) volatile
    {
        uint16_t curr = TCD2_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD2_CSR = curr;
    }

    /**
     * Get TCD2_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD2_CSR_MAJORLINKCH() volatile
    {
        return (TCD2_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD2_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD2_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD2_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD2_CSR = curr;
    }

    /**
     * Get TCD2_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD2_CSR_DONE() volatile
    {
        return TCD2_CSR & (1u << 7u);
    }

    /**
     * Set TCD2_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD2_CSR_DONE() volatile
    {
        TCD2_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD2_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD2_CSR_DONE() volatile
    {
        TCD2_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD2_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD2_CSR_DONE() volatile
    {
        TCD2_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD2_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD2_CSR_ACTIVE() volatile
    {
        return TCD2_CSR & (1u << 6u);
    }

    /**
     * Get TCD2_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD2_CSR_MAJORELINK() volatile
    {
        return TCD2_CSR & (1u << 5u);
    }

    /**
     * Set TCD2_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD2_CSR_MAJORELINK() volatile
    {
        TCD2_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD2_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD2_CSR_MAJORELINK() volatile
    {
        TCD2_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD2_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD2_CSR_MAJORELINK() volatile
    {
        TCD2_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD2_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD2_CSR_ESG() volatile
    {
        return TCD2_CSR & (1u << 4u);
    }

    /**
     * Set TCD2_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD2_CSR_ESG() volatile
    {
        TCD2_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD2_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD2_CSR_ESG() volatile
    {
        TCD2_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD2_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD2_CSR_ESG() volatile
    {
        TCD2_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD2_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD2_CSR_DREQ() volatile
    {
        return TCD2_CSR & (1u << 3u);
    }

    /**
     * Set TCD2_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD2_CSR_DREQ() volatile
    {
        TCD2_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD2_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD2_CSR_DREQ() volatile
    {
        TCD2_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD2_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD2_CSR_DREQ() volatile
    {
        TCD2_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD2_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD2_CSR_INTHALF() volatile
    {
        return TCD2_CSR & (1u << 2u);
    }

    /**
     * Set TCD2_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD2_CSR_INTHALF() volatile
    {
        TCD2_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD2_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD2_CSR_INTHALF() volatile
    {
        TCD2_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD2_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD2_CSR_INTHALF() volatile
    {
        TCD2_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD2_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD2_CSR_INTMAJOR() volatile
    {
        return TCD2_CSR & (1u << 1u);
    }

    /**
     * Set TCD2_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD2_CSR_INTMAJOR() volatile
    {
        TCD2_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD2_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD2_CSR_INTMAJOR() volatile
    {
        TCD2_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD2_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD2_CSR_INTMAJOR() volatile
    {
        TCD2_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD2_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD2_CSR_START() volatile
    {
        return TCD2_CSR & (1u << 0u);
    }

    /**
     * Set TCD2_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD2_CSR_START() volatile
    {
        TCD2_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD2_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD2_CSR_START() volatile
    {
        TCD2_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD2_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD2_CSR_START() volatile
    {
        TCD2_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD2_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD2_CSR(DMA0_TCD2_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                             bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                             bool &ESG, bool &DREQ, bool &INTHALF,
                             bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD2_CSR;

        BWC = DMA0_TCD2_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD2_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD2_CSR(DMA0_TCD2_CSR_BWC BWC, uint8_t MAJORLINKCH,
                             bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                             bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD2_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD2_CSR = curr;
    }

    /**
     * Get TCD3_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD3_SADDR_SADDR() volatile
    {
        return (TCD3_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD3_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD3_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD3_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD3_SADDR = curr;
    }

    /**
     * Get TCD3_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD3_SOFF_SOFF() volatile
    {
        return (TCD3_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD3_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD3_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD3_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD3_SOFF = curr;
    }

    /**
     * Get TCD3_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD3_ATTR_SMOD get_TCD3_ATTR_SMOD() volatile
    {
        return DMA0_TCD3_ATTR_SMOD((TCD3_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD3_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD3_ATTR_SMOD(DMA0_TCD3_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD3_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD3_ATTR = curr;
    }

    /**
     * Get TCD3_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD3_ATTR_SSIZE get_TCD3_ATTR_SSIZE() volatile
    {
        return DMA0_TCD3_ATTR_SSIZE((TCD3_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD3_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD3_ATTR_SSIZE(DMA0_TCD3_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD3_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD3_ATTR = curr;
    }

    /**
     * Get TCD3_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD3_ATTR_DMOD() volatile
    {
        return (TCD3_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD3_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD3_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD3_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD3_ATTR = curr;
    }

    /**
     * Get TCD3_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD3_ATTR_DSIZE() volatile
    {
        return (TCD3_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD3_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD3_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD3_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD3_ATTR = curr;
    }

    /**
     * Get all of TCD3_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD3_ATTR(DMA0_TCD3_ATTR_SMOD &SMOD,
                              DMA0_TCD3_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                              uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD3_ATTR;

        SMOD = DMA0_TCD3_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD3_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD3_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD3_ATTR(DMA0_TCD3_ATTR_SMOD SMOD,
                              DMA0_TCD3_ATTR_SSIZE SSIZE, uint8_t DMOD,
                              uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD3_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD3_ATTR = curr;
    }

    /**
     * Get TCD3_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD3_SLAST_SLAST() volatile
    {
        return (TCD3_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD3_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD3_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD3_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD3_SLAST = curr;
    }

    /**
     * Get TCD3_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD3_DADDR_DADDR() volatile
    {
        return (TCD3_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD3_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD3_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD3_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD3_DADDR = curr;
    }

    /**
     * Get TCD3_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD3_DOFF_DOFF() volatile
    {
        return (TCD3_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD3_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD3_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD3_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD3_DOFF = curr;
    }

    /**
     * Get TCD3_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD3_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD3_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD3_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD3_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD3_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD3_DLASTSGA = curr;
    }

    /**
     * Get TCD3_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD3_CSR_BWC get_TCD3_CSR_BWC() volatile
    {
        return DMA0_TCD3_CSR_BWC((TCD3_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD3_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD3_CSR_BWC(DMA0_TCD3_CSR_BWC value) volatile
    {
        uint16_t curr = TCD3_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD3_CSR = curr;
    }

    /**
     * Get TCD3_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD3_CSR_MAJORLINKCH() volatile
    {
        return (TCD3_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD3_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD3_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD3_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD3_CSR = curr;
    }

    /**
     * Get TCD3_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD3_CSR_DONE() volatile
    {
        return TCD3_CSR & (1u << 7u);
    }

    /**
     * Set TCD3_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD3_CSR_DONE() volatile
    {
        TCD3_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD3_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD3_CSR_DONE() volatile
    {
        TCD3_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD3_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD3_CSR_DONE() volatile
    {
        TCD3_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD3_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD3_CSR_ACTIVE() volatile
    {
        return TCD3_CSR & (1u << 6u);
    }

    /**
     * Get TCD3_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD3_CSR_MAJORELINK() volatile
    {
        return TCD3_CSR & (1u << 5u);
    }

    /**
     * Set TCD3_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD3_CSR_MAJORELINK() volatile
    {
        TCD3_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD3_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD3_CSR_MAJORELINK() volatile
    {
        TCD3_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD3_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD3_CSR_MAJORELINK() volatile
    {
        TCD3_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD3_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD3_CSR_ESG() volatile
    {
        return TCD3_CSR & (1u << 4u);
    }

    /**
     * Set TCD3_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD3_CSR_ESG() volatile
    {
        TCD3_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD3_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD3_CSR_ESG() volatile
    {
        TCD3_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD3_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD3_CSR_ESG() volatile
    {
        TCD3_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD3_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD3_CSR_DREQ() volatile
    {
        return TCD3_CSR & (1u << 3u);
    }

    /**
     * Set TCD3_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD3_CSR_DREQ() volatile
    {
        TCD3_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD3_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD3_CSR_DREQ() volatile
    {
        TCD3_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD3_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD3_CSR_DREQ() volatile
    {
        TCD3_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD3_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD3_CSR_INTHALF() volatile
    {
        return TCD3_CSR & (1u << 2u);
    }

    /**
     * Set TCD3_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD3_CSR_INTHALF() volatile
    {
        TCD3_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD3_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD3_CSR_INTHALF() volatile
    {
        TCD3_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD3_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD3_CSR_INTHALF() volatile
    {
        TCD3_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD3_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD3_CSR_INTMAJOR() volatile
    {
        return TCD3_CSR & (1u << 1u);
    }

    /**
     * Set TCD3_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD3_CSR_INTMAJOR() volatile
    {
        TCD3_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD3_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD3_CSR_INTMAJOR() volatile
    {
        TCD3_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD3_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD3_CSR_INTMAJOR() volatile
    {
        TCD3_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD3_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD3_CSR_START() volatile
    {
        return TCD3_CSR & (1u << 0u);
    }

    /**
     * Set TCD3_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD3_CSR_START() volatile
    {
        TCD3_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD3_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD3_CSR_START() volatile
    {
        TCD3_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD3_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD3_CSR_START() volatile
    {
        TCD3_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD3_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD3_CSR(DMA0_TCD3_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                             bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                             bool &ESG, bool &DREQ, bool &INTHALF,
                             bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD3_CSR;

        BWC = DMA0_TCD3_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD3_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD3_CSR(DMA0_TCD3_CSR_BWC BWC, uint8_t MAJORLINKCH,
                             bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                             bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD3_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD3_CSR = curr;
    }

    /**
     * Get TCD4_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD4_SADDR_SADDR() volatile
    {
        return (TCD4_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD4_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD4_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD4_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD4_SADDR = curr;
    }

    /**
     * Get TCD4_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD4_SOFF_SOFF() volatile
    {
        return (TCD4_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD4_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD4_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD4_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD4_SOFF = curr;
    }

    /**
     * Get TCD4_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD4_ATTR_SMOD get_TCD4_ATTR_SMOD() volatile
    {
        return DMA0_TCD4_ATTR_SMOD((TCD4_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD4_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD4_ATTR_SMOD(DMA0_TCD4_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD4_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD4_ATTR = curr;
    }

    /**
     * Get TCD4_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD4_ATTR_SSIZE get_TCD4_ATTR_SSIZE() volatile
    {
        return DMA0_TCD4_ATTR_SSIZE((TCD4_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD4_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD4_ATTR_SSIZE(DMA0_TCD4_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD4_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD4_ATTR = curr;
    }

    /**
     * Get TCD4_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD4_ATTR_DMOD() volatile
    {
        return (TCD4_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD4_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD4_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD4_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD4_ATTR = curr;
    }

    /**
     * Get TCD4_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD4_ATTR_DSIZE() volatile
    {
        return (TCD4_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD4_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD4_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD4_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD4_ATTR = curr;
    }

    /**
     * Get all of TCD4_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD4_ATTR(DMA0_TCD4_ATTR_SMOD &SMOD,
                              DMA0_TCD4_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                              uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD4_ATTR;

        SMOD = DMA0_TCD4_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD4_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD4_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD4_ATTR(DMA0_TCD4_ATTR_SMOD SMOD,
                              DMA0_TCD4_ATTR_SSIZE SSIZE, uint8_t DMOD,
                              uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD4_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD4_ATTR = curr;
    }

    /**
     * Get TCD4_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD4_SLAST_SLAST() volatile
    {
        return (TCD4_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD4_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD4_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD4_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD4_SLAST = curr;
    }

    /**
     * Get TCD4_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD4_DADDR_DADDR() volatile
    {
        return (TCD4_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD4_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD4_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD4_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD4_DADDR = curr;
    }

    /**
     * Get TCD4_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD4_DOFF_DOFF() volatile
    {
        return (TCD4_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD4_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD4_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD4_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD4_DOFF = curr;
    }

    /**
     * Get TCD4_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD4_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD4_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD4_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD4_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD4_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD4_DLASTSGA = curr;
    }

    /**
     * Get TCD4_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD4_CSR_BWC get_TCD4_CSR_BWC() volatile
    {
        return DMA0_TCD4_CSR_BWC((TCD4_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD4_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD4_CSR_BWC(DMA0_TCD4_CSR_BWC value) volatile
    {
        uint16_t curr = TCD4_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD4_CSR = curr;
    }

    /**
     * Get TCD4_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD4_CSR_MAJORLINKCH() volatile
    {
        return (TCD4_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD4_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD4_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD4_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD4_CSR = curr;
    }

    /**
     * Get TCD4_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD4_CSR_DONE() volatile
    {
        return TCD4_CSR & (1u << 7u);
    }

    /**
     * Set TCD4_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD4_CSR_DONE() volatile
    {
        TCD4_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD4_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD4_CSR_DONE() volatile
    {
        TCD4_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD4_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD4_CSR_DONE() volatile
    {
        TCD4_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD4_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD4_CSR_ACTIVE() volatile
    {
        return TCD4_CSR & (1u << 6u);
    }

    /**
     * Get TCD4_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD4_CSR_MAJORELINK() volatile
    {
        return TCD4_CSR & (1u << 5u);
    }

    /**
     * Set TCD4_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD4_CSR_MAJORELINK() volatile
    {
        TCD4_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD4_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD4_CSR_MAJORELINK() volatile
    {
        TCD4_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD4_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD4_CSR_MAJORELINK() volatile
    {
        TCD4_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD4_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD4_CSR_ESG() volatile
    {
        return TCD4_CSR & (1u << 4u);
    }

    /**
     * Set TCD4_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD4_CSR_ESG() volatile
    {
        TCD4_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD4_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD4_CSR_ESG() volatile
    {
        TCD4_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD4_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD4_CSR_ESG() volatile
    {
        TCD4_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD4_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD4_CSR_DREQ() volatile
    {
        return TCD4_CSR & (1u << 3u);
    }

    /**
     * Set TCD4_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD4_CSR_DREQ() volatile
    {
        TCD4_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD4_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD4_CSR_DREQ() volatile
    {
        TCD4_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD4_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD4_CSR_DREQ() volatile
    {
        TCD4_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD4_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD4_CSR_INTHALF() volatile
    {
        return TCD4_CSR & (1u << 2u);
    }

    /**
     * Set TCD4_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD4_CSR_INTHALF() volatile
    {
        TCD4_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD4_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD4_CSR_INTHALF() volatile
    {
        TCD4_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD4_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD4_CSR_INTHALF() volatile
    {
        TCD4_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD4_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD4_CSR_INTMAJOR() volatile
    {
        return TCD4_CSR & (1u << 1u);
    }

    /**
     * Set TCD4_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD4_CSR_INTMAJOR() volatile
    {
        TCD4_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD4_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD4_CSR_INTMAJOR() volatile
    {
        TCD4_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD4_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD4_CSR_INTMAJOR() volatile
    {
        TCD4_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD4_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD4_CSR_START() volatile
    {
        return TCD4_CSR & (1u << 0u);
    }

    /**
     * Set TCD4_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD4_CSR_START() volatile
    {
        TCD4_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD4_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD4_CSR_START() volatile
    {
        TCD4_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD4_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD4_CSR_START() volatile
    {
        TCD4_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD4_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD4_CSR(DMA0_TCD4_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                             bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                             bool &ESG, bool &DREQ, bool &INTHALF,
                             bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD4_CSR;

        BWC = DMA0_TCD4_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD4_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD4_CSR(DMA0_TCD4_CSR_BWC BWC, uint8_t MAJORLINKCH,
                             bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                             bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD4_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD4_CSR = curr;
    }

    /**
     * Get TCD5_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD5_SADDR_SADDR() volatile
    {
        return (TCD5_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD5_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD5_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD5_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD5_SADDR = curr;
    }

    /**
     * Get TCD5_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD5_SOFF_SOFF() volatile
    {
        return (TCD5_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD5_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD5_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD5_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD5_SOFF = curr;
    }

    /**
     * Get TCD5_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD5_ATTR_SMOD get_TCD5_ATTR_SMOD() volatile
    {
        return DMA0_TCD5_ATTR_SMOD((TCD5_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD5_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD5_ATTR_SMOD(DMA0_TCD5_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD5_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD5_ATTR = curr;
    }

    /**
     * Get TCD5_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD5_ATTR_SSIZE get_TCD5_ATTR_SSIZE() volatile
    {
        return DMA0_TCD5_ATTR_SSIZE((TCD5_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD5_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD5_ATTR_SSIZE(DMA0_TCD5_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD5_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD5_ATTR = curr;
    }

    /**
     * Get TCD5_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD5_ATTR_DMOD() volatile
    {
        return (TCD5_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD5_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD5_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD5_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD5_ATTR = curr;
    }

    /**
     * Get TCD5_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD5_ATTR_DSIZE() volatile
    {
        return (TCD5_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD5_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD5_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD5_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD5_ATTR = curr;
    }

    /**
     * Get all of TCD5_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD5_ATTR(DMA0_TCD5_ATTR_SMOD &SMOD,
                              DMA0_TCD5_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                              uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD5_ATTR;

        SMOD = DMA0_TCD5_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD5_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD5_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD5_ATTR(DMA0_TCD5_ATTR_SMOD SMOD,
                              DMA0_TCD5_ATTR_SSIZE SSIZE, uint8_t DMOD,
                              uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD5_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD5_ATTR = curr;
    }

    /**
     * Get TCD5_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD5_SLAST_SLAST() volatile
    {
        return (TCD5_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD5_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD5_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD5_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD5_SLAST = curr;
    }

    /**
     * Get TCD5_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD5_DADDR_DADDR() volatile
    {
        return (TCD5_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD5_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD5_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD5_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD5_DADDR = curr;
    }

    /**
     * Get TCD5_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD5_DOFF_DOFF() volatile
    {
        return (TCD5_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD5_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD5_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD5_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD5_DOFF = curr;
    }

    /**
     * Get TCD5_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD5_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD5_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD5_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD5_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD5_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD5_DLASTSGA = curr;
    }

    /**
     * Get TCD5_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD5_CSR_BWC get_TCD5_CSR_BWC() volatile
    {
        return DMA0_TCD5_CSR_BWC((TCD5_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD5_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD5_CSR_BWC(DMA0_TCD5_CSR_BWC value) volatile
    {
        uint16_t curr = TCD5_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD5_CSR = curr;
    }

    /**
     * Get TCD5_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD5_CSR_MAJORLINKCH() volatile
    {
        return (TCD5_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD5_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD5_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD5_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD5_CSR = curr;
    }

    /**
     * Get TCD5_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD5_CSR_DONE() volatile
    {
        return TCD5_CSR & (1u << 7u);
    }

    /**
     * Set TCD5_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD5_CSR_DONE() volatile
    {
        TCD5_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD5_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD5_CSR_DONE() volatile
    {
        TCD5_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD5_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD5_CSR_DONE() volatile
    {
        TCD5_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD5_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD5_CSR_ACTIVE() volatile
    {
        return TCD5_CSR & (1u << 6u);
    }

    /**
     * Get TCD5_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD5_CSR_MAJORELINK() volatile
    {
        return TCD5_CSR & (1u << 5u);
    }

    /**
     * Set TCD5_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD5_CSR_MAJORELINK() volatile
    {
        TCD5_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD5_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD5_CSR_MAJORELINK() volatile
    {
        TCD5_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD5_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD5_CSR_MAJORELINK() volatile
    {
        TCD5_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD5_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD5_CSR_ESG() volatile
    {
        return TCD5_CSR & (1u << 4u);
    }

    /**
     * Set TCD5_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD5_CSR_ESG() volatile
    {
        TCD5_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD5_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD5_CSR_ESG() volatile
    {
        TCD5_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD5_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD5_CSR_ESG() volatile
    {
        TCD5_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD5_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD5_CSR_DREQ() volatile
    {
        return TCD5_CSR & (1u << 3u);
    }

    /**
     * Set TCD5_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD5_CSR_DREQ() volatile
    {
        TCD5_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD5_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD5_CSR_DREQ() volatile
    {
        TCD5_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD5_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD5_CSR_DREQ() volatile
    {
        TCD5_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD5_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD5_CSR_INTHALF() volatile
    {
        return TCD5_CSR & (1u << 2u);
    }

    /**
     * Set TCD5_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD5_CSR_INTHALF() volatile
    {
        TCD5_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD5_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD5_CSR_INTHALF() volatile
    {
        TCD5_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD5_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD5_CSR_INTHALF() volatile
    {
        TCD5_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD5_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD5_CSR_INTMAJOR() volatile
    {
        return TCD5_CSR & (1u << 1u);
    }

    /**
     * Set TCD5_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD5_CSR_INTMAJOR() volatile
    {
        TCD5_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD5_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD5_CSR_INTMAJOR() volatile
    {
        TCD5_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD5_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD5_CSR_INTMAJOR() volatile
    {
        TCD5_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD5_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD5_CSR_START() volatile
    {
        return TCD5_CSR & (1u << 0u);
    }

    /**
     * Set TCD5_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD5_CSR_START() volatile
    {
        TCD5_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD5_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD5_CSR_START() volatile
    {
        TCD5_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD5_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD5_CSR_START() volatile
    {
        TCD5_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD5_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD5_CSR(DMA0_TCD5_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                             bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                             bool &ESG, bool &DREQ, bool &INTHALF,
                             bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD5_CSR;

        BWC = DMA0_TCD5_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD5_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD5_CSR(DMA0_TCD5_CSR_BWC BWC, uint8_t MAJORLINKCH,
                             bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                             bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD5_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD5_CSR = curr;
    }

    /**
     * Get TCD6_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD6_SADDR_SADDR() volatile
    {
        return (TCD6_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD6_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD6_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD6_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD6_SADDR = curr;
    }

    /**
     * Get TCD6_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD6_SOFF_SOFF() volatile
    {
        return (TCD6_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD6_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD6_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD6_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD6_SOFF = curr;
    }

    /**
     * Get TCD6_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD6_ATTR_SMOD get_TCD6_ATTR_SMOD() volatile
    {
        return DMA0_TCD6_ATTR_SMOD((TCD6_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD6_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD6_ATTR_SMOD(DMA0_TCD6_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD6_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD6_ATTR = curr;
    }

    /**
     * Get TCD6_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD6_ATTR_SSIZE get_TCD6_ATTR_SSIZE() volatile
    {
        return DMA0_TCD6_ATTR_SSIZE((TCD6_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD6_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD6_ATTR_SSIZE(DMA0_TCD6_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD6_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD6_ATTR = curr;
    }

    /**
     * Get TCD6_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD6_ATTR_DMOD() volatile
    {
        return (TCD6_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD6_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD6_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD6_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD6_ATTR = curr;
    }

    /**
     * Get TCD6_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD6_ATTR_DSIZE() volatile
    {
        return (TCD6_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD6_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD6_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD6_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD6_ATTR = curr;
    }

    /**
     * Get all of TCD6_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD6_ATTR(DMA0_TCD6_ATTR_SMOD &SMOD,
                              DMA0_TCD6_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                              uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD6_ATTR;

        SMOD = DMA0_TCD6_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD6_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD6_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD6_ATTR(DMA0_TCD6_ATTR_SMOD SMOD,
                              DMA0_TCD6_ATTR_SSIZE SSIZE, uint8_t DMOD,
                              uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD6_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD6_ATTR = curr;
    }

    /**
     * Get TCD6_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD6_SLAST_SLAST() volatile
    {
        return (TCD6_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD6_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD6_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD6_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD6_SLAST = curr;
    }

    /**
     * Get TCD6_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD6_DADDR_DADDR() volatile
    {
        return (TCD6_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD6_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD6_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD6_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD6_DADDR = curr;
    }

    /**
     * Get TCD6_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD6_DOFF_DOFF() volatile
    {
        return (TCD6_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD6_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD6_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD6_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD6_DOFF = curr;
    }

    /**
     * Get TCD6_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD6_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD6_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD6_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD6_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD6_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD6_DLASTSGA = curr;
    }

    /**
     * Get TCD6_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD6_CSR_BWC get_TCD6_CSR_BWC() volatile
    {
        return DMA0_TCD6_CSR_BWC((TCD6_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD6_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD6_CSR_BWC(DMA0_TCD6_CSR_BWC value) volatile
    {
        uint16_t curr = TCD6_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD6_CSR = curr;
    }

    /**
     * Get TCD6_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD6_CSR_MAJORLINKCH() volatile
    {
        return (TCD6_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD6_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD6_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD6_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD6_CSR = curr;
    }

    /**
     * Get TCD6_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD6_CSR_DONE() volatile
    {
        return TCD6_CSR & (1u << 7u);
    }

    /**
     * Set TCD6_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD6_CSR_DONE() volatile
    {
        TCD6_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD6_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD6_CSR_DONE() volatile
    {
        TCD6_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD6_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD6_CSR_DONE() volatile
    {
        TCD6_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD6_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD6_CSR_ACTIVE() volatile
    {
        return TCD6_CSR & (1u << 6u);
    }

    /**
     * Get TCD6_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD6_CSR_MAJORELINK() volatile
    {
        return TCD6_CSR & (1u << 5u);
    }

    /**
     * Set TCD6_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD6_CSR_MAJORELINK() volatile
    {
        TCD6_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD6_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD6_CSR_MAJORELINK() volatile
    {
        TCD6_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD6_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD6_CSR_MAJORELINK() volatile
    {
        TCD6_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD6_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD6_CSR_ESG() volatile
    {
        return TCD6_CSR & (1u << 4u);
    }

    /**
     * Set TCD6_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD6_CSR_ESG() volatile
    {
        TCD6_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD6_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD6_CSR_ESG() volatile
    {
        TCD6_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD6_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD6_CSR_ESG() volatile
    {
        TCD6_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD6_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD6_CSR_DREQ() volatile
    {
        return TCD6_CSR & (1u << 3u);
    }

    /**
     * Set TCD6_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD6_CSR_DREQ() volatile
    {
        TCD6_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD6_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD6_CSR_DREQ() volatile
    {
        TCD6_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD6_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD6_CSR_DREQ() volatile
    {
        TCD6_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD6_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD6_CSR_INTHALF() volatile
    {
        return TCD6_CSR & (1u << 2u);
    }

    /**
     * Set TCD6_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD6_CSR_INTHALF() volatile
    {
        TCD6_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD6_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD6_CSR_INTHALF() volatile
    {
        TCD6_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD6_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD6_CSR_INTHALF() volatile
    {
        TCD6_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD6_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD6_CSR_INTMAJOR() volatile
    {
        return TCD6_CSR & (1u << 1u);
    }

    /**
     * Set TCD6_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD6_CSR_INTMAJOR() volatile
    {
        TCD6_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD6_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD6_CSR_INTMAJOR() volatile
    {
        TCD6_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD6_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD6_CSR_INTMAJOR() volatile
    {
        TCD6_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD6_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD6_CSR_START() volatile
    {
        return TCD6_CSR & (1u << 0u);
    }

    /**
     * Set TCD6_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD6_CSR_START() volatile
    {
        TCD6_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD6_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD6_CSR_START() volatile
    {
        TCD6_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD6_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD6_CSR_START() volatile
    {
        TCD6_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD6_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD6_CSR(DMA0_TCD6_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                             bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                             bool &ESG, bool &DREQ, bool &INTHALF,
                             bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD6_CSR;

        BWC = DMA0_TCD6_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD6_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD6_CSR(DMA0_TCD6_CSR_BWC BWC, uint8_t MAJORLINKCH,
                             bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                             bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD6_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD6_CSR = curr;
    }

    /**
     * Get TCD7_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD7_SADDR_SADDR() volatile
    {
        return (TCD7_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD7_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD7_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD7_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD7_SADDR = curr;
    }

    /**
     * Get TCD7_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD7_SOFF_SOFF() volatile
    {
        return (TCD7_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD7_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD7_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD7_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD7_SOFF = curr;
    }

    /**
     * Get TCD7_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD7_ATTR_SMOD get_TCD7_ATTR_SMOD() volatile
    {
        return DMA0_TCD7_ATTR_SMOD((TCD7_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD7_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD7_ATTR_SMOD(DMA0_TCD7_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD7_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD7_ATTR = curr;
    }

    /**
     * Get TCD7_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD7_ATTR_SSIZE get_TCD7_ATTR_SSIZE() volatile
    {
        return DMA0_TCD7_ATTR_SSIZE((TCD7_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD7_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD7_ATTR_SSIZE(DMA0_TCD7_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD7_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD7_ATTR = curr;
    }

    /**
     * Get TCD7_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD7_ATTR_DMOD() volatile
    {
        return (TCD7_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD7_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD7_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD7_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD7_ATTR = curr;
    }

    /**
     * Get TCD7_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD7_ATTR_DSIZE() volatile
    {
        return (TCD7_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD7_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD7_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD7_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD7_ATTR = curr;
    }

    /**
     * Get all of TCD7_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD7_ATTR(DMA0_TCD7_ATTR_SMOD &SMOD,
                              DMA0_TCD7_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                              uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD7_ATTR;

        SMOD = DMA0_TCD7_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD7_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD7_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD7_ATTR(DMA0_TCD7_ATTR_SMOD SMOD,
                              DMA0_TCD7_ATTR_SSIZE SSIZE, uint8_t DMOD,
                              uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD7_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD7_ATTR = curr;
    }

    /**
     * Get TCD7_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD7_SLAST_SLAST() volatile
    {
        return (TCD7_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD7_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD7_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD7_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD7_SLAST = curr;
    }

    /**
     * Get TCD7_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD7_DADDR_DADDR() volatile
    {
        return (TCD7_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD7_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD7_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD7_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD7_DADDR = curr;
    }

    /**
     * Get TCD7_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD7_DOFF_DOFF() volatile
    {
        return (TCD7_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD7_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD7_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD7_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD7_DOFF = curr;
    }

    /**
     * Get TCD7_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD7_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD7_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD7_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD7_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD7_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD7_DLASTSGA = curr;
    }

    /**
     * Get TCD7_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD7_CSR_BWC get_TCD7_CSR_BWC() volatile
    {
        return DMA0_TCD7_CSR_BWC((TCD7_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD7_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD7_CSR_BWC(DMA0_TCD7_CSR_BWC value) volatile
    {
        uint16_t curr = TCD7_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD7_CSR = curr;
    }

    /**
     * Get TCD7_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD7_CSR_MAJORLINKCH() volatile
    {
        return (TCD7_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD7_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD7_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD7_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD7_CSR = curr;
    }

    /**
     * Get TCD7_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD7_CSR_DONE() volatile
    {
        return TCD7_CSR & (1u << 7u);
    }

    /**
     * Set TCD7_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD7_CSR_DONE() volatile
    {
        TCD7_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD7_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD7_CSR_DONE() volatile
    {
        TCD7_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD7_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD7_CSR_DONE() volatile
    {
        TCD7_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD7_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD7_CSR_ACTIVE() volatile
    {
        return TCD7_CSR & (1u << 6u);
    }

    /**
     * Get TCD7_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD7_CSR_MAJORELINK() volatile
    {
        return TCD7_CSR & (1u << 5u);
    }

    /**
     * Set TCD7_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD7_CSR_MAJORELINK() volatile
    {
        TCD7_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD7_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD7_CSR_MAJORELINK() volatile
    {
        TCD7_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD7_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD7_CSR_MAJORELINK() volatile
    {
        TCD7_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD7_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD7_CSR_ESG() volatile
    {
        return TCD7_CSR & (1u << 4u);
    }

    /**
     * Set TCD7_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD7_CSR_ESG() volatile
    {
        TCD7_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD7_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD7_CSR_ESG() volatile
    {
        TCD7_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD7_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD7_CSR_ESG() volatile
    {
        TCD7_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD7_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD7_CSR_DREQ() volatile
    {
        return TCD7_CSR & (1u << 3u);
    }

    /**
     * Set TCD7_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD7_CSR_DREQ() volatile
    {
        TCD7_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD7_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD7_CSR_DREQ() volatile
    {
        TCD7_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD7_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD7_CSR_DREQ() volatile
    {
        TCD7_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD7_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD7_CSR_INTHALF() volatile
    {
        return TCD7_CSR & (1u << 2u);
    }

    /**
     * Set TCD7_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD7_CSR_INTHALF() volatile
    {
        TCD7_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD7_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD7_CSR_INTHALF() volatile
    {
        TCD7_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD7_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD7_CSR_INTHALF() volatile
    {
        TCD7_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD7_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD7_CSR_INTMAJOR() volatile
    {
        return TCD7_CSR & (1u << 1u);
    }

    /**
     * Set TCD7_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD7_CSR_INTMAJOR() volatile
    {
        TCD7_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD7_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD7_CSR_INTMAJOR() volatile
    {
        TCD7_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD7_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD7_CSR_INTMAJOR() volatile
    {
        TCD7_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD7_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD7_CSR_START() volatile
    {
        return TCD7_CSR & (1u << 0u);
    }

    /**
     * Set TCD7_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD7_CSR_START() volatile
    {
        TCD7_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD7_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD7_CSR_START() volatile
    {
        TCD7_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD7_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD7_CSR_START() volatile
    {
        TCD7_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD7_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD7_CSR(DMA0_TCD7_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                             bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                             bool &ESG, bool &DREQ, bool &INTHALF,
                             bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD7_CSR;

        BWC = DMA0_TCD7_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD7_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD7_CSR(DMA0_TCD7_CSR_BWC BWC, uint8_t MAJORLINKCH,
                             bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                             bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD7_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD7_CSR = curr;
    }

    /**
     * Get TCD8_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD8_SADDR_SADDR() volatile
    {
        return (TCD8_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD8_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD8_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD8_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD8_SADDR = curr;
    }

    /**
     * Get TCD8_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD8_SOFF_SOFF() volatile
    {
        return (TCD8_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD8_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD8_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD8_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD8_SOFF = curr;
    }

    /**
     * Get TCD8_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD8_ATTR_SMOD get_TCD8_ATTR_SMOD() volatile
    {
        return DMA0_TCD8_ATTR_SMOD((TCD8_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD8_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD8_ATTR_SMOD(DMA0_TCD8_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD8_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD8_ATTR = curr;
    }

    /**
     * Get TCD8_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD8_ATTR_SSIZE get_TCD8_ATTR_SSIZE() volatile
    {
        return DMA0_TCD8_ATTR_SSIZE((TCD8_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD8_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD8_ATTR_SSIZE(DMA0_TCD8_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD8_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD8_ATTR = curr;
    }

    /**
     * Get TCD8_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD8_ATTR_DMOD() volatile
    {
        return (TCD8_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD8_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD8_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD8_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD8_ATTR = curr;
    }

    /**
     * Get TCD8_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD8_ATTR_DSIZE() volatile
    {
        return (TCD8_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD8_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD8_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD8_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD8_ATTR = curr;
    }

    /**
     * Get all of TCD8_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD8_ATTR(DMA0_TCD8_ATTR_SMOD &SMOD,
                              DMA0_TCD8_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                              uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD8_ATTR;

        SMOD = DMA0_TCD8_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD8_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD8_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD8_ATTR(DMA0_TCD8_ATTR_SMOD SMOD,
                              DMA0_TCD8_ATTR_SSIZE SSIZE, uint8_t DMOD,
                              uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD8_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD8_ATTR = curr;
    }

    /**
     * Get TCD8_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD8_SLAST_SLAST() volatile
    {
        return (TCD8_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD8_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD8_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD8_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD8_SLAST = curr;
    }

    /**
     * Get TCD8_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD8_DADDR_DADDR() volatile
    {
        return (TCD8_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD8_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD8_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD8_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD8_DADDR = curr;
    }

    /**
     * Get TCD8_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD8_DOFF_DOFF() volatile
    {
        return (TCD8_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD8_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD8_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD8_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD8_DOFF = curr;
    }

    /**
     * Get TCD8_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD8_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD8_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD8_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD8_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD8_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD8_DLASTSGA = curr;
    }

    /**
     * Get TCD8_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD8_CSR_BWC get_TCD8_CSR_BWC() volatile
    {
        return DMA0_TCD8_CSR_BWC((TCD8_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD8_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD8_CSR_BWC(DMA0_TCD8_CSR_BWC value) volatile
    {
        uint16_t curr = TCD8_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD8_CSR = curr;
    }

    /**
     * Get TCD8_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD8_CSR_MAJORLINKCH() volatile
    {
        return (TCD8_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD8_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD8_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD8_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD8_CSR = curr;
    }

    /**
     * Get TCD8_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD8_CSR_DONE() volatile
    {
        return TCD8_CSR & (1u << 7u);
    }

    /**
     * Set TCD8_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD8_CSR_DONE() volatile
    {
        TCD8_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD8_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD8_CSR_DONE() volatile
    {
        TCD8_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD8_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD8_CSR_DONE() volatile
    {
        TCD8_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD8_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD8_CSR_ACTIVE() volatile
    {
        return TCD8_CSR & (1u << 6u);
    }

    /**
     * Get TCD8_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD8_CSR_MAJORELINK() volatile
    {
        return TCD8_CSR & (1u << 5u);
    }

    /**
     * Set TCD8_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD8_CSR_MAJORELINK() volatile
    {
        TCD8_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD8_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD8_CSR_MAJORELINK() volatile
    {
        TCD8_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD8_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD8_CSR_MAJORELINK() volatile
    {
        TCD8_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD8_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD8_CSR_ESG() volatile
    {
        return TCD8_CSR & (1u << 4u);
    }

    /**
     * Set TCD8_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD8_CSR_ESG() volatile
    {
        TCD8_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD8_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD8_CSR_ESG() volatile
    {
        TCD8_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD8_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD8_CSR_ESG() volatile
    {
        TCD8_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD8_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD8_CSR_DREQ() volatile
    {
        return TCD8_CSR & (1u << 3u);
    }

    /**
     * Set TCD8_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD8_CSR_DREQ() volatile
    {
        TCD8_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD8_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD8_CSR_DREQ() volatile
    {
        TCD8_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD8_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD8_CSR_DREQ() volatile
    {
        TCD8_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD8_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD8_CSR_INTHALF() volatile
    {
        return TCD8_CSR & (1u << 2u);
    }

    /**
     * Set TCD8_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD8_CSR_INTHALF() volatile
    {
        TCD8_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD8_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD8_CSR_INTHALF() volatile
    {
        TCD8_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD8_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD8_CSR_INTHALF() volatile
    {
        TCD8_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD8_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD8_CSR_INTMAJOR() volatile
    {
        return TCD8_CSR & (1u << 1u);
    }

    /**
     * Set TCD8_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD8_CSR_INTMAJOR() volatile
    {
        TCD8_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD8_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD8_CSR_INTMAJOR() volatile
    {
        TCD8_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD8_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD8_CSR_INTMAJOR() volatile
    {
        TCD8_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD8_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD8_CSR_START() volatile
    {
        return TCD8_CSR & (1u << 0u);
    }

    /**
     * Set TCD8_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD8_CSR_START() volatile
    {
        TCD8_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD8_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD8_CSR_START() volatile
    {
        TCD8_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD8_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD8_CSR_START() volatile
    {
        TCD8_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD8_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD8_CSR(DMA0_TCD8_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                             bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                             bool &ESG, bool &DREQ, bool &INTHALF,
                             bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD8_CSR;

        BWC = DMA0_TCD8_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD8_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD8_CSR(DMA0_TCD8_CSR_BWC BWC, uint8_t MAJORLINKCH,
                             bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                             bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD8_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD8_CSR = curr;
    }

    /**
     * Get TCD9_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD9_SADDR_SADDR() volatile
    {
        return (TCD9_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD9_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD9_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD9_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD9_SADDR = curr;
    }

    /**
     * Get TCD9_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD9_SOFF_SOFF() volatile
    {
        return (TCD9_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD9_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD9_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD9_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD9_SOFF = curr;
    }

    /**
     * Get TCD9_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD9_ATTR_SMOD get_TCD9_ATTR_SMOD() volatile
    {
        return DMA0_TCD9_ATTR_SMOD((TCD9_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD9_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD9_ATTR_SMOD(DMA0_TCD9_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD9_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD9_ATTR = curr;
    }

    /**
     * Get TCD9_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD9_ATTR_SSIZE get_TCD9_ATTR_SSIZE() volatile
    {
        return DMA0_TCD9_ATTR_SSIZE((TCD9_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD9_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD9_ATTR_SSIZE(DMA0_TCD9_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD9_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD9_ATTR = curr;
    }

    /**
     * Get TCD9_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD9_ATTR_DMOD() volatile
    {
        return (TCD9_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD9_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD9_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD9_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD9_ATTR = curr;
    }

    /**
     * Get TCD9_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD9_ATTR_DSIZE() volatile
    {
        return (TCD9_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD9_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD9_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD9_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD9_ATTR = curr;
    }

    /**
     * Get all of TCD9_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD9_ATTR(DMA0_TCD9_ATTR_SMOD &SMOD,
                              DMA0_TCD9_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                              uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD9_ATTR;

        SMOD = DMA0_TCD9_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD9_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD9_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD9_ATTR(DMA0_TCD9_ATTR_SMOD SMOD,
                              DMA0_TCD9_ATTR_SSIZE SSIZE, uint8_t DMOD,
                              uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD9_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD9_ATTR = curr;
    }

    /**
     * Get TCD9_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD9_SLAST_SLAST() volatile
    {
        return (TCD9_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD9_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD9_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD9_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD9_SLAST = curr;
    }

    /**
     * Get TCD9_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD9_DADDR_DADDR() volatile
    {
        return (TCD9_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD9_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD9_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD9_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD9_DADDR = curr;
    }

    /**
     * Get TCD9_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD9_DOFF_DOFF() volatile
    {
        return (TCD9_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD9_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD9_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD9_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD9_DOFF = curr;
    }

    /**
     * Get TCD9_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD9_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD9_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD9_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD9_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD9_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD9_DLASTSGA = curr;
    }

    /**
     * Get TCD9_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD9_CSR_BWC get_TCD9_CSR_BWC() volatile
    {
        return DMA0_TCD9_CSR_BWC((TCD9_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD9_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD9_CSR_BWC(DMA0_TCD9_CSR_BWC value) volatile
    {
        uint16_t curr = TCD9_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD9_CSR = curr;
    }

    /**
     * Get TCD9_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD9_CSR_MAJORLINKCH() volatile
    {
        return (TCD9_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD9_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD9_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD9_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD9_CSR = curr;
    }

    /**
     * Get TCD9_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD9_CSR_DONE() volatile
    {
        return TCD9_CSR & (1u << 7u);
    }

    /**
     * Set TCD9_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD9_CSR_DONE() volatile
    {
        TCD9_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD9_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD9_CSR_DONE() volatile
    {
        TCD9_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD9_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD9_CSR_DONE() volatile
    {
        TCD9_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD9_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD9_CSR_ACTIVE() volatile
    {
        return TCD9_CSR & (1u << 6u);
    }

    /**
     * Get TCD9_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD9_CSR_MAJORELINK() volatile
    {
        return TCD9_CSR & (1u << 5u);
    }

    /**
     * Set TCD9_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD9_CSR_MAJORELINK() volatile
    {
        TCD9_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD9_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD9_CSR_MAJORELINK() volatile
    {
        TCD9_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD9_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD9_CSR_MAJORELINK() volatile
    {
        TCD9_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD9_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD9_CSR_ESG() volatile
    {
        return TCD9_CSR & (1u << 4u);
    }

    /**
     * Set TCD9_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD9_CSR_ESG() volatile
    {
        TCD9_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD9_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD9_CSR_ESG() volatile
    {
        TCD9_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD9_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD9_CSR_ESG() volatile
    {
        TCD9_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD9_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD9_CSR_DREQ() volatile
    {
        return TCD9_CSR & (1u << 3u);
    }

    /**
     * Set TCD9_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD9_CSR_DREQ() volatile
    {
        TCD9_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD9_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD9_CSR_DREQ() volatile
    {
        TCD9_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD9_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD9_CSR_DREQ() volatile
    {
        TCD9_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD9_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD9_CSR_INTHALF() volatile
    {
        return TCD9_CSR & (1u << 2u);
    }

    /**
     * Set TCD9_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD9_CSR_INTHALF() volatile
    {
        TCD9_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD9_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD9_CSR_INTHALF() volatile
    {
        TCD9_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD9_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD9_CSR_INTHALF() volatile
    {
        TCD9_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD9_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD9_CSR_INTMAJOR() volatile
    {
        return TCD9_CSR & (1u << 1u);
    }

    /**
     * Set TCD9_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD9_CSR_INTMAJOR() volatile
    {
        TCD9_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD9_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD9_CSR_INTMAJOR() volatile
    {
        TCD9_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD9_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD9_CSR_INTMAJOR() volatile
    {
        TCD9_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD9_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD9_CSR_START() volatile
    {
        return TCD9_CSR & (1u << 0u);
    }

    /**
     * Set TCD9_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD9_CSR_START() volatile
    {
        TCD9_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD9_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD9_CSR_START() volatile
    {
        TCD9_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD9_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD9_CSR_START() volatile
    {
        TCD9_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD9_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD9_CSR(DMA0_TCD9_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                             bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                             bool &ESG, bool &DREQ, bool &INTHALF,
                             bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD9_CSR;

        BWC = DMA0_TCD9_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD9_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD9_CSR(DMA0_TCD9_CSR_BWC BWC, uint8_t MAJORLINKCH,
                             bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                             bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD9_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD9_CSR = curr;
    }

    /**
     * Get TCD10_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD10_SADDR_SADDR() volatile
    {
        return (TCD10_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD10_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD10_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD10_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD10_SADDR = curr;
    }

    /**
     * Get TCD10_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD10_SOFF_SOFF() volatile
    {
        return (TCD10_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD10_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD10_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD10_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD10_SOFF = curr;
    }

    /**
     * Get TCD10_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD10_ATTR_SMOD get_TCD10_ATTR_SMOD() volatile
    {
        return DMA0_TCD10_ATTR_SMOD((TCD10_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD10_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD10_ATTR_SMOD(DMA0_TCD10_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD10_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD10_ATTR = curr;
    }

    /**
     * Get TCD10_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD10_ATTR_SSIZE get_TCD10_ATTR_SSIZE() volatile
    {
        return DMA0_TCD10_ATTR_SSIZE((TCD10_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD10_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD10_ATTR_SSIZE(DMA0_TCD10_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD10_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD10_ATTR = curr;
    }

    /**
     * Get TCD10_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD10_ATTR_DMOD() volatile
    {
        return (TCD10_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD10_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD10_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD10_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD10_ATTR = curr;
    }

    /**
     * Get TCD10_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD10_ATTR_DSIZE() volatile
    {
        return (TCD10_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD10_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD10_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD10_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD10_ATTR = curr;
    }

    /**
     * Get all of TCD10_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD10_ATTR(DMA0_TCD10_ATTR_SMOD &SMOD,
                               DMA0_TCD10_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD10_ATTR;

        SMOD = DMA0_TCD10_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD10_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD10_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD10_ATTR(DMA0_TCD10_ATTR_SMOD SMOD,
                               DMA0_TCD10_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD10_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD10_ATTR = curr;
    }

    /**
     * Get TCD10_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD10_SLAST_SLAST() volatile
    {
        return (TCD10_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD10_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD10_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD10_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD10_SLAST = curr;
    }

    /**
     * Get TCD10_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD10_DADDR_DADDR() volatile
    {
        return (TCD10_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD10_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD10_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD10_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD10_DADDR = curr;
    }

    /**
     * Get TCD10_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD10_DOFF_DOFF() volatile
    {
        return (TCD10_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD10_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD10_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD10_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD10_DOFF = curr;
    }

    /**
     * Get TCD10_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD10_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD10_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD10_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD10_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD10_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD10_DLASTSGA = curr;
    }

    /**
     * Get TCD10_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD10_CSR_BWC get_TCD10_CSR_BWC() volatile
    {
        return DMA0_TCD10_CSR_BWC((TCD10_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD10_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD10_CSR_BWC(DMA0_TCD10_CSR_BWC value) volatile
    {
        uint16_t curr = TCD10_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD10_CSR = curr;
    }

    /**
     * Get TCD10_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD10_CSR_MAJORLINKCH() volatile
    {
        return (TCD10_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD10_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD10_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD10_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD10_CSR = curr;
    }

    /**
     * Get TCD10_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD10_CSR_DONE() volatile
    {
        return TCD10_CSR & (1u << 7u);
    }

    /**
     * Set TCD10_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD10_CSR_DONE() volatile
    {
        TCD10_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD10_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD10_CSR_DONE() volatile
    {
        TCD10_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD10_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD10_CSR_DONE() volatile
    {
        TCD10_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD10_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD10_CSR_ACTIVE() volatile
    {
        return TCD10_CSR & (1u << 6u);
    }

    /**
     * Get TCD10_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD10_CSR_MAJORELINK() volatile
    {
        return TCD10_CSR & (1u << 5u);
    }

    /**
     * Set TCD10_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD10_CSR_MAJORELINK() volatile
    {
        TCD10_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD10_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD10_CSR_MAJORELINK() volatile
    {
        TCD10_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD10_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD10_CSR_MAJORELINK() volatile
    {
        TCD10_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD10_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD10_CSR_ESG() volatile
    {
        return TCD10_CSR & (1u << 4u);
    }

    /**
     * Set TCD10_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD10_CSR_ESG() volatile
    {
        TCD10_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD10_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD10_CSR_ESG() volatile
    {
        TCD10_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD10_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD10_CSR_ESG() volatile
    {
        TCD10_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD10_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD10_CSR_DREQ() volatile
    {
        return TCD10_CSR & (1u << 3u);
    }

    /**
     * Set TCD10_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD10_CSR_DREQ() volatile
    {
        TCD10_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD10_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD10_CSR_DREQ() volatile
    {
        TCD10_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD10_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD10_CSR_DREQ() volatile
    {
        TCD10_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD10_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD10_CSR_INTHALF() volatile
    {
        return TCD10_CSR & (1u << 2u);
    }

    /**
     * Set TCD10_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD10_CSR_INTHALF() volatile
    {
        TCD10_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD10_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD10_CSR_INTHALF() volatile
    {
        TCD10_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD10_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD10_CSR_INTHALF() volatile
    {
        TCD10_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD10_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD10_CSR_INTMAJOR() volatile
    {
        return TCD10_CSR & (1u << 1u);
    }

    /**
     * Set TCD10_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD10_CSR_INTMAJOR() volatile
    {
        TCD10_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD10_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD10_CSR_INTMAJOR() volatile
    {
        TCD10_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD10_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD10_CSR_INTMAJOR() volatile
    {
        TCD10_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD10_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD10_CSR_START() volatile
    {
        return TCD10_CSR & (1u << 0u);
    }

    /**
     * Set TCD10_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD10_CSR_START() volatile
    {
        TCD10_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD10_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD10_CSR_START() volatile
    {
        TCD10_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD10_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD10_CSR_START() volatile
    {
        TCD10_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD10_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD10_CSR(DMA0_TCD10_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD10_CSR;

        BWC = DMA0_TCD10_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD10_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD10_CSR(DMA0_TCD10_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD10_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD10_CSR = curr;
    }

    /**
     * Get TCD11_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD11_SADDR_SADDR() volatile
    {
        return (TCD11_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD11_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD11_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD11_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD11_SADDR = curr;
    }

    /**
     * Get TCD11_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD11_SOFF_SOFF() volatile
    {
        return (TCD11_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD11_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD11_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD11_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD11_SOFF = curr;
    }

    /**
     * Get TCD11_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD11_ATTR_SMOD get_TCD11_ATTR_SMOD() volatile
    {
        return DMA0_TCD11_ATTR_SMOD((TCD11_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD11_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD11_ATTR_SMOD(DMA0_TCD11_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD11_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD11_ATTR = curr;
    }

    /**
     * Get TCD11_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD11_ATTR_SSIZE get_TCD11_ATTR_SSIZE() volatile
    {
        return DMA0_TCD11_ATTR_SSIZE((TCD11_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD11_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD11_ATTR_SSIZE(DMA0_TCD11_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD11_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD11_ATTR = curr;
    }

    /**
     * Get TCD11_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD11_ATTR_DMOD() volatile
    {
        return (TCD11_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD11_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD11_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD11_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD11_ATTR = curr;
    }

    /**
     * Get TCD11_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD11_ATTR_DSIZE() volatile
    {
        return (TCD11_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD11_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD11_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD11_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD11_ATTR = curr;
    }

    /**
     * Get all of TCD11_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD11_ATTR(DMA0_TCD11_ATTR_SMOD &SMOD,
                               DMA0_TCD11_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD11_ATTR;

        SMOD = DMA0_TCD11_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD11_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD11_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD11_ATTR(DMA0_TCD11_ATTR_SMOD SMOD,
                               DMA0_TCD11_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD11_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD11_ATTR = curr;
    }

    /**
     * Get TCD11_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD11_SLAST_SLAST() volatile
    {
        return (TCD11_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD11_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD11_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD11_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD11_SLAST = curr;
    }

    /**
     * Get TCD11_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD11_DADDR_DADDR() volatile
    {
        return (TCD11_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD11_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD11_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD11_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD11_DADDR = curr;
    }

    /**
     * Get TCD11_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD11_DOFF_DOFF() volatile
    {
        return (TCD11_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD11_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD11_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD11_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD11_DOFF = curr;
    }

    /**
     * Get TCD11_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD11_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD11_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD11_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD11_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD11_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD11_DLASTSGA = curr;
    }

    /**
     * Get TCD11_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD11_CSR_BWC get_TCD11_CSR_BWC() volatile
    {
        return DMA0_TCD11_CSR_BWC((TCD11_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD11_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD11_CSR_BWC(DMA0_TCD11_CSR_BWC value) volatile
    {
        uint16_t curr = TCD11_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD11_CSR = curr;
    }

    /**
     * Get TCD11_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD11_CSR_MAJORLINKCH() volatile
    {
        return (TCD11_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD11_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD11_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD11_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD11_CSR = curr;
    }

    /**
     * Get TCD11_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD11_CSR_DONE() volatile
    {
        return TCD11_CSR & (1u << 7u);
    }

    /**
     * Set TCD11_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD11_CSR_DONE() volatile
    {
        TCD11_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD11_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD11_CSR_DONE() volatile
    {
        TCD11_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD11_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD11_CSR_DONE() volatile
    {
        TCD11_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD11_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD11_CSR_ACTIVE() volatile
    {
        return TCD11_CSR & (1u << 6u);
    }

    /**
     * Get TCD11_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD11_CSR_MAJORELINK() volatile
    {
        return TCD11_CSR & (1u << 5u);
    }

    /**
     * Set TCD11_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD11_CSR_MAJORELINK() volatile
    {
        TCD11_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD11_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD11_CSR_MAJORELINK() volatile
    {
        TCD11_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD11_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD11_CSR_MAJORELINK() volatile
    {
        TCD11_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD11_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD11_CSR_ESG() volatile
    {
        return TCD11_CSR & (1u << 4u);
    }

    /**
     * Set TCD11_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD11_CSR_ESG() volatile
    {
        TCD11_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD11_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD11_CSR_ESG() volatile
    {
        TCD11_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD11_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD11_CSR_ESG() volatile
    {
        TCD11_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD11_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD11_CSR_DREQ() volatile
    {
        return TCD11_CSR & (1u << 3u);
    }

    /**
     * Set TCD11_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD11_CSR_DREQ() volatile
    {
        TCD11_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD11_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD11_CSR_DREQ() volatile
    {
        TCD11_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD11_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD11_CSR_DREQ() volatile
    {
        TCD11_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD11_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD11_CSR_INTHALF() volatile
    {
        return TCD11_CSR & (1u << 2u);
    }

    /**
     * Set TCD11_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD11_CSR_INTHALF() volatile
    {
        TCD11_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD11_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD11_CSR_INTHALF() volatile
    {
        TCD11_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD11_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD11_CSR_INTHALF() volatile
    {
        TCD11_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD11_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD11_CSR_INTMAJOR() volatile
    {
        return TCD11_CSR & (1u << 1u);
    }

    /**
     * Set TCD11_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD11_CSR_INTMAJOR() volatile
    {
        TCD11_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD11_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD11_CSR_INTMAJOR() volatile
    {
        TCD11_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD11_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD11_CSR_INTMAJOR() volatile
    {
        TCD11_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD11_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD11_CSR_START() volatile
    {
        return TCD11_CSR & (1u << 0u);
    }

    /**
     * Set TCD11_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD11_CSR_START() volatile
    {
        TCD11_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD11_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD11_CSR_START() volatile
    {
        TCD11_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD11_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD11_CSR_START() volatile
    {
        TCD11_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD11_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD11_CSR(DMA0_TCD11_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD11_CSR;

        BWC = DMA0_TCD11_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD11_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD11_CSR(DMA0_TCD11_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD11_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD11_CSR = curr;
    }

    /**
     * Get TCD12_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD12_SADDR_SADDR() volatile
    {
        return (TCD12_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD12_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD12_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD12_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD12_SADDR = curr;
    }

    /**
     * Get TCD12_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD12_SOFF_SOFF() volatile
    {
        return (TCD12_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD12_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD12_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD12_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD12_SOFF = curr;
    }

    /**
     * Get TCD12_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD12_ATTR_SMOD get_TCD12_ATTR_SMOD() volatile
    {
        return DMA0_TCD12_ATTR_SMOD((TCD12_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD12_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD12_ATTR_SMOD(DMA0_TCD12_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD12_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD12_ATTR = curr;
    }

    /**
     * Get TCD12_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD12_ATTR_SSIZE get_TCD12_ATTR_SSIZE() volatile
    {
        return DMA0_TCD12_ATTR_SSIZE((TCD12_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD12_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD12_ATTR_SSIZE(DMA0_TCD12_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD12_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD12_ATTR = curr;
    }

    /**
     * Get TCD12_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD12_ATTR_DMOD() volatile
    {
        return (TCD12_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD12_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD12_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD12_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD12_ATTR = curr;
    }

    /**
     * Get TCD12_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD12_ATTR_DSIZE() volatile
    {
        return (TCD12_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD12_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD12_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD12_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD12_ATTR = curr;
    }

    /**
     * Get all of TCD12_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD12_ATTR(DMA0_TCD12_ATTR_SMOD &SMOD,
                               DMA0_TCD12_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD12_ATTR;

        SMOD = DMA0_TCD12_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD12_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD12_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD12_ATTR(DMA0_TCD12_ATTR_SMOD SMOD,
                               DMA0_TCD12_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD12_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD12_ATTR = curr;
    }

    /**
     * Get TCD12_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD12_SLAST_SLAST() volatile
    {
        return (TCD12_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD12_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD12_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD12_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD12_SLAST = curr;
    }

    /**
     * Get TCD12_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD12_DADDR_DADDR() volatile
    {
        return (TCD12_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD12_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD12_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD12_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD12_DADDR = curr;
    }

    /**
     * Get TCD12_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD12_DOFF_DOFF() volatile
    {
        return (TCD12_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD12_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD12_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD12_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD12_DOFF = curr;
    }

    /**
     * Get TCD12_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD12_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD12_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD12_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD12_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD12_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD12_DLASTSGA = curr;
    }

    /**
     * Get TCD12_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD12_CSR_BWC get_TCD12_CSR_BWC() volatile
    {
        return DMA0_TCD12_CSR_BWC((TCD12_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD12_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD12_CSR_BWC(DMA0_TCD12_CSR_BWC value) volatile
    {
        uint16_t curr = TCD12_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD12_CSR = curr;
    }

    /**
     * Get TCD12_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD12_CSR_MAJORLINKCH() volatile
    {
        return (TCD12_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD12_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD12_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD12_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD12_CSR = curr;
    }

    /**
     * Get TCD12_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD12_CSR_DONE() volatile
    {
        return TCD12_CSR & (1u << 7u);
    }

    /**
     * Set TCD12_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD12_CSR_DONE() volatile
    {
        TCD12_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD12_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD12_CSR_DONE() volatile
    {
        TCD12_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD12_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD12_CSR_DONE() volatile
    {
        TCD12_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD12_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD12_CSR_ACTIVE() volatile
    {
        return TCD12_CSR & (1u << 6u);
    }

    /**
     * Get TCD12_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD12_CSR_MAJORELINK() volatile
    {
        return TCD12_CSR & (1u << 5u);
    }

    /**
     * Set TCD12_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD12_CSR_MAJORELINK() volatile
    {
        TCD12_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD12_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD12_CSR_MAJORELINK() volatile
    {
        TCD12_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD12_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD12_CSR_MAJORELINK() volatile
    {
        TCD12_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD12_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD12_CSR_ESG() volatile
    {
        return TCD12_CSR & (1u << 4u);
    }

    /**
     * Set TCD12_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD12_CSR_ESG() volatile
    {
        TCD12_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD12_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD12_CSR_ESG() volatile
    {
        TCD12_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD12_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD12_CSR_ESG() volatile
    {
        TCD12_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD12_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD12_CSR_DREQ() volatile
    {
        return TCD12_CSR & (1u << 3u);
    }

    /**
     * Set TCD12_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD12_CSR_DREQ() volatile
    {
        TCD12_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD12_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD12_CSR_DREQ() volatile
    {
        TCD12_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD12_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD12_CSR_DREQ() volatile
    {
        TCD12_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD12_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD12_CSR_INTHALF() volatile
    {
        return TCD12_CSR & (1u << 2u);
    }

    /**
     * Set TCD12_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD12_CSR_INTHALF() volatile
    {
        TCD12_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD12_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD12_CSR_INTHALF() volatile
    {
        TCD12_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD12_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD12_CSR_INTHALF() volatile
    {
        TCD12_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD12_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD12_CSR_INTMAJOR() volatile
    {
        return TCD12_CSR & (1u << 1u);
    }

    /**
     * Set TCD12_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD12_CSR_INTMAJOR() volatile
    {
        TCD12_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD12_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD12_CSR_INTMAJOR() volatile
    {
        TCD12_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD12_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD12_CSR_INTMAJOR() volatile
    {
        TCD12_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD12_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD12_CSR_START() volatile
    {
        return TCD12_CSR & (1u << 0u);
    }

    /**
     * Set TCD12_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD12_CSR_START() volatile
    {
        TCD12_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD12_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD12_CSR_START() volatile
    {
        TCD12_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD12_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD12_CSR_START() volatile
    {
        TCD12_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD12_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD12_CSR(DMA0_TCD12_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD12_CSR;

        BWC = DMA0_TCD12_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD12_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD12_CSR(DMA0_TCD12_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD12_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD12_CSR = curr;
    }

    /**
     * Get TCD13_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD13_SADDR_SADDR() volatile
    {
        return (TCD13_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD13_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD13_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD13_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD13_SADDR = curr;
    }

    /**
     * Get TCD13_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD13_SOFF_SOFF() volatile
    {
        return (TCD13_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD13_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD13_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD13_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD13_SOFF = curr;
    }

    /**
     * Get TCD13_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD13_ATTR_SMOD get_TCD13_ATTR_SMOD() volatile
    {
        return DMA0_TCD13_ATTR_SMOD((TCD13_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD13_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD13_ATTR_SMOD(DMA0_TCD13_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD13_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD13_ATTR = curr;
    }

    /**
     * Get TCD13_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD13_ATTR_SSIZE get_TCD13_ATTR_SSIZE() volatile
    {
        return DMA0_TCD13_ATTR_SSIZE((TCD13_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD13_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD13_ATTR_SSIZE(DMA0_TCD13_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD13_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD13_ATTR = curr;
    }

    /**
     * Get TCD13_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD13_ATTR_DMOD() volatile
    {
        return (TCD13_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD13_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD13_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD13_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD13_ATTR = curr;
    }

    /**
     * Get TCD13_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD13_ATTR_DSIZE() volatile
    {
        return (TCD13_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD13_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD13_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD13_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD13_ATTR = curr;
    }

    /**
     * Get all of TCD13_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD13_ATTR(DMA0_TCD13_ATTR_SMOD &SMOD,
                               DMA0_TCD13_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD13_ATTR;

        SMOD = DMA0_TCD13_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD13_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD13_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD13_ATTR(DMA0_TCD13_ATTR_SMOD SMOD,
                               DMA0_TCD13_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD13_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD13_ATTR = curr;
    }

    /**
     * Get TCD13_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD13_SLAST_SLAST() volatile
    {
        return (TCD13_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD13_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD13_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD13_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD13_SLAST = curr;
    }

    /**
     * Get TCD13_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD13_DADDR_DADDR() volatile
    {
        return (TCD13_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD13_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD13_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD13_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD13_DADDR = curr;
    }

    /**
     * Get TCD13_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD13_DOFF_DOFF() volatile
    {
        return (TCD13_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD13_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD13_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD13_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD13_DOFF = curr;
    }

    /**
     * Get TCD13_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD13_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD13_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD13_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD13_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD13_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD13_DLASTSGA = curr;
    }

    /**
     * Get TCD13_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD13_CSR_BWC get_TCD13_CSR_BWC() volatile
    {
        return DMA0_TCD13_CSR_BWC((TCD13_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD13_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD13_CSR_BWC(DMA0_TCD13_CSR_BWC value) volatile
    {
        uint16_t curr = TCD13_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD13_CSR = curr;
    }

    /**
     * Get TCD13_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD13_CSR_MAJORLINKCH() volatile
    {
        return (TCD13_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD13_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD13_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD13_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD13_CSR = curr;
    }

    /**
     * Get TCD13_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD13_CSR_DONE() volatile
    {
        return TCD13_CSR & (1u << 7u);
    }

    /**
     * Set TCD13_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD13_CSR_DONE() volatile
    {
        TCD13_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD13_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD13_CSR_DONE() volatile
    {
        TCD13_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD13_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD13_CSR_DONE() volatile
    {
        TCD13_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD13_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD13_CSR_ACTIVE() volatile
    {
        return TCD13_CSR & (1u << 6u);
    }

    /**
     * Get TCD13_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD13_CSR_MAJORELINK() volatile
    {
        return TCD13_CSR & (1u << 5u);
    }

    /**
     * Set TCD13_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD13_CSR_MAJORELINK() volatile
    {
        TCD13_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD13_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD13_CSR_MAJORELINK() volatile
    {
        TCD13_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD13_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD13_CSR_MAJORELINK() volatile
    {
        TCD13_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD13_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD13_CSR_ESG() volatile
    {
        return TCD13_CSR & (1u << 4u);
    }

    /**
     * Set TCD13_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD13_CSR_ESG() volatile
    {
        TCD13_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD13_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD13_CSR_ESG() volatile
    {
        TCD13_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD13_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD13_CSR_ESG() volatile
    {
        TCD13_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD13_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD13_CSR_DREQ() volatile
    {
        return TCD13_CSR & (1u << 3u);
    }

    /**
     * Set TCD13_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD13_CSR_DREQ() volatile
    {
        TCD13_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD13_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD13_CSR_DREQ() volatile
    {
        TCD13_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD13_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD13_CSR_DREQ() volatile
    {
        TCD13_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD13_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD13_CSR_INTHALF() volatile
    {
        return TCD13_CSR & (1u << 2u);
    }

    /**
     * Set TCD13_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD13_CSR_INTHALF() volatile
    {
        TCD13_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD13_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD13_CSR_INTHALF() volatile
    {
        TCD13_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD13_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD13_CSR_INTHALF() volatile
    {
        TCD13_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD13_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD13_CSR_INTMAJOR() volatile
    {
        return TCD13_CSR & (1u << 1u);
    }

    /**
     * Set TCD13_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD13_CSR_INTMAJOR() volatile
    {
        TCD13_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD13_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD13_CSR_INTMAJOR() volatile
    {
        TCD13_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD13_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD13_CSR_INTMAJOR() volatile
    {
        TCD13_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD13_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD13_CSR_START() volatile
    {
        return TCD13_CSR & (1u << 0u);
    }

    /**
     * Set TCD13_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD13_CSR_START() volatile
    {
        TCD13_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD13_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD13_CSR_START() volatile
    {
        TCD13_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD13_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD13_CSR_START() volatile
    {
        TCD13_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD13_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD13_CSR(DMA0_TCD13_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD13_CSR;

        BWC = DMA0_TCD13_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD13_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD13_CSR(DMA0_TCD13_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD13_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD13_CSR = curr;
    }

    /**
     * Get TCD14_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD14_SADDR_SADDR() volatile
    {
        return (TCD14_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD14_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD14_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD14_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD14_SADDR = curr;
    }

    /**
     * Get TCD14_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD14_SOFF_SOFF() volatile
    {
        return (TCD14_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD14_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD14_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD14_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD14_SOFF = curr;
    }

    /**
     * Get TCD14_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD14_ATTR_SMOD get_TCD14_ATTR_SMOD() volatile
    {
        return DMA0_TCD14_ATTR_SMOD((TCD14_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD14_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD14_ATTR_SMOD(DMA0_TCD14_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD14_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD14_ATTR = curr;
    }

    /**
     * Get TCD14_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD14_ATTR_SSIZE get_TCD14_ATTR_SSIZE() volatile
    {
        return DMA0_TCD14_ATTR_SSIZE((TCD14_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD14_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD14_ATTR_SSIZE(DMA0_TCD14_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD14_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD14_ATTR = curr;
    }

    /**
     * Get TCD14_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD14_ATTR_DMOD() volatile
    {
        return (TCD14_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD14_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD14_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD14_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD14_ATTR = curr;
    }

    /**
     * Get TCD14_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD14_ATTR_DSIZE() volatile
    {
        return (TCD14_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD14_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD14_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD14_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD14_ATTR = curr;
    }

    /**
     * Get all of TCD14_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD14_ATTR(DMA0_TCD14_ATTR_SMOD &SMOD,
                               DMA0_TCD14_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD14_ATTR;

        SMOD = DMA0_TCD14_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD14_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD14_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD14_ATTR(DMA0_TCD14_ATTR_SMOD SMOD,
                               DMA0_TCD14_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD14_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD14_ATTR = curr;
    }

    /**
     * Get TCD14_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD14_SLAST_SLAST() volatile
    {
        return (TCD14_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD14_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD14_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD14_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD14_SLAST = curr;
    }

    /**
     * Get TCD14_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD14_DADDR_DADDR() volatile
    {
        return (TCD14_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD14_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD14_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD14_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD14_DADDR = curr;
    }

    /**
     * Get TCD14_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD14_DOFF_DOFF() volatile
    {
        return (TCD14_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD14_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD14_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD14_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD14_DOFF = curr;
    }

    /**
     * Get TCD14_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD14_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD14_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD14_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD14_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD14_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD14_DLASTSGA = curr;
    }

    /**
     * Get TCD14_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD14_CSR_BWC get_TCD14_CSR_BWC() volatile
    {
        return DMA0_TCD14_CSR_BWC((TCD14_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD14_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD14_CSR_BWC(DMA0_TCD14_CSR_BWC value) volatile
    {
        uint16_t curr = TCD14_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD14_CSR = curr;
    }

    /**
     * Get TCD14_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD14_CSR_MAJORLINKCH() volatile
    {
        return (TCD14_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD14_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD14_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD14_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD14_CSR = curr;
    }

    /**
     * Get TCD14_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD14_CSR_DONE() volatile
    {
        return TCD14_CSR & (1u << 7u);
    }

    /**
     * Set TCD14_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD14_CSR_DONE() volatile
    {
        TCD14_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD14_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD14_CSR_DONE() volatile
    {
        TCD14_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD14_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD14_CSR_DONE() volatile
    {
        TCD14_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD14_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD14_CSR_ACTIVE() volatile
    {
        return TCD14_CSR & (1u << 6u);
    }

    /**
     * Get TCD14_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD14_CSR_MAJORELINK() volatile
    {
        return TCD14_CSR & (1u << 5u);
    }

    /**
     * Set TCD14_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD14_CSR_MAJORELINK() volatile
    {
        TCD14_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD14_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD14_CSR_MAJORELINK() volatile
    {
        TCD14_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD14_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD14_CSR_MAJORELINK() volatile
    {
        TCD14_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD14_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD14_CSR_ESG() volatile
    {
        return TCD14_CSR & (1u << 4u);
    }

    /**
     * Set TCD14_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD14_CSR_ESG() volatile
    {
        TCD14_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD14_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD14_CSR_ESG() volatile
    {
        TCD14_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD14_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD14_CSR_ESG() volatile
    {
        TCD14_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD14_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD14_CSR_DREQ() volatile
    {
        return TCD14_CSR & (1u << 3u);
    }

    /**
     * Set TCD14_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD14_CSR_DREQ() volatile
    {
        TCD14_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD14_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD14_CSR_DREQ() volatile
    {
        TCD14_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD14_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD14_CSR_DREQ() volatile
    {
        TCD14_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD14_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD14_CSR_INTHALF() volatile
    {
        return TCD14_CSR & (1u << 2u);
    }

    /**
     * Set TCD14_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD14_CSR_INTHALF() volatile
    {
        TCD14_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD14_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD14_CSR_INTHALF() volatile
    {
        TCD14_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD14_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD14_CSR_INTHALF() volatile
    {
        TCD14_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD14_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD14_CSR_INTMAJOR() volatile
    {
        return TCD14_CSR & (1u << 1u);
    }

    /**
     * Set TCD14_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD14_CSR_INTMAJOR() volatile
    {
        TCD14_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD14_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD14_CSR_INTMAJOR() volatile
    {
        TCD14_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD14_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD14_CSR_INTMAJOR() volatile
    {
        TCD14_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD14_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD14_CSR_START() volatile
    {
        return TCD14_CSR & (1u << 0u);
    }

    /**
     * Set TCD14_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD14_CSR_START() volatile
    {
        TCD14_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD14_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD14_CSR_START() volatile
    {
        TCD14_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD14_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD14_CSR_START() volatile
    {
        TCD14_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD14_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD14_CSR(DMA0_TCD14_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD14_CSR;

        BWC = DMA0_TCD14_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD14_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD14_CSR(DMA0_TCD14_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD14_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD14_CSR = curr;
    }

    /**
     * Get TCD15_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD15_SADDR_SADDR() volatile
    {
        return (TCD15_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD15_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD15_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD15_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD15_SADDR = curr;
    }

    /**
     * Get TCD15_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD15_SOFF_SOFF() volatile
    {
        return (TCD15_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD15_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD15_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD15_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD15_SOFF = curr;
    }

    /**
     * Get TCD15_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD15_ATTR_SMOD get_TCD15_ATTR_SMOD() volatile
    {
        return DMA0_TCD15_ATTR_SMOD((TCD15_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD15_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD15_ATTR_SMOD(DMA0_TCD15_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD15_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD15_ATTR = curr;
    }

    /**
     * Get TCD15_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD15_ATTR_SSIZE get_TCD15_ATTR_SSIZE() volatile
    {
        return DMA0_TCD15_ATTR_SSIZE((TCD15_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD15_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD15_ATTR_SSIZE(DMA0_TCD15_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD15_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD15_ATTR = curr;
    }

    /**
     * Get TCD15_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD15_ATTR_DMOD() volatile
    {
        return (TCD15_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD15_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD15_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD15_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD15_ATTR = curr;
    }

    /**
     * Get TCD15_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD15_ATTR_DSIZE() volatile
    {
        return (TCD15_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD15_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD15_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD15_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD15_ATTR = curr;
    }

    /**
     * Get all of TCD15_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD15_ATTR(DMA0_TCD15_ATTR_SMOD &SMOD,
                               DMA0_TCD15_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD15_ATTR;

        SMOD = DMA0_TCD15_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD15_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD15_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD15_ATTR(DMA0_TCD15_ATTR_SMOD SMOD,
                               DMA0_TCD15_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD15_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD15_ATTR = curr;
    }

    /**
     * Get TCD15_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD15_SLAST_SLAST() volatile
    {
        return (TCD15_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD15_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD15_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD15_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD15_SLAST = curr;
    }

    /**
     * Get TCD15_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD15_DADDR_DADDR() volatile
    {
        return (TCD15_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD15_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD15_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD15_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD15_DADDR = curr;
    }

    /**
     * Get TCD15_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD15_DOFF_DOFF() volatile
    {
        return (TCD15_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD15_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD15_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD15_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD15_DOFF = curr;
    }

    /**
     * Get TCD15_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD15_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD15_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD15_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD15_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD15_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD15_DLASTSGA = curr;
    }

    /**
     * Get TCD15_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD15_CSR_BWC get_TCD15_CSR_BWC() volatile
    {
        return DMA0_TCD15_CSR_BWC((TCD15_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD15_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD15_CSR_BWC(DMA0_TCD15_CSR_BWC value) volatile
    {
        uint16_t curr = TCD15_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD15_CSR = curr;
    }

    /**
     * Get TCD15_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD15_CSR_MAJORLINKCH() volatile
    {
        return (TCD15_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD15_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD15_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD15_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD15_CSR = curr;
    }

    /**
     * Get TCD15_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD15_CSR_DONE() volatile
    {
        return TCD15_CSR & (1u << 7u);
    }

    /**
     * Set TCD15_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD15_CSR_DONE() volatile
    {
        TCD15_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD15_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD15_CSR_DONE() volatile
    {
        TCD15_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD15_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD15_CSR_DONE() volatile
    {
        TCD15_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD15_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD15_CSR_ACTIVE() volatile
    {
        return TCD15_CSR & (1u << 6u);
    }

    /**
     * Get TCD15_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD15_CSR_MAJORELINK() volatile
    {
        return TCD15_CSR & (1u << 5u);
    }

    /**
     * Set TCD15_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD15_CSR_MAJORELINK() volatile
    {
        TCD15_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD15_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD15_CSR_MAJORELINK() volatile
    {
        TCD15_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD15_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD15_CSR_MAJORELINK() volatile
    {
        TCD15_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD15_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD15_CSR_ESG() volatile
    {
        return TCD15_CSR & (1u << 4u);
    }

    /**
     * Set TCD15_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD15_CSR_ESG() volatile
    {
        TCD15_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD15_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD15_CSR_ESG() volatile
    {
        TCD15_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD15_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD15_CSR_ESG() volatile
    {
        TCD15_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD15_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD15_CSR_DREQ() volatile
    {
        return TCD15_CSR & (1u << 3u);
    }

    /**
     * Set TCD15_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD15_CSR_DREQ() volatile
    {
        TCD15_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD15_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD15_CSR_DREQ() volatile
    {
        TCD15_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD15_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD15_CSR_DREQ() volatile
    {
        TCD15_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD15_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD15_CSR_INTHALF() volatile
    {
        return TCD15_CSR & (1u << 2u);
    }

    /**
     * Set TCD15_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD15_CSR_INTHALF() volatile
    {
        TCD15_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD15_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD15_CSR_INTHALF() volatile
    {
        TCD15_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD15_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD15_CSR_INTHALF() volatile
    {
        TCD15_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD15_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD15_CSR_INTMAJOR() volatile
    {
        return TCD15_CSR & (1u << 1u);
    }

    /**
     * Set TCD15_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD15_CSR_INTMAJOR() volatile
    {
        TCD15_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD15_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD15_CSR_INTMAJOR() volatile
    {
        TCD15_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD15_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD15_CSR_INTMAJOR() volatile
    {
        TCD15_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD15_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD15_CSR_START() volatile
    {
        return TCD15_CSR & (1u << 0u);
    }

    /**
     * Set TCD15_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD15_CSR_START() volatile
    {
        TCD15_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD15_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD15_CSR_START() volatile
    {
        TCD15_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD15_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD15_CSR_START() volatile
    {
        TCD15_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD15_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD15_CSR(DMA0_TCD15_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD15_CSR;

        BWC = DMA0_TCD15_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD15_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD15_CSR(DMA0_TCD15_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD15_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD15_CSR = curr;
    }

    /**
     * Get TCD16_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD16_SADDR_SADDR() volatile
    {
        return (TCD16_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD16_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD16_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD16_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD16_SADDR = curr;
    }

    /**
     * Get TCD16_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD16_SOFF_SOFF() volatile
    {
        return (TCD16_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD16_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD16_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD16_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD16_SOFF = curr;
    }

    /**
     * Get TCD16_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD16_ATTR_SMOD get_TCD16_ATTR_SMOD() volatile
    {
        return DMA0_TCD16_ATTR_SMOD((TCD16_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD16_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD16_ATTR_SMOD(DMA0_TCD16_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD16_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD16_ATTR = curr;
    }

    /**
     * Get TCD16_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD16_ATTR_SSIZE get_TCD16_ATTR_SSIZE() volatile
    {
        return DMA0_TCD16_ATTR_SSIZE((TCD16_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD16_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD16_ATTR_SSIZE(DMA0_TCD16_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD16_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD16_ATTR = curr;
    }

    /**
     * Get TCD16_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD16_ATTR_DMOD() volatile
    {
        return (TCD16_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD16_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD16_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD16_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD16_ATTR = curr;
    }

    /**
     * Get TCD16_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD16_ATTR_DSIZE() volatile
    {
        return (TCD16_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD16_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD16_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD16_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD16_ATTR = curr;
    }

    /**
     * Get all of TCD16_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD16_ATTR(DMA0_TCD16_ATTR_SMOD &SMOD,
                               DMA0_TCD16_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD16_ATTR;

        SMOD = DMA0_TCD16_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD16_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD16_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD16_ATTR(DMA0_TCD16_ATTR_SMOD SMOD,
                               DMA0_TCD16_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD16_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD16_ATTR = curr;
    }

    /**
     * Get TCD16_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD16_SLAST_SLAST() volatile
    {
        return (TCD16_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD16_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD16_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD16_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD16_SLAST = curr;
    }

    /**
     * Get TCD16_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD16_DADDR_DADDR() volatile
    {
        return (TCD16_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD16_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD16_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD16_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD16_DADDR = curr;
    }

    /**
     * Get TCD16_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD16_DOFF_DOFF() volatile
    {
        return (TCD16_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD16_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD16_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD16_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD16_DOFF = curr;
    }

    /**
     * Get TCD16_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD16_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD16_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD16_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD16_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD16_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD16_DLASTSGA = curr;
    }

    /**
     * Get TCD16_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD16_CSR_BWC get_TCD16_CSR_BWC() volatile
    {
        return DMA0_TCD16_CSR_BWC((TCD16_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD16_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD16_CSR_BWC(DMA0_TCD16_CSR_BWC value) volatile
    {
        uint16_t curr = TCD16_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD16_CSR = curr;
    }

    /**
     * Get TCD16_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD16_CSR_MAJORLINKCH() volatile
    {
        return (TCD16_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD16_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD16_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD16_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD16_CSR = curr;
    }

    /**
     * Get TCD16_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD16_CSR_DONE() volatile
    {
        return TCD16_CSR & (1u << 7u);
    }

    /**
     * Set TCD16_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD16_CSR_DONE() volatile
    {
        TCD16_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD16_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD16_CSR_DONE() volatile
    {
        TCD16_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD16_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD16_CSR_DONE() volatile
    {
        TCD16_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD16_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD16_CSR_ACTIVE() volatile
    {
        return TCD16_CSR & (1u << 6u);
    }

    /**
     * Get TCD16_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD16_CSR_MAJORELINK() volatile
    {
        return TCD16_CSR & (1u << 5u);
    }

    /**
     * Set TCD16_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD16_CSR_MAJORELINK() volatile
    {
        TCD16_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD16_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD16_CSR_MAJORELINK() volatile
    {
        TCD16_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD16_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD16_CSR_MAJORELINK() volatile
    {
        TCD16_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD16_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD16_CSR_ESG() volatile
    {
        return TCD16_CSR & (1u << 4u);
    }

    /**
     * Set TCD16_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD16_CSR_ESG() volatile
    {
        TCD16_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD16_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD16_CSR_ESG() volatile
    {
        TCD16_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD16_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD16_CSR_ESG() volatile
    {
        TCD16_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD16_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD16_CSR_DREQ() volatile
    {
        return TCD16_CSR & (1u << 3u);
    }

    /**
     * Set TCD16_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD16_CSR_DREQ() volatile
    {
        TCD16_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD16_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD16_CSR_DREQ() volatile
    {
        TCD16_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD16_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD16_CSR_DREQ() volatile
    {
        TCD16_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD16_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD16_CSR_INTHALF() volatile
    {
        return TCD16_CSR & (1u << 2u);
    }

    /**
     * Set TCD16_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD16_CSR_INTHALF() volatile
    {
        TCD16_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD16_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD16_CSR_INTHALF() volatile
    {
        TCD16_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD16_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD16_CSR_INTHALF() volatile
    {
        TCD16_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD16_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD16_CSR_INTMAJOR() volatile
    {
        return TCD16_CSR & (1u << 1u);
    }

    /**
     * Set TCD16_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD16_CSR_INTMAJOR() volatile
    {
        TCD16_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD16_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD16_CSR_INTMAJOR() volatile
    {
        TCD16_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD16_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD16_CSR_INTMAJOR() volatile
    {
        TCD16_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD16_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD16_CSR_START() volatile
    {
        return TCD16_CSR & (1u << 0u);
    }

    /**
     * Set TCD16_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD16_CSR_START() volatile
    {
        TCD16_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD16_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD16_CSR_START() volatile
    {
        TCD16_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD16_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD16_CSR_START() volatile
    {
        TCD16_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD16_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD16_CSR(DMA0_TCD16_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD16_CSR;

        BWC = DMA0_TCD16_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD16_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD16_CSR(DMA0_TCD16_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD16_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD16_CSR = curr;
    }

    /**
     * Get TCD17_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD17_SADDR_SADDR() volatile
    {
        return (TCD17_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD17_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD17_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD17_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD17_SADDR = curr;
    }

    /**
     * Get TCD17_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD17_SOFF_SOFF() volatile
    {
        return (TCD17_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD17_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD17_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD17_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD17_SOFF = curr;
    }

    /**
     * Get TCD17_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD17_ATTR_SMOD get_TCD17_ATTR_SMOD() volatile
    {
        return DMA0_TCD17_ATTR_SMOD((TCD17_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD17_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD17_ATTR_SMOD(DMA0_TCD17_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD17_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD17_ATTR = curr;
    }

    /**
     * Get TCD17_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD17_ATTR_SSIZE get_TCD17_ATTR_SSIZE() volatile
    {
        return DMA0_TCD17_ATTR_SSIZE((TCD17_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD17_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD17_ATTR_SSIZE(DMA0_TCD17_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD17_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD17_ATTR = curr;
    }

    /**
     * Get TCD17_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD17_ATTR_DMOD() volatile
    {
        return (TCD17_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD17_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD17_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD17_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD17_ATTR = curr;
    }

    /**
     * Get TCD17_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD17_ATTR_DSIZE() volatile
    {
        return (TCD17_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD17_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD17_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD17_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD17_ATTR = curr;
    }

    /**
     * Get all of TCD17_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD17_ATTR(DMA0_TCD17_ATTR_SMOD &SMOD,
                               DMA0_TCD17_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD17_ATTR;

        SMOD = DMA0_TCD17_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD17_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD17_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD17_ATTR(DMA0_TCD17_ATTR_SMOD SMOD,
                               DMA0_TCD17_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD17_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD17_ATTR = curr;
    }

    /**
     * Get TCD17_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD17_SLAST_SLAST() volatile
    {
        return (TCD17_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD17_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD17_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD17_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD17_SLAST = curr;
    }

    /**
     * Get TCD17_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD17_DADDR_DADDR() volatile
    {
        return (TCD17_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD17_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD17_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD17_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD17_DADDR = curr;
    }

    /**
     * Get TCD17_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD17_DOFF_DOFF() volatile
    {
        return (TCD17_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD17_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD17_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD17_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD17_DOFF = curr;
    }

    /**
     * Get TCD17_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD17_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD17_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD17_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD17_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD17_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD17_DLASTSGA = curr;
    }

    /**
     * Get TCD17_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD17_CSR_BWC get_TCD17_CSR_BWC() volatile
    {
        return DMA0_TCD17_CSR_BWC((TCD17_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD17_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD17_CSR_BWC(DMA0_TCD17_CSR_BWC value) volatile
    {
        uint16_t curr = TCD17_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD17_CSR = curr;
    }

    /**
     * Get TCD17_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD17_CSR_MAJORLINKCH() volatile
    {
        return (TCD17_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD17_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD17_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD17_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD17_CSR = curr;
    }

    /**
     * Get TCD17_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD17_CSR_DONE() volatile
    {
        return TCD17_CSR & (1u << 7u);
    }

    /**
     * Set TCD17_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD17_CSR_DONE() volatile
    {
        TCD17_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD17_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD17_CSR_DONE() volatile
    {
        TCD17_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD17_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD17_CSR_DONE() volatile
    {
        TCD17_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD17_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD17_CSR_ACTIVE() volatile
    {
        return TCD17_CSR & (1u << 6u);
    }

    /**
     * Get TCD17_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD17_CSR_MAJORELINK() volatile
    {
        return TCD17_CSR & (1u << 5u);
    }

    /**
     * Set TCD17_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD17_CSR_MAJORELINK() volatile
    {
        TCD17_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD17_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD17_CSR_MAJORELINK() volatile
    {
        TCD17_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD17_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD17_CSR_MAJORELINK() volatile
    {
        TCD17_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD17_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD17_CSR_ESG() volatile
    {
        return TCD17_CSR & (1u << 4u);
    }

    /**
     * Set TCD17_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD17_CSR_ESG() volatile
    {
        TCD17_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD17_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD17_CSR_ESG() volatile
    {
        TCD17_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD17_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD17_CSR_ESG() volatile
    {
        TCD17_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD17_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD17_CSR_DREQ() volatile
    {
        return TCD17_CSR & (1u << 3u);
    }

    /**
     * Set TCD17_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD17_CSR_DREQ() volatile
    {
        TCD17_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD17_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD17_CSR_DREQ() volatile
    {
        TCD17_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD17_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD17_CSR_DREQ() volatile
    {
        TCD17_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD17_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD17_CSR_INTHALF() volatile
    {
        return TCD17_CSR & (1u << 2u);
    }

    /**
     * Set TCD17_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD17_CSR_INTHALF() volatile
    {
        TCD17_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD17_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD17_CSR_INTHALF() volatile
    {
        TCD17_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD17_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD17_CSR_INTHALF() volatile
    {
        TCD17_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD17_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD17_CSR_INTMAJOR() volatile
    {
        return TCD17_CSR & (1u << 1u);
    }

    /**
     * Set TCD17_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD17_CSR_INTMAJOR() volatile
    {
        TCD17_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD17_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD17_CSR_INTMAJOR() volatile
    {
        TCD17_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD17_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD17_CSR_INTMAJOR() volatile
    {
        TCD17_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD17_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD17_CSR_START() volatile
    {
        return TCD17_CSR & (1u << 0u);
    }

    /**
     * Set TCD17_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD17_CSR_START() volatile
    {
        TCD17_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD17_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD17_CSR_START() volatile
    {
        TCD17_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD17_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD17_CSR_START() volatile
    {
        TCD17_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD17_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD17_CSR(DMA0_TCD17_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD17_CSR;

        BWC = DMA0_TCD17_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD17_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD17_CSR(DMA0_TCD17_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD17_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD17_CSR = curr;
    }

    /**
     * Get TCD18_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD18_SADDR_SADDR() volatile
    {
        return (TCD18_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD18_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD18_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD18_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD18_SADDR = curr;
    }

    /**
     * Get TCD18_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD18_SOFF_SOFF() volatile
    {
        return (TCD18_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD18_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD18_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD18_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD18_SOFF = curr;
    }

    /**
     * Get TCD18_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD18_ATTR_SMOD get_TCD18_ATTR_SMOD() volatile
    {
        return DMA0_TCD18_ATTR_SMOD((TCD18_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD18_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD18_ATTR_SMOD(DMA0_TCD18_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD18_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD18_ATTR = curr;
    }

    /**
     * Get TCD18_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD18_ATTR_SSIZE get_TCD18_ATTR_SSIZE() volatile
    {
        return DMA0_TCD18_ATTR_SSIZE((TCD18_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD18_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD18_ATTR_SSIZE(DMA0_TCD18_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD18_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD18_ATTR = curr;
    }

    /**
     * Get TCD18_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD18_ATTR_DMOD() volatile
    {
        return (TCD18_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD18_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD18_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD18_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD18_ATTR = curr;
    }

    /**
     * Get TCD18_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD18_ATTR_DSIZE() volatile
    {
        return (TCD18_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD18_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD18_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD18_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD18_ATTR = curr;
    }

    /**
     * Get all of TCD18_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD18_ATTR(DMA0_TCD18_ATTR_SMOD &SMOD,
                               DMA0_TCD18_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD18_ATTR;

        SMOD = DMA0_TCD18_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD18_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD18_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD18_ATTR(DMA0_TCD18_ATTR_SMOD SMOD,
                               DMA0_TCD18_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD18_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD18_ATTR = curr;
    }

    /**
     * Get TCD18_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD18_SLAST_SLAST() volatile
    {
        return (TCD18_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD18_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD18_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD18_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD18_SLAST = curr;
    }

    /**
     * Get TCD18_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD18_DADDR_DADDR() volatile
    {
        return (TCD18_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD18_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD18_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD18_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD18_DADDR = curr;
    }

    /**
     * Get TCD18_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD18_DOFF_DOFF() volatile
    {
        return (TCD18_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD18_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD18_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD18_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD18_DOFF = curr;
    }

    /**
     * Get TCD18_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD18_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD18_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD18_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD18_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD18_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD18_DLASTSGA = curr;
    }

    /**
     * Get TCD18_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD18_CSR_BWC get_TCD18_CSR_BWC() volatile
    {
        return DMA0_TCD18_CSR_BWC((TCD18_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD18_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD18_CSR_BWC(DMA0_TCD18_CSR_BWC value) volatile
    {
        uint16_t curr = TCD18_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD18_CSR = curr;
    }

    /**
     * Get TCD18_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD18_CSR_MAJORLINKCH() volatile
    {
        return (TCD18_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD18_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD18_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD18_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD18_CSR = curr;
    }

    /**
     * Get TCD18_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD18_CSR_DONE() volatile
    {
        return TCD18_CSR & (1u << 7u);
    }

    /**
     * Set TCD18_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD18_CSR_DONE() volatile
    {
        TCD18_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD18_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD18_CSR_DONE() volatile
    {
        TCD18_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD18_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD18_CSR_DONE() volatile
    {
        TCD18_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD18_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD18_CSR_ACTIVE() volatile
    {
        return TCD18_CSR & (1u << 6u);
    }

    /**
     * Get TCD18_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD18_CSR_MAJORELINK() volatile
    {
        return TCD18_CSR & (1u << 5u);
    }

    /**
     * Set TCD18_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD18_CSR_MAJORELINK() volatile
    {
        TCD18_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD18_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD18_CSR_MAJORELINK() volatile
    {
        TCD18_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD18_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD18_CSR_MAJORELINK() volatile
    {
        TCD18_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD18_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD18_CSR_ESG() volatile
    {
        return TCD18_CSR & (1u << 4u);
    }

    /**
     * Set TCD18_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD18_CSR_ESG() volatile
    {
        TCD18_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD18_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD18_CSR_ESG() volatile
    {
        TCD18_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD18_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD18_CSR_ESG() volatile
    {
        TCD18_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD18_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD18_CSR_DREQ() volatile
    {
        return TCD18_CSR & (1u << 3u);
    }

    /**
     * Set TCD18_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD18_CSR_DREQ() volatile
    {
        TCD18_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD18_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD18_CSR_DREQ() volatile
    {
        TCD18_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD18_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD18_CSR_DREQ() volatile
    {
        TCD18_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD18_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD18_CSR_INTHALF() volatile
    {
        return TCD18_CSR & (1u << 2u);
    }

    /**
     * Set TCD18_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD18_CSR_INTHALF() volatile
    {
        TCD18_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD18_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD18_CSR_INTHALF() volatile
    {
        TCD18_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD18_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD18_CSR_INTHALF() volatile
    {
        TCD18_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD18_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD18_CSR_INTMAJOR() volatile
    {
        return TCD18_CSR & (1u << 1u);
    }

    /**
     * Set TCD18_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD18_CSR_INTMAJOR() volatile
    {
        TCD18_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD18_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD18_CSR_INTMAJOR() volatile
    {
        TCD18_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD18_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD18_CSR_INTMAJOR() volatile
    {
        TCD18_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD18_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD18_CSR_START() volatile
    {
        return TCD18_CSR & (1u << 0u);
    }

    /**
     * Set TCD18_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD18_CSR_START() volatile
    {
        TCD18_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD18_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD18_CSR_START() volatile
    {
        TCD18_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD18_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD18_CSR_START() volatile
    {
        TCD18_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD18_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD18_CSR(DMA0_TCD18_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD18_CSR;

        BWC = DMA0_TCD18_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD18_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD18_CSR(DMA0_TCD18_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD18_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD18_CSR = curr;
    }

    /**
     * Get TCD19_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD19_SADDR_SADDR() volatile
    {
        return (TCD19_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD19_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD19_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD19_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD19_SADDR = curr;
    }

    /**
     * Get TCD19_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD19_SOFF_SOFF() volatile
    {
        return (TCD19_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD19_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD19_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD19_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD19_SOFF = curr;
    }

    /**
     * Get TCD19_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD19_ATTR_SMOD get_TCD19_ATTR_SMOD() volatile
    {
        return DMA0_TCD19_ATTR_SMOD((TCD19_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD19_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD19_ATTR_SMOD(DMA0_TCD19_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD19_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD19_ATTR = curr;
    }

    /**
     * Get TCD19_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD19_ATTR_SSIZE get_TCD19_ATTR_SSIZE() volatile
    {
        return DMA0_TCD19_ATTR_SSIZE((TCD19_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD19_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD19_ATTR_SSIZE(DMA0_TCD19_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD19_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD19_ATTR = curr;
    }

    /**
     * Get TCD19_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD19_ATTR_DMOD() volatile
    {
        return (TCD19_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD19_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD19_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD19_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD19_ATTR = curr;
    }

    /**
     * Get TCD19_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD19_ATTR_DSIZE() volatile
    {
        return (TCD19_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD19_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD19_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD19_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD19_ATTR = curr;
    }

    /**
     * Get all of TCD19_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD19_ATTR(DMA0_TCD19_ATTR_SMOD &SMOD,
                               DMA0_TCD19_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD19_ATTR;

        SMOD = DMA0_TCD19_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD19_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD19_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD19_ATTR(DMA0_TCD19_ATTR_SMOD SMOD,
                               DMA0_TCD19_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD19_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD19_ATTR = curr;
    }

    /**
     * Get TCD19_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD19_SLAST_SLAST() volatile
    {
        return (TCD19_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD19_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD19_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD19_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD19_SLAST = curr;
    }

    /**
     * Get TCD19_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD19_DADDR_DADDR() volatile
    {
        return (TCD19_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD19_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD19_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD19_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD19_DADDR = curr;
    }

    /**
     * Get TCD19_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD19_DOFF_DOFF() volatile
    {
        return (TCD19_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD19_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD19_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD19_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD19_DOFF = curr;
    }

    /**
     * Get TCD19_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD19_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD19_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD19_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD19_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD19_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD19_DLASTSGA = curr;
    }

    /**
     * Get TCD19_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD19_CSR_BWC get_TCD19_CSR_BWC() volatile
    {
        return DMA0_TCD19_CSR_BWC((TCD19_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD19_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD19_CSR_BWC(DMA0_TCD19_CSR_BWC value) volatile
    {
        uint16_t curr = TCD19_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD19_CSR = curr;
    }

    /**
     * Get TCD19_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD19_CSR_MAJORLINKCH() volatile
    {
        return (TCD19_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD19_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD19_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD19_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD19_CSR = curr;
    }

    /**
     * Get TCD19_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD19_CSR_DONE() volatile
    {
        return TCD19_CSR & (1u << 7u);
    }

    /**
     * Set TCD19_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD19_CSR_DONE() volatile
    {
        TCD19_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD19_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD19_CSR_DONE() volatile
    {
        TCD19_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD19_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD19_CSR_DONE() volatile
    {
        TCD19_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD19_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD19_CSR_ACTIVE() volatile
    {
        return TCD19_CSR & (1u << 6u);
    }

    /**
     * Get TCD19_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD19_CSR_MAJORELINK() volatile
    {
        return TCD19_CSR & (1u << 5u);
    }

    /**
     * Set TCD19_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD19_CSR_MAJORELINK() volatile
    {
        TCD19_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD19_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD19_CSR_MAJORELINK() volatile
    {
        TCD19_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD19_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD19_CSR_MAJORELINK() volatile
    {
        TCD19_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD19_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD19_CSR_ESG() volatile
    {
        return TCD19_CSR & (1u << 4u);
    }

    /**
     * Set TCD19_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD19_CSR_ESG() volatile
    {
        TCD19_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD19_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD19_CSR_ESG() volatile
    {
        TCD19_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD19_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD19_CSR_ESG() volatile
    {
        TCD19_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD19_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD19_CSR_DREQ() volatile
    {
        return TCD19_CSR & (1u << 3u);
    }

    /**
     * Set TCD19_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD19_CSR_DREQ() volatile
    {
        TCD19_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD19_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD19_CSR_DREQ() volatile
    {
        TCD19_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD19_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD19_CSR_DREQ() volatile
    {
        TCD19_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD19_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD19_CSR_INTHALF() volatile
    {
        return TCD19_CSR & (1u << 2u);
    }

    /**
     * Set TCD19_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD19_CSR_INTHALF() volatile
    {
        TCD19_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD19_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD19_CSR_INTHALF() volatile
    {
        TCD19_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD19_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD19_CSR_INTHALF() volatile
    {
        TCD19_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD19_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD19_CSR_INTMAJOR() volatile
    {
        return TCD19_CSR & (1u << 1u);
    }

    /**
     * Set TCD19_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD19_CSR_INTMAJOR() volatile
    {
        TCD19_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD19_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD19_CSR_INTMAJOR() volatile
    {
        TCD19_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD19_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD19_CSR_INTMAJOR() volatile
    {
        TCD19_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD19_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD19_CSR_START() volatile
    {
        return TCD19_CSR & (1u << 0u);
    }

    /**
     * Set TCD19_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD19_CSR_START() volatile
    {
        TCD19_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD19_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD19_CSR_START() volatile
    {
        TCD19_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD19_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD19_CSR_START() volatile
    {
        TCD19_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD19_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD19_CSR(DMA0_TCD19_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD19_CSR;

        BWC = DMA0_TCD19_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD19_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD19_CSR(DMA0_TCD19_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD19_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD19_CSR = curr;
    }

    /**
     * Get TCD20_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD20_SADDR_SADDR() volatile
    {
        return (TCD20_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD20_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD20_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD20_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD20_SADDR = curr;
    }

    /**
     * Get TCD20_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD20_SOFF_SOFF() volatile
    {
        return (TCD20_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD20_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD20_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD20_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD20_SOFF = curr;
    }

    /**
     * Get TCD20_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD20_ATTR_SMOD get_TCD20_ATTR_SMOD() volatile
    {
        return DMA0_TCD20_ATTR_SMOD((TCD20_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD20_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD20_ATTR_SMOD(DMA0_TCD20_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD20_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD20_ATTR = curr;
    }

    /**
     * Get TCD20_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD20_ATTR_SSIZE get_TCD20_ATTR_SSIZE() volatile
    {
        return DMA0_TCD20_ATTR_SSIZE((TCD20_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD20_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD20_ATTR_SSIZE(DMA0_TCD20_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD20_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD20_ATTR = curr;
    }

    /**
     * Get TCD20_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD20_ATTR_DMOD() volatile
    {
        return (TCD20_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD20_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD20_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD20_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD20_ATTR = curr;
    }

    /**
     * Get TCD20_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD20_ATTR_DSIZE() volatile
    {
        return (TCD20_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD20_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD20_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD20_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD20_ATTR = curr;
    }

    /**
     * Get all of TCD20_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD20_ATTR(DMA0_TCD20_ATTR_SMOD &SMOD,
                               DMA0_TCD20_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD20_ATTR;

        SMOD = DMA0_TCD20_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD20_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD20_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD20_ATTR(DMA0_TCD20_ATTR_SMOD SMOD,
                               DMA0_TCD20_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD20_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD20_ATTR = curr;
    }

    /**
     * Get TCD20_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD20_SLAST_SLAST() volatile
    {
        return (TCD20_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD20_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD20_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD20_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD20_SLAST = curr;
    }

    /**
     * Get TCD20_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD20_DADDR_DADDR() volatile
    {
        return (TCD20_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD20_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD20_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD20_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD20_DADDR = curr;
    }

    /**
     * Get TCD20_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD20_DOFF_DOFF() volatile
    {
        return (TCD20_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD20_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD20_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD20_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD20_DOFF = curr;
    }

    /**
     * Get TCD20_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD20_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD20_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD20_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD20_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD20_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD20_DLASTSGA = curr;
    }

    /**
     * Get TCD20_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD20_CSR_BWC get_TCD20_CSR_BWC() volatile
    {
        return DMA0_TCD20_CSR_BWC((TCD20_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD20_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD20_CSR_BWC(DMA0_TCD20_CSR_BWC value) volatile
    {
        uint16_t curr = TCD20_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD20_CSR = curr;
    }

    /**
     * Get TCD20_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD20_CSR_MAJORLINKCH() volatile
    {
        return (TCD20_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD20_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD20_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD20_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD20_CSR = curr;
    }

    /**
     * Get TCD20_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD20_CSR_DONE() volatile
    {
        return TCD20_CSR & (1u << 7u);
    }

    /**
     * Set TCD20_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD20_CSR_DONE() volatile
    {
        TCD20_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD20_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD20_CSR_DONE() volatile
    {
        TCD20_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD20_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD20_CSR_DONE() volatile
    {
        TCD20_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD20_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD20_CSR_ACTIVE() volatile
    {
        return TCD20_CSR & (1u << 6u);
    }

    /**
     * Get TCD20_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD20_CSR_MAJORELINK() volatile
    {
        return TCD20_CSR & (1u << 5u);
    }

    /**
     * Set TCD20_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD20_CSR_MAJORELINK() volatile
    {
        TCD20_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD20_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD20_CSR_MAJORELINK() volatile
    {
        TCD20_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD20_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD20_CSR_MAJORELINK() volatile
    {
        TCD20_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD20_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD20_CSR_ESG() volatile
    {
        return TCD20_CSR & (1u << 4u);
    }

    /**
     * Set TCD20_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD20_CSR_ESG() volatile
    {
        TCD20_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD20_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD20_CSR_ESG() volatile
    {
        TCD20_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD20_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD20_CSR_ESG() volatile
    {
        TCD20_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD20_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD20_CSR_DREQ() volatile
    {
        return TCD20_CSR & (1u << 3u);
    }

    /**
     * Set TCD20_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD20_CSR_DREQ() volatile
    {
        TCD20_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD20_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD20_CSR_DREQ() volatile
    {
        TCD20_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD20_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD20_CSR_DREQ() volatile
    {
        TCD20_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD20_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD20_CSR_INTHALF() volatile
    {
        return TCD20_CSR & (1u << 2u);
    }

    /**
     * Set TCD20_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD20_CSR_INTHALF() volatile
    {
        TCD20_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD20_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD20_CSR_INTHALF() volatile
    {
        TCD20_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD20_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD20_CSR_INTHALF() volatile
    {
        TCD20_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD20_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD20_CSR_INTMAJOR() volatile
    {
        return TCD20_CSR & (1u << 1u);
    }

    /**
     * Set TCD20_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD20_CSR_INTMAJOR() volatile
    {
        TCD20_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD20_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD20_CSR_INTMAJOR() volatile
    {
        TCD20_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD20_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD20_CSR_INTMAJOR() volatile
    {
        TCD20_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD20_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD20_CSR_START() volatile
    {
        return TCD20_CSR & (1u << 0u);
    }

    /**
     * Set TCD20_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD20_CSR_START() volatile
    {
        TCD20_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD20_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD20_CSR_START() volatile
    {
        TCD20_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD20_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD20_CSR_START() volatile
    {
        TCD20_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD20_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD20_CSR(DMA0_TCD20_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD20_CSR;

        BWC = DMA0_TCD20_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD20_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD20_CSR(DMA0_TCD20_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD20_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD20_CSR = curr;
    }

    /**
     * Get TCD21_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD21_SADDR_SADDR() volatile
    {
        return (TCD21_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD21_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD21_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD21_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD21_SADDR = curr;
    }

    /**
     * Get TCD21_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD21_SOFF_SOFF() volatile
    {
        return (TCD21_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD21_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD21_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD21_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD21_SOFF = curr;
    }

    /**
     * Get TCD21_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD21_ATTR_SMOD get_TCD21_ATTR_SMOD() volatile
    {
        return DMA0_TCD21_ATTR_SMOD((TCD21_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD21_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD21_ATTR_SMOD(DMA0_TCD21_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD21_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD21_ATTR = curr;
    }

    /**
     * Get TCD21_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD21_ATTR_SSIZE get_TCD21_ATTR_SSIZE() volatile
    {
        return DMA0_TCD21_ATTR_SSIZE((TCD21_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD21_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD21_ATTR_SSIZE(DMA0_TCD21_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD21_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD21_ATTR = curr;
    }

    /**
     * Get TCD21_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD21_ATTR_DMOD() volatile
    {
        return (TCD21_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD21_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD21_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD21_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD21_ATTR = curr;
    }

    /**
     * Get TCD21_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD21_ATTR_DSIZE() volatile
    {
        return (TCD21_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD21_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD21_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD21_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD21_ATTR = curr;
    }

    /**
     * Get all of TCD21_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD21_ATTR(DMA0_TCD21_ATTR_SMOD &SMOD,
                               DMA0_TCD21_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD21_ATTR;

        SMOD = DMA0_TCD21_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD21_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD21_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD21_ATTR(DMA0_TCD21_ATTR_SMOD SMOD,
                               DMA0_TCD21_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD21_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD21_ATTR = curr;
    }

    /**
     * Get TCD21_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD21_SLAST_SLAST() volatile
    {
        return (TCD21_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD21_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD21_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD21_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD21_SLAST = curr;
    }

    /**
     * Get TCD21_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD21_DADDR_DADDR() volatile
    {
        return (TCD21_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD21_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD21_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD21_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD21_DADDR = curr;
    }

    /**
     * Get TCD21_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD21_DOFF_DOFF() volatile
    {
        return (TCD21_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD21_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD21_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD21_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD21_DOFF = curr;
    }

    /**
     * Get TCD21_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD21_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD21_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD21_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD21_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD21_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD21_DLASTSGA = curr;
    }

    /**
     * Get TCD21_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD21_CSR_BWC get_TCD21_CSR_BWC() volatile
    {
        return DMA0_TCD21_CSR_BWC((TCD21_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD21_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD21_CSR_BWC(DMA0_TCD21_CSR_BWC value) volatile
    {
        uint16_t curr = TCD21_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD21_CSR = curr;
    }

    /**
     * Get TCD21_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD21_CSR_MAJORLINKCH() volatile
    {
        return (TCD21_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD21_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD21_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD21_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD21_CSR = curr;
    }

    /**
     * Get TCD21_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD21_CSR_DONE() volatile
    {
        return TCD21_CSR & (1u << 7u);
    }

    /**
     * Set TCD21_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD21_CSR_DONE() volatile
    {
        TCD21_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD21_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD21_CSR_DONE() volatile
    {
        TCD21_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD21_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD21_CSR_DONE() volatile
    {
        TCD21_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD21_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD21_CSR_ACTIVE() volatile
    {
        return TCD21_CSR & (1u << 6u);
    }

    /**
     * Get TCD21_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD21_CSR_MAJORELINK() volatile
    {
        return TCD21_CSR & (1u << 5u);
    }

    /**
     * Set TCD21_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD21_CSR_MAJORELINK() volatile
    {
        TCD21_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD21_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD21_CSR_MAJORELINK() volatile
    {
        TCD21_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD21_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD21_CSR_MAJORELINK() volatile
    {
        TCD21_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD21_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD21_CSR_ESG() volatile
    {
        return TCD21_CSR & (1u << 4u);
    }

    /**
     * Set TCD21_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD21_CSR_ESG() volatile
    {
        TCD21_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD21_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD21_CSR_ESG() volatile
    {
        TCD21_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD21_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD21_CSR_ESG() volatile
    {
        TCD21_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD21_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD21_CSR_DREQ() volatile
    {
        return TCD21_CSR & (1u << 3u);
    }

    /**
     * Set TCD21_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD21_CSR_DREQ() volatile
    {
        TCD21_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD21_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD21_CSR_DREQ() volatile
    {
        TCD21_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD21_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD21_CSR_DREQ() volatile
    {
        TCD21_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD21_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD21_CSR_INTHALF() volatile
    {
        return TCD21_CSR & (1u << 2u);
    }

    /**
     * Set TCD21_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD21_CSR_INTHALF() volatile
    {
        TCD21_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD21_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD21_CSR_INTHALF() volatile
    {
        TCD21_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD21_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD21_CSR_INTHALF() volatile
    {
        TCD21_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD21_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD21_CSR_INTMAJOR() volatile
    {
        return TCD21_CSR & (1u << 1u);
    }

    /**
     * Set TCD21_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD21_CSR_INTMAJOR() volatile
    {
        TCD21_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD21_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD21_CSR_INTMAJOR() volatile
    {
        TCD21_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD21_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD21_CSR_INTMAJOR() volatile
    {
        TCD21_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD21_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD21_CSR_START() volatile
    {
        return TCD21_CSR & (1u << 0u);
    }

    /**
     * Set TCD21_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD21_CSR_START() volatile
    {
        TCD21_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD21_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD21_CSR_START() volatile
    {
        TCD21_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD21_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD21_CSR_START() volatile
    {
        TCD21_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD21_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD21_CSR(DMA0_TCD21_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD21_CSR;

        BWC = DMA0_TCD21_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD21_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD21_CSR(DMA0_TCD21_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD21_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD21_CSR = curr;
    }

    /**
     * Get TCD22_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD22_SADDR_SADDR() volatile
    {
        return (TCD22_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD22_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD22_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD22_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD22_SADDR = curr;
    }

    /**
     * Get TCD22_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD22_SOFF_SOFF() volatile
    {
        return (TCD22_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD22_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD22_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD22_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD22_SOFF = curr;
    }

    /**
     * Get TCD22_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD22_ATTR_SMOD get_TCD22_ATTR_SMOD() volatile
    {
        return DMA0_TCD22_ATTR_SMOD((TCD22_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD22_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD22_ATTR_SMOD(DMA0_TCD22_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD22_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD22_ATTR = curr;
    }

    /**
     * Get TCD22_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD22_ATTR_SSIZE get_TCD22_ATTR_SSIZE() volatile
    {
        return DMA0_TCD22_ATTR_SSIZE((TCD22_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD22_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD22_ATTR_SSIZE(DMA0_TCD22_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD22_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD22_ATTR = curr;
    }

    /**
     * Get TCD22_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD22_ATTR_DMOD() volatile
    {
        return (TCD22_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD22_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD22_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD22_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD22_ATTR = curr;
    }

    /**
     * Get TCD22_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD22_ATTR_DSIZE() volatile
    {
        return (TCD22_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD22_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD22_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD22_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD22_ATTR = curr;
    }

    /**
     * Get all of TCD22_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD22_ATTR(DMA0_TCD22_ATTR_SMOD &SMOD,
                               DMA0_TCD22_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD22_ATTR;

        SMOD = DMA0_TCD22_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD22_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD22_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD22_ATTR(DMA0_TCD22_ATTR_SMOD SMOD,
                               DMA0_TCD22_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD22_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD22_ATTR = curr;
    }

    /**
     * Get TCD22_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD22_SLAST_SLAST() volatile
    {
        return (TCD22_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD22_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD22_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD22_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD22_SLAST = curr;
    }

    /**
     * Get TCD22_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD22_DADDR_DADDR() volatile
    {
        return (TCD22_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD22_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD22_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD22_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD22_DADDR = curr;
    }

    /**
     * Get TCD22_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD22_DOFF_DOFF() volatile
    {
        return (TCD22_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD22_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD22_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD22_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD22_DOFF = curr;
    }

    /**
     * Get TCD22_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD22_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD22_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD22_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD22_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD22_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD22_DLASTSGA = curr;
    }

    /**
     * Get TCD22_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD22_CSR_BWC get_TCD22_CSR_BWC() volatile
    {
        return DMA0_TCD22_CSR_BWC((TCD22_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD22_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD22_CSR_BWC(DMA0_TCD22_CSR_BWC value) volatile
    {
        uint16_t curr = TCD22_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD22_CSR = curr;
    }

    /**
     * Get TCD22_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD22_CSR_MAJORLINKCH() volatile
    {
        return (TCD22_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD22_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD22_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD22_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD22_CSR = curr;
    }

    /**
     * Get TCD22_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD22_CSR_DONE() volatile
    {
        return TCD22_CSR & (1u << 7u);
    }

    /**
     * Set TCD22_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD22_CSR_DONE() volatile
    {
        TCD22_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD22_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD22_CSR_DONE() volatile
    {
        TCD22_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD22_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD22_CSR_DONE() volatile
    {
        TCD22_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD22_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD22_CSR_ACTIVE() volatile
    {
        return TCD22_CSR & (1u << 6u);
    }

    /**
     * Get TCD22_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD22_CSR_MAJORELINK() volatile
    {
        return TCD22_CSR & (1u << 5u);
    }

    /**
     * Set TCD22_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD22_CSR_MAJORELINK() volatile
    {
        TCD22_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD22_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD22_CSR_MAJORELINK() volatile
    {
        TCD22_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD22_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD22_CSR_MAJORELINK() volatile
    {
        TCD22_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD22_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD22_CSR_ESG() volatile
    {
        return TCD22_CSR & (1u << 4u);
    }

    /**
     * Set TCD22_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD22_CSR_ESG() volatile
    {
        TCD22_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD22_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD22_CSR_ESG() volatile
    {
        TCD22_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD22_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD22_CSR_ESG() volatile
    {
        TCD22_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD22_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD22_CSR_DREQ() volatile
    {
        return TCD22_CSR & (1u << 3u);
    }

    /**
     * Set TCD22_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD22_CSR_DREQ() volatile
    {
        TCD22_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD22_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD22_CSR_DREQ() volatile
    {
        TCD22_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD22_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD22_CSR_DREQ() volatile
    {
        TCD22_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD22_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD22_CSR_INTHALF() volatile
    {
        return TCD22_CSR & (1u << 2u);
    }

    /**
     * Set TCD22_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD22_CSR_INTHALF() volatile
    {
        TCD22_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD22_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD22_CSR_INTHALF() volatile
    {
        TCD22_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD22_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD22_CSR_INTHALF() volatile
    {
        TCD22_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD22_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD22_CSR_INTMAJOR() volatile
    {
        return TCD22_CSR & (1u << 1u);
    }

    /**
     * Set TCD22_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD22_CSR_INTMAJOR() volatile
    {
        TCD22_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD22_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD22_CSR_INTMAJOR() volatile
    {
        TCD22_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD22_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD22_CSR_INTMAJOR() volatile
    {
        TCD22_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD22_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD22_CSR_START() volatile
    {
        return TCD22_CSR & (1u << 0u);
    }

    /**
     * Set TCD22_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD22_CSR_START() volatile
    {
        TCD22_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD22_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD22_CSR_START() volatile
    {
        TCD22_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD22_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD22_CSR_START() volatile
    {
        TCD22_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD22_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD22_CSR(DMA0_TCD22_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD22_CSR;

        BWC = DMA0_TCD22_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD22_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD22_CSR(DMA0_TCD22_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD22_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD22_CSR = curr;
    }

    /**
     * Get TCD23_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD23_SADDR_SADDR() volatile
    {
        return (TCD23_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD23_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD23_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD23_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD23_SADDR = curr;
    }

    /**
     * Get TCD23_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD23_SOFF_SOFF() volatile
    {
        return (TCD23_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD23_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD23_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD23_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD23_SOFF = curr;
    }

    /**
     * Get TCD23_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD23_ATTR_SMOD get_TCD23_ATTR_SMOD() volatile
    {
        return DMA0_TCD23_ATTR_SMOD((TCD23_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD23_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD23_ATTR_SMOD(DMA0_TCD23_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD23_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD23_ATTR = curr;
    }

    /**
     * Get TCD23_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD23_ATTR_SSIZE get_TCD23_ATTR_SSIZE() volatile
    {
        return DMA0_TCD23_ATTR_SSIZE((TCD23_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD23_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD23_ATTR_SSIZE(DMA0_TCD23_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD23_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD23_ATTR = curr;
    }

    /**
     * Get TCD23_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD23_ATTR_DMOD() volatile
    {
        return (TCD23_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD23_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD23_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD23_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD23_ATTR = curr;
    }

    /**
     * Get TCD23_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD23_ATTR_DSIZE() volatile
    {
        return (TCD23_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD23_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD23_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD23_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD23_ATTR = curr;
    }

    /**
     * Get all of TCD23_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD23_ATTR(DMA0_TCD23_ATTR_SMOD &SMOD,
                               DMA0_TCD23_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD23_ATTR;

        SMOD = DMA0_TCD23_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD23_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD23_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD23_ATTR(DMA0_TCD23_ATTR_SMOD SMOD,
                               DMA0_TCD23_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD23_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD23_ATTR = curr;
    }

    /**
     * Get TCD23_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD23_SLAST_SLAST() volatile
    {
        return (TCD23_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD23_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD23_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD23_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD23_SLAST = curr;
    }

    /**
     * Get TCD23_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD23_DADDR_DADDR() volatile
    {
        return (TCD23_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD23_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD23_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD23_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD23_DADDR = curr;
    }

    /**
     * Get TCD23_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD23_DOFF_DOFF() volatile
    {
        return (TCD23_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD23_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD23_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD23_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD23_DOFF = curr;
    }

    /**
     * Get TCD23_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD23_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD23_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD23_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD23_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD23_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD23_DLASTSGA = curr;
    }

    /**
     * Get TCD23_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD23_CSR_BWC get_TCD23_CSR_BWC() volatile
    {
        return DMA0_TCD23_CSR_BWC((TCD23_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD23_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD23_CSR_BWC(DMA0_TCD23_CSR_BWC value) volatile
    {
        uint16_t curr = TCD23_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD23_CSR = curr;
    }

    /**
     * Get TCD23_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD23_CSR_MAJORLINKCH() volatile
    {
        return (TCD23_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD23_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD23_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD23_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD23_CSR = curr;
    }

    /**
     * Get TCD23_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD23_CSR_DONE() volatile
    {
        return TCD23_CSR & (1u << 7u);
    }

    /**
     * Set TCD23_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD23_CSR_DONE() volatile
    {
        TCD23_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD23_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD23_CSR_DONE() volatile
    {
        TCD23_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD23_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD23_CSR_DONE() volatile
    {
        TCD23_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD23_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD23_CSR_ACTIVE() volatile
    {
        return TCD23_CSR & (1u << 6u);
    }

    /**
     * Get TCD23_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD23_CSR_MAJORELINK() volatile
    {
        return TCD23_CSR & (1u << 5u);
    }

    /**
     * Set TCD23_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD23_CSR_MAJORELINK() volatile
    {
        TCD23_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD23_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD23_CSR_MAJORELINK() volatile
    {
        TCD23_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD23_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD23_CSR_MAJORELINK() volatile
    {
        TCD23_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD23_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD23_CSR_ESG() volatile
    {
        return TCD23_CSR & (1u << 4u);
    }

    /**
     * Set TCD23_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD23_CSR_ESG() volatile
    {
        TCD23_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD23_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD23_CSR_ESG() volatile
    {
        TCD23_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD23_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD23_CSR_ESG() volatile
    {
        TCD23_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD23_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD23_CSR_DREQ() volatile
    {
        return TCD23_CSR & (1u << 3u);
    }

    /**
     * Set TCD23_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD23_CSR_DREQ() volatile
    {
        TCD23_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD23_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD23_CSR_DREQ() volatile
    {
        TCD23_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD23_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD23_CSR_DREQ() volatile
    {
        TCD23_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD23_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD23_CSR_INTHALF() volatile
    {
        return TCD23_CSR & (1u << 2u);
    }

    /**
     * Set TCD23_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD23_CSR_INTHALF() volatile
    {
        TCD23_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD23_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD23_CSR_INTHALF() volatile
    {
        TCD23_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD23_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD23_CSR_INTHALF() volatile
    {
        TCD23_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD23_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD23_CSR_INTMAJOR() volatile
    {
        return TCD23_CSR & (1u << 1u);
    }

    /**
     * Set TCD23_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD23_CSR_INTMAJOR() volatile
    {
        TCD23_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD23_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD23_CSR_INTMAJOR() volatile
    {
        TCD23_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD23_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD23_CSR_INTMAJOR() volatile
    {
        TCD23_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD23_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD23_CSR_START() volatile
    {
        return TCD23_CSR & (1u << 0u);
    }

    /**
     * Set TCD23_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD23_CSR_START() volatile
    {
        TCD23_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD23_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD23_CSR_START() volatile
    {
        TCD23_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD23_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD23_CSR_START() volatile
    {
        TCD23_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD23_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD23_CSR(DMA0_TCD23_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD23_CSR;

        BWC = DMA0_TCD23_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD23_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD23_CSR(DMA0_TCD23_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD23_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD23_CSR = curr;
    }

    /**
     * Get TCD24_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD24_SADDR_SADDR() volatile
    {
        return (TCD24_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD24_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD24_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD24_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD24_SADDR = curr;
    }

    /**
     * Get TCD24_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD24_SOFF_SOFF() volatile
    {
        return (TCD24_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD24_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD24_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD24_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD24_SOFF = curr;
    }

    /**
     * Get TCD24_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD24_ATTR_SMOD get_TCD24_ATTR_SMOD() volatile
    {
        return DMA0_TCD24_ATTR_SMOD((TCD24_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD24_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD24_ATTR_SMOD(DMA0_TCD24_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD24_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD24_ATTR = curr;
    }

    /**
     * Get TCD24_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD24_ATTR_SSIZE get_TCD24_ATTR_SSIZE() volatile
    {
        return DMA0_TCD24_ATTR_SSIZE((TCD24_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD24_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD24_ATTR_SSIZE(DMA0_TCD24_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD24_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD24_ATTR = curr;
    }

    /**
     * Get TCD24_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD24_ATTR_DMOD() volatile
    {
        return (TCD24_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD24_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD24_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD24_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD24_ATTR = curr;
    }

    /**
     * Get TCD24_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD24_ATTR_DSIZE() volatile
    {
        return (TCD24_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD24_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD24_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD24_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD24_ATTR = curr;
    }

    /**
     * Get all of TCD24_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD24_ATTR(DMA0_TCD24_ATTR_SMOD &SMOD,
                               DMA0_TCD24_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD24_ATTR;

        SMOD = DMA0_TCD24_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD24_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD24_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD24_ATTR(DMA0_TCD24_ATTR_SMOD SMOD,
                               DMA0_TCD24_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD24_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD24_ATTR = curr;
    }

    /**
     * Get TCD24_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD24_SLAST_SLAST() volatile
    {
        return (TCD24_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD24_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD24_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD24_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD24_SLAST = curr;
    }

    /**
     * Get TCD24_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD24_DADDR_DADDR() volatile
    {
        return (TCD24_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD24_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD24_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD24_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD24_DADDR = curr;
    }

    /**
     * Get TCD24_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD24_DOFF_DOFF() volatile
    {
        return (TCD24_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD24_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD24_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD24_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD24_DOFF = curr;
    }

    /**
     * Get TCD24_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD24_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD24_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD24_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD24_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD24_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD24_DLASTSGA = curr;
    }

    /**
     * Get TCD24_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD24_CSR_BWC get_TCD24_CSR_BWC() volatile
    {
        return DMA0_TCD24_CSR_BWC((TCD24_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD24_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD24_CSR_BWC(DMA0_TCD24_CSR_BWC value) volatile
    {
        uint16_t curr = TCD24_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD24_CSR = curr;
    }

    /**
     * Get TCD24_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD24_CSR_MAJORLINKCH() volatile
    {
        return (TCD24_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD24_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD24_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD24_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD24_CSR = curr;
    }

    /**
     * Get TCD24_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD24_CSR_DONE() volatile
    {
        return TCD24_CSR & (1u << 7u);
    }

    /**
     * Set TCD24_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD24_CSR_DONE() volatile
    {
        TCD24_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD24_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD24_CSR_DONE() volatile
    {
        TCD24_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD24_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD24_CSR_DONE() volatile
    {
        TCD24_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD24_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD24_CSR_ACTIVE() volatile
    {
        return TCD24_CSR & (1u << 6u);
    }

    /**
     * Get TCD24_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD24_CSR_MAJORELINK() volatile
    {
        return TCD24_CSR & (1u << 5u);
    }

    /**
     * Set TCD24_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD24_CSR_MAJORELINK() volatile
    {
        TCD24_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD24_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD24_CSR_MAJORELINK() volatile
    {
        TCD24_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD24_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD24_CSR_MAJORELINK() volatile
    {
        TCD24_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD24_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD24_CSR_ESG() volatile
    {
        return TCD24_CSR & (1u << 4u);
    }

    /**
     * Set TCD24_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD24_CSR_ESG() volatile
    {
        TCD24_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD24_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD24_CSR_ESG() volatile
    {
        TCD24_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD24_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD24_CSR_ESG() volatile
    {
        TCD24_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD24_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD24_CSR_DREQ() volatile
    {
        return TCD24_CSR & (1u << 3u);
    }

    /**
     * Set TCD24_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD24_CSR_DREQ() volatile
    {
        TCD24_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD24_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD24_CSR_DREQ() volatile
    {
        TCD24_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD24_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD24_CSR_DREQ() volatile
    {
        TCD24_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD24_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD24_CSR_INTHALF() volatile
    {
        return TCD24_CSR & (1u << 2u);
    }

    /**
     * Set TCD24_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD24_CSR_INTHALF() volatile
    {
        TCD24_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD24_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD24_CSR_INTHALF() volatile
    {
        TCD24_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD24_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD24_CSR_INTHALF() volatile
    {
        TCD24_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD24_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD24_CSR_INTMAJOR() volatile
    {
        return TCD24_CSR & (1u << 1u);
    }

    /**
     * Set TCD24_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD24_CSR_INTMAJOR() volatile
    {
        TCD24_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD24_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD24_CSR_INTMAJOR() volatile
    {
        TCD24_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD24_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD24_CSR_INTMAJOR() volatile
    {
        TCD24_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD24_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD24_CSR_START() volatile
    {
        return TCD24_CSR & (1u << 0u);
    }

    /**
     * Set TCD24_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD24_CSR_START() volatile
    {
        TCD24_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD24_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD24_CSR_START() volatile
    {
        TCD24_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD24_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD24_CSR_START() volatile
    {
        TCD24_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD24_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD24_CSR(DMA0_TCD24_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD24_CSR;

        BWC = DMA0_TCD24_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD24_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD24_CSR(DMA0_TCD24_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD24_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD24_CSR = curr;
    }

    /**
     * Get TCD25_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD25_SADDR_SADDR() volatile
    {
        return (TCD25_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD25_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD25_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD25_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD25_SADDR = curr;
    }

    /**
     * Get TCD25_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD25_SOFF_SOFF() volatile
    {
        return (TCD25_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD25_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD25_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD25_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD25_SOFF = curr;
    }

    /**
     * Get TCD25_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD25_ATTR_SMOD get_TCD25_ATTR_SMOD() volatile
    {
        return DMA0_TCD25_ATTR_SMOD((TCD25_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD25_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD25_ATTR_SMOD(DMA0_TCD25_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD25_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD25_ATTR = curr;
    }

    /**
     * Get TCD25_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD25_ATTR_SSIZE get_TCD25_ATTR_SSIZE() volatile
    {
        return DMA0_TCD25_ATTR_SSIZE((TCD25_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD25_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD25_ATTR_SSIZE(DMA0_TCD25_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD25_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD25_ATTR = curr;
    }

    /**
     * Get TCD25_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD25_ATTR_DMOD() volatile
    {
        return (TCD25_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD25_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD25_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD25_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD25_ATTR = curr;
    }

    /**
     * Get TCD25_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD25_ATTR_DSIZE() volatile
    {
        return (TCD25_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD25_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD25_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD25_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD25_ATTR = curr;
    }

    /**
     * Get all of TCD25_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD25_ATTR(DMA0_TCD25_ATTR_SMOD &SMOD,
                               DMA0_TCD25_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD25_ATTR;

        SMOD = DMA0_TCD25_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD25_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD25_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD25_ATTR(DMA0_TCD25_ATTR_SMOD SMOD,
                               DMA0_TCD25_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD25_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD25_ATTR = curr;
    }

    /**
     * Get TCD25_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD25_SLAST_SLAST() volatile
    {
        return (TCD25_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD25_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD25_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD25_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD25_SLAST = curr;
    }

    /**
     * Get TCD25_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD25_DADDR_DADDR() volatile
    {
        return (TCD25_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD25_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD25_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD25_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD25_DADDR = curr;
    }

    /**
     * Get TCD25_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD25_DOFF_DOFF() volatile
    {
        return (TCD25_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD25_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD25_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD25_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD25_DOFF = curr;
    }

    /**
     * Get TCD25_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD25_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD25_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD25_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD25_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD25_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD25_DLASTSGA = curr;
    }

    /**
     * Get TCD25_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD25_CSR_BWC get_TCD25_CSR_BWC() volatile
    {
        return DMA0_TCD25_CSR_BWC((TCD25_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD25_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD25_CSR_BWC(DMA0_TCD25_CSR_BWC value) volatile
    {
        uint16_t curr = TCD25_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD25_CSR = curr;
    }

    /**
     * Get TCD25_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD25_CSR_MAJORLINKCH() volatile
    {
        return (TCD25_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD25_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD25_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD25_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD25_CSR = curr;
    }

    /**
     * Get TCD25_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD25_CSR_DONE() volatile
    {
        return TCD25_CSR & (1u << 7u);
    }

    /**
     * Set TCD25_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD25_CSR_DONE() volatile
    {
        TCD25_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD25_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD25_CSR_DONE() volatile
    {
        TCD25_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD25_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD25_CSR_DONE() volatile
    {
        TCD25_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD25_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD25_CSR_ACTIVE() volatile
    {
        return TCD25_CSR & (1u << 6u);
    }

    /**
     * Get TCD25_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD25_CSR_MAJORELINK() volatile
    {
        return TCD25_CSR & (1u << 5u);
    }

    /**
     * Set TCD25_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD25_CSR_MAJORELINK() volatile
    {
        TCD25_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD25_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD25_CSR_MAJORELINK() volatile
    {
        TCD25_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD25_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD25_CSR_MAJORELINK() volatile
    {
        TCD25_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD25_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD25_CSR_ESG() volatile
    {
        return TCD25_CSR & (1u << 4u);
    }

    /**
     * Set TCD25_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD25_CSR_ESG() volatile
    {
        TCD25_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD25_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD25_CSR_ESG() volatile
    {
        TCD25_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD25_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD25_CSR_ESG() volatile
    {
        TCD25_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD25_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD25_CSR_DREQ() volatile
    {
        return TCD25_CSR & (1u << 3u);
    }

    /**
     * Set TCD25_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD25_CSR_DREQ() volatile
    {
        TCD25_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD25_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD25_CSR_DREQ() volatile
    {
        TCD25_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD25_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD25_CSR_DREQ() volatile
    {
        TCD25_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD25_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD25_CSR_INTHALF() volatile
    {
        return TCD25_CSR & (1u << 2u);
    }

    /**
     * Set TCD25_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD25_CSR_INTHALF() volatile
    {
        TCD25_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD25_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD25_CSR_INTHALF() volatile
    {
        TCD25_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD25_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD25_CSR_INTHALF() volatile
    {
        TCD25_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD25_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD25_CSR_INTMAJOR() volatile
    {
        return TCD25_CSR & (1u << 1u);
    }

    /**
     * Set TCD25_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD25_CSR_INTMAJOR() volatile
    {
        TCD25_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD25_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD25_CSR_INTMAJOR() volatile
    {
        TCD25_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD25_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD25_CSR_INTMAJOR() volatile
    {
        TCD25_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD25_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD25_CSR_START() volatile
    {
        return TCD25_CSR & (1u << 0u);
    }

    /**
     * Set TCD25_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD25_CSR_START() volatile
    {
        TCD25_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD25_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD25_CSR_START() volatile
    {
        TCD25_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD25_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD25_CSR_START() volatile
    {
        TCD25_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD25_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD25_CSR(DMA0_TCD25_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD25_CSR;

        BWC = DMA0_TCD25_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD25_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD25_CSR(DMA0_TCD25_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD25_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD25_CSR = curr;
    }

    /**
     * Get TCD26_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD26_SADDR_SADDR() volatile
    {
        return (TCD26_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD26_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD26_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD26_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD26_SADDR = curr;
    }

    /**
     * Get TCD26_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD26_SOFF_SOFF() volatile
    {
        return (TCD26_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD26_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD26_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD26_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD26_SOFF = curr;
    }

    /**
     * Get TCD26_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD26_ATTR_SMOD get_TCD26_ATTR_SMOD() volatile
    {
        return DMA0_TCD26_ATTR_SMOD((TCD26_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD26_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD26_ATTR_SMOD(DMA0_TCD26_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD26_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD26_ATTR = curr;
    }

    /**
     * Get TCD26_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD26_ATTR_SSIZE get_TCD26_ATTR_SSIZE() volatile
    {
        return DMA0_TCD26_ATTR_SSIZE((TCD26_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD26_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD26_ATTR_SSIZE(DMA0_TCD26_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD26_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD26_ATTR = curr;
    }

    /**
     * Get TCD26_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD26_ATTR_DMOD() volatile
    {
        return (TCD26_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD26_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD26_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD26_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD26_ATTR = curr;
    }

    /**
     * Get TCD26_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD26_ATTR_DSIZE() volatile
    {
        return (TCD26_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD26_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD26_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD26_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD26_ATTR = curr;
    }

    /**
     * Get all of TCD26_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD26_ATTR(DMA0_TCD26_ATTR_SMOD &SMOD,
                               DMA0_TCD26_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD26_ATTR;

        SMOD = DMA0_TCD26_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD26_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD26_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD26_ATTR(DMA0_TCD26_ATTR_SMOD SMOD,
                               DMA0_TCD26_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD26_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD26_ATTR = curr;
    }

    /**
     * Get TCD26_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD26_SLAST_SLAST() volatile
    {
        return (TCD26_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD26_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD26_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD26_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD26_SLAST = curr;
    }

    /**
     * Get TCD26_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD26_DADDR_DADDR() volatile
    {
        return (TCD26_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD26_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD26_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD26_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD26_DADDR = curr;
    }

    /**
     * Get TCD26_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD26_DOFF_DOFF() volatile
    {
        return (TCD26_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD26_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD26_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD26_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD26_DOFF = curr;
    }

    /**
     * Get TCD26_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD26_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD26_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD26_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD26_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD26_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD26_DLASTSGA = curr;
    }

    /**
     * Get TCD26_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD26_CSR_BWC get_TCD26_CSR_BWC() volatile
    {
        return DMA0_TCD26_CSR_BWC((TCD26_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD26_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD26_CSR_BWC(DMA0_TCD26_CSR_BWC value) volatile
    {
        uint16_t curr = TCD26_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD26_CSR = curr;
    }

    /**
     * Get TCD26_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD26_CSR_MAJORLINKCH() volatile
    {
        return (TCD26_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD26_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD26_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD26_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD26_CSR = curr;
    }

    /**
     * Get TCD26_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD26_CSR_DONE() volatile
    {
        return TCD26_CSR & (1u << 7u);
    }

    /**
     * Set TCD26_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD26_CSR_DONE() volatile
    {
        TCD26_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD26_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD26_CSR_DONE() volatile
    {
        TCD26_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD26_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD26_CSR_DONE() volatile
    {
        TCD26_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD26_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD26_CSR_ACTIVE() volatile
    {
        return TCD26_CSR & (1u << 6u);
    }

    /**
     * Get TCD26_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD26_CSR_MAJORELINK() volatile
    {
        return TCD26_CSR & (1u << 5u);
    }

    /**
     * Set TCD26_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD26_CSR_MAJORELINK() volatile
    {
        TCD26_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD26_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD26_CSR_MAJORELINK() volatile
    {
        TCD26_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD26_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD26_CSR_MAJORELINK() volatile
    {
        TCD26_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD26_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD26_CSR_ESG() volatile
    {
        return TCD26_CSR & (1u << 4u);
    }

    /**
     * Set TCD26_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD26_CSR_ESG() volatile
    {
        TCD26_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD26_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD26_CSR_ESG() volatile
    {
        TCD26_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD26_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD26_CSR_ESG() volatile
    {
        TCD26_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD26_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD26_CSR_DREQ() volatile
    {
        return TCD26_CSR & (1u << 3u);
    }

    /**
     * Set TCD26_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD26_CSR_DREQ() volatile
    {
        TCD26_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD26_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD26_CSR_DREQ() volatile
    {
        TCD26_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD26_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD26_CSR_DREQ() volatile
    {
        TCD26_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD26_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD26_CSR_INTHALF() volatile
    {
        return TCD26_CSR & (1u << 2u);
    }

    /**
     * Set TCD26_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD26_CSR_INTHALF() volatile
    {
        TCD26_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD26_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD26_CSR_INTHALF() volatile
    {
        TCD26_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD26_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD26_CSR_INTHALF() volatile
    {
        TCD26_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD26_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD26_CSR_INTMAJOR() volatile
    {
        return TCD26_CSR & (1u << 1u);
    }

    /**
     * Set TCD26_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD26_CSR_INTMAJOR() volatile
    {
        TCD26_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD26_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD26_CSR_INTMAJOR() volatile
    {
        TCD26_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD26_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD26_CSR_INTMAJOR() volatile
    {
        TCD26_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD26_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD26_CSR_START() volatile
    {
        return TCD26_CSR & (1u << 0u);
    }

    /**
     * Set TCD26_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD26_CSR_START() volatile
    {
        TCD26_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD26_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD26_CSR_START() volatile
    {
        TCD26_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD26_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD26_CSR_START() volatile
    {
        TCD26_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD26_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD26_CSR(DMA0_TCD26_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD26_CSR;

        BWC = DMA0_TCD26_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD26_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD26_CSR(DMA0_TCD26_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD26_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD26_CSR = curr;
    }

    /**
     * Get TCD27_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD27_SADDR_SADDR() volatile
    {
        return (TCD27_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD27_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD27_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD27_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD27_SADDR = curr;
    }

    /**
     * Get TCD27_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD27_SOFF_SOFF() volatile
    {
        return (TCD27_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD27_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD27_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD27_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD27_SOFF = curr;
    }

    /**
     * Get TCD27_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD27_ATTR_SMOD get_TCD27_ATTR_SMOD() volatile
    {
        return DMA0_TCD27_ATTR_SMOD((TCD27_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD27_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD27_ATTR_SMOD(DMA0_TCD27_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD27_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD27_ATTR = curr;
    }

    /**
     * Get TCD27_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD27_ATTR_SSIZE get_TCD27_ATTR_SSIZE() volatile
    {
        return DMA0_TCD27_ATTR_SSIZE((TCD27_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD27_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD27_ATTR_SSIZE(DMA0_TCD27_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD27_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD27_ATTR = curr;
    }

    /**
     * Get TCD27_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD27_ATTR_DMOD() volatile
    {
        return (TCD27_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD27_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD27_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD27_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD27_ATTR = curr;
    }

    /**
     * Get TCD27_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD27_ATTR_DSIZE() volatile
    {
        return (TCD27_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD27_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD27_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD27_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD27_ATTR = curr;
    }

    /**
     * Get all of TCD27_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD27_ATTR(DMA0_TCD27_ATTR_SMOD &SMOD,
                               DMA0_TCD27_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD27_ATTR;

        SMOD = DMA0_TCD27_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD27_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD27_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD27_ATTR(DMA0_TCD27_ATTR_SMOD SMOD,
                               DMA0_TCD27_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD27_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD27_ATTR = curr;
    }

    /**
     * Get TCD27_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD27_SLAST_SLAST() volatile
    {
        return (TCD27_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD27_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD27_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD27_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD27_SLAST = curr;
    }

    /**
     * Get TCD27_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD27_DADDR_DADDR() volatile
    {
        return (TCD27_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD27_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD27_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD27_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD27_DADDR = curr;
    }

    /**
     * Get TCD27_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD27_DOFF_DOFF() volatile
    {
        return (TCD27_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD27_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD27_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD27_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD27_DOFF = curr;
    }

    /**
     * Get TCD27_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD27_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD27_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD27_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD27_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD27_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD27_DLASTSGA = curr;
    }

    /**
     * Get TCD27_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD27_CSR_BWC get_TCD27_CSR_BWC() volatile
    {
        return DMA0_TCD27_CSR_BWC((TCD27_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD27_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD27_CSR_BWC(DMA0_TCD27_CSR_BWC value) volatile
    {
        uint16_t curr = TCD27_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD27_CSR = curr;
    }

    /**
     * Get TCD27_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD27_CSR_MAJORLINKCH() volatile
    {
        return (TCD27_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD27_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD27_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD27_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD27_CSR = curr;
    }

    /**
     * Get TCD27_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD27_CSR_DONE() volatile
    {
        return TCD27_CSR & (1u << 7u);
    }

    /**
     * Set TCD27_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD27_CSR_DONE() volatile
    {
        TCD27_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD27_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD27_CSR_DONE() volatile
    {
        TCD27_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD27_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD27_CSR_DONE() volatile
    {
        TCD27_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD27_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD27_CSR_ACTIVE() volatile
    {
        return TCD27_CSR & (1u << 6u);
    }

    /**
     * Get TCD27_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD27_CSR_MAJORELINK() volatile
    {
        return TCD27_CSR & (1u << 5u);
    }

    /**
     * Set TCD27_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD27_CSR_MAJORELINK() volatile
    {
        TCD27_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD27_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD27_CSR_MAJORELINK() volatile
    {
        TCD27_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD27_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD27_CSR_MAJORELINK() volatile
    {
        TCD27_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD27_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD27_CSR_ESG() volatile
    {
        return TCD27_CSR & (1u << 4u);
    }

    /**
     * Set TCD27_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD27_CSR_ESG() volatile
    {
        TCD27_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD27_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD27_CSR_ESG() volatile
    {
        TCD27_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD27_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD27_CSR_ESG() volatile
    {
        TCD27_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD27_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD27_CSR_DREQ() volatile
    {
        return TCD27_CSR & (1u << 3u);
    }

    /**
     * Set TCD27_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD27_CSR_DREQ() volatile
    {
        TCD27_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD27_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD27_CSR_DREQ() volatile
    {
        TCD27_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD27_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD27_CSR_DREQ() volatile
    {
        TCD27_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD27_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD27_CSR_INTHALF() volatile
    {
        return TCD27_CSR & (1u << 2u);
    }

    /**
     * Set TCD27_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD27_CSR_INTHALF() volatile
    {
        TCD27_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD27_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD27_CSR_INTHALF() volatile
    {
        TCD27_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD27_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD27_CSR_INTHALF() volatile
    {
        TCD27_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD27_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD27_CSR_INTMAJOR() volatile
    {
        return TCD27_CSR & (1u << 1u);
    }

    /**
     * Set TCD27_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD27_CSR_INTMAJOR() volatile
    {
        TCD27_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD27_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD27_CSR_INTMAJOR() volatile
    {
        TCD27_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD27_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD27_CSR_INTMAJOR() volatile
    {
        TCD27_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD27_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD27_CSR_START() volatile
    {
        return TCD27_CSR & (1u << 0u);
    }

    /**
     * Set TCD27_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD27_CSR_START() volatile
    {
        TCD27_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD27_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD27_CSR_START() volatile
    {
        TCD27_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD27_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD27_CSR_START() volatile
    {
        TCD27_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD27_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD27_CSR(DMA0_TCD27_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD27_CSR;

        BWC = DMA0_TCD27_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD27_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD27_CSR(DMA0_TCD27_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD27_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD27_CSR = curr;
    }

    /**
     * Get TCD28_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD28_SADDR_SADDR() volatile
    {
        return (TCD28_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD28_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD28_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD28_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD28_SADDR = curr;
    }

    /**
     * Get TCD28_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD28_SOFF_SOFF() volatile
    {
        return (TCD28_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD28_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD28_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD28_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD28_SOFF = curr;
    }

    /**
     * Get TCD28_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD28_ATTR_SMOD get_TCD28_ATTR_SMOD() volatile
    {
        return DMA0_TCD28_ATTR_SMOD((TCD28_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD28_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD28_ATTR_SMOD(DMA0_TCD28_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD28_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD28_ATTR = curr;
    }

    /**
     * Get TCD28_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD28_ATTR_SSIZE get_TCD28_ATTR_SSIZE() volatile
    {
        return DMA0_TCD28_ATTR_SSIZE((TCD28_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD28_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD28_ATTR_SSIZE(DMA0_TCD28_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD28_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD28_ATTR = curr;
    }

    /**
     * Get TCD28_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD28_ATTR_DMOD() volatile
    {
        return (TCD28_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD28_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD28_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD28_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD28_ATTR = curr;
    }

    /**
     * Get TCD28_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD28_ATTR_DSIZE() volatile
    {
        return (TCD28_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD28_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD28_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD28_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD28_ATTR = curr;
    }

    /**
     * Get all of TCD28_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD28_ATTR(DMA0_TCD28_ATTR_SMOD &SMOD,
                               DMA0_TCD28_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD28_ATTR;

        SMOD = DMA0_TCD28_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD28_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD28_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD28_ATTR(DMA0_TCD28_ATTR_SMOD SMOD,
                               DMA0_TCD28_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD28_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD28_ATTR = curr;
    }

    /**
     * Get TCD28_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD28_SLAST_SLAST() volatile
    {
        return (TCD28_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD28_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD28_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD28_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD28_SLAST = curr;
    }

    /**
     * Get TCD28_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD28_DADDR_DADDR() volatile
    {
        return (TCD28_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD28_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD28_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD28_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD28_DADDR = curr;
    }

    /**
     * Get TCD28_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD28_DOFF_DOFF() volatile
    {
        return (TCD28_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD28_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD28_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD28_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD28_DOFF = curr;
    }

    /**
     * Get TCD28_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD28_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD28_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD28_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD28_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD28_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD28_DLASTSGA = curr;
    }

    /**
     * Get TCD28_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD28_CSR_BWC get_TCD28_CSR_BWC() volatile
    {
        return DMA0_TCD28_CSR_BWC((TCD28_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD28_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD28_CSR_BWC(DMA0_TCD28_CSR_BWC value) volatile
    {
        uint16_t curr = TCD28_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD28_CSR = curr;
    }

    /**
     * Get TCD28_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD28_CSR_MAJORLINKCH() volatile
    {
        return (TCD28_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD28_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD28_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD28_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD28_CSR = curr;
    }

    /**
     * Get TCD28_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD28_CSR_DONE() volatile
    {
        return TCD28_CSR & (1u << 7u);
    }

    /**
     * Set TCD28_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD28_CSR_DONE() volatile
    {
        TCD28_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD28_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD28_CSR_DONE() volatile
    {
        TCD28_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD28_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD28_CSR_DONE() volatile
    {
        TCD28_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD28_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD28_CSR_ACTIVE() volatile
    {
        return TCD28_CSR & (1u << 6u);
    }

    /**
     * Get TCD28_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD28_CSR_MAJORELINK() volatile
    {
        return TCD28_CSR & (1u << 5u);
    }

    /**
     * Set TCD28_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD28_CSR_MAJORELINK() volatile
    {
        TCD28_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD28_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD28_CSR_MAJORELINK() volatile
    {
        TCD28_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD28_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD28_CSR_MAJORELINK() volatile
    {
        TCD28_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD28_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD28_CSR_ESG() volatile
    {
        return TCD28_CSR & (1u << 4u);
    }

    /**
     * Set TCD28_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD28_CSR_ESG() volatile
    {
        TCD28_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD28_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD28_CSR_ESG() volatile
    {
        TCD28_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD28_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD28_CSR_ESG() volatile
    {
        TCD28_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD28_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD28_CSR_DREQ() volatile
    {
        return TCD28_CSR & (1u << 3u);
    }

    /**
     * Set TCD28_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD28_CSR_DREQ() volatile
    {
        TCD28_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD28_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD28_CSR_DREQ() volatile
    {
        TCD28_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD28_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD28_CSR_DREQ() volatile
    {
        TCD28_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD28_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD28_CSR_INTHALF() volatile
    {
        return TCD28_CSR & (1u << 2u);
    }

    /**
     * Set TCD28_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD28_CSR_INTHALF() volatile
    {
        TCD28_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD28_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD28_CSR_INTHALF() volatile
    {
        TCD28_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD28_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD28_CSR_INTHALF() volatile
    {
        TCD28_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD28_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD28_CSR_INTMAJOR() volatile
    {
        return TCD28_CSR & (1u << 1u);
    }

    /**
     * Set TCD28_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD28_CSR_INTMAJOR() volatile
    {
        TCD28_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD28_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD28_CSR_INTMAJOR() volatile
    {
        TCD28_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD28_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD28_CSR_INTMAJOR() volatile
    {
        TCD28_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD28_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD28_CSR_START() volatile
    {
        return TCD28_CSR & (1u << 0u);
    }

    /**
     * Set TCD28_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD28_CSR_START() volatile
    {
        TCD28_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD28_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD28_CSR_START() volatile
    {
        TCD28_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD28_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD28_CSR_START() volatile
    {
        TCD28_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD28_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD28_CSR(DMA0_TCD28_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD28_CSR;

        BWC = DMA0_TCD28_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD28_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD28_CSR(DMA0_TCD28_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD28_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD28_CSR = curr;
    }

    /**
     * Get TCD29_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD29_SADDR_SADDR() volatile
    {
        return (TCD29_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD29_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD29_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD29_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD29_SADDR = curr;
    }

    /**
     * Get TCD29_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD29_SOFF_SOFF() volatile
    {
        return (TCD29_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD29_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD29_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD29_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD29_SOFF = curr;
    }

    /**
     * Get TCD29_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD29_ATTR_SMOD get_TCD29_ATTR_SMOD() volatile
    {
        return DMA0_TCD29_ATTR_SMOD((TCD29_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD29_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD29_ATTR_SMOD(DMA0_TCD29_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD29_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD29_ATTR = curr;
    }

    /**
     * Get TCD29_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD29_ATTR_SSIZE get_TCD29_ATTR_SSIZE() volatile
    {
        return DMA0_TCD29_ATTR_SSIZE((TCD29_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD29_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD29_ATTR_SSIZE(DMA0_TCD29_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD29_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD29_ATTR = curr;
    }

    /**
     * Get TCD29_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD29_ATTR_DMOD() volatile
    {
        return (TCD29_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD29_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD29_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD29_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD29_ATTR = curr;
    }

    /**
     * Get TCD29_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD29_ATTR_DSIZE() volatile
    {
        return (TCD29_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD29_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD29_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD29_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD29_ATTR = curr;
    }

    /**
     * Get all of TCD29_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD29_ATTR(DMA0_TCD29_ATTR_SMOD &SMOD,
                               DMA0_TCD29_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD29_ATTR;

        SMOD = DMA0_TCD29_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD29_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD29_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD29_ATTR(DMA0_TCD29_ATTR_SMOD SMOD,
                               DMA0_TCD29_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD29_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD29_ATTR = curr;
    }

    /**
     * Get TCD29_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD29_SLAST_SLAST() volatile
    {
        return (TCD29_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD29_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD29_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD29_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD29_SLAST = curr;
    }

    /**
     * Get TCD29_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD29_DADDR_DADDR() volatile
    {
        return (TCD29_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD29_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD29_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD29_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD29_DADDR = curr;
    }

    /**
     * Get TCD29_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD29_DOFF_DOFF() volatile
    {
        return (TCD29_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD29_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD29_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD29_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD29_DOFF = curr;
    }

    /**
     * Get TCD29_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD29_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD29_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD29_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD29_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD29_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD29_DLASTSGA = curr;
    }

    /**
     * Get TCD29_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD29_CSR_BWC get_TCD29_CSR_BWC() volatile
    {
        return DMA0_TCD29_CSR_BWC((TCD29_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD29_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD29_CSR_BWC(DMA0_TCD29_CSR_BWC value) volatile
    {
        uint16_t curr = TCD29_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD29_CSR = curr;
    }

    /**
     * Get TCD29_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD29_CSR_MAJORLINKCH() volatile
    {
        return (TCD29_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD29_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD29_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD29_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD29_CSR = curr;
    }

    /**
     * Get TCD29_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD29_CSR_DONE() volatile
    {
        return TCD29_CSR & (1u << 7u);
    }

    /**
     * Set TCD29_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD29_CSR_DONE() volatile
    {
        TCD29_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD29_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD29_CSR_DONE() volatile
    {
        TCD29_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD29_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD29_CSR_DONE() volatile
    {
        TCD29_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD29_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD29_CSR_ACTIVE() volatile
    {
        return TCD29_CSR & (1u << 6u);
    }

    /**
     * Get TCD29_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD29_CSR_MAJORELINK() volatile
    {
        return TCD29_CSR & (1u << 5u);
    }

    /**
     * Set TCD29_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD29_CSR_MAJORELINK() volatile
    {
        TCD29_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD29_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD29_CSR_MAJORELINK() volatile
    {
        TCD29_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD29_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD29_CSR_MAJORELINK() volatile
    {
        TCD29_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD29_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD29_CSR_ESG() volatile
    {
        return TCD29_CSR & (1u << 4u);
    }

    /**
     * Set TCD29_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD29_CSR_ESG() volatile
    {
        TCD29_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD29_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD29_CSR_ESG() volatile
    {
        TCD29_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD29_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD29_CSR_ESG() volatile
    {
        TCD29_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD29_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD29_CSR_DREQ() volatile
    {
        return TCD29_CSR & (1u << 3u);
    }

    /**
     * Set TCD29_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD29_CSR_DREQ() volatile
    {
        TCD29_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD29_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD29_CSR_DREQ() volatile
    {
        TCD29_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD29_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD29_CSR_DREQ() volatile
    {
        TCD29_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD29_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD29_CSR_INTHALF() volatile
    {
        return TCD29_CSR & (1u << 2u);
    }

    /**
     * Set TCD29_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD29_CSR_INTHALF() volatile
    {
        TCD29_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD29_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD29_CSR_INTHALF() volatile
    {
        TCD29_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD29_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD29_CSR_INTHALF() volatile
    {
        TCD29_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD29_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD29_CSR_INTMAJOR() volatile
    {
        return TCD29_CSR & (1u << 1u);
    }

    /**
     * Set TCD29_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD29_CSR_INTMAJOR() volatile
    {
        TCD29_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD29_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD29_CSR_INTMAJOR() volatile
    {
        TCD29_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD29_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD29_CSR_INTMAJOR() volatile
    {
        TCD29_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD29_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD29_CSR_START() volatile
    {
        return TCD29_CSR & (1u << 0u);
    }

    /**
     * Set TCD29_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD29_CSR_START() volatile
    {
        TCD29_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD29_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD29_CSR_START() volatile
    {
        TCD29_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD29_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD29_CSR_START() volatile
    {
        TCD29_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD29_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD29_CSR(DMA0_TCD29_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD29_CSR;

        BWC = DMA0_TCD29_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD29_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD29_CSR(DMA0_TCD29_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD29_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD29_CSR = curr;
    }

    /**
     * Get TCD30_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD30_SADDR_SADDR() volatile
    {
        return (TCD30_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD30_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD30_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD30_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD30_SADDR = curr;
    }

    /**
     * Get TCD30_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD30_SOFF_SOFF() volatile
    {
        return (TCD30_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD30_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD30_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD30_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD30_SOFF = curr;
    }

    /**
     * Get TCD30_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD30_ATTR_SMOD get_TCD30_ATTR_SMOD() volatile
    {
        return DMA0_TCD30_ATTR_SMOD((TCD30_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD30_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD30_ATTR_SMOD(DMA0_TCD30_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD30_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD30_ATTR = curr;
    }

    /**
     * Get TCD30_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD30_ATTR_SSIZE get_TCD30_ATTR_SSIZE() volatile
    {
        return DMA0_TCD30_ATTR_SSIZE((TCD30_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD30_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD30_ATTR_SSIZE(DMA0_TCD30_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD30_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD30_ATTR = curr;
    }

    /**
     * Get TCD30_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD30_ATTR_DMOD() volatile
    {
        return (TCD30_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD30_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD30_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD30_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD30_ATTR = curr;
    }

    /**
     * Get TCD30_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD30_ATTR_DSIZE() volatile
    {
        return (TCD30_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD30_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD30_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD30_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD30_ATTR = curr;
    }

    /**
     * Get all of TCD30_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD30_ATTR(DMA0_TCD30_ATTR_SMOD &SMOD,
                               DMA0_TCD30_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD30_ATTR;

        SMOD = DMA0_TCD30_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD30_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD30_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD30_ATTR(DMA0_TCD30_ATTR_SMOD SMOD,
                               DMA0_TCD30_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD30_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD30_ATTR = curr;
    }

    /**
     * Get TCD30_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD30_SLAST_SLAST() volatile
    {
        return (TCD30_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD30_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD30_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD30_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD30_SLAST = curr;
    }

    /**
     * Get TCD30_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD30_DADDR_DADDR() volatile
    {
        return (TCD30_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD30_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD30_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD30_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD30_DADDR = curr;
    }

    /**
     * Get TCD30_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD30_DOFF_DOFF() volatile
    {
        return (TCD30_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD30_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD30_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD30_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD30_DOFF = curr;
    }

    /**
     * Get TCD30_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD30_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD30_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD30_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD30_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD30_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD30_DLASTSGA = curr;
    }

    /**
     * Get TCD30_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD30_CSR_BWC get_TCD30_CSR_BWC() volatile
    {
        return DMA0_TCD30_CSR_BWC((TCD30_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD30_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD30_CSR_BWC(DMA0_TCD30_CSR_BWC value) volatile
    {
        uint16_t curr = TCD30_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD30_CSR = curr;
    }

    /**
     * Get TCD30_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD30_CSR_MAJORLINKCH() volatile
    {
        return (TCD30_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD30_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD30_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD30_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD30_CSR = curr;
    }

    /**
     * Get TCD30_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD30_CSR_DONE() volatile
    {
        return TCD30_CSR & (1u << 7u);
    }

    /**
     * Set TCD30_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD30_CSR_DONE() volatile
    {
        TCD30_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD30_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD30_CSR_DONE() volatile
    {
        TCD30_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD30_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD30_CSR_DONE() volatile
    {
        TCD30_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD30_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD30_CSR_ACTIVE() volatile
    {
        return TCD30_CSR & (1u << 6u);
    }

    /**
     * Get TCD30_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD30_CSR_MAJORELINK() volatile
    {
        return TCD30_CSR & (1u << 5u);
    }

    /**
     * Set TCD30_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD30_CSR_MAJORELINK() volatile
    {
        TCD30_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD30_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD30_CSR_MAJORELINK() volatile
    {
        TCD30_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD30_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD30_CSR_MAJORELINK() volatile
    {
        TCD30_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD30_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD30_CSR_ESG() volatile
    {
        return TCD30_CSR & (1u << 4u);
    }

    /**
     * Set TCD30_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD30_CSR_ESG() volatile
    {
        TCD30_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD30_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD30_CSR_ESG() volatile
    {
        TCD30_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD30_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD30_CSR_ESG() volatile
    {
        TCD30_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD30_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD30_CSR_DREQ() volatile
    {
        return TCD30_CSR & (1u << 3u);
    }

    /**
     * Set TCD30_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD30_CSR_DREQ() volatile
    {
        TCD30_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD30_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD30_CSR_DREQ() volatile
    {
        TCD30_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD30_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD30_CSR_DREQ() volatile
    {
        TCD30_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD30_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD30_CSR_INTHALF() volatile
    {
        return TCD30_CSR & (1u << 2u);
    }

    /**
     * Set TCD30_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD30_CSR_INTHALF() volatile
    {
        TCD30_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD30_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD30_CSR_INTHALF() volatile
    {
        TCD30_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD30_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD30_CSR_INTHALF() volatile
    {
        TCD30_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD30_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD30_CSR_INTMAJOR() volatile
    {
        return TCD30_CSR & (1u << 1u);
    }

    /**
     * Set TCD30_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD30_CSR_INTMAJOR() volatile
    {
        TCD30_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD30_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD30_CSR_INTMAJOR() volatile
    {
        TCD30_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD30_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD30_CSR_INTMAJOR() volatile
    {
        TCD30_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD30_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD30_CSR_START() volatile
    {
        return TCD30_CSR & (1u << 0u);
    }

    /**
     * Set TCD30_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD30_CSR_START() volatile
    {
        TCD30_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD30_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD30_CSR_START() volatile
    {
        TCD30_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD30_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD30_CSR_START() volatile
    {
        TCD30_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD30_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD30_CSR(DMA0_TCD30_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD30_CSR;

        BWC = DMA0_TCD30_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD30_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD30_CSR(DMA0_TCD30_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD30_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD30_CSR = curr;
    }

    /**
     * Get TCD31_SADDR's SADDR field.
     *
     * Source Address
     */
    inline uint32_t get_TCD31_SADDR_SADDR() volatile
    {
        return (TCD31_SADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD31_SADDR's SADDR field.
     *
     * Source Address
     */
    inline void set_TCD31_SADDR_SADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD31_SADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD31_SADDR = curr;
    }

    /**
     * Get TCD31_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline uint16_t get_TCD31_SOFF_SOFF() volatile
    {
        return (TCD31_SOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD31_SOFF's SOFF field.
     *
     * Source address signed offset
     */
    inline void set_TCD31_SOFF_SOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD31_SOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD31_SOFF = curr;
    }

    /**
     * Get TCD31_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline DMA0_TCD31_ATTR_SMOD get_TCD31_ATTR_SMOD() volatile
    {
        return DMA0_TCD31_ATTR_SMOD((TCD31_ATTR >> 11u) & 0b11111u);
    }

    /**
     * Set TCD31_ATTR's SMOD field.
     *
     * Source Address Modulo
     */
    inline void set_TCD31_ATTR_SMOD(DMA0_TCD31_ATTR_SMOD value) volatile
    {
        uint16_t curr = TCD31_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        TCD31_ATTR = curr;
    }

    /**
     * Get TCD31_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline DMA0_TCD31_ATTR_SSIZE get_TCD31_ATTR_SSIZE() volatile
    {
        return DMA0_TCD31_ATTR_SSIZE((TCD31_ATTR >> 8u) & 0b111u);
    }

    /**
     * Set TCD31_ATTR's SSIZE field.
     *
     * Source data transfer size
     */
    inline void set_TCD31_ATTR_SSIZE(DMA0_TCD31_ATTR_SSIZE value) volatile
    {
        uint16_t curr = TCD31_ATTR;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TCD31_ATTR = curr;
    }

    /**
     * Get TCD31_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline uint8_t get_TCD31_ATTR_DMOD() volatile
    {
        return (TCD31_ATTR >> 3u) & 0b11111u;
    }

    /**
     * Set TCD31_ATTR's DMOD field.
     *
     * Destination Address Modulo
     */
    inline void set_TCD31_ATTR_DMOD(uint8_t value) volatile
    {
        uint16_t curr = TCD31_ATTR;

        curr &= ~(0b11111u << 3u);
        curr |= (value & 0b11111u) << 3u;

        TCD31_ATTR = curr;
    }

    /**
     * Get TCD31_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline uint8_t get_TCD31_ATTR_DSIZE() volatile
    {
        return (TCD31_ATTR >> 0u) & 0b111u;
    }

    /**
     * Set TCD31_ATTR's DSIZE field.
     *
     * Destination data transfer size
     */
    inline void set_TCD31_ATTR_DSIZE(uint8_t value) volatile
    {
        uint16_t curr = TCD31_ATTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        TCD31_ATTR = curr;
    }

    /**
     * Get all of TCD31_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void get_TCD31_ATTR(DMA0_TCD31_ATTR_SMOD &SMOD,
                               DMA0_TCD31_ATTR_SSIZE &SSIZE, uint8_t &DMOD,
                               uint8_t &DSIZE) volatile
    {
        uint16_t curr = TCD31_ATTR;

        SMOD = DMA0_TCD31_ATTR_SMOD((curr >> 11u) & 0b11111u);
        SSIZE = DMA0_TCD31_ATTR_SSIZE((curr >> 8u) & 0b111u);
        DMOD = (curr >> 3u) & 0b11111u;
        DSIZE = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of TCD31_ATTR's bit fields.
     *
     * (read-write) TCD Transfer Attributes
     */
    inline void set_TCD31_ATTR(DMA0_TCD31_ATTR_SMOD SMOD,
                               DMA0_TCD31_ATTR_SSIZE SSIZE, uint8_t DMOD,
                               uint8_t DSIZE) volatile
    {
        uint16_t curr = TCD31_ATTR;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(SMOD) & 0b11111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(SSIZE) & 0b111u) << 8u;
        curr &= ~(0b11111u << 3u);
        curr |= (DMOD & 0b11111u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (DSIZE & 0b111u) << 0u;

        TCD31_ATTR = curr;
    }

    /**
     * Get TCD31_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline uint32_t get_TCD31_SLAST_SLAST() volatile
    {
        return (TCD31_SLAST >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD31_SLAST's SLAST field.
     *
     * Last Source Address Adjustment
     */
    inline void set_TCD31_SLAST_SLAST(uint32_t value) volatile
    {
        uint32_t curr = TCD31_SLAST;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD31_SLAST = curr;
    }

    /**
     * Get TCD31_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline uint32_t get_TCD31_DADDR_DADDR() volatile
    {
        return (TCD31_DADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD31_DADDR's DADDR field.
     *
     * Destination Address
     */
    inline void set_TCD31_DADDR_DADDR(uint32_t value) volatile
    {
        uint32_t curr = TCD31_DADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD31_DADDR = curr;
    }

    /**
     * Get TCD31_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline uint16_t get_TCD31_DOFF_DOFF() volatile
    {
        return (TCD31_DOFF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TCD31_DOFF's DOFF field.
     *
     * Destination Address Signed Offset
     */
    inline void set_TCD31_DOFF_DOFF(uint16_t value) volatile
    {
        uint16_t curr = TCD31_DOFF;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TCD31_DOFF = curr;
    }

    /**
     * Get TCD31_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline uint32_t get_TCD31_DLASTSGA_DLASTSGA() volatile
    {
        return (TCD31_DLASTSGA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TCD31_DLASTSGA's DLASTSGA field.
     *
     * Destination last address adjustment, or next memory address TCD for
     * channel (scatter/gather)
     */
    inline void set_TCD31_DLASTSGA_DLASTSGA(uint32_t value) volatile
    {
        uint32_t curr = TCD31_DLASTSGA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TCD31_DLASTSGA = curr;
    }

    /**
     * Get TCD31_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline DMA0_TCD31_CSR_BWC get_TCD31_CSR_BWC() volatile
    {
        return DMA0_TCD31_CSR_BWC((TCD31_CSR >> 14u) & 0b11u);
    }

    /**
     * Set TCD31_CSR's BWC field.
     *
     * Bandwidth Control
     */
    inline void set_TCD31_CSR_BWC(DMA0_TCD31_CSR_BWC value) volatile
    {
        uint16_t curr = TCD31_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        TCD31_CSR = curr;
    }

    /**
     * Get TCD31_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline uint8_t get_TCD31_CSR_MAJORLINKCH() volatile
    {
        return (TCD31_CSR >> 8u) & 0b11111u;
    }

    /**
     * Set TCD31_CSR's MAJORLINKCH field.
     *
     * Major Loop Link Channel Number
     */
    inline void set_TCD31_CSR_MAJORLINKCH(uint8_t value) volatile
    {
        uint16_t curr = TCD31_CSR;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCD31_CSR = curr;
    }

    /**
     * Get TCD31_CSR's DONE bit.
     *
     * Channel Done
     */
    inline bool get_TCD31_CSR_DONE() volatile
    {
        return TCD31_CSR & (1u << 7u);
    }

    /**
     * Set TCD31_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void set_TCD31_CSR_DONE() volatile
    {
        TCD31_CSR |= 1u << 7u;
    }

    /**
     * Clear TCD31_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void clear_TCD31_CSR_DONE() volatile
    {
        TCD31_CSR &= ~(1u << 7u);
    }

    /**
     * Toggle TCD31_CSR's DONE bit.
     *
     * Channel Done
     */
    inline void toggle_TCD31_CSR_DONE() volatile
    {
        TCD31_CSR ^= 1u << 7u;
    }

    /**
     * Get TCD31_CSR's ACTIVE bit.
     *
     * Channel Active
     */
    inline bool get_TCD31_CSR_ACTIVE() volatile
    {
        return TCD31_CSR & (1u << 6u);
    }

    /**
     * Get TCD31_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline bool get_TCD31_CSR_MAJORELINK() volatile
    {
        return TCD31_CSR & (1u << 5u);
    }

    /**
     * Set TCD31_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void set_TCD31_CSR_MAJORELINK() volatile
    {
        TCD31_CSR |= 1u << 5u;
    }

    /**
     * Clear TCD31_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void clear_TCD31_CSR_MAJORELINK() volatile
    {
        TCD31_CSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCD31_CSR's MAJORELINK bit.
     *
     * Enable channel-to-channel linking on major loop complete
     */
    inline void toggle_TCD31_CSR_MAJORELINK() volatile
    {
        TCD31_CSR ^= 1u << 5u;
    }

    /**
     * Get TCD31_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline bool get_TCD31_CSR_ESG() volatile
    {
        return TCD31_CSR & (1u << 4u);
    }

    /**
     * Set TCD31_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void set_TCD31_CSR_ESG() volatile
    {
        TCD31_CSR |= 1u << 4u;
    }

    /**
     * Clear TCD31_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void clear_TCD31_CSR_ESG() volatile
    {
        TCD31_CSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCD31_CSR's ESG bit.
     *
     * Enable Scatter/Gather Processing
     */
    inline void toggle_TCD31_CSR_ESG() volatile
    {
        TCD31_CSR ^= 1u << 4u;
    }

    /**
     * Get TCD31_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline bool get_TCD31_CSR_DREQ() volatile
    {
        return TCD31_CSR & (1u << 3u);
    }

    /**
     * Set TCD31_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void set_TCD31_CSR_DREQ() volatile
    {
        TCD31_CSR |= 1u << 3u;
    }

    /**
     * Clear TCD31_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void clear_TCD31_CSR_DREQ() volatile
    {
        TCD31_CSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCD31_CSR's DREQ bit.
     *
     * Disable Request
     */
    inline void toggle_TCD31_CSR_DREQ() volatile
    {
        TCD31_CSR ^= 1u << 3u;
    }

    /**
     * Get TCD31_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline bool get_TCD31_CSR_INTHALF() volatile
    {
        return TCD31_CSR & (1u << 2u);
    }

    /**
     * Set TCD31_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void set_TCD31_CSR_INTHALF() volatile
    {
        TCD31_CSR |= 1u << 2u;
    }

    /**
     * Clear TCD31_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void clear_TCD31_CSR_INTHALF() volatile
    {
        TCD31_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCD31_CSR's INTHALF bit.
     *
     * Enable an interrupt when major counter is half complete.
     */
    inline void toggle_TCD31_CSR_INTHALF() volatile
    {
        TCD31_CSR ^= 1u << 2u;
    }

    /**
     * Get TCD31_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline bool get_TCD31_CSR_INTMAJOR() volatile
    {
        return TCD31_CSR & (1u << 1u);
    }

    /**
     * Set TCD31_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void set_TCD31_CSR_INTMAJOR() volatile
    {
        TCD31_CSR |= 1u << 1u;
    }

    /**
     * Clear TCD31_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void clear_TCD31_CSR_INTMAJOR() volatile
    {
        TCD31_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCD31_CSR's INTMAJOR bit.
     *
     * Enable an interrupt when major iteration count completes.
     */
    inline void toggle_TCD31_CSR_INTMAJOR() volatile
    {
        TCD31_CSR ^= 1u << 1u;
    }

    /**
     * Get TCD31_CSR's START bit.
     *
     * Channel Start
     */
    inline bool get_TCD31_CSR_START() volatile
    {
        return TCD31_CSR & (1u << 0u);
    }

    /**
     * Set TCD31_CSR's START bit.
     *
     * Channel Start
     */
    inline void set_TCD31_CSR_START() volatile
    {
        TCD31_CSR |= 1u << 0u;
    }

    /**
     * Clear TCD31_CSR's START bit.
     *
     * Channel Start
     */
    inline void clear_TCD31_CSR_START() volatile
    {
        TCD31_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCD31_CSR's START bit.
     *
     * Channel Start
     */
    inline void toggle_TCD31_CSR_START() volatile
    {
        TCD31_CSR ^= 1u << 0u;
    }

    /**
     * Get all of TCD31_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void get_TCD31_CSR(DMA0_TCD31_CSR_BWC &BWC, uint8_t &MAJORLINKCH,
                              bool &DONE, bool &ACTIVE, bool &MAJORELINK,
                              bool &ESG, bool &DREQ, bool &INTHALF,
                              bool &INTMAJOR, bool &START) volatile
    {
        uint16_t curr = TCD31_CSR;

        BWC = DMA0_TCD31_CSR_BWC((curr >> 14u) & 0b11u);
        MAJORLINKCH = (curr >> 8u) & 0b11111u;
        DONE = curr & (1u << 7u);
        ACTIVE = curr & (1u << 6u);
        MAJORELINK = curr & (1u << 5u);
        ESG = curr & (1u << 4u);
        DREQ = curr & (1u << 3u);
        INTHALF = curr & (1u << 2u);
        INTMAJOR = curr & (1u << 1u);
        START = curr & (1u << 0u);
    }

    /**
     * Set all of TCD31_CSR's bit fields.
     *
     * (read-write) TCD Control and Status
     */
    inline void set_TCD31_CSR(DMA0_TCD31_CSR_BWC BWC, uint8_t MAJORLINKCH,
                              bool DONE, bool MAJORELINK, bool ESG, bool DREQ,
                              bool INTHALF, bool INTMAJOR, bool START) volatile
    {
        uint16_t curr = TCD31_CSR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(BWC) & 0b11u) << 14u;
        curr &= ~(0b11111u << 8u);
        curr |= (MAJORLINKCH & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (DONE & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (MAJORELINK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ESG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DREQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INTHALF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INTMAJOR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (START & 0b1u) << 0u;

        TCD31_CSR = curr;
    }
};

static_assert(sizeof(dma0) == dma0::size);

static volatile dma0 *const DMA0 = reinterpret_cast<dma0 *>(0x40070000);

}; // namespace MIMXRT1176::CM7
