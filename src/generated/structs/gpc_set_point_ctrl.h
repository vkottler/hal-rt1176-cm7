/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/GPC_SET_POINT_CTRL_SP_BG_PLDO_OFF_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_BG_PLDO_ON_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_BIAS_OFF_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_BIAS_ON_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_DCDC_DOWN_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_DCDC_UP_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_GROUP_DOWN_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_GROUP_UP_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_ISO_OFF_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_ISO_ON_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_LDO_POST_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_LDO_PRE_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_LPCG_OFF_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_LPCG_ON_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_PLL_OFF_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_PLL_ON_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_POWER_OFF_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_POWER_ON_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_RESET_EARLY_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_RESET_LATE_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_ROOT_DOWN_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_ROOT_UP_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_SSAR_RESTORE_CTRL_CNT_MODE.h"
#include "../enums/GPC_SET_POINT_CTRL_SP_SSAR_SAVE_CTRL_CNT_MODE.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * GPC_SP
 */
struct [[gnu::packed]] gpc_set_point_ctrl
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        692; /*!< gpc_set_point_ctrl's size in bytes. */

    /* Fields. */
    const uint32_t reserved_padding0 = {};
    uint32_t SP_AUTHEN_CTRL; /*!< (read-write) SP Authentication Control */
    uint32_t SP_INT_CTRL;    /*!< (read-write) SP Interrupt Control */
    const uint32_t reserved_padding1 = {};
    uint32_t SP_CPU_REQ;  /*!< (read-write) CPU SP Request */
    uint32_t SP_SYS_STAT; /*!< (read-write) SP System Status */
    const uint32_t reserved_padding2 = {};
    uint32_t SP_ROSC_CTRL; /*!< (read-write) SP ROSC Control */
    static constexpr std::size_t reserved_padding3_length = 8;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    uint32_t SP_PRIORITY_0_7;  /*!< (read-write) SP0~7 Priority */
    uint32_t SP_PRIORITY_8_15; /*!< (read-write) SP8~15 Priority */
    static constexpr std::size_t reserved_padding4_length = 46;
    const uint32_t reserved_padding4[reserved_padding4_length] = {};
    uint32_t SP_SSAR_SAVE_CTRL; /*!< (read-write) SP SSAR save control */
    static constexpr std::size_t reserved_padding5_length = 3;
    const uint32_t reserved_padding5[reserved_padding5_length] = {};
    uint32_t SP_LPCG_OFF_CTRL; /*!< (read-write) SP LPCG off control */
    static constexpr std::size_t reserved_padding6_length = 3;
    const uint32_t reserved_padding6[reserved_padding6_length] = {};
    uint32_t SP_GROUP_DOWN_CTRL; /*!< (read-write) SP group down control */
    static constexpr std::size_t reserved_padding7_length = 3;
    const uint32_t reserved_padding7[reserved_padding7_length] = {};
    uint32_t SP_ROOT_DOWN_CTRL; /*!< (read-write) SP root down control */
    static constexpr std::size_t reserved_padding8_length = 3;
    const uint32_t reserved_padding8[reserved_padding8_length] = {};
    uint32_t SP_PLL_OFF_CTRL; /*!< (read-write) SP PLL off control */
    static constexpr std::size_t reserved_padding9_length = 3;
    const uint32_t reserved_padding9[reserved_padding9_length] = {};
    uint32_t SP_ISO_ON_CTRL; /*!< (read-write) SP ISO on control */
    static constexpr std::size_t reserved_padding10_length = 3;
    const uint32_t reserved_padding10[reserved_padding10_length] = {};
    uint32_t SP_RESET_EARLY_CTRL; /*!< (read-write) SP reset early control */
    static constexpr std::size_t reserved_padding11_length = 3;
    const uint32_t reserved_padding11[reserved_padding11_length] = {};
    uint32_t SP_POWER_OFF_CTRL; /*!< (read-write) SP power off control */
    static constexpr std::size_t reserved_padding12_length = 3;
    const uint32_t reserved_padding12[reserved_padding12_length] = {};
    uint32_t SP_BIAS_OFF_CTRL; /*!< (read-write) SP bias off control */
    static constexpr std::size_t reserved_padding13_length = 3;
    const uint32_t reserved_padding13[reserved_padding13_length] = {};
    uint32_t SP_BG_PLDO_OFF_CTRL; /*!< (read-write) SP bandgap and PLL_LDO off
                                     control */
    static constexpr std::size_t reserved_padding14_length = 3;
    const uint32_t reserved_padding14[reserved_padding14_length] = {};
    uint32_t SP_LDO_PRE_CTRL; /*!< (read-write) SP LDO pre control */
    static constexpr std::size_t reserved_padding15_length = 3;
    const uint32_t reserved_padding15[reserved_padding15_length] = {};
    uint32_t SP_DCDC_DOWN_CTRL; /*!< (read-write) SP DCDC down control */
    static constexpr std::size_t reserved_padding16_length = 19;
    const uint32_t reserved_padding16[reserved_padding16_length] = {};
    uint32_t SP_DCDC_UP_CTRL; /*!< (read-write) SP DCDC up control */
    static constexpr std::size_t reserved_padding17_length = 3;
    const uint32_t reserved_padding17[reserved_padding17_length] = {};
    uint32_t SP_LDO_POST_CTRL; /*!< (read-write) SP LDO post control */
    static constexpr std::size_t reserved_padding18_length = 3;
    const uint32_t reserved_padding18[reserved_padding18_length] = {};
    uint32_t SP_BG_PLDO_ON_CTRL; /*!< (read-write) SP bandgap and PLL_LDO on
                                    control */
    static constexpr std::size_t reserved_padding19_length = 3;
    const uint32_t reserved_padding19[reserved_padding19_length] = {};
    uint32_t SP_BIAS_ON_CTRL; /*!< (read-write) SP bias on control */
    static constexpr std::size_t reserved_padding20_length = 3;
    const uint32_t reserved_padding20[reserved_padding20_length] = {};
    uint32_t SP_POWER_ON_CTRL; /*!< (read-write) SP power on control */
    static constexpr std::size_t reserved_padding21_length = 3;
    const uint32_t reserved_padding21[reserved_padding21_length] = {};
    uint32_t SP_RESET_LATE_CTRL; /*!< (read-write) SP reset late control */
    static constexpr std::size_t reserved_padding22_length = 3;
    const uint32_t reserved_padding22[reserved_padding22_length] = {};
    uint32_t SP_ISO_OFF_CTRL; /*!< (read-write) SP ISO off control */
    static constexpr std::size_t reserved_padding23_length = 3;
    const uint32_t reserved_padding23[reserved_padding23_length] = {};
    uint32_t SP_PLL_ON_CTRL; /*!< (read-write) SP PLL on control */
    static constexpr std::size_t reserved_padding24_length = 3;
    const uint32_t reserved_padding24[reserved_padding24_length] = {};
    uint32_t SP_ROOT_UP_CTRL; /*!< (read-write) SP root up control */
    static constexpr std::size_t reserved_padding25_length = 3;
    const uint32_t reserved_padding25[reserved_padding25_length] = {};
    uint32_t SP_GROUP_UP_CTRL; /*!< (read-write) SP group up control */
    static constexpr std::size_t reserved_padding26_length = 3;
    const uint32_t reserved_padding26[reserved_padding26_length] = {};
    uint32_t SP_LPCG_ON_CTRL; /*!< (read-write) SP LPCG on control */
    static constexpr std::size_t reserved_padding27_length = 3;
    const uint32_t reserved_padding27[reserved_padding27_length] = {};
    uint32_t SP_SSAR_RESTORE_CTRL; /*!< (read-write) SP SSAR restore control */

    /* Methods. */

    /**
     * Get SP_AUTHEN_CTRL's LOCK_CFG bit.
     *
     * Configuration lock
     */
    inline bool get_SP_AUTHEN_CTRL_LOCK_CFG() volatile
    {
        return SP_AUTHEN_CTRL & (1u << 20u);
    }

    /**
     * Set SP_AUTHEN_CTRL's LOCK_CFG bit.
     *
     * Configuration lock
     */
    inline void set_SP_AUTHEN_CTRL_LOCK_CFG() volatile
    {
        SP_AUTHEN_CTRL |= 1u << 20u;
    }

    /**
     * Clear SP_AUTHEN_CTRL's LOCK_CFG bit.
     *
     * Configuration lock
     */
    inline void clear_SP_AUTHEN_CTRL_LOCK_CFG() volatile
    {
        SP_AUTHEN_CTRL &= ~(1u << 20u);
    }

    /**
     * Toggle SP_AUTHEN_CTRL's LOCK_CFG bit.
     *
     * Configuration lock
     */
    inline void toggle_SP_AUTHEN_CTRL_LOCK_CFG() volatile
    {
        SP_AUTHEN_CTRL ^= 1u << 20u;
    }

    /**
     * Get SP_AUTHEN_CTRL's LOCK_LIST bit.
     *
     * White list lock
     */
    inline bool get_SP_AUTHEN_CTRL_LOCK_LIST() volatile
    {
        return SP_AUTHEN_CTRL & (1u << 12u);
    }

    /**
     * Set SP_AUTHEN_CTRL's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void set_SP_AUTHEN_CTRL_LOCK_LIST() volatile
    {
        SP_AUTHEN_CTRL |= 1u << 12u;
    }

    /**
     * Clear SP_AUTHEN_CTRL's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void clear_SP_AUTHEN_CTRL_LOCK_LIST() volatile
    {
        SP_AUTHEN_CTRL &= ~(1u << 12u);
    }

    /**
     * Toggle SP_AUTHEN_CTRL's LOCK_LIST bit.
     *
     * White list lock
     */
    inline void toggle_SP_AUTHEN_CTRL_LOCK_LIST() volatile
    {
        SP_AUTHEN_CTRL ^= 1u << 12u;
    }

    /**
     * Get SP_AUTHEN_CTRL's WHITE_LIST field.
     *
     * Domain ID white list
     */
    inline uint8_t get_SP_AUTHEN_CTRL_WHITE_LIST() volatile
    {
        return (SP_AUTHEN_CTRL >> 8u) & 0b1111u;
    }

    /**
     * Set SP_AUTHEN_CTRL's WHITE_LIST field.
     *
     * Domain ID white list
     */
    inline void set_SP_AUTHEN_CTRL_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = SP_AUTHEN_CTRL;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        SP_AUTHEN_CTRL = curr;
    }

    /**
     * Get SP_AUTHEN_CTRL's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline bool get_SP_AUTHEN_CTRL_LOCK_SETTING() volatile
    {
        return SP_AUTHEN_CTRL & (1u << 4u);
    }

    /**
     * Set SP_AUTHEN_CTRL's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void set_SP_AUTHEN_CTRL_LOCK_SETTING() volatile
    {
        SP_AUTHEN_CTRL |= 1u << 4u;
    }

    /**
     * Clear SP_AUTHEN_CTRL's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void clear_SP_AUTHEN_CTRL_LOCK_SETTING() volatile
    {
        SP_AUTHEN_CTRL &= ~(1u << 4u);
    }

    /**
     * Toggle SP_AUTHEN_CTRL's LOCK_SETTING bit.
     *
     * Lock NONSECURE and USER
     */
    inline void toggle_SP_AUTHEN_CTRL_LOCK_SETTING() volatile
    {
        SP_AUTHEN_CTRL ^= 1u << 4u;
    }

    /**
     * Get SP_AUTHEN_CTRL's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline bool get_SP_AUTHEN_CTRL_NONSECURE() volatile
    {
        return SP_AUTHEN_CTRL & (1u << 1u);
    }

    /**
     * Set SP_AUTHEN_CTRL's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void set_SP_AUTHEN_CTRL_NONSECURE() volatile
    {
        SP_AUTHEN_CTRL |= 1u << 1u;
    }

    /**
     * Clear SP_AUTHEN_CTRL's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void clear_SP_AUTHEN_CTRL_NONSECURE() volatile
    {
        SP_AUTHEN_CTRL &= ~(1u << 1u);
    }

    /**
     * Toggle SP_AUTHEN_CTRL's NONSECURE bit.
     *
     * Allow non-secure mode access
     */
    inline void toggle_SP_AUTHEN_CTRL_NONSECURE() volatile
    {
        SP_AUTHEN_CTRL ^= 1u << 1u;
    }

    /**
     * Get SP_AUTHEN_CTRL's USER bit.
     *
     * Allow user mode access
     */
    inline bool get_SP_AUTHEN_CTRL_USER() volatile
    {
        return SP_AUTHEN_CTRL & (1u << 0u);
    }

    /**
     * Set SP_AUTHEN_CTRL's USER bit.
     *
     * Allow user mode access
     */
    inline void set_SP_AUTHEN_CTRL_USER() volatile
    {
        SP_AUTHEN_CTRL |= 1u << 0u;
    }

    /**
     * Clear SP_AUTHEN_CTRL's USER bit.
     *
     * Allow user mode access
     */
    inline void clear_SP_AUTHEN_CTRL_USER() volatile
    {
        SP_AUTHEN_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle SP_AUTHEN_CTRL's USER bit.
     *
     * Allow user mode access
     */
    inline void toggle_SP_AUTHEN_CTRL_USER() volatile
    {
        SP_AUTHEN_CTRL ^= 1u << 0u;
    }

    /**
     * Get all of SP_AUTHEN_CTRL's bit fields.
     *
     * (read-write) SP Authentication Control
     */
    inline void get_SP_AUTHEN_CTRL(bool &LOCK_CFG, bool &LOCK_LIST,
                                   uint8_t &WHITE_LIST, bool &LOCK_SETTING,
                                   bool &NONSECURE, bool &USER) volatile
    {
        uint32_t curr = SP_AUTHEN_CTRL;

        LOCK_CFG = curr & (1u << 20u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_SETTING = curr & (1u << 4u);
        NONSECURE = curr & (1u << 1u);
        USER = curr & (1u << 0u);
    }

    /**
     * Set all of SP_AUTHEN_CTRL's bit fields.
     *
     * (read-write) SP Authentication Control
     */
    inline void set_SP_AUTHEN_CTRL(bool LOCK_CFG, bool LOCK_LIST,
                                   uint8_t WHITE_LIST, bool LOCK_SETTING,
                                   bool NONSECURE, bool USER) volatile
    {
        uint32_t curr = SP_AUTHEN_CTRL;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_CFG & 0b1u) << 20u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_SETTING & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (NONSECURE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (USER & 0b1u) << 0u;

        SP_AUTHEN_CTRL = curr;
    }

    /**
     * Get SP_INT_CTRL's NO_ALLOWED_SP_INT bit.
     *
     * no_allowed_set_point interrupt
     */
    inline bool get_SP_INT_CTRL_NO_ALLOWED_SP_INT() volatile
    {
        return SP_INT_CTRL & (1u << 1u);
    }

    /**
     * Set SP_INT_CTRL's NO_ALLOWED_SP_INT bit.
     *
     * no_allowed_set_point interrupt
     */
    inline void set_SP_INT_CTRL_NO_ALLOWED_SP_INT() volatile
    {
        SP_INT_CTRL |= 1u << 1u;
    }

    /**
     * Clear SP_INT_CTRL's NO_ALLOWED_SP_INT bit.
     *
     * no_allowed_set_point interrupt
     */
    inline void clear_SP_INT_CTRL_NO_ALLOWED_SP_INT() volatile
    {
        SP_INT_CTRL &= ~(1u << 1u);
    }

    /**
     * Toggle SP_INT_CTRL's NO_ALLOWED_SP_INT bit.
     *
     * no_allowed_set_point interrupt
     */
    inline void toggle_SP_INT_CTRL_NO_ALLOWED_SP_INT() volatile
    {
        SP_INT_CTRL ^= 1u << 1u;
    }

    /**
     * Get SP_INT_CTRL's NO_ALLOWED_SP_INT_EN bit.
     *
     * no_allowed_set_point interrupt enable
     */
    inline bool get_SP_INT_CTRL_NO_ALLOWED_SP_INT_EN() volatile
    {
        return SP_INT_CTRL & (1u << 0u);
    }

    /**
     * Set SP_INT_CTRL's NO_ALLOWED_SP_INT_EN bit.
     *
     * no_allowed_set_point interrupt enable
     */
    inline void set_SP_INT_CTRL_NO_ALLOWED_SP_INT_EN() volatile
    {
        SP_INT_CTRL |= 1u << 0u;
    }

    /**
     * Clear SP_INT_CTRL's NO_ALLOWED_SP_INT_EN bit.
     *
     * no_allowed_set_point interrupt enable
     */
    inline void clear_SP_INT_CTRL_NO_ALLOWED_SP_INT_EN() volatile
    {
        SP_INT_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle SP_INT_CTRL's NO_ALLOWED_SP_INT_EN bit.
     *
     * no_allowed_set_point interrupt enable
     */
    inline void toggle_SP_INT_CTRL_NO_ALLOWED_SP_INT_EN() volatile
    {
        SP_INT_CTRL ^= 1u << 0u;
    }

    /**
     * Get all of SP_INT_CTRL's bit fields.
     *
     * (read-write) SP Interrupt Control
     */
    inline void get_SP_INT_CTRL(bool &NO_ALLOWED_SP_INT,
                                bool &NO_ALLOWED_SP_INT_EN) volatile
    {
        uint32_t curr = SP_INT_CTRL;

        NO_ALLOWED_SP_INT = curr & (1u << 1u);
        NO_ALLOWED_SP_INT_EN = curr & (1u << 0u);
    }

    /**
     * Set all of SP_INT_CTRL's bit fields.
     *
     * (read-write) SP Interrupt Control
     */
    inline void set_SP_INT_CTRL(bool NO_ALLOWED_SP_INT,
                                bool NO_ALLOWED_SP_INT_EN) volatile
    {
        uint32_t curr = SP_INT_CTRL;

        curr &= ~(0b1u << 1u);
        curr |= (NO_ALLOWED_SP_INT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (NO_ALLOWED_SP_INT_EN & 0b1u) << 0u;

        SP_INT_CTRL = curr;
    }

    /**
     * Get SP_CPU_REQ's SP_ACCEPTED_CPU3 field.
     *
     * CPU3 Setpoint accepted by SP controller
     */
    inline uint8_t get_SP_CPU_REQ_SP_ACCEPTED_CPU3() volatile
    {
        return (SP_CPU_REQ >> 28u) & 0b1111u;
    }

    /**
     * Get SP_CPU_REQ's SP_ACCEPTED_CPU2 field.
     *
     * CPU2 Setpoint accepted by SP controller
     */
    inline uint8_t get_SP_CPU_REQ_SP_ACCEPTED_CPU2() volatile
    {
        return (SP_CPU_REQ >> 24u) & 0b1111u;
    }

    /**
     * Get SP_CPU_REQ's SP_ACCEPTED_CPU1 field.
     *
     * CPU1 Setpoint accepted by SP controller
     */
    inline uint8_t get_SP_CPU_REQ_SP_ACCEPTED_CPU1() volatile
    {
        return (SP_CPU_REQ >> 20u) & 0b1111u;
    }

    /**
     * Get SP_CPU_REQ's SP_ACCEPTED_CPU0 field.
     *
     * CPU0 Setpoint accepted by SP controller
     */
    inline uint8_t get_SP_CPU_REQ_SP_ACCEPTED_CPU0() volatile
    {
        return (SP_CPU_REQ >> 16u) & 0b1111u;
    }

    /**
     * Get SP_CPU_REQ's SP_REQ_CPU3 field.
     *
     * Setpoint requested by CPU3
     */
    inline uint8_t get_SP_CPU_REQ_SP_REQ_CPU3() volatile
    {
        return (SP_CPU_REQ >> 12u) & 0b1111u;
    }

    /**
     * Get SP_CPU_REQ's SP_REQ_CPU2 field.
     *
     * Setpoint requested by CPU2
     */
    inline uint8_t get_SP_CPU_REQ_SP_REQ_CPU2() volatile
    {
        return (SP_CPU_REQ >> 8u) & 0b1111u;
    }

    /**
     * Get SP_CPU_REQ's SP_REQ_CPU1 field.
     *
     * Setpoint requested by CPU1
     */
    inline uint8_t get_SP_CPU_REQ_SP_REQ_CPU1() volatile
    {
        return (SP_CPU_REQ >> 4u) & 0b1111u;
    }

    /**
     * Get SP_CPU_REQ's SP_REQ_CPU0 field.
     *
     * Setpoint requested by CPU0
     */
    inline uint8_t get_SP_CPU_REQ_SP_REQ_CPU0() volatile
    {
        return (SP_CPU_REQ >> 0u) & 0b1111u;
    }

    /**
     * Get all of SP_CPU_REQ's bit fields.
     *
     * (read-write) CPU SP Request
     */
    inline void get_SP_CPU_REQ(uint8_t &SP_ACCEPTED_CPU3,
                               uint8_t &SP_ACCEPTED_CPU2,
                               uint8_t &SP_ACCEPTED_CPU1,
                               uint8_t &SP_ACCEPTED_CPU0, uint8_t &SP_REQ_CPU3,
                               uint8_t &SP_REQ_CPU2, uint8_t &SP_REQ_CPU1,
                               uint8_t &SP_REQ_CPU0) volatile
    {
        uint32_t curr = SP_CPU_REQ;

        SP_ACCEPTED_CPU3 = (curr >> 28u) & 0b1111u;
        SP_ACCEPTED_CPU2 = (curr >> 24u) & 0b1111u;
        SP_ACCEPTED_CPU1 = (curr >> 20u) & 0b1111u;
        SP_ACCEPTED_CPU0 = (curr >> 16u) & 0b1111u;
        SP_REQ_CPU3 = (curr >> 12u) & 0b1111u;
        SP_REQ_CPU2 = (curr >> 8u) & 0b1111u;
        SP_REQ_CPU1 = (curr >> 4u) & 0b1111u;
        SP_REQ_CPU0 = (curr >> 0u) & 0b1111u;
    }

    /**
     * Get SP_SYS_STAT's SYS_SP_PREVIOUS field.
     *
     * Previous Setpoint, only valid when not SP trans busy
     */
    inline uint8_t get_SP_SYS_STAT_SYS_SP_PREVIOUS() volatile
    {
        return (SP_SYS_STAT >> 24u) & 0b1111u;
    }

    /**
     * Get SP_SYS_STAT's SYS_SP_CURRENT field.
     *
     * Current Setpoint, only valid when not SP trans busy
     */
    inline uint8_t get_SP_SYS_STAT_SYS_SP_CURRENT() volatile
    {
        return (SP_SYS_STAT >> 20u) & 0b1111u;
    }

    /**
     * Get SP_SYS_STAT's SYS_SP_TARGET field.
     *
     * The Setpoint chosen as the target setpoint
     */
    inline uint8_t get_SP_SYS_STAT_SYS_SP_TARGET() volatile
    {
        return (SP_SYS_STAT >> 16u) & 0b1111u;
    }

    /**
     * Get SP_SYS_STAT's SYS_SP_ALLOWED field.
     *
     * Allowed Setpoints by all current CPU Setpoint requests
     */
    inline uint16_t get_SP_SYS_STAT_SYS_SP_ALLOWED() volatile
    {
        return (SP_SYS_STAT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get all of SP_SYS_STAT's bit fields.
     *
     * (read-write) SP System Status
     */
    inline void get_SP_SYS_STAT(uint8_t &SYS_SP_PREVIOUS,
                                uint8_t &SYS_SP_CURRENT,
                                uint8_t &SYS_SP_TARGET,
                                uint16_t &SYS_SP_ALLOWED) volatile
    {
        uint32_t curr = SP_SYS_STAT;

        SYS_SP_PREVIOUS = (curr >> 24u) & 0b1111u;
        SYS_SP_CURRENT = (curr >> 20u) & 0b1111u;
        SYS_SP_TARGET = (curr >> 16u) & 0b1111u;
        SYS_SP_ALLOWED = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get SP_ROSC_CTRL's SP_ALLOW_ROSC_OFF field.
     *
     * Allow shutting off the ROSC
     */
    inline uint16_t get_SP_ROSC_CTRL_SP_ALLOW_ROSC_OFF() volatile
    {
        return (SP_ROSC_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_ROSC_CTRL's SP_ALLOW_ROSC_OFF field.
     *
     * Allow shutting off the ROSC
     */
    inline void set_SP_ROSC_CTRL_SP_ALLOW_ROSC_OFF(uint16_t value) volatile
    {
        uint32_t curr = SP_ROSC_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_ROSC_CTRL = curr;
    }

    /**
     * Get SP_PRIORITY_0_7's SYS_SP7_PRIORITY field.
     *
     * priority of Setpoint 7
     */
    inline uint8_t get_SP_PRIORITY_0_7_SYS_SP7_PRIORITY() volatile
    {
        return (SP_PRIORITY_0_7 >> 28u) & 0b1111u;
    }

    /**
     * Set SP_PRIORITY_0_7's SYS_SP7_PRIORITY field.
     *
     * priority of Setpoint 7
     */
    inline void set_SP_PRIORITY_0_7_SYS_SP7_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = SP_PRIORITY_0_7;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        SP_PRIORITY_0_7 = curr;
    }

    /**
     * Get SP_PRIORITY_0_7's SYS_SP6_PRIORITY field.
     *
     * priority of Setpoint 6
     */
    inline uint8_t get_SP_PRIORITY_0_7_SYS_SP6_PRIORITY() volatile
    {
        return (SP_PRIORITY_0_7 >> 24u) & 0b1111u;
    }

    /**
     * Set SP_PRIORITY_0_7's SYS_SP6_PRIORITY field.
     *
     * priority of Setpoint 6
     */
    inline void set_SP_PRIORITY_0_7_SYS_SP6_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = SP_PRIORITY_0_7;

        curr &= ~(0b1111u << 24u);
        curr |= (value & 0b1111u) << 24u;

        SP_PRIORITY_0_7 = curr;
    }

    /**
     * Get SP_PRIORITY_0_7's SYS_SP5_PRIORITY field.
     *
     * priority of Setpoint 5
     */
    inline uint8_t get_SP_PRIORITY_0_7_SYS_SP5_PRIORITY() volatile
    {
        return (SP_PRIORITY_0_7 >> 20u) & 0b1111u;
    }

    /**
     * Set SP_PRIORITY_0_7's SYS_SP5_PRIORITY field.
     *
     * priority of Setpoint 5
     */
    inline void set_SP_PRIORITY_0_7_SYS_SP5_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = SP_PRIORITY_0_7;

        curr &= ~(0b1111u << 20u);
        curr |= (value & 0b1111u) << 20u;

        SP_PRIORITY_0_7 = curr;
    }

    /**
     * Get SP_PRIORITY_0_7's SYS_SP4_PRIORITY field.
     *
     * priority of Setpoint 4
     */
    inline uint8_t get_SP_PRIORITY_0_7_SYS_SP4_PRIORITY() volatile
    {
        return (SP_PRIORITY_0_7 >> 16u) & 0b1111u;
    }

    /**
     * Set SP_PRIORITY_0_7's SYS_SP4_PRIORITY field.
     *
     * priority of Setpoint 4
     */
    inline void set_SP_PRIORITY_0_7_SYS_SP4_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = SP_PRIORITY_0_7;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        SP_PRIORITY_0_7 = curr;
    }

    /**
     * Get SP_PRIORITY_0_7's SYS_SP3_PRIORITY field.
     *
     * priority of Setpoint 3
     */
    inline uint8_t get_SP_PRIORITY_0_7_SYS_SP3_PRIORITY() volatile
    {
        return (SP_PRIORITY_0_7 >> 12u) & 0b1111u;
    }

    /**
     * Set SP_PRIORITY_0_7's SYS_SP3_PRIORITY field.
     *
     * priority of Setpoint 3
     */
    inline void set_SP_PRIORITY_0_7_SYS_SP3_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = SP_PRIORITY_0_7;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        SP_PRIORITY_0_7 = curr;
    }

    /**
     * Get SP_PRIORITY_0_7's SYS_SP2_PRIORITY field.
     *
     * priority of Setpoint 2
     */
    inline uint8_t get_SP_PRIORITY_0_7_SYS_SP2_PRIORITY() volatile
    {
        return (SP_PRIORITY_0_7 >> 8u) & 0b1111u;
    }

    /**
     * Set SP_PRIORITY_0_7's SYS_SP2_PRIORITY field.
     *
     * priority of Setpoint 2
     */
    inline void set_SP_PRIORITY_0_7_SYS_SP2_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = SP_PRIORITY_0_7;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        SP_PRIORITY_0_7 = curr;
    }

    /**
     * Get SP_PRIORITY_0_7's SYS_SP1_PRIORITY field.
     *
     * priority of Setpoint 1
     */
    inline uint8_t get_SP_PRIORITY_0_7_SYS_SP1_PRIORITY() volatile
    {
        return (SP_PRIORITY_0_7 >> 4u) & 0b1111u;
    }

    /**
     * Set SP_PRIORITY_0_7's SYS_SP1_PRIORITY field.
     *
     * priority of Setpoint 1
     */
    inline void set_SP_PRIORITY_0_7_SYS_SP1_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = SP_PRIORITY_0_7;

        curr &= ~(0b1111u << 4u);
        curr |= (value & 0b1111u) << 4u;

        SP_PRIORITY_0_7 = curr;
    }

    /**
     * Get SP_PRIORITY_0_7's SYS_SP0_PRIORITY field.
     *
     * priority of Setpoint 0
     */
    inline uint8_t get_SP_PRIORITY_0_7_SYS_SP0_PRIORITY() volatile
    {
        return (SP_PRIORITY_0_7 >> 0u) & 0b1111u;
    }

    /**
     * Set SP_PRIORITY_0_7's SYS_SP0_PRIORITY field.
     *
     * priority of Setpoint 0
     */
    inline void set_SP_PRIORITY_0_7_SYS_SP0_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = SP_PRIORITY_0_7;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        SP_PRIORITY_0_7 = curr;
    }

    /**
     * Get all of SP_PRIORITY_0_7's bit fields.
     *
     * (read-write) SP0~7 Priority
     */
    inline void get_SP_PRIORITY_0_7(
        uint8_t &SYS_SP7_PRIORITY, uint8_t &SYS_SP6_PRIORITY,
        uint8_t &SYS_SP5_PRIORITY, uint8_t &SYS_SP4_PRIORITY,
        uint8_t &SYS_SP3_PRIORITY, uint8_t &SYS_SP2_PRIORITY,
        uint8_t &SYS_SP1_PRIORITY, uint8_t &SYS_SP0_PRIORITY) volatile
    {
        uint32_t curr = SP_PRIORITY_0_7;

        SYS_SP7_PRIORITY = (curr >> 28u) & 0b1111u;
        SYS_SP6_PRIORITY = (curr >> 24u) & 0b1111u;
        SYS_SP5_PRIORITY = (curr >> 20u) & 0b1111u;
        SYS_SP4_PRIORITY = (curr >> 16u) & 0b1111u;
        SYS_SP3_PRIORITY = (curr >> 12u) & 0b1111u;
        SYS_SP2_PRIORITY = (curr >> 8u) & 0b1111u;
        SYS_SP1_PRIORITY = (curr >> 4u) & 0b1111u;
        SYS_SP0_PRIORITY = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of SP_PRIORITY_0_7's bit fields.
     *
     * (read-write) SP0~7 Priority
     */
    inline void set_SP_PRIORITY_0_7(
        uint8_t SYS_SP7_PRIORITY, uint8_t SYS_SP6_PRIORITY,
        uint8_t SYS_SP5_PRIORITY, uint8_t SYS_SP4_PRIORITY,
        uint8_t SYS_SP3_PRIORITY, uint8_t SYS_SP2_PRIORITY,
        uint8_t SYS_SP1_PRIORITY, uint8_t SYS_SP0_PRIORITY) volatile
    {
        uint32_t curr = SP_PRIORITY_0_7;

        curr &= ~(0b1111u << 28u);
        curr |= (SYS_SP7_PRIORITY & 0b1111u) << 28u;
        curr &= ~(0b1111u << 24u);
        curr |= (SYS_SP6_PRIORITY & 0b1111u) << 24u;
        curr &= ~(0b1111u << 20u);
        curr |= (SYS_SP5_PRIORITY & 0b1111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (SYS_SP4_PRIORITY & 0b1111u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (SYS_SP3_PRIORITY & 0b1111u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (SYS_SP2_PRIORITY & 0b1111u) << 8u;
        curr &= ~(0b1111u << 4u);
        curr |= (SYS_SP1_PRIORITY & 0b1111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (SYS_SP0_PRIORITY & 0b1111u) << 0u;

        SP_PRIORITY_0_7 = curr;
    }

    /**
     * Get SP_PRIORITY_8_15's SYS_SP15_PRIORITY field.
     *
     * priority of Setpoint 15
     */
    inline uint8_t get_SP_PRIORITY_8_15_SYS_SP15_PRIORITY() volatile
    {
        return (SP_PRIORITY_8_15 >> 28u) & 0b1111u;
    }

    /**
     * Set SP_PRIORITY_8_15's SYS_SP15_PRIORITY field.
     *
     * priority of Setpoint 15
     */
    inline void set_SP_PRIORITY_8_15_SYS_SP15_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = SP_PRIORITY_8_15;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        SP_PRIORITY_8_15 = curr;
    }

    /**
     * Get SP_PRIORITY_8_15's SYS_SP14_PRIORITY field.
     *
     * priority of Setpoint 14
     */
    inline uint8_t get_SP_PRIORITY_8_15_SYS_SP14_PRIORITY() volatile
    {
        return (SP_PRIORITY_8_15 >> 24u) & 0b1111u;
    }

    /**
     * Set SP_PRIORITY_8_15's SYS_SP14_PRIORITY field.
     *
     * priority of Setpoint 14
     */
    inline void set_SP_PRIORITY_8_15_SYS_SP14_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = SP_PRIORITY_8_15;

        curr &= ~(0b1111u << 24u);
        curr |= (value & 0b1111u) << 24u;

        SP_PRIORITY_8_15 = curr;
    }

    /**
     * Get SP_PRIORITY_8_15's SYS_SP13_PRIORITY field.
     *
     * priority of Setpoint 13
     */
    inline uint8_t get_SP_PRIORITY_8_15_SYS_SP13_PRIORITY() volatile
    {
        return (SP_PRIORITY_8_15 >> 20u) & 0b1111u;
    }

    /**
     * Set SP_PRIORITY_8_15's SYS_SP13_PRIORITY field.
     *
     * priority of Setpoint 13
     */
    inline void set_SP_PRIORITY_8_15_SYS_SP13_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = SP_PRIORITY_8_15;

        curr &= ~(0b1111u << 20u);
        curr |= (value & 0b1111u) << 20u;

        SP_PRIORITY_8_15 = curr;
    }

    /**
     * Get SP_PRIORITY_8_15's SYS_SP12_PRIORITY field.
     *
     * priority of Setpoint 12
     */
    inline uint8_t get_SP_PRIORITY_8_15_SYS_SP12_PRIORITY() volatile
    {
        return (SP_PRIORITY_8_15 >> 16u) & 0b1111u;
    }

    /**
     * Set SP_PRIORITY_8_15's SYS_SP12_PRIORITY field.
     *
     * priority of Setpoint 12
     */
    inline void set_SP_PRIORITY_8_15_SYS_SP12_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = SP_PRIORITY_8_15;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        SP_PRIORITY_8_15 = curr;
    }

    /**
     * Get SP_PRIORITY_8_15's SYS_SP11_PRIORITY field.
     *
     * priority of Setpoint 11
     */
    inline uint8_t get_SP_PRIORITY_8_15_SYS_SP11_PRIORITY() volatile
    {
        return (SP_PRIORITY_8_15 >> 12u) & 0b1111u;
    }

    /**
     * Set SP_PRIORITY_8_15's SYS_SP11_PRIORITY field.
     *
     * priority of Setpoint 11
     */
    inline void set_SP_PRIORITY_8_15_SYS_SP11_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = SP_PRIORITY_8_15;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        SP_PRIORITY_8_15 = curr;
    }

    /**
     * Get SP_PRIORITY_8_15's SYS_SP10_PRIORITY field.
     *
     * priority of Setpoint 10
     */
    inline uint8_t get_SP_PRIORITY_8_15_SYS_SP10_PRIORITY() volatile
    {
        return (SP_PRIORITY_8_15 >> 8u) & 0b1111u;
    }

    /**
     * Set SP_PRIORITY_8_15's SYS_SP10_PRIORITY field.
     *
     * priority of Setpoint 10
     */
    inline void set_SP_PRIORITY_8_15_SYS_SP10_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = SP_PRIORITY_8_15;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        SP_PRIORITY_8_15 = curr;
    }

    /**
     * Get SP_PRIORITY_8_15's SYS_SP9_PRIORITY field.
     *
     * priority of Setpoint 9
     */
    inline uint8_t get_SP_PRIORITY_8_15_SYS_SP9_PRIORITY() volatile
    {
        return (SP_PRIORITY_8_15 >> 4u) & 0b1111u;
    }

    /**
     * Set SP_PRIORITY_8_15's SYS_SP9_PRIORITY field.
     *
     * priority of Setpoint 9
     */
    inline void set_SP_PRIORITY_8_15_SYS_SP9_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = SP_PRIORITY_8_15;

        curr &= ~(0b1111u << 4u);
        curr |= (value & 0b1111u) << 4u;

        SP_PRIORITY_8_15 = curr;
    }

    /**
     * Get SP_PRIORITY_8_15's SYS_SP8_PRIORITY field.
     *
     * priority of Setpoint 8
     */
    inline uint8_t get_SP_PRIORITY_8_15_SYS_SP8_PRIORITY() volatile
    {
        return (SP_PRIORITY_8_15 >> 0u) & 0b1111u;
    }

    /**
     * Set SP_PRIORITY_8_15's SYS_SP8_PRIORITY field.
     *
     * priority of Setpoint 8
     */
    inline void set_SP_PRIORITY_8_15_SYS_SP8_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = SP_PRIORITY_8_15;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        SP_PRIORITY_8_15 = curr;
    }

    /**
     * Get all of SP_PRIORITY_8_15's bit fields.
     *
     * (read-write) SP8~15 Priority
     */
    inline void get_SP_PRIORITY_8_15(
        uint8_t &SYS_SP15_PRIORITY, uint8_t &SYS_SP14_PRIORITY,
        uint8_t &SYS_SP13_PRIORITY, uint8_t &SYS_SP12_PRIORITY,
        uint8_t &SYS_SP11_PRIORITY, uint8_t &SYS_SP10_PRIORITY,
        uint8_t &SYS_SP9_PRIORITY, uint8_t &SYS_SP8_PRIORITY) volatile
    {
        uint32_t curr = SP_PRIORITY_8_15;

        SYS_SP15_PRIORITY = (curr >> 28u) & 0b1111u;
        SYS_SP14_PRIORITY = (curr >> 24u) & 0b1111u;
        SYS_SP13_PRIORITY = (curr >> 20u) & 0b1111u;
        SYS_SP12_PRIORITY = (curr >> 16u) & 0b1111u;
        SYS_SP11_PRIORITY = (curr >> 12u) & 0b1111u;
        SYS_SP10_PRIORITY = (curr >> 8u) & 0b1111u;
        SYS_SP9_PRIORITY = (curr >> 4u) & 0b1111u;
        SYS_SP8_PRIORITY = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of SP_PRIORITY_8_15's bit fields.
     *
     * (read-write) SP8~15 Priority
     */
    inline void set_SP_PRIORITY_8_15(
        uint8_t SYS_SP15_PRIORITY, uint8_t SYS_SP14_PRIORITY,
        uint8_t SYS_SP13_PRIORITY, uint8_t SYS_SP12_PRIORITY,
        uint8_t SYS_SP11_PRIORITY, uint8_t SYS_SP10_PRIORITY,
        uint8_t SYS_SP9_PRIORITY, uint8_t SYS_SP8_PRIORITY) volatile
    {
        uint32_t curr = SP_PRIORITY_8_15;

        curr &= ~(0b1111u << 28u);
        curr |= (SYS_SP15_PRIORITY & 0b1111u) << 28u;
        curr &= ~(0b1111u << 24u);
        curr |= (SYS_SP14_PRIORITY & 0b1111u) << 24u;
        curr &= ~(0b1111u << 20u);
        curr |= (SYS_SP13_PRIORITY & 0b1111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (SYS_SP12_PRIORITY & 0b1111u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (SYS_SP11_PRIORITY & 0b1111u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (SYS_SP10_PRIORITY & 0b1111u) << 8u;
        curr &= ~(0b1111u << 4u);
        curr |= (SYS_SP9_PRIORITY & 0b1111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (SYS_SP8_PRIORITY & 0b1111u) << 0u;

        SP_PRIORITY_8_15 = curr;
    }

    /**
     * Get SP_SSAR_SAVE_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_SSAR_SAVE_CTRL_DISABLE() volatile
    {
        return SP_SSAR_SAVE_CTRL & (1u << 31u);
    }

    /**
     * Set SP_SSAR_SAVE_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_SSAR_SAVE_CTRL_DISABLE() volatile
    {
        SP_SSAR_SAVE_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_SSAR_SAVE_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_SSAR_SAVE_CTRL_DISABLE() volatile
    {
        SP_SSAR_SAVE_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_SSAR_SAVE_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_SSAR_SAVE_CTRL_DISABLE() volatile
    {
        SP_SSAR_SAVE_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_SSAR_SAVE_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_SSAR_SAVE_CTRL_CNT_MODE
    get_SP_SSAR_SAVE_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_SSAR_SAVE_CTRL_CNT_MODE(
            (SP_SSAR_SAVE_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_SSAR_SAVE_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_SSAR_SAVE_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_SSAR_SAVE_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_SSAR_SAVE_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_SSAR_SAVE_CTRL = curr;
    }

    /**
     * Get SP_SSAR_SAVE_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_SSAR_SAVE_CTRL_STEP_CNT() volatile
    {
        return (SP_SSAR_SAVE_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_SSAR_SAVE_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_SSAR_SAVE_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_SSAR_SAVE_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_SSAR_SAVE_CTRL = curr;
    }

    /**
     * Get all of SP_SSAR_SAVE_CTRL's bit fields.
     *
     * (read-write) SP SSAR save control
     */
    inline void get_SP_SSAR_SAVE_CTRL(
        bool &DISABLE, GPC_SET_POINT_CTRL_SP_SSAR_SAVE_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_SSAR_SAVE_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE = GPC_SET_POINT_CTRL_SP_SSAR_SAVE_CTRL_CNT_MODE(
            (curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_SSAR_SAVE_CTRL's bit fields.
     *
     * (read-write) SP SSAR save control
     */
    inline void set_SP_SSAR_SAVE_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_SSAR_SAVE_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_SSAR_SAVE_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_SSAR_SAVE_CTRL = curr;
    }

    /**
     * Get SP_LPCG_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_LPCG_OFF_CTRL_DISABLE() volatile
    {
        return SP_LPCG_OFF_CTRL & (1u << 31u);
    }

    /**
     * Set SP_LPCG_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_LPCG_OFF_CTRL_DISABLE() volatile
    {
        SP_LPCG_OFF_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_LPCG_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_LPCG_OFF_CTRL_DISABLE() volatile
    {
        SP_LPCG_OFF_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_LPCG_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_LPCG_OFF_CTRL_DISABLE() volatile
    {
        SP_LPCG_OFF_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_LPCG_OFF_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_LPCG_OFF_CTRL_CNT_MODE
    get_SP_LPCG_OFF_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_LPCG_OFF_CTRL_CNT_MODE(
            (SP_LPCG_OFF_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_LPCG_OFF_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_LPCG_OFF_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_LPCG_OFF_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_LPCG_OFF_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_LPCG_OFF_CTRL = curr;
    }

    /**
     * Get SP_LPCG_OFF_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_LPCG_OFF_CTRL_STEP_CNT() volatile
    {
        return (SP_LPCG_OFF_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_LPCG_OFF_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_LPCG_OFF_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_LPCG_OFF_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_LPCG_OFF_CTRL = curr;
    }

    /**
     * Get all of SP_LPCG_OFF_CTRL's bit fields.
     *
     * (read-write) SP LPCG off control
     */
    inline void get_SP_LPCG_OFF_CTRL(
        bool &DISABLE, GPC_SET_POINT_CTRL_SP_LPCG_OFF_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_LPCG_OFF_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE = GPC_SET_POINT_CTRL_SP_LPCG_OFF_CTRL_CNT_MODE((curr >> 28u) &
                                                                0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_LPCG_OFF_CTRL's bit fields.
     *
     * (read-write) SP LPCG off control
     */
    inline void set_SP_LPCG_OFF_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_LPCG_OFF_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_LPCG_OFF_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_LPCG_OFF_CTRL = curr;
    }

    /**
     * Get SP_GROUP_DOWN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_GROUP_DOWN_CTRL_DISABLE() volatile
    {
        return SP_GROUP_DOWN_CTRL & (1u << 31u);
    }

    /**
     * Set SP_GROUP_DOWN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_GROUP_DOWN_CTRL_DISABLE() volatile
    {
        SP_GROUP_DOWN_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_GROUP_DOWN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_GROUP_DOWN_CTRL_DISABLE() volatile
    {
        SP_GROUP_DOWN_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_GROUP_DOWN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_GROUP_DOWN_CTRL_DISABLE() volatile
    {
        SP_GROUP_DOWN_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_GROUP_DOWN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_GROUP_DOWN_CTRL_CNT_MODE
    get_SP_GROUP_DOWN_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_GROUP_DOWN_CTRL_CNT_MODE(
            (SP_GROUP_DOWN_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_GROUP_DOWN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_GROUP_DOWN_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_GROUP_DOWN_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_GROUP_DOWN_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_GROUP_DOWN_CTRL = curr;
    }

    /**
     * Get SP_GROUP_DOWN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_GROUP_DOWN_CTRL_STEP_CNT() volatile
    {
        return (SP_GROUP_DOWN_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_GROUP_DOWN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_GROUP_DOWN_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_GROUP_DOWN_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_GROUP_DOWN_CTRL = curr;
    }

    /**
     * Get all of SP_GROUP_DOWN_CTRL's bit fields.
     *
     * (read-write) SP group down control
     */
    inline void get_SP_GROUP_DOWN_CTRL(
        bool &DISABLE,
        GPC_SET_POINT_CTRL_SP_GROUP_DOWN_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_GROUP_DOWN_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE = GPC_SET_POINT_CTRL_SP_GROUP_DOWN_CTRL_CNT_MODE(
            (curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_GROUP_DOWN_CTRL's bit fields.
     *
     * (read-write) SP group down control
     */
    inline void set_SP_GROUP_DOWN_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_GROUP_DOWN_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_GROUP_DOWN_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_GROUP_DOWN_CTRL = curr;
    }

    /**
     * Get SP_ROOT_DOWN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_ROOT_DOWN_CTRL_DISABLE() volatile
    {
        return SP_ROOT_DOWN_CTRL & (1u << 31u);
    }

    /**
     * Set SP_ROOT_DOWN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_ROOT_DOWN_CTRL_DISABLE() volatile
    {
        SP_ROOT_DOWN_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_ROOT_DOWN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_ROOT_DOWN_CTRL_DISABLE() volatile
    {
        SP_ROOT_DOWN_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_ROOT_DOWN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_ROOT_DOWN_CTRL_DISABLE() volatile
    {
        SP_ROOT_DOWN_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_ROOT_DOWN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_ROOT_DOWN_CTRL_CNT_MODE
    get_SP_ROOT_DOWN_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_ROOT_DOWN_CTRL_CNT_MODE(
            (SP_ROOT_DOWN_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_ROOT_DOWN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_ROOT_DOWN_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_ROOT_DOWN_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_ROOT_DOWN_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_ROOT_DOWN_CTRL = curr;
    }

    /**
     * Get SP_ROOT_DOWN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_ROOT_DOWN_CTRL_STEP_CNT() volatile
    {
        return (SP_ROOT_DOWN_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_ROOT_DOWN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_ROOT_DOWN_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_ROOT_DOWN_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_ROOT_DOWN_CTRL = curr;
    }

    /**
     * Get all of SP_ROOT_DOWN_CTRL's bit fields.
     *
     * (read-write) SP root down control
     */
    inline void get_SP_ROOT_DOWN_CTRL(
        bool &DISABLE, GPC_SET_POINT_CTRL_SP_ROOT_DOWN_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_ROOT_DOWN_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE = GPC_SET_POINT_CTRL_SP_ROOT_DOWN_CTRL_CNT_MODE(
            (curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_ROOT_DOWN_CTRL's bit fields.
     *
     * (read-write) SP root down control
     */
    inline void set_SP_ROOT_DOWN_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_ROOT_DOWN_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_ROOT_DOWN_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_ROOT_DOWN_CTRL = curr;
    }

    /**
     * Get SP_PLL_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_PLL_OFF_CTRL_DISABLE() volatile
    {
        return SP_PLL_OFF_CTRL & (1u << 31u);
    }

    /**
     * Set SP_PLL_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_PLL_OFF_CTRL_DISABLE() volatile
    {
        SP_PLL_OFF_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_PLL_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_PLL_OFF_CTRL_DISABLE() volatile
    {
        SP_PLL_OFF_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_PLL_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_PLL_OFF_CTRL_DISABLE() volatile
    {
        SP_PLL_OFF_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_PLL_OFF_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_PLL_OFF_CTRL_CNT_MODE
    get_SP_PLL_OFF_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_PLL_OFF_CTRL_CNT_MODE(
            (SP_PLL_OFF_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_PLL_OFF_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_PLL_OFF_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_PLL_OFF_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_PLL_OFF_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_PLL_OFF_CTRL = curr;
    }

    /**
     * Get SP_PLL_OFF_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_PLL_OFF_CTRL_STEP_CNT() volatile
    {
        return (SP_PLL_OFF_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_PLL_OFF_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_PLL_OFF_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_PLL_OFF_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_PLL_OFF_CTRL = curr;
    }

    /**
     * Get all of SP_PLL_OFF_CTRL's bit fields.
     *
     * (read-write) SP PLL off control
     */
    inline void get_SP_PLL_OFF_CTRL(
        bool &DISABLE, GPC_SET_POINT_CTRL_SP_PLL_OFF_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_PLL_OFF_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_SET_POINT_CTRL_SP_PLL_OFF_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_PLL_OFF_CTRL's bit fields.
     *
     * (read-write) SP PLL off control
     */
    inline void set_SP_PLL_OFF_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_PLL_OFF_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_PLL_OFF_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_PLL_OFF_CTRL = curr;
    }

    /**
     * Get SP_ISO_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_ISO_ON_CTRL_DISABLE() volatile
    {
        return SP_ISO_ON_CTRL & (1u << 31u);
    }

    /**
     * Set SP_ISO_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_ISO_ON_CTRL_DISABLE() volatile
    {
        SP_ISO_ON_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_ISO_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_ISO_ON_CTRL_DISABLE() volatile
    {
        SP_ISO_ON_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_ISO_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_ISO_ON_CTRL_DISABLE() volatile
    {
        SP_ISO_ON_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_ISO_ON_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_ISO_ON_CTRL_CNT_MODE
    get_SP_ISO_ON_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_ISO_ON_CTRL_CNT_MODE(
            (SP_ISO_ON_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_ISO_ON_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_ISO_ON_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_ISO_ON_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_ISO_ON_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_ISO_ON_CTRL = curr;
    }

    /**
     * Get SP_ISO_ON_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_ISO_ON_CTRL_STEP_CNT() volatile
    {
        return (SP_ISO_ON_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_ISO_ON_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_ISO_ON_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_ISO_ON_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_ISO_ON_CTRL = curr;
    }

    /**
     * Get all of SP_ISO_ON_CTRL's bit fields.
     *
     * (read-write) SP ISO on control
     */
    inline void get_SP_ISO_ON_CTRL(
        bool &DISABLE, GPC_SET_POINT_CTRL_SP_ISO_ON_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_ISO_ON_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_SET_POINT_CTRL_SP_ISO_ON_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_ISO_ON_CTRL's bit fields.
     *
     * (read-write) SP ISO on control
     */
    inline void set_SP_ISO_ON_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_ISO_ON_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_ISO_ON_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_ISO_ON_CTRL = curr;
    }

    /**
     * Get SP_RESET_EARLY_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_RESET_EARLY_CTRL_DISABLE() volatile
    {
        return SP_RESET_EARLY_CTRL & (1u << 31u);
    }

    /**
     * Set SP_RESET_EARLY_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_RESET_EARLY_CTRL_DISABLE() volatile
    {
        SP_RESET_EARLY_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_RESET_EARLY_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_RESET_EARLY_CTRL_DISABLE() volatile
    {
        SP_RESET_EARLY_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_RESET_EARLY_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_RESET_EARLY_CTRL_DISABLE() volatile
    {
        SP_RESET_EARLY_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_RESET_EARLY_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_RESET_EARLY_CTRL_CNT_MODE
    get_SP_RESET_EARLY_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_RESET_EARLY_CTRL_CNT_MODE(
            (SP_RESET_EARLY_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_RESET_EARLY_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_RESET_EARLY_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_RESET_EARLY_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_RESET_EARLY_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_RESET_EARLY_CTRL = curr;
    }

    /**
     * Get SP_RESET_EARLY_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_RESET_EARLY_CTRL_STEP_CNT() volatile
    {
        return (SP_RESET_EARLY_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_RESET_EARLY_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_RESET_EARLY_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_RESET_EARLY_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_RESET_EARLY_CTRL = curr;
    }

    /**
     * Get all of SP_RESET_EARLY_CTRL's bit fields.
     *
     * (read-write) SP reset early control
     */
    inline void get_SP_RESET_EARLY_CTRL(
        bool &DISABLE,
        GPC_SET_POINT_CTRL_SP_RESET_EARLY_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_RESET_EARLY_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE = GPC_SET_POINT_CTRL_SP_RESET_EARLY_CTRL_CNT_MODE(
            (curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_RESET_EARLY_CTRL's bit fields.
     *
     * (read-write) SP reset early control
     */
    inline void set_SP_RESET_EARLY_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_RESET_EARLY_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_RESET_EARLY_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_RESET_EARLY_CTRL = curr;
    }

    /**
     * Get SP_POWER_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_POWER_OFF_CTRL_DISABLE() volatile
    {
        return SP_POWER_OFF_CTRL & (1u << 31u);
    }

    /**
     * Set SP_POWER_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_POWER_OFF_CTRL_DISABLE() volatile
    {
        SP_POWER_OFF_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_POWER_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_POWER_OFF_CTRL_DISABLE() volatile
    {
        SP_POWER_OFF_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_POWER_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_POWER_OFF_CTRL_DISABLE() volatile
    {
        SP_POWER_OFF_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_POWER_OFF_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_POWER_OFF_CTRL_CNT_MODE
    get_SP_POWER_OFF_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_POWER_OFF_CTRL_CNT_MODE(
            (SP_POWER_OFF_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_POWER_OFF_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_POWER_OFF_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_POWER_OFF_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_POWER_OFF_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_POWER_OFF_CTRL = curr;
    }

    /**
     * Get SP_POWER_OFF_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_POWER_OFF_CTRL_STEP_CNT() volatile
    {
        return (SP_POWER_OFF_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_POWER_OFF_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_POWER_OFF_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_POWER_OFF_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_POWER_OFF_CTRL = curr;
    }

    /**
     * Get all of SP_POWER_OFF_CTRL's bit fields.
     *
     * (read-write) SP power off control
     */
    inline void get_SP_POWER_OFF_CTRL(
        bool &DISABLE, GPC_SET_POINT_CTRL_SP_POWER_OFF_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_POWER_OFF_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE = GPC_SET_POINT_CTRL_SP_POWER_OFF_CTRL_CNT_MODE(
            (curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_POWER_OFF_CTRL's bit fields.
     *
     * (read-write) SP power off control
     */
    inline void set_SP_POWER_OFF_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_POWER_OFF_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_POWER_OFF_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_POWER_OFF_CTRL = curr;
    }

    /**
     * Get SP_BIAS_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_BIAS_OFF_CTRL_DISABLE() volatile
    {
        return SP_BIAS_OFF_CTRL & (1u << 31u);
    }

    /**
     * Set SP_BIAS_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_BIAS_OFF_CTRL_DISABLE() volatile
    {
        SP_BIAS_OFF_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_BIAS_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_BIAS_OFF_CTRL_DISABLE() volatile
    {
        SP_BIAS_OFF_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_BIAS_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_BIAS_OFF_CTRL_DISABLE() volatile
    {
        SP_BIAS_OFF_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_BIAS_OFF_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_BIAS_OFF_CTRL_CNT_MODE
    get_SP_BIAS_OFF_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_BIAS_OFF_CTRL_CNT_MODE(
            (SP_BIAS_OFF_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_BIAS_OFF_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_BIAS_OFF_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_BIAS_OFF_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_BIAS_OFF_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_BIAS_OFF_CTRL = curr;
    }

    /**
     * Get SP_BIAS_OFF_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_BIAS_OFF_CTRL_STEP_CNT() volatile
    {
        return (SP_BIAS_OFF_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_BIAS_OFF_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_BIAS_OFF_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_BIAS_OFF_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_BIAS_OFF_CTRL = curr;
    }

    /**
     * Get all of SP_BIAS_OFF_CTRL's bit fields.
     *
     * (read-write) SP bias off control
     */
    inline void get_SP_BIAS_OFF_CTRL(
        bool &DISABLE, GPC_SET_POINT_CTRL_SP_BIAS_OFF_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_BIAS_OFF_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE = GPC_SET_POINT_CTRL_SP_BIAS_OFF_CTRL_CNT_MODE((curr >> 28u) &
                                                                0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_BIAS_OFF_CTRL's bit fields.
     *
     * (read-write) SP bias off control
     */
    inline void set_SP_BIAS_OFF_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_BIAS_OFF_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_BIAS_OFF_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_BIAS_OFF_CTRL = curr;
    }

    /**
     * Get SP_BG_PLDO_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_BG_PLDO_OFF_CTRL_DISABLE() volatile
    {
        return SP_BG_PLDO_OFF_CTRL & (1u << 31u);
    }

    /**
     * Set SP_BG_PLDO_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_BG_PLDO_OFF_CTRL_DISABLE() volatile
    {
        SP_BG_PLDO_OFF_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_BG_PLDO_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_BG_PLDO_OFF_CTRL_DISABLE() volatile
    {
        SP_BG_PLDO_OFF_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_BG_PLDO_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_BG_PLDO_OFF_CTRL_DISABLE() volatile
    {
        SP_BG_PLDO_OFF_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_BG_PLDO_OFF_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_BG_PLDO_OFF_CTRL_CNT_MODE
    get_SP_BG_PLDO_OFF_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_BG_PLDO_OFF_CTRL_CNT_MODE(
            (SP_BG_PLDO_OFF_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_BG_PLDO_OFF_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_BG_PLDO_OFF_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_BG_PLDO_OFF_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_BG_PLDO_OFF_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_BG_PLDO_OFF_CTRL = curr;
    }

    /**
     * Get SP_BG_PLDO_OFF_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_BG_PLDO_OFF_CTRL_STEP_CNT() volatile
    {
        return (SP_BG_PLDO_OFF_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_BG_PLDO_OFF_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_BG_PLDO_OFF_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_BG_PLDO_OFF_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_BG_PLDO_OFF_CTRL = curr;
    }

    /**
     * Get all of SP_BG_PLDO_OFF_CTRL's bit fields.
     *
     * (read-write) SP bandgap and PLL_LDO off control
     */
    inline void get_SP_BG_PLDO_OFF_CTRL(
        bool &DISABLE,
        GPC_SET_POINT_CTRL_SP_BG_PLDO_OFF_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_BG_PLDO_OFF_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE = GPC_SET_POINT_CTRL_SP_BG_PLDO_OFF_CTRL_CNT_MODE(
            (curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_BG_PLDO_OFF_CTRL's bit fields.
     *
     * (read-write) SP bandgap and PLL_LDO off control
     */
    inline void set_SP_BG_PLDO_OFF_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_BG_PLDO_OFF_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_BG_PLDO_OFF_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_BG_PLDO_OFF_CTRL = curr;
    }

    /**
     * Get SP_LDO_PRE_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_LDO_PRE_CTRL_DISABLE() volatile
    {
        return SP_LDO_PRE_CTRL & (1u << 31u);
    }

    /**
     * Set SP_LDO_PRE_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_LDO_PRE_CTRL_DISABLE() volatile
    {
        SP_LDO_PRE_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_LDO_PRE_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_LDO_PRE_CTRL_DISABLE() volatile
    {
        SP_LDO_PRE_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_LDO_PRE_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_LDO_PRE_CTRL_DISABLE() volatile
    {
        SP_LDO_PRE_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_LDO_PRE_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_LDO_PRE_CTRL_CNT_MODE
    get_SP_LDO_PRE_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_LDO_PRE_CTRL_CNT_MODE(
            (SP_LDO_PRE_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_LDO_PRE_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_LDO_PRE_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_LDO_PRE_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_LDO_PRE_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_LDO_PRE_CTRL = curr;
    }

    /**
     * Get SP_LDO_PRE_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_LDO_PRE_CTRL_STEP_CNT() volatile
    {
        return (SP_LDO_PRE_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_LDO_PRE_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_LDO_PRE_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_LDO_PRE_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_LDO_PRE_CTRL = curr;
    }

    /**
     * Get all of SP_LDO_PRE_CTRL's bit fields.
     *
     * (read-write) SP LDO pre control
     */
    inline void get_SP_LDO_PRE_CTRL(
        bool &DISABLE, GPC_SET_POINT_CTRL_SP_LDO_PRE_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_LDO_PRE_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_SET_POINT_CTRL_SP_LDO_PRE_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_LDO_PRE_CTRL's bit fields.
     *
     * (read-write) SP LDO pre control
     */
    inline void set_SP_LDO_PRE_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_LDO_PRE_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_LDO_PRE_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_LDO_PRE_CTRL = curr;
    }

    /**
     * Get SP_DCDC_DOWN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_DCDC_DOWN_CTRL_DISABLE() volatile
    {
        return SP_DCDC_DOWN_CTRL & (1u << 31u);
    }

    /**
     * Set SP_DCDC_DOWN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_DCDC_DOWN_CTRL_DISABLE() volatile
    {
        SP_DCDC_DOWN_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_DCDC_DOWN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_DCDC_DOWN_CTRL_DISABLE() volatile
    {
        SP_DCDC_DOWN_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_DCDC_DOWN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_DCDC_DOWN_CTRL_DISABLE() volatile
    {
        SP_DCDC_DOWN_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_DCDC_DOWN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_DCDC_DOWN_CTRL_CNT_MODE
    get_SP_DCDC_DOWN_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_DCDC_DOWN_CTRL_CNT_MODE(
            (SP_DCDC_DOWN_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_DCDC_DOWN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_DCDC_DOWN_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_DCDC_DOWN_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_DCDC_DOWN_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_DCDC_DOWN_CTRL = curr;
    }

    /**
     * Get SP_DCDC_DOWN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_DCDC_DOWN_CTRL_STEP_CNT() volatile
    {
        return (SP_DCDC_DOWN_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_DCDC_DOWN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_DCDC_DOWN_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_DCDC_DOWN_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_DCDC_DOWN_CTRL = curr;
    }

    /**
     * Get all of SP_DCDC_DOWN_CTRL's bit fields.
     *
     * (read-write) SP DCDC down control
     */
    inline void get_SP_DCDC_DOWN_CTRL(
        bool &DISABLE, GPC_SET_POINT_CTRL_SP_DCDC_DOWN_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_DCDC_DOWN_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE = GPC_SET_POINT_CTRL_SP_DCDC_DOWN_CTRL_CNT_MODE(
            (curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_DCDC_DOWN_CTRL's bit fields.
     *
     * (read-write) SP DCDC down control
     */
    inline void set_SP_DCDC_DOWN_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_DCDC_DOWN_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_DCDC_DOWN_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_DCDC_DOWN_CTRL = curr;
    }

    /**
     * Get SP_DCDC_UP_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_DCDC_UP_CTRL_DISABLE() volatile
    {
        return SP_DCDC_UP_CTRL & (1u << 31u);
    }

    /**
     * Set SP_DCDC_UP_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_DCDC_UP_CTRL_DISABLE() volatile
    {
        SP_DCDC_UP_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_DCDC_UP_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_DCDC_UP_CTRL_DISABLE() volatile
    {
        SP_DCDC_UP_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_DCDC_UP_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_DCDC_UP_CTRL_DISABLE() volatile
    {
        SP_DCDC_UP_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_DCDC_UP_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_DCDC_UP_CTRL_CNT_MODE
    get_SP_DCDC_UP_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_DCDC_UP_CTRL_CNT_MODE(
            (SP_DCDC_UP_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_DCDC_UP_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_DCDC_UP_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_DCDC_UP_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_DCDC_UP_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_DCDC_UP_CTRL = curr;
    }

    /**
     * Get SP_DCDC_UP_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_DCDC_UP_CTRL_STEP_CNT() volatile
    {
        return (SP_DCDC_UP_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_DCDC_UP_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_DCDC_UP_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_DCDC_UP_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_DCDC_UP_CTRL = curr;
    }

    /**
     * Get all of SP_DCDC_UP_CTRL's bit fields.
     *
     * (read-write) SP DCDC up control
     */
    inline void get_SP_DCDC_UP_CTRL(
        bool &DISABLE, GPC_SET_POINT_CTRL_SP_DCDC_UP_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_DCDC_UP_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_SET_POINT_CTRL_SP_DCDC_UP_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_DCDC_UP_CTRL's bit fields.
     *
     * (read-write) SP DCDC up control
     */
    inline void set_SP_DCDC_UP_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_DCDC_UP_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_DCDC_UP_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_DCDC_UP_CTRL = curr;
    }

    /**
     * Get SP_LDO_POST_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_LDO_POST_CTRL_DISABLE() volatile
    {
        return SP_LDO_POST_CTRL & (1u << 31u);
    }

    /**
     * Set SP_LDO_POST_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_LDO_POST_CTRL_DISABLE() volatile
    {
        SP_LDO_POST_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_LDO_POST_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_LDO_POST_CTRL_DISABLE() volatile
    {
        SP_LDO_POST_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_LDO_POST_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_LDO_POST_CTRL_DISABLE() volatile
    {
        SP_LDO_POST_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_LDO_POST_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_LDO_POST_CTRL_CNT_MODE
    get_SP_LDO_POST_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_LDO_POST_CTRL_CNT_MODE(
            (SP_LDO_POST_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_LDO_POST_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_LDO_POST_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_LDO_POST_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_LDO_POST_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_LDO_POST_CTRL = curr;
    }

    /**
     * Get SP_LDO_POST_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_LDO_POST_CTRL_STEP_CNT() volatile
    {
        return (SP_LDO_POST_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_LDO_POST_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_LDO_POST_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_LDO_POST_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_LDO_POST_CTRL = curr;
    }

    /**
     * Get all of SP_LDO_POST_CTRL's bit fields.
     *
     * (read-write) SP LDO post control
     */
    inline void get_SP_LDO_POST_CTRL(
        bool &DISABLE, GPC_SET_POINT_CTRL_SP_LDO_POST_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_LDO_POST_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE = GPC_SET_POINT_CTRL_SP_LDO_POST_CTRL_CNT_MODE((curr >> 28u) &
                                                                0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_LDO_POST_CTRL's bit fields.
     *
     * (read-write) SP LDO post control
     */
    inline void set_SP_LDO_POST_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_LDO_POST_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_LDO_POST_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_LDO_POST_CTRL = curr;
    }

    /**
     * Get SP_BG_PLDO_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_BG_PLDO_ON_CTRL_DISABLE() volatile
    {
        return SP_BG_PLDO_ON_CTRL & (1u << 31u);
    }

    /**
     * Set SP_BG_PLDO_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_BG_PLDO_ON_CTRL_DISABLE() volatile
    {
        SP_BG_PLDO_ON_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_BG_PLDO_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_BG_PLDO_ON_CTRL_DISABLE() volatile
    {
        SP_BG_PLDO_ON_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_BG_PLDO_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_BG_PLDO_ON_CTRL_DISABLE() volatile
    {
        SP_BG_PLDO_ON_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_BG_PLDO_ON_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_BG_PLDO_ON_CTRL_CNT_MODE
    get_SP_BG_PLDO_ON_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_BG_PLDO_ON_CTRL_CNT_MODE(
            (SP_BG_PLDO_ON_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_BG_PLDO_ON_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_BG_PLDO_ON_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_BG_PLDO_ON_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_BG_PLDO_ON_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_BG_PLDO_ON_CTRL = curr;
    }

    /**
     * Get SP_BG_PLDO_ON_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_BG_PLDO_ON_CTRL_STEP_CNT() volatile
    {
        return (SP_BG_PLDO_ON_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_BG_PLDO_ON_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_BG_PLDO_ON_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_BG_PLDO_ON_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_BG_PLDO_ON_CTRL = curr;
    }

    /**
     * Get all of SP_BG_PLDO_ON_CTRL's bit fields.
     *
     * (read-write) SP bandgap and PLL_LDO on control
     */
    inline void get_SP_BG_PLDO_ON_CTRL(
        bool &DISABLE,
        GPC_SET_POINT_CTRL_SP_BG_PLDO_ON_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_BG_PLDO_ON_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE = GPC_SET_POINT_CTRL_SP_BG_PLDO_ON_CTRL_CNT_MODE(
            (curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_BG_PLDO_ON_CTRL's bit fields.
     *
     * (read-write) SP bandgap and PLL_LDO on control
     */
    inline void set_SP_BG_PLDO_ON_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_BG_PLDO_ON_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_BG_PLDO_ON_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_BG_PLDO_ON_CTRL = curr;
    }

    /**
     * Get SP_BIAS_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_BIAS_ON_CTRL_DISABLE() volatile
    {
        return SP_BIAS_ON_CTRL & (1u << 31u);
    }

    /**
     * Set SP_BIAS_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_BIAS_ON_CTRL_DISABLE() volatile
    {
        SP_BIAS_ON_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_BIAS_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_BIAS_ON_CTRL_DISABLE() volatile
    {
        SP_BIAS_ON_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_BIAS_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_BIAS_ON_CTRL_DISABLE() volatile
    {
        SP_BIAS_ON_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_BIAS_ON_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_BIAS_ON_CTRL_CNT_MODE
    get_SP_BIAS_ON_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_BIAS_ON_CTRL_CNT_MODE(
            (SP_BIAS_ON_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_BIAS_ON_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_BIAS_ON_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_BIAS_ON_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_BIAS_ON_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_BIAS_ON_CTRL = curr;
    }

    /**
     * Get SP_BIAS_ON_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_BIAS_ON_CTRL_STEP_CNT() volatile
    {
        return (SP_BIAS_ON_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_BIAS_ON_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_BIAS_ON_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_BIAS_ON_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_BIAS_ON_CTRL = curr;
    }

    /**
     * Get all of SP_BIAS_ON_CTRL's bit fields.
     *
     * (read-write) SP bias on control
     */
    inline void get_SP_BIAS_ON_CTRL(
        bool &DISABLE, GPC_SET_POINT_CTRL_SP_BIAS_ON_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_BIAS_ON_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_SET_POINT_CTRL_SP_BIAS_ON_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_BIAS_ON_CTRL's bit fields.
     *
     * (read-write) SP bias on control
     */
    inline void set_SP_BIAS_ON_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_BIAS_ON_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_BIAS_ON_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_BIAS_ON_CTRL = curr;
    }

    /**
     * Get SP_POWER_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_POWER_ON_CTRL_DISABLE() volatile
    {
        return SP_POWER_ON_CTRL & (1u << 31u);
    }

    /**
     * Set SP_POWER_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_POWER_ON_CTRL_DISABLE() volatile
    {
        SP_POWER_ON_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_POWER_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_POWER_ON_CTRL_DISABLE() volatile
    {
        SP_POWER_ON_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_POWER_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_POWER_ON_CTRL_DISABLE() volatile
    {
        SP_POWER_ON_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_POWER_ON_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_POWER_ON_CTRL_CNT_MODE
    get_SP_POWER_ON_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_POWER_ON_CTRL_CNT_MODE(
            (SP_POWER_ON_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_POWER_ON_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_POWER_ON_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_POWER_ON_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_POWER_ON_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_POWER_ON_CTRL = curr;
    }

    /**
     * Get SP_POWER_ON_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_POWER_ON_CTRL_STEP_CNT() volatile
    {
        return (SP_POWER_ON_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_POWER_ON_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_POWER_ON_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_POWER_ON_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_POWER_ON_CTRL = curr;
    }

    /**
     * Get all of SP_POWER_ON_CTRL's bit fields.
     *
     * (read-write) SP power on control
     */
    inline void get_SP_POWER_ON_CTRL(
        bool &DISABLE, GPC_SET_POINT_CTRL_SP_POWER_ON_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_POWER_ON_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE = GPC_SET_POINT_CTRL_SP_POWER_ON_CTRL_CNT_MODE((curr >> 28u) &
                                                                0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_POWER_ON_CTRL's bit fields.
     *
     * (read-write) SP power on control
     */
    inline void set_SP_POWER_ON_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_POWER_ON_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_POWER_ON_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_POWER_ON_CTRL = curr;
    }

    /**
     * Get SP_RESET_LATE_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_RESET_LATE_CTRL_DISABLE() volatile
    {
        return SP_RESET_LATE_CTRL & (1u << 31u);
    }

    /**
     * Set SP_RESET_LATE_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_RESET_LATE_CTRL_DISABLE() volatile
    {
        SP_RESET_LATE_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_RESET_LATE_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_RESET_LATE_CTRL_DISABLE() volatile
    {
        SP_RESET_LATE_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_RESET_LATE_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_RESET_LATE_CTRL_DISABLE() volatile
    {
        SP_RESET_LATE_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_RESET_LATE_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_RESET_LATE_CTRL_CNT_MODE
    get_SP_RESET_LATE_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_RESET_LATE_CTRL_CNT_MODE(
            (SP_RESET_LATE_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_RESET_LATE_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_RESET_LATE_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_RESET_LATE_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_RESET_LATE_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_RESET_LATE_CTRL = curr;
    }

    /**
     * Get SP_RESET_LATE_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_RESET_LATE_CTRL_STEP_CNT() volatile
    {
        return (SP_RESET_LATE_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_RESET_LATE_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_RESET_LATE_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_RESET_LATE_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_RESET_LATE_CTRL = curr;
    }

    /**
     * Get all of SP_RESET_LATE_CTRL's bit fields.
     *
     * (read-write) SP reset late control
     */
    inline void get_SP_RESET_LATE_CTRL(
        bool &DISABLE,
        GPC_SET_POINT_CTRL_SP_RESET_LATE_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_RESET_LATE_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE = GPC_SET_POINT_CTRL_SP_RESET_LATE_CTRL_CNT_MODE(
            (curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_RESET_LATE_CTRL's bit fields.
     *
     * (read-write) SP reset late control
     */
    inline void set_SP_RESET_LATE_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_RESET_LATE_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_RESET_LATE_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_RESET_LATE_CTRL = curr;
    }

    /**
     * Get SP_ISO_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_ISO_OFF_CTRL_DISABLE() volatile
    {
        return SP_ISO_OFF_CTRL & (1u << 31u);
    }

    /**
     * Set SP_ISO_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_ISO_OFF_CTRL_DISABLE() volatile
    {
        SP_ISO_OFF_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_ISO_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_ISO_OFF_CTRL_DISABLE() volatile
    {
        SP_ISO_OFF_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_ISO_OFF_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_ISO_OFF_CTRL_DISABLE() volatile
    {
        SP_ISO_OFF_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_ISO_OFF_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_ISO_OFF_CTRL_CNT_MODE
    get_SP_ISO_OFF_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_ISO_OFF_CTRL_CNT_MODE(
            (SP_ISO_OFF_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_ISO_OFF_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_ISO_OFF_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_ISO_OFF_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_ISO_OFF_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_ISO_OFF_CTRL = curr;
    }

    /**
     * Get SP_ISO_OFF_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_ISO_OFF_CTRL_STEP_CNT() volatile
    {
        return (SP_ISO_OFF_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_ISO_OFF_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_ISO_OFF_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_ISO_OFF_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_ISO_OFF_CTRL = curr;
    }

    /**
     * Get all of SP_ISO_OFF_CTRL's bit fields.
     *
     * (read-write) SP ISO off control
     */
    inline void get_SP_ISO_OFF_CTRL(
        bool &DISABLE, GPC_SET_POINT_CTRL_SP_ISO_OFF_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_ISO_OFF_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_SET_POINT_CTRL_SP_ISO_OFF_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_ISO_OFF_CTRL's bit fields.
     *
     * (read-write) SP ISO off control
     */
    inline void set_SP_ISO_OFF_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_ISO_OFF_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_ISO_OFF_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_ISO_OFF_CTRL = curr;
    }

    /**
     * Get SP_PLL_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_PLL_ON_CTRL_DISABLE() volatile
    {
        return SP_PLL_ON_CTRL & (1u << 31u);
    }

    /**
     * Set SP_PLL_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_PLL_ON_CTRL_DISABLE() volatile
    {
        SP_PLL_ON_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_PLL_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_PLL_ON_CTRL_DISABLE() volatile
    {
        SP_PLL_ON_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_PLL_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_PLL_ON_CTRL_DISABLE() volatile
    {
        SP_PLL_ON_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_PLL_ON_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_PLL_ON_CTRL_CNT_MODE
    get_SP_PLL_ON_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_PLL_ON_CTRL_CNT_MODE(
            (SP_PLL_ON_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_PLL_ON_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_PLL_ON_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_PLL_ON_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_PLL_ON_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_PLL_ON_CTRL = curr;
    }

    /**
     * Get SP_PLL_ON_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_PLL_ON_CTRL_STEP_CNT() volatile
    {
        return (SP_PLL_ON_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_PLL_ON_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_PLL_ON_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_PLL_ON_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_PLL_ON_CTRL = curr;
    }

    /**
     * Get all of SP_PLL_ON_CTRL's bit fields.
     *
     * (read-write) SP PLL on control
     */
    inline void get_SP_PLL_ON_CTRL(
        bool &DISABLE, GPC_SET_POINT_CTRL_SP_PLL_ON_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_PLL_ON_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_SET_POINT_CTRL_SP_PLL_ON_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_PLL_ON_CTRL's bit fields.
     *
     * (read-write) SP PLL on control
     */
    inline void set_SP_PLL_ON_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_PLL_ON_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_PLL_ON_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_PLL_ON_CTRL = curr;
    }

    /**
     * Get SP_ROOT_UP_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_ROOT_UP_CTRL_DISABLE() volatile
    {
        return SP_ROOT_UP_CTRL & (1u << 31u);
    }

    /**
     * Set SP_ROOT_UP_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_ROOT_UP_CTRL_DISABLE() volatile
    {
        SP_ROOT_UP_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_ROOT_UP_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_ROOT_UP_CTRL_DISABLE() volatile
    {
        SP_ROOT_UP_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_ROOT_UP_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_ROOT_UP_CTRL_DISABLE() volatile
    {
        SP_ROOT_UP_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_ROOT_UP_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_ROOT_UP_CTRL_CNT_MODE
    get_SP_ROOT_UP_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_ROOT_UP_CTRL_CNT_MODE(
            (SP_ROOT_UP_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_ROOT_UP_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_ROOT_UP_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_ROOT_UP_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_ROOT_UP_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_ROOT_UP_CTRL = curr;
    }

    /**
     * Get SP_ROOT_UP_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_ROOT_UP_CTRL_STEP_CNT() volatile
    {
        return (SP_ROOT_UP_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_ROOT_UP_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_ROOT_UP_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_ROOT_UP_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_ROOT_UP_CTRL = curr;
    }

    /**
     * Get all of SP_ROOT_UP_CTRL's bit fields.
     *
     * (read-write) SP root up control
     */
    inline void get_SP_ROOT_UP_CTRL(
        bool &DISABLE, GPC_SET_POINT_CTRL_SP_ROOT_UP_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_ROOT_UP_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_SET_POINT_CTRL_SP_ROOT_UP_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_ROOT_UP_CTRL's bit fields.
     *
     * (read-write) SP root up control
     */
    inline void set_SP_ROOT_UP_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_ROOT_UP_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_ROOT_UP_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_ROOT_UP_CTRL = curr;
    }

    /**
     * Get SP_GROUP_UP_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_GROUP_UP_CTRL_DISABLE() volatile
    {
        return SP_GROUP_UP_CTRL & (1u << 31u);
    }

    /**
     * Set SP_GROUP_UP_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_GROUP_UP_CTRL_DISABLE() volatile
    {
        SP_GROUP_UP_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_GROUP_UP_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_GROUP_UP_CTRL_DISABLE() volatile
    {
        SP_GROUP_UP_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_GROUP_UP_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_GROUP_UP_CTRL_DISABLE() volatile
    {
        SP_GROUP_UP_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_GROUP_UP_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_GROUP_UP_CTRL_CNT_MODE
    get_SP_GROUP_UP_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_GROUP_UP_CTRL_CNT_MODE(
            (SP_GROUP_UP_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_GROUP_UP_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_GROUP_UP_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_GROUP_UP_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_GROUP_UP_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_GROUP_UP_CTRL = curr;
    }

    /**
     * Get SP_GROUP_UP_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_GROUP_UP_CTRL_STEP_CNT() volatile
    {
        return (SP_GROUP_UP_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_GROUP_UP_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_GROUP_UP_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_GROUP_UP_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_GROUP_UP_CTRL = curr;
    }

    /**
     * Get all of SP_GROUP_UP_CTRL's bit fields.
     *
     * (read-write) SP group up control
     */
    inline void get_SP_GROUP_UP_CTRL(
        bool &DISABLE, GPC_SET_POINT_CTRL_SP_GROUP_UP_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_GROUP_UP_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE = GPC_SET_POINT_CTRL_SP_GROUP_UP_CTRL_CNT_MODE((curr >> 28u) &
                                                                0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_GROUP_UP_CTRL's bit fields.
     *
     * (read-write) SP group up control
     */
    inline void set_SP_GROUP_UP_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_GROUP_UP_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_GROUP_UP_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_GROUP_UP_CTRL = curr;
    }

    /**
     * Get SP_LPCG_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_LPCG_ON_CTRL_DISABLE() volatile
    {
        return SP_LPCG_ON_CTRL & (1u << 31u);
    }

    /**
     * Set SP_LPCG_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_LPCG_ON_CTRL_DISABLE() volatile
    {
        SP_LPCG_ON_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_LPCG_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_LPCG_ON_CTRL_DISABLE() volatile
    {
        SP_LPCG_ON_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_LPCG_ON_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_LPCG_ON_CTRL_DISABLE() volatile
    {
        SP_LPCG_ON_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_LPCG_ON_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_LPCG_ON_CTRL_CNT_MODE
    get_SP_LPCG_ON_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_LPCG_ON_CTRL_CNT_MODE(
            (SP_LPCG_ON_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_LPCG_ON_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_LPCG_ON_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_LPCG_ON_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_LPCG_ON_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_LPCG_ON_CTRL = curr;
    }

    /**
     * Get SP_LPCG_ON_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_LPCG_ON_CTRL_STEP_CNT() volatile
    {
        return (SP_LPCG_ON_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_LPCG_ON_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_LPCG_ON_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_LPCG_ON_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_LPCG_ON_CTRL = curr;
    }

    /**
     * Get all of SP_LPCG_ON_CTRL's bit fields.
     *
     * (read-write) SP LPCG on control
     */
    inline void get_SP_LPCG_ON_CTRL(
        bool &DISABLE, GPC_SET_POINT_CTRL_SP_LPCG_ON_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_LPCG_ON_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_SET_POINT_CTRL_SP_LPCG_ON_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_LPCG_ON_CTRL's bit fields.
     *
     * (read-write) SP LPCG on control
     */
    inline void set_SP_LPCG_ON_CTRL(
        bool DISABLE, GPC_SET_POINT_CTRL_SP_LPCG_ON_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_LPCG_ON_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_LPCG_ON_CTRL = curr;
    }

    /**
     * Get SP_SSAR_RESTORE_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_SP_SSAR_RESTORE_CTRL_DISABLE() volatile
    {
        return SP_SSAR_RESTORE_CTRL & (1u << 31u);
    }

    /**
     * Set SP_SSAR_RESTORE_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_SP_SSAR_RESTORE_CTRL_DISABLE() volatile
    {
        SP_SSAR_RESTORE_CTRL |= 1u << 31u;
    }

    /**
     * Clear SP_SSAR_RESTORE_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_SP_SSAR_RESTORE_CTRL_DISABLE() volatile
    {
        SP_SSAR_RESTORE_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SP_SSAR_RESTORE_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_SP_SSAR_RESTORE_CTRL_DISABLE() volatile
    {
        SP_SSAR_RESTORE_CTRL ^= 1u << 31u;
    }

    /**
     * Get SP_SSAR_RESTORE_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_SET_POINT_CTRL_SP_SSAR_RESTORE_CTRL_CNT_MODE
    get_SP_SSAR_RESTORE_CTRL_CNT_MODE() volatile
    {
        return GPC_SET_POINT_CTRL_SP_SSAR_RESTORE_CTRL_CNT_MODE(
            (SP_SSAR_RESTORE_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set SP_SSAR_RESTORE_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_SP_SSAR_RESTORE_CTRL_CNT_MODE(
        GPC_SET_POINT_CTRL_SP_SSAR_RESTORE_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = SP_SSAR_RESTORE_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SP_SSAR_RESTORE_CTRL = curr;
    }

    /**
     * Get SP_SSAR_RESTORE_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_SP_SSAR_RESTORE_CTRL_STEP_CNT() volatile
    {
        return (SP_SSAR_RESTORE_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SP_SSAR_RESTORE_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_SP_SSAR_RESTORE_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = SP_SSAR_RESTORE_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SP_SSAR_RESTORE_CTRL = curr;
    }

    /**
     * Get all of SP_SSAR_RESTORE_CTRL's bit fields.
     *
     * (read-write) SP SSAR restore control
     */
    inline void get_SP_SSAR_RESTORE_CTRL(
        bool &DISABLE,
        GPC_SET_POINT_CTRL_SP_SSAR_RESTORE_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = SP_SSAR_RESTORE_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE = GPC_SET_POINT_CTRL_SP_SSAR_RESTORE_CTRL_CNT_MODE(
            (curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of SP_SSAR_RESTORE_CTRL's bit fields.
     *
     * (read-write) SP SSAR restore control
     */
    inline void set_SP_SSAR_RESTORE_CTRL(
        bool DISABLE,
        GPC_SET_POINT_CTRL_SP_SSAR_RESTORE_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = SP_SSAR_RESTORE_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        SP_SSAR_RESTORE_CTRL = curr;
    }
};

static_assert(sizeof(gpc_set_point_ctrl) == gpc_set_point_ctrl::size);

static volatile gpc_set_point_ctrl *const GPC_SET_POINT_CTRL =
    reinterpret_cast<gpc_set_point_ctrl *>(0x40C02000);

}; // namespace MIMXRT1176::CM7
