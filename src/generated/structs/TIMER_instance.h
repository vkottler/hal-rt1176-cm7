/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * no description available
 */
struct [[gnu::packed]] TIMER_instance
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        16; /*!< TIMER_instance's size in bytes. */

    /* Fields. */
    uint32_t LDVAL; /*!< (read-write) Timer Load Value Register */
    uint32_t CVAL;  /*!< (read-write) Current Timer Value Register */
    uint32_t TCTRL; /*!< (read-write) Timer Control Register */
    uint32_t TFLG;  /*!< (read-write) Timer Flag Register */

    /* Methods. */

    /**
     * Get LDVAL's TSV field.
     *
     * Timer Start Value
     */
    inline uint32_t get_LDVAL_TSV()
    {
        return (LDVAL >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set LDVAL's TSV field.
     *
     * Timer Start Value
     */
    inline void set_LDVAL_TSV(uint32_t value)
    {
        uint32_t curr = LDVAL;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        LDVAL = curr;
    }

    /**
     * Get CVAL's TVL field.
     *
     * Current Timer Value
     */
    inline uint32_t get_CVAL_TVL()
    {
        return (CVAL >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get TCTRL's CHN bit.
     *
     * Chain Mode
     */
    inline bool get_TCTRL_CHN()
    {
        return TCTRL & (1u << 2u);
    }

    /**
     * Set TCTRL's CHN bit.
     *
     * Chain Mode
     */
    inline void set_TCTRL_CHN()
    {
        TCTRL |= 1u << 2u;
    }

    /**
     * Clear TCTRL's CHN bit.
     *
     * Chain Mode
     */
    inline void clear_TCTRL_CHN()
    {
        TCTRL &= ~(1u << 2u);
    }

    /**
     * Toggle TCTRL's CHN bit.
     *
     * Chain Mode
     */
    inline void toggle_TCTRL_CHN()
    {
        TCTRL ^= 1u << 2u;
    }

    /**
     * Get TCTRL's TIE bit.
     *
     * Timer Interrupt Enable
     */
    inline bool get_TCTRL_TIE()
    {
        return TCTRL & (1u << 1u);
    }

    /**
     * Set TCTRL's TIE bit.
     *
     * Timer Interrupt Enable
     */
    inline void set_TCTRL_TIE()
    {
        TCTRL |= 1u << 1u;
    }

    /**
     * Clear TCTRL's TIE bit.
     *
     * Timer Interrupt Enable
     */
    inline void clear_TCTRL_TIE()
    {
        TCTRL &= ~(1u << 1u);
    }

    /**
     * Toggle TCTRL's TIE bit.
     *
     * Timer Interrupt Enable
     */
    inline void toggle_TCTRL_TIE()
    {
        TCTRL ^= 1u << 1u;
    }

    /**
     * Get TCTRL's TEN bit.
     *
     * Timer Enable
     */
    inline bool get_TCTRL_TEN()
    {
        return TCTRL & (1u << 0u);
    }

    /**
     * Set TCTRL's TEN bit.
     *
     * Timer Enable
     */
    inline void set_TCTRL_TEN()
    {
        TCTRL |= 1u << 0u;
    }

    /**
     * Clear TCTRL's TEN bit.
     *
     * Timer Enable
     */
    inline void clear_TCTRL_TEN()
    {
        TCTRL &= ~(1u << 0u);
    }

    /**
     * Toggle TCTRL's TEN bit.
     *
     * Timer Enable
     */
    inline void toggle_TCTRL_TEN()
    {
        TCTRL ^= 1u << 0u;
    }

    /**
     * Get all of TCTRL's bit fields.
     *
     * (read-write) Timer Control Register
     */
    inline void get_TCTRL(bool &CHN, bool &TIE, bool &TEN)
    {
        uint32_t curr = TCTRL;

        CHN = curr & (1u << 2u);
        TIE = curr & (1u << 1u);
        TEN = curr & (1u << 0u);
    }

    /**
     * Set all of TCTRL's bit fields.
     *
     * (read-write) Timer Control Register
     */
    inline void set_TCTRL(bool CHN, bool TIE, bool TEN)
    {
        uint32_t curr = TCTRL;

        curr &= ~(0b1u << 2u);
        curr |= (CHN & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (TIE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TEN & 0b1u) << 0u;

        TCTRL = curr;
    }

    /**
     * Get TFLG's TIF bit.
     *
     * Timer Interrupt Flag
     */
    inline bool get_TFLG_TIF()
    {
        return TFLG & (1u << 0u);
    }

    /**
     * Set TFLG's TIF bit.
     *
     * Timer Interrupt Flag
     */
    inline void set_TFLG_TIF()
    {
        TFLG |= 1u << 0u;
    }

    /**
     * Clear TFLG's TIF bit.
     *
     * Timer Interrupt Flag
     */
    inline void clear_TFLG_TIF()
    {
        TFLG &= ~(1u << 0u);
    }

    /**
     * Toggle TFLG's TIF bit.
     *
     * Timer Interrupt Flag
     */
    inline void toggle_TFLG_TIF()
    {
        TFLG ^= 1u << 0u;
    }
};

static_assert(sizeof(TIMER_instance) == TIMER_instance::size);

}; // namespace MIMXRT1176::CM7
