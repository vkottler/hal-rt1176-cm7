/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/SSARC_LP_DESC_CTRL1_0_POWER_DOMAIN.h"
#include "../enums/SSARC_LP_DESC_CTRL1_10_POWER_DOMAIN.h"
#include "../enums/SSARC_LP_DESC_CTRL1_11_POWER_DOMAIN.h"
#include "../enums/SSARC_LP_DESC_CTRL1_12_POWER_DOMAIN.h"
#include "../enums/SSARC_LP_DESC_CTRL1_13_POWER_DOMAIN.h"
#include "../enums/SSARC_LP_DESC_CTRL1_14_POWER_DOMAIN.h"
#include "../enums/SSARC_LP_DESC_CTRL1_15_POWER_DOMAIN.h"
#include "../enums/SSARC_LP_DESC_CTRL1_1_POWER_DOMAIN.h"
#include "../enums/SSARC_LP_DESC_CTRL1_2_POWER_DOMAIN.h"
#include "../enums/SSARC_LP_DESC_CTRL1_3_POWER_DOMAIN.h"
#include "../enums/SSARC_LP_DESC_CTRL1_4_POWER_DOMAIN.h"
#include "../enums/SSARC_LP_DESC_CTRL1_5_POWER_DOMAIN.h"
#include "../enums/SSARC_LP_DESC_CTRL1_6_POWER_DOMAIN.h"
#include "../enums/SSARC_LP_DESC_CTRL1_7_POWER_DOMAIN.h"
#include "../enums/SSARC_LP_DESC_CTRL1_8_POWER_DOMAIN.h"
#include "../enums/SSARC_LP_DESC_CTRL1_9_POWER_DOMAIN.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * SSARC Registers
 */
struct [[gnu::packed]] ssarc_lp
{
    /* Constant attributes. */
    static constexpr std::size_t size = 548; /*!< ssarc_lp's size in bytes. */

    /* Fields. */
    uint32_t DESC_CTRL0_0; /*!< (read-write) Descriptor Control0 0 Register */
    uint32_t DESC_CTRL1_0; /*!< (read-write) Descriptor Control1 0 Register */
    uint32_t
        DESC_ADDR_UP_0; /*!< (read-write) Descriptor Address Up 0 Register */
    uint32_t DESC_ADDR_DOWN_0; /*!< (read-write) Descriptor Address Down 0
                                  Register */
    static constexpr std::size_t reserved_padding0_length = 4;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t DESC_CTRL0_1; /*!< (read-write) Descriptor Control0 1 Register */
    uint32_t DESC_CTRL1_1; /*!< (read-write) Descriptor Control1 1 Register */
    uint32_t
        DESC_ADDR_UP_1; /*!< (read-write) Descriptor Address Up 1 Register */
    uint32_t DESC_ADDR_DOWN_1; /*!< (read-write) Descriptor Address Down 1
                                  Register */
    static constexpr std::size_t reserved_padding1_length = 4;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    uint32_t DESC_CTRL0_2; /*!< (read-write) Descriptor Control0 2 Register */
    uint32_t DESC_CTRL1_2; /*!< (read-write) Descriptor Control1 2 Register */
    uint32_t
        DESC_ADDR_UP_2; /*!< (read-write) Descriptor Address Up 2 Register */
    uint32_t DESC_ADDR_DOWN_2; /*!< (read-write) Descriptor Address Down 2
                                  Register */
    static constexpr std::size_t reserved_padding2_length = 4;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    uint32_t DESC_CTRL0_3; /*!< (read-write) Descriptor Control0 3 Register */
    uint32_t DESC_CTRL1_3; /*!< (read-write) Descriptor Control1 3 Register */
    uint32_t
        DESC_ADDR_UP_3; /*!< (read-write) Descriptor Address Up 3 Register */
    uint32_t DESC_ADDR_DOWN_3; /*!< (read-write) Descriptor Address Down 3
                                  Register */
    static constexpr std::size_t reserved_padding3_length = 4;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    uint32_t DESC_CTRL0_4; /*!< (read-write) Descriptor Control0 4 Register */
    uint32_t DESC_CTRL1_4; /*!< (read-write) Descriptor Control1 4 Register */
    uint32_t
        DESC_ADDR_UP_4; /*!< (read-write) Descriptor Address Up 4 Register */
    uint32_t DESC_ADDR_DOWN_4; /*!< (read-write) Descriptor Address Down 4
                                  Register */
    static constexpr std::size_t reserved_padding4_length = 4;
    const uint32_t reserved_padding4[reserved_padding4_length] = {};
    uint32_t DESC_CTRL0_5; /*!< (read-write) Descriptor Control0 5 Register */
    uint32_t DESC_CTRL1_5; /*!< (read-write) Descriptor Control1 5 Register */
    uint32_t
        DESC_ADDR_UP_5; /*!< (read-write) Descriptor Address Up 5 Register */
    uint32_t DESC_ADDR_DOWN_5; /*!< (read-write) Descriptor Address Down 5
                                  Register */
    static constexpr std::size_t reserved_padding5_length = 4;
    const uint32_t reserved_padding5[reserved_padding5_length] = {};
    uint32_t DESC_CTRL0_6; /*!< (read-write) Descriptor Control0 6 Register */
    uint32_t DESC_CTRL1_6; /*!< (read-write) Descriptor Control1 6 Register */
    uint32_t
        DESC_ADDR_UP_6; /*!< (read-write) Descriptor Address Up 6 Register */
    uint32_t DESC_ADDR_DOWN_6; /*!< (read-write) Descriptor Address Down 6
                                  Register */
    static constexpr std::size_t reserved_padding6_length = 4;
    const uint32_t reserved_padding6[reserved_padding6_length] = {};
    uint32_t DESC_CTRL0_7; /*!< (read-write) Descriptor Control0 7 Register */
    uint32_t DESC_CTRL1_7; /*!< (read-write) Descriptor Control1 7 Register */
    uint32_t
        DESC_ADDR_UP_7; /*!< (read-write) Descriptor Address Up 7 Register */
    uint32_t DESC_ADDR_DOWN_7; /*!< (read-write) Descriptor Address Down 7
                                  Register */
    static constexpr std::size_t reserved_padding7_length = 4;
    const uint32_t reserved_padding7[reserved_padding7_length] = {};
    uint32_t DESC_CTRL0_8; /*!< (read-write) Descriptor Control0 8 Register */
    uint32_t DESC_CTRL1_8; /*!< (read-write) Descriptor Control1 8 Register */
    uint32_t
        DESC_ADDR_UP_8; /*!< (read-write) Descriptor Address Up 8 Register */
    uint32_t DESC_ADDR_DOWN_8; /*!< (read-write) Descriptor Address Down 8
                                  Register */
    static constexpr std::size_t reserved_padding8_length = 4;
    const uint32_t reserved_padding8[reserved_padding8_length] = {};
    uint32_t DESC_CTRL0_9; /*!< (read-write) Descriptor Control0 9 Register */
    uint32_t DESC_CTRL1_9; /*!< (read-write) Descriptor Control1 9 Register */
    uint32_t
        DESC_ADDR_UP_9; /*!< (read-write) Descriptor Address Up 9 Register */
    uint32_t DESC_ADDR_DOWN_9; /*!< (read-write) Descriptor Address Down 9
                                  Register */
    static constexpr std::size_t reserved_padding9_length = 4;
    const uint32_t reserved_padding9[reserved_padding9_length] = {};
    uint32_t
        DESC_CTRL0_10; /*!< (read-write) Descriptor Control0 10 Register */
    uint32_t
        DESC_CTRL1_10; /*!< (read-write) Descriptor Control1 10 Register */
    uint32_t
        DESC_ADDR_UP_10; /*!< (read-write) Descriptor Address Up 10 Register */
    uint32_t DESC_ADDR_DOWN_10; /*!< (read-write) Descriptor Address Down 10
                                   Register */
    static constexpr std::size_t reserved_padding10_length = 4;
    const uint32_t reserved_padding10[reserved_padding10_length] = {};
    uint32_t
        DESC_CTRL0_11; /*!< (read-write) Descriptor Control0 11 Register */
    uint32_t
        DESC_CTRL1_11; /*!< (read-write) Descriptor Control1 11 Register */
    uint32_t
        DESC_ADDR_UP_11; /*!< (read-write) Descriptor Address Up 11 Register */
    uint32_t DESC_ADDR_DOWN_11; /*!< (read-write) Descriptor Address Down 11
                                   Register */
    static constexpr std::size_t reserved_padding11_length = 4;
    const uint32_t reserved_padding11[reserved_padding11_length] = {};
    uint32_t
        DESC_CTRL0_12; /*!< (read-write) Descriptor Control0 12 Register */
    uint32_t
        DESC_CTRL1_12; /*!< (read-write) Descriptor Control1 12 Register */
    uint32_t
        DESC_ADDR_UP_12; /*!< (read-write) Descriptor Address Up 12 Register */
    uint32_t DESC_ADDR_DOWN_12; /*!< (read-write) Descriptor Address Down 12
                                   Register */
    static constexpr std::size_t reserved_padding12_length = 4;
    const uint32_t reserved_padding12[reserved_padding12_length] = {};
    uint32_t
        DESC_CTRL0_13; /*!< (read-write) Descriptor Control0 13 Register */
    uint32_t
        DESC_CTRL1_13; /*!< (read-write) Descriptor Control1 13 Register */
    uint32_t
        DESC_ADDR_UP_13; /*!< (read-write) Descriptor Address Up 13 Register */
    uint32_t DESC_ADDR_DOWN_13; /*!< (read-write) Descriptor Address Down 13
                                   Register */
    static constexpr std::size_t reserved_padding13_length = 4;
    const uint32_t reserved_padding13[reserved_padding13_length] = {};
    uint32_t
        DESC_CTRL0_14; /*!< (read-write) Descriptor Control0 14 Register */
    uint32_t
        DESC_CTRL1_14; /*!< (read-write) Descriptor Control1 14 Register */
    uint32_t
        DESC_ADDR_UP_14; /*!< (read-write) Descriptor Address Up 14 Register */
    uint32_t DESC_ADDR_DOWN_14; /*!< (read-write) Descriptor Address Down 14
                                   Register */
    static constexpr std::size_t reserved_padding14_length = 4;
    const uint32_t reserved_padding14[reserved_padding14_length] = {};
    uint32_t
        DESC_CTRL0_15; /*!< (read-write) Descriptor Control0 15 Register */
    uint32_t
        DESC_CTRL1_15; /*!< (read-write) Descriptor Control1 15 Register */
    uint32_t
        DESC_ADDR_UP_15; /*!< (read-write) Descriptor Address Up 15 Register */
    uint32_t DESC_ADDR_DOWN_15; /*!< (read-write) Descriptor Address Down 15
                                   Register */
    static constexpr std::size_t reserved_padding15_length = 4;
    const uint32_t reserved_padding15[reserved_padding15_length] = {};
    uint32_t CTRL;       /*!< (read-write) Control Register */
    uint32_t INT_STATUS; /*!< (read-write) Interrupt Status Register */
    const uint32_t reserved_padding16 = {};
    uint32_t HP_TIMEOUT; /*!< (read-write) HP Timeout Register */
    static constexpr std::size_t reserved_padding17_length = 3;
    const uint32_t reserved_padding17[reserved_padding17_length] = {};
    uint32_t HW_GROUP_PENDING; /*!< (read-write) Hardware Request Pending
                                  Register */
    uint32_t SW_GROUP_PENDING; /*!< (read-write) Software Request Pending
                                  Register */

    /* Methods. */

    /**
     * Get DESC_CTRL0_0's RT_ORDER bit.
     *
     * Restore order
     */
    inline bool get_DESC_CTRL0_0_RT_ORDER() volatile
    {
        return DESC_CTRL0_0 & (1u << 21u);
    }

    /**
     * Set DESC_CTRL0_0's RT_ORDER bit.
     *
     * Restore order
     */
    inline void set_DESC_CTRL0_0_RT_ORDER() volatile
    {
        DESC_CTRL0_0 |= 1u << 21u;
    }

    /**
     * Clear DESC_CTRL0_0's RT_ORDER bit.
     *
     * Restore order
     */
    inline void clear_DESC_CTRL0_0_RT_ORDER() volatile
    {
        DESC_CTRL0_0 &= ~(1u << 21u);
    }

    /**
     * Toggle DESC_CTRL0_0's RT_ORDER bit.
     *
     * Restore order
     */
    inline void toggle_DESC_CTRL0_0_RT_ORDER() volatile
    {
        DESC_CTRL0_0 ^= 1u << 21u;
    }

    /**
     * Get DESC_CTRL0_0's SV_ORDER bit.
     *
     * Save Order
     */
    inline bool get_DESC_CTRL0_0_SV_ORDER() volatile
    {
        return DESC_CTRL0_0 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL0_0's SV_ORDER bit.
     *
     * Save Order
     */
    inline void set_DESC_CTRL0_0_SV_ORDER() volatile
    {
        DESC_CTRL0_0 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL0_0's SV_ORDER bit.
     *
     * Save Order
     */
    inline void clear_DESC_CTRL0_0_SV_ORDER() volatile
    {
        DESC_CTRL0_0 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL0_0's SV_ORDER bit.
     *
     * Save Order
     */
    inline void toggle_DESC_CTRL0_0_SV_ORDER() volatile
    {
        DESC_CTRL0_0 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL0_0's END field.
     *
     * End index
     */
    inline uint16_t get_DESC_CTRL0_0_END() volatile
    {
        return (DESC_CTRL0_0 >> 10u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_0's END field.
     *
     * End index
     */
    inline void set_DESC_CTRL0_0_END(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_0;

        curr &= ~(0b1111111111u << 10u);
        curr |= (value & 0b1111111111u) << 10u;

        DESC_CTRL0_0 = curr;
    }

    /**
     * Get DESC_CTRL0_0's START field.
     *
     * Start index
     */
    inline uint16_t get_DESC_CTRL0_0_START() volatile
    {
        return (DESC_CTRL0_0 >> 0u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_0's START field.
     *
     * Start index
     */
    inline void set_DESC_CTRL0_0_START(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_0;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        DESC_CTRL0_0 = curr;
    }

    /**
     * Get all of DESC_CTRL0_0's bit fields.
     *
     * (read-write) Descriptor Control0 0 Register
     */
    inline void get_DESC_CTRL0_0(bool &RT_ORDER, bool &SV_ORDER, uint16_t &END,
                                 uint16_t &START) volatile
    {
        uint32_t curr = DESC_CTRL0_0;

        RT_ORDER = curr & (1u << 21u);
        SV_ORDER = curr & (1u << 20u);
        END = (curr >> 10u) & 0b1111111111u;
        START = (curr >> 0u) & 0b1111111111u;
    }

    /**
     * Set all of DESC_CTRL0_0's bit fields.
     *
     * (read-write) Descriptor Control0 0 Register
     */
    inline void set_DESC_CTRL0_0(bool RT_ORDER, bool SV_ORDER, uint16_t END,
                                 uint16_t START) volatile
    {
        uint32_t curr = DESC_CTRL0_0;

        curr &= ~(0b1u << 21u);
        curr |= (RT_ORDER & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (SV_ORDER & 0b1u) << 20u;
        curr &= ~(0b1111111111u << 10u);
        curr |= (END & 0b1111111111u) << 10u;
        curr &= ~(0b1111111111u << 0u);
        curr |= (START & 0b1111111111u) << 0u;

        DESC_CTRL0_0 = curr;
    }

    /**
     * Get DESC_CTRL1_0's DL bit.
     *
     * Domain lock
     */
    inline bool get_DESC_CTRL1_0_DL() volatile
    {
        return DESC_CTRL1_0 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL1_0's DL bit.
     *
     * Domain lock
     */
    inline void set_DESC_CTRL1_0_DL() volatile
    {
        DESC_CTRL1_0 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL1_0's DL bit.
     *
     * Domain lock
     */
    inline void clear_DESC_CTRL1_0_DL() volatile
    {
        DESC_CTRL1_0 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL1_0's DL bit.
     *
     * Domain lock
     */
    inline void toggle_DESC_CTRL1_0_DL() volatile
    {
        DESC_CTRL1_0 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL1_0's WL bit.
     *
     * Write Lock
     */
    inline bool get_DESC_CTRL1_0_WL() volatile
    {
        return DESC_CTRL1_0 & (1u << 19u);
    }

    /**
     * Set DESC_CTRL1_0's WL bit.
     *
     * Write Lock
     */
    inline void set_DESC_CTRL1_0_WL() volatile
    {
        DESC_CTRL1_0 |= 1u << 19u;
    }

    /**
     * Clear DESC_CTRL1_0's WL bit.
     *
     * Write Lock
     */
    inline void clear_DESC_CTRL1_0_WL() volatile
    {
        DESC_CTRL1_0 &= ~(1u << 19u);
    }

    /**
     * Toggle DESC_CTRL1_0's WL bit.
     *
     * Write Lock
     */
    inline void toggle_DESC_CTRL1_0_WL() volatile
    {
        DESC_CTRL1_0 ^= 1u << 19u;
    }

    /**
     * Get DESC_CTRL1_0's RL bit.
     *
     * Read Lock
     */
    inline bool get_DESC_CTRL1_0_RL() volatile
    {
        return DESC_CTRL1_0 & (1u << 18u);
    }

    /**
     * Set DESC_CTRL1_0's RL bit.
     *
     * Read Lock
     */
    inline void set_DESC_CTRL1_0_RL() volatile
    {
        DESC_CTRL1_0 |= 1u << 18u;
    }

    /**
     * Clear DESC_CTRL1_0's RL bit.
     *
     * Read Lock
     */
    inline void clear_DESC_CTRL1_0_RL() volatile
    {
        DESC_CTRL1_0 &= ~(1u << 18u);
    }

    /**
     * Toggle DESC_CTRL1_0's RL bit.
     *
     * Read Lock
     */
    inline void toggle_DESC_CTRL1_0_RL() volatile
    {
        DESC_CTRL1_0 ^= 1u << 18u;
    }

    /**
     * Get DESC_CTRL1_0's CPUD field.
     *
     * CPU Domain
     */
    inline uint8_t get_DESC_CTRL1_0_CPUD() volatile
    {
        return (DESC_CTRL1_0 >> 16u) & 0b11u;
    }

    /**
     * Set DESC_CTRL1_0's CPUD field.
     *
     * CPU Domain
     */
    inline void set_DESC_CTRL1_0_CPUD(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_0;

        curr &= ~(0b11u << 16u);
        curr |= (value & 0b11u) << 16u;

        DESC_CTRL1_0 = curr;
    }

    /**
     * Get DESC_CTRL1_0's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline uint8_t get_DESC_CTRL1_0_RT_PRIORITY() volatile
    {
        return (DESC_CTRL1_0 >> 12u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_0's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline void set_DESC_CTRL1_0_RT_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_0;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        DESC_CTRL1_0 = curr;
    }

    /**
     * Get DESC_CTRL1_0's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline uint8_t get_DESC_CTRL1_0_SV_PRIORITY() volatile
    {
        return (DESC_CTRL1_0 >> 8u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_0's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline void set_DESC_CTRL1_0_SV_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_0;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        DESC_CTRL1_0 = curr;
    }

    /**
     * Get DESC_CTRL1_0's GP_EN bit.
     *
     * Group Enable
     */
    inline bool get_DESC_CTRL1_0_GP_EN() volatile
    {
        return DESC_CTRL1_0 & (1u << 7u);
    }

    /**
     * Set DESC_CTRL1_0's GP_EN bit.
     *
     * Group Enable
     */
    inline void set_DESC_CTRL1_0_GP_EN() volatile
    {
        DESC_CTRL1_0 |= 1u << 7u;
    }

    /**
     * Clear DESC_CTRL1_0's GP_EN bit.
     *
     * Group Enable
     */
    inline void clear_DESC_CTRL1_0_GP_EN() volatile
    {
        DESC_CTRL1_0 &= ~(1u << 7u);
    }

    /**
     * Toggle DESC_CTRL1_0's GP_EN bit.
     *
     * Group Enable
     */
    inline void toggle_DESC_CTRL1_0_GP_EN() volatile
    {
        DESC_CTRL1_0 ^= 1u << 7u;
    }

    /**
     * Get DESC_CTRL1_0's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline SSARC_LP_DESC_CTRL1_0_POWER_DOMAIN
    get_DESC_CTRL1_0_POWER_DOMAIN() volatile
    {
        return SSARC_LP_DESC_CTRL1_0_POWER_DOMAIN((DESC_CTRL1_0 >> 4u) &
                                                  0b111u);
    }

    /**
     * Set DESC_CTRL1_0's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline void set_DESC_CTRL1_0_POWER_DOMAIN(
        SSARC_LP_DESC_CTRL1_0_POWER_DOMAIN value) volatile
    {
        uint32_t curr = DESC_CTRL1_0;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        DESC_CTRL1_0 = curr;
    }

    /**
     * Get DESC_CTRL1_0's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline bool get_DESC_CTRL1_0_SW_TRIG_RT() volatile
    {
        return DESC_CTRL1_0 & (1u << 1u);
    }

    /**
     * Set DESC_CTRL1_0's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void set_DESC_CTRL1_0_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_0 |= 1u << 1u;
    }

    /**
     * Clear DESC_CTRL1_0's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void clear_DESC_CTRL1_0_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_0 &= ~(1u << 1u);
    }

    /**
     * Toggle DESC_CTRL1_0's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void toggle_DESC_CTRL1_0_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_0 ^= 1u << 1u;
    }

    /**
     * Get DESC_CTRL1_0's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline bool get_DESC_CTRL1_0_SW_TRIG_SV() volatile
    {
        return DESC_CTRL1_0 & (1u << 0u);
    }

    /**
     * Set DESC_CTRL1_0's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void set_DESC_CTRL1_0_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_0 |= 1u << 0u;
    }

    /**
     * Clear DESC_CTRL1_0's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void clear_DESC_CTRL1_0_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_0 &= ~(1u << 0u);
    }

    /**
     * Toggle DESC_CTRL1_0's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void toggle_DESC_CTRL1_0_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_0 ^= 1u << 0u;
    }

    /**
     * Get all of DESC_CTRL1_0's bit fields.
     *
     * (read-write) Descriptor Control1 0 Register
     */
    inline void get_DESC_CTRL1_0(
        bool &DL, bool &WL, bool &RL, uint8_t &CPUD, uint8_t &RT_PRIORITY,
        uint8_t &SV_PRIORITY, bool &GP_EN,
        SSARC_LP_DESC_CTRL1_0_POWER_DOMAIN &POWER_DOMAIN, bool &SW_TRIG_RT,
        bool &SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_0;

        DL = curr & (1u << 20u);
        WL = curr & (1u << 19u);
        RL = curr & (1u << 18u);
        CPUD = (curr >> 16u) & 0b11u;
        RT_PRIORITY = (curr >> 12u) & 0b1111u;
        SV_PRIORITY = (curr >> 8u) & 0b1111u;
        GP_EN = curr & (1u << 7u);
        POWER_DOMAIN =
            SSARC_LP_DESC_CTRL1_0_POWER_DOMAIN((curr >> 4u) & 0b111u);
        SW_TRIG_RT = curr & (1u << 1u);
        SW_TRIG_SV = curr & (1u << 0u);
    }

    /**
     * Set all of DESC_CTRL1_0's bit fields.
     *
     * (read-write) Descriptor Control1 0 Register
     */
    inline void set_DESC_CTRL1_0(
        bool DL, bool WL, bool RL, uint8_t CPUD, uint8_t RT_PRIORITY,
        uint8_t SV_PRIORITY, bool GP_EN,
        SSARC_LP_DESC_CTRL1_0_POWER_DOMAIN POWER_DOMAIN, bool SW_TRIG_RT,
        bool SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_0;

        curr &= ~(0b1u << 20u);
        curr |= (DL & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (WL & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (RL & 0b1u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (CPUD & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (RT_PRIORITY & 0b1111u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (SV_PRIORITY & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (GP_EN & 0b1u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(POWER_DOMAIN) & 0b111u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (SW_TRIG_RT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG_SV & 0b1u) << 0u;

        DESC_CTRL1_0 = curr;
    }

    /**
     * Get DESC_ADDR_UP_0's ADDR_UP field.
     *
     * Address field (High)
     */
    inline uint32_t get_DESC_ADDR_UP_0_ADDR_UP() volatile
    {
        return (DESC_ADDR_UP_0 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_UP_0's ADDR_UP field.
     *
     * Address field (High)
     */
    inline void set_DESC_ADDR_UP_0_ADDR_UP(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_UP_0;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_UP_0 = curr;
    }

    /**
     * Get DESC_ADDR_DOWN_0's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline uint32_t get_DESC_ADDR_DOWN_0_ADDR_DOWN() volatile
    {
        return (DESC_ADDR_DOWN_0 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_DOWN_0's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline void set_DESC_ADDR_DOWN_0_ADDR_DOWN(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_DOWN_0;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_DOWN_0 = curr;
    }

    /**
     * Get DESC_CTRL0_1's RT_ORDER bit.
     *
     * Restore order
     */
    inline bool get_DESC_CTRL0_1_RT_ORDER() volatile
    {
        return DESC_CTRL0_1 & (1u << 21u);
    }

    /**
     * Set DESC_CTRL0_1's RT_ORDER bit.
     *
     * Restore order
     */
    inline void set_DESC_CTRL0_1_RT_ORDER() volatile
    {
        DESC_CTRL0_1 |= 1u << 21u;
    }

    /**
     * Clear DESC_CTRL0_1's RT_ORDER bit.
     *
     * Restore order
     */
    inline void clear_DESC_CTRL0_1_RT_ORDER() volatile
    {
        DESC_CTRL0_1 &= ~(1u << 21u);
    }

    /**
     * Toggle DESC_CTRL0_1's RT_ORDER bit.
     *
     * Restore order
     */
    inline void toggle_DESC_CTRL0_1_RT_ORDER() volatile
    {
        DESC_CTRL0_1 ^= 1u << 21u;
    }

    /**
     * Get DESC_CTRL0_1's SV_ORDER bit.
     *
     * Save Order
     */
    inline bool get_DESC_CTRL0_1_SV_ORDER() volatile
    {
        return DESC_CTRL0_1 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL0_1's SV_ORDER bit.
     *
     * Save Order
     */
    inline void set_DESC_CTRL0_1_SV_ORDER() volatile
    {
        DESC_CTRL0_1 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL0_1's SV_ORDER bit.
     *
     * Save Order
     */
    inline void clear_DESC_CTRL0_1_SV_ORDER() volatile
    {
        DESC_CTRL0_1 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL0_1's SV_ORDER bit.
     *
     * Save Order
     */
    inline void toggle_DESC_CTRL0_1_SV_ORDER() volatile
    {
        DESC_CTRL0_1 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL0_1's END field.
     *
     * End index
     */
    inline uint16_t get_DESC_CTRL0_1_END() volatile
    {
        return (DESC_CTRL0_1 >> 10u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_1's END field.
     *
     * End index
     */
    inline void set_DESC_CTRL0_1_END(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_1;

        curr &= ~(0b1111111111u << 10u);
        curr |= (value & 0b1111111111u) << 10u;

        DESC_CTRL0_1 = curr;
    }

    /**
     * Get DESC_CTRL0_1's START field.
     *
     * Start index
     */
    inline uint16_t get_DESC_CTRL0_1_START() volatile
    {
        return (DESC_CTRL0_1 >> 0u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_1's START field.
     *
     * Start index
     */
    inline void set_DESC_CTRL0_1_START(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_1;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        DESC_CTRL0_1 = curr;
    }

    /**
     * Get all of DESC_CTRL0_1's bit fields.
     *
     * (read-write) Descriptor Control0 1 Register
     */
    inline void get_DESC_CTRL0_1(bool &RT_ORDER, bool &SV_ORDER, uint16_t &END,
                                 uint16_t &START) volatile
    {
        uint32_t curr = DESC_CTRL0_1;

        RT_ORDER = curr & (1u << 21u);
        SV_ORDER = curr & (1u << 20u);
        END = (curr >> 10u) & 0b1111111111u;
        START = (curr >> 0u) & 0b1111111111u;
    }

    /**
     * Set all of DESC_CTRL0_1's bit fields.
     *
     * (read-write) Descriptor Control0 1 Register
     */
    inline void set_DESC_CTRL0_1(bool RT_ORDER, bool SV_ORDER, uint16_t END,
                                 uint16_t START) volatile
    {
        uint32_t curr = DESC_CTRL0_1;

        curr &= ~(0b1u << 21u);
        curr |= (RT_ORDER & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (SV_ORDER & 0b1u) << 20u;
        curr &= ~(0b1111111111u << 10u);
        curr |= (END & 0b1111111111u) << 10u;
        curr &= ~(0b1111111111u << 0u);
        curr |= (START & 0b1111111111u) << 0u;

        DESC_CTRL0_1 = curr;
    }

    /**
     * Get DESC_CTRL1_1's DL bit.
     *
     * Domain lock
     */
    inline bool get_DESC_CTRL1_1_DL() volatile
    {
        return DESC_CTRL1_1 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL1_1's DL bit.
     *
     * Domain lock
     */
    inline void set_DESC_CTRL1_1_DL() volatile
    {
        DESC_CTRL1_1 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL1_1's DL bit.
     *
     * Domain lock
     */
    inline void clear_DESC_CTRL1_1_DL() volatile
    {
        DESC_CTRL1_1 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL1_1's DL bit.
     *
     * Domain lock
     */
    inline void toggle_DESC_CTRL1_1_DL() volatile
    {
        DESC_CTRL1_1 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL1_1's WL bit.
     *
     * Write Lock
     */
    inline bool get_DESC_CTRL1_1_WL() volatile
    {
        return DESC_CTRL1_1 & (1u << 19u);
    }

    /**
     * Set DESC_CTRL1_1's WL bit.
     *
     * Write Lock
     */
    inline void set_DESC_CTRL1_1_WL() volatile
    {
        DESC_CTRL1_1 |= 1u << 19u;
    }

    /**
     * Clear DESC_CTRL1_1's WL bit.
     *
     * Write Lock
     */
    inline void clear_DESC_CTRL1_1_WL() volatile
    {
        DESC_CTRL1_1 &= ~(1u << 19u);
    }

    /**
     * Toggle DESC_CTRL1_1's WL bit.
     *
     * Write Lock
     */
    inline void toggle_DESC_CTRL1_1_WL() volatile
    {
        DESC_CTRL1_1 ^= 1u << 19u;
    }

    /**
     * Get DESC_CTRL1_1's RL bit.
     *
     * Read Lock
     */
    inline bool get_DESC_CTRL1_1_RL() volatile
    {
        return DESC_CTRL1_1 & (1u << 18u);
    }

    /**
     * Set DESC_CTRL1_1's RL bit.
     *
     * Read Lock
     */
    inline void set_DESC_CTRL1_1_RL() volatile
    {
        DESC_CTRL1_1 |= 1u << 18u;
    }

    /**
     * Clear DESC_CTRL1_1's RL bit.
     *
     * Read Lock
     */
    inline void clear_DESC_CTRL1_1_RL() volatile
    {
        DESC_CTRL1_1 &= ~(1u << 18u);
    }

    /**
     * Toggle DESC_CTRL1_1's RL bit.
     *
     * Read Lock
     */
    inline void toggle_DESC_CTRL1_1_RL() volatile
    {
        DESC_CTRL1_1 ^= 1u << 18u;
    }

    /**
     * Get DESC_CTRL1_1's CPUD field.
     *
     * CPU Domain
     */
    inline uint8_t get_DESC_CTRL1_1_CPUD() volatile
    {
        return (DESC_CTRL1_1 >> 16u) & 0b11u;
    }

    /**
     * Set DESC_CTRL1_1's CPUD field.
     *
     * CPU Domain
     */
    inline void set_DESC_CTRL1_1_CPUD(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_1;

        curr &= ~(0b11u << 16u);
        curr |= (value & 0b11u) << 16u;

        DESC_CTRL1_1 = curr;
    }

    /**
     * Get DESC_CTRL1_1's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline uint8_t get_DESC_CTRL1_1_RT_PRIORITY() volatile
    {
        return (DESC_CTRL1_1 >> 12u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_1's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline void set_DESC_CTRL1_1_RT_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_1;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        DESC_CTRL1_1 = curr;
    }

    /**
     * Get DESC_CTRL1_1's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline uint8_t get_DESC_CTRL1_1_SV_PRIORITY() volatile
    {
        return (DESC_CTRL1_1 >> 8u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_1's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline void set_DESC_CTRL1_1_SV_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_1;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        DESC_CTRL1_1 = curr;
    }

    /**
     * Get DESC_CTRL1_1's GP_EN bit.
     *
     * Group Enable
     */
    inline bool get_DESC_CTRL1_1_GP_EN() volatile
    {
        return DESC_CTRL1_1 & (1u << 7u);
    }

    /**
     * Set DESC_CTRL1_1's GP_EN bit.
     *
     * Group Enable
     */
    inline void set_DESC_CTRL1_1_GP_EN() volatile
    {
        DESC_CTRL1_1 |= 1u << 7u;
    }

    /**
     * Clear DESC_CTRL1_1's GP_EN bit.
     *
     * Group Enable
     */
    inline void clear_DESC_CTRL1_1_GP_EN() volatile
    {
        DESC_CTRL1_1 &= ~(1u << 7u);
    }

    /**
     * Toggle DESC_CTRL1_1's GP_EN bit.
     *
     * Group Enable
     */
    inline void toggle_DESC_CTRL1_1_GP_EN() volatile
    {
        DESC_CTRL1_1 ^= 1u << 7u;
    }

    /**
     * Get DESC_CTRL1_1's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline SSARC_LP_DESC_CTRL1_1_POWER_DOMAIN
    get_DESC_CTRL1_1_POWER_DOMAIN() volatile
    {
        return SSARC_LP_DESC_CTRL1_1_POWER_DOMAIN((DESC_CTRL1_1 >> 4u) &
                                                  0b111u);
    }

    /**
     * Set DESC_CTRL1_1's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline void set_DESC_CTRL1_1_POWER_DOMAIN(
        SSARC_LP_DESC_CTRL1_1_POWER_DOMAIN value) volatile
    {
        uint32_t curr = DESC_CTRL1_1;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        DESC_CTRL1_1 = curr;
    }

    /**
     * Get DESC_CTRL1_1's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline bool get_DESC_CTRL1_1_SW_TRIG_RT() volatile
    {
        return DESC_CTRL1_1 & (1u << 1u);
    }

    /**
     * Set DESC_CTRL1_1's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void set_DESC_CTRL1_1_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_1 |= 1u << 1u;
    }

    /**
     * Clear DESC_CTRL1_1's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void clear_DESC_CTRL1_1_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_1 &= ~(1u << 1u);
    }

    /**
     * Toggle DESC_CTRL1_1's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void toggle_DESC_CTRL1_1_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_1 ^= 1u << 1u;
    }

    /**
     * Get DESC_CTRL1_1's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline bool get_DESC_CTRL1_1_SW_TRIG_SV() volatile
    {
        return DESC_CTRL1_1 & (1u << 0u);
    }

    /**
     * Set DESC_CTRL1_1's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void set_DESC_CTRL1_1_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_1 |= 1u << 0u;
    }

    /**
     * Clear DESC_CTRL1_1's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void clear_DESC_CTRL1_1_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_1 &= ~(1u << 0u);
    }

    /**
     * Toggle DESC_CTRL1_1's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void toggle_DESC_CTRL1_1_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_1 ^= 1u << 0u;
    }

    /**
     * Get all of DESC_CTRL1_1's bit fields.
     *
     * (read-write) Descriptor Control1 1 Register
     */
    inline void get_DESC_CTRL1_1(
        bool &DL, bool &WL, bool &RL, uint8_t &CPUD, uint8_t &RT_PRIORITY,
        uint8_t &SV_PRIORITY, bool &GP_EN,
        SSARC_LP_DESC_CTRL1_1_POWER_DOMAIN &POWER_DOMAIN, bool &SW_TRIG_RT,
        bool &SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_1;

        DL = curr & (1u << 20u);
        WL = curr & (1u << 19u);
        RL = curr & (1u << 18u);
        CPUD = (curr >> 16u) & 0b11u;
        RT_PRIORITY = (curr >> 12u) & 0b1111u;
        SV_PRIORITY = (curr >> 8u) & 0b1111u;
        GP_EN = curr & (1u << 7u);
        POWER_DOMAIN =
            SSARC_LP_DESC_CTRL1_1_POWER_DOMAIN((curr >> 4u) & 0b111u);
        SW_TRIG_RT = curr & (1u << 1u);
        SW_TRIG_SV = curr & (1u << 0u);
    }

    /**
     * Set all of DESC_CTRL1_1's bit fields.
     *
     * (read-write) Descriptor Control1 1 Register
     */
    inline void set_DESC_CTRL1_1(
        bool DL, bool WL, bool RL, uint8_t CPUD, uint8_t RT_PRIORITY,
        uint8_t SV_PRIORITY, bool GP_EN,
        SSARC_LP_DESC_CTRL1_1_POWER_DOMAIN POWER_DOMAIN, bool SW_TRIG_RT,
        bool SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_1;

        curr &= ~(0b1u << 20u);
        curr |= (DL & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (WL & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (RL & 0b1u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (CPUD & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (RT_PRIORITY & 0b1111u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (SV_PRIORITY & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (GP_EN & 0b1u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(POWER_DOMAIN) & 0b111u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (SW_TRIG_RT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG_SV & 0b1u) << 0u;

        DESC_CTRL1_1 = curr;
    }

    /**
     * Get DESC_ADDR_UP_1's ADDR_UP field.
     *
     * Address field (High)
     */
    inline uint32_t get_DESC_ADDR_UP_1_ADDR_UP() volatile
    {
        return (DESC_ADDR_UP_1 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_UP_1's ADDR_UP field.
     *
     * Address field (High)
     */
    inline void set_DESC_ADDR_UP_1_ADDR_UP(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_UP_1;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_UP_1 = curr;
    }

    /**
     * Get DESC_ADDR_DOWN_1's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline uint32_t get_DESC_ADDR_DOWN_1_ADDR_DOWN() volatile
    {
        return (DESC_ADDR_DOWN_1 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_DOWN_1's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline void set_DESC_ADDR_DOWN_1_ADDR_DOWN(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_DOWN_1;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_DOWN_1 = curr;
    }

    /**
     * Get DESC_CTRL0_2's RT_ORDER bit.
     *
     * Restore order
     */
    inline bool get_DESC_CTRL0_2_RT_ORDER() volatile
    {
        return DESC_CTRL0_2 & (1u << 21u);
    }

    /**
     * Set DESC_CTRL0_2's RT_ORDER bit.
     *
     * Restore order
     */
    inline void set_DESC_CTRL0_2_RT_ORDER() volatile
    {
        DESC_CTRL0_2 |= 1u << 21u;
    }

    /**
     * Clear DESC_CTRL0_2's RT_ORDER bit.
     *
     * Restore order
     */
    inline void clear_DESC_CTRL0_2_RT_ORDER() volatile
    {
        DESC_CTRL0_2 &= ~(1u << 21u);
    }

    /**
     * Toggle DESC_CTRL0_2's RT_ORDER bit.
     *
     * Restore order
     */
    inline void toggle_DESC_CTRL0_2_RT_ORDER() volatile
    {
        DESC_CTRL0_2 ^= 1u << 21u;
    }

    /**
     * Get DESC_CTRL0_2's SV_ORDER bit.
     *
     * Save Order
     */
    inline bool get_DESC_CTRL0_2_SV_ORDER() volatile
    {
        return DESC_CTRL0_2 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL0_2's SV_ORDER bit.
     *
     * Save Order
     */
    inline void set_DESC_CTRL0_2_SV_ORDER() volatile
    {
        DESC_CTRL0_2 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL0_2's SV_ORDER bit.
     *
     * Save Order
     */
    inline void clear_DESC_CTRL0_2_SV_ORDER() volatile
    {
        DESC_CTRL0_2 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL0_2's SV_ORDER bit.
     *
     * Save Order
     */
    inline void toggle_DESC_CTRL0_2_SV_ORDER() volatile
    {
        DESC_CTRL0_2 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL0_2's END field.
     *
     * End index
     */
    inline uint16_t get_DESC_CTRL0_2_END() volatile
    {
        return (DESC_CTRL0_2 >> 10u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_2's END field.
     *
     * End index
     */
    inline void set_DESC_CTRL0_2_END(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_2;

        curr &= ~(0b1111111111u << 10u);
        curr |= (value & 0b1111111111u) << 10u;

        DESC_CTRL0_2 = curr;
    }

    /**
     * Get DESC_CTRL0_2's START field.
     *
     * Start index
     */
    inline uint16_t get_DESC_CTRL0_2_START() volatile
    {
        return (DESC_CTRL0_2 >> 0u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_2's START field.
     *
     * Start index
     */
    inline void set_DESC_CTRL0_2_START(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_2;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        DESC_CTRL0_2 = curr;
    }

    /**
     * Get all of DESC_CTRL0_2's bit fields.
     *
     * (read-write) Descriptor Control0 2 Register
     */
    inline void get_DESC_CTRL0_2(bool &RT_ORDER, bool &SV_ORDER, uint16_t &END,
                                 uint16_t &START) volatile
    {
        uint32_t curr = DESC_CTRL0_2;

        RT_ORDER = curr & (1u << 21u);
        SV_ORDER = curr & (1u << 20u);
        END = (curr >> 10u) & 0b1111111111u;
        START = (curr >> 0u) & 0b1111111111u;
    }

    /**
     * Set all of DESC_CTRL0_2's bit fields.
     *
     * (read-write) Descriptor Control0 2 Register
     */
    inline void set_DESC_CTRL0_2(bool RT_ORDER, bool SV_ORDER, uint16_t END,
                                 uint16_t START) volatile
    {
        uint32_t curr = DESC_CTRL0_2;

        curr &= ~(0b1u << 21u);
        curr |= (RT_ORDER & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (SV_ORDER & 0b1u) << 20u;
        curr &= ~(0b1111111111u << 10u);
        curr |= (END & 0b1111111111u) << 10u;
        curr &= ~(0b1111111111u << 0u);
        curr |= (START & 0b1111111111u) << 0u;

        DESC_CTRL0_2 = curr;
    }

    /**
     * Get DESC_CTRL1_2's DL bit.
     *
     * Domain lock
     */
    inline bool get_DESC_CTRL1_2_DL() volatile
    {
        return DESC_CTRL1_2 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL1_2's DL bit.
     *
     * Domain lock
     */
    inline void set_DESC_CTRL1_2_DL() volatile
    {
        DESC_CTRL1_2 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL1_2's DL bit.
     *
     * Domain lock
     */
    inline void clear_DESC_CTRL1_2_DL() volatile
    {
        DESC_CTRL1_2 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL1_2's DL bit.
     *
     * Domain lock
     */
    inline void toggle_DESC_CTRL1_2_DL() volatile
    {
        DESC_CTRL1_2 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL1_2's WL bit.
     *
     * Write Lock
     */
    inline bool get_DESC_CTRL1_2_WL() volatile
    {
        return DESC_CTRL1_2 & (1u << 19u);
    }

    /**
     * Set DESC_CTRL1_2's WL bit.
     *
     * Write Lock
     */
    inline void set_DESC_CTRL1_2_WL() volatile
    {
        DESC_CTRL1_2 |= 1u << 19u;
    }

    /**
     * Clear DESC_CTRL1_2's WL bit.
     *
     * Write Lock
     */
    inline void clear_DESC_CTRL1_2_WL() volatile
    {
        DESC_CTRL1_2 &= ~(1u << 19u);
    }

    /**
     * Toggle DESC_CTRL1_2's WL bit.
     *
     * Write Lock
     */
    inline void toggle_DESC_CTRL1_2_WL() volatile
    {
        DESC_CTRL1_2 ^= 1u << 19u;
    }

    /**
     * Get DESC_CTRL1_2's RL bit.
     *
     * Read Lock
     */
    inline bool get_DESC_CTRL1_2_RL() volatile
    {
        return DESC_CTRL1_2 & (1u << 18u);
    }

    /**
     * Set DESC_CTRL1_2's RL bit.
     *
     * Read Lock
     */
    inline void set_DESC_CTRL1_2_RL() volatile
    {
        DESC_CTRL1_2 |= 1u << 18u;
    }

    /**
     * Clear DESC_CTRL1_2's RL bit.
     *
     * Read Lock
     */
    inline void clear_DESC_CTRL1_2_RL() volatile
    {
        DESC_CTRL1_2 &= ~(1u << 18u);
    }

    /**
     * Toggle DESC_CTRL1_2's RL bit.
     *
     * Read Lock
     */
    inline void toggle_DESC_CTRL1_2_RL() volatile
    {
        DESC_CTRL1_2 ^= 1u << 18u;
    }

    /**
     * Get DESC_CTRL1_2's CPUD field.
     *
     * CPU Domain
     */
    inline uint8_t get_DESC_CTRL1_2_CPUD() volatile
    {
        return (DESC_CTRL1_2 >> 16u) & 0b11u;
    }

    /**
     * Set DESC_CTRL1_2's CPUD field.
     *
     * CPU Domain
     */
    inline void set_DESC_CTRL1_2_CPUD(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_2;

        curr &= ~(0b11u << 16u);
        curr |= (value & 0b11u) << 16u;

        DESC_CTRL1_2 = curr;
    }

    /**
     * Get DESC_CTRL1_2's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline uint8_t get_DESC_CTRL1_2_RT_PRIORITY() volatile
    {
        return (DESC_CTRL1_2 >> 12u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_2's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline void set_DESC_CTRL1_2_RT_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_2;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        DESC_CTRL1_2 = curr;
    }

    /**
     * Get DESC_CTRL1_2's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline uint8_t get_DESC_CTRL1_2_SV_PRIORITY() volatile
    {
        return (DESC_CTRL1_2 >> 8u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_2's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline void set_DESC_CTRL1_2_SV_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_2;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        DESC_CTRL1_2 = curr;
    }

    /**
     * Get DESC_CTRL1_2's GP_EN bit.
     *
     * Group Enable
     */
    inline bool get_DESC_CTRL1_2_GP_EN() volatile
    {
        return DESC_CTRL1_2 & (1u << 7u);
    }

    /**
     * Set DESC_CTRL1_2's GP_EN bit.
     *
     * Group Enable
     */
    inline void set_DESC_CTRL1_2_GP_EN() volatile
    {
        DESC_CTRL1_2 |= 1u << 7u;
    }

    /**
     * Clear DESC_CTRL1_2's GP_EN bit.
     *
     * Group Enable
     */
    inline void clear_DESC_CTRL1_2_GP_EN() volatile
    {
        DESC_CTRL1_2 &= ~(1u << 7u);
    }

    /**
     * Toggle DESC_CTRL1_2's GP_EN bit.
     *
     * Group Enable
     */
    inline void toggle_DESC_CTRL1_2_GP_EN() volatile
    {
        DESC_CTRL1_2 ^= 1u << 7u;
    }

    /**
     * Get DESC_CTRL1_2's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline SSARC_LP_DESC_CTRL1_2_POWER_DOMAIN
    get_DESC_CTRL1_2_POWER_DOMAIN() volatile
    {
        return SSARC_LP_DESC_CTRL1_2_POWER_DOMAIN((DESC_CTRL1_2 >> 4u) &
                                                  0b111u);
    }

    /**
     * Set DESC_CTRL1_2's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline void set_DESC_CTRL1_2_POWER_DOMAIN(
        SSARC_LP_DESC_CTRL1_2_POWER_DOMAIN value) volatile
    {
        uint32_t curr = DESC_CTRL1_2;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        DESC_CTRL1_2 = curr;
    }

    /**
     * Get DESC_CTRL1_2's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline bool get_DESC_CTRL1_2_SW_TRIG_RT() volatile
    {
        return DESC_CTRL1_2 & (1u << 1u);
    }

    /**
     * Set DESC_CTRL1_2's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void set_DESC_CTRL1_2_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_2 |= 1u << 1u;
    }

    /**
     * Clear DESC_CTRL1_2's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void clear_DESC_CTRL1_2_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_2 &= ~(1u << 1u);
    }

    /**
     * Toggle DESC_CTRL1_2's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void toggle_DESC_CTRL1_2_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_2 ^= 1u << 1u;
    }

    /**
     * Get DESC_CTRL1_2's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline bool get_DESC_CTRL1_2_SW_TRIG_SV() volatile
    {
        return DESC_CTRL1_2 & (1u << 0u);
    }

    /**
     * Set DESC_CTRL1_2's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void set_DESC_CTRL1_2_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_2 |= 1u << 0u;
    }

    /**
     * Clear DESC_CTRL1_2's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void clear_DESC_CTRL1_2_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_2 &= ~(1u << 0u);
    }

    /**
     * Toggle DESC_CTRL1_2's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void toggle_DESC_CTRL1_2_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_2 ^= 1u << 0u;
    }

    /**
     * Get all of DESC_CTRL1_2's bit fields.
     *
     * (read-write) Descriptor Control1 2 Register
     */
    inline void get_DESC_CTRL1_2(
        bool &DL, bool &WL, bool &RL, uint8_t &CPUD, uint8_t &RT_PRIORITY,
        uint8_t &SV_PRIORITY, bool &GP_EN,
        SSARC_LP_DESC_CTRL1_2_POWER_DOMAIN &POWER_DOMAIN, bool &SW_TRIG_RT,
        bool &SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_2;

        DL = curr & (1u << 20u);
        WL = curr & (1u << 19u);
        RL = curr & (1u << 18u);
        CPUD = (curr >> 16u) & 0b11u;
        RT_PRIORITY = (curr >> 12u) & 0b1111u;
        SV_PRIORITY = (curr >> 8u) & 0b1111u;
        GP_EN = curr & (1u << 7u);
        POWER_DOMAIN =
            SSARC_LP_DESC_CTRL1_2_POWER_DOMAIN((curr >> 4u) & 0b111u);
        SW_TRIG_RT = curr & (1u << 1u);
        SW_TRIG_SV = curr & (1u << 0u);
    }

    /**
     * Set all of DESC_CTRL1_2's bit fields.
     *
     * (read-write) Descriptor Control1 2 Register
     */
    inline void set_DESC_CTRL1_2(
        bool DL, bool WL, bool RL, uint8_t CPUD, uint8_t RT_PRIORITY,
        uint8_t SV_PRIORITY, bool GP_EN,
        SSARC_LP_DESC_CTRL1_2_POWER_DOMAIN POWER_DOMAIN, bool SW_TRIG_RT,
        bool SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_2;

        curr &= ~(0b1u << 20u);
        curr |= (DL & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (WL & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (RL & 0b1u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (CPUD & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (RT_PRIORITY & 0b1111u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (SV_PRIORITY & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (GP_EN & 0b1u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(POWER_DOMAIN) & 0b111u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (SW_TRIG_RT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG_SV & 0b1u) << 0u;

        DESC_CTRL1_2 = curr;
    }

    /**
     * Get DESC_ADDR_UP_2's ADDR_UP field.
     *
     * Address field (High)
     */
    inline uint32_t get_DESC_ADDR_UP_2_ADDR_UP() volatile
    {
        return (DESC_ADDR_UP_2 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_UP_2's ADDR_UP field.
     *
     * Address field (High)
     */
    inline void set_DESC_ADDR_UP_2_ADDR_UP(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_UP_2;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_UP_2 = curr;
    }

    /**
     * Get DESC_ADDR_DOWN_2's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline uint32_t get_DESC_ADDR_DOWN_2_ADDR_DOWN() volatile
    {
        return (DESC_ADDR_DOWN_2 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_DOWN_2's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline void set_DESC_ADDR_DOWN_2_ADDR_DOWN(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_DOWN_2;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_DOWN_2 = curr;
    }

    /**
     * Get DESC_CTRL0_3's RT_ORDER bit.
     *
     * Restore order
     */
    inline bool get_DESC_CTRL0_3_RT_ORDER() volatile
    {
        return DESC_CTRL0_3 & (1u << 21u);
    }

    /**
     * Set DESC_CTRL0_3's RT_ORDER bit.
     *
     * Restore order
     */
    inline void set_DESC_CTRL0_3_RT_ORDER() volatile
    {
        DESC_CTRL0_3 |= 1u << 21u;
    }

    /**
     * Clear DESC_CTRL0_3's RT_ORDER bit.
     *
     * Restore order
     */
    inline void clear_DESC_CTRL0_3_RT_ORDER() volatile
    {
        DESC_CTRL0_3 &= ~(1u << 21u);
    }

    /**
     * Toggle DESC_CTRL0_3's RT_ORDER bit.
     *
     * Restore order
     */
    inline void toggle_DESC_CTRL0_3_RT_ORDER() volatile
    {
        DESC_CTRL0_3 ^= 1u << 21u;
    }

    /**
     * Get DESC_CTRL0_3's SV_ORDER bit.
     *
     * Save Order
     */
    inline bool get_DESC_CTRL0_3_SV_ORDER() volatile
    {
        return DESC_CTRL0_3 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL0_3's SV_ORDER bit.
     *
     * Save Order
     */
    inline void set_DESC_CTRL0_3_SV_ORDER() volatile
    {
        DESC_CTRL0_3 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL0_3's SV_ORDER bit.
     *
     * Save Order
     */
    inline void clear_DESC_CTRL0_3_SV_ORDER() volatile
    {
        DESC_CTRL0_3 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL0_3's SV_ORDER bit.
     *
     * Save Order
     */
    inline void toggle_DESC_CTRL0_3_SV_ORDER() volatile
    {
        DESC_CTRL0_3 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL0_3's END field.
     *
     * End index
     */
    inline uint16_t get_DESC_CTRL0_3_END() volatile
    {
        return (DESC_CTRL0_3 >> 10u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_3's END field.
     *
     * End index
     */
    inline void set_DESC_CTRL0_3_END(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_3;

        curr &= ~(0b1111111111u << 10u);
        curr |= (value & 0b1111111111u) << 10u;

        DESC_CTRL0_3 = curr;
    }

    /**
     * Get DESC_CTRL0_3's START field.
     *
     * Start index
     */
    inline uint16_t get_DESC_CTRL0_3_START() volatile
    {
        return (DESC_CTRL0_3 >> 0u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_3's START field.
     *
     * Start index
     */
    inline void set_DESC_CTRL0_3_START(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_3;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        DESC_CTRL0_3 = curr;
    }

    /**
     * Get all of DESC_CTRL0_3's bit fields.
     *
     * (read-write) Descriptor Control0 3 Register
     */
    inline void get_DESC_CTRL0_3(bool &RT_ORDER, bool &SV_ORDER, uint16_t &END,
                                 uint16_t &START) volatile
    {
        uint32_t curr = DESC_CTRL0_3;

        RT_ORDER = curr & (1u << 21u);
        SV_ORDER = curr & (1u << 20u);
        END = (curr >> 10u) & 0b1111111111u;
        START = (curr >> 0u) & 0b1111111111u;
    }

    /**
     * Set all of DESC_CTRL0_3's bit fields.
     *
     * (read-write) Descriptor Control0 3 Register
     */
    inline void set_DESC_CTRL0_3(bool RT_ORDER, bool SV_ORDER, uint16_t END,
                                 uint16_t START) volatile
    {
        uint32_t curr = DESC_CTRL0_3;

        curr &= ~(0b1u << 21u);
        curr |= (RT_ORDER & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (SV_ORDER & 0b1u) << 20u;
        curr &= ~(0b1111111111u << 10u);
        curr |= (END & 0b1111111111u) << 10u;
        curr &= ~(0b1111111111u << 0u);
        curr |= (START & 0b1111111111u) << 0u;

        DESC_CTRL0_3 = curr;
    }

    /**
     * Get DESC_CTRL1_3's DL bit.
     *
     * Domain lock
     */
    inline bool get_DESC_CTRL1_3_DL() volatile
    {
        return DESC_CTRL1_3 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL1_3's DL bit.
     *
     * Domain lock
     */
    inline void set_DESC_CTRL1_3_DL() volatile
    {
        DESC_CTRL1_3 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL1_3's DL bit.
     *
     * Domain lock
     */
    inline void clear_DESC_CTRL1_3_DL() volatile
    {
        DESC_CTRL1_3 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL1_3's DL bit.
     *
     * Domain lock
     */
    inline void toggle_DESC_CTRL1_3_DL() volatile
    {
        DESC_CTRL1_3 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL1_3's WL bit.
     *
     * Write Lock
     */
    inline bool get_DESC_CTRL1_3_WL() volatile
    {
        return DESC_CTRL1_3 & (1u << 19u);
    }

    /**
     * Set DESC_CTRL1_3's WL bit.
     *
     * Write Lock
     */
    inline void set_DESC_CTRL1_3_WL() volatile
    {
        DESC_CTRL1_3 |= 1u << 19u;
    }

    /**
     * Clear DESC_CTRL1_3's WL bit.
     *
     * Write Lock
     */
    inline void clear_DESC_CTRL1_3_WL() volatile
    {
        DESC_CTRL1_3 &= ~(1u << 19u);
    }

    /**
     * Toggle DESC_CTRL1_3's WL bit.
     *
     * Write Lock
     */
    inline void toggle_DESC_CTRL1_3_WL() volatile
    {
        DESC_CTRL1_3 ^= 1u << 19u;
    }

    /**
     * Get DESC_CTRL1_3's RL bit.
     *
     * Read Lock
     */
    inline bool get_DESC_CTRL1_3_RL() volatile
    {
        return DESC_CTRL1_3 & (1u << 18u);
    }

    /**
     * Set DESC_CTRL1_3's RL bit.
     *
     * Read Lock
     */
    inline void set_DESC_CTRL1_3_RL() volatile
    {
        DESC_CTRL1_3 |= 1u << 18u;
    }

    /**
     * Clear DESC_CTRL1_3's RL bit.
     *
     * Read Lock
     */
    inline void clear_DESC_CTRL1_3_RL() volatile
    {
        DESC_CTRL1_3 &= ~(1u << 18u);
    }

    /**
     * Toggle DESC_CTRL1_3's RL bit.
     *
     * Read Lock
     */
    inline void toggle_DESC_CTRL1_3_RL() volatile
    {
        DESC_CTRL1_3 ^= 1u << 18u;
    }

    /**
     * Get DESC_CTRL1_3's CPUD field.
     *
     * CPU Domain
     */
    inline uint8_t get_DESC_CTRL1_3_CPUD() volatile
    {
        return (DESC_CTRL1_3 >> 16u) & 0b11u;
    }

    /**
     * Set DESC_CTRL1_3's CPUD field.
     *
     * CPU Domain
     */
    inline void set_DESC_CTRL1_3_CPUD(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_3;

        curr &= ~(0b11u << 16u);
        curr |= (value & 0b11u) << 16u;

        DESC_CTRL1_3 = curr;
    }

    /**
     * Get DESC_CTRL1_3's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline uint8_t get_DESC_CTRL1_3_RT_PRIORITY() volatile
    {
        return (DESC_CTRL1_3 >> 12u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_3's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline void set_DESC_CTRL1_3_RT_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_3;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        DESC_CTRL1_3 = curr;
    }

    /**
     * Get DESC_CTRL1_3's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline uint8_t get_DESC_CTRL1_3_SV_PRIORITY() volatile
    {
        return (DESC_CTRL1_3 >> 8u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_3's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline void set_DESC_CTRL1_3_SV_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_3;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        DESC_CTRL1_3 = curr;
    }

    /**
     * Get DESC_CTRL1_3's GP_EN bit.
     *
     * Group Enable
     */
    inline bool get_DESC_CTRL1_3_GP_EN() volatile
    {
        return DESC_CTRL1_3 & (1u << 7u);
    }

    /**
     * Set DESC_CTRL1_3's GP_EN bit.
     *
     * Group Enable
     */
    inline void set_DESC_CTRL1_3_GP_EN() volatile
    {
        DESC_CTRL1_3 |= 1u << 7u;
    }

    /**
     * Clear DESC_CTRL1_3's GP_EN bit.
     *
     * Group Enable
     */
    inline void clear_DESC_CTRL1_3_GP_EN() volatile
    {
        DESC_CTRL1_3 &= ~(1u << 7u);
    }

    /**
     * Toggle DESC_CTRL1_3's GP_EN bit.
     *
     * Group Enable
     */
    inline void toggle_DESC_CTRL1_3_GP_EN() volatile
    {
        DESC_CTRL1_3 ^= 1u << 7u;
    }

    /**
     * Get DESC_CTRL1_3's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline SSARC_LP_DESC_CTRL1_3_POWER_DOMAIN
    get_DESC_CTRL1_3_POWER_DOMAIN() volatile
    {
        return SSARC_LP_DESC_CTRL1_3_POWER_DOMAIN((DESC_CTRL1_3 >> 4u) &
                                                  0b111u);
    }

    /**
     * Set DESC_CTRL1_3's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline void set_DESC_CTRL1_3_POWER_DOMAIN(
        SSARC_LP_DESC_CTRL1_3_POWER_DOMAIN value) volatile
    {
        uint32_t curr = DESC_CTRL1_3;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        DESC_CTRL1_3 = curr;
    }

    /**
     * Get DESC_CTRL1_3's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline bool get_DESC_CTRL1_3_SW_TRIG_RT() volatile
    {
        return DESC_CTRL1_3 & (1u << 1u);
    }

    /**
     * Set DESC_CTRL1_3's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void set_DESC_CTRL1_3_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_3 |= 1u << 1u;
    }

    /**
     * Clear DESC_CTRL1_3's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void clear_DESC_CTRL1_3_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_3 &= ~(1u << 1u);
    }

    /**
     * Toggle DESC_CTRL1_3's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void toggle_DESC_CTRL1_3_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_3 ^= 1u << 1u;
    }

    /**
     * Get DESC_CTRL1_3's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline bool get_DESC_CTRL1_3_SW_TRIG_SV() volatile
    {
        return DESC_CTRL1_3 & (1u << 0u);
    }

    /**
     * Set DESC_CTRL1_3's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void set_DESC_CTRL1_3_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_3 |= 1u << 0u;
    }

    /**
     * Clear DESC_CTRL1_3's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void clear_DESC_CTRL1_3_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_3 &= ~(1u << 0u);
    }

    /**
     * Toggle DESC_CTRL1_3's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void toggle_DESC_CTRL1_3_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_3 ^= 1u << 0u;
    }

    /**
     * Get all of DESC_CTRL1_3's bit fields.
     *
     * (read-write) Descriptor Control1 3 Register
     */
    inline void get_DESC_CTRL1_3(
        bool &DL, bool &WL, bool &RL, uint8_t &CPUD, uint8_t &RT_PRIORITY,
        uint8_t &SV_PRIORITY, bool &GP_EN,
        SSARC_LP_DESC_CTRL1_3_POWER_DOMAIN &POWER_DOMAIN, bool &SW_TRIG_RT,
        bool &SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_3;

        DL = curr & (1u << 20u);
        WL = curr & (1u << 19u);
        RL = curr & (1u << 18u);
        CPUD = (curr >> 16u) & 0b11u;
        RT_PRIORITY = (curr >> 12u) & 0b1111u;
        SV_PRIORITY = (curr >> 8u) & 0b1111u;
        GP_EN = curr & (1u << 7u);
        POWER_DOMAIN =
            SSARC_LP_DESC_CTRL1_3_POWER_DOMAIN((curr >> 4u) & 0b111u);
        SW_TRIG_RT = curr & (1u << 1u);
        SW_TRIG_SV = curr & (1u << 0u);
    }

    /**
     * Set all of DESC_CTRL1_3's bit fields.
     *
     * (read-write) Descriptor Control1 3 Register
     */
    inline void set_DESC_CTRL1_3(
        bool DL, bool WL, bool RL, uint8_t CPUD, uint8_t RT_PRIORITY,
        uint8_t SV_PRIORITY, bool GP_EN,
        SSARC_LP_DESC_CTRL1_3_POWER_DOMAIN POWER_DOMAIN, bool SW_TRIG_RT,
        bool SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_3;

        curr &= ~(0b1u << 20u);
        curr |= (DL & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (WL & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (RL & 0b1u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (CPUD & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (RT_PRIORITY & 0b1111u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (SV_PRIORITY & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (GP_EN & 0b1u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(POWER_DOMAIN) & 0b111u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (SW_TRIG_RT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG_SV & 0b1u) << 0u;

        DESC_CTRL1_3 = curr;
    }

    /**
     * Get DESC_ADDR_UP_3's ADDR_UP field.
     *
     * Address field (High)
     */
    inline uint32_t get_DESC_ADDR_UP_3_ADDR_UP() volatile
    {
        return (DESC_ADDR_UP_3 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_UP_3's ADDR_UP field.
     *
     * Address field (High)
     */
    inline void set_DESC_ADDR_UP_3_ADDR_UP(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_UP_3;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_UP_3 = curr;
    }

    /**
     * Get DESC_ADDR_DOWN_3's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline uint32_t get_DESC_ADDR_DOWN_3_ADDR_DOWN() volatile
    {
        return (DESC_ADDR_DOWN_3 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_DOWN_3's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline void set_DESC_ADDR_DOWN_3_ADDR_DOWN(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_DOWN_3;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_DOWN_3 = curr;
    }

    /**
     * Get DESC_CTRL0_4's RT_ORDER bit.
     *
     * Restore order
     */
    inline bool get_DESC_CTRL0_4_RT_ORDER() volatile
    {
        return DESC_CTRL0_4 & (1u << 21u);
    }

    /**
     * Set DESC_CTRL0_4's RT_ORDER bit.
     *
     * Restore order
     */
    inline void set_DESC_CTRL0_4_RT_ORDER() volatile
    {
        DESC_CTRL0_4 |= 1u << 21u;
    }

    /**
     * Clear DESC_CTRL0_4's RT_ORDER bit.
     *
     * Restore order
     */
    inline void clear_DESC_CTRL0_4_RT_ORDER() volatile
    {
        DESC_CTRL0_4 &= ~(1u << 21u);
    }

    /**
     * Toggle DESC_CTRL0_4's RT_ORDER bit.
     *
     * Restore order
     */
    inline void toggle_DESC_CTRL0_4_RT_ORDER() volatile
    {
        DESC_CTRL0_4 ^= 1u << 21u;
    }

    /**
     * Get DESC_CTRL0_4's SV_ORDER bit.
     *
     * Save Order
     */
    inline bool get_DESC_CTRL0_4_SV_ORDER() volatile
    {
        return DESC_CTRL0_4 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL0_4's SV_ORDER bit.
     *
     * Save Order
     */
    inline void set_DESC_CTRL0_4_SV_ORDER() volatile
    {
        DESC_CTRL0_4 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL0_4's SV_ORDER bit.
     *
     * Save Order
     */
    inline void clear_DESC_CTRL0_4_SV_ORDER() volatile
    {
        DESC_CTRL0_4 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL0_4's SV_ORDER bit.
     *
     * Save Order
     */
    inline void toggle_DESC_CTRL0_4_SV_ORDER() volatile
    {
        DESC_CTRL0_4 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL0_4's END field.
     *
     * End index
     */
    inline uint16_t get_DESC_CTRL0_4_END() volatile
    {
        return (DESC_CTRL0_4 >> 10u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_4's END field.
     *
     * End index
     */
    inline void set_DESC_CTRL0_4_END(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_4;

        curr &= ~(0b1111111111u << 10u);
        curr |= (value & 0b1111111111u) << 10u;

        DESC_CTRL0_4 = curr;
    }

    /**
     * Get DESC_CTRL0_4's START field.
     *
     * Start index
     */
    inline uint16_t get_DESC_CTRL0_4_START() volatile
    {
        return (DESC_CTRL0_4 >> 0u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_4's START field.
     *
     * Start index
     */
    inline void set_DESC_CTRL0_4_START(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_4;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        DESC_CTRL0_4 = curr;
    }

    /**
     * Get all of DESC_CTRL0_4's bit fields.
     *
     * (read-write) Descriptor Control0 4 Register
     */
    inline void get_DESC_CTRL0_4(bool &RT_ORDER, bool &SV_ORDER, uint16_t &END,
                                 uint16_t &START) volatile
    {
        uint32_t curr = DESC_CTRL0_4;

        RT_ORDER = curr & (1u << 21u);
        SV_ORDER = curr & (1u << 20u);
        END = (curr >> 10u) & 0b1111111111u;
        START = (curr >> 0u) & 0b1111111111u;
    }

    /**
     * Set all of DESC_CTRL0_4's bit fields.
     *
     * (read-write) Descriptor Control0 4 Register
     */
    inline void set_DESC_CTRL0_4(bool RT_ORDER, bool SV_ORDER, uint16_t END,
                                 uint16_t START) volatile
    {
        uint32_t curr = DESC_CTRL0_4;

        curr &= ~(0b1u << 21u);
        curr |= (RT_ORDER & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (SV_ORDER & 0b1u) << 20u;
        curr &= ~(0b1111111111u << 10u);
        curr |= (END & 0b1111111111u) << 10u;
        curr &= ~(0b1111111111u << 0u);
        curr |= (START & 0b1111111111u) << 0u;

        DESC_CTRL0_4 = curr;
    }

    /**
     * Get DESC_CTRL1_4's DL bit.
     *
     * Domain lock
     */
    inline bool get_DESC_CTRL1_4_DL() volatile
    {
        return DESC_CTRL1_4 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL1_4's DL bit.
     *
     * Domain lock
     */
    inline void set_DESC_CTRL1_4_DL() volatile
    {
        DESC_CTRL1_4 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL1_4's DL bit.
     *
     * Domain lock
     */
    inline void clear_DESC_CTRL1_4_DL() volatile
    {
        DESC_CTRL1_4 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL1_4's DL bit.
     *
     * Domain lock
     */
    inline void toggle_DESC_CTRL1_4_DL() volatile
    {
        DESC_CTRL1_4 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL1_4's WL bit.
     *
     * Write Lock
     */
    inline bool get_DESC_CTRL1_4_WL() volatile
    {
        return DESC_CTRL1_4 & (1u << 19u);
    }

    /**
     * Set DESC_CTRL1_4's WL bit.
     *
     * Write Lock
     */
    inline void set_DESC_CTRL1_4_WL() volatile
    {
        DESC_CTRL1_4 |= 1u << 19u;
    }

    /**
     * Clear DESC_CTRL1_4's WL bit.
     *
     * Write Lock
     */
    inline void clear_DESC_CTRL1_4_WL() volatile
    {
        DESC_CTRL1_4 &= ~(1u << 19u);
    }

    /**
     * Toggle DESC_CTRL1_4's WL bit.
     *
     * Write Lock
     */
    inline void toggle_DESC_CTRL1_4_WL() volatile
    {
        DESC_CTRL1_4 ^= 1u << 19u;
    }

    /**
     * Get DESC_CTRL1_4's RL bit.
     *
     * Read Lock
     */
    inline bool get_DESC_CTRL1_4_RL() volatile
    {
        return DESC_CTRL1_4 & (1u << 18u);
    }

    /**
     * Set DESC_CTRL1_4's RL bit.
     *
     * Read Lock
     */
    inline void set_DESC_CTRL1_4_RL() volatile
    {
        DESC_CTRL1_4 |= 1u << 18u;
    }

    /**
     * Clear DESC_CTRL1_4's RL bit.
     *
     * Read Lock
     */
    inline void clear_DESC_CTRL1_4_RL() volatile
    {
        DESC_CTRL1_4 &= ~(1u << 18u);
    }

    /**
     * Toggle DESC_CTRL1_4's RL bit.
     *
     * Read Lock
     */
    inline void toggle_DESC_CTRL1_4_RL() volatile
    {
        DESC_CTRL1_4 ^= 1u << 18u;
    }

    /**
     * Get DESC_CTRL1_4's CPUD field.
     *
     * CPU Domain
     */
    inline uint8_t get_DESC_CTRL1_4_CPUD() volatile
    {
        return (DESC_CTRL1_4 >> 16u) & 0b11u;
    }

    /**
     * Set DESC_CTRL1_4's CPUD field.
     *
     * CPU Domain
     */
    inline void set_DESC_CTRL1_4_CPUD(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_4;

        curr &= ~(0b11u << 16u);
        curr |= (value & 0b11u) << 16u;

        DESC_CTRL1_4 = curr;
    }

    /**
     * Get DESC_CTRL1_4's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline uint8_t get_DESC_CTRL1_4_RT_PRIORITY() volatile
    {
        return (DESC_CTRL1_4 >> 12u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_4's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline void set_DESC_CTRL1_4_RT_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_4;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        DESC_CTRL1_4 = curr;
    }

    /**
     * Get DESC_CTRL1_4's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline uint8_t get_DESC_CTRL1_4_SV_PRIORITY() volatile
    {
        return (DESC_CTRL1_4 >> 8u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_4's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline void set_DESC_CTRL1_4_SV_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_4;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        DESC_CTRL1_4 = curr;
    }

    /**
     * Get DESC_CTRL1_4's GP_EN bit.
     *
     * Group Enable
     */
    inline bool get_DESC_CTRL1_4_GP_EN() volatile
    {
        return DESC_CTRL1_4 & (1u << 7u);
    }

    /**
     * Set DESC_CTRL1_4's GP_EN bit.
     *
     * Group Enable
     */
    inline void set_DESC_CTRL1_4_GP_EN() volatile
    {
        DESC_CTRL1_4 |= 1u << 7u;
    }

    /**
     * Clear DESC_CTRL1_4's GP_EN bit.
     *
     * Group Enable
     */
    inline void clear_DESC_CTRL1_4_GP_EN() volatile
    {
        DESC_CTRL1_4 &= ~(1u << 7u);
    }

    /**
     * Toggle DESC_CTRL1_4's GP_EN bit.
     *
     * Group Enable
     */
    inline void toggle_DESC_CTRL1_4_GP_EN() volatile
    {
        DESC_CTRL1_4 ^= 1u << 7u;
    }

    /**
     * Get DESC_CTRL1_4's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline SSARC_LP_DESC_CTRL1_4_POWER_DOMAIN
    get_DESC_CTRL1_4_POWER_DOMAIN() volatile
    {
        return SSARC_LP_DESC_CTRL1_4_POWER_DOMAIN((DESC_CTRL1_4 >> 4u) &
                                                  0b111u);
    }

    /**
     * Set DESC_CTRL1_4's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline void set_DESC_CTRL1_4_POWER_DOMAIN(
        SSARC_LP_DESC_CTRL1_4_POWER_DOMAIN value) volatile
    {
        uint32_t curr = DESC_CTRL1_4;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        DESC_CTRL1_4 = curr;
    }

    /**
     * Get DESC_CTRL1_4's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline bool get_DESC_CTRL1_4_SW_TRIG_RT() volatile
    {
        return DESC_CTRL1_4 & (1u << 1u);
    }

    /**
     * Set DESC_CTRL1_4's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void set_DESC_CTRL1_4_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_4 |= 1u << 1u;
    }

    /**
     * Clear DESC_CTRL1_4's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void clear_DESC_CTRL1_4_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_4 &= ~(1u << 1u);
    }

    /**
     * Toggle DESC_CTRL1_4's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void toggle_DESC_CTRL1_4_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_4 ^= 1u << 1u;
    }

    /**
     * Get DESC_CTRL1_4's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline bool get_DESC_CTRL1_4_SW_TRIG_SV() volatile
    {
        return DESC_CTRL1_4 & (1u << 0u);
    }

    /**
     * Set DESC_CTRL1_4's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void set_DESC_CTRL1_4_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_4 |= 1u << 0u;
    }

    /**
     * Clear DESC_CTRL1_4's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void clear_DESC_CTRL1_4_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_4 &= ~(1u << 0u);
    }

    /**
     * Toggle DESC_CTRL1_4's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void toggle_DESC_CTRL1_4_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_4 ^= 1u << 0u;
    }

    /**
     * Get all of DESC_CTRL1_4's bit fields.
     *
     * (read-write) Descriptor Control1 4 Register
     */
    inline void get_DESC_CTRL1_4(
        bool &DL, bool &WL, bool &RL, uint8_t &CPUD, uint8_t &RT_PRIORITY,
        uint8_t &SV_PRIORITY, bool &GP_EN,
        SSARC_LP_DESC_CTRL1_4_POWER_DOMAIN &POWER_DOMAIN, bool &SW_TRIG_RT,
        bool &SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_4;

        DL = curr & (1u << 20u);
        WL = curr & (1u << 19u);
        RL = curr & (1u << 18u);
        CPUD = (curr >> 16u) & 0b11u;
        RT_PRIORITY = (curr >> 12u) & 0b1111u;
        SV_PRIORITY = (curr >> 8u) & 0b1111u;
        GP_EN = curr & (1u << 7u);
        POWER_DOMAIN =
            SSARC_LP_DESC_CTRL1_4_POWER_DOMAIN((curr >> 4u) & 0b111u);
        SW_TRIG_RT = curr & (1u << 1u);
        SW_TRIG_SV = curr & (1u << 0u);
    }

    /**
     * Set all of DESC_CTRL1_4's bit fields.
     *
     * (read-write) Descriptor Control1 4 Register
     */
    inline void set_DESC_CTRL1_4(
        bool DL, bool WL, bool RL, uint8_t CPUD, uint8_t RT_PRIORITY,
        uint8_t SV_PRIORITY, bool GP_EN,
        SSARC_LP_DESC_CTRL1_4_POWER_DOMAIN POWER_DOMAIN, bool SW_TRIG_RT,
        bool SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_4;

        curr &= ~(0b1u << 20u);
        curr |= (DL & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (WL & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (RL & 0b1u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (CPUD & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (RT_PRIORITY & 0b1111u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (SV_PRIORITY & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (GP_EN & 0b1u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(POWER_DOMAIN) & 0b111u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (SW_TRIG_RT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG_SV & 0b1u) << 0u;

        DESC_CTRL1_4 = curr;
    }

    /**
     * Get DESC_ADDR_UP_4's ADDR_UP field.
     *
     * Address field (High)
     */
    inline uint32_t get_DESC_ADDR_UP_4_ADDR_UP() volatile
    {
        return (DESC_ADDR_UP_4 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_UP_4's ADDR_UP field.
     *
     * Address field (High)
     */
    inline void set_DESC_ADDR_UP_4_ADDR_UP(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_UP_4;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_UP_4 = curr;
    }

    /**
     * Get DESC_ADDR_DOWN_4's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline uint32_t get_DESC_ADDR_DOWN_4_ADDR_DOWN() volatile
    {
        return (DESC_ADDR_DOWN_4 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_DOWN_4's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline void set_DESC_ADDR_DOWN_4_ADDR_DOWN(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_DOWN_4;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_DOWN_4 = curr;
    }

    /**
     * Get DESC_CTRL0_5's RT_ORDER bit.
     *
     * Restore order
     */
    inline bool get_DESC_CTRL0_5_RT_ORDER() volatile
    {
        return DESC_CTRL0_5 & (1u << 21u);
    }

    /**
     * Set DESC_CTRL0_5's RT_ORDER bit.
     *
     * Restore order
     */
    inline void set_DESC_CTRL0_5_RT_ORDER() volatile
    {
        DESC_CTRL0_5 |= 1u << 21u;
    }

    /**
     * Clear DESC_CTRL0_5's RT_ORDER bit.
     *
     * Restore order
     */
    inline void clear_DESC_CTRL0_5_RT_ORDER() volatile
    {
        DESC_CTRL0_5 &= ~(1u << 21u);
    }

    /**
     * Toggle DESC_CTRL0_5's RT_ORDER bit.
     *
     * Restore order
     */
    inline void toggle_DESC_CTRL0_5_RT_ORDER() volatile
    {
        DESC_CTRL0_5 ^= 1u << 21u;
    }

    /**
     * Get DESC_CTRL0_5's SV_ORDER bit.
     *
     * Save Order
     */
    inline bool get_DESC_CTRL0_5_SV_ORDER() volatile
    {
        return DESC_CTRL0_5 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL0_5's SV_ORDER bit.
     *
     * Save Order
     */
    inline void set_DESC_CTRL0_5_SV_ORDER() volatile
    {
        DESC_CTRL0_5 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL0_5's SV_ORDER bit.
     *
     * Save Order
     */
    inline void clear_DESC_CTRL0_5_SV_ORDER() volatile
    {
        DESC_CTRL0_5 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL0_5's SV_ORDER bit.
     *
     * Save Order
     */
    inline void toggle_DESC_CTRL0_5_SV_ORDER() volatile
    {
        DESC_CTRL0_5 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL0_5's END field.
     *
     * End index
     */
    inline uint16_t get_DESC_CTRL0_5_END() volatile
    {
        return (DESC_CTRL0_5 >> 10u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_5's END field.
     *
     * End index
     */
    inline void set_DESC_CTRL0_5_END(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_5;

        curr &= ~(0b1111111111u << 10u);
        curr |= (value & 0b1111111111u) << 10u;

        DESC_CTRL0_5 = curr;
    }

    /**
     * Get DESC_CTRL0_5's START field.
     *
     * Start index
     */
    inline uint16_t get_DESC_CTRL0_5_START() volatile
    {
        return (DESC_CTRL0_5 >> 0u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_5's START field.
     *
     * Start index
     */
    inline void set_DESC_CTRL0_5_START(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_5;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        DESC_CTRL0_5 = curr;
    }

    /**
     * Get all of DESC_CTRL0_5's bit fields.
     *
     * (read-write) Descriptor Control0 5 Register
     */
    inline void get_DESC_CTRL0_5(bool &RT_ORDER, bool &SV_ORDER, uint16_t &END,
                                 uint16_t &START) volatile
    {
        uint32_t curr = DESC_CTRL0_5;

        RT_ORDER = curr & (1u << 21u);
        SV_ORDER = curr & (1u << 20u);
        END = (curr >> 10u) & 0b1111111111u;
        START = (curr >> 0u) & 0b1111111111u;
    }

    /**
     * Set all of DESC_CTRL0_5's bit fields.
     *
     * (read-write) Descriptor Control0 5 Register
     */
    inline void set_DESC_CTRL0_5(bool RT_ORDER, bool SV_ORDER, uint16_t END,
                                 uint16_t START) volatile
    {
        uint32_t curr = DESC_CTRL0_5;

        curr &= ~(0b1u << 21u);
        curr |= (RT_ORDER & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (SV_ORDER & 0b1u) << 20u;
        curr &= ~(0b1111111111u << 10u);
        curr |= (END & 0b1111111111u) << 10u;
        curr &= ~(0b1111111111u << 0u);
        curr |= (START & 0b1111111111u) << 0u;

        DESC_CTRL0_5 = curr;
    }

    /**
     * Get DESC_CTRL1_5's DL bit.
     *
     * Domain lock
     */
    inline bool get_DESC_CTRL1_5_DL() volatile
    {
        return DESC_CTRL1_5 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL1_5's DL bit.
     *
     * Domain lock
     */
    inline void set_DESC_CTRL1_5_DL() volatile
    {
        DESC_CTRL1_5 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL1_5's DL bit.
     *
     * Domain lock
     */
    inline void clear_DESC_CTRL1_5_DL() volatile
    {
        DESC_CTRL1_5 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL1_5's DL bit.
     *
     * Domain lock
     */
    inline void toggle_DESC_CTRL1_5_DL() volatile
    {
        DESC_CTRL1_5 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL1_5's WL bit.
     *
     * Write Lock
     */
    inline bool get_DESC_CTRL1_5_WL() volatile
    {
        return DESC_CTRL1_5 & (1u << 19u);
    }

    /**
     * Set DESC_CTRL1_5's WL bit.
     *
     * Write Lock
     */
    inline void set_DESC_CTRL1_5_WL() volatile
    {
        DESC_CTRL1_5 |= 1u << 19u;
    }

    /**
     * Clear DESC_CTRL1_5's WL bit.
     *
     * Write Lock
     */
    inline void clear_DESC_CTRL1_5_WL() volatile
    {
        DESC_CTRL1_5 &= ~(1u << 19u);
    }

    /**
     * Toggle DESC_CTRL1_5's WL bit.
     *
     * Write Lock
     */
    inline void toggle_DESC_CTRL1_5_WL() volatile
    {
        DESC_CTRL1_5 ^= 1u << 19u;
    }

    /**
     * Get DESC_CTRL1_5's RL bit.
     *
     * Read Lock
     */
    inline bool get_DESC_CTRL1_5_RL() volatile
    {
        return DESC_CTRL1_5 & (1u << 18u);
    }

    /**
     * Set DESC_CTRL1_5's RL bit.
     *
     * Read Lock
     */
    inline void set_DESC_CTRL1_5_RL() volatile
    {
        DESC_CTRL1_5 |= 1u << 18u;
    }

    /**
     * Clear DESC_CTRL1_5's RL bit.
     *
     * Read Lock
     */
    inline void clear_DESC_CTRL1_5_RL() volatile
    {
        DESC_CTRL1_5 &= ~(1u << 18u);
    }

    /**
     * Toggle DESC_CTRL1_5's RL bit.
     *
     * Read Lock
     */
    inline void toggle_DESC_CTRL1_5_RL() volatile
    {
        DESC_CTRL1_5 ^= 1u << 18u;
    }

    /**
     * Get DESC_CTRL1_5's CPUD field.
     *
     * CPU Domain
     */
    inline uint8_t get_DESC_CTRL1_5_CPUD() volatile
    {
        return (DESC_CTRL1_5 >> 16u) & 0b11u;
    }

    /**
     * Set DESC_CTRL1_5's CPUD field.
     *
     * CPU Domain
     */
    inline void set_DESC_CTRL1_5_CPUD(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_5;

        curr &= ~(0b11u << 16u);
        curr |= (value & 0b11u) << 16u;

        DESC_CTRL1_5 = curr;
    }

    /**
     * Get DESC_CTRL1_5's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline uint8_t get_DESC_CTRL1_5_RT_PRIORITY() volatile
    {
        return (DESC_CTRL1_5 >> 12u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_5's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline void set_DESC_CTRL1_5_RT_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_5;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        DESC_CTRL1_5 = curr;
    }

    /**
     * Get DESC_CTRL1_5's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline uint8_t get_DESC_CTRL1_5_SV_PRIORITY() volatile
    {
        return (DESC_CTRL1_5 >> 8u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_5's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline void set_DESC_CTRL1_5_SV_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_5;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        DESC_CTRL1_5 = curr;
    }

    /**
     * Get DESC_CTRL1_5's GP_EN bit.
     *
     * Group Enable
     */
    inline bool get_DESC_CTRL1_5_GP_EN() volatile
    {
        return DESC_CTRL1_5 & (1u << 7u);
    }

    /**
     * Set DESC_CTRL1_5's GP_EN bit.
     *
     * Group Enable
     */
    inline void set_DESC_CTRL1_5_GP_EN() volatile
    {
        DESC_CTRL1_5 |= 1u << 7u;
    }

    /**
     * Clear DESC_CTRL1_5's GP_EN bit.
     *
     * Group Enable
     */
    inline void clear_DESC_CTRL1_5_GP_EN() volatile
    {
        DESC_CTRL1_5 &= ~(1u << 7u);
    }

    /**
     * Toggle DESC_CTRL1_5's GP_EN bit.
     *
     * Group Enable
     */
    inline void toggle_DESC_CTRL1_5_GP_EN() volatile
    {
        DESC_CTRL1_5 ^= 1u << 7u;
    }

    /**
     * Get DESC_CTRL1_5's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline SSARC_LP_DESC_CTRL1_5_POWER_DOMAIN
    get_DESC_CTRL1_5_POWER_DOMAIN() volatile
    {
        return SSARC_LP_DESC_CTRL1_5_POWER_DOMAIN((DESC_CTRL1_5 >> 4u) &
                                                  0b111u);
    }

    /**
     * Set DESC_CTRL1_5's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline void set_DESC_CTRL1_5_POWER_DOMAIN(
        SSARC_LP_DESC_CTRL1_5_POWER_DOMAIN value) volatile
    {
        uint32_t curr = DESC_CTRL1_5;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        DESC_CTRL1_5 = curr;
    }

    /**
     * Get DESC_CTRL1_5's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline bool get_DESC_CTRL1_5_SW_TRIG_RT() volatile
    {
        return DESC_CTRL1_5 & (1u << 1u);
    }

    /**
     * Set DESC_CTRL1_5's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void set_DESC_CTRL1_5_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_5 |= 1u << 1u;
    }

    /**
     * Clear DESC_CTRL1_5's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void clear_DESC_CTRL1_5_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_5 &= ~(1u << 1u);
    }

    /**
     * Toggle DESC_CTRL1_5's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void toggle_DESC_CTRL1_5_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_5 ^= 1u << 1u;
    }

    /**
     * Get DESC_CTRL1_5's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline bool get_DESC_CTRL1_5_SW_TRIG_SV() volatile
    {
        return DESC_CTRL1_5 & (1u << 0u);
    }

    /**
     * Set DESC_CTRL1_5's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void set_DESC_CTRL1_5_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_5 |= 1u << 0u;
    }

    /**
     * Clear DESC_CTRL1_5's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void clear_DESC_CTRL1_5_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_5 &= ~(1u << 0u);
    }

    /**
     * Toggle DESC_CTRL1_5's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void toggle_DESC_CTRL1_5_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_5 ^= 1u << 0u;
    }

    /**
     * Get all of DESC_CTRL1_5's bit fields.
     *
     * (read-write) Descriptor Control1 5 Register
     */
    inline void get_DESC_CTRL1_5(
        bool &DL, bool &WL, bool &RL, uint8_t &CPUD, uint8_t &RT_PRIORITY,
        uint8_t &SV_PRIORITY, bool &GP_EN,
        SSARC_LP_DESC_CTRL1_5_POWER_DOMAIN &POWER_DOMAIN, bool &SW_TRIG_RT,
        bool &SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_5;

        DL = curr & (1u << 20u);
        WL = curr & (1u << 19u);
        RL = curr & (1u << 18u);
        CPUD = (curr >> 16u) & 0b11u;
        RT_PRIORITY = (curr >> 12u) & 0b1111u;
        SV_PRIORITY = (curr >> 8u) & 0b1111u;
        GP_EN = curr & (1u << 7u);
        POWER_DOMAIN =
            SSARC_LP_DESC_CTRL1_5_POWER_DOMAIN((curr >> 4u) & 0b111u);
        SW_TRIG_RT = curr & (1u << 1u);
        SW_TRIG_SV = curr & (1u << 0u);
    }

    /**
     * Set all of DESC_CTRL1_5's bit fields.
     *
     * (read-write) Descriptor Control1 5 Register
     */
    inline void set_DESC_CTRL1_5(
        bool DL, bool WL, bool RL, uint8_t CPUD, uint8_t RT_PRIORITY,
        uint8_t SV_PRIORITY, bool GP_EN,
        SSARC_LP_DESC_CTRL1_5_POWER_DOMAIN POWER_DOMAIN, bool SW_TRIG_RT,
        bool SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_5;

        curr &= ~(0b1u << 20u);
        curr |= (DL & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (WL & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (RL & 0b1u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (CPUD & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (RT_PRIORITY & 0b1111u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (SV_PRIORITY & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (GP_EN & 0b1u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(POWER_DOMAIN) & 0b111u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (SW_TRIG_RT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG_SV & 0b1u) << 0u;

        DESC_CTRL1_5 = curr;
    }

    /**
     * Get DESC_ADDR_UP_5's ADDR_UP field.
     *
     * Address field (High)
     */
    inline uint32_t get_DESC_ADDR_UP_5_ADDR_UP() volatile
    {
        return (DESC_ADDR_UP_5 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_UP_5's ADDR_UP field.
     *
     * Address field (High)
     */
    inline void set_DESC_ADDR_UP_5_ADDR_UP(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_UP_5;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_UP_5 = curr;
    }

    /**
     * Get DESC_ADDR_DOWN_5's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline uint32_t get_DESC_ADDR_DOWN_5_ADDR_DOWN() volatile
    {
        return (DESC_ADDR_DOWN_5 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_DOWN_5's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline void set_DESC_ADDR_DOWN_5_ADDR_DOWN(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_DOWN_5;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_DOWN_5 = curr;
    }

    /**
     * Get DESC_CTRL0_6's RT_ORDER bit.
     *
     * Restore order
     */
    inline bool get_DESC_CTRL0_6_RT_ORDER() volatile
    {
        return DESC_CTRL0_6 & (1u << 21u);
    }

    /**
     * Set DESC_CTRL0_6's RT_ORDER bit.
     *
     * Restore order
     */
    inline void set_DESC_CTRL0_6_RT_ORDER() volatile
    {
        DESC_CTRL0_6 |= 1u << 21u;
    }

    /**
     * Clear DESC_CTRL0_6's RT_ORDER bit.
     *
     * Restore order
     */
    inline void clear_DESC_CTRL0_6_RT_ORDER() volatile
    {
        DESC_CTRL0_6 &= ~(1u << 21u);
    }

    /**
     * Toggle DESC_CTRL0_6's RT_ORDER bit.
     *
     * Restore order
     */
    inline void toggle_DESC_CTRL0_6_RT_ORDER() volatile
    {
        DESC_CTRL0_6 ^= 1u << 21u;
    }

    /**
     * Get DESC_CTRL0_6's SV_ORDER bit.
     *
     * Save Order
     */
    inline bool get_DESC_CTRL0_6_SV_ORDER() volatile
    {
        return DESC_CTRL0_6 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL0_6's SV_ORDER bit.
     *
     * Save Order
     */
    inline void set_DESC_CTRL0_6_SV_ORDER() volatile
    {
        DESC_CTRL0_6 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL0_6's SV_ORDER bit.
     *
     * Save Order
     */
    inline void clear_DESC_CTRL0_6_SV_ORDER() volatile
    {
        DESC_CTRL0_6 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL0_6's SV_ORDER bit.
     *
     * Save Order
     */
    inline void toggle_DESC_CTRL0_6_SV_ORDER() volatile
    {
        DESC_CTRL0_6 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL0_6's END field.
     *
     * End index
     */
    inline uint16_t get_DESC_CTRL0_6_END() volatile
    {
        return (DESC_CTRL0_6 >> 10u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_6's END field.
     *
     * End index
     */
    inline void set_DESC_CTRL0_6_END(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_6;

        curr &= ~(0b1111111111u << 10u);
        curr |= (value & 0b1111111111u) << 10u;

        DESC_CTRL0_6 = curr;
    }

    /**
     * Get DESC_CTRL0_6's START field.
     *
     * Start index
     */
    inline uint16_t get_DESC_CTRL0_6_START() volatile
    {
        return (DESC_CTRL0_6 >> 0u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_6's START field.
     *
     * Start index
     */
    inline void set_DESC_CTRL0_6_START(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_6;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        DESC_CTRL0_6 = curr;
    }

    /**
     * Get all of DESC_CTRL0_6's bit fields.
     *
     * (read-write) Descriptor Control0 6 Register
     */
    inline void get_DESC_CTRL0_6(bool &RT_ORDER, bool &SV_ORDER, uint16_t &END,
                                 uint16_t &START) volatile
    {
        uint32_t curr = DESC_CTRL0_6;

        RT_ORDER = curr & (1u << 21u);
        SV_ORDER = curr & (1u << 20u);
        END = (curr >> 10u) & 0b1111111111u;
        START = (curr >> 0u) & 0b1111111111u;
    }

    /**
     * Set all of DESC_CTRL0_6's bit fields.
     *
     * (read-write) Descriptor Control0 6 Register
     */
    inline void set_DESC_CTRL0_6(bool RT_ORDER, bool SV_ORDER, uint16_t END,
                                 uint16_t START) volatile
    {
        uint32_t curr = DESC_CTRL0_6;

        curr &= ~(0b1u << 21u);
        curr |= (RT_ORDER & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (SV_ORDER & 0b1u) << 20u;
        curr &= ~(0b1111111111u << 10u);
        curr |= (END & 0b1111111111u) << 10u;
        curr &= ~(0b1111111111u << 0u);
        curr |= (START & 0b1111111111u) << 0u;

        DESC_CTRL0_6 = curr;
    }

    /**
     * Get DESC_CTRL1_6's DL bit.
     *
     * Domain lock
     */
    inline bool get_DESC_CTRL1_6_DL() volatile
    {
        return DESC_CTRL1_6 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL1_6's DL bit.
     *
     * Domain lock
     */
    inline void set_DESC_CTRL1_6_DL() volatile
    {
        DESC_CTRL1_6 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL1_6's DL bit.
     *
     * Domain lock
     */
    inline void clear_DESC_CTRL1_6_DL() volatile
    {
        DESC_CTRL1_6 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL1_6's DL bit.
     *
     * Domain lock
     */
    inline void toggle_DESC_CTRL1_6_DL() volatile
    {
        DESC_CTRL1_6 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL1_6's WL bit.
     *
     * Write Lock
     */
    inline bool get_DESC_CTRL1_6_WL() volatile
    {
        return DESC_CTRL1_6 & (1u << 19u);
    }

    /**
     * Set DESC_CTRL1_6's WL bit.
     *
     * Write Lock
     */
    inline void set_DESC_CTRL1_6_WL() volatile
    {
        DESC_CTRL1_6 |= 1u << 19u;
    }

    /**
     * Clear DESC_CTRL1_6's WL bit.
     *
     * Write Lock
     */
    inline void clear_DESC_CTRL1_6_WL() volatile
    {
        DESC_CTRL1_6 &= ~(1u << 19u);
    }

    /**
     * Toggle DESC_CTRL1_6's WL bit.
     *
     * Write Lock
     */
    inline void toggle_DESC_CTRL1_6_WL() volatile
    {
        DESC_CTRL1_6 ^= 1u << 19u;
    }

    /**
     * Get DESC_CTRL1_6's RL bit.
     *
     * Read Lock
     */
    inline bool get_DESC_CTRL1_6_RL() volatile
    {
        return DESC_CTRL1_6 & (1u << 18u);
    }

    /**
     * Set DESC_CTRL1_6's RL bit.
     *
     * Read Lock
     */
    inline void set_DESC_CTRL1_6_RL() volatile
    {
        DESC_CTRL1_6 |= 1u << 18u;
    }

    /**
     * Clear DESC_CTRL1_6's RL bit.
     *
     * Read Lock
     */
    inline void clear_DESC_CTRL1_6_RL() volatile
    {
        DESC_CTRL1_6 &= ~(1u << 18u);
    }

    /**
     * Toggle DESC_CTRL1_6's RL bit.
     *
     * Read Lock
     */
    inline void toggle_DESC_CTRL1_6_RL() volatile
    {
        DESC_CTRL1_6 ^= 1u << 18u;
    }

    /**
     * Get DESC_CTRL1_6's CPUD field.
     *
     * CPU Domain
     */
    inline uint8_t get_DESC_CTRL1_6_CPUD() volatile
    {
        return (DESC_CTRL1_6 >> 16u) & 0b11u;
    }

    /**
     * Set DESC_CTRL1_6's CPUD field.
     *
     * CPU Domain
     */
    inline void set_DESC_CTRL1_6_CPUD(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_6;

        curr &= ~(0b11u << 16u);
        curr |= (value & 0b11u) << 16u;

        DESC_CTRL1_6 = curr;
    }

    /**
     * Get DESC_CTRL1_6's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline uint8_t get_DESC_CTRL1_6_RT_PRIORITY() volatile
    {
        return (DESC_CTRL1_6 >> 12u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_6's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline void set_DESC_CTRL1_6_RT_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_6;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        DESC_CTRL1_6 = curr;
    }

    /**
     * Get DESC_CTRL1_6's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline uint8_t get_DESC_CTRL1_6_SV_PRIORITY() volatile
    {
        return (DESC_CTRL1_6 >> 8u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_6's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline void set_DESC_CTRL1_6_SV_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_6;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        DESC_CTRL1_6 = curr;
    }

    /**
     * Get DESC_CTRL1_6's GP_EN bit.
     *
     * Group Enable
     */
    inline bool get_DESC_CTRL1_6_GP_EN() volatile
    {
        return DESC_CTRL1_6 & (1u << 7u);
    }

    /**
     * Set DESC_CTRL1_6's GP_EN bit.
     *
     * Group Enable
     */
    inline void set_DESC_CTRL1_6_GP_EN() volatile
    {
        DESC_CTRL1_6 |= 1u << 7u;
    }

    /**
     * Clear DESC_CTRL1_6's GP_EN bit.
     *
     * Group Enable
     */
    inline void clear_DESC_CTRL1_6_GP_EN() volatile
    {
        DESC_CTRL1_6 &= ~(1u << 7u);
    }

    /**
     * Toggle DESC_CTRL1_6's GP_EN bit.
     *
     * Group Enable
     */
    inline void toggle_DESC_CTRL1_6_GP_EN() volatile
    {
        DESC_CTRL1_6 ^= 1u << 7u;
    }

    /**
     * Get DESC_CTRL1_6's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline SSARC_LP_DESC_CTRL1_6_POWER_DOMAIN
    get_DESC_CTRL1_6_POWER_DOMAIN() volatile
    {
        return SSARC_LP_DESC_CTRL1_6_POWER_DOMAIN((DESC_CTRL1_6 >> 4u) &
                                                  0b111u);
    }

    /**
     * Set DESC_CTRL1_6's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline void set_DESC_CTRL1_6_POWER_DOMAIN(
        SSARC_LP_DESC_CTRL1_6_POWER_DOMAIN value) volatile
    {
        uint32_t curr = DESC_CTRL1_6;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        DESC_CTRL1_6 = curr;
    }

    /**
     * Get DESC_CTRL1_6's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline bool get_DESC_CTRL1_6_SW_TRIG_RT() volatile
    {
        return DESC_CTRL1_6 & (1u << 1u);
    }

    /**
     * Set DESC_CTRL1_6's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void set_DESC_CTRL1_6_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_6 |= 1u << 1u;
    }

    /**
     * Clear DESC_CTRL1_6's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void clear_DESC_CTRL1_6_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_6 &= ~(1u << 1u);
    }

    /**
     * Toggle DESC_CTRL1_6's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void toggle_DESC_CTRL1_6_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_6 ^= 1u << 1u;
    }

    /**
     * Get DESC_CTRL1_6's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline bool get_DESC_CTRL1_6_SW_TRIG_SV() volatile
    {
        return DESC_CTRL1_6 & (1u << 0u);
    }

    /**
     * Set DESC_CTRL1_6's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void set_DESC_CTRL1_6_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_6 |= 1u << 0u;
    }

    /**
     * Clear DESC_CTRL1_6's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void clear_DESC_CTRL1_6_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_6 &= ~(1u << 0u);
    }

    /**
     * Toggle DESC_CTRL1_6's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void toggle_DESC_CTRL1_6_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_6 ^= 1u << 0u;
    }

    /**
     * Get all of DESC_CTRL1_6's bit fields.
     *
     * (read-write) Descriptor Control1 6 Register
     */
    inline void get_DESC_CTRL1_6(
        bool &DL, bool &WL, bool &RL, uint8_t &CPUD, uint8_t &RT_PRIORITY,
        uint8_t &SV_PRIORITY, bool &GP_EN,
        SSARC_LP_DESC_CTRL1_6_POWER_DOMAIN &POWER_DOMAIN, bool &SW_TRIG_RT,
        bool &SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_6;

        DL = curr & (1u << 20u);
        WL = curr & (1u << 19u);
        RL = curr & (1u << 18u);
        CPUD = (curr >> 16u) & 0b11u;
        RT_PRIORITY = (curr >> 12u) & 0b1111u;
        SV_PRIORITY = (curr >> 8u) & 0b1111u;
        GP_EN = curr & (1u << 7u);
        POWER_DOMAIN =
            SSARC_LP_DESC_CTRL1_6_POWER_DOMAIN((curr >> 4u) & 0b111u);
        SW_TRIG_RT = curr & (1u << 1u);
        SW_TRIG_SV = curr & (1u << 0u);
    }

    /**
     * Set all of DESC_CTRL1_6's bit fields.
     *
     * (read-write) Descriptor Control1 6 Register
     */
    inline void set_DESC_CTRL1_6(
        bool DL, bool WL, bool RL, uint8_t CPUD, uint8_t RT_PRIORITY,
        uint8_t SV_PRIORITY, bool GP_EN,
        SSARC_LP_DESC_CTRL1_6_POWER_DOMAIN POWER_DOMAIN, bool SW_TRIG_RT,
        bool SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_6;

        curr &= ~(0b1u << 20u);
        curr |= (DL & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (WL & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (RL & 0b1u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (CPUD & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (RT_PRIORITY & 0b1111u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (SV_PRIORITY & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (GP_EN & 0b1u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(POWER_DOMAIN) & 0b111u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (SW_TRIG_RT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG_SV & 0b1u) << 0u;

        DESC_CTRL1_6 = curr;
    }

    /**
     * Get DESC_ADDR_UP_6's ADDR_UP field.
     *
     * Address field (High)
     */
    inline uint32_t get_DESC_ADDR_UP_6_ADDR_UP() volatile
    {
        return (DESC_ADDR_UP_6 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_UP_6's ADDR_UP field.
     *
     * Address field (High)
     */
    inline void set_DESC_ADDR_UP_6_ADDR_UP(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_UP_6;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_UP_6 = curr;
    }

    /**
     * Get DESC_ADDR_DOWN_6's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline uint32_t get_DESC_ADDR_DOWN_6_ADDR_DOWN() volatile
    {
        return (DESC_ADDR_DOWN_6 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_DOWN_6's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline void set_DESC_ADDR_DOWN_6_ADDR_DOWN(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_DOWN_6;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_DOWN_6 = curr;
    }

    /**
     * Get DESC_CTRL0_7's RT_ORDER bit.
     *
     * Restore order
     */
    inline bool get_DESC_CTRL0_7_RT_ORDER() volatile
    {
        return DESC_CTRL0_7 & (1u << 21u);
    }

    /**
     * Set DESC_CTRL0_7's RT_ORDER bit.
     *
     * Restore order
     */
    inline void set_DESC_CTRL0_7_RT_ORDER() volatile
    {
        DESC_CTRL0_7 |= 1u << 21u;
    }

    /**
     * Clear DESC_CTRL0_7's RT_ORDER bit.
     *
     * Restore order
     */
    inline void clear_DESC_CTRL0_7_RT_ORDER() volatile
    {
        DESC_CTRL0_7 &= ~(1u << 21u);
    }

    /**
     * Toggle DESC_CTRL0_7's RT_ORDER bit.
     *
     * Restore order
     */
    inline void toggle_DESC_CTRL0_7_RT_ORDER() volatile
    {
        DESC_CTRL0_7 ^= 1u << 21u;
    }

    /**
     * Get DESC_CTRL0_7's SV_ORDER bit.
     *
     * Save Order
     */
    inline bool get_DESC_CTRL0_7_SV_ORDER() volatile
    {
        return DESC_CTRL0_7 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL0_7's SV_ORDER bit.
     *
     * Save Order
     */
    inline void set_DESC_CTRL0_7_SV_ORDER() volatile
    {
        DESC_CTRL0_7 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL0_7's SV_ORDER bit.
     *
     * Save Order
     */
    inline void clear_DESC_CTRL0_7_SV_ORDER() volatile
    {
        DESC_CTRL0_7 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL0_7's SV_ORDER bit.
     *
     * Save Order
     */
    inline void toggle_DESC_CTRL0_7_SV_ORDER() volatile
    {
        DESC_CTRL0_7 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL0_7's END field.
     *
     * End index
     */
    inline uint16_t get_DESC_CTRL0_7_END() volatile
    {
        return (DESC_CTRL0_7 >> 10u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_7's END field.
     *
     * End index
     */
    inline void set_DESC_CTRL0_7_END(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_7;

        curr &= ~(0b1111111111u << 10u);
        curr |= (value & 0b1111111111u) << 10u;

        DESC_CTRL0_7 = curr;
    }

    /**
     * Get DESC_CTRL0_7's START field.
     *
     * Start index
     */
    inline uint16_t get_DESC_CTRL0_7_START() volatile
    {
        return (DESC_CTRL0_7 >> 0u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_7's START field.
     *
     * Start index
     */
    inline void set_DESC_CTRL0_7_START(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_7;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        DESC_CTRL0_7 = curr;
    }

    /**
     * Get all of DESC_CTRL0_7's bit fields.
     *
     * (read-write) Descriptor Control0 7 Register
     */
    inline void get_DESC_CTRL0_7(bool &RT_ORDER, bool &SV_ORDER, uint16_t &END,
                                 uint16_t &START) volatile
    {
        uint32_t curr = DESC_CTRL0_7;

        RT_ORDER = curr & (1u << 21u);
        SV_ORDER = curr & (1u << 20u);
        END = (curr >> 10u) & 0b1111111111u;
        START = (curr >> 0u) & 0b1111111111u;
    }

    /**
     * Set all of DESC_CTRL0_7's bit fields.
     *
     * (read-write) Descriptor Control0 7 Register
     */
    inline void set_DESC_CTRL0_7(bool RT_ORDER, bool SV_ORDER, uint16_t END,
                                 uint16_t START) volatile
    {
        uint32_t curr = DESC_CTRL0_7;

        curr &= ~(0b1u << 21u);
        curr |= (RT_ORDER & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (SV_ORDER & 0b1u) << 20u;
        curr &= ~(0b1111111111u << 10u);
        curr |= (END & 0b1111111111u) << 10u;
        curr &= ~(0b1111111111u << 0u);
        curr |= (START & 0b1111111111u) << 0u;

        DESC_CTRL0_7 = curr;
    }

    /**
     * Get DESC_CTRL1_7's DL bit.
     *
     * Domain lock
     */
    inline bool get_DESC_CTRL1_7_DL() volatile
    {
        return DESC_CTRL1_7 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL1_7's DL bit.
     *
     * Domain lock
     */
    inline void set_DESC_CTRL1_7_DL() volatile
    {
        DESC_CTRL1_7 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL1_7's DL bit.
     *
     * Domain lock
     */
    inline void clear_DESC_CTRL1_7_DL() volatile
    {
        DESC_CTRL1_7 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL1_7's DL bit.
     *
     * Domain lock
     */
    inline void toggle_DESC_CTRL1_7_DL() volatile
    {
        DESC_CTRL1_7 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL1_7's WL bit.
     *
     * Write Lock
     */
    inline bool get_DESC_CTRL1_7_WL() volatile
    {
        return DESC_CTRL1_7 & (1u << 19u);
    }

    /**
     * Set DESC_CTRL1_7's WL bit.
     *
     * Write Lock
     */
    inline void set_DESC_CTRL1_7_WL() volatile
    {
        DESC_CTRL1_7 |= 1u << 19u;
    }

    /**
     * Clear DESC_CTRL1_7's WL bit.
     *
     * Write Lock
     */
    inline void clear_DESC_CTRL1_7_WL() volatile
    {
        DESC_CTRL1_7 &= ~(1u << 19u);
    }

    /**
     * Toggle DESC_CTRL1_7's WL bit.
     *
     * Write Lock
     */
    inline void toggle_DESC_CTRL1_7_WL() volatile
    {
        DESC_CTRL1_7 ^= 1u << 19u;
    }

    /**
     * Get DESC_CTRL1_7's RL bit.
     *
     * Read Lock
     */
    inline bool get_DESC_CTRL1_7_RL() volatile
    {
        return DESC_CTRL1_7 & (1u << 18u);
    }

    /**
     * Set DESC_CTRL1_7's RL bit.
     *
     * Read Lock
     */
    inline void set_DESC_CTRL1_7_RL() volatile
    {
        DESC_CTRL1_7 |= 1u << 18u;
    }

    /**
     * Clear DESC_CTRL1_7's RL bit.
     *
     * Read Lock
     */
    inline void clear_DESC_CTRL1_7_RL() volatile
    {
        DESC_CTRL1_7 &= ~(1u << 18u);
    }

    /**
     * Toggle DESC_CTRL1_7's RL bit.
     *
     * Read Lock
     */
    inline void toggle_DESC_CTRL1_7_RL() volatile
    {
        DESC_CTRL1_7 ^= 1u << 18u;
    }

    /**
     * Get DESC_CTRL1_7's CPUD field.
     *
     * CPU Domain
     */
    inline uint8_t get_DESC_CTRL1_7_CPUD() volatile
    {
        return (DESC_CTRL1_7 >> 16u) & 0b11u;
    }

    /**
     * Set DESC_CTRL1_7's CPUD field.
     *
     * CPU Domain
     */
    inline void set_DESC_CTRL1_7_CPUD(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_7;

        curr &= ~(0b11u << 16u);
        curr |= (value & 0b11u) << 16u;

        DESC_CTRL1_7 = curr;
    }

    /**
     * Get DESC_CTRL1_7's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline uint8_t get_DESC_CTRL1_7_RT_PRIORITY() volatile
    {
        return (DESC_CTRL1_7 >> 12u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_7's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline void set_DESC_CTRL1_7_RT_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_7;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        DESC_CTRL1_7 = curr;
    }

    /**
     * Get DESC_CTRL1_7's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline uint8_t get_DESC_CTRL1_7_SV_PRIORITY() volatile
    {
        return (DESC_CTRL1_7 >> 8u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_7's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline void set_DESC_CTRL1_7_SV_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_7;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        DESC_CTRL1_7 = curr;
    }

    /**
     * Get DESC_CTRL1_7's GP_EN bit.
     *
     * Group Enable
     */
    inline bool get_DESC_CTRL1_7_GP_EN() volatile
    {
        return DESC_CTRL1_7 & (1u << 7u);
    }

    /**
     * Set DESC_CTRL1_7's GP_EN bit.
     *
     * Group Enable
     */
    inline void set_DESC_CTRL1_7_GP_EN() volatile
    {
        DESC_CTRL1_7 |= 1u << 7u;
    }

    /**
     * Clear DESC_CTRL1_7's GP_EN bit.
     *
     * Group Enable
     */
    inline void clear_DESC_CTRL1_7_GP_EN() volatile
    {
        DESC_CTRL1_7 &= ~(1u << 7u);
    }

    /**
     * Toggle DESC_CTRL1_7's GP_EN bit.
     *
     * Group Enable
     */
    inline void toggle_DESC_CTRL1_7_GP_EN() volatile
    {
        DESC_CTRL1_7 ^= 1u << 7u;
    }

    /**
     * Get DESC_CTRL1_7's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline SSARC_LP_DESC_CTRL1_7_POWER_DOMAIN
    get_DESC_CTRL1_7_POWER_DOMAIN() volatile
    {
        return SSARC_LP_DESC_CTRL1_7_POWER_DOMAIN((DESC_CTRL1_7 >> 4u) &
                                                  0b111u);
    }

    /**
     * Set DESC_CTRL1_7's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline void set_DESC_CTRL1_7_POWER_DOMAIN(
        SSARC_LP_DESC_CTRL1_7_POWER_DOMAIN value) volatile
    {
        uint32_t curr = DESC_CTRL1_7;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        DESC_CTRL1_7 = curr;
    }

    /**
     * Get DESC_CTRL1_7's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline bool get_DESC_CTRL1_7_SW_TRIG_RT() volatile
    {
        return DESC_CTRL1_7 & (1u << 1u);
    }

    /**
     * Set DESC_CTRL1_7's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void set_DESC_CTRL1_7_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_7 |= 1u << 1u;
    }

    /**
     * Clear DESC_CTRL1_7's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void clear_DESC_CTRL1_7_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_7 &= ~(1u << 1u);
    }

    /**
     * Toggle DESC_CTRL1_7's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void toggle_DESC_CTRL1_7_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_7 ^= 1u << 1u;
    }

    /**
     * Get DESC_CTRL1_7's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline bool get_DESC_CTRL1_7_SW_TRIG_SV() volatile
    {
        return DESC_CTRL1_7 & (1u << 0u);
    }

    /**
     * Set DESC_CTRL1_7's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void set_DESC_CTRL1_7_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_7 |= 1u << 0u;
    }

    /**
     * Clear DESC_CTRL1_7's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void clear_DESC_CTRL1_7_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_7 &= ~(1u << 0u);
    }

    /**
     * Toggle DESC_CTRL1_7's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void toggle_DESC_CTRL1_7_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_7 ^= 1u << 0u;
    }

    /**
     * Get all of DESC_CTRL1_7's bit fields.
     *
     * (read-write) Descriptor Control1 7 Register
     */
    inline void get_DESC_CTRL1_7(
        bool &DL, bool &WL, bool &RL, uint8_t &CPUD, uint8_t &RT_PRIORITY,
        uint8_t &SV_PRIORITY, bool &GP_EN,
        SSARC_LP_DESC_CTRL1_7_POWER_DOMAIN &POWER_DOMAIN, bool &SW_TRIG_RT,
        bool &SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_7;

        DL = curr & (1u << 20u);
        WL = curr & (1u << 19u);
        RL = curr & (1u << 18u);
        CPUD = (curr >> 16u) & 0b11u;
        RT_PRIORITY = (curr >> 12u) & 0b1111u;
        SV_PRIORITY = (curr >> 8u) & 0b1111u;
        GP_EN = curr & (1u << 7u);
        POWER_DOMAIN =
            SSARC_LP_DESC_CTRL1_7_POWER_DOMAIN((curr >> 4u) & 0b111u);
        SW_TRIG_RT = curr & (1u << 1u);
        SW_TRIG_SV = curr & (1u << 0u);
    }

    /**
     * Set all of DESC_CTRL1_7's bit fields.
     *
     * (read-write) Descriptor Control1 7 Register
     */
    inline void set_DESC_CTRL1_7(
        bool DL, bool WL, bool RL, uint8_t CPUD, uint8_t RT_PRIORITY,
        uint8_t SV_PRIORITY, bool GP_EN,
        SSARC_LP_DESC_CTRL1_7_POWER_DOMAIN POWER_DOMAIN, bool SW_TRIG_RT,
        bool SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_7;

        curr &= ~(0b1u << 20u);
        curr |= (DL & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (WL & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (RL & 0b1u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (CPUD & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (RT_PRIORITY & 0b1111u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (SV_PRIORITY & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (GP_EN & 0b1u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(POWER_DOMAIN) & 0b111u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (SW_TRIG_RT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG_SV & 0b1u) << 0u;

        DESC_CTRL1_7 = curr;
    }

    /**
     * Get DESC_ADDR_UP_7's ADDR_UP field.
     *
     * Address field (High)
     */
    inline uint32_t get_DESC_ADDR_UP_7_ADDR_UP() volatile
    {
        return (DESC_ADDR_UP_7 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_UP_7's ADDR_UP field.
     *
     * Address field (High)
     */
    inline void set_DESC_ADDR_UP_7_ADDR_UP(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_UP_7;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_UP_7 = curr;
    }

    /**
     * Get DESC_ADDR_DOWN_7's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline uint32_t get_DESC_ADDR_DOWN_7_ADDR_DOWN() volatile
    {
        return (DESC_ADDR_DOWN_7 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_DOWN_7's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline void set_DESC_ADDR_DOWN_7_ADDR_DOWN(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_DOWN_7;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_DOWN_7 = curr;
    }

    /**
     * Get DESC_CTRL0_8's RT_ORDER bit.
     *
     * Restore order
     */
    inline bool get_DESC_CTRL0_8_RT_ORDER() volatile
    {
        return DESC_CTRL0_8 & (1u << 21u);
    }

    /**
     * Set DESC_CTRL0_8's RT_ORDER bit.
     *
     * Restore order
     */
    inline void set_DESC_CTRL0_8_RT_ORDER() volatile
    {
        DESC_CTRL0_8 |= 1u << 21u;
    }

    /**
     * Clear DESC_CTRL0_8's RT_ORDER bit.
     *
     * Restore order
     */
    inline void clear_DESC_CTRL0_8_RT_ORDER() volatile
    {
        DESC_CTRL0_8 &= ~(1u << 21u);
    }

    /**
     * Toggle DESC_CTRL0_8's RT_ORDER bit.
     *
     * Restore order
     */
    inline void toggle_DESC_CTRL0_8_RT_ORDER() volatile
    {
        DESC_CTRL0_8 ^= 1u << 21u;
    }

    /**
     * Get DESC_CTRL0_8's SV_ORDER bit.
     *
     * Save Order
     */
    inline bool get_DESC_CTRL0_8_SV_ORDER() volatile
    {
        return DESC_CTRL0_8 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL0_8's SV_ORDER bit.
     *
     * Save Order
     */
    inline void set_DESC_CTRL0_8_SV_ORDER() volatile
    {
        DESC_CTRL0_8 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL0_8's SV_ORDER bit.
     *
     * Save Order
     */
    inline void clear_DESC_CTRL0_8_SV_ORDER() volatile
    {
        DESC_CTRL0_8 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL0_8's SV_ORDER bit.
     *
     * Save Order
     */
    inline void toggle_DESC_CTRL0_8_SV_ORDER() volatile
    {
        DESC_CTRL0_8 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL0_8's END field.
     *
     * End index
     */
    inline uint16_t get_DESC_CTRL0_8_END() volatile
    {
        return (DESC_CTRL0_8 >> 10u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_8's END field.
     *
     * End index
     */
    inline void set_DESC_CTRL0_8_END(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_8;

        curr &= ~(0b1111111111u << 10u);
        curr |= (value & 0b1111111111u) << 10u;

        DESC_CTRL0_8 = curr;
    }

    /**
     * Get DESC_CTRL0_8's START field.
     *
     * Start index
     */
    inline uint16_t get_DESC_CTRL0_8_START() volatile
    {
        return (DESC_CTRL0_8 >> 0u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_8's START field.
     *
     * Start index
     */
    inline void set_DESC_CTRL0_8_START(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_8;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        DESC_CTRL0_8 = curr;
    }

    /**
     * Get all of DESC_CTRL0_8's bit fields.
     *
     * (read-write) Descriptor Control0 8 Register
     */
    inline void get_DESC_CTRL0_8(bool &RT_ORDER, bool &SV_ORDER, uint16_t &END,
                                 uint16_t &START) volatile
    {
        uint32_t curr = DESC_CTRL0_8;

        RT_ORDER = curr & (1u << 21u);
        SV_ORDER = curr & (1u << 20u);
        END = (curr >> 10u) & 0b1111111111u;
        START = (curr >> 0u) & 0b1111111111u;
    }

    /**
     * Set all of DESC_CTRL0_8's bit fields.
     *
     * (read-write) Descriptor Control0 8 Register
     */
    inline void set_DESC_CTRL0_8(bool RT_ORDER, bool SV_ORDER, uint16_t END,
                                 uint16_t START) volatile
    {
        uint32_t curr = DESC_CTRL0_8;

        curr &= ~(0b1u << 21u);
        curr |= (RT_ORDER & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (SV_ORDER & 0b1u) << 20u;
        curr &= ~(0b1111111111u << 10u);
        curr |= (END & 0b1111111111u) << 10u;
        curr &= ~(0b1111111111u << 0u);
        curr |= (START & 0b1111111111u) << 0u;

        DESC_CTRL0_8 = curr;
    }

    /**
     * Get DESC_CTRL1_8's DL bit.
     *
     * Domain lock
     */
    inline bool get_DESC_CTRL1_8_DL() volatile
    {
        return DESC_CTRL1_8 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL1_8's DL bit.
     *
     * Domain lock
     */
    inline void set_DESC_CTRL1_8_DL() volatile
    {
        DESC_CTRL1_8 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL1_8's DL bit.
     *
     * Domain lock
     */
    inline void clear_DESC_CTRL1_8_DL() volatile
    {
        DESC_CTRL1_8 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL1_8's DL bit.
     *
     * Domain lock
     */
    inline void toggle_DESC_CTRL1_8_DL() volatile
    {
        DESC_CTRL1_8 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL1_8's WL bit.
     *
     * Write Lock
     */
    inline bool get_DESC_CTRL1_8_WL() volatile
    {
        return DESC_CTRL1_8 & (1u << 19u);
    }

    /**
     * Set DESC_CTRL1_8's WL bit.
     *
     * Write Lock
     */
    inline void set_DESC_CTRL1_8_WL() volatile
    {
        DESC_CTRL1_8 |= 1u << 19u;
    }

    /**
     * Clear DESC_CTRL1_8's WL bit.
     *
     * Write Lock
     */
    inline void clear_DESC_CTRL1_8_WL() volatile
    {
        DESC_CTRL1_8 &= ~(1u << 19u);
    }

    /**
     * Toggle DESC_CTRL1_8's WL bit.
     *
     * Write Lock
     */
    inline void toggle_DESC_CTRL1_8_WL() volatile
    {
        DESC_CTRL1_8 ^= 1u << 19u;
    }

    /**
     * Get DESC_CTRL1_8's RL bit.
     *
     * Read Lock
     */
    inline bool get_DESC_CTRL1_8_RL() volatile
    {
        return DESC_CTRL1_8 & (1u << 18u);
    }

    /**
     * Set DESC_CTRL1_8's RL bit.
     *
     * Read Lock
     */
    inline void set_DESC_CTRL1_8_RL() volatile
    {
        DESC_CTRL1_8 |= 1u << 18u;
    }

    /**
     * Clear DESC_CTRL1_8's RL bit.
     *
     * Read Lock
     */
    inline void clear_DESC_CTRL1_8_RL() volatile
    {
        DESC_CTRL1_8 &= ~(1u << 18u);
    }

    /**
     * Toggle DESC_CTRL1_8's RL bit.
     *
     * Read Lock
     */
    inline void toggle_DESC_CTRL1_8_RL() volatile
    {
        DESC_CTRL1_8 ^= 1u << 18u;
    }

    /**
     * Get DESC_CTRL1_8's CPUD field.
     *
     * CPU Domain
     */
    inline uint8_t get_DESC_CTRL1_8_CPUD() volatile
    {
        return (DESC_CTRL1_8 >> 16u) & 0b11u;
    }

    /**
     * Set DESC_CTRL1_8's CPUD field.
     *
     * CPU Domain
     */
    inline void set_DESC_CTRL1_8_CPUD(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_8;

        curr &= ~(0b11u << 16u);
        curr |= (value & 0b11u) << 16u;

        DESC_CTRL1_8 = curr;
    }

    /**
     * Get DESC_CTRL1_8's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline uint8_t get_DESC_CTRL1_8_RT_PRIORITY() volatile
    {
        return (DESC_CTRL1_8 >> 12u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_8's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline void set_DESC_CTRL1_8_RT_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_8;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        DESC_CTRL1_8 = curr;
    }

    /**
     * Get DESC_CTRL1_8's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline uint8_t get_DESC_CTRL1_8_SV_PRIORITY() volatile
    {
        return (DESC_CTRL1_8 >> 8u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_8's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline void set_DESC_CTRL1_8_SV_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_8;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        DESC_CTRL1_8 = curr;
    }

    /**
     * Get DESC_CTRL1_8's GP_EN bit.
     *
     * Group Enable
     */
    inline bool get_DESC_CTRL1_8_GP_EN() volatile
    {
        return DESC_CTRL1_8 & (1u << 7u);
    }

    /**
     * Set DESC_CTRL1_8's GP_EN bit.
     *
     * Group Enable
     */
    inline void set_DESC_CTRL1_8_GP_EN() volatile
    {
        DESC_CTRL1_8 |= 1u << 7u;
    }

    /**
     * Clear DESC_CTRL1_8's GP_EN bit.
     *
     * Group Enable
     */
    inline void clear_DESC_CTRL1_8_GP_EN() volatile
    {
        DESC_CTRL1_8 &= ~(1u << 7u);
    }

    /**
     * Toggle DESC_CTRL1_8's GP_EN bit.
     *
     * Group Enable
     */
    inline void toggle_DESC_CTRL1_8_GP_EN() volatile
    {
        DESC_CTRL1_8 ^= 1u << 7u;
    }

    /**
     * Get DESC_CTRL1_8's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline SSARC_LP_DESC_CTRL1_8_POWER_DOMAIN
    get_DESC_CTRL1_8_POWER_DOMAIN() volatile
    {
        return SSARC_LP_DESC_CTRL1_8_POWER_DOMAIN((DESC_CTRL1_8 >> 4u) &
                                                  0b111u);
    }

    /**
     * Set DESC_CTRL1_8's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline void set_DESC_CTRL1_8_POWER_DOMAIN(
        SSARC_LP_DESC_CTRL1_8_POWER_DOMAIN value) volatile
    {
        uint32_t curr = DESC_CTRL1_8;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        DESC_CTRL1_8 = curr;
    }

    /**
     * Get DESC_CTRL1_8's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline bool get_DESC_CTRL1_8_SW_TRIG_RT() volatile
    {
        return DESC_CTRL1_8 & (1u << 1u);
    }

    /**
     * Set DESC_CTRL1_8's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void set_DESC_CTRL1_8_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_8 |= 1u << 1u;
    }

    /**
     * Clear DESC_CTRL1_8's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void clear_DESC_CTRL1_8_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_8 &= ~(1u << 1u);
    }

    /**
     * Toggle DESC_CTRL1_8's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void toggle_DESC_CTRL1_8_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_8 ^= 1u << 1u;
    }

    /**
     * Get DESC_CTRL1_8's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline bool get_DESC_CTRL1_8_SW_TRIG_SV() volatile
    {
        return DESC_CTRL1_8 & (1u << 0u);
    }

    /**
     * Set DESC_CTRL1_8's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void set_DESC_CTRL1_8_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_8 |= 1u << 0u;
    }

    /**
     * Clear DESC_CTRL1_8's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void clear_DESC_CTRL1_8_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_8 &= ~(1u << 0u);
    }

    /**
     * Toggle DESC_CTRL1_8's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void toggle_DESC_CTRL1_8_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_8 ^= 1u << 0u;
    }

    /**
     * Get all of DESC_CTRL1_8's bit fields.
     *
     * (read-write) Descriptor Control1 8 Register
     */
    inline void get_DESC_CTRL1_8(
        bool &DL, bool &WL, bool &RL, uint8_t &CPUD, uint8_t &RT_PRIORITY,
        uint8_t &SV_PRIORITY, bool &GP_EN,
        SSARC_LP_DESC_CTRL1_8_POWER_DOMAIN &POWER_DOMAIN, bool &SW_TRIG_RT,
        bool &SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_8;

        DL = curr & (1u << 20u);
        WL = curr & (1u << 19u);
        RL = curr & (1u << 18u);
        CPUD = (curr >> 16u) & 0b11u;
        RT_PRIORITY = (curr >> 12u) & 0b1111u;
        SV_PRIORITY = (curr >> 8u) & 0b1111u;
        GP_EN = curr & (1u << 7u);
        POWER_DOMAIN =
            SSARC_LP_DESC_CTRL1_8_POWER_DOMAIN((curr >> 4u) & 0b111u);
        SW_TRIG_RT = curr & (1u << 1u);
        SW_TRIG_SV = curr & (1u << 0u);
    }

    /**
     * Set all of DESC_CTRL1_8's bit fields.
     *
     * (read-write) Descriptor Control1 8 Register
     */
    inline void set_DESC_CTRL1_8(
        bool DL, bool WL, bool RL, uint8_t CPUD, uint8_t RT_PRIORITY,
        uint8_t SV_PRIORITY, bool GP_EN,
        SSARC_LP_DESC_CTRL1_8_POWER_DOMAIN POWER_DOMAIN, bool SW_TRIG_RT,
        bool SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_8;

        curr &= ~(0b1u << 20u);
        curr |= (DL & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (WL & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (RL & 0b1u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (CPUD & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (RT_PRIORITY & 0b1111u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (SV_PRIORITY & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (GP_EN & 0b1u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(POWER_DOMAIN) & 0b111u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (SW_TRIG_RT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG_SV & 0b1u) << 0u;

        DESC_CTRL1_8 = curr;
    }

    /**
     * Get DESC_ADDR_UP_8's ADDR_UP field.
     *
     * Address field (High)
     */
    inline uint32_t get_DESC_ADDR_UP_8_ADDR_UP() volatile
    {
        return (DESC_ADDR_UP_8 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_UP_8's ADDR_UP field.
     *
     * Address field (High)
     */
    inline void set_DESC_ADDR_UP_8_ADDR_UP(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_UP_8;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_UP_8 = curr;
    }

    /**
     * Get DESC_ADDR_DOWN_8's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline uint32_t get_DESC_ADDR_DOWN_8_ADDR_DOWN() volatile
    {
        return (DESC_ADDR_DOWN_8 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_DOWN_8's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline void set_DESC_ADDR_DOWN_8_ADDR_DOWN(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_DOWN_8;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_DOWN_8 = curr;
    }

    /**
     * Get DESC_CTRL0_9's RT_ORDER bit.
     *
     * Restore order
     */
    inline bool get_DESC_CTRL0_9_RT_ORDER() volatile
    {
        return DESC_CTRL0_9 & (1u << 21u);
    }

    /**
     * Set DESC_CTRL0_9's RT_ORDER bit.
     *
     * Restore order
     */
    inline void set_DESC_CTRL0_9_RT_ORDER() volatile
    {
        DESC_CTRL0_9 |= 1u << 21u;
    }

    /**
     * Clear DESC_CTRL0_9's RT_ORDER bit.
     *
     * Restore order
     */
    inline void clear_DESC_CTRL0_9_RT_ORDER() volatile
    {
        DESC_CTRL0_9 &= ~(1u << 21u);
    }

    /**
     * Toggle DESC_CTRL0_9's RT_ORDER bit.
     *
     * Restore order
     */
    inline void toggle_DESC_CTRL0_9_RT_ORDER() volatile
    {
        DESC_CTRL0_9 ^= 1u << 21u;
    }

    /**
     * Get DESC_CTRL0_9's SV_ORDER bit.
     *
     * Save Order
     */
    inline bool get_DESC_CTRL0_9_SV_ORDER() volatile
    {
        return DESC_CTRL0_9 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL0_9's SV_ORDER bit.
     *
     * Save Order
     */
    inline void set_DESC_CTRL0_9_SV_ORDER() volatile
    {
        DESC_CTRL0_9 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL0_9's SV_ORDER bit.
     *
     * Save Order
     */
    inline void clear_DESC_CTRL0_9_SV_ORDER() volatile
    {
        DESC_CTRL0_9 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL0_9's SV_ORDER bit.
     *
     * Save Order
     */
    inline void toggle_DESC_CTRL0_9_SV_ORDER() volatile
    {
        DESC_CTRL0_9 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL0_9's END field.
     *
     * End index
     */
    inline uint16_t get_DESC_CTRL0_9_END() volatile
    {
        return (DESC_CTRL0_9 >> 10u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_9's END field.
     *
     * End index
     */
    inline void set_DESC_CTRL0_9_END(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_9;

        curr &= ~(0b1111111111u << 10u);
        curr |= (value & 0b1111111111u) << 10u;

        DESC_CTRL0_9 = curr;
    }

    /**
     * Get DESC_CTRL0_9's START field.
     *
     * Start index
     */
    inline uint16_t get_DESC_CTRL0_9_START() volatile
    {
        return (DESC_CTRL0_9 >> 0u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_9's START field.
     *
     * Start index
     */
    inline void set_DESC_CTRL0_9_START(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_9;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        DESC_CTRL0_9 = curr;
    }

    /**
     * Get all of DESC_CTRL0_9's bit fields.
     *
     * (read-write) Descriptor Control0 9 Register
     */
    inline void get_DESC_CTRL0_9(bool &RT_ORDER, bool &SV_ORDER, uint16_t &END,
                                 uint16_t &START) volatile
    {
        uint32_t curr = DESC_CTRL0_9;

        RT_ORDER = curr & (1u << 21u);
        SV_ORDER = curr & (1u << 20u);
        END = (curr >> 10u) & 0b1111111111u;
        START = (curr >> 0u) & 0b1111111111u;
    }

    /**
     * Set all of DESC_CTRL0_9's bit fields.
     *
     * (read-write) Descriptor Control0 9 Register
     */
    inline void set_DESC_CTRL0_9(bool RT_ORDER, bool SV_ORDER, uint16_t END,
                                 uint16_t START) volatile
    {
        uint32_t curr = DESC_CTRL0_9;

        curr &= ~(0b1u << 21u);
        curr |= (RT_ORDER & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (SV_ORDER & 0b1u) << 20u;
        curr &= ~(0b1111111111u << 10u);
        curr |= (END & 0b1111111111u) << 10u;
        curr &= ~(0b1111111111u << 0u);
        curr |= (START & 0b1111111111u) << 0u;

        DESC_CTRL0_9 = curr;
    }

    /**
     * Get DESC_CTRL1_9's DL bit.
     *
     * Domain lock
     */
    inline bool get_DESC_CTRL1_9_DL() volatile
    {
        return DESC_CTRL1_9 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL1_9's DL bit.
     *
     * Domain lock
     */
    inline void set_DESC_CTRL1_9_DL() volatile
    {
        DESC_CTRL1_9 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL1_9's DL bit.
     *
     * Domain lock
     */
    inline void clear_DESC_CTRL1_9_DL() volatile
    {
        DESC_CTRL1_9 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL1_9's DL bit.
     *
     * Domain lock
     */
    inline void toggle_DESC_CTRL1_9_DL() volatile
    {
        DESC_CTRL1_9 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL1_9's WL bit.
     *
     * Write Lock
     */
    inline bool get_DESC_CTRL1_9_WL() volatile
    {
        return DESC_CTRL1_9 & (1u << 19u);
    }

    /**
     * Set DESC_CTRL1_9's WL bit.
     *
     * Write Lock
     */
    inline void set_DESC_CTRL1_9_WL() volatile
    {
        DESC_CTRL1_9 |= 1u << 19u;
    }

    /**
     * Clear DESC_CTRL1_9's WL bit.
     *
     * Write Lock
     */
    inline void clear_DESC_CTRL1_9_WL() volatile
    {
        DESC_CTRL1_9 &= ~(1u << 19u);
    }

    /**
     * Toggle DESC_CTRL1_9's WL bit.
     *
     * Write Lock
     */
    inline void toggle_DESC_CTRL1_9_WL() volatile
    {
        DESC_CTRL1_9 ^= 1u << 19u;
    }

    /**
     * Get DESC_CTRL1_9's RL bit.
     *
     * Read Lock
     */
    inline bool get_DESC_CTRL1_9_RL() volatile
    {
        return DESC_CTRL1_9 & (1u << 18u);
    }

    /**
     * Set DESC_CTRL1_9's RL bit.
     *
     * Read Lock
     */
    inline void set_DESC_CTRL1_9_RL() volatile
    {
        DESC_CTRL1_9 |= 1u << 18u;
    }

    /**
     * Clear DESC_CTRL1_9's RL bit.
     *
     * Read Lock
     */
    inline void clear_DESC_CTRL1_9_RL() volatile
    {
        DESC_CTRL1_9 &= ~(1u << 18u);
    }

    /**
     * Toggle DESC_CTRL1_9's RL bit.
     *
     * Read Lock
     */
    inline void toggle_DESC_CTRL1_9_RL() volatile
    {
        DESC_CTRL1_9 ^= 1u << 18u;
    }

    /**
     * Get DESC_CTRL1_9's CPUD field.
     *
     * CPU Domain
     */
    inline uint8_t get_DESC_CTRL1_9_CPUD() volatile
    {
        return (DESC_CTRL1_9 >> 16u) & 0b11u;
    }

    /**
     * Set DESC_CTRL1_9's CPUD field.
     *
     * CPU Domain
     */
    inline void set_DESC_CTRL1_9_CPUD(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_9;

        curr &= ~(0b11u << 16u);
        curr |= (value & 0b11u) << 16u;

        DESC_CTRL1_9 = curr;
    }

    /**
     * Get DESC_CTRL1_9's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline uint8_t get_DESC_CTRL1_9_RT_PRIORITY() volatile
    {
        return (DESC_CTRL1_9 >> 12u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_9's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline void set_DESC_CTRL1_9_RT_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_9;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        DESC_CTRL1_9 = curr;
    }

    /**
     * Get DESC_CTRL1_9's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline uint8_t get_DESC_CTRL1_9_SV_PRIORITY() volatile
    {
        return (DESC_CTRL1_9 >> 8u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_9's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline void set_DESC_CTRL1_9_SV_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_9;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        DESC_CTRL1_9 = curr;
    }

    /**
     * Get DESC_CTRL1_9's GP_EN bit.
     *
     * Group Enable
     */
    inline bool get_DESC_CTRL1_9_GP_EN() volatile
    {
        return DESC_CTRL1_9 & (1u << 7u);
    }

    /**
     * Set DESC_CTRL1_9's GP_EN bit.
     *
     * Group Enable
     */
    inline void set_DESC_CTRL1_9_GP_EN() volatile
    {
        DESC_CTRL1_9 |= 1u << 7u;
    }

    /**
     * Clear DESC_CTRL1_9's GP_EN bit.
     *
     * Group Enable
     */
    inline void clear_DESC_CTRL1_9_GP_EN() volatile
    {
        DESC_CTRL1_9 &= ~(1u << 7u);
    }

    /**
     * Toggle DESC_CTRL1_9's GP_EN bit.
     *
     * Group Enable
     */
    inline void toggle_DESC_CTRL1_9_GP_EN() volatile
    {
        DESC_CTRL1_9 ^= 1u << 7u;
    }

    /**
     * Get DESC_CTRL1_9's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline SSARC_LP_DESC_CTRL1_9_POWER_DOMAIN
    get_DESC_CTRL1_9_POWER_DOMAIN() volatile
    {
        return SSARC_LP_DESC_CTRL1_9_POWER_DOMAIN((DESC_CTRL1_9 >> 4u) &
                                                  0b111u);
    }

    /**
     * Set DESC_CTRL1_9's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline void set_DESC_CTRL1_9_POWER_DOMAIN(
        SSARC_LP_DESC_CTRL1_9_POWER_DOMAIN value) volatile
    {
        uint32_t curr = DESC_CTRL1_9;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        DESC_CTRL1_9 = curr;
    }

    /**
     * Get DESC_CTRL1_9's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline bool get_DESC_CTRL1_9_SW_TRIG_RT() volatile
    {
        return DESC_CTRL1_9 & (1u << 1u);
    }

    /**
     * Set DESC_CTRL1_9's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void set_DESC_CTRL1_9_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_9 |= 1u << 1u;
    }

    /**
     * Clear DESC_CTRL1_9's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void clear_DESC_CTRL1_9_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_9 &= ~(1u << 1u);
    }

    /**
     * Toggle DESC_CTRL1_9's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void toggle_DESC_CTRL1_9_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_9 ^= 1u << 1u;
    }

    /**
     * Get DESC_CTRL1_9's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline bool get_DESC_CTRL1_9_SW_TRIG_SV() volatile
    {
        return DESC_CTRL1_9 & (1u << 0u);
    }

    /**
     * Set DESC_CTRL1_9's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void set_DESC_CTRL1_9_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_9 |= 1u << 0u;
    }

    /**
     * Clear DESC_CTRL1_9's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void clear_DESC_CTRL1_9_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_9 &= ~(1u << 0u);
    }

    /**
     * Toggle DESC_CTRL1_9's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void toggle_DESC_CTRL1_9_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_9 ^= 1u << 0u;
    }

    /**
     * Get all of DESC_CTRL1_9's bit fields.
     *
     * (read-write) Descriptor Control1 9 Register
     */
    inline void get_DESC_CTRL1_9(
        bool &DL, bool &WL, bool &RL, uint8_t &CPUD, uint8_t &RT_PRIORITY,
        uint8_t &SV_PRIORITY, bool &GP_EN,
        SSARC_LP_DESC_CTRL1_9_POWER_DOMAIN &POWER_DOMAIN, bool &SW_TRIG_RT,
        bool &SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_9;

        DL = curr & (1u << 20u);
        WL = curr & (1u << 19u);
        RL = curr & (1u << 18u);
        CPUD = (curr >> 16u) & 0b11u;
        RT_PRIORITY = (curr >> 12u) & 0b1111u;
        SV_PRIORITY = (curr >> 8u) & 0b1111u;
        GP_EN = curr & (1u << 7u);
        POWER_DOMAIN =
            SSARC_LP_DESC_CTRL1_9_POWER_DOMAIN((curr >> 4u) & 0b111u);
        SW_TRIG_RT = curr & (1u << 1u);
        SW_TRIG_SV = curr & (1u << 0u);
    }

    /**
     * Set all of DESC_CTRL1_9's bit fields.
     *
     * (read-write) Descriptor Control1 9 Register
     */
    inline void set_DESC_CTRL1_9(
        bool DL, bool WL, bool RL, uint8_t CPUD, uint8_t RT_PRIORITY,
        uint8_t SV_PRIORITY, bool GP_EN,
        SSARC_LP_DESC_CTRL1_9_POWER_DOMAIN POWER_DOMAIN, bool SW_TRIG_RT,
        bool SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_9;

        curr &= ~(0b1u << 20u);
        curr |= (DL & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (WL & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (RL & 0b1u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (CPUD & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (RT_PRIORITY & 0b1111u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (SV_PRIORITY & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (GP_EN & 0b1u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(POWER_DOMAIN) & 0b111u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (SW_TRIG_RT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG_SV & 0b1u) << 0u;

        DESC_CTRL1_9 = curr;
    }

    /**
     * Get DESC_ADDR_UP_9's ADDR_UP field.
     *
     * Address field (High)
     */
    inline uint32_t get_DESC_ADDR_UP_9_ADDR_UP() volatile
    {
        return (DESC_ADDR_UP_9 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_UP_9's ADDR_UP field.
     *
     * Address field (High)
     */
    inline void set_DESC_ADDR_UP_9_ADDR_UP(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_UP_9;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_UP_9 = curr;
    }

    /**
     * Get DESC_ADDR_DOWN_9's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline uint32_t get_DESC_ADDR_DOWN_9_ADDR_DOWN() volatile
    {
        return (DESC_ADDR_DOWN_9 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_DOWN_9's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline void set_DESC_ADDR_DOWN_9_ADDR_DOWN(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_DOWN_9;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_DOWN_9 = curr;
    }

    /**
     * Get DESC_CTRL0_10's RT_ORDER bit.
     *
     * Restore order
     */
    inline bool get_DESC_CTRL0_10_RT_ORDER() volatile
    {
        return DESC_CTRL0_10 & (1u << 21u);
    }

    /**
     * Set DESC_CTRL0_10's RT_ORDER bit.
     *
     * Restore order
     */
    inline void set_DESC_CTRL0_10_RT_ORDER() volatile
    {
        DESC_CTRL0_10 |= 1u << 21u;
    }

    /**
     * Clear DESC_CTRL0_10's RT_ORDER bit.
     *
     * Restore order
     */
    inline void clear_DESC_CTRL0_10_RT_ORDER() volatile
    {
        DESC_CTRL0_10 &= ~(1u << 21u);
    }

    /**
     * Toggle DESC_CTRL0_10's RT_ORDER bit.
     *
     * Restore order
     */
    inline void toggle_DESC_CTRL0_10_RT_ORDER() volatile
    {
        DESC_CTRL0_10 ^= 1u << 21u;
    }

    /**
     * Get DESC_CTRL0_10's SV_ORDER bit.
     *
     * Save Order
     */
    inline bool get_DESC_CTRL0_10_SV_ORDER() volatile
    {
        return DESC_CTRL0_10 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL0_10's SV_ORDER bit.
     *
     * Save Order
     */
    inline void set_DESC_CTRL0_10_SV_ORDER() volatile
    {
        DESC_CTRL0_10 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL0_10's SV_ORDER bit.
     *
     * Save Order
     */
    inline void clear_DESC_CTRL0_10_SV_ORDER() volatile
    {
        DESC_CTRL0_10 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL0_10's SV_ORDER bit.
     *
     * Save Order
     */
    inline void toggle_DESC_CTRL0_10_SV_ORDER() volatile
    {
        DESC_CTRL0_10 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL0_10's END field.
     *
     * End index
     */
    inline uint16_t get_DESC_CTRL0_10_END() volatile
    {
        return (DESC_CTRL0_10 >> 10u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_10's END field.
     *
     * End index
     */
    inline void set_DESC_CTRL0_10_END(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_10;

        curr &= ~(0b1111111111u << 10u);
        curr |= (value & 0b1111111111u) << 10u;

        DESC_CTRL0_10 = curr;
    }

    /**
     * Get DESC_CTRL0_10's START field.
     *
     * Start index
     */
    inline uint16_t get_DESC_CTRL0_10_START() volatile
    {
        return (DESC_CTRL0_10 >> 0u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_10's START field.
     *
     * Start index
     */
    inline void set_DESC_CTRL0_10_START(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_10;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        DESC_CTRL0_10 = curr;
    }

    /**
     * Get all of DESC_CTRL0_10's bit fields.
     *
     * (read-write) Descriptor Control0 10 Register
     */
    inline void get_DESC_CTRL0_10(bool &RT_ORDER, bool &SV_ORDER,
                                  uint16_t &END, uint16_t &START) volatile
    {
        uint32_t curr = DESC_CTRL0_10;

        RT_ORDER = curr & (1u << 21u);
        SV_ORDER = curr & (1u << 20u);
        END = (curr >> 10u) & 0b1111111111u;
        START = (curr >> 0u) & 0b1111111111u;
    }

    /**
     * Set all of DESC_CTRL0_10's bit fields.
     *
     * (read-write) Descriptor Control0 10 Register
     */
    inline void set_DESC_CTRL0_10(bool RT_ORDER, bool SV_ORDER, uint16_t END,
                                  uint16_t START) volatile
    {
        uint32_t curr = DESC_CTRL0_10;

        curr &= ~(0b1u << 21u);
        curr |= (RT_ORDER & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (SV_ORDER & 0b1u) << 20u;
        curr &= ~(0b1111111111u << 10u);
        curr |= (END & 0b1111111111u) << 10u;
        curr &= ~(0b1111111111u << 0u);
        curr |= (START & 0b1111111111u) << 0u;

        DESC_CTRL0_10 = curr;
    }

    /**
     * Get DESC_CTRL1_10's DL bit.
     *
     * Domain lock
     */
    inline bool get_DESC_CTRL1_10_DL() volatile
    {
        return DESC_CTRL1_10 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL1_10's DL bit.
     *
     * Domain lock
     */
    inline void set_DESC_CTRL1_10_DL() volatile
    {
        DESC_CTRL1_10 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL1_10's DL bit.
     *
     * Domain lock
     */
    inline void clear_DESC_CTRL1_10_DL() volatile
    {
        DESC_CTRL1_10 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL1_10's DL bit.
     *
     * Domain lock
     */
    inline void toggle_DESC_CTRL1_10_DL() volatile
    {
        DESC_CTRL1_10 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL1_10's WL bit.
     *
     * Write Lock
     */
    inline bool get_DESC_CTRL1_10_WL() volatile
    {
        return DESC_CTRL1_10 & (1u << 19u);
    }

    /**
     * Set DESC_CTRL1_10's WL bit.
     *
     * Write Lock
     */
    inline void set_DESC_CTRL1_10_WL() volatile
    {
        DESC_CTRL1_10 |= 1u << 19u;
    }

    /**
     * Clear DESC_CTRL1_10's WL bit.
     *
     * Write Lock
     */
    inline void clear_DESC_CTRL1_10_WL() volatile
    {
        DESC_CTRL1_10 &= ~(1u << 19u);
    }

    /**
     * Toggle DESC_CTRL1_10's WL bit.
     *
     * Write Lock
     */
    inline void toggle_DESC_CTRL1_10_WL() volatile
    {
        DESC_CTRL1_10 ^= 1u << 19u;
    }

    /**
     * Get DESC_CTRL1_10's RL bit.
     *
     * Read Lock
     */
    inline bool get_DESC_CTRL1_10_RL() volatile
    {
        return DESC_CTRL1_10 & (1u << 18u);
    }

    /**
     * Set DESC_CTRL1_10's RL bit.
     *
     * Read Lock
     */
    inline void set_DESC_CTRL1_10_RL() volatile
    {
        DESC_CTRL1_10 |= 1u << 18u;
    }

    /**
     * Clear DESC_CTRL1_10's RL bit.
     *
     * Read Lock
     */
    inline void clear_DESC_CTRL1_10_RL() volatile
    {
        DESC_CTRL1_10 &= ~(1u << 18u);
    }

    /**
     * Toggle DESC_CTRL1_10's RL bit.
     *
     * Read Lock
     */
    inline void toggle_DESC_CTRL1_10_RL() volatile
    {
        DESC_CTRL1_10 ^= 1u << 18u;
    }

    /**
     * Get DESC_CTRL1_10's CPUD field.
     *
     * CPU Domain
     */
    inline uint8_t get_DESC_CTRL1_10_CPUD() volatile
    {
        return (DESC_CTRL1_10 >> 16u) & 0b11u;
    }

    /**
     * Set DESC_CTRL1_10's CPUD field.
     *
     * CPU Domain
     */
    inline void set_DESC_CTRL1_10_CPUD(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_10;

        curr &= ~(0b11u << 16u);
        curr |= (value & 0b11u) << 16u;

        DESC_CTRL1_10 = curr;
    }

    /**
     * Get DESC_CTRL1_10's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline uint8_t get_DESC_CTRL1_10_RT_PRIORITY() volatile
    {
        return (DESC_CTRL1_10 >> 12u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_10's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline void set_DESC_CTRL1_10_RT_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_10;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        DESC_CTRL1_10 = curr;
    }

    /**
     * Get DESC_CTRL1_10's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline uint8_t get_DESC_CTRL1_10_SV_PRIORITY() volatile
    {
        return (DESC_CTRL1_10 >> 8u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_10's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline void set_DESC_CTRL1_10_SV_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_10;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        DESC_CTRL1_10 = curr;
    }

    /**
     * Get DESC_CTRL1_10's GP_EN bit.
     *
     * Group Enable
     */
    inline bool get_DESC_CTRL1_10_GP_EN() volatile
    {
        return DESC_CTRL1_10 & (1u << 7u);
    }

    /**
     * Set DESC_CTRL1_10's GP_EN bit.
     *
     * Group Enable
     */
    inline void set_DESC_CTRL1_10_GP_EN() volatile
    {
        DESC_CTRL1_10 |= 1u << 7u;
    }

    /**
     * Clear DESC_CTRL1_10's GP_EN bit.
     *
     * Group Enable
     */
    inline void clear_DESC_CTRL1_10_GP_EN() volatile
    {
        DESC_CTRL1_10 &= ~(1u << 7u);
    }

    /**
     * Toggle DESC_CTRL1_10's GP_EN bit.
     *
     * Group Enable
     */
    inline void toggle_DESC_CTRL1_10_GP_EN() volatile
    {
        DESC_CTRL1_10 ^= 1u << 7u;
    }

    /**
     * Get DESC_CTRL1_10's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline SSARC_LP_DESC_CTRL1_10_POWER_DOMAIN
    get_DESC_CTRL1_10_POWER_DOMAIN() volatile
    {
        return SSARC_LP_DESC_CTRL1_10_POWER_DOMAIN((DESC_CTRL1_10 >> 4u) &
                                                   0b111u);
    }

    /**
     * Set DESC_CTRL1_10's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline void set_DESC_CTRL1_10_POWER_DOMAIN(
        SSARC_LP_DESC_CTRL1_10_POWER_DOMAIN value) volatile
    {
        uint32_t curr = DESC_CTRL1_10;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        DESC_CTRL1_10 = curr;
    }

    /**
     * Get DESC_CTRL1_10's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline bool get_DESC_CTRL1_10_SW_TRIG_RT() volatile
    {
        return DESC_CTRL1_10 & (1u << 1u);
    }

    /**
     * Set DESC_CTRL1_10's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void set_DESC_CTRL1_10_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_10 |= 1u << 1u;
    }

    /**
     * Clear DESC_CTRL1_10's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void clear_DESC_CTRL1_10_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_10 &= ~(1u << 1u);
    }

    /**
     * Toggle DESC_CTRL1_10's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void toggle_DESC_CTRL1_10_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_10 ^= 1u << 1u;
    }

    /**
     * Get DESC_CTRL1_10's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline bool get_DESC_CTRL1_10_SW_TRIG_SV() volatile
    {
        return DESC_CTRL1_10 & (1u << 0u);
    }

    /**
     * Set DESC_CTRL1_10's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void set_DESC_CTRL1_10_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_10 |= 1u << 0u;
    }

    /**
     * Clear DESC_CTRL1_10's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void clear_DESC_CTRL1_10_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_10 &= ~(1u << 0u);
    }

    /**
     * Toggle DESC_CTRL1_10's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void toggle_DESC_CTRL1_10_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_10 ^= 1u << 0u;
    }

    /**
     * Get all of DESC_CTRL1_10's bit fields.
     *
     * (read-write) Descriptor Control1 10 Register
     */
    inline void get_DESC_CTRL1_10(
        bool &DL, bool &WL, bool &RL, uint8_t &CPUD, uint8_t &RT_PRIORITY,
        uint8_t &SV_PRIORITY, bool &GP_EN,
        SSARC_LP_DESC_CTRL1_10_POWER_DOMAIN &POWER_DOMAIN, bool &SW_TRIG_RT,
        bool &SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_10;

        DL = curr & (1u << 20u);
        WL = curr & (1u << 19u);
        RL = curr & (1u << 18u);
        CPUD = (curr >> 16u) & 0b11u;
        RT_PRIORITY = (curr >> 12u) & 0b1111u;
        SV_PRIORITY = (curr >> 8u) & 0b1111u;
        GP_EN = curr & (1u << 7u);
        POWER_DOMAIN =
            SSARC_LP_DESC_CTRL1_10_POWER_DOMAIN((curr >> 4u) & 0b111u);
        SW_TRIG_RT = curr & (1u << 1u);
        SW_TRIG_SV = curr & (1u << 0u);
    }

    /**
     * Set all of DESC_CTRL1_10's bit fields.
     *
     * (read-write) Descriptor Control1 10 Register
     */
    inline void set_DESC_CTRL1_10(
        bool DL, bool WL, bool RL, uint8_t CPUD, uint8_t RT_PRIORITY,
        uint8_t SV_PRIORITY, bool GP_EN,
        SSARC_LP_DESC_CTRL1_10_POWER_DOMAIN POWER_DOMAIN, bool SW_TRIG_RT,
        bool SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_10;

        curr &= ~(0b1u << 20u);
        curr |= (DL & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (WL & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (RL & 0b1u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (CPUD & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (RT_PRIORITY & 0b1111u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (SV_PRIORITY & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (GP_EN & 0b1u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(POWER_DOMAIN) & 0b111u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (SW_TRIG_RT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG_SV & 0b1u) << 0u;

        DESC_CTRL1_10 = curr;
    }

    /**
     * Get DESC_ADDR_UP_10's ADDR_UP field.
     *
     * Address field (High)
     */
    inline uint32_t get_DESC_ADDR_UP_10_ADDR_UP() volatile
    {
        return (DESC_ADDR_UP_10 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_UP_10's ADDR_UP field.
     *
     * Address field (High)
     */
    inline void set_DESC_ADDR_UP_10_ADDR_UP(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_UP_10;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_UP_10 = curr;
    }

    /**
     * Get DESC_ADDR_DOWN_10's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline uint32_t get_DESC_ADDR_DOWN_10_ADDR_DOWN() volatile
    {
        return (DESC_ADDR_DOWN_10 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_DOWN_10's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline void set_DESC_ADDR_DOWN_10_ADDR_DOWN(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_DOWN_10;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_DOWN_10 = curr;
    }

    /**
     * Get DESC_CTRL0_11's RT_ORDER bit.
     *
     * Restore order
     */
    inline bool get_DESC_CTRL0_11_RT_ORDER() volatile
    {
        return DESC_CTRL0_11 & (1u << 21u);
    }

    /**
     * Set DESC_CTRL0_11's RT_ORDER bit.
     *
     * Restore order
     */
    inline void set_DESC_CTRL0_11_RT_ORDER() volatile
    {
        DESC_CTRL0_11 |= 1u << 21u;
    }

    /**
     * Clear DESC_CTRL0_11's RT_ORDER bit.
     *
     * Restore order
     */
    inline void clear_DESC_CTRL0_11_RT_ORDER() volatile
    {
        DESC_CTRL0_11 &= ~(1u << 21u);
    }

    /**
     * Toggle DESC_CTRL0_11's RT_ORDER bit.
     *
     * Restore order
     */
    inline void toggle_DESC_CTRL0_11_RT_ORDER() volatile
    {
        DESC_CTRL0_11 ^= 1u << 21u;
    }

    /**
     * Get DESC_CTRL0_11's SV_ORDER bit.
     *
     * Save Order
     */
    inline bool get_DESC_CTRL0_11_SV_ORDER() volatile
    {
        return DESC_CTRL0_11 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL0_11's SV_ORDER bit.
     *
     * Save Order
     */
    inline void set_DESC_CTRL0_11_SV_ORDER() volatile
    {
        DESC_CTRL0_11 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL0_11's SV_ORDER bit.
     *
     * Save Order
     */
    inline void clear_DESC_CTRL0_11_SV_ORDER() volatile
    {
        DESC_CTRL0_11 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL0_11's SV_ORDER bit.
     *
     * Save Order
     */
    inline void toggle_DESC_CTRL0_11_SV_ORDER() volatile
    {
        DESC_CTRL0_11 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL0_11's END field.
     *
     * End index
     */
    inline uint16_t get_DESC_CTRL0_11_END() volatile
    {
        return (DESC_CTRL0_11 >> 10u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_11's END field.
     *
     * End index
     */
    inline void set_DESC_CTRL0_11_END(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_11;

        curr &= ~(0b1111111111u << 10u);
        curr |= (value & 0b1111111111u) << 10u;

        DESC_CTRL0_11 = curr;
    }

    /**
     * Get DESC_CTRL0_11's START field.
     *
     * Start index
     */
    inline uint16_t get_DESC_CTRL0_11_START() volatile
    {
        return (DESC_CTRL0_11 >> 0u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_11's START field.
     *
     * Start index
     */
    inline void set_DESC_CTRL0_11_START(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_11;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        DESC_CTRL0_11 = curr;
    }

    /**
     * Get all of DESC_CTRL0_11's bit fields.
     *
     * (read-write) Descriptor Control0 11 Register
     */
    inline void get_DESC_CTRL0_11(bool &RT_ORDER, bool &SV_ORDER,
                                  uint16_t &END, uint16_t &START) volatile
    {
        uint32_t curr = DESC_CTRL0_11;

        RT_ORDER = curr & (1u << 21u);
        SV_ORDER = curr & (1u << 20u);
        END = (curr >> 10u) & 0b1111111111u;
        START = (curr >> 0u) & 0b1111111111u;
    }

    /**
     * Set all of DESC_CTRL0_11's bit fields.
     *
     * (read-write) Descriptor Control0 11 Register
     */
    inline void set_DESC_CTRL0_11(bool RT_ORDER, bool SV_ORDER, uint16_t END,
                                  uint16_t START) volatile
    {
        uint32_t curr = DESC_CTRL0_11;

        curr &= ~(0b1u << 21u);
        curr |= (RT_ORDER & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (SV_ORDER & 0b1u) << 20u;
        curr &= ~(0b1111111111u << 10u);
        curr |= (END & 0b1111111111u) << 10u;
        curr &= ~(0b1111111111u << 0u);
        curr |= (START & 0b1111111111u) << 0u;

        DESC_CTRL0_11 = curr;
    }

    /**
     * Get DESC_CTRL1_11's DL bit.
     *
     * Domain lock
     */
    inline bool get_DESC_CTRL1_11_DL() volatile
    {
        return DESC_CTRL1_11 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL1_11's DL bit.
     *
     * Domain lock
     */
    inline void set_DESC_CTRL1_11_DL() volatile
    {
        DESC_CTRL1_11 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL1_11's DL bit.
     *
     * Domain lock
     */
    inline void clear_DESC_CTRL1_11_DL() volatile
    {
        DESC_CTRL1_11 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL1_11's DL bit.
     *
     * Domain lock
     */
    inline void toggle_DESC_CTRL1_11_DL() volatile
    {
        DESC_CTRL1_11 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL1_11's WL bit.
     *
     * Write Lock
     */
    inline bool get_DESC_CTRL1_11_WL() volatile
    {
        return DESC_CTRL1_11 & (1u << 19u);
    }

    /**
     * Set DESC_CTRL1_11's WL bit.
     *
     * Write Lock
     */
    inline void set_DESC_CTRL1_11_WL() volatile
    {
        DESC_CTRL1_11 |= 1u << 19u;
    }

    /**
     * Clear DESC_CTRL1_11's WL bit.
     *
     * Write Lock
     */
    inline void clear_DESC_CTRL1_11_WL() volatile
    {
        DESC_CTRL1_11 &= ~(1u << 19u);
    }

    /**
     * Toggle DESC_CTRL1_11's WL bit.
     *
     * Write Lock
     */
    inline void toggle_DESC_CTRL1_11_WL() volatile
    {
        DESC_CTRL1_11 ^= 1u << 19u;
    }

    /**
     * Get DESC_CTRL1_11's RL bit.
     *
     * Read Lock
     */
    inline bool get_DESC_CTRL1_11_RL() volatile
    {
        return DESC_CTRL1_11 & (1u << 18u);
    }

    /**
     * Set DESC_CTRL1_11's RL bit.
     *
     * Read Lock
     */
    inline void set_DESC_CTRL1_11_RL() volatile
    {
        DESC_CTRL1_11 |= 1u << 18u;
    }

    /**
     * Clear DESC_CTRL1_11's RL bit.
     *
     * Read Lock
     */
    inline void clear_DESC_CTRL1_11_RL() volatile
    {
        DESC_CTRL1_11 &= ~(1u << 18u);
    }

    /**
     * Toggle DESC_CTRL1_11's RL bit.
     *
     * Read Lock
     */
    inline void toggle_DESC_CTRL1_11_RL() volatile
    {
        DESC_CTRL1_11 ^= 1u << 18u;
    }

    /**
     * Get DESC_CTRL1_11's CPUD field.
     *
     * CPU Domain
     */
    inline uint8_t get_DESC_CTRL1_11_CPUD() volatile
    {
        return (DESC_CTRL1_11 >> 16u) & 0b11u;
    }

    /**
     * Set DESC_CTRL1_11's CPUD field.
     *
     * CPU Domain
     */
    inline void set_DESC_CTRL1_11_CPUD(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_11;

        curr &= ~(0b11u << 16u);
        curr |= (value & 0b11u) << 16u;

        DESC_CTRL1_11 = curr;
    }

    /**
     * Get DESC_CTRL1_11's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline uint8_t get_DESC_CTRL1_11_RT_PRIORITY() volatile
    {
        return (DESC_CTRL1_11 >> 12u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_11's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline void set_DESC_CTRL1_11_RT_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_11;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        DESC_CTRL1_11 = curr;
    }

    /**
     * Get DESC_CTRL1_11's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline uint8_t get_DESC_CTRL1_11_SV_PRIORITY() volatile
    {
        return (DESC_CTRL1_11 >> 8u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_11's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline void set_DESC_CTRL1_11_SV_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_11;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        DESC_CTRL1_11 = curr;
    }

    /**
     * Get DESC_CTRL1_11's GP_EN bit.
     *
     * Group Enable
     */
    inline bool get_DESC_CTRL1_11_GP_EN() volatile
    {
        return DESC_CTRL1_11 & (1u << 7u);
    }

    /**
     * Set DESC_CTRL1_11's GP_EN bit.
     *
     * Group Enable
     */
    inline void set_DESC_CTRL1_11_GP_EN() volatile
    {
        DESC_CTRL1_11 |= 1u << 7u;
    }

    /**
     * Clear DESC_CTRL1_11's GP_EN bit.
     *
     * Group Enable
     */
    inline void clear_DESC_CTRL1_11_GP_EN() volatile
    {
        DESC_CTRL1_11 &= ~(1u << 7u);
    }

    /**
     * Toggle DESC_CTRL1_11's GP_EN bit.
     *
     * Group Enable
     */
    inline void toggle_DESC_CTRL1_11_GP_EN() volatile
    {
        DESC_CTRL1_11 ^= 1u << 7u;
    }

    /**
     * Get DESC_CTRL1_11's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline SSARC_LP_DESC_CTRL1_11_POWER_DOMAIN
    get_DESC_CTRL1_11_POWER_DOMAIN() volatile
    {
        return SSARC_LP_DESC_CTRL1_11_POWER_DOMAIN((DESC_CTRL1_11 >> 4u) &
                                                   0b111u);
    }

    /**
     * Set DESC_CTRL1_11's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline void set_DESC_CTRL1_11_POWER_DOMAIN(
        SSARC_LP_DESC_CTRL1_11_POWER_DOMAIN value) volatile
    {
        uint32_t curr = DESC_CTRL1_11;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        DESC_CTRL1_11 = curr;
    }

    /**
     * Get DESC_CTRL1_11's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline bool get_DESC_CTRL1_11_SW_TRIG_RT() volatile
    {
        return DESC_CTRL1_11 & (1u << 1u);
    }

    /**
     * Set DESC_CTRL1_11's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void set_DESC_CTRL1_11_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_11 |= 1u << 1u;
    }

    /**
     * Clear DESC_CTRL1_11's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void clear_DESC_CTRL1_11_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_11 &= ~(1u << 1u);
    }

    /**
     * Toggle DESC_CTRL1_11's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void toggle_DESC_CTRL1_11_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_11 ^= 1u << 1u;
    }

    /**
     * Get DESC_CTRL1_11's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline bool get_DESC_CTRL1_11_SW_TRIG_SV() volatile
    {
        return DESC_CTRL1_11 & (1u << 0u);
    }

    /**
     * Set DESC_CTRL1_11's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void set_DESC_CTRL1_11_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_11 |= 1u << 0u;
    }

    /**
     * Clear DESC_CTRL1_11's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void clear_DESC_CTRL1_11_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_11 &= ~(1u << 0u);
    }

    /**
     * Toggle DESC_CTRL1_11's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void toggle_DESC_CTRL1_11_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_11 ^= 1u << 0u;
    }

    /**
     * Get all of DESC_CTRL1_11's bit fields.
     *
     * (read-write) Descriptor Control1 11 Register
     */
    inline void get_DESC_CTRL1_11(
        bool &DL, bool &WL, bool &RL, uint8_t &CPUD, uint8_t &RT_PRIORITY,
        uint8_t &SV_PRIORITY, bool &GP_EN,
        SSARC_LP_DESC_CTRL1_11_POWER_DOMAIN &POWER_DOMAIN, bool &SW_TRIG_RT,
        bool &SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_11;

        DL = curr & (1u << 20u);
        WL = curr & (1u << 19u);
        RL = curr & (1u << 18u);
        CPUD = (curr >> 16u) & 0b11u;
        RT_PRIORITY = (curr >> 12u) & 0b1111u;
        SV_PRIORITY = (curr >> 8u) & 0b1111u;
        GP_EN = curr & (1u << 7u);
        POWER_DOMAIN =
            SSARC_LP_DESC_CTRL1_11_POWER_DOMAIN((curr >> 4u) & 0b111u);
        SW_TRIG_RT = curr & (1u << 1u);
        SW_TRIG_SV = curr & (1u << 0u);
    }

    /**
     * Set all of DESC_CTRL1_11's bit fields.
     *
     * (read-write) Descriptor Control1 11 Register
     */
    inline void set_DESC_CTRL1_11(
        bool DL, bool WL, bool RL, uint8_t CPUD, uint8_t RT_PRIORITY,
        uint8_t SV_PRIORITY, bool GP_EN,
        SSARC_LP_DESC_CTRL1_11_POWER_DOMAIN POWER_DOMAIN, bool SW_TRIG_RT,
        bool SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_11;

        curr &= ~(0b1u << 20u);
        curr |= (DL & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (WL & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (RL & 0b1u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (CPUD & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (RT_PRIORITY & 0b1111u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (SV_PRIORITY & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (GP_EN & 0b1u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(POWER_DOMAIN) & 0b111u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (SW_TRIG_RT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG_SV & 0b1u) << 0u;

        DESC_CTRL1_11 = curr;
    }

    /**
     * Get DESC_ADDR_UP_11's ADDR_UP field.
     *
     * Address field (High)
     */
    inline uint32_t get_DESC_ADDR_UP_11_ADDR_UP() volatile
    {
        return (DESC_ADDR_UP_11 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_UP_11's ADDR_UP field.
     *
     * Address field (High)
     */
    inline void set_DESC_ADDR_UP_11_ADDR_UP(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_UP_11;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_UP_11 = curr;
    }

    /**
     * Get DESC_ADDR_DOWN_11's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline uint32_t get_DESC_ADDR_DOWN_11_ADDR_DOWN() volatile
    {
        return (DESC_ADDR_DOWN_11 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_DOWN_11's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline void set_DESC_ADDR_DOWN_11_ADDR_DOWN(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_DOWN_11;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_DOWN_11 = curr;
    }

    /**
     * Get DESC_CTRL0_12's RT_ORDER bit.
     *
     * Restore order
     */
    inline bool get_DESC_CTRL0_12_RT_ORDER() volatile
    {
        return DESC_CTRL0_12 & (1u << 21u);
    }

    /**
     * Set DESC_CTRL0_12's RT_ORDER bit.
     *
     * Restore order
     */
    inline void set_DESC_CTRL0_12_RT_ORDER() volatile
    {
        DESC_CTRL0_12 |= 1u << 21u;
    }

    /**
     * Clear DESC_CTRL0_12's RT_ORDER bit.
     *
     * Restore order
     */
    inline void clear_DESC_CTRL0_12_RT_ORDER() volatile
    {
        DESC_CTRL0_12 &= ~(1u << 21u);
    }

    /**
     * Toggle DESC_CTRL0_12's RT_ORDER bit.
     *
     * Restore order
     */
    inline void toggle_DESC_CTRL0_12_RT_ORDER() volatile
    {
        DESC_CTRL0_12 ^= 1u << 21u;
    }

    /**
     * Get DESC_CTRL0_12's SV_ORDER bit.
     *
     * Save Order
     */
    inline bool get_DESC_CTRL0_12_SV_ORDER() volatile
    {
        return DESC_CTRL0_12 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL0_12's SV_ORDER bit.
     *
     * Save Order
     */
    inline void set_DESC_CTRL0_12_SV_ORDER() volatile
    {
        DESC_CTRL0_12 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL0_12's SV_ORDER bit.
     *
     * Save Order
     */
    inline void clear_DESC_CTRL0_12_SV_ORDER() volatile
    {
        DESC_CTRL0_12 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL0_12's SV_ORDER bit.
     *
     * Save Order
     */
    inline void toggle_DESC_CTRL0_12_SV_ORDER() volatile
    {
        DESC_CTRL0_12 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL0_12's END field.
     *
     * End index
     */
    inline uint16_t get_DESC_CTRL0_12_END() volatile
    {
        return (DESC_CTRL0_12 >> 10u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_12's END field.
     *
     * End index
     */
    inline void set_DESC_CTRL0_12_END(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_12;

        curr &= ~(0b1111111111u << 10u);
        curr |= (value & 0b1111111111u) << 10u;

        DESC_CTRL0_12 = curr;
    }

    /**
     * Get DESC_CTRL0_12's START field.
     *
     * Start index
     */
    inline uint16_t get_DESC_CTRL0_12_START() volatile
    {
        return (DESC_CTRL0_12 >> 0u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_12's START field.
     *
     * Start index
     */
    inline void set_DESC_CTRL0_12_START(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_12;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        DESC_CTRL0_12 = curr;
    }

    /**
     * Get all of DESC_CTRL0_12's bit fields.
     *
     * (read-write) Descriptor Control0 12 Register
     */
    inline void get_DESC_CTRL0_12(bool &RT_ORDER, bool &SV_ORDER,
                                  uint16_t &END, uint16_t &START) volatile
    {
        uint32_t curr = DESC_CTRL0_12;

        RT_ORDER = curr & (1u << 21u);
        SV_ORDER = curr & (1u << 20u);
        END = (curr >> 10u) & 0b1111111111u;
        START = (curr >> 0u) & 0b1111111111u;
    }

    /**
     * Set all of DESC_CTRL0_12's bit fields.
     *
     * (read-write) Descriptor Control0 12 Register
     */
    inline void set_DESC_CTRL0_12(bool RT_ORDER, bool SV_ORDER, uint16_t END,
                                  uint16_t START) volatile
    {
        uint32_t curr = DESC_CTRL0_12;

        curr &= ~(0b1u << 21u);
        curr |= (RT_ORDER & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (SV_ORDER & 0b1u) << 20u;
        curr &= ~(0b1111111111u << 10u);
        curr |= (END & 0b1111111111u) << 10u;
        curr &= ~(0b1111111111u << 0u);
        curr |= (START & 0b1111111111u) << 0u;

        DESC_CTRL0_12 = curr;
    }

    /**
     * Get DESC_CTRL1_12's DL bit.
     *
     * Domain lock
     */
    inline bool get_DESC_CTRL1_12_DL() volatile
    {
        return DESC_CTRL1_12 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL1_12's DL bit.
     *
     * Domain lock
     */
    inline void set_DESC_CTRL1_12_DL() volatile
    {
        DESC_CTRL1_12 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL1_12's DL bit.
     *
     * Domain lock
     */
    inline void clear_DESC_CTRL1_12_DL() volatile
    {
        DESC_CTRL1_12 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL1_12's DL bit.
     *
     * Domain lock
     */
    inline void toggle_DESC_CTRL1_12_DL() volatile
    {
        DESC_CTRL1_12 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL1_12's WL bit.
     *
     * Write Lock
     */
    inline bool get_DESC_CTRL1_12_WL() volatile
    {
        return DESC_CTRL1_12 & (1u << 19u);
    }

    /**
     * Set DESC_CTRL1_12's WL bit.
     *
     * Write Lock
     */
    inline void set_DESC_CTRL1_12_WL() volatile
    {
        DESC_CTRL1_12 |= 1u << 19u;
    }

    /**
     * Clear DESC_CTRL1_12's WL bit.
     *
     * Write Lock
     */
    inline void clear_DESC_CTRL1_12_WL() volatile
    {
        DESC_CTRL1_12 &= ~(1u << 19u);
    }

    /**
     * Toggle DESC_CTRL1_12's WL bit.
     *
     * Write Lock
     */
    inline void toggle_DESC_CTRL1_12_WL() volatile
    {
        DESC_CTRL1_12 ^= 1u << 19u;
    }

    /**
     * Get DESC_CTRL1_12's RL bit.
     *
     * Read Lock
     */
    inline bool get_DESC_CTRL1_12_RL() volatile
    {
        return DESC_CTRL1_12 & (1u << 18u);
    }

    /**
     * Set DESC_CTRL1_12's RL bit.
     *
     * Read Lock
     */
    inline void set_DESC_CTRL1_12_RL() volatile
    {
        DESC_CTRL1_12 |= 1u << 18u;
    }

    /**
     * Clear DESC_CTRL1_12's RL bit.
     *
     * Read Lock
     */
    inline void clear_DESC_CTRL1_12_RL() volatile
    {
        DESC_CTRL1_12 &= ~(1u << 18u);
    }

    /**
     * Toggle DESC_CTRL1_12's RL bit.
     *
     * Read Lock
     */
    inline void toggle_DESC_CTRL1_12_RL() volatile
    {
        DESC_CTRL1_12 ^= 1u << 18u;
    }

    /**
     * Get DESC_CTRL1_12's CPUD field.
     *
     * CPU Domain
     */
    inline uint8_t get_DESC_CTRL1_12_CPUD() volatile
    {
        return (DESC_CTRL1_12 >> 16u) & 0b11u;
    }

    /**
     * Set DESC_CTRL1_12's CPUD field.
     *
     * CPU Domain
     */
    inline void set_DESC_CTRL1_12_CPUD(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_12;

        curr &= ~(0b11u << 16u);
        curr |= (value & 0b11u) << 16u;

        DESC_CTRL1_12 = curr;
    }

    /**
     * Get DESC_CTRL1_12's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline uint8_t get_DESC_CTRL1_12_RT_PRIORITY() volatile
    {
        return (DESC_CTRL1_12 >> 12u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_12's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline void set_DESC_CTRL1_12_RT_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_12;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        DESC_CTRL1_12 = curr;
    }

    /**
     * Get DESC_CTRL1_12's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline uint8_t get_DESC_CTRL1_12_SV_PRIORITY() volatile
    {
        return (DESC_CTRL1_12 >> 8u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_12's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline void set_DESC_CTRL1_12_SV_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_12;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        DESC_CTRL1_12 = curr;
    }

    /**
     * Get DESC_CTRL1_12's GP_EN bit.
     *
     * Group Enable
     */
    inline bool get_DESC_CTRL1_12_GP_EN() volatile
    {
        return DESC_CTRL1_12 & (1u << 7u);
    }

    /**
     * Set DESC_CTRL1_12's GP_EN bit.
     *
     * Group Enable
     */
    inline void set_DESC_CTRL1_12_GP_EN() volatile
    {
        DESC_CTRL1_12 |= 1u << 7u;
    }

    /**
     * Clear DESC_CTRL1_12's GP_EN bit.
     *
     * Group Enable
     */
    inline void clear_DESC_CTRL1_12_GP_EN() volatile
    {
        DESC_CTRL1_12 &= ~(1u << 7u);
    }

    /**
     * Toggle DESC_CTRL1_12's GP_EN bit.
     *
     * Group Enable
     */
    inline void toggle_DESC_CTRL1_12_GP_EN() volatile
    {
        DESC_CTRL1_12 ^= 1u << 7u;
    }

    /**
     * Get DESC_CTRL1_12's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline SSARC_LP_DESC_CTRL1_12_POWER_DOMAIN
    get_DESC_CTRL1_12_POWER_DOMAIN() volatile
    {
        return SSARC_LP_DESC_CTRL1_12_POWER_DOMAIN((DESC_CTRL1_12 >> 4u) &
                                                   0b111u);
    }

    /**
     * Set DESC_CTRL1_12's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline void set_DESC_CTRL1_12_POWER_DOMAIN(
        SSARC_LP_DESC_CTRL1_12_POWER_DOMAIN value) volatile
    {
        uint32_t curr = DESC_CTRL1_12;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        DESC_CTRL1_12 = curr;
    }

    /**
     * Get DESC_CTRL1_12's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline bool get_DESC_CTRL1_12_SW_TRIG_RT() volatile
    {
        return DESC_CTRL1_12 & (1u << 1u);
    }

    /**
     * Set DESC_CTRL1_12's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void set_DESC_CTRL1_12_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_12 |= 1u << 1u;
    }

    /**
     * Clear DESC_CTRL1_12's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void clear_DESC_CTRL1_12_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_12 &= ~(1u << 1u);
    }

    /**
     * Toggle DESC_CTRL1_12's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void toggle_DESC_CTRL1_12_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_12 ^= 1u << 1u;
    }

    /**
     * Get DESC_CTRL1_12's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline bool get_DESC_CTRL1_12_SW_TRIG_SV() volatile
    {
        return DESC_CTRL1_12 & (1u << 0u);
    }

    /**
     * Set DESC_CTRL1_12's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void set_DESC_CTRL1_12_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_12 |= 1u << 0u;
    }

    /**
     * Clear DESC_CTRL1_12's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void clear_DESC_CTRL1_12_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_12 &= ~(1u << 0u);
    }

    /**
     * Toggle DESC_CTRL1_12's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void toggle_DESC_CTRL1_12_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_12 ^= 1u << 0u;
    }

    /**
     * Get all of DESC_CTRL1_12's bit fields.
     *
     * (read-write) Descriptor Control1 12 Register
     */
    inline void get_DESC_CTRL1_12(
        bool &DL, bool &WL, bool &RL, uint8_t &CPUD, uint8_t &RT_PRIORITY,
        uint8_t &SV_PRIORITY, bool &GP_EN,
        SSARC_LP_DESC_CTRL1_12_POWER_DOMAIN &POWER_DOMAIN, bool &SW_TRIG_RT,
        bool &SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_12;

        DL = curr & (1u << 20u);
        WL = curr & (1u << 19u);
        RL = curr & (1u << 18u);
        CPUD = (curr >> 16u) & 0b11u;
        RT_PRIORITY = (curr >> 12u) & 0b1111u;
        SV_PRIORITY = (curr >> 8u) & 0b1111u;
        GP_EN = curr & (1u << 7u);
        POWER_DOMAIN =
            SSARC_LP_DESC_CTRL1_12_POWER_DOMAIN((curr >> 4u) & 0b111u);
        SW_TRIG_RT = curr & (1u << 1u);
        SW_TRIG_SV = curr & (1u << 0u);
    }

    /**
     * Set all of DESC_CTRL1_12's bit fields.
     *
     * (read-write) Descriptor Control1 12 Register
     */
    inline void set_DESC_CTRL1_12(
        bool DL, bool WL, bool RL, uint8_t CPUD, uint8_t RT_PRIORITY,
        uint8_t SV_PRIORITY, bool GP_EN,
        SSARC_LP_DESC_CTRL1_12_POWER_DOMAIN POWER_DOMAIN, bool SW_TRIG_RT,
        bool SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_12;

        curr &= ~(0b1u << 20u);
        curr |= (DL & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (WL & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (RL & 0b1u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (CPUD & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (RT_PRIORITY & 0b1111u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (SV_PRIORITY & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (GP_EN & 0b1u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(POWER_DOMAIN) & 0b111u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (SW_TRIG_RT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG_SV & 0b1u) << 0u;

        DESC_CTRL1_12 = curr;
    }

    /**
     * Get DESC_ADDR_UP_12's ADDR_UP field.
     *
     * Address field (High)
     */
    inline uint32_t get_DESC_ADDR_UP_12_ADDR_UP() volatile
    {
        return (DESC_ADDR_UP_12 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_UP_12's ADDR_UP field.
     *
     * Address field (High)
     */
    inline void set_DESC_ADDR_UP_12_ADDR_UP(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_UP_12;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_UP_12 = curr;
    }

    /**
     * Get DESC_ADDR_DOWN_12's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline uint32_t get_DESC_ADDR_DOWN_12_ADDR_DOWN() volatile
    {
        return (DESC_ADDR_DOWN_12 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_DOWN_12's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline void set_DESC_ADDR_DOWN_12_ADDR_DOWN(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_DOWN_12;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_DOWN_12 = curr;
    }

    /**
     * Get DESC_CTRL0_13's RT_ORDER bit.
     *
     * Restore order
     */
    inline bool get_DESC_CTRL0_13_RT_ORDER() volatile
    {
        return DESC_CTRL0_13 & (1u << 21u);
    }

    /**
     * Set DESC_CTRL0_13's RT_ORDER bit.
     *
     * Restore order
     */
    inline void set_DESC_CTRL0_13_RT_ORDER() volatile
    {
        DESC_CTRL0_13 |= 1u << 21u;
    }

    /**
     * Clear DESC_CTRL0_13's RT_ORDER bit.
     *
     * Restore order
     */
    inline void clear_DESC_CTRL0_13_RT_ORDER() volatile
    {
        DESC_CTRL0_13 &= ~(1u << 21u);
    }

    /**
     * Toggle DESC_CTRL0_13's RT_ORDER bit.
     *
     * Restore order
     */
    inline void toggle_DESC_CTRL0_13_RT_ORDER() volatile
    {
        DESC_CTRL0_13 ^= 1u << 21u;
    }

    /**
     * Get DESC_CTRL0_13's SV_ORDER bit.
     *
     * Save Order
     */
    inline bool get_DESC_CTRL0_13_SV_ORDER() volatile
    {
        return DESC_CTRL0_13 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL0_13's SV_ORDER bit.
     *
     * Save Order
     */
    inline void set_DESC_CTRL0_13_SV_ORDER() volatile
    {
        DESC_CTRL0_13 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL0_13's SV_ORDER bit.
     *
     * Save Order
     */
    inline void clear_DESC_CTRL0_13_SV_ORDER() volatile
    {
        DESC_CTRL0_13 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL0_13's SV_ORDER bit.
     *
     * Save Order
     */
    inline void toggle_DESC_CTRL0_13_SV_ORDER() volatile
    {
        DESC_CTRL0_13 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL0_13's END field.
     *
     * End index
     */
    inline uint16_t get_DESC_CTRL0_13_END() volatile
    {
        return (DESC_CTRL0_13 >> 10u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_13's END field.
     *
     * End index
     */
    inline void set_DESC_CTRL0_13_END(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_13;

        curr &= ~(0b1111111111u << 10u);
        curr |= (value & 0b1111111111u) << 10u;

        DESC_CTRL0_13 = curr;
    }

    /**
     * Get DESC_CTRL0_13's START field.
     *
     * Start index
     */
    inline uint16_t get_DESC_CTRL0_13_START() volatile
    {
        return (DESC_CTRL0_13 >> 0u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_13's START field.
     *
     * Start index
     */
    inline void set_DESC_CTRL0_13_START(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_13;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        DESC_CTRL0_13 = curr;
    }

    /**
     * Get all of DESC_CTRL0_13's bit fields.
     *
     * (read-write) Descriptor Control0 13 Register
     */
    inline void get_DESC_CTRL0_13(bool &RT_ORDER, bool &SV_ORDER,
                                  uint16_t &END, uint16_t &START) volatile
    {
        uint32_t curr = DESC_CTRL0_13;

        RT_ORDER = curr & (1u << 21u);
        SV_ORDER = curr & (1u << 20u);
        END = (curr >> 10u) & 0b1111111111u;
        START = (curr >> 0u) & 0b1111111111u;
    }

    /**
     * Set all of DESC_CTRL0_13's bit fields.
     *
     * (read-write) Descriptor Control0 13 Register
     */
    inline void set_DESC_CTRL0_13(bool RT_ORDER, bool SV_ORDER, uint16_t END,
                                  uint16_t START) volatile
    {
        uint32_t curr = DESC_CTRL0_13;

        curr &= ~(0b1u << 21u);
        curr |= (RT_ORDER & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (SV_ORDER & 0b1u) << 20u;
        curr &= ~(0b1111111111u << 10u);
        curr |= (END & 0b1111111111u) << 10u;
        curr &= ~(0b1111111111u << 0u);
        curr |= (START & 0b1111111111u) << 0u;

        DESC_CTRL0_13 = curr;
    }

    /**
     * Get DESC_CTRL1_13's DL bit.
     *
     * Domain lock
     */
    inline bool get_DESC_CTRL1_13_DL() volatile
    {
        return DESC_CTRL1_13 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL1_13's DL bit.
     *
     * Domain lock
     */
    inline void set_DESC_CTRL1_13_DL() volatile
    {
        DESC_CTRL1_13 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL1_13's DL bit.
     *
     * Domain lock
     */
    inline void clear_DESC_CTRL1_13_DL() volatile
    {
        DESC_CTRL1_13 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL1_13's DL bit.
     *
     * Domain lock
     */
    inline void toggle_DESC_CTRL1_13_DL() volatile
    {
        DESC_CTRL1_13 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL1_13's WL bit.
     *
     * Write Lock
     */
    inline bool get_DESC_CTRL1_13_WL() volatile
    {
        return DESC_CTRL1_13 & (1u << 19u);
    }

    /**
     * Set DESC_CTRL1_13's WL bit.
     *
     * Write Lock
     */
    inline void set_DESC_CTRL1_13_WL() volatile
    {
        DESC_CTRL1_13 |= 1u << 19u;
    }

    /**
     * Clear DESC_CTRL1_13's WL bit.
     *
     * Write Lock
     */
    inline void clear_DESC_CTRL1_13_WL() volatile
    {
        DESC_CTRL1_13 &= ~(1u << 19u);
    }

    /**
     * Toggle DESC_CTRL1_13's WL bit.
     *
     * Write Lock
     */
    inline void toggle_DESC_CTRL1_13_WL() volatile
    {
        DESC_CTRL1_13 ^= 1u << 19u;
    }

    /**
     * Get DESC_CTRL1_13's RL bit.
     *
     * Read Lock
     */
    inline bool get_DESC_CTRL1_13_RL() volatile
    {
        return DESC_CTRL1_13 & (1u << 18u);
    }

    /**
     * Set DESC_CTRL1_13's RL bit.
     *
     * Read Lock
     */
    inline void set_DESC_CTRL1_13_RL() volatile
    {
        DESC_CTRL1_13 |= 1u << 18u;
    }

    /**
     * Clear DESC_CTRL1_13's RL bit.
     *
     * Read Lock
     */
    inline void clear_DESC_CTRL1_13_RL() volatile
    {
        DESC_CTRL1_13 &= ~(1u << 18u);
    }

    /**
     * Toggle DESC_CTRL1_13's RL bit.
     *
     * Read Lock
     */
    inline void toggle_DESC_CTRL1_13_RL() volatile
    {
        DESC_CTRL1_13 ^= 1u << 18u;
    }

    /**
     * Get DESC_CTRL1_13's CPUD field.
     *
     * CPU Domain
     */
    inline uint8_t get_DESC_CTRL1_13_CPUD() volatile
    {
        return (DESC_CTRL1_13 >> 16u) & 0b11u;
    }

    /**
     * Set DESC_CTRL1_13's CPUD field.
     *
     * CPU Domain
     */
    inline void set_DESC_CTRL1_13_CPUD(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_13;

        curr &= ~(0b11u << 16u);
        curr |= (value & 0b11u) << 16u;

        DESC_CTRL1_13 = curr;
    }

    /**
     * Get DESC_CTRL1_13's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline uint8_t get_DESC_CTRL1_13_RT_PRIORITY() volatile
    {
        return (DESC_CTRL1_13 >> 12u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_13's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline void set_DESC_CTRL1_13_RT_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_13;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        DESC_CTRL1_13 = curr;
    }

    /**
     * Get DESC_CTRL1_13's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline uint8_t get_DESC_CTRL1_13_SV_PRIORITY() volatile
    {
        return (DESC_CTRL1_13 >> 8u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_13's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline void set_DESC_CTRL1_13_SV_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_13;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        DESC_CTRL1_13 = curr;
    }

    /**
     * Get DESC_CTRL1_13's GP_EN bit.
     *
     * Group Enable
     */
    inline bool get_DESC_CTRL1_13_GP_EN() volatile
    {
        return DESC_CTRL1_13 & (1u << 7u);
    }

    /**
     * Set DESC_CTRL1_13's GP_EN bit.
     *
     * Group Enable
     */
    inline void set_DESC_CTRL1_13_GP_EN() volatile
    {
        DESC_CTRL1_13 |= 1u << 7u;
    }

    /**
     * Clear DESC_CTRL1_13's GP_EN bit.
     *
     * Group Enable
     */
    inline void clear_DESC_CTRL1_13_GP_EN() volatile
    {
        DESC_CTRL1_13 &= ~(1u << 7u);
    }

    /**
     * Toggle DESC_CTRL1_13's GP_EN bit.
     *
     * Group Enable
     */
    inline void toggle_DESC_CTRL1_13_GP_EN() volatile
    {
        DESC_CTRL1_13 ^= 1u << 7u;
    }

    /**
     * Get DESC_CTRL1_13's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline SSARC_LP_DESC_CTRL1_13_POWER_DOMAIN
    get_DESC_CTRL1_13_POWER_DOMAIN() volatile
    {
        return SSARC_LP_DESC_CTRL1_13_POWER_DOMAIN((DESC_CTRL1_13 >> 4u) &
                                                   0b111u);
    }

    /**
     * Set DESC_CTRL1_13's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline void set_DESC_CTRL1_13_POWER_DOMAIN(
        SSARC_LP_DESC_CTRL1_13_POWER_DOMAIN value) volatile
    {
        uint32_t curr = DESC_CTRL1_13;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        DESC_CTRL1_13 = curr;
    }

    /**
     * Get DESC_CTRL1_13's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline bool get_DESC_CTRL1_13_SW_TRIG_RT() volatile
    {
        return DESC_CTRL1_13 & (1u << 1u);
    }

    /**
     * Set DESC_CTRL1_13's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void set_DESC_CTRL1_13_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_13 |= 1u << 1u;
    }

    /**
     * Clear DESC_CTRL1_13's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void clear_DESC_CTRL1_13_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_13 &= ~(1u << 1u);
    }

    /**
     * Toggle DESC_CTRL1_13's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void toggle_DESC_CTRL1_13_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_13 ^= 1u << 1u;
    }

    /**
     * Get DESC_CTRL1_13's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline bool get_DESC_CTRL1_13_SW_TRIG_SV() volatile
    {
        return DESC_CTRL1_13 & (1u << 0u);
    }

    /**
     * Set DESC_CTRL1_13's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void set_DESC_CTRL1_13_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_13 |= 1u << 0u;
    }

    /**
     * Clear DESC_CTRL1_13's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void clear_DESC_CTRL1_13_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_13 &= ~(1u << 0u);
    }

    /**
     * Toggle DESC_CTRL1_13's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void toggle_DESC_CTRL1_13_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_13 ^= 1u << 0u;
    }

    /**
     * Get all of DESC_CTRL1_13's bit fields.
     *
     * (read-write) Descriptor Control1 13 Register
     */
    inline void get_DESC_CTRL1_13(
        bool &DL, bool &WL, bool &RL, uint8_t &CPUD, uint8_t &RT_PRIORITY,
        uint8_t &SV_PRIORITY, bool &GP_EN,
        SSARC_LP_DESC_CTRL1_13_POWER_DOMAIN &POWER_DOMAIN, bool &SW_TRIG_RT,
        bool &SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_13;

        DL = curr & (1u << 20u);
        WL = curr & (1u << 19u);
        RL = curr & (1u << 18u);
        CPUD = (curr >> 16u) & 0b11u;
        RT_PRIORITY = (curr >> 12u) & 0b1111u;
        SV_PRIORITY = (curr >> 8u) & 0b1111u;
        GP_EN = curr & (1u << 7u);
        POWER_DOMAIN =
            SSARC_LP_DESC_CTRL1_13_POWER_DOMAIN((curr >> 4u) & 0b111u);
        SW_TRIG_RT = curr & (1u << 1u);
        SW_TRIG_SV = curr & (1u << 0u);
    }

    /**
     * Set all of DESC_CTRL1_13's bit fields.
     *
     * (read-write) Descriptor Control1 13 Register
     */
    inline void set_DESC_CTRL1_13(
        bool DL, bool WL, bool RL, uint8_t CPUD, uint8_t RT_PRIORITY,
        uint8_t SV_PRIORITY, bool GP_EN,
        SSARC_LP_DESC_CTRL1_13_POWER_DOMAIN POWER_DOMAIN, bool SW_TRIG_RT,
        bool SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_13;

        curr &= ~(0b1u << 20u);
        curr |= (DL & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (WL & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (RL & 0b1u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (CPUD & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (RT_PRIORITY & 0b1111u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (SV_PRIORITY & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (GP_EN & 0b1u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(POWER_DOMAIN) & 0b111u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (SW_TRIG_RT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG_SV & 0b1u) << 0u;

        DESC_CTRL1_13 = curr;
    }

    /**
     * Get DESC_ADDR_UP_13's ADDR_UP field.
     *
     * Address field (High)
     */
    inline uint32_t get_DESC_ADDR_UP_13_ADDR_UP() volatile
    {
        return (DESC_ADDR_UP_13 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_UP_13's ADDR_UP field.
     *
     * Address field (High)
     */
    inline void set_DESC_ADDR_UP_13_ADDR_UP(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_UP_13;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_UP_13 = curr;
    }

    /**
     * Get DESC_ADDR_DOWN_13's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline uint32_t get_DESC_ADDR_DOWN_13_ADDR_DOWN() volatile
    {
        return (DESC_ADDR_DOWN_13 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_DOWN_13's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline void set_DESC_ADDR_DOWN_13_ADDR_DOWN(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_DOWN_13;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_DOWN_13 = curr;
    }

    /**
     * Get DESC_CTRL0_14's RT_ORDER bit.
     *
     * Restore order
     */
    inline bool get_DESC_CTRL0_14_RT_ORDER() volatile
    {
        return DESC_CTRL0_14 & (1u << 21u);
    }

    /**
     * Set DESC_CTRL0_14's RT_ORDER bit.
     *
     * Restore order
     */
    inline void set_DESC_CTRL0_14_RT_ORDER() volatile
    {
        DESC_CTRL0_14 |= 1u << 21u;
    }

    /**
     * Clear DESC_CTRL0_14's RT_ORDER bit.
     *
     * Restore order
     */
    inline void clear_DESC_CTRL0_14_RT_ORDER() volatile
    {
        DESC_CTRL0_14 &= ~(1u << 21u);
    }

    /**
     * Toggle DESC_CTRL0_14's RT_ORDER bit.
     *
     * Restore order
     */
    inline void toggle_DESC_CTRL0_14_RT_ORDER() volatile
    {
        DESC_CTRL0_14 ^= 1u << 21u;
    }

    /**
     * Get DESC_CTRL0_14's SV_ORDER bit.
     *
     * Save Order
     */
    inline bool get_DESC_CTRL0_14_SV_ORDER() volatile
    {
        return DESC_CTRL0_14 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL0_14's SV_ORDER bit.
     *
     * Save Order
     */
    inline void set_DESC_CTRL0_14_SV_ORDER() volatile
    {
        DESC_CTRL0_14 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL0_14's SV_ORDER bit.
     *
     * Save Order
     */
    inline void clear_DESC_CTRL0_14_SV_ORDER() volatile
    {
        DESC_CTRL0_14 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL0_14's SV_ORDER bit.
     *
     * Save Order
     */
    inline void toggle_DESC_CTRL0_14_SV_ORDER() volatile
    {
        DESC_CTRL0_14 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL0_14's END field.
     *
     * End index
     */
    inline uint16_t get_DESC_CTRL0_14_END() volatile
    {
        return (DESC_CTRL0_14 >> 10u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_14's END field.
     *
     * End index
     */
    inline void set_DESC_CTRL0_14_END(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_14;

        curr &= ~(0b1111111111u << 10u);
        curr |= (value & 0b1111111111u) << 10u;

        DESC_CTRL0_14 = curr;
    }

    /**
     * Get DESC_CTRL0_14's START field.
     *
     * Start index
     */
    inline uint16_t get_DESC_CTRL0_14_START() volatile
    {
        return (DESC_CTRL0_14 >> 0u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_14's START field.
     *
     * Start index
     */
    inline void set_DESC_CTRL0_14_START(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_14;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        DESC_CTRL0_14 = curr;
    }

    /**
     * Get all of DESC_CTRL0_14's bit fields.
     *
     * (read-write) Descriptor Control0 14 Register
     */
    inline void get_DESC_CTRL0_14(bool &RT_ORDER, bool &SV_ORDER,
                                  uint16_t &END, uint16_t &START) volatile
    {
        uint32_t curr = DESC_CTRL0_14;

        RT_ORDER = curr & (1u << 21u);
        SV_ORDER = curr & (1u << 20u);
        END = (curr >> 10u) & 0b1111111111u;
        START = (curr >> 0u) & 0b1111111111u;
    }

    /**
     * Set all of DESC_CTRL0_14's bit fields.
     *
     * (read-write) Descriptor Control0 14 Register
     */
    inline void set_DESC_CTRL0_14(bool RT_ORDER, bool SV_ORDER, uint16_t END,
                                  uint16_t START) volatile
    {
        uint32_t curr = DESC_CTRL0_14;

        curr &= ~(0b1u << 21u);
        curr |= (RT_ORDER & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (SV_ORDER & 0b1u) << 20u;
        curr &= ~(0b1111111111u << 10u);
        curr |= (END & 0b1111111111u) << 10u;
        curr &= ~(0b1111111111u << 0u);
        curr |= (START & 0b1111111111u) << 0u;

        DESC_CTRL0_14 = curr;
    }

    /**
     * Get DESC_CTRL1_14's DL bit.
     *
     * Domain lock
     */
    inline bool get_DESC_CTRL1_14_DL() volatile
    {
        return DESC_CTRL1_14 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL1_14's DL bit.
     *
     * Domain lock
     */
    inline void set_DESC_CTRL1_14_DL() volatile
    {
        DESC_CTRL1_14 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL1_14's DL bit.
     *
     * Domain lock
     */
    inline void clear_DESC_CTRL1_14_DL() volatile
    {
        DESC_CTRL1_14 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL1_14's DL bit.
     *
     * Domain lock
     */
    inline void toggle_DESC_CTRL1_14_DL() volatile
    {
        DESC_CTRL1_14 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL1_14's WL bit.
     *
     * Write Lock
     */
    inline bool get_DESC_CTRL1_14_WL() volatile
    {
        return DESC_CTRL1_14 & (1u << 19u);
    }

    /**
     * Set DESC_CTRL1_14's WL bit.
     *
     * Write Lock
     */
    inline void set_DESC_CTRL1_14_WL() volatile
    {
        DESC_CTRL1_14 |= 1u << 19u;
    }

    /**
     * Clear DESC_CTRL1_14's WL bit.
     *
     * Write Lock
     */
    inline void clear_DESC_CTRL1_14_WL() volatile
    {
        DESC_CTRL1_14 &= ~(1u << 19u);
    }

    /**
     * Toggle DESC_CTRL1_14's WL bit.
     *
     * Write Lock
     */
    inline void toggle_DESC_CTRL1_14_WL() volatile
    {
        DESC_CTRL1_14 ^= 1u << 19u;
    }

    /**
     * Get DESC_CTRL1_14's RL bit.
     *
     * Read Lock
     */
    inline bool get_DESC_CTRL1_14_RL() volatile
    {
        return DESC_CTRL1_14 & (1u << 18u);
    }

    /**
     * Set DESC_CTRL1_14's RL bit.
     *
     * Read Lock
     */
    inline void set_DESC_CTRL1_14_RL() volatile
    {
        DESC_CTRL1_14 |= 1u << 18u;
    }

    /**
     * Clear DESC_CTRL1_14's RL bit.
     *
     * Read Lock
     */
    inline void clear_DESC_CTRL1_14_RL() volatile
    {
        DESC_CTRL1_14 &= ~(1u << 18u);
    }

    /**
     * Toggle DESC_CTRL1_14's RL bit.
     *
     * Read Lock
     */
    inline void toggle_DESC_CTRL1_14_RL() volatile
    {
        DESC_CTRL1_14 ^= 1u << 18u;
    }

    /**
     * Get DESC_CTRL1_14's CPUD field.
     *
     * CPU Domain
     */
    inline uint8_t get_DESC_CTRL1_14_CPUD() volatile
    {
        return (DESC_CTRL1_14 >> 16u) & 0b11u;
    }

    /**
     * Set DESC_CTRL1_14's CPUD field.
     *
     * CPU Domain
     */
    inline void set_DESC_CTRL1_14_CPUD(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_14;

        curr &= ~(0b11u << 16u);
        curr |= (value & 0b11u) << 16u;

        DESC_CTRL1_14 = curr;
    }

    /**
     * Get DESC_CTRL1_14's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline uint8_t get_DESC_CTRL1_14_RT_PRIORITY() volatile
    {
        return (DESC_CTRL1_14 >> 12u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_14's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline void set_DESC_CTRL1_14_RT_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_14;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        DESC_CTRL1_14 = curr;
    }

    /**
     * Get DESC_CTRL1_14's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline uint8_t get_DESC_CTRL1_14_SV_PRIORITY() volatile
    {
        return (DESC_CTRL1_14 >> 8u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_14's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline void set_DESC_CTRL1_14_SV_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_14;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        DESC_CTRL1_14 = curr;
    }

    /**
     * Get DESC_CTRL1_14's GP_EN bit.
     *
     * Group Enable
     */
    inline bool get_DESC_CTRL1_14_GP_EN() volatile
    {
        return DESC_CTRL1_14 & (1u << 7u);
    }

    /**
     * Set DESC_CTRL1_14's GP_EN bit.
     *
     * Group Enable
     */
    inline void set_DESC_CTRL1_14_GP_EN() volatile
    {
        DESC_CTRL1_14 |= 1u << 7u;
    }

    /**
     * Clear DESC_CTRL1_14's GP_EN bit.
     *
     * Group Enable
     */
    inline void clear_DESC_CTRL1_14_GP_EN() volatile
    {
        DESC_CTRL1_14 &= ~(1u << 7u);
    }

    /**
     * Toggle DESC_CTRL1_14's GP_EN bit.
     *
     * Group Enable
     */
    inline void toggle_DESC_CTRL1_14_GP_EN() volatile
    {
        DESC_CTRL1_14 ^= 1u << 7u;
    }

    /**
     * Get DESC_CTRL1_14's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline SSARC_LP_DESC_CTRL1_14_POWER_DOMAIN
    get_DESC_CTRL1_14_POWER_DOMAIN() volatile
    {
        return SSARC_LP_DESC_CTRL1_14_POWER_DOMAIN((DESC_CTRL1_14 >> 4u) &
                                                   0b111u);
    }

    /**
     * Set DESC_CTRL1_14's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline void set_DESC_CTRL1_14_POWER_DOMAIN(
        SSARC_LP_DESC_CTRL1_14_POWER_DOMAIN value) volatile
    {
        uint32_t curr = DESC_CTRL1_14;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        DESC_CTRL1_14 = curr;
    }

    /**
     * Get DESC_CTRL1_14's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline bool get_DESC_CTRL1_14_SW_TRIG_RT() volatile
    {
        return DESC_CTRL1_14 & (1u << 1u);
    }

    /**
     * Set DESC_CTRL1_14's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void set_DESC_CTRL1_14_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_14 |= 1u << 1u;
    }

    /**
     * Clear DESC_CTRL1_14's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void clear_DESC_CTRL1_14_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_14 &= ~(1u << 1u);
    }

    /**
     * Toggle DESC_CTRL1_14's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void toggle_DESC_CTRL1_14_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_14 ^= 1u << 1u;
    }

    /**
     * Get DESC_CTRL1_14's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline bool get_DESC_CTRL1_14_SW_TRIG_SV() volatile
    {
        return DESC_CTRL1_14 & (1u << 0u);
    }

    /**
     * Set DESC_CTRL1_14's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void set_DESC_CTRL1_14_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_14 |= 1u << 0u;
    }

    /**
     * Clear DESC_CTRL1_14's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void clear_DESC_CTRL1_14_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_14 &= ~(1u << 0u);
    }

    /**
     * Toggle DESC_CTRL1_14's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void toggle_DESC_CTRL1_14_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_14 ^= 1u << 0u;
    }

    /**
     * Get all of DESC_CTRL1_14's bit fields.
     *
     * (read-write) Descriptor Control1 14 Register
     */
    inline void get_DESC_CTRL1_14(
        bool &DL, bool &WL, bool &RL, uint8_t &CPUD, uint8_t &RT_PRIORITY,
        uint8_t &SV_PRIORITY, bool &GP_EN,
        SSARC_LP_DESC_CTRL1_14_POWER_DOMAIN &POWER_DOMAIN, bool &SW_TRIG_RT,
        bool &SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_14;

        DL = curr & (1u << 20u);
        WL = curr & (1u << 19u);
        RL = curr & (1u << 18u);
        CPUD = (curr >> 16u) & 0b11u;
        RT_PRIORITY = (curr >> 12u) & 0b1111u;
        SV_PRIORITY = (curr >> 8u) & 0b1111u;
        GP_EN = curr & (1u << 7u);
        POWER_DOMAIN =
            SSARC_LP_DESC_CTRL1_14_POWER_DOMAIN((curr >> 4u) & 0b111u);
        SW_TRIG_RT = curr & (1u << 1u);
        SW_TRIG_SV = curr & (1u << 0u);
    }

    /**
     * Set all of DESC_CTRL1_14's bit fields.
     *
     * (read-write) Descriptor Control1 14 Register
     */
    inline void set_DESC_CTRL1_14(
        bool DL, bool WL, bool RL, uint8_t CPUD, uint8_t RT_PRIORITY,
        uint8_t SV_PRIORITY, bool GP_EN,
        SSARC_LP_DESC_CTRL1_14_POWER_DOMAIN POWER_DOMAIN, bool SW_TRIG_RT,
        bool SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_14;

        curr &= ~(0b1u << 20u);
        curr |= (DL & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (WL & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (RL & 0b1u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (CPUD & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (RT_PRIORITY & 0b1111u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (SV_PRIORITY & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (GP_EN & 0b1u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(POWER_DOMAIN) & 0b111u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (SW_TRIG_RT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG_SV & 0b1u) << 0u;

        DESC_CTRL1_14 = curr;
    }

    /**
     * Get DESC_ADDR_UP_14's ADDR_UP field.
     *
     * Address field (High)
     */
    inline uint32_t get_DESC_ADDR_UP_14_ADDR_UP() volatile
    {
        return (DESC_ADDR_UP_14 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_UP_14's ADDR_UP field.
     *
     * Address field (High)
     */
    inline void set_DESC_ADDR_UP_14_ADDR_UP(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_UP_14;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_UP_14 = curr;
    }

    /**
     * Get DESC_ADDR_DOWN_14's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline uint32_t get_DESC_ADDR_DOWN_14_ADDR_DOWN() volatile
    {
        return (DESC_ADDR_DOWN_14 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_DOWN_14's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline void set_DESC_ADDR_DOWN_14_ADDR_DOWN(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_DOWN_14;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_DOWN_14 = curr;
    }

    /**
     * Get DESC_CTRL0_15's RT_ORDER bit.
     *
     * Restore order
     */
    inline bool get_DESC_CTRL0_15_RT_ORDER() volatile
    {
        return DESC_CTRL0_15 & (1u << 21u);
    }

    /**
     * Set DESC_CTRL0_15's RT_ORDER bit.
     *
     * Restore order
     */
    inline void set_DESC_CTRL0_15_RT_ORDER() volatile
    {
        DESC_CTRL0_15 |= 1u << 21u;
    }

    /**
     * Clear DESC_CTRL0_15's RT_ORDER bit.
     *
     * Restore order
     */
    inline void clear_DESC_CTRL0_15_RT_ORDER() volatile
    {
        DESC_CTRL0_15 &= ~(1u << 21u);
    }

    /**
     * Toggle DESC_CTRL0_15's RT_ORDER bit.
     *
     * Restore order
     */
    inline void toggle_DESC_CTRL0_15_RT_ORDER() volatile
    {
        DESC_CTRL0_15 ^= 1u << 21u;
    }

    /**
     * Get DESC_CTRL0_15's SV_ORDER bit.
     *
     * Save Order
     */
    inline bool get_DESC_CTRL0_15_SV_ORDER() volatile
    {
        return DESC_CTRL0_15 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL0_15's SV_ORDER bit.
     *
     * Save Order
     */
    inline void set_DESC_CTRL0_15_SV_ORDER() volatile
    {
        DESC_CTRL0_15 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL0_15's SV_ORDER bit.
     *
     * Save Order
     */
    inline void clear_DESC_CTRL0_15_SV_ORDER() volatile
    {
        DESC_CTRL0_15 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL0_15's SV_ORDER bit.
     *
     * Save Order
     */
    inline void toggle_DESC_CTRL0_15_SV_ORDER() volatile
    {
        DESC_CTRL0_15 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL0_15's END field.
     *
     * End index
     */
    inline uint16_t get_DESC_CTRL0_15_END() volatile
    {
        return (DESC_CTRL0_15 >> 10u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_15's END field.
     *
     * End index
     */
    inline void set_DESC_CTRL0_15_END(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_15;

        curr &= ~(0b1111111111u << 10u);
        curr |= (value & 0b1111111111u) << 10u;

        DESC_CTRL0_15 = curr;
    }

    /**
     * Get DESC_CTRL0_15's START field.
     *
     * Start index
     */
    inline uint16_t get_DESC_CTRL0_15_START() volatile
    {
        return (DESC_CTRL0_15 >> 0u) & 0b1111111111u;
    }

    /**
     * Set DESC_CTRL0_15's START field.
     *
     * Start index
     */
    inline void set_DESC_CTRL0_15_START(uint16_t value) volatile
    {
        uint32_t curr = DESC_CTRL0_15;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        DESC_CTRL0_15 = curr;
    }

    /**
     * Get all of DESC_CTRL0_15's bit fields.
     *
     * (read-write) Descriptor Control0 15 Register
     */
    inline void get_DESC_CTRL0_15(bool &RT_ORDER, bool &SV_ORDER,
                                  uint16_t &END, uint16_t &START) volatile
    {
        uint32_t curr = DESC_CTRL0_15;

        RT_ORDER = curr & (1u << 21u);
        SV_ORDER = curr & (1u << 20u);
        END = (curr >> 10u) & 0b1111111111u;
        START = (curr >> 0u) & 0b1111111111u;
    }

    /**
     * Set all of DESC_CTRL0_15's bit fields.
     *
     * (read-write) Descriptor Control0 15 Register
     */
    inline void set_DESC_CTRL0_15(bool RT_ORDER, bool SV_ORDER, uint16_t END,
                                  uint16_t START) volatile
    {
        uint32_t curr = DESC_CTRL0_15;

        curr &= ~(0b1u << 21u);
        curr |= (RT_ORDER & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (SV_ORDER & 0b1u) << 20u;
        curr &= ~(0b1111111111u << 10u);
        curr |= (END & 0b1111111111u) << 10u;
        curr &= ~(0b1111111111u << 0u);
        curr |= (START & 0b1111111111u) << 0u;

        DESC_CTRL0_15 = curr;
    }

    /**
     * Get DESC_CTRL1_15's DL bit.
     *
     * Domain lock
     */
    inline bool get_DESC_CTRL1_15_DL() volatile
    {
        return DESC_CTRL1_15 & (1u << 20u);
    }

    /**
     * Set DESC_CTRL1_15's DL bit.
     *
     * Domain lock
     */
    inline void set_DESC_CTRL1_15_DL() volatile
    {
        DESC_CTRL1_15 |= 1u << 20u;
    }

    /**
     * Clear DESC_CTRL1_15's DL bit.
     *
     * Domain lock
     */
    inline void clear_DESC_CTRL1_15_DL() volatile
    {
        DESC_CTRL1_15 &= ~(1u << 20u);
    }

    /**
     * Toggle DESC_CTRL1_15's DL bit.
     *
     * Domain lock
     */
    inline void toggle_DESC_CTRL1_15_DL() volatile
    {
        DESC_CTRL1_15 ^= 1u << 20u;
    }

    /**
     * Get DESC_CTRL1_15's WL bit.
     *
     * Write Lock
     */
    inline bool get_DESC_CTRL1_15_WL() volatile
    {
        return DESC_CTRL1_15 & (1u << 19u);
    }

    /**
     * Set DESC_CTRL1_15's WL bit.
     *
     * Write Lock
     */
    inline void set_DESC_CTRL1_15_WL() volatile
    {
        DESC_CTRL1_15 |= 1u << 19u;
    }

    /**
     * Clear DESC_CTRL1_15's WL bit.
     *
     * Write Lock
     */
    inline void clear_DESC_CTRL1_15_WL() volatile
    {
        DESC_CTRL1_15 &= ~(1u << 19u);
    }

    /**
     * Toggle DESC_CTRL1_15's WL bit.
     *
     * Write Lock
     */
    inline void toggle_DESC_CTRL1_15_WL() volatile
    {
        DESC_CTRL1_15 ^= 1u << 19u;
    }

    /**
     * Get DESC_CTRL1_15's RL bit.
     *
     * Read Lock
     */
    inline bool get_DESC_CTRL1_15_RL() volatile
    {
        return DESC_CTRL1_15 & (1u << 18u);
    }

    /**
     * Set DESC_CTRL1_15's RL bit.
     *
     * Read Lock
     */
    inline void set_DESC_CTRL1_15_RL() volatile
    {
        DESC_CTRL1_15 |= 1u << 18u;
    }

    /**
     * Clear DESC_CTRL1_15's RL bit.
     *
     * Read Lock
     */
    inline void clear_DESC_CTRL1_15_RL() volatile
    {
        DESC_CTRL1_15 &= ~(1u << 18u);
    }

    /**
     * Toggle DESC_CTRL1_15's RL bit.
     *
     * Read Lock
     */
    inline void toggle_DESC_CTRL1_15_RL() volatile
    {
        DESC_CTRL1_15 ^= 1u << 18u;
    }

    /**
     * Get DESC_CTRL1_15's CPUD field.
     *
     * CPU Domain
     */
    inline uint8_t get_DESC_CTRL1_15_CPUD() volatile
    {
        return (DESC_CTRL1_15 >> 16u) & 0b11u;
    }

    /**
     * Set DESC_CTRL1_15's CPUD field.
     *
     * CPU Domain
     */
    inline void set_DESC_CTRL1_15_CPUD(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_15;

        curr &= ~(0b11u << 16u);
        curr |= (value & 0b11u) << 16u;

        DESC_CTRL1_15 = curr;
    }

    /**
     * Get DESC_CTRL1_15's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline uint8_t get_DESC_CTRL1_15_RT_PRIORITY() volatile
    {
        return (DESC_CTRL1_15 >> 12u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_15's RT_PRIORITY field.
     *
     * Restore Priority
     */
    inline void set_DESC_CTRL1_15_RT_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_15;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        DESC_CTRL1_15 = curr;
    }

    /**
     * Get DESC_CTRL1_15's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline uint8_t get_DESC_CTRL1_15_SV_PRIORITY() volatile
    {
        return (DESC_CTRL1_15 >> 8u) & 0b1111u;
    }

    /**
     * Set DESC_CTRL1_15's SV_PRIORITY field.
     *
     * Save Priority
     */
    inline void set_DESC_CTRL1_15_SV_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = DESC_CTRL1_15;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        DESC_CTRL1_15 = curr;
    }

    /**
     * Get DESC_CTRL1_15's GP_EN bit.
     *
     * Group Enable
     */
    inline bool get_DESC_CTRL1_15_GP_EN() volatile
    {
        return DESC_CTRL1_15 & (1u << 7u);
    }

    /**
     * Set DESC_CTRL1_15's GP_EN bit.
     *
     * Group Enable
     */
    inline void set_DESC_CTRL1_15_GP_EN() volatile
    {
        DESC_CTRL1_15 |= 1u << 7u;
    }

    /**
     * Clear DESC_CTRL1_15's GP_EN bit.
     *
     * Group Enable
     */
    inline void clear_DESC_CTRL1_15_GP_EN() volatile
    {
        DESC_CTRL1_15 &= ~(1u << 7u);
    }

    /**
     * Toggle DESC_CTRL1_15's GP_EN bit.
     *
     * Group Enable
     */
    inline void toggle_DESC_CTRL1_15_GP_EN() volatile
    {
        DESC_CTRL1_15 ^= 1u << 7u;
    }

    /**
     * Get DESC_CTRL1_15's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline SSARC_LP_DESC_CTRL1_15_POWER_DOMAIN
    get_DESC_CTRL1_15_POWER_DOMAIN() volatile
    {
        return SSARC_LP_DESC_CTRL1_15_POWER_DOMAIN((DESC_CTRL1_15 >> 4u) &
                                                   0b111u);
    }

    /**
     * Set DESC_CTRL1_15's POWER_DOMAIN field.
     *
     * This field describes the mapping (0-7) to external request signals from
     * different domains
     */
    inline void set_DESC_CTRL1_15_POWER_DOMAIN(
        SSARC_LP_DESC_CTRL1_15_POWER_DOMAIN value) volatile
    {
        uint32_t curr = DESC_CTRL1_15;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        DESC_CTRL1_15 = curr;
    }

    /**
     * Get DESC_CTRL1_15's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline bool get_DESC_CTRL1_15_SW_TRIG_RT() volatile
    {
        return DESC_CTRL1_15 & (1u << 1u);
    }

    /**
     * Set DESC_CTRL1_15's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void set_DESC_CTRL1_15_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_15 |= 1u << 1u;
    }

    /**
     * Clear DESC_CTRL1_15's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void clear_DESC_CTRL1_15_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_15 &= ~(1u << 1u);
    }

    /**
     * Toggle DESC_CTRL1_15's SW_TRIG_RT bit.
     *
     * Software trigger restore
     */
    inline void toggle_DESC_CTRL1_15_SW_TRIG_RT() volatile
    {
        DESC_CTRL1_15 ^= 1u << 1u;
    }

    /**
     * Get DESC_CTRL1_15's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline bool get_DESC_CTRL1_15_SW_TRIG_SV() volatile
    {
        return DESC_CTRL1_15 & (1u << 0u);
    }

    /**
     * Set DESC_CTRL1_15's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void set_DESC_CTRL1_15_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_15 |= 1u << 0u;
    }

    /**
     * Clear DESC_CTRL1_15's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void clear_DESC_CTRL1_15_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_15 &= ~(1u << 0u);
    }

    /**
     * Toggle DESC_CTRL1_15's SW_TRIG_SV bit.
     *
     * Software trigger save
     */
    inline void toggle_DESC_CTRL1_15_SW_TRIG_SV() volatile
    {
        DESC_CTRL1_15 ^= 1u << 0u;
    }

    /**
     * Get all of DESC_CTRL1_15's bit fields.
     *
     * (read-write) Descriptor Control1 15 Register
     */
    inline void get_DESC_CTRL1_15(
        bool &DL, bool &WL, bool &RL, uint8_t &CPUD, uint8_t &RT_PRIORITY,
        uint8_t &SV_PRIORITY, bool &GP_EN,
        SSARC_LP_DESC_CTRL1_15_POWER_DOMAIN &POWER_DOMAIN, bool &SW_TRIG_RT,
        bool &SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_15;

        DL = curr & (1u << 20u);
        WL = curr & (1u << 19u);
        RL = curr & (1u << 18u);
        CPUD = (curr >> 16u) & 0b11u;
        RT_PRIORITY = (curr >> 12u) & 0b1111u;
        SV_PRIORITY = (curr >> 8u) & 0b1111u;
        GP_EN = curr & (1u << 7u);
        POWER_DOMAIN =
            SSARC_LP_DESC_CTRL1_15_POWER_DOMAIN((curr >> 4u) & 0b111u);
        SW_TRIG_RT = curr & (1u << 1u);
        SW_TRIG_SV = curr & (1u << 0u);
    }

    /**
     * Set all of DESC_CTRL1_15's bit fields.
     *
     * (read-write) Descriptor Control1 15 Register
     */
    inline void set_DESC_CTRL1_15(
        bool DL, bool WL, bool RL, uint8_t CPUD, uint8_t RT_PRIORITY,
        uint8_t SV_PRIORITY, bool GP_EN,
        SSARC_LP_DESC_CTRL1_15_POWER_DOMAIN POWER_DOMAIN, bool SW_TRIG_RT,
        bool SW_TRIG_SV) volatile
    {
        uint32_t curr = DESC_CTRL1_15;

        curr &= ~(0b1u << 20u);
        curr |= (DL & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (WL & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (RL & 0b1u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (CPUD & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (RT_PRIORITY & 0b1111u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (SV_PRIORITY & 0b1111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (GP_EN & 0b1u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(POWER_DOMAIN) & 0b111u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (SW_TRIG_RT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG_SV & 0b1u) << 0u;

        DESC_CTRL1_15 = curr;
    }

    /**
     * Get DESC_ADDR_UP_15's ADDR_UP field.
     *
     * Address field (High)
     */
    inline uint32_t get_DESC_ADDR_UP_15_ADDR_UP() volatile
    {
        return (DESC_ADDR_UP_15 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_UP_15's ADDR_UP field.
     *
     * Address field (High)
     */
    inline void set_DESC_ADDR_UP_15_ADDR_UP(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_UP_15;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_UP_15 = curr;
    }

    /**
     * Get DESC_ADDR_DOWN_15's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline uint32_t get_DESC_ADDR_DOWN_15_ADDR_DOWN() volatile
    {
        return (DESC_ADDR_DOWN_15 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DESC_ADDR_DOWN_15's ADDR_DOWN field.
     *
     * Address field (Low)
     */
    inline void set_DESC_ADDR_DOWN_15_ADDR_DOWN(uint32_t value) volatile
    {
        uint32_t curr = DESC_ADDR_DOWN_15;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DESC_ADDR_DOWN_15 = curr;
    }

    /**
     * Get CTRL's SW_RESET bit.
     *
     * Software reset
     */
    inline bool get_CTRL_SW_RESET() volatile
    {
        return CTRL & (1u << 31u);
    }

    /**
     * Set CTRL's SW_RESET bit.
     *
     * Software reset
     */
    inline void set_CTRL_SW_RESET() volatile
    {
        CTRL |= 1u << 31u;
    }

    /**
     * Clear CTRL's SW_RESET bit.
     *
     * Software reset
     */
    inline void clear_CTRL_SW_RESET() volatile
    {
        CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle CTRL's SW_RESET bit.
     *
     * Software reset
     */
    inline void toggle_CTRL_SW_RESET() volatile
    {
        CTRL ^= 1u << 31u;
    }

    /**
     * Get CTRL's DIS_HW_REQ bit.
     *
     * Save/Restore request disable
     */
    inline bool get_CTRL_DIS_HW_REQ() volatile
    {
        return CTRL & (1u << 27u);
    }

    /**
     * Set CTRL's DIS_HW_REQ bit.
     *
     * Save/Restore request disable
     */
    inline void set_CTRL_DIS_HW_REQ() volatile
    {
        CTRL |= 1u << 27u;
    }

    /**
     * Clear CTRL's DIS_HW_REQ bit.
     *
     * Save/Restore request disable
     */
    inline void clear_CTRL_DIS_HW_REQ() volatile
    {
        CTRL &= ~(1u << 27u);
    }

    /**
     * Toggle CTRL's DIS_HW_REQ bit.
     *
     * Save/Restore request disable
     */
    inline void toggle_CTRL_DIS_HW_REQ() volatile
    {
        CTRL ^= 1u << 27u;
    }

    /**
     * Get all of CTRL's bit fields.
     *
     * (read-write) Control Register
     */
    inline void get_CTRL(bool &SW_RESET, bool &DIS_HW_REQ) volatile
    {
        uint32_t curr = CTRL;

        SW_RESET = curr & (1u << 31u);
        DIS_HW_REQ = curr & (1u << 27u);
    }

    /**
     * Set all of CTRL's bit fields.
     *
     * (read-write) Control Register
     */
    inline void set_CTRL(bool SW_RESET, bool DIS_HW_REQ) volatile
    {
        uint32_t curr = CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (SW_RESET & 0b1u) << 31u;
        curr &= ~(0b1u << 27u);
        curr |= (DIS_HW_REQ & 0b1u) << 27u;

        CTRL = curr;
    }

    /**
     * Get INT_STATUS's ADDR_ERR bit.
     *
     * Address Error field
     */
    inline bool get_INT_STATUS_ADDR_ERR() volatile
    {
        return INT_STATUS & (1u << 31u);
    }

    /**
     * Set INT_STATUS's ADDR_ERR bit.
     *
     * Address Error field
     */
    inline void set_INT_STATUS_ADDR_ERR() volatile
    {
        INT_STATUS |= 1u << 31u;
    }

    /**
     * Clear INT_STATUS's ADDR_ERR bit.
     *
     * Address Error field
     */
    inline void clear_INT_STATUS_ADDR_ERR() volatile
    {
        INT_STATUS &= ~(1u << 31u);
    }

    /**
     * Toggle INT_STATUS's ADDR_ERR bit.
     *
     * Address Error field
     */
    inline void toggle_INT_STATUS_ADDR_ERR() volatile
    {
        INT_STATUS ^= 1u << 31u;
    }

    /**
     * Get INT_STATUS's AHB_ERR bit.
     *
     * AHB Error field
     */
    inline bool get_INT_STATUS_AHB_ERR() volatile
    {
        return INT_STATUS & (1u << 30u);
    }

    /**
     * Set INT_STATUS's AHB_ERR bit.
     *
     * AHB Error field
     */
    inline void set_INT_STATUS_AHB_ERR() volatile
    {
        INT_STATUS |= 1u << 30u;
    }

    /**
     * Clear INT_STATUS's AHB_ERR bit.
     *
     * AHB Error field
     */
    inline void clear_INT_STATUS_AHB_ERR() volatile
    {
        INT_STATUS &= ~(1u << 30u);
    }

    /**
     * Toggle INT_STATUS's AHB_ERR bit.
     *
     * AHB Error field
     */
    inline void toggle_INT_STATUS_AHB_ERR() volatile
    {
        INT_STATUS ^= 1u << 30u;
    }

    /**
     * Get INT_STATUS's SW_REQ_DONE bit.
     *
     * Software Request Done
     */
    inline bool get_INT_STATUS_SW_REQ_DONE() volatile
    {
        return INT_STATUS & (1u << 29u);
    }

    /**
     * Get INT_STATUS's TIMEOUT bit.
     *
     * Timeout field
     */
    inline bool get_INT_STATUS_TIMEOUT() volatile
    {
        return INT_STATUS & (1u << 28u);
    }

    /**
     * Set INT_STATUS's TIMEOUT bit.
     *
     * Timeout field
     */
    inline void set_INT_STATUS_TIMEOUT() volatile
    {
        INT_STATUS |= 1u << 28u;
    }

    /**
     * Clear INT_STATUS's TIMEOUT bit.
     *
     * Timeout field
     */
    inline void clear_INT_STATUS_TIMEOUT() volatile
    {
        INT_STATUS &= ~(1u << 28u);
    }

    /**
     * Toggle INT_STATUS's TIMEOUT bit.
     *
     * Timeout field
     */
    inline void toggle_INT_STATUS_TIMEOUT() volatile
    {
        INT_STATUS ^= 1u << 28u;
    }

    /**
     * Get INT_STATUS's GROUP_CONFLICT bit.
     *
     * Group Conflict field
     */
    inline bool get_INT_STATUS_GROUP_CONFLICT() volatile
    {
        return INT_STATUS & (1u << 27u);
    }

    /**
     * Set INT_STATUS's GROUP_CONFLICT bit.
     *
     * Group Conflict field
     */
    inline void set_INT_STATUS_GROUP_CONFLICT() volatile
    {
        INT_STATUS |= 1u << 27u;
    }

    /**
     * Clear INT_STATUS's GROUP_CONFLICT bit.
     *
     * Group Conflict field
     */
    inline void clear_INT_STATUS_GROUP_CONFLICT() volatile
    {
        INT_STATUS &= ~(1u << 27u);
    }

    /**
     * Toggle INT_STATUS's GROUP_CONFLICT bit.
     *
     * Group Conflict field
     */
    inline void toggle_INT_STATUS_GROUP_CONFLICT() volatile
    {
        INT_STATUS ^= 1u << 27u;
    }

    /**
     * Get INT_STATUS's AHB_RESP field.
     *
     * AHB Bus response field
     */
    inline uint8_t get_INT_STATUS_AHB_RESP() volatile
    {
        return (INT_STATUS >> 10u) & 0b11u;
    }

    /**
     * Get INT_STATUS's ERR_INDEX field.
     *
     * Error Index
     */
    inline uint16_t get_INT_STATUS_ERR_INDEX() volatile
    {
        return (INT_STATUS >> 0u) & 0b1111111111u;
    }

    /**
     * Get all of INT_STATUS's bit fields.
     *
     * (read-write) Interrupt Status Register
     */
    inline void get_INT_STATUS(bool &ADDR_ERR, bool &AHB_ERR,
                               bool &SW_REQ_DONE, bool &TIMEOUT,
                               bool &GROUP_CONFLICT, uint8_t &AHB_RESP,
                               uint16_t &ERR_INDEX) volatile
    {
        uint32_t curr = INT_STATUS;

        ADDR_ERR = curr & (1u << 31u);
        AHB_ERR = curr & (1u << 30u);
        SW_REQ_DONE = curr & (1u << 29u);
        TIMEOUT = curr & (1u << 28u);
        GROUP_CONFLICT = curr & (1u << 27u);
        AHB_RESP = (curr >> 10u) & 0b11u;
        ERR_INDEX = (curr >> 0u) & 0b1111111111u;
    }

    /**
     * Set all of INT_STATUS's bit fields.
     *
     * (read-write) Interrupt Status Register
     */
    inline void set_INT_STATUS(bool ADDR_ERR, bool AHB_ERR, bool TIMEOUT,
                               bool GROUP_CONFLICT) volatile
    {
        uint32_t curr = INT_STATUS;

        curr &= ~(0b1u << 31u);
        curr |= (ADDR_ERR & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (AHB_ERR & 0b1u) << 30u;
        curr &= ~(0b1u << 28u);
        curr |= (TIMEOUT & 0b1u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (GROUP_CONFLICT & 0b1u) << 27u;

        INT_STATUS = curr;
    }

    /**
     * Get HP_TIMEOUT's TIMEOUT_VALUE field.
     *
     * Time out value
     */
    inline uint32_t get_HP_TIMEOUT_TIMEOUT_VALUE() volatile
    {
        return (HP_TIMEOUT >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set HP_TIMEOUT's TIMEOUT_VALUE field.
     *
     * Time out value
     */
    inline void set_HP_TIMEOUT_TIMEOUT_VALUE(uint32_t value) volatile
    {
        uint32_t curr = HP_TIMEOUT;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        HP_TIMEOUT = curr;
    }

    /**
     * Get HW_GROUP_PENDING's HW_RESTORE_PENDING field.
     *
     * This field indicates which groups are pending for restore from hardware
     * request
     */
    inline uint16_t get_HW_GROUP_PENDING_HW_RESTORE_PENDING() volatile
    {
        return (HW_GROUP_PENDING >> 16u) & 0b1111111111111111u;
    }

    /**
     * Get HW_GROUP_PENDING's HW_SAVE_PENDING field.
     *
     * This field indicates which groups are pending for save from hardware
     * request
     */
    inline uint16_t get_HW_GROUP_PENDING_HW_SAVE_PENDING() volatile
    {
        return (HW_GROUP_PENDING >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get all of HW_GROUP_PENDING's bit fields.
     *
     * (read-write) Hardware Request Pending Register
     */
    inline void get_HW_GROUP_PENDING(uint16_t &HW_RESTORE_PENDING,
                                     uint16_t &HW_SAVE_PENDING) volatile
    {
        uint32_t curr = HW_GROUP_PENDING;

        HW_RESTORE_PENDING = (curr >> 16u) & 0b1111111111111111u;
        HW_SAVE_PENDING = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get SW_GROUP_PENDING's SW_RESTORE_PENDING field.
     *
     * This field indicates which groups are pending for restore from software
     * request
     */
    inline uint16_t get_SW_GROUP_PENDING_SW_RESTORE_PENDING() volatile
    {
        return (SW_GROUP_PENDING >> 16u) & 0b1111111111111111u;
    }

    /**
     * Get SW_GROUP_PENDING's SW_SAVE_PENDING field.
     *
     * This field indicates which groups are pending for save from software
     * request
     */
    inline uint16_t get_SW_GROUP_PENDING_SW_SAVE_PENDING() volatile
    {
        return (SW_GROUP_PENDING >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get all of SW_GROUP_PENDING's bit fields.
     *
     * (read-write) Software Request Pending Register
     */
    inline void get_SW_GROUP_PENDING(uint16_t &SW_RESTORE_PENDING,
                                     uint16_t &SW_SAVE_PENDING) volatile
    {
        uint32_t curr = SW_GROUP_PENDING;

        SW_RESTORE_PENDING = (curr >> 16u) & 0b1111111111111111u;
        SW_SAVE_PENDING = (curr >> 0u) & 0b1111111111111111u;
    }
};

static_assert(sizeof(ssarc_lp) == ssarc_lp::size);

static volatile ssarc_lp *const SSARC_LP =
    reinterpret_cast<ssarc_lp *>(0x40CB8000);

}; // namespace MIMXRT1176::CM7
