/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/CCM_CLOCK_GROUP0_SETPOINT0_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP0_SETPOINT10_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP0_SETPOINT11_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP0_SETPOINT12_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP0_SETPOINT13_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP0_SETPOINT14_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP0_SETPOINT15_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP0_SETPOINT1_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP0_SETPOINT2_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP0_SETPOINT3_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP0_SETPOINT4_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP0_SETPOINT5_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP0_SETPOINT6_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP0_SETPOINT7_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP0_SETPOINT8_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP0_SETPOINT9_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP1_SETPOINT0_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP1_SETPOINT10_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP1_SETPOINT11_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP1_SETPOINT12_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP1_SETPOINT13_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP1_SETPOINT14_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP1_SETPOINT15_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP1_SETPOINT1_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP1_SETPOINT2_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP1_SETPOINT3_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP1_SETPOINT4_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP1_SETPOINT5_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP1_SETPOINT6_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP1_SETPOINT7_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP1_SETPOINT8_DIV0.h"
#include "../enums/CCM_CLOCK_GROUP1_SETPOINT9_DIV0.h"
#include "../enums/CCM_GPR_PRIVATE1_AUTHEN_WHITE_LIST.h"
#include "../enums/CCM_GPR_PRIVATE2_AUTHEN_WHITE_LIST.h"
#include "../enums/CCM_GPR_PRIVATE3_AUTHEN_WHITE_LIST.h"
#include "../enums/CCM_GPR_PRIVATE4_AUTHEN_WHITE_LIST.h"
#include "../enums/CCM_GPR_PRIVATE5_AUTHEN_WHITE_LIST.h"
#include "../enums/CCM_GPR_PRIVATE6_AUTHEN_WHITE_LIST.h"
#include "../enums/CCM_GPR_PRIVATE7_AUTHEN_WHITE_LIST.h"
#include "../enums/CCM_LPCG0_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG0_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG0_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG0_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG0_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG0_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG0_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG0_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG0_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG0_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG0_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG100_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG100_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG100_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG100_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG100_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG100_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG100_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG100_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG100_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG100_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG100_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG101_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG101_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG101_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG101_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG101_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG101_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG101_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG101_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG101_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG101_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG101_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG102_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG102_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG102_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG102_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG102_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG102_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG102_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG102_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG102_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG102_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG102_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG103_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG103_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG103_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG103_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG103_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG103_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG103_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG103_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG103_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG103_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG103_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG104_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG104_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG104_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG104_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG104_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG104_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG104_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG104_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG104_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG104_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG104_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG105_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG105_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG105_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG105_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG105_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG105_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG105_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG105_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG105_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG105_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG105_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG106_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG106_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG106_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG106_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG106_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG106_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG106_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG106_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG106_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG106_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG106_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG107_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG107_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG107_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG107_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG107_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG107_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG107_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG107_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG107_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG107_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG107_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG108_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG108_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG108_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG108_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG108_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG108_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG108_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG108_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG108_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG108_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG108_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG109_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG109_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG109_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG109_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG109_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG109_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG109_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG109_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG109_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG109_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG109_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG10_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG10_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG10_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG10_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG10_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG10_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG10_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG10_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG10_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG10_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG10_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG110_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG110_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG110_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG110_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG110_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG110_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG110_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG110_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG110_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG110_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG110_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG111_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG111_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG111_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG111_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG111_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG111_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG111_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG111_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG111_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG111_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG111_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG112_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG112_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG112_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG112_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG112_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG112_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG112_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG112_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG112_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG112_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG112_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG113_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG113_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG113_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG113_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG113_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG113_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG113_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG113_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG113_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG113_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG113_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG114_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG114_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG114_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG114_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG114_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG114_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG114_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG114_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG114_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG114_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG114_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG115_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG115_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG115_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG115_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG115_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG115_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG115_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG115_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG115_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG115_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG115_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG116_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG116_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG116_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG116_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG116_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG116_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG116_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG116_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG116_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG116_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG116_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG117_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG117_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG117_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG117_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG117_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG117_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG117_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG117_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG117_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG117_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG117_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG118_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG118_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG118_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG118_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG118_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG118_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG118_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG118_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG118_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG118_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG118_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG119_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG119_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG119_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG119_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG119_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG119_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG119_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG119_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG119_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG119_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG119_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG11_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG11_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG11_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG11_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG11_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG11_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG11_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG11_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG11_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG11_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG11_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG120_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG120_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG120_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG120_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG120_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG120_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG120_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG120_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG120_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG120_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG120_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG121_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG121_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG121_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG121_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG121_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG121_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG121_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG121_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG121_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG121_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG121_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG122_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG122_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG122_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG122_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG122_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG122_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG122_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG122_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG122_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG122_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG122_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG123_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG123_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG123_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG123_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG123_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG123_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG123_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG123_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG123_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG123_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG123_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG124_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG124_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG124_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG124_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG124_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG124_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG124_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG124_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG124_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG124_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG124_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG125_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG125_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG125_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG125_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG125_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG125_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG125_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG125_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG125_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG125_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG125_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG126_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG126_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG126_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG126_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG126_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG126_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG126_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG126_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG126_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG126_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG126_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG127_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG127_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG127_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG127_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG127_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG127_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG127_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG127_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG127_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG127_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG127_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG128_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG128_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG128_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG128_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG128_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG128_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG128_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG128_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG128_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG128_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG128_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG129_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG129_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG129_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG129_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG129_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG129_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG129_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG129_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG129_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG129_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG129_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG12_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG12_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG12_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG12_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG12_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG12_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG12_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG12_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG12_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG12_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG12_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG130_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG130_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG130_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG130_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG130_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG130_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG130_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG130_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG130_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG130_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG130_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG131_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG131_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG131_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG131_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG131_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG131_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG131_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG131_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG131_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG131_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG131_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG132_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG132_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG132_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG132_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG132_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG132_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG132_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG132_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG132_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG132_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG132_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG133_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG133_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG133_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG133_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG133_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG133_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG133_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG133_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG133_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG133_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG133_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG134_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG134_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG134_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG134_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG134_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG134_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG134_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG134_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG134_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG134_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG134_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG135_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG135_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG135_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG135_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG135_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG135_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG135_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG135_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG135_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG135_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG135_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG136_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG136_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG136_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG136_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG136_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG136_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG136_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG136_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG136_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG136_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG136_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG137_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG137_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG137_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG137_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG137_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG137_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG137_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG137_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG137_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG137_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG137_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG13_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG13_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG13_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG13_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG13_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG13_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG13_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG13_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG13_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG13_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG13_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG14_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG14_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG14_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG14_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG14_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG14_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG14_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG14_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG14_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG14_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG14_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG15_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG15_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG15_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG15_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG15_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG15_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG15_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG15_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG15_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG15_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG15_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG16_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG16_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG16_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG16_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG16_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG16_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG16_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG16_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG16_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG16_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG16_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG17_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG17_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG17_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG17_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG17_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG17_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG17_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG17_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG17_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG17_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG17_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG18_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG18_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG18_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG18_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG18_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG18_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG18_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG18_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG18_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG18_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG18_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG19_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG19_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG19_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG19_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG19_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG19_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG19_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG19_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG19_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG19_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG19_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG1_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG1_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG1_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG1_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG1_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG1_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG1_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG1_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG1_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG1_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG1_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG20_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG20_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG20_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG20_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG20_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG20_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG20_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG20_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG20_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG20_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG20_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG21_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG21_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG21_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG21_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG21_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG21_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG21_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG21_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG21_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG21_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG21_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG22_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG22_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG22_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG22_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG22_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG22_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG22_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG22_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG22_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG22_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG22_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG23_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG23_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG23_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG23_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG23_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG23_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG23_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG23_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG23_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG23_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG23_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG24_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG24_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG24_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG24_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG24_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG24_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG24_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG24_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG24_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG24_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG24_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG25_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG25_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG25_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG25_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG25_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG25_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG25_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG25_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG25_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG25_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG25_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG26_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG26_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG26_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG26_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG26_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG26_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG26_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG26_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG26_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG26_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG26_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG27_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG27_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG27_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG27_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG27_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG27_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG27_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG27_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG27_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG27_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG27_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG28_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG28_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG28_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG28_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG28_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG28_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG28_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG28_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG28_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG28_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG28_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG29_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG29_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG29_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG29_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG29_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG29_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG29_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG29_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG29_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG29_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG29_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG2_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG2_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG2_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG2_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG2_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG2_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG2_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG2_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG2_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG2_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG2_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG30_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG30_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG30_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG30_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG30_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG30_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG30_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG30_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG30_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG30_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG30_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG31_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG31_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG31_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG31_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG31_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG31_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG31_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG31_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG31_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG31_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG31_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG32_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG32_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG32_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG32_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG32_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG32_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG32_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG32_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG32_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG32_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG32_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG33_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG33_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG33_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG33_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG33_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG33_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG33_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG33_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG33_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG33_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG33_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG34_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG34_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG34_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG34_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG34_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG34_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG34_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG34_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG34_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG34_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG34_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG35_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG35_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG35_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG35_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG35_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG35_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG35_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG35_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG35_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG35_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG35_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG36_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG36_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG36_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG36_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG36_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG36_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG36_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG36_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG36_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG36_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG36_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG37_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG37_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG37_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG37_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG37_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG37_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG37_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG37_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG37_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG37_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG37_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG38_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG38_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG38_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG38_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG38_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG38_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG38_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG38_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG38_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG38_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG38_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG39_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG39_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG39_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG39_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG39_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG39_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG39_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG39_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG39_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG39_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG39_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG3_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG3_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG3_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG3_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG3_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG3_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG3_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG3_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG3_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG3_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG3_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG40_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG40_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG40_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG40_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG40_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG40_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG40_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG40_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG40_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG40_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG40_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG41_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG41_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG41_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG41_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG41_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG41_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG41_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG41_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG41_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG41_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG41_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG42_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG42_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG42_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG42_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG42_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG42_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG42_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG42_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG42_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG42_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG42_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG43_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG43_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG43_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG43_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG43_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG43_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG43_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG43_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG43_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG43_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG43_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG44_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG44_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG44_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG44_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG44_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG44_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG44_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG44_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG44_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG44_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG44_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG45_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG45_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG45_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG45_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG45_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG45_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG45_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG45_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG45_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG45_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG45_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG46_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG46_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG46_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG46_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG46_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG46_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG46_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG46_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG46_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG46_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG46_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG47_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG47_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG47_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG47_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG47_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG47_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG47_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG47_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG47_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG47_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG47_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG48_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG48_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG48_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG48_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG48_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG48_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG48_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG48_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG48_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG48_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG48_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG49_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG49_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG49_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG49_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG49_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG49_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG49_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG49_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG49_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG49_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG49_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG4_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG4_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG4_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG4_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG4_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG4_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG4_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG4_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG4_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG4_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG4_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG50_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG50_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG50_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG50_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG50_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG50_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG50_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG50_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG50_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG50_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG50_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG51_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG51_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG51_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG51_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG51_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG51_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG51_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG51_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG51_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG51_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG51_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG52_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG52_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG52_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG52_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG52_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG52_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG52_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG52_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG52_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG52_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG52_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG53_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG53_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG53_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG53_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG53_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG53_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG53_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG53_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG53_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG53_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG53_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG54_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG54_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG54_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG54_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG54_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG54_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG54_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG54_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG54_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG54_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG54_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG55_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG55_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG55_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG55_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG55_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG55_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG55_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG55_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG55_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG55_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG55_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG56_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG56_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG56_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG56_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG56_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG56_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG56_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG56_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG56_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG56_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG56_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG57_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG57_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG57_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG57_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG57_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG57_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG57_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG57_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG57_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG57_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG57_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG58_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG58_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG58_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG58_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG58_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG58_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG58_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG58_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG58_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG58_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG58_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG59_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG59_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG59_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG59_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG59_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG59_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG59_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG59_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG59_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG59_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG59_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG5_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG5_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG5_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG5_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG5_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG5_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG5_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG5_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG5_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG5_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG5_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG60_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG60_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG60_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG60_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG60_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG60_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG60_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG60_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG60_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG60_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG60_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG61_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG61_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG61_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG61_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG61_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG61_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG61_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG61_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG61_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG61_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG61_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG62_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG62_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG62_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG62_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG62_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG62_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG62_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG62_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG62_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG62_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG62_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG63_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG63_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG63_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG63_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG63_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG63_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG63_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG63_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG63_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG63_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG63_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG64_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG64_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG64_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG64_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG64_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG64_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG64_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG64_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG64_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG64_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG64_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG65_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG65_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG65_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG65_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG65_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG65_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG65_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG65_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG65_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG65_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG65_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG66_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG66_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG66_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG66_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG66_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG66_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG66_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG66_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG66_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG66_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG66_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG67_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG67_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG67_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG67_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG67_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG67_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG67_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG67_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG67_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG67_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG67_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG68_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG68_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG68_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG68_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG68_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG68_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG68_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG68_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG68_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG68_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG68_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG69_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG69_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG69_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG69_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG69_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG69_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG69_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG69_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG69_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG69_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG69_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG6_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG6_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG6_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG6_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG6_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG6_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG6_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG6_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG6_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG6_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG6_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG70_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG70_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG70_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG70_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG70_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG70_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG70_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG70_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG70_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG70_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG70_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG71_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG71_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG71_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG71_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG71_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG71_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG71_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG71_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG71_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG71_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG71_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG72_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG72_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG72_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG72_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG72_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG72_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG72_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG72_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG72_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG72_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG72_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG73_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG73_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG73_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG73_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG73_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG73_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG73_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG73_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG73_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG73_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG73_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG74_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG74_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG74_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG74_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG74_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG74_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG74_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG74_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG74_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG74_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG74_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG75_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG75_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG75_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG75_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG75_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG75_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG75_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG75_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG75_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG75_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG75_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG76_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG76_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG76_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG76_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG76_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG76_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG76_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG76_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG76_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG76_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG76_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG77_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG77_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG77_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG77_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG77_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG77_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG77_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG77_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG77_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG77_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG77_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG78_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG78_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG78_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG78_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG78_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG78_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG78_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG78_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG78_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG78_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG78_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG79_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG79_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG79_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG79_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG79_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG79_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG79_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG79_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG79_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG79_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG79_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG7_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG7_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG7_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG7_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG7_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG7_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG7_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG7_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG7_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG7_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG7_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG80_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG80_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG80_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG80_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG80_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG80_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG80_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG80_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG80_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG80_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG80_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG81_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG81_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG81_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG81_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG81_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG81_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG81_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG81_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG81_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG81_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG81_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG82_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG82_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG82_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG82_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG82_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG82_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG82_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG82_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG82_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG82_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG82_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG83_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG83_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG83_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG83_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG83_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG83_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG83_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG83_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG83_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG83_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG83_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG84_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG84_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG84_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG84_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG84_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG84_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG84_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG84_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG84_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG84_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG84_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG85_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG85_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG85_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG85_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG85_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG85_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG85_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG85_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG85_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG85_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG85_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG86_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG86_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG86_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG86_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG86_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG86_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG86_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG86_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG86_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG86_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG86_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG87_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG87_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG87_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG87_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG87_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG87_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG87_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG87_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG87_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG87_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG87_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG88_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG88_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG88_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG88_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG88_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG88_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG88_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG88_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG88_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG88_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG88_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG89_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG89_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG89_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG89_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG89_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG89_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG89_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG89_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG89_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG89_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG89_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG8_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG8_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG8_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG8_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG8_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG8_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG8_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG8_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG8_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG8_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG8_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG90_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG90_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG90_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG90_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG90_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG90_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG90_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG90_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG90_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG90_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG90_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG91_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG91_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG91_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG91_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG91_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG91_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG91_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG91_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG91_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG91_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG91_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG92_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG92_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG92_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG92_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG92_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG92_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG92_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG92_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG92_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG92_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG92_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG93_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG93_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG93_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG93_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG93_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG93_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG93_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG93_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG93_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG93_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG93_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG94_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG94_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG94_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG94_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG94_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG94_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG94_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG94_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG94_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG94_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG94_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG95_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG95_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG95_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG95_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG95_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG95_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG95_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG95_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG95_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG95_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG95_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG96_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG96_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG96_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG96_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG96_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG96_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG96_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG96_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG96_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG96_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG96_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG97_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG97_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG97_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG97_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG97_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG97_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG97_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG97_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG97_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG97_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG97_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG98_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG98_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG98_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG98_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG98_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG98_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG98_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG98_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG98_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG98_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG98_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG99_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG99_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG99_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG99_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG99_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG99_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG99_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG99_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG99_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG99_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG99_STATUS1_CPU3_MODE.h"
#include "../enums/CCM_LPCG9_DOMAIN_LEVEL.h"
#include "../enums/CCM_LPCG9_DOMAIN_LEVEL0.h"
#include "../enums/CCM_LPCG9_DOMAIN_LEVEL1.h"
#include "../enums/CCM_LPCG9_DOMAIN_LEVEL2.h"
#include "../enums/CCM_LPCG9_DOMAIN_LEVEL3.h"
#include "../enums/CCM_LPCG9_STATUS0_ACTIVE_DOMAIN.h"
#include "../enums/CCM_LPCG9_STATUS0_DOMAIN_ENABLE.h"
#include "../enums/CCM_LPCG9_STATUS1_CPU0_MODE.h"
#include "../enums/CCM_LPCG9_STATUS1_CPU1_MODE.h"
#include "../enums/CCM_LPCG9_STATUS1_CPU2_MODE.h"
#include "../enums/CCM_LPCG9_STATUS1_CPU3_MODE.h"
#include "../ifgen/common.h"
#include "CLOCK_ROOT_instance.h"
#include "GPR_SHARED_instance.h"
#include "OSCPLL_instance.h"

namespace MIMXRT1176::CM7
{

/**
 * CCM
 */
struct [[gnu::packed]] ccm
{
    /* Constant attributes. */
    static constexpr std::size_t size = 28992; /*!< ccm's size in bytes. */

    /* Fields. */
    static constexpr std::size_t CLOCK_ROOT_length = 79;
    CLOCK_ROOT_instance
        CLOCK_ROOT[CLOCK_ROOT_length]; /*!< Clock root select Registers */
    static constexpr std::size_t reserved_padding0_length = 1568;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t CLOCK_GROUP0_CONTROL;     /*!< (read-write) Clock group control */
    uint32_t CLOCK_GROUP0_CONTROL_SET; /*!< (read-write) Clock group control */
    uint32_t CLOCK_GROUP0_CONTROL_CLR; /*!< (read-write) Clock group control */
    uint32_t CLOCK_GROUP0_CONTROL_TOG; /*!< (read-write) Clock group control */
    static constexpr std::size_t reserved_padding1_length = 4;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    uint32_t
        CLOCK_GROUP0_STATUS0; /*!< (read-write) Clock group working status */
    uint32_t CLOCK_GROUP0_STATUS1; /*!< (read-write) Clock group low
                                      power/extend status */
    const uint32_t reserved_padding2 = {};
    uint32_t
        CLOCK_GROUP0_CONFIG; /*!< (read-write) Clock group configuration */
    uint32_t
        CLOCK_GROUP0_AUTHEN; /*!< (read-write) Clock group access control */
    uint32_t CLOCK_GROUP0_AUTHEN_SET;  /*!< (read-write) Clock group access
                                          control */
    uint32_t CLOCK_GROUP0_AUTHEN_CLR;  /*!< (read-write) Clock group access
                                          control */
    uint32_t CLOCK_GROUP0_AUTHEN_TOG;  /*!< (read-write) Clock group access
                                          control */
    uint32_t CLOCK_GROUP0_SETPOINT0;   /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP0_SETPOINT1;   /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP0_SETPOINT2;   /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP0_SETPOINT3;   /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP0_SETPOINT4;   /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP0_SETPOINT5;   /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP0_SETPOINT6;   /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP0_SETPOINT7;   /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP0_SETPOINT8;   /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP0_SETPOINT9;   /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP0_SETPOINT10;  /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP0_SETPOINT11;  /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP0_SETPOINT12;  /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP0_SETPOINT13;  /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP0_SETPOINT14;  /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP0_SETPOINT15;  /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP1_CONTROL;     /*!< (read-write) Clock group control */
    uint32_t CLOCK_GROUP1_CONTROL_SET; /*!< (read-write) Clock group control */
    uint32_t CLOCK_GROUP1_CONTROL_CLR; /*!< (read-write) Clock group control */
    uint32_t CLOCK_GROUP1_CONTROL_TOG; /*!< (read-write) Clock group control */
    static constexpr std::size_t reserved_padding3_length = 4;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    uint32_t
        CLOCK_GROUP1_STATUS0; /*!< (read-write) Clock group working status */
    uint32_t CLOCK_GROUP1_STATUS1; /*!< (read-write) Clock group low
                                      power/extend status */
    const uint32_t reserved_padding4 = {};
    uint32_t
        CLOCK_GROUP1_CONFIG; /*!< (read-write) Clock group configuration */
    uint32_t
        CLOCK_GROUP1_AUTHEN; /*!< (read-write) Clock group access control */
    uint32_t CLOCK_GROUP1_AUTHEN_SET; /*!< (read-write) Clock group access
                                         control */
    uint32_t CLOCK_GROUP1_AUTHEN_CLR; /*!< (read-write) Clock group access
                                         control */
    uint32_t CLOCK_GROUP1_AUTHEN_TOG; /*!< (read-write) Clock group access
                                         control */
    uint32_t CLOCK_GROUP1_SETPOINT0;  /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP1_SETPOINT1;  /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP1_SETPOINT2;  /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP1_SETPOINT3;  /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP1_SETPOINT4;  /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP1_SETPOINT5;  /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP1_SETPOINT6;  /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP1_SETPOINT7;  /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP1_SETPOINT8;  /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP1_SETPOINT9;  /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP1_SETPOINT10; /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP1_SETPOINT11; /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP1_SETPOINT12; /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP1_SETPOINT13; /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP1_SETPOINT14; /*!< (read-write) Setpoint setting */
    uint32_t CLOCK_GROUP1_SETPOINT15; /*!< (read-write) Setpoint setting */
    static constexpr std::size_t GPR_SHARED_length = 8;
    GPR_SHARED_instance
        GPR_SHARED[GPR_SHARED_length]; /*!< General Purpose Registers */
    static constexpr std::size_t reserved_padding5_length = 648;
    const uint32_t reserved_padding5[reserved_padding5_length] = {};
    uint32_t GPR_PRIVATE1;        /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE1_SET;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE1_CLR;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE1_TOG;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE1_AUTHEN; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE1_AUTHEN_SET; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE1_AUTHEN_CLR; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE1_AUTHEN_TOG; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE2;        /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE2_SET;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE2_CLR;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE2_TOG;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE2_AUTHEN; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE2_AUTHEN_SET; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE2_AUTHEN_CLR; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE2_AUTHEN_TOG; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE3;        /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE3_SET;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE3_CLR;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE3_TOG;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE3_AUTHEN; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE3_AUTHEN_SET; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE3_AUTHEN_CLR; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE3_AUTHEN_TOG; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE4;        /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE4_SET;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE4_CLR;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE4_TOG;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE4_AUTHEN; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE4_AUTHEN_SET; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE4_AUTHEN_CLR; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE4_AUTHEN_TOG; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE5;        /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE5_SET;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE5_CLR;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE5_TOG;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE5_AUTHEN; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE5_AUTHEN_SET; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE5_AUTHEN_CLR; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE5_AUTHEN_TOG; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE6;        /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE6_SET;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE6_CLR;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE6_TOG;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE6_AUTHEN; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE6_AUTHEN_SET; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE6_AUTHEN_CLR; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE6_AUTHEN_TOG; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE7;        /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE7_SET;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE7_CLR;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE7_TOG;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_PRIVATE7_AUTHEN; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE7_AUTHEN_SET; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE7_AUTHEN_CLR; /*!< (read-write) GPR access control */
    uint32_t GPR_PRIVATE7_AUTHEN_TOG; /*!< (read-write) GPR access control */
    static constexpr std::size_t OSCPLL_length = 29;
    OSCPLL_instance
        OSCPLL[OSCPLL_length]; /*!< Clock source select Registers */
    static constexpr std::size_t reserved_padding6_length = 984;
    const uint32_t reserved_padding6[reserved_padding6_length] = {};
    uint32_t LPCG0_DIRECT; /*!< (read-write) LPCG direct control */
    uint32_t LPCG0_DOMAIN; /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding7_length = 2;
    const uint32_t reserved_padding7[reserved_padding7_length] = {};
    uint32_t LPCG0_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG0_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG0_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG0_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG1_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG1_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding8_length = 2;
    const uint32_t reserved_padding8[reserved_padding8_length] = {};
    uint32_t LPCG1_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG1_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG1_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG1_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG2_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG2_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG2_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding9 = {};
    uint32_t LPCG2_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG2_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG2_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG2_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG3_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG3_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG3_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding10 = {};
    uint32_t LPCG3_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG3_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG3_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG3_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG4_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG4_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG4_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding11 = {};
    uint32_t LPCG4_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG4_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG4_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG4_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG5_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG5_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG5_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding12 = {};
    uint32_t LPCG5_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG5_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG5_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG5_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG6_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG6_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG6_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding13 = {};
    uint32_t LPCG6_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG6_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG6_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG6_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG7_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG7_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG7_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding14 = {};
    uint32_t LPCG7_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG7_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG7_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG7_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG8_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG8_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG8_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding15 = {};
    uint32_t LPCG8_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG8_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG8_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG8_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG9_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG9_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG9_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding16 = {};
    uint32_t LPCG9_STATUS0;   /*!< (read-write) LPCG working status */
    uint32_t LPCG9_STATUS1;   /*!< (read-write) LPCG low power status */
    uint32_t LPCG9_CONFIG;    /*!< (read-write) LPCG configuration */
    uint32_t LPCG9_AUTHEN;    /*!< (read-write) LPCG access control */
    uint32_t LPCG10_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG10_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG10_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding17 = {};
    uint32_t LPCG10_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG10_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG10_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG10_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG11_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG11_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG11_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding18 = {};
    uint32_t LPCG11_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG11_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG11_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG11_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG12_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG12_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG12_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding19 = {};
    uint32_t LPCG12_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG12_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG12_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG12_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG13_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG13_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding20_length = 2;
    const uint32_t reserved_padding20[reserved_padding20_length] = {};
    uint32_t LPCG13_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG13_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG13_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG13_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG14_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG14_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG14_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding21 = {};
    uint32_t LPCG14_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG14_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG14_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG14_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG15_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG15_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG15_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding22 = {};
    uint32_t LPCG15_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG15_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG15_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG15_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG16_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG16_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG16_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding23 = {};
    uint32_t LPCG16_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG16_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG16_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG16_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG17_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG17_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG17_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding24 = {};
    uint32_t LPCG17_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG17_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG17_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG17_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG18_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG18_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG18_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding25 = {};
    uint32_t LPCG18_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG18_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG18_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG18_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG19_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG19_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG19_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding26 = {};
    uint32_t LPCG19_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG19_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG19_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG19_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG20_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG20_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding27_length = 2;
    const uint32_t reserved_padding27[reserved_padding27_length] = {};
    uint32_t LPCG20_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG20_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG20_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG20_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG21_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG21_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding28_length = 2;
    const uint32_t reserved_padding28[reserved_padding28_length] = {};
    uint32_t LPCG21_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG21_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG21_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG21_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG22_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG22_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding29_length = 2;
    const uint32_t reserved_padding29[reserved_padding29_length] = {};
    uint32_t LPCG22_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG22_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG22_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG22_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG23_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG23_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding30_length = 2;
    const uint32_t reserved_padding30[reserved_padding30_length] = {};
    uint32_t LPCG23_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG23_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG23_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG23_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG24_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG24_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG24_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding31 = {};
    uint32_t LPCG24_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG24_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG24_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG24_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG25_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG25_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG25_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding32 = {};
    uint32_t LPCG25_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG25_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG25_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG25_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG26_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG26_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG26_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding33 = {};
    uint32_t LPCG26_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG26_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG26_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG26_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG27_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG27_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG27_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding34 = {};
    uint32_t LPCG27_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG27_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG27_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG27_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG28_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG28_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG28_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding35 = {};
    uint32_t LPCG28_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG28_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG28_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG28_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG29_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG29_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG29_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding36 = {};
    uint32_t LPCG29_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG29_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG29_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG29_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG30_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG30_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG30_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding37 = {};
    uint32_t LPCG30_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG30_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG30_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG30_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG31_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG31_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG31_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding38 = {};
    uint32_t LPCG31_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG31_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG31_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG31_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG32_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG32_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG32_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding39 = {};
    uint32_t LPCG32_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG32_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG32_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG32_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG33_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG33_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG33_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding40 = {};
    uint32_t LPCG33_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG33_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG33_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG33_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG34_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG34_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG34_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding41 = {};
    uint32_t LPCG34_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG34_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG34_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG34_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG35_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG35_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG35_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding42 = {};
    uint32_t LPCG35_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG35_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG35_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG35_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG36_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG36_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG36_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding43 = {};
    uint32_t LPCG36_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG36_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG36_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG36_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG37_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG37_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG37_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding44 = {};
    uint32_t LPCG37_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG37_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG37_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG37_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG38_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG38_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG38_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding45 = {};
    uint32_t LPCG38_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG38_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG38_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG38_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG39_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG39_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG39_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding46 = {};
    uint32_t LPCG39_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG39_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG39_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG39_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG40_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG40_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG40_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding47 = {};
    uint32_t LPCG40_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG40_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG40_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG40_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG41_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG41_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding48_length = 2;
    const uint32_t reserved_padding48[reserved_padding48_length] = {};
    uint32_t LPCG41_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG41_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG41_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG41_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG42_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG42_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding49_length = 2;
    const uint32_t reserved_padding49[reserved_padding49_length] = {};
    uint32_t LPCG42_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG42_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG42_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG42_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG43_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG43_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG43_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding50 = {};
    uint32_t LPCG43_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG43_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG43_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG43_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG44_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG44_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG44_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding51 = {};
    uint32_t LPCG44_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG44_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG44_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG44_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG45_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG45_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG45_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding52 = {};
    uint32_t LPCG45_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG45_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG45_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG45_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG46_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG46_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG46_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding53 = {};
    uint32_t LPCG46_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG46_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG46_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG46_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG47_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG47_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG47_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding54 = {};
    uint32_t LPCG47_STATUS0;  /*!< (read-write) LPCG working status */
    uint32_t LPCG47_STATUS1;  /*!< (read-write) LPCG low power status */
    uint32_t LPCG47_CONFIG;   /*!< (read-write) LPCG configuration */
    uint32_t LPCG47_AUTHEN;   /*!< (read-write) LPCG access control */
    uint32_t LPCG48_DIRECT;   /*!< (read-write) LPCG direct control */
    uint32_t LPCG48_DOMAIN;   /*!< (read-write) LPCG domain control */
    uint32_t LPCG48_SETPOINT; /*!< (read-write) LPCG Setpoint setting */
    const uint32_t reserved_padding55 = {};
    uint32_t LPCG48_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG48_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG48_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG48_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG49_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG49_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding56_length = 2;
    const uint32_t reserved_padding56[reserved_padding56_length] = {};
    uint32_t LPCG49_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG49_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG49_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG49_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG50_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG50_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding57_length = 2;
    const uint32_t reserved_padding57[reserved_padding57_length] = {};
    uint32_t LPCG50_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG50_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG50_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG50_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG51_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG51_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding58_length = 2;
    const uint32_t reserved_padding58[reserved_padding58_length] = {};
    uint32_t LPCG51_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG51_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG51_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG51_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG52_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG52_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding59_length = 2;
    const uint32_t reserved_padding59[reserved_padding59_length] = {};
    uint32_t LPCG52_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG52_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG52_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG52_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG53_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG53_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding60_length = 2;
    const uint32_t reserved_padding60[reserved_padding60_length] = {};
    uint32_t LPCG53_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG53_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG53_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG53_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG54_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG54_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding61_length = 2;
    const uint32_t reserved_padding61[reserved_padding61_length] = {};
    uint32_t LPCG54_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG54_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG54_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG54_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG55_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG55_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding62_length = 2;
    const uint32_t reserved_padding62[reserved_padding62_length] = {};
    uint32_t LPCG55_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG55_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG55_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG55_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG56_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG56_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding63_length = 2;
    const uint32_t reserved_padding63[reserved_padding63_length] = {};
    uint32_t LPCG56_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG56_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG56_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG56_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG57_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG57_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding64_length = 2;
    const uint32_t reserved_padding64[reserved_padding64_length] = {};
    uint32_t LPCG57_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG57_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG57_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG57_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG58_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG58_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding65_length = 2;
    const uint32_t reserved_padding65[reserved_padding65_length] = {};
    uint32_t LPCG58_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG58_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG58_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG58_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG59_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG59_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding66_length = 2;
    const uint32_t reserved_padding66[reserved_padding66_length] = {};
    uint32_t LPCG59_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG59_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG59_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG59_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG60_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG60_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding67_length = 2;
    const uint32_t reserved_padding67[reserved_padding67_length] = {};
    uint32_t LPCG60_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG60_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG60_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG60_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG61_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG61_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding68_length = 2;
    const uint32_t reserved_padding68[reserved_padding68_length] = {};
    uint32_t LPCG61_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG61_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG61_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG61_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG62_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG62_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding69_length = 2;
    const uint32_t reserved_padding69[reserved_padding69_length] = {};
    uint32_t LPCG62_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG62_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG62_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG62_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG63_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG63_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding70_length = 2;
    const uint32_t reserved_padding70[reserved_padding70_length] = {};
    uint32_t LPCG63_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG63_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG63_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG63_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG64_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG64_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding71_length = 2;
    const uint32_t reserved_padding71[reserved_padding71_length] = {};
    uint32_t LPCG64_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG64_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG64_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG64_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG65_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG65_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding72_length = 2;
    const uint32_t reserved_padding72[reserved_padding72_length] = {};
    uint32_t LPCG65_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG65_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG65_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG65_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG66_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG66_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding73_length = 2;
    const uint32_t reserved_padding73[reserved_padding73_length] = {};
    uint32_t LPCG66_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG66_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG66_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG66_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG67_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG67_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding74_length = 2;
    const uint32_t reserved_padding74[reserved_padding74_length] = {};
    uint32_t LPCG67_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG67_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG67_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG67_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG68_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG68_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding75_length = 2;
    const uint32_t reserved_padding75[reserved_padding75_length] = {};
    uint32_t LPCG68_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG68_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG68_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG68_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG69_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG69_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding76_length = 2;
    const uint32_t reserved_padding76[reserved_padding76_length] = {};
    uint32_t LPCG69_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG69_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG69_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG69_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG70_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG70_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding77_length = 2;
    const uint32_t reserved_padding77[reserved_padding77_length] = {};
    uint32_t LPCG70_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG70_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG70_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG70_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG71_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG71_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding78_length = 2;
    const uint32_t reserved_padding78[reserved_padding78_length] = {};
    uint32_t LPCG71_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG71_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG71_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG71_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG72_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG72_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding79_length = 2;
    const uint32_t reserved_padding79[reserved_padding79_length] = {};
    uint32_t LPCG72_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG72_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG72_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG72_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG73_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG73_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding80_length = 2;
    const uint32_t reserved_padding80[reserved_padding80_length] = {};
    uint32_t LPCG73_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG73_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG73_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG73_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG74_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG74_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding81_length = 2;
    const uint32_t reserved_padding81[reserved_padding81_length] = {};
    uint32_t LPCG74_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG74_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG74_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG74_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG75_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG75_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding82_length = 2;
    const uint32_t reserved_padding82[reserved_padding82_length] = {};
    uint32_t LPCG75_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG75_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG75_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG75_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG76_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG76_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding83_length = 2;
    const uint32_t reserved_padding83[reserved_padding83_length] = {};
    uint32_t LPCG76_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG76_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG76_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG76_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG77_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG77_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding84_length = 2;
    const uint32_t reserved_padding84[reserved_padding84_length] = {};
    uint32_t LPCG77_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG77_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG77_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG77_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG78_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG78_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding85_length = 2;
    const uint32_t reserved_padding85[reserved_padding85_length] = {};
    uint32_t LPCG78_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG78_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG78_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG78_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG79_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG79_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding86_length = 2;
    const uint32_t reserved_padding86[reserved_padding86_length] = {};
    uint32_t LPCG79_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG79_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG79_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG79_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG80_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG80_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding87_length = 2;
    const uint32_t reserved_padding87[reserved_padding87_length] = {};
    uint32_t LPCG80_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG80_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG80_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG80_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG81_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG81_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding88_length = 2;
    const uint32_t reserved_padding88[reserved_padding88_length] = {};
    uint32_t LPCG81_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG81_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG81_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG81_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG82_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG82_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding89_length = 2;
    const uint32_t reserved_padding89[reserved_padding89_length] = {};
    uint32_t LPCG82_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG82_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG82_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG82_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG83_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG83_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding90_length = 2;
    const uint32_t reserved_padding90[reserved_padding90_length] = {};
    uint32_t LPCG83_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG83_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG83_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG83_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG84_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG84_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding91_length = 2;
    const uint32_t reserved_padding91[reserved_padding91_length] = {};
    uint32_t LPCG84_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG84_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG84_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG84_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG85_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG85_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding92_length = 2;
    const uint32_t reserved_padding92[reserved_padding92_length] = {};
    uint32_t LPCG85_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG85_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG85_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG85_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG86_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG86_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding93_length = 2;
    const uint32_t reserved_padding93[reserved_padding93_length] = {};
    uint32_t LPCG86_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG86_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG86_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG86_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG87_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG87_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding94_length = 2;
    const uint32_t reserved_padding94[reserved_padding94_length] = {};
    uint32_t LPCG87_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG87_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG87_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG87_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG88_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG88_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding95_length = 2;
    const uint32_t reserved_padding95[reserved_padding95_length] = {};
    uint32_t LPCG88_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG88_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG88_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG88_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG89_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG89_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding96_length = 2;
    const uint32_t reserved_padding96[reserved_padding96_length] = {};
    uint32_t LPCG89_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG89_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG89_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG89_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG90_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG90_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding97_length = 2;
    const uint32_t reserved_padding97[reserved_padding97_length] = {};
    uint32_t LPCG90_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG90_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG90_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG90_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG91_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG91_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding98_length = 2;
    const uint32_t reserved_padding98[reserved_padding98_length] = {};
    uint32_t LPCG91_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG91_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG91_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG91_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG92_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG92_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding99_length = 2;
    const uint32_t reserved_padding99[reserved_padding99_length] = {};
    uint32_t LPCG92_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG92_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG92_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG92_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG93_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG93_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding100_length = 2;
    const uint32_t reserved_padding100[reserved_padding100_length] = {};
    uint32_t LPCG93_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG93_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG93_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG93_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG94_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG94_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding101_length = 2;
    const uint32_t reserved_padding101[reserved_padding101_length] = {};
    uint32_t LPCG94_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG94_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG94_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG94_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG95_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG95_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding102_length = 2;
    const uint32_t reserved_padding102[reserved_padding102_length] = {};
    uint32_t LPCG95_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG95_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG95_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG95_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG96_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG96_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding103_length = 2;
    const uint32_t reserved_padding103[reserved_padding103_length] = {};
    uint32_t LPCG96_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG96_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG96_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG96_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG97_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG97_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding104_length = 2;
    const uint32_t reserved_padding104[reserved_padding104_length] = {};
    uint32_t LPCG97_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG97_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG97_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG97_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG98_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG98_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding105_length = 2;
    const uint32_t reserved_padding105[reserved_padding105_length] = {};
    uint32_t LPCG98_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG98_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG98_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG98_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG99_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG99_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding106_length = 2;
    const uint32_t reserved_padding106[reserved_padding106_length] = {};
    uint32_t LPCG99_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG99_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG99_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG99_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG100_DIRECT; /*!< (read-write) LPCG direct control */
    uint32_t LPCG100_DOMAIN; /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding107_length = 2;
    const uint32_t reserved_padding107[reserved_padding107_length] = {};
    uint32_t LPCG100_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG100_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG100_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG100_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG101_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG101_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding108_length = 2;
    const uint32_t reserved_padding108[reserved_padding108_length] = {};
    uint32_t LPCG101_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG101_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG101_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG101_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG102_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG102_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding109_length = 2;
    const uint32_t reserved_padding109[reserved_padding109_length] = {};
    uint32_t LPCG102_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG102_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG102_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG102_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG103_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG103_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding110_length = 2;
    const uint32_t reserved_padding110[reserved_padding110_length] = {};
    uint32_t LPCG103_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG103_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG103_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG103_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG104_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG104_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding111_length = 2;
    const uint32_t reserved_padding111[reserved_padding111_length] = {};
    uint32_t LPCG104_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG104_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG104_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG104_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG105_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG105_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding112_length = 2;
    const uint32_t reserved_padding112[reserved_padding112_length] = {};
    uint32_t LPCG105_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG105_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG105_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG105_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG106_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG106_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding113_length = 2;
    const uint32_t reserved_padding113[reserved_padding113_length] = {};
    uint32_t LPCG106_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG106_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG106_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG106_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG107_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG107_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding114_length = 2;
    const uint32_t reserved_padding114[reserved_padding114_length] = {};
    uint32_t LPCG107_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG107_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG107_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG107_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG108_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG108_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding115_length = 2;
    const uint32_t reserved_padding115[reserved_padding115_length] = {};
    uint32_t LPCG108_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG108_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG108_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG108_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG109_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG109_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding116_length = 2;
    const uint32_t reserved_padding116[reserved_padding116_length] = {};
    uint32_t LPCG109_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG109_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG109_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG109_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG110_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG110_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding117_length = 2;
    const uint32_t reserved_padding117[reserved_padding117_length] = {};
    uint32_t LPCG110_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG110_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG110_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG110_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG111_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG111_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding118_length = 2;
    const uint32_t reserved_padding118[reserved_padding118_length] = {};
    uint32_t LPCG111_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG111_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG111_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG111_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG112_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG112_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding119_length = 2;
    const uint32_t reserved_padding119[reserved_padding119_length] = {};
    uint32_t LPCG112_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG112_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG112_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG112_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG113_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG113_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding120_length = 2;
    const uint32_t reserved_padding120[reserved_padding120_length] = {};
    uint32_t LPCG113_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG113_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG113_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG113_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG114_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG114_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding121_length = 2;
    const uint32_t reserved_padding121[reserved_padding121_length] = {};
    uint32_t LPCG114_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG114_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG114_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG114_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG115_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG115_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding122_length = 2;
    const uint32_t reserved_padding122[reserved_padding122_length] = {};
    uint32_t LPCG115_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG115_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG115_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG115_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG116_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG116_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding123_length = 2;
    const uint32_t reserved_padding123[reserved_padding123_length] = {};
    uint32_t LPCG116_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG116_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG116_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG116_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG117_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG117_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding124_length = 2;
    const uint32_t reserved_padding124[reserved_padding124_length] = {};
    uint32_t LPCG117_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG117_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG117_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG117_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG118_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG118_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding125_length = 2;
    const uint32_t reserved_padding125[reserved_padding125_length] = {};
    uint32_t LPCG118_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG118_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG118_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG118_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG119_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG119_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding126_length = 2;
    const uint32_t reserved_padding126[reserved_padding126_length] = {};
    uint32_t LPCG119_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG119_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG119_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG119_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG120_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG120_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding127_length = 2;
    const uint32_t reserved_padding127[reserved_padding127_length] = {};
    uint32_t LPCG120_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG120_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG120_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG120_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG121_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG121_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding128_length = 2;
    const uint32_t reserved_padding128[reserved_padding128_length] = {};
    uint32_t LPCG121_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG121_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG121_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG121_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG122_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG122_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding129_length = 2;
    const uint32_t reserved_padding129[reserved_padding129_length] = {};
    uint32_t LPCG122_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG122_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG122_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG122_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG123_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG123_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding130_length = 2;
    const uint32_t reserved_padding130[reserved_padding130_length] = {};
    uint32_t LPCG123_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG123_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG123_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG123_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG124_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG124_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding131_length = 2;
    const uint32_t reserved_padding131[reserved_padding131_length] = {};
    uint32_t LPCG124_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG124_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG124_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG124_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG125_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG125_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding132_length = 2;
    const uint32_t reserved_padding132[reserved_padding132_length] = {};
    uint32_t LPCG125_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG125_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG125_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG125_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG126_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG126_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding133_length = 2;
    const uint32_t reserved_padding133[reserved_padding133_length] = {};
    uint32_t LPCG126_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG126_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG126_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG126_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG127_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG127_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding134_length = 2;
    const uint32_t reserved_padding134[reserved_padding134_length] = {};
    uint32_t LPCG127_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG127_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG127_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG127_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG128_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG128_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding135_length = 2;
    const uint32_t reserved_padding135[reserved_padding135_length] = {};
    uint32_t LPCG128_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG128_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG128_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG128_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG129_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG129_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding136_length = 2;
    const uint32_t reserved_padding136[reserved_padding136_length] = {};
    uint32_t LPCG129_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG129_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG129_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG129_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG130_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG130_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding137_length = 2;
    const uint32_t reserved_padding137[reserved_padding137_length] = {};
    uint32_t LPCG130_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG130_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG130_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG130_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG131_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG131_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding138_length = 2;
    const uint32_t reserved_padding138[reserved_padding138_length] = {};
    uint32_t LPCG131_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG131_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG131_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG131_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG132_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG132_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding139_length = 2;
    const uint32_t reserved_padding139[reserved_padding139_length] = {};
    uint32_t LPCG132_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG132_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG132_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG132_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG133_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG133_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding140_length = 2;
    const uint32_t reserved_padding140[reserved_padding140_length] = {};
    uint32_t LPCG133_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG133_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG133_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG133_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG134_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG134_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding141_length = 2;
    const uint32_t reserved_padding141[reserved_padding141_length] = {};
    uint32_t LPCG134_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG134_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG134_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG134_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG135_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG135_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding142_length = 2;
    const uint32_t reserved_padding142[reserved_padding142_length] = {};
    uint32_t LPCG135_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG135_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG135_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG135_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG136_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG136_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding143_length = 2;
    const uint32_t reserved_padding143[reserved_padding143_length] = {};
    uint32_t LPCG136_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG136_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG136_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG136_AUTHEN;  /*!< (read-write) LPCG access control */
    uint32_t LPCG137_DIRECT;  /*!< (read-write) LPCG direct control */
    uint32_t LPCG137_DOMAIN;  /*!< (read-write) LPCG domain control */
    static constexpr std::size_t reserved_padding144_length = 2;
    const uint32_t reserved_padding144[reserved_padding144_length] = {};
    uint32_t LPCG137_STATUS0; /*!< (read-write) LPCG working status */
    uint32_t LPCG137_STATUS1; /*!< (read-write) LPCG low power status */
    uint32_t LPCG137_CONFIG;  /*!< (read-write) LPCG configuration */
    uint32_t LPCG137_AUTHEN;  /*!< (read-write) LPCG access control */

    /* Methods. */

    /**
     * Get CLOCK_GROUP0_CONTROL's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP0_CONTROL_OFF() volatile
    {
        return CLOCK_GROUP0_CONTROL & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP0_CONTROL's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP0_CONTROL_OFF() volatile
    {
        CLOCK_GROUP0_CONTROL |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP0_CONTROL's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP0_CONTROL_OFF() volatile
    {
        CLOCK_GROUP0_CONTROL &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP0_CONTROL's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP0_CONTROL_OFF() volatile
    {
        CLOCK_GROUP0_CONTROL ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP0_CONTROL's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP0_CONTROL_RSTDIV() volatile
    {
        return (CLOCK_GROUP0_CONTROL >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP0_CONTROL's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP0_CONTROL_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_CONTROL;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP0_CONTROL = curr;
    }

    /**
     * Get CLOCK_GROUP0_CONTROL's DIV0 field.
     *
     * Clock divider0
     */
    inline uint8_t get_CLOCK_GROUP0_CONTROL_DIV0() volatile
    {
        return (CLOCK_GROUP0_CONTROL >> 0u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_CONTROL's DIV0 field.
     *
     * Clock divider0
     */
    inline void set_CLOCK_GROUP0_CONTROL_DIV0(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_CONTROL;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        CLOCK_GROUP0_CONTROL = curr;
    }

    /**
     * Get all of CLOCK_GROUP0_CONTROL's bit fields.
     *
     * (read-write) Clock group control
     */
    inline void get_CLOCK_GROUP0_CONTROL(bool &OFF, uint8_t &RSTDIV,
                                         uint8_t &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_CONTROL;

        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of CLOCK_GROUP0_CONTROL's bit fields.
     *
     * (read-write) Clock group control
     */
    inline void set_CLOCK_GROUP0_CONTROL(bool OFF, uint8_t RSTDIV,
                                         uint8_t DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_CONTROL;

        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (DIV0 & 0b1111u) << 0u;

        CLOCK_GROUP0_CONTROL = curr;
    }

    /**
     * Get CLOCK_GROUP0_CONTROL_SET's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP0_CONTROL_SET_OFF() volatile
    {
        return CLOCK_GROUP0_CONTROL_SET & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP0_CONTROL_SET's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP0_CONTROL_SET_OFF() volatile
    {
        CLOCK_GROUP0_CONTROL_SET |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP0_CONTROL_SET's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP0_CONTROL_SET_OFF() volatile
    {
        CLOCK_GROUP0_CONTROL_SET &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP0_CONTROL_SET's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP0_CONTROL_SET_OFF() volatile
    {
        CLOCK_GROUP0_CONTROL_SET ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP0_CONTROL_SET's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP0_CONTROL_SET_RSTDIV() volatile
    {
        return (CLOCK_GROUP0_CONTROL_SET >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP0_CONTROL_SET's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP0_CONTROL_SET_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_CONTROL_SET;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP0_CONTROL_SET = curr;
    }

    /**
     * Get CLOCK_GROUP0_CONTROL_SET's DIV0 field.
     *
     * Clock divider0
     */
    inline uint8_t get_CLOCK_GROUP0_CONTROL_SET_DIV0() volatile
    {
        return (CLOCK_GROUP0_CONTROL_SET >> 0u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_CONTROL_SET's DIV0 field.
     *
     * Clock divider0
     */
    inline void set_CLOCK_GROUP0_CONTROL_SET_DIV0(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_CONTROL_SET;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        CLOCK_GROUP0_CONTROL_SET = curr;
    }

    /**
     * Get all of CLOCK_GROUP0_CONTROL_SET's bit fields.
     *
     * (read-write) Clock group control
     */
    inline void get_CLOCK_GROUP0_CONTROL_SET(bool &OFF, uint8_t &RSTDIV,
                                             uint8_t &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_CONTROL_SET;

        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of CLOCK_GROUP0_CONTROL_SET's bit fields.
     *
     * (read-write) Clock group control
     */
    inline void set_CLOCK_GROUP0_CONTROL_SET(bool OFF, uint8_t RSTDIV,
                                             uint8_t DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_CONTROL_SET;

        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (DIV0 & 0b1111u) << 0u;

        CLOCK_GROUP0_CONTROL_SET = curr;
    }

    /**
     * Get CLOCK_GROUP0_CONTROL_CLR's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP0_CONTROL_CLR_OFF() volatile
    {
        return CLOCK_GROUP0_CONTROL_CLR & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP0_CONTROL_CLR's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP0_CONTROL_CLR_OFF() volatile
    {
        CLOCK_GROUP0_CONTROL_CLR |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP0_CONTROL_CLR's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP0_CONTROL_CLR_OFF() volatile
    {
        CLOCK_GROUP0_CONTROL_CLR &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP0_CONTROL_CLR's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP0_CONTROL_CLR_OFF() volatile
    {
        CLOCK_GROUP0_CONTROL_CLR ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP0_CONTROL_CLR's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP0_CONTROL_CLR_RSTDIV() volatile
    {
        return (CLOCK_GROUP0_CONTROL_CLR >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP0_CONTROL_CLR's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP0_CONTROL_CLR_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_CONTROL_CLR;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP0_CONTROL_CLR = curr;
    }

    /**
     * Get CLOCK_GROUP0_CONTROL_CLR's DIV0 field.
     *
     * Clock divider0
     */
    inline uint8_t get_CLOCK_GROUP0_CONTROL_CLR_DIV0() volatile
    {
        return (CLOCK_GROUP0_CONTROL_CLR >> 0u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_CONTROL_CLR's DIV0 field.
     *
     * Clock divider0
     */
    inline void set_CLOCK_GROUP0_CONTROL_CLR_DIV0(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_CONTROL_CLR;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        CLOCK_GROUP0_CONTROL_CLR = curr;
    }

    /**
     * Get all of CLOCK_GROUP0_CONTROL_CLR's bit fields.
     *
     * (read-write) Clock group control
     */
    inline void get_CLOCK_GROUP0_CONTROL_CLR(bool &OFF, uint8_t &RSTDIV,
                                             uint8_t &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_CONTROL_CLR;

        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of CLOCK_GROUP0_CONTROL_CLR's bit fields.
     *
     * (read-write) Clock group control
     */
    inline void set_CLOCK_GROUP0_CONTROL_CLR(bool OFF, uint8_t RSTDIV,
                                             uint8_t DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_CONTROL_CLR;

        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (DIV0 & 0b1111u) << 0u;

        CLOCK_GROUP0_CONTROL_CLR = curr;
    }

    /**
     * Get CLOCK_GROUP0_CONTROL_TOG's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP0_CONTROL_TOG_OFF() volatile
    {
        return CLOCK_GROUP0_CONTROL_TOG & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP0_CONTROL_TOG's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP0_CONTROL_TOG_OFF() volatile
    {
        CLOCK_GROUP0_CONTROL_TOG |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP0_CONTROL_TOG's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP0_CONTROL_TOG_OFF() volatile
    {
        CLOCK_GROUP0_CONTROL_TOG &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP0_CONTROL_TOG's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP0_CONTROL_TOG_OFF() volatile
    {
        CLOCK_GROUP0_CONTROL_TOG ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP0_CONTROL_TOG's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP0_CONTROL_TOG_RSTDIV() volatile
    {
        return (CLOCK_GROUP0_CONTROL_TOG >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP0_CONTROL_TOG's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP0_CONTROL_TOG_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_CONTROL_TOG;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP0_CONTROL_TOG = curr;
    }

    /**
     * Get CLOCK_GROUP0_CONTROL_TOG's DIV0 field.
     *
     * Clock divider0
     */
    inline uint8_t get_CLOCK_GROUP0_CONTROL_TOG_DIV0() volatile
    {
        return (CLOCK_GROUP0_CONTROL_TOG >> 0u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_CONTROL_TOG's DIV0 field.
     *
     * Clock divider0
     */
    inline void set_CLOCK_GROUP0_CONTROL_TOG_DIV0(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_CONTROL_TOG;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        CLOCK_GROUP0_CONTROL_TOG = curr;
    }

    /**
     * Get all of CLOCK_GROUP0_CONTROL_TOG's bit fields.
     *
     * (read-write) Clock group control
     */
    inline void get_CLOCK_GROUP0_CONTROL_TOG(bool &OFF, uint8_t &RSTDIV,
                                             uint8_t &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_CONTROL_TOG;

        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of CLOCK_GROUP0_CONTROL_TOG's bit fields.
     *
     * (read-write) Clock group control
     */
    inline void set_CLOCK_GROUP0_CONTROL_TOG(bool OFF, uint8_t RSTDIV,
                                             uint8_t DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_CONTROL_TOG;

        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (DIV0 & 0b1111u) << 0u;

        CLOCK_GROUP0_CONTROL_TOG = curr;
    }

    /**
     * Get CLOCK_GROUP0_STATUS0's CHANGING bit.
     *
     * Internal updating in clock group
     */
    inline bool get_CLOCK_GROUP0_STATUS0_CHANGING() volatile
    {
        return CLOCK_GROUP0_STATUS0 & (1u << 31u);
    }

    /**
     * Get CLOCK_GROUP0_STATUS0's UPDATE_REVERSE bit.
     *
     * Internal status synchronization from clock generation logic
     */
    inline bool get_CLOCK_GROUP0_STATUS0_UPDATE_REVERSE() volatile
    {
        return CLOCK_GROUP0_STATUS0 & (1u << 30u);
    }

    /**
     * Get CLOCK_GROUP0_STATUS0's UPDATE_FORWARD bit.
     *
     * Internal status synchronization to clock generation logic
     */
    inline bool get_CLOCK_GROUP0_STATUS0_UPDATE_FORWARD() volatile
    {
        return CLOCK_GROUP0_STATUS0 & (1u << 29u);
    }

    /**
     * Get CLOCK_GROUP0_STATUS0's SLICE_BUSY bit.
     *
     * Internal updating in generation logic
     */
    inline bool get_CLOCK_GROUP0_STATUS0_SLICE_BUSY() volatile
    {
        return CLOCK_GROUP0_STATUS0 & (1u << 28u);
    }

    /**
     * Get CLOCK_GROUP0_STATUS0's POWERDOWN bit.
     *
     * Current clock root POWERDOWN setting
     */
    inline bool get_CLOCK_GROUP0_STATUS0_POWERDOWN() volatile
    {
        return CLOCK_GROUP0_STATUS0 & (1u << 27u);
    }

    /**
     * Get CLOCK_GROUP0_STATUS0's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP0_STATUS0_OFF() volatile
    {
        return CLOCK_GROUP0_STATUS0 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP0_STATUS0's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP0_STATUS0_OFF() volatile
    {
        CLOCK_GROUP0_STATUS0 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP0_STATUS0's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP0_STATUS0_OFF() volatile
    {
        CLOCK_GROUP0_STATUS0 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP0_STATUS0's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP0_STATUS0_OFF() volatile
    {
        CLOCK_GROUP0_STATUS0 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP0_STATUS0's RSTDIV field.
     *
     * Clock divider
     */
    inline uint8_t get_CLOCK_GROUP0_STATUS0_RSTDIV() volatile
    {
        return (CLOCK_GROUP0_STATUS0 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP0_STATUS0's RSTDIV field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP0_STATUS0_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_STATUS0;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP0_STATUS0 = curr;
    }

    /**
     * Get CLOCK_GROUP0_STATUS0's DIV0 field.
     *
     * Clock divider
     */
    inline uint8_t get_CLOCK_GROUP0_STATUS0_DIV0() volatile
    {
        return (CLOCK_GROUP0_STATUS0 >> 0u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_STATUS0's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP0_STATUS0_DIV0(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_STATUS0;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        CLOCK_GROUP0_STATUS0 = curr;
    }

    /**
     * Get all of CLOCK_GROUP0_STATUS0's bit fields.
     *
     * (read-write) Clock group working status
     */
    inline void get_CLOCK_GROUP0_STATUS0(bool &CHANGING, bool &UPDATE_REVERSE,
                                         bool &UPDATE_FORWARD,
                                         bool &SLICE_BUSY, bool &POWERDOWN,
                                         bool &OFF, uint8_t &RSTDIV,
                                         uint8_t &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_STATUS0;

        CHANGING = curr & (1u << 31u);
        UPDATE_REVERSE = curr & (1u << 30u);
        UPDATE_FORWARD = curr & (1u << 29u);
        SLICE_BUSY = curr & (1u << 28u);
        POWERDOWN = curr & (1u << 27u);
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of CLOCK_GROUP0_STATUS0's bit fields.
     *
     * (read-write) Clock group working status
     */
    inline void set_CLOCK_GROUP0_STATUS0(bool OFF, uint8_t RSTDIV,
                                         uint8_t DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_STATUS0;

        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (DIV0 & 0b1111u) << 0u;

        CLOCK_GROUP0_STATUS0 = curr;
    }

    /**
     * Get CLOCK_GROUP0_STATUS1's UP_DONE bit.
     *
     * Clock frequency increase complete
     */
    inline bool get_CLOCK_GROUP0_STATUS1_UP_DONE() volatile
    {
        return CLOCK_GROUP0_STATUS1 & (1u << 27u);
    }

    /**
     * Get CLOCK_GROUP0_STATUS1's UP_REQUEST bit.
     *
     * Clock frequency increase request
     */
    inline bool get_CLOCK_GROUP0_STATUS1_UP_REQUEST() volatile
    {
        return CLOCK_GROUP0_STATUS1 & (1u << 26u);
    }

    /**
     * Get CLOCK_GROUP0_STATUS1's DOWN_DONE bit.
     *
     * Clock frequency decrease complete
     */
    inline bool get_CLOCK_GROUP0_STATUS1_DOWN_DONE() volatile
    {
        return CLOCK_GROUP0_STATUS1 & (1u << 25u);
    }

    /**
     * Get CLOCK_GROUP0_STATUS1's DOWN_REQUEST bit.
     *
     * Clock frequency decrease request
     */
    inline bool get_CLOCK_GROUP0_STATUS1_DOWN_REQUEST() volatile
    {
        return CLOCK_GROUP0_STATUS1 & (1u << 24u);
    }

    /**
     * Get CLOCK_GROUP0_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_CLOCK_GROUP0_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (CLOCK_GROUP0_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get CLOCK_GROUP0_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_CLOCK_GROUP0_STATUS1_TARGET_SETPOINT() volatile
    {
        return (CLOCK_GROUP0_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get all of CLOCK_GROUP0_STATUS1's bit fields.
     *
     * (read-write) Clock group low power/extend status
     */
    inline void get_CLOCK_GROUP0_STATUS1(bool &UP_DONE, bool &UP_REQUEST,
                                         bool &DOWN_DONE, bool &DOWN_REQUEST,
                                         uint8_t &CURRENT_SETPOINT,
                                         uint8_t &TARGET_SETPOINT) volatile
    {
        uint32_t curr = CLOCK_GROUP0_STATUS1;

        UP_DONE = curr & (1u << 27u);
        UP_REQUEST = curr & (1u << 26u);
        DOWN_DONE = curr & (1u << 25u);
        DOWN_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
    }

    /**
     * Get CLOCK_GROUP0_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_CLOCK_GROUP0_CONFIG_SETPOINT_PRESENT() volatile
    {
        return CLOCK_GROUP0_CONFIG & (1u << 4u);
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_LOCK_MODE() volatile
    {
        return CLOCK_GROUP0_AUTHEN & (1u << 20u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_CLOCK_GROUP0_AUTHEN_LOCK_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_LOCK_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_LOCK_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_SETPOINT_MODE() volatile
    {
        return CLOCK_GROUP0_AUTHEN & (1u << 17u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_CLOCK_GROUP0_AUTHEN_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_DOMAIN_MODE() volatile
    {
        return CLOCK_GROUP0_AUTHEN & (1u << 16u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_CLOCK_GROUP0_AUTHEN_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_LOCK_LIST() volatile
    {
        return CLOCK_GROUP0_AUTHEN & (1u << 12u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_CLOCK_GROUP0_AUTHEN_LOCK_LIST() volatile
    {
        CLOCK_GROUP0_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_LOCK_LIST() volatile
    {
        CLOCK_GROUP0_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_LOCK_LIST() volatile
    {
        CLOCK_GROUP0_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_CLOCK_GROUP0_AUTHEN_WHITE_LIST() volatile
    {
        return (CLOCK_GROUP0_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_CLOCK_GROUP0_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        CLOCK_GROUP0_AUTHEN = curr;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_LOCK_TZ() volatile
    {
        return CLOCK_GROUP0_AUTHEN & (1u << 4u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_CLOCK_GROUP0_AUTHEN_LOCK_TZ() volatile
    {
        CLOCK_GROUP0_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_LOCK_TZ() volatile
    {
        CLOCK_GROUP0_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_LOCK_TZ() volatile
    {
        CLOCK_GROUP0_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_TZ_NS() volatile
    {
        return CLOCK_GROUP0_AUTHEN & (1u << 1u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_CLOCK_GROUP0_AUTHEN_TZ_NS() volatile
    {
        CLOCK_GROUP0_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_TZ_NS() volatile
    {
        CLOCK_GROUP0_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_TZ_NS() volatile
    {
        CLOCK_GROUP0_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_TZ_USER() volatile
    {
        return CLOCK_GROUP0_AUTHEN & (1u << 0u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_CLOCK_GROUP0_AUTHEN_TZ_USER() volatile
    {
        CLOCK_GROUP0_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_TZ_USER() volatile
    {
        CLOCK_GROUP0_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_TZ_USER() volatile
    {
        CLOCK_GROUP0_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of CLOCK_GROUP0_AUTHEN's bit fields.
     *
     * (read-write) Clock group access control
     */
    inline void get_CLOCK_GROUP0_AUTHEN(bool &LOCK_MODE, bool &SETPOINT_MODE,
                                        bool &DOMAIN_MODE, bool &LOCK_LIST,
                                        uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                        bool &TZ_NS, bool &TZ_USER) volatile
    {
        uint32_t curr = CLOCK_GROUP0_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of CLOCK_GROUP0_AUTHEN's bit fields.
     *
     * (read-write) Clock group access control
     */
    inline void set_CLOCK_GROUP0_AUTHEN(bool LOCK_MODE, bool SETPOINT_MODE,
                                        bool DOMAIN_MODE, bool LOCK_LIST,
                                        uint8_t WHITE_LIST, bool LOCK_TZ,
                                        bool TZ_NS, bool TZ_USER) volatile
    {
        uint32_t curr = CLOCK_GROUP0_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        CLOCK_GROUP0_AUTHEN = curr;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_SET_LOCK_MODE() volatile
    {
        return CLOCK_GROUP0_AUTHEN_SET & (1u << 20u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_CLOCK_GROUP0_AUTHEN_SET_LOCK_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_SET |= 1u << 20u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_SET_LOCK_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_SET &= ~(1u << 20u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_SET_LOCK_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_SET ^= 1u << 20u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_SET's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_SET_SETPOINT_MODE() volatile
    {
        return CLOCK_GROUP0_AUTHEN_SET & (1u << 17u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_SET's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_CLOCK_GROUP0_AUTHEN_SET_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_SET |= 1u << 17u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN_SET's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_SET_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_SET &= ~(1u << 17u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN_SET's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_SET_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_SET ^= 1u << 17u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        return CLOCK_GROUP0_AUTHEN_SET & (1u << 16u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_CLOCK_GROUP0_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_SET |= 1u << 16u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_SET &= ~(1u << 16u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_SET ^= 1u << 16u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_SET_LOCK_LIST() volatile
    {
        return CLOCK_GROUP0_AUTHEN_SET & (1u << 12u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_CLOCK_GROUP0_AUTHEN_SET_LOCK_LIST() volatile
    {
        CLOCK_GROUP0_AUTHEN_SET |= 1u << 12u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_SET_LOCK_LIST() volatile
    {
        CLOCK_GROUP0_AUTHEN_SET &= ~(1u << 12u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_SET_LOCK_LIST() volatile
    {
        CLOCK_GROUP0_AUTHEN_SET ^= 1u << 12u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_SET's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_CLOCK_GROUP0_AUTHEN_SET_WHITE_LIST() volatile
    {
        return (CLOCK_GROUP0_AUTHEN_SET >> 8u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_SET's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_CLOCK_GROUP0_AUTHEN_SET_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_AUTHEN_SET;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        CLOCK_GROUP0_AUTHEN_SET = curr;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_SET_LOCK_TZ() volatile
    {
        return CLOCK_GROUP0_AUTHEN_SET & (1u << 4u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_CLOCK_GROUP0_AUTHEN_SET_LOCK_TZ() volatile
    {
        CLOCK_GROUP0_AUTHEN_SET |= 1u << 4u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_SET_LOCK_TZ() volatile
    {
        CLOCK_GROUP0_AUTHEN_SET &= ~(1u << 4u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_SET_LOCK_TZ() volatile
    {
        CLOCK_GROUP0_AUTHEN_SET ^= 1u << 4u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_SET_TZ_NS() volatile
    {
        return CLOCK_GROUP0_AUTHEN_SET & (1u << 1u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_CLOCK_GROUP0_AUTHEN_SET_TZ_NS() volatile
    {
        CLOCK_GROUP0_AUTHEN_SET |= 1u << 1u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_SET_TZ_NS() volatile
    {
        CLOCK_GROUP0_AUTHEN_SET &= ~(1u << 1u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_SET_TZ_NS() volatile
    {
        CLOCK_GROUP0_AUTHEN_SET ^= 1u << 1u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_SET_TZ_USER() volatile
    {
        return CLOCK_GROUP0_AUTHEN_SET & (1u << 0u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void set_CLOCK_GROUP0_AUTHEN_SET_TZ_USER() volatile
    {
        CLOCK_GROUP0_AUTHEN_SET |= 1u << 0u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_SET_TZ_USER() volatile
    {
        CLOCK_GROUP0_AUTHEN_SET &= ~(1u << 0u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_SET_TZ_USER() volatile
    {
        CLOCK_GROUP0_AUTHEN_SET ^= 1u << 0u;
    }

    /**
     * Get all of CLOCK_GROUP0_AUTHEN_SET's bit fields.
     *
     * (read-write) Clock group access control
     */
    inline void get_CLOCK_GROUP0_AUTHEN_SET(bool &LOCK_MODE,
                                            bool &SETPOINT_MODE,
                                            bool &DOMAIN_MODE, bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = CLOCK_GROUP0_AUTHEN_SET;

        LOCK_MODE = curr & (1u << 20u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of CLOCK_GROUP0_AUTHEN_SET's bit fields.
     *
     * (read-write) Clock group access control
     */
    inline void set_CLOCK_GROUP0_AUTHEN_SET(bool LOCK_MODE, bool SETPOINT_MODE,
                                            bool DOMAIN_MODE, bool LOCK_LIST,
                                            uint8_t WHITE_LIST, bool LOCK_TZ,
                                            bool TZ_NS, bool TZ_USER) volatile
    {
        uint32_t curr = CLOCK_GROUP0_AUTHEN_SET;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        CLOCK_GROUP0_AUTHEN_SET = curr;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_CLR_LOCK_MODE() volatile
    {
        return CLOCK_GROUP0_AUTHEN_CLR & (1u << 20u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_CLOCK_GROUP0_AUTHEN_CLR_LOCK_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_CLR |= 1u << 20u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_CLR_LOCK_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_CLR &= ~(1u << 20u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_CLR_LOCK_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_CLR ^= 1u << 20u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_CLR's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_CLR_SETPOINT_MODE() volatile
    {
        return CLOCK_GROUP0_AUTHEN_CLR & (1u << 17u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_CLR's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_CLOCK_GROUP0_AUTHEN_CLR_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_CLR |= 1u << 17u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN_CLR's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_CLR_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_CLR &= ~(1u << 17u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN_CLR's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_CLR_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_CLR ^= 1u << 17u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        return CLOCK_GROUP0_AUTHEN_CLR & (1u << 16u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_CLOCK_GROUP0_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_CLR |= 1u << 16u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_CLR &= ~(1u << 16u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_CLR ^= 1u << 16u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_CLR_LOCK_LIST() volatile
    {
        return CLOCK_GROUP0_AUTHEN_CLR & (1u << 12u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_CLOCK_GROUP0_AUTHEN_CLR_LOCK_LIST() volatile
    {
        CLOCK_GROUP0_AUTHEN_CLR |= 1u << 12u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_CLR_LOCK_LIST() volatile
    {
        CLOCK_GROUP0_AUTHEN_CLR &= ~(1u << 12u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_CLR_LOCK_LIST() volatile
    {
        CLOCK_GROUP0_AUTHEN_CLR ^= 1u << 12u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_CLR's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_CLOCK_GROUP0_AUTHEN_CLR_WHITE_LIST() volatile
    {
        return (CLOCK_GROUP0_AUTHEN_CLR >> 8u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_CLR's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_CLOCK_GROUP0_AUTHEN_CLR_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_AUTHEN_CLR;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        CLOCK_GROUP0_AUTHEN_CLR = curr;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_CLR_LOCK_TZ() volatile
    {
        return CLOCK_GROUP0_AUTHEN_CLR & (1u << 4u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_CLOCK_GROUP0_AUTHEN_CLR_LOCK_TZ() volatile
    {
        CLOCK_GROUP0_AUTHEN_CLR |= 1u << 4u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_CLR_LOCK_TZ() volatile
    {
        CLOCK_GROUP0_AUTHEN_CLR &= ~(1u << 4u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_CLR_LOCK_TZ() volatile
    {
        CLOCK_GROUP0_AUTHEN_CLR ^= 1u << 4u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_CLR_TZ_NS() volatile
    {
        return CLOCK_GROUP0_AUTHEN_CLR & (1u << 1u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_CLOCK_GROUP0_AUTHEN_CLR_TZ_NS() volatile
    {
        CLOCK_GROUP0_AUTHEN_CLR |= 1u << 1u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_CLR_TZ_NS() volatile
    {
        CLOCK_GROUP0_AUTHEN_CLR &= ~(1u << 1u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_CLR_TZ_NS() volatile
    {
        CLOCK_GROUP0_AUTHEN_CLR ^= 1u << 1u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_CLR_TZ_USER() volatile
    {
        return CLOCK_GROUP0_AUTHEN_CLR & (1u << 0u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void set_CLOCK_GROUP0_AUTHEN_CLR_TZ_USER() volatile
    {
        CLOCK_GROUP0_AUTHEN_CLR |= 1u << 0u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_CLR_TZ_USER() volatile
    {
        CLOCK_GROUP0_AUTHEN_CLR &= ~(1u << 0u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_CLR_TZ_USER() volatile
    {
        CLOCK_GROUP0_AUTHEN_CLR ^= 1u << 0u;
    }

    /**
     * Get all of CLOCK_GROUP0_AUTHEN_CLR's bit fields.
     *
     * (read-write) Clock group access control
     */
    inline void get_CLOCK_GROUP0_AUTHEN_CLR(bool &LOCK_MODE,
                                            bool &SETPOINT_MODE,
                                            bool &DOMAIN_MODE, bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = CLOCK_GROUP0_AUTHEN_CLR;

        LOCK_MODE = curr & (1u << 20u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of CLOCK_GROUP0_AUTHEN_CLR's bit fields.
     *
     * (read-write) Clock group access control
     */
    inline void set_CLOCK_GROUP0_AUTHEN_CLR(bool LOCK_MODE, bool SETPOINT_MODE,
                                            bool DOMAIN_MODE, bool LOCK_LIST,
                                            uint8_t WHITE_LIST, bool LOCK_TZ,
                                            bool TZ_NS, bool TZ_USER) volatile
    {
        uint32_t curr = CLOCK_GROUP0_AUTHEN_CLR;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        CLOCK_GROUP0_AUTHEN_CLR = curr;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_TOG_LOCK_MODE() volatile
    {
        return CLOCK_GROUP0_AUTHEN_TOG & (1u << 20u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_CLOCK_GROUP0_AUTHEN_TOG_LOCK_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_TOG |= 1u << 20u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_TOG_LOCK_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_TOG &= ~(1u << 20u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_TOG_LOCK_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_TOG ^= 1u << 20u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_TOG's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_TOG_SETPOINT_MODE() volatile
    {
        return CLOCK_GROUP0_AUTHEN_TOG & (1u << 17u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_TOG's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_CLOCK_GROUP0_AUTHEN_TOG_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_TOG |= 1u << 17u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN_TOG's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_TOG_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_TOG &= ~(1u << 17u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN_TOG's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_TOG_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_TOG ^= 1u << 17u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        return CLOCK_GROUP0_AUTHEN_TOG & (1u << 16u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_CLOCK_GROUP0_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_TOG |= 1u << 16u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_TOG &= ~(1u << 16u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP0_AUTHEN_TOG ^= 1u << 16u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_TOG_LOCK_LIST() volatile
    {
        return CLOCK_GROUP0_AUTHEN_TOG & (1u << 12u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_CLOCK_GROUP0_AUTHEN_TOG_LOCK_LIST() volatile
    {
        CLOCK_GROUP0_AUTHEN_TOG |= 1u << 12u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_TOG_LOCK_LIST() volatile
    {
        CLOCK_GROUP0_AUTHEN_TOG &= ~(1u << 12u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_TOG_LOCK_LIST() volatile
    {
        CLOCK_GROUP0_AUTHEN_TOG ^= 1u << 12u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_TOG's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_CLOCK_GROUP0_AUTHEN_TOG_WHITE_LIST() volatile
    {
        return (CLOCK_GROUP0_AUTHEN_TOG >> 8u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_TOG's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_CLOCK_GROUP0_AUTHEN_TOG_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_AUTHEN_TOG;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        CLOCK_GROUP0_AUTHEN_TOG = curr;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_TOG_LOCK_TZ() volatile
    {
        return CLOCK_GROUP0_AUTHEN_TOG & (1u << 4u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_CLOCK_GROUP0_AUTHEN_TOG_LOCK_TZ() volatile
    {
        CLOCK_GROUP0_AUTHEN_TOG |= 1u << 4u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_TOG_LOCK_TZ() volatile
    {
        CLOCK_GROUP0_AUTHEN_TOG &= ~(1u << 4u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_TOG_LOCK_TZ() volatile
    {
        CLOCK_GROUP0_AUTHEN_TOG ^= 1u << 4u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_TOG_TZ_NS() volatile
    {
        return CLOCK_GROUP0_AUTHEN_TOG & (1u << 1u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_CLOCK_GROUP0_AUTHEN_TOG_TZ_NS() volatile
    {
        CLOCK_GROUP0_AUTHEN_TOG |= 1u << 1u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_TOG_TZ_NS() volatile
    {
        CLOCK_GROUP0_AUTHEN_TOG &= ~(1u << 1u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_TOG_TZ_NS() volatile
    {
        CLOCK_GROUP0_AUTHEN_TOG ^= 1u << 1u;
    }

    /**
     * Get CLOCK_GROUP0_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline bool get_CLOCK_GROUP0_AUTHEN_TOG_TZ_USER() volatile
    {
        return CLOCK_GROUP0_AUTHEN_TOG & (1u << 0u);
    }

    /**
     * Set CLOCK_GROUP0_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void set_CLOCK_GROUP0_AUTHEN_TOG_TZ_USER() volatile
    {
        CLOCK_GROUP0_AUTHEN_TOG |= 1u << 0u;
    }

    /**
     * Clear CLOCK_GROUP0_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void clear_CLOCK_GROUP0_AUTHEN_TOG_TZ_USER() volatile
    {
        CLOCK_GROUP0_AUTHEN_TOG &= ~(1u << 0u);
    }

    /**
     * Toggle CLOCK_GROUP0_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_CLOCK_GROUP0_AUTHEN_TOG_TZ_USER() volatile
    {
        CLOCK_GROUP0_AUTHEN_TOG ^= 1u << 0u;
    }

    /**
     * Get all of CLOCK_GROUP0_AUTHEN_TOG's bit fields.
     *
     * (read-write) Clock group access control
     */
    inline void get_CLOCK_GROUP0_AUTHEN_TOG(bool &LOCK_MODE,
                                            bool &SETPOINT_MODE,
                                            bool &DOMAIN_MODE, bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = CLOCK_GROUP0_AUTHEN_TOG;

        LOCK_MODE = curr & (1u << 20u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of CLOCK_GROUP0_AUTHEN_TOG's bit fields.
     *
     * (read-write) Clock group access control
     */
    inline void set_CLOCK_GROUP0_AUTHEN_TOG(bool LOCK_MODE, bool SETPOINT_MODE,
                                            bool DOMAIN_MODE, bool LOCK_LIST,
                                            uint8_t WHITE_LIST, bool LOCK_TZ,
                                            bool TZ_NS, bool TZ_USER) volatile
    {
        uint32_t curr = CLOCK_GROUP0_AUTHEN_TOG;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        CLOCK_GROUP0_AUTHEN_TOG = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT0's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT0_GRADE() volatile
    {
        return (CLOCK_GROUP0_SETPOINT0 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT0's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP0_SETPOINT0_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT0;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP0_SETPOINT0 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT0's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP0_SETPOINT0_OFF() volatile
    {
        return CLOCK_GROUP0_SETPOINT0 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT0's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP0_SETPOINT0_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT0 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP0_SETPOINT0's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP0_SETPOINT0_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT0 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP0_SETPOINT0's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP0_SETPOINT0_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT0 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT0's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT0_RSTDIV() volatile
    {
        return (CLOCK_GROUP0_SETPOINT0 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT0's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP0_SETPOINT0_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT0;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP0_SETPOINT0 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT0's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP0_SETPOINT0_DIV0
    get_CLOCK_GROUP0_SETPOINT0_DIV0() volatile
    {
        return CCM_CLOCK_GROUP0_SETPOINT0_DIV0((CLOCK_GROUP0_SETPOINT0 >> 0u) &
                                               0b1111u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT0's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP0_SETPOINT0_DIV0(
        CCM_CLOCK_GROUP0_SETPOINT0_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT0;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT0 = curr;
    }

    /**
     * Get all of CLOCK_GROUP0_SETPOINT0's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP0_SETPOINT0(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT0_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT0;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP0_SETPOINT0_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP0_SETPOINT0's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP0_SETPOINT0(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT0_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT0;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT0 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT1's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT1_GRADE() volatile
    {
        return (CLOCK_GROUP0_SETPOINT1 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT1's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP0_SETPOINT1_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT1;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP0_SETPOINT1 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT1's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP0_SETPOINT1_OFF() volatile
    {
        return CLOCK_GROUP0_SETPOINT1 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT1's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP0_SETPOINT1_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT1 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP0_SETPOINT1's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP0_SETPOINT1_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT1 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP0_SETPOINT1's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP0_SETPOINT1_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT1 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT1's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT1_RSTDIV() volatile
    {
        return (CLOCK_GROUP0_SETPOINT1 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT1's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP0_SETPOINT1_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT1;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP0_SETPOINT1 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT1's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP0_SETPOINT1_DIV0
    get_CLOCK_GROUP0_SETPOINT1_DIV0() volatile
    {
        return CCM_CLOCK_GROUP0_SETPOINT1_DIV0((CLOCK_GROUP0_SETPOINT1 >> 0u) &
                                               0b1111u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT1's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP0_SETPOINT1_DIV0(
        CCM_CLOCK_GROUP0_SETPOINT1_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT1;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT1 = curr;
    }

    /**
     * Get all of CLOCK_GROUP0_SETPOINT1's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP0_SETPOINT1(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT1_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT1;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP0_SETPOINT1_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP0_SETPOINT1's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP0_SETPOINT1(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT1_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT1;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT1 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT2's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT2_GRADE() volatile
    {
        return (CLOCK_GROUP0_SETPOINT2 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT2's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP0_SETPOINT2_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT2;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP0_SETPOINT2 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT2's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP0_SETPOINT2_OFF() volatile
    {
        return CLOCK_GROUP0_SETPOINT2 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT2's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP0_SETPOINT2_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT2 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP0_SETPOINT2's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP0_SETPOINT2_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT2 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP0_SETPOINT2's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP0_SETPOINT2_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT2 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT2's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT2_RSTDIV() volatile
    {
        return (CLOCK_GROUP0_SETPOINT2 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT2's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP0_SETPOINT2_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT2;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP0_SETPOINT2 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT2's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP0_SETPOINT2_DIV0
    get_CLOCK_GROUP0_SETPOINT2_DIV0() volatile
    {
        return CCM_CLOCK_GROUP0_SETPOINT2_DIV0((CLOCK_GROUP0_SETPOINT2 >> 0u) &
                                               0b1111u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT2's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP0_SETPOINT2_DIV0(
        CCM_CLOCK_GROUP0_SETPOINT2_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT2;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT2 = curr;
    }

    /**
     * Get all of CLOCK_GROUP0_SETPOINT2's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP0_SETPOINT2(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT2_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT2;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP0_SETPOINT2_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP0_SETPOINT2's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP0_SETPOINT2(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT2_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT2;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT2 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT3's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT3_GRADE() volatile
    {
        return (CLOCK_GROUP0_SETPOINT3 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT3's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP0_SETPOINT3_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT3;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP0_SETPOINT3 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT3's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP0_SETPOINT3_OFF() volatile
    {
        return CLOCK_GROUP0_SETPOINT3 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT3's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP0_SETPOINT3_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT3 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP0_SETPOINT3's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP0_SETPOINT3_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT3 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP0_SETPOINT3's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP0_SETPOINT3_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT3 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT3's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT3_RSTDIV() volatile
    {
        return (CLOCK_GROUP0_SETPOINT3 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT3's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP0_SETPOINT3_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT3;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP0_SETPOINT3 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT3's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP0_SETPOINT3_DIV0
    get_CLOCK_GROUP0_SETPOINT3_DIV0() volatile
    {
        return CCM_CLOCK_GROUP0_SETPOINT3_DIV0((CLOCK_GROUP0_SETPOINT3 >> 0u) &
                                               0b1111u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT3's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP0_SETPOINT3_DIV0(
        CCM_CLOCK_GROUP0_SETPOINT3_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT3;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT3 = curr;
    }

    /**
     * Get all of CLOCK_GROUP0_SETPOINT3's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP0_SETPOINT3(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT3_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT3;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP0_SETPOINT3_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP0_SETPOINT3's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP0_SETPOINT3(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT3_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT3;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT3 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT4's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT4_GRADE() volatile
    {
        return (CLOCK_GROUP0_SETPOINT4 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT4's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP0_SETPOINT4_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT4;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP0_SETPOINT4 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT4's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP0_SETPOINT4_OFF() volatile
    {
        return CLOCK_GROUP0_SETPOINT4 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT4's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP0_SETPOINT4_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT4 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP0_SETPOINT4's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP0_SETPOINT4_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT4 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP0_SETPOINT4's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP0_SETPOINT4_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT4 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT4's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT4_RSTDIV() volatile
    {
        return (CLOCK_GROUP0_SETPOINT4 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT4's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP0_SETPOINT4_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT4;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP0_SETPOINT4 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT4's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP0_SETPOINT4_DIV0
    get_CLOCK_GROUP0_SETPOINT4_DIV0() volatile
    {
        return CCM_CLOCK_GROUP0_SETPOINT4_DIV0((CLOCK_GROUP0_SETPOINT4 >> 0u) &
                                               0b1111u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT4's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP0_SETPOINT4_DIV0(
        CCM_CLOCK_GROUP0_SETPOINT4_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT4;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT4 = curr;
    }

    /**
     * Get all of CLOCK_GROUP0_SETPOINT4's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP0_SETPOINT4(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT4_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT4;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP0_SETPOINT4_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP0_SETPOINT4's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP0_SETPOINT4(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT4_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT4;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT4 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT5's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT5_GRADE() volatile
    {
        return (CLOCK_GROUP0_SETPOINT5 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT5's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP0_SETPOINT5_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT5;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP0_SETPOINT5 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT5's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP0_SETPOINT5_OFF() volatile
    {
        return CLOCK_GROUP0_SETPOINT5 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT5's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP0_SETPOINT5_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT5 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP0_SETPOINT5's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP0_SETPOINT5_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT5 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP0_SETPOINT5's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP0_SETPOINT5_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT5 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT5's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT5_RSTDIV() volatile
    {
        return (CLOCK_GROUP0_SETPOINT5 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT5's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP0_SETPOINT5_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT5;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP0_SETPOINT5 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT5's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP0_SETPOINT5_DIV0
    get_CLOCK_GROUP0_SETPOINT5_DIV0() volatile
    {
        return CCM_CLOCK_GROUP0_SETPOINT5_DIV0((CLOCK_GROUP0_SETPOINT5 >> 0u) &
                                               0b1111u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT5's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP0_SETPOINT5_DIV0(
        CCM_CLOCK_GROUP0_SETPOINT5_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT5;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT5 = curr;
    }

    /**
     * Get all of CLOCK_GROUP0_SETPOINT5's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP0_SETPOINT5(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT5_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT5;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP0_SETPOINT5_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP0_SETPOINT5's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP0_SETPOINT5(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT5_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT5;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT5 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT6's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT6_GRADE() volatile
    {
        return (CLOCK_GROUP0_SETPOINT6 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT6's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP0_SETPOINT6_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT6;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP0_SETPOINT6 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT6's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP0_SETPOINT6_OFF() volatile
    {
        return CLOCK_GROUP0_SETPOINT6 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT6's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP0_SETPOINT6_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT6 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP0_SETPOINT6's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP0_SETPOINT6_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT6 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP0_SETPOINT6's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP0_SETPOINT6_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT6 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT6's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT6_RSTDIV() volatile
    {
        return (CLOCK_GROUP0_SETPOINT6 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT6's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP0_SETPOINT6_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT6;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP0_SETPOINT6 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT6's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP0_SETPOINT6_DIV0
    get_CLOCK_GROUP0_SETPOINT6_DIV0() volatile
    {
        return CCM_CLOCK_GROUP0_SETPOINT6_DIV0((CLOCK_GROUP0_SETPOINT6 >> 0u) &
                                               0b1111u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT6's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP0_SETPOINT6_DIV0(
        CCM_CLOCK_GROUP0_SETPOINT6_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT6;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT6 = curr;
    }

    /**
     * Get all of CLOCK_GROUP0_SETPOINT6's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP0_SETPOINT6(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT6_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT6;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP0_SETPOINT6_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP0_SETPOINT6's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP0_SETPOINT6(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT6_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT6;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT6 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT7's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT7_GRADE() volatile
    {
        return (CLOCK_GROUP0_SETPOINT7 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT7's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP0_SETPOINT7_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT7;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP0_SETPOINT7 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT7's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP0_SETPOINT7_OFF() volatile
    {
        return CLOCK_GROUP0_SETPOINT7 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT7's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP0_SETPOINT7_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT7 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP0_SETPOINT7's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP0_SETPOINT7_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT7 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP0_SETPOINT7's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP0_SETPOINT7_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT7 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT7's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT7_RSTDIV() volatile
    {
        return (CLOCK_GROUP0_SETPOINT7 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT7's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP0_SETPOINT7_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT7;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP0_SETPOINT7 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT7's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP0_SETPOINT7_DIV0
    get_CLOCK_GROUP0_SETPOINT7_DIV0() volatile
    {
        return CCM_CLOCK_GROUP0_SETPOINT7_DIV0((CLOCK_GROUP0_SETPOINT7 >> 0u) &
                                               0b1111u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT7's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP0_SETPOINT7_DIV0(
        CCM_CLOCK_GROUP0_SETPOINT7_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT7;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT7 = curr;
    }

    /**
     * Get all of CLOCK_GROUP0_SETPOINT7's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP0_SETPOINT7(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT7_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT7;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP0_SETPOINT7_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP0_SETPOINT7's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP0_SETPOINT7(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT7_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT7;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT7 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT8's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT8_GRADE() volatile
    {
        return (CLOCK_GROUP0_SETPOINT8 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT8's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP0_SETPOINT8_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT8;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP0_SETPOINT8 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT8's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP0_SETPOINT8_OFF() volatile
    {
        return CLOCK_GROUP0_SETPOINT8 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT8's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP0_SETPOINT8_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT8 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP0_SETPOINT8's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP0_SETPOINT8_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT8 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP0_SETPOINT8's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP0_SETPOINT8_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT8 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT8's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT8_RSTDIV() volatile
    {
        return (CLOCK_GROUP0_SETPOINT8 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT8's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP0_SETPOINT8_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT8;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP0_SETPOINT8 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT8's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP0_SETPOINT8_DIV0
    get_CLOCK_GROUP0_SETPOINT8_DIV0() volatile
    {
        return CCM_CLOCK_GROUP0_SETPOINT8_DIV0((CLOCK_GROUP0_SETPOINT8 >> 0u) &
                                               0b1111u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT8's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP0_SETPOINT8_DIV0(
        CCM_CLOCK_GROUP0_SETPOINT8_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT8;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT8 = curr;
    }

    /**
     * Get all of CLOCK_GROUP0_SETPOINT8's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP0_SETPOINT8(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT8_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT8;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP0_SETPOINT8_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP0_SETPOINT8's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP0_SETPOINT8(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT8_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT8;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT8 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT9's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT9_GRADE() volatile
    {
        return (CLOCK_GROUP0_SETPOINT9 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT9's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP0_SETPOINT9_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT9;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP0_SETPOINT9 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT9's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP0_SETPOINT9_OFF() volatile
    {
        return CLOCK_GROUP0_SETPOINT9 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT9's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP0_SETPOINT9_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT9 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP0_SETPOINT9's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP0_SETPOINT9_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT9 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP0_SETPOINT9's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP0_SETPOINT9_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT9 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT9's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT9_RSTDIV() volatile
    {
        return (CLOCK_GROUP0_SETPOINT9 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT9's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP0_SETPOINT9_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT9;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP0_SETPOINT9 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT9's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP0_SETPOINT9_DIV0
    get_CLOCK_GROUP0_SETPOINT9_DIV0() volatile
    {
        return CCM_CLOCK_GROUP0_SETPOINT9_DIV0((CLOCK_GROUP0_SETPOINT9 >> 0u) &
                                               0b1111u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT9's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP0_SETPOINT9_DIV0(
        CCM_CLOCK_GROUP0_SETPOINT9_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT9;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT9 = curr;
    }

    /**
     * Get all of CLOCK_GROUP0_SETPOINT9's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP0_SETPOINT9(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT9_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT9;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP0_SETPOINT9_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP0_SETPOINT9's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP0_SETPOINT9(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT9_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT9;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT9 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT10's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT10_GRADE() volatile
    {
        return (CLOCK_GROUP0_SETPOINT10 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT10's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP0_SETPOINT10_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT10;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP0_SETPOINT10 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT10's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP0_SETPOINT10_OFF() volatile
    {
        return CLOCK_GROUP0_SETPOINT10 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT10's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP0_SETPOINT10_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT10 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP0_SETPOINT10's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP0_SETPOINT10_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT10 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP0_SETPOINT10's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP0_SETPOINT10_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT10 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT10's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT10_RSTDIV() volatile
    {
        return (CLOCK_GROUP0_SETPOINT10 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT10's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP0_SETPOINT10_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT10;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP0_SETPOINT10 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT10's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP0_SETPOINT10_DIV0
    get_CLOCK_GROUP0_SETPOINT10_DIV0() volatile
    {
        return CCM_CLOCK_GROUP0_SETPOINT10_DIV0(
            (CLOCK_GROUP0_SETPOINT10 >> 0u) & 0b1111u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT10's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP0_SETPOINT10_DIV0(
        CCM_CLOCK_GROUP0_SETPOINT10_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT10;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT10 = curr;
    }

    /**
     * Get all of CLOCK_GROUP0_SETPOINT10's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP0_SETPOINT10(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT10_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT10;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP0_SETPOINT10_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP0_SETPOINT10's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP0_SETPOINT10(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT10_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT10;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT10 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT11's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT11_GRADE() volatile
    {
        return (CLOCK_GROUP0_SETPOINT11 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT11's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP0_SETPOINT11_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT11;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP0_SETPOINT11 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT11's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP0_SETPOINT11_OFF() volatile
    {
        return CLOCK_GROUP0_SETPOINT11 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT11's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP0_SETPOINT11_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT11 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP0_SETPOINT11's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP0_SETPOINT11_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT11 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP0_SETPOINT11's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP0_SETPOINT11_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT11 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT11's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT11_RSTDIV() volatile
    {
        return (CLOCK_GROUP0_SETPOINT11 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT11's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP0_SETPOINT11_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT11;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP0_SETPOINT11 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT11's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP0_SETPOINT11_DIV0
    get_CLOCK_GROUP0_SETPOINT11_DIV0() volatile
    {
        return CCM_CLOCK_GROUP0_SETPOINT11_DIV0(
            (CLOCK_GROUP0_SETPOINT11 >> 0u) & 0b1111u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT11's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP0_SETPOINT11_DIV0(
        CCM_CLOCK_GROUP0_SETPOINT11_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT11;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT11 = curr;
    }

    /**
     * Get all of CLOCK_GROUP0_SETPOINT11's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP0_SETPOINT11(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT11_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT11;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP0_SETPOINT11_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP0_SETPOINT11's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP0_SETPOINT11(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT11_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT11;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT11 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT12's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT12_GRADE() volatile
    {
        return (CLOCK_GROUP0_SETPOINT12 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT12's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP0_SETPOINT12_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT12;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP0_SETPOINT12 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT12's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP0_SETPOINT12_OFF() volatile
    {
        return CLOCK_GROUP0_SETPOINT12 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT12's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP0_SETPOINT12_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT12 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP0_SETPOINT12's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP0_SETPOINT12_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT12 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP0_SETPOINT12's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP0_SETPOINT12_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT12 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT12's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT12_RSTDIV() volatile
    {
        return (CLOCK_GROUP0_SETPOINT12 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT12's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP0_SETPOINT12_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT12;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP0_SETPOINT12 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT12's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP0_SETPOINT12_DIV0
    get_CLOCK_GROUP0_SETPOINT12_DIV0() volatile
    {
        return CCM_CLOCK_GROUP0_SETPOINT12_DIV0(
            (CLOCK_GROUP0_SETPOINT12 >> 0u) & 0b1111u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT12's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP0_SETPOINT12_DIV0(
        CCM_CLOCK_GROUP0_SETPOINT12_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT12;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT12 = curr;
    }

    /**
     * Get all of CLOCK_GROUP0_SETPOINT12's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP0_SETPOINT12(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT12_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT12;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP0_SETPOINT12_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP0_SETPOINT12's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP0_SETPOINT12(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT12_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT12;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT12 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT13's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT13_GRADE() volatile
    {
        return (CLOCK_GROUP0_SETPOINT13 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT13's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP0_SETPOINT13_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT13;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP0_SETPOINT13 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT13's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP0_SETPOINT13_OFF() volatile
    {
        return CLOCK_GROUP0_SETPOINT13 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT13's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP0_SETPOINT13_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT13 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP0_SETPOINT13's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP0_SETPOINT13_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT13 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP0_SETPOINT13's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP0_SETPOINT13_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT13 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT13's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT13_RSTDIV() volatile
    {
        return (CLOCK_GROUP0_SETPOINT13 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT13's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP0_SETPOINT13_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT13;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP0_SETPOINT13 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT13's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP0_SETPOINT13_DIV0
    get_CLOCK_GROUP0_SETPOINT13_DIV0() volatile
    {
        return CCM_CLOCK_GROUP0_SETPOINT13_DIV0(
            (CLOCK_GROUP0_SETPOINT13 >> 0u) & 0b1111u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT13's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP0_SETPOINT13_DIV0(
        CCM_CLOCK_GROUP0_SETPOINT13_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT13;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT13 = curr;
    }

    /**
     * Get all of CLOCK_GROUP0_SETPOINT13's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP0_SETPOINT13(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT13_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT13;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP0_SETPOINT13_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP0_SETPOINT13's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP0_SETPOINT13(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT13_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT13;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT13 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT14's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT14_GRADE() volatile
    {
        return (CLOCK_GROUP0_SETPOINT14 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT14's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP0_SETPOINT14_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT14;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP0_SETPOINT14 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT14's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP0_SETPOINT14_OFF() volatile
    {
        return CLOCK_GROUP0_SETPOINT14 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT14's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP0_SETPOINT14_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT14 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP0_SETPOINT14's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP0_SETPOINT14_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT14 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP0_SETPOINT14's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP0_SETPOINT14_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT14 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT14's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT14_RSTDIV() volatile
    {
        return (CLOCK_GROUP0_SETPOINT14 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT14's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP0_SETPOINT14_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT14;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP0_SETPOINT14 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT14's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP0_SETPOINT14_DIV0
    get_CLOCK_GROUP0_SETPOINT14_DIV0() volatile
    {
        return CCM_CLOCK_GROUP0_SETPOINT14_DIV0(
            (CLOCK_GROUP0_SETPOINT14 >> 0u) & 0b1111u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT14's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP0_SETPOINT14_DIV0(
        CCM_CLOCK_GROUP0_SETPOINT14_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT14;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT14 = curr;
    }

    /**
     * Get all of CLOCK_GROUP0_SETPOINT14's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP0_SETPOINT14(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT14_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT14;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP0_SETPOINT14_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP0_SETPOINT14's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP0_SETPOINT14(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT14_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT14;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT14 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT15's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT15_GRADE() volatile
    {
        return (CLOCK_GROUP0_SETPOINT15 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT15's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP0_SETPOINT15_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT15;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP0_SETPOINT15 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT15's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP0_SETPOINT15_OFF() volatile
    {
        return CLOCK_GROUP0_SETPOINT15 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT15's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP0_SETPOINT15_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT15 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP0_SETPOINT15's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP0_SETPOINT15_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT15 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP0_SETPOINT15's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP0_SETPOINT15_OFF() volatile
    {
        CLOCK_GROUP0_SETPOINT15 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT15's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP0_SETPOINT15_RSTDIV() volatile
    {
        return (CLOCK_GROUP0_SETPOINT15 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT15's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP0_SETPOINT15_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT15;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP0_SETPOINT15 = curr;
    }

    /**
     * Get CLOCK_GROUP0_SETPOINT15's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP0_SETPOINT15_DIV0
    get_CLOCK_GROUP0_SETPOINT15_DIV0() volatile
    {
        return CCM_CLOCK_GROUP0_SETPOINT15_DIV0(
            (CLOCK_GROUP0_SETPOINT15 >> 0u) & 0b1111u);
    }

    /**
     * Set CLOCK_GROUP0_SETPOINT15's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP0_SETPOINT15_DIV0(
        CCM_CLOCK_GROUP0_SETPOINT15_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT15;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT15 = curr;
    }

    /**
     * Get all of CLOCK_GROUP0_SETPOINT15's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP0_SETPOINT15(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT15_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT15;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP0_SETPOINT15_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP0_SETPOINT15's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP0_SETPOINT15(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP0_SETPOINT15_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP0_SETPOINT15;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP0_SETPOINT15 = curr;
    }

    /**
     * Get CLOCK_GROUP1_CONTROL's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP1_CONTROL_OFF() volatile
    {
        return CLOCK_GROUP1_CONTROL & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP1_CONTROL's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP1_CONTROL_OFF() volatile
    {
        CLOCK_GROUP1_CONTROL |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP1_CONTROL's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP1_CONTROL_OFF() volatile
    {
        CLOCK_GROUP1_CONTROL &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP1_CONTROL's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP1_CONTROL_OFF() volatile
    {
        CLOCK_GROUP1_CONTROL ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP1_CONTROL's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP1_CONTROL_RSTDIV() volatile
    {
        return (CLOCK_GROUP1_CONTROL >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP1_CONTROL's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP1_CONTROL_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_CONTROL;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP1_CONTROL = curr;
    }

    /**
     * Get CLOCK_GROUP1_CONTROL's DIV0 field.
     *
     * Clock divider0
     */
    inline uint8_t get_CLOCK_GROUP1_CONTROL_DIV0() volatile
    {
        return (CLOCK_GROUP1_CONTROL >> 0u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_CONTROL's DIV0 field.
     *
     * Clock divider0
     */
    inline void set_CLOCK_GROUP1_CONTROL_DIV0(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_CONTROL;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        CLOCK_GROUP1_CONTROL = curr;
    }

    /**
     * Get all of CLOCK_GROUP1_CONTROL's bit fields.
     *
     * (read-write) Clock group control
     */
    inline void get_CLOCK_GROUP1_CONTROL(bool &OFF, uint8_t &RSTDIV,
                                         uint8_t &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_CONTROL;

        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of CLOCK_GROUP1_CONTROL's bit fields.
     *
     * (read-write) Clock group control
     */
    inline void set_CLOCK_GROUP1_CONTROL(bool OFF, uint8_t RSTDIV,
                                         uint8_t DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_CONTROL;

        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (DIV0 & 0b1111u) << 0u;

        CLOCK_GROUP1_CONTROL = curr;
    }

    /**
     * Get CLOCK_GROUP1_CONTROL_SET's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP1_CONTROL_SET_OFF() volatile
    {
        return CLOCK_GROUP1_CONTROL_SET & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP1_CONTROL_SET's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP1_CONTROL_SET_OFF() volatile
    {
        CLOCK_GROUP1_CONTROL_SET |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP1_CONTROL_SET's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP1_CONTROL_SET_OFF() volatile
    {
        CLOCK_GROUP1_CONTROL_SET &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP1_CONTROL_SET's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP1_CONTROL_SET_OFF() volatile
    {
        CLOCK_GROUP1_CONTROL_SET ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP1_CONTROL_SET's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP1_CONTROL_SET_RSTDIV() volatile
    {
        return (CLOCK_GROUP1_CONTROL_SET >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP1_CONTROL_SET's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP1_CONTROL_SET_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_CONTROL_SET;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP1_CONTROL_SET = curr;
    }

    /**
     * Get CLOCK_GROUP1_CONTROL_SET's DIV0 field.
     *
     * Clock divider0
     */
    inline uint8_t get_CLOCK_GROUP1_CONTROL_SET_DIV0() volatile
    {
        return (CLOCK_GROUP1_CONTROL_SET >> 0u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_CONTROL_SET's DIV0 field.
     *
     * Clock divider0
     */
    inline void set_CLOCK_GROUP1_CONTROL_SET_DIV0(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_CONTROL_SET;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        CLOCK_GROUP1_CONTROL_SET = curr;
    }

    /**
     * Get all of CLOCK_GROUP1_CONTROL_SET's bit fields.
     *
     * (read-write) Clock group control
     */
    inline void get_CLOCK_GROUP1_CONTROL_SET(bool &OFF, uint8_t &RSTDIV,
                                             uint8_t &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_CONTROL_SET;

        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of CLOCK_GROUP1_CONTROL_SET's bit fields.
     *
     * (read-write) Clock group control
     */
    inline void set_CLOCK_GROUP1_CONTROL_SET(bool OFF, uint8_t RSTDIV,
                                             uint8_t DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_CONTROL_SET;

        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (DIV0 & 0b1111u) << 0u;

        CLOCK_GROUP1_CONTROL_SET = curr;
    }

    /**
     * Get CLOCK_GROUP1_CONTROL_CLR's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP1_CONTROL_CLR_OFF() volatile
    {
        return CLOCK_GROUP1_CONTROL_CLR & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP1_CONTROL_CLR's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP1_CONTROL_CLR_OFF() volatile
    {
        CLOCK_GROUP1_CONTROL_CLR |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP1_CONTROL_CLR's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP1_CONTROL_CLR_OFF() volatile
    {
        CLOCK_GROUP1_CONTROL_CLR &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP1_CONTROL_CLR's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP1_CONTROL_CLR_OFF() volatile
    {
        CLOCK_GROUP1_CONTROL_CLR ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP1_CONTROL_CLR's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP1_CONTROL_CLR_RSTDIV() volatile
    {
        return (CLOCK_GROUP1_CONTROL_CLR >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP1_CONTROL_CLR's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP1_CONTROL_CLR_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_CONTROL_CLR;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP1_CONTROL_CLR = curr;
    }

    /**
     * Get CLOCK_GROUP1_CONTROL_CLR's DIV0 field.
     *
     * Clock divider0
     */
    inline uint8_t get_CLOCK_GROUP1_CONTROL_CLR_DIV0() volatile
    {
        return (CLOCK_GROUP1_CONTROL_CLR >> 0u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_CONTROL_CLR's DIV0 field.
     *
     * Clock divider0
     */
    inline void set_CLOCK_GROUP1_CONTROL_CLR_DIV0(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_CONTROL_CLR;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        CLOCK_GROUP1_CONTROL_CLR = curr;
    }

    /**
     * Get all of CLOCK_GROUP1_CONTROL_CLR's bit fields.
     *
     * (read-write) Clock group control
     */
    inline void get_CLOCK_GROUP1_CONTROL_CLR(bool &OFF, uint8_t &RSTDIV,
                                             uint8_t &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_CONTROL_CLR;

        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of CLOCK_GROUP1_CONTROL_CLR's bit fields.
     *
     * (read-write) Clock group control
     */
    inline void set_CLOCK_GROUP1_CONTROL_CLR(bool OFF, uint8_t RSTDIV,
                                             uint8_t DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_CONTROL_CLR;

        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (DIV0 & 0b1111u) << 0u;

        CLOCK_GROUP1_CONTROL_CLR = curr;
    }

    /**
     * Get CLOCK_GROUP1_CONTROL_TOG's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP1_CONTROL_TOG_OFF() volatile
    {
        return CLOCK_GROUP1_CONTROL_TOG & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP1_CONTROL_TOG's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP1_CONTROL_TOG_OFF() volatile
    {
        CLOCK_GROUP1_CONTROL_TOG |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP1_CONTROL_TOG's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP1_CONTROL_TOG_OFF() volatile
    {
        CLOCK_GROUP1_CONTROL_TOG &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP1_CONTROL_TOG's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP1_CONTROL_TOG_OFF() volatile
    {
        CLOCK_GROUP1_CONTROL_TOG ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP1_CONTROL_TOG's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP1_CONTROL_TOG_RSTDIV() volatile
    {
        return (CLOCK_GROUP1_CONTROL_TOG >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP1_CONTROL_TOG's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP1_CONTROL_TOG_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_CONTROL_TOG;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP1_CONTROL_TOG = curr;
    }

    /**
     * Get CLOCK_GROUP1_CONTROL_TOG's DIV0 field.
     *
     * Clock divider0
     */
    inline uint8_t get_CLOCK_GROUP1_CONTROL_TOG_DIV0() volatile
    {
        return (CLOCK_GROUP1_CONTROL_TOG >> 0u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_CONTROL_TOG's DIV0 field.
     *
     * Clock divider0
     */
    inline void set_CLOCK_GROUP1_CONTROL_TOG_DIV0(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_CONTROL_TOG;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        CLOCK_GROUP1_CONTROL_TOG = curr;
    }

    /**
     * Get all of CLOCK_GROUP1_CONTROL_TOG's bit fields.
     *
     * (read-write) Clock group control
     */
    inline void get_CLOCK_GROUP1_CONTROL_TOG(bool &OFF, uint8_t &RSTDIV,
                                             uint8_t &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_CONTROL_TOG;

        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of CLOCK_GROUP1_CONTROL_TOG's bit fields.
     *
     * (read-write) Clock group control
     */
    inline void set_CLOCK_GROUP1_CONTROL_TOG(bool OFF, uint8_t RSTDIV,
                                             uint8_t DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_CONTROL_TOG;

        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (DIV0 & 0b1111u) << 0u;

        CLOCK_GROUP1_CONTROL_TOG = curr;
    }

    /**
     * Get CLOCK_GROUP1_STATUS0's CHANGING bit.
     *
     * Internal updating in clock group
     */
    inline bool get_CLOCK_GROUP1_STATUS0_CHANGING() volatile
    {
        return CLOCK_GROUP1_STATUS0 & (1u << 31u);
    }

    /**
     * Get CLOCK_GROUP1_STATUS0's UPDATE_REVERSE bit.
     *
     * Internal status synchronization from clock generation logic
     */
    inline bool get_CLOCK_GROUP1_STATUS0_UPDATE_REVERSE() volatile
    {
        return CLOCK_GROUP1_STATUS0 & (1u << 30u);
    }

    /**
     * Get CLOCK_GROUP1_STATUS0's UPDATE_FORWARD bit.
     *
     * Internal status synchronization to clock generation logic
     */
    inline bool get_CLOCK_GROUP1_STATUS0_UPDATE_FORWARD() volatile
    {
        return CLOCK_GROUP1_STATUS0 & (1u << 29u);
    }

    /**
     * Get CLOCK_GROUP1_STATUS0's SLICE_BUSY bit.
     *
     * Internal updating in generation logic
     */
    inline bool get_CLOCK_GROUP1_STATUS0_SLICE_BUSY() volatile
    {
        return CLOCK_GROUP1_STATUS0 & (1u << 28u);
    }

    /**
     * Get CLOCK_GROUP1_STATUS0's POWERDOWN bit.
     *
     * Current clock root POWERDOWN setting
     */
    inline bool get_CLOCK_GROUP1_STATUS0_POWERDOWN() volatile
    {
        return CLOCK_GROUP1_STATUS0 & (1u << 27u);
    }

    /**
     * Get CLOCK_GROUP1_STATUS0's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP1_STATUS0_OFF() volatile
    {
        return CLOCK_GROUP1_STATUS0 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP1_STATUS0's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP1_STATUS0_OFF() volatile
    {
        CLOCK_GROUP1_STATUS0 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP1_STATUS0's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP1_STATUS0_OFF() volatile
    {
        CLOCK_GROUP1_STATUS0 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP1_STATUS0's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP1_STATUS0_OFF() volatile
    {
        CLOCK_GROUP1_STATUS0 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP1_STATUS0's RSTDIV field.
     *
     * Clock divider
     */
    inline uint8_t get_CLOCK_GROUP1_STATUS0_RSTDIV() volatile
    {
        return (CLOCK_GROUP1_STATUS0 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP1_STATUS0's RSTDIV field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP1_STATUS0_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_STATUS0;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP1_STATUS0 = curr;
    }

    /**
     * Get CLOCK_GROUP1_STATUS0's DIV0 field.
     *
     * Clock divider
     */
    inline uint8_t get_CLOCK_GROUP1_STATUS0_DIV0() volatile
    {
        return (CLOCK_GROUP1_STATUS0 >> 0u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_STATUS0's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP1_STATUS0_DIV0(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_STATUS0;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        CLOCK_GROUP1_STATUS0 = curr;
    }

    /**
     * Get all of CLOCK_GROUP1_STATUS0's bit fields.
     *
     * (read-write) Clock group working status
     */
    inline void get_CLOCK_GROUP1_STATUS0(bool &CHANGING, bool &UPDATE_REVERSE,
                                         bool &UPDATE_FORWARD,
                                         bool &SLICE_BUSY, bool &POWERDOWN,
                                         bool &OFF, uint8_t &RSTDIV,
                                         uint8_t &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_STATUS0;

        CHANGING = curr & (1u << 31u);
        UPDATE_REVERSE = curr & (1u << 30u);
        UPDATE_FORWARD = curr & (1u << 29u);
        SLICE_BUSY = curr & (1u << 28u);
        POWERDOWN = curr & (1u << 27u);
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of CLOCK_GROUP1_STATUS0's bit fields.
     *
     * (read-write) Clock group working status
     */
    inline void set_CLOCK_GROUP1_STATUS0(bool OFF, uint8_t RSTDIV,
                                         uint8_t DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_STATUS0;

        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (DIV0 & 0b1111u) << 0u;

        CLOCK_GROUP1_STATUS0 = curr;
    }

    /**
     * Get CLOCK_GROUP1_STATUS1's UP_DONE bit.
     *
     * Clock frequency increase complete
     */
    inline bool get_CLOCK_GROUP1_STATUS1_UP_DONE() volatile
    {
        return CLOCK_GROUP1_STATUS1 & (1u << 27u);
    }

    /**
     * Get CLOCK_GROUP1_STATUS1's UP_REQUEST bit.
     *
     * Clock frequency increase request
     */
    inline bool get_CLOCK_GROUP1_STATUS1_UP_REQUEST() volatile
    {
        return CLOCK_GROUP1_STATUS1 & (1u << 26u);
    }

    /**
     * Get CLOCK_GROUP1_STATUS1's DOWN_DONE bit.
     *
     * Clock frequency decrease complete
     */
    inline bool get_CLOCK_GROUP1_STATUS1_DOWN_DONE() volatile
    {
        return CLOCK_GROUP1_STATUS1 & (1u << 25u);
    }

    /**
     * Get CLOCK_GROUP1_STATUS1's DOWN_REQUEST bit.
     *
     * Clock frequency decrease request
     */
    inline bool get_CLOCK_GROUP1_STATUS1_DOWN_REQUEST() volatile
    {
        return CLOCK_GROUP1_STATUS1 & (1u << 24u);
    }

    /**
     * Get CLOCK_GROUP1_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_CLOCK_GROUP1_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (CLOCK_GROUP1_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get CLOCK_GROUP1_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_CLOCK_GROUP1_STATUS1_TARGET_SETPOINT() volatile
    {
        return (CLOCK_GROUP1_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get all of CLOCK_GROUP1_STATUS1's bit fields.
     *
     * (read-write) Clock group low power/extend status
     */
    inline void get_CLOCK_GROUP1_STATUS1(bool &UP_DONE, bool &UP_REQUEST,
                                         bool &DOWN_DONE, bool &DOWN_REQUEST,
                                         uint8_t &CURRENT_SETPOINT,
                                         uint8_t &TARGET_SETPOINT) volatile
    {
        uint32_t curr = CLOCK_GROUP1_STATUS1;

        UP_DONE = curr & (1u << 27u);
        UP_REQUEST = curr & (1u << 26u);
        DOWN_DONE = curr & (1u << 25u);
        DOWN_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
    }

    /**
     * Get CLOCK_GROUP1_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_CLOCK_GROUP1_CONFIG_SETPOINT_PRESENT() volatile
    {
        return CLOCK_GROUP1_CONFIG & (1u << 4u);
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_LOCK_MODE() volatile
    {
        return CLOCK_GROUP1_AUTHEN & (1u << 20u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_CLOCK_GROUP1_AUTHEN_LOCK_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_LOCK_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_LOCK_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_SETPOINT_MODE() volatile
    {
        return CLOCK_GROUP1_AUTHEN & (1u << 17u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_CLOCK_GROUP1_AUTHEN_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_DOMAIN_MODE() volatile
    {
        return CLOCK_GROUP1_AUTHEN & (1u << 16u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_CLOCK_GROUP1_AUTHEN_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_LOCK_LIST() volatile
    {
        return CLOCK_GROUP1_AUTHEN & (1u << 12u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_CLOCK_GROUP1_AUTHEN_LOCK_LIST() volatile
    {
        CLOCK_GROUP1_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_LOCK_LIST() volatile
    {
        CLOCK_GROUP1_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_LOCK_LIST() volatile
    {
        CLOCK_GROUP1_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_CLOCK_GROUP1_AUTHEN_WHITE_LIST() volatile
    {
        return (CLOCK_GROUP1_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_CLOCK_GROUP1_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        CLOCK_GROUP1_AUTHEN = curr;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_LOCK_TZ() volatile
    {
        return CLOCK_GROUP1_AUTHEN & (1u << 4u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_CLOCK_GROUP1_AUTHEN_LOCK_TZ() volatile
    {
        CLOCK_GROUP1_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_LOCK_TZ() volatile
    {
        CLOCK_GROUP1_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_LOCK_TZ() volatile
    {
        CLOCK_GROUP1_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_TZ_NS() volatile
    {
        return CLOCK_GROUP1_AUTHEN & (1u << 1u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_CLOCK_GROUP1_AUTHEN_TZ_NS() volatile
    {
        CLOCK_GROUP1_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_TZ_NS() volatile
    {
        CLOCK_GROUP1_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_TZ_NS() volatile
    {
        CLOCK_GROUP1_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_TZ_USER() volatile
    {
        return CLOCK_GROUP1_AUTHEN & (1u << 0u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_CLOCK_GROUP1_AUTHEN_TZ_USER() volatile
    {
        CLOCK_GROUP1_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_TZ_USER() volatile
    {
        CLOCK_GROUP1_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_TZ_USER() volatile
    {
        CLOCK_GROUP1_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of CLOCK_GROUP1_AUTHEN's bit fields.
     *
     * (read-write) Clock group access control
     */
    inline void get_CLOCK_GROUP1_AUTHEN(bool &LOCK_MODE, bool &SETPOINT_MODE,
                                        bool &DOMAIN_MODE, bool &LOCK_LIST,
                                        uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                        bool &TZ_NS, bool &TZ_USER) volatile
    {
        uint32_t curr = CLOCK_GROUP1_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of CLOCK_GROUP1_AUTHEN's bit fields.
     *
     * (read-write) Clock group access control
     */
    inline void set_CLOCK_GROUP1_AUTHEN(bool LOCK_MODE, bool SETPOINT_MODE,
                                        bool DOMAIN_MODE, bool LOCK_LIST,
                                        uint8_t WHITE_LIST, bool LOCK_TZ,
                                        bool TZ_NS, bool TZ_USER) volatile
    {
        uint32_t curr = CLOCK_GROUP1_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        CLOCK_GROUP1_AUTHEN = curr;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_SET_LOCK_MODE() volatile
    {
        return CLOCK_GROUP1_AUTHEN_SET & (1u << 20u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_CLOCK_GROUP1_AUTHEN_SET_LOCK_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_SET |= 1u << 20u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_SET_LOCK_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_SET &= ~(1u << 20u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_SET_LOCK_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_SET ^= 1u << 20u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_SET's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_SET_SETPOINT_MODE() volatile
    {
        return CLOCK_GROUP1_AUTHEN_SET & (1u << 17u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_SET's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_CLOCK_GROUP1_AUTHEN_SET_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_SET |= 1u << 17u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN_SET's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_SET_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_SET &= ~(1u << 17u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN_SET's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_SET_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_SET ^= 1u << 17u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        return CLOCK_GROUP1_AUTHEN_SET & (1u << 16u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_CLOCK_GROUP1_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_SET |= 1u << 16u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_SET &= ~(1u << 16u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_SET ^= 1u << 16u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_SET_LOCK_LIST() volatile
    {
        return CLOCK_GROUP1_AUTHEN_SET & (1u << 12u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_CLOCK_GROUP1_AUTHEN_SET_LOCK_LIST() volatile
    {
        CLOCK_GROUP1_AUTHEN_SET |= 1u << 12u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_SET_LOCK_LIST() volatile
    {
        CLOCK_GROUP1_AUTHEN_SET &= ~(1u << 12u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_SET_LOCK_LIST() volatile
    {
        CLOCK_GROUP1_AUTHEN_SET ^= 1u << 12u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_SET's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_CLOCK_GROUP1_AUTHEN_SET_WHITE_LIST() volatile
    {
        return (CLOCK_GROUP1_AUTHEN_SET >> 8u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_SET's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_CLOCK_GROUP1_AUTHEN_SET_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_AUTHEN_SET;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        CLOCK_GROUP1_AUTHEN_SET = curr;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_SET_LOCK_TZ() volatile
    {
        return CLOCK_GROUP1_AUTHEN_SET & (1u << 4u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_CLOCK_GROUP1_AUTHEN_SET_LOCK_TZ() volatile
    {
        CLOCK_GROUP1_AUTHEN_SET |= 1u << 4u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_SET_LOCK_TZ() volatile
    {
        CLOCK_GROUP1_AUTHEN_SET &= ~(1u << 4u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_SET_LOCK_TZ() volatile
    {
        CLOCK_GROUP1_AUTHEN_SET ^= 1u << 4u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_SET_TZ_NS() volatile
    {
        return CLOCK_GROUP1_AUTHEN_SET & (1u << 1u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_CLOCK_GROUP1_AUTHEN_SET_TZ_NS() volatile
    {
        CLOCK_GROUP1_AUTHEN_SET |= 1u << 1u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_SET_TZ_NS() volatile
    {
        CLOCK_GROUP1_AUTHEN_SET &= ~(1u << 1u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_SET_TZ_NS() volatile
    {
        CLOCK_GROUP1_AUTHEN_SET ^= 1u << 1u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_SET_TZ_USER() volatile
    {
        return CLOCK_GROUP1_AUTHEN_SET & (1u << 0u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void set_CLOCK_GROUP1_AUTHEN_SET_TZ_USER() volatile
    {
        CLOCK_GROUP1_AUTHEN_SET |= 1u << 0u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_SET_TZ_USER() volatile
    {
        CLOCK_GROUP1_AUTHEN_SET &= ~(1u << 0u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_SET_TZ_USER() volatile
    {
        CLOCK_GROUP1_AUTHEN_SET ^= 1u << 0u;
    }

    /**
     * Get all of CLOCK_GROUP1_AUTHEN_SET's bit fields.
     *
     * (read-write) Clock group access control
     */
    inline void get_CLOCK_GROUP1_AUTHEN_SET(bool &LOCK_MODE,
                                            bool &SETPOINT_MODE,
                                            bool &DOMAIN_MODE, bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = CLOCK_GROUP1_AUTHEN_SET;

        LOCK_MODE = curr & (1u << 20u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of CLOCK_GROUP1_AUTHEN_SET's bit fields.
     *
     * (read-write) Clock group access control
     */
    inline void set_CLOCK_GROUP1_AUTHEN_SET(bool LOCK_MODE, bool SETPOINT_MODE,
                                            bool DOMAIN_MODE, bool LOCK_LIST,
                                            uint8_t WHITE_LIST, bool LOCK_TZ,
                                            bool TZ_NS, bool TZ_USER) volatile
    {
        uint32_t curr = CLOCK_GROUP1_AUTHEN_SET;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        CLOCK_GROUP1_AUTHEN_SET = curr;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_CLR_LOCK_MODE() volatile
    {
        return CLOCK_GROUP1_AUTHEN_CLR & (1u << 20u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_CLOCK_GROUP1_AUTHEN_CLR_LOCK_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_CLR |= 1u << 20u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_CLR_LOCK_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_CLR &= ~(1u << 20u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_CLR_LOCK_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_CLR ^= 1u << 20u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_CLR's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_CLR_SETPOINT_MODE() volatile
    {
        return CLOCK_GROUP1_AUTHEN_CLR & (1u << 17u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_CLR's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_CLOCK_GROUP1_AUTHEN_CLR_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_CLR |= 1u << 17u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN_CLR's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_CLR_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_CLR &= ~(1u << 17u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN_CLR's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_CLR_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_CLR ^= 1u << 17u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        return CLOCK_GROUP1_AUTHEN_CLR & (1u << 16u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_CLOCK_GROUP1_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_CLR |= 1u << 16u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_CLR &= ~(1u << 16u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_CLR ^= 1u << 16u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_CLR_LOCK_LIST() volatile
    {
        return CLOCK_GROUP1_AUTHEN_CLR & (1u << 12u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_CLOCK_GROUP1_AUTHEN_CLR_LOCK_LIST() volatile
    {
        CLOCK_GROUP1_AUTHEN_CLR |= 1u << 12u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_CLR_LOCK_LIST() volatile
    {
        CLOCK_GROUP1_AUTHEN_CLR &= ~(1u << 12u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_CLR_LOCK_LIST() volatile
    {
        CLOCK_GROUP1_AUTHEN_CLR ^= 1u << 12u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_CLR's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_CLOCK_GROUP1_AUTHEN_CLR_WHITE_LIST() volatile
    {
        return (CLOCK_GROUP1_AUTHEN_CLR >> 8u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_CLR's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_CLOCK_GROUP1_AUTHEN_CLR_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_AUTHEN_CLR;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        CLOCK_GROUP1_AUTHEN_CLR = curr;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_CLR_LOCK_TZ() volatile
    {
        return CLOCK_GROUP1_AUTHEN_CLR & (1u << 4u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_CLOCK_GROUP1_AUTHEN_CLR_LOCK_TZ() volatile
    {
        CLOCK_GROUP1_AUTHEN_CLR |= 1u << 4u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_CLR_LOCK_TZ() volatile
    {
        CLOCK_GROUP1_AUTHEN_CLR &= ~(1u << 4u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_CLR_LOCK_TZ() volatile
    {
        CLOCK_GROUP1_AUTHEN_CLR ^= 1u << 4u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_CLR_TZ_NS() volatile
    {
        return CLOCK_GROUP1_AUTHEN_CLR & (1u << 1u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_CLOCK_GROUP1_AUTHEN_CLR_TZ_NS() volatile
    {
        CLOCK_GROUP1_AUTHEN_CLR |= 1u << 1u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_CLR_TZ_NS() volatile
    {
        CLOCK_GROUP1_AUTHEN_CLR &= ~(1u << 1u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_CLR_TZ_NS() volatile
    {
        CLOCK_GROUP1_AUTHEN_CLR ^= 1u << 1u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_CLR_TZ_USER() volatile
    {
        return CLOCK_GROUP1_AUTHEN_CLR & (1u << 0u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void set_CLOCK_GROUP1_AUTHEN_CLR_TZ_USER() volatile
    {
        CLOCK_GROUP1_AUTHEN_CLR |= 1u << 0u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_CLR_TZ_USER() volatile
    {
        CLOCK_GROUP1_AUTHEN_CLR &= ~(1u << 0u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_CLR_TZ_USER() volatile
    {
        CLOCK_GROUP1_AUTHEN_CLR ^= 1u << 0u;
    }

    /**
     * Get all of CLOCK_GROUP1_AUTHEN_CLR's bit fields.
     *
     * (read-write) Clock group access control
     */
    inline void get_CLOCK_GROUP1_AUTHEN_CLR(bool &LOCK_MODE,
                                            bool &SETPOINT_MODE,
                                            bool &DOMAIN_MODE, bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = CLOCK_GROUP1_AUTHEN_CLR;

        LOCK_MODE = curr & (1u << 20u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of CLOCK_GROUP1_AUTHEN_CLR's bit fields.
     *
     * (read-write) Clock group access control
     */
    inline void set_CLOCK_GROUP1_AUTHEN_CLR(bool LOCK_MODE, bool SETPOINT_MODE,
                                            bool DOMAIN_MODE, bool LOCK_LIST,
                                            uint8_t WHITE_LIST, bool LOCK_TZ,
                                            bool TZ_NS, bool TZ_USER) volatile
    {
        uint32_t curr = CLOCK_GROUP1_AUTHEN_CLR;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        CLOCK_GROUP1_AUTHEN_CLR = curr;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_TOG_LOCK_MODE() volatile
    {
        return CLOCK_GROUP1_AUTHEN_TOG & (1u << 20u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_CLOCK_GROUP1_AUTHEN_TOG_LOCK_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_TOG |= 1u << 20u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_TOG_LOCK_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_TOG &= ~(1u << 20u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_TOG_LOCK_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_TOG ^= 1u << 20u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_TOG's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_TOG_SETPOINT_MODE() volatile
    {
        return CLOCK_GROUP1_AUTHEN_TOG & (1u << 17u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_TOG's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_CLOCK_GROUP1_AUTHEN_TOG_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_TOG |= 1u << 17u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN_TOG's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_TOG_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_TOG &= ~(1u << 17u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN_TOG's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_TOG_SETPOINT_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_TOG ^= 1u << 17u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        return CLOCK_GROUP1_AUTHEN_TOG & (1u << 16u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_CLOCK_GROUP1_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_TOG |= 1u << 16u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_TOG &= ~(1u << 16u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        CLOCK_GROUP1_AUTHEN_TOG ^= 1u << 16u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_TOG_LOCK_LIST() volatile
    {
        return CLOCK_GROUP1_AUTHEN_TOG & (1u << 12u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_CLOCK_GROUP1_AUTHEN_TOG_LOCK_LIST() volatile
    {
        CLOCK_GROUP1_AUTHEN_TOG |= 1u << 12u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_TOG_LOCK_LIST() volatile
    {
        CLOCK_GROUP1_AUTHEN_TOG &= ~(1u << 12u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_TOG_LOCK_LIST() volatile
    {
        CLOCK_GROUP1_AUTHEN_TOG ^= 1u << 12u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_TOG's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_CLOCK_GROUP1_AUTHEN_TOG_WHITE_LIST() volatile
    {
        return (CLOCK_GROUP1_AUTHEN_TOG >> 8u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_TOG's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_CLOCK_GROUP1_AUTHEN_TOG_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_AUTHEN_TOG;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        CLOCK_GROUP1_AUTHEN_TOG = curr;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_TOG_LOCK_TZ() volatile
    {
        return CLOCK_GROUP1_AUTHEN_TOG & (1u << 4u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_CLOCK_GROUP1_AUTHEN_TOG_LOCK_TZ() volatile
    {
        CLOCK_GROUP1_AUTHEN_TOG |= 1u << 4u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_TOG_LOCK_TZ() volatile
    {
        CLOCK_GROUP1_AUTHEN_TOG &= ~(1u << 4u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_TOG_LOCK_TZ() volatile
    {
        CLOCK_GROUP1_AUTHEN_TOG ^= 1u << 4u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_TOG_TZ_NS() volatile
    {
        return CLOCK_GROUP1_AUTHEN_TOG & (1u << 1u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_CLOCK_GROUP1_AUTHEN_TOG_TZ_NS() volatile
    {
        CLOCK_GROUP1_AUTHEN_TOG |= 1u << 1u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_TOG_TZ_NS() volatile
    {
        CLOCK_GROUP1_AUTHEN_TOG &= ~(1u << 1u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_TOG_TZ_NS() volatile
    {
        CLOCK_GROUP1_AUTHEN_TOG ^= 1u << 1u;
    }

    /**
     * Get CLOCK_GROUP1_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline bool get_CLOCK_GROUP1_AUTHEN_TOG_TZ_USER() volatile
    {
        return CLOCK_GROUP1_AUTHEN_TOG & (1u << 0u);
    }

    /**
     * Set CLOCK_GROUP1_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void set_CLOCK_GROUP1_AUTHEN_TOG_TZ_USER() volatile
    {
        CLOCK_GROUP1_AUTHEN_TOG |= 1u << 0u;
    }

    /**
     * Clear CLOCK_GROUP1_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void clear_CLOCK_GROUP1_AUTHEN_TOG_TZ_USER() volatile
    {
        CLOCK_GROUP1_AUTHEN_TOG &= ~(1u << 0u);
    }

    /**
     * Toggle CLOCK_GROUP1_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_CLOCK_GROUP1_AUTHEN_TOG_TZ_USER() volatile
    {
        CLOCK_GROUP1_AUTHEN_TOG ^= 1u << 0u;
    }

    /**
     * Get all of CLOCK_GROUP1_AUTHEN_TOG's bit fields.
     *
     * (read-write) Clock group access control
     */
    inline void get_CLOCK_GROUP1_AUTHEN_TOG(bool &LOCK_MODE,
                                            bool &SETPOINT_MODE,
                                            bool &DOMAIN_MODE, bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = CLOCK_GROUP1_AUTHEN_TOG;

        LOCK_MODE = curr & (1u << 20u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of CLOCK_GROUP1_AUTHEN_TOG's bit fields.
     *
     * (read-write) Clock group access control
     */
    inline void set_CLOCK_GROUP1_AUTHEN_TOG(bool LOCK_MODE, bool SETPOINT_MODE,
                                            bool DOMAIN_MODE, bool LOCK_LIST,
                                            uint8_t WHITE_LIST, bool LOCK_TZ,
                                            bool TZ_NS, bool TZ_USER) volatile
    {
        uint32_t curr = CLOCK_GROUP1_AUTHEN_TOG;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        CLOCK_GROUP1_AUTHEN_TOG = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT0's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT0_GRADE() volatile
    {
        return (CLOCK_GROUP1_SETPOINT0 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT0's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP1_SETPOINT0_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT0;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP1_SETPOINT0 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT0's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP1_SETPOINT0_OFF() volatile
    {
        return CLOCK_GROUP1_SETPOINT0 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT0's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP1_SETPOINT0_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT0 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP1_SETPOINT0's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP1_SETPOINT0_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT0 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP1_SETPOINT0's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP1_SETPOINT0_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT0 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT0's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT0_RSTDIV() volatile
    {
        return (CLOCK_GROUP1_SETPOINT0 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT0's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP1_SETPOINT0_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT0;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP1_SETPOINT0 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT0's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP1_SETPOINT0_DIV0
    get_CLOCK_GROUP1_SETPOINT0_DIV0() volatile
    {
        return CCM_CLOCK_GROUP1_SETPOINT0_DIV0((CLOCK_GROUP1_SETPOINT0 >> 0u) &
                                               0b1111u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT0's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP1_SETPOINT0_DIV0(
        CCM_CLOCK_GROUP1_SETPOINT0_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT0;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT0 = curr;
    }

    /**
     * Get all of CLOCK_GROUP1_SETPOINT0's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP1_SETPOINT0(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT0_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT0;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP1_SETPOINT0_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP1_SETPOINT0's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP1_SETPOINT0(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT0_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT0;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT0 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT1's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT1_GRADE() volatile
    {
        return (CLOCK_GROUP1_SETPOINT1 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT1's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP1_SETPOINT1_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT1;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP1_SETPOINT1 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT1's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP1_SETPOINT1_OFF() volatile
    {
        return CLOCK_GROUP1_SETPOINT1 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT1's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP1_SETPOINT1_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT1 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP1_SETPOINT1's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP1_SETPOINT1_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT1 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP1_SETPOINT1's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP1_SETPOINT1_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT1 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT1's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT1_RSTDIV() volatile
    {
        return (CLOCK_GROUP1_SETPOINT1 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT1's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP1_SETPOINT1_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT1;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP1_SETPOINT1 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT1's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP1_SETPOINT1_DIV0
    get_CLOCK_GROUP1_SETPOINT1_DIV0() volatile
    {
        return CCM_CLOCK_GROUP1_SETPOINT1_DIV0((CLOCK_GROUP1_SETPOINT1 >> 0u) &
                                               0b1111u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT1's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP1_SETPOINT1_DIV0(
        CCM_CLOCK_GROUP1_SETPOINT1_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT1;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT1 = curr;
    }

    /**
     * Get all of CLOCK_GROUP1_SETPOINT1's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP1_SETPOINT1(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT1_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT1;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP1_SETPOINT1_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP1_SETPOINT1's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP1_SETPOINT1(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT1_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT1;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT1 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT2's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT2_GRADE() volatile
    {
        return (CLOCK_GROUP1_SETPOINT2 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT2's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP1_SETPOINT2_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT2;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP1_SETPOINT2 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT2's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP1_SETPOINT2_OFF() volatile
    {
        return CLOCK_GROUP1_SETPOINT2 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT2's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP1_SETPOINT2_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT2 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP1_SETPOINT2's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP1_SETPOINT2_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT2 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP1_SETPOINT2's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP1_SETPOINT2_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT2 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT2's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT2_RSTDIV() volatile
    {
        return (CLOCK_GROUP1_SETPOINT2 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT2's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP1_SETPOINT2_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT2;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP1_SETPOINT2 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT2's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP1_SETPOINT2_DIV0
    get_CLOCK_GROUP1_SETPOINT2_DIV0() volatile
    {
        return CCM_CLOCK_GROUP1_SETPOINT2_DIV0((CLOCK_GROUP1_SETPOINT2 >> 0u) &
                                               0b1111u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT2's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP1_SETPOINT2_DIV0(
        CCM_CLOCK_GROUP1_SETPOINT2_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT2;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT2 = curr;
    }

    /**
     * Get all of CLOCK_GROUP1_SETPOINT2's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP1_SETPOINT2(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT2_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT2;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP1_SETPOINT2_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP1_SETPOINT2's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP1_SETPOINT2(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT2_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT2;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT2 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT3's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT3_GRADE() volatile
    {
        return (CLOCK_GROUP1_SETPOINT3 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT3's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP1_SETPOINT3_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT3;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP1_SETPOINT3 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT3's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP1_SETPOINT3_OFF() volatile
    {
        return CLOCK_GROUP1_SETPOINT3 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT3's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP1_SETPOINT3_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT3 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP1_SETPOINT3's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP1_SETPOINT3_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT3 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP1_SETPOINT3's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP1_SETPOINT3_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT3 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT3's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT3_RSTDIV() volatile
    {
        return (CLOCK_GROUP1_SETPOINT3 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT3's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP1_SETPOINT3_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT3;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP1_SETPOINT3 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT3's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP1_SETPOINT3_DIV0
    get_CLOCK_GROUP1_SETPOINT3_DIV0() volatile
    {
        return CCM_CLOCK_GROUP1_SETPOINT3_DIV0((CLOCK_GROUP1_SETPOINT3 >> 0u) &
                                               0b1111u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT3's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP1_SETPOINT3_DIV0(
        CCM_CLOCK_GROUP1_SETPOINT3_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT3;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT3 = curr;
    }

    /**
     * Get all of CLOCK_GROUP1_SETPOINT3's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP1_SETPOINT3(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT3_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT3;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP1_SETPOINT3_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP1_SETPOINT3's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP1_SETPOINT3(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT3_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT3;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT3 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT4's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT4_GRADE() volatile
    {
        return (CLOCK_GROUP1_SETPOINT4 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT4's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP1_SETPOINT4_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT4;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP1_SETPOINT4 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT4's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP1_SETPOINT4_OFF() volatile
    {
        return CLOCK_GROUP1_SETPOINT4 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT4's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP1_SETPOINT4_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT4 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP1_SETPOINT4's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP1_SETPOINT4_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT4 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP1_SETPOINT4's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP1_SETPOINT4_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT4 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT4's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT4_RSTDIV() volatile
    {
        return (CLOCK_GROUP1_SETPOINT4 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT4's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP1_SETPOINT4_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT4;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP1_SETPOINT4 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT4's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP1_SETPOINT4_DIV0
    get_CLOCK_GROUP1_SETPOINT4_DIV0() volatile
    {
        return CCM_CLOCK_GROUP1_SETPOINT4_DIV0((CLOCK_GROUP1_SETPOINT4 >> 0u) &
                                               0b1111u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT4's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP1_SETPOINT4_DIV0(
        CCM_CLOCK_GROUP1_SETPOINT4_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT4;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT4 = curr;
    }

    /**
     * Get all of CLOCK_GROUP1_SETPOINT4's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP1_SETPOINT4(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT4_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT4;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP1_SETPOINT4_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP1_SETPOINT4's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP1_SETPOINT4(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT4_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT4;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT4 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT5's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT5_GRADE() volatile
    {
        return (CLOCK_GROUP1_SETPOINT5 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT5's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP1_SETPOINT5_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT5;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP1_SETPOINT5 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT5's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP1_SETPOINT5_OFF() volatile
    {
        return CLOCK_GROUP1_SETPOINT5 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT5's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP1_SETPOINT5_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT5 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP1_SETPOINT5's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP1_SETPOINT5_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT5 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP1_SETPOINT5's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP1_SETPOINT5_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT5 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT5's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT5_RSTDIV() volatile
    {
        return (CLOCK_GROUP1_SETPOINT5 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT5's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP1_SETPOINT5_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT5;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP1_SETPOINT5 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT5's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP1_SETPOINT5_DIV0
    get_CLOCK_GROUP1_SETPOINT5_DIV0() volatile
    {
        return CCM_CLOCK_GROUP1_SETPOINT5_DIV0((CLOCK_GROUP1_SETPOINT5 >> 0u) &
                                               0b1111u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT5's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP1_SETPOINT5_DIV0(
        CCM_CLOCK_GROUP1_SETPOINT5_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT5;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT5 = curr;
    }

    /**
     * Get all of CLOCK_GROUP1_SETPOINT5's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP1_SETPOINT5(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT5_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT5;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP1_SETPOINT5_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP1_SETPOINT5's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP1_SETPOINT5(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT5_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT5;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT5 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT6's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT6_GRADE() volatile
    {
        return (CLOCK_GROUP1_SETPOINT6 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT6's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP1_SETPOINT6_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT6;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP1_SETPOINT6 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT6's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP1_SETPOINT6_OFF() volatile
    {
        return CLOCK_GROUP1_SETPOINT6 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT6's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP1_SETPOINT6_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT6 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP1_SETPOINT6's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP1_SETPOINT6_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT6 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP1_SETPOINT6's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP1_SETPOINT6_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT6 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT6's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT6_RSTDIV() volatile
    {
        return (CLOCK_GROUP1_SETPOINT6 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT6's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP1_SETPOINT6_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT6;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP1_SETPOINT6 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT6's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP1_SETPOINT6_DIV0
    get_CLOCK_GROUP1_SETPOINT6_DIV0() volatile
    {
        return CCM_CLOCK_GROUP1_SETPOINT6_DIV0((CLOCK_GROUP1_SETPOINT6 >> 0u) &
                                               0b1111u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT6's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP1_SETPOINT6_DIV0(
        CCM_CLOCK_GROUP1_SETPOINT6_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT6;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT6 = curr;
    }

    /**
     * Get all of CLOCK_GROUP1_SETPOINT6's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP1_SETPOINT6(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT6_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT6;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP1_SETPOINT6_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP1_SETPOINT6's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP1_SETPOINT6(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT6_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT6;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT6 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT7's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT7_GRADE() volatile
    {
        return (CLOCK_GROUP1_SETPOINT7 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT7's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP1_SETPOINT7_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT7;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP1_SETPOINT7 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT7's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP1_SETPOINT7_OFF() volatile
    {
        return CLOCK_GROUP1_SETPOINT7 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT7's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP1_SETPOINT7_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT7 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP1_SETPOINT7's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP1_SETPOINT7_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT7 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP1_SETPOINT7's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP1_SETPOINT7_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT7 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT7's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT7_RSTDIV() volatile
    {
        return (CLOCK_GROUP1_SETPOINT7 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT7's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP1_SETPOINT7_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT7;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP1_SETPOINT7 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT7's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP1_SETPOINT7_DIV0
    get_CLOCK_GROUP1_SETPOINT7_DIV0() volatile
    {
        return CCM_CLOCK_GROUP1_SETPOINT7_DIV0((CLOCK_GROUP1_SETPOINT7 >> 0u) &
                                               0b1111u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT7's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP1_SETPOINT7_DIV0(
        CCM_CLOCK_GROUP1_SETPOINT7_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT7;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT7 = curr;
    }

    /**
     * Get all of CLOCK_GROUP1_SETPOINT7's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP1_SETPOINT7(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT7_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT7;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP1_SETPOINT7_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP1_SETPOINT7's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP1_SETPOINT7(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT7_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT7;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT7 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT8's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT8_GRADE() volatile
    {
        return (CLOCK_GROUP1_SETPOINT8 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT8's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP1_SETPOINT8_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT8;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP1_SETPOINT8 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT8's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP1_SETPOINT8_OFF() volatile
    {
        return CLOCK_GROUP1_SETPOINT8 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT8's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP1_SETPOINT8_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT8 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP1_SETPOINT8's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP1_SETPOINT8_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT8 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP1_SETPOINT8's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP1_SETPOINT8_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT8 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT8's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT8_RSTDIV() volatile
    {
        return (CLOCK_GROUP1_SETPOINT8 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT8's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP1_SETPOINT8_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT8;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP1_SETPOINT8 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT8's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP1_SETPOINT8_DIV0
    get_CLOCK_GROUP1_SETPOINT8_DIV0() volatile
    {
        return CCM_CLOCK_GROUP1_SETPOINT8_DIV0((CLOCK_GROUP1_SETPOINT8 >> 0u) &
                                               0b1111u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT8's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP1_SETPOINT8_DIV0(
        CCM_CLOCK_GROUP1_SETPOINT8_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT8;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT8 = curr;
    }

    /**
     * Get all of CLOCK_GROUP1_SETPOINT8's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP1_SETPOINT8(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT8_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT8;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP1_SETPOINT8_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP1_SETPOINT8's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP1_SETPOINT8(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT8_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT8;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT8 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT9's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT9_GRADE() volatile
    {
        return (CLOCK_GROUP1_SETPOINT9 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT9's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP1_SETPOINT9_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT9;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP1_SETPOINT9 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT9's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP1_SETPOINT9_OFF() volatile
    {
        return CLOCK_GROUP1_SETPOINT9 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT9's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP1_SETPOINT9_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT9 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP1_SETPOINT9's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP1_SETPOINT9_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT9 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP1_SETPOINT9's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP1_SETPOINT9_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT9 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT9's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT9_RSTDIV() volatile
    {
        return (CLOCK_GROUP1_SETPOINT9 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT9's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP1_SETPOINT9_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT9;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP1_SETPOINT9 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT9's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP1_SETPOINT9_DIV0
    get_CLOCK_GROUP1_SETPOINT9_DIV0() volatile
    {
        return CCM_CLOCK_GROUP1_SETPOINT9_DIV0((CLOCK_GROUP1_SETPOINT9 >> 0u) &
                                               0b1111u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT9's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP1_SETPOINT9_DIV0(
        CCM_CLOCK_GROUP1_SETPOINT9_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT9;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT9 = curr;
    }

    /**
     * Get all of CLOCK_GROUP1_SETPOINT9's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP1_SETPOINT9(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT9_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT9;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP1_SETPOINT9_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP1_SETPOINT9's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP1_SETPOINT9(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT9_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT9;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT9 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT10's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT10_GRADE() volatile
    {
        return (CLOCK_GROUP1_SETPOINT10 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT10's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP1_SETPOINT10_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT10;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP1_SETPOINT10 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT10's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP1_SETPOINT10_OFF() volatile
    {
        return CLOCK_GROUP1_SETPOINT10 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT10's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP1_SETPOINT10_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT10 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP1_SETPOINT10's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP1_SETPOINT10_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT10 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP1_SETPOINT10's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP1_SETPOINT10_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT10 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT10's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT10_RSTDIV() volatile
    {
        return (CLOCK_GROUP1_SETPOINT10 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT10's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP1_SETPOINT10_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT10;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP1_SETPOINT10 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT10's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP1_SETPOINT10_DIV0
    get_CLOCK_GROUP1_SETPOINT10_DIV0() volatile
    {
        return CCM_CLOCK_GROUP1_SETPOINT10_DIV0(
            (CLOCK_GROUP1_SETPOINT10 >> 0u) & 0b1111u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT10's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP1_SETPOINT10_DIV0(
        CCM_CLOCK_GROUP1_SETPOINT10_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT10;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT10 = curr;
    }

    /**
     * Get all of CLOCK_GROUP1_SETPOINT10's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP1_SETPOINT10(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT10_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT10;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP1_SETPOINT10_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP1_SETPOINT10's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP1_SETPOINT10(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT10_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT10;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT10 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT11's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT11_GRADE() volatile
    {
        return (CLOCK_GROUP1_SETPOINT11 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT11's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP1_SETPOINT11_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT11;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP1_SETPOINT11 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT11's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP1_SETPOINT11_OFF() volatile
    {
        return CLOCK_GROUP1_SETPOINT11 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT11's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP1_SETPOINT11_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT11 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP1_SETPOINT11's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP1_SETPOINT11_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT11 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP1_SETPOINT11's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP1_SETPOINT11_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT11 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT11's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT11_RSTDIV() volatile
    {
        return (CLOCK_GROUP1_SETPOINT11 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT11's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP1_SETPOINT11_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT11;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP1_SETPOINT11 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT11's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP1_SETPOINT11_DIV0
    get_CLOCK_GROUP1_SETPOINT11_DIV0() volatile
    {
        return CCM_CLOCK_GROUP1_SETPOINT11_DIV0(
            (CLOCK_GROUP1_SETPOINT11 >> 0u) & 0b1111u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT11's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP1_SETPOINT11_DIV0(
        CCM_CLOCK_GROUP1_SETPOINT11_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT11;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT11 = curr;
    }

    /**
     * Get all of CLOCK_GROUP1_SETPOINT11's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP1_SETPOINT11(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT11_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT11;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP1_SETPOINT11_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP1_SETPOINT11's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP1_SETPOINT11(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT11_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT11;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT11 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT12's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT12_GRADE() volatile
    {
        return (CLOCK_GROUP1_SETPOINT12 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT12's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP1_SETPOINT12_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT12;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP1_SETPOINT12 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT12's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP1_SETPOINT12_OFF() volatile
    {
        return CLOCK_GROUP1_SETPOINT12 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT12's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP1_SETPOINT12_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT12 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP1_SETPOINT12's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP1_SETPOINT12_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT12 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP1_SETPOINT12's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP1_SETPOINT12_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT12 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT12's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT12_RSTDIV() volatile
    {
        return (CLOCK_GROUP1_SETPOINT12 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT12's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP1_SETPOINT12_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT12;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP1_SETPOINT12 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT12's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP1_SETPOINT12_DIV0
    get_CLOCK_GROUP1_SETPOINT12_DIV0() volatile
    {
        return CCM_CLOCK_GROUP1_SETPOINT12_DIV0(
            (CLOCK_GROUP1_SETPOINT12 >> 0u) & 0b1111u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT12's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP1_SETPOINT12_DIV0(
        CCM_CLOCK_GROUP1_SETPOINT12_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT12;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT12 = curr;
    }

    /**
     * Get all of CLOCK_GROUP1_SETPOINT12's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP1_SETPOINT12(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT12_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT12;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP1_SETPOINT12_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP1_SETPOINT12's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP1_SETPOINT12(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT12_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT12;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT12 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT13's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT13_GRADE() volatile
    {
        return (CLOCK_GROUP1_SETPOINT13 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT13's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP1_SETPOINT13_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT13;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP1_SETPOINT13 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT13's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP1_SETPOINT13_OFF() volatile
    {
        return CLOCK_GROUP1_SETPOINT13 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT13's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP1_SETPOINT13_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT13 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP1_SETPOINT13's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP1_SETPOINT13_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT13 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP1_SETPOINT13's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP1_SETPOINT13_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT13 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT13's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT13_RSTDIV() volatile
    {
        return (CLOCK_GROUP1_SETPOINT13 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT13's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP1_SETPOINT13_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT13;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP1_SETPOINT13 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT13's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP1_SETPOINT13_DIV0
    get_CLOCK_GROUP1_SETPOINT13_DIV0() volatile
    {
        return CCM_CLOCK_GROUP1_SETPOINT13_DIV0(
            (CLOCK_GROUP1_SETPOINT13 >> 0u) & 0b1111u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT13's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP1_SETPOINT13_DIV0(
        CCM_CLOCK_GROUP1_SETPOINT13_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT13;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT13 = curr;
    }

    /**
     * Get all of CLOCK_GROUP1_SETPOINT13's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP1_SETPOINT13(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT13_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT13;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP1_SETPOINT13_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP1_SETPOINT13's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP1_SETPOINT13(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT13_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT13;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT13 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT14's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT14_GRADE() volatile
    {
        return (CLOCK_GROUP1_SETPOINT14 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT14's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP1_SETPOINT14_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT14;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP1_SETPOINT14 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT14's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP1_SETPOINT14_OFF() volatile
    {
        return CLOCK_GROUP1_SETPOINT14 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT14's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP1_SETPOINT14_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT14 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP1_SETPOINT14's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP1_SETPOINT14_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT14 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP1_SETPOINT14's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP1_SETPOINT14_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT14 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT14's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT14_RSTDIV() volatile
    {
        return (CLOCK_GROUP1_SETPOINT14 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT14's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP1_SETPOINT14_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT14;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP1_SETPOINT14 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT14's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP1_SETPOINT14_DIV0
    get_CLOCK_GROUP1_SETPOINT14_DIV0() volatile
    {
        return CCM_CLOCK_GROUP1_SETPOINT14_DIV0(
            (CLOCK_GROUP1_SETPOINT14 >> 0u) & 0b1111u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT14's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP1_SETPOINT14_DIV0(
        CCM_CLOCK_GROUP1_SETPOINT14_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT14;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT14 = curr;
    }

    /**
     * Get all of CLOCK_GROUP1_SETPOINT14's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP1_SETPOINT14(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT14_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT14;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP1_SETPOINT14_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP1_SETPOINT14's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP1_SETPOINT14(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT14_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT14;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT14 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT15's GRADE field.
     *
     * Grade
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT15_GRADE() volatile
    {
        return (CLOCK_GROUP1_SETPOINT15 >> 28u) & 0b1111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT15's GRADE field.
     *
     * Grade
     */
    inline void set_CLOCK_GROUP1_SETPOINT15_GRADE(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT15;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        CLOCK_GROUP1_SETPOINT15 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT15's OFF bit.
     *
     * OFF
     */
    inline bool get_CLOCK_GROUP1_SETPOINT15_OFF() volatile
    {
        return CLOCK_GROUP1_SETPOINT15 & (1u << 24u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT15's OFF bit.
     *
     * OFF
     */
    inline void set_CLOCK_GROUP1_SETPOINT15_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT15 |= 1u << 24u;
    }

    /**
     * Clear CLOCK_GROUP1_SETPOINT15's OFF bit.
     *
     * OFF
     */
    inline void clear_CLOCK_GROUP1_SETPOINT15_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT15 &= ~(1u << 24u);
    }

    /**
     * Toggle CLOCK_GROUP1_SETPOINT15's OFF bit.
     *
     * OFF
     */
    inline void toggle_CLOCK_GROUP1_SETPOINT15_OFF() volatile
    {
        CLOCK_GROUP1_SETPOINT15 ^= 1u << 24u;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT15's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline uint8_t get_CLOCK_GROUP1_SETPOINT15_RSTDIV() volatile
    {
        return (CLOCK_GROUP1_SETPOINT15 >> 16u) & 0b11111111u;
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT15's RSTDIV field.
     *
     * Clock group global restart count
     */
    inline void set_CLOCK_GROUP1_SETPOINT15_RSTDIV(uint8_t value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT15;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CLOCK_GROUP1_SETPOINT15 = curr;
    }

    /**
     * Get CLOCK_GROUP1_SETPOINT15's DIV0 field.
     *
     * Clock divider
     */
    inline CCM_CLOCK_GROUP1_SETPOINT15_DIV0
    get_CLOCK_GROUP1_SETPOINT15_DIV0() volatile
    {
        return CCM_CLOCK_GROUP1_SETPOINT15_DIV0(
            (CLOCK_GROUP1_SETPOINT15 >> 0u) & 0b1111u);
    }

    /**
     * Set CLOCK_GROUP1_SETPOINT15's DIV0 field.
     *
     * Clock divider
     */
    inline void set_CLOCK_GROUP1_SETPOINT15_DIV0(
        CCM_CLOCK_GROUP1_SETPOINT15_DIV0 value) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT15;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT15 = curr;
    }

    /**
     * Get all of CLOCK_GROUP1_SETPOINT15's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void get_CLOCK_GROUP1_SETPOINT15(
        uint8_t &GRADE, bool &OFF, uint8_t &RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT15_DIV0 &DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT15;

        GRADE = (curr >> 28u) & 0b1111u;
        OFF = curr & (1u << 24u);
        RSTDIV = (curr >> 16u) & 0b11111111u;
        DIV0 = CCM_CLOCK_GROUP1_SETPOINT15_DIV0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CLOCK_GROUP1_SETPOINT15's bit fields.
     *
     * (read-write) Setpoint setting
     */
    inline void set_CLOCK_GROUP1_SETPOINT15(
        uint8_t GRADE, bool OFF, uint8_t RSTDIV,
        CCM_CLOCK_GROUP1_SETPOINT15_DIV0 DIV0) volatile
    {
        uint32_t curr = CLOCK_GROUP1_SETPOINT15;

        curr &= ~(0b1111u << 28u);
        curr |= (GRADE & 0b1111u) << 28u;
        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (RSTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(DIV0) & 0b1111u) << 0u;

        CLOCK_GROUP1_SETPOINT15 = curr;
    }

    /**
     * Get GPR_PRIVATE1's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE1_GPR() volatile
    {
        return (GPR_PRIVATE1 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE1's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE1_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE1;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE1 = curr;
    }

    /**
     * Get GPR_PRIVATE1_SET's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE1_SET_GPR() volatile
    {
        return (GPR_PRIVATE1_SET >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE1_SET's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE1_SET_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE1_SET;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE1_SET = curr;
    }

    /**
     * Get GPR_PRIVATE1_CLR's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE1_CLR_GPR() volatile
    {
        return (GPR_PRIVATE1_CLR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE1_CLR's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE1_CLR_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE1_CLR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE1_CLR = curr;
    }

    /**
     * Get GPR_PRIVATE1_TOG's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE1_TOG_GPR() volatile
    {
        return (GPR_PRIVATE1_TOG >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE1_TOG's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE1_TOG_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE1_TOG;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE1_TOG = curr;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_LOCK_MODE() volatile
    {
        return GPR_PRIVATE1_AUTHEN & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE1_AUTHEN_LOCK_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_LOCK_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_LOCK_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE1_AUTHEN & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE1_AUTHEN_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_LOCK_LIST() volatile
    {
        return GPR_PRIVATE1_AUTHEN & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE1_AUTHEN_LOCK_LIST() volatile
    {
        GPR_PRIVATE1_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_LOCK_LIST() volatile
    {
        GPR_PRIVATE1_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_LOCK_LIST() volatile
    {
        GPR_PRIVATE1_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline CCM_GPR_PRIVATE1_AUTHEN_WHITE_LIST
    get_GPR_PRIVATE1_AUTHEN_WHITE_LIST() volatile
    {
        return CCM_GPR_PRIVATE1_AUTHEN_WHITE_LIST((GPR_PRIVATE1_AUTHEN >> 8u) &
                                                  0b1111u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE1_AUTHEN_WHITE_LIST(
        CCM_GPR_PRIVATE1_AUTHEN_WHITE_LIST value) volatile
    {
        uint32_t curr = GPR_PRIVATE1_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(value) & 0b1111u) << 8u;

        GPR_PRIVATE1_AUTHEN = curr;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_LOCK_TZ() volatile
    {
        return GPR_PRIVATE1_AUTHEN & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE1_AUTHEN_LOCK_TZ() volatile
    {
        GPR_PRIVATE1_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_LOCK_TZ() volatile
    {
        GPR_PRIVATE1_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_LOCK_TZ() volatile
    {
        GPR_PRIVATE1_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_TZ_NS() volatile
    {
        return GPR_PRIVATE1_AUTHEN & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE1_AUTHEN_TZ_NS() volatile
    {
        GPR_PRIVATE1_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_TZ_NS() volatile
    {
        GPR_PRIVATE1_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_TZ_NS() volatile
    {
        GPR_PRIVATE1_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_TZ_USER() volatile
    {
        return GPR_PRIVATE1_AUTHEN & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE1_AUTHEN_TZ_USER() volatile
    {
        GPR_PRIVATE1_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_TZ_USER() volatile
    {
        GPR_PRIVATE1_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_TZ_USER() volatile
    {
        GPR_PRIVATE1_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE1_AUTHEN's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE1_AUTHEN(
        bool &LOCK_MODE, bool &DOMAIN_MODE, bool &LOCK_LIST,
        CCM_GPR_PRIVATE1_AUTHEN_WHITE_LIST &WHITE_LIST, bool &LOCK_TZ,
        bool &TZ_NS, bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE1_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST =
            CCM_GPR_PRIVATE1_AUTHEN_WHITE_LIST((curr >> 8u) & 0b1111u);
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE1_AUTHEN's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE1_AUTHEN(
        bool LOCK_MODE, bool DOMAIN_MODE, bool LOCK_LIST,
        CCM_GPR_PRIVATE1_AUTHEN_WHITE_LIST WHITE_LIST, bool LOCK_TZ,
        bool TZ_NS, bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE1_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(WHITE_LIST) & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE1_AUTHEN = curr;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_SET_LOCK_MODE() volatile
    {
        return GPR_PRIVATE1_AUTHEN_SET & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE1_AUTHEN_SET_LOCK_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN_SET |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_SET_LOCK_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN_SET &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_SET_LOCK_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN_SET ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE1_AUTHEN_SET & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE1_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN_SET |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN_SET &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN_SET ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_SET_LOCK_LIST() volatile
    {
        return GPR_PRIVATE1_AUTHEN_SET & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE1_AUTHEN_SET_LOCK_LIST() volatile
    {
        GPR_PRIVATE1_AUTHEN_SET |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_SET_LOCK_LIST() volatile
    {
        GPR_PRIVATE1_AUTHEN_SET &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_SET_LOCK_LIST() volatile
    {
        GPR_PRIVATE1_AUTHEN_SET ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN_SET's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_PRIVATE1_AUTHEN_SET_WHITE_LIST() volatile
    {
        return (GPR_PRIVATE1_AUTHEN_SET >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN_SET's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE1_AUTHEN_SET_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE1_AUTHEN_SET;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_PRIVATE1_AUTHEN_SET = curr;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_SET_LOCK_TZ() volatile
    {
        return GPR_PRIVATE1_AUTHEN_SET & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE1_AUTHEN_SET_LOCK_TZ() volatile
    {
        GPR_PRIVATE1_AUTHEN_SET |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_SET_LOCK_TZ() volatile
    {
        GPR_PRIVATE1_AUTHEN_SET &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_SET_LOCK_TZ() volatile
    {
        GPR_PRIVATE1_AUTHEN_SET ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_SET_TZ_NS() volatile
    {
        return GPR_PRIVATE1_AUTHEN_SET & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE1_AUTHEN_SET_TZ_NS() volatile
    {
        GPR_PRIVATE1_AUTHEN_SET |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_SET_TZ_NS() volatile
    {
        GPR_PRIVATE1_AUTHEN_SET &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_SET_TZ_NS() volatile
    {
        GPR_PRIVATE1_AUTHEN_SET ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_SET_TZ_USER() volatile
    {
        return GPR_PRIVATE1_AUTHEN_SET & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE1_AUTHEN_SET_TZ_USER() volatile
    {
        GPR_PRIVATE1_AUTHEN_SET |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_SET_TZ_USER() volatile
    {
        GPR_PRIVATE1_AUTHEN_SET &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_SET_TZ_USER() volatile
    {
        GPR_PRIVATE1_AUTHEN_SET ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE1_AUTHEN_SET's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE1_AUTHEN_SET(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                            bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE1_AUTHEN_SET;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE1_AUTHEN_SET's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE1_AUTHEN_SET(bool LOCK_MODE, bool DOMAIN_MODE,
                                            bool LOCK_LIST, uint8_t WHITE_LIST,
                                            bool LOCK_TZ, bool TZ_NS,
                                            bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE1_AUTHEN_SET;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE1_AUTHEN_SET = curr;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_CLR_LOCK_MODE() volatile
    {
        return GPR_PRIVATE1_AUTHEN_CLR & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE1_AUTHEN_CLR_LOCK_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN_CLR |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_CLR_LOCK_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN_CLR &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_CLR_LOCK_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN_CLR ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE1_AUTHEN_CLR & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE1_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN_CLR |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN_CLR &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN_CLR ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_CLR_LOCK_LIST() volatile
    {
        return GPR_PRIVATE1_AUTHEN_CLR & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE1_AUTHEN_CLR_LOCK_LIST() volatile
    {
        GPR_PRIVATE1_AUTHEN_CLR |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_CLR_LOCK_LIST() volatile
    {
        GPR_PRIVATE1_AUTHEN_CLR &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_CLR_LOCK_LIST() volatile
    {
        GPR_PRIVATE1_AUTHEN_CLR ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN_CLR's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_PRIVATE1_AUTHEN_CLR_WHITE_LIST() volatile
    {
        return (GPR_PRIVATE1_AUTHEN_CLR >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN_CLR's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE1_AUTHEN_CLR_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE1_AUTHEN_CLR;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_PRIVATE1_AUTHEN_CLR = curr;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_CLR_LOCK_TZ() volatile
    {
        return GPR_PRIVATE1_AUTHEN_CLR & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE1_AUTHEN_CLR_LOCK_TZ() volatile
    {
        GPR_PRIVATE1_AUTHEN_CLR |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_CLR_LOCK_TZ() volatile
    {
        GPR_PRIVATE1_AUTHEN_CLR &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_CLR_LOCK_TZ() volatile
    {
        GPR_PRIVATE1_AUTHEN_CLR ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_CLR_TZ_NS() volatile
    {
        return GPR_PRIVATE1_AUTHEN_CLR & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE1_AUTHEN_CLR_TZ_NS() volatile
    {
        GPR_PRIVATE1_AUTHEN_CLR |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_CLR_TZ_NS() volatile
    {
        GPR_PRIVATE1_AUTHEN_CLR &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_CLR_TZ_NS() volatile
    {
        GPR_PRIVATE1_AUTHEN_CLR ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_CLR_TZ_USER() volatile
    {
        return GPR_PRIVATE1_AUTHEN_CLR & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE1_AUTHEN_CLR_TZ_USER() volatile
    {
        GPR_PRIVATE1_AUTHEN_CLR |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_CLR_TZ_USER() volatile
    {
        GPR_PRIVATE1_AUTHEN_CLR &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_CLR_TZ_USER() volatile
    {
        GPR_PRIVATE1_AUTHEN_CLR ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE1_AUTHEN_CLR's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE1_AUTHEN_CLR(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                            bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE1_AUTHEN_CLR;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE1_AUTHEN_CLR's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE1_AUTHEN_CLR(bool LOCK_MODE, bool DOMAIN_MODE,
                                            bool LOCK_LIST, uint8_t WHITE_LIST,
                                            bool LOCK_TZ, bool TZ_NS,
                                            bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE1_AUTHEN_CLR;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE1_AUTHEN_CLR = curr;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_TOG_LOCK_MODE() volatile
    {
        return GPR_PRIVATE1_AUTHEN_TOG & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE1_AUTHEN_TOG_LOCK_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN_TOG |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_TOG_LOCK_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN_TOG &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_TOG_LOCK_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN_TOG ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE1_AUTHEN_TOG & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE1_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN_TOG |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN_TOG &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE1_AUTHEN_TOG ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_TOG_LOCK_LIST() volatile
    {
        return GPR_PRIVATE1_AUTHEN_TOG & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE1_AUTHEN_TOG_LOCK_LIST() volatile
    {
        GPR_PRIVATE1_AUTHEN_TOG |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_TOG_LOCK_LIST() volatile
    {
        GPR_PRIVATE1_AUTHEN_TOG &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_TOG_LOCK_LIST() volatile
    {
        GPR_PRIVATE1_AUTHEN_TOG ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN_TOG's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_PRIVATE1_AUTHEN_TOG_WHITE_LIST() volatile
    {
        return (GPR_PRIVATE1_AUTHEN_TOG >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN_TOG's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE1_AUTHEN_TOG_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE1_AUTHEN_TOG;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_PRIVATE1_AUTHEN_TOG = curr;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_TOG_LOCK_TZ() volatile
    {
        return GPR_PRIVATE1_AUTHEN_TOG & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE1_AUTHEN_TOG_LOCK_TZ() volatile
    {
        GPR_PRIVATE1_AUTHEN_TOG |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_TOG_LOCK_TZ() volatile
    {
        GPR_PRIVATE1_AUTHEN_TOG &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_TOG_LOCK_TZ() volatile
    {
        GPR_PRIVATE1_AUTHEN_TOG ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_TOG_TZ_NS() volatile
    {
        return GPR_PRIVATE1_AUTHEN_TOG & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE1_AUTHEN_TOG_TZ_NS() volatile
    {
        GPR_PRIVATE1_AUTHEN_TOG |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_TOG_TZ_NS() volatile
    {
        GPR_PRIVATE1_AUTHEN_TOG &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_TOG_TZ_NS() volatile
    {
        GPR_PRIVATE1_AUTHEN_TOG ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE1_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE1_AUTHEN_TOG_TZ_USER() volatile
    {
        return GPR_PRIVATE1_AUTHEN_TOG & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE1_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE1_AUTHEN_TOG_TZ_USER() volatile
    {
        GPR_PRIVATE1_AUTHEN_TOG |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE1_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE1_AUTHEN_TOG_TZ_USER() volatile
    {
        GPR_PRIVATE1_AUTHEN_TOG &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE1_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE1_AUTHEN_TOG_TZ_USER() volatile
    {
        GPR_PRIVATE1_AUTHEN_TOG ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE1_AUTHEN_TOG's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE1_AUTHEN_TOG(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                            bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE1_AUTHEN_TOG;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE1_AUTHEN_TOG's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE1_AUTHEN_TOG(bool LOCK_MODE, bool DOMAIN_MODE,
                                            bool LOCK_LIST, uint8_t WHITE_LIST,
                                            bool LOCK_TZ, bool TZ_NS,
                                            bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE1_AUTHEN_TOG;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE1_AUTHEN_TOG = curr;
    }

    /**
     * Get GPR_PRIVATE2's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE2_GPR() volatile
    {
        return (GPR_PRIVATE2 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE2's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE2_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE2;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE2 = curr;
    }

    /**
     * Get GPR_PRIVATE2_SET's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE2_SET_GPR() volatile
    {
        return (GPR_PRIVATE2_SET >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE2_SET's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE2_SET_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE2_SET;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE2_SET = curr;
    }

    /**
     * Get GPR_PRIVATE2_CLR's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE2_CLR_GPR() volatile
    {
        return (GPR_PRIVATE2_CLR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE2_CLR's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE2_CLR_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE2_CLR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE2_CLR = curr;
    }

    /**
     * Get GPR_PRIVATE2_TOG's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE2_TOG_GPR() volatile
    {
        return (GPR_PRIVATE2_TOG >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE2_TOG's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE2_TOG_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE2_TOG;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE2_TOG = curr;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_LOCK_MODE() volatile
    {
        return GPR_PRIVATE2_AUTHEN & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE2_AUTHEN_LOCK_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_LOCK_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_LOCK_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE2_AUTHEN & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE2_AUTHEN_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_LOCK_LIST() volatile
    {
        return GPR_PRIVATE2_AUTHEN & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE2_AUTHEN_LOCK_LIST() volatile
    {
        GPR_PRIVATE2_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_LOCK_LIST() volatile
    {
        GPR_PRIVATE2_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_LOCK_LIST() volatile
    {
        GPR_PRIVATE2_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline CCM_GPR_PRIVATE2_AUTHEN_WHITE_LIST
    get_GPR_PRIVATE2_AUTHEN_WHITE_LIST() volatile
    {
        return CCM_GPR_PRIVATE2_AUTHEN_WHITE_LIST((GPR_PRIVATE2_AUTHEN >> 8u) &
                                                  0b1111u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE2_AUTHEN_WHITE_LIST(
        CCM_GPR_PRIVATE2_AUTHEN_WHITE_LIST value) volatile
    {
        uint32_t curr = GPR_PRIVATE2_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(value) & 0b1111u) << 8u;

        GPR_PRIVATE2_AUTHEN = curr;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_LOCK_TZ() volatile
    {
        return GPR_PRIVATE2_AUTHEN & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE2_AUTHEN_LOCK_TZ() volatile
    {
        GPR_PRIVATE2_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_LOCK_TZ() volatile
    {
        GPR_PRIVATE2_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_LOCK_TZ() volatile
    {
        GPR_PRIVATE2_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_TZ_NS() volatile
    {
        return GPR_PRIVATE2_AUTHEN & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE2_AUTHEN_TZ_NS() volatile
    {
        GPR_PRIVATE2_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_TZ_NS() volatile
    {
        GPR_PRIVATE2_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_TZ_NS() volatile
    {
        GPR_PRIVATE2_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_TZ_USER() volatile
    {
        return GPR_PRIVATE2_AUTHEN & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE2_AUTHEN_TZ_USER() volatile
    {
        GPR_PRIVATE2_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_TZ_USER() volatile
    {
        GPR_PRIVATE2_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_TZ_USER() volatile
    {
        GPR_PRIVATE2_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE2_AUTHEN's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE2_AUTHEN(
        bool &LOCK_MODE, bool &DOMAIN_MODE, bool &LOCK_LIST,
        CCM_GPR_PRIVATE2_AUTHEN_WHITE_LIST &WHITE_LIST, bool &LOCK_TZ,
        bool &TZ_NS, bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE2_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST =
            CCM_GPR_PRIVATE2_AUTHEN_WHITE_LIST((curr >> 8u) & 0b1111u);
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE2_AUTHEN's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE2_AUTHEN(
        bool LOCK_MODE, bool DOMAIN_MODE, bool LOCK_LIST,
        CCM_GPR_PRIVATE2_AUTHEN_WHITE_LIST WHITE_LIST, bool LOCK_TZ,
        bool TZ_NS, bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE2_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(WHITE_LIST) & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE2_AUTHEN = curr;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_SET_LOCK_MODE() volatile
    {
        return GPR_PRIVATE2_AUTHEN_SET & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE2_AUTHEN_SET_LOCK_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN_SET |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_SET_LOCK_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN_SET &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_SET_LOCK_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN_SET ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE2_AUTHEN_SET & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE2_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN_SET |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN_SET &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN_SET ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_SET_LOCK_LIST() volatile
    {
        return GPR_PRIVATE2_AUTHEN_SET & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE2_AUTHEN_SET_LOCK_LIST() volatile
    {
        GPR_PRIVATE2_AUTHEN_SET |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_SET_LOCK_LIST() volatile
    {
        GPR_PRIVATE2_AUTHEN_SET &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_SET_LOCK_LIST() volatile
    {
        GPR_PRIVATE2_AUTHEN_SET ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN_SET's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_PRIVATE2_AUTHEN_SET_WHITE_LIST() volatile
    {
        return (GPR_PRIVATE2_AUTHEN_SET >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN_SET's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE2_AUTHEN_SET_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE2_AUTHEN_SET;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_PRIVATE2_AUTHEN_SET = curr;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_SET_LOCK_TZ() volatile
    {
        return GPR_PRIVATE2_AUTHEN_SET & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE2_AUTHEN_SET_LOCK_TZ() volatile
    {
        GPR_PRIVATE2_AUTHEN_SET |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_SET_LOCK_TZ() volatile
    {
        GPR_PRIVATE2_AUTHEN_SET &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_SET_LOCK_TZ() volatile
    {
        GPR_PRIVATE2_AUTHEN_SET ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_SET_TZ_NS() volatile
    {
        return GPR_PRIVATE2_AUTHEN_SET & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE2_AUTHEN_SET_TZ_NS() volatile
    {
        GPR_PRIVATE2_AUTHEN_SET |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_SET_TZ_NS() volatile
    {
        GPR_PRIVATE2_AUTHEN_SET &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_SET_TZ_NS() volatile
    {
        GPR_PRIVATE2_AUTHEN_SET ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_SET_TZ_USER() volatile
    {
        return GPR_PRIVATE2_AUTHEN_SET & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE2_AUTHEN_SET_TZ_USER() volatile
    {
        GPR_PRIVATE2_AUTHEN_SET |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_SET_TZ_USER() volatile
    {
        GPR_PRIVATE2_AUTHEN_SET &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_SET_TZ_USER() volatile
    {
        GPR_PRIVATE2_AUTHEN_SET ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE2_AUTHEN_SET's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE2_AUTHEN_SET(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                            bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE2_AUTHEN_SET;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE2_AUTHEN_SET's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE2_AUTHEN_SET(bool LOCK_MODE, bool DOMAIN_MODE,
                                            bool LOCK_LIST, uint8_t WHITE_LIST,
                                            bool LOCK_TZ, bool TZ_NS,
                                            bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE2_AUTHEN_SET;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE2_AUTHEN_SET = curr;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_CLR_LOCK_MODE() volatile
    {
        return GPR_PRIVATE2_AUTHEN_CLR & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE2_AUTHEN_CLR_LOCK_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN_CLR |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_CLR_LOCK_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN_CLR &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_CLR_LOCK_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN_CLR ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE2_AUTHEN_CLR & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE2_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN_CLR |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN_CLR &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN_CLR ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_CLR_LOCK_LIST() volatile
    {
        return GPR_PRIVATE2_AUTHEN_CLR & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE2_AUTHEN_CLR_LOCK_LIST() volatile
    {
        GPR_PRIVATE2_AUTHEN_CLR |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_CLR_LOCK_LIST() volatile
    {
        GPR_PRIVATE2_AUTHEN_CLR &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_CLR_LOCK_LIST() volatile
    {
        GPR_PRIVATE2_AUTHEN_CLR ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN_CLR's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_PRIVATE2_AUTHEN_CLR_WHITE_LIST() volatile
    {
        return (GPR_PRIVATE2_AUTHEN_CLR >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN_CLR's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE2_AUTHEN_CLR_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE2_AUTHEN_CLR;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_PRIVATE2_AUTHEN_CLR = curr;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_CLR_LOCK_TZ() volatile
    {
        return GPR_PRIVATE2_AUTHEN_CLR & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE2_AUTHEN_CLR_LOCK_TZ() volatile
    {
        GPR_PRIVATE2_AUTHEN_CLR |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_CLR_LOCK_TZ() volatile
    {
        GPR_PRIVATE2_AUTHEN_CLR &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_CLR_LOCK_TZ() volatile
    {
        GPR_PRIVATE2_AUTHEN_CLR ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_CLR_TZ_NS() volatile
    {
        return GPR_PRIVATE2_AUTHEN_CLR & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE2_AUTHEN_CLR_TZ_NS() volatile
    {
        GPR_PRIVATE2_AUTHEN_CLR |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_CLR_TZ_NS() volatile
    {
        GPR_PRIVATE2_AUTHEN_CLR &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_CLR_TZ_NS() volatile
    {
        GPR_PRIVATE2_AUTHEN_CLR ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_CLR_TZ_USER() volatile
    {
        return GPR_PRIVATE2_AUTHEN_CLR & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE2_AUTHEN_CLR_TZ_USER() volatile
    {
        GPR_PRIVATE2_AUTHEN_CLR |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_CLR_TZ_USER() volatile
    {
        GPR_PRIVATE2_AUTHEN_CLR &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_CLR_TZ_USER() volatile
    {
        GPR_PRIVATE2_AUTHEN_CLR ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE2_AUTHEN_CLR's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE2_AUTHEN_CLR(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                            bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE2_AUTHEN_CLR;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE2_AUTHEN_CLR's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE2_AUTHEN_CLR(bool LOCK_MODE, bool DOMAIN_MODE,
                                            bool LOCK_LIST, uint8_t WHITE_LIST,
                                            bool LOCK_TZ, bool TZ_NS,
                                            bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE2_AUTHEN_CLR;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE2_AUTHEN_CLR = curr;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_TOG_LOCK_MODE() volatile
    {
        return GPR_PRIVATE2_AUTHEN_TOG & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE2_AUTHEN_TOG_LOCK_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN_TOG |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_TOG_LOCK_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN_TOG &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_TOG_LOCK_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN_TOG ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE2_AUTHEN_TOG & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE2_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN_TOG |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN_TOG &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE2_AUTHEN_TOG ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_TOG_LOCK_LIST() volatile
    {
        return GPR_PRIVATE2_AUTHEN_TOG & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE2_AUTHEN_TOG_LOCK_LIST() volatile
    {
        GPR_PRIVATE2_AUTHEN_TOG |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_TOG_LOCK_LIST() volatile
    {
        GPR_PRIVATE2_AUTHEN_TOG &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_TOG_LOCK_LIST() volatile
    {
        GPR_PRIVATE2_AUTHEN_TOG ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN_TOG's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_PRIVATE2_AUTHEN_TOG_WHITE_LIST() volatile
    {
        return (GPR_PRIVATE2_AUTHEN_TOG >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN_TOG's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE2_AUTHEN_TOG_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE2_AUTHEN_TOG;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_PRIVATE2_AUTHEN_TOG = curr;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_TOG_LOCK_TZ() volatile
    {
        return GPR_PRIVATE2_AUTHEN_TOG & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE2_AUTHEN_TOG_LOCK_TZ() volatile
    {
        GPR_PRIVATE2_AUTHEN_TOG |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_TOG_LOCK_TZ() volatile
    {
        GPR_PRIVATE2_AUTHEN_TOG &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_TOG_LOCK_TZ() volatile
    {
        GPR_PRIVATE2_AUTHEN_TOG ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_TOG_TZ_NS() volatile
    {
        return GPR_PRIVATE2_AUTHEN_TOG & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE2_AUTHEN_TOG_TZ_NS() volatile
    {
        GPR_PRIVATE2_AUTHEN_TOG |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_TOG_TZ_NS() volatile
    {
        GPR_PRIVATE2_AUTHEN_TOG &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_TOG_TZ_NS() volatile
    {
        GPR_PRIVATE2_AUTHEN_TOG ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE2_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE2_AUTHEN_TOG_TZ_USER() volatile
    {
        return GPR_PRIVATE2_AUTHEN_TOG & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE2_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE2_AUTHEN_TOG_TZ_USER() volatile
    {
        GPR_PRIVATE2_AUTHEN_TOG |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE2_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE2_AUTHEN_TOG_TZ_USER() volatile
    {
        GPR_PRIVATE2_AUTHEN_TOG &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE2_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE2_AUTHEN_TOG_TZ_USER() volatile
    {
        GPR_PRIVATE2_AUTHEN_TOG ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE2_AUTHEN_TOG's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE2_AUTHEN_TOG(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                            bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE2_AUTHEN_TOG;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE2_AUTHEN_TOG's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE2_AUTHEN_TOG(bool LOCK_MODE, bool DOMAIN_MODE,
                                            bool LOCK_LIST, uint8_t WHITE_LIST,
                                            bool LOCK_TZ, bool TZ_NS,
                                            bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE2_AUTHEN_TOG;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE2_AUTHEN_TOG = curr;
    }

    /**
     * Get GPR_PRIVATE3's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE3_GPR() volatile
    {
        return (GPR_PRIVATE3 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE3's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE3_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE3;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE3 = curr;
    }

    /**
     * Get GPR_PRIVATE3_SET's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE3_SET_GPR() volatile
    {
        return (GPR_PRIVATE3_SET >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE3_SET's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE3_SET_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE3_SET;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE3_SET = curr;
    }

    /**
     * Get GPR_PRIVATE3_CLR's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE3_CLR_GPR() volatile
    {
        return (GPR_PRIVATE3_CLR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE3_CLR's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE3_CLR_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE3_CLR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE3_CLR = curr;
    }

    /**
     * Get GPR_PRIVATE3_TOG's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE3_TOG_GPR() volatile
    {
        return (GPR_PRIVATE3_TOG >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE3_TOG's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE3_TOG_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE3_TOG;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE3_TOG = curr;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_LOCK_MODE() volatile
    {
        return GPR_PRIVATE3_AUTHEN & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE3_AUTHEN_LOCK_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_LOCK_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_LOCK_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE3_AUTHEN & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE3_AUTHEN_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_LOCK_LIST() volatile
    {
        return GPR_PRIVATE3_AUTHEN & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE3_AUTHEN_LOCK_LIST() volatile
    {
        GPR_PRIVATE3_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_LOCK_LIST() volatile
    {
        GPR_PRIVATE3_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_LOCK_LIST() volatile
    {
        GPR_PRIVATE3_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline CCM_GPR_PRIVATE3_AUTHEN_WHITE_LIST
    get_GPR_PRIVATE3_AUTHEN_WHITE_LIST() volatile
    {
        return CCM_GPR_PRIVATE3_AUTHEN_WHITE_LIST((GPR_PRIVATE3_AUTHEN >> 8u) &
                                                  0b1111u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE3_AUTHEN_WHITE_LIST(
        CCM_GPR_PRIVATE3_AUTHEN_WHITE_LIST value) volatile
    {
        uint32_t curr = GPR_PRIVATE3_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(value) & 0b1111u) << 8u;

        GPR_PRIVATE3_AUTHEN = curr;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_LOCK_TZ() volatile
    {
        return GPR_PRIVATE3_AUTHEN & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE3_AUTHEN_LOCK_TZ() volatile
    {
        GPR_PRIVATE3_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_LOCK_TZ() volatile
    {
        GPR_PRIVATE3_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_LOCK_TZ() volatile
    {
        GPR_PRIVATE3_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_TZ_NS() volatile
    {
        return GPR_PRIVATE3_AUTHEN & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE3_AUTHEN_TZ_NS() volatile
    {
        GPR_PRIVATE3_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_TZ_NS() volatile
    {
        GPR_PRIVATE3_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_TZ_NS() volatile
    {
        GPR_PRIVATE3_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_TZ_USER() volatile
    {
        return GPR_PRIVATE3_AUTHEN & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE3_AUTHEN_TZ_USER() volatile
    {
        GPR_PRIVATE3_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_TZ_USER() volatile
    {
        GPR_PRIVATE3_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_TZ_USER() volatile
    {
        GPR_PRIVATE3_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE3_AUTHEN's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE3_AUTHEN(
        bool &LOCK_MODE, bool &DOMAIN_MODE, bool &LOCK_LIST,
        CCM_GPR_PRIVATE3_AUTHEN_WHITE_LIST &WHITE_LIST, bool &LOCK_TZ,
        bool &TZ_NS, bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE3_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST =
            CCM_GPR_PRIVATE3_AUTHEN_WHITE_LIST((curr >> 8u) & 0b1111u);
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE3_AUTHEN's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE3_AUTHEN(
        bool LOCK_MODE, bool DOMAIN_MODE, bool LOCK_LIST,
        CCM_GPR_PRIVATE3_AUTHEN_WHITE_LIST WHITE_LIST, bool LOCK_TZ,
        bool TZ_NS, bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE3_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(WHITE_LIST) & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE3_AUTHEN = curr;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_SET_LOCK_MODE() volatile
    {
        return GPR_PRIVATE3_AUTHEN_SET & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE3_AUTHEN_SET_LOCK_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN_SET |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_SET_LOCK_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN_SET &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_SET_LOCK_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN_SET ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE3_AUTHEN_SET & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE3_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN_SET |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN_SET &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN_SET ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_SET_LOCK_LIST() volatile
    {
        return GPR_PRIVATE3_AUTHEN_SET & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE3_AUTHEN_SET_LOCK_LIST() volatile
    {
        GPR_PRIVATE3_AUTHEN_SET |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_SET_LOCK_LIST() volatile
    {
        GPR_PRIVATE3_AUTHEN_SET &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_SET_LOCK_LIST() volatile
    {
        GPR_PRIVATE3_AUTHEN_SET ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN_SET's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_PRIVATE3_AUTHEN_SET_WHITE_LIST() volatile
    {
        return (GPR_PRIVATE3_AUTHEN_SET >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN_SET's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE3_AUTHEN_SET_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE3_AUTHEN_SET;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_PRIVATE3_AUTHEN_SET = curr;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_SET_LOCK_TZ() volatile
    {
        return GPR_PRIVATE3_AUTHEN_SET & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE3_AUTHEN_SET_LOCK_TZ() volatile
    {
        GPR_PRIVATE3_AUTHEN_SET |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_SET_LOCK_TZ() volatile
    {
        GPR_PRIVATE3_AUTHEN_SET &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_SET_LOCK_TZ() volatile
    {
        GPR_PRIVATE3_AUTHEN_SET ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_SET_TZ_NS() volatile
    {
        return GPR_PRIVATE3_AUTHEN_SET & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE3_AUTHEN_SET_TZ_NS() volatile
    {
        GPR_PRIVATE3_AUTHEN_SET |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_SET_TZ_NS() volatile
    {
        GPR_PRIVATE3_AUTHEN_SET &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_SET_TZ_NS() volatile
    {
        GPR_PRIVATE3_AUTHEN_SET ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_SET_TZ_USER() volatile
    {
        return GPR_PRIVATE3_AUTHEN_SET & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE3_AUTHEN_SET_TZ_USER() volatile
    {
        GPR_PRIVATE3_AUTHEN_SET |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_SET_TZ_USER() volatile
    {
        GPR_PRIVATE3_AUTHEN_SET &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_SET_TZ_USER() volatile
    {
        GPR_PRIVATE3_AUTHEN_SET ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE3_AUTHEN_SET's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE3_AUTHEN_SET(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                            bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE3_AUTHEN_SET;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE3_AUTHEN_SET's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE3_AUTHEN_SET(bool LOCK_MODE, bool DOMAIN_MODE,
                                            bool LOCK_LIST, uint8_t WHITE_LIST,
                                            bool LOCK_TZ, bool TZ_NS,
                                            bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE3_AUTHEN_SET;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE3_AUTHEN_SET = curr;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_CLR_LOCK_MODE() volatile
    {
        return GPR_PRIVATE3_AUTHEN_CLR & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE3_AUTHEN_CLR_LOCK_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN_CLR |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_CLR_LOCK_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN_CLR &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_CLR_LOCK_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN_CLR ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE3_AUTHEN_CLR & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE3_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN_CLR |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN_CLR &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN_CLR ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_CLR_LOCK_LIST() volatile
    {
        return GPR_PRIVATE3_AUTHEN_CLR & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE3_AUTHEN_CLR_LOCK_LIST() volatile
    {
        GPR_PRIVATE3_AUTHEN_CLR |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_CLR_LOCK_LIST() volatile
    {
        GPR_PRIVATE3_AUTHEN_CLR &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_CLR_LOCK_LIST() volatile
    {
        GPR_PRIVATE3_AUTHEN_CLR ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN_CLR's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_PRIVATE3_AUTHEN_CLR_WHITE_LIST() volatile
    {
        return (GPR_PRIVATE3_AUTHEN_CLR >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN_CLR's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE3_AUTHEN_CLR_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE3_AUTHEN_CLR;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_PRIVATE3_AUTHEN_CLR = curr;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_CLR_LOCK_TZ() volatile
    {
        return GPR_PRIVATE3_AUTHEN_CLR & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE3_AUTHEN_CLR_LOCK_TZ() volatile
    {
        GPR_PRIVATE3_AUTHEN_CLR |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_CLR_LOCK_TZ() volatile
    {
        GPR_PRIVATE3_AUTHEN_CLR &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_CLR_LOCK_TZ() volatile
    {
        GPR_PRIVATE3_AUTHEN_CLR ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_CLR_TZ_NS() volatile
    {
        return GPR_PRIVATE3_AUTHEN_CLR & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE3_AUTHEN_CLR_TZ_NS() volatile
    {
        GPR_PRIVATE3_AUTHEN_CLR |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_CLR_TZ_NS() volatile
    {
        GPR_PRIVATE3_AUTHEN_CLR &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_CLR_TZ_NS() volatile
    {
        GPR_PRIVATE3_AUTHEN_CLR ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_CLR_TZ_USER() volatile
    {
        return GPR_PRIVATE3_AUTHEN_CLR & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE3_AUTHEN_CLR_TZ_USER() volatile
    {
        GPR_PRIVATE3_AUTHEN_CLR |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_CLR_TZ_USER() volatile
    {
        GPR_PRIVATE3_AUTHEN_CLR &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_CLR_TZ_USER() volatile
    {
        GPR_PRIVATE3_AUTHEN_CLR ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE3_AUTHEN_CLR's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE3_AUTHEN_CLR(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                            bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE3_AUTHEN_CLR;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE3_AUTHEN_CLR's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE3_AUTHEN_CLR(bool LOCK_MODE, bool DOMAIN_MODE,
                                            bool LOCK_LIST, uint8_t WHITE_LIST,
                                            bool LOCK_TZ, bool TZ_NS,
                                            bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE3_AUTHEN_CLR;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE3_AUTHEN_CLR = curr;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_TOG_LOCK_MODE() volatile
    {
        return GPR_PRIVATE3_AUTHEN_TOG & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE3_AUTHEN_TOG_LOCK_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN_TOG |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_TOG_LOCK_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN_TOG &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_TOG_LOCK_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN_TOG ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE3_AUTHEN_TOG & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE3_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN_TOG |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN_TOG &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE3_AUTHEN_TOG ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_TOG_LOCK_LIST() volatile
    {
        return GPR_PRIVATE3_AUTHEN_TOG & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE3_AUTHEN_TOG_LOCK_LIST() volatile
    {
        GPR_PRIVATE3_AUTHEN_TOG |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_TOG_LOCK_LIST() volatile
    {
        GPR_PRIVATE3_AUTHEN_TOG &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_TOG_LOCK_LIST() volatile
    {
        GPR_PRIVATE3_AUTHEN_TOG ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN_TOG's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_PRIVATE3_AUTHEN_TOG_WHITE_LIST() volatile
    {
        return (GPR_PRIVATE3_AUTHEN_TOG >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN_TOG's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE3_AUTHEN_TOG_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE3_AUTHEN_TOG;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_PRIVATE3_AUTHEN_TOG = curr;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_TOG_LOCK_TZ() volatile
    {
        return GPR_PRIVATE3_AUTHEN_TOG & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE3_AUTHEN_TOG_LOCK_TZ() volatile
    {
        GPR_PRIVATE3_AUTHEN_TOG |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_TOG_LOCK_TZ() volatile
    {
        GPR_PRIVATE3_AUTHEN_TOG &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_TOG_LOCK_TZ() volatile
    {
        GPR_PRIVATE3_AUTHEN_TOG ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_TOG_TZ_NS() volatile
    {
        return GPR_PRIVATE3_AUTHEN_TOG & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE3_AUTHEN_TOG_TZ_NS() volatile
    {
        GPR_PRIVATE3_AUTHEN_TOG |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_TOG_TZ_NS() volatile
    {
        GPR_PRIVATE3_AUTHEN_TOG &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_TOG_TZ_NS() volatile
    {
        GPR_PRIVATE3_AUTHEN_TOG ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE3_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE3_AUTHEN_TOG_TZ_USER() volatile
    {
        return GPR_PRIVATE3_AUTHEN_TOG & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE3_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE3_AUTHEN_TOG_TZ_USER() volatile
    {
        GPR_PRIVATE3_AUTHEN_TOG |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE3_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE3_AUTHEN_TOG_TZ_USER() volatile
    {
        GPR_PRIVATE3_AUTHEN_TOG &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE3_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE3_AUTHEN_TOG_TZ_USER() volatile
    {
        GPR_PRIVATE3_AUTHEN_TOG ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE3_AUTHEN_TOG's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE3_AUTHEN_TOG(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                            bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE3_AUTHEN_TOG;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE3_AUTHEN_TOG's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE3_AUTHEN_TOG(bool LOCK_MODE, bool DOMAIN_MODE,
                                            bool LOCK_LIST, uint8_t WHITE_LIST,
                                            bool LOCK_TZ, bool TZ_NS,
                                            bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE3_AUTHEN_TOG;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE3_AUTHEN_TOG = curr;
    }

    /**
     * Get GPR_PRIVATE4's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE4_GPR() volatile
    {
        return (GPR_PRIVATE4 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE4's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE4_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE4;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE4 = curr;
    }

    /**
     * Get GPR_PRIVATE4_SET's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE4_SET_GPR() volatile
    {
        return (GPR_PRIVATE4_SET >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE4_SET's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE4_SET_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE4_SET;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE4_SET = curr;
    }

    /**
     * Get GPR_PRIVATE4_CLR's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE4_CLR_GPR() volatile
    {
        return (GPR_PRIVATE4_CLR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE4_CLR's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE4_CLR_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE4_CLR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE4_CLR = curr;
    }

    /**
     * Get GPR_PRIVATE4_TOG's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE4_TOG_GPR() volatile
    {
        return (GPR_PRIVATE4_TOG >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE4_TOG's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE4_TOG_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE4_TOG;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE4_TOG = curr;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_LOCK_MODE() volatile
    {
        return GPR_PRIVATE4_AUTHEN & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE4_AUTHEN_LOCK_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_LOCK_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_LOCK_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE4_AUTHEN & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE4_AUTHEN_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_LOCK_LIST() volatile
    {
        return GPR_PRIVATE4_AUTHEN & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE4_AUTHEN_LOCK_LIST() volatile
    {
        GPR_PRIVATE4_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_LOCK_LIST() volatile
    {
        GPR_PRIVATE4_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_LOCK_LIST() volatile
    {
        GPR_PRIVATE4_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline CCM_GPR_PRIVATE4_AUTHEN_WHITE_LIST
    get_GPR_PRIVATE4_AUTHEN_WHITE_LIST() volatile
    {
        return CCM_GPR_PRIVATE4_AUTHEN_WHITE_LIST((GPR_PRIVATE4_AUTHEN >> 8u) &
                                                  0b1111u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE4_AUTHEN_WHITE_LIST(
        CCM_GPR_PRIVATE4_AUTHEN_WHITE_LIST value) volatile
    {
        uint32_t curr = GPR_PRIVATE4_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(value) & 0b1111u) << 8u;

        GPR_PRIVATE4_AUTHEN = curr;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_LOCK_TZ() volatile
    {
        return GPR_PRIVATE4_AUTHEN & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE4_AUTHEN_LOCK_TZ() volatile
    {
        GPR_PRIVATE4_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_LOCK_TZ() volatile
    {
        GPR_PRIVATE4_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_LOCK_TZ() volatile
    {
        GPR_PRIVATE4_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_TZ_NS() volatile
    {
        return GPR_PRIVATE4_AUTHEN & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE4_AUTHEN_TZ_NS() volatile
    {
        GPR_PRIVATE4_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_TZ_NS() volatile
    {
        GPR_PRIVATE4_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_TZ_NS() volatile
    {
        GPR_PRIVATE4_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_TZ_USER() volatile
    {
        return GPR_PRIVATE4_AUTHEN & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE4_AUTHEN_TZ_USER() volatile
    {
        GPR_PRIVATE4_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_TZ_USER() volatile
    {
        GPR_PRIVATE4_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_TZ_USER() volatile
    {
        GPR_PRIVATE4_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE4_AUTHEN's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE4_AUTHEN(
        bool &LOCK_MODE, bool &DOMAIN_MODE, bool &LOCK_LIST,
        CCM_GPR_PRIVATE4_AUTHEN_WHITE_LIST &WHITE_LIST, bool &LOCK_TZ,
        bool &TZ_NS, bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE4_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST =
            CCM_GPR_PRIVATE4_AUTHEN_WHITE_LIST((curr >> 8u) & 0b1111u);
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE4_AUTHEN's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE4_AUTHEN(
        bool LOCK_MODE, bool DOMAIN_MODE, bool LOCK_LIST,
        CCM_GPR_PRIVATE4_AUTHEN_WHITE_LIST WHITE_LIST, bool LOCK_TZ,
        bool TZ_NS, bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE4_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(WHITE_LIST) & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE4_AUTHEN = curr;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_SET_LOCK_MODE() volatile
    {
        return GPR_PRIVATE4_AUTHEN_SET & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE4_AUTHEN_SET_LOCK_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN_SET |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_SET_LOCK_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN_SET &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_SET_LOCK_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN_SET ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE4_AUTHEN_SET & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE4_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN_SET |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN_SET &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN_SET ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_SET_LOCK_LIST() volatile
    {
        return GPR_PRIVATE4_AUTHEN_SET & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE4_AUTHEN_SET_LOCK_LIST() volatile
    {
        GPR_PRIVATE4_AUTHEN_SET |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_SET_LOCK_LIST() volatile
    {
        GPR_PRIVATE4_AUTHEN_SET &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_SET_LOCK_LIST() volatile
    {
        GPR_PRIVATE4_AUTHEN_SET ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN_SET's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_PRIVATE4_AUTHEN_SET_WHITE_LIST() volatile
    {
        return (GPR_PRIVATE4_AUTHEN_SET >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN_SET's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE4_AUTHEN_SET_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE4_AUTHEN_SET;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_PRIVATE4_AUTHEN_SET = curr;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_SET_LOCK_TZ() volatile
    {
        return GPR_PRIVATE4_AUTHEN_SET & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE4_AUTHEN_SET_LOCK_TZ() volatile
    {
        GPR_PRIVATE4_AUTHEN_SET |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_SET_LOCK_TZ() volatile
    {
        GPR_PRIVATE4_AUTHEN_SET &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_SET_LOCK_TZ() volatile
    {
        GPR_PRIVATE4_AUTHEN_SET ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_SET_TZ_NS() volatile
    {
        return GPR_PRIVATE4_AUTHEN_SET & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE4_AUTHEN_SET_TZ_NS() volatile
    {
        GPR_PRIVATE4_AUTHEN_SET |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_SET_TZ_NS() volatile
    {
        GPR_PRIVATE4_AUTHEN_SET &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_SET_TZ_NS() volatile
    {
        GPR_PRIVATE4_AUTHEN_SET ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_SET_TZ_USER() volatile
    {
        return GPR_PRIVATE4_AUTHEN_SET & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE4_AUTHEN_SET_TZ_USER() volatile
    {
        GPR_PRIVATE4_AUTHEN_SET |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_SET_TZ_USER() volatile
    {
        GPR_PRIVATE4_AUTHEN_SET &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_SET_TZ_USER() volatile
    {
        GPR_PRIVATE4_AUTHEN_SET ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE4_AUTHEN_SET's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE4_AUTHEN_SET(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                            bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE4_AUTHEN_SET;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE4_AUTHEN_SET's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE4_AUTHEN_SET(bool LOCK_MODE, bool DOMAIN_MODE,
                                            bool LOCK_LIST, uint8_t WHITE_LIST,
                                            bool LOCK_TZ, bool TZ_NS,
                                            bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE4_AUTHEN_SET;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE4_AUTHEN_SET = curr;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_CLR_LOCK_MODE() volatile
    {
        return GPR_PRIVATE4_AUTHEN_CLR & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE4_AUTHEN_CLR_LOCK_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN_CLR |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_CLR_LOCK_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN_CLR &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_CLR_LOCK_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN_CLR ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE4_AUTHEN_CLR & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE4_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN_CLR |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN_CLR &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN_CLR ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_CLR_LOCK_LIST() volatile
    {
        return GPR_PRIVATE4_AUTHEN_CLR & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE4_AUTHEN_CLR_LOCK_LIST() volatile
    {
        GPR_PRIVATE4_AUTHEN_CLR |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_CLR_LOCK_LIST() volatile
    {
        GPR_PRIVATE4_AUTHEN_CLR &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_CLR_LOCK_LIST() volatile
    {
        GPR_PRIVATE4_AUTHEN_CLR ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN_CLR's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_PRIVATE4_AUTHEN_CLR_WHITE_LIST() volatile
    {
        return (GPR_PRIVATE4_AUTHEN_CLR >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN_CLR's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE4_AUTHEN_CLR_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE4_AUTHEN_CLR;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_PRIVATE4_AUTHEN_CLR = curr;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_CLR_LOCK_TZ() volatile
    {
        return GPR_PRIVATE4_AUTHEN_CLR & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE4_AUTHEN_CLR_LOCK_TZ() volatile
    {
        GPR_PRIVATE4_AUTHEN_CLR |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_CLR_LOCK_TZ() volatile
    {
        GPR_PRIVATE4_AUTHEN_CLR &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_CLR_LOCK_TZ() volatile
    {
        GPR_PRIVATE4_AUTHEN_CLR ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_CLR_TZ_NS() volatile
    {
        return GPR_PRIVATE4_AUTHEN_CLR & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE4_AUTHEN_CLR_TZ_NS() volatile
    {
        GPR_PRIVATE4_AUTHEN_CLR |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_CLR_TZ_NS() volatile
    {
        GPR_PRIVATE4_AUTHEN_CLR &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_CLR_TZ_NS() volatile
    {
        GPR_PRIVATE4_AUTHEN_CLR ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_CLR_TZ_USER() volatile
    {
        return GPR_PRIVATE4_AUTHEN_CLR & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE4_AUTHEN_CLR_TZ_USER() volatile
    {
        GPR_PRIVATE4_AUTHEN_CLR |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_CLR_TZ_USER() volatile
    {
        GPR_PRIVATE4_AUTHEN_CLR &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_CLR_TZ_USER() volatile
    {
        GPR_PRIVATE4_AUTHEN_CLR ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE4_AUTHEN_CLR's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE4_AUTHEN_CLR(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                            bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE4_AUTHEN_CLR;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE4_AUTHEN_CLR's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE4_AUTHEN_CLR(bool LOCK_MODE, bool DOMAIN_MODE,
                                            bool LOCK_LIST, uint8_t WHITE_LIST,
                                            bool LOCK_TZ, bool TZ_NS,
                                            bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE4_AUTHEN_CLR;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE4_AUTHEN_CLR = curr;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_TOG_LOCK_MODE() volatile
    {
        return GPR_PRIVATE4_AUTHEN_TOG & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE4_AUTHEN_TOG_LOCK_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN_TOG |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_TOG_LOCK_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN_TOG &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_TOG_LOCK_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN_TOG ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE4_AUTHEN_TOG & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE4_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN_TOG |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN_TOG &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE4_AUTHEN_TOG ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_TOG_LOCK_LIST() volatile
    {
        return GPR_PRIVATE4_AUTHEN_TOG & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE4_AUTHEN_TOG_LOCK_LIST() volatile
    {
        GPR_PRIVATE4_AUTHEN_TOG |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_TOG_LOCK_LIST() volatile
    {
        GPR_PRIVATE4_AUTHEN_TOG &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_TOG_LOCK_LIST() volatile
    {
        GPR_PRIVATE4_AUTHEN_TOG ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN_TOG's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_PRIVATE4_AUTHEN_TOG_WHITE_LIST() volatile
    {
        return (GPR_PRIVATE4_AUTHEN_TOG >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN_TOG's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE4_AUTHEN_TOG_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE4_AUTHEN_TOG;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_PRIVATE4_AUTHEN_TOG = curr;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_TOG_LOCK_TZ() volatile
    {
        return GPR_PRIVATE4_AUTHEN_TOG & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE4_AUTHEN_TOG_LOCK_TZ() volatile
    {
        GPR_PRIVATE4_AUTHEN_TOG |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_TOG_LOCK_TZ() volatile
    {
        GPR_PRIVATE4_AUTHEN_TOG &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_TOG_LOCK_TZ() volatile
    {
        GPR_PRIVATE4_AUTHEN_TOG ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_TOG_TZ_NS() volatile
    {
        return GPR_PRIVATE4_AUTHEN_TOG & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE4_AUTHEN_TOG_TZ_NS() volatile
    {
        GPR_PRIVATE4_AUTHEN_TOG |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_TOG_TZ_NS() volatile
    {
        GPR_PRIVATE4_AUTHEN_TOG &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_TOG_TZ_NS() volatile
    {
        GPR_PRIVATE4_AUTHEN_TOG ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE4_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE4_AUTHEN_TOG_TZ_USER() volatile
    {
        return GPR_PRIVATE4_AUTHEN_TOG & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE4_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE4_AUTHEN_TOG_TZ_USER() volatile
    {
        GPR_PRIVATE4_AUTHEN_TOG |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE4_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE4_AUTHEN_TOG_TZ_USER() volatile
    {
        GPR_PRIVATE4_AUTHEN_TOG &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE4_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE4_AUTHEN_TOG_TZ_USER() volatile
    {
        GPR_PRIVATE4_AUTHEN_TOG ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE4_AUTHEN_TOG's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE4_AUTHEN_TOG(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                            bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE4_AUTHEN_TOG;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE4_AUTHEN_TOG's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE4_AUTHEN_TOG(bool LOCK_MODE, bool DOMAIN_MODE,
                                            bool LOCK_LIST, uint8_t WHITE_LIST,
                                            bool LOCK_TZ, bool TZ_NS,
                                            bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE4_AUTHEN_TOG;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE4_AUTHEN_TOG = curr;
    }

    /**
     * Get GPR_PRIVATE5's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE5_GPR() volatile
    {
        return (GPR_PRIVATE5 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE5's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE5_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE5;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE5 = curr;
    }

    /**
     * Get GPR_PRIVATE5_SET's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE5_SET_GPR() volatile
    {
        return (GPR_PRIVATE5_SET >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE5_SET's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE5_SET_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE5_SET;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE5_SET = curr;
    }

    /**
     * Get GPR_PRIVATE5_CLR's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE5_CLR_GPR() volatile
    {
        return (GPR_PRIVATE5_CLR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE5_CLR's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE5_CLR_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE5_CLR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE5_CLR = curr;
    }

    /**
     * Get GPR_PRIVATE5_TOG's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE5_TOG_GPR() volatile
    {
        return (GPR_PRIVATE5_TOG >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE5_TOG's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE5_TOG_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE5_TOG;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE5_TOG = curr;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_LOCK_MODE() volatile
    {
        return GPR_PRIVATE5_AUTHEN & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE5_AUTHEN_LOCK_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_LOCK_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_LOCK_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE5_AUTHEN & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE5_AUTHEN_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_LOCK_LIST() volatile
    {
        return GPR_PRIVATE5_AUTHEN & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE5_AUTHEN_LOCK_LIST() volatile
    {
        GPR_PRIVATE5_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_LOCK_LIST() volatile
    {
        GPR_PRIVATE5_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_LOCK_LIST() volatile
    {
        GPR_PRIVATE5_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline CCM_GPR_PRIVATE5_AUTHEN_WHITE_LIST
    get_GPR_PRIVATE5_AUTHEN_WHITE_LIST() volatile
    {
        return CCM_GPR_PRIVATE5_AUTHEN_WHITE_LIST((GPR_PRIVATE5_AUTHEN >> 8u) &
                                                  0b1111u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE5_AUTHEN_WHITE_LIST(
        CCM_GPR_PRIVATE5_AUTHEN_WHITE_LIST value) volatile
    {
        uint32_t curr = GPR_PRIVATE5_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(value) & 0b1111u) << 8u;

        GPR_PRIVATE5_AUTHEN = curr;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_LOCK_TZ() volatile
    {
        return GPR_PRIVATE5_AUTHEN & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE5_AUTHEN_LOCK_TZ() volatile
    {
        GPR_PRIVATE5_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_LOCK_TZ() volatile
    {
        GPR_PRIVATE5_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_LOCK_TZ() volatile
    {
        GPR_PRIVATE5_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_TZ_NS() volatile
    {
        return GPR_PRIVATE5_AUTHEN & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE5_AUTHEN_TZ_NS() volatile
    {
        GPR_PRIVATE5_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_TZ_NS() volatile
    {
        GPR_PRIVATE5_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_TZ_NS() volatile
    {
        GPR_PRIVATE5_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_TZ_USER() volatile
    {
        return GPR_PRIVATE5_AUTHEN & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE5_AUTHEN_TZ_USER() volatile
    {
        GPR_PRIVATE5_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_TZ_USER() volatile
    {
        GPR_PRIVATE5_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_TZ_USER() volatile
    {
        GPR_PRIVATE5_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE5_AUTHEN's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE5_AUTHEN(
        bool &LOCK_MODE, bool &DOMAIN_MODE, bool &LOCK_LIST,
        CCM_GPR_PRIVATE5_AUTHEN_WHITE_LIST &WHITE_LIST, bool &LOCK_TZ,
        bool &TZ_NS, bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE5_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST =
            CCM_GPR_PRIVATE5_AUTHEN_WHITE_LIST((curr >> 8u) & 0b1111u);
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE5_AUTHEN's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE5_AUTHEN(
        bool LOCK_MODE, bool DOMAIN_MODE, bool LOCK_LIST,
        CCM_GPR_PRIVATE5_AUTHEN_WHITE_LIST WHITE_LIST, bool LOCK_TZ,
        bool TZ_NS, bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE5_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(WHITE_LIST) & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE5_AUTHEN = curr;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_SET_LOCK_MODE() volatile
    {
        return GPR_PRIVATE5_AUTHEN_SET & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE5_AUTHEN_SET_LOCK_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN_SET |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_SET_LOCK_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN_SET &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_SET_LOCK_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN_SET ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE5_AUTHEN_SET & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE5_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN_SET |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN_SET &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN_SET ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_SET_LOCK_LIST() volatile
    {
        return GPR_PRIVATE5_AUTHEN_SET & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE5_AUTHEN_SET_LOCK_LIST() volatile
    {
        GPR_PRIVATE5_AUTHEN_SET |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_SET_LOCK_LIST() volatile
    {
        GPR_PRIVATE5_AUTHEN_SET &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_SET_LOCK_LIST() volatile
    {
        GPR_PRIVATE5_AUTHEN_SET ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN_SET's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_PRIVATE5_AUTHEN_SET_WHITE_LIST() volatile
    {
        return (GPR_PRIVATE5_AUTHEN_SET >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN_SET's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE5_AUTHEN_SET_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE5_AUTHEN_SET;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_PRIVATE5_AUTHEN_SET = curr;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_SET_LOCK_TZ() volatile
    {
        return GPR_PRIVATE5_AUTHEN_SET & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE5_AUTHEN_SET_LOCK_TZ() volatile
    {
        GPR_PRIVATE5_AUTHEN_SET |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_SET_LOCK_TZ() volatile
    {
        GPR_PRIVATE5_AUTHEN_SET &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_SET_LOCK_TZ() volatile
    {
        GPR_PRIVATE5_AUTHEN_SET ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_SET_TZ_NS() volatile
    {
        return GPR_PRIVATE5_AUTHEN_SET & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE5_AUTHEN_SET_TZ_NS() volatile
    {
        GPR_PRIVATE5_AUTHEN_SET |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_SET_TZ_NS() volatile
    {
        GPR_PRIVATE5_AUTHEN_SET &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_SET_TZ_NS() volatile
    {
        GPR_PRIVATE5_AUTHEN_SET ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_SET_TZ_USER() volatile
    {
        return GPR_PRIVATE5_AUTHEN_SET & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE5_AUTHEN_SET_TZ_USER() volatile
    {
        GPR_PRIVATE5_AUTHEN_SET |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_SET_TZ_USER() volatile
    {
        GPR_PRIVATE5_AUTHEN_SET &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_SET_TZ_USER() volatile
    {
        GPR_PRIVATE5_AUTHEN_SET ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE5_AUTHEN_SET's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE5_AUTHEN_SET(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                            bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE5_AUTHEN_SET;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE5_AUTHEN_SET's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE5_AUTHEN_SET(bool LOCK_MODE, bool DOMAIN_MODE,
                                            bool LOCK_LIST, uint8_t WHITE_LIST,
                                            bool LOCK_TZ, bool TZ_NS,
                                            bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE5_AUTHEN_SET;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE5_AUTHEN_SET = curr;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_CLR_LOCK_MODE() volatile
    {
        return GPR_PRIVATE5_AUTHEN_CLR & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE5_AUTHEN_CLR_LOCK_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN_CLR |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_CLR_LOCK_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN_CLR &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_CLR_LOCK_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN_CLR ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE5_AUTHEN_CLR & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE5_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN_CLR |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN_CLR &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN_CLR ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_CLR_LOCK_LIST() volatile
    {
        return GPR_PRIVATE5_AUTHEN_CLR & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE5_AUTHEN_CLR_LOCK_LIST() volatile
    {
        GPR_PRIVATE5_AUTHEN_CLR |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_CLR_LOCK_LIST() volatile
    {
        GPR_PRIVATE5_AUTHEN_CLR &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_CLR_LOCK_LIST() volatile
    {
        GPR_PRIVATE5_AUTHEN_CLR ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN_CLR's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_PRIVATE5_AUTHEN_CLR_WHITE_LIST() volatile
    {
        return (GPR_PRIVATE5_AUTHEN_CLR >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN_CLR's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE5_AUTHEN_CLR_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE5_AUTHEN_CLR;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_PRIVATE5_AUTHEN_CLR = curr;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_CLR_LOCK_TZ() volatile
    {
        return GPR_PRIVATE5_AUTHEN_CLR & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE5_AUTHEN_CLR_LOCK_TZ() volatile
    {
        GPR_PRIVATE5_AUTHEN_CLR |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_CLR_LOCK_TZ() volatile
    {
        GPR_PRIVATE5_AUTHEN_CLR &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_CLR_LOCK_TZ() volatile
    {
        GPR_PRIVATE5_AUTHEN_CLR ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_CLR_TZ_NS() volatile
    {
        return GPR_PRIVATE5_AUTHEN_CLR & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE5_AUTHEN_CLR_TZ_NS() volatile
    {
        GPR_PRIVATE5_AUTHEN_CLR |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_CLR_TZ_NS() volatile
    {
        GPR_PRIVATE5_AUTHEN_CLR &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_CLR_TZ_NS() volatile
    {
        GPR_PRIVATE5_AUTHEN_CLR ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_CLR_TZ_USER() volatile
    {
        return GPR_PRIVATE5_AUTHEN_CLR & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE5_AUTHEN_CLR_TZ_USER() volatile
    {
        GPR_PRIVATE5_AUTHEN_CLR |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_CLR_TZ_USER() volatile
    {
        GPR_PRIVATE5_AUTHEN_CLR &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_CLR_TZ_USER() volatile
    {
        GPR_PRIVATE5_AUTHEN_CLR ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE5_AUTHEN_CLR's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE5_AUTHEN_CLR(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                            bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE5_AUTHEN_CLR;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE5_AUTHEN_CLR's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE5_AUTHEN_CLR(bool LOCK_MODE, bool DOMAIN_MODE,
                                            bool LOCK_LIST, uint8_t WHITE_LIST,
                                            bool LOCK_TZ, bool TZ_NS,
                                            bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE5_AUTHEN_CLR;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE5_AUTHEN_CLR = curr;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_TOG_LOCK_MODE() volatile
    {
        return GPR_PRIVATE5_AUTHEN_TOG & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE5_AUTHEN_TOG_LOCK_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN_TOG |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_TOG_LOCK_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN_TOG &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_TOG_LOCK_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN_TOG ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE5_AUTHEN_TOG & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE5_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN_TOG |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN_TOG &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE5_AUTHEN_TOG ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_TOG_LOCK_LIST() volatile
    {
        return GPR_PRIVATE5_AUTHEN_TOG & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE5_AUTHEN_TOG_LOCK_LIST() volatile
    {
        GPR_PRIVATE5_AUTHEN_TOG |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_TOG_LOCK_LIST() volatile
    {
        GPR_PRIVATE5_AUTHEN_TOG &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_TOG_LOCK_LIST() volatile
    {
        GPR_PRIVATE5_AUTHEN_TOG ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN_TOG's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_PRIVATE5_AUTHEN_TOG_WHITE_LIST() volatile
    {
        return (GPR_PRIVATE5_AUTHEN_TOG >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN_TOG's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE5_AUTHEN_TOG_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE5_AUTHEN_TOG;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_PRIVATE5_AUTHEN_TOG = curr;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_TOG_LOCK_TZ() volatile
    {
        return GPR_PRIVATE5_AUTHEN_TOG & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE5_AUTHEN_TOG_LOCK_TZ() volatile
    {
        GPR_PRIVATE5_AUTHEN_TOG |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_TOG_LOCK_TZ() volatile
    {
        GPR_PRIVATE5_AUTHEN_TOG &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_TOG_LOCK_TZ() volatile
    {
        GPR_PRIVATE5_AUTHEN_TOG ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_TOG_TZ_NS() volatile
    {
        return GPR_PRIVATE5_AUTHEN_TOG & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE5_AUTHEN_TOG_TZ_NS() volatile
    {
        GPR_PRIVATE5_AUTHEN_TOG |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_TOG_TZ_NS() volatile
    {
        GPR_PRIVATE5_AUTHEN_TOG &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_TOG_TZ_NS() volatile
    {
        GPR_PRIVATE5_AUTHEN_TOG ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE5_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE5_AUTHEN_TOG_TZ_USER() volatile
    {
        return GPR_PRIVATE5_AUTHEN_TOG & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE5_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE5_AUTHEN_TOG_TZ_USER() volatile
    {
        GPR_PRIVATE5_AUTHEN_TOG |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE5_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE5_AUTHEN_TOG_TZ_USER() volatile
    {
        GPR_PRIVATE5_AUTHEN_TOG &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE5_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE5_AUTHEN_TOG_TZ_USER() volatile
    {
        GPR_PRIVATE5_AUTHEN_TOG ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE5_AUTHEN_TOG's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE5_AUTHEN_TOG(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                            bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE5_AUTHEN_TOG;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE5_AUTHEN_TOG's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE5_AUTHEN_TOG(bool LOCK_MODE, bool DOMAIN_MODE,
                                            bool LOCK_LIST, uint8_t WHITE_LIST,
                                            bool LOCK_TZ, bool TZ_NS,
                                            bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE5_AUTHEN_TOG;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE5_AUTHEN_TOG = curr;
    }

    /**
     * Get GPR_PRIVATE6's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE6_GPR() volatile
    {
        return (GPR_PRIVATE6 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE6's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE6_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE6;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE6 = curr;
    }

    /**
     * Get GPR_PRIVATE6_SET's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE6_SET_GPR() volatile
    {
        return (GPR_PRIVATE6_SET >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE6_SET's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE6_SET_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE6_SET;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE6_SET = curr;
    }

    /**
     * Get GPR_PRIVATE6_CLR's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE6_CLR_GPR() volatile
    {
        return (GPR_PRIVATE6_CLR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE6_CLR's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE6_CLR_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE6_CLR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE6_CLR = curr;
    }

    /**
     * Get GPR_PRIVATE6_TOG's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE6_TOG_GPR() volatile
    {
        return (GPR_PRIVATE6_TOG >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE6_TOG's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE6_TOG_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE6_TOG;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE6_TOG = curr;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_LOCK_MODE() volatile
    {
        return GPR_PRIVATE6_AUTHEN & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE6_AUTHEN_LOCK_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_LOCK_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_LOCK_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE6_AUTHEN & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE6_AUTHEN_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_LOCK_LIST() volatile
    {
        return GPR_PRIVATE6_AUTHEN & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE6_AUTHEN_LOCK_LIST() volatile
    {
        GPR_PRIVATE6_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_LOCK_LIST() volatile
    {
        GPR_PRIVATE6_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_LOCK_LIST() volatile
    {
        GPR_PRIVATE6_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline CCM_GPR_PRIVATE6_AUTHEN_WHITE_LIST
    get_GPR_PRIVATE6_AUTHEN_WHITE_LIST() volatile
    {
        return CCM_GPR_PRIVATE6_AUTHEN_WHITE_LIST((GPR_PRIVATE6_AUTHEN >> 8u) &
                                                  0b1111u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE6_AUTHEN_WHITE_LIST(
        CCM_GPR_PRIVATE6_AUTHEN_WHITE_LIST value) volatile
    {
        uint32_t curr = GPR_PRIVATE6_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(value) & 0b1111u) << 8u;

        GPR_PRIVATE6_AUTHEN = curr;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_LOCK_TZ() volatile
    {
        return GPR_PRIVATE6_AUTHEN & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE6_AUTHEN_LOCK_TZ() volatile
    {
        GPR_PRIVATE6_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_LOCK_TZ() volatile
    {
        GPR_PRIVATE6_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_LOCK_TZ() volatile
    {
        GPR_PRIVATE6_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_TZ_NS() volatile
    {
        return GPR_PRIVATE6_AUTHEN & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE6_AUTHEN_TZ_NS() volatile
    {
        GPR_PRIVATE6_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_TZ_NS() volatile
    {
        GPR_PRIVATE6_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_TZ_NS() volatile
    {
        GPR_PRIVATE6_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_TZ_USER() volatile
    {
        return GPR_PRIVATE6_AUTHEN & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE6_AUTHEN_TZ_USER() volatile
    {
        GPR_PRIVATE6_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_TZ_USER() volatile
    {
        GPR_PRIVATE6_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_TZ_USER() volatile
    {
        GPR_PRIVATE6_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE6_AUTHEN's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE6_AUTHEN(
        bool &LOCK_MODE, bool &DOMAIN_MODE, bool &LOCK_LIST,
        CCM_GPR_PRIVATE6_AUTHEN_WHITE_LIST &WHITE_LIST, bool &LOCK_TZ,
        bool &TZ_NS, bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE6_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST =
            CCM_GPR_PRIVATE6_AUTHEN_WHITE_LIST((curr >> 8u) & 0b1111u);
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE6_AUTHEN's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE6_AUTHEN(
        bool LOCK_MODE, bool DOMAIN_MODE, bool LOCK_LIST,
        CCM_GPR_PRIVATE6_AUTHEN_WHITE_LIST WHITE_LIST, bool LOCK_TZ,
        bool TZ_NS, bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE6_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(WHITE_LIST) & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE6_AUTHEN = curr;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_SET_LOCK_MODE() volatile
    {
        return GPR_PRIVATE6_AUTHEN_SET & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE6_AUTHEN_SET_LOCK_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN_SET |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_SET_LOCK_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN_SET &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_SET_LOCK_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN_SET ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE6_AUTHEN_SET & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE6_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN_SET |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN_SET &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN_SET ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_SET_LOCK_LIST() volatile
    {
        return GPR_PRIVATE6_AUTHEN_SET & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE6_AUTHEN_SET_LOCK_LIST() volatile
    {
        GPR_PRIVATE6_AUTHEN_SET |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_SET_LOCK_LIST() volatile
    {
        GPR_PRIVATE6_AUTHEN_SET &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_SET_LOCK_LIST() volatile
    {
        GPR_PRIVATE6_AUTHEN_SET ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN_SET's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_PRIVATE6_AUTHEN_SET_WHITE_LIST() volatile
    {
        return (GPR_PRIVATE6_AUTHEN_SET >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN_SET's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE6_AUTHEN_SET_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE6_AUTHEN_SET;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_PRIVATE6_AUTHEN_SET = curr;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_SET_LOCK_TZ() volatile
    {
        return GPR_PRIVATE6_AUTHEN_SET & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE6_AUTHEN_SET_LOCK_TZ() volatile
    {
        GPR_PRIVATE6_AUTHEN_SET |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_SET_LOCK_TZ() volatile
    {
        GPR_PRIVATE6_AUTHEN_SET &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_SET_LOCK_TZ() volatile
    {
        GPR_PRIVATE6_AUTHEN_SET ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_SET_TZ_NS() volatile
    {
        return GPR_PRIVATE6_AUTHEN_SET & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE6_AUTHEN_SET_TZ_NS() volatile
    {
        GPR_PRIVATE6_AUTHEN_SET |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_SET_TZ_NS() volatile
    {
        GPR_PRIVATE6_AUTHEN_SET &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_SET_TZ_NS() volatile
    {
        GPR_PRIVATE6_AUTHEN_SET ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_SET_TZ_USER() volatile
    {
        return GPR_PRIVATE6_AUTHEN_SET & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE6_AUTHEN_SET_TZ_USER() volatile
    {
        GPR_PRIVATE6_AUTHEN_SET |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_SET_TZ_USER() volatile
    {
        GPR_PRIVATE6_AUTHEN_SET &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_SET_TZ_USER() volatile
    {
        GPR_PRIVATE6_AUTHEN_SET ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE6_AUTHEN_SET's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE6_AUTHEN_SET(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                            bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE6_AUTHEN_SET;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE6_AUTHEN_SET's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE6_AUTHEN_SET(bool LOCK_MODE, bool DOMAIN_MODE,
                                            bool LOCK_LIST, uint8_t WHITE_LIST,
                                            bool LOCK_TZ, bool TZ_NS,
                                            bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE6_AUTHEN_SET;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE6_AUTHEN_SET = curr;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_CLR_LOCK_MODE() volatile
    {
        return GPR_PRIVATE6_AUTHEN_CLR & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE6_AUTHEN_CLR_LOCK_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN_CLR |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_CLR_LOCK_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN_CLR &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_CLR_LOCK_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN_CLR ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE6_AUTHEN_CLR & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE6_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN_CLR |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN_CLR &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN_CLR ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_CLR_LOCK_LIST() volatile
    {
        return GPR_PRIVATE6_AUTHEN_CLR & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE6_AUTHEN_CLR_LOCK_LIST() volatile
    {
        GPR_PRIVATE6_AUTHEN_CLR |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_CLR_LOCK_LIST() volatile
    {
        GPR_PRIVATE6_AUTHEN_CLR &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_CLR_LOCK_LIST() volatile
    {
        GPR_PRIVATE6_AUTHEN_CLR ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN_CLR's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_PRIVATE6_AUTHEN_CLR_WHITE_LIST() volatile
    {
        return (GPR_PRIVATE6_AUTHEN_CLR >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN_CLR's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE6_AUTHEN_CLR_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE6_AUTHEN_CLR;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_PRIVATE6_AUTHEN_CLR = curr;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_CLR_LOCK_TZ() volatile
    {
        return GPR_PRIVATE6_AUTHEN_CLR & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE6_AUTHEN_CLR_LOCK_TZ() volatile
    {
        GPR_PRIVATE6_AUTHEN_CLR |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_CLR_LOCK_TZ() volatile
    {
        GPR_PRIVATE6_AUTHEN_CLR &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_CLR_LOCK_TZ() volatile
    {
        GPR_PRIVATE6_AUTHEN_CLR ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_CLR_TZ_NS() volatile
    {
        return GPR_PRIVATE6_AUTHEN_CLR & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE6_AUTHEN_CLR_TZ_NS() volatile
    {
        GPR_PRIVATE6_AUTHEN_CLR |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_CLR_TZ_NS() volatile
    {
        GPR_PRIVATE6_AUTHEN_CLR &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_CLR_TZ_NS() volatile
    {
        GPR_PRIVATE6_AUTHEN_CLR ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_CLR_TZ_USER() volatile
    {
        return GPR_PRIVATE6_AUTHEN_CLR & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE6_AUTHEN_CLR_TZ_USER() volatile
    {
        GPR_PRIVATE6_AUTHEN_CLR |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_CLR_TZ_USER() volatile
    {
        GPR_PRIVATE6_AUTHEN_CLR &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_CLR_TZ_USER() volatile
    {
        GPR_PRIVATE6_AUTHEN_CLR ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE6_AUTHEN_CLR's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE6_AUTHEN_CLR(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                            bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE6_AUTHEN_CLR;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE6_AUTHEN_CLR's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE6_AUTHEN_CLR(bool LOCK_MODE, bool DOMAIN_MODE,
                                            bool LOCK_LIST, uint8_t WHITE_LIST,
                                            bool LOCK_TZ, bool TZ_NS,
                                            bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE6_AUTHEN_CLR;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE6_AUTHEN_CLR = curr;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_TOG_LOCK_MODE() volatile
    {
        return GPR_PRIVATE6_AUTHEN_TOG & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE6_AUTHEN_TOG_LOCK_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN_TOG |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_TOG_LOCK_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN_TOG &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_TOG_LOCK_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN_TOG ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE6_AUTHEN_TOG & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE6_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN_TOG |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN_TOG &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE6_AUTHEN_TOG ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_TOG_LOCK_LIST() volatile
    {
        return GPR_PRIVATE6_AUTHEN_TOG & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE6_AUTHEN_TOG_LOCK_LIST() volatile
    {
        GPR_PRIVATE6_AUTHEN_TOG |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_TOG_LOCK_LIST() volatile
    {
        GPR_PRIVATE6_AUTHEN_TOG &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_TOG_LOCK_LIST() volatile
    {
        GPR_PRIVATE6_AUTHEN_TOG ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN_TOG's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_PRIVATE6_AUTHEN_TOG_WHITE_LIST() volatile
    {
        return (GPR_PRIVATE6_AUTHEN_TOG >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN_TOG's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE6_AUTHEN_TOG_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE6_AUTHEN_TOG;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_PRIVATE6_AUTHEN_TOG = curr;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_TOG_LOCK_TZ() volatile
    {
        return GPR_PRIVATE6_AUTHEN_TOG & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE6_AUTHEN_TOG_LOCK_TZ() volatile
    {
        GPR_PRIVATE6_AUTHEN_TOG |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_TOG_LOCK_TZ() volatile
    {
        GPR_PRIVATE6_AUTHEN_TOG &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_TOG_LOCK_TZ() volatile
    {
        GPR_PRIVATE6_AUTHEN_TOG ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_TOG_TZ_NS() volatile
    {
        return GPR_PRIVATE6_AUTHEN_TOG & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE6_AUTHEN_TOG_TZ_NS() volatile
    {
        GPR_PRIVATE6_AUTHEN_TOG |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_TOG_TZ_NS() volatile
    {
        GPR_PRIVATE6_AUTHEN_TOG &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_TOG_TZ_NS() volatile
    {
        GPR_PRIVATE6_AUTHEN_TOG ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE6_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE6_AUTHEN_TOG_TZ_USER() volatile
    {
        return GPR_PRIVATE6_AUTHEN_TOG & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE6_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE6_AUTHEN_TOG_TZ_USER() volatile
    {
        GPR_PRIVATE6_AUTHEN_TOG |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE6_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE6_AUTHEN_TOG_TZ_USER() volatile
    {
        GPR_PRIVATE6_AUTHEN_TOG &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE6_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE6_AUTHEN_TOG_TZ_USER() volatile
    {
        GPR_PRIVATE6_AUTHEN_TOG ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE6_AUTHEN_TOG's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE6_AUTHEN_TOG(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                            bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE6_AUTHEN_TOG;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE6_AUTHEN_TOG's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE6_AUTHEN_TOG(bool LOCK_MODE, bool DOMAIN_MODE,
                                            bool LOCK_LIST, uint8_t WHITE_LIST,
                                            bool LOCK_TZ, bool TZ_NS,
                                            bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE6_AUTHEN_TOG;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE6_AUTHEN_TOG = curr;
    }

    /**
     * Get GPR_PRIVATE7's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE7_GPR() volatile
    {
        return (GPR_PRIVATE7 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE7's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE7_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE7;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE7 = curr;
    }

    /**
     * Get GPR_PRIVATE7_SET's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE7_SET_GPR() volatile
    {
        return (GPR_PRIVATE7_SET >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE7_SET's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE7_SET_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE7_SET;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE7_SET = curr;
    }

    /**
     * Get GPR_PRIVATE7_CLR's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE7_CLR_GPR() volatile
    {
        return (GPR_PRIVATE7_CLR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE7_CLR's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE7_CLR_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE7_CLR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE7_CLR = curr;
    }

    /**
     * Get GPR_PRIVATE7_TOG's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_PRIVATE7_TOG_GPR() volatile
    {
        return (GPR_PRIVATE7_TOG >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_PRIVATE7_TOG's GPR field.
     *
     * GP register
     */
    inline void set_GPR_PRIVATE7_TOG_GPR(uint32_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE7_TOG;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_PRIVATE7_TOG = curr;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_LOCK_MODE() volatile
    {
        return GPR_PRIVATE7_AUTHEN & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE7_AUTHEN_LOCK_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_LOCK_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_LOCK_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE7_AUTHEN & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE7_AUTHEN_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_LOCK_LIST() volatile
    {
        return GPR_PRIVATE7_AUTHEN & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE7_AUTHEN_LOCK_LIST() volatile
    {
        GPR_PRIVATE7_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_LOCK_LIST() volatile
    {
        GPR_PRIVATE7_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_LOCK_LIST() volatile
    {
        GPR_PRIVATE7_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline CCM_GPR_PRIVATE7_AUTHEN_WHITE_LIST
    get_GPR_PRIVATE7_AUTHEN_WHITE_LIST() volatile
    {
        return CCM_GPR_PRIVATE7_AUTHEN_WHITE_LIST((GPR_PRIVATE7_AUTHEN >> 8u) &
                                                  0b1111u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE7_AUTHEN_WHITE_LIST(
        CCM_GPR_PRIVATE7_AUTHEN_WHITE_LIST value) volatile
    {
        uint32_t curr = GPR_PRIVATE7_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(value) & 0b1111u) << 8u;

        GPR_PRIVATE7_AUTHEN = curr;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_LOCK_TZ() volatile
    {
        return GPR_PRIVATE7_AUTHEN & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE7_AUTHEN_LOCK_TZ() volatile
    {
        GPR_PRIVATE7_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_LOCK_TZ() volatile
    {
        GPR_PRIVATE7_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_LOCK_TZ() volatile
    {
        GPR_PRIVATE7_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_TZ_NS() volatile
    {
        return GPR_PRIVATE7_AUTHEN & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE7_AUTHEN_TZ_NS() volatile
    {
        GPR_PRIVATE7_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_TZ_NS() volatile
    {
        GPR_PRIVATE7_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_TZ_NS() volatile
    {
        GPR_PRIVATE7_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_TZ_USER() volatile
    {
        return GPR_PRIVATE7_AUTHEN & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE7_AUTHEN_TZ_USER() volatile
    {
        GPR_PRIVATE7_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_TZ_USER() volatile
    {
        GPR_PRIVATE7_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_TZ_USER() volatile
    {
        GPR_PRIVATE7_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE7_AUTHEN's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE7_AUTHEN(
        bool &LOCK_MODE, bool &DOMAIN_MODE, bool &LOCK_LIST,
        CCM_GPR_PRIVATE7_AUTHEN_WHITE_LIST &WHITE_LIST, bool &LOCK_TZ,
        bool &TZ_NS, bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE7_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST =
            CCM_GPR_PRIVATE7_AUTHEN_WHITE_LIST((curr >> 8u) & 0b1111u);
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE7_AUTHEN's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE7_AUTHEN(
        bool LOCK_MODE, bool DOMAIN_MODE, bool LOCK_LIST,
        CCM_GPR_PRIVATE7_AUTHEN_WHITE_LIST WHITE_LIST, bool LOCK_TZ,
        bool TZ_NS, bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE7_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(WHITE_LIST) & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE7_AUTHEN = curr;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_SET_LOCK_MODE() volatile
    {
        return GPR_PRIVATE7_AUTHEN_SET & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE7_AUTHEN_SET_LOCK_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN_SET |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_SET_LOCK_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN_SET &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_SET_LOCK_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN_SET ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE7_AUTHEN_SET & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE7_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN_SET |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN_SET &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_SET_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN_SET ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_SET_LOCK_LIST() volatile
    {
        return GPR_PRIVATE7_AUTHEN_SET & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE7_AUTHEN_SET_LOCK_LIST() volatile
    {
        GPR_PRIVATE7_AUTHEN_SET |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_SET_LOCK_LIST() volatile
    {
        GPR_PRIVATE7_AUTHEN_SET &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_SET_LOCK_LIST() volatile
    {
        GPR_PRIVATE7_AUTHEN_SET ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN_SET's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_PRIVATE7_AUTHEN_SET_WHITE_LIST() volatile
    {
        return (GPR_PRIVATE7_AUTHEN_SET >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN_SET's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE7_AUTHEN_SET_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE7_AUTHEN_SET;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_PRIVATE7_AUTHEN_SET = curr;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_SET_LOCK_TZ() volatile
    {
        return GPR_PRIVATE7_AUTHEN_SET & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE7_AUTHEN_SET_LOCK_TZ() volatile
    {
        GPR_PRIVATE7_AUTHEN_SET |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_SET_LOCK_TZ() volatile
    {
        GPR_PRIVATE7_AUTHEN_SET &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_SET_LOCK_TZ() volatile
    {
        GPR_PRIVATE7_AUTHEN_SET ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_SET_TZ_NS() volatile
    {
        return GPR_PRIVATE7_AUTHEN_SET & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE7_AUTHEN_SET_TZ_NS() volatile
    {
        GPR_PRIVATE7_AUTHEN_SET |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_SET_TZ_NS() volatile
    {
        GPR_PRIVATE7_AUTHEN_SET &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_SET_TZ_NS() volatile
    {
        GPR_PRIVATE7_AUTHEN_SET ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_SET_TZ_USER() volatile
    {
        return GPR_PRIVATE7_AUTHEN_SET & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE7_AUTHEN_SET_TZ_USER() volatile
    {
        GPR_PRIVATE7_AUTHEN_SET |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_SET_TZ_USER() volatile
    {
        GPR_PRIVATE7_AUTHEN_SET &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_SET_TZ_USER() volatile
    {
        GPR_PRIVATE7_AUTHEN_SET ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE7_AUTHEN_SET's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE7_AUTHEN_SET(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                            bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE7_AUTHEN_SET;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE7_AUTHEN_SET's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE7_AUTHEN_SET(bool LOCK_MODE, bool DOMAIN_MODE,
                                            bool LOCK_LIST, uint8_t WHITE_LIST,
                                            bool LOCK_TZ, bool TZ_NS,
                                            bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE7_AUTHEN_SET;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE7_AUTHEN_SET = curr;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_CLR_LOCK_MODE() volatile
    {
        return GPR_PRIVATE7_AUTHEN_CLR & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE7_AUTHEN_CLR_LOCK_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN_CLR |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_CLR_LOCK_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN_CLR &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_CLR_LOCK_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN_CLR ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE7_AUTHEN_CLR & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE7_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN_CLR |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN_CLR &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_CLR_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN_CLR ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_CLR_LOCK_LIST() volatile
    {
        return GPR_PRIVATE7_AUTHEN_CLR & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE7_AUTHEN_CLR_LOCK_LIST() volatile
    {
        GPR_PRIVATE7_AUTHEN_CLR |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_CLR_LOCK_LIST() volatile
    {
        GPR_PRIVATE7_AUTHEN_CLR &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_CLR_LOCK_LIST() volatile
    {
        GPR_PRIVATE7_AUTHEN_CLR ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN_CLR's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_PRIVATE7_AUTHEN_CLR_WHITE_LIST() volatile
    {
        return (GPR_PRIVATE7_AUTHEN_CLR >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN_CLR's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE7_AUTHEN_CLR_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE7_AUTHEN_CLR;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_PRIVATE7_AUTHEN_CLR = curr;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_CLR_LOCK_TZ() volatile
    {
        return GPR_PRIVATE7_AUTHEN_CLR & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE7_AUTHEN_CLR_LOCK_TZ() volatile
    {
        GPR_PRIVATE7_AUTHEN_CLR |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_CLR_LOCK_TZ() volatile
    {
        GPR_PRIVATE7_AUTHEN_CLR &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_CLR_LOCK_TZ() volatile
    {
        GPR_PRIVATE7_AUTHEN_CLR ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_CLR_TZ_NS() volatile
    {
        return GPR_PRIVATE7_AUTHEN_CLR & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE7_AUTHEN_CLR_TZ_NS() volatile
    {
        GPR_PRIVATE7_AUTHEN_CLR |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_CLR_TZ_NS() volatile
    {
        GPR_PRIVATE7_AUTHEN_CLR &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_CLR_TZ_NS() volatile
    {
        GPR_PRIVATE7_AUTHEN_CLR ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_CLR_TZ_USER() volatile
    {
        return GPR_PRIVATE7_AUTHEN_CLR & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE7_AUTHEN_CLR_TZ_USER() volatile
    {
        GPR_PRIVATE7_AUTHEN_CLR |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_CLR_TZ_USER() volatile
    {
        GPR_PRIVATE7_AUTHEN_CLR &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_CLR_TZ_USER() volatile
    {
        GPR_PRIVATE7_AUTHEN_CLR ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE7_AUTHEN_CLR's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE7_AUTHEN_CLR(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                            bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE7_AUTHEN_CLR;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE7_AUTHEN_CLR's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE7_AUTHEN_CLR(bool LOCK_MODE, bool DOMAIN_MODE,
                                            bool LOCK_LIST, uint8_t WHITE_LIST,
                                            bool LOCK_TZ, bool TZ_NS,
                                            bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE7_AUTHEN_CLR;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE7_AUTHEN_CLR = curr;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_TOG_LOCK_MODE() volatile
    {
        return GPR_PRIVATE7_AUTHEN_TOG & (1u << 20u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_PRIVATE7_AUTHEN_TOG_LOCK_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN_TOG |= 1u << 20u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_TOG_LOCK_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN_TOG &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_TOG_LOCK_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN_TOG ^= 1u << 20u;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        return GPR_PRIVATE7_AUTHEN_TOG & (1u << 16u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void set_GPR_PRIVATE7_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN_TOG |= 1u << 16u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN_TOG &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by Domain
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_TOG_DOMAIN_MODE() volatile
    {
        GPR_PRIVATE7_AUTHEN_TOG ^= 1u << 16u;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_TOG_LOCK_LIST() volatile
    {
        return GPR_PRIVATE7_AUTHEN_TOG & (1u << 12u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_PRIVATE7_AUTHEN_TOG_LOCK_LIST() volatile
    {
        GPR_PRIVATE7_AUTHEN_TOG |= 1u << 12u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_TOG_LOCK_LIST() volatile
    {
        GPR_PRIVATE7_AUTHEN_TOG &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_TOG_LOCK_LIST() volatile
    {
        GPR_PRIVATE7_AUTHEN_TOG ^= 1u << 12u;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN_TOG's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_PRIVATE7_AUTHEN_TOG_WHITE_LIST() volatile
    {
        return (GPR_PRIVATE7_AUTHEN_TOG >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN_TOG's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_PRIVATE7_AUTHEN_TOG_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = GPR_PRIVATE7_AUTHEN_TOG;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_PRIVATE7_AUTHEN_TOG = curr;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_TOG_LOCK_TZ() volatile
    {
        return GPR_PRIVATE7_AUTHEN_TOG & (1u << 4u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_PRIVATE7_AUTHEN_TOG_LOCK_TZ() volatile
    {
        GPR_PRIVATE7_AUTHEN_TOG |= 1u << 4u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_TOG_LOCK_TZ() volatile
    {
        GPR_PRIVATE7_AUTHEN_TOG &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_TOG_LOCK_TZ() volatile
    {
        GPR_PRIVATE7_AUTHEN_TOG ^= 1u << 4u;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_TOG_TZ_NS() volatile
    {
        return GPR_PRIVATE7_AUTHEN_TOG & (1u << 1u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_PRIVATE7_AUTHEN_TOG_TZ_NS() volatile
    {
        GPR_PRIVATE7_AUTHEN_TOG |= 1u << 1u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_TOG_TZ_NS() volatile
    {
        GPR_PRIVATE7_AUTHEN_TOG &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_TOG_TZ_NS() volatile
    {
        GPR_PRIVATE7_AUTHEN_TOG ^= 1u << 1u;
    }

    /**
     * Get GPR_PRIVATE7_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_PRIVATE7_AUTHEN_TOG_TZ_USER() volatile
    {
        return GPR_PRIVATE7_AUTHEN_TOG & (1u << 0u);
    }

    /**
     * Set GPR_PRIVATE7_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_PRIVATE7_AUTHEN_TOG_TZ_USER() volatile
    {
        GPR_PRIVATE7_AUTHEN_TOG |= 1u << 0u;
    }

    /**
     * Clear GPR_PRIVATE7_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_PRIVATE7_AUTHEN_TOG_TZ_USER() volatile
    {
        GPR_PRIVATE7_AUTHEN_TOG &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_PRIVATE7_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_PRIVATE7_AUTHEN_TOG_TZ_USER() volatile
    {
        GPR_PRIVATE7_AUTHEN_TOG ^= 1u << 0u;
    }

    /**
     * Get all of GPR_PRIVATE7_AUTHEN_TOG's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_PRIVATE7_AUTHEN_TOG(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                            bool &LOCK_LIST,
                                            uint8_t &WHITE_LIST, bool &LOCK_TZ,
                                            bool &TZ_NS,
                                            bool &TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE7_AUTHEN_TOG;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_PRIVATE7_AUTHEN_TOG's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_PRIVATE7_AUTHEN_TOG(bool LOCK_MODE, bool DOMAIN_MODE,
                                            bool LOCK_LIST, uint8_t WHITE_LIST,
                                            bool LOCK_TZ, bool TZ_NS,
                                            bool TZ_USER) volatile
    {
        uint32_t curr = GPR_PRIVATE7_AUTHEN_TOG;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_PRIVATE7_AUTHEN_TOG = curr;
    }

    /**
     * Get LPCG0_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG0_DIRECT_ON() volatile
    {
        return LPCG0_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG0_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG0_DIRECT_ON() volatile
    {
        LPCG0_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG0_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG0_DIRECT_ON() volatile
    {
        LPCG0_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG0_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG0_DIRECT_ON() volatile
    {
        LPCG0_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG0_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG0_DOMAIN_LEVEL3 get_LPCG0_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG0_DOMAIN_LEVEL3((LPCG0_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG0_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG0_DOMAIN_LEVEL3(CCM_LPCG0_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG0_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG0_DOMAIN = curr;
    }

    /**
     * Get LPCG0_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG0_DOMAIN_LEVEL2 get_LPCG0_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG0_DOMAIN_LEVEL2((LPCG0_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG0_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG0_DOMAIN_LEVEL2(CCM_LPCG0_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG0_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG0_DOMAIN = curr;
    }

    /**
     * Get LPCG0_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG0_DOMAIN_LEVEL1 get_LPCG0_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG0_DOMAIN_LEVEL1((LPCG0_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG0_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG0_DOMAIN_LEVEL1(CCM_LPCG0_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG0_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG0_DOMAIN = curr;
    }

    /**
     * Get LPCG0_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG0_DOMAIN_LEVEL0 get_LPCG0_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG0_DOMAIN_LEVEL0((LPCG0_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG0_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG0_DOMAIN_LEVEL0(CCM_LPCG0_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG0_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG0_DOMAIN = curr;
    }

    /**
     * Get LPCG0_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG0_DOMAIN_LEVEL get_LPCG0_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG0_DOMAIN_LEVEL((LPCG0_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG0_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG0_DOMAIN_LEVEL(CCM_LPCG0_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG0_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG0_DOMAIN = curr;
    }

    /**
     * Get all of LPCG0_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG0_DOMAIN(CCM_LPCG0_DOMAIN_LEVEL3 &LEVEL3,
                                 CCM_LPCG0_DOMAIN_LEVEL2 &LEVEL2,
                                 CCM_LPCG0_DOMAIN_LEVEL1 &LEVEL1,
                                 CCM_LPCG0_DOMAIN_LEVEL0 &LEVEL0,
                                 CCM_LPCG0_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG0_DOMAIN;

        LEVEL3 = CCM_LPCG0_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG0_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG0_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG0_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG0_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG0_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG0_DOMAIN(CCM_LPCG0_DOMAIN_LEVEL3 LEVEL3,
                                 CCM_LPCG0_DOMAIN_LEVEL2 LEVEL2,
                                 CCM_LPCG0_DOMAIN_LEVEL1 LEVEL1,
                                 CCM_LPCG0_DOMAIN_LEVEL0 LEVEL0,
                                 CCM_LPCG0_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG0_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG0_DOMAIN = curr;
    }

    /**
     * Get LPCG0_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG0_STATUS0_DOMAIN_ENABLE
    get_LPCG0_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG0_STATUS0_DOMAIN_ENABLE((LPCG0_STATUS0 >> 12u) &
                                               0b1111u);
    }

    /**
     * Get LPCG0_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG0_STATUS0_ACTIVE_DOMAIN
    get_LPCG0_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG0_STATUS0_ACTIVE_DOMAIN((LPCG0_STATUS0 >> 8u) &
                                               0b1111u);
    }

    /**
     * Get LPCG0_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG0_STATUS0_ON() volatile
    {
        return LPCG0_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG0_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG0_STATUS0(
        CCM_LPCG0_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG0_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG0_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG0_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG0_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG0_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG0_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG0_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG0_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG0_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG0_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG0_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG0_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG0_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG0_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG0_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG0_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG0_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG0_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG0_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG0_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG0_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG0_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG0_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG0_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG0_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG0_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG0_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG0_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG0_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG0_STATUS1_CPU3_MODE get_LPCG0_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG0_STATUS1_CPU3_MODE((LPCG0_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG0_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG0_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG0_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG0_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG0_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG0_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG0_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG0_STATUS1_CPU2_MODE get_LPCG0_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG0_STATUS1_CPU2_MODE((LPCG0_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG0_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG0_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG0_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG0_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG0_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG0_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG0_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG0_STATUS1_CPU1_MODE get_LPCG0_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG0_STATUS1_CPU1_MODE((LPCG0_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG0_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG0_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG0_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG0_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG0_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG0_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG0_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG0_STATUS1_CPU0_MODE get_LPCG0_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG0_STATUS1_CPU0_MODE((LPCG0_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG0_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG0_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG0_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG0_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG0_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG0_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG0_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG0_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG0_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG0_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG0_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG0_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG0_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG0_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG0_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG0_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG0_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG0_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG0_AUTHEN_LOCK_MODE() volatile
    {
        LPCG0_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG0_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG0_AUTHEN_LOCK_MODE() volatile
    {
        LPCG0_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG0_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG0_AUTHEN_LOCK_MODE() volatile
    {
        LPCG0_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG0_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG0_AUTHEN_CPULPM() volatile
    {
        return LPCG0_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG0_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG0_AUTHEN_CPULPM() volatile
    {
        LPCG0_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG0_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG0_AUTHEN_CPULPM() volatile
    {
        LPCG0_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG0_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG0_AUTHEN_CPULPM() volatile
    {
        LPCG0_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG0_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG0_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG0_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG0_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG0_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG0_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG0_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG0_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG0_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG0_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG0_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG0_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG0_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG0_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG0_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG0_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG0_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG0_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG0_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG0_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG0_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG0_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG0_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG0_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG0_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG0_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG0_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG0_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG0_AUTHEN_LOCK_LIST() volatile
    {
        LPCG0_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG0_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG0_AUTHEN_LOCK_LIST() volatile
    {
        LPCG0_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG0_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG0_AUTHEN_LOCK_LIST() volatile
    {
        LPCG0_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG0_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG0_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG0_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG0_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG0_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG0_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG0_AUTHEN = curr;
    }

    /**
     * Get LPCG0_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG0_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG0_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG0_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG0_AUTHEN_LOCK_TZ() volatile
    {
        LPCG0_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG0_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG0_AUTHEN_LOCK_TZ() volatile
    {
        LPCG0_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG0_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG0_AUTHEN_LOCK_TZ() volatile
    {
        LPCG0_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG0_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG0_AUTHEN_TZ_NS() volatile
    {
        return LPCG0_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG0_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG0_AUTHEN_TZ_NS() volatile
    {
        LPCG0_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG0_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG0_AUTHEN_TZ_NS() volatile
    {
        LPCG0_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG0_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG0_AUTHEN_TZ_NS() volatile
    {
        LPCG0_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG0_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG0_AUTHEN_TZ_USER() volatile
    {
        return LPCG0_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG0_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG0_AUTHEN_TZ_USER() volatile
    {
        LPCG0_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG0_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG0_AUTHEN_TZ_USER() volatile
    {
        LPCG0_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG0_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG0_AUTHEN_TZ_USER() volatile
    {
        LPCG0_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG0_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG0_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                 bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                 bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                 bool &LOCK_TZ, bool &TZ_NS,
                                 bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG0_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG0_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG0_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                 bool SETPOINT_MODE, bool DOMAIN_MODE,
                                 bool LOCK_LIST, uint8_t WHITE_LIST,
                                 bool LOCK_TZ, bool TZ_NS,
                                 bool TZ_USER) volatile
    {
        uint32_t curr = LPCG0_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG0_AUTHEN = curr;
    }

    /**
     * Get LPCG1_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG1_DIRECT_ON() volatile
    {
        return LPCG1_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG1_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG1_DIRECT_ON() volatile
    {
        LPCG1_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG1_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG1_DIRECT_ON() volatile
    {
        LPCG1_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG1_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG1_DIRECT_ON() volatile
    {
        LPCG1_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG1_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG1_DOMAIN_LEVEL3 get_LPCG1_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG1_DOMAIN_LEVEL3((LPCG1_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG1_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG1_DOMAIN_LEVEL3(CCM_LPCG1_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG1_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG1_DOMAIN = curr;
    }

    /**
     * Get LPCG1_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG1_DOMAIN_LEVEL2 get_LPCG1_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG1_DOMAIN_LEVEL2((LPCG1_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG1_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG1_DOMAIN_LEVEL2(CCM_LPCG1_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG1_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG1_DOMAIN = curr;
    }

    /**
     * Get LPCG1_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG1_DOMAIN_LEVEL1 get_LPCG1_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG1_DOMAIN_LEVEL1((LPCG1_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG1_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG1_DOMAIN_LEVEL1(CCM_LPCG1_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG1_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG1_DOMAIN = curr;
    }

    /**
     * Get LPCG1_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG1_DOMAIN_LEVEL0 get_LPCG1_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG1_DOMAIN_LEVEL0((LPCG1_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG1_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG1_DOMAIN_LEVEL0(CCM_LPCG1_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG1_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG1_DOMAIN = curr;
    }

    /**
     * Get LPCG1_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG1_DOMAIN_LEVEL get_LPCG1_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG1_DOMAIN_LEVEL((LPCG1_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG1_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG1_DOMAIN_LEVEL(CCM_LPCG1_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG1_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG1_DOMAIN = curr;
    }

    /**
     * Get all of LPCG1_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG1_DOMAIN(CCM_LPCG1_DOMAIN_LEVEL3 &LEVEL3,
                                 CCM_LPCG1_DOMAIN_LEVEL2 &LEVEL2,
                                 CCM_LPCG1_DOMAIN_LEVEL1 &LEVEL1,
                                 CCM_LPCG1_DOMAIN_LEVEL0 &LEVEL0,
                                 CCM_LPCG1_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG1_DOMAIN;

        LEVEL3 = CCM_LPCG1_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG1_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG1_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG1_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG1_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG1_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG1_DOMAIN(CCM_LPCG1_DOMAIN_LEVEL3 LEVEL3,
                                 CCM_LPCG1_DOMAIN_LEVEL2 LEVEL2,
                                 CCM_LPCG1_DOMAIN_LEVEL1 LEVEL1,
                                 CCM_LPCG1_DOMAIN_LEVEL0 LEVEL0,
                                 CCM_LPCG1_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG1_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG1_DOMAIN = curr;
    }

    /**
     * Get LPCG1_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG1_STATUS0_DOMAIN_ENABLE
    get_LPCG1_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG1_STATUS0_DOMAIN_ENABLE((LPCG1_STATUS0 >> 12u) &
                                               0b1111u);
    }

    /**
     * Get LPCG1_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG1_STATUS0_ACTIVE_DOMAIN
    get_LPCG1_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG1_STATUS0_ACTIVE_DOMAIN((LPCG1_STATUS0 >> 8u) &
                                               0b1111u);
    }

    /**
     * Get LPCG1_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG1_STATUS0_ON() volatile
    {
        return LPCG1_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG1_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG1_STATUS0(
        CCM_LPCG1_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG1_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG1_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG1_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG1_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG1_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG1_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG1_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG1_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG1_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG1_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG1_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG1_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG1_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG1_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG1_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG1_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG1_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG1_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG1_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG1_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG1_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG1_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG1_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG1_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG1_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG1_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG1_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG1_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG1_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG1_STATUS1_CPU3_MODE get_LPCG1_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG1_STATUS1_CPU3_MODE((LPCG1_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG1_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG1_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG1_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG1_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG1_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG1_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG1_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG1_STATUS1_CPU2_MODE get_LPCG1_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG1_STATUS1_CPU2_MODE((LPCG1_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG1_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG1_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG1_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG1_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG1_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG1_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG1_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG1_STATUS1_CPU1_MODE get_LPCG1_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG1_STATUS1_CPU1_MODE((LPCG1_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG1_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG1_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG1_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG1_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG1_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG1_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG1_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG1_STATUS1_CPU0_MODE get_LPCG1_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG1_STATUS1_CPU0_MODE((LPCG1_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG1_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG1_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG1_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG1_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG1_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG1_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG1_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG1_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG1_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG1_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG1_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG1_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG1_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG1_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG1_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG1_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG1_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG1_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG1_AUTHEN_LOCK_MODE() volatile
    {
        LPCG1_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG1_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG1_AUTHEN_LOCK_MODE() volatile
    {
        LPCG1_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG1_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG1_AUTHEN_LOCK_MODE() volatile
    {
        LPCG1_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG1_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG1_AUTHEN_CPULPM() volatile
    {
        return LPCG1_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG1_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG1_AUTHEN_CPULPM() volatile
    {
        LPCG1_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG1_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG1_AUTHEN_CPULPM() volatile
    {
        LPCG1_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG1_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG1_AUTHEN_CPULPM() volatile
    {
        LPCG1_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG1_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG1_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG1_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG1_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG1_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG1_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG1_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG1_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG1_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG1_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG1_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG1_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG1_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG1_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG1_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG1_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG1_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG1_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG1_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG1_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG1_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG1_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG1_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG1_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG1_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG1_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG1_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG1_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG1_AUTHEN_LOCK_LIST() volatile
    {
        LPCG1_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG1_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG1_AUTHEN_LOCK_LIST() volatile
    {
        LPCG1_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG1_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG1_AUTHEN_LOCK_LIST() volatile
    {
        LPCG1_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG1_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG1_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG1_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG1_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG1_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG1_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG1_AUTHEN = curr;
    }

    /**
     * Get LPCG1_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG1_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG1_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG1_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG1_AUTHEN_LOCK_TZ() volatile
    {
        LPCG1_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG1_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG1_AUTHEN_LOCK_TZ() volatile
    {
        LPCG1_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG1_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG1_AUTHEN_LOCK_TZ() volatile
    {
        LPCG1_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG1_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG1_AUTHEN_TZ_NS() volatile
    {
        return LPCG1_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG1_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG1_AUTHEN_TZ_NS() volatile
    {
        LPCG1_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG1_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG1_AUTHEN_TZ_NS() volatile
    {
        LPCG1_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG1_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG1_AUTHEN_TZ_NS() volatile
    {
        LPCG1_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG1_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG1_AUTHEN_TZ_USER() volatile
    {
        return LPCG1_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG1_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG1_AUTHEN_TZ_USER() volatile
    {
        LPCG1_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG1_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG1_AUTHEN_TZ_USER() volatile
    {
        LPCG1_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG1_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG1_AUTHEN_TZ_USER() volatile
    {
        LPCG1_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG1_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG1_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                 bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                 bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                 bool &LOCK_TZ, bool &TZ_NS,
                                 bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG1_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG1_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG1_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                 bool SETPOINT_MODE, bool DOMAIN_MODE,
                                 bool LOCK_LIST, uint8_t WHITE_LIST,
                                 bool LOCK_TZ, bool TZ_NS,
                                 bool TZ_USER) volatile
    {
        uint32_t curr = LPCG1_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG1_AUTHEN = curr;
    }

    /**
     * Get LPCG2_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG2_DIRECT_ON() volatile
    {
        return LPCG2_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG2_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG2_DIRECT_ON() volatile
    {
        LPCG2_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG2_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG2_DIRECT_ON() volatile
    {
        LPCG2_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG2_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG2_DIRECT_ON() volatile
    {
        LPCG2_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG2_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG2_DOMAIN_LEVEL3 get_LPCG2_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG2_DOMAIN_LEVEL3((LPCG2_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG2_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG2_DOMAIN_LEVEL3(CCM_LPCG2_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG2_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG2_DOMAIN = curr;
    }

    /**
     * Get LPCG2_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG2_DOMAIN_LEVEL2 get_LPCG2_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG2_DOMAIN_LEVEL2((LPCG2_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG2_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG2_DOMAIN_LEVEL2(CCM_LPCG2_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG2_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG2_DOMAIN = curr;
    }

    /**
     * Get LPCG2_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG2_DOMAIN_LEVEL1 get_LPCG2_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG2_DOMAIN_LEVEL1((LPCG2_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG2_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG2_DOMAIN_LEVEL1(CCM_LPCG2_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG2_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG2_DOMAIN = curr;
    }

    /**
     * Get LPCG2_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG2_DOMAIN_LEVEL0 get_LPCG2_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG2_DOMAIN_LEVEL0((LPCG2_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG2_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG2_DOMAIN_LEVEL0(CCM_LPCG2_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG2_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG2_DOMAIN = curr;
    }

    /**
     * Get LPCG2_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG2_DOMAIN_LEVEL get_LPCG2_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG2_DOMAIN_LEVEL((LPCG2_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG2_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG2_DOMAIN_LEVEL(CCM_LPCG2_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG2_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG2_DOMAIN = curr;
    }

    /**
     * Get all of LPCG2_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG2_DOMAIN(CCM_LPCG2_DOMAIN_LEVEL3 &LEVEL3,
                                 CCM_LPCG2_DOMAIN_LEVEL2 &LEVEL2,
                                 CCM_LPCG2_DOMAIN_LEVEL1 &LEVEL1,
                                 CCM_LPCG2_DOMAIN_LEVEL0 &LEVEL0,
                                 CCM_LPCG2_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG2_DOMAIN;

        LEVEL3 = CCM_LPCG2_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG2_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG2_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG2_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG2_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG2_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG2_DOMAIN(CCM_LPCG2_DOMAIN_LEVEL3 LEVEL3,
                                 CCM_LPCG2_DOMAIN_LEVEL2 LEVEL2,
                                 CCM_LPCG2_DOMAIN_LEVEL1 LEVEL1,
                                 CCM_LPCG2_DOMAIN_LEVEL0 LEVEL0,
                                 CCM_LPCG2_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG2_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG2_DOMAIN = curr;
    }

    /**
     * Get LPCG2_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG2_SETPOINT_STANDBY() volatile
    {
        return (LPCG2_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG2_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG2_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG2_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG2_SETPOINT = curr;
    }

    /**
     * Get LPCG2_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG2_SETPOINT_SETPOINT() volatile
    {
        return (LPCG2_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG2_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG2_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG2_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG2_SETPOINT = curr;
    }

    /**
     * Get all of LPCG2_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG2_SETPOINT(uint16_t &STANDBY,
                                   uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG2_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG2_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG2_SETPOINT(uint16_t STANDBY,
                                   uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG2_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG2_SETPOINT = curr;
    }

    /**
     * Get LPCG2_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG2_STATUS0_DOMAIN_ENABLE
    get_LPCG2_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG2_STATUS0_DOMAIN_ENABLE((LPCG2_STATUS0 >> 12u) &
                                               0b1111u);
    }

    /**
     * Get LPCG2_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG2_STATUS0_ACTIVE_DOMAIN
    get_LPCG2_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG2_STATUS0_ACTIVE_DOMAIN((LPCG2_STATUS0 >> 8u) &
                                               0b1111u);
    }

    /**
     * Get LPCG2_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG2_STATUS0_ON() volatile
    {
        return LPCG2_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG2_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG2_STATUS0(
        CCM_LPCG2_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG2_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG2_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG2_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG2_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG2_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG2_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG2_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG2_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG2_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG2_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG2_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG2_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG2_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG2_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG2_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG2_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG2_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG2_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG2_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG2_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG2_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG2_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG2_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG2_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG2_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG2_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG2_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG2_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG2_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG2_STATUS1_CPU3_MODE get_LPCG2_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG2_STATUS1_CPU3_MODE((LPCG2_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG2_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG2_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG2_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG2_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG2_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG2_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG2_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG2_STATUS1_CPU2_MODE get_LPCG2_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG2_STATUS1_CPU2_MODE((LPCG2_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG2_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG2_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG2_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG2_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG2_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG2_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG2_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG2_STATUS1_CPU1_MODE get_LPCG2_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG2_STATUS1_CPU1_MODE((LPCG2_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG2_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG2_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG2_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG2_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG2_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG2_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG2_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG2_STATUS1_CPU0_MODE get_LPCG2_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG2_STATUS1_CPU0_MODE((LPCG2_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG2_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG2_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG2_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG2_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG2_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG2_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG2_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG2_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG2_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG2_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG2_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG2_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG2_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG2_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG2_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG2_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG2_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG2_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG2_AUTHEN_LOCK_MODE() volatile
    {
        LPCG2_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG2_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG2_AUTHEN_LOCK_MODE() volatile
    {
        LPCG2_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG2_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG2_AUTHEN_LOCK_MODE() volatile
    {
        LPCG2_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG2_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG2_AUTHEN_CPULPM() volatile
    {
        return LPCG2_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG2_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG2_AUTHEN_CPULPM() volatile
    {
        LPCG2_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG2_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG2_AUTHEN_CPULPM() volatile
    {
        LPCG2_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG2_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG2_AUTHEN_CPULPM() volatile
    {
        LPCG2_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG2_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG2_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG2_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG2_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG2_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG2_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG2_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG2_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG2_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG2_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG2_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG2_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG2_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG2_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG2_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG2_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG2_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG2_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG2_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG2_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG2_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG2_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG2_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG2_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG2_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG2_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG2_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG2_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG2_AUTHEN_LOCK_LIST() volatile
    {
        LPCG2_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG2_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG2_AUTHEN_LOCK_LIST() volatile
    {
        LPCG2_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG2_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG2_AUTHEN_LOCK_LIST() volatile
    {
        LPCG2_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG2_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG2_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG2_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG2_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG2_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG2_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG2_AUTHEN = curr;
    }

    /**
     * Get LPCG2_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG2_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG2_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG2_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG2_AUTHEN_LOCK_TZ() volatile
    {
        LPCG2_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG2_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG2_AUTHEN_LOCK_TZ() volatile
    {
        LPCG2_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG2_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG2_AUTHEN_LOCK_TZ() volatile
    {
        LPCG2_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG2_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG2_AUTHEN_TZ_NS() volatile
    {
        return LPCG2_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG2_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG2_AUTHEN_TZ_NS() volatile
    {
        LPCG2_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG2_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG2_AUTHEN_TZ_NS() volatile
    {
        LPCG2_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG2_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG2_AUTHEN_TZ_NS() volatile
    {
        LPCG2_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG2_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG2_AUTHEN_TZ_USER() volatile
    {
        return LPCG2_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG2_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG2_AUTHEN_TZ_USER() volatile
    {
        LPCG2_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG2_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG2_AUTHEN_TZ_USER() volatile
    {
        LPCG2_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG2_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG2_AUTHEN_TZ_USER() volatile
    {
        LPCG2_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG2_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG2_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                 bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                 bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                 bool &LOCK_TZ, bool &TZ_NS,
                                 bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG2_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG2_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG2_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                 bool SETPOINT_MODE, bool DOMAIN_MODE,
                                 bool LOCK_LIST, uint8_t WHITE_LIST,
                                 bool LOCK_TZ, bool TZ_NS,
                                 bool TZ_USER) volatile
    {
        uint32_t curr = LPCG2_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG2_AUTHEN = curr;
    }

    /**
     * Get LPCG3_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG3_DIRECT_ON() volatile
    {
        return LPCG3_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG3_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG3_DIRECT_ON() volatile
    {
        LPCG3_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG3_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG3_DIRECT_ON() volatile
    {
        LPCG3_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG3_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG3_DIRECT_ON() volatile
    {
        LPCG3_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG3_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG3_DOMAIN_LEVEL3 get_LPCG3_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG3_DOMAIN_LEVEL3((LPCG3_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG3_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG3_DOMAIN_LEVEL3(CCM_LPCG3_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG3_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG3_DOMAIN = curr;
    }

    /**
     * Get LPCG3_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG3_DOMAIN_LEVEL2 get_LPCG3_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG3_DOMAIN_LEVEL2((LPCG3_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG3_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG3_DOMAIN_LEVEL2(CCM_LPCG3_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG3_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG3_DOMAIN = curr;
    }

    /**
     * Get LPCG3_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG3_DOMAIN_LEVEL1 get_LPCG3_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG3_DOMAIN_LEVEL1((LPCG3_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG3_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG3_DOMAIN_LEVEL1(CCM_LPCG3_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG3_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG3_DOMAIN = curr;
    }

    /**
     * Get LPCG3_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG3_DOMAIN_LEVEL0 get_LPCG3_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG3_DOMAIN_LEVEL0((LPCG3_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG3_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG3_DOMAIN_LEVEL0(CCM_LPCG3_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG3_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG3_DOMAIN = curr;
    }

    /**
     * Get LPCG3_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG3_DOMAIN_LEVEL get_LPCG3_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG3_DOMAIN_LEVEL((LPCG3_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG3_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG3_DOMAIN_LEVEL(CCM_LPCG3_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG3_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG3_DOMAIN = curr;
    }

    /**
     * Get all of LPCG3_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG3_DOMAIN(CCM_LPCG3_DOMAIN_LEVEL3 &LEVEL3,
                                 CCM_LPCG3_DOMAIN_LEVEL2 &LEVEL2,
                                 CCM_LPCG3_DOMAIN_LEVEL1 &LEVEL1,
                                 CCM_LPCG3_DOMAIN_LEVEL0 &LEVEL0,
                                 CCM_LPCG3_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG3_DOMAIN;

        LEVEL3 = CCM_LPCG3_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG3_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG3_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG3_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG3_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG3_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG3_DOMAIN(CCM_LPCG3_DOMAIN_LEVEL3 LEVEL3,
                                 CCM_LPCG3_DOMAIN_LEVEL2 LEVEL2,
                                 CCM_LPCG3_DOMAIN_LEVEL1 LEVEL1,
                                 CCM_LPCG3_DOMAIN_LEVEL0 LEVEL0,
                                 CCM_LPCG3_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG3_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG3_DOMAIN = curr;
    }

    /**
     * Get LPCG3_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG3_SETPOINT_STANDBY() volatile
    {
        return (LPCG3_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG3_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG3_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG3_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG3_SETPOINT = curr;
    }

    /**
     * Get LPCG3_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG3_SETPOINT_SETPOINT() volatile
    {
        return (LPCG3_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG3_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG3_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG3_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG3_SETPOINT = curr;
    }

    /**
     * Get all of LPCG3_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG3_SETPOINT(uint16_t &STANDBY,
                                   uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG3_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG3_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG3_SETPOINT(uint16_t STANDBY,
                                   uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG3_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG3_SETPOINT = curr;
    }

    /**
     * Get LPCG3_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG3_STATUS0_DOMAIN_ENABLE
    get_LPCG3_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG3_STATUS0_DOMAIN_ENABLE((LPCG3_STATUS0 >> 12u) &
                                               0b1111u);
    }

    /**
     * Get LPCG3_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG3_STATUS0_ACTIVE_DOMAIN
    get_LPCG3_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG3_STATUS0_ACTIVE_DOMAIN((LPCG3_STATUS0 >> 8u) &
                                               0b1111u);
    }

    /**
     * Get LPCG3_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG3_STATUS0_ON() volatile
    {
        return LPCG3_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG3_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG3_STATUS0(
        CCM_LPCG3_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG3_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG3_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG3_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG3_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG3_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG3_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG3_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG3_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG3_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG3_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG3_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG3_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG3_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG3_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG3_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG3_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG3_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG3_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG3_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG3_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG3_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG3_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG3_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG3_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG3_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG3_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG3_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG3_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG3_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG3_STATUS1_CPU3_MODE get_LPCG3_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG3_STATUS1_CPU3_MODE((LPCG3_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG3_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG3_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG3_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG3_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG3_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG3_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG3_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG3_STATUS1_CPU2_MODE get_LPCG3_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG3_STATUS1_CPU2_MODE((LPCG3_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG3_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG3_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG3_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG3_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG3_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG3_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG3_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG3_STATUS1_CPU1_MODE get_LPCG3_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG3_STATUS1_CPU1_MODE((LPCG3_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG3_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG3_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG3_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG3_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG3_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG3_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG3_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG3_STATUS1_CPU0_MODE get_LPCG3_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG3_STATUS1_CPU0_MODE((LPCG3_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG3_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG3_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG3_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG3_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG3_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG3_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG3_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG3_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG3_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG3_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG3_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG3_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG3_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG3_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG3_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG3_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG3_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG3_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG3_AUTHEN_LOCK_MODE() volatile
    {
        LPCG3_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG3_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG3_AUTHEN_LOCK_MODE() volatile
    {
        LPCG3_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG3_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG3_AUTHEN_LOCK_MODE() volatile
    {
        LPCG3_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG3_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG3_AUTHEN_CPULPM() volatile
    {
        return LPCG3_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG3_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG3_AUTHEN_CPULPM() volatile
    {
        LPCG3_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG3_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG3_AUTHEN_CPULPM() volatile
    {
        LPCG3_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG3_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG3_AUTHEN_CPULPM() volatile
    {
        LPCG3_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG3_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG3_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG3_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG3_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG3_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG3_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG3_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG3_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG3_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG3_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG3_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG3_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG3_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG3_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG3_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG3_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG3_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG3_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG3_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG3_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG3_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG3_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG3_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG3_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG3_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG3_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG3_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG3_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG3_AUTHEN_LOCK_LIST() volatile
    {
        LPCG3_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG3_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG3_AUTHEN_LOCK_LIST() volatile
    {
        LPCG3_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG3_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG3_AUTHEN_LOCK_LIST() volatile
    {
        LPCG3_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG3_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG3_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG3_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG3_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG3_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG3_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG3_AUTHEN = curr;
    }

    /**
     * Get LPCG3_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG3_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG3_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG3_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG3_AUTHEN_LOCK_TZ() volatile
    {
        LPCG3_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG3_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG3_AUTHEN_LOCK_TZ() volatile
    {
        LPCG3_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG3_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG3_AUTHEN_LOCK_TZ() volatile
    {
        LPCG3_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG3_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG3_AUTHEN_TZ_NS() volatile
    {
        return LPCG3_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG3_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG3_AUTHEN_TZ_NS() volatile
    {
        LPCG3_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG3_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG3_AUTHEN_TZ_NS() volatile
    {
        LPCG3_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG3_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG3_AUTHEN_TZ_NS() volatile
    {
        LPCG3_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG3_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG3_AUTHEN_TZ_USER() volatile
    {
        return LPCG3_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG3_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG3_AUTHEN_TZ_USER() volatile
    {
        LPCG3_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG3_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG3_AUTHEN_TZ_USER() volatile
    {
        LPCG3_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG3_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG3_AUTHEN_TZ_USER() volatile
    {
        LPCG3_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG3_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG3_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                 bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                 bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                 bool &LOCK_TZ, bool &TZ_NS,
                                 bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG3_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG3_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG3_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                 bool SETPOINT_MODE, bool DOMAIN_MODE,
                                 bool LOCK_LIST, uint8_t WHITE_LIST,
                                 bool LOCK_TZ, bool TZ_NS,
                                 bool TZ_USER) volatile
    {
        uint32_t curr = LPCG3_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG3_AUTHEN = curr;
    }

    /**
     * Get LPCG4_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG4_DIRECT_ON() volatile
    {
        return LPCG4_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG4_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG4_DIRECT_ON() volatile
    {
        LPCG4_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG4_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG4_DIRECT_ON() volatile
    {
        LPCG4_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG4_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG4_DIRECT_ON() volatile
    {
        LPCG4_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG4_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG4_DOMAIN_LEVEL3 get_LPCG4_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG4_DOMAIN_LEVEL3((LPCG4_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG4_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG4_DOMAIN_LEVEL3(CCM_LPCG4_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG4_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG4_DOMAIN = curr;
    }

    /**
     * Get LPCG4_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG4_DOMAIN_LEVEL2 get_LPCG4_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG4_DOMAIN_LEVEL2((LPCG4_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG4_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG4_DOMAIN_LEVEL2(CCM_LPCG4_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG4_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG4_DOMAIN = curr;
    }

    /**
     * Get LPCG4_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG4_DOMAIN_LEVEL1 get_LPCG4_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG4_DOMAIN_LEVEL1((LPCG4_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG4_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG4_DOMAIN_LEVEL1(CCM_LPCG4_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG4_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG4_DOMAIN = curr;
    }

    /**
     * Get LPCG4_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG4_DOMAIN_LEVEL0 get_LPCG4_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG4_DOMAIN_LEVEL0((LPCG4_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG4_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG4_DOMAIN_LEVEL0(CCM_LPCG4_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG4_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG4_DOMAIN = curr;
    }

    /**
     * Get LPCG4_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG4_DOMAIN_LEVEL get_LPCG4_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG4_DOMAIN_LEVEL((LPCG4_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG4_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG4_DOMAIN_LEVEL(CCM_LPCG4_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG4_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG4_DOMAIN = curr;
    }

    /**
     * Get all of LPCG4_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG4_DOMAIN(CCM_LPCG4_DOMAIN_LEVEL3 &LEVEL3,
                                 CCM_LPCG4_DOMAIN_LEVEL2 &LEVEL2,
                                 CCM_LPCG4_DOMAIN_LEVEL1 &LEVEL1,
                                 CCM_LPCG4_DOMAIN_LEVEL0 &LEVEL0,
                                 CCM_LPCG4_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG4_DOMAIN;

        LEVEL3 = CCM_LPCG4_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG4_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG4_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG4_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG4_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG4_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG4_DOMAIN(CCM_LPCG4_DOMAIN_LEVEL3 LEVEL3,
                                 CCM_LPCG4_DOMAIN_LEVEL2 LEVEL2,
                                 CCM_LPCG4_DOMAIN_LEVEL1 LEVEL1,
                                 CCM_LPCG4_DOMAIN_LEVEL0 LEVEL0,
                                 CCM_LPCG4_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG4_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG4_DOMAIN = curr;
    }

    /**
     * Get LPCG4_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG4_SETPOINT_STANDBY() volatile
    {
        return (LPCG4_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG4_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG4_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG4_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG4_SETPOINT = curr;
    }

    /**
     * Get LPCG4_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG4_SETPOINT_SETPOINT() volatile
    {
        return (LPCG4_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG4_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG4_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG4_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG4_SETPOINT = curr;
    }

    /**
     * Get all of LPCG4_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG4_SETPOINT(uint16_t &STANDBY,
                                   uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG4_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG4_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG4_SETPOINT(uint16_t STANDBY,
                                   uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG4_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG4_SETPOINT = curr;
    }

    /**
     * Get LPCG4_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG4_STATUS0_DOMAIN_ENABLE
    get_LPCG4_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG4_STATUS0_DOMAIN_ENABLE((LPCG4_STATUS0 >> 12u) &
                                               0b1111u);
    }

    /**
     * Get LPCG4_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG4_STATUS0_ACTIVE_DOMAIN
    get_LPCG4_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG4_STATUS0_ACTIVE_DOMAIN((LPCG4_STATUS0 >> 8u) &
                                               0b1111u);
    }

    /**
     * Get LPCG4_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG4_STATUS0_ON() volatile
    {
        return LPCG4_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG4_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG4_STATUS0(
        CCM_LPCG4_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG4_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG4_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG4_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG4_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG4_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG4_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG4_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG4_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG4_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG4_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG4_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG4_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG4_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG4_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG4_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG4_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG4_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG4_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG4_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG4_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG4_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG4_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG4_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG4_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG4_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG4_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG4_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG4_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG4_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG4_STATUS1_CPU3_MODE get_LPCG4_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG4_STATUS1_CPU3_MODE((LPCG4_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG4_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG4_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG4_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG4_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG4_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG4_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG4_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG4_STATUS1_CPU2_MODE get_LPCG4_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG4_STATUS1_CPU2_MODE((LPCG4_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG4_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG4_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG4_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG4_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG4_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG4_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG4_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG4_STATUS1_CPU1_MODE get_LPCG4_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG4_STATUS1_CPU1_MODE((LPCG4_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG4_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG4_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG4_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG4_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG4_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG4_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG4_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG4_STATUS1_CPU0_MODE get_LPCG4_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG4_STATUS1_CPU0_MODE((LPCG4_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG4_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG4_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG4_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG4_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG4_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG4_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG4_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG4_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG4_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG4_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG4_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG4_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG4_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG4_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG4_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG4_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG4_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG4_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG4_AUTHEN_LOCK_MODE() volatile
    {
        LPCG4_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG4_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG4_AUTHEN_LOCK_MODE() volatile
    {
        LPCG4_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG4_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG4_AUTHEN_LOCK_MODE() volatile
    {
        LPCG4_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG4_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG4_AUTHEN_CPULPM() volatile
    {
        return LPCG4_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG4_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG4_AUTHEN_CPULPM() volatile
    {
        LPCG4_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG4_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG4_AUTHEN_CPULPM() volatile
    {
        LPCG4_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG4_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG4_AUTHEN_CPULPM() volatile
    {
        LPCG4_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG4_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG4_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG4_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG4_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG4_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG4_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG4_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG4_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG4_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG4_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG4_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG4_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG4_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG4_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG4_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG4_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG4_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG4_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG4_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG4_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG4_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG4_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG4_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG4_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG4_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG4_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG4_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG4_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG4_AUTHEN_LOCK_LIST() volatile
    {
        LPCG4_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG4_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG4_AUTHEN_LOCK_LIST() volatile
    {
        LPCG4_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG4_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG4_AUTHEN_LOCK_LIST() volatile
    {
        LPCG4_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG4_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG4_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG4_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG4_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG4_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG4_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG4_AUTHEN = curr;
    }

    /**
     * Get LPCG4_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG4_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG4_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG4_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG4_AUTHEN_LOCK_TZ() volatile
    {
        LPCG4_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG4_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG4_AUTHEN_LOCK_TZ() volatile
    {
        LPCG4_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG4_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG4_AUTHEN_LOCK_TZ() volatile
    {
        LPCG4_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG4_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG4_AUTHEN_TZ_NS() volatile
    {
        return LPCG4_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG4_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG4_AUTHEN_TZ_NS() volatile
    {
        LPCG4_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG4_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG4_AUTHEN_TZ_NS() volatile
    {
        LPCG4_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG4_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG4_AUTHEN_TZ_NS() volatile
    {
        LPCG4_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG4_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG4_AUTHEN_TZ_USER() volatile
    {
        return LPCG4_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG4_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG4_AUTHEN_TZ_USER() volatile
    {
        LPCG4_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG4_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG4_AUTHEN_TZ_USER() volatile
    {
        LPCG4_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG4_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG4_AUTHEN_TZ_USER() volatile
    {
        LPCG4_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG4_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG4_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                 bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                 bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                 bool &LOCK_TZ, bool &TZ_NS,
                                 bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG4_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG4_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG4_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                 bool SETPOINT_MODE, bool DOMAIN_MODE,
                                 bool LOCK_LIST, uint8_t WHITE_LIST,
                                 bool LOCK_TZ, bool TZ_NS,
                                 bool TZ_USER) volatile
    {
        uint32_t curr = LPCG4_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG4_AUTHEN = curr;
    }

    /**
     * Get LPCG5_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG5_DIRECT_ON() volatile
    {
        return LPCG5_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG5_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG5_DIRECT_ON() volatile
    {
        LPCG5_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG5_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG5_DIRECT_ON() volatile
    {
        LPCG5_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG5_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG5_DIRECT_ON() volatile
    {
        LPCG5_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG5_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG5_DOMAIN_LEVEL3 get_LPCG5_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG5_DOMAIN_LEVEL3((LPCG5_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG5_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG5_DOMAIN_LEVEL3(CCM_LPCG5_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG5_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG5_DOMAIN = curr;
    }

    /**
     * Get LPCG5_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG5_DOMAIN_LEVEL2 get_LPCG5_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG5_DOMAIN_LEVEL2((LPCG5_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG5_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG5_DOMAIN_LEVEL2(CCM_LPCG5_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG5_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG5_DOMAIN = curr;
    }

    /**
     * Get LPCG5_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG5_DOMAIN_LEVEL1 get_LPCG5_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG5_DOMAIN_LEVEL1((LPCG5_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG5_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG5_DOMAIN_LEVEL1(CCM_LPCG5_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG5_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG5_DOMAIN = curr;
    }

    /**
     * Get LPCG5_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG5_DOMAIN_LEVEL0 get_LPCG5_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG5_DOMAIN_LEVEL0((LPCG5_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG5_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG5_DOMAIN_LEVEL0(CCM_LPCG5_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG5_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG5_DOMAIN = curr;
    }

    /**
     * Get LPCG5_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG5_DOMAIN_LEVEL get_LPCG5_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG5_DOMAIN_LEVEL((LPCG5_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG5_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG5_DOMAIN_LEVEL(CCM_LPCG5_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG5_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG5_DOMAIN = curr;
    }

    /**
     * Get all of LPCG5_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG5_DOMAIN(CCM_LPCG5_DOMAIN_LEVEL3 &LEVEL3,
                                 CCM_LPCG5_DOMAIN_LEVEL2 &LEVEL2,
                                 CCM_LPCG5_DOMAIN_LEVEL1 &LEVEL1,
                                 CCM_LPCG5_DOMAIN_LEVEL0 &LEVEL0,
                                 CCM_LPCG5_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG5_DOMAIN;

        LEVEL3 = CCM_LPCG5_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG5_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG5_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG5_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG5_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG5_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG5_DOMAIN(CCM_LPCG5_DOMAIN_LEVEL3 LEVEL3,
                                 CCM_LPCG5_DOMAIN_LEVEL2 LEVEL2,
                                 CCM_LPCG5_DOMAIN_LEVEL1 LEVEL1,
                                 CCM_LPCG5_DOMAIN_LEVEL0 LEVEL0,
                                 CCM_LPCG5_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG5_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG5_DOMAIN = curr;
    }

    /**
     * Get LPCG5_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG5_SETPOINT_STANDBY() volatile
    {
        return (LPCG5_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG5_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG5_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG5_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG5_SETPOINT = curr;
    }

    /**
     * Get LPCG5_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG5_SETPOINT_SETPOINT() volatile
    {
        return (LPCG5_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG5_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG5_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG5_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG5_SETPOINT = curr;
    }

    /**
     * Get all of LPCG5_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG5_SETPOINT(uint16_t &STANDBY,
                                   uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG5_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG5_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG5_SETPOINT(uint16_t STANDBY,
                                   uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG5_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG5_SETPOINT = curr;
    }

    /**
     * Get LPCG5_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG5_STATUS0_DOMAIN_ENABLE
    get_LPCG5_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG5_STATUS0_DOMAIN_ENABLE((LPCG5_STATUS0 >> 12u) &
                                               0b1111u);
    }

    /**
     * Get LPCG5_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG5_STATUS0_ACTIVE_DOMAIN
    get_LPCG5_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG5_STATUS0_ACTIVE_DOMAIN((LPCG5_STATUS0 >> 8u) &
                                               0b1111u);
    }

    /**
     * Get LPCG5_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG5_STATUS0_ON() volatile
    {
        return LPCG5_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG5_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG5_STATUS0(
        CCM_LPCG5_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG5_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG5_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG5_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG5_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG5_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG5_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG5_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG5_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG5_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG5_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG5_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG5_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG5_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG5_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG5_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG5_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG5_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG5_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG5_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG5_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG5_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG5_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG5_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG5_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG5_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG5_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG5_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG5_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG5_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG5_STATUS1_CPU3_MODE get_LPCG5_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG5_STATUS1_CPU3_MODE((LPCG5_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG5_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG5_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG5_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG5_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG5_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG5_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG5_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG5_STATUS1_CPU2_MODE get_LPCG5_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG5_STATUS1_CPU2_MODE((LPCG5_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG5_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG5_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG5_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG5_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG5_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG5_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG5_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG5_STATUS1_CPU1_MODE get_LPCG5_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG5_STATUS1_CPU1_MODE((LPCG5_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG5_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG5_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG5_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG5_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG5_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG5_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG5_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG5_STATUS1_CPU0_MODE get_LPCG5_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG5_STATUS1_CPU0_MODE((LPCG5_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG5_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG5_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG5_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG5_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG5_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG5_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG5_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG5_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG5_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG5_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG5_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG5_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG5_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG5_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG5_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG5_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG5_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG5_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG5_AUTHEN_LOCK_MODE() volatile
    {
        LPCG5_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG5_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG5_AUTHEN_LOCK_MODE() volatile
    {
        LPCG5_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG5_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG5_AUTHEN_LOCK_MODE() volatile
    {
        LPCG5_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG5_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG5_AUTHEN_CPULPM() volatile
    {
        return LPCG5_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG5_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG5_AUTHEN_CPULPM() volatile
    {
        LPCG5_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG5_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG5_AUTHEN_CPULPM() volatile
    {
        LPCG5_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG5_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG5_AUTHEN_CPULPM() volatile
    {
        LPCG5_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG5_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG5_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG5_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG5_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG5_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG5_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG5_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG5_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG5_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG5_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG5_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG5_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG5_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG5_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG5_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG5_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG5_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG5_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG5_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG5_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG5_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG5_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG5_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG5_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG5_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG5_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG5_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG5_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG5_AUTHEN_LOCK_LIST() volatile
    {
        LPCG5_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG5_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG5_AUTHEN_LOCK_LIST() volatile
    {
        LPCG5_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG5_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG5_AUTHEN_LOCK_LIST() volatile
    {
        LPCG5_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG5_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG5_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG5_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG5_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG5_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG5_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG5_AUTHEN = curr;
    }

    /**
     * Get LPCG5_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG5_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG5_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG5_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG5_AUTHEN_LOCK_TZ() volatile
    {
        LPCG5_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG5_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG5_AUTHEN_LOCK_TZ() volatile
    {
        LPCG5_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG5_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG5_AUTHEN_LOCK_TZ() volatile
    {
        LPCG5_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG5_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG5_AUTHEN_TZ_NS() volatile
    {
        return LPCG5_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG5_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG5_AUTHEN_TZ_NS() volatile
    {
        LPCG5_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG5_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG5_AUTHEN_TZ_NS() volatile
    {
        LPCG5_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG5_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG5_AUTHEN_TZ_NS() volatile
    {
        LPCG5_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG5_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG5_AUTHEN_TZ_USER() volatile
    {
        return LPCG5_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG5_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG5_AUTHEN_TZ_USER() volatile
    {
        LPCG5_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG5_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG5_AUTHEN_TZ_USER() volatile
    {
        LPCG5_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG5_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG5_AUTHEN_TZ_USER() volatile
    {
        LPCG5_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG5_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG5_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                 bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                 bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                 bool &LOCK_TZ, bool &TZ_NS,
                                 bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG5_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG5_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG5_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                 bool SETPOINT_MODE, bool DOMAIN_MODE,
                                 bool LOCK_LIST, uint8_t WHITE_LIST,
                                 bool LOCK_TZ, bool TZ_NS,
                                 bool TZ_USER) volatile
    {
        uint32_t curr = LPCG5_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG5_AUTHEN = curr;
    }

    /**
     * Get LPCG6_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG6_DIRECT_ON() volatile
    {
        return LPCG6_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG6_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG6_DIRECT_ON() volatile
    {
        LPCG6_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG6_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG6_DIRECT_ON() volatile
    {
        LPCG6_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG6_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG6_DIRECT_ON() volatile
    {
        LPCG6_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG6_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG6_DOMAIN_LEVEL3 get_LPCG6_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG6_DOMAIN_LEVEL3((LPCG6_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG6_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG6_DOMAIN_LEVEL3(CCM_LPCG6_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG6_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG6_DOMAIN = curr;
    }

    /**
     * Get LPCG6_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG6_DOMAIN_LEVEL2 get_LPCG6_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG6_DOMAIN_LEVEL2((LPCG6_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG6_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG6_DOMAIN_LEVEL2(CCM_LPCG6_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG6_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG6_DOMAIN = curr;
    }

    /**
     * Get LPCG6_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG6_DOMAIN_LEVEL1 get_LPCG6_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG6_DOMAIN_LEVEL1((LPCG6_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG6_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG6_DOMAIN_LEVEL1(CCM_LPCG6_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG6_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG6_DOMAIN = curr;
    }

    /**
     * Get LPCG6_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG6_DOMAIN_LEVEL0 get_LPCG6_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG6_DOMAIN_LEVEL0((LPCG6_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG6_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG6_DOMAIN_LEVEL0(CCM_LPCG6_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG6_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG6_DOMAIN = curr;
    }

    /**
     * Get LPCG6_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG6_DOMAIN_LEVEL get_LPCG6_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG6_DOMAIN_LEVEL((LPCG6_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG6_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG6_DOMAIN_LEVEL(CCM_LPCG6_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG6_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG6_DOMAIN = curr;
    }

    /**
     * Get all of LPCG6_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG6_DOMAIN(CCM_LPCG6_DOMAIN_LEVEL3 &LEVEL3,
                                 CCM_LPCG6_DOMAIN_LEVEL2 &LEVEL2,
                                 CCM_LPCG6_DOMAIN_LEVEL1 &LEVEL1,
                                 CCM_LPCG6_DOMAIN_LEVEL0 &LEVEL0,
                                 CCM_LPCG6_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG6_DOMAIN;

        LEVEL3 = CCM_LPCG6_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG6_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG6_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG6_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG6_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG6_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG6_DOMAIN(CCM_LPCG6_DOMAIN_LEVEL3 LEVEL3,
                                 CCM_LPCG6_DOMAIN_LEVEL2 LEVEL2,
                                 CCM_LPCG6_DOMAIN_LEVEL1 LEVEL1,
                                 CCM_LPCG6_DOMAIN_LEVEL0 LEVEL0,
                                 CCM_LPCG6_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG6_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG6_DOMAIN = curr;
    }

    /**
     * Get LPCG6_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG6_SETPOINT_STANDBY() volatile
    {
        return (LPCG6_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG6_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG6_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG6_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG6_SETPOINT = curr;
    }

    /**
     * Get LPCG6_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG6_SETPOINT_SETPOINT() volatile
    {
        return (LPCG6_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG6_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG6_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG6_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG6_SETPOINT = curr;
    }

    /**
     * Get all of LPCG6_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG6_SETPOINT(uint16_t &STANDBY,
                                   uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG6_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG6_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG6_SETPOINT(uint16_t STANDBY,
                                   uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG6_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG6_SETPOINT = curr;
    }

    /**
     * Get LPCG6_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG6_STATUS0_DOMAIN_ENABLE
    get_LPCG6_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG6_STATUS0_DOMAIN_ENABLE((LPCG6_STATUS0 >> 12u) &
                                               0b1111u);
    }

    /**
     * Get LPCG6_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG6_STATUS0_ACTIVE_DOMAIN
    get_LPCG6_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG6_STATUS0_ACTIVE_DOMAIN((LPCG6_STATUS0 >> 8u) &
                                               0b1111u);
    }

    /**
     * Get LPCG6_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG6_STATUS0_ON() volatile
    {
        return LPCG6_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG6_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG6_STATUS0(
        CCM_LPCG6_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG6_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG6_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG6_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG6_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG6_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG6_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG6_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG6_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG6_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG6_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG6_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG6_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG6_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG6_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG6_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG6_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG6_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG6_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG6_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG6_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG6_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG6_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG6_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG6_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG6_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG6_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG6_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG6_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG6_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG6_STATUS1_CPU3_MODE get_LPCG6_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG6_STATUS1_CPU3_MODE((LPCG6_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG6_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG6_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG6_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG6_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG6_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG6_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG6_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG6_STATUS1_CPU2_MODE get_LPCG6_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG6_STATUS1_CPU2_MODE((LPCG6_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG6_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG6_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG6_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG6_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG6_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG6_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG6_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG6_STATUS1_CPU1_MODE get_LPCG6_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG6_STATUS1_CPU1_MODE((LPCG6_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG6_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG6_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG6_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG6_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG6_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG6_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG6_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG6_STATUS1_CPU0_MODE get_LPCG6_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG6_STATUS1_CPU0_MODE((LPCG6_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG6_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG6_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG6_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG6_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG6_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG6_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG6_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG6_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG6_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG6_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG6_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG6_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG6_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG6_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG6_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG6_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG6_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG6_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG6_AUTHEN_LOCK_MODE() volatile
    {
        LPCG6_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG6_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG6_AUTHEN_LOCK_MODE() volatile
    {
        LPCG6_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG6_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG6_AUTHEN_LOCK_MODE() volatile
    {
        LPCG6_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG6_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG6_AUTHEN_CPULPM() volatile
    {
        return LPCG6_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG6_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG6_AUTHEN_CPULPM() volatile
    {
        LPCG6_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG6_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG6_AUTHEN_CPULPM() volatile
    {
        LPCG6_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG6_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG6_AUTHEN_CPULPM() volatile
    {
        LPCG6_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG6_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG6_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG6_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG6_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG6_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG6_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG6_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG6_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG6_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG6_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG6_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG6_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG6_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG6_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG6_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG6_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG6_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG6_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG6_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG6_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG6_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG6_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG6_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG6_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG6_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG6_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG6_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG6_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG6_AUTHEN_LOCK_LIST() volatile
    {
        LPCG6_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG6_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG6_AUTHEN_LOCK_LIST() volatile
    {
        LPCG6_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG6_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG6_AUTHEN_LOCK_LIST() volatile
    {
        LPCG6_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG6_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG6_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG6_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG6_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG6_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG6_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG6_AUTHEN = curr;
    }

    /**
     * Get LPCG6_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG6_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG6_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG6_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG6_AUTHEN_LOCK_TZ() volatile
    {
        LPCG6_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG6_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG6_AUTHEN_LOCK_TZ() volatile
    {
        LPCG6_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG6_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG6_AUTHEN_LOCK_TZ() volatile
    {
        LPCG6_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG6_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG6_AUTHEN_TZ_NS() volatile
    {
        return LPCG6_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG6_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG6_AUTHEN_TZ_NS() volatile
    {
        LPCG6_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG6_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG6_AUTHEN_TZ_NS() volatile
    {
        LPCG6_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG6_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG6_AUTHEN_TZ_NS() volatile
    {
        LPCG6_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG6_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG6_AUTHEN_TZ_USER() volatile
    {
        return LPCG6_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG6_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG6_AUTHEN_TZ_USER() volatile
    {
        LPCG6_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG6_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG6_AUTHEN_TZ_USER() volatile
    {
        LPCG6_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG6_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG6_AUTHEN_TZ_USER() volatile
    {
        LPCG6_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG6_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG6_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                 bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                 bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                 bool &LOCK_TZ, bool &TZ_NS,
                                 bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG6_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG6_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG6_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                 bool SETPOINT_MODE, bool DOMAIN_MODE,
                                 bool LOCK_LIST, uint8_t WHITE_LIST,
                                 bool LOCK_TZ, bool TZ_NS,
                                 bool TZ_USER) volatile
    {
        uint32_t curr = LPCG6_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG6_AUTHEN = curr;
    }

    /**
     * Get LPCG7_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG7_DIRECT_ON() volatile
    {
        return LPCG7_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG7_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG7_DIRECT_ON() volatile
    {
        LPCG7_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG7_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG7_DIRECT_ON() volatile
    {
        LPCG7_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG7_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG7_DIRECT_ON() volatile
    {
        LPCG7_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG7_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG7_DOMAIN_LEVEL3 get_LPCG7_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG7_DOMAIN_LEVEL3((LPCG7_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG7_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG7_DOMAIN_LEVEL3(CCM_LPCG7_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG7_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG7_DOMAIN = curr;
    }

    /**
     * Get LPCG7_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG7_DOMAIN_LEVEL2 get_LPCG7_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG7_DOMAIN_LEVEL2((LPCG7_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG7_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG7_DOMAIN_LEVEL2(CCM_LPCG7_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG7_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG7_DOMAIN = curr;
    }

    /**
     * Get LPCG7_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG7_DOMAIN_LEVEL1 get_LPCG7_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG7_DOMAIN_LEVEL1((LPCG7_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG7_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG7_DOMAIN_LEVEL1(CCM_LPCG7_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG7_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG7_DOMAIN = curr;
    }

    /**
     * Get LPCG7_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG7_DOMAIN_LEVEL0 get_LPCG7_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG7_DOMAIN_LEVEL0((LPCG7_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG7_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG7_DOMAIN_LEVEL0(CCM_LPCG7_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG7_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG7_DOMAIN = curr;
    }

    /**
     * Get LPCG7_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG7_DOMAIN_LEVEL get_LPCG7_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG7_DOMAIN_LEVEL((LPCG7_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG7_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG7_DOMAIN_LEVEL(CCM_LPCG7_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG7_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG7_DOMAIN = curr;
    }

    /**
     * Get all of LPCG7_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG7_DOMAIN(CCM_LPCG7_DOMAIN_LEVEL3 &LEVEL3,
                                 CCM_LPCG7_DOMAIN_LEVEL2 &LEVEL2,
                                 CCM_LPCG7_DOMAIN_LEVEL1 &LEVEL1,
                                 CCM_LPCG7_DOMAIN_LEVEL0 &LEVEL0,
                                 CCM_LPCG7_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG7_DOMAIN;

        LEVEL3 = CCM_LPCG7_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG7_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG7_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG7_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG7_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG7_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG7_DOMAIN(CCM_LPCG7_DOMAIN_LEVEL3 LEVEL3,
                                 CCM_LPCG7_DOMAIN_LEVEL2 LEVEL2,
                                 CCM_LPCG7_DOMAIN_LEVEL1 LEVEL1,
                                 CCM_LPCG7_DOMAIN_LEVEL0 LEVEL0,
                                 CCM_LPCG7_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG7_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG7_DOMAIN = curr;
    }

    /**
     * Get LPCG7_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG7_SETPOINT_STANDBY() volatile
    {
        return (LPCG7_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG7_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG7_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG7_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG7_SETPOINT = curr;
    }

    /**
     * Get LPCG7_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG7_SETPOINT_SETPOINT() volatile
    {
        return (LPCG7_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG7_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG7_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG7_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG7_SETPOINT = curr;
    }

    /**
     * Get all of LPCG7_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG7_SETPOINT(uint16_t &STANDBY,
                                   uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG7_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG7_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG7_SETPOINT(uint16_t STANDBY,
                                   uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG7_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG7_SETPOINT = curr;
    }

    /**
     * Get LPCG7_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG7_STATUS0_DOMAIN_ENABLE
    get_LPCG7_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG7_STATUS0_DOMAIN_ENABLE((LPCG7_STATUS0 >> 12u) &
                                               0b1111u);
    }

    /**
     * Get LPCG7_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG7_STATUS0_ACTIVE_DOMAIN
    get_LPCG7_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG7_STATUS0_ACTIVE_DOMAIN((LPCG7_STATUS0 >> 8u) &
                                               0b1111u);
    }

    /**
     * Get LPCG7_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG7_STATUS0_ON() volatile
    {
        return LPCG7_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG7_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG7_STATUS0(
        CCM_LPCG7_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG7_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG7_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG7_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG7_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG7_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG7_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG7_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG7_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG7_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG7_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG7_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG7_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG7_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG7_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG7_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG7_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG7_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG7_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG7_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG7_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG7_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG7_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG7_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG7_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG7_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG7_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG7_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG7_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG7_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG7_STATUS1_CPU3_MODE get_LPCG7_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG7_STATUS1_CPU3_MODE((LPCG7_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG7_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG7_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG7_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG7_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG7_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG7_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG7_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG7_STATUS1_CPU2_MODE get_LPCG7_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG7_STATUS1_CPU2_MODE((LPCG7_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG7_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG7_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG7_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG7_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG7_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG7_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG7_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG7_STATUS1_CPU1_MODE get_LPCG7_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG7_STATUS1_CPU1_MODE((LPCG7_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG7_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG7_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG7_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG7_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG7_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG7_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG7_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG7_STATUS1_CPU0_MODE get_LPCG7_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG7_STATUS1_CPU0_MODE((LPCG7_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG7_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG7_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG7_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG7_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG7_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG7_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG7_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG7_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG7_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG7_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG7_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG7_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG7_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG7_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG7_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG7_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG7_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG7_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG7_AUTHEN_LOCK_MODE() volatile
    {
        LPCG7_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG7_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG7_AUTHEN_LOCK_MODE() volatile
    {
        LPCG7_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG7_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG7_AUTHEN_LOCK_MODE() volatile
    {
        LPCG7_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG7_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG7_AUTHEN_CPULPM() volatile
    {
        return LPCG7_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG7_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG7_AUTHEN_CPULPM() volatile
    {
        LPCG7_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG7_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG7_AUTHEN_CPULPM() volatile
    {
        LPCG7_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG7_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG7_AUTHEN_CPULPM() volatile
    {
        LPCG7_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG7_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG7_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG7_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG7_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG7_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG7_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG7_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG7_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG7_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG7_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG7_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG7_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG7_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG7_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG7_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG7_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG7_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG7_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG7_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG7_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG7_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG7_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG7_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG7_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG7_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG7_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG7_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG7_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG7_AUTHEN_LOCK_LIST() volatile
    {
        LPCG7_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG7_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG7_AUTHEN_LOCK_LIST() volatile
    {
        LPCG7_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG7_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG7_AUTHEN_LOCK_LIST() volatile
    {
        LPCG7_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG7_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG7_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG7_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG7_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG7_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG7_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG7_AUTHEN = curr;
    }

    /**
     * Get LPCG7_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG7_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG7_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG7_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG7_AUTHEN_LOCK_TZ() volatile
    {
        LPCG7_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG7_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG7_AUTHEN_LOCK_TZ() volatile
    {
        LPCG7_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG7_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG7_AUTHEN_LOCK_TZ() volatile
    {
        LPCG7_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG7_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG7_AUTHEN_TZ_NS() volatile
    {
        return LPCG7_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG7_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG7_AUTHEN_TZ_NS() volatile
    {
        LPCG7_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG7_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG7_AUTHEN_TZ_NS() volatile
    {
        LPCG7_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG7_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG7_AUTHEN_TZ_NS() volatile
    {
        LPCG7_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG7_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG7_AUTHEN_TZ_USER() volatile
    {
        return LPCG7_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG7_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG7_AUTHEN_TZ_USER() volatile
    {
        LPCG7_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG7_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG7_AUTHEN_TZ_USER() volatile
    {
        LPCG7_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG7_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG7_AUTHEN_TZ_USER() volatile
    {
        LPCG7_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG7_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG7_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                 bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                 bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                 bool &LOCK_TZ, bool &TZ_NS,
                                 bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG7_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG7_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG7_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                 bool SETPOINT_MODE, bool DOMAIN_MODE,
                                 bool LOCK_LIST, uint8_t WHITE_LIST,
                                 bool LOCK_TZ, bool TZ_NS,
                                 bool TZ_USER) volatile
    {
        uint32_t curr = LPCG7_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG7_AUTHEN = curr;
    }

    /**
     * Get LPCG8_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG8_DIRECT_ON() volatile
    {
        return LPCG8_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG8_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG8_DIRECT_ON() volatile
    {
        LPCG8_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG8_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG8_DIRECT_ON() volatile
    {
        LPCG8_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG8_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG8_DIRECT_ON() volatile
    {
        LPCG8_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG8_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG8_DOMAIN_LEVEL3 get_LPCG8_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG8_DOMAIN_LEVEL3((LPCG8_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG8_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG8_DOMAIN_LEVEL3(CCM_LPCG8_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG8_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG8_DOMAIN = curr;
    }

    /**
     * Get LPCG8_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG8_DOMAIN_LEVEL2 get_LPCG8_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG8_DOMAIN_LEVEL2((LPCG8_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG8_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG8_DOMAIN_LEVEL2(CCM_LPCG8_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG8_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG8_DOMAIN = curr;
    }

    /**
     * Get LPCG8_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG8_DOMAIN_LEVEL1 get_LPCG8_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG8_DOMAIN_LEVEL1((LPCG8_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG8_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG8_DOMAIN_LEVEL1(CCM_LPCG8_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG8_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG8_DOMAIN = curr;
    }

    /**
     * Get LPCG8_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG8_DOMAIN_LEVEL0 get_LPCG8_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG8_DOMAIN_LEVEL0((LPCG8_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG8_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG8_DOMAIN_LEVEL0(CCM_LPCG8_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG8_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG8_DOMAIN = curr;
    }

    /**
     * Get LPCG8_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG8_DOMAIN_LEVEL get_LPCG8_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG8_DOMAIN_LEVEL((LPCG8_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG8_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG8_DOMAIN_LEVEL(CCM_LPCG8_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG8_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG8_DOMAIN = curr;
    }

    /**
     * Get all of LPCG8_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG8_DOMAIN(CCM_LPCG8_DOMAIN_LEVEL3 &LEVEL3,
                                 CCM_LPCG8_DOMAIN_LEVEL2 &LEVEL2,
                                 CCM_LPCG8_DOMAIN_LEVEL1 &LEVEL1,
                                 CCM_LPCG8_DOMAIN_LEVEL0 &LEVEL0,
                                 CCM_LPCG8_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG8_DOMAIN;

        LEVEL3 = CCM_LPCG8_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG8_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG8_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG8_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG8_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG8_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG8_DOMAIN(CCM_LPCG8_DOMAIN_LEVEL3 LEVEL3,
                                 CCM_LPCG8_DOMAIN_LEVEL2 LEVEL2,
                                 CCM_LPCG8_DOMAIN_LEVEL1 LEVEL1,
                                 CCM_LPCG8_DOMAIN_LEVEL0 LEVEL0,
                                 CCM_LPCG8_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG8_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG8_DOMAIN = curr;
    }

    /**
     * Get LPCG8_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG8_SETPOINT_STANDBY() volatile
    {
        return (LPCG8_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG8_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG8_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG8_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG8_SETPOINT = curr;
    }

    /**
     * Get LPCG8_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG8_SETPOINT_SETPOINT() volatile
    {
        return (LPCG8_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG8_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG8_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG8_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG8_SETPOINT = curr;
    }

    /**
     * Get all of LPCG8_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG8_SETPOINT(uint16_t &STANDBY,
                                   uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG8_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG8_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG8_SETPOINT(uint16_t STANDBY,
                                   uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG8_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG8_SETPOINT = curr;
    }

    /**
     * Get LPCG8_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG8_STATUS0_DOMAIN_ENABLE
    get_LPCG8_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG8_STATUS0_DOMAIN_ENABLE((LPCG8_STATUS0 >> 12u) &
                                               0b1111u);
    }

    /**
     * Get LPCG8_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG8_STATUS0_ACTIVE_DOMAIN
    get_LPCG8_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG8_STATUS0_ACTIVE_DOMAIN((LPCG8_STATUS0 >> 8u) &
                                               0b1111u);
    }

    /**
     * Get LPCG8_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG8_STATUS0_ON() volatile
    {
        return LPCG8_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG8_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG8_STATUS0(
        CCM_LPCG8_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG8_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG8_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG8_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG8_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG8_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG8_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG8_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG8_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG8_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG8_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG8_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG8_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG8_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG8_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG8_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG8_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG8_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG8_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG8_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG8_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG8_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG8_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG8_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG8_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG8_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG8_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG8_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG8_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG8_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG8_STATUS1_CPU3_MODE get_LPCG8_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG8_STATUS1_CPU3_MODE((LPCG8_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG8_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG8_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG8_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG8_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG8_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG8_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG8_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG8_STATUS1_CPU2_MODE get_LPCG8_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG8_STATUS1_CPU2_MODE((LPCG8_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG8_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG8_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG8_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG8_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG8_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG8_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG8_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG8_STATUS1_CPU1_MODE get_LPCG8_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG8_STATUS1_CPU1_MODE((LPCG8_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG8_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG8_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG8_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG8_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG8_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG8_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG8_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG8_STATUS1_CPU0_MODE get_LPCG8_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG8_STATUS1_CPU0_MODE((LPCG8_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG8_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG8_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG8_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG8_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG8_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG8_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG8_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG8_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG8_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG8_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG8_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG8_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG8_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG8_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG8_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG8_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG8_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG8_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG8_AUTHEN_LOCK_MODE() volatile
    {
        LPCG8_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG8_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG8_AUTHEN_LOCK_MODE() volatile
    {
        LPCG8_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG8_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG8_AUTHEN_LOCK_MODE() volatile
    {
        LPCG8_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG8_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG8_AUTHEN_CPULPM() volatile
    {
        return LPCG8_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG8_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG8_AUTHEN_CPULPM() volatile
    {
        LPCG8_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG8_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG8_AUTHEN_CPULPM() volatile
    {
        LPCG8_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG8_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG8_AUTHEN_CPULPM() volatile
    {
        LPCG8_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG8_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG8_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG8_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG8_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG8_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG8_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG8_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG8_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG8_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG8_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG8_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG8_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG8_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG8_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG8_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG8_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG8_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG8_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG8_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG8_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG8_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG8_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG8_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG8_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG8_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG8_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG8_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG8_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG8_AUTHEN_LOCK_LIST() volatile
    {
        LPCG8_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG8_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG8_AUTHEN_LOCK_LIST() volatile
    {
        LPCG8_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG8_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG8_AUTHEN_LOCK_LIST() volatile
    {
        LPCG8_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG8_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG8_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG8_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG8_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG8_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG8_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG8_AUTHEN = curr;
    }

    /**
     * Get LPCG8_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG8_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG8_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG8_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG8_AUTHEN_LOCK_TZ() volatile
    {
        LPCG8_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG8_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG8_AUTHEN_LOCK_TZ() volatile
    {
        LPCG8_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG8_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG8_AUTHEN_LOCK_TZ() volatile
    {
        LPCG8_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG8_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG8_AUTHEN_TZ_NS() volatile
    {
        return LPCG8_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG8_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG8_AUTHEN_TZ_NS() volatile
    {
        LPCG8_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG8_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG8_AUTHEN_TZ_NS() volatile
    {
        LPCG8_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG8_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG8_AUTHEN_TZ_NS() volatile
    {
        LPCG8_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG8_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG8_AUTHEN_TZ_USER() volatile
    {
        return LPCG8_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG8_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG8_AUTHEN_TZ_USER() volatile
    {
        LPCG8_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG8_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG8_AUTHEN_TZ_USER() volatile
    {
        LPCG8_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG8_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG8_AUTHEN_TZ_USER() volatile
    {
        LPCG8_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG8_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG8_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                 bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                 bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                 bool &LOCK_TZ, bool &TZ_NS,
                                 bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG8_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG8_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG8_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                 bool SETPOINT_MODE, bool DOMAIN_MODE,
                                 bool LOCK_LIST, uint8_t WHITE_LIST,
                                 bool LOCK_TZ, bool TZ_NS,
                                 bool TZ_USER) volatile
    {
        uint32_t curr = LPCG8_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG8_AUTHEN = curr;
    }

    /**
     * Get LPCG9_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG9_DIRECT_ON() volatile
    {
        return LPCG9_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG9_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG9_DIRECT_ON() volatile
    {
        LPCG9_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG9_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG9_DIRECT_ON() volatile
    {
        LPCG9_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG9_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG9_DIRECT_ON() volatile
    {
        LPCG9_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG9_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG9_DOMAIN_LEVEL3 get_LPCG9_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG9_DOMAIN_LEVEL3((LPCG9_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG9_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG9_DOMAIN_LEVEL3(CCM_LPCG9_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG9_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG9_DOMAIN = curr;
    }

    /**
     * Get LPCG9_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG9_DOMAIN_LEVEL2 get_LPCG9_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG9_DOMAIN_LEVEL2((LPCG9_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG9_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG9_DOMAIN_LEVEL2(CCM_LPCG9_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG9_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG9_DOMAIN = curr;
    }

    /**
     * Get LPCG9_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG9_DOMAIN_LEVEL1 get_LPCG9_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG9_DOMAIN_LEVEL1((LPCG9_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG9_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG9_DOMAIN_LEVEL1(CCM_LPCG9_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG9_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG9_DOMAIN = curr;
    }

    /**
     * Get LPCG9_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG9_DOMAIN_LEVEL0 get_LPCG9_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG9_DOMAIN_LEVEL0((LPCG9_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG9_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG9_DOMAIN_LEVEL0(CCM_LPCG9_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG9_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG9_DOMAIN = curr;
    }

    /**
     * Get LPCG9_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG9_DOMAIN_LEVEL get_LPCG9_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG9_DOMAIN_LEVEL((LPCG9_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG9_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG9_DOMAIN_LEVEL(CCM_LPCG9_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG9_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG9_DOMAIN = curr;
    }

    /**
     * Get all of LPCG9_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG9_DOMAIN(CCM_LPCG9_DOMAIN_LEVEL3 &LEVEL3,
                                 CCM_LPCG9_DOMAIN_LEVEL2 &LEVEL2,
                                 CCM_LPCG9_DOMAIN_LEVEL1 &LEVEL1,
                                 CCM_LPCG9_DOMAIN_LEVEL0 &LEVEL0,
                                 CCM_LPCG9_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG9_DOMAIN;

        LEVEL3 = CCM_LPCG9_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG9_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG9_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG9_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG9_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG9_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG9_DOMAIN(CCM_LPCG9_DOMAIN_LEVEL3 LEVEL3,
                                 CCM_LPCG9_DOMAIN_LEVEL2 LEVEL2,
                                 CCM_LPCG9_DOMAIN_LEVEL1 LEVEL1,
                                 CCM_LPCG9_DOMAIN_LEVEL0 LEVEL0,
                                 CCM_LPCG9_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG9_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG9_DOMAIN = curr;
    }

    /**
     * Get LPCG9_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG9_SETPOINT_STANDBY() volatile
    {
        return (LPCG9_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG9_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG9_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG9_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG9_SETPOINT = curr;
    }

    /**
     * Get LPCG9_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG9_SETPOINT_SETPOINT() volatile
    {
        return (LPCG9_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG9_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG9_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG9_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG9_SETPOINT = curr;
    }

    /**
     * Get all of LPCG9_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG9_SETPOINT(uint16_t &STANDBY,
                                   uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG9_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG9_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG9_SETPOINT(uint16_t STANDBY,
                                   uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG9_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG9_SETPOINT = curr;
    }

    /**
     * Get LPCG9_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG9_STATUS0_DOMAIN_ENABLE
    get_LPCG9_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG9_STATUS0_DOMAIN_ENABLE((LPCG9_STATUS0 >> 12u) &
                                               0b1111u);
    }

    /**
     * Get LPCG9_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG9_STATUS0_ACTIVE_DOMAIN
    get_LPCG9_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG9_STATUS0_ACTIVE_DOMAIN((LPCG9_STATUS0 >> 8u) &
                                               0b1111u);
    }

    /**
     * Get LPCG9_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG9_STATUS0_ON() volatile
    {
        return LPCG9_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG9_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG9_STATUS0(
        CCM_LPCG9_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG9_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG9_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG9_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG9_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG9_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG9_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG9_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG9_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG9_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG9_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG9_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG9_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG9_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG9_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG9_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG9_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG9_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG9_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG9_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG9_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG9_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG9_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG9_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG9_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG9_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG9_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG9_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG9_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG9_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG9_STATUS1_CPU3_MODE get_LPCG9_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG9_STATUS1_CPU3_MODE((LPCG9_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG9_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG9_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG9_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG9_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG9_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG9_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG9_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG9_STATUS1_CPU2_MODE get_LPCG9_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG9_STATUS1_CPU2_MODE((LPCG9_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG9_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG9_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG9_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG9_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG9_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG9_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG9_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG9_STATUS1_CPU1_MODE get_LPCG9_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG9_STATUS1_CPU1_MODE((LPCG9_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG9_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG9_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG9_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG9_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG9_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG9_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG9_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG9_STATUS1_CPU0_MODE get_LPCG9_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG9_STATUS1_CPU0_MODE((LPCG9_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG9_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG9_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG9_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG9_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG9_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG9_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG9_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG9_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG9_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG9_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG9_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG9_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG9_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG9_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG9_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG9_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG9_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG9_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG9_AUTHEN_LOCK_MODE() volatile
    {
        LPCG9_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG9_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG9_AUTHEN_LOCK_MODE() volatile
    {
        LPCG9_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG9_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG9_AUTHEN_LOCK_MODE() volatile
    {
        LPCG9_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG9_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG9_AUTHEN_CPULPM() volatile
    {
        return LPCG9_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG9_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG9_AUTHEN_CPULPM() volatile
    {
        LPCG9_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG9_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG9_AUTHEN_CPULPM() volatile
    {
        LPCG9_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG9_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG9_AUTHEN_CPULPM() volatile
    {
        LPCG9_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG9_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG9_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG9_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG9_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG9_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG9_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG9_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG9_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG9_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG9_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG9_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG9_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG9_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG9_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG9_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG9_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG9_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG9_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG9_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG9_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG9_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG9_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG9_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG9_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG9_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG9_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG9_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG9_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG9_AUTHEN_LOCK_LIST() volatile
    {
        LPCG9_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG9_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG9_AUTHEN_LOCK_LIST() volatile
    {
        LPCG9_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG9_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG9_AUTHEN_LOCK_LIST() volatile
    {
        LPCG9_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG9_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG9_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG9_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG9_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG9_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG9_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG9_AUTHEN = curr;
    }

    /**
     * Get LPCG9_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG9_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG9_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG9_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG9_AUTHEN_LOCK_TZ() volatile
    {
        LPCG9_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG9_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG9_AUTHEN_LOCK_TZ() volatile
    {
        LPCG9_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG9_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG9_AUTHEN_LOCK_TZ() volatile
    {
        LPCG9_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG9_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG9_AUTHEN_TZ_NS() volatile
    {
        return LPCG9_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG9_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG9_AUTHEN_TZ_NS() volatile
    {
        LPCG9_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG9_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG9_AUTHEN_TZ_NS() volatile
    {
        LPCG9_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG9_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG9_AUTHEN_TZ_NS() volatile
    {
        LPCG9_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG9_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG9_AUTHEN_TZ_USER() volatile
    {
        return LPCG9_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG9_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG9_AUTHEN_TZ_USER() volatile
    {
        LPCG9_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG9_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG9_AUTHEN_TZ_USER() volatile
    {
        LPCG9_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG9_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG9_AUTHEN_TZ_USER() volatile
    {
        LPCG9_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG9_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG9_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                 bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                 bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                 bool &LOCK_TZ, bool &TZ_NS,
                                 bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG9_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG9_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG9_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                 bool SETPOINT_MODE, bool DOMAIN_MODE,
                                 bool LOCK_LIST, uint8_t WHITE_LIST,
                                 bool LOCK_TZ, bool TZ_NS,
                                 bool TZ_USER) volatile
    {
        uint32_t curr = LPCG9_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG9_AUTHEN = curr;
    }

    /**
     * Get LPCG10_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG10_DIRECT_ON() volatile
    {
        return LPCG10_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG10_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG10_DIRECT_ON() volatile
    {
        LPCG10_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG10_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG10_DIRECT_ON() volatile
    {
        LPCG10_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG10_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG10_DIRECT_ON() volatile
    {
        LPCG10_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG10_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG10_DOMAIN_LEVEL3 get_LPCG10_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG10_DOMAIN_LEVEL3((LPCG10_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG10_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG10_DOMAIN_LEVEL3(
        CCM_LPCG10_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG10_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG10_DOMAIN = curr;
    }

    /**
     * Get LPCG10_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG10_DOMAIN_LEVEL2 get_LPCG10_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG10_DOMAIN_LEVEL2((LPCG10_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG10_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG10_DOMAIN_LEVEL2(
        CCM_LPCG10_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG10_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG10_DOMAIN = curr;
    }

    /**
     * Get LPCG10_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG10_DOMAIN_LEVEL1 get_LPCG10_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG10_DOMAIN_LEVEL1((LPCG10_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG10_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG10_DOMAIN_LEVEL1(
        CCM_LPCG10_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG10_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG10_DOMAIN = curr;
    }

    /**
     * Get LPCG10_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG10_DOMAIN_LEVEL0 get_LPCG10_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG10_DOMAIN_LEVEL0((LPCG10_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG10_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG10_DOMAIN_LEVEL0(
        CCM_LPCG10_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG10_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG10_DOMAIN = curr;
    }

    /**
     * Get LPCG10_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG10_DOMAIN_LEVEL get_LPCG10_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG10_DOMAIN_LEVEL((LPCG10_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG10_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG10_DOMAIN_LEVEL(CCM_LPCG10_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG10_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG10_DOMAIN = curr;
    }

    /**
     * Get all of LPCG10_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG10_DOMAIN(CCM_LPCG10_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG10_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG10_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG10_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG10_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG10_DOMAIN;

        LEVEL3 = CCM_LPCG10_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG10_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG10_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG10_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG10_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG10_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG10_DOMAIN(CCM_LPCG10_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG10_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG10_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG10_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG10_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG10_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG10_DOMAIN = curr;
    }

    /**
     * Get LPCG10_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG10_SETPOINT_STANDBY() volatile
    {
        return (LPCG10_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG10_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG10_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG10_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG10_SETPOINT = curr;
    }

    /**
     * Get LPCG10_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG10_SETPOINT_SETPOINT() volatile
    {
        return (LPCG10_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG10_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG10_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG10_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG10_SETPOINT = curr;
    }

    /**
     * Get all of LPCG10_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG10_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG10_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG10_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG10_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG10_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG10_SETPOINT = curr;
    }

    /**
     * Get LPCG10_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG10_STATUS0_DOMAIN_ENABLE
    get_LPCG10_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG10_STATUS0_DOMAIN_ENABLE((LPCG10_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG10_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG10_STATUS0_ACTIVE_DOMAIN
    get_LPCG10_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG10_STATUS0_ACTIVE_DOMAIN((LPCG10_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG10_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG10_STATUS0_ON() volatile
    {
        return LPCG10_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG10_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG10_STATUS0(
        CCM_LPCG10_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG10_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG10_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG10_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG10_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG10_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG10_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG10_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG10_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG10_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG10_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG10_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG10_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG10_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG10_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG10_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG10_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG10_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG10_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG10_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG10_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG10_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG10_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG10_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG10_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG10_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG10_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG10_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG10_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG10_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG10_STATUS1_CPU3_MODE get_LPCG10_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG10_STATUS1_CPU3_MODE((LPCG10_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG10_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG10_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG10_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG10_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG10_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG10_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG10_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG10_STATUS1_CPU2_MODE get_LPCG10_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG10_STATUS1_CPU2_MODE((LPCG10_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG10_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG10_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG10_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG10_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG10_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG10_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG10_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG10_STATUS1_CPU1_MODE get_LPCG10_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG10_STATUS1_CPU1_MODE((LPCG10_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG10_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG10_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG10_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG10_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG10_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG10_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG10_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG10_STATUS1_CPU0_MODE get_LPCG10_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG10_STATUS1_CPU0_MODE((LPCG10_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG10_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG10_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG10_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG10_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG10_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG10_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG10_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG10_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG10_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG10_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG10_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG10_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG10_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG10_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG10_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG10_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG10_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG10_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG10_AUTHEN_LOCK_MODE() volatile
    {
        LPCG10_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG10_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG10_AUTHEN_LOCK_MODE() volatile
    {
        LPCG10_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG10_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG10_AUTHEN_LOCK_MODE() volatile
    {
        LPCG10_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG10_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG10_AUTHEN_CPULPM() volatile
    {
        return LPCG10_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG10_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG10_AUTHEN_CPULPM() volatile
    {
        LPCG10_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG10_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG10_AUTHEN_CPULPM() volatile
    {
        LPCG10_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG10_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG10_AUTHEN_CPULPM() volatile
    {
        LPCG10_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG10_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG10_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG10_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG10_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG10_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG10_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG10_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG10_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG10_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG10_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG10_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG10_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG10_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG10_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG10_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG10_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG10_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG10_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG10_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG10_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG10_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG10_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG10_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG10_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG10_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG10_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG10_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG10_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG10_AUTHEN_LOCK_LIST() volatile
    {
        LPCG10_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG10_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG10_AUTHEN_LOCK_LIST() volatile
    {
        LPCG10_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG10_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG10_AUTHEN_LOCK_LIST() volatile
    {
        LPCG10_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG10_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG10_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG10_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG10_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG10_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG10_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG10_AUTHEN = curr;
    }

    /**
     * Get LPCG10_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG10_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG10_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG10_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG10_AUTHEN_LOCK_TZ() volatile
    {
        LPCG10_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG10_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG10_AUTHEN_LOCK_TZ() volatile
    {
        LPCG10_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG10_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG10_AUTHEN_LOCK_TZ() volatile
    {
        LPCG10_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG10_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG10_AUTHEN_TZ_NS() volatile
    {
        return LPCG10_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG10_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG10_AUTHEN_TZ_NS() volatile
    {
        LPCG10_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG10_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG10_AUTHEN_TZ_NS() volatile
    {
        LPCG10_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG10_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG10_AUTHEN_TZ_NS() volatile
    {
        LPCG10_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG10_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG10_AUTHEN_TZ_USER() volatile
    {
        return LPCG10_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG10_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG10_AUTHEN_TZ_USER() volatile
    {
        LPCG10_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG10_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG10_AUTHEN_TZ_USER() volatile
    {
        LPCG10_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG10_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG10_AUTHEN_TZ_USER() volatile
    {
        LPCG10_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG10_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG10_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG10_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG10_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG10_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG10_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG10_AUTHEN = curr;
    }

    /**
     * Get LPCG11_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG11_DIRECT_ON() volatile
    {
        return LPCG11_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG11_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG11_DIRECT_ON() volatile
    {
        LPCG11_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG11_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG11_DIRECT_ON() volatile
    {
        LPCG11_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG11_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG11_DIRECT_ON() volatile
    {
        LPCG11_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG11_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG11_DOMAIN_LEVEL3 get_LPCG11_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG11_DOMAIN_LEVEL3((LPCG11_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG11_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG11_DOMAIN_LEVEL3(
        CCM_LPCG11_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG11_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG11_DOMAIN = curr;
    }

    /**
     * Get LPCG11_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG11_DOMAIN_LEVEL2 get_LPCG11_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG11_DOMAIN_LEVEL2((LPCG11_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG11_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG11_DOMAIN_LEVEL2(
        CCM_LPCG11_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG11_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG11_DOMAIN = curr;
    }

    /**
     * Get LPCG11_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG11_DOMAIN_LEVEL1 get_LPCG11_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG11_DOMAIN_LEVEL1((LPCG11_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG11_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG11_DOMAIN_LEVEL1(
        CCM_LPCG11_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG11_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG11_DOMAIN = curr;
    }

    /**
     * Get LPCG11_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG11_DOMAIN_LEVEL0 get_LPCG11_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG11_DOMAIN_LEVEL0((LPCG11_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG11_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG11_DOMAIN_LEVEL0(
        CCM_LPCG11_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG11_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG11_DOMAIN = curr;
    }

    /**
     * Get LPCG11_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG11_DOMAIN_LEVEL get_LPCG11_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG11_DOMAIN_LEVEL((LPCG11_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG11_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG11_DOMAIN_LEVEL(CCM_LPCG11_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG11_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG11_DOMAIN = curr;
    }

    /**
     * Get all of LPCG11_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG11_DOMAIN(CCM_LPCG11_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG11_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG11_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG11_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG11_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG11_DOMAIN;

        LEVEL3 = CCM_LPCG11_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG11_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG11_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG11_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG11_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG11_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG11_DOMAIN(CCM_LPCG11_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG11_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG11_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG11_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG11_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG11_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG11_DOMAIN = curr;
    }

    /**
     * Get LPCG11_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG11_SETPOINT_STANDBY() volatile
    {
        return (LPCG11_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG11_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG11_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG11_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG11_SETPOINT = curr;
    }

    /**
     * Get LPCG11_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG11_SETPOINT_SETPOINT() volatile
    {
        return (LPCG11_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG11_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG11_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG11_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG11_SETPOINT = curr;
    }

    /**
     * Get all of LPCG11_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG11_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG11_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG11_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG11_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG11_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG11_SETPOINT = curr;
    }

    /**
     * Get LPCG11_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG11_STATUS0_DOMAIN_ENABLE
    get_LPCG11_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG11_STATUS0_DOMAIN_ENABLE((LPCG11_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG11_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG11_STATUS0_ACTIVE_DOMAIN
    get_LPCG11_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG11_STATUS0_ACTIVE_DOMAIN((LPCG11_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG11_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG11_STATUS0_ON() volatile
    {
        return LPCG11_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG11_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG11_STATUS0(
        CCM_LPCG11_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG11_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG11_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG11_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG11_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG11_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG11_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG11_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG11_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG11_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG11_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG11_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG11_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG11_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG11_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG11_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG11_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG11_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG11_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG11_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG11_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG11_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG11_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG11_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG11_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG11_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG11_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG11_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG11_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG11_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG11_STATUS1_CPU3_MODE get_LPCG11_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG11_STATUS1_CPU3_MODE((LPCG11_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG11_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG11_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG11_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG11_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG11_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG11_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG11_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG11_STATUS1_CPU2_MODE get_LPCG11_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG11_STATUS1_CPU2_MODE((LPCG11_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG11_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG11_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG11_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG11_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG11_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG11_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG11_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG11_STATUS1_CPU1_MODE get_LPCG11_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG11_STATUS1_CPU1_MODE((LPCG11_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG11_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG11_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG11_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG11_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG11_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG11_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG11_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG11_STATUS1_CPU0_MODE get_LPCG11_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG11_STATUS1_CPU0_MODE((LPCG11_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG11_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG11_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG11_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG11_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG11_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG11_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG11_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG11_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG11_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG11_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG11_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG11_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG11_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG11_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG11_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG11_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG11_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG11_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG11_AUTHEN_LOCK_MODE() volatile
    {
        LPCG11_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG11_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG11_AUTHEN_LOCK_MODE() volatile
    {
        LPCG11_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG11_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG11_AUTHEN_LOCK_MODE() volatile
    {
        LPCG11_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG11_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG11_AUTHEN_CPULPM() volatile
    {
        return LPCG11_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG11_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG11_AUTHEN_CPULPM() volatile
    {
        LPCG11_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG11_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG11_AUTHEN_CPULPM() volatile
    {
        LPCG11_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG11_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG11_AUTHEN_CPULPM() volatile
    {
        LPCG11_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG11_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG11_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG11_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG11_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG11_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG11_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG11_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG11_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG11_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG11_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG11_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG11_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG11_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG11_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG11_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG11_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG11_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG11_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG11_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG11_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG11_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG11_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG11_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG11_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG11_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG11_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG11_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG11_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG11_AUTHEN_LOCK_LIST() volatile
    {
        LPCG11_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG11_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG11_AUTHEN_LOCK_LIST() volatile
    {
        LPCG11_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG11_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG11_AUTHEN_LOCK_LIST() volatile
    {
        LPCG11_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG11_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG11_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG11_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG11_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG11_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG11_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG11_AUTHEN = curr;
    }

    /**
     * Get LPCG11_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG11_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG11_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG11_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG11_AUTHEN_LOCK_TZ() volatile
    {
        LPCG11_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG11_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG11_AUTHEN_LOCK_TZ() volatile
    {
        LPCG11_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG11_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG11_AUTHEN_LOCK_TZ() volatile
    {
        LPCG11_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG11_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG11_AUTHEN_TZ_NS() volatile
    {
        return LPCG11_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG11_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG11_AUTHEN_TZ_NS() volatile
    {
        LPCG11_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG11_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG11_AUTHEN_TZ_NS() volatile
    {
        LPCG11_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG11_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG11_AUTHEN_TZ_NS() volatile
    {
        LPCG11_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG11_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG11_AUTHEN_TZ_USER() volatile
    {
        return LPCG11_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG11_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG11_AUTHEN_TZ_USER() volatile
    {
        LPCG11_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG11_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG11_AUTHEN_TZ_USER() volatile
    {
        LPCG11_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG11_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG11_AUTHEN_TZ_USER() volatile
    {
        LPCG11_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG11_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG11_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG11_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG11_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG11_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG11_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG11_AUTHEN = curr;
    }

    /**
     * Get LPCG12_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG12_DIRECT_ON() volatile
    {
        return LPCG12_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG12_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG12_DIRECT_ON() volatile
    {
        LPCG12_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG12_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG12_DIRECT_ON() volatile
    {
        LPCG12_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG12_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG12_DIRECT_ON() volatile
    {
        LPCG12_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG12_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG12_DOMAIN_LEVEL3 get_LPCG12_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG12_DOMAIN_LEVEL3((LPCG12_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG12_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG12_DOMAIN_LEVEL3(
        CCM_LPCG12_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG12_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG12_DOMAIN = curr;
    }

    /**
     * Get LPCG12_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG12_DOMAIN_LEVEL2 get_LPCG12_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG12_DOMAIN_LEVEL2((LPCG12_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG12_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG12_DOMAIN_LEVEL2(
        CCM_LPCG12_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG12_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG12_DOMAIN = curr;
    }

    /**
     * Get LPCG12_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG12_DOMAIN_LEVEL1 get_LPCG12_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG12_DOMAIN_LEVEL1((LPCG12_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG12_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG12_DOMAIN_LEVEL1(
        CCM_LPCG12_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG12_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG12_DOMAIN = curr;
    }

    /**
     * Get LPCG12_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG12_DOMAIN_LEVEL0 get_LPCG12_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG12_DOMAIN_LEVEL0((LPCG12_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG12_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG12_DOMAIN_LEVEL0(
        CCM_LPCG12_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG12_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG12_DOMAIN = curr;
    }

    /**
     * Get LPCG12_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG12_DOMAIN_LEVEL get_LPCG12_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG12_DOMAIN_LEVEL((LPCG12_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG12_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG12_DOMAIN_LEVEL(CCM_LPCG12_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG12_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG12_DOMAIN = curr;
    }

    /**
     * Get all of LPCG12_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG12_DOMAIN(CCM_LPCG12_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG12_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG12_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG12_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG12_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG12_DOMAIN;

        LEVEL3 = CCM_LPCG12_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG12_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG12_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG12_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG12_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG12_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG12_DOMAIN(CCM_LPCG12_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG12_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG12_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG12_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG12_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG12_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG12_DOMAIN = curr;
    }

    /**
     * Get LPCG12_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG12_SETPOINT_STANDBY() volatile
    {
        return (LPCG12_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG12_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG12_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG12_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG12_SETPOINT = curr;
    }

    /**
     * Get LPCG12_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG12_SETPOINT_SETPOINT() volatile
    {
        return (LPCG12_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG12_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG12_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG12_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG12_SETPOINT = curr;
    }

    /**
     * Get all of LPCG12_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG12_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG12_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG12_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG12_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG12_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG12_SETPOINT = curr;
    }

    /**
     * Get LPCG12_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG12_STATUS0_DOMAIN_ENABLE
    get_LPCG12_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG12_STATUS0_DOMAIN_ENABLE((LPCG12_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG12_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG12_STATUS0_ACTIVE_DOMAIN
    get_LPCG12_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG12_STATUS0_ACTIVE_DOMAIN((LPCG12_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG12_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG12_STATUS0_ON() volatile
    {
        return LPCG12_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG12_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG12_STATUS0(
        CCM_LPCG12_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG12_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG12_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG12_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG12_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG12_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG12_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG12_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG12_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG12_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG12_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG12_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG12_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG12_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG12_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG12_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG12_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG12_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG12_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG12_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG12_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG12_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG12_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG12_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG12_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG12_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG12_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG12_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG12_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG12_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG12_STATUS1_CPU3_MODE get_LPCG12_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG12_STATUS1_CPU3_MODE((LPCG12_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG12_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG12_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG12_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG12_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG12_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG12_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG12_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG12_STATUS1_CPU2_MODE get_LPCG12_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG12_STATUS1_CPU2_MODE((LPCG12_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG12_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG12_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG12_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG12_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG12_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG12_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG12_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG12_STATUS1_CPU1_MODE get_LPCG12_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG12_STATUS1_CPU1_MODE((LPCG12_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG12_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG12_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG12_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG12_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG12_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG12_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG12_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG12_STATUS1_CPU0_MODE get_LPCG12_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG12_STATUS1_CPU0_MODE((LPCG12_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG12_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG12_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG12_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG12_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG12_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG12_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG12_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG12_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG12_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG12_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG12_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG12_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG12_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG12_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG12_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG12_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG12_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG12_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG12_AUTHEN_LOCK_MODE() volatile
    {
        LPCG12_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG12_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG12_AUTHEN_LOCK_MODE() volatile
    {
        LPCG12_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG12_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG12_AUTHEN_LOCK_MODE() volatile
    {
        LPCG12_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG12_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG12_AUTHEN_CPULPM() volatile
    {
        return LPCG12_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG12_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG12_AUTHEN_CPULPM() volatile
    {
        LPCG12_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG12_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG12_AUTHEN_CPULPM() volatile
    {
        LPCG12_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG12_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG12_AUTHEN_CPULPM() volatile
    {
        LPCG12_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG12_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG12_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG12_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG12_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG12_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG12_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG12_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG12_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG12_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG12_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG12_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG12_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG12_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG12_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG12_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG12_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG12_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG12_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG12_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG12_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG12_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG12_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG12_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG12_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG12_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG12_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG12_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG12_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG12_AUTHEN_LOCK_LIST() volatile
    {
        LPCG12_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG12_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG12_AUTHEN_LOCK_LIST() volatile
    {
        LPCG12_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG12_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG12_AUTHEN_LOCK_LIST() volatile
    {
        LPCG12_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG12_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG12_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG12_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG12_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG12_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG12_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG12_AUTHEN = curr;
    }

    /**
     * Get LPCG12_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG12_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG12_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG12_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG12_AUTHEN_LOCK_TZ() volatile
    {
        LPCG12_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG12_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG12_AUTHEN_LOCK_TZ() volatile
    {
        LPCG12_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG12_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG12_AUTHEN_LOCK_TZ() volatile
    {
        LPCG12_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG12_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG12_AUTHEN_TZ_NS() volatile
    {
        return LPCG12_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG12_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG12_AUTHEN_TZ_NS() volatile
    {
        LPCG12_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG12_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG12_AUTHEN_TZ_NS() volatile
    {
        LPCG12_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG12_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG12_AUTHEN_TZ_NS() volatile
    {
        LPCG12_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG12_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG12_AUTHEN_TZ_USER() volatile
    {
        return LPCG12_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG12_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG12_AUTHEN_TZ_USER() volatile
    {
        LPCG12_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG12_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG12_AUTHEN_TZ_USER() volatile
    {
        LPCG12_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG12_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG12_AUTHEN_TZ_USER() volatile
    {
        LPCG12_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG12_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG12_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG12_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG12_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG12_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG12_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG12_AUTHEN = curr;
    }

    /**
     * Get LPCG13_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG13_DIRECT_ON() volatile
    {
        return LPCG13_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG13_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG13_DIRECT_ON() volatile
    {
        LPCG13_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG13_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG13_DIRECT_ON() volatile
    {
        LPCG13_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG13_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG13_DIRECT_ON() volatile
    {
        LPCG13_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG13_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG13_DOMAIN_LEVEL3 get_LPCG13_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG13_DOMAIN_LEVEL3((LPCG13_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG13_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG13_DOMAIN_LEVEL3(
        CCM_LPCG13_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG13_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG13_DOMAIN = curr;
    }

    /**
     * Get LPCG13_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG13_DOMAIN_LEVEL2 get_LPCG13_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG13_DOMAIN_LEVEL2((LPCG13_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG13_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG13_DOMAIN_LEVEL2(
        CCM_LPCG13_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG13_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG13_DOMAIN = curr;
    }

    /**
     * Get LPCG13_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG13_DOMAIN_LEVEL1 get_LPCG13_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG13_DOMAIN_LEVEL1((LPCG13_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG13_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG13_DOMAIN_LEVEL1(
        CCM_LPCG13_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG13_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG13_DOMAIN = curr;
    }

    /**
     * Get LPCG13_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG13_DOMAIN_LEVEL0 get_LPCG13_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG13_DOMAIN_LEVEL0((LPCG13_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG13_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG13_DOMAIN_LEVEL0(
        CCM_LPCG13_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG13_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG13_DOMAIN = curr;
    }

    /**
     * Get LPCG13_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG13_DOMAIN_LEVEL get_LPCG13_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG13_DOMAIN_LEVEL((LPCG13_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG13_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG13_DOMAIN_LEVEL(CCM_LPCG13_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG13_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG13_DOMAIN = curr;
    }

    /**
     * Get all of LPCG13_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG13_DOMAIN(CCM_LPCG13_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG13_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG13_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG13_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG13_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG13_DOMAIN;

        LEVEL3 = CCM_LPCG13_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG13_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG13_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG13_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG13_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG13_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG13_DOMAIN(CCM_LPCG13_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG13_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG13_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG13_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG13_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG13_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG13_DOMAIN = curr;
    }

    /**
     * Get LPCG13_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG13_STATUS0_DOMAIN_ENABLE
    get_LPCG13_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG13_STATUS0_DOMAIN_ENABLE((LPCG13_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG13_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG13_STATUS0_ACTIVE_DOMAIN
    get_LPCG13_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG13_STATUS0_ACTIVE_DOMAIN((LPCG13_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG13_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG13_STATUS0_ON() volatile
    {
        return LPCG13_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG13_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG13_STATUS0(
        CCM_LPCG13_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG13_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG13_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG13_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG13_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG13_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG13_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG13_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG13_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG13_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG13_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG13_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG13_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG13_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG13_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG13_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG13_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG13_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG13_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG13_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG13_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG13_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG13_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG13_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG13_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG13_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG13_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG13_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG13_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG13_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG13_STATUS1_CPU3_MODE get_LPCG13_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG13_STATUS1_CPU3_MODE((LPCG13_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG13_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG13_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG13_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG13_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG13_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG13_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG13_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG13_STATUS1_CPU2_MODE get_LPCG13_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG13_STATUS1_CPU2_MODE((LPCG13_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG13_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG13_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG13_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG13_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG13_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG13_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG13_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG13_STATUS1_CPU1_MODE get_LPCG13_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG13_STATUS1_CPU1_MODE((LPCG13_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG13_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG13_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG13_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG13_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG13_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG13_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG13_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG13_STATUS1_CPU0_MODE get_LPCG13_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG13_STATUS1_CPU0_MODE((LPCG13_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG13_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG13_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG13_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG13_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG13_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG13_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG13_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG13_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG13_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG13_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG13_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG13_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG13_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG13_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG13_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG13_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG13_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG13_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG13_AUTHEN_LOCK_MODE() volatile
    {
        LPCG13_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG13_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG13_AUTHEN_LOCK_MODE() volatile
    {
        LPCG13_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG13_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG13_AUTHEN_LOCK_MODE() volatile
    {
        LPCG13_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG13_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG13_AUTHEN_CPULPM() volatile
    {
        return LPCG13_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG13_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG13_AUTHEN_CPULPM() volatile
    {
        LPCG13_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG13_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG13_AUTHEN_CPULPM() volatile
    {
        LPCG13_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG13_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG13_AUTHEN_CPULPM() volatile
    {
        LPCG13_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG13_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG13_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG13_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG13_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG13_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG13_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG13_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG13_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG13_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG13_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG13_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG13_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG13_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG13_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG13_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG13_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG13_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG13_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG13_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG13_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG13_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG13_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG13_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG13_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG13_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG13_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG13_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG13_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG13_AUTHEN_LOCK_LIST() volatile
    {
        LPCG13_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG13_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG13_AUTHEN_LOCK_LIST() volatile
    {
        LPCG13_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG13_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG13_AUTHEN_LOCK_LIST() volatile
    {
        LPCG13_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG13_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG13_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG13_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG13_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG13_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG13_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG13_AUTHEN = curr;
    }

    /**
     * Get LPCG13_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG13_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG13_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG13_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG13_AUTHEN_LOCK_TZ() volatile
    {
        LPCG13_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG13_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG13_AUTHEN_LOCK_TZ() volatile
    {
        LPCG13_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG13_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG13_AUTHEN_LOCK_TZ() volatile
    {
        LPCG13_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG13_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG13_AUTHEN_TZ_NS() volatile
    {
        return LPCG13_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG13_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG13_AUTHEN_TZ_NS() volatile
    {
        LPCG13_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG13_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG13_AUTHEN_TZ_NS() volatile
    {
        LPCG13_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG13_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG13_AUTHEN_TZ_NS() volatile
    {
        LPCG13_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG13_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG13_AUTHEN_TZ_USER() volatile
    {
        return LPCG13_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG13_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG13_AUTHEN_TZ_USER() volatile
    {
        LPCG13_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG13_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG13_AUTHEN_TZ_USER() volatile
    {
        LPCG13_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG13_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG13_AUTHEN_TZ_USER() volatile
    {
        LPCG13_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG13_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG13_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG13_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG13_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG13_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG13_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG13_AUTHEN = curr;
    }

    /**
     * Get LPCG14_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG14_DIRECT_ON() volatile
    {
        return LPCG14_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG14_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG14_DIRECT_ON() volatile
    {
        LPCG14_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG14_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG14_DIRECT_ON() volatile
    {
        LPCG14_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG14_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG14_DIRECT_ON() volatile
    {
        LPCG14_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG14_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG14_DOMAIN_LEVEL3 get_LPCG14_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG14_DOMAIN_LEVEL3((LPCG14_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG14_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG14_DOMAIN_LEVEL3(
        CCM_LPCG14_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG14_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG14_DOMAIN = curr;
    }

    /**
     * Get LPCG14_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG14_DOMAIN_LEVEL2 get_LPCG14_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG14_DOMAIN_LEVEL2((LPCG14_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG14_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG14_DOMAIN_LEVEL2(
        CCM_LPCG14_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG14_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG14_DOMAIN = curr;
    }

    /**
     * Get LPCG14_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG14_DOMAIN_LEVEL1 get_LPCG14_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG14_DOMAIN_LEVEL1((LPCG14_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG14_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG14_DOMAIN_LEVEL1(
        CCM_LPCG14_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG14_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG14_DOMAIN = curr;
    }

    /**
     * Get LPCG14_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG14_DOMAIN_LEVEL0 get_LPCG14_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG14_DOMAIN_LEVEL0((LPCG14_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG14_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG14_DOMAIN_LEVEL0(
        CCM_LPCG14_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG14_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG14_DOMAIN = curr;
    }

    /**
     * Get LPCG14_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG14_DOMAIN_LEVEL get_LPCG14_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG14_DOMAIN_LEVEL((LPCG14_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG14_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG14_DOMAIN_LEVEL(CCM_LPCG14_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG14_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG14_DOMAIN = curr;
    }

    /**
     * Get all of LPCG14_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG14_DOMAIN(CCM_LPCG14_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG14_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG14_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG14_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG14_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG14_DOMAIN;

        LEVEL3 = CCM_LPCG14_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG14_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG14_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG14_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG14_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG14_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG14_DOMAIN(CCM_LPCG14_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG14_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG14_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG14_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG14_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG14_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG14_DOMAIN = curr;
    }

    /**
     * Get LPCG14_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG14_SETPOINT_STANDBY() volatile
    {
        return (LPCG14_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG14_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG14_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG14_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG14_SETPOINT = curr;
    }

    /**
     * Get LPCG14_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG14_SETPOINT_SETPOINT() volatile
    {
        return (LPCG14_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG14_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG14_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG14_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG14_SETPOINT = curr;
    }

    /**
     * Get all of LPCG14_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG14_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG14_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG14_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG14_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG14_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG14_SETPOINT = curr;
    }

    /**
     * Get LPCG14_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG14_STATUS0_DOMAIN_ENABLE
    get_LPCG14_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG14_STATUS0_DOMAIN_ENABLE((LPCG14_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG14_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG14_STATUS0_ACTIVE_DOMAIN
    get_LPCG14_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG14_STATUS0_ACTIVE_DOMAIN((LPCG14_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG14_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG14_STATUS0_ON() volatile
    {
        return LPCG14_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG14_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG14_STATUS0(
        CCM_LPCG14_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG14_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG14_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG14_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG14_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG14_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG14_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG14_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG14_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG14_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG14_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG14_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG14_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG14_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG14_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG14_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG14_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG14_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG14_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG14_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG14_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG14_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG14_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG14_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG14_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG14_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG14_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG14_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG14_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG14_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG14_STATUS1_CPU3_MODE get_LPCG14_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG14_STATUS1_CPU3_MODE((LPCG14_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG14_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG14_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG14_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG14_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG14_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG14_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG14_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG14_STATUS1_CPU2_MODE get_LPCG14_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG14_STATUS1_CPU2_MODE((LPCG14_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG14_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG14_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG14_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG14_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG14_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG14_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG14_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG14_STATUS1_CPU1_MODE get_LPCG14_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG14_STATUS1_CPU1_MODE((LPCG14_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG14_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG14_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG14_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG14_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG14_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG14_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG14_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG14_STATUS1_CPU0_MODE get_LPCG14_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG14_STATUS1_CPU0_MODE((LPCG14_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG14_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG14_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG14_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG14_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG14_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG14_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG14_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG14_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG14_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG14_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG14_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG14_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG14_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG14_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG14_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG14_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG14_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG14_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG14_AUTHEN_LOCK_MODE() volatile
    {
        LPCG14_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG14_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG14_AUTHEN_LOCK_MODE() volatile
    {
        LPCG14_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG14_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG14_AUTHEN_LOCK_MODE() volatile
    {
        LPCG14_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG14_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG14_AUTHEN_CPULPM() volatile
    {
        return LPCG14_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG14_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG14_AUTHEN_CPULPM() volatile
    {
        LPCG14_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG14_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG14_AUTHEN_CPULPM() volatile
    {
        LPCG14_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG14_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG14_AUTHEN_CPULPM() volatile
    {
        LPCG14_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG14_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG14_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG14_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG14_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG14_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG14_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG14_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG14_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG14_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG14_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG14_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG14_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG14_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG14_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG14_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG14_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG14_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG14_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG14_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG14_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG14_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG14_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG14_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG14_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG14_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG14_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG14_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG14_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG14_AUTHEN_LOCK_LIST() volatile
    {
        LPCG14_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG14_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG14_AUTHEN_LOCK_LIST() volatile
    {
        LPCG14_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG14_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG14_AUTHEN_LOCK_LIST() volatile
    {
        LPCG14_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG14_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG14_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG14_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG14_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG14_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG14_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG14_AUTHEN = curr;
    }

    /**
     * Get LPCG14_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG14_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG14_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG14_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG14_AUTHEN_LOCK_TZ() volatile
    {
        LPCG14_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG14_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG14_AUTHEN_LOCK_TZ() volatile
    {
        LPCG14_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG14_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG14_AUTHEN_LOCK_TZ() volatile
    {
        LPCG14_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG14_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG14_AUTHEN_TZ_NS() volatile
    {
        return LPCG14_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG14_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG14_AUTHEN_TZ_NS() volatile
    {
        LPCG14_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG14_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG14_AUTHEN_TZ_NS() volatile
    {
        LPCG14_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG14_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG14_AUTHEN_TZ_NS() volatile
    {
        LPCG14_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG14_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG14_AUTHEN_TZ_USER() volatile
    {
        return LPCG14_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG14_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG14_AUTHEN_TZ_USER() volatile
    {
        LPCG14_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG14_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG14_AUTHEN_TZ_USER() volatile
    {
        LPCG14_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG14_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG14_AUTHEN_TZ_USER() volatile
    {
        LPCG14_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG14_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG14_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG14_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG14_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG14_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG14_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG14_AUTHEN = curr;
    }

    /**
     * Get LPCG15_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG15_DIRECT_ON() volatile
    {
        return LPCG15_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG15_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG15_DIRECT_ON() volatile
    {
        LPCG15_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG15_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG15_DIRECT_ON() volatile
    {
        LPCG15_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG15_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG15_DIRECT_ON() volatile
    {
        LPCG15_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG15_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG15_DOMAIN_LEVEL3 get_LPCG15_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG15_DOMAIN_LEVEL3((LPCG15_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG15_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG15_DOMAIN_LEVEL3(
        CCM_LPCG15_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG15_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG15_DOMAIN = curr;
    }

    /**
     * Get LPCG15_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG15_DOMAIN_LEVEL2 get_LPCG15_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG15_DOMAIN_LEVEL2((LPCG15_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG15_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG15_DOMAIN_LEVEL2(
        CCM_LPCG15_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG15_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG15_DOMAIN = curr;
    }

    /**
     * Get LPCG15_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG15_DOMAIN_LEVEL1 get_LPCG15_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG15_DOMAIN_LEVEL1((LPCG15_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG15_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG15_DOMAIN_LEVEL1(
        CCM_LPCG15_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG15_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG15_DOMAIN = curr;
    }

    /**
     * Get LPCG15_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG15_DOMAIN_LEVEL0 get_LPCG15_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG15_DOMAIN_LEVEL0((LPCG15_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG15_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG15_DOMAIN_LEVEL0(
        CCM_LPCG15_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG15_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG15_DOMAIN = curr;
    }

    /**
     * Get LPCG15_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG15_DOMAIN_LEVEL get_LPCG15_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG15_DOMAIN_LEVEL((LPCG15_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG15_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG15_DOMAIN_LEVEL(CCM_LPCG15_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG15_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG15_DOMAIN = curr;
    }

    /**
     * Get all of LPCG15_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG15_DOMAIN(CCM_LPCG15_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG15_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG15_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG15_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG15_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG15_DOMAIN;

        LEVEL3 = CCM_LPCG15_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG15_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG15_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG15_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG15_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG15_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG15_DOMAIN(CCM_LPCG15_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG15_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG15_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG15_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG15_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG15_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG15_DOMAIN = curr;
    }

    /**
     * Get LPCG15_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG15_SETPOINT_STANDBY() volatile
    {
        return (LPCG15_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG15_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG15_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG15_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG15_SETPOINT = curr;
    }

    /**
     * Get LPCG15_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG15_SETPOINT_SETPOINT() volatile
    {
        return (LPCG15_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG15_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG15_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG15_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG15_SETPOINT = curr;
    }

    /**
     * Get all of LPCG15_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG15_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG15_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG15_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG15_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG15_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG15_SETPOINT = curr;
    }

    /**
     * Get LPCG15_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG15_STATUS0_DOMAIN_ENABLE
    get_LPCG15_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG15_STATUS0_DOMAIN_ENABLE((LPCG15_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG15_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG15_STATUS0_ACTIVE_DOMAIN
    get_LPCG15_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG15_STATUS0_ACTIVE_DOMAIN((LPCG15_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG15_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG15_STATUS0_ON() volatile
    {
        return LPCG15_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG15_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG15_STATUS0(
        CCM_LPCG15_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG15_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG15_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG15_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG15_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG15_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG15_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG15_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG15_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG15_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG15_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG15_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG15_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG15_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG15_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG15_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG15_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG15_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG15_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG15_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG15_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG15_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG15_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG15_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG15_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG15_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG15_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG15_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG15_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG15_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG15_STATUS1_CPU3_MODE get_LPCG15_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG15_STATUS1_CPU3_MODE((LPCG15_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG15_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG15_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG15_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG15_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG15_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG15_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG15_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG15_STATUS1_CPU2_MODE get_LPCG15_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG15_STATUS1_CPU2_MODE((LPCG15_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG15_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG15_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG15_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG15_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG15_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG15_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG15_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG15_STATUS1_CPU1_MODE get_LPCG15_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG15_STATUS1_CPU1_MODE((LPCG15_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG15_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG15_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG15_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG15_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG15_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG15_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG15_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG15_STATUS1_CPU0_MODE get_LPCG15_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG15_STATUS1_CPU0_MODE((LPCG15_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG15_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG15_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG15_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG15_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG15_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG15_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG15_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG15_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG15_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG15_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG15_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG15_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG15_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG15_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG15_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG15_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG15_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG15_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG15_AUTHEN_LOCK_MODE() volatile
    {
        LPCG15_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG15_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG15_AUTHEN_LOCK_MODE() volatile
    {
        LPCG15_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG15_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG15_AUTHEN_LOCK_MODE() volatile
    {
        LPCG15_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG15_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG15_AUTHEN_CPULPM() volatile
    {
        return LPCG15_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG15_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG15_AUTHEN_CPULPM() volatile
    {
        LPCG15_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG15_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG15_AUTHEN_CPULPM() volatile
    {
        LPCG15_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG15_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG15_AUTHEN_CPULPM() volatile
    {
        LPCG15_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG15_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG15_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG15_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG15_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG15_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG15_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG15_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG15_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG15_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG15_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG15_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG15_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG15_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG15_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG15_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG15_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG15_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG15_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG15_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG15_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG15_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG15_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG15_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG15_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG15_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG15_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG15_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG15_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG15_AUTHEN_LOCK_LIST() volatile
    {
        LPCG15_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG15_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG15_AUTHEN_LOCK_LIST() volatile
    {
        LPCG15_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG15_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG15_AUTHEN_LOCK_LIST() volatile
    {
        LPCG15_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG15_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG15_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG15_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG15_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG15_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG15_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG15_AUTHEN = curr;
    }

    /**
     * Get LPCG15_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG15_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG15_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG15_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG15_AUTHEN_LOCK_TZ() volatile
    {
        LPCG15_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG15_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG15_AUTHEN_LOCK_TZ() volatile
    {
        LPCG15_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG15_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG15_AUTHEN_LOCK_TZ() volatile
    {
        LPCG15_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG15_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG15_AUTHEN_TZ_NS() volatile
    {
        return LPCG15_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG15_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG15_AUTHEN_TZ_NS() volatile
    {
        LPCG15_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG15_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG15_AUTHEN_TZ_NS() volatile
    {
        LPCG15_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG15_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG15_AUTHEN_TZ_NS() volatile
    {
        LPCG15_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG15_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG15_AUTHEN_TZ_USER() volatile
    {
        return LPCG15_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG15_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG15_AUTHEN_TZ_USER() volatile
    {
        LPCG15_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG15_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG15_AUTHEN_TZ_USER() volatile
    {
        LPCG15_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG15_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG15_AUTHEN_TZ_USER() volatile
    {
        LPCG15_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG15_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG15_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG15_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG15_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG15_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG15_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG15_AUTHEN = curr;
    }

    /**
     * Get LPCG16_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG16_DIRECT_ON() volatile
    {
        return LPCG16_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG16_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG16_DIRECT_ON() volatile
    {
        LPCG16_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG16_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG16_DIRECT_ON() volatile
    {
        LPCG16_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG16_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG16_DIRECT_ON() volatile
    {
        LPCG16_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG16_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG16_DOMAIN_LEVEL3 get_LPCG16_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG16_DOMAIN_LEVEL3((LPCG16_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG16_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG16_DOMAIN_LEVEL3(
        CCM_LPCG16_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG16_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG16_DOMAIN = curr;
    }

    /**
     * Get LPCG16_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG16_DOMAIN_LEVEL2 get_LPCG16_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG16_DOMAIN_LEVEL2((LPCG16_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG16_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG16_DOMAIN_LEVEL2(
        CCM_LPCG16_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG16_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG16_DOMAIN = curr;
    }

    /**
     * Get LPCG16_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG16_DOMAIN_LEVEL1 get_LPCG16_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG16_DOMAIN_LEVEL1((LPCG16_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG16_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG16_DOMAIN_LEVEL1(
        CCM_LPCG16_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG16_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG16_DOMAIN = curr;
    }

    /**
     * Get LPCG16_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG16_DOMAIN_LEVEL0 get_LPCG16_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG16_DOMAIN_LEVEL0((LPCG16_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG16_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG16_DOMAIN_LEVEL0(
        CCM_LPCG16_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG16_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG16_DOMAIN = curr;
    }

    /**
     * Get LPCG16_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG16_DOMAIN_LEVEL get_LPCG16_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG16_DOMAIN_LEVEL((LPCG16_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG16_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG16_DOMAIN_LEVEL(CCM_LPCG16_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG16_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG16_DOMAIN = curr;
    }

    /**
     * Get all of LPCG16_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG16_DOMAIN(CCM_LPCG16_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG16_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG16_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG16_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG16_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG16_DOMAIN;

        LEVEL3 = CCM_LPCG16_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG16_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG16_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG16_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG16_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG16_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG16_DOMAIN(CCM_LPCG16_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG16_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG16_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG16_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG16_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG16_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG16_DOMAIN = curr;
    }

    /**
     * Get LPCG16_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG16_SETPOINT_STANDBY() volatile
    {
        return (LPCG16_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG16_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG16_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG16_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG16_SETPOINT = curr;
    }

    /**
     * Get LPCG16_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG16_SETPOINT_SETPOINT() volatile
    {
        return (LPCG16_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG16_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG16_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG16_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG16_SETPOINT = curr;
    }

    /**
     * Get all of LPCG16_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG16_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG16_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG16_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG16_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG16_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG16_SETPOINT = curr;
    }

    /**
     * Get LPCG16_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG16_STATUS0_DOMAIN_ENABLE
    get_LPCG16_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG16_STATUS0_DOMAIN_ENABLE((LPCG16_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG16_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG16_STATUS0_ACTIVE_DOMAIN
    get_LPCG16_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG16_STATUS0_ACTIVE_DOMAIN((LPCG16_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG16_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG16_STATUS0_ON() volatile
    {
        return LPCG16_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG16_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG16_STATUS0(
        CCM_LPCG16_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG16_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG16_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG16_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG16_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG16_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG16_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG16_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG16_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG16_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG16_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG16_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG16_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG16_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG16_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG16_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG16_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG16_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG16_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG16_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG16_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG16_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG16_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG16_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG16_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG16_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG16_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG16_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG16_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG16_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG16_STATUS1_CPU3_MODE get_LPCG16_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG16_STATUS1_CPU3_MODE((LPCG16_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG16_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG16_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG16_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG16_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG16_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG16_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG16_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG16_STATUS1_CPU2_MODE get_LPCG16_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG16_STATUS1_CPU2_MODE((LPCG16_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG16_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG16_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG16_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG16_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG16_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG16_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG16_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG16_STATUS1_CPU1_MODE get_LPCG16_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG16_STATUS1_CPU1_MODE((LPCG16_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG16_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG16_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG16_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG16_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG16_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG16_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG16_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG16_STATUS1_CPU0_MODE get_LPCG16_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG16_STATUS1_CPU0_MODE((LPCG16_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG16_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG16_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG16_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG16_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG16_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG16_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG16_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG16_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG16_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG16_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG16_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG16_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG16_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG16_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG16_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG16_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG16_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG16_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG16_AUTHEN_LOCK_MODE() volatile
    {
        LPCG16_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG16_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG16_AUTHEN_LOCK_MODE() volatile
    {
        LPCG16_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG16_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG16_AUTHEN_LOCK_MODE() volatile
    {
        LPCG16_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG16_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG16_AUTHEN_CPULPM() volatile
    {
        return LPCG16_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG16_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG16_AUTHEN_CPULPM() volatile
    {
        LPCG16_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG16_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG16_AUTHEN_CPULPM() volatile
    {
        LPCG16_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG16_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG16_AUTHEN_CPULPM() volatile
    {
        LPCG16_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG16_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG16_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG16_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG16_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG16_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG16_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG16_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG16_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG16_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG16_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG16_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG16_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG16_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG16_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG16_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG16_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG16_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG16_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG16_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG16_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG16_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG16_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG16_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG16_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG16_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG16_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG16_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG16_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG16_AUTHEN_LOCK_LIST() volatile
    {
        LPCG16_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG16_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG16_AUTHEN_LOCK_LIST() volatile
    {
        LPCG16_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG16_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG16_AUTHEN_LOCK_LIST() volatile
    {
        LPCG16_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG16_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG16_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG16_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG16_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG16_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG16_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG16_AUTHEN = curr;
    }

    /**
     * Get LPCG16_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG16_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG16_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG16_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG16_AUTHEN_LOCK_TZ() volatile
    {
        LPCG16_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG16_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG16_AUTHEN_LOCK_TZ() volatile
    {
        LPCG16_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG16_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG16_AUTHEN_LOCK_TZ() volatile
    {
        LPCG16_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG16_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG16_AUTHEN_TZ_NS() volatile
    {
        return LPCG16_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG16_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG16_AUTHEN_TZ_NS() volatile
    {
        LPCG16_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG16_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG16_AUTHEN_TZ_NS() volatile
    {
        LPCG16_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG16_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG16_AUTHEN_TZ_NS() volatile
    {
        LPCG16_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG16_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG16_AUTHEN_TZ_USER() volatile
    {
        return LPCG16_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG16_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG16_AUTHEN_TZ_USER() volatile
    {
        LPCG16_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG16_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG16_AUTHEN_TZ_USER() volatile
    {
        LPCG16_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG16_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG16_AUTHEN_TZ_USER() volatile
    {
        LPCG16_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG16_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG16_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG16_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG16_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG16_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG16_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG16_AUTHEN = curr;
    }

    /**
     * Get LPCG17_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG17_DIRECT_ON() volatile
    {
        return LPCG17_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG17_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG17_DIRECT_ON() volatile
    {
        LPCG17_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG17_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG17_DIRECT_ON() volatile
    {
        LPCG17_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG17_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG17_DIRECT_ON() volatile
    {
        LPCG17_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG17_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG17_DOMAIN_LEVEL3 get_LPCG17_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG17_DOMAIN_LEVEL3((LPCG17_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG17_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG17_DOMAIN_LEVEL3(
        CCM_LPCG17_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG17_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG17_DOMAIN = curr;
    }

    /**
     * Get LPCG17_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG17_DOMAIN_LEVEL2 get_LPCG17_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG17_DOMAIN_LEVEL2((LPCG17_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG17_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG17_DOMAIN_LEVEL2(
        CCM_LPCG17_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG17_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG17_DOMAIN = curr;
    }

    /**
     * Get LPCG17_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG17_DOMAIN_LEVEL1 get_LPCG17_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG17_DOMAIN_LEVEL1((LPCG17_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG17_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG17_DOMAIN_LEVEL1(
        CCM_LPCG17_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG17_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG17_DOMAIN = curr;
    }

    /**
     * Get LPCG17_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG17_DOMAIN_LEVEL0 get_LPCG17_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG17_DOMAIN_LEVEL0((LPCG17_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG17_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG17_DOMAIN_LEVEL0(
        CCM_LPCG17_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG17_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG17_DOMAIN = curr;
    }

    /**
     * Get LPCG17_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG17_DOMAIN_LEVEL get_LPCG17_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG17_DOMAIN_LEVEL((LPCG17_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG17_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG17_DOMAIN_LEVEL(CCM_LPCG17_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG17_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG17_DOMAIN = curr;
    }

    /**
     * Get all of LPCG17_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG17_DOMAIN(CCM_LPCG17_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG17_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG17_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG17_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG17_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG17_DOMAIN;

        LEVEL3 = CCM_LPCG17_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG17_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG17_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG17_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG17_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG17_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG17_DOMAIN(CCM_LPCG17_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG17_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG17_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG17_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG17_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG17_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG17_DOMAIN = curr;
    }

    /**
     * Get LPCG17_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG17_SETPOINT_STANDBY() volatile
    {
        return (LPCG17_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG17_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG17_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG17_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG17_SETPOINT = curr;
    }

    /**
     * Get LPCG17_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG17_SETPOINT_SETPOINT() volatile
    {
        return (LPCG17_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG17_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG17_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG17_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG17_SETPOINT = curr;
    }

    /**
     * Get all of LPCG17_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG17_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG17_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG17_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG17_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG17_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG17_SETPOINT = curr;
    }

    /**
     * Get LPCG17_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG17_STATUS0_DOMAIN_ENABLE
    get_LPCG17_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG17_STATUS0_DOMAIN_ENABLE((LPCG17_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG17_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG17_STATUS0_ACTIVE_DOMAIN
    get_LPCG17_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG17_STATUS0_ACTIVE_DOMAIN((LPCG17_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG17_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG17_STATUS0_ON() volatile
    {
        return LPCG17_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG17_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG17_STATUS0(
        CCM_LPCG17_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG17_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG17_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG17_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG17_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG17_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG17_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG17_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG17_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG17_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG17_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG17_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG17_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG17_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG17_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG17_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG17_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG17_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG17_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG17_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG17_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG17_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG17_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG17_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG17_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG17_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG17_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG17_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG17_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG17_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG17_STATUS1_CPU3_MODE get_LPCG17_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG17_STATUS1_CPU3_MODE((LPCG17_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG17_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG17_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG17_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG17_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG17_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG17_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG17_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG17_STATUS1_CPU2_MODE get_LPCG17_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG17_STATUS1_CPU2_MODE((LPCG17_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG17_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG17_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG17_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG17_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG17_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG17_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG17_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG17_STATUS1_CPU1_MODE get_LPCG17_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG17_STATUS1_CPU1_MODE((LPCG17_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG17_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG17_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG17_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG17_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG17_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG17_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG17_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG17_STATUS1_CPU0_MODE get_LPCG17_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG17_STATUS1_CPU0_MODE((LPCG17_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG17_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG17_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG17_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG17_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG17_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG17_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG17_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG17_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG17_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG17_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG17_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG17_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG17_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG17_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG17_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG17_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG17_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG17_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG17_AUTHEN_LOCK_MODE() volatile
    {
        LPCG17_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG17_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG17_AUTHEN_LOCK_MODE() volatile
    {
        LPCG17_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG17_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG17_AUTHEN_LOCK_MODE() volatile
    {
        LPCG17_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG17_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG17_AUTHEN_CPULPM() volatile
    {
        return LPCG17_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG17_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG17_AUTHEN_CPULPM() volatile
    {
        LPCG17_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG17_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG17_AUTHEN_CPULPM() volatile
    {
        LPCG17_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG17_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG17_AUTHEN_CPULPM() volatile
    {
        LPCG17_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG17_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG17_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG17_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG17_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG17_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG17_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG17_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG17_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG17_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG17_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG17_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG17_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG17_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG17_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG17_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG17_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG17_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG17_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG17_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG17_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG17_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG17_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG17_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG17_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG17_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG17_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG17_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG17_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG17_AUTHEN_LOCK_LIST() volatile
    {
        LPCG17_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG17_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG17_AUTHEN_LOCK_LIST() volatile
    {
        LPCG17_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG17_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG17_AUTHEN_LOCK_LIST() volatile
    {
        LPCG17_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG17_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG17_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG17_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG17_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG17_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG17_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG17_AUTHEN = curr;
    }

    /**
     * Get LPCG17_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG17_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG17_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG17_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG17_AUTHEN_LOCK_TZ() volatile
    {
        LPCG17_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG17_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG17_AUTHEN_LOCK_TZ() volatile
    {
        LPCG17_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG17_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG17_AUTHEN_LOCK_TZ() volatile
    {
        LPCG17_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG17_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG17_AUTHEN_TZ_NS() volatile
    {
        return LPCG17_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG17_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG17_AUTHEN_TZ_NS() volatile
    {
        LPCG17_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG17_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG17_AUTHEN_TZ_NS() volatile
    {
        LPCG17_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG17_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG17_AUTHEN_TZ_NS() volatile
    {
        LPCG17_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG17_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG17_AUTHEN_TZ_USER() volatile
    {
        return LPCG17_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG17_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG17_AUTHEN_TZ_USER() volatile
    {
        LPCG17_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG17_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG17_AUTHEN_TZ_USER() volatile
    {
        LPCG17_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG17_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG17_AUTHEN_TZ_USER() volatile
    {
        LPCG17_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG17_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG17_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG17_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG17_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG17_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG17_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG17_AUTHEN = curr;
    }

    /**
     * Get LPCG18_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG18_DIRECT_ON() volatile
    {
        return LPCG18_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG18_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG18_DIRECT_ON() volatile
    {
        LPCG18_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG18_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG18_DIRECT_ON() volatile
    {
        LPCG18_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG18_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG18_DIRECT_ON() volatile
    {
        LPCG18_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG18_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG18_DOMAIN_LEVEL3 get_LPCG18_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG18_DOMAIN_LEVEL3((LPCG18_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG18_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG18_DOMAIN_LEVEL3(
        CCM_LPCG18_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG18_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG18_DOMAIN = curr;
    }

    /**
     * Get LPCG18_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG18_DOMAIN_LEVEL2 get_LPCG18_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG18_DOMAIN_LEVEL2((LPCG18_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG18_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG18_DOMAIN_LEVEL2(
        CCM_LPCG18_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG18_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG18_DOMAIN = curr;
    }

    /**
     * Get LPCG18_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG18_DOMAIN_LEVEL1 get_LPCG18_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG18_DOMAIN_LEVEL1((LPCG18_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG18_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG18_DOMAIN_LEVEL1(
        CCM_LPCG18_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG18_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG18_DOMAIN = curr;
    }

    /**
     * Get LPCG18_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG18_DOMAIN_LEVEL0 get_LPCG18_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG18_DOMAIN_LEVEL0((LPCG18_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG18_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG18_DOMAIN_LEVEL0(
        CCM_LPCG18_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG18_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG18_DOMAIN = curr;
    }

    /**
     * Get LPCG18_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG18_DOMAIN_LEVEL get_LPCG18_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG18_DOMAIN_LEVEL((LPCG18_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG18_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG18_DOMAIN_LEVEL(CCM_LPCG18_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG18_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG18_DOMAIN = curr;
    }

    /**
     * Get all of LPCG18_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG18_DOMAIN(CCM_LPCG18_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG18_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG18_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG18_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG18_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG18_DOMAIN;

        LEVEL3 = CCM_LPCG18_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG18_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG18_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG18_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG18_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG18_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG18_DOMAIN(CCM_LPCG18_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG18_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG18_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG18_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG18_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG18_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG18_DOMAIN = curr;
    }

    /**
     * Get LPCG18_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG18_SETPOINT_STANDBY() volatile
    {
        return (LPCG18_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG18_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG18_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG18_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG18_SETPOINT = curr;
    }

    /**
     * Get LPCG18_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG18_SETPOINT_SETPOINT() volatile
    {
        return (LPCG18_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG18_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG18_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG18_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG18_SETPOINT = curr;
    }

    /**
     * Get all of LPCG18_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG18_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG18_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG18_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG18_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG18_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG18_SETPOINT = curr;
    }

    /**
     * Get LPCG18_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG18_STATUS0_DOMAIN_ENABLE
    get_LPCG18_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG18_STATUS0_DOMAIN_ENABLE((LPCG18_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG18_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG18_STATUS0_ACTIVE_DOMAIN
    get_LPCG18_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG18_STATUS0_ACTIVE_DOMAIN((LPCG18_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG18_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG18_STATUS0_ON() volatile
    {
        return LPCG18_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG18_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG18_STATUS0(
        CCM_LPCG18_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG18_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG18_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG18_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG18_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG18_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG18_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG18_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG18_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG18_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG18_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG18_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG18_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG18_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG18_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG18_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG18_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG18_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG18_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG18_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG18_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG18_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG18_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG18_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG18_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG18_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG18_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG18_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG18_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG18_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG18_STATUS1_CPU3_MODE get_LPCG18_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG18_STATUS1_CPU3_MODE((LPCG18_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG18_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG18_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG18_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG18_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG18_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG18_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG18_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG18_STATUS1_CPU2_MODE get_LPCG18_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG18_STATUS1_CPU2_MODE((LPCG18_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG18_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG18_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG18_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG18_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG18_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG18_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG18_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG18_STATUS1_CPU1_MODE get_LPCG18_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG18_STATUS1_CPU1_MODE((LPCG18_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG18_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG18_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG18_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG18_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG18_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG18_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG18_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG18_STATUS1_CPU0_MODE get_LPCG18_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG18_STATUS1_CPU0_MODE((LPCG18_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG18_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG18_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG18_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG18_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG18_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG18_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG18_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG18_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG18_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG18_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG18_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG18_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG18_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG18_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG18_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG18_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG18_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG18_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG18_AUTHEN_LOCK_MODE() volatile
    {
        LPCG18_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG18_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG18_AUTHEN_LOCK_MODE() volatile
    {
        LPCG18_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG18_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG18_AUTHEN_LOCK_MODE() volatile
    {
        LPCG18_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG18_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG18_AUTHEN_CPULPM() volatile
    {
        return LPCG18_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG18_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG18_AUTHEN_CPULPM() volatile
    {
        LPCG18_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG18_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG18_AUTHEN_CPULPM() volatile
    {
        LPCG18_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG18_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG18_AUTHEN_CPULPM() volatile
    {
        LPCG18_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG18_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG18_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG18_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG18_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG18_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG18_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG18_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG18_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG18_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG18_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG18_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG18_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG18_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG18_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG18_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG18_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG18_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG18_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG18_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG18_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG18_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG18_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG18_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG18_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG18_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG18_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG18_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG18_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG18_AUTHEN_LOCK_LIST() volatile
    {
        LPCG18_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG18_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG18_AUTHEN_LOCK_LIST() volatile
    {
        LPCG18_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG18_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG18_AUTHEN_LOCK_LIST() volatile
    {
        LPCG18_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG18_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG18_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG18_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG18_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG18_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG18_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG18_AUTHEN = curr;
    }

    /**
     * Get LPCG18_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG18_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG18_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG18_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG18_AUTHEN_LOCK_TZ() volatile
    {
        LPCG18_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG18_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG18_AUTHEN_LOCK_TZ() volatile
    {
        LPCG18_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG18_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG18_AUTHEN_LOCK_TZ() volatile
    {
        LPCG18_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG18_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG18_AUTHEN_TZ_NS() volatile
    {
        return LPCG18_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG18_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG18_AUTHEN_TZ_NS() volatile
    {
        LPCG18_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG18_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG18_AUTHEN_TZ_NS() volatile
    {
        LPCG18_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG18_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG18_AUTHEN_TZ_NS() volatile
    {
        LPCG18_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG18_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG18_AUTHEN_TZ_USER() volatile
    {
        return LPCG18_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG18_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG18_AUTHEN_TZ_USER() volatile
    {
        LPCG18_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG18_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG18_AUTHEN_TZ_USER() volatile
    {
        LPCG18_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG18_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG18_AUTHEN_TZ_USER() volatile
    {
        LPCG18_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG18_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG18_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG18_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG18_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG18_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG18_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG18_AUTHEN = curr;
    }

    /**
     * Get LPCG19_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG19_DIRECT_ON() volatile
    {
        return LPCG19_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG19_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG19_DIRECT_ON() volatile
    {
        LPCG19_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG19_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG19_DIRECT_ON() volatile
    {
        LPCG19_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG19_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG19_DIRECT_ON() volatile
    {
        LPCG19_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG19_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG19_DOMAIN_LEVEL3 get_LPCG19_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG19_DOMAIN_LEVEL3((LPCG19_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG19_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG19_DOMAIN_LEVEL3(
        CCM_LPCG19_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG19_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG19_DOMAIN = curr;
    }

    /**
     * Get LPCG19_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG19_DOMAIN_LEVEL2 get_LPCG19_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG19_DOMAIN_LEVEL2((LPCG19_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG19_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG19_DOMAIN_LEVEL2(
        CCM_LPCG19_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG19_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG19_DOMAIN = curr;
    }

    /**
     * Get LPCG19_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG19_DOMAIN_LEVEL1 get_LPCG19_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG19_DOMAIN_LEVEL1((LPCG19_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG19_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG19_DOMAIN_LEVEL1(
        CCM_LPCG19_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG19_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG19_DOMAIN = curr;
    }

    /**
     * Get LPCG19_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG19_DOMAIN_LEVEL0 get_LPCG19_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG19_DOMAIN_LEVEL0((LPCG19_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG19_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG19_DOMAIN_LEVEL0(
        CCM_LPCG19_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG19_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG19_DOMAIN = curr;
    }

    /**
     * Get LPCG19_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG19_DOMAIN_LEVEL get_LPCG19_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG19_DOMAIN_LEVEL((LPCG19_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG19_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG19_DOMAIN_LEVEL(CCM_LPCG19_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG19_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG19_DOMAIN = curr;
    }

    /**
     * Get all of LPCG19_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG19_DOMAIN(CCM_LPCG19_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG19_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG19_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG19_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG19_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG19_DOMAIN;

        LEVEL3 = CCM_LPCG19_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG19_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG19_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG19_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG19_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG19_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG19_DOMAIN(CCM_LPCG19_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG19_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG19_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG19_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG19_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG19_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG19_DOMAIN = curr;
    }

    /**
     * Get LPCG19_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG19_SETPOINT_STANDBY() volatile
    {
        return (LPCG19_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG19_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG19_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG19_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG19_SETPOINT = curr;
    }

    /**
     * Get LPCG19_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG19_SETPOINT_SETPOINT() volatile
    {
        return (LPCG19_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG19_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG19_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG19_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG19_SETPOINT = curr;
    }

    /**
     * Get all of LPCG19_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG19_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG19_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG19_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG19_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG19_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG19_SETPOINT = curr;
    }

    /**
     * Get LPCG19_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG19_STATUS0_DOMAIN_ENABLE
    get_LPCG19_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG19_STATUS0_DOMAIN_ENABLE((LPCG19_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG19_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG19_STATUS0_ACTIVE_DOMAIN
    get_LPCG19_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG19_STATUS0_ACTIVE_DOMAIN((LPCG19_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG19_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG19_STATUS0_ON() volatile
    {
        return LPCG19_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG19_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG19_STATUS0(
        CCM_LPCG19_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG19_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG19_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG19_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG19_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG19_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG19_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG19_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG19_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG19_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG19_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG19_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG19_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG19_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG19_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG19_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG19_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG19_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG19_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG19_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG19_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG19_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG19_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG19_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG19_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG19_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG19_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG19_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG19_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG19_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG19_STATUS1_CPU3_MODE get_LPCG19_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG19_STATUS1_CPU3_MODE((LPCG19_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG19_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG19_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG19_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG19_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG19_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG19_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG19_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG19_STATUS1_CPU2_MODE get_LPCG19_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG19_STATUS1_CPU2_MODE((LPCG19_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG19_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG19_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG19_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG19_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG19_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG19_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG19_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG19_STATUS1_CPU1_MODE get_LPCG19_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG19_STATUS1_CPU1_MODE((LPCG19_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG19_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG19_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG19_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG19_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG19_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG19_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG19_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG19_STATUS1_CPU0_MODE get_LPCG19_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG19_STATUS1_CPU0_MODE((LPCG19_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG19_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG19_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG19_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG19_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG19_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG19_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG19_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG19_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG19_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG19_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG19_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG19_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG19_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG19_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG19_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG19_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG19_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG19_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG19_AUTHEN_LOCK_MODE() volatile
    {
        LPCG19_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG19_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG19_AUTHEN_LOCK_MODE() volatile
    {
        LPCG19_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG19_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG19_AUTHEN_LOCK_MODE() volatile
    {
        LPCG19_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG19_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG19_AUTHEN_CPULPM() volatile
    {
        return LPCG19_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG19_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG19_AUTHEN_CPULPM() volatile
    {
        LPCG19_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG19_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG19_AUTHEN_CPULPM() volatile
    {
        LPCG19_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG19_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG19_AUTHEN_CPULPM() volatile
    {
        LPCG19_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG19_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG19_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG19_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG19_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG19_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG19_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG19_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG19_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG19_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG19_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG19_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG19_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG19_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG19_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG19_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG19_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG19_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG19_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG19_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG19_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG19_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG19_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG19_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG19_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG19_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG19_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG19_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG19_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG19_AUTHEN_LOCK_LIST() volatile
    {
        LPCG19_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG19_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG19_AUTHEN_LOCK_LIST() volatile
    {
        LPCG19_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG19_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG19_AUTHEN_LOCK_LIST() volatile
    {
        LPCG19_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG19_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG19_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG19_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG19_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG19_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG19_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG19_AUTHEN = curr;
    }

    /**
     * Get LPCG19_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG19_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG19_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG19_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG19_AUTHEN_LOCK_TZ() volatile
    {
        LPCG19_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG19_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG19_AUTHEN_LOCK_TZ() volatile
    {
        LPCG19_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG19_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG19_AUTHEN_LOCK_TZ() volatile
    {
        LPCG19_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG19_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG19_AUTHEN_TZ_NS() volatile
    {
        return LPCG19_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG19_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG19_AUTHEN_TZ_NS() volatile
    {
        LPCG19_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG19_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG19_AUTHEN_TZ_NS() volatile
    {
        LPCG19_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG19_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG19_AUTHEN_TZ_NS() volatile
    {
        LPCG19_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG19_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG19_AUTHEN_TZ_USER() volatile
    {
        return LPCG19_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG19_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG19_AUTHEN_TZ_USER() volatile
    {
        LPCG19_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG19_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG19_AUTHEN_TZ_USER() volatile
    {
        LPCG19_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG19_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG19_AUTHEN_TZ_USER() volatile
    {
        LPCG19_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG19_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG19_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG19_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG19_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG19_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG19_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG19_AUTHEN = curr;
    }

    /**
     * Get LPCG20_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG20_DIRECT_ON() volatile
    {
        return LPCG20_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG20_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG20_DIRECT_ON() volatile
    {
        LPCG20_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG20_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG20_DIRECT_ON() volatile
    {
        LPCG20_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG20_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG20_DIRECT_ON() volatile
    {
        LPCG20_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG20_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG20_DOMAIN_LEVEL3 get_LPCG20_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG20_DOMAIN_LEVEL3((LPCG20_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG20_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG20_DOMAIN_LEVEL3(
        CCM_LPCG20_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG20_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG20_DOMAIN = curr;
    }

    /**
     * Get LPCG20_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG20_DOMAIN_LEVEL2 get_LPCG20_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG20_DOMAIN_LEVEL2((LPCG20_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG20_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG20_DOMAIN_LEVEL2(
        CCM_LPCG20_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG20_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG20_DOMAIN = curr;
    }

    /**
     * Get LPCG20_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG20_DOMAIN_LEVEL1 get_LPCG20_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG20_DOMAIN_LEVEL1((LPCG20_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG20_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG20_DOMAIN_LEVEL1(
        CCM_LPCG20_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG20_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG20_DOMAIN = curr;
    }

    /**
     * Get LPCG20_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG20_DOMAIN_LEVEL0 get_LPCG20_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG20_DOMAIN_LEVEL0((LPCG20_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG20_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG20_DOMAIN_LEVEL0(
        CCM_LPCG20_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG20_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG20_DOMAIN = curr;
    }

    /**
     * Get LPCG20_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG20_DOMAIN_LEVEL get_LPCG20_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG20_DOMAIN_LEVEL((LPCG20_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG20_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG20_DOMAIN_LEVEL(CCM_LPCG20_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG20_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG20_DOMAIN = curr;
    }

    /**
     * Get all of LPCG20_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG20_DOMAIN(CCM_LPCG20_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG20_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG20_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG20_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG20_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG20_DOMAIN;

        LEVEL3 = CCM_LPCG20_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG20_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG20_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG20_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG20_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG20_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG20_DOMAIN(CCM_LPCG20_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG20_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG20_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG20_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG20_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG20_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG20_DOMAIN = curr;
    }

    /**
     * Get LPCG20_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG20_STATUS0_DOMAIN_ENABLE
    get_LPCG20_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG20_STATUS0_DOMAIN_ENABLE((LPCG20_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG20_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG20_STATUS0_ACTIVE_DOMAIN
    get_LPCG20_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG20_STATUS0_ACTIVE_DOMAIN((LPCG20_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG20_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG20_STATUS0_ON() volatile
    {
        return LPCG20_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG20_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG20_STATUS0(
        CCM_LPCG20_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG20_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG20_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG20_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG20_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG20_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG20_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG20_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG20_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG20_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG20_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG20_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG20_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG20_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG20_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG20_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG20_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG20_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG20_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG20_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG20_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG20_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG20_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG20_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG20_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG20_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG20_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG20_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG20_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG20_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG20_STATUS1_CPU3_MODE get_LPCG20_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG20_STATUS1_CPU3_MODE((LPCG20_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG20_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG20_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG20_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG20_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG20_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG20_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG20_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG20_STATUS1_CPU2_MODE get_LPCG20_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG20_STATUS1_CPU2_MODE((LPCG20_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG20_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG20_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG20_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG20_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG20_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG20_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG20_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG20_STATUS1_CPU1_MODE get_LPCG20_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG20_STATUS1_CPU1_MODE((LPCG20_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG20_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG20_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG20_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG20_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG20_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG20_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG20_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG20_STATUS1_CPU0_MODE get_LPCG20_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG20_STATUS1_CPU0_MODE((LPCG20_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG20_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG20_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG20_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG20_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG20_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG20_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG20_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG20_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG20_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG20_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG20_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG20_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG20_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG20_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG20_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG20_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG20_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG20_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG20_AUTHEN_LOCK_MODE() volatile
    {
        LPCG20_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG20_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG20_AUTHEN_LOCK_MODE() volatile
    {
        LPCG20_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG20_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG20_AUTHEN_LOCK_MODE() volatile
    {
        LPCG20_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG20_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG20_AUTHEN_CPULPM() volatile
    {
        return LPCG20_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG20_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG20_AUTHEN_CPULPM() volatile
    {
        LPCG20_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG20_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG20_AUTHEN_CPULPM() volatile
    {
        LPCG20_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG20_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG20_AUTHEN_CPULPM() volatile
    {
        LPCG20_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG20_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG20_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG20_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG20_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG20_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG20_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG20_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG20_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG20_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG20_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG20_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG20_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG20_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG20_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG20_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG20_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG20_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG20_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG20_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG20_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG20_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG20_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG20_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG20_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG20_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG20_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG20_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG20_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG20_AUTHEN_LOCK_LIST() volatile
    {
        LPCG20_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG20_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG20_AUTHEN_LOCK_LIST() volatile
    {
        LPCG20_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG20_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG20_AUTHEN_LOCK_LIST() volatile
    {
        LPCG20_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG20_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG20_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG20_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG20_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG20_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG20_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG20_AUTHEN = curr;
    }

    /**
     * Get LPCG20_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG20_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG20_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG20_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG20_AUTHEN_LOCK_TZ() volatile
    {
        LPCG20_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG20_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG20_AUTHEN_LOCK_TZ() volatile
    {
        LPCG20_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG20_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG20_AUTHEN_LOCK_TZ() volatile
    {
        LPCG20_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG20_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG20_AUTHEN_TZ_NS() volatile
    {
        return LPCG20_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG20_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG20_AUTHEN_TZ_NS() volatile
    {
        LPCG20_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG20_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG20_AUTHEN_TZ_NS() volatile
    {
        LPCG20_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG20_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG20_AUTHEN_TZ_NS() volatile
    {
        LPCG20_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG20_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG20_AUTHEN_TZ_USER() volatile
    {
        return LPCG20_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG20_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG20_AUTHEN_TZ_USER() volatile
    {
        LPCG20_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG20_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG20_AUTHEN_TZ_USER() volatile
    {
        LPCG20_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG20_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG20_AUTHEN_TZ_USER() volatile
    {
        LPCG20_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG20_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG20_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG20_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG20_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG20_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG20_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG20_AUTHEN = curr;
    }

    /**
     * Get LPCG21_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG21_DIRECT_ON() volatile
    {
        return LPCG21_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG21_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG21_DIRECT_ON() volatile
    {
        LPCG21_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG21_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG21_DIRECT_ON() volatile
    {
        LPCG21_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG21_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG21_DIRECT_ON() volatile
    {
        LPCG21_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG21_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG21_DOMAIN_LEVEL3 get_LPCG21_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG21_DOMAIN_LEVEL3((LPCG21_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG21_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG21_DOMAIN_LEVEL3(
        CCM_LPCG21_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG21_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG21_DOMAIN = curr;
    }

    /**
     * Get LPCG21_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG21_DOMAIN_LEVEL2 get_LPCG21_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG21_DOMAIN_LEVEL2((LPCG21_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG21_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG21_DOMAIN_LEVEL2(
        CCM_LPCG21_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG21_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG21_DOMAIN = curr;
    }

    /**
     * Get LPCG21_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG21_DOMAIN_LEVEL1 get_LPCG21_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG21_DOMAIN_LEVEL1((LPCG21_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG21_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG21_DOMAIN_LEVEL1(
        CCM_LPCG21_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG21_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG21_DOMAIN = curr;
    }

    /**
     * Get LPCG21_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG21_DOMAIN_LEVEL0 get_LPCG21_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG21_DOMAIN_LEVEL0((LPCG21_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG21_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG21_DOMAIN_LEVEL0(
        CCM_LPCG21_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG21_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG21_DOMAIN = curr;
    }

    /**
     * Get LPCG21_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG21_DOMAIN_LEVEL get_LPCG21_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG21_DOMAIN_LEVEL((LPCG21_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG21_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG21_DOMAIN_LEVEL(CCM_LPCG21_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG21_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG21_DOMAIN = curr;
    }

    /**
     * Get all of LPCG21_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG21_DOMAIN(CCM_LPCG21_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG21_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG21_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG21_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG21_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG21_DOMAIN;

        LEVEL3 = CCM_LPCG21_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG21_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG21_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG21_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG21_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG21_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG21_DOMAIN(CCM_LPCG21_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG21_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG21_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG21_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG21_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG21_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG21_DOMAIN = curr;
    }

    /**
     * Get LPCG21_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG21_STATUS0_DOMAIN_ENABLE
    get_LPCG21_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG21_STATUS0_DOMAIN_ENABLE((LPCG21_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG21_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG21_STATUS0_ACTIVE_DOMAIN
    get_LPCG21_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG21_STATUS0_ACTIVE_DOMAIN((LPCG21_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG21_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG21_STATUS0_ON() volatile
    {
        return LPCG21_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG21_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG21_STATUS0(
        CCM_LPCG21_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG21_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG21_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG21_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG21_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG21_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG21_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG21_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG21_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG21_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG21_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG21_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG21_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG21_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG21_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG21_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG21_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG21_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG21_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG21_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG21_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG21_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG21_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG21_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG21_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG21_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG21_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG21_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG21_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG21_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG21_STATUS1_CPU3_MODE get_LPCG21_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG21_STATUS1_CPU3_MODE((LPCG21_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG21_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG21_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG21_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG21_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG21_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG21_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG21_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG21_STATUS1_CPU2_MODE get_LPCG21_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG21_STATUS1_CPU2_MODE((LPCG21_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG21_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG21_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG21_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG21_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG21_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG21_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG21_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG21_STATUS1_CPU1_MODE get_LPCG21_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG21_STATUS1_CPU1_MODE((LPCG21_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG21_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG21_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG21_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG21_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG21_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG21_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG21_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG21_STATUS1_CPU0_MODE get_LPCG21_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG21_STATUS1_CPU0_MODE((LPCG21_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG21_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG21_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG21_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG21_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG21_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG21_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG21_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG21_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG21_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG21_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG21_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG21_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG21_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG21_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG21_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG21_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG21_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG21_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG21_AUTHEN_LOCK_MODE() volatile
    {
        LPCG21_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG21_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG21_AUTHEN_LOCK_MODE() volatile
    {
        LPCG21_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG21_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG21_AUTHEN_LOCK_MODE() volatile
    {
        LPCG21_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG21_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG21_AUTHEN_CPULPM() volatile
    {
        return LPCG21_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG21_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG21_AUTHEN_CPULPM() volatile
    {
        LPCG21_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG21_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG21_AUTHEN_CPULPM() volatile
    {
        LPCG21_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG21_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG21_AUTHEN_CPULPM() volatile
    {
        LPCG21_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG21_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG21_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG21_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG21_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG21_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG21_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG21_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG21_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG21_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG21_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG21_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG21_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG21_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG21_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG21_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG21_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG21_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG21_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG21_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG21_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG21_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG21_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG21_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG21_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG21_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG21_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG21_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG21_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG21_AUTHEN_LOCK_LIST() volatile
    {
        LPCG21_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG21_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG21_AUTHEN_LOCK_LIST() volatile
    {
        LPCG21_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG21_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG21_AUTHEN_LOCK_LIST() volatile
    {
        LPCG21_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG21_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG21_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG21_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG21_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG21_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG21_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG21_AUTHEN = curr;
    }

    /**
     * Get LPCG21_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG21_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG21_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG21_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG21_AUTHEN_LOCK_TZ() volatile
    {
        LPCG21_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG21_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG21_AUTHEN_LOCK_TZ() volatile
    {
        LPCG21_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG21_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG21_AUTHEN_LOCK_TZ() volatile
    {
        LPCG21_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG21_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG21_AUTHEN_TZ_NS() volatile
    {
        return LPCG21_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG21_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG21_AUTHEN_TZ_NS() volatile
    {
        LPCG21_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG21_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG21_AUTHEN_TZ_NS() volatile
    {
        LPCG21_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG21_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG21_AUTHEN_TZ_NS() volatile
    {
        LPCG21_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG21_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG21_AUTHEN_TZ_USER() volatile
    {
        return LPCG21_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG21_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG21_AUTHEN_TZ_USER() volatile
    {
        LPCG21_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG21_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG21_AUTHEN_TZ_USER() volatile
    {
        LPCG21_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG21_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG21_AUTHEN_TZ_USER() volatile
    {
        LPCG21_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG21_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG21_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG21_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG21_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG21_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG21_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG21_AUTHEN = curr;
    }

    /**
     * Get LPCG22_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG22_DIRECT_ON() volatile
    {
        return LPCG22_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG22_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG22_DIRECT_ON() volatile
    {
        LPCG22_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG22_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG22_DIRECT_ON() volatile
    {
        LPCG22_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG22_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG22_DIRECT_ON() volatile
    {
        LPCG22_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG22_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG22_DOMAIN_LEVEL3 get_LPCG22_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG22_DOMAIN_LEVEL3((LPCG22_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG22_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG22_DOMAIN_LEVEL3(
        CCM_LPCG22_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG22_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG22_DOMAIN = curr;
    }

    /**
     * Get LPCG22_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG22_DOMAIN_LEVEL2 get_LPCG22_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG22_DOMAIN_LEVEL2((LPCG22_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG22_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG22_DOMAIN_LEVEL2(
        CCM_LPCG22_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG22_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG22_DOMAIN = curr;
    }

    /**
     * Get LPCG22_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG22_DOMAIN_LEVEL1 get_LPCG22_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG22_DOMAIN_LEVEL1((LPCG22_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG22_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG22_DOMAIN_LEVEL1(
        CCM_LPCG22_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG22_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG22_DOMAIN = curr;
    }

    /**
     * Get LPCG22_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG22_DOMAIN_LEVEL0 get_LPCG22_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG22_DOMAIN_LEVEL0((LPCG22_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG22_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG22_DOMAIN_LEVEL0(
        CCM_LPCG22_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG22_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG22_DOMAIN = curr;
    }

    /**
     * Get LPCG22_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG22_DOMAIN_LEVEL get_LPCG22_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG22_DOMAIN_LEVEL((LPCG22_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG22_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG22_DOMAIN_LEVEL(CCM_LPCG22_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG22_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG22_DOMAIN = curr;
    }

    /**
     * Get all of LPCG22_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG22_DOMAIN(CCM_LPCG22_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG22_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG22_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG22_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG22_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG22_DOMAIN;

        LEVEL3 = CCM_LPCG22_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG22_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG22_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG22_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG22_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG22_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG22_DOMAIN(CCM_LPCG22_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG22_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG22_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG22_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG22_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG22_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG22_DOMAIN = curr;
    }

    /**
     * Get LPCG22_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG22_STATUS0_DOMAIN_ENABLE
    get_LPCG22_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG22_STATUS0_DOMAIN_ENABLE((LPCG22_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG22_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG22_STATUS0_ACTIVE_DOMAIN
    get_LPCG22_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG22_STATUS0_ACTIVE_DOMAIN((LPCG22_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG22_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG22_STATUS0_ON() volatile
    {
        return LPCG22_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG22_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG22_STATUS0(
        CCM_LPCG22_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG22_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG22_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG22_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG22_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG22_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG22_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG22_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG22_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG22_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG22_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG22_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG22_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG22_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG22_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG22_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG22_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG22_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG22_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG22_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG22_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG22_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG22_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG22_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG22_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG22_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG22_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG22_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG22_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG22_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG22_STATUS1_CPU3_MODE get_LPCG22_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG22_STATUS1_CPU3_MODE((LPCG22_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG22_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG22_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG22_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG22_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG22_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG22_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG22_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG22_STATUS1_CPU2_MODE get_LPCG22_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG22_STATUS1_CPU2_MODE((LPCG22_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG22_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG22_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG22_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG22_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG22_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG22_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG22_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG22_STATUS1_CPU1_MODE get_LPCG22_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG22_STATUS1_CPU1_MODE((LPCG22_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG22_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG22_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG22_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG22_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG22_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG22_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG22_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG22_STATUS1_CPU0_MODE get_LPCG22_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG22_STATUS1_CPU0_MODE((LPCG22_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG22_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG22_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG22_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG22_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG22_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG22_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG22_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG22_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG22_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG22_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG22_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG22_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG22_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG22_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG22_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG22_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG22_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG22_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG22_AUTHEN_LOCK_MODE() volatile
    {
        LPCG22_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG22_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG22_AUTHEN_LOCK_MODE() volatile
    {
        LPCG22_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG22_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG22_AUTHEN_LOCK_MODE() volatile
    {
        LPCG22_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG22_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG22_AUTHEN_CPULPM() volatile
    {
        return LPCG22_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG22_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG22_AUTHEN_CPULPM() volatile
    {
        LPCG22_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG22_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG22_AUTHEN_CPULPM() volatile
    {
        LPCG22_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG22_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG22_AUTHEN_CPULPM() volatile
    {
        LPCG22_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG22_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG22_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG22_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG22_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG22_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG22_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG22_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG22_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG22_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG22_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG22_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG22_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG22_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG22_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG22_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG22_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG22_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG22_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG22_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG22_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG22_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG22_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG22_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG22_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG22_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG22_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG22_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG22_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG22_AUTHEN_LOCK_LIST() volatile
    {
        LPCG22_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG22_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG22_AUTHEN_LOCK_LIST() volatile
    {
        LPCG22_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG22_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG22_AUTHEN_LOCK_LIST() volatile
    {
        LPCG22_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG22_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG22_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG22_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG22_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG22_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG22_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG22_AUTHEN = curr;
    }

    /**
     * Get LPCG22_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG22_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG22_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG22_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG22_AUTHEN_LOCK_TZ() volatile
    {
        LPCG22_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG22_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG22_AUTHEN_LOCK_TZ() volatile
    {
        LPCG22_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG22_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG22_AUTHEN_LOCK_TZ() volatile
    {
        LPCG22_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG22_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG22_AUTHEN_TZ_NS() volatile
    {
        return LPCG22_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG22_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG22_AUTHEN_TZ_NS() volatile
    {
        LPCG22_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG22_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG22_AUTHEN_TZ_NS() volatile
    {
        LPCG22_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG22_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG22_AUTHEN_TZ_NS() volatile
    {
        LPCG22_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG22_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG22_AUTHEN_TZ_USER() volatile
    {
        return LPCG22_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG22_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG22_AUTHEN_TZ_USER() volatile
    {
        LPCG22_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG22_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG22_AUTHEN_TZ_USER() volatile
    {
        LPCG22_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG22_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG22_AUTHEN_TZ_USER() volatile
    {
        LPCG22_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG22_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG22_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG22_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG22_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG22_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG22_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG22_AUTHEN = curr;
    }

    /**
     * Get LPCG23_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG23_DIRECT_ON() volatile
    {
        return LPCG23_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG23_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG23_DIRECT_ON() volatile
    {
        LPCG23_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG23_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG23_DIRECT_ON() volatile
    {
        LPCG23_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG23_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG23_DIRECT_ON() volatile
    {
        LPCG23_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG23_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG23_DOMAIN_LEVEL3 get_LPCG23_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG23_DOMAIN_LEVEL3((LPCG23_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG23_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG23_DOMAIN_LEVEL3(
        CCM_LPCG23_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG23_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG23_DOMAIN = curr;
    }

    /**
     * Get LPCG23_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG23_DOMAIN_LEVEL2 get_LPCG23_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG23_DOMAIN_LEVEL2((LPCG23_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG23_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG23_DOMAIN_LEVEL2(
        CCM_LPCG23_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG23_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG23_DOMAIN = curr;
    }

    /**
     * Get LPCG23_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG23_DOMAIN_LEVEL1 get_LPCG23_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG23_DOMAIN_LEVEL1((LPCG23_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG23_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG23_DOMAIN_LEVEL1(
        CCM_LPCG23_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG23_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG23_DOMAIN = curr;
    }

    /**
     * Get LPCG23_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG23_DOMAIN_LEVEL0 get_LPCG23_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG23_DOMAIN_LEVEL0((LPCG23_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG23_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG23_DOMAIN_LEVEL0(
        CCM_LPCG23_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG23_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG23_DOMAIN = curr;
    }

    /**
     * Get LPCG23_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG23_DOMAIN_LEVEL get_LPCG23_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG23_DOMAIN_LEVEL((LPCG23_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG23_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG23_DOMAIN_LEVEL(CCM_LPCG23_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG23_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG23_DOMAIN = curr;
    }

    /**
     * Get all of LPCG23_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG23_DOMAIN(CCM_LPCG23_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG23_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG23_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG23_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG23_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG23_DOMAIN;

        LEVEL3 = CCM_LPCG23_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG23_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG23_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG23_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG23_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG23_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG23_DOMAIN(CCM_LPCG23_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG23_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG23_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG23_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG23_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG23_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG23_DOMAIN = curr;
    }

    /**
     * Get LPCG23_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG23_STATUS0_DOMAIN_ENABLE
    get_LPCG23_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG23_STATUS0_DOMAIN_ENABLE((LPCG23_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG23_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG23_STATUS0_ACTIVE_DOMAIN
    get_LPCG23_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG23_STATUS0_ACTIVE_DOMAIN((LPCG23_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG23_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG23_STATUS0_ON() volatile
    {
        return LPCG23_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG23_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG23_STATUS0(
        CCM_LPCG23_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG23_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG23_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG23_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG23_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG23_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG23_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG23_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG23_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG23_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG23_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG23_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG23_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG23_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG23_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG23_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG23_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG23_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG23_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG23_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG23_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG23_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG23_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG23_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG23_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG23_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG23_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG23_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG23_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG23_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG23_STATUS1_CPU3_MODE get_LPCG23_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG23_STATUS1_CPU3_MODE((LPCG23_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG23_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG23_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG23_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG23_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG23_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG23_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG23_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG23_STATUS1_CPU2_MODE get_LPCG23_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG23_STATUS1_CPU2_MODE((LPCG23_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG23_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG23_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG23_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG23_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG23_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG23_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG23_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG23_STATUS1_CPU1_MODE get_LPCG23_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG23_STATUS1_CPU1_MODE((LPCG23_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG23_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG23_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG23_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG23_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG23_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG23_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG23_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG23_STATUS1_CPU0_MODE get_LPCG23_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG23_STATUS1_CPU0_MODE((LPCG23_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG23_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG23_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG23_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG23_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG23_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG23_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG23_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG23_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG23_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG23_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG23_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG23_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG23_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG23_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG23_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG23_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG23_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG23_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG23_AUTHEN_LOCK_MODE() volatile
    {
        LPCG23_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG23_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG23_AUTHEN_LOCK_MODE() volatile
    {
        LPCG23_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG23_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG23_AUTHEN_LOCK_MODE() volatile
    {
        LPCG23_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG23_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG23_AUTHEN_CPULPM() volatile
    {
        return LPCG23_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG23_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG23_AUTHEN_CPULPM() volatile
    {
        LPCG23_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG23_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG23_AUTHEN_CPULPM() volatile
    {
        LPCG23_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG23_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG23_AUTHEN_CPULPM() volatile
    {
        LPCG23_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG23_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG23_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG23_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG23_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG23_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG23_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG23_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG23_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG23_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG23_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG23_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG23_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG23_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG23_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG23_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG23_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG23_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG23_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG23_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG23_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG23_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG23_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG23_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG23_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG23_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG23_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG23_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG23_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG23_AUTHEN_LOCK_LIST() volatile
    {
        LPCG23_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG23_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG23_AUTHEN_LOCK_LIST() volatile
    {
        LPCG23_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG23_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG23_AUTHEN_LOCK_LIST() volatile
    {
        LPCG23_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG23_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG23_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG23_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG23_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG23_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG23_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG23_AUTHEN = curr;
    }

    /**
     * Get LPCG23_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG23_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG23_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG23_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG23_AUTHEN_LOCK_TZ() volatile
    {
        LPCG23_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG23_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG23_AUTHEN_LOCK_TZ() volatile
    {
        LPCG23_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG23_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG23_AUTHEN_LOCK_TZ() volatile
    {
        LPCG23_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG23_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG23_AUTHEN_TZ_NS() volatile
    {
        return LPCG23_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG23_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG23_AUTHEN_TZ_NS() volatile
    {
        LPCG23_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG23_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG23_AUTHEN_TZ_NS() volatile
    {
        LPCG23_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG23_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG23_AUTHEN_TZ_NS() volatile
    {
        LPCG23_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG23_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG23_AUTHEN_TZ_USER() volatile
    {
        return LPCG23_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG23_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG23_AUTHEN_TZ_USER() volatile
    {
        LPCG23_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG23_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG23_AUTHEN_TZ_USER() volatile
    {
        LPCG23_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG23_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG23_AUTHEN_TZ_USER() volatile
    {
        LPCG23_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG23_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG23_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG23_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG23_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG23_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG23_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG23_AUTHEN = curr;
    }

    /**
     * Get LPCG24_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG24_DIRECT_ON() volatile
    {
        return LPCG24_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG24_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG24_DIRECT_ON() volatile
    {
        LPCG24_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG24_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG24_DIRECT_ON() volatile
    {
        LPCG24_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG24_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG24_DIRECT_ON() volatile
    {
        LPCG24_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG24_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG24_DOMAIN_LEVEL3 get_LPCG24_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG24_DOMAIN_LEVEL3((LPCG24_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG24_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG24_DOMAIN_LEVEL3(
        CCM_LPCG24_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG24_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG24_DOMAIN = curr;
    }

    /**
     * Get LPCG24_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG24_DOMAIN_LEVEL2 get_LPCG24_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG24_DOMAIN_LEVEL2((LPCG24_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG24_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG24_DOMAIN_LEVEL2(
        CCM_LPCG24_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG24_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG24_DOMAIN = curr;
    }

    /**
     * Get LPCG24_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG24_DOMAIN_LEVEL1 get_LPCG24_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG24_DOMAIN_LEVEL1((LPCG24_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG24_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG24_DOMAIN_LEVEL1(
        CCM_LPCG24_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG24_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG24_DOMAIN = curr;
    }

    /**
     * Get LPCG24_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG24_DOMAIN_LEVEL0 get_LPCG24_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG24_DOMAIN_LEVEL0((LPCG24_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG24_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG24_DOMAIN_LEVEL0(
        CCM_LPCG24_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG24_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG24_DOMAIN = curr;
    }

    /**
     * Get LPCG24_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG24_DOMAIN_LEVEL get_LPCG24_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG24_DOMAIN_LEVEL((LPCG24_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG24_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG24_DOMAIN_LEVEL(CCM_LPCG24_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG24_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG24_DOMAIN = curr;
    }

    /**
     * Get all of LPCG24_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG24_DOMAIN(CCM_LPCG24_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG24_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG24_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG24_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG24_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG24_DOMAIN;

        LEVEL3 = CCM_LPCG24_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG24_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG24_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG24_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG24_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG24_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG24_DOMAIN(CCM_LPCG24_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG24_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG24_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG24_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG24_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG24_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG24_DOMAIN = curr;
    }

    /**
     * Get LPCG24_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG24_SETPOINT_STANDBY() volatile
    {
        return (LPCG24_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG24_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG24_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG24_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG24_SETPOINT = curr;
    }

    /**
     * Get LPCG24_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG24_SETPOINT_SETPOINT() volatile
    {
        return (LPCG24_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG24_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG24_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG24_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG24_SETPOINT = curr;
    }

    /**
     * Get all of LPCG24_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG24_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG24_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG24_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG24_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG24_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG24_SETPOINT = curr;
    }

    /**
     * Get LPCG24_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG24_STATUS0_DOMAIN_ENABLE
    get_LPCG24_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG24_STATUS0_DOMAIN_ENABLE((LPCG24_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG24_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG24_STATUS0_ACTIVE_DOMAIN
    get_LPCG24_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG24_STATUS0_ACTIVE_DOMAIN((LPCG24_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG24_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG24_STATUS0_ON() volatile
    {
        return LPCG24_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG24_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG24_STATUS0(
        CCM_LPCG24_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG24_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG24_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG24_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG24_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG24_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG24_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG24_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG24_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG24_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG24_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG24_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG24_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG24_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG24_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG24_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG24_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG24_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG24_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG24_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG24_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG24_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG24_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG24_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG24_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG24_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG24_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG24_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG24_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG24_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG24_STATUS1_CPU3_MODE get_LPCG24_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG24_STATUS1_CPU3_MODE((LPCG24_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG24_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG24_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG24_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG24_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG24_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG24_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG24_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG24_STATUS1_CPU2_MODE get_LPCG24_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG24_STATUS1_CPU2_MODE((LPCG24_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG24_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG24_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG24_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG24_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG24_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG24_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG24_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG24_STATUS1_CPU1_MODE get_LPCG24_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG24_STATUS1_CPU1_MODE((LPCG24_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG24_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG24_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG24_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG24_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG24_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG24_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG24_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG24_STATUS1_CPU0_MODE get_LPCG24_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG24_STATUS1_CPU0_MODE((LPCG24_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG24_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG24_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG24_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG24_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG24_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG24_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG24_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG24_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG24_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG24_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG24_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG24_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG24_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG24_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG24_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG24_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG24_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG24_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG24_AUTHEN_LOCK_MODE() volatile
    {
        LPCG24_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG24_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG24_AUTHEN_LOCK_MODE() volatile
    {
        LPCG24_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG24_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG24_AUTHEN_LOCK_MODE() volatile
    {
        LPCG24_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG24_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG24_AUTHEN_CPULPM() volatile
    {
        return LPCG24_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG24_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG24_AUTHEN_CPULPM() volatile
    {
        LPCG24_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG24_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG24_AUTHEN_CPULPM() volatile
    {
        LPCG24_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG24_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG24_AUTHEN_CPULPM() volatile
    {
        LPCG24_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG24_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG24_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG24_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG24_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG24_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG24_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG24_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG24_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG24_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG24_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG24_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG24_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG24_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG24_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG24_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG24_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG24_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG24_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG24_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG24_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG24_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG24_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG24_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG24_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG24_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG24_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG24_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG24_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG24_AUTHEN_LOCK_LIST() volatile
    {
        LPCG24_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG24_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG24_AUTHEN_LOCK_LIST() volatile
    {
        LPCG24_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG24_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG24_AUTHEN_LOCK_LIST() volatile
    {
        LPCG24_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG24_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG24_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG24_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG24_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG24_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG24_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG24_AUTHEN = curr;
    }

    /**
     * Get LPCG24_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG24_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG24_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG24_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG24_AUTHEN_LOCK_TZ() volatile
    {
        LPCG24_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG24_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG24_AUTHEN_LOCK_TZ() volatile
    {
        LPCG24_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG24_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG24_AUTHEN_LOCK_TZ() volatile
    {
        LPCG24_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG24_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG24_AUTHEN_TZ_NS() volatile
    {
        return LPCG24_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG24_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG24_AUTHEN_TZ_NS() volatile
    {
        LPCG24_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG24_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG24_AUTHEN_TZ_NS() volatile
    {
        LPCG24_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG24_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG24_AUTHEN_TZ_NS() volatile
    {
        LPCG24_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG24_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG24_AUTHEN_TZ_USER() volatile
    {
        return LPCG24_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG24_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG24_AUTHEN_TZ_USER() volatile
    {
        LPCG24_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG24_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG24_AUTHEN_TZ_USER() volatile
    {
        LPCG24_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG24_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG24_AUTHEN_TZ_USER() volatile
    {
        LPCG24_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG24_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG24_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG24_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG24_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG24_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG24_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG24_AUTHEN = curr;
    }

    /**
     * Get LPCG25_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG25_DIRECT_ON() volatile
    {
        return LPCG25_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG25_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG25_DIRECT_ON() volatile
    {
        LPCG25_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG25_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG25_DIRECT_ON() volatile
    {
        LPCG25_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG25_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG25_DIRECT_ON() volatile
    {
        LPCG25_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG25_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG25_DOMAIN_LEVEL3 get_LPCG25_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG25_DOMAIN_LEVEL3((LPCG25_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG25_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG25_DOMAIN_LEVEL3(
        CCM_LPCG25_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG25_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG25_DOMAIN = curr;
    }

    /**
     * Get LPCG25_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG25_DOMAIN_LEVEL2 get_LPCG25_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG25_DOMAIN_LEVEL2((LPCG25_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG25_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG25_DOMAIN_LEVEL2(
        CCM_LPCG25_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG25_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG25_DOMAIN = curr;
    }

    /**
     * Get LPCG25_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG25_DOMAIN_LEVEL1 get_LPCG25_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG25_DOMAIN_LEVEL1((LPCG25_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG25_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG25_DOMAIN_LEVEL1(
        CCM_LPCG25_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG25_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG25_DOMAIN = curr;
    }

    /**
     * Get LPCG25_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG25_DOMAIN_LEVEL0 get_LPCG25_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG25_DOMAIN_LEVEL0((LPCG25_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG25_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG25_DOMAIN_LEVEL0(
        CCM_LPCG25_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG25_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG25_DOMAIN = curr;
    }

    /**
     * Get LPCG25_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG25_DOMAIN_LEVEL get_LPCG25_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG25_DOMAIN_LEVEL((LPCG25_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG25_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG25_DOMAIN_LEVEL(CCM_LPCG25_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG25_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG25_DOMAIN = curr;
    }

    /**
     * Get all of LPCG25_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG25_DOMAIN(CCM_LPCG25_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG25_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG25_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG25_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG25_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG25_DOMAIN;

        LEVEL3 = CCM_LPCG25_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG25_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG25_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG25_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG25_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG25_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG25_DOMAIN(CCM_LPCG25_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG25_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG25_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG25_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG25_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG25_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG25_DOMAIN = curr;
    }

    /**
     * Get LPCG25_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG25_SETPOINT_STANDBY() volatile
    {
        return (LPCG25_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG25_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG25_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG25_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG25_SETPOINT = curr;
    }

    /**
     * Get LPCG25_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG25_SETPOINT_SETPOINT() volatile
    {
        return (LPCG25_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG25_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG25_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG25_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG25_SETPOINT = curr;
    }

    /**
     * Get all of LPCG25_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG25_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG25_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG25_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG25_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG25_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG25_SETPOINT = curr;
    }

    /**
     * Get LPCG25_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG25_STATUS0_DOMAIN_ENABLE
    get_LPCG25_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG25_STATUS0_DOMAIN_ENABLE((LPCG25_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG25_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG25_STATUS0_ACTIVE_DOMAIN
    get_LPCG25_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG25_STATUS0_ACTIVE_DOMAIN((LPCG25_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG25_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG25_STATUS0_ON() volatile
    {
        return LPCG25_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG25_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG25_STATUS0(
        CCM_LPCG25_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG25_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG25_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG25_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG25_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG25_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG25_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG25_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG25_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG25_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG25_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG25_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG25_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG25_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG25_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG25_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG25_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG25_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG25_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG25_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG25_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG25_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG25_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG25_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG25_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG25_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG25_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG25_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG25_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG25_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG25_STATUS1_CPU3_MODE get_LPCG25_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG25_STATUS1_CPU3_MODE((LPCG25_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG25_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG25_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG25_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG25_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG25_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG25_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG25_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG25_STATUS1_CPU2_MODE get_LPCG25_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG25_STATUS1_CPU2_MODE((LPCG25_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG25_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG25_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG25_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG25_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG25_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG25_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG25_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG25_STATUS1_CPU1_MODE get_LPCG25_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG25_STATUS1_CPU1_MODE((LPCG25_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG25_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG25_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG25_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG25_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG25_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG25_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG25_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG25_STATUS1_CPU0_MODE get_LPCG25_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG25_STATUS1_CPU0_MODE((LPCG25_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG25_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG25_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG25_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG25_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG25_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG25_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG25_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG25_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG25_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG25_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG25_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG25_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG25_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG25_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG25_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG25_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG25_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG25_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG25_AUTHEN_LOCK_MODE() volatile
    {
        LPCG25_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG25_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG25_AUTHEN_LOCK_MODE() volatile
    {
        LPCG25_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG25_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG25_AUTHEN_LOCK_MODE() volatile
    {
        LPCG25_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG25_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG25_AUTHEN_CPULPM() volatile
    {
        return LPCG25_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG25_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG25_AUTHEN_CPULPM() volatile
    {
        LPCG25_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG25_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG25_AUTHEN_CPULPM() volatile
    {
        LPCG25_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG25_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG25_AUTHEN_CPULPM() volatile
    {
        LPCG25_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG25_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG25_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG25_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG25_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG25_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG25_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG25_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG25_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG25_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG25_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG25_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG25_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG25_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG25_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG25_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG25_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG25_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG25_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG25_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG25_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG25_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG25_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG25_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG25_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG25_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG25_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG25_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG25_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG25_AUTHEN_LOCK_LIST() volatile
    {
        LPCG25_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG25_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG25_AUTHEN_LOCK_LIST() volatile
    {
        LPCG25_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG25_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG25_AUTHEN_LOCK_LIST() volatile
    {
        LPCG25_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG25_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG25_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG25_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG25_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG25_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG25_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG25_AUTHEN = curr;
    }

    /**
     * Get LPCG25_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG25_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG25_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG25_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG25_AUTHEN_LOCK_TZ() volatile
    {
        LPCG25_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG25_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG25_AUTHEN_LOCK_TZ() volatile
    {
        LPCG25_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG25_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG25_AUTHEN_LOCK_TZ() volatile
    {
        LPCG25_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG25_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG25_AUTHEN_TZ_NS() volatile
    {
        return LPCG25_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG25_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG25_AUTHEN_TZ_NS() volatile
    {
        LPCG25_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG25_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG25_AUTHEN_TZ_NS() volatile
    {
        LPCG25_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG25_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG25_AUTHEN_TZ_NS() volatile
    {
        LPCG25_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG25_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG25_AUTHEN_TZ_USER() volatile
    {
        return LPCG25_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG25_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG25_AUTHEN_TZ_USER() volatile
    {
        LPCG25_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG25_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG25_AUTHEN_TZ_USER() volatile
    {
        LPCG25_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG25_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG25_AUTHEN_TZ_USER() volatile
    {
        LPCG25_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG25_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG25_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG25_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG25_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG25_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG25_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG25_AUTHEN = curr;
    }

    /**
     * Get LPCG26_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG26_DIRECT_ON() volatile
    {
        return LPCG26_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG26_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG26_DIRECT_ON() volatile
    {
        LPCG26_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG26_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG26_DIRECT_ON() volatile
    {
        LPCG26_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG26_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG26_DIRECT_ON() volatile
    {
        LPCG26_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG26_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG26_DOMAIN_LEVEL3 get_LPCG26_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG26_DOMAIN_LEVEL3((LPCG26_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG26_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG26_DOMAIN_LEVEL3(
        CCM_LPCG26_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG26_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG26_DOMAIN = curr;
    }

    /**
     * Get LPCG26_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG26_DOMAIN_LEVEL2 get_LPCG26_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG26_DOMAIN_LEVEL2((LPCG26_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG26_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG26_DOMAIN_LEVEL2(
        CCM_LPCG26_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG26_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG26_DOMAIN = curr;
    }

    /**
     * Get LPCG26_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG26_DOMAIN_LEVEL1 get_LPCG26_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG26_DOMAIN_LEVEL1((LPCG26_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG26_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG26_DOMAIN_LEVEL1(
        CCM_LPCG26_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG26_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG26_DOMAIN = curr;
    }

    /**
     * Get LPCG26_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG26_DOMAIN_LEVEL0 get_LPCG26_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG26_DOMAIN_LEVEL0((LPCG26_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG26_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG26_DOMAIN_LEVEL0(
        CCM_LPCG26_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG26_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG26_DOMAIN = curr;
    }

    /**
     * Get LPCG26_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG26_DOMAIN_LEVEL get_LPCG26_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG26_DOMAIN_LEVEL((LPCG26_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG26_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG26_DOMAIN_LEVEL(CCM_LPCG26_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG26_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG26_DOMAIN = curr;
    }

    /**
     * Get all of LPCG26_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG26_DOMAIN(CCM_LPCG26_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG26_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG26_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG26_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG26_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG26_DOMAIN;

        LEVEL3 = CCM_LPCG26_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG26_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG26_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG26_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG26_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG26_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG26_DOMAIN(CCM_LPCG26_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG26_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG26_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG26_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG26_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG26_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG26_DOMAIN = curr;
    }

    /**
     * Get LPCG26_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG26_SETPOINT_STANDBY() volatile
    {
        return (LPCG26_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG26_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG26_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG26_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG26_SETPOINT = curr;
    }

    /**
     * Get LPCG26_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG26_SETPOINT_SETPOINT() volatile
    {
        return (LPCG26_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG26_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG26_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG26_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG26_SETPOINT = curr;
    }

    /**
     * Get all of LPCG26_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG26_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG26_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG26_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG26_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG26_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG26_SETPOINT = curr;
    }

    /**
     * Get LPCG26_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG26_STATUS0_DOMAIN_ENABLE
    get_LPCG26_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG26_STATUS0_DOMAIN_ENABLE((LPCG26_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG26_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG26_STATUS0_ACTIVE_DOMAIN
    get_LPCG26_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG26_STATUS0_ACTIVE_DOMAIN((LPCG26_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG26_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG26_STATUS0_ON() volatile
    {
        return LPCG26_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG26_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG26_STATUS0(
        CCM_LPCG26_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG26_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG26_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG26_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG26_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG26_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG26_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG26_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG26_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG26_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG26_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG26_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG26_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG26_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG26_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG26_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG26_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG26_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG26_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG26_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG26_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG26_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG26_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG26_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG26_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG26_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG26_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG26_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG26_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG26_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG26_STATUS1_CPU3_MODE get_LPCG26_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG26_STATUS1_CPU3_MODE((LPCG26_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG26_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG26_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG26_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG26_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG26_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG26_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG26_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG26_STATUS1_CPU2_MODE get_LPCG26_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG26_STATUS1_CPU2_MODE((LPCG26_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG26_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG26_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG26_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG26_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG26_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG26_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG26_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG26_STATUS1_CPU1_MODE get_LPCG26_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG26_STATUS1_CPU1_MODE((LPCG26_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG26_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG26_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG26_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG26_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG26_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG26_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG26_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG26_STATUS1_CPU0_MODE get_LPCG26_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG26_STATUS1_CPU0_MODE((LPCG26_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG26_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG26_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG26_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG26_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG26_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG26_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG26_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG26_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG26_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG26_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG26_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG26_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG26_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG26_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG26_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG26_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG26_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG26_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG26_AUTHEN_LOCK_MODE() volatile
    {
        LPCG26_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG26_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG26_AUTHEN_LOCK_MODE() volatile
    {
        LPCG26_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG26_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG26_AUTHEN_LOCK_MODE() volatile
    {
        LPCG26_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG26_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG26_AUTHEN_CPULPM() volatile
    {
        return LPCG26_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG26_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG26_AUTHEN_CPULPM() volatile
    {
        LPCG26_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG26_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG26_AUTHEN_CPULPM() volatile
    {
        LPCG26_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG26_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG26_AUTHEN_CPULPM() volatile
    {
        LPCG26_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG26_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG26_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG26_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG26_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG26_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG26_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG26_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG26_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG26_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG26_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG26_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG26_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG26_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG26_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG26_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG26_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG26_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG26_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG26_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG26_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG26_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG26_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG26_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG26_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG26_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG26_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG26_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG26_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG26_AUTHEN_LOCK_LIST() volatile
    {
        LPCG26_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG26_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG26_AUTHEN_LOCK_LIST() volatile
    {
        LPCG26_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG26_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG26_AUTHEN_LOCK_LIST() volatile
    {
        LPCG26_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG26_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG26_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG26_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG26_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG26_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG26_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG26_AUTHEN = curr;
    }

    /**
     * Get LPCG26_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG26_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG26_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG26_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG26_AUTHEN_LOCK_TZ() volatile
    {
        LPCG26_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG26_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG26_AUTHEN_LOCK_TZ() volatile
    {
        LPCG26_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG26_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG26_AUTHEN_LOCK_TZ() volatile
    {
        LPCG26_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG26_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG26_AUTHEN_TZ_NS() volatile
    {
        return LPCG26_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG26_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG26_AUTHEN_TZ_NS() volatile
    {
        LPCG26_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG26_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG26_AUTHEN_TZ_NS() volatile
    {
        LPCG26_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG26_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG26_AUTHEN_TZ_NS() volatile
    {
        LPCG26_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG26_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG26_AUTHEN_TZ_USER() volatile
    {
        return LPCG26_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG26_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG26_AUTHEN_TZ_USER() volatile
    {
        LPCG26_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG26_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG26_AUTHEN_TZ_USER() volatile
    {
        LPCG26_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG26_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG26_AUTHEN_TZ_USER() volatile
    {
        LPCG26_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG26_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG26_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG26_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG26_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG26_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG26_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG26_AUTHEN = curr;
    }

    /**
     * Get LPCG27_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG27_DIRECT_ON() volatile
    {
        return LPCG27_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG27_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG27_DIRECT_ON() volatile
    {
        LPCG27_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG27_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG27_DIRECT_ON() volatile
    {
        LPCG27_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG27_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG27_DIRECT_ON() volatile
    {
        LPCG27_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG27_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG27_DOMAIN_LEVEL3 get_LPCG27_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG27_DOMAIN_LEVEL3((LPCG27_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG27_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG27_DOMAIN_LEVEL3(
        CCM_LPCG27_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG27_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG27_DOMAIN = curr;
    }

    /**
     * Get LPCG27_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG27_DOMAIN_LEVEL2 get_LPCG27_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG27_DOMAIN_LEVEL2((LPCG27_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG27_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG27_DOMAIN_LEVEL2(
        CCM_LPCG27_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG27_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG27_DOMAIN = curr;
    }

    /**
     * Get LPCG27_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG27_DOMAIN_LEVEL1 get_LPCG27_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG27_DOMAIN_LEVEL1((LPCG27_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG27_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG27_DOMAIN_LEVEL1(
        CCM_LPCG27_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG27_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG27_DOMAIN = curr;
    }

    /**
     * Get LPCG27_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG27_DOMAIN_LEVEL0 get_LPCG27_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG27_DOMAIN_LEVEL0((LPCG27_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG27_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG27_DOMAIN_LEVEL0(
        CCM_LPCG27_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG27_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG27_DOMAIN = curr;
    }

    /**
     * Get LPCG27_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG27_DOMAIN_LEVEL get_LPCG27_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG27_DOMAIN_LEVEL((LPCG27_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG27_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG27_DOMAIN_LEVEL(CCM_LPCG27_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG27_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG27_DOMAIN = curr;
    }

    /**
     * Get all of LPCG27_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG27_DOMAIN(CCM_LPCG27_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG27_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG27_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG27_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG27_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG27_DOMAIN;

        LEVEL3 = CCM_LPCG27_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG27_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG27_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG27_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG27_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG27_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG27_DOMAIN(CCM_LPCG27_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG27_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG27_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG27_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG27_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG27_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG27_DOMAIN = curr;
    }

    /**
     * Get LPCG27_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG27_SETPOINT_STANDBY() volatile
    {
        return (LPCG27_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG27_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG27_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG27_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG27_SETPOINT = curr;
    }

    /**
     * Get LPCG27_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG27_SETPOINT_SETPOINT() volatile
    {
        return (LPCG27_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG27_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG27_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG27_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG27_SETPOINT = curr;
    }

    /**
     * Get all of LPCG27_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG27_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG27_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG27_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG27_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG27_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG27_SETPOINT = curr;
    }

    /**
     * Get LPCG27_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG27_STATUS0_DOMAIN_ENABLE
    get_LPCG27_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG27_STATUS0_DOMAIN_ENABLE((LPCG27_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG27_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG27_STATUS0_ACTIVE_DOMAIN
    get_LPCG27_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG27_STATUS0_ACTIVE_DOMAIN((LPCG27_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG27_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG27_STATUS0_ON() volatile
    {
        return LPCG27_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG27_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG27_STATUS0(
        CCM_LPCG27_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG27_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG27_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG27_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG27_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG27_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG27_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG27_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG27_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG27_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG27_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG27_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG27_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG27_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG27_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG27_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG27_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG27_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG27_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG27_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG27_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG27_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG27_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG27_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG27_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG27_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG27_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG27_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG27_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG27_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG27_STATUS1_CPU3_MODE get_LPCG27_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG27_STATUS1_CPU3_MODE((LPCG27_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG27_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG27_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG27_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG27_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG27_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG27_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG27_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG27_STATUS1_CPU2_MODE get_LPCG27_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG27_STATUS1_CPU2_MODE((LPCG27_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG27_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG27_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG27_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG27_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG27_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG27_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG27_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG27_STATUS1_CPU1_MODE get_LPCG27_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG27_STATUS1_CPU1_MODE((LPCG27_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG27_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG27_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG27_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG27_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG27_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG27_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG27_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG27_STATUS1_CPU0_MODE get_LPCG27_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG27_STATUS1_CPU0_MODE((LPCG27_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG27_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG27_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG27_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG27_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG27_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG27_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG27_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG27_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG27_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG27_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG27_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG27_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG27_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG27_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG27_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG27_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG27_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG27_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG27_AUTHEN_LOCK_MODE() volatile
    {
        LPCG27_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG27_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG27_AUTHEN_LOCK_MODE() volatile
    {
        LPCG27_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG27_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG27_AUTHEN_LOCK_MODE() volatile
    {
        LPCG27_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG27_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG27_AUTHEN_CPULPM() volatile
    {
        return LPCG27_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG27_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG27_AUTHEN_CPULPM() volatile
    {
        LPCG27_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG27_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG27_AUTHEN_CPULPM() volatile
    {
        LPCG27_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG27_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG27_AUTHEN_CPULPM() volatile
    {
        LPCG27_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG27_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG27_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG27_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG27_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG27_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG27_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG27_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG27_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG27_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG27_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG27_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG27_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG27_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG27_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG27_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG27_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG27_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG27_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG27_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG27_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG27_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG27_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG27_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG27_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG27_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG27_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG27_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG27_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG27_AUTHEN_LOCK_LIST() volatile
    {
        LPCG27_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG27_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG27_AUTHEN_LOCK_LIST() volatile
    {
        LPCG27_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG27_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG27_AUTHEN_LOCK_LIST() volatile
    {
        LPCG27_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG27_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG27_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG27_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG27_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG27_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG27_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG27_AUTHEN = curr;
    }

    /**
     * Get LPCG27_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG27_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG27_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG27_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG27_AUTHEN_LOCK_TZ() volatile
    {
        LPCG27_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG27_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG27_AUTHEN_LOCK_TZ() volatile
    {
        LPCG27_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG27_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG27_AUTHEN_LOCK_TZ() volatile
    {
        LPCG27_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG27_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG27_AUTHEN_TZ_NS() volatile
    {
        return LPCG27_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG27_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG27_AUTHEN_TZ_NS() volatile
    {
        LPCG27_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG27_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG27_AUTHEN_TZ_NS() volatile
    {
        LPCG27_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG27_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG27_AUTHEN_TZ_NS() volatile
    {
        LPCG27_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG27_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG27_AUTHEN_TZ_USER() volatile
    {
        return LPCG27_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG27_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG27_AUTHEN_TZ_USER() volatile
    {
        LPCG27_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG27_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG27_AUTHEN_TZ_USER() volatile
    {
        LPCG27_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG27_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG27_AUTHEN_TZ_USER() volatile
    {
        LPCG27_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG27_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG27_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG27_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG27_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG27_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG27_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG27_AUTHEN = curr;
    }

    /**
     * Get LPCG28_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG28_DIRECT_ON() volatile
    {
        return LPCG28_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG28_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG28_DIRECT_ON() volatile
    {
        LPCG28_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG28_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG28_DIRECT_ON() volatile
    {
        LPCG28_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG28_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG28_DIRECT_ON() volatile
    {
        LPCG28_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG28_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG28_DOMAIN_LEVEL3 get_LPCG28_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG28_DOMAIN_LEVEL3((LPCG28_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG28_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG28_DOMAIN_LEVEL3(
        CCM_LPCG28_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG28_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG28_DOMAIN = curr;
    }

    /**
     * Get LPCG28_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG28_DOMAIN_LEVEL2 get_LPCG28_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG28_DOMAIN_LEVEL2((LPCG28_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG28_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG28_DOMAIN_LEVEL2(
        CCM_LPCG28_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG28_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG28_DOMAIN = curr;
    }

    /**
     * Get LPCG28_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG28_DOMAIN_LEVEL1 get_LPCG28_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG28_DOMAIN_LEVEL1((LPCG28_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG28_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG28_DOMAIN_LEVEL1(
        CCM_LPCG28_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG28_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG28_DOMAIN = curr;
    }

    /**
     * Get LPCG28_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG28_DOMAIN_LEVEL0 get_LPCG28_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG28_DOMAIN_LEVEL0((LPCG28_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG28_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG28_DOMAIN_LEVEL0(
        CCM_LPCG28_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG28_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG28_DOMAIN = curr;
    }

    /**
     * Get LPCG28_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG28_DOMAIN_LEVEL get_LPCG28_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG28_DOMAIN_LEVEL((LPCG28_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG28_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG28_DOMAIN_LEVEL(CCM_LPCG28_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG28_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG28_DOMAIN = curr;
    }

    /**
     * Get all of LPCG28_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG28_DOMAIN(CCM_LPCG28_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG28_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG28_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG28_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG28_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG28_DOMAIN;

        LEVEL3 = CCM_LPCG28_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG28_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG28_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG28_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG28_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG28_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG28_DOMAIN(CCM_LPCG28_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG28_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG28_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG28_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG28_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG28_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG28_DOMAIN = curr;
    }

    /**
     * Get LPCG28_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG28_SETPOINT_STANDBY() volatile
    {
        return (LPCG28_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG28_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG28_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG28_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG28_SETPOINT = curr;
    }

    /**
     * Get LPCG28_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG28_SETPOINT_SETPOINT() volatile
    {
        return (LPCG28_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG28_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG28_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG28_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG28_SETPOINT = curr;
    }

    /**
     * Get all of LPCG28_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG28_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG28_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG28_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG28_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG28_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG28_SETPOINT = curr;
    }

    /**
     * Get LPCG28_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG28_STATUS0_DOMAIN_ENABLE
    get_LPCG28_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG28_STATUS0_DOMAIN_ENABLE((LPCG28_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG28_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG28_STATUS0_ACTIVE_DOMAIN
    get_LPCG28_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG28_STATUS0_ACTIVE_DOMAIN((LPCG28_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG28_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG28_STATUS0_ON() volatile
    {
        return LPCG28_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG28_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG28_STATUS0(
        CCM_LPCG28_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG28_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG28_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG28_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG28_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG28_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG28_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG28_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG28_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG28_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG28_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG28_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG28_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG28_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG28_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG28_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG28_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG28_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG28_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG28_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG28_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG28_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG28_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG28_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG28_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG28_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG28_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG28_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG28_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG28_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG28_STATUS1_CPU3_MODE get_LPCG28_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG28_STATUS1_CPU3_MODE((LPCG28_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG28_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG28_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG28_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG28_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG28_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG28_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG28_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG28_STATUS1_CPU2_MODE get_LPCG28_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG28_STATUS1_CPU2_MODE((LPCG28_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG28_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG28_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG28_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG28_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG28_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG28_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG28_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG28_STATUS1_CPU1_MODE get_LPCG28_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG28_STATUS1_CPU1_MODE((LPCG28_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG28_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG28_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG28_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG28_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG28_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG28_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG28_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG28_STATUS1_CPU0_MODE get_LPCG28_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG28_STATUS1_CPU0_MODE((LPCG28_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG28_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG28_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG28_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG28_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG28_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG28_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG28_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG28_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG28_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG28_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG28_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG28_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG28_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG28_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG28_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG28_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG28_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG28_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG28_AUTHEN_LOCK_MODE() volatile
    {
        LPCG28_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG28_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG28_AUTHEN_LOCK_MODE() volatile
    {
        LPCG28_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG28_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG28_AUTHEN_LOCK_MODE() volatile
    {
        LPCG28_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG28_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG28_AUTHEN_CPULPM() volatile
    {
        return LPCG28_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG28_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG28_AUTHEN_CPULPM() volatile
    {
        LPCG28_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG28_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG28_AUTHEN_CPULPM() volatile
    {
        LPCG28_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG28_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG28_AUTHEN_CPULPM() volatile
    {
        LPCG28_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG28_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG28_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG28_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG28_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG28_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG28_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG28_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG28_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG28_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG28_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG28_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG28_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG28_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG28_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG28_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG28_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG28_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG28_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG28_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG28_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG28_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG28_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG28_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG28_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG28_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG28_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG28_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG28_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG28_AUTHEN_LOCK_LIST() volatile
    {
        LPCG28_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG28_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG28_AUTHEN_LOCK_LIST() volatile
    {
        LPCG28_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG28_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG28_AUTHEN_LOCK_LIST() volatile
    {
        LPCG28_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG28_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG28_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG28_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG28_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG28_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG28_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG28_AUTHEN = curr;
    }

    /**
     * Get LPCG28_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG28_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG28_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG28_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG28_AUTHEN_LOCK_TZ() volatile
    {
        LPCG28_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG28_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG28_AUTHEN_LOCK_TZ() volatile
    {
        LPCG28_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG28_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG28_AUTHEN_LOCK_TZ() volatile
    {
        LPCG28_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG28_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG28_AUTHEN_TZ_NS() volatile
    {
        return LPCG28_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG28_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG28_AUTHEN_TZ_NS() volatile
    {
        LPCG28_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG28_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG28_AUTHEN_TZ_NS() volatile
    {
        LPCG28_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG28_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG28_AUTHEN_TZ_NS() volatile
    {
        LPCG28_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG28_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG28_AUTHEN_TZ_USER() volatile
    {
        return LPCG28_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG28_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG28_AUTHEN_TZ_USER() volatile
    {
        LPCG28_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG28_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG28_AUTHEN_TZ_USER() volatile
    {
        LPCG28_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG28_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG28_AUTHEN_TZ_USER() volatile
    {
        LPCG28_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG28_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG28_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG28_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG28_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG28_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG28_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG28_AUTHEN = curr;
    }

    /**
     * Get LPCG29_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG29_DIRECT_ON() volatile
    {
        return LPCG29_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG29_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG29_DIRECT_ON() volatile
    {
        LPCG29_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG29_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG29_DIRECT_ON() volatile
    {
        LPCG29_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG29_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG29_DIRECT_ON() volatile
    {
        LPCG29_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG29_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG29_DOMAIN_LEVEL3 get_LPCG29_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG29_DOMAIN_LEVEL3((LPCG29_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG29_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG29_DOMAIN_LEVEL3(
        CCM_LPCG29_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG29_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG29_DOMAIN = curr;
    }

    /**
     * Get LPCG29_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG29_DOMAIN_LEVEL2 get_LPCG29_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG29_DOMAIN_LEVEL2((LPCG29_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG29_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG29_DOMAIN_LEVEL2(
        CCM_LPCG29_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG29_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG29_DOMAIN = curr;
    }

    /**
     * Get LPCG29_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG29_DOMAIN_LEVEL1 get_LPCG29_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG29_DOMAIN_LEVEL1((LPCG29_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG29_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG29_DOMAIN_LEVEL1(
        CCM_LPCG29_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG29_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG29_DOMAIN = curr;
    }

    /**
     * Get LPCG29_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG29_DOMAIN_LEVEL0 get_LPCG29_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG29_DOMAIN_LEVEL0((LPCG29_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG29_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG29_DOMAIN_LEVEL0(
        CCM_LPCG29_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG29_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG29_DOMAIN = curr;
    }

    /**
     * Get LPCG29_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG29_DOMAIN_LEVEL get_LPCG29_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG29_DOMAIN_LEVEL((LPCG29_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG29_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG29_DOMAIN_LEVEL(CCM_LPCG29_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG29_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG29_DOMAIN = curr;
    }

    /**
     * Get all of LPCG29_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG29_DOMAIN(CCM_LPCG29_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG29_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG29_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG29_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG29_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG29_DOMAIN;

        LEVEL3 = CCM_LPCG29_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG29_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG29_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG29_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG29_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG29_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG29_DOMAIN(CCM_LPCG29_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG29_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG29_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG29_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG29_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG29_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG29_DOMAIN = curr;
    }

    /**
     * Get LPCG29_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG29_SETPOINT_STANDBY() volatile
    {
        return (LPCG29_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG29_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG29_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG29_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG29_SETPOINT = curr;
    }

    /**
     * Get LPCG29_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG29_SETPOINT_SETPOINT() volatile
    {
        return (LPCG29_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG29_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG29_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG29_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG29_SETPOINT = curr;
    }

    /**
     * Get all of LPCG29_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG29_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG29_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG29_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG29_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG29_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG29_SETPOINT = curr;
    }

    /**
     * Get LPCG29_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG29_STATUS0_DOMAIN_ENABLE
    get_LPCG29_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG29_STATUS0_DOMAIN_ENABLE((LPCG29_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG29_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG29_STATUS0_ACTIVE_DOMAIN
    get_LPCG29_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG29_STATUS0_ACTIVE_DOMAIN((LPCG29_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG29_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG29_STATUS0_ON() volatile
    {
        return LPCG29_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG29_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG29_STATUS0(
        CCM_LPCG29_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG29_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG29_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG29_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG29_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG29_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG29_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG29_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG29_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG29_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG29_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG29_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG29_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG29_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG29_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG29_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG29_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG29_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG29_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG29_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG29_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG29_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG29_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG29_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG29_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG29_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG29_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG29_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG29_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG29_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG29_STATUS1_CPU3_MODE get_LPCG29_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG29_STATUS1_CPU3_MODE((LPCG29_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG29_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG29_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG29_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG29_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG29_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG29_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG29_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG29_STATUS1_CPU2_MODE get_LPCG29_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG29_STATUS1_CPU2_MODE((LPCG29_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG29_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG29_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG29_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG29_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG29_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG29_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG29_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG29_STATUS1_CPU1_MODE get_LPCG29_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG29_STATUS1_CPU1_MODE((LPCG29_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG29_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG29_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG29_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG29_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG29_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG29_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG29_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG29_STATUS1_CPU0_MODE get_LPCG29_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG29_STATUS1_CPU0_MODE((LPCG29_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG29_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG29_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG29_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG29_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG29_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG29_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG29_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG29_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG29_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG29_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG29_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG29_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG29_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG29_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG29_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG29_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG29_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG29_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG29_AUTHEN_LOCK_MODE() volatile
    {
        LPCG29_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG29_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG29_AUTHEN_LOCK_MODE() volatile
    {
        LPCG29_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG29_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG29_AUTHEN_LOCK_MODE() volatile
    {
        LPCG29_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG29_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG29_AUTHEN_CPULPM() volatile
    {
        return LPCG29_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG29_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG29_AUTHEN_CPULPM() volatile
    {
        LPCG29_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG29_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG29_AUTHEN_CPULPM() volatile
    {
        LPCG29_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG29_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG29_AUTHEN_CPULPM() volatile
    {
        LPCG29_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG29_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG29_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG29_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG29_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG29_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG29_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG29_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG29_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG29_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG29_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG29_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG29_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG29_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG29_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG29_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG29_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG29_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG29_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG29_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG29_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG29_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG29_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG29_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG29_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG29_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG29_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG29_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG29_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG29_AUTHEN_LOCK_LIST() volatile
    {
        LPCG29_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG29_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG29_AUTHEN_LOCK_LIST() volatile
    {
        LPCG29_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG29_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG29_AUTHEN_LOCK_LIST() volatile
    {
        LPCG29_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG29_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG29_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG29_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG29_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG29_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG29_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG29_AUTHEN = curr;
    }

    /**
     * Get LPCG29_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG29_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG29_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG29_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG29_AUTHEN_LOCK_TZ() volatile
    {
        LPCG29_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG29_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG29_AUTHEN_LOCK_TZ() volatile
    {
        LPCG29_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG29_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG29_AUTHEN_LOCK_TZ() volatile
    {
        LPCG29_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG29_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG29_AUTHEN_TZ_NS() volatile
    {
        return LPCG29_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG29_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG29_AUTHEN_TZ_NS() volatile
    {
        LPCG29_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG29_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG29_AUTHEN_TZ_NS() volatile
    {
        LPCG29_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG29_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG29_AUTHEN_TZ_NS() volatile
    {
        LPCG29_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG29_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG29_AUTHEN_TZ_USER() volatile
    {
        return LPCG29_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG29_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG29_AUTHEN_TZ_USER() volatile
    {
        LPCG29_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG29_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG29_AUTHEN_TZ_USER() volatile
    {
        LPCG29_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG29_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG29_AUTHEN_TZ_USER() volatile
    {
        LPCG29_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG29_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG29_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG29_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG29_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG29_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG29_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG29_AUTHEN = curr;
    }

    /**
     * Get LPCG30_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG30_DIRECT_ON() volatile
    {
        return LPCG30_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG30_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG30_DIRECT_ON() volatile
    {
        LPCG30_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG30_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG30_DIRECT_ON() volatile
    {
        LPCG30_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG30_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG30_DIRECT_ON() volatile
    {
        LPCG30_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG30_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG30_DOMAIN_LEVEL3 get_LPCG30_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG30_DOMAIN_LEVEL3((LPCG30_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG30_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG30_DOMAIN_LEVEL3(
        CCM_LPCG30_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG30_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG30_DOMAIN = curr;
    }

    /**
     * Get LPCG30_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG30_DOMAIN_LEVEL2 get_LPCG30_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG30_DOMAIN_LEVEL2((LPCG30_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG30_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG30_DOMAIN_LEVEL2(
        CCM_LPCG30_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG30_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG30_DOMAIN = curr;
    }

    /**
     * Get LPCG30_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG30_DOMAIN_LEVEL1 get_LPCG30_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG30_DOMAIN_LEVEL1((LPCG30_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG30_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG30_DOMAIN_LEVEL1(
        CCM_LPCG30_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG30_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG30_DOMAIN = curr;
    }

    /**
     * Get LPCG30_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG30_DOMAIN_LEVEL0 get_LPCG30_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG30_DOMAIN_LEVEL0((LPCG30_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG30_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG30_DOMAIN_LEVEL0(
        CCM_LPCG30_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG30_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG30_DOMAIN = curr;
    }

    /**
     * Get LPCG30_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG30_DOMAIN_LEVEL get_LPCG30_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG30_DOMAIN_LEVEL((LPCG30_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG30_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG30_DOMAIN_LEVEL(CCM_LPCG30_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG30_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG30_DOMAIN = curr;
    }

    /**
     * Get all of LPCG30_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG30_DOMAIN(CCM_LPCG30_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG30_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG30_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG30_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG30_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG30_DOMAIN;

        LEVEL3 = CCM_LPCG30_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG30_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG30_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG30_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG30_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG30_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG30_DOMAIN(CCM_LPCG30_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG30_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG30_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG30_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG30_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG30_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG30_DOMAIN = curr;
    }

    /**
     * Get LPCG30_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG30_SETPOINT_STANDBY() volatile
    {
        return (LPCG30_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG30_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG30_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG30_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG30_SETPOINT = curr;
    }

    /**
     * Get LPCG30_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG30_SETPOINT_SETPOINT() volatile
    {
        return (LPCG30_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG30_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG30_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG30_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG30_SETPOINT = curr;
    }

    /**
     * Get all of LPCG30_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG30_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG30_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG30_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG30_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG30_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG30_SETPOINT = curr;
    }

    /**
     * Get LPCG30_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG30_STATUS0_DOMAIN_ENABLE
    get_LPCG30_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG30_STATUS0_DOMAIN_ENABLE((LPCG30_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG30_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG30_STATUS0_ACTIVE_DOMAIN
    get_LPCG30_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG30_STATUS0_ACTIVE_DOMAIN((LPCG30_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG30_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG30_STATUS0_ON() volatile
    {
        return LPCG30_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG30_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG30_STATUS0(
        CCM_LPCG30_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG30_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG30_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG30_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG30_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG30_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG30_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG30_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG30_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG30_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG30_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG30_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG30_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG30_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG30_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG30_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG30_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG30_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG30_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG30_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG30_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG30_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG30_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG30_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG30_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG30_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG30_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG30_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG30_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG30_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG30_STATUS1_CPU3_MODE get_LPCG30_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG30_STATUS1_CPU3_MODE((LPCG30_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG30_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG30_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG30_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG30_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG30_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG30_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG30_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG30_STATUS1_CPU2_MODE get_LPCG30_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG30_STATUS1_CPU2_MODE((LPCG30_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG30_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG30_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG30_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG30_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG30_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG30_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG30_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG30_STATUS1_CPU1_MODE get_LPCG30_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG30_STATUS1_CPU1_MODE((LPCG30_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG30_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG30_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG30_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG30_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG30_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG30_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG30_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG30_STATUS1_CPU0_MODE get_LPCG30_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG30_STATUS1_CPU0_MODE((LPCG30_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG30_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG30_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG30_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG30_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG30_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG30_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG30_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG30_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG30_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG30_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG30_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG30_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG30_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG30_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG30_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG30_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG30_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG30_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG30_AUTHEN_LOCK_MODE() volatile
    {
        LPCG30_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG30_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG30_AUTHEN_LOCK_MODE() volatile
    {
        LPCG30_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG30_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG30_AUTHEN_LOCK_MODE() volatile
    {
        LPCG30_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG30_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG30_AUTHEN_CPULPM() volatile
    {
        return LPCG30_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG30_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG30_AUTHEN_CPULPM() volatile
    {
        LPCG30_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG30_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG30_AUTHEN_CPULPM() volatile
    {
        LPCG30_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG30_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG30_AUTHEN_CPULPM() volatile
    {
        LPCG30_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG30_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG30_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG30_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG30_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG30_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG30_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG30_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG30_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG30_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG30_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG30_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG30_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG30_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG30_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG30_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG30_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG30_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG30_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG30_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG30_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG30_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG30_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG30_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG30_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG30_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG30_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG30_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG30_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG30_AUTHEN_LOCK_LIST() volatile
    {
        LPCG30_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG30_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG30_AUTHEN_LOCK_LIST() volatile
    {
        LPCG30_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG30_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG30_AUTHEN_LOCK_LIST() volatile
    {
        LPCG30_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG30_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG30_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG30_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG30_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG30_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG30_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG30_AUTHEN = curr;
    }

    /**
     * Get LPCG30_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG30_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG30_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG30_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG30_AUTHEN_LOCK_TZ() volatile
    {
        LPCG30_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG30_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG30_AUTHEN_LOCK_TZ() volatile
    {
        LPCG30_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG30_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG30_AUTHEN_LOCK_TZ() volatile
    {
        LPCG30_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG30_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG30_AUTHEN_TZ_NS() volatile
    {
        return LPCG30_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG30_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG30_AUTHEN_TZ_NS() volatile
    {
        LPCG30_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG30_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG30_AUTHEN_TZ_NS() volatile
    {
        LPCG30_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG30_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG30_AUTHEN_TZ_NS() volatile
    {
        LPCG30_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG30_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG30_AUTHEN_TZ_USER() volatile
    {
        return LPCG30_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG30_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG30_AUTHEN_TZ_USER() volatile
    {
        LPCG30_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG30_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG30_AUTHEN_TZ_USER() volatile
    {
        LPCG30_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG30_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG30_AUTHEN_TZ_USER() volatile
    {
        LPCG30_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG30_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG30_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG30_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG30_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG30_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG30_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG30_AUTHEN = curr;
    }

    /**
     * Get LPCG31_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG31_DIRECT_ON() volatile
    {
        return LPCG31_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG31_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG31_DIRECT_ON() volatile
    {
        LPCG31_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG31_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG31_DIRECT_ON() volatile
    {
        LPCG31_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG31_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG31_DIRECT_ON() volatile
    {
        LPCG31_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG31_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG31_DOMAIN_LEVEL3 get_LPCG31_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG31_DOMAIN_LEVEL3((LPCG31_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG31_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG31_DOMAIN_LEVEL3(
        CCM_LPCG31_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG31_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG31_DOMAIN = curr;
    }

    /**
     * Get LPCG31_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG31_DOMAIN_LEVEL2 get_LPCG31_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG31_DOMAIN_LEVEL2((LPCG31_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG31_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG31_DOMAIN_LEVEL2(
        CCM_LPCG31_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG31_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG31_DOMAIN = curr;
    }

    /**
     * Get LPCG31_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG31_DOMAIN_LEVEL1 get_LPCG31_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG31_DOMAIN_LEVEL1((LPCG31_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG31_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG31_DOMAIN_LEVEL1(
        CCM_LPCG31_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG31_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG31_DOMAIN = curr;
    }

    /**
     * Get LPCG31_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG31_DOMAIN_LEVEL0 get_LPCG31_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG31_DOMAIN_LEVEL0((LPCG31_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG31_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG31_DOMAIN_LEVEL0(
        CCM_LPCG31_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG31_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG31_DOMAIN = curr;
    }

    /**
     * Get LPCG31_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG31_DOMAIN_LEVEL get_LPCG31_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG31_DOMAIN_LEVEL((LPCG31_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG31_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG31_DOMAIN_LEVEL(CCM_LPCG31_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG31_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG31_DOMAIN = curr;
    }

    /**
     * Get all of LPCG31_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG31_DOMAIN(CCM_LPCG31_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG31_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG31_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG31_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG31_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG31_DOMAIN;

        LEVEL3 = CCM_LPCG31_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG31_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG31_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG31_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG31_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG31_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG31_DOMAIN(CCM_LPCG31_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG31_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG31_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG31_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG31_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG31_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG31_DOMAIN = curr;
    }

    /**
     * Get LPCG31_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG31_SETPOINT_STANDBY() volatile
    {
        return (LPCG31_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG31_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG31_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG31_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG31_SETPOINT = curr;
    }

    /**
     * Get LPCG31_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG31_SETPOINT_SETPOINT() volatile
    {
        return (LPCG31_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG31_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG31_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG31_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG31_SETPOINT = curr;
    }

    /**
     * Get all of LPCG31_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG31_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG31_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG31_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG31_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG31_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG31_SETPOINT = curr;
    }

    /**
     * Get LPCG31_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG31_STATUS0_DOMAIN_ENABLE
    get_LPCG31_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG31_STATUS0_DOMAIN_ENABLE((LPCG31_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG31_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG31_STATUS0_ACTIVE_DOMAIN
    get_LPCG31_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG31_STATUS0_ACTIVE_DOMAIN((LPCG31_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG31_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG31_STATUS0_ON() volatile
    {
        return LPCG31_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG31_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG31_STATUS0(
        CCM_LPCG31_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG31_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG31_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG31_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG31_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG31_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG31_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG31_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG31_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG31_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG31_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG31_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG31_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG31_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG31_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG31_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG31_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG31_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG31_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG31_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG31_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG31_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG31_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG31_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG31_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG31_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG31_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG31_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG31_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG31_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG31_STATUS1_CPU3_MODE get_LPCG31_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG31_STATUS1_CPU3_MODE((LPCG31_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG31_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG31_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG31_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG31_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG31_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG31_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG31_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG31_STATUS1_CPU2_MODE get_LPCG31_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG31_STATUS1_CPU2_MODE((LPCG31_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG31_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG31_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG31_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG31_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG31_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG31_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG31_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG31_STATUS1_CPU1_MODE get_LPCG31_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG31_STATUS1_CPU1_MODE((LPCG31_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG31_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG31_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG31_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG31_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG31_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG31_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG31_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG31_STATUS1_CPU0_MODE get_LPCG31_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG31_STATUS1_CPU0_MODE((LPCG31_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG31_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG31_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG31_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG31_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG31_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG31_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG31_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG31_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG31_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG31_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG31_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG31_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG31_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG31_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG31_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG31_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG31_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG31_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG31_AUTHEN_LOCK_MODE() volatile
    {
        LPCG31_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG31_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG31_AUTHEN_LOCK_MODE() volatile
    {
        LPCG31_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG31_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG31_AUTHEN_LOCK_MODE() volatile
    {
        LPCG31_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG31_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG31_AUTHEN_CPULPM() volatile
    {
        return LPCG31_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG31_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG31_AUTHEN_CPULPM() volatile
    {
        LPCG31_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG31_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG31_AUTHEN_CPULPM() volatile
    {
        LPCG31_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG31_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG31_AUTHEN_CPULPM() volatile
    {
        LPCG31_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG31_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG31_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG31_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG31_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG31_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG31_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG31_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG31_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG31_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG31_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG31_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG31_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG31_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG31_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG31_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG31_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG31_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG31_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG31_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG31_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG31_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG31_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG31_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG31_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG31_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG31_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG31_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG31_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG31_AUTHEN_LOCK_LIST() volatile
    {
        LPCG31_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG31_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG31_AUTHEN_LOCK_LIST() volatile
    {
        LPCG31_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG31_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG31_AUTHEN_LOCK_LIST() volatile
    {
        LPCG31_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG31_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG31_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG31_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG31_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG31_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG31_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG31_AUTHEN = curr;
    }

    /**
     * Get LPCG31_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG31_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG31_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG31_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG31_AUTHEN_LOCK_TZ() volatile
    {
        LPCG31_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG31_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG31_AUTHEN_LOCK_TZ() volatile
    {
        LPCG31_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG31_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG31_AUTHEN_LOCK_TZ() volatile
    {
        LPCG31_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG31_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG31_AUTHEN_TZ_NS() volatile
    {
        return LPCG31_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG31_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG31_AUTHEN_TZ_NS() volatile
    {
        LPCG31_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG31_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG31_AUTHEN_TZ_NS() volatile
    {
        LPCG31_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG31_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG31_AUTHEN_TZ_NS() volatile
    {
        LPCG31_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG31_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG31_AUTHEN_TZ_USER() volatile
    {
        return LPCG31_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG31_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG31_AUTHEN_TZ_USER() volatile
    {
        LPCG31_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG31_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG31_AUTHEN_TZ_USER() volatile
    {
        LPCG31_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG31_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG31_AUTHEN_TZ_USER() volatile
    {
        LPCG31_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG31_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG31_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG31_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG31_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG31_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG31_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG31_AUTHEN = curr;
    }

    /**
     * Get LPCG32_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG32_DIRECT_ON() volatile
    {
        return LPCG32_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG32_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG32_DIRECT_ON() volatile
    {
        LPCG32_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG32_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG32_DIRECT_ON() volatile
    {
        LPCG32_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG32_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG32_DIRECT_ON() volatile
    {
        LPCG32_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG32_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG32_DOMAIN_LEVEL3 get_LPCG32_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG32_DOMAIN_LEVEL3((LPCG32_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG32_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG32_DOMAIN_LEVEL3(
        CCM_LPCG32_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG32_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG32_DOMAIN = curr;
    }

    /**
     * Get LPCG32_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG32_DOMAIN_LEVEL2 get_LPCG32_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG32_DOMAIN_LEVEL2((LPCG32_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG32_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG32_DOMAIN_LEVEL2(
        CCM_LPCG32_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG32_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG32_DOMAIN = curr;
    }

    /**
     * Get LPCG32_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG32_DOMAIN_LEVEL1 get_LPCG32_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG32_DOMAIN_LEVEL1((LPCG32_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG32_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG32_DOMAIN_LEVEL1(
        CCM_LPCG32_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG32_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG32_DOMAIN = curr;
    }

    /**
     * Get LPCG32_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG32_DOMAIN_LEVEL0 get_LPCG32_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG32_DOMAIN_LEVEL0((LPCG32_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG32_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG32_DOMAIN_LEVEL0(
        CCM_LPCG32_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG32_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG32_DOMAIN = curr;
    }

    /**
     * Get LPCG32_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG32_DOMAIN_LEVEL get_LPCG32_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG32_DOMAIN_LEVEL((LPCG32_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG32_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG32_DOMAIN_LEVEL(CCM_LPCG32_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG32_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG32_DOMAIN = curr;
    }

    /**
     * Get all of LPCG32_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG32_DOMAIN(CCM_LPCG32_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG32_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG32_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG32_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG32_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG32_DOMAIN;

        LEVEL3 = CCM_LPCG32_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG32_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG32_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG32_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG32_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG32_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG32_DOMAIN(CCM_LPCG32_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG32_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG32_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG32_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG32_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG32_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG32_DOMAIN = curr;
    }

    /**
     * Get LPCG32_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG32_SETPOINT_STANDBY() volatile
    {
        return (LPCG32_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG32_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG32_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG32_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG32_SETPOINT = curr;
    }

    /**
     * Get LPCG32_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG32_SETPOINT_SETPOINT() volatile
    {
        return (LPCG32_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG32_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG32_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG32_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG32_SETPOINT = curr;
    }

    /**
     * Get all of LPCG32_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG32_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG32_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG32_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG32_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG32_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG32_SETPOINT = curr;
    }

    /**
     * Get LPCG32_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG32_STATUS0_DOMAIN_ENABLE
    get_LPCG32_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG32_STATUS0_DOMAIN_ENABLE((LPCG32_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG32_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG32_STATUS0_ACTIVE_DOMAIN
    get_LPCG32_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG32_STATUS0_ACTIVE_DOMAIN((LPCG32_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG32_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG32_STATUS0_ON() volatile
    {
        return LPCG32_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG32_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG32_STATUS0(
        CCM_LPCG32_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG32_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG32_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG32_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG32_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG32_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG32_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG32_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG32_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG32_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG32_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG32_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG32_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG32_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG32_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG32_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG32_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG32_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG32_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG32_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG32_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG32_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG32_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG32_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG32_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG32_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG32_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG32_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG32_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG32_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG32_STATUS1_CPU3_MODE get_LPCG32_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG32_STATUS1_CPU3_MODE((LPCG32_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG32_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG32_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG32_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG32_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG32_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG32_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG32_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG32_STATUS1_CPU2_MODE get_LPCG32_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG32_STATUS1_CPU2_MODE((LPCG32_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG32_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG32_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG32_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG32_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG32_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG32_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG32_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG32_STATUS1_CPU1_MODE get_LPCG32_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG32_STATUS1_CPU1_MODE((LPCG32_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG32_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG32_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG32_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG32_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG32_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG32_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG32_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG32_STATUS1_CPU0_MODE get_LPCG32_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG32_STATUS1_CPU0_MODE((LPCG32_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG32_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG32_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG32_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG32_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG32_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG32_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG32_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG32_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG32_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG32_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG32_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG32_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG32_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG32_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG32_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG32_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG32_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG32_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG32_AUTHEN_LOCK_MODE() volatile
    {
        LPCG32_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG32_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG32_AUTHEN_LOCK_MODE() volatile
    {
        LPCG32_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG32_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG32_AUTHEN_LOCK_MODE() volatile
    {
        LPCG32_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG32_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG32_AUTHEN_CPULPM() volatile
    {
        return LPCG32_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG32_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG32_AUTHEN_CPULPM() volatile
    {
        LPCG32_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG32_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG32_AUTHEN_CPULPM() volatile
    {
        LPCG32_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG32_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG32_AUTHEN_CPULPM() volatile
    {
        LPCG32_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG32_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG32_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG32_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG32_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG32_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG32_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG32_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG32_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG32_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG32_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG32_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG32_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG32_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG32_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG32_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG32_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG32_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG32_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG32_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG32_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG32_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG32_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG32_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG32_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG32_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG32_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG32_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG32_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG32_AUTHEN_LOCK_LIST() volatile
    {
        LPCG32_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG32_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG32_AUTHEN_LOCK_LIST() volatile
    {
        LPCG32_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG32_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG32_AUTHEN_LOCK_LIST() volatile
    {
        LPCG32_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG32_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG32_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG32_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG32_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG32_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG32_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG32_AUTHEN = curr;
    }

    /**
     * Get LPCG32_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG32_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG32_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG32_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG32_AUTHEN_LOCK_TZ() volatile
    {
        LPCG32_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG32_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG32_AUTHEN_LOCK_TZ() volatile
    {
        LPCG32_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG32_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG32_AUTHEN_LOCK_TZ() volatile
    {
        LPCG32_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG32_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG32_AUTHEN_TZ_NS() volatile
    {
        return LPCG32_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG32_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG32_AUTHEN_TZ_NS() volatile
    {
        LPCG32_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG32_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG32_AUTHEN_TZ_NS() volatile
    {
        LPCG32_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG32_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG32_AUTHEN_TZ_NS() volatile
    {
        LPCG32_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG32_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG32_AUTHEN_TZ_USER() volatile
    {
        return LPCG32_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG32_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG32_AUTHEN_TZ_USER() volatile
    {
        LPCG32_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG32_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG32_AUTHEN_TZ_USER() volatile
    {
        LPCG32_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG32_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG32_AUTHEN_TZ_USER() volatile
    {
        LPCG32_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG32_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG32_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG32_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG32_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG32_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG32_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG32_AUTHEN = curr;
    }

    /**
     * Get LPCG33_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG33_DIRECT_ON() volatile
    {
        return LPCG33_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG33_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG33_DIRECT_ON() volatile
    {
        LPCG33_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG33_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG33_DIRECT_ON() volatile
    {
        LPCG33_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG33_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG33_DIRECT_ON() volatile
    {
        LPCG33_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG33_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG33_DOMAIN_LEVEL3 get_LPCG33_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG33_DOMAIN_LEVEL3((LPCG33_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG33_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG33_DOMAIN_LEVEL3(
        CCM_LPCG33_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG33_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG33_DOMAIN = curr;
    }

    /**
     * Get LPCG33_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG33_DOMAIN_LEVEL2 get_LPCG33_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG33_DOMAIN_LEVEL2((LPCG33_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG33_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG33_DOMAIN_LEVEL2(
        CCM_LPCG33_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG33_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG33_DOMAIN = curr;
    }

    /**
     * Get LPCG33_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG33_DOMAIN_LEVEL1 get_LPCG33_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG33_DOMAIN_LEVEL1((LPCG33_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG33_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG33_DOMAIN_LEVEL1(
        CCM_LPCG33_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG33_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG33_DOMAIN = curr;
    }

    /**
     * Get LPCG33_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG33_DOMAIN_LEVEL0 get_LPCG33_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG33_DOMAIN_LEVEL0((LPCG33_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG33_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG33_DOMAIN_LEVEL0(
        CCM_LPCG33_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG33_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG33_DOMAIN = curr;
    }

    /**
     * Get LPCG33_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG33_DOMAIN_LEVEL get_LPCG33_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG33_DOMAIN_LEVEL((LPCG33_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG33_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG33_DOMAIN_LEVEL(CCM_LPCG33_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG33_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG33_DOMAIN = curr;
    }

    /**
     * Get all of LPCG33_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG33_DOMAIN(CCM_LPCG33_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG33_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG33_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG33_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG33_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG33_DOMAIN;

        LEVEL3 = CCM_LPCG33_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG33_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG33_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG33_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG33_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG33_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG33_DOMAIN(CCM_LPCG33_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG33_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG33_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG33_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG33_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG33_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG33_DOMAIN = curr;
    }

    /**
     * Get LPCG33_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG33_SETPOINT_STANDBY() volatile
    {
        return (LPCG33_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG33_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG33_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG33_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG33_SETPOINT = curr;
    }

    /**
     * Get LPCG33_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG33_SETPOINT_SETPOINT() volatile
    {
        return (LPCG33_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG33_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG33_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG33_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG33_SETPOINT = curr;
    }

    /**
     * Get all of LPCG33_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG33_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG33_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG33_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG33_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG33_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG33_SETPOINT = curr;
    }

    /**
     * Get LPCG33_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG33_STATUS0_DOMAIN_ENABLE
    get_LPCG33_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG33_STATUS0_DOMAIN_ENABLE((LPCG33_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG33_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG33_STATUS0_ACTIVE_DOMAIN
    get_LPCG33_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG33_STATUS0_ACTIVE_DOMAIN((LPCG33_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG33_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG33_STATUS0_ON() volatile
    {
        return LPCG33_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG33_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG33_STATUS0(
        CCM_LPCG33_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG33_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG33_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG33_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG33_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG33_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG33_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG33_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG33_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG33_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG33_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG33_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG33_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG33_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG33_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG33_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG33_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG33_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG33_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG33_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG33_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG33_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG33_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG33_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG33_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG33_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG33_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG33_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG33_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG33_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG33_STATUS1_CPU3_MODE get_LPCG33_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG33_STATUS1_CPU3_MODE((LPCG33_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG33_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG33_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG33_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG33_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG33_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG33_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG33_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG33_STATUS1_CPU2_MODE get_LPCG33_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG33_STATUS1_CPU2_MODE((LPCG33_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG33_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG33_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG33_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG33_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG33_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG33_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG33_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG33_STATUS1_CPU1_MODE get_LPCG33_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG33_STATUS1_CPU1_MODE((LPCG33_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG33_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG33_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG33_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG33_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG33_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG33_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG33_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG33_STATUS1_CPU0_MODE get_LPCG33_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG33_STATUS1_CPU0_MODE((LPCG33_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG33_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG33_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG33_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG33_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG33_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG33_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG33_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG33_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG33_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG33_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG33_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG33_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG33_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG33_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG33_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG33_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG33_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG33_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG33_AUTHEN_LOCK_MODE() volatile
    {
        LPCG33_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG33_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG33_AUTHEN_LOCK_MODE() volatile
    {
        LPCG33_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG33_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG33_AUTHEN_LOCK_MODE() volatile
    {
        LPCG33_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG33_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG33_AUTHEN_CPULPM() volatile
    {
        return LPCG33_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG33_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG33_AUTHEN_CPULPM() volatile
    {
        LPCG33_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG33_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG33_AUTHEN_CPULPM() volatile
    {
        LPCG33_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG33_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG33_AUTHEN_CPULPM() volatile
    {
        LPCG33_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG33_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG33_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG33_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG33_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG33_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG33_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG33_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG33_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG33_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG33_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG33_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG33_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG33_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG33_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG33_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG33_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG33_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG33_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG33_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG33_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG33_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG33_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG33_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG33_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG33_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG33_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG33_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG33_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG33_AUTHEN_LOCK_LIST() volatile
    {
        LPCG33_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG33_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG33_AUTHEN_LOCK_LIST() volatile
    {
        LPCG33_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG33_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG33_AUTHEN_LOCK_LIST() volatile
    {
        LPCG33_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG33_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG33_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG33_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG33_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG33_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG33_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG33_AUTHEN = curr;
    }

    /**
     * Get LPCG33_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG33_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG33_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG33_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG33_AUTHEN_LOCK_TZ() volatile
    {
        LPCG33_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG33_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG33_AUTHEN_LOCK_TZ() volatile
    {
        LPCG33_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG33_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG33_AUTHEN_LOCK_TZ() volatile
    {
        LPCG33_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG33_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG33_AUTHEN_TZ_NS() volatile
    {
        return LPCG33_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG33_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG33_AUTHEN_TZ_NS() volatile
    {
        LPCG33_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG33_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG33_AUTHEN_TZ_NS() volatile
    {
        LPCG33_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG33_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG33_AUTHEN_TZ_NS() volatile
    {
        LPCG33_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG33_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG33_AUTHEN_TZ_USER() volatile
    {
        return LPCG33_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG33_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG33_AUTHEN_TZ_USER() volatile
    {
        LPCG33_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG33_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG33_AUTHEN_TZ_USER() volatile
    {
        LPCG33_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG33_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG33_AUTHEN_TZ_USER() volatile
    {
        LPCG33_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG33_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG33_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG33_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG33_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG33_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG33_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG33_AUTHEN = curr;
    }

    /**
     * Get LPCG34_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG34_DIRECT_ON() volatile
    {
        return LPCG34_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG34_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG34_DIRECT_ON() volatile
    {
        LPCG34_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG34_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG34_DIRECT_ON() volatile
    {
        LPCG34_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG34_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG34_DIRECT_ON() volatile
    {
        LPCG34_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG34_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG34_DOMAIN_LEVEL3 get_LPCG34_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG34_DOMAIN_LEVEL3((LPCG34_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG34_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG34_DOMAIN_LEVEL3(
        CCM_LPCG34_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG34_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG34_DOMAIN = curr;
    }

    /**
     * Get LPCG34_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG34_DOMAIN_LEVEL2 get_LPCG34_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG34_DOMAIN_LEVEL2((LPCG34_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG34_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG34_DOMAIN_LEVEL2(
        CCM_LPCG34_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG34_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG34_DOMAIN = curr;
    }

    /**
     * Get LPCG34_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG34_DOMAIN_LEVEL1 get_LPCG34_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG34_DOMAIN_LEVEL1((LPCG34_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG34_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG34_DOMAIN_LEVEL1(
        CCM_LPCG34_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG34_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG34_DOMAIN = curr;
    }

    /**
     * Get LPCG34_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG34_DOMAIN_LEVEL0 get_LPCG34_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG34_DOMAIN_LEVEL0((LPCG34_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG34_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG34_DOMAIN_LEVEL0(
        CCM_LPCG34_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG34_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG34_DOMAIN = curr;
    }

    /**
     * Get LPCG34_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG34_DOMAIN_LEVEL get_LPCG34_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG34_DOMAIN_LEVEL((LPCG34_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG34_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG34_DOMAIN_LEVEL(CCM_LPCG34_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG34_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG34_DOMAIN = curr;
    }

    /**
     * Get all of LPCG34_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG34_DOMAIN(CCM_LPCG34_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG34_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG34_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG34_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG34_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG34_DOMAIN;

        LEVEL3 = CCM_LPCG34_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG34_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG34_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG34_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG34_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG34_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG34_DOMAIN(CCM_LPCG34_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG34_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG34_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG34_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG34_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG34_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG34_DOMAIN = curr;
    }

    /**
     * Get LPCG34_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG34_SETPOINT_STANDBY() volatile
    {
        return (LPCG34_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG34_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG34_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG34_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG34_SETPOINT = curr;
    }

    /**
     * Get LPCG34_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG34_SETPOINT_SETPOINT() volatile
    {
        return (LPCG34_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG34_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG34_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG34_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG34_SETPOINT = curr;
    }

    /**
     * Get all of LPCG34_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG34_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG34_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG34_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG34_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG34_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG34_SETPOINT = curr;
    }

    /**
     * Get LPCG34_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG34_STATUS0_DOMAIN_ENABLE
    get_LPCG34_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG34_STATUS0_DOMAIN_ENABLE((LPCG34_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG34_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG34_STATUS0_ACTIVE_DOMAIN
    get_LPCG34_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG34_STATUS0_ACTIVE_DOMAIN((LPCG34_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG34_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG34_STATUS0_ON() volatile
    {
        return LPCG34_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG34_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG34_STATUS0(
        CCM_LPCG34_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG34_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG34_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG34_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG34_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG34_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG34_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG34_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG34_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG34_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG34_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG34_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG34_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG34_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG34_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG34_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG34_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG34_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG34_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG34_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG34_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG34_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG34_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG34_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG34_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG34_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG34_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG34_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG34_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG34_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG34_STATUS1_CPU3_MODE get_LPCG34_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG34_STATUS1_CPU3_MODE((LPCG34_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG34_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG34_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG34_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG34_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG34_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG34_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG34_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG34_STATUS1_CPU2_MODE get_LPCG34_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG34_STATUS1_CPU2_MODE((LPCG34_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG34_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG34_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG34_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG34_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG34_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG34_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG34_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG34_STATUS1_CPU1_MODE get_LPCG34_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG34_STATUS1_CPU1_MODE((LPCG34_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG34_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG34_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG34_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG34_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG34_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG34_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG34_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG34_STATUS1_CPU0_MODE get_LPCG34_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG34_STATUS1_CPU0_MODE((LPCG34_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG34_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG34_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG34_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG34_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG34_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG34_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG34_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG34_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG34_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG34_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG34_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG34_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG34_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG34_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG34_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG34_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG34_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG34_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG34_AUTHEN_LOCK_MODE() volatile
    {
        LPCG34_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG34_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG34_AUTHEN_LOCK_MODE() volatile
    {
        LPCG34_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG34_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG34_AUTHEN_LOCK_MODE() volatile
    {
        LPCG34_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG34_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG34_AUTHEN_CPULPM() volatile
    {
        return LPCG34_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG34_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG34_AUTHEN_CPULPM() volatile
    {
        LPCG34_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG34_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG34_AUTHEN_CPULPM() volatile
    {
        LPCG34_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG34_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG34_AUTHEN_CPULPM() volatile
    {
        LPCG34_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG34_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG34_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG34_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG34_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG34_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG34_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG34_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG34_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG34_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG34_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG34_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG34_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG34_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG34_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG34_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG34_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG34_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG34_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG34_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG34_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG34_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG34_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG34_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG34_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG34_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG34_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG34_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG34_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG34_AUTHEN_LOCK_LIST() volatile
    {
        LPCG34_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG34_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG34_AUTHEN_LOCK_LIST() volatile
    {
        LPCG34_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG34_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG34_AUTHEN_LOCK_LIST() volatile
    {
        LPCG34_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG34_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG34_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG34_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG34_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG34_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG34_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG34_AUTHEN = curr;
    }

    /**
     * Get LPCG34_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG34_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG34_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG34_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG34_AUTHEN_LOCK_TZ() volatile
    {
        LPCG34_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG34_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG34_AUTHEN_LOCK_TZ() volatile
    {
        LPCG34_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG34_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG34_AUTHEN_LOCK_TZ() volatile
    {
        LPCG34_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG34_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG34_AUTHEN_TZ_NS() volatile
    {
        return LPCG34_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG34_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG34_AUTHEN_TZ_NS() volatile
    {
        LPCG34_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG34_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG34_AUTHEN_TZ_NS() volatile
    {
        LPCG34_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG34_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG34_AUTHEN_TZ_NS() volatile
    {
        LPCG34_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG34_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG34_AUTHEN_TZ_USER() volatile
    {
        return LPCG34_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG34_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG34_AUTHEN_TZ_USER() volatile
    {
        LPCG34_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG34_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG34_AUTHEN_TZ_USER() volatile
    {
        LPCG34_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG34_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG34_AUTHEN_TZ_USER() volatile
    {
        LPCG34_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG34_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG34_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG34_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG34_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG34_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG34_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG34_AUTHEN = curr;
    }

    /**
     * Get LPCG35_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG35_DIRECT_ON() volatile
    {
        return LPCG35_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG35_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG35_DIRECT_ON() volatile
    {
        LPCG35_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG35_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG35_DIRECT_ON() volatile
    {
        LPCG35_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG35_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG35_DIRECT_ON() volatile
    {
        LPCG35_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG35_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG35_DOMAIN_LEVEL3 get_LPCG35_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG35_DOMAIN_LEVEL3((LPCG35_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG35_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG35_DOMAIN_LEVEL3(
        CCM_LPCG35_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG35_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG35_DOMAIN = curr;
    }

    /**
     * Get LPCG35_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG35_DOMAIN_LEVEL2 get_LPCG35_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG35_DOMAIN_LEVEL2((LPCG35_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG35_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG35_DOMAIN_LEVEL2(
        CCM_LPCG35_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG35_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG35_DOMAIN = curr;
    }

    /**
     * Get LPCG35_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG35_DOMAIN_LEVEL1 get_LPCG35_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG35_DOMAIN_LEVEL1((LPCG35_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG35_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG35_DOMAIN_LEVEL1(
        CCM_LPCG35_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG35_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG35_DOMAIN = curr;
    }

    /**
     * Get LPCG35_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG35_DOMAIN_LEVEL0 get_LPCG35_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG35_DOMAIN_LEVEL0((LPCG35_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG35_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG35_DOMAIN_LEVEL0(
        CCM_LPCG35_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG35_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG35_DOMAIN = curr;
    }

    /**
     * Get LPCG35_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG35_DOMAIN_LEVEL get_LPCG35_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG35_DOMAIN_LEVEL((LPCG35_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG35_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG35_DOMAIN_LEVEL(CCM_LPCG35_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG35_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG35_DOMAIN = curr;
    }

    /**
     * Get all of LPCG35_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG35_DOMAIN(CCM_LPCG35_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG35_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG35_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG35_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG35_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG35_DOMAIN;

        LEVEL3 = CCM_LPCG35_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG35_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG35_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG35_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG35_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG35_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG35_DOMAIN(CCM_LPCG35_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG35_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG35_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG35_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG35_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG35_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG35_DOMAIN = curr;
    }

    /**
     * Get LPCG35_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG35_SETPOINT_STANDBY() volatile
    {
        return (LPCG35_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG35_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG35_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG35_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG35_SETPOINT = curr;
    }

    /**
     * Get LPCG35_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG35_SETPOINT_SETPOINT() volatile
    {
        return (LPCG35_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG35_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG35_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG35_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG35_SETPOINT = curr;
    }

    /**
     * Get all of LPCG35_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG35_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG35_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG35_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG35_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG35_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG35_SETPOINT = curr;
    }

    /**
     * Get LPCG35_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG35_STATUS0_DOMAIN_ENABLE
    get_LPCG35_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG35_STATUS0_DOMAIN_ENABLE((LPCG35_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG35_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG35_STATUS0_ACTIVE_DOMAIN
    get_LPCG35_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG35_STATUS0_ACTIVE_DOMAIN((LPCG35_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG35_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG35_STATUS0_ON() volatile
    {
        return LPCG35_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG35_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG35_STATUS0(
        CCM_LPCG35_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG35_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG35_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG35_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG35_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG35_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG35_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG35_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG35_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG35_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG35_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG35_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG35_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG35_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG35_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG35_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG35_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG35_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG35_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG35_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG35_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG35_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG35_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG35_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG35_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG35_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG35_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG35_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG35_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG35_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG35_STATUS1_CPU3_MODE get_LPCG35_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG35_STATUS1_CPU3_MODE((LPCG35_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG35_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG35_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG35_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG35_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG35_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG35_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG35_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG35_STATUS1_CPU2_MODE get_LPCG35_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG35_STATUS1_CPU2_MODE((LPCG35_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG35_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG35_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG35_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG35_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG35_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG35_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG35_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG35_STATUS1_CPU1_MODE get_LPCG35_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG35_STATUS1_CPU1_MODE((LPCG35_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG35_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG35_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG35_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG35_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG35_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG35_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG35_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG35_STATUS1_CPU0_MODE get_LPCG35_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG35_STATUS1_CPU0_MODE((LPCG35_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG35_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG35_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG35_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG35_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG35_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG35_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG35_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG35_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG35_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG35_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG35_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG35_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG35_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG35_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG35_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG35_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG35_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG35_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG35_AUTHEN_LOCK_MODE() volatile
    {
        LPCG35_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG35_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG35_AUTHEN_LOCK_MODE() volatile
    {
        LPCG35_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG35_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG35_AUTHEN_LOCK_MODE() volatile
    {
        LPCG35_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG35_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG35_AUTHEN_CPULPM() volatile
    {
        return LPCG35_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG35_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG35_AUTHEN_CPULPM() volatile
    {
        LPCG35_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG35_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG35_AUTHEN_CPULPM() volatile
    {
        LPCG35_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG35_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG35_AUTHEN_CPULPM() volatile
    {
        LPCG35_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG35_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG35_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG35_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG35_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG35_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG35_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG35_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG35_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG35_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG35_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG35_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG35_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG35_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG35_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG35_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG35_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG35_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG35_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG35_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG35_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG35_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG35_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG35_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG35_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG35_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG35_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG35_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG35_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG35_AUTHEN_LOCK_LIST() volatile
    {
        LPCG35_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG35_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG35_AUTHEN_LOCK_LIST() volatile
    {
        LPCG35_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG35_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG35_AUTHEN_LOCK_LIST() volatile
    {
        LPCG35_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG35_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG35_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG35_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG35_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG35_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG35_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG35_AUTHEN = curr;
    }

    /**
     * Get LPCG35_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG35_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG35_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG35_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG35_AUTHEN_LOCK_TZ() volatile
    {
        LPCG35_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG35_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG35_AUTHEN_LOCK_TZ() volatile
    {
        LPCG35_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG35_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG35_AUTHEN_LOCK_TZ() volatile
    {
        LPCG35_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG35_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG35_AUTHEN_TZ_NS() volatile
    {
        return LPCG35_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG35_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG35_AUTHEN_TZ_NS() volatile
    {
        LPCG35_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG35_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG35_AUTHEN_TZ_NS() volatile
    {
        LPCG35_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG35_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG35_AUTHEN_TZ_NS() volatile
    {
        LPCG35_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG35_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG35_AUTHEN_TZ_USER() volatile
    {
        return LPCG35_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG35_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG35_AUTHEN_TZ_USER() volatile
    {
        LPCG35_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG35_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG35_AUTHEN_TZ_USER() volatile
    {
        LPCG35_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG35_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG35_AUTHEN_TZ_USER() volatile
    {
        LPCG35_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG35_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG35_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG35_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG35_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG35_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG35_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG35_AUTHEN = curr;
    }

    /**
     * Get LPCG36_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG36_DIRECT_ON() volatile
    {
        return LPCG36_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG36_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG36_DIRECT_ON() volatile
    {
        LPCG36_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG36_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG36_DIRECT_ON() volatile
    {
        LPCG36_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG36_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG36_DIRECT_ON() volatile
    {
        LPCG36_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG36_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG36_DOMAIN_LEVEL3 get_LPCG36_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG36_DOMAIN_LEVEL3((LPCG36_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG36_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG36_DOMAIN_LEVEL3(
        CCM_LPCG36_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG36_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG36_DOMAIN = curr;
    }

    /**
     * Get LPCG36_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG36_DOMAIN_LEVEL2 get_LPCG36_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG36_DOMAIN_LEVEL2((LPCG36_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG36_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG36_DOMAIN_LEVEL2(
        CCM_LPCG36_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG36_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG36_DOMAIN = curr;
    }

    /**
     * Get LPCG36_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG36_DOMAIN_LEVEL1 get_LPCG36_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG36_DOMAIN_LEVEL1((LPCG36_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG36_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG36_DOMAIN_LEVEL1(
        CCM_LPCG36_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG36_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG36_DOMAIN = curr;
    }

    /**
     * Get LPCG36_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG36_DOMAIN_LEVEL0 get_LPCG36_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG36_DOMAIN_LEVEL0((LPCG36_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG36_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG36_DOMAIN_LEVEL0(
        CCM_LPCG36_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG36_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG36_DOMAIN = curr;
    }

    /**
     * Get LPCG36_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG36_DOMAIN_LEVEL get_LPCG36_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG36_DOMAIN_LEVEL((LPCG36_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG36_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG36_DOMAIN_LEVEL(CCM_LPCG36_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG36_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG36_DOMAIN = curr;
    }

    /**
     * Get all of LPCG36_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG36_DOMAIN(CCM_LPCG36_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG36_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG36_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG36_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG36_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG36_DOMAIN;

        LEVEL3 = CCM_LPCG36_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG36_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG36_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG36_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG36_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG36_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG36_DOMAIN(CCM_LPCG36_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG36_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG36_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG36_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG36_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG36_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG36_DOMAIN = curr;
    }

    /**
     * Get LPCG36_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG36_SETPOINT_STANDBY() volatile
    {
        return (LPCG36_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG36_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG36_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG36_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG36_SETPOINT = curr;
    }

    /**
     * Get LPCG36_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG36_SETPOINT_SETPOINT() volatile
    {
        return (LPCG36_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG36_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG36_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG36_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG36_SETPOINT = curr;
    }

    /**
     * Get all of LPCG36_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG36_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG36_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG36_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG36_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG36_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG36_SETPOINT = curr;
    }

    /**
     * Get LPCG36_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG36_STATUS0_DOMAIN_ENABLE
    get_LPCG36_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG36_STATUS0_DOMAIN_ENABLE((LPCG36_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG36_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG36_STATUS0_ACTIVE_DOMAIN
    get_LPCG36_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG36_STATUS0_ACTIVE_DOMAIN((LPCG36_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG36_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG36_STATUS0_ON() volatile
    {
        return LPCG36_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG36_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG36_STATUS0(
        CCM_LPCG36_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG36_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG36_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG36_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG36_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG36_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG36_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG36_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG36_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG36_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG36_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG36_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG36_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG36_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG36_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG36_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG36_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG36_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG36_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG36_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG36_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG36_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG36_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG36_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG36_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG36_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG36_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG36_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG36_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG36_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG36_STATUS1_CPU3_MODE get_LPCG36_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG36_STATUS1_CPU3_MODE((LPCG36_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG36_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG36_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG36_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG36_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG36_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG36_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG36_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG36_STATUS1_CPU2_MODE get_LPCG36_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG36_STATUS1_CPU2_MODE((LPCG36_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG36_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG36_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG36_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG36_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG36_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG36_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG36_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG36_STATUS1_CPU1_MODE get_LPCG36_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG36_STATUS1_CPU1_MODE((LPCG36_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG36_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG36_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG36_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG36_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG36_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG36_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG36_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG36_STATUS1_CPU0_MODE get_LPCG36_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG36_STATUS1_CPU0_MODE((LPCG36_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG36_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG36_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG36_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG36_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG36_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG36_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG36_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG36_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG36_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG36_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG36_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG36_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG36_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG36_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG36_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG36_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG36_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG36_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG36_AUTHEN_LOCK_MODE() volatile
    {
        LPCG36_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG36_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG36_AUTHEN_LOCK_MODE() volatile
    {
        LPCG36_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG36_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG36_AUTHEN_LOCK_MODE() volatile
    {
        LPCG36_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG36_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG36_AUTHEN_CPULPM() volatile
    {
        return LPCG36_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG36_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG36_AUTHEN_CPULPM() volatile
    {
        LPCG36_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG36_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG36_AUTHEN_CPULPM() volatile
    {
        LPCG36_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG36_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG36_AUTHEN_CPULPM() volatile
    {
        LPCG36_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG36_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG36_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG36_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG36_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG36_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG36_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG36_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG36_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG36_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG36_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG36_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG36_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG36_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG36_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG36_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG36_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG36_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG36_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG36_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG36_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG36_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG36_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG36_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG36_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG36_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG36_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG36_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG36_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG36_AUTHEN_LOCK_LIST() volatile
    {
        LPCG36_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG36_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG36_AUTHEN_LOCK_LIST() volatile
    {
        LPCG36_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG36_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG36_AUTHEN_LOCK_LIST() volatile
    {
        LPCG36_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG36_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG36_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG36_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG36_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG36_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG36_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG36_AUTHEN = curr;
    }

    /**
     * Get LPCG36_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG36_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG36_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG36_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG36_AUTHEN_LOCK_TZ() volatile
    {
        LPCG36_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG36_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG36_AUTHEN_LOCK_TZ() volatile
    {
        LPCG36_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG36_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG36_AUTHEN_LOCK_TZ() volatile
    {
        LPCG36_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG36_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG36_AUTHEN_TZ_NS() volatile
    {
        return LPCG36_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG36_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG36_AUTHEN_TZ_NS() volatile
    {
        LPCG36_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG36_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG36_AUTHEN_TZ_NS() volatile
    {
        LPCG36_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG36_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG36_AUTHEN_TZ_NS() volatile
    {
        LPCG36_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG36_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG36_AUTHEN_TZ_USER() volatile
    {
        return LPCG36_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG36_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG36_AUTHEN_TZ_USER() volatile
    {
        LPCG36_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG36_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG36_AUTHEN_TZ_USER() volatile
    {
        LPCG36_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG36_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG36_AUTHEN_TZ_USER() volatile
    {
        LPCG36_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG36_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG36_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG36_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG36_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG36_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG36_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG36_AUTHEN = curr;
    }

    /**
     * Get LPCG37_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG37_DIRECT_ON() volatile
    {
        return LPCG37_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG37_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG37_DIRECT_ON() volatile
    {
        LPCG37_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG37_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG37_DIRECT_ON() volatile
    {
        LPCG37_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG37_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG37_DIRECT_ON() volatile
    {
        LPCG37_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG37_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG37_DOMAIN_LEVEL3 get_LPCG37_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG37_DOMAIN_LEVEL3((LPCG37_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG37_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG37_DOMAIN_LEVEL3(
        CCM_LPCG37_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG37_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG37_DOMAIN = curr;
    }

    /**
     * Get LPCG37_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG37_DOMAIN_LEVEL2 get_LPCG37_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG37_DOMAIN_LEVEL2((LPCG37_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG37_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG37_DOMAIN_LEVEL2(
        CCM_LPCG37_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG37_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG37_DOMAIN = curr;
    }

    /**
     * Get LPCG37_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG37_DOMAIN_LEVEL1 get_LPCG37_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG37_DOMAIN_LEVEL1((LPCG37_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG37_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG37_DOMAIN_LEVEL1(
        CCM_LPCG37_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG37_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG37_DOMAIN = curr;
    }

    /**
     * Get LPCG37_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG37_DOMAIN_LEVEL0 get_LPCG37_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG37_DOMAIN_LEVEL0((LPCG37_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG37_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG37_DOMAIN_LEVEL0(
        CCM_LPCG37_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG37_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG37_DOMAIN = curr;
    }

    /**
     * Get LPCG37_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG37_DOMAIN_LEVEL get_LPCG37_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG37_DOMAIN_LEVEL((LPCG37_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG37_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG37_DOMAIN_LEVEL(CCM_LPCG37_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG37_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG37_DOMAIN = curr;
    }

    /**
     * Get all of LPCG37_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG37_DOMAIN(CCM_LPCG37_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG37_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG37_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG37_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG37_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG37_DOMAIN;

        LEVEL3 = CCM_LPCG37_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG37_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG37_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG37_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG37_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG37_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG37_DOMAIN(CCM_LPCG37_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG37_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG37_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG37_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG37_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG37_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG37_DOMAIN = curr;
    }

    /**
     * Get LPCG37_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG37_SETPOINT_STANDBY() volatile
    {
        return (LPCG37_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG37_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG37_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG37_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG37_SETPOINT = curr;
    }

    /**
     * Get LPCG37_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG37_SETPOINT_SETPOINT() volatile
    {
        return (LPCG37_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG37_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG37_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG37_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG37_SETPOINT = curr;
    }

    /**
     * Get all of LPCG37_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG37_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG37_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG37_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG37_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG37_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG37_SETPOINT = curr;
    }

    /**
     * Get LPCG37_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG37_STATUS0_DOMAIN_ENABLE
    get_LPCG37_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG37_STATUS0_DOMAIN_ENABLE((LPCG37_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG37_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG37_STATUS0_ACTIVE_DOMAIN
    get_LPCG37_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG37_STATUS0_ACTIVE_DOMAIN((LPCG37_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG37_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG37_STATUS0_ON() volatile
    {
        return LPCG37_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG37_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG37_STATUS0(
        CCM_LPCG37_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG37_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG37_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG37_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG37_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG37_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG37_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG37_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG37_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG37_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG37_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG37_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG37_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG37_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG37_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG37_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG37_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG37_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG37_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG37_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG37_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG37_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG37_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG37_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG37_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG37_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG37_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG37_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG37_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG37_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG37_STATUS1_CPU3_MODE get_LPCG37_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG37_STATUS1_CPU3_MODE((LPCG37_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG37_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG37_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG37_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG37_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG37_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG37_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG37_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG37_STATUS1_CPU2_MODE get_LPCG37_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG37_STATUS1_CPU2_MODE((LPCG37_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG37_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG37_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG37_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG37_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG37_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG37_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG37_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG37_STATUS1_CPU1_MODE get_LPCG37_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG37_STATUS1_CPU1_MODE((LPCG37_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG37_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG37_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG37_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG37_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG37_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG37_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG37_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG37_STATUS1_CPU0_MODE get_LPCG37_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG37_STATUS1_CPU0_MODE((LPCG37_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG37_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG37_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG37_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG37_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG37_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG37_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG37_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG37_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG37_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG37_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG37_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG37_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG37_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG37_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG37_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG37_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG37_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG37_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG37_AUTHEN_LOCK_MODE() volatile
    {
        LPCG37_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG37_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG37_AUTHEN_LOCK_MODE() volatile
    {
        LPCG37_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG37_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG37_AUTHEN_LOCK_MODE() volatile
    {
        LPCG37_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG37_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG37_AUTHEN_CPULPM() volatile
    {
        return LPCG37_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG37_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG37_AUTHEN_CPULPM() volatile
    {
        LPCG37_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG37_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG37_AUTHEN_CPULPM() volatile
    {
        LPCG37_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG37_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG37_AUTHEN_CPULPM() volatile
    {
        LPCG37_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG37_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG37_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG37_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG37_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG37_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG37_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG37_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG37_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG37_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG37_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG37_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG37_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG37_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG37_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG37_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG37_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG37_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG37_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG37_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG37_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG37_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG37_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG37_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG37_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG37_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG37_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG37_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG37_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG37_AUTHEN_LOCK_LIST() volatile
    {
        LPCG37_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG37_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG37_AUTHEN_LOCK_LIST() volatile
    {
        LPCG37_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG37_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG37_AUTHEN_LOCK_LIST() volatile
    {
        LPCG37_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG37_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG37_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG37_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG37_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG37_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG37_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG37_AUTHEN = curr;
    }

    /**
     * Get LPCG37_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG37_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG37_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG37_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG37_AUTHEN_LOCK_TZ() volatile
    {
        LPCG37_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG37_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG37_AUTHEN_LOCK_TZ() volatile
    {
        LPCG37_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG37_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG37_AUTHEN_LOCK_TZ() volatile
    {
        LPCG37_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG37_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG37_AUTHEN_TZ_NS() volatile
    {
        return LPCG37_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG37_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG37_AUTHEN_TZ_NS() volatile
    {
        LPCG37_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG37_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG37_AUTHEN_TZ_NS() volatile
    {
        LPCG37_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG37_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG37_AUTHEN_TZ_NS() volatile
    {
        LPCG37_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG37_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG37_AUTHEN_TZ_USER() volatile
    {
        return LPCG37_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG37_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG37_AUTHEN_TZ_USER() volatile
    {
        LPCG37_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG37_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG37_AUTHEN_TZ_USER() volatile
    {
        LPCG37_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG37_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG37_AUTHEN_TZ_USER() volatile
    {
        LPCG37_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG37_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG37_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG37_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG37_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG37_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG37_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG37_AUTHEN = curr;
    }

    /**
     * Get LPCG38_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG38_DIRECT_ON() volatile
    {
        return LPCG38_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG38_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG38_DIRECT_ON() volatile
    {
        LPCG38_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG38_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG38_DIRECT_ON() volatile
    {
        LPCG38_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG38_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG38_DIRECT_ON() volatile
    {
        LPCG38_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG38_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG38_DOMAIN_LEVEL3 get_LPCG38_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG38_DOMAIN_LEVEL3((LPCG38_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG38_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG38_DOMAIN_LEVEL3(
        CCM_LPCG38_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG38_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG38_DOMAIN = curr;
    }

    /**
     * Get LPCG38_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG38_DOMAIN_LEVEL2 get_LPCG38_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG38_DOMAIN_LEVEL2((LPCG38_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG38_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG38_DOMAIN_LEVEL2(
        CCM_LPCG38_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG38_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG38_DOMAIN = curr;
    }

    /**
     * Get LPCG38_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG38_DOMAIN_LEVEL1 get_LPCG38_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG38_DOMAIN_LEVEL1((LPCG38_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG38_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG38_DOMAIN_LEVEL1(
        CCM_LPCG38_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG38_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG38_DOMAIN = curr;
    }

    /**
     * Get LPCG38_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG38_DOMAIN_LEVEL0 get_LPCG38_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG38_DOMAIN_LEVEL0((LPCG38_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG38_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG38_DOMAIN_LEVEL0(
        CCM_LPCG38_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG38_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG38_DOMAIN = curr;
    }

    /**
     * Get LPCG38_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG38_DOMAIN_LEVEL get_LPCG38_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG38_DOMAIN_LEVEL((LPCG38_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG38_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG38_DOMAIN_LEVEL(CCM_LPCG38_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG38_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG38_DOMAIN = curr;
    }

    /**
     * Get all of LPCG38_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG38_DOMAIN(CCM_LPCG38_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG38_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG38_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG38_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG38_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG38_DOMAIN;

        LEVEL3 = CCM_LPCG38_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG38_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG38_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG38_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG38_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG38_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG38_DOMAIN(CCM_LPCG38_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG38_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG38_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG38_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG38_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG38_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG38_DOMAIN = curr;
    }

    /**
     * Get LPCG38_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG38_SETPOINT_STANDBY() volatile
    {
        return (LPCG38_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG38_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG38_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG38_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG38_SETPOINT = curr;
    }

    /**
     * Get LPCG38_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG38_SETPOINT_SETPOINT() volatile
    {
        return (LPCG38_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG38_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG38_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG38_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG38_SETPOINT = curr;
    }

    /**
     * Get all of LPCG38_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG38_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG38_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG38_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG38_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG38_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG38_SETPOINT = curr;
    }

    /**
     * Get LPCG38_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG38_STATUS0_DOMAIN_ENABLE
    get_LPCG38_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG38_STATUS0_DOMAIN_ENABLE((LPCG38_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG38_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG38_STATUS0_ACTIVE_DOMAIN
    get_LPCG38_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG38_STATUS0_ACTIVE_DOMAIN((LPCG38_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG38_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG38_STATUS0_ON() volatile
    {
        return LPCG38_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG38_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG38_STATUS0(
        CCM_LPCG38_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG38_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG38_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG38_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG38_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG38_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG38_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG38_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG38_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG38_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG38_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG38_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG38_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG38_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG38_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG38_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG38_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG38_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG38_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG38_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG38_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG38_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG38_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG38_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG38_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG38_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG38_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG38_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG38_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG38_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG38_STATUS1_CPU3_MODE get_LPCG38_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG38_STATUS1_CPU3_MODE((LPCG38_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG38_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG38_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG38_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG38_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG38_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG38_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG38_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG38_STATUS1_CPU2_MODE get_LPCG38_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG38_STATUS1_CPU2_MODE((LPCG38_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG38_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG38_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG38_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG38_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG38_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG38_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG38_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG38_STATUS1_CPU1_MODE get_LPCG38_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG38_STATUS1_CPU1_MODE((LPCG38_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG38_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG38_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG38_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG38_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG38_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG38_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG38_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG38_STATUS1_CPU0_MODE get_LPCG38_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG38_STATUS1_CPU0_MODE((LPCG38_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG38_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG38_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG38_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG38_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG38_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG38_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG38_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG38_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG38_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG38_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG38_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG38_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG38_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG38_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG38_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG38_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG38_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG38_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG38_AUTHEN_LOCK_MODE() volatile
    {
        LPCG38_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG38_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG38_AUTHEN_LOCK_MODE() volatile
    {
        LPCG38_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG38_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG38_AUTHEN_LOCK_MODE() volatile
    {
        LPCG38_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG38_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG38_AUTHEN_CPULPM() volatile
    {
        return LPCG38_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG38_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG38_AUTHEN_CPULPM() volatile
    {
        LPCG38_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG38_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG38_AUTHEN_CPULPM() volatile
    {
        LPCG38_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG38_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG38_AUTHEN_CPULPM() volatile
    {
        LPCG38_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG38_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG38_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG38_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG38_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG38_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG38_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG38_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG38_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG38_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG38_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG38_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG38_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG38_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG38_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG38_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG38_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG38_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG38_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG38_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG38_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG38_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG38_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG38_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG38_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG38_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG38_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG38_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG38_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG38_AUTHEN_LOCK_LIST() volatile
    {
        LPCG38_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG38_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG38_AUTHEN_LOCK_LIST() volatile
    {
        LPCG38_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG38_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG38_AUTHEN_LOCK_LIST() volatile
    {
        LPCG38_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG38_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG38_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG38_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG38_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG38_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG38_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG38_AUTHEN = curr;
    }

    /**
     * Get LPCG38_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG38_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG38_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG38_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG38_AUTHEN_LOCK_TZ() volatile
    {
        LPCG38_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG38_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG38_AUTHEN_LOCK_TZ() volatile
    {
        LPCG38_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG38_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG38_AUTHEN_LOCK_TZ() volatile
    {
        LPCG38_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG38_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG38_AUTHEN_TZ_NS() volatile
    {
        return LPCG38_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG38_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG38_AUTHEN_TZ_NS() volatile
    {
        LPCG38_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG38_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG38_AUTHEN_TZ_NS() volatile
    {
        LPCG38_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG38_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG38_AUTHEN_TZ_NS() volatile
    {
        LPCG38_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG38_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG38_AUTHEN_TZ_USER() volatile
    {
        return LPCG38_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG38_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG38_AUTHEN_TZ_USER() volatile
    {
        LPCG38_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG38_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG38_AUTHEN_TZ_USER() volatile
    {
        LPCG38_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG38_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG38_AUTHEN_TZ_USER() volatile
    {
        LPCG38_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG38_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG38_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG38_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG38_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG38_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG38_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG38_AUTHEN = curr;
    }

    /**
     * Get LPCG39_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG39_DIRECT_ON() volatile
    {
        return LPCG39_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG39_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG39_DIRECT_ON() volatile
    {
        LPCG39_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG39_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG39_DIRECT_ON() volatile
    {
        LPCG39_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG39_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG39_DIRECT_ON() volatile
    {
        LPCG39_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG39_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG39_DOMAIN_LEVEL3 get_LPCG39_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG39_DOMAIN_LEVEL3((LPCG39_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG39_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG39_DOMAIN_LEVEL3(
        CCM_LPCG39_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG39_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG39_DOMAIN = curr;
    }

    /**
     * Get LPCG39_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG39_DOMAIN_LEVEL2 get_LPCG39_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG39_DOMAIN_LEVEL2((LPCG39_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG39_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG39_DOMAIN_LEVEL2(
        CCM_LPCG39_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG39_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG39_DOMAIN = curr;
    }

    /**
     * Get LPCG39_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG39_DOMAIN_LEVEL1 get_LPCG39_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG39_DOMAIN_LEVEL1((LPCG39_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG39_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG39_DOMAIN_LEVEL1(
        CCM_LPCG39_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG39_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG39_DOMAIN = curr;
    }

    /**
     * Get LPCG39_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG39_DOMAIN_LEVEL0 get_LPCG39_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG39_DOMAIN_LEVEL0((LPCG39_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG39_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG39_DOMAIN_LEVEL0(
        CCM_LPCG39_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG39_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG39_DOMAIN = curr;
    }

    /**
     * Get LPCG39_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG39_DOMAIN_LEVEL get_LPCG39_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG39_DOMAIN_LEVEL((LPCG39_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG39_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG39_DOMAIN_LEVEL(CCM_LPCG39_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG39_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG39_DOMAIN = curr;
    }

    /**
     * Get all of LPCG39_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG39_DOMAIN(CCM_LPCG39_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG39_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG39_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG39_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG39_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG39_DOMAIN;

        LEVEL3 = CCM_LPCG39_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG39_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG39_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG39_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG39_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG39_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG39_DOMAIN(CCM_LPCG39_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG39_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG39_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG39_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG39_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG39_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG39_DOMAIN = curr;
    }

    /**
     * Get LPCG39_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG39_SETPOINT_STANDBY() volatile
    {
        return (LPCG39_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG39_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG39_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG39_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG39_SETPOINT = curr;
    }

    /**
     * Get LPCG39_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG39_SETPOINT_SETPOINT() volatile
    {
        return (LPCG39_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG39_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG39_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG39_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG39_SETPOINT = curr;
    }

    /**
     * Get all of LPCG39_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG39_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG39_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG39_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG39_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG39_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG39_SETPOINT = curr;
    }

    /**
     * Get LPCG39_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG39_STATUS0_DOMAIN_ENABLE
    get_LPCG39_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG39_STATUS0_DOMAIN_ENABLE((LPCG39_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG39_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG39_STATUS0_ACTIVE_DOMAIN
    get_LPCG39_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG39_STATUS0_ACTIVE_DOMAIN((LPCG39_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG39_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG39_STATUS0_ON() volatile
    {
        return LPCG39_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG39_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG39_STATUS0(
        CCM_LPCG39_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG39_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG39_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG39_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG39_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG39_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG39_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG39_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG39_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG39_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG39_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG39_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG39_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG39_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG39_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG39_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG39_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG39_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG39_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG39_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG39_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG39_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG39_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG39_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG39_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG39_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG39_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG39_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG39_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG39_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG39_STATUS1_CPU3_MODE get_LPCG39_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG39_STATUS1_CPU3_MODE((LPCG39_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG39_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG39_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG39_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG39_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG39_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG39_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG39_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG39_STATUS1_CPU2_MODE get_LPCG39_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG39_STATUS1_CPU2_MODE((LPCG39_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG39_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG39_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG39_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG39_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG39_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG39_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG39_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG39_STATUS1_CPU1_MODE get_LPCG39_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG39_STATUS1_CPU1_MODE((LPCG39_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG39_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG39_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG39_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG39_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG39_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG39_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG39_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG39_STATUS1_CPU0_MODE get_LPCG39_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG39_STATUS1_CPU0_MODE((LPCG39_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG39_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG39_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG39_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG39_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG39_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG39_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG39_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG39_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG39_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG39_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG39_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG39_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG39_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG39_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG39_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG39_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG39_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG39_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG39_AUTHEN_LOCK_MODE() volatile
    {
        LPCG39_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG39_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG39_AUTHEN_LOCK_MODE() volatile
    {
        LPCG39_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG39_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG39_AUTHEN_LOCK_MODE() volatile
    {
        LPCG39_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG39_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG39_AUTHEN_CPULPM() volatile
    {
        return LPCG39_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG39_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG39_AUTHEN_CPULPM() volatile
    {
        LPCG39_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG39_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG39_AUTHEN_CPULPM() volatile
    {
        LPCG39_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG39_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG39_AUTHEN_CPULPM() volatile
    {
        LPCG39_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG39_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG39_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG39_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG39_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG39_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG39_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG39_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG39_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG39_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG39_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG39_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG39_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG39_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG39_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG39_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG39_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG39_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG39_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG39_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG39_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG39_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG39_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG39_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG39_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG39_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG39_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG39_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG39_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG39_AUTHEN_LOCK_LIST() volatile
    {
        LPCG39_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG39_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG39_AUTHEN_LOCK_LIST() volatile
    {
        LPCG39_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG39_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG39_AUTHEN_LOCK_LIST() volatile
    {
        LPCG39_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG39_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG39_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG39_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG39_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG39_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG39_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG39_AUTHEN = curr;
    }

    /**
     * Get LPCG39_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG39_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG39_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG39_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG39_AUTHEN_LOCK_TZ() volatile
    {
        LPCG39_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG39_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG39_AUTHEN_LOCK_TZ() volatile
    {
        LPCG39_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG39_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG39_AUTHEN_LOCK_TZ() volatile
    {
        LPCG39_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG39_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG39_AUTHEN_TZ_NS() volatile
    {
        return LPCG39_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG39_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG39_AUTHEN_TZ_NS() volatile
    {
        LPCG39_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG39_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG39_AUTHEN_TZ_NS() volatile
    {
        LPCG39_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG39_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG39_AUTHEN_TZ_NS() volatile
    {
        LPCG39_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG39_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG39_AUTHEN_TZ_USER() volatile
    {
        return LPCG39_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG39_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG39_AUTHEN_TZ_USER() volatile
    {
        LPCG39_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG39_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG39_AUTHEN_TZ_USER() volatile
    {
        LPCG39_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG39_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG39_AUTHEN_TZ_USER() volatile
    {
        LPCG39_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG39_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG39_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG39_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG39_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG39_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG39_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG39_AUTHEN = curr;
    }

    /**
     * Get LPCG40_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG40_DIRECT_ON() volatile
    {
        return LPCG40_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG40_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG40_DIRECT_ON() volatile
    {
        LPCG40_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG40_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG40_DIRECT_ON() volatile
    {
        LPCG40_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG40_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG40_DIRECT_ON() volatile
    {
        LPCG40_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG40_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG40_DOMAIN_LEVEL3 get_LPCG40_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG40_DOMAIN_LEVEL3((LPCG40_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG40_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG40_DOMAIN_LEVEL3(
        CCM_LPCG40_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG40_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG40_DOMAIN = curr;
    }

    /**
     * Get LPCG40_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG40_DOMAIN_LEVEL2 get_LPCG40_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG40_DOMAIN_LEVEL2((LPCG40_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG40_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG40_DOMAIN_LEVEL2(
        CCM_LPCG40_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG40_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG40_DOMAIN = curr;
    }

    /**
     * Get LPCG40_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG40_DOMAIN_LEVEL1 get_LPCG40_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG40_DOMAIN_LEVEL1((LPCG40_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG40_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG40_DOMAIN_LEVEL1(
        CCM_LPCG40_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG40_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG40_DOMAIN = curr;
    }

    /**
     * Get LPCG40_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG40_DOMAIN_LEVEL0 get_LPCG40_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG40_DOMAIN_LEVEL0((LPCG40_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG40_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG40_DOMAIN_LEVEL0(
        CCM_LPCG40_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG40_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG40_DOMAIN = curr;
    }

    /**
     * Get LPCG40_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG40_DOMAIN_LEVEL get_LPCG40_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG40_DOMAIN_LEVEL((LPCG40_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG40_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG40_DOMAIN_LEVEL(CCM_LPCG40_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG40_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG40_DOMAIN = curr;
    }

    /**
     * Get all of LPCG40_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG40_DOMAIN(CCM_LPCG40_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG40_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG40_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG40_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG40_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG40_DOMAIN;

        LEVEL3 = CCM_LPCG40_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG40_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG40_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG40_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG40_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG40_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG40_DOMAIN(CCM_LPCG40_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG40_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG40_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG40_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG40_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG40_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG40_DOMAIN = curr;
    }

    /**
     * Get LPCG40_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG40_SETPOINT_STANDBY() volatile
    {
        return (LPCG40_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG40_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG40_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG40_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG40_SETPOINT = curr;
    }

    /**
     * Get LPCG40_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG40_SETPOINT_SETPOINT() volatile
    {
        return (LPCG40_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG40_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG40_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG40_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG40_SETPOINT = curr;
    }

    /**
     * Get all of LPCG40_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG40_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG40_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG40_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG40_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG40_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG40_SETPOINT = curr;
    }

    /**
     * Get LPCG40_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG40_STATUS0_DOMAIN_ENABLE
    get_LPCG40_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG40_STATUS0_DOMAIN_ENABLE((LPCG40_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG40_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG40_STATUS0_ACTIVE_DOMAIN
    get_LPCG40_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG40_STATUS0_ACTIVE_DOMAIN((LPCG40_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG40_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG40_STATUS0_ON() volatile
    {
        return LPCG40_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG40_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG40_STATUS0(
        CCM_LPCG40_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG40_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG40_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG40_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG40_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG40_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG40_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG40_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG40_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG40_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG40_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG40_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG40_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG40_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG40_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG40_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG40_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG40_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG40_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG40_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG40_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG40_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG40_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG40_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG40_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG40_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG40_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG40_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG40_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG40_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG40_STATUS1_CPU3_MODE get_LPCG40_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG40_STATUS1_CPU3_MODE((LPCG40_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG40_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG40_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG40_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG40_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG40_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG40_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG40_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG40_STATUS1_CPU2_MODE get_LPCG40_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG40_STATUS1_CPU2_MODE((LPCG40_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG40_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG40_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG40_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG40_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG40_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG40_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG40_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG40_STATUS1_CPU1_MODE get_LPCG40_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG40_STATUS1_CPU1_MODE((LPCG40_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG40_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG40_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG40_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG40_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG40_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG40_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG40_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG40_STATUS1_CPU0_MODE get_LPCG40_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG40_STATUS1_CPU0_MODE((LPCG40_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG40_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG40_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG40_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG40_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG40_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG40_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG40_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG40_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG40_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG40_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG40_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG40_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG40_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG40_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG40_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG40_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG40_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG40_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG40_AUTHEN_LOCK_MODE() volatile
    {
        LPCG40_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG40_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG40_AUTHEN_LOCK_MODE() volatile
    {
        LPCG40_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG40_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG40_AUTHEN_LOCK_MODE() volatile
    {
        LPCG40_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG40_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG40_AUTHEN_CPULPM() volatile
    {
        return LPCG40_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG40_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG40_AUTHEN_CPULPM() volatile
    {
        LPCG40_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG40_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG40_AUTHEN_CPULPM() volatile
    {
        LPCG40_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG40_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG40_AUTHEN_CPULPM() volatile
    {
        LPCG40_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG40_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG40_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG40_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG40_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG40_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG40_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG40_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG40_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG40_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG40_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG40_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG40_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG40_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG40_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG40_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG40_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG40_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG40_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG40_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG40_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG40_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG40_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG40_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG40_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG40_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG40_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG40_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG40_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG40_AUTHEN_LOCK_LIST() volatile
    {
        LPCG40_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG40_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG40_AUTHEN_LOCK_LIST() volatile
    {
        LPCG40_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG40_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG40_AUTHEN_LOCK_LIST() volatile
    {
        LPCG40_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG40_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG40_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG40_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG40_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG40_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG40_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG40_AUTHEN = curr;
    }

    /**
     * Get LPCG40_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG40_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG40_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG40_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG40_AUTHEN_LOCK_TZ() volatile
    {
        LPCG40_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG40_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG40_AUTHEN_LOCK_TZ() volatile
    {
        LPCG40_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG40_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG40_AUTHEN_LOCK_TZ() volatile
    {
        LPCG40_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG40_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG40_AUTHEN_TZ_NS() volatile
    {
        return LPCG40_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG40_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG40_AUTHEN_TZ_NS() volatile
    {
        LPCG40_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG40_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG40_AUTHEN_TZ_NS() volatile
    {
        LPCG40_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG40_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG40_AUTHEN_TZ_NS() volatile
    {
        LPCG40_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG40_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG40_AUTHEN_TZ_USER() volatile
    {
        return LPCG40_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG40_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG40_AUTHEN_TZ_USER() volatile
    {
        LPCG40_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG40_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG40_AUTHEN_TZ_USER() volatile
    {
        LPCG40_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG40_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG40_AUTHEN_TZ_USER() volatile
    {
        LPCG40_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG40_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG40_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG40_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG40_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG40_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG40_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG40_AUTHEN = curr;
    }

    /**
     * Get LPCG41_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG41_DIRECT_ON() volatile
    {
        return LPCG41_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG41_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG41_DIRECT_ON() volatile
    {
        LPCG41_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG41_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG41_DIRECT_ON() volatile
    {
        LPCG41_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG41_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG41_DIRECT_ON() volatile
    {
        LPCG41_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG41_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG41_DOMAIN_LEVEL3 get_LPCG41_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG41_DOMAIN_LEVEL3((LPCG41_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG41_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG41_DOMAIN_LEVEL3(
        CCM_LPCG41_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG41_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG41_DOMAIN = curr;
    }

    /**
     * Get LPCG41_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG41_DOMAIN_LEVEL2 get_LPCG41_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG41_DOMAIN_LEVEL2((LPCG41_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG41_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG41_DOMAIN_LEVEL2(
        CCM_LPCG41_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG41_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG41_DOMAIN = curr;
    }

    /**
     * Get LPCG41_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG41_DOMAIN_LEVEL1 get_LPCG41_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG41_DOMAIN_LEVEL1((LPCG41_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG41_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG41_DOMAIN_LEVEL1(
        CCM_LPCG41_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG41_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG41_DOMAIN = curr;
    }

    /**
     * Get LPCG41_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG41_DOMAIN_LEVEL0 get_LPCG41_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG41_DOMAIN_LEVEL0((LPCG41_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG41_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG41_DOMAIN_LEVEL0(
        CCM_LPCG41_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG41_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG41_DOMAIN = curr;
    }

    /**
     * Get LPCG41_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG41_DOMAIN_LEVEL get_LPCG41_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG41_DOMAIN_LEVEL((LPCG41_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG41_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG41_DOMAIN_LEVEL(CCM_LPCG41_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG41_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG41_DOMAIN = curr;
    }

    /**
     * Get all of LPCG41_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG41_DOMAIN(CCM_LPCG41_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG41_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG41_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG41_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG41_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG41_DOMAIN;

        LEVEL3 = CCM_LPCG41_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG41_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG41_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG41_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG41_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG41_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG41_DOMAIN(CCM_LPCG41_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG41_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG41_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG41_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG41_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG41_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG41_DOMAIN = curr;
    }

    /**
     * Get LPCG41_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG41_STATUS0_DOMAIN_ENABLE
    get_LPCG41_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG41_STATUS0_DOMAIN_ENABLE((LPCG41_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG41_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG41_STATUS0_ACTIVE_DOMAIN
    get_LPCG41_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG41_STATUS0_ACTIVE_DOMAIN((LPCG41_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG41_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG41_STATUS0_ON() volatile
    {
        return LPCG41_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG41_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG41_STATUS0(
        CCM_LPCG41_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG41_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG41_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG41_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG41_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG41_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG41_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG41_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG41_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG41_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG41_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG41_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG41_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG41_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG41_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG41_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG41_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG41_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG41_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG41_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG41_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG41_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG41_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG41_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG41_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG41_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG41_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG41_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG41_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG41_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG41_STATUS1_CPU3_MODE get_LPCG41_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG41_STATUS1_CPU3_MODE((LPCG41_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG41_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG41_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG41_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG41_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG41_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG41_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG41_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG41_STATUS1_CPU2_MODE get_LPCG41_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG41_STATUS1_CPU2_MODE((LPCG41_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG41_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG41_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG41_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG41_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG41_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG41_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG41_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG41_STATUS1_CPU1_MODE get_LPCG41_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG41_STATUS1_CPU1_MODE((LPCG41_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG41_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG41_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG41_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG41_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG41_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG41_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG41_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG41_STATUS1_CPU0_MODE get_LPCG41_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG41_STATUS1_CPU0_MODE((LPCG41_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG41_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG41_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG41_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG41_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG41_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG41_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG41_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG41_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG41_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG41_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG41_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG41_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG41_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG41_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG41_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG41_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG41_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG41_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG41_AUTHEN_LOCK_MODE() volatile
    {
        LPCG41_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG41_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG41_AUTHEN_LOCK_MODE() volatile
    {
        LPCG41_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG41_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG41_AUTHEN_LOCK_MODE() volatile
    {
        LPCG41_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG41_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG41_AUTHEN_CPULPM() volatile
    {
        return LPCG41_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG41_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG41_AUTHEN_CPULPM() volatile
    {
        LPCG41_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG41_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG41_AUTHEN_CPULPM() volatile
    {
        LPCG41_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG41_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG41_AUTHEN_CPULPM() volatile
    {
        LPCG41_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG41_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG41_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG41_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG41_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG41_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG41_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG41_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG41_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG41_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG41_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG41_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG41_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG41_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG41_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG41_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG41_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG41_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG41_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG41_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG41_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG41_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG41_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG41_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG41_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG41_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG41_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG41_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG41_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG41_AUTHEN_LOCK_LIST() volatile
    {
        LPCG41_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG41_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG41_AUTHEN_LOCK_LIST() volatile
    {
        LPCG41_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG41_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG41_AUTHEN_LOCK_LIST() volatile
    {
        LPCG41_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG41_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG41_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG41_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG41_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG41_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG41_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG41_AUTHEN = curr;
    }

    /**
     * Get LPCG41_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG41_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG41_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG41_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG41_AUTHEN_LOCK_TZ() volatile
    {
        LPCG41_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG41_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG41_AUTHEN_LOCK_TZ() volatile
    {
        LPCG41_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG41_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG41_AUTHEN_LOCK_TZ() volatile
    {
        LPCG41_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG41_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG41_AUTHEN_TZ_NS() volatile
    {
        return LPCG41_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG41_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG41_AUTHEN_TZ_NS() volatile
    {
        LPCG41_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG41_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG41_AUTHEN_TZ_NS() volatile
    {
        LPCG41_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG41_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG41_AUTHEN_TZ_NS() volatile
    {
        LPCG41_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG41_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG41_AUTHEN_TZ_USER() volatile
    {
        return LPCG41_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG41_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG41_AUTHEN_TZ_USER() volatile
    {
        LPCG41_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG41_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG41_AUTHEN_TZ_USER() volatile
    {
        LPCG41_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG41_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG41_AUTHEN_TZ_USER() volatile
    {
        LPCG41_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG41_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG41_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG41_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG41_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG41_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG41_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG41_AUTHEN = curr;
    }

    /**
     * Get LPCG42_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG42_DIRECT_ON() volatile
    {
        return LPCG42_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG42_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG42_DIRECT_ON() volatile
    {
        LPCG42_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG42_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG42_DIRECT_ON() volatile
    {
        LPCG42_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG42_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG42_DIRECT_ON() volatile
    {
        LPCG42_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG42_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG42_DOMAIN_LEVEL3 get_LPCG42_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG42_DOMAIN_LEVEL3((LPCG42_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG42_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG42_DOMAIN_LEVEL3(
        CCM_LPCG42_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG42_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG42_DOMAIN = curr;
    }

    /**
     * Get LPCG42_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG42_DOMAIN_LEVEL2 get_LPCG42_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG42_DOMAIN_LEVEL2((LPCG42_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG42_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG42_DOMAIN_LEVEL2(
        CCM_LPCG42_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG42_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG42_DOMAIN = curr;
    }

    /**
     * Get LPCG42_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG42_DOMAIN_LEVEL1 get_LPCG42_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG42_DOMAIN_LEVEL1((LPCG42_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG42_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG42_DOMAIN_LEVEL1(
        CCM_LPCG42_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG42_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG42_DOMAIN = curr;
    }

    /**
     * Get LPCG42_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG42_DOMAIN_LEVEL0 get_LPCG42_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG42_DOMAIN_LEVEL0((LPCG42_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG42_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG42_DOMAIN_LEVEL0(
        CCM_LPCG42_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG42_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG42_DOMAIN = curr;
    }

    /**
     * Get LPCG42_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG42_DOMAIN_LEVEL get_LPCG42_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG42_DOMAIN_LEVEL((LPCG42_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG42_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG42_DOMAIN_LEVEL(CCM_LPCG42_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG42_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG42_DOMAIN = curr;
    }

    /**
     * Get all of LPCG42_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG42_DOMAIN(CCM_LPCG42_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG42_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG42_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG42_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG42_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG42_DOMAIN;

        LEVEL3 = CCM_LPCG42_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG42_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG42_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG42_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG42_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG42_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG42_DOMAIN(CCM_LPCG42_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG42_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG42_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG42_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG42_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG42_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG42_DOMAIN = curr;
    }

    /**
     * Get LPCG42_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG42_STATUS0_DOMAIN_ENABLE
    get_LPCG42_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG42_STATUS0_DOMAIN_ENABLE((LPCG42_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG42_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG42_STATUS0_ACTIVE_DOMAIN
    get_LPCG42_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG42_STATUS0_ACTIVE_DOMAIN((LPCG42_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG42_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG42_STATUS0_ON() volatile
    {
        return LPCG42_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG42_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG42_STATUS0(
        CCM_LPCG42_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG42_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG42_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG42_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG42_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG42_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG42_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG42_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG42_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG42_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG42_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG42_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG42_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG42_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG42_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG42_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG42_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG42_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG42_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG42_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG42_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG42_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG42_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG42_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG42_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG42_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG42_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG42_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG42_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG42_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG42_STATUS1_CPU3_MODE get_LPCG42_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG42_STATUS1_CPU3_MODE((LPCG42_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG42_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG42_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG42_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG42_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG42_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG42_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG42_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG42_STATUS1_CPU2_MODE get_LPCG42_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG42_STATUS1_CPU2_MODE((LPCG42_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG42_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG42_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG42_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG42_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG42_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG42_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG42_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG42_STATUS1_CPU1_MODE get_LPCG42_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG42_STATUS1_CPU1_MODE((LPCG42_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG42_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG42_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG42_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG42_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG42_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG42_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG42_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG42_STATUS1_CPU0_MODE get_LPCG42_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG42_STATUS1_CPU0_MODE((LPCG42_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG42_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG42_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG42_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG42_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG42_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG42_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG42_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG42_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG42_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG42_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG42_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG42_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG42_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG42_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG42_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG42_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG42_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG42_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG42_AUTHEN_LOCK_MODE() volatile
    {
        LPCG42_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG42_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG42_AUTHEN_LOCK_MODE() volatile
    {
        LPCG42_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG42_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG42_AUTHEN_LOCK_MODE() volatile
    {
        LPCG42_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG42_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG42_AUTHEN_CPULPM() volatile
    {
        return LPCG42_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG42_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG42_AUTHEN_CPULPM() volatile
    {
        LPCG42_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG42_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG42_AUTHEN_CPULPM() volatile
    {
        LPCG42_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG42_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG42_AUTHEN_CPULPM() volatile
    {
        LPCG42_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG42_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG42_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG42_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG42_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG42_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG42_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG42_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG42_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG42_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG42_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG42_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG42_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG42_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG42_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG42_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG42_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG42_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG42_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG42_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG42_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG42_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG42_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG42_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG42_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG42_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG42_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG42_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG42_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG42_AUTHEN_LOCK_LIST() volatile
    {
        LPCG42_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG42_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG42_AUTHEN_LOCK_LIST() volatile
    {
        LPCG42_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG42_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG42_AUTHEN_LOCK_LIST() volatile
    {
        LPCG42_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG42_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG42_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG42_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG42_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG42_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG42_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG42_AUTHEN = curr;
    }

    /**
     * Get LPCG42_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG42_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG42_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG42_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG42_AUTHEN_LOCK_TZ() volatile
    {
        LPCG42_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG42_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG42_AUTHEN_LOCK_TZ() volatile
    {
        LPCG42_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG42_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG42_AUTHEN_LOCK_TZ() volatile
    {
        LPCG42_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG42_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG42_AUTHEN_TZ_NS() volatile
    {
        return LPCG42_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG42_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG42_AUTHEN_TZ_NS() volatile
    {
        LPCG42_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG42_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG42_AUTHEN_TZ_NS() volatile
    {
        LPCG42_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG42_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG42_AUTHEN_TZ_NS() volatile
    {
        LPCG42_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG42_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG42_AUTHEN_TZ_USER() volatile
    {
        return LPCG42_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG42_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG42_AUTHEN_TZ_USER() volatile
    {
        LPCG42_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG42_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG42_AUTHEN_TZ_USER() volatile
    {
        LPCG42_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG42_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG42_AUTHEN_TZ_USER() volatile
    {
        LPCG42_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG42_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG42_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG42_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG42_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG42_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG42_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG42_AUTHEN = curr;
    }

    /**
     * Get LPCG43_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG43_DIRECT_ON() volatile
    {
        return LPCG43_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG43_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG43_DIRECT_ON() volatile
    {
        LPCG43_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG43_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG43_DIRECT_ON() volatile
    {
        LPCG43_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG43_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG43_DIRECT_ON() volatile
    {
        LPCG43_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG43_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG43_DOMAIN_LEVEL3 get_LPCG43_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG43_DOMAIN_LEVEL3((LPCG43_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG43_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG43_DOMAIN_LEVEL3(
        CCM_LPCG43_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG43_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG43_DOMAIN = curr;
    }

    /**
     * Get LPCG43_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG43_DOMAIN_LEVEL2 get_LPCG43_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG43_DOMAIN_LEVEL2((LPCG43_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG43_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG43_DOMAIN_LEVEL2(
        CCM_LPCG43_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG43_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG43_DOMAIN = curr;
    }

    /**
     * Get LPCG43_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG43_DOMAIN_LEVEL1 get_LPCG43_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG43_DOMAIN_LEVEL1((LPCG43_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG43_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG43_DOMAIN_LEVEL1(
        CCM_LPCG43_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG43_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG43_DOMAIN = curr;
    }

    /**
     * Get LPCG43_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG43_DOMAIN_LEVEL0 get_LPCG43_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG43_DOMAIN_LEVEL0((LPCG43_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG43_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG43_DOMAIN_LEVEL0(
        CCM_LPCG43_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG43_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG43_DOMAIN = curr;
    }

    /**
     * Get LPCG43_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG43_DOMAIN_LEVEL get_LPCG43_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG43_DOMAIN_LEVEL((LPCG43_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG43_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG43_DOMAIN_LEVEL(CCM_LPCG43_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG43_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG43_DOMAIN = curr;
    }

    /**
     * Get all of LPCG43_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG43_DOMAIN(CCM_LPCG43_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG43_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG43_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG43_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG43_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG43_DOMAIN;

        LEVEL3 = CCM_LPCG43_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG43_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG43_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG43_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG43_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG43_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG43_DOMAIN(CCM_LPCG43_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG43_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG43_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG43_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG43_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG43_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG43_DOMAIN = curr;
    }

    /**
     * Get LPCG43_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG43_SETPOINT_STANDBY() volatile
    {
        return (LPCG43_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG43_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG43_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG43_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG43_SETPOINT = curr;
    }

    /**
     * Get LPCG43_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG43_SETPOINT_SETPOINT() volatile
    {
        return (LPCG43_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG43_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG43_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG43_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG43_SETPOINT = curr;
    }

    /**
     * Get all of LPCG43_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG43_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG43_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG43_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG43_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG43_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG43_SETPOINT = curr;
    }

    /**
     * Get LPCG43_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG43_STATUS0_DOMAIN_ENABLE
    get_LPCG43_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG43_STATUS0_DOMAIN_ENABLE((LPCG43_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG43_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG43_STATUS0_ACTIVE_DOMAIN
    get_LPCG43_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG43_STATUS0_ACTIVE_DOMAIN((LPCG43_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG43_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG43_STATUS0_ON() volatile
    {
        return LPCG43_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG43_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG43_STATUS0(
        CCM_LPCG43_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG43_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG43_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG43_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG43_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG43_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG43_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG43_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG43_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG43_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG43_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG43_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG43_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG43_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG43_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG43_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG43_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG43_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG43_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG43_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG43_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG43_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG43_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG43_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG43_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG43_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG43_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG43_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG43_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG43_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG43_STATUS1_CPU3_MODE get_LPCG43_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG43_STATUS1_CPU3_MODE((LPCG43_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG43_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG43_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG43_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG43_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG43_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG43_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG43_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG43_STATUS1_CPU2_MODE get_LPCG43_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG43_STATUS1_CPU2_MODE((LPCG43_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG43_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG43_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG43_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG43_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG43_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG43_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG43_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG43_STATUS1_CPU1_MODE get_LPCG43_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG43_STATUS1_CPU1_MODE((LPCG43_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG43_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG43_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG43_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG43_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG43_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG43_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG43_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG43_STATUS1_CPU0_MODE get_LPCG43_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG43_STATUS1_CPU0_MODE((LPCG43_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG43_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG43_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG43_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG43_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG43_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG43_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG43_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG43_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG43_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG43_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG43_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG43_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG43_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG43_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG43_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG43_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG43_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG43_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG43_AUTHEN_LOCK_MODE() volatile
    {
        LPCG43_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG43_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG43_AUTHEN_LOCK_MODE() volatile
    {
        LPCG43_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG43_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG43_AUTHEN_LOCK_MODE() volatile
    {
        LPCG43_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG43_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG43_AUTHEN_CPULPM() volatile
    {
        return LPCG43_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG43_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG43_AUTHEN_CPULPM() volatile
    {
        LPCG43_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG43_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG43_AUTHEN_CPULPM() volatile
    {
        LPCG43_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG43_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG43_AUTHEN_CPULPM() volatile
    {
        LPCG43_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG43_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG43_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG43_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG43_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG43_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG43_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG43_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG43_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG43_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG43_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG43_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG43_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG43_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG43_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG43_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG43_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG43_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG43_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG43_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG43_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG43_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG43_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG43_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG43_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG43_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG43_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG43_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG43_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG43_AUTHEN_LOCK_LIST() volatile
    {
        LPCG43_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG43_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG43_AUTHEN_LOCK_LIST() volatile
    {
        LPCG43_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG43_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG43_AUTHEN_LOCK_LIST() volatile
    {
        LPCG43_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG43_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG43_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG43_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG43_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG43_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG43_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG43_AUTHEN = curr;
    }

    /**
     * Get LPCG43_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG43_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG43_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG43_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG43_AUTHEN_LOCK_TZ() volatile
    {
        LPCG43_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG43_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG43_AUTHEN_LOCK_TZ() volatile
    {
        LPCG43_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG43_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG43_AUTHEN_LOCK_TZ() volatile
    {
        LPCG43_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG43_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG43_AUTHEN_TZ_NS() volatile
    {
        return LPCG43_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG43_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG43_AUTHEN_TZ_NS() volatile
    {
        LPCG43_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG43_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG43_AUTHEN_TZ_NS() volatile
    {
        LPCG43_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG43_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG43_AUTHEN_TZ_NS() volatile
    {
        LPCG43_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG43_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG43_AUTHEN_TZ_USER() volatile
    {
        return LPCG43_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG43_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG43_AUTHEN_TZ_USER() volatile
    {
        LPCG43_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG43_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG43_AUTHEN_TZ_USER() volatile
    {
        LPCG43_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG43_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG43_AUTHEN_TZ_USER() volatile
    {
        LPCG43_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG43_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG43_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG43_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG43_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG43_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG43_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG43_AUTHEN = curr;
    }

    /**
     * Get LPCG44_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG44_DIRECT_ON() volatile
    {
        return LPCG44_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG44_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG44_DIRECT_ON() volatile
    {
        LPCG44_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG44_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG44_DIRECT_ON() volatile
    {
        LPCG44_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG44_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG44_DIRECT_ON() volatile
    {
        LPCG44_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG44_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG44_DOMAIN_LEVEL3 get_LPCG44_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG44_DOMAIN_LEVEL3((LPCG44_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG44_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG44_DOMAIN_LEVEL3(
        CCM_LPCG44_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG44_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG44_DOMAIN = curr;
    }

    /**
     * Get LPCG44_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG44_DOMAIN_LEVEL2 get_LPCG44_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG44_DOMAIN_LEVEL2((LPCG44_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG44_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG44_DOMAIN_LEVEL2(
        CCM_LPCG44_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG44_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG44_DOMAIN = curr;
    }

    /**
     * Get LPCG44_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG44_DOMAIN_LEVEL1 get_LPCG44_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG44_DOMAIN_LEVEL1((LPCG44_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG44_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG44_DOMAIN_LEVEL1(
        CCM_LPCG44_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG44_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG44_DOMAIN = curr;
    }

    /**
     * Get LPCG44_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG44_DOMAIN_LEVEL0 get_LPCG44_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG44_DOMAIN_LEVEL0((LPCG44_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG44_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG44_DOMAIN_LEVEL0(
        CCM_LPCG44_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG44_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG44_DOMAIN = curr;
    }

    /**
     * Get LPCG44_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG44_DOMAIN_LEVEL get_LPCG44_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG44_DOMAIN_LEVEL((LPCG44_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG44_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG44_DOMAIN_LEVEL(CCM_LPCG44_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG44_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG44_DOMAIN = curr;
    }

    /**
     * Get all of LPCG44_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG44_DOMAIN(CCM_LPCG44_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG44_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG44_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG44_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG44_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG44_DOMAIN;

        LEVEL3 = CCM_LPCG44_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG44_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG44_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG44_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG44_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG44_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG44_DOMAIN(CCM_LPCG44_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG44_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG44_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG44_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG44_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG44_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG44_DOMAIN = curr;
    }

    /**
     * Get LPCG44_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG44_SETPOINT_STANDBY() volatile
    {
        return (LPCG44_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG44_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG44_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG44_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG44_SETPOINT = curr;
    }

    /**
     * Get LPCG44_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG44_SETPOINT_SETPOINT() volatile
    {
        return (LPCG44_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG44_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG44_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG44_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG44_SETPOINT = curr;
    }

    /**
     * Get all of LPCG44_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG44_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG44_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG44_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG44_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG44_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG44_SETPOINT = curr;
    }

    /**
     * Get LPCG44_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG44_STATUS0_DOMAIN_ENABLE
    get_LPCG44_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG44_STATUS0_DOMAIN_ENABLE((LPCG44_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG44_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG44_STATUS0_ACTIVE_DOMAIN
    get_LPCG44_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG44_STATUS0_ACTIVE_DOMAIN((LPCG44_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG44_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG44_STATUS0_ON() volatile
    {
        return LPCG44_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG44_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG44_STATUS0(
        CCM_LPCG44_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG44_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG44_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG44_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG44_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG44_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG44_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG44_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG44_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG44_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG44_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG44_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG44_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG44_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG44_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG44_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG44_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG44_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG44_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG44_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG44_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG44_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG44_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG44_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG44_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG44_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG44_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG44_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG44_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG44_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG44_STATUS1_CPU3_MODE get_LPCG44_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG44_STATUS1_CPU3_MODE((LPCG44_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG44_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG44_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG44_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG44_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG44_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG44_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG44_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG44_STATUS1_CPU2_MODE get_LPCG44_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG44_STATUS1_CPU2_MODE((LPCG44_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG44_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG44_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG44_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG44_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG44_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG44_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG44_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG44_STATUS1_CPU1_MODE get_LPCG44_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG44_STATUS1_CPU1_MODE((LPCG44_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG44_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG44_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG44_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG44_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG44_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG44_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG44_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG44_STATUS1_CPU0_MODE get_LPCG44_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG44_STATUS1_CPU0_MODE((LPCG44_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG44_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG44_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG44_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG44_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG44_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG44_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG44_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG44_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG44_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG44_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG44_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG44_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG44_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG44_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG44_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG44_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG44_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG44_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG44_AUTHEN_LOCK_MODE() volatile
    {
        LPCG44_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG44_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG44_AUTHEN_LOCK_MODE() volatile
    {
        LPCG44_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG44_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG44_AUTHEN_LOCK_MODE() volatile
    {
        LPCG44_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG44_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG44_AUTHEN_CPULPM() volatile
    {
        return LPCG44_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG44_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG44_AUTHEN_CPULPM() volatile
    {
        LPCG44_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG44_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG44_AUTHEN_CPULPM() volatile
    {
        LPCG44_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG44_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG44_AUTHEN_CPULPM() volatile
    {
        LPCG44_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG44_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG44_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG44_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG44_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG44_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG44_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG44_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG44_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG44_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG44_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG44_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG44_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG44_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG44_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG44_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG44_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG44_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG44_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG44_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG44_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG44_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG44_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG44_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG44_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG44_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG44_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG44_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG44_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG44_AUTHEN_LOCK_LIST() volatile
    {
        LPCG44_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG44_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG44_AUTHEN_LOCK_LIST() volatile
    {
        LPCG44_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG44_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG44_AUTHEN_LOCK_LIST() volatile
    {
        LPCG44_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG44_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG44_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG44_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG44_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG44_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG44_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG44_AUTHEN = curr;
    }

    /**
     * Get LPCG44_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG44_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG44_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG44_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG44_AUTHEN_LOCK_TZ() volatile
    {
        LPCG44_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG44_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG44_AUTHEN_LOCK_TZ() volatile
    {
        LPCG44_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG44_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG44_AUTHEN_LOCK_TZ() volatile
    {
        LPCG44_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG44_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG44_AUTHEN_TZ_NS() volatile
    {
        return LPCG44_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG44_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG44_AUTHEN_TZ_NS() volatile
    {
        LPCG44_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG44_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG44_AUTHEN_TZ_NS() volatile
    {
        LPCG44_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG44_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG44_AUTHEN_TZ_NS() volatile
    {
        LPCG44_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG44_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG44_AUTHEN_TZ_USER() volatile
    {
        return LPCG44_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG44_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG44_AUTHEN_TZ_USER() volatile
    {
        LPCG44_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG44_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG44_AUTHEN_TZ_USER() volatile
    {
        LPCG44_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG44_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG44_AUTHEN_TZ_USER() volatile
    {
        LPCG44_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG44_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG44_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG44_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG44_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG44_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG44_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG44_AUTHEN = curr;
    }

    /**
     * Get LPCG45_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG45_DIRECT_ON() volatile
    {
        return LPCG45_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG45_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG45_DIRECT_ON() volatile
    {
        LPCG45_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG45_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG45_DIRECT_ON() volatile
    {
        LPCG45_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG45_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG45_DIRECT_ON() volatile
    {
        LPCG45_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG45_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG45_DOMAIN_LEVEL3 get_LPCG45_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG45_DOMAIN_LEVEL3((LPCG45_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG45_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG45_DOMAIN_LEVEL3(
        CCM_LPCG45_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG45_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG45_DOMAIN = curr;
    }

    /**
     * Get LPCG45_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG45_DOMAIN_LEVEL2 get_LPCG45_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG45_DOMAIN_LEVEL2((LPCG45_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG45_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG45_DOMAIN_LEVEL2(
        CCM_LPCG45_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG45_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG45_DOMAIN = curr;
    }

    /**
     * Get LPCG45_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG45_DOMAIN_LEVEL1 get_LPCG45_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG45_DOMAIN_LEVEL1((LPCG45_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG45_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG45_DOMAIN_LEVEL1(
        CCM_LPCG45_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG45_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG45_DOMAIN = curr;
    }

    /**
     * Get LPCG45_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG45_DOMAIN_LEVEL0 get_LPCG45_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG45_DOMAIN_LEVEL0((LPCG45_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG45_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG45_DOMAIN_LEVEL0(
        CCM_LPCG45_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG45_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG45_DOMAIN = curr;
    }

    /**
     * Get LPCG45_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG45_DOMAIN_LEVEL get_LPCG45_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG45_DOMAIN_LEVEL((LPCG45_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG45_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG45_DOMAIN_LEVEL(CCM_LPCG45_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG45_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG45_DOMAIN = curr;
    }

    /**
     * Get all of LPCG45_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG45_DOMAIN(CCM_LPCG45_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG45_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG45_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG45_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG45_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG45_DOMAIN;

        LEVEL3 = CCM_LPCG45_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG45_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG45_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG45_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG45_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG45_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG45_DOMAIN(CCM_LPCG45_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG45_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG45_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG45_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG45_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG45_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG45_DOMAIN = curr;
    }

    /**
     * Get LPCG45_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG45_SETPOINT_STANDBY() volatile
    {
        return (LPCG45_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG45_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG45_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG45_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG45_SETPOINT = curr;
    }

    /**
     * Get LPCG45_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG45_SETPOINT_SETPOINT() volatile
    {
        return (LPCG45_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG45_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG45_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG45_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG45_SETPOINT = curr;
    }

    /**
     * Get all of LPCG45_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG45_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG45_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG45_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG45_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG45_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG45_SETPOINT = curr;
    }

    /**
     * Get LPCG45_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG45_STATUS0_DOMAIN_ENABLE
    get_LPCG45_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG45_STATUS0_DOMAIN_ENABLE((LPCG45_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG45_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG45_STATUS0_ACTIVE_DOMAIN
    get_LPCG45_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG45_STATUS0_ACTIVE_DOMAIN((LPCG45_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG45_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG45_STATUS0_ON() volatile
    {
        return LPCG45_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG45_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG45_STATUS0(
        CCM_LPCG45_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG45_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG45_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG45_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG45_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG45_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG45_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG45_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG45_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG45_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG45_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG45_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG45_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG45_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG45_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG45_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG45_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG45_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG45_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG45_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG45_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG45_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG45_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG45_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG45_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG45_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG45_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG45_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG45_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG45_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG45_STATUS1_CPU3_MODE get_LPCG45_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG45_STATUS1_CPU3_MODE((LPCG45_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG45_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG45_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG45_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG45_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG45_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG45_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG45_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG45_STATUS1_CPU2_MODE get_LPCG45_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG45_STATUS1_CPU2_MODE((LPCG45_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG45_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG45_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG45_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG45_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG45_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG45_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG45_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG45_STATUS1_CPU1_MODE get_LPCG45_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG45_STATUS1_CPU1_MODE((LPCG45_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG45_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG45_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG45_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG45_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG45_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG45_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG45_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG45_STATUS1_CPU0_MODE get_LPCG45_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG45_STATUS1_CPU0_MODE((LPCG45_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG45_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG45_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG45_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG45_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG45_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG45_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG45_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG45_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG45_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG45_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG45_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG45_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG45_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG45_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG45_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG45_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG45_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG45_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG45_AUTHEN_LOCK_MODE() volatile
    {
        LPCG45_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG45_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG45_AUTHEN_LOCK_MODE() volatile
    {
        LPCG45_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG45_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG45_AUTHEN_LOCK_MODE() volatile
    {
        LPCG45_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG45_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG45_AUTHEN_CPULPM() volatile
    {
        return LPCG45_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG45_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG45_AUTHEN_CPULPM() volatile
    {
        LPCG45_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG45_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG45_AUTHEN_CPULPM() volatile
    {
        LPCG45_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG45_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG45_AUTHEN_CPULPM() volatile
    {
        LPCG45_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG45_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG45_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG45_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG45_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG45_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG45_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG45_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG45_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG45_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG45_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG45_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG45_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG45_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG45_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG45_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG45_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG45_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG45_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG45_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG45_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG45_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG45_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG45_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG45_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG45_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG45_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG45_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG45_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG45_AUTHEN_LOCK_LIST() volatile
    {
        LPCG45_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG45_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG45_AUTHEN_LOCK_LIST() volatile
    {
        LPCG45_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG45_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG45_AUTHEN_LOCK_LIST() volatile
    {
        LPCG45_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG45_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG45_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG45_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG45_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG45_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG45_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG45_AUTHEN = curr;
    }

    /**
     * Get LPCG45_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG45_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG45_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG45_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG45_AUTHEN_LOCK_TZ() volatile
    {
        LPCG45_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG45_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG45_AUTHEN_LOCK_TZ() volatile
    {
        LPCG45_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG45_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG45_AUTHEN_LOCK_TZ() volatile
    {
        LPCG45_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG45_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG45_AUTHEN_TZ_NS() volatile
    {
        return LPCG45_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG45_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG45_AUTHEN_TZ_NS() volatile
    {
        LPCG45_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG45_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG45_AUTHEN_TZ_NS() volatile
    {
        LPCG45_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG45_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG45_AUTHEN_TZ_NS() volatile
    {
        LPCG45_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG45_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG45_AUTHEN_TZ_USER() volatile
    {
        return LPCG45_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG45_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG45_AUTHEN_TZ_USER() volatile
    {
        LPCG45_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG45_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG45_AUTHEN_TZ_USER() volatile
    {
        LPCG45_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG45_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG45_AUTHEN_TZ_USER() volatile
    {
        LPCG45_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG45_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG45_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG45_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG45_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG45_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG45_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG45_AUTHEN = curr;
    }

    /**
     * Get LPCG46_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG46_DIRECT_ON() volatile
    {
        return LPCG46_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG46_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG46_DIRECT_ON() volatile
    {
        LPCG46_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG46_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG46_DIRECT_ON() volatile
    {
        LPCG46_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG46_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG46_DIRECT_ON() volatile
    {
        LPCG46_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG46_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG46_DOMAIN_LEVEL3 get_LPCG46_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG46_DOMAIN_LEVEL3((LPCG46_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG46_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG46_DOMAIN_LEVEL3(
        CCM_LPCG46_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG46_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG46_DOMAIN = curr;
    }

    /**
     * Get LPCG46_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG46_DOMAIN_LEVEL2 get_LPCG46_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG46_DOMAIN_LEVEL2((LPCG46_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG46_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG46_DOMAIN_LEVEL2(
        CCM_LPCG46_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG46_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG46_DOMAIN = curr;
    }

    /**
     * Get LPCG46_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG46_DOMAIN_LEVEL1 get_LPCG46_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG46_DOMAIN_LEVEL1((LPCG46_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG46_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG46_DOMAIN_LEVEL1(
        CCM_LPCG46_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG46_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG46_DOMAIN = curr;
    }

    /**
     * Get LPCG46_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG46_DOMAIN_LEVEL0 get_LPCG46_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG46_DOMAIN_LEVEL0((LPCG46_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG46_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG46_DOMAIN_LEVEL0(
        CCM_LPCG46_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG46_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG46_DOMAIN = curr;
    }

    /**
     * Get LPCG46_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG46_DOMAIN_LEVEL get_LPCG46_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG46_DOMAIN_LEVEL((LPCG46_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG46_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG46_DOMAIN_LEVEL(CCM_LPCG46_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG46_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG46_DOMAIN = curr;
    }

    /**
     * Get all of LPCG46_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG46_DOMAIN(CCM_LPCG46_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG46_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG46_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG46_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG46_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG46_DOMAIN;

        LEVEL3 = CCM_LPCG46_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG46_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG46_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG46_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG46_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG46_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG46_DOMAIN(CCM_LPCG46_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG46_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG46_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG46_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG46_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG46_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG46_DOMAIN = curr;
    }

    /**
     * Get LPCG46_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG46_SETPOINT_STANDBY() volatile
    {
        return (LPCG46_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG46_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG46_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG46_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG46_SETPOINT = curr;
    }

    /**
     * Get LPCG46_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG46_SETPOINT_SETPOINT() volatile
    {
        return (LPCG46_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG46_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG46_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG46_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG46_SETPOINT = curr;
    }

    /**
     * Get all of LPCG46_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG46_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG46_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG46_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG46_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG46_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG46_SETPOINT = curr;
    }

    /**
     * Get LPCG46_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG46_STATUS0_DOMAIN_ENABLE
    get_LPCG46_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG46_STATUS0_DOMAIN_ENABLE((LPCG46_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG46_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG46_STATUS0_ACTIVE_DOMAIN
    get_LPCG46_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG46_STATUS0_ACTIVE_DOMAIN((LPCG46_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG46_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG46_STATUS0_ON() volatile
    {
        return LPCG46_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG46_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG46_STATUS0(
        CCM_LPCG46_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG46_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG46_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG46_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG46_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG46_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG46_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG46_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG46_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG46_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG46_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG46_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG46_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG46_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG46_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG46_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG46_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG46_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG46_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG46_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG46_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG46_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG46_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG46_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG46_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG46_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG46_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG46_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG46_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG46_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG46_STATUS1_CPU3_MODE get_LPCG46_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG46_STATUS1_CPU3_MODE((LPCG46_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG46_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG46_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG46_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG46_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG46_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG46_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG46_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG46_STATUS1_CPU2_MODE get_LPCG46_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG46_STATUS1_CPU2_MODE((LPCG46_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG46_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG46_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG46_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG46_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG46_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG46_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG46_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG46_STATUS1_CPU1_MODE get_LPCG46_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG46_STATUS1_CPU1_MODE((LPCG46_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG46_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG46_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG46_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG46_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG46_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG46_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG46_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG46_STATUS1_CPU0_MODE get_LPCG46_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG46_STATUS1_CPU0_MODE((LPCG46_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG46_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG46_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG46_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG46_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG46_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG46_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG46_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG46_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG46_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG46_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG46_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG46_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG46_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG46_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG46_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG46_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG46_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG46_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG46_AUTHEN_LOCK_MODE() volatile
    {
        LPCG46_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG46_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG46_AUTHEN_LOCK_MODE() volatile
    {
        LPCG46_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG46_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG46_AUTHEN_LOCK_MODE() volatile
    {
        LPCG46_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG46_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG46_AUTHEN_CPULPM() volatile
    {
        return LPCG46_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG46_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG46_AUTHEN_CPULPM() volatile
    {
        LPCG46_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG46_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG46_AUTHEN_CPULPM() volatile
    {
        LPCG46_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG46_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG46_AUTHEN_CPULPM() volatile
    {
        LPCG46_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG46_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG46_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG46_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG46_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG46_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG46_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG46_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG46_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG46_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG46_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG46_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG46_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG46_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG46_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG46_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG46_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG46_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG46_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG46_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG46_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG46_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG46_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG46_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG46_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG46_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG46_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG46_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG46_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG46_AUTHEN_LOCK_LIST() volatile
    {
        LPCG46_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG46_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG46_AUTHEN_LOCK_LIST() volatile
    {
        LPCG46_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG46_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG46_AUTHEN_LOCK_LIST() volatile
    {
        LPCG46_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG46_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG46_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG46_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG46_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG46_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG46_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG46_AUTHEN = curr;
    }

    /**
     * Get LPCG46_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG46_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG46_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG46_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG46_AUTHEN_LOCK_TZ() volatile
    {
        LPCG46_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG46_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG46_AUTHEN_LOCK_TZ() volatile
    {
        LPCG46_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG46_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG46_AUTHEN_LOCK_TZ() volatile
    {
        LPCG46_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG46_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG46_AUTHEN_TZ_NS() volatile
    {
        return LPCG46_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG46_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG46_AUTHEN_TZ_NS() volatile
    {
        LPCG46_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG46_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG46_AUTHEN_TZ_NS() volatile
    {
        LPCG46_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG46_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG46_AUTHEN_TZ_NS() volatile
    {
        LPCG46_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG46_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG46_AUTHEN_TZ_USER() volatile
    {
        return LPCG46_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG46_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG46_AUTHEN_TZ_USER() volatile
    {
        LPCG46_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG46_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG46_AUTHEN_TZ_USER() volatile
    {
        LPCG46_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG46_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG46_AUTHEN_TZ_USER() volatile
    {
        LPCG46_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG46_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG46_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG46_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG46_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG46_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG46_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG46_AUTHEN = curr;
    }

    /**
     * Get LPCG47_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG47_DIRECT_ON() volatile
    {
        return LPCG47_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG47_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG47_DIRECT_ON() volatile
    {
        LPCG47_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG47_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG47_DIRECT_ON() volatile
    {
        LPCG47_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG47_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG47_DIRECT_ON() volatile
    {
        LPCG47_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG47_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG47_DOMAIN_LEVEL3 get_LPCG47_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG47_DOMAIN_LEVEL3((LPCG47_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG47_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG47_DOMAIN_LEVEL3(
        CCM_LPCG47_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG47_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG47_DOMAIN = curr;
    }

    /**
     * Get LPCG47_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG47_DOMAIN_LEVEL2 get_LPCG47_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG47_DOMAIN_LEVEL2((LPCG47_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG47_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG47_DOMAIN_LEVEL2(
        CCM_LPCG47_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG47_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG47_DOMAIN = curr;
    }

    /**
     * Get LPCG47_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG47_DOMAIN_LEVEL1 get_LPCG47_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG47_DOMAIN_LEVEL1((LPCG47_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG47_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG47_DOMAIN_LEVEL1(
        CCM_LPCG47_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG47_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG47_DOMAIN = curr;
    }

    /**
     * Get LPCG47_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG47_DOMAIN_LEVEL0 get_LPCG47_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG47_DOMAIN_LEVEL0((LPCG47_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG47_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG47_DOMAIN_LEVEL0(
        CCM_LPCG47_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG47_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG47_DOMAIN = curr;
    }

    /**
     * Get LPCG47_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG47_DOMAIN_LEVEL get_LPCG47_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG47_DOMAIN_LEVEL((LPCG47_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG47_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG47_DOMAIN_LEVEL(CCM_LPCG47_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG47_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG47_DOMAIN = curr;
    }

    /**
     * Get all of LPCG47_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG47_DOMAIN(CCM_LPCG47_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG47_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG47_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG47_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG47_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG47_DOMAIN;

        LEVEL3 = CCM_LPCG47_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG47_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG47_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG47_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG47_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG47_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG47_DOMAIN(CCM_LPCG47_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG47_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG47_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG47_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG47_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG47_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG47_DOMAIN = curr;
    }

    /**
     * Get LPCG47_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG47_SETPOINT_STANDBY() volatile
    {
        return (LPCG47_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG47_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG47_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG47_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG47_SETPOINT = curr;
    }

    /**
     * Get LPCG47_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG47_SETPOINT_SETPOINT() volatile
    {
        return (LPCG47_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG47_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG47_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG47_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG47_SETPOINT = curr;
    }

    /**
     * Get all of LPCG47_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG47_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG47_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG47_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG47_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG47_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG47_SETPOINT = curr;
    }

    /**
     * Get LPCG47_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG47_STATUS0_DOMAIN_ENABLE
    get_LPCG47_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG47_STATUS0_DOMAIN_ENABLE((LPCG47_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG47_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG47_STATUS0_ACTIVE_DOMAIN
    get_LPCG47_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG47_STATUS0_ACTIVE_DOMAIN((LPCG47_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG47_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG47_STATUS0_ON() volatile
    {
        return LPCG47_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG47_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG47_STATUS0(
        CCM_LPCG47_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG47_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG47_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG47_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG47_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG47_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG47_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG47_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG47_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG47_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG47_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG47_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG47_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG47_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG47_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG47_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG47_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG47_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG47_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG47_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG47_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG47_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG47_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG47_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG47_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG47_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG47_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG47_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG47_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG47_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG47_STATUS1_CPU3_MODE get_LPCG47_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG47_STATUS1_CPU3_MODE((LPCG47_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG47_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG47_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG47_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG47_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG47_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG47_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG47_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG47_STATUS1_CPU2_MODE get_LPCG47_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG47_STATUS1_CPU2_MODE((LPCG47_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG47_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG47_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG47_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG47_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG47_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG47_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG47_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG47_STATUS1_CPU1_MODE get_LPCG47_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG47_STATUS1_CPU1_MODE((LPCG47_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG47_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG47_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG47_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG47_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG47_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG47_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG47_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG47_STATUS1_CPU0_MODE get_LPCG47_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG47_STATUS1_CPU0_MODE((LPCG47_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG47_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG47_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG47_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG47_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG47_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG47_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG47_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG47_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG47_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG47_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG47_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG47_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG47_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG47_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG47_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG47_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG47_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG47_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG47_AUTHEN_LOCK_MODE() volatile
    {
        LPCG47_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG47_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG47_AUTHEN_LOCK_MODE() volatile
    {
        LPCG47_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG47_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG47_AUTHEN_LOCK_MODE() volatile
    {
        LPCG47_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG47_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG47_AUTHEN_CPULPM() volatile
    {
        return LPCG47_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG47_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG47_AUTHEN_CPULPM() volatile
    {
        LPCG47_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG47_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG47_AUTHEN_CPULPM() volatile
    {
        LPCG47_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG47_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG47_AUTHEN_CPULPM() volatile
    {
        LPCG47_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG47_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG47_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG47_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG47_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG47_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG47_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG47_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG47_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG47_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG47_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG47_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG47_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG47_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG47_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG47_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG47_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG47_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG47_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG47_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG47_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG47_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG47_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG47_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG47_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG47_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG47_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG47_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG47_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG47_AUTHEN_LOCK_LIST() volatile
    {
        LPCG47_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG47_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG47_AUTHEN_LOCK_LIST() volatile
    {
        LPCG47_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG47_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG47_AUTHEN_LOCK_LIST() volatile
    {
        LPCG47_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG47_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG47_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG47_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG47_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG47_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG47_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG47_AUTHEN = curr;
    }

    /**
     * Get LPCG47_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG47_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG47_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG47_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG47_AUTHEN_LOCK_TZ() volatile
    {
        LPCG47_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG47_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG47_AUTHEN_LOCK_TZ() volatile
    {
        LPCG47_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG47_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG47_AUTHEN_LOCK_TZ() volatile
    {
        LPCG47_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG47_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG47_AUTHEN_TZ_NS() volatile
    {
        return LPCG47_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG47_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG47_AUTHEN_TZ_NS() volatile
    {
        LPCG47_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG47_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG47_AUTHEN_TZ_NS() volatile
    {
        LPCG47_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG47_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG47_AUTHEN_TZ_NS() volatile
    {
        LPCG47_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG47_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG47_AUTHEN_TZ_USER() volatile
    {
        return LPCG47_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG47_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG47_AUTHEN_TZ_USER() volatile
    {
        LPCG47_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG47_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG47_AUTHEN_TZ_USER() volatile
    {
        LPCG47_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG47_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG47_AUTHEN_TZ_USER() volatile
    {
        LPCG47_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG47_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG47_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG47_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG47_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG47_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG47_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG47_AUTHEN = curr;
    }

    /**
     * Get LPCG48_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG48_DIRECT_ON() volatile
    {
        return LPCG48_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG48_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG48_DIRECT_ON() volatile
    {
        LPCG48_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG48_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG48_DIRECT_ON() volatile
    {
        LPCG48_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG48_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG48_DIRECT_ON() volatile
    {
        LPCG48_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG48_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG48_DOMAIN_LEVEL3 get_LPCG48_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG48_DOMAIN_LEVEL3((LPCG48_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG48_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG48_DOMAIN_LEVEL3(
        CCM_LPCG48_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG48_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG48_DOMAIN = curr;
    }

    /**
     * Get LPCG48_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG48_DOMAIN_LEVEL2 get_LPCG48_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG48_DOMAIN_LEVEL2((LPCG48_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG48_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG48_DOMAIN_LEVEL2(
        CCM_LPCG48_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG48_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG48_DOMAIN = curr;
    }

    /**
     * Get LPCG48_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG48_DOMAIN_LEVEL1 get_LPCG48_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG48_DOMAIN_LEVEL1((LPCG48_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG48_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG48_DOMAIN_LEVEL1(
        CCM_LPCG48_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG48_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG48_DOMAIN = curr;
    }

    /**
     * Get LPCG48_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG48_DOMAIN_LEVEL0 get_LPCG48_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG48_DOMAIN_LEVEL0((LPCG48_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG48_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG48_DOMAIN_LEVEL0(
        CCM_LPCG48_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG48_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG48_DOMAIN = curr;
    }

    /**
     * Get LPCG48_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG48_DOMAIN_LEVEL get_LPCG48_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG48_DOMAIN_LEVEL((LPCG48_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG48_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG48_DOMAIN_LEVEL(CCM_LPCG48_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG48_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG48_DOMAIN = curr;
    }

    /**
     * Get all of LPCG48_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG48_DOMAIN(CCM_LPCG48_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG48_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG48_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG48_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG48_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG48_DOMAIN;

        LEVEL3 = CCM_LPCG48_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG48_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG48_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG48_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG48_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG48_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG48_DOMAIN(CCM_LPCG48_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG48_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG48_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG48_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG48_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG48_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG48_DOMAIN = curr;
    }

    /**
     * Get LPCG48_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline uint16_t get_LPCG48_SETPOINT_STANDBY() volatile
    {
        return (LPCG48_SETPOINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG48_SETPOINT's STANDBY field.
     *
     * Standby
     */
    inline void set_LPCG48_SETPOINT_STANDBY(uint16_t value) volatile
    {
        uint32_t curr = LPCG48_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        LPCG48_SETPOINT = curr;
    }

    /**
     * Get LPCG48_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline uint16_t get_LPCG48_SETPOINT_SETPOINT() volatile
    {
        return (LPCG48_SETPOINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LPCG48_SETPOINT's SETPOINT field.
     *
     * Setpoints
     */
    inline void set_LPCG48_SETPOINT_SETPOINT(uint16_t value) volatile
    {
        uint32_t curr = LPCG48_SETPOINT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LPCG48_SETPOINT = curr;
    }

    /**
     * Get all of LPCG48_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void get_LPCG48_SETPOINT(uint16_t &STANDBY,
                                    uint16_t &SETPOINT) volatile
    {
        uint32_t curr = LPCG48_SETPOINT;

        STANDBY = (curr >> 16u) & 0b1111111111111111u;
        SETPOINT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of LPCG48_SETPOINT's bit fields.
     *
     * (read-write) LPCG Setpoint setting
     */
    inline void set_LPCG48_SETPOINT(uint16_t STANDBY,
                                    uint16_t SETPOINT) volatile
    {
        uint32_t curr = LPCG48_SETPOINT;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STANDBY & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SETPOINT & 0b1111111111111111u) << 0u;

        LPCG48_SETPOINT = curr;
    }

    /**
     * Get LPCG48_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG48_STATUS0_DOMAIN_ENABLE
    get_LPCG48_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG48_STATUS0_DOMAIN_ENABLE((LPCG48_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG48_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG48_STATUS0_ACTIVE_DOMAIN
    get_LPCG48_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG48_STATUS0_ACTIVE_DOMAIN((LPCG48_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG48_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG48_STATUS0_ON() volatile
    {
        return LPCG48_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG48_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG48_STATUS0(
        CCM_LPCG48_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG48_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG48_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG48_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG48_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG48_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG48_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG48_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG48_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG48_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG48_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG48_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG48_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG48_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG48_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG48_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG48_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG48_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG48_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG48_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG48_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG48_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG48_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG48_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG48_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG48_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG48_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG48_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG48_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG48_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG48_STATUS1_CPU3_MODE get_LPCG48_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG48_STATUS1_CPU3_MODE((LPCG48_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG48_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG48_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG48_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG48_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG48_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG48_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG48_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG48_STATUS1_CPU2_MODE get_LPCG48_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG48_STATUS1_CPU2_MODE((LPCG48_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG48_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG48_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG48_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG48_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG48_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG48_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG48_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG48_STATUS1_CPU1_MODE get_LPCG48_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG48_STATUS1_CPU1_MODE((LPCG48_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG48_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG48_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG48_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG48_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG48_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG48_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG48_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG48_STATUS1_CPU0_MODE get_LPCG48_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG48_STATUS1_CPU0_MODE((LPCG48_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG48_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG48_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG48_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG48_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG48_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG48_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG48_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG48_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG48_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG48_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG48_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG48_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG48_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG48_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG48_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG48_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG48_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG48_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG48_AUTHEN_LOCK_MODE() volatile
    {
        LPCG48_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG48_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG48_AUTHEN_LOCK_MODE() volatile
    {
        LPCG48_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG48_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG48_AUTHEN_LOCK_MODE() volatile
    {
        LPCG48_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG48_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG48_AUTHEN_CPULPM() volatile
    {
        return LPCG48_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG48_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG48_AUTHEN_CPULPM() volatile
    {
        LPCG48_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG48_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG48_AUTHEN_CPULPM() volatile
    {
        LPCG48_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG48_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG48_AUTHEN_CPULPM() volatile
    {
        LPCG48_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG48_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG48_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG48_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG48_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG48_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG48_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG48_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG48_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG48_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG48_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG48_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG48_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG48_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG48_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG48_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG48_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG48_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG48_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG48_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG48_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG48_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG48_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG48_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG48_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG48_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG48_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG48_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG48_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG48_AUTHEN_LOCK_LIST() volatile
    {
        LPCG48_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG48_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG48_AUTHEN_LOCK_LIST() volatile
    {
        LPCG48_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG48_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG48_AUTHEN_LOCK_LIST() volatile
    {
        LPCG48_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG48_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG48_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG48_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG48_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG48_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG48_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG48_AUTHEN = curr;
    }

    /**
     * Get LPCG48_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG48_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG48_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG48_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG48_AUTHEN_LOCK_TZ() volatile
    {
        LPCG48_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG48_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG48_AUTHEN_LOCK_TZ() volatile
    {
        LPCG48_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG48_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG48_AUTHEN_LOCK_TZ() volatile
    {
        LPCG48_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG48_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG48_AUTHEN_TZ_NS() volatile
    {
        return LPCG48_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG48_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG48_AUTHEN_TZ_NS() volatile
    {
        LPCG48_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG48_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG48_AUTHEN_TZ_NS() volatile
    {
        LPCG48_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG48_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG48_AUTHEN_TZ_NS() volatile
    {
        LPCG48_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG48_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG48_AUTHEN_TZ_USER() volatile
    {
        return LPCG48_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG48_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG48_AUTHEN_TZ_USER() volatile
    {
        LPCG48_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG48_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG48_AUTHEN_TZ_USER() volatile
    {
        LPCG48_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG48_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG48_AUTHEN_TZ_USER() volatile
    {
        LPCG48_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG48_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG48_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG48_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG48_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG48_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG48_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG48_AUTHEN = curr;
    }

    /**
     * Get LPCG49_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG49_DIRECT_ON() volatile
    {
        return LPCG49_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG49_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG49_DIRECT_ON() volatile
    {
        LPCG49_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG49_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG49_DIRECT_ON() volatile
    {
        LPCG49_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG49_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG49_DIRECT_ON() volatile
    {
        LPCG49_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG49_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG49_DOMAIN_LEVEL3 get_LPCG49_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG49_DOMAIN_LEVEL3((LPCG49_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG49_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG49_DOMAIN_LEVEL3(
        CCM_LPCG49_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG49_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG49_DOMAIN = curr;
    }

    /**
     * Get LPCG49_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG49_DOMAIN_LEVEL2 get_LPCG49_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG49_DOMAIN_LEVEL2((LPCG49_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG49_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG49_DOMAIN_LEVEL2(
        CCM_LPCG49_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG49_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG49_DOMAIN = curr;
    }

    /**
     * Get LPCG49_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG49_DOMAIN_LEVEL1 get_LPCG49_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG49_DOMAIN_LEVEL1((LPCG49_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG49_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG49_DOMAIN_LEVEL1(
        CCM_LPCG49_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG49_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG49_DOMAIN = curr;
    }

    /**
     * Get LPCG49_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG49_DOMAIN_LEVEL0 get_LPCG49_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG49_DOMAIN_LEVEL0((LPCG49_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG49_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG49_DOMAIN_LEVEL0(
        CCM_LPCG49_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG49_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG49_DOMAIN = curr;
    }

    /**
     * Get LPCG49_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG49_DOMAIN_LEVEL get_LPCG49_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG49_DOMAIN_LEVEL((LPCG49_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG49_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG49_DOMAIN_LEVEL(CCM_LPCG49_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG49_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG49_DOMAIN = curr;
    }

    /**
     * Get all of LPCG49_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG49_DOMAIN(CCM_LPCG49_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG49_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG49_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG49_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG49_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG49_DOMAIN;

        LEVEL3 = CCM_LPCG49_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG49_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG49_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG49_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG49_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG49_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG49_DOMAIN(CCM_LPCG49_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG49_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG49_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG49_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG49_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG49_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG49_DOMAIN = curr;
    }

    /**
     * Get LPCG49_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG49_STATUS0_DOMAIN_ENABLE
    get_LPCG49_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG49_STATUS0_DOMAIN_ENABLE((LPCG49_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG49_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG49_STATUS0_ACTIVE_DOMAIN
    get_LPCG49_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG49_STATUS0_ACTIVE_DOMAIN((LPCG49_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG49_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG49_STATUS0_ON() volatile
    {
        return LPCG49_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG49_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG49_STATUS0(
        CCM_LPCG49_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG49_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG49_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG49_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG49_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG49_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG49_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG49_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG49_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG49_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG49_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG49_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG49_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG49_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG49_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG49_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG49_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG49_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG49_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG49_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG49_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG49_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG49_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG49_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG49_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG49_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG49_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG49_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG49_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG49_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG49_STATUS1_CPU3_MODE get_LPCG49_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG49_STATUS1_CPU3_MODE((LPCG49_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG49_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG49_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG49_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG49_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG49_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG49_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG49_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG49_STATUS1_CPU2_MODE get_LPCG49_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG49_STATUS1_CPU2_MODE((LPCG49_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG49_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG49_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG49_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG49_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG49_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG49_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG49_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG49_STATUS1_CPU1_MODE get_LPCG49_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG49_STATUS1_CPU1_MODE((LPCG49_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG49_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG49_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG49_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG49_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG49_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG49_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG49_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG49_STATUS1_CPU0_MODE get_LPCG49_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG49_STATUS1_CPU0_MODE((LPCG49_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG49_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG49_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG49_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG49_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG49_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG49_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG49_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG49_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG49_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG49_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG49_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG49_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG49_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG49_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG49_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG49_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG49_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG49_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG49_AUTHEN_LOCK_MODE() volatile
    {
        LPCG49_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG49_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG49_AUTHEN_LOCK_MODE() volatile
    {
        LPCG49_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG49_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG49_AUTHEN_LOCK_MODE() volatile
    {
        LPCG49_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG49_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG49_AUTHEN_CPULPM() volatile
    {
        return LPCG49_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG49_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG49_AUTHEN_CPULPM() volatile
    {
        LPCG49_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG49_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG49_AUTHEN_CPULPM() volatile
    {
        LPCG49_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG49_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG49_AUTHEN_CPULPM() volatile
    {
        LPCG49_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG49_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG49_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG49_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG49_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG49_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG49_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG49_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG49_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG49_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG49_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG49_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG49_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG49_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG49_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG49_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG49_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG49_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG49_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG49_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG49_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG49_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG49_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG49_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG49_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG49_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG49_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG49_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG49_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG49_AUTHEN_LOCK_LIST() volatile
    {
        LPCG49_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG49_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG49_AUTHEN_LOCK_LIST() volatile
    {
        LPCG49_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG49_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG49_AUTHEN_LOCK_LIST() volatile
    {
        LPCG49_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG49_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG49_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG49_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG49_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG49_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG49_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG49_AUTHEN = curr;
    }

    /**
     * Get LPCG49_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG49_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG49_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG49_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG49_AUTHEN_LOCK_TZ() volatile
    {
        LPCG49_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG49_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG49_AUTHEN_LOCK_TZ() volatile
    {
        LPCG49_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG49_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG49_AUTHEN_LOCK_TZ() volatile
    {
        LPCG49_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG49_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG49_AUTHEN_TZ_NS() volatile
    {
        return LPCG49_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG49_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG49_AUTHEN_TZ_NS() volatile
    {
        LPCG49_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG49_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG49_AUTHEN_TZ_NS() volatile
    {
        LPCG49_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG49_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG49_AUTHEN_TZ_NS() volatile
    {
        LPCG49_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG49_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG49_AUTHEN_TZ_USER() volatile
    {
        return LPCG49_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG49_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG49_AUTHEN_TZ_USER() volatile
    {
        LPCG49_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG49_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG49_AUTHEN_TZ_USER() volatile
    {
        LPCG49_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG49_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG49_AUTHEN_TZ_USER() volatile
    {
        LPCG49_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG49_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG49_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG49_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG49_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG49_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG49_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG49_AUTHEN = curr;
    }

    /**
     * Get LPCG50_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG50_DIRECT_ON() volatile
    {
        return LPCG50_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG50_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG50_DIRECT_ON() volatile
    {
        LPCG50_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG50_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG50_DIRECT_ON() volatile
    {
        LPCG50_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG50_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG50_DIRECT_ON() volatile
    {
        LPCG50_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG50_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG50_DOMAIN_LEVEL3 get_LPCG50_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG50_DOMAIN_LEVEL3((LPCG50_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG50_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG50_DOMAIN_LEVEL3(
        CCM_LPCG50_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG50_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG50_DOMAIN = curr;
    }

    /**
     * Get LPCG50_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG50_DOMAIN_LEVEL2 get_LPCG50_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG50_DOMAIN_LEVEL2((LPCG50_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG50_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG50_DOMAIN_LEVEL2(
        CCM_LPCG50_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG50_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG50_DOMAIN = curr;
    }

    /**
     * Get LPCG50_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG50_DOMAIN_LEVEL1 get_LPCG50_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG50_DOMAIN_LEVEL1((LPCG50_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG50_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG50_DOMAIN_LEVEL1(
        CCM_LPCG50_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG50_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG50_DOMAIN = curr;
    }

    /**
     * Get LPCG50_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG50_DOMAIN_LEVEL0 get_LPCG50_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG50_DOMAIN_LEVEL0((LPCG50_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG50_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG50_DOMAIN_LEVEL0(
        CCM_LPCG50_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG50_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG50_DOMAIN = curr;
    }

    /**
     * Get LPCG50_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG50_DOMAIN_LEVEL get_LPCG50_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG50_DOMAIN_LEVEL((LPCG50_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG50_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG50_DOMAIN_LEVEL(CCM_LPCG50_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG50_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG50_DOMAIN = curr;
    }

    /**
     * Get all of LPCG50_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG50_DOMAIN(CCM_LPCG50_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG50_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG50_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG50_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG50_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG50_DOMAIN;

        LEVEL3 = CCM_LPCG50_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG50_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG50_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG50_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG50_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG50_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG50_DOMAIN(CCM_LPCG50_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG50_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG50_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG50_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG50_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG50_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG50_DOMAIN = curr;
    }

    /**
     * Get LPCG50_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG50_STATUS0_DOMAIN_ENABLE
    get_LPCG50_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG50_STATUS0_DOMAIN_ENABLE((LPCG50_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG50_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG50_STATUS0_ACTIVE_DOMAIN
    get_LPCG50_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG50_STATUS0_ACTIVE_DOMAIN((LPCG50_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG50_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG50_STATUS0_ON() volatile
    {
        return LPCG50_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG50_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG50_STATUS0(
        CCM_LPCG50_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG50_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG50_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG50_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG50_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG50_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG50_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG50_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG50_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG50_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG50_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG50_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG50_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG50_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG50_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG50_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG50_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG50_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG50_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG50_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG50_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG50_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG50_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG50_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG50_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG50_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG50_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG50_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG50_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG50_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG50_STATUS1_CPU3_MODE get_LPCG50_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG50_STATUS1_CPU3_MODE((LPCG50_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG50_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG50_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG50_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG50_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG50_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG50_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG50_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG50_STATUS1_CPU2_MODE get_LPCG50_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG50_STATUS1_CPU2_MODE((LPCG50_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG50_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG50_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG50_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG50_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG50_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG50_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG50_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG50_STATUS1_CPU1_MODE get_LPCG50_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG50_STATUS1_CPU1_MODE((LPCG50_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG50_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG50_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG50_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG50_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG50_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG50_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG50_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG50_STATUS1_CPU0_MODE get_LPCG50_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG50_STATUS1_CPU0_MODE((LPCG50_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG50_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG50_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG50_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG50_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG50_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG50_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG50_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG50_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG50_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG50_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG50_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG50_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG50_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG50_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG50_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG50_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG50_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG50_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG50_AUTHEN_LOCK_MODE() volatile
    {
        LPCG50_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG50_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG50_AUTHEN_LOCK_MODE() volatile
    {
        LPCG50_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG50_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG50_AUTHEN_LOCK_MODE() volatile
    {
        LPCG50_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG50_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG50_AUTHEN_CPULPM() volatile
    {
        return LPCG50_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG50_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG50_AUTHEN_CPULPM() volatile
    {
        LPCG50_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG50_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG50_AUTHEN_CPULPM() volatile
    {
        LPCG50_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG50_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG50_AUTHEN_CPULPM() volatile
    {
        LPCG50_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG50_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG50_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG50_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG50_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG50_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG50_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG50_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG50_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG50_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG50_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG50_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG50_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG50_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG50_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG50_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG50_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG50_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG50_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG50_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG50_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG50_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG50_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG50_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG50_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG50_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG50_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG50_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG50_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG50_AUTHEN_LOCK_LIST() volatile
    {
        LPCG50_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG50_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG50_AUTHEN_LOCK_LIST() volatile
    {
        LPCG50_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG50_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG50_AUTHEN_LOCK_LIST() volatile
    {
        LPCG50_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG50_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG50_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG50_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG50_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG50_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG50_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG50_AUTHEN = curr;
    }

    /**
     * Get LPCG50_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG50_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG50_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG50_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG50_AUTHEN_LOCK_TZ() volatile
    {
        LPCG50_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG50_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG50_AUTHEN_LOCK_TZ() volatile
    {
        LPCG50_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG50_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG50_AUTHEN_LOCK_TZ() volatile
    {
        LPCG50_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG50_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG50_AUTHEN_TZ_NS() volatile
    {
        return LPCG50_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG50_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG50_AUTHEN_TZ_NS() volatile
    {
        LPCG50_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG50_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG50_AUTHEN_TZ_NS() volatile
    {
        LPCG50_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG50_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG50_AUTHEN_TZ_NS() volatile
    {
        LPCG50_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG50_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG50_AUTHEN_TZ_USER() volatile
    {
        return LPCG50_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG50_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG50_AUTHEN_TZ_USER() volatile
    {
        LPCG50_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG50_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG50_AUTHEN_TZ_USER() volatile
    {
        LPCG50_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG50_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG50_AUTHEN_TZ_USER() volatile
    {
        LPCG50_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG50_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG50_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG50_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG50_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG50_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG50_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG50_AUTHEN = curr;
    }

    /**
     * Get LPCG51_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG51_DIRECT_ON() volatile
    {
        return LPCG51_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG51_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG51_DIRECT_ON() volatile
    {
        LPCG51_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG51_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG51_DIRECT_ON() volatile
    {
        LPCG51_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG51_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG51_DIRECT_ON() volatile
    {
        LPCG51_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG51_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG51_DOMAIN_LEVEL3 get_LPCG51_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG51_DOMAIN_LEVEL3((LPCG51_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG51_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG51_DOMAIN_LEVEL3(
        CCM_LPCG51_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG51_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG51_DOMAIN = curr;
    }

    /**
     * Get LPCG51_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG51_DOMAIN_LEVEL2 get_LPCG51_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG51_DOMAIN_LEVEL2((LPCG51_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG51_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG51_DOMAIN_LEVEL2(
        CCM_LPCG51_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG51_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG51_DOMAIN = curr;
    }

    /**
     * Get LPCG51_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG51_DOMAIN_LEVEL1 get_LPCG51_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG51_DOMAIN_LEVEL1((LPCG51_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG51_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG51_DOMAIN_LEVEL1(
        CCM_LPCG51_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG51_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG51_DOMAIN = curr;
    }

    /**
     * Get LPCG51_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG51_DOMAIN_LEVEL0 get_LPCG51_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG51_DOMAIN_LEVEL0((LPCG51_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG51_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG51_DOMAIN_LEVEL0(
        CCM_LPCG51_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG51_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG51_DOMAIN = curr;
    }

    /**
     * Get LPCG51_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG51_DOMAIN_LEVEL get_LPCG51_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG51_DOMAIN_LEVEL((LPCG51_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG51_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG51_DOMAIN_LEVEL(CCM_LPCG51_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG51_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG51_DOMAIN = curr;
    }

    /**
     * Get all of LPCG51_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG51_DOMAIN(CCM_LPCG51_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG51_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG51_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG51_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG51_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG51_DOMAIN;

        LEVEL3 = CCM_LPCG51_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG51_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG51_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG51_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG51_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG51_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG51_DOMAIN(CCM_LPCG51_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG51_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG51_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG51_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG51_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG51_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG51_DOMAIN = curr;
    }

    /**
     * Get LPCG51_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG51_STATUS0_DOMAIN_ENABLE
    get_LPCG51_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG51_STATUS0_DOMAIN_ENABLE((LPCG51_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG51_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG51_STATUS0_ACTIVE_DOMAIN
    get_LPCG51_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG51_STATUS0_ACTIVE_DOMAIN((LPCG51_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG51_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG51_STATUS0_ON() volatile
    {
        return LPCG51_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG51_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG51_STATUS0(
        CCM_LPCG51_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG51_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG51_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG51_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG51_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG51_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG51_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG51_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG51_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG51_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG51_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG51_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG51_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG51_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG51_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG51_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG51_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG51_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG51_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG51_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG51_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG51_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG51_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG51_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG51_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG51_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG51_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG51_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG51_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG51_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG51_STATUS1_CPU3_MODE get_LPCG51_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG51_STATUS1_CPU3_MODE((LPCG51_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG51_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG51_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG51_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG51_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG51_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG51_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG51_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG51_STATUS1_CPU2_MODE get_LPCG51_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG51_STATUS1_CPU2_MODE((LPCG51_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG51_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG51_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG51_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG51_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG51_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG51_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG51_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG51_STATUS1_CPU1_MODE get_LPCG51_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG51_STATUS1_CPU1_MODE((LPCG51_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG51_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG51_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG51_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG51_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG51_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG51_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG51_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG51_STATUS1_CPU0_MODE get_LPCG51_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG51_STATUS1_CPU0_MODE((LPCG51_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG51_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG51_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG51_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG51_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG51_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG51_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG51_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG51_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG51_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG51_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG51_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG51_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG51_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG51_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG51_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG51_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG51_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG51_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG51_AUTHEN_LOCK_MODE() volatile
    {
        LPCG51_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG51_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG51_AUTHEN_LOCK_MODE() volatile
    {
        LPCG51_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG51_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG51_AUTHEN_LOCK_MODE() volatile
    {
        LPCG51_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG51_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG51_AUTHEN_CPULPM() volatile
    {
        return LPCG51_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG51_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG51_AUTHEN_CPULPM() volatile
    {
        LPCG51_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG51_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG51_AUTHEN_CPULPM() volatile
    {
        LPCG51_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG51_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG51_AUTHEN_CPULPM() volatile
    {
        LPCG51_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG51_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG51_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG51_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG51_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG51_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG51_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG51_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG51_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG51_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG51_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG51_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG51_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG51_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG51_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG51_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG51_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG51_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG51_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG51_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG51_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG51_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG51_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG51_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG51_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG51_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG51_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG51_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG51_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG51_AUTHEN_LOCK_LIST() volatile
    {
        LPCG51_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG51_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG51_AUTHEN_LOCK_LIST() volatile
    {
        LPCG51_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG51_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG51_AUTHEN_LOCK_LIST() volatile
    {
        LPCG51_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG51_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG51_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG51_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG51_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG51_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG51_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG51_AUTHEN = curr;
    }

    /**
     * Get LPCG51_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG51_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG51_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG51_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG51_AUTHEN_LOCK_TZ() volatile
    {
        LPCG51_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG51_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG51_AUTHEN_LOCK_TZ() volatile
    {
        LPCG51_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG51_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG51_AUTHEN_LOCK_TZ() volatile
    {
        LPCG51_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG51_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG51_AUTHEN_TZ_NS() volatile
    {
        return LPCG51_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG51_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG51_AUTHEN_TZ_NS() volatile
    {
        LPCG51_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG51_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG51_AUTHEN_TZ_NS() volatile
    {
        LPCG51_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG51_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG51_AUTHEN_TZ_NS() volatile
    {
        LPCG51_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG51_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG51_AUTHEN_TZ_USER() volatile
    {
        return LPCG51_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG51_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG51_AUTHEN_TZ_USER() volatile
    {
        LPCG51_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG51_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG51_AUTHEN_TZ_USER() volatile
    {
        LPCG51_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG51_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG51_AUTHEN_TZ_USER() volatile
    {
        LPCG51_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG51_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG51_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG51_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG51_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG51_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG51_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG51_AUTHEN = curr;
    }

    /**
     * Get LPCG52_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG52_DIRECT_ON() volatile
    {
        return LPCG52_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG52_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG52_DIRECT_ON() volatile
    {
        LPCG52_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG52_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG52_DIRECT_ON() volatile
    {
        LPCG52_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG52_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG52_DIRECT_ON() volatile
    {
        LPCG52_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG52_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG52_DOMAIN_LEVEL3 get_LPCG52_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG52_DOMAIN_LEVEL3((LPCG52_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG52_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG52_DOMAIN_LEVEL3(
        CCM_LPCG52_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG52_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG52_DOMAIN = curr;
    }

    /**
     * Get LPCG52_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG52_DOMAIN_LEVEL2 get_LPCG52_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG52_DOMAIN_LEVEL2((LPCG52_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG52_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG52_DOMAIN_LEVEL2(
        CCM_LPCG52_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG52_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG52_DOMAIN = curr;
    }

    /**
     * Get LPCG52_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG52_DOMAIN_LEVEL1 get_LPCG52_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG52_DOMAIN_LEVEL1((LPCG52_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG52_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG52_DOMAIN_LEVEL1(
        CCM_LPCG52_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG52_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG52_DOMAIN = curr;
    }

    /**
     * Get LPCG52_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG52_DOMAIN_LEVEL0 get_LPCG52_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG52_DOMAIN_LEVEL0((LPCG52_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG52_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG52_DOMAIN_LEVEL0(
        CCM_LPCG52_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG52_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG52_DOMAIN = curr;
    }

    /**
     * Get LPCG52_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG52_DOMAIN_LEVEL get_LPCG52_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG52_DOMAIN_LEVEL((LPCG52_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG52_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG52_DOMAIN_LEVEL(CCM_LPCG52_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG52_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG52_DOMAIN = curr;
    }

    /**
     * Get all of LPCG52_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG52_DOMAIN(CCM_LPCG52_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG52_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG52_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG52_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG52_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG52_DOMAIN;

        LEVEL3 = CCM_LPCG52_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG52_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG52_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG52_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG52_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG52_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG52_DOMAIN(CCM_LPCG52_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG52_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG52_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG52_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG52_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG52_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG52_DOMAIN = curr;
    }

    /**
     * Get LPCG52_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG52_STATUS0_DOMAIN_ENABLE
    get_LPCG52_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG52_STATUS0_DOMAIN_ENABLE((LPCG52_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG52_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG52_STATUS0_ACTIVE_DOMAIN
    get_LPCG52_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG52_STATUS0_ACTIVE_DOMAIN((LPCG52_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG52_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG52_STATUS0_ON() volatile
    {
        return LPCG52_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG52_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG52_STATUS0(
        CCM_LPCG52_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG52_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG52_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG52_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG52_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG52_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG52_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG52_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG52_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG52_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG52_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG52_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG52_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG52_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG52_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG52_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG52_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG52_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG52_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG52_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG52_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG52_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG52_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG52_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG52_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG52_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG52_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG52_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG52_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG52_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG52_STATUS1_CPU3_MODE get_LPCG52_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG52_STATUS1_CPU3_MODE((LPCG52_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG52_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG52_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG52_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG52_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG52_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG52_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG52_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG52_STATUS1_CPU2_MODE get_LPCG52_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG52_STATUS1_CPU2_MODE((LPCG52_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG52_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG52_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG52_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG52_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG52_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG52_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG52_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG52_STATUS1_CPU1_MODE get_LPCG52_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG52_STATUS1_CPU1_MODE((LPCG52_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG52_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG52_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG52_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG52_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG52_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG52_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG52_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG52_STATUS1_CPU0_MODE get_LPCG52_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG52_STATUS1_CPU0_MODE((LPCG52_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG52_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG52_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG52_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG52_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG52_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG52_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG52_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG52_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG52_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG52_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG52_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG52_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG52_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG52_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG52_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG52_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG52_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG52_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG52_AUTHEN_LOCK_MODE() volatile
    {
        LPCG52_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG52_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG52_AUTHEN_LOCK_MODE() volatile
    {
        LPCG52_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG52_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG52_AUTHEN_LOCK_MODE() volatile
    {
        LPCG52_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG52_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG52_AUTHEN_CPULPM() volatile
    {
        return LPCG52_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG52_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG52_AUTHEN_CPULPM() volatile
    {
        LPCG52_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG52_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG52_AUTHEN_CPULPM() volatile
    {
        LPCG52_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG52_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG52_AUTHEN_CPULPM() volatile
    {
        LPCG52_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG52_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG52_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG52_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG52_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG52_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG52_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG52_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG52_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG52_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG52_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG52_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG52_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG52_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG52_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG52_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG52_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG52_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG52_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG52_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG52_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG52_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG52_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG52_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG52_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG52_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG52_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG52_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG52_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG52_AUTHEN_LOCK_LIST() volatile
    {
        LPCG52_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG52_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG52_AUTHEN_LOCK_LIST() volatile
    {
        LPCG52_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG52_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG52_AUTHEN_LOCK_LIST() volatile
    {
        LPCG52_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG52_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG52_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG52_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG52_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG52_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG52_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG52_AUTHEN = curr;
    }

    /**
     * Get LPCG52_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG52_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG52_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG52_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG52_AUTHEN_LOCK_TZ() volatile
    {
        LPCG52_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG52_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG52_AUTHEN_LOCK_TZ() volatile
    {
        LPCG52_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG52_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG52_AUTHEN_LOCK_TZ() volatile
    {
        LPCG52_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG52_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG52_AUTHEN_TZ_NS() volatile
    {
        return LPCG52_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG52_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG52_AUTHEN_TZ_NS() volatile
    {
        LPCG52_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG52_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG52_AUTHEN_TZ_NS() volatile
    {
        LPCG52_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG52_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG52_AUTHEN_TZ_NS() volatile
    {
        LPCG52_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG52_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG52_AUTHEN_TZ_USER() volatile
    {
        return LPCG52_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG52_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG52_AUTHEN_TZ_USER() volatile
    {
        LPCG52_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG52_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG52_AUTHEN_TZ_USER() volatile
    {
        LPCG52_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG52_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG52_AUTHEN_TZ_USER() volatile
    {
        LPCG52_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG52_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG52_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG52_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG52_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG52_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG52_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG52_AUTHEN = curr;
    }

    /**
     * Get LPCG53_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG53_DIRECT_ON() volatile
    {
        return LPCG53_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG53_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG53_DIRECT_ON() volatile
    {
        LPCG53_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG53_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG53_DIRECT_ON() volatile
    {
        LPCG53_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG53_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG53_DIRECT_ON() volatile
    {
        LPCG53_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG53_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG53_DOMAIN_LEVEL3 get_LPCG53_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG53_DOMAIN_LEVEL3((LPCG53_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG53_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG53_DOMAIN_LEVEL3(
        CCM_LPCG53_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG53_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG53_DOMAIN = curr;
    }

    /**
     * Get LPCG53_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG53_DOMAIN_LEVEL2 get_LPCG53_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG53_DOMAIN_LEVEL2((LPCG53_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG53_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG53_DOMAIN_LEVEL2(
        CCM_LPCG53_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG53_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG53_DOMAIN = curr;
    }

    /**
     * Get LPCG53_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG53_DOMAIN_LEVEL1 get_LPCG53_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG53_DOMAIN_LEVEL1((LPCG53_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG53_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG53_DOMAIN_LEVEL1(
        CCM_LPCG53_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG53_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG53_DOMAIN = curr;
    }

    /**
     * Get LPCG53_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG53_DOMAIN_LEVEL0 get_LPCG53_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG53_DOMAIN_LEVEL0((LPCG53_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG53_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG53_DOMAIN_LEVEL0(
        CCM_LPCG53_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG53_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG53_DOMAIN = curr;
    }

    /**
     * Get LPCG53_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG53_DOMAIN_LEVEL get_LPCG53_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG53_DOMAIN_LEVEL((LPCG53_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG53_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG53_DOMAIN_LEVEL(CCM_LPCG53_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG53_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG53_DOMAIN = curr;
    }

    /**
     * Get all of LPCG53_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG53_DOMAIN(CCM_LPCG53_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG53_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG53_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG53_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG53_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG53_DOMAIN;

        LEVEL3 = CCM_LPCG53_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG53_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG53_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG53_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG53_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG53_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG53_DOMAIN(CCM_LPCG53_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG53_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG53_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG53_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG53_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG53_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG53_DOMAIN = curr;
    }

    /**
     * Get LPCG53_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG53_STATUS0_DOMAIN_ENABLE
    get_LPCG53_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG53_STATUS0_DOMAIN_ENABLE((LPCG53_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG53_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG53_STATUS0_ACTIVE_DOMAIN
    get_LPCG53_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG53_STATUS0_ACTIVE_DOMAIN((LPCG53_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG53_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG53_STATUS0_ON() volatile
    {
        return LPCG53_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG53_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG53_STATUS0(
        CCM_LPCG53_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG53_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG53_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG53_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG53_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG53_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG53_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG53_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG53_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG53_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG53_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG53_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG53_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG53_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG53_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG53_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG53_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG53_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG53_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG53_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG53_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG53_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG53_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG53_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG53_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG53_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG53_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG53_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG53_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG53_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG53_STATUS1_CPU3_MODE get_LPCG53_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG53_STATUS1_CPU3_MODE((LPCG53_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG53_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG53_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG53_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG53_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG53_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG53_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG53_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG53_STATUS1_CPU2_MODE get_LPCG53_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG53_STATUS1_CPU2_MODE((LPCG53_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG53_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG53_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG53_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG53_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG53_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG53_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG53_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG53_STATUS1_CPU1_MODE get_LPCG53_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG53_STATUS1_CPU1_MODE((LPCG53_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG53_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG53_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG53_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG53_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG53_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG53_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG53_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG53_STATUS1_CPU0_MODE get_LPCG53_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG53_STATUS1_CPU0_MODE((LPCG53_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG53_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG53_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG53_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG53_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG53_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG53_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG53_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG53_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG53_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG53_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG53_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG53_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG53_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG53_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG53_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG53_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG53_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG53_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG53_AUTHEN_LOCK_MODE() volatile
    {
        LPCG53_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG53_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG53_AUTHEN_LOCK_MODE() volatile
    {
        LPCG53_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG53_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG53_AUTHEN_LOCK_MODE() volatile
    {
        LPCG53_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG53_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG53_AUTHEN_CPULPM() volatile
    {
        return LPCG53_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG53_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG53_AUTHEN_CPULPM() volatile
    {
        LPCG53_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG53_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG53_AUTHEN_CPULPM() volatile
    {
        LPCG53_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG53_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG53_AUTHEN_CPULPM() volatile
    {
        LPCG53_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG53_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG53_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG53_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG53_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG53_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG53_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG53_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG53_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG53_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG53_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG53_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG53_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG53_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG53_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG53_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG53_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG53_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG53_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG53_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG53_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG53_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG53_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG53_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG53_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG53_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG53_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG53_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG53_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG53_AUTHEN_LOCK_LIST() volatile
    {
        LPCG53_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG53_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG53_AUTHEN_LOCK_LIST() volatile
    {
        LPCG53_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG53_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG53_AUTHEN_LOCK_LIST() volatile
    {
        LPCG53_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG53_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG53_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG53_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG53_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG53_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG53_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG53_AUTHEN = curr;
    }

    /**
     * Get LPCG53_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG53_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG53_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG53_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG53_AUTHEN_LOCK_TZ() volatile
    {
        LPCG53_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG53_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG53_AUTHEN_LOCK_TZ() volatile
    {
        LPCG53_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG53_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG53_AUTHEN_LOCK_TZ() volatile
    {
        LPCG53_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG53_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG53_AUTHEN_TZ_NS() volatile
    {
        return LPCG53_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG53_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG53_AUTHEN_TZ_NS() volatile
    {
        LPCG53_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG53_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG53_AUTHEN_TZ_NS() volatile
    {
        LPCG53_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG53_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG53_AUTHEN_TZ_NS() volatile
    {
        LPCG53_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG53_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG53_AUTHEN_TZ_USER() volatile
    {
        return LPCG53_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG53_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG53_AUTHEN_TZ_USER() volatile
    {
        LPCG53_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG53_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG53_AUTHEN_TZ_USER() volatile
    {
        LPCG53_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG53_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG53_AUTHEN_TZ_USER() volatile
    {
        LPCG53_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG53_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG53_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG53_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG53_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG53_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG53_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG53_AUTHEN = curr;
    }

    /**
     * Get LPCG54_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG54_DIRECT_ON() volatile
    {
        return LPCG54_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG54_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG54_DIRECT_ON() volatile
    {
        LPCG54_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG54_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG54_DIRECT_ON() volatile
    {
        LPCG54_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG54_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG54_DIRECT_ON() volatile
    {
        LPCG54_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG54_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG54_DOMAIN_LEVEL3 get_LPCG54_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG54_DOMAIN_LEVEL3((LPCG54_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG54_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG54_DOMAIN_LEVEL3(
        CCM_LPCG54_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG54_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG54_DOMAIN = curr;
    }

    /**
     * Get LPCG54_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG54_DOMAIN_LEVEL2 get_LPCG54_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG54_DOMAIN_LEVEL2((LPCG54_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG54_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG54_DOMAIN_LEVEL2(
        CCM_LPCG54_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG54_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG54_DOMAIN = curr;
    }

    /**
     * Get LPCG54_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG54_DOMAIN_LEVEL1 get_LPCG54_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG54_DOMAIN_LEVEL1((LPCG54_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG54_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG54_DOMAIN_LEVEL1(
        CCM_LPCG54_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG54_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG54_DOMAIN = curr;
    }

    /**
     * Get LPCG54_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG54_DOMAIN_LEVEL0 get_LPCG54_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG54_DOMAIN_LEVEL0((LPCG54_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG54_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG54_DOMAIN_LEVEL0(
        CCM_LPCG54_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG54_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG54_DOMAIN = curr;
    }

    /**
     * Get LPCG54_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG54_DOMAIN_LEVEL get_LPCG54_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG54_DOMAIN_LEVEL((LPCG54_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG54_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG54_DOMAIN_LEVEL(CCM_LPCG54_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG54_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG54_DOMAIN = curr;
    }

    /**
     * Get all of LPCG54_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG54_DOMAIN(CCM_LPCG54_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG54_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG54_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG54_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG54_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG54_DOMAIN;

        LEVEL3 = CCM_LPCG54_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG54_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG54_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG54_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG54_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG54_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG54_DOMAIN(CCM_LPCG54_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG54_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG54_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG54_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG54_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG54_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG54_DOMAIN = curr;
    }

    /**
     * Get LPCG54_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG54_STATUS0_DOMAIN_ENABLE
    get_LPCG54_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG54_STATUS0_DOMAIN_ENABLE((LPCG54_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG54_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG54_STATUS0_ACTIVE_DOMAIN
    get_LPCG54_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG54_STATUS0_ACTIVE_DOMAIN((LPCG54_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG54_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG54_STATUS0_ON() volatile
    {
        return LPCG54_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG54_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG54_STATUS0(
        CCM_LPCG54_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG54_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG54_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG54_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG54_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG54_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG54_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG54_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG54_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG54_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG54_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG54_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG54_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG54_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG54_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG54_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG54_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG54_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG54_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG54_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG54_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG54_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG54_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG54_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG54_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG54_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG54_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG54_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG54_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG54_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG54_STATUS1_CPU3_MODE get_LPCG54_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG54_STATUS1_CPU3_MODE((LPCG54_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG54_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG54_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG54_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG54_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG54_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG54_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG54_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG54_STATUS1_CPU2_MODE get_LPCG54_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG54_STATUS1_CPU2_MODE((LPCG54_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG54_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG54_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG54_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG54_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG54_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG54_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG54_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG54_STATUS1_CPU1_MODE get_LPCG54_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG54_STATUS1_CPU1_MODE((LPCG54_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG54_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG54_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG54_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG54_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG54_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG54_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG54_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG54_STATUS1_CPU0_MODE get_LPCG54_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG54_STATUS1_CPU0_MODE((LPCG54_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG54_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG54_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG54_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG54_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG54_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG54_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG54_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG54_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG54_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG54_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG54_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG54_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG54_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG54_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG54_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG54_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG54_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG54_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG54_AUTHEN_LOCK_MODE() volatile
    {
        LPCG54_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG54_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG54_AUTHEN_LOCK_MODE() volatile
    {
        LPCG54_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG54_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG54_AUTHEN_LOCK_MODE() volatile
    {
        LPCG54_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG54_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG54_AUTHEN_CPULPM() volatile
    {
        return LPCG54_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG54_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG54_AUTHEN_CPULPM() volatile
    {
        LPCG54_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG54_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG54_AUTHEN_CPULPM() volatile
    {
        LPCG54_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG54_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG54_AUTHEN_CPULPM() volatile
    {
        LPCG54_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG54_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG54_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG54_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG54_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG54_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG54_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG54_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG54_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG54_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG54_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG54_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG54_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG54_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG54_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG54_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG54_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG54_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG54_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG54_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG54_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG54_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG54_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG54_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG54_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG54_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG54_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG54_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG54_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG54_AUTHEN_LOCK_LIST() volatile
    {
        LPCG54_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG54_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG54_AUTHEN_LOCK_LIST() volatile
    {
        LPCG54_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG54_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG54_AUTHEN_LOCK_LIST() volatile
    {
        LPCG54_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG54_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG54_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG54_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG54_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG54_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG54_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG54_AUTHEN = curr;
    }

    /**
     * Get LPCG54_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG54_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG54_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG54_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG54_AUTHEN_LOCK_TZ() volatile
    {
        LPCG54_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG54_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG54_AUTHEN_LOCK_TZ() volatile
    {
        LPCG54_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG54_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG54_AUTHEN_LOCK_TZ() volatile
    {
        LPCG54_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG54_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG54_AUTHEN_TZ_NS() volatile
    {
        return LPCG54_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG54_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG54_AUTHEN_TZ_NS() volatile
    {
        LPCG54_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG54_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG54_AUTHEN_TZ_NS() volatile
    {
        LPCG54_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG54_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG54_AUTHEN_TZ_NS() volatile
    {
        LPCG54_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG54_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG54_AUTHEN_TZ_USER() volatile
    {
        return LPCG54_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG54_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG54_AUTHEN_TZ_USER() volatile
    {
        LPCG54_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG54_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG54_AUTHEN_TZ_USER() volatile
    {
        LPCG54_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG54_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG54_AUTHEN_TZ_USER() volatile
    {
        LPCG54_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG54_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG54_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG54_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG54_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG54_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG54_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG54_AUTHEN = curr;
    }

    /**
     * Get LPCG55_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG55_DIRECT_ON() volatile
    {
        return LPCG55_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG55_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG55_DIRECT_ON() volatile
    {
        LPCG55_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG55_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG55_DIRECT_ON() volatile
    {
        LPCG55_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG55_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG55_DIRECT_ON() volatile
    {
        LPCG55_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG55_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG55_DOMAIN_LEVEL3 get_LPCG55_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG55_DOMAIN_LEVEL3((LPCG55_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG55_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG55_DOMAIN_LEVEL3(
        CCM_LPCG55_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG55_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG55_DOMAIN = curr;
    }

    /**
     * Get LPCG55_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG55_DOMAIN_LEVEL2 get_LPCG55_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG55_DOMAIN_LEVEL2((LPCG55_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG55_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG55_DOMAIN_LEVEL2(
        CCM_LPCG55_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG55_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG55_DOMAIN = curr;
    }

    /**
     * Get LPCG55_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG55_DOMAIN_LEVEL1 get_LPCG55_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG55_DOMAIN_LEVEL1((LPCG55_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG55_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG55_DOMAIN_LEVEL1(
        CCM_LPCG55_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG55_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG55_DOMAIN = curr;
    }

    /**
     * Get LPCG55_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG55_DOMAIN_LEVEL0 get_LPCG55_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG55_DOMAIN_LEVEL0((LPCG55_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG55_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG55_DOMAIN_LEVEL0(
        CCM_LPCG55_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG55_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG55_DOMAIN = curr;
    }

    /**
     * Get LPCG55_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG55_DOMAIN_LEVEL get_LPCG55_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG55_DOMAIN_LEVEL((LPCG55_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG55_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG55_DOMAIN_LEVEL(CCM_LPCG55_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG55_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG55_DOMAIN = curr;
    }

    /**
     * Get all of LPCG55_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG55_DOMAIN(CCM_LPCG55_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG55_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG55_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG55_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG55_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG55_DOMAIN;

        LEVEL3 = CCM_LPCG55_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG55_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG55_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG55_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG55_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG55_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG55_DOMAIN(CCM_LPCG55_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG55_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG55_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG55_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG55_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG55_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG55_DOMAIN = curr;
    }

    /**
     * Get LPCG55_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG55_STATUS0_DOMAIN_ENABLE
    get_LPCG55_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG55_STATUS0_DOMAIN_ENABLE((LPCG55_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG55_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG55_STATUS0_ACTIVE_DOMAIN
    get_LPCG55_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG55_STATUS0_ACTIVE_DOMAIN((LPCG55_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG55_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG55_STATUS0_ON() volatile
    {
        return LPCG55_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG55_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG55_STATUS0(
        CCM_LPCG55_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG55_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG55_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG55_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG55_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG55_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG55_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG55_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG55_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG55_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG55_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG55_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG55_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG55_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG55_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG55_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG55_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG55_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG55_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG55_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG55_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG55_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG55_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG55_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG55_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG55_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG55_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG55_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG55_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG55_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG55_STATUS1_CPU3_MODE get_LPCG55_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG55_STATUS1_CPU3_MODE((LPCG55_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG55_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG55_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG55_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG55_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG55_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG55_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG55_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG55_STATUS1_CPU2_MODE get_LPCG55_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG55_STATUS1_CPU2_MODE((LPCG55_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG55_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG55_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG55_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG55_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG55_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG55_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG55_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG55_STATUS1_CPU1_MODE get_LPCG55_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG55_STATUS1_CPU1_MODE((LPCG55_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG55_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG55_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG55_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG55_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG55_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG55_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG55_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG55_STATUS1_CPU0_MODE get_LPCG55_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG55_STATUS1_CPU0_MODE((LPCG55_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG55_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG55_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG55_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG55_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG55_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG55_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG55_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG55_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG55_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG55_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG55_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG55_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG55_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG55_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG55_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG55_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG55_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG55_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG55_AUTHEN_LOCK_MODE() volatile
    {
        LPCG55_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG55_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG55_AUTHEN_LOCK_MODE() volatile
    {
        LPCG55_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG55_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG55_AUTHEN_LOCK_MODE() volatile
    {
        LPCG55_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG55_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG55_AUTHEN_CPULPM() volatile
    {
        return LPCG55_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG55_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG55_AUTHEN_CPULPM() volatile
    {
        LPCG55_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG55_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG55_AUTHEN_CPULPM() volatile
    {
        LPCG55_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG55_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG55_AUTHEN_CPULPM() volatile
    {
        LPCG55_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG55_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG55_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG55_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG55_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG55_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG55_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG55_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG55_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG55_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG55_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG55_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG55_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG55_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG55_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG55_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG55_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG55_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG55_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG55_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG55_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG55_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG55_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG55_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG55_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG55_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG55_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG55_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG55_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG55_AUTHEN_LOCK_LIST() volatile
    {
        LPCG55_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG55_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG55_AUTHEN_LOCK_LIST() volatile
    {
        LPCG55_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG55_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG55_AUTHEN_LOCK_LIST() volatile
    {
        LPCG55_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG55_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG55_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG55_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG55_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG55_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG55_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG55_AUTHEN = curr;
    }

    /**
     * Get LPCG55_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG55_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG55_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG55_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG55_AUTHEN_LOCK_TZ() volatile
    {
        LPCG55_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG55_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG55_AUTHEN_LOCK_TZ() volatile
    {
        LPCG55_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG55_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG55_AUTHEN_LOCK_TZ() volatile
    {
        LPCG55_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG55_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG55_AUTHEN_TZ_NS() volatile
    {
        return LPCG55_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG55_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG55_AUTHEN_TZ_NS() volatile
    {
        LPCG55_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG55_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG55_AUTHEN_TZ_NS() volatile
    {
        LPCG55_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG55_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG55_AUTHEN_TZ_NS() volatile
    {
        LPCG55_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG55_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG55_AUTHEN_TZ_USER() volatile
    {
        return LPCG55_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG55_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG55_AUTHEN_TZ_USER() volatile
    {
        LPCG55_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG55_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG55_AUTHEN_TZ_USER() volatile
    {
        LPCG55_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG55_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG55_AUTHEN_TZ_USER() volatile
    {
        LPCG55_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG55_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG55_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG55_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG55_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG55_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG55_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG55_AUTHEN = curr;
    }

    /**
     * Get LPCG56_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG56_DIRECT_ON() volatile
    {
        return LPCG56_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG56_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG56_DIRECT_ON() volatile
    {
        LPCG56_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG56_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG56_DIRECT_ON() volatile
    {
        LPCG56_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG56_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG56_DIRECT_ON() volatile
    {
        LPCG56_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG56_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG56_DOMAIN_LEVEL3 get_LPCG56_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG56_DOMAIN_LEVEL3((LPCG56_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG56_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG56_DOMAIN_LEVEL3(
        CCM_LPCG56_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG56_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG56_DOMAIN = curr;
    }

    /**
     * Get LPCG56_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG56_DOMAIN_LEVEL2 get_LPCG56_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG56_DOMAIN_LEVEL2((LPCG56_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG56_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG56_DOMAIN_LEVEL2(
        CCM_LPCG56_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG56_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG56_DOMAIN = curr;
    }

    /**
     * Get LPCG56_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG56_DOMAIN_LEVEL1 get_LPCG56_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG56_DOMAIN_LEVEL1((LPCG56_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG56_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG56_DOMAIN_LEVEL1(
        CCM_LPCG56_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG56_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG56_DOMAIN = curr;
    }

    /**
     * Get LPCG56_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG56_DOMAIN_LEVEL0 get_LPCG56_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG56_DOMAIN_LEVEL0((LPCG56_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG56_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG56_DOMAIN_LEVEL0(
        CCM_LPCG56_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG56_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG56_DOMAIN = curr;
    }

    /**
     * Get LPCG56_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG56_DOMAIN_LEVEL get_LPCG56_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG56_DOMAIN_LEVEL((LPCG56_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG56_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG56_DOMAIN_LEVEL(CCM_LPCG56_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG56_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG56_DOMAIN = curr;
    }

    /**
     * Get all of LPCG56_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG56_DOMAIN(CCM_LPCG56_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG56_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG56_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG56_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG56_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG56_DOMAIN;

        LEVEL3 = CCM_LPCG56_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG56_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG56_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG56_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG56_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG56_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG56_DOMAIN(CCM_LPCG56_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG56_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG56_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG56_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG56_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG56_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG56_DOMAIN = curr;
    }

    /**
     * Get LPCG56_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG56_STATUS0_DOMAIN_ENABLE
    get_LPCG56_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG56_STATUS0_DOMAIN_ENABLE((LPCG56_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG56_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG56_STATUS0_ACTIVE_DOMAIN
    get_LPCG56_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG56_STATUS0_ACTIVE_DOMAIN((LPCG56_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG56_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG56_STATUS0_ON() volatile
    {
        return LPCG56_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG56_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG56_STATUS0(
        CCM_LPCG56_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG56_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG56_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG56_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG56_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG56_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG56_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG56_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG56_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG56_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG56_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG56_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG56_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG56_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG56_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG56_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG56_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG56_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG56_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG56_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG56_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG56_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG56_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG56_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG56_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG56_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG56_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG56_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG56_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG56_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG56_STATUS1_CPU3_MODE get_LPCG56_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG56_STATUS1_CPU3_MODE((LPCG56_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG56_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG56_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG56_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG56_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG56_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG56_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG56_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG56_STATUS1_CPU2_MODE get_LPCG56_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG56_STATUS1_CPU2_MODE((LPCG56_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG56_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG56_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG56_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG56_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG56_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG56_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG56_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG56_STATUS1_CPU1_MODE get_LPCG56_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG56_STATUS1_CPU1_MODE((LPCG56_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG56_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG56_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG56_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG56_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG56_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG56_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG56_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG56_STATUS1_CPU0_MODE get_LPCG56_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG56_STATUS1_CPU0_MODE((LPCG56_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG56_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG56_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG56_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG56_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG56_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG56_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG56_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG56_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG56_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG56_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG56_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG56_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG56_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG56_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG56_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG56_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG56_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG56_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG56_AUTHEN_LOCK_MODE() volatile
    {
        LPCG56_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG56_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG56_AUTHEN_LOCK_MODE() volatile
    {
        LPCG56_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG56_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG56_AUTHEN_LOCK_MODE() volatile
    {
        LPCG56_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG56_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG56_AUTHEN_CPULPM() volatile
    {
        return LPCG56_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG56_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG56_AUTHEN_CPULPM() volatile
    {
        LPCG56_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG56_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG56_AUTHEN_CPULPM() volatile
    {
        LPCG56_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG56_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG56_AUTHEN_CPULPM() volatile
    {
        LPCG56_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG56_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG56_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG56_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG56_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG56_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG56_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG56_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG56_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG56_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG56_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG56_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG56_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG56_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG56_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG56_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG56_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG56_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG56_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG56_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG56_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG56_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG56_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG56_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG56_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG56_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG56_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG56_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG56_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG56_AUTHEN_LOCK_LIST() volatile
    {
        LPCG56_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG56_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG56_AUTHEN_LOCK_LIST() volatile
    {
        LPCG56_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG56_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG56_AUTHEN_LOCK_LIST() volatile
    {
        LPCG56_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG56_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG56_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG56_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG56_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG56_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG56_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG56_AUTHEN = curr;
    }

    /**
     * Get LPCG56_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG56_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG56_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG56_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG56_AUTHEN_LOCK_TZ() volatile
    {
        LPCG56_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG56_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG56_AUTHEN_LOCK_TZ() volatile
    {
        LPCG56_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG56_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG56_AUTHEN_LOCK_TZ() volatile
    {
        LPCG56_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG56_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG56_AUTHEN_TZ_NS() volatile
    {
        return LPCG56_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG56_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG56_AUTHEN_TZ_NS() volatile
    {
        LPCG56_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG56_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG56_AUTHEN_TZ_NS() volatile
    {
        LPCG56_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG56_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG56_AUTHEN_TZ_NS() volatile
    {
        LPCG56_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG56_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG56_AUTHEN_TZ_USER() volatile
    {
        return LPCG56_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG56_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG56_AUTHEN_TZ_USER() volatile
    {
        LPCG56_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG56_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG56_AUTHEN_TZ_USER() volatile
    {
        LPCG56_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG56_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG56_AUTHEN_TZ_USER() volatile
    {
        LPCG56_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG56_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG56_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG56_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG56_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG56_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG56_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG56_AUTHEN = curr;
    }

    /**
     * Get LPCG57_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG57_DIRECT_ON() volatile
    {
        return LPCG57_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG57_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG57_DIRECT_ON() volatile
    {
        LPCG57_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG57_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG57_DIRECT_ON() volatile
    {
        LPCG57_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG57_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG57_DIRECT_ON() volatile
    {
        LPCG57_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG57_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG57_DOMAIN_LEVEL3 get_LPCG57_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG57_DOMAIN_LEVEL3((LPCG57_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG57_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG57_DOMAIN_LEVEL3(
        CCM_LPCG57_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG57_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG57_DOMAIN = curr;
    }

    /**
     * Get LPCG57_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG57_DOMAIN_LEVEL2 get_LPCG57_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG57_DOMAIN_LEVEL2((LPCG57_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG57_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG57_DOMAIN_LEVEL2(
        CCM_LPCG57_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG57_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG57_DOMAIN = curr;
    }

    /**
     * Get LPCG57_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG57_DOMAIN_LEVEL1 get_LPCG57_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG57_DOMAIN_LEVEL1((LPCG57_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG57_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG57_DOMAIN_LEVEL1(
        CCM_LPCG57_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG57_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG57_DOMAIN = curr;
    }

    /**
     * Get LPCG57_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG57_DOMAIN_LEVEL0 get_LPCG57_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG57_DOMAIN_LEVEL0((LPCG57_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG57_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG57_DOMAIN_LEVEL0(
        CCM_LPCG57_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG57_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG57_DOMAIN = curr;
    }

    /**
     * Get LPCG57_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG57_DOMAIN_LEVEL get_LPCG57_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG57_DOMAIN_LEVEL((LPCG57_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG57_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG57_DOMAIN_LEVEL(CCM_LPCG57_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG57_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG57_DOMAIN = curr;
    }

    /**
     * Get all of LPCG57_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG57_DOMAIN(CCM_LPCG57_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG57_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG57_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG57_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG57_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG57_DOMAIN;

        LEVEL3 = CCM_LPCG57_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG57_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG57_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG57_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG57_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG57_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG57_DOMAIN(CCM_LPCG57_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG57_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG57_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG57_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG57_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG57_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG57_DOMAIN = curr;
    }

    /**
     * Get LPCG57_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG57_STATUS0_DOMAIN_ENABLE
    get_LPCG57_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG57_STATUS0_DOMAIN_ENABLE((LPCG57_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG57_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG57_STATUS0_ACTIVE_DOMAIN
    get_LPCG57_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG57_STATUS0_ACTIVE_DOMAIN((LPCG57_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG57_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG57_STATUS0_ON() volatile
    {
        return LPCG57_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG57_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG57_STATUS0(
        CCM_LPCG57_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG57_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG57_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG57_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG57_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG57_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG57_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG57_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG57_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG57_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG57_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG57_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG57_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG57_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG57_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG57_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG57_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG57_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG57_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG57_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG57_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG57_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG57_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG57_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG57_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG57_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG57_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG57_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG57_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG57_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG57_STATUS1_CPU3_MODE get_LPCG57_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG57_STATUS1_CPU3_MODE((LPCG57_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG57_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG57_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG57_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG57_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG57_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG57_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG57_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG57_STATUS1_CPU2_MODE get_LPCG57_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG57_STATUS1_CPU2_MODE((LPCG57_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG57_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG57_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG57_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG57_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG57_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG57_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG57_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG57_STATUS1_CPU1_MODE get_LPCG57_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG57_STATUS1_CPU1_MODE((LPCG57_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG57_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG57_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG57_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG57_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG57_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG57_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG57_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG57_STATUS1_CPU0_MODE get_LPCG57_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG57_STATUS1_CPU0_MODE((LPCG57_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG57_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG57_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG57_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG57_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG57_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG57_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG57_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG57_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG57_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG57_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG57_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG57_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG57_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG57_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG57_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG57_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG57_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG57_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG57_AUTHEN_LOCK_MODE() volatile
    {
        LPCG57_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG57_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG57_AUTHEN_LOCK_MODE() volatile
    {
        LPCG57_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG57_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG57_AUTHEN_LOCK_MODE() volatile
    {
        LPCG57_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG57_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG57_AUTHEN_CPULPM() volatile
    {
        return LPCG57_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG57_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG57_AUTHEN_CPULPM() volatile
    {
        LPCG57_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG57_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG57_AUTHEN_CPULPM() volatile
    {
        LPCG57_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG57_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG57_AUTHEN_CPULPM() volatile
    {
        LPCG57_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG57_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG57_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG57_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG57_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG57_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG57_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG57_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG57_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG57_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG57_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG57_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG57_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG57_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG57_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG57_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG57_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG57_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG57_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG57_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG57_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG57_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG57_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG57_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG57_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG57_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG57_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG57_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG57_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG57_AUTHEN_LOCK_LIST() volatile
    {
        LPCG57_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG57_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG57_AUTHEN_LOCK_LIST() volatile
    {
        LPCG57_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG57_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG57_AUTHEN_LOCK_LIST() volatile
    {
        LPCG57_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG57_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG57_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG57_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG57_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG57_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG57_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG57_AUTHEN = curr;
    }

    /**
     * Get LPCG57_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG57_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG57_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG57_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG57_AUTHEN_LOCK_TZ() volatile
    {
        LPCG57_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG57_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG57_AUTHEN_LOCK_TZ() volatile
    {
        LPCG57_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG57_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG57_AUTHEN_LOCK_TZ() volatile
    {
        LPCG57_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG57_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG57_AUTHEN_TZ_NS() volatile
    {
        return LPCG57_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG57_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG57_AUTHEN_TZ_NS() volatile
    {
        LPCG57_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG57_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG57_AUTHEN_TZ_NS() volatile
    {
        LPCG57_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG57_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG57_AUTHEN_TZ_NS() volatile
    {
        LPCG57_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG57_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG57_AUTHEN_TZ_USER() volatile
    {
        return LPCG57_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG57_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG57_AUTHEN_TZ_USER() volatile
    {
        LPCG57_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG57_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG57_AUTHEN_TZ_USER() volatile
    {
        LPCG57_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG57_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG57_AUTHEN_TZ_USER() volatile
    {
        LPCG57_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG57_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG57_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG57_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG57_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG57_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG57_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG57_AUTHEN = curr;
    }

    /**
     * Get LPCG58_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG58_DIRECT_ON() volatile
    {
        return LPCG58_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG58_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG58_DIRECT_ON() volatile
    {
        LPCG58_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG58_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG58_DIRECT_ON() volatile
    {
        LPCG58_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG58_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG58_DIRECT_ON() volatile
    {
        LPCG58_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG58_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG58_DOMAIN_LEVEL3 get_LPCG58_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG58_DOMAIN_LEVEL3((LPCG58_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG58_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG58_DOMAIN_LEVEL3(
        CCM_LPCG58_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG58_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG58_DOMAIN = curr;
    }

    /**
     * Get LPCG58_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG58_DOMAIN_LEVEL2 get_LPCG58_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG58_DOMAIN_LEVEL2((LPCG58_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG58_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG58_DOMAIN_LEVEL2(
        CCM_LPCG58_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG58_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG58_DOMAIN = curr;
    }

    /**
     * Get LPCG58_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG58_DOMAIN_LEVEL1 get_LPCG58_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG58_DOMAIN_LEVEL1((LPCG58_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG58_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG58_DOMAIN_LEVEL1(
        CCM_LPCG58_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG58_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG58_DOMAIN = curr;
    }

    /**
     * Get LPCG58_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG58_DOMAIN_LEVEL0 get_LPCG58_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG58_DOMAIN_LEVEL0((LPCG58_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG58_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG58_DOMAIN_LEVEL0(
        CCM_LPCG58_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG58_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG58_DOMAIN = curr;
    }

    /**
     * Get LPCG58_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG58_DOMAIN_LEVEL get_LPCG58_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG58_DOMAIN_LEVEL((LPCG58_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG58_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG58_DOMAIN_LEVEL(CCM_LPCG58_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG58_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG58_DOMAIN = curr;
    }

    /**
     * Get all of LPCG58_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG58_DOMAIN(CCM_LPCG58_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG58_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG58_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG58_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG58_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG58_DOMAIN;

        LEVEL3 = CCM_LPCG58_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG58_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG58_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG58_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG58_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG58_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG58_DOMAIN(CCM_LPCG58_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG58_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG58_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG58_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG58_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG58_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG58_DOMAIN = curr;
    }

    /**
     * Get LPCG58_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG58_STATUS0_DOMAIN_ENABLE
    get_LPCG58_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG58_STATUS0_DOMAIN_ENABLE((LPCG58_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG58_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG58_STATUS0_ACTIVE_DOMAIN
    get_LPCG58_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG58_STATUS0_ACTIVE_DOMAIN((LPCG58_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG58_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG58_STATUS0_ON() volatile
    {
        return LPCG58_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG58_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG58_STATUS0(
        CCM_LPCG58_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG58_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG58_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG58_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG58_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG58_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG58_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG58_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG58_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG58_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG58_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG58_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG58_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG58_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG58_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG58_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG58_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG58_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG58_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG58_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG58_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG58_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG58_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG58_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG58_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG58_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG58_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG58_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG58_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG58_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG58_STATUS1_CPU3_MODE get_LPCG58_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG58_STATUS1_CPU3_MODE((LPCG58_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG58_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG58_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG58_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG58_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG58_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG58_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG58_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG58_STATUS1_CPU2_MODE get_LPCG58_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG58_STATUS1_CPU2_MODE((LPCG58_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG58_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG58_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG58_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG58_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG58_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG58_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG58_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG58_STATUS1_CPU1_MODE get_LPCG58_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG58_STATUS1_CPU1_MODE((LPCG58_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG58_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG58_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG58_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG58_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG58_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG58_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG58_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG58_STATUS1_CPU0_MODE get_LPCG58_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG58_STATUS1_CPU0_MODE((LPCG58_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG58_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG58_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG58_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG58_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG58_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG58_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG58_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG58_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG58_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG58_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG58_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG58_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG58_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG58_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG58_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG58_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG58_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG58_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG58_AUTHEN_LOCK_MODE() volatile
    {
        LPCG58_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG58_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG58_AUTHEN_LOCK_MODE() volatile
    {
        LPCG58_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG58_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG58_AUTHEN_LOCK_MODE() volatile
    {
        LPCG58_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG58_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG58_AUTHEN_CPULPM() volatile
    {
        return LPCG58_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG58_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG58_AUTHEN_CPULPM() volatile
    {
        LPCG58_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG58_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG58_AUTHEN_CPULPM() volatile
    {
        LPCG58_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG58_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG58_AUTHEN_CPULPM() volatile
    {
        LPCG58_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG58_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG58_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG58_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG58_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG58_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG58_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG58_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG58_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG58_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG58_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG58_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG58_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG58_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG58_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG58_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG58_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG58_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG58_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG58_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG58_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG58_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG58_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG58_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG58_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG58_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG58_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG58_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG58_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG58_AUTHEN_LOCK_LIST() volatile
    {
        LPCG58_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG58_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG58_AUTHEN_LOCK_LIST() volatile
    {
        LPCG58_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG58_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG58_AUTHEN_LOCK_LIST() volatile
    {
        LPCG58_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG58_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG58_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG58_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG58_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG58_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG58_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG58_AUTHEN = curr;
    }

    /**
     * Get LPCG58_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG58_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG58_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG58_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG58_AUTHEN_LOCK_TZ() volatile
    {
        LPCG58_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG58_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG58_AUTHEN_LOCK_TZ() volatile
    {
        LPCG58_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG58_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG58_AUTHEN_LOCK_TZ() volatile
    {
        LPCG58_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG58_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG58_AUTHEN_TZ_NS() volatile
    {
        return LPCG58_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG58_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG58_AUTHEN_TZ_NS() volatile
    {
        LPCG58_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG58_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG58_AUTHEN_TZ_NS() volatile
    {
        LPCG58_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG58_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG58_AUTHEN_TZ_NS() volatile
    {
        LPCG58_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG58_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG58_AUTHEN_TZ_USER() volatile
    {
        return LPCG58_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG58_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG58_AUTHEN_TZ_USER() volatile
    {
        LPCG58_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG58_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG58_AUTHEN_TZ_USER() volatile
    {
        LPCG58_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG58_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG58_AUTHEN_TZ_USER() volatile
    {
        LPCG58_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG58_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG58_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG58_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG58_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG58_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG58_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG58_AUTHEN = curr;
    }

    /**
     * Get LPCG59_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG59_DIRECT_ON() volatile
    {
        return LPCG59_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG59_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG59_DIRECT_ON() volatile
    {
        LPCG59_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG59_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG59_DIRECT_ON() volatile
    {
        LPCG59_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG59_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG59_DIRECT_ON() volatile
    {
        LPCG59_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG59_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG59_DOMAIN_LEVEL3 get_LPCG59_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG59_DOMAIN_LEVEL3((LPCG59_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG59_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG59_DOMAIN_LEVEL3(
        CCM_LPCG59_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG59_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG59_DOMAIN = curr;
    }

    /**
     * Get LPCG59_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG59_DOMAIN_LEVEL2 get_LPCG59_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG59_DOMAIN_LEVEL2((LPCG59_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG59_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG59_DOMAIN_LEVEL2(
        CCM_LPCG59_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG59_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG59_DOMAIN = curr;
    }

    /**
     * Get LPCG59_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG59_DOMAIN_LEVEL1 get_LPCG59_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG59_DOMAIN_LEVEL1((LPCG59_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG59_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG59_DOMAIN_LEVEL1(
        CCM_LPCG59_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG59_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG59_DOMAIN = curr;
    }

    /**
     * Get LPCG59_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG59_DOMAIN_LEVEL0 get_LPCG59_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG59_DOMAIN_LEVEL0((LPCG59_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG59_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG59_DOMAIN_LEVEL0(
        CCM_LPCG59_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG59_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG59_DOMAIN = curr;
    }

    /**
     * Get LPCG59_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG59_DOMAIN_LEVEL get_LPCG59_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG59_DOMAIN_LEVEL((LPCG59_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG59_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG59_DOMAIN_LEVEL(CCM_LPCG59_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG59_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG59_DOMAIN = curr;
    }

    /**
     * Get all of LPCG59_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG59_DOMAIN(CCM_LPCG59_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG59_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG59_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG59_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG59_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG59_DOMAIN;

        LEVEL3 = CCM_LPCG59_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG59_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG59_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG59_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG59_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG59_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG59_DOMAIN(CCM_LPCG59_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG59_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG59_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG59_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG59_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG59_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG59_DOMAIN = curr;
    }

    /**
     * Get LPCG59_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG59_STATUS0_DOMAIN_ENABLE
    get_LPCG59_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG59_STATUS0_DOMAIN_ENABLE((LPCG59_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG59_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG59_STATUS0_ACTIVE_DOMAIN
    get_LPCG59_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG59_STATUS0_ACTIVE_DOMAIN((LPCG59_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG59_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG59_STATUS0_ON() volatile
    {
        return LPCG59_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG59_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG59_STATUS0(
        CCM_LPCG59_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG59_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG59_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG59_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG59_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG59_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG59_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG59_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG59_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG59_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG59_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG59_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG59_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG59_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG59_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG59_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG59_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG59_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG59_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG59_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG59_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG59_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG59_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG59_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG59_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG59_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG59_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG59_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG59_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG59_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG59_STATUS1_CPU3_MODE get_LPCG59_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG59_STATUS1_CPU3_MODE((LPCG59_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG59_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG59_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG59_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG59_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG59_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG59_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG59_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG59_STATUS1_CPU2_MODE get_LPCG59_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG59_STATUS1_CPU2_MODE((LPCG59_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG59_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG59_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG59_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG59_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG59_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG59_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG59_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG59_STATUS1_CPU1_MODE get_LPCG59_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG59_STATUS1_CPU1_MODE((LPCG59_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG59_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG59_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG59_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG59_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG59_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG59_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG59_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG59_STATUS1_CPU0_MODE get_LPCG59_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG59_STATUS1_CPU0_MODE((LPCG59_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG59_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG59_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG59_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG59_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG59_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG59_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG59_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG59_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG59_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG59_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG59_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG59_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG59_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG59_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG59_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG59_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG59_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG59_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG59_AUTHEN_LOCK_MODE() volatile
    {
        LPCG59_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG59_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG59_AUTHEN_LOCK_MODE() volatile
    {
        LPCG59_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG59_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG59_AUTHEN_LOCK_MODE() volatile
    {
        LPCG59_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG59_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG59_AUTHEN_CPULPM() volatile
    {
        return LPCG59_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG59_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG59_AUTHEN_CPULPM() volatile
    {
        LPCG59_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG59_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG59_AUTHEN_CPULPM() volatile
    {
        LPCG59_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG59_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG59_AUTHEN_CPULPM() volatile
    {
        LPCG59_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG59_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG59_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG59_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG59_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG59_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG59_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG59_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG59_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG59_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG59_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG59_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG59_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG59_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG59_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG59_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG59_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG59_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG59_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG59_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG59_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG59_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG59_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG59_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG59_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG59_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG59_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG59_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG59_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG59_AUTHEN_LOCK_LIST() volatile
    {
        LPCG59_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG59_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG59_AUTHEN_LOCK_LIST() volatile
    {
        LPCG59_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG59_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG59_AUTHEN_LOCK_LIST() volatile
    {
        LPCG59_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG59_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG59_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG59_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG59_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG59_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG59_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG59_AUTHEN = curr;
    }

    /**
     * Get LPCG59_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG59_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG59_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG59_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG59_AUTHEN_LOCK_TZ() volatile
    {
        LPCG59_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG59_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG59_AUTHEN_LOCK_TZ() volatile
    {
        LPCG59_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG59_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG59_AUTHEN_LOCK_TZ() volatile
    {
        LPCG59_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG59_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG59_AUTHEN_TZ_NS() volatile
    {
        return LPCG59_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG59_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG59_AUTHEN_TZ_NS() volatile
    {
        LPCG59_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG59_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG59_AUTHEN_TZ_NS() volatile
    {
        LPCG59_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG59_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG59_AUTHEN_TZ_NS() volatile
    {
        LPCG59_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG59_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG59_AUTHEN_TZ_USER() volatile
    {
        return LPCG59_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG59_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG59_AUTHEN_TZ_USER() volatile
    {
        LPCG59_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG59_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG59_AUTHEN_TZ_USER() volatile
    {
        LPCG59_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG59_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG59_AUTHEN_TZ_USER() volatile
    {
        LPCG59_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG59_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG59_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG59_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG59_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG59_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG59_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG59_AUTHEN = curr;
    }

    /**
     * Get LPCG60_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG60_DIRECT_ON() volatile
    {
        return LPCG60_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG60_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG60_DIRECT_ON() volatile
    {
        LPCG60_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG60_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG60_DIRECT_ON() volatile
    {
        LPCG60_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG60_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG60_DIRECT_ON() volatile
    {
        LPCG60_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG60_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG60_DOMAIN_LEVEL3 get_LPCG60_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG60_DOMAIN_LEVEL3((LPCG60_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG60_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG60_DOMAIN_LEVEL3(
        CCM_LPCG60_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG60_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG60_DOMAIN = curr;
    }

    /**
     * Get LPCG60_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG60_DOMAIN_LEVEL2 get_LPCG60_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG60_DOMAIN_LEVEL2((LPCG60_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG60_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG60_DOMAIN_LEVEL2(
        CCM_LPCG60_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG60_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG60_DOMAIN = curr;
    }

    /**
     * Get LPCG60_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG60_DOMAIN_LEVEL1 get_LPCG60_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG60_DOMAIN_LEVEL1((LPCG60_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG60_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG60_DOMAIN_LEVEL1(
        CCM_LPCG60_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG60_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG60_DOMAIN = curr;
    }

    /**
     * Get LPCG60_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG60_DOMAIN_LEVEL0 get_LPCG60_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG60_DOMAIN_LEVEL0((LPCG60_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG60_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG60_DOMAIN_LEVEL0(
        CCM_LPCG60_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG60_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG60_DOMAIN = curr;
    }

    /**
     * Get LPCG60_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG60_DOMAIN_LEVEL get_LPCG60_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG60_DOMAIN_LEVEL((LPCG60_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG60_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG60_DOMAIN_LEVEL(CCM_LPCG60_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG60_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG60_DOMAIN = curr;
    }

    /**
     * Get all of LPCG60_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG60_DOMAIN(CCM_LPCG60_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG60_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG60_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG60_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG60_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG60_DOMAIN;

        LEVEL3 = CCM_LPCG60_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG60_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG60_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG60_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG60_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG60_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG60_DOMAIN(CCM_LPCG60_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG60_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG60_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG60_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG60_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG60_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG60_DOMAIN = curr;
    }

    /**
     * Get LPCG60_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG60_STATUS0_DOMAIN_ENABLE
    get_LPCG60_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG60_STATUS0_DOMAIN_ENABLE((LPCG60_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG60_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG60_STATUS0_ACTIVE_DOMAIN
    get_LPCG60_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG60_STATUS0_ACTIVE_DOMAIN((LPCG60_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG60_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG60_STATUS0_ON() volatile
    {
        return LPCG60_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG60_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG60_STATUS0(
        CCM_LPCG60_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG60_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG60_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG60_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG60_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG60_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG60_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG60_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG60_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG60_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG60_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG60_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG60_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG60_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG60_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG60_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG60_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG60_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG60_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG60_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG60_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG60_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG60_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG60_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG60_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG60_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG60_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG60_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG60_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG60_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG60_STATUS1_CPU3_MODE get_LPCG60_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG60_STATUS1_CPU3_MODE((LPCG60_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG60_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG60_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG60_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG60_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG60_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG60_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG60_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG60_STATUS1_CPU2_MODE get_LPCG60_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG60_STATUS1_CPU2_MODE((LPCG60_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG60_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG60_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG60_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG60_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG60_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG60_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG60_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG60_STATUS1_CPU1_MODE get_LPCG60_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG60_STATUS1_CPU1_MODE((LPCG60_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG60_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG60_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG60_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG60_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG60_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG60_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG60_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG60_STATUS1_CPU0_MODE get_LPCG60_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG60_STATUS1_CPU0_MODE((LPCG60_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG60_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG60_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG60_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG60_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG60_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG60_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG60_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG60_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG60_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG60_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG60_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG60_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG60_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG60_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG60_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG60_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG60_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG60_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG60_AUTHEN_LOCK_MODE() volatile
    {
        LPCG60_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG60_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG60_AUTHEN_LOCK_MODE() volatile
    {
        LPCG60_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG60_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG60_AUTHEN_LOCK_MODE() volatile
    {
        LPCG60_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG60_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG60_AUTHEN_CPULPM() volatile
    {
        return LPCG60_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG60_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG60_AUTHEN_CPULPM() volatile
    {
        LPCG60_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG60_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG60_AUTHEN_CPULPM() volatile
    {
        LPCG60_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG60_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG60_AUTHEN_CPULPM() volatile
    {
        LPCG60_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG60_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG60_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG60_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG60_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG60_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG60_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG60_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG60_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG60_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG60_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG60_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG60_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG60_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG60_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG60_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG60_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG60_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG60_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG60_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG60_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG60_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG60_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG60_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG60_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG60_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG60_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG60_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG60_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG60_AUTHEN_LOCK_LIST() volatile
    {
        LPCG60_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG60_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG60_AUTHEN_LOCK_LIST() volatile
    {
        LPCG60_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG60_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG60_AUTHEN_LOCK_LIST() volatile
    {
        LPCG60_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG60_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG60_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG60_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG60_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG60_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG60_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG60_AUTHEN = curr;
    }

    /**
     * Get LPCG60_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG60_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG60_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG60_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG60_AUTHEN_LOCK_TZ() volatile
    {
        LPCG60_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG60_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG60_AUTHEN_LOCK_TZ() volatile
    {
        LPCG60_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG60_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG60_AUTHEN_LOCK_TZ() volatile
    {
        LPCG60_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG60_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG60_AUTHEN_TZ_NS() volatile
    {
        return LPCG60_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG60_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG60_AUTHEN_TZ_NS() volatile
    {
        LPCG60_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG60_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG60_AUTHEN_TZ_NS() volatile
    {
        LPCG60_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG60_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG60_AUTHEN_TZ_NS() volatile
    {
        LPCG60_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG60_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG60_AUTHEN_TZ_USER() volatile
    {
        return LPCG60_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG60_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG60_AUTHEN_TZ_USER() volatile
    {
        LPCG60_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG60_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG60_AUTHEN_TZ_USER() volatile
    {
        LPCG60_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG60_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG60_AUTHEN_TZ_USER() volatile
    {
        LPCG60_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG60_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG60_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG60_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG60_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG60_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG60_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG60_AUTHEN = curr;
    }

    /**
     * Get LPCG61_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG61_DIRECT_ON() volatile
    {
        return LPCG61_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG61_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG61_DIRECT_ON() volatile
    {
        LPCG61_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG61_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG61_DIRECT_ON() volatile
    {
        LPCG61_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG61_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG61_DIRECT_ON() volatile
    {
        LPCG61_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG61_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG61_DOMAIN_LEVEL3 get_LPCG61_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG61_DOMAIN_LEVEL3((LPCG61_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG61_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG61_DOMAIN_LEVEL3(
        CCM_LPCG61_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG61_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG61_DOMAIN = curr;
    }

    /**
     * Get LPCG61_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG61_DOMAIN_LEVEL2 get_LPCG61_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG61_DOMAIN_LEVEL2((LPCG61_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG61_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG61_DOMAIN_LEVEL2(
        CCM_LPCG61_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG61_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG61_DOMAIN = curr;
    }

    /**
     * Get LPCG61_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG61_DOMAIN_LEVEL1 get_LPCG61_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG61_DOMAIN_LEVEL1((LPCG61_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG61_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG61_DOMAIN_LEVEL1(
        CCM_LPCG61_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG61_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG61_DOMAIN = curr;
    }

    /**
     * Get LPCG61_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG61_DOMAIN_LEVEL0 get_LPCG61_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG61_DOMAIN_LEVEL0((LPCG61_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG61_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG61_DOMAIN_LEVEL0(
        CCM_LPCG61_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG61_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG61_DOMAIN = curr;
    }

    /**
     * Get LPCG61_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG61_DOMAIN_LEVEL get_LPCG61_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG61_DOMAIN_LEVEL((LPCG61_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG61_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG61_DOMAIN_LEVEL(CCM_LPCG61_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG61_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG61_DOMAIN = curr;
    }

    /**
     * Get all of LPCG61_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG61_DOMAIN(CCM_LPCG61_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG61_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG61_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG61_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG61_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG61_DOMAIN;

        LEVEL3 = CCM_LPCG61_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG61_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG61_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG61_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG61_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG61_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG61_DOMAIN(CCM_LPCG61_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG61_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG61_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG61_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG61_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG61_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG61_DOMAIN = curr;
    }

    /**
     * Get LPCG61_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG61_STATUS0_DOMAIN_ENABLE
    get_LPCG61_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG61_STATUS0_DOMAIN_ENABLE((LPCG61_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG61_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG61_STATUS0_ACTIVE_DOMAIN
    get_LPCG61_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG61_STATUS0_ACTIVE_DOMAIN((LPCG61_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG61_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG61_STATUS0_ON() volatile
    {
        return LPCG61_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG61_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG61_STATUS0(
        CCM_LPCG61_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG61_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG61_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG61_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG61_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG61_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG61_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG61_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG61_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG61_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG61_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG61_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG61_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG61_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG61_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG61_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG61_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG61_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG61_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG61_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG61_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG61_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG61_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG61_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG61_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG61_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG61_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG61_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG61_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG61_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG61_STATUS1_CPU3_MODE get_LPCG61_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG61_STATUS1_CPU3_MODE((LPCG61_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG61_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG61_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG61_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG61_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG61_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG61_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG61_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG61_STATUS1_CPU2_MODE get_LPCG61_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG61_STATUS1_CPU2_MODE((LPCG61_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG61_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG61_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG61_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG61_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG61_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG61_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG61_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG61_STATUS1_CPU1_MODE get_LPCG61_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG61_STATUS1_CPU1_MODE((LPCG61_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG61_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG61_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG61_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG61_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG61_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG61_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG61_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG61_STATUS1_CPU0_MODE get_LPCG61_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG61_STATUS1_CPU0_MODE((LPCG61_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG61_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG61_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG61_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG61_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG61_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG61_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG61_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG61_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG61_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG61_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG61_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG61_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG61_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG61_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG61_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG61_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG61_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG61_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG61_AUTHEN_LOCK_MODE() volatile
    {
        LPCG61_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG61_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG61_AUTHEN_LOCK_MODE() volatile
    {
        LPCG61_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG61_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG61_AUTHEN_LOCK_MODE() volatile
    {
        LPCG61_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG61_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG61_AUTHEN_CPULPM() volatile
    {
        return LPCG61_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG61_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG61_AUTHEN_CPULPM() volatile
    {
        LPCG61_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG61_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG61_AUTHEN_CPULPM() volatile
    {
        LPCG61_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG61_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG61_AUTHEN_CPULPM() volatile
    {
        LPCG61_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG61_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG61_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG61_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG61_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG61_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG61_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG61_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG61_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG61_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG61_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG61_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG61_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG61_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG61_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG61_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG61_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG61_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG61_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG61_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG61_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG61_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG61_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG61_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG61_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG61_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG61_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG61_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG61_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG61_AUTHEN_LOCK_LIST() volatile
    {
        LPCG61_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG61_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG61_AUTHEN_LOCK_LIST() volatile
    {
        LPCG61_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG61_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG61_AUTHEN_LOCK_LIST() volatile
    {
        LPCG61_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG61_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG61_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG61_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG61_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG61_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG61_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG61_AUTHEN = curr;
    }

    /**
     * Get LPCG61_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG61_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG61_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG61_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG61_AUTHEN_LOCK_TZ() volatile
    {
        LPCG61_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG61_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG61_AUTHEN_LOCK_TZ() volatile
    {
        LPCG61_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG61_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG61_AUTHEN_LOCK_TZ() volatile
    {
        LPCG61_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG61_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG61_AUTHEN_TZ_NS() volatile
    {
        return LPCG61_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG61_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG61_AUTHEN_TZ_NS() volatile
    {
        LPCG61_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG61_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG61_AUTHEN_TZ_NS() volatile
    {
        LPCG61_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG61_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG61_AUTHEN_TZ_NS() volatile
    {
        LPCG61_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG61_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG61_AUTHEN_TZ_USER() volatile
    {
        return LPCG61_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG61_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG61_AUTHEN_TZ_USER() volatile
    {
        LPCG61_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG61_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG61_AUTHEN_TZ_USER() volatile
    {
        LPCG61_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG61_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG61_AUTHEN_TZ_USER() volatile
    {
        LPCG61_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG61_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG61_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG61_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG61_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG61_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG61_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG61_AUTHEN = curr;
    }

    /**
     * Get LPCG62_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG62_DIRECT_ON() volatile
    {
        return LPCG62_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG62_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG62_DIRECT_ON() volatile
    {
        LPCG62_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG62_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG62_DIRECT_ON() volatile
    {
        LPCG62_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG62_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG62_DIRECT_ON() volatile
    {
        LPCG62_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG62_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG62_DOMAIN_LEVEL3 get_LPCG62_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG62_DOMAIN_LEVEL3((LPCG62_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG62_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG62_DOMAIN_LEVEL3(
        CCM_LPCG62_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG62_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG62_DOMAIN = curr;
    }

    /**
     * Get LPCG62_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG62_DOMAIN_LEVEL2 get_LPCG62_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG62_DOMAIN_LEVEL2((LPCG62_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG62_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG62_DOMAIN_LEVEL2(
        CCM_LPCG62_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG62_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG62_DOMAIN = curr;
    }

    /**
     * Get LPCG62_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG62_DOMAIN_LEVEL1 get_LPCG62_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG62_DOMAIN_LEVEL1((LPCG62_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG62_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG62_DOMAIN_LEVEL1(
        CCM_LPCG62_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG62_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG62_DOMAIN = curr;
    }

    /**
     * Get LPCG62_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG62_DOMAIN_LEVEL0 get_LPCG62_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG62_DOMAIN_LEVEL0((LPCG62_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG62_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG62_DOMAIN_LEVEL0(
        CCM_LPCG62_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG62_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG62_DOMAIN = curr;
    }

    /**
     * Get LPCG62_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG62_DOMAIN_LEVEL get_LPCG62_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG62_DOMAIN_LEVEL((LPCG62_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG62_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG62_DOMAIN_LEVEL(CCM_LPCG62_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG62_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG62_DOMAIN = curr;
    }

    /**
     * Get all of LPCG62_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG62_DOMAIN(CCM_LPCG62_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG62_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG62_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG62_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG62_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG62_DOMAIN;

        LEVEL3 = CCM_LPCG62_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG62_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG62_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG62_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG62_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG62_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG62_DOMAIN(CCM_LPCG62_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG62_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG62_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG62_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG62_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG62_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG62_DOMAIN = curr;
    }

    /**
     * Get LPCG62_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG62_STATUS0_DOMAIN_ENABLE
    get_LPCG62_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG62_STATUS0_DOMAIN_ENABLE((LPCG62_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG62_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG62_STATUS0_ACTIVE_DOMAIN
    get_LPCG62_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG62_STATUS0_ACTIVE_DOMAIN((LPCG62_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG62_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG62_STATUS0_ON() volatile
    {
        return LPCG62_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG62_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG62_STATUS0(
        CCM_LPCG62_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG62_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG62_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG62_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG62_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG62_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG62_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG62_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG62_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG62_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG62_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG62_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG62_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG62_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG62_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG62_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG62_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG62_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG62_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG62_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG62_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG62_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG62_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG62_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG62_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG62_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG62_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG62_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG62_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG62_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG62_STATUS1_CPU3_MODE get_LPCG62_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG62_STATUS1_CPU3_MODE((LPCG62_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG62_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG62_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG62_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG62_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG62_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG62_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG62_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG62_STATUS1_CPU2_MODE get_LPCG62_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG62_STATUS1_CPU2_MODE((LPCG62_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG62_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG62_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG62_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG62_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG62_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG62_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG62_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG62_STATUS1_CPU1_MODE get_LPCG62_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG62_STATUS1_CPU1_MODE((LPCG62_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG62_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG62_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG62_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG62_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG62_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG62_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG62_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG62_STATUS1_CPU0_MODE get_LPCG62_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG62_STATUS1_CPU0_MODE((LPCG62_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG62_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG62_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG62_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG62_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG62_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG62_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG62_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG62_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG62_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG62_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG62_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG62_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG62_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG62_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG62_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG62_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG62_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG62_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG62_AUTHEN_LOCK_MODE() volatile
    {
        LPCG62_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG62_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG62_AUTHEN_LOCK_MODE() volatile
    {
        LPCG62_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG62_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG62_AUTHEN_LOCK_MODE() volatile
    {
        LPCG62_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG62_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG62_AUTHEN_CPULPM() volatile
    {
        return LPCG62_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG62_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG62_AUTHEN_CPULPM() volatile
    {
        LPCG62_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG62_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG62_AUTHEN_CPULPM() volatile
    {
        LPCG62_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG62_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG62_AUTHEN_CPULPM() volatile
    {
        LPCG62_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG62_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG62_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG62_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG62_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG62_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG62_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG62_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG62_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG62_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG62_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG62_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG62_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG62_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG62_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG62_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG62_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG62_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG62_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG62_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG62_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG62_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG62_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG62_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG62_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG62_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG62_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG62_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG62_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG62_AUTHEN_LOCK_LIST() volatile
    {
        LPCG62_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG62_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG62_AUTHEN_LOCK_LIST() volatile
    {
        LPCG62_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG62_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG62_AUTHEN_LOCK_LIST() volatile
    {
        LPCG62_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG62_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG62_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG62_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG62_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG62_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG62_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG62_AUTHEN = curr;
    }

    /**
     * Get LPCG62_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG62_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG62_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG62_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG62_AUTHEN_LOCK_TZ() volatile
    {
        LPCG62_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG62_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG62_AUTHEN_LOCK_TZ() volatile
    {
        LPCG62_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG62_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG62_AUTHEN_LOCK_TZ() volatile
    {
        LPCG62_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG62_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG62_AUTHEN_TZ_NS() volatile
    {
        return LPCG62_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG62_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG62_AUTHEN_TZ_NS() volatile
    {
        LPCG62_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG62_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG62_AUTHEN_TZ_NS() volatile
    {
        LPCG62_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG62_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG62_AUTHEN_TZ_NS() volatile
    {
        LPCG62_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG62_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG62_AUTHEN_TZ_USER() volatile
    {
        return LPCG62_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG62_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG62_AUTHEN_TZ_USER() volatile
    {
        LPCG62_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG62_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG62_AUTHEN_TZ_USER() volatile
    {
        LPCG62_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG62_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG62_AUTHEN_TZ_USER() volatile
    {
        LPCG62_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG62_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG62_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG62_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG62_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG62_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG62_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG62_AUTHEN = curr;
    }

    /**
     * Get LPCG63_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG63_DIRECT_ON() volatile
    {
        return LPCG63_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG63_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG63_DIRECT_ON() volatile
    {
        LPCG63_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG63_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG63_DIRECT_ON() volatile
    {
        LPCG63_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG63_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG63_DIRECT_ON() volatile
    {
        LPCG63_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG63_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG63_DOMAIN_LEVEL3 get_LPCG63_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG63_DOMAIN_LEVEL3((LPCG63_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG63_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG63_DOMAIN_LEVEL3(
        CCM_LPCG63_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG63_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG63_DOMAIN = curr;
    }

    /**
     * Get LPCG63_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG63_DOMAIN_LEVEL2 get_LPCG63_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG63_DOMAIN_LEVEL2((LPCG63_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG63_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG63_DOMAIN_LEVEL2(
        CCM_LPCG63_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG63_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG63_DOMAIN = curr;
    }

    /**
     * Get LPCG63_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG63_DOMAIN_LEVEL1 get_LPCG63_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG63_DOMAIN_LEVEL1((LPCG63_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG63_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG63_DOMAIN_LEVEL1(
        CCM_LPCG63_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG63_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG63_DOMAIN = curr;
    }

    /**
     * Get LPCG63_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG63_DOMAIN_LEVEL0 get_LPCG63_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG63_DOMAIN_LEVEL0((LPCG63_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG63_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG63_DOMAIN_LEVEL0(
        CCM_LPCG63_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG63_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG63_DOMAIN = curr;
    }

    /**
     * Get LPCG63_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG63_DOMAIN_LEVEL get_LPCG63_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG63_DOMAIN_LEVEL((LPCG63_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG63_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG63_DOMAIN_LEVEL(CCM_LPCG63_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG63_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG63_DOMAIN = curr;
    }

    /**
     * Get all of LPCG63_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG63_DOMAIN(CCM_LPCG63_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG63_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG63_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG63_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG63_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG63_DOMAIN;

        LEVEL3 = CCM_LPCG63_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG63_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG63_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG63_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG63_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG63_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG63_DOMAIN(CCM_LPCG63_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG63_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG63_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG63_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG63_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG63_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG63_DOMAIN = curr;
    }

    /**
     * Get LPCG63_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG63_STATUS0_DOMAIN_ENABLE
    get_LPCG63_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG63_STATUS0_DOMAIN_ENABLE((LPCG63_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG63_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG63_STATUS0_ACTIVE_DOMAIN
    get_LPCG63_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG63_STATUS0_ACTIVE_DOMAIN((LPCG63_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG63_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG63_STATUS0_ON() volatile
    {
        return LPCG63_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG63_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG63_STATUS0(
        CCM_LPCG63_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG63_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG63_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG63_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG63_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG63_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG63_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG63_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG63_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG63_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG63_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG63_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG63_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG63_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG63_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG63_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG63_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG63_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG63_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG63_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG63_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG63_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG63_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG63_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG63_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG63_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG63_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG63_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG63_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG63_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG63_STATUS1_CPU3_MODE get_LPCG63_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG63_STATUS1_CPU3_MODE((LPCG63_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG63_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG63_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG63_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG63_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG63_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG63_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG63_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG63_STATUS1_CPU2_MODE get_LPCG63_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG63_STATUS1_CPU2_MODE((LPCG63_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG63_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG63_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG63_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG63_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG63_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG63_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG63_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG63_STATUS1_CPU1_MODE get_LPCG63_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG63_STATUS1_CPU1_MODE((LPCG63_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG63_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG63_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG63_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG63_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG63_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG63_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG63_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG63_STATUS1_CPU0_MODE get_LPCG63_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG63_STATUS1_CPU0_MODE((LPCG63_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG63_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG63_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG63_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG63_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG63_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG63_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG63_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG63_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG63_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG63_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG63_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG63_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG63_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG63_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG63_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG63_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG63_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG63_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG63_AUTHEN_LOCK_MODE() volatile
    {
        LPCG63_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG63_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG63_AUTHEN_LOCK_MODE() volatile
    {
        LPCG63_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG63_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG63_AUTHEN_LOCK_MODE() volatile
    {
        LPCG63_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG63_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG63_AUTHEN_CPULPM() volatile
    {
        return LPCG63_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG63_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG63_AUTHEN_CPULPM() volatile
    {
        LPCG63_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG63_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG63_AUTHEN_CPULPM() volatile
    {
        LPCG63_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG63_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG63_AUTHEN_CPULPM() volatile
    {
        LPCG63_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG63_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG63_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG63_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG63_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG63_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG63_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG63_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG63_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG63_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG63_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG63_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG63_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG63_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG63_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG63_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG63_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG63_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG63_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG63_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG63_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG63_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG63_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG63_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG63_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG63_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG63_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG63_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG63_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG63_AUTHEN_LOCK_LIST() volatile
    {
        LPCG63_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG63_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG63_AUTHEN_LOCK_LIST() volatile
    {
        LPCG63_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG63_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG63_AUTHEN_LOCK_LIST() volatile
    {
        LPCG63_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG63_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG63_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG63_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG63_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG63_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG63_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG63_AUTHEN = curr;
    }

    /**
     * Get LPCG63_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG63_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG63_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG63_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG63_AUTHEN_LOCK_TZ() volatile
    {
        LPCG63_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG63_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG63_AUTHEN_LOCK_TZ() volatile
    {
        LPCG63_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG63_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG63_AUTHEN_LOCK_TZ() volatile
    {
        LPCG63_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG63_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG63_AUTHEN_TZ_NS() volatile
    {
        return LPCG63_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG63_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG63_AUTHEN_TZ_NS() volatile
    {
        LPCG63_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG63_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG63_AUTHEN_TZ_NS() volatile
    {
        LPCG63_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG63_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG63_AUTHEN_TZ_NS() volatile
    {
        LPCG63_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG63_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG63_AUTHEN_TZ_USER() volatile
    {
        return LPCG63_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG63_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG63_AUTHEN_TZ_USER() volatile
    {
        LPCG63_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG63_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG63_AUTHEN_TZ_USER() volatile
    {
        LPCG63_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG63_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG63_AUTHEN_TZ_USER() volatile
    {
        LPCG63_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG63_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG63_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG63_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG63_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG63_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG63_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG63_AUTHEN = curr;
    }

    /**
     * Get LPCG64_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG64_DIRECT_ON() volatile
    {
        return LPCG64_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG64_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG64_DIRECT_ON() volatile
    {
        LPCG64_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG64_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG64_DIRECT_ON() volatile
    {
        LPCG64_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG64_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG64_DIRECT_ON() volatile
    {
        LPCG64_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG64_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG64_DOMAIN_LEVEL3 get_LPCG64_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG64_DOMAIN_LEVEL3((LPCG64_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG64_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG64_DOMAIN_LEVEL3(
        CCM_LPCG64_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG64_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG64_DOMAIN = curr;
    }

    /**
     * Get LPCG64_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG64_DOMAIN_LEVEL2 get_LPCG64_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG64_DOMAIN_LEVEL2((LPCG64_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG64_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG64_DOMAIN_LEVEL2(
        CCM_LPCG64_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG64_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG64_DOMAIN = curr;
    }

    /**
     * Get LPCG64_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG64_DOMAIN_LEVEL1 get_LPCG64_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG64_DOMAIN_LEVEL1((LPCG64_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG64_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG64_DOMAIN_LEVEL1(
        CCM_LPCG64_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG64_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG64_DOMAIN = curr;
    }

    /**
     * Get LPCG64_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG64_DOMAIN_LEVEL0 get_LPCG64_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG64_DOMAIN_LEVEL0((LPCG64_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG64_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG64_DOMAIN_LEVEL0(
        CCM_LPCG64_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG64_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG64_DOMAIN = curr;
    }

    /**
     * Get LPCG64_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG64_DOMAIN_LEVEL get_LPCG64_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG64_DOMAIN_LEVEL((LPCG64_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG64_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG64_DOMAIN_LEVEL(CCM_LPCG64_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG64_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG64_DOMAIN = curr;
    }

    /**
     * Get all of LPCG64_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG64_DOMAIN(CCM_LPCG64_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG64_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG64_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG64_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG64_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG64_DOMAIN;

        LEVEL3 = CCM_LPCG64_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG64_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG64_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG64_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG64_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG64_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG64_DOMAIN(CCM_LPCG64_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG64_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG64_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG64_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG64_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG64_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG64_DOMAIN = curr;
    }

    /**
     * Get LPCG64_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG64_STATUS0_DOMAIN_ENABLE
    get_LPCG64_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG64_STATUS0_DOMAIN_ENABLE((LPCG64_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG64_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG64_STATUS0_ACTIVE_DOMAIN
    get_LPCG64_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG64_STATUS0_ACTIVE_DOMAIN((LPCG64_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG64_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG64_STATUS0_ON() volatile
    {
        return LPCG64_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG64_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG64_STATUS0(
        CCM_LPCG64_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG64_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG64_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG64_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG64_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG64_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG64_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG64_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG64_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG64_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG64_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG64_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG64_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG64_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG64_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG64_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG64_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG64_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG64_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG64_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG64_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG64_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG64_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG64_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG64_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG64_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG64_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG64_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG64_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG64_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG64_STATUS1_CPU3_MODE get_LPCG64_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG64_STATUS1_CPU3_MODE((LPCG64_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG64_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG64_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG64_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG64_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG64_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG64_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG64_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG64_STATUS1_CPU2_MODE get_LPCG64_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG64_STATUS1_CPU2_MODE((LPCG64_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG64_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG64_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG64_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG64_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG64_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG64_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG64_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG64_STATUS1_CPU1_MODE get_LPCG64_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG64_STATUS1_CPU1_MODE((LPCG64_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG64_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG64_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG64_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG64_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG64_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG64_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG64_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG64_STATUS1_CPU0_MODE get_LPCG64_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG64_STATUS1_CPU0_MODE((LPCG64_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG64_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG64_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG64_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG64_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG64_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG64_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG64_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG64_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG64_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG64_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG64_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG64_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG64_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG64_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG64_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG64_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG64_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG64_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG64_AUTHEN_LOCK_MODE() volatile
    {
        LPCG64_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG64_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG64_AUTHEN_LOCK_MODE() volatile
    {
        LPCG64_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG64_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG64_AUTHEN_LOCK_MODE() volatile
    {
        LPCG64_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG64_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG64_AUTHEN_CPULPM() volatile
    {
        return LPCG64_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG64_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG64_AUTHEN_CPULPM() volatile
    {
        LPCG64_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG64_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG64_AUTHEN_CPULPM() volatile
    {
        LPCG64_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG64_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG64_AUTHEN_CPULPM() volatile
    {
        LPCG64_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG64_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG64_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG64_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG64_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG64_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG64_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG64_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG64_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG64_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG64_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG64_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG64_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG64_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG64_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG64_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG64_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG64_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG64_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG64_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG64_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG64_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG64_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG64_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG64_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG64_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG64_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG64_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG64_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG64_AUTHEN_LOCK_LIST() volatile
    {
        LPCG64_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG64_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG64_AUTHEN_LOCK_LIST() volatile
    {
        LPCG64_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG64_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG64_AUTHEN_LOCK_LIST() volatile
    {
        LPCG64_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG64_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG64_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG64_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG64_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG64_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG64_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG64_AUTHEN = curr;
    }

    /**
     * Get LPCG64_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG64_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG64_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG64_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG64_AUTHEN_LOCK_TZ() volatile
    {
        LPCG64_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG64_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG64_AUTHEN_LOCK_TZ() volatile
    {
        LPCG64_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG64_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG64_AUTHEN_LOCK_TZ() volatile
    {
        LPCG64_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG64_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG64_AUTHEN_TZ_NS() volatile
    {
        return LPCG64_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG64_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG64_AUTHEN_TZ_NS() volatile
    {
        LPCG64_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG64_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG64_AUTHEN_TZ_NS() volatile
    {
        LPCG64_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG64_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG64_AUTHEN_TZ_NS() volatile
    {
        LPCG64_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG64_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG64_AUTHEN_TZ_USER() volatile
    {
        return LPCG64_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG64_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG64_AUTHEN_TZ_USER() volatile
    {
        LPCG64_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG64_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG64_AUTHEN_TZ_USER() volatile
    {
        LPCG64_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG64_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG64_AUTHEN_TZ_USER() volatile
    {
        LPCG64_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG64_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG64_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG64_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG64_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG64_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG64_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG64_AUTHEN = curr;
    }

    /**
     * Get LPCG65_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG65_DIRECT_ON() volatile
    {
        return LPCG65_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG65_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG65_DIRECT_ON() volatile
    {
        LPCG65_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG65_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG65_DIRECT_ON() volatile
    {
        LPCG65_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG65_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG65_DIRECT_ON() volatile
    {
        LPCG65_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG65_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG65_DOMAIN_LEVEL3 get_LPCG65_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG65_DOMAIN_LEVEL3((LPCG65_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG65_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG65_DOMAIN_LEVEL3(
        CCM_LPCG65_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG65_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG65_DOMAIN = curr;
    }

    /**
     * Get LPCG65_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG65_DOMAIN_LEVEL2 get_LPCG65_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG65_DOMAIN_LEVEL2((LPCG65_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG65_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG65_DOMAIN_LEVEL2(
        CCM_LPCG65_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG65_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG65_DOMAIN = curr;
    }

    /**
     * Get LPCG65_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG65_DOMAIN_LEVEL1 get_LPCG65_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG65_DOMAIN_LEVEL1((LPCG65_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG65_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG65_DOMAIN_LEVEL1(
        CCM_LPCG65_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG65_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG65_DOMAIN = curr;
    }

    /**
     * Get LPCG65_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG65_DOMAIN_LEVEL0 get_LPCG65_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG65_DOMAIN_LEVEL0((LPCG65_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG65_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG65_DOMAIN_LEVEL0(
        CCM_LPCG65_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG65_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG65_DOMAIN = curr;
    }

    /**
     * Get LPCG65_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG65_DOMAIN_LEVEL get_LPCG65_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG65_DOMAIN_LEVEL((LPCG65_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG65_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG65_DOMAIN_LEVEL(CCM_LPCG65_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG65_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG65_DOMAIN = curr;
    }

    /**
     * Get all of LPCG65_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG65_DOMAIN(CCM_LPCG65_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG65_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG65_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG65_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG65_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG65_DOMAIN;

        LEVEL3 = CCM_LPCG65_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG65_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG65_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG65_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG65_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG65_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG65_DOMAIN(CCM_LPCG65_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG65_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG65_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG65_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG65_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG65_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG65_DOMAIN = curr;
    }

    /**
     * Get LPCG65_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG65_STATUS0_DOMAIN_ENABLE
    get_LPCG65_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG65_STATUS0_DOMAIN_ENABLE((LPCG65_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG65_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG65_STATUS0_ACTIVE_DOMAIN
    get_LPCG65_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG65_STATUS0_ACTIVE_DOMAIN((LPCG65_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG65_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG65_STATUS0_ON() volatile
    {
        return LPCG65_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG65_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG65_STATUS0(
        CCM_LPCG65_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG65_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG65_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG65_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG65_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG65_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG65_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG65_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG65_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG65_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG65_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG65_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG65_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG65_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG65_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG65_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG65_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG65_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG65_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG65_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG65_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG65_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG65_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG65_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG65_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG65_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG65_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG65_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG65_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG65_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG65_STATUS1_CPU3_MODE get_LPCG65_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG65_STATUS1_CPU3_MODE((LPCG65_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG65_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG65_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG65_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG65_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG65_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG65_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG65_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG65_STATUS1_CPU2_MODE get_LPCG65_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG65_STATUS1_CPU2_MODE((LPCG65_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG65_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG65_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG65_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG65_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG65_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG65_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG65_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG65_STATUS1_CPU1_MODE get_LPCG65_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG65_STATUS1_CPU1_MODE((LPCG65_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG65_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG65_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG65_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG65_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG65_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG65_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG65_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG65_STATUS1_CPU0_MODE get_LPCG65_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG65_STATUS1_CPU0_MODE((LPCG65_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG65_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG65_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG65_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG65_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG65_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG65_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG65_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG65_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG65_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG65_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG65_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG65_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG65_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG65_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG65_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG65_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG65_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG65_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG65_AUTHEN_LOCK_MODE() volatile
    {
        LPCG65_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG65_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG65_AUTHEN_LOCK_MODE() volatile
    {
        LPCG65_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG65_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG65_AUTHEN_LOCK_MODE() volatile
    {
        LPCG65_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG65_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG65_AUTHEN_CPULPM() volatile
    {
        return LPCG65_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG65_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG65_AUTHEN_CPULPM() volatile
    {
        LPCG65_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG65_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG65_AUTHEN_CPULPM() volatile
    {
        LPCG65_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG65_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG65_AUTHEN_CPULPM() volatile
    {
        LPCG65_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG65_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG65_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG65_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG65_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG65_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG65_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG65_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG65_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG65_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG65_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG65_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG65_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG65_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG65_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG65_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG65_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG65_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG65_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG65_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG65_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG65_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG65_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG65_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG65_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG65_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG65_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG65_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG65_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG65_AUTHEN_LOCK_LIST() volatile
    {
        LPCG65_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG65_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG65_AUTHEN_LOCK_LIST() volatile
    {
        LPCG65_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG65_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG65_AUTHEN_LOCK_LIST() volatile
    {
        LPCG65_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG65_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG65_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG65_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG65_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG65_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG65_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG65_AUTHEN = curr;
    }

    /**
     * Get LPCG65_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG65_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG65_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG65_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG65_AUTHEN_LOCK_TZ() volatile
    {
        LPCG65_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG65_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG65_AUTHEN_LOCK_TZ() volatile
    {
        LPCG65_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG65_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG65_AUTHEN_LOCK_TZ() volatile
    {
        LPCG65_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG65_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG65_AUTHEN_TZ_NS() volatile
    {
        return LPCG65_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG65_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG65_AUTHEN_TZ_NS() volatile
    {
        LPCG65_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG65_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG65_AUTHEN_TZ_NS() volatile
    {
        LPCG65_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG65_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG65_AUTHEN_TZ_NS() volatile
    {
        LPCG65_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG65_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG65_AUTHEN_TZ_USER() volatile
    {
        return LPCG65_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG65_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG65_AUTHEN_TZ_USER() volatile
    {
        LPCG65_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG65_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG65_AUTHEN_TZ_USER() volatile
    {
        LPCG65_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG65_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG65_AUTHEN_TZ_USER() volatile
    {
        LPCG65_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG65_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG65_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG65_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG65_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG65_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG65_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG65_AUTHEN = curr;
    }

    /**
     * Get LPCG66_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG66_DIRECT_ON() volatile
    {
        return LPCG66_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG66_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG66_DIRECT_ON() volatile
    {
        LPCG66_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG66_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG66_DIRECT_ON() volatile
    {
        LPCG66_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG66_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG66_DIRECT_ON() volatile
    {
        LPCG66_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG66_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG66_DOMAIN_LEVEL3 get_LPCG66_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG66_DOMAIN_LEVEL3((LPCG66_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG66_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG66_DOMAIN_LEVEL3(
        CCM_LPCG66_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG66_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG66_DOMAIN = curr;
    }

    /**
     * Get LPCG66_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG66_DOMAIN_LEVEL2 get_LPCG66_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG66_DOMAIN_LEVEL2((LPCG66_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG66_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG66_DOMAIN_LEVEL2(
        CCM_LPCG66_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG66_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG66_DOMAIN = curr;
    }

    /**
     * Get LPCG66_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG66_DOMAIN_LEVEL1 get_LPCG66_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG66_DOMAIN_LEVEL1((LPCG66_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG66_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG66_DOMAIN_LEVEL1(
        CCM_LPCG66_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG66_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG66_DOMAIN = curr;
    }

    /**
     * Get LPCG66_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG66_DOMAIN_LEVEL0 get_LPCG66_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG66_DOMAIN_LEVEL0((LPCG66_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG66_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG66_DOMAIN_LEVEL0(
        CCM_LPCG66_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG66_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG66_DOMAIN = curr;
    }

    /**
     * Get LPCG66_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG66_DOMAIN_LEVEL get_LPCG66_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG66_DOMAIN_LEVEL((LPCG66_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG66_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG66_DOMAIN_LEVEL(CCM_LPCG66_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG66_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG66_DOMAIN = curr;
    }

    /**
     * Get all of LPCG66_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG66_DOMAIN(CCM_LPCG66_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG66_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG66_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG66_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG66_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG66_DOMAIN;

        LEVEL3 = CCM_LPCG66_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG66_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG66_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG66_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG66_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG66_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG66_DOMAIN(CCM_LPCG66_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG66_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG66_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG66_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG66_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG66_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG66_DOMAIN = curr;
    }

    /**
     * Get LPCG66_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG66_STATUS0_DOMAIN_ENABLE
    get_LPCG66_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG66_STATUS0_DOMAIN_ENABLE((LPCG66_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG66_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG66_STATUS0_ACTIVE_DOMAIN
    get_LPCG66_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG66_STATUS0_ACTIVE_DOMAIN((LPCG66_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG66_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG66_STATUS0_ON() volatile
    {
        return LPCG66_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG66_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG66_STATUS0(
        CCM_LPCG66_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG66_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG66_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG66_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG66_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG66_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG66_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG66_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG66_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG66_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG66_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG66_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG66_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG66_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG66_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG66_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG66_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG66_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG66_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG66_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG66_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG66_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG66_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG66_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG66_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG66_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG66_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG66_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG66_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG66_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG66_STATUS1_CPU3_MODE get_LPCG66_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG66_STATUS1_CPU3_MODE((LPCG66_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG66_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG66_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG66_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG66_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG66_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG66_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG66_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG66_STATUS1_CPU2_MODE get_LPCG66_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG66_STATUS1_CPU2_MODE((LPCG66_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG66_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG66_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG66_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG66_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG66_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG66_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG66_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG66_STATUS1_CPU1_MODE get_LPCG66_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG66_STATUS1_CPU1_MODE((LPCG66_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG66_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG66_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG66_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG66_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG66_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG66_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG66_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG66_STATUS1_CPU0_MODE get_LPCG66_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG66_STATUS1_CPU0_MODE((LPCG66_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG66_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG66_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG66_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG66_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG66_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG66_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG66_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG66_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG66_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG66_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG66_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG66_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG66_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG66_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG66_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG66_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG66_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG66_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG66_AUTHEN_LOCK_MODE() volatile
    {
        LPCG66_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG66_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG66_AUTHEN_LOCK_MODE() volatile
    {
        LPCG66_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG66_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG66_AUTHEN_LOCK_MODE() volatile
    {
        LPCG66_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG66_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG66_AUTHEN_CPULPM() volatile
    {
        return LPCG66_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG66_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG66_AUTHEN_CPULPM() volatile
    {
        LPCG66_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG66_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG66_AUTHEN_CPULPM() volatile
    {
        LPCG66_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG66_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG66_AUTHEN_CPULPM() volatile
    {
        LPCG66_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG66_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG66_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG66_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG66_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG66_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG66_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG66_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG66_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG66_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG66_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG66_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG66_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG66_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG66_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG66_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG66_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG66_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG66_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG66_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG66_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG66_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG66_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG66_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG66_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG66_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG66_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG66_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG66_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG66_AUTHEN_LOCK_LIST() volatile
    {
        LPCG66_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG66_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG66_AUTHEN_LOCK_LIST() volatile
    {
        LPCG66_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG66_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG66_AUTHEN_LOCK_LIST() volatile
    {
        LPCG66_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG66_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG66_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG66_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG66_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG66_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG66_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG66_AUTHEN = curr;
    }

    /**
     * Get LPCG66_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG66_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG66_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG66_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG66_AUTHEN_LOCK_TZ() volatile
    {
        LPCG66_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG66_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG66_AUTHEN_LOCK_TZ() volatile
    {
        LPCG66_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG66_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG66_AUTHEN_LOCK_TZ() volatile
    {
        LPCG66_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG66_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG66_AUTHEN_TZ_NS() volatile
    {
        return LPCG66_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG66_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG66_AUTHEN_TZ_NS() volatile
    {
        LPCG66_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG66_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG66_AUTHEN_TZ_NS() volatile
    {
        LPCG66_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG66_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG66_AUTHEN_TZ_NS() volatile
    {
        LPCG66_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG66_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG66_AUTHEN_TZ_USER() volatile
    {
        return LPCG66_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG66_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG66_AUTHEN_TZ_USER() volatile
    {
        LPCG66_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG66_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG66_AUTHEN_TZ_USER() volatile
    {
        LPCG66_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG66_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG66_AUTHEN_TZ_USER() volatile
    {
        LPCG66_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG66_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG66_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG66_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG66_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG66_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG66_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG66_AUTHEN = curr;
    }

    /**
     * Get LPCG67_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG67_DIRECT_ON() volatile
    {
        return LPCG67_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG67_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG67_DIRECT_ON() volatile
    {
        LPCG67_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG67_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG67_DIRECT_ON() volatile
    {
        LPCG67_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG67_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG67_DIRECT_ON() volatile
    {
        LPCG67_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG67_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG67_DOMAIN_LEVEL3 get_LPCG67_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG67_DOMAIN_LEVEL3((LPCG67_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG67_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG67_DOMAIN_LEVEL3(
        CCM_LPCG67_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG67_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG67_DOMAIN = curr;
    }

    /**
     * Get LPCG67_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG67_DOMAIN_LEVEL2 get_LPCG67_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG67_DOMAIN_LEVEL2((LPCG67_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG67_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG67_DOMAIN_LEVEL2(
        CCM_LPCG67_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG67_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG67_DOMAIN = curr;
    }

    /**
     * Get LPCG67_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG67_DOMAIN_LEVEL1 get_LPCG67_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG67_DOMAIN_LEVEL1((LPCG67_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG67_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG67_DOMAIN_LEVEL1(
        CCM_LPCG67_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG67_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG67_DOMAIN = curr;
    }

    /**
     * Get LPCG67_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG67_DOMAIN_LEVEL0 get_LPCG67_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG67_DOMAIN_LEVEL0((LPCG67_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG67_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG67_DOMAIN_LEVEL0(
        CCM_LPCG67_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG67_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG67_DOMAIN = curr;
    }

    /**
     * Get LPCG67_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG67_DOMAIN_LEVEL get_LPCG67_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG67_DOMAIN_LEVEL((LPCG67_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG67_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG67_DOMAIN_LEVEL(CCM_LPCG67_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG67_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG67_DOMAIN = curr;
    }

    /**
     * Get all of LPCG67_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG67_DOMAIN(CCM_LPCG67_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG67_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG67_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG67_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG67_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG67_DOMAIN;

        LEVEL3 = CCM_LPCG67_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG67_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG67_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG67_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG67_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG67_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG67_DOMAIN(CCM_LPCG67_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG67_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG67_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG67_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG67_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG67_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG67_DOMAIN = curr;
    }

    /**
     * Get LPCG67_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG67_STATUS0_DOMAIN_ENABLE
    get_LPCG67_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG67_STATUS0_DOMAIN_ENABLE((LPCG67_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG67_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG67_STATUS0_ACTIVE_DOMAIN
    get_LPCG67_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG67_STATUS0_ACTIVE_DOMAIN((LPCG67_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG67_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG67_STATUS0_ON() volatile
    {
        return LPCG67_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG67_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG67_STATUS0(
        CCM_LPCG67_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG67_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG67_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG67_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG67_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG67_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG67_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG67_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG67_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG67_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG67_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG67_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG67_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG67_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG67_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG67_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG67_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG67_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG67_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG67_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG67_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG67_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG67_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG67_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG67_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG67_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG67_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG67_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG67_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG67_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG67_STATUS1_CPU3_MODE get_LPCG67_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG67_STATUS1_CPU3_MODE((LPCG67_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG67_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG67_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG67_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG67_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG67_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG67_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG67_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG67_STATUS1_CPU2_MODE get_LPCG67_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG67_STATUS1_CPU2_MODE((LPCG67_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG67_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG67_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG67_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG67_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG67_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG67_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG67_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG67_STATUS1_CPU1_MODE get_LPCG67_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG67_STATUS1_CPU1_MODE((LPCG67_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG67_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG67_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG67_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG67_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG67_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG67_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG67_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG67_STATUS1_CPU0_MODE get_LPCG67_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG67_STATUS1_CPU0_MODE((LPCG67_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG67_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG67_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG67_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG67_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG67_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG67_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG67_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG67_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG67_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG67_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG67_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG67_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG67_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG67_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG67_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG67_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG67_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG67_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG67_AUTHEN_LOCK_MODE() volatile
    {
        LPCG67_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG67_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG67_AUTHEN_LOCK_MODE() volatile
    {
        LPCG67_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG67_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG67_AUTHEN_LOCK_MODE() volatile
    {
        LPCG67_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG67_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG67_AUTHEN_CPULPM() volatile
    {
        return LPCG67_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG67_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG67_AUTHEN_CPULPM() volatile
    {
        LPCG67_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG67_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG67_AUTHEN_CPULPM() volatile
    {
        LPCG67_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG67_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG67_AUTHEN_CPULPM() volatile
    {
        LPCG67_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG67_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG67_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG67_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG67_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG67_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG67_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG67_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG67_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG67_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG67_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG67_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG67_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG67_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG67_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG67_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG67_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG67_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG67_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG67_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG67_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG67_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG67_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG67_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG67_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG67_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG67_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG67_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG67_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG67_AUTHEN_LOCK_LIST() volatile
    {
        LPCG67_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG67_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG67_AUTHEN_LOCK_LIST() volatile
    {
        LPCG67_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG67_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG67_AUTHEN_LOCK_LIST() volatile
    {
        LPCG67_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG67_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG67_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG67_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG67_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG67_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG67_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG67_AUTHEN = curr;
    }

    /**
     * Get LPCG67_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG67_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG67_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG67_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG67_AUTHEN_LOCK_TZ() volatile
    {
        LPCG67_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG67_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG67_AUTHEN_LOCK_TZ() volatile
    {
        LPCG67_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG67_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG67_AUTHEN_LOCK_TZ() volatile
    {
        LPCG67_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG67_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG67_AUTHEN_TZ_NS() volatile
    {
        return LPCG67_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG67_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG67_AUTHEN_TZ_NS() volatile
    {
        LPCG67_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG67_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG67_AUTHEN_TZ_NS() volatile
    {
        LPCG67_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG67_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG67_AUTHEN_TZ_NS() volatile
    {
        LPCG67_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG67_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG67_AUTHEN_TZ_USER() volatile
    {
        return LPCG67_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG67_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG67_AUTHEN_TZ_USER() volatile
    {
        LPCG67_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG67_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG67_AUTHEN_TZ_USER() volatile
    {
        LPCG67_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG67_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG67_AUTHEN_TZ_USER() volatile
    {
        LPCG67_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG67_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG67_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG67_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG67_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG67_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG67_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG67_AUTHEN = curr;
    }

    /**
     * Get LPCG68_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG68_DIRECT_ON() volatile
    {
        return LPCG68_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG68_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG68_DIRECT_ON() volatile
    {
        LPCG68_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG68_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG68_DIRECT_ON() volatile
    {
        LPCG68_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG68_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG68_DIRECT_ON() volatile
    {
        LPCG68_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG68_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG68_DOMAIN_LEVEL3 get_LPCG68_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG68_DOMAIN_LEVEL3((LPCG68_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG68_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG68_DOMAIN_LEVEL3(
        CCM_LPCG68_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG68_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG68_DOMAIN = curr;
    }

    /**
     * Get LPCG68_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG68_DOMAIN_LEVEL2 get_LPCG68_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG68_DOMAIN_LEVEL2((LPCG68_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG68_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG68_DOMAIN_LEVEL2(
        CCM_LPCG68_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG68_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG68_DOMAIN = curr;
    }

    /**
     * Get LPCG68_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG68_DOMAIN_LEVEL1 get_LPCG68_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG68_DOMAIN_LEVEL1((LPCG68_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG68_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG68_DOMAIN_LEVEL1(
        CCM_LPCG68_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG68_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG68_DOMAIN = curr;
    }

    /**
     * Get LPCG68_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG68_DOMAIN_LEVEL0 get_LPCG68_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG68_DOMAIN_LEVEL0((LPCG68_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG68_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG68_DOMAIN_LEVEL0(
        CCM_LPCG68_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG68_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG68_DOMAIN = curr;
    }

    /**
     * Get LPCG68_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG68_DOMAIN_LEVEL get_LPCG68_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG68_DOMAIN_LEVEL((LPCG68_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG68_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG68_DOMAIN_LEVEL(CCM_LPCG68_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG68_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG68_DOMAIN = curr;
    }

    /**
     * Get all of LPCG68_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG68_DOMAIN(CCM_LPCG68_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG68_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG68_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG68_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG68_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG68_DOMAIN;

        LEVEL3 = CCM_LPCG68_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG68_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG68_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG68_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG68_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG68_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG68_DOMAIN(CCM_LPCG68_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG68_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG68_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG68_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG68_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG68_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG68_DOMAIN = curr;
    }

    /**
     * Get LPCG68_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG68_STATUS0_DOMAIN_ENABLE
    get_LPCG68_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG68_STATUS0_DOMAIN_ENABLE((LPCG68_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG68_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG68_STATUS0_ACTIVE_DOMAIN
    get_LPCG68_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG68_STATUS0_ACTIVE_DOMAIN((LPCG68_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG68_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG68_STATUS0_ON() volatile
    {
        return LPCG68_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG68_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG68_STATUS0(
        CCM_LPCG68_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG68_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG68_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG68_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG68_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG68_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG68_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG68_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG68_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG68_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG68_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG68_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG68_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG68_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG68_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG68_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG68_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG68_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG68_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG68_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG68_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG68_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG68_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG68_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG68_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG68_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG68_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG68_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG68_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG68_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG68_STATUS1_CPU3_MODE get_LPCG68_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG68_STATUS1_CPU3_MODE((LPCG68_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG68_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG68_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG68_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG68_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG68_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG68_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG68_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG68_STATUS1_CPU2_MODE get_LPCG68_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG68_STATUS1_CPU2_MODE((LPCG68_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG68_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG68_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG68_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG68_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG68_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG68_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG68_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG68_STATUS1_CPU1_MODE get_LPCG68_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG68_STATUS1_CPU1_MODE((LPCG68_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG68_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG68_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG68_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG68_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG68_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG68_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG68_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG68_STATUS1_CPU0_MODE get_LPCG68_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG68_STATUS1_CPU0_MODE((LPCG68_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG68_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG68_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG68_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG68_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG68_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG68_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG68_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG68_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG68_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG68_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG68_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG68_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG68_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG68_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG68_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG68_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG68_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG68_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG68_AUTHEN_LOCK_MODE() volatile
    {
        LPCG68_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG68_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG68_AUTHEN_LOCK_MODE() volatile
    {
        LPCG68_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG68_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG68_AUTHEN_LOCK_MODE() volatile
    {
        LPCG68_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG68_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG68_AUTHEN_CPULPM() volatile
    {
        return LPCG68_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG68_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG68_AUTHEN_CPULPM() volatile
    {
        LPCG68_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG68_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG68_AUTHEN_CPULPM() volatile
    {
        LPCG68_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG68_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG68_AUTHEN_CPULPM() volatile
    {
        LPCG68_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG68_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG68_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG68_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG68_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG68_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG68_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG68_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG68_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG68_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG68_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG68_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG68_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG68_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG68_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG68_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG68_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG68_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG68_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG68_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG68_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG68_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG68_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG68_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG68_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG68_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG68_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG68_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG68_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG68_AUTHEN_LOCK_LIST() volatile
    {
        LPCG68_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG68_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG68_AUTHEN_LOCK_LIST() volatile
    {
        LPCG68_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG68_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG68_AUTHEN_LOCK_LIST() volatile
    {
        LPCG68_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG68_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG68_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG68_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG68_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG68_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG68_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG68_AUTHEN = curr;
    }

    /**
     * Get LPCG68_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG68_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG68_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG68_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG68_AUTHEN_LOCK_TZ() volatile
    {
        LPCG68_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG68_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG68_AUTHEN_LOCK_TZ() volatile
    {
        LPCG68_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG68_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG68_AUTHEN_LOCK_TZ() volatile
    {
        LPCG68_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG68_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG68_AUTHEN_TZ_NS() volatile
    {
        return LPCG68_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG68_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG68_AUTHEN_TZ_NS() volatile
    {
        LPCG68_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG68_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG68_AUTHEN_TZ_NS() volatile
    {
        LPCG68_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG68_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG68_AUTHEN_TZ_NS() volatile
    {
        LPCG68_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG68_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG68_AUTHEN_TZ_USER() volatile
    {
        return LPCG68_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG68_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG68_AUTHEN_TZ_USER() volatile
    {
        LPCG68_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG68_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG68_AUTHEN_TZ_USER() volatile
    {
        LPCG68_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG68_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG68_AUTHEN_TZ_USER() volatile
    {
        LPCG68_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG68_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG68_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG68_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG68_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG68_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG68_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG68_AUTHEN = curr;
    }

    /**
     * Get LPCG69_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG69_DIRECT_ON() volatile
    {
        return LPCG69_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG69_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG69_DIRECT_ON() volatile
    {
        LPCG69_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG69_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG69_DIRECT_ON() volatile
    {
        LPCG69_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG69_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG69_DIRECT_ON() volatile
    {
        LPCG69_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG69_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG69_DOMAIN_LEVEL3 get_LPCG69_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG69_DOMAIN_LEVEL3((LPCG69_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG69_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG69_DOMAIN_LEVEL3(
        CCM_LPCG69_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG69_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG69_DOMAIN = curr;
    }

    /**
     * Get LPCG69_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG69_DOMAIN_LEVEL2 get_LPCG69_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG69_DOMAIN_LEVEL2((LPCG69_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG69_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG69_DOMAIN_LEVEL2(
        CCM_LPCG69_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG69_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG69_DOMAIN = curr;
    }

    /**
     * Get LPCG69_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG69_DOMAIN_LEVEL1 get_LPCG69_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG69_DOMAIN_LEVEL1((LPCG69_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG69_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG69_DOMAIN_LEVEL1(
        CCM_LPCG69_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG69_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG69_DOMAIN = curr;
    }

    /**
     * Get LPCG69_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG69_DOMAIN_LEVEL0 get_LPCG69_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG69_DOMAIN_LEVEL0((LPCG69_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG69_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG69_DOMAIN_LEVEL0(
        CCM_LPCG69_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG69_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG69_DOMAIN = curr;
    }

    /**
     * Get LPCG69_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG69_DOMAIN_LEVEL get_LPCG69_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG69_DOMAIN_LEVEL((LPCG69_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG69_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG69_DOMAIN_LEVEL(CCM_LPCG69_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG69_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG69_DOMAIN = curr;
    }

    /**
     * Get all of LPCG69_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG69_DOMAIN(CCM_LPCG69_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG69_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG69_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG69_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG69_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG69_DOMAIN;

        LEVEL3 = CCM_LPCG69_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG69_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG69_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG69_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG69_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG69_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG69_DOMAIN(CCM_LPCG69_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG69_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG69_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG69_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG69_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG69_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG69_DOMAIN = curr;
    }

    /**
     * Get LPCG69_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG69_STATUS0_DOMAIN_ENABLE
    get_LPCG69_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG69_STATUS0_DOMAIN_ENABLE((LPCG69_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG69_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG69_STATUS0_ACTIVE_DOMAIN
    get_LPCG69_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG69_STATUS0_ACTIVE_DOMAIN((LPCG69_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG69_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG69_STATUS0_ON() volatile
    {
        return LPCG69_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG69_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG69_STATUS0(
        CCM_LPCG69_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG69_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG69_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG69_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG69_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG69_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG69_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG69_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG69_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG69_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG69_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG69_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG69_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG69_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG69_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG69_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG69_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG69_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG69_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG69_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG69_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG69_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG69_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG69_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG69_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG69_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG69_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG69_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG69_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG69_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG69_STATUS1_CPU3_MODE get_LPCG69_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG69_STATUS1_CPU3_MODE((LPCG69_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG69_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG69_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG69_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG69_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG69_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG69_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG69_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG69_STATUS1_CPU2_MODE get_LPCG69_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG69_STATUS1_CPU2_MODE((LPCG69_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG69_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG69_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG69_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG69_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG69_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG69_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG69_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG69_STATUS1_CPU1_MODE get_LPCG69_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG69_STATUS1_CPU1_MODE((LPCG69_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG69_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG69_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG69_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG69_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG69_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG69_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG69_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG69_STATUS1_CPU0_MODE get_LPCG69_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG69_STATUS1_CPU0_MODE((LPCG69_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG69_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG69_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG69_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG69_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG69_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG69_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG69_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG69_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG69_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG69_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG69_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG69_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG69_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG69_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG69_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG69_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG69_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG69_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG69_AUTHEN_LOCK_MODE() volatile
    {
        LPCG69_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG69_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG69_AUTHEN_LOCK_MODE() volatile
    {
        LPCG69_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG69_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG69_AUTHEN_LOCK_MODE() volatile
    {
        LPCG69_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG69_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG69_AUTHEN_CPULPM() volatile
    {
        return LPCG69_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG69_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG69_AUTHEN_CPULPM() volatile
    {
        LPCG69_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG69_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG69_AUTHEN_CPULPM() volatile
    {
        LPCG69_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG69_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG69_AUTHEN_CPULPM() volatile
    {
        LPCG69_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG69_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG69_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG69_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG69_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG69_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG69_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG69_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG69_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG69_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG69_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG69_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG69_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG69_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG69_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG69_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG69_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG69_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG69_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG69_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG69_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG69_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG69_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG69_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG69_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG69_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG69_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG69_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG69_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG69_AUTHEN_LOCK_LIST() volatile
    {
        LPCG69_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG69_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG69_AUTHEN_LOCK_LIST() volatile
    {
        LPCG69_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG69_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG69_AUTHEN_LOCK_LIST() volatile
    {
        LPCG69_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG69_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG69_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG69_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG69_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG69_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG69_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG69_AUTHEN = curr;
    }

    /**
     * Get LPCG69_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG69_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG69_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG69_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG69_AUTHEN_LOCK_TZ() volatile
    {
        LPCG69_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG69_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG69_AUTHEN_LOCK_TZ() volatile
    {
        LPCG69_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG69_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG69_AUTHEN_LOCK_TZ() volatile
    {
        LPCG69_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG69_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG69_AUTHEN_TZ_NS() volatile
    {
        return LPCG69_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG69_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG69_AUTHEN_TZ_NS() volatile
    {
        LPCG69_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG69_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG69_AUTHEN_TZ_NS() volatile
    {
        LPCG69_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG69_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG69_AUTHEN_TZ_NS() volatile
    {
        LPCG69_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG69_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG69_AUTHEN_TZ_USER() volatile
    {
        return LPCG69_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG69_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG69_AUTHEN_TZ_USER() volatile
    {
        LPCG69_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG69_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG69_AUTHEN_TZ_USER() volatile
    {
        LPCG69_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG69_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG69_AUTHEN_TZ_USER() volatile
    {
        LPCG69_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG69_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG69_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG69_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG69_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG69_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG69_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG69_AUTHEN = curr;
    }

    /**
     * Get LPCG70_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG70_DIRECT_ON() volatile
    {
        return LPCG70_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG70_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG70_DIRECT_ON() volatile
    {
        LPCG70_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG70_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG70_DIRECT_ON() volatile
    {
        LPCG70_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG70_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG70_DIRECT_ON() volatile
    {
        LPCG70_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG70_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG70_DOMAIN_LEVEL3 get_LPCG70_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG70_DOMAIN_LEVEL3((LPCG70_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG70_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG70_DOMAIN_LEVEL3(
        CCM_LPCG70_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG70_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG70_DOMAIN = curr;
    }

    /**
     * Get LPCG70_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG70_DOMAIN_LEVEL2 get_LPCG70_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG70_DOMAIN_LEVEL2((LPCG70_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG70_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG70_DOMAIN_LEVEL2(
        CCM_LPCG70_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG70_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG70_DOMAIN = curr;
    }

    /**
     * Get LPCG70_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG70_DOMAIN_LEVEL1 get_LPCG70_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG70_DOMAIN_LEVEL1((LPCG70_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG70_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG70_DOMAIN_LEVEL1(
        CCM_LPCG70_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG70_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG70_DOMAIN = curr;
    }

    /**
     * Get LPCG70_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG70_DOMAIN_LEVEL0 get_LPCG70_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG70_DOMAIN_LEVEL0((LPCG70_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG70_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG70_DOMAIN_LEVEL0(
        CCM_LPCG70_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG70_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG70_DOMAIN = curr;
    }

    /**
     * Get LPCG70_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG70_DOMAIN_LEVEL get_LPCG70_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG70_DOMAIN_LEVEL((LPCG70_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG70_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG70_DOMAIN_LEVEL(CCM_LPCG70_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG70_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG70_DOMAIN = curr;
    }

    /**
     * Get all of LPCG70_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG70_DOMAIN(CCM_LPCG70_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG70_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG70_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG70_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG70_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG70_DOMAIN;

        LEVEL3 = CCM_LPCG70_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG70_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG70_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG70_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG70_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG70_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG70_DOMAIN(CCM_LPCG70_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG70_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG70_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG70_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG70_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG70_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG70_DOMAIN = curr;
    }

    /**
     * Get LPCG70_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG70_STATUS0_DOMAIN_ENABLE
    get_LPCG70_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG70_STATUS0_DOMAIN_ENABLE((LPCG70_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG70_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG70_STATUS0_ACTIVE_DOMAIN
    get_LPCG70_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG70_STATUS0_ACTIVE_DOMAIN((LPCG70_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG70_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG70_STATUS0_ON() volatile
    {
        return LPCG70_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG70_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG70_STATUS0(
        CCM_LPCG70_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG70_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG70_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG70_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG70_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG70_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG70_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG70_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG70_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG70_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG70_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG70_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG70_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG70_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG70_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG70_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG70_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG70_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG70_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG70_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG70_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG70_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG70_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG70_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG70_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG70_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG70_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG70_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG70_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG70_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG70_STATUS1_CPU3_MODE get_LPCG70_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG70_STATUS1_CPU3_MODE((LPCG70_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG70_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG70_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG70_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG70_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG70_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG70_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG70_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG70_STATUS1_CPU2_MODE get_LPCG70_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG70_STATUS1_CPU2_MODE((LPCG70_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG70_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG70_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG70_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG70_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG70_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG70_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG70_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG70_STATUS1_CPU1_MODE get_LPCG70_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG70_STATUS1_CPU1_MODE((LPCG70_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG70_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG70_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG70_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG70_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG70_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG70_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG70_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG70_STATUS1_CPU0_MODE get_LPCG70_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG70_STATUS1_CPU0_MODE((LPCG70_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG70_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG70_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG70_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG70_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG70_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG70_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG70_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG70_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG70_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG70_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG70_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG70_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG70_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG70_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG70_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG70_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG70_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG70_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG70_AUTHEN_LOCK_MODE() volatile
    {
        LPCG70_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG70_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG70_AUTHEN_LOCK_MODE() volatile
    {
        LPCG70_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG70_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG70_AUTHEN_LOCK_MODE() volatile
    {
        LPCG70_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG70_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG70_AUTHEN_CPULPM() volatile
    {
        return LPCG70_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG70_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG70_AUTHEN_CPULPM() volatile
    {
        LPCG70_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG70_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG70_AUTHEN_CPULPM() volatile
    {
        LPCG70_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG70_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG70_AUTHEN_CPULPM() volatile
    {
        LPCG70_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG70_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG70_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG70_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG70_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG70_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG70_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG70_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG70_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG70_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG70_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG70_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG70_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG70_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG70_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG70_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG70_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG70_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG70_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG70_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG70_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG70_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG70_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG70_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG70_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG70_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG70_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG70_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG70_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG70_AUTHEN_LOCK_LIST() volatile
    {
        LPCG70_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG70_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG70_AUTHEN_LOCK_LIST() volatile
    {
        LPCG70_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG70_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG70_AUTHEN_LOCK_LIST() volatile
    {
        LPCG70_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG70_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG70_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG70_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG70_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG70_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG70_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG70_AUTHEN = curr;
    }

    /**
     * Get LPCG70_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG70_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG70_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG70_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG70_AUTHEN_LOCK_TZ() volatile
    {
        LPCG70_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG70_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG70_AUTHEN_LOCK_TZ() volatile
    {
        LPCG70_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG70_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG70_AUTHEN_LOCK_TZ() volatile
    {
        LPCG70_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG70_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG70_AUTHEN_TZ_NS() volatile
    {
        return LPCG70_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG70_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG70_AUTHEN_TZ_NS() volatile
    {
        LPCG70_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG70_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG70_AUTHEN_TZ_NS() volatile
    {
        LPCG70_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG70_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG70_AUTHEN_TZ_NS() volatile
    {
        LPCG70_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG70_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG70_AUTHEN_TZ_USER() volatile
    {
        return LPCG70_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG70_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG70_AUTHEN_TZ_USER() volatile
    {
        LPCG70_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG70_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG70_AUTHEN_TZ_USER() volatile
    {
        LPCG70_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG70_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG70_AUTHEN_TZ_USER() volatile
    {
        LPCG70_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG70_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG70_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG70_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG70_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG70_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG70_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG70_AUTHEN = curr;
    }

    /**
     * Get LPCG71_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG71_DIRECT_ON() volatile
    {
        return LPCG71_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG71_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG71_DIRECT_ON() volatile
    {
        LPCG71_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG71_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG71_DIRECT_ON() volatile
    {
        LPCG71_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG71_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG71_DIRECT_ON() volatile
    {
        LPCG71_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG71_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG71_DOMAIN_LEVEL3 get_LPCG71_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG71_DOMAIN_LEVEL3((LPCG71_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG71_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG71_DOMAIN_LEVEL3(
        CCM_LPCG71_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG71_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG71_DOMAIN = curr;
    }

    /**
     * Get LPCG71_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG71_DOMAIN_LEVEL2 get_LPCG71_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG71_DOMAIN_LEVEL2((LPCG71_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG71_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG71_DOMAIN_LEVEL2(
        CCM_LPCG71_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG71_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG71_DOMAIN = curr;
    }

    /**
     * Get LPCG71_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG71_DOMAIN_LEVEL1 get_LPCG71_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG71_DOMAIN_LEVEL1((LPCG71_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG71_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG71_DOMAIN_LEVEL1(
        CCM_LPCG71_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG71_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG71_DOMAIN = curr;
    }

    /**
     * Get LPCG71_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG71_DOMAIN_LEVEL0 get_LPCG71_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG71_DOMAIN_LEVEL0((LPCG71_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG71_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG71_DOMAIN_LEVEL0(
        CCM_LPCG71_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG71_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG71_DOMAIN = curr;
    }

    /**
     * Get LPCG71_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG71_DOMAIN_LEVEL get_LPCG71_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG71_DOMAIN_LEVEL((LPCG71_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG71_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG71_DOMAIN_LEVEL(CCM_LPCG71_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG71_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG71_DOMAIN = curr;
    }

    /**
     * Get all of LPCG71_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG71_DOMAIN(CCM_LPCG71_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG71_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG71_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG71_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG71_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG71_DOMAIN;

        LEVEL3 = CCM_LPCG71_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG71_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG71_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG71_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG71_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG71_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG71_DOMAIN(CCM_LPCG71_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG71_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG71_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG71_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG71_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG71_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG71_DOMAIN = curr;
    }

    /**
     * Get LPCG71_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG71_STATUS0_DOMAIN_ENABLE
    get_LPCG71_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG71_STATUS0_DOMAIN_ENABLE((LPCG71_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG71_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG71_STATUS0_ACTIVE_DOMAIN
    get_LPCG71_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG71_STATUS0_ACTIVE_DOMAIN((LPCG71_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG71_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG71_STATUS0_ON() volatile
    {
        return LPCG71_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG71_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG71_STATUS0(
        CCM_LPCG71_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG71_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG71_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG71_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG71_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG71_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG71_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG71_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG71_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG71_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG71_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG71_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG71_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG71_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG71_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG71_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG71_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG71_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG71_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG71_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG71_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG71_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG71_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG71_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG71_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG71_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG71_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG71_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG71_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG71_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG71_STATUS1_CPU3_MODE get_LPCG71_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG71_STATUS1_CPU3_MODE((LPCG71_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG71_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG71_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG71_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG71_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG71_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG71_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG71_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG71_STATUS1_CPU2_MODE get_LPCG71_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG71_STATUS1_CPU2_MODE((LPCG71_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG71_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG71_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG71_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG71_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG71_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG71_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG71_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG71_STATUS1_CPU1_MODE get_LPCG71_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG71_STATUS1_CPU1_MODE((LPCG71_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG71_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG71_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG71_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG71_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG71_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG71_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG71_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG71_STATUS1_CPU0_MODE get_LPCG71_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG71_STATUS1_CPU0_MODE((LPCG71_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG71_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG71_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG71_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG71_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG71_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG71_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG71_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG71_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG71_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG71_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG71_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG71_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG71_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG71_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG71_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG71_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG71_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG71_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG71_AUTHEN_LOCK_MODE() volatile
    {
        LPCG71_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG71_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG71_AUTHEN_LOCK_MODE() volatile
    {
        LPCG71_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG71_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG71_AUTHEN_LOCK_MODE() volatile
    {
        LPCG71_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG71_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG71_AUTHEN_CPULPM() volatile
    {
        return LPCG71_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG71_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG71_AUTHEN_CPULPM() volatile
    {
        LPCG71_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG71_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG71_AUTHEN_CPULPM() volatile
    {
        LPCG71_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG71_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG71_AUTHEN_CPULPM() volatile
    {
        LPCG71_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG71_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG71_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG71_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG71_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG71_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG71_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG71_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG71_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG71_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG71_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG71_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG71_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG71_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG71_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG71_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG71_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG71_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG71_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG71_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG71_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG71_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG71_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG71_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG71_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG71_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG71_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG71_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG71_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG71_AUTHEN_LOCK_LIST() volatile
    {
        LPCG71_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG71_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG71_AUTHEN_LOCK_LIST() volatile
    {
        LPCG71_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG71_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG71_AUTHEN_LOCK_LIST() volatile
    {
        LPCG71_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG71_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG71_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG71_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG71_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG71_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG71_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG71_AUTHEN = curr;
    }

    /**
     * Get LPCG71_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG71_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG71_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG71_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG71_AUTHEN_LOCK_TZ() volatile
    {
        LPCG71_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG71_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG71_AUTHEN_LOCK_TZ() volatile
    {
        LPCG71_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG71_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG71_AUTHEN_LOCK_TZ() volatile
    {
        LPCG71_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG71_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG71_AUTHEN_TZ_NS() volatile
    {
        return LPCG71_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG71_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG71_AUTHEN_TZ_NS() volatile
    {
        LPCG71_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG71_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG71_AUTHEN_TZ_NS() volatile
    {
        LPCG71_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG71_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG71_AUTHEN_TZ_NS() volatile
    {
        LPCG71_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG71_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG71_AUTHEN_TZ_USER() volatile
    {
        return LPCG71_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG71_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG71_AUTHEN_TZ_USER() volatile
    {
        LPCG71_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG71_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG71_AUTHEN_TZ_USER() volatile
    {
        LPCG71_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG71_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG71_AUTHEN_TZ_USER() volatile
    {
        LPCG71_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG71_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG71_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG71_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG71_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG71_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG71_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG71_AUTHEN = curr;
    }

    /**
     * Get LPCG72_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG72_DIRECT_ON() volatile
    {
        return LPCG72_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG72_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG72_DIRECT_ON() volatile
    {
        LPCG72_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG72_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG72_DIRECT_ON() volatile
    {
        LPCG72_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG72_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG72_DIRECT_ON() volatile
    {
        LPCG72_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG72_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG72_DOMAIN_LEVEL3 get_LPCG72_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG72_DOMAIN_LEVEL3((LPCG72_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG72_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG72_DOMAIN_LEVEL3(
        CCM_LPCG72_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG72_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG72_DOMAIN = curr;
    }

    /**
     * Get LPCG72_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG72_DOMAIN_LEVEL2 get_LPCG72_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG72_DOMAIN_LEVEL2((LPCG72_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG72_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG72_DOMAIN_LEVEL2(
        CCM_LPCG72_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG72_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG72_DOMAIN = curr;
    }

    /**
     * Get LPCG72_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG72_DOMAIN_LEVEL1 get_LPCG72_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG72_DOMAIN_LEVEL1((LPCG72_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG72_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG72_DOMAIN_LEVEL1(
        CCM_LPCG72_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG72_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG72_DOMAIN = curr;
    }

    /**
     * Get LPCG72_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG72_DOMAIN_LEVEL0 get_LPCG72_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG72_DOMAIN_LEVEL0((LPCG72_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG72_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG72_DOMAIN_LEVEL0(
        CCM_LPCG72_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG72_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG72_DOMAIN = curr;
    }

    /**
     * Get LPCG72_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG72_DOMAIN_LEVEL get_LPCG72_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG72_DOMAIN_LEVEL((LPCG72_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG72_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG72_DOMAIN_LEVEL(CCM_LPCG72_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG72_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG72_DOMAIN = curr;
    }

    /**
     * Get all of LPCG72_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG72_DOMAIN(CCM_LPCG72_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG72_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG72_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG72_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG72_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG72_DOMAIN;

        LEVEL3 = CCM_LPCG72_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG72_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG72_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG72_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG72_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG72_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG72_DOMAIN(CCM_LPCG72_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG72_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG72_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG72_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG72_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG72_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG72_DOMAIN = curr;
    }

    /**
     * Get LPCG72_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG72_STATUS0_DOMAIN_ENABLE
    get_LPCG72_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG72_STATUS0_DOMAIN_ENABLE((LPCG72_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG72_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG72_STATUS0_ACTIVE_DOMAIN
    get_LPCG72_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG72_STATUS0_ACTIVE_DOMAIN((LPCG72_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG72_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG72_STATUS0_ON() volatile
    {
        return LPCG72_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG72_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG72_STATUS0(
        CCM_LPCG72_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG72_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG72_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG72_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG72_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG72_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG72_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG72_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG72_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG72_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG72_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG72_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG72_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG72_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG72_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG72_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG72_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG72_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG72_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG72_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG72_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG72_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG72_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG72_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG72_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG72_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG72_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG72_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG72_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG72_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG72_STATUS1_CPU3_MODE get_LPCG72_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG72_STATUS1_CPU3_MODE((LPCG72_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG72_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG72_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG72_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG72_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG72_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG72_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG72_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG72_STATUS1_CPU2_MODE get_LPCG72_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG72_STATUS1_CPU2_MODE((LPCG72_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG72_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG72_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG72_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG72_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG72_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG72_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG72_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG72_STATUS1_CPU1_MODE get_LPCG72_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG72_STATUS1_CPU1_MODE((LPCG72_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG72_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG72_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG72_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG72_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG72_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG72_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG72_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG72_STATUS1_CPU0_MODE get_LPCG72_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG72_STATUS1_CPU0_MODE((LPCG72_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG72_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG72_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG72_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG72_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG72_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG72_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG72_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG72_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG72_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG72_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG72_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG72_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG72_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG72_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG72_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG72_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG72_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG72_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG72_AUTHEN_LOCK_MODE() volatile
    {
        LPCG72_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG72_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG72_AUTHEN_LOCK_MODE() volatile
    {
        LPCG72_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG72_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG72_AUTHEN_LOCK_MODE() volatile
    {
        LPCG72_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG72_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG72_AUTHEN_CPULPM() volatile
    {
        return LPCG72_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG72_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG72_AUTHEN_CPULPM() volatile
    {
        LPCG72_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG72_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG72_AUTHEN_CPULPM() volatile
    {
        LPCG72_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG72_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG72_AUTHEN_CPULPM() volatile
    {
        LPCG72_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG72_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG72_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG72_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG72_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG72_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG72_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG72_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG72_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG72_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG72_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG72_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG72_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG72_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG72_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG72_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG72_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG72_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG72_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG72_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG72_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG72_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG72_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG72_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG72_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG72_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG72_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG72_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG72_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG72_AUTHEN_LOCK_LIST() volatile
    {
        LPCG72_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG72_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG72_AUTHEN_LOCK_LIST() volatile
    {
        LPCG72_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG72_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG72_AUTHEN_LOCK_LIST() volatile
    {
        LPCG72_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG72_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG72_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG72_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG72_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG72_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG72_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG72_AUTHEN = curr;
    }

    /**
     * Get LPCG72_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG72_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG72_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG72_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG72_AUTHEN_LOCK_TZ() volatile
    {
        LPCG72_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG72_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG72_AUTHEN_LOCK_TZ() volatile
    {
        LPCG72_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG72_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG72_AUTHEN_LOCK_TZ() volatile
    {
        LPCG72_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG72_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG72_AUTHEN_TZ_NS() volatile
    {
        return LPCG72_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG72_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG72_AUTHEN_TZ_NS() volatile
    {
        LPCG72_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG72_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG72_AUTHEN_TZ_NS() volatile
    {
        LPCG72_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG72_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG72_AUTHEN_TZ_NS() volatile
    {
        LPCG72_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG72_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG72_AUTHEN_TZ_USER() volatile
    {
        return LPCG72_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG72_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG72_AUTHEN_TZ_USER() volatile
    {
        LPCG72_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG72_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG72_AUTHEN_TZ_USER() volatile
    {
        LPCG72_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG72_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG72_AUTHEN_TZ_USER() volatile
    {
        LPCG72_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG72_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG72_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG72_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG72_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG72_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG72_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG72_AUTHEN = curr;
    }

    /**
     * Get LPCG73_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG73_DIRECT_ON() volatile
    {
        return LPCG73_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG73_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG73_DIRECT_ON() volatile
    {
        LPCG73_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG73_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG73_DIRECT_ON() volatile
    {
        LPCG73_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG73_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG73_DIRECT_ON() volatile
    {
        LPCG73_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG73_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG73_DOMAIN_LEVEL3 get_LPCG73_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG73_DOMAIN_LEVEL3((LPCG73_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG73_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG73_DOMAIN_LEVEL3(
        CCM_LPCG73_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG73_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG73_DOMAIN = curr;
    }

    /**
     * Get LPCG73_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG73_DOMAIN_LEVEL2 get_LPCG73_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG73_DOMAIN_LEVEL2((LPCG73_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG73_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG73_DOMAIN_LEVEL2(
        CCM_LPCG73_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG73_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG73_DOMAIN = curr;
    }

    /**
     * Get LPCG73_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG73_DOMAIN_LEVEL1 get_LPCG73_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG73_DOMAIN_LEVEL1((LPCG73_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG73_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG73_DOMAIN_LEVEL1(
        CCM_LPCG73_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG73_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG73_DOMAIN = curr;
    }

    /**
     * Get LPCG73_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG73_DOMAIN_LEVEL0 get_LPCG73_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG73_DOMAIN_LEVEL0((LPCG73_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG73_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG73_DOMAIN_LEVEL0(
        CCM_LPCG73_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG73_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG73_DOMAIN = curr;
    }

    /**
     * Get LPCG73_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG73_DOMAIN_LEVEL get_LPCG73_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG73_DOMAIN_LEVEL((LPCG73_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG73_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG73_DOMAIN_LEVEL(CCM_LPCG73_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG73_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG73_DOMAIN = curr;
    }

    /**
     * Get all of LPCG73_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG73_DOMAIN(CCM_LPCG73_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG73_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG73_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG73_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG73_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG73_DOMAIN;

        LEVEL3 = CCM_LPCG73_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG73_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG73_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG73_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG73_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG73_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG73_DOMAIN(CCM_LPCG73_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG73_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG73_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG73_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG73_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG73_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG73_DOMAIN = curr;
    }

    /**
     * Get LPCG73_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG73_STATUS0_DOMAIN_ENABLE
    get_LPCG73_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG73_STATUS0_DOMAIN_ENABLE((LPCG73_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG73_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG73_STATUS0_ACTIVE_DOMAIN
    get_LPCG73_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG73_STATUS0_ACTIVE_DOMAIN((LPCG73_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG73_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG73_STATUS0_ON() volatile
    {
        return LPCG73_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG73_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG73_STATUS0(
        CCM_LPCG73_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG73_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG73_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG73_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG73_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG73_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG73_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG73_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG73_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG73_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG73_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG73_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG73_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG73_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG73_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG73_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG73_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG73_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG73_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG73_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG73_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG73_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG73_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG73_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG73_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG73_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG73_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG73_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG73_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG73_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG73_STATUS1_CPU3_MODE get_LPCG73_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG73_STATUS1_CPU3_MODE((LPCG73_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG73_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG73_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG73_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG73_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG73_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG73_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG73_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG73_STATUS1_CPU2_MODE get_LPCG73_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG73_STATUS1_CPU2_MODE((LPCG73_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG73_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG73_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG73_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG73_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG73_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG73_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG73_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG73_STATUS1_CPU1_MODE get_LPCG73_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG73_STATUS1_CPU1_MODE((LPCG73_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG73_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG73_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG73_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG73_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG73_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG73_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG73_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG73_STATUS1_CPU0_MODE get_LPCG73_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG73_STATUS1_CPU0_MODE((LPCG73_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG73_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG73_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG73_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG73_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG73_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG73_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG73_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG73_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG73_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG73_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG73_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG73_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG73_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG73_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG73_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG73_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG73_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG73_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG73_AUTHEN_LOCK_MODE() volatile
    {
        LPCG73_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG73_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG73_AUTHEN_LOCK_MODE() volatile
    {
        LPCG73_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG73_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG73_AUTHEN_LOCK_MODE() volatile
    {
        LPCG73_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG73_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG73_AUTHEN_CPULPM() volatile
    {
        return LPCG73_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG73_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG73_AUTHEN_CPULPM() volatile
    {
        LPCG73_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG73_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG73_AUTHEN_CPULPM() volatile
    {
        LPCG73_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG73_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG73_AUTHEN_CPULPM() volatile
    {
        LPCG73_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG73_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG73_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG73_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG73_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG73_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG73_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG73_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG73_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG73_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG73_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG73_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG73_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG73_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG73_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG73_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG73_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG73_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG73_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG73_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG73_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG73_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG73_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG73_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG73_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG73_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG73_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG73_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG73_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG73_AUTHEN_LOCK_LIST() volatile
    {
        LPCG73_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG73_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG73_AUTHEN_LOCK_LIST() volatile
    {
        LPCG73_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG73_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG73_AUTHEN_LOCK_LIST() volatile
    {
        LPCG73_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG73_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG73_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG73_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG73_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG73_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG73_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG73_AUTHEN = curr;
    }

    /**
     * Get LPCG73_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG73_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG73_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG73_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG73_AUTHEN_LOCK_TZ() volatile
    {
        LPCG73_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG73_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG73_AUTHEN_LOCK_TZ() volatile
    {
        LPCG73_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG73_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG73_AUTHEN_LOCK_TZ() volatile
    {
        LPCG73_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG73_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG73_AUTHEN_TZ_NS() volatile
    {
        return LPCG73_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG73_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG73_AUTHEN_TZ_NS() volatile
    {
        LPCG73_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG73_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG73_AUTHEN_TZ_NS() volatile
    {
        LPCG73_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG73_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG73_AUTHEN_TZ_NS() volatile
    {
        LPCG73_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG73_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG73_AUTHEN_TZ_USER() volatile
    {
        return LPCG73_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG73_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG73_AUTHEN_TZ_USER() volatile
    {
        LPCG73_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG73_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG73_AUTHEN_TZ_USER() volatile
    {
        LPCG73_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG73_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG73_AUTHEN_TZ_USER() volatile
    {
        LPCG73_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG73_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG73_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG73_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG73_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG73_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG73_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG73_AUTHEN = curr;
    }

    /**
     * Get LPCG74_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG74_DIRECT_ON() volatile
    {
        return LPCG74_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG74_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG74_DIRECT_ON() volatile
    {
        LPCG74_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG74_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG74_DIRECT_ON() volatile
    {
        LPCG74_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG74_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG74_DIRECT_ON() volatile
    {
        LPCG74_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG74_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG74_DOMAIN_LEVEL3 get_LPCG74_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG74_DOMAIN_LEVEL3((LPCG74_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG74_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG74_DOMAIN_LEVEL3(
        CCM_LPCG74_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG74_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG74_DOMAIN = curr;
    }

    /**
     * Get LPCG74_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG74_DOMAIN_LEVEL2 get_LPCG74_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG74_DOMAIN_LEVEL2((LPCG74_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG74_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG74_DOMAIN_LEVEL2(
        CCM_LPCG74_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG74_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG74_DOMAIN = curr;
    }

    /**
     * Get LPCG74_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG74_DOMAIN_LEVEL1 get_LPCG74_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG74_DOMAIN_LEVEL1((LPCG74_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG74_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG74_DOMAIN_LEVEL1(
        CCM_LPCG74_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG74_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG74_DOMAIN = curr;
    }

    /**
     * Get LPCG74_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG74_DOMAIN_LEVEL0 get_LPCG74_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG74_DOMAIN_LEVEL0((LPCG74_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG74_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG74_DOMAIN_LEVEL0(
        CCM_LPCG74_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG74_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG74_DOMAIN = curr;
    }

    /**
     * Get LPCG74_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG74_DOMAIN_LEVEL get_LPCG74_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG74_DOMAIN_LEVEL((LPCG74_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG74_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG74_DOMAIN_LEVEL(CCM_LPCG74_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG74_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG74_DOMAIN = curr;
    }

    /**
     * Get all of LPCG74_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG74_DOMAIN(CCM_LPCG74_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG74_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG74_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG74_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG74_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG74_DOMAIN;

        LEVEL3 = CCM_LPCG74_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG74_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG74_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG74_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG74_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG74_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG74_DOMAIN(CCM_LPCG74_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG74_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG74_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG74_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG74_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG74_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG74_DOMAIN = curr;
    }

    /**
     * Get LPCG74_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG74_STATUS0_DOMAIN_ENABLE
    get_LPCG74_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG74_STATUS0_DOMAIN_ENABLE((LPCG74_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG74_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG74_STATUS0_ACTIVE_DOMAIN
    get_LPCG74_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG74_STATUS0_ACTIVE_DOMAIN((LPCG74_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG74_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG74_STATUS0_ON() volatile
    {
        return LPCG74_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG74_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG74_STATUS0(
        CCM_LPCG74_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG74_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG74_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG74_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG74_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG74_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG74_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG74_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG74_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG74_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG74_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG74_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG74_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG74_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG74_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG74_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG74_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG74_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG74_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG74_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG74_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG74_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG74_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG74_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG74_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG74_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG74_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG74_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG74_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG74_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG74_STATUS1_CPU3_MODE get_LPCG74_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG74_STATUS1_CPU3_MODE((LPCG74_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG74_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG74_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG74_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG74_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG74_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG74_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG74_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG74_STATUS1_CPU2_MODE get_LPCG74_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG74_STATUS1_CPU2_MODE((LPCG74_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG74_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG74_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG74_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG74_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG74_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG74_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG74_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG74_STATUS1_CPU1_MODE get_LPCG74_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG74_STATUS1_CPU1_MODE((LPCG74_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG74_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG74_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG74_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG74_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG74_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG74_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG74_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG74_STATUS1_CPU0_MODE get_LPCG74_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG74_STATUS1_CPU0_MODE((LPCG74_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG74_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG74_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG74_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG74_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG74_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG74_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG74_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG74_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG74_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG74_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG74_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG74_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG74_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG74_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG74_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG74_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG74_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG74_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG74_AUTHEN_LOCK_MODE() volatile
    {
        LPCG74_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG74_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG74_AUTHEN_LOCK_MODE() volatile
    {
        LPCG74_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG74_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG74_AUTHEN_LOCK_MODE() volatile
    {
        LPCG74_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG74_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG74_AUTHEN_CPULPM() volatile
    {
        return LPCG74_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG74_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG74_AUTHEN_CPULPM() volatile
    {
        LPCG74_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG74_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG74_AUTHEN_CPULPM() volatile
    {
        LPCG74_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG74_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG74_AUTHEN_CPULPM() volatile
    {
        LPCG74_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG74_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG74_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG74_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG74_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG74_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG74_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG74_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG74_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG74_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG74_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG74_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG74_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG74_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG74_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG74_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG74_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG74_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG74_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG74_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG74_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG74_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG74_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG74_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG74_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG74_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG74_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG74_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG74_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG74_AUTHEN_LOCK_LIST() volatile
    {
        LPCG74_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG74_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG74_AUTHEN_LOCK_LIST() volatile
    {
        LPCG74_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG74_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG74_AUTHEN_LOCK_LIST() volatile
    {
        LPCG74_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG74_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG74_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG74_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG74_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG74_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG74_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG74_AUTHEN = curr;
    }

    /**
     * Get LPCG74_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG74_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG74_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG74_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG74_AUTHEN_LOCK_TZ() volatile
    {
        LPCG74_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG74_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG74_AUTHEN_LOCK_TZ() volatile
    {
        LPCG74_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG74_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG74_AUTHEN_LOCK_TZ() volatile
    {
        LPCG74_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG74_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG74_AUTHEN_TZ_NS() volatile
    {
        return LPCG74_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG74_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG74_AUTHEN_TZ_NS() volatile
    {
        LPCG74_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG74_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG74_AUTHEN_TZ_NS() volatile
    {
        LPCG74_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG74_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG74_AUTHEN_TZ_NS() volatile
    {
        LPCG74_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG74_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG74_AUTHEN_TZ_USER() volatile
    {
        return LPCG74_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG74_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG74_AUTHEN_TZ_USER() volatile
    {
        LPCG74_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG74_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG74_AUTHEN_TZ_USER() volatile
    {
        LPCG74_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG74_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG74_AUTHEN_TZ_USER() volatile
    {
        LPCG74_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG74_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG74_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG74_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG74_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG74_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG74_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG74_AUTHEN = curr;
    }

    /**
     * Get LPCG75_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG75_DIRECT_ON() volatile
    {
        return LPCG75_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG75_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG75_DIRECT_ON() volatile
    {
        LPCG75_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG75_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG75_DIRECT_ON() volatile
    {
        LPCG75_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG75_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG75_DIRECT_ON() volatile
    {
        LPCG75_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG75_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG75_DOMAIN_LEVEL3 get_LPCG75_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG75_DOMAIN_LEVEL3((LPCG75_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG75_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG75_DOMAIN_LEVEL3(
        CCM_LPCG75_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG75_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG75_DOMAIN = curr;
    }

    /**
     * Get LPCG75_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG75_DOMAIN_LEVEL2 get_LPCG75_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG75_DOMAIN_LEVEL2((LPCG75_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG75_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG75_DOMAIN_LEVEL2(
        CCM_LPCG75_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG75_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG75_DOMAIN = curr;
    }

    /**
     * Get LPCG75_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG75_DOMAIN_LEVEL1 get_LPCG75_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG75_DOMAIN_LEVEL1((LPCG75_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG75_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG75_DOMAIN_LEVEL1(
        CCM_LPCG75_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG75_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG75_DOMAIN = curr;
    }

    /**
     * Get LPCG75_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG75_DOMAIN_LEVEL0 get_LPCG75_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG75_DOMAIN_LEVEL0((LPCG75_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG75_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG75_DOMAIN_LEVEL0(
        CCM_LPCG75_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG75_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG75_DOMAIN = curr;
    }

    /**
     * Get LPCG75_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG75_DOMAIN_LEVEL get_LPCG75_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG75_DOMAIN_LEVEL((LPCG75_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG75_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG75_DOMAIN_LEVEL(CCM_LPCG75_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG75_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG75_DOMAIN = curr;
    }

    /**
     * Get all of LPCG75_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG75_DOMAIN(CCM_LPCG75_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG75_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG75_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG75_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG75_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG75_DOMAIN;

        LEVEL3 = CCM_LPCG75_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG75_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG75_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG75_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG75_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG75_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG75_DOMAIN(CCM_LPCG75_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG75_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG75_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG75_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG75_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG75_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG75_DOMAIN = curr;
    }

    /**
     * Get LPCG75_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG75_STATUS0_DOMAIN_ENABLE
    get_LPCG75_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG75_STATUS0_DOMAIN_ENABLE((LPCG75_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG75_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG75_STATUS0_ACTIVE_DOMAIN
    get_LPCG75_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG75_STATUS0_ACTIVE_DOMAIN((LPCG75_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG75_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG75_STATUS0_ON() volatile
    {
        return LPCG75_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG75_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG75_STATUS0(
        CCM_LPCG75_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG75_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG75_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG75_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG75_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG75_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG75_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG75_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG75_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG75_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG75_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG75_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG75_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG75_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG75_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG75_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG75_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG75_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG75_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG75_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG75_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG75_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG75_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG75_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG75_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG75_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG75_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG75_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG75_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG75_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG75_STATUS1_CPU3_MODE get_LPCG75_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG75_STATUS1_CPU3_MODE((LPCG75_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG75_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG75_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG75_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG75_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG75_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG75_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG75_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG75_STATUS1_CPU2_MODE get_LPCG75_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG75_STATUS1_CPU2_MODE((LPCG75_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG75_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG75_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG75_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG75_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG75_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG75_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG75_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG75_STATUS1_CPU1_MODE get_LPCG75_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG75_STATUS1_CPU1_MODE((LPCG75_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG75_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG75_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG75_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG75_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG75_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG75_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG75_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG75_STATUS1_CPU0_MODE get_LPCG75_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG75_STATUS1_CPU0_MODE((LPCG75_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG75_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG75_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG75_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG75_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG75_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG75_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG75_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG75_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG75_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG75_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG75_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG75_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG75_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG75_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG75_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG75_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG75_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG75_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG75_AUTHEN_LOCK_MODE() volatile
    {
        LPCG75_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG75_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG75_AUTHEN_LOCK_MODE() volatile
    {
        LPCG75_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG75_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG75_AUTHEN_LOCK_MODE() volatile
    {
        LPCG75_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG75_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG75_AUTHEN_CPULPM() volatile
    {
        return LPCG75_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG75_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG75_AUTHEN_CPULPM() volatile
    {
        LPCG75_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG75_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG75_AUTHEN_CPULPM() volatile
    {
        LPCG75_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG75_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG75_AUTHEN_CPULPM() volatile
    {
        LPCG75_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG75_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG75_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG75_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG75_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG75_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG75_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG75_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG75_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG75_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG75_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG75_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG75_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG75_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG75_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG75_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG75_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG75_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG75_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG75_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG75_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG75_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG75_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG75_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG75_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG75_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG75_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG75_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG75_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG75_AUTHEN_LOCK_LIST() volatile
    {
        LPCG75_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG75_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG75_AUTHEN_LOCK_LIST() volatile
    {
        LPCG75_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG75_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG75_AUTHEN_LOCK_LIST() volatile
    {
        LPCG75_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG75_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG75_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG75_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG75_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG75_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG75_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG75_AUTHEN = curr;
    }

    /**
     * Get LPCG75_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG75_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG75_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG75_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG75_AUTHEN_LOCK_TZ() volatile
    {
        LPCG75_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG75_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG75_AUTHEN_LOCK_TZ() volatile
    {
        LPCG75_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG75_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG75_AUTHEN_LOCK_TZ() volatile
    {
        LPCG75_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG75_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG75_AUTHEN_TZ_NS() volatile
    {
        return LPCG75_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG75_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG75_AUTHEN_TZ_NS() volatile
    {
        LPCG75_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG75_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG75_AUTHEN_TZ_NS() volatile
    {
        LPCG75_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG75_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG75_AUTHEN_TZ_NS() volatile
    {
        LPCG75_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG75_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG75_AUTHEN_TZ_USER() volatile
    {
        return LPCG75_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG75_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG75_AUTHEN_TZ_USER() volatile
    {
        LPCG75_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG75_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG75_AUTHEN_TZ_USER() volatile
    {
        LPCG75_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG75_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG75_AUTHEN_TZ_USER() volatile
    {
        LPCG75_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG75_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG75_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG75_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG75_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG75_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG75_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG75_AUTHEN = curr;
    }

    /**
     * Get LPCG76_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG76_DIRECT_ON() volatile
    {
        return LPCG76_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG76_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG76_DIRECT_ON() volatile
    {
        LPCG76_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG76_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG76_DIRECT_ON() volatile
    {
        LPCG76_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG76_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG76_DIRECT_ON() volatile
    {
        LPCG76_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG76_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG76_DOMAIN_LEVEL3 get_LPCG76_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG76_DOMAIN_LEVEL3((LPCG76_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG76_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG76_DOMAIN_LEVEL3(
        CCM_LPCG76_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG76_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG76_DOMAIN = curr;
    }

    /**
     * Get LPCG76_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG76_DOMAIN_LEVEL2 get_LPCG76_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG76_DOMAIN_LEVEL2((LPCG76_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG76_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG76_DOMAIN_LEVEL2(
        CCM_LPCG76_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG76_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG76_DOMAIN = curr;
    }

    /**
     * Get LPCG76_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG76_DOMAIN_LEVEL1 get_LPCG76_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG76_DOMAIN_LEVEL1((LPCG76_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG76_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG76_DOMAIN_LEVEL1(
        CCM_LPCG76_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG76_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG76_DOMAIN = curr;
    }

    /**
     * Get LPCG76_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG76_DOMAIN_LEVEL0 get_LPCG76_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG76_DOMAIN_LEVEL0((LPCG76_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG76_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG76_DOMAIN_LEVEL0(
        CCM_LPCG76_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG76_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG76_DOMAIN = curr;
    }

    /**
     * Get LPCG76_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG76_DOMAIN_LEVEL get_LPCG76_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG76_DOMAIN_LEVEL((LPCG76_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG76_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG76_DOMAIN_LEVEL(CCM_LPCG76_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG76_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG76_DOMAIN = curr;
    }

    /**
     * Get all of LPCG76_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG76_DOMAIN(CCM_LPCG76_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG76_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG76_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG76_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG76_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG76_DOMAIN;

        LEVEL3 = CCM_LPCG76_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG76_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG76_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG76_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG76_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG76_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG76_DOMAIN(CCM_LPCG76_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG76_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG76_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG76_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG76_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG76_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG76_DOMAIN = curr;
    }

    /**
     * Get LPCG76_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG76_STATUS0_DOMAIN_ENABLE
    get_LPCG76_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG76_STATUS0_DOMAIN_ENABLE((LPCG76_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG76_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG76_STATUS0_ACTIVE_DOMAIN
    get_LPCG76_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG76_STATUS0_ACTIVE_DOMAIN((LPCG76_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG76_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG76_STATUS0_ON() volatile
    {
        return LPCG76_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG76_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG76_STATUS0(
        CCM_LPCG76_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG76_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG76_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG76_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG76_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG76_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG76_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG76_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG76_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG76_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG76_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG76_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG76_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG76_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG76_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG76_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG76_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG76_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG76_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG76_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG76_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG76_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG76_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG76_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG76_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG76_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG76_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG76_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG76_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG76_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG76_STATUS1_CPU3_MODE get_LPCG76_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG76_STATUS1_CPU3_MODE((LPCG76_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG76_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG76_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG76_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG76_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG76_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG76_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG76_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG76_STATUS1_CPU2_MODE get_LPCG76_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG76_STATUS1_CPU2_MODE((LPCG76_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG76_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG76_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG76_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG76_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG76_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG76_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG76_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG76_STATUS1_CPU1_MODE get_LPCG76_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG76_STATUS1_CPU1_MODE((LPCG76_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG76_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG76_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG76_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG76_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG76_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG76_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG76_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG76_STATUS1_CPU0_MODE get_LPCG76_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG76_STATUS1_CPU0_MODE((LPCG76_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG76_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG76_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG76_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG76_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG76_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG76_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG76_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG76_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG76_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG76_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG76_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG76_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG76_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG76_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG76_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG76_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG76_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG76_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG76_AUTHEN_LOCK_MODE() volatile
    {
        LPCG76_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG76_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG76_AUTHEN_LOCK_MODE() volatile
    {
        LPCG76_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG76_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG76_AUTHEN_LOCK_MODE() volatile
    {
        LPCG76_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG76_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG76_AUTHEN_CPULPM() volatile
    {
        return LPCG76_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG76_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG76_AUTHEN_CPULPM() volatile
    {
        LPCG76_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG76_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG76_AUTHEN_CPULPM() volatile
    {
        LPCG76_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG76_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG76_AUTHEN_CPULPM() volatile
    {
        LPCG76_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG76_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG76_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG76_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG76_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG76_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG76_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG76_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG76_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG76_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG76_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG76_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG76_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG76_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG76_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG76_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG76_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG76_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG76_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG76_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG76_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG76_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG76_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG76_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG76_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG76_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG76_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG76_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG76_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG76_AUTHEN_LOCK_LIST() volatile
    {
        LPCG76_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG76_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG76_AUTHEN_LOCK_LIST() volatile
    {
        LPCG76_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG76_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG76_AUTHEN_LOCK_LIST() volatile
    {
        LPCG76_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG76_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG76_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG76_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG76_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG76_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG76_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG76_AUTHEN = curr;
    }

    /**
     * Get LPCG76_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG76_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG76_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG76_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG76_AUTHEN_LOCK_TZ() volatile
    {
        LPCG76_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG76_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG76_AUTHEN_LOCK_TZ() volatile
    {
        LPCG76_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG76_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG76_AUTHEN_LOCK_TZ() volatile
    {
        LPCG76_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG76_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG76_AUTHEN_TZ_NS() volatile
    {
        return LPCG76_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG76_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG76_AUTHEN_TZ_NS() volatile
    {
        LPCG76_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG76_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG76_AUTHEN_TZ_NS() volatile
    {
        LPCG76_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG76_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG76_AUTHEN_TZ_NS() volatile
    {
        LPCG76_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG76_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG76_AUTHEN_TZ_USER() volatile
    {
        return LPCG76_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG76_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG76_AUTHEN_TZ_USER() volatile
    {
        LPCG76_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG76_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG76_AUTHEN_TZ_USER() volatile
    {
        LPCG76_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG76_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG76_AUTHEN_TZ_USER() volatile
    {
        LPCG76_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG76_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG76_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG76_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG76_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG76_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG76_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG76_AUTHEN = curr;
    }

    /**
     * Get LPCG77_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG77_DIRECT_ON() volatile
    {
        return LPCG77_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG77_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG77_DIRECT_ON() volatile
    {
        LPCG77_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG77_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG77_DIRECT_ON() volatile
    {
        LPCG77_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG77_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG77_DIRECT_ON() volatile
    {
        LPCG77_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG77_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG77_DOMAIN_LEVEL3 get_LPCG77_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG77_DOMAIN_LEVEL3((LPCG77_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG77_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG77_DOMAIN_LEVEL3(
        CCM_LPCG77_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG77_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG77_DOMAIN = curr;
    }

    /**
     * Get LPCG77_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG77_DOMAIN_LEVEL2 get_LPCG77_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG77_DOMAIN_LEVEL2((LPCG77_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG77_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG77_DOMAIN_LEVEL2(
        CCM_LPCG77_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG77_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG77_DOMAIN = curr;
    }

    /**
     * Get LPCG77_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG77_DOMAIN_LEVEL1 get_LPCG77_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG77_DOMAIN_LEVEL1((LPCG77_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG77_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG77_DOMAIN_LEVEL1(
        CCM_LPCG77_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG77_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG77_DOMAIN = curr;
    }

    /**
     * Get LPCG77_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG77_DOMAIN_LEVEL0 get_LPCG77_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG77_DOMAIN_LEVEL0((LPCG77_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG77_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG77_DOMAIN_LEVEL0(
        CCM_LPCG77_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG77_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG77_DOMAIN = curr;
    }

    /**
     * Get LPCG77_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG77_DOMAIN_LEVEL get_LPCG77_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG77_DOMAIN_LEVEL((LPCG77_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG77_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG77_DOMAIN_LEVEL(CCM_LPCG77_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG77_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG77_DOMAIN = curr;
    }

    /**
     * Get all of LPCG77_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG77_DOMAIN(CCM_LPCG77_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG77_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG77_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG77_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG77_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG77_DOMAIN;

        LEVEL3 = CCM_LPCG77_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG77_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG77_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG77_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG77_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG77_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG77_DOMAIN(CCM_LPCG77_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG77_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG77_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG77_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG77_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG77_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG77_DOMAIN = curr;
    }

    /**
     * Get LPCG77_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG77_STATUS0_DOMAIN_ENABLE
    get_LPCG77_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG77_STATUS0_DOMAIN_ENABLE((LPCG77_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG77_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG77_STATUS0_ACTIVE_DOMAIN
    get_LPCG77_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG77_STATUS0_ACTIVE_DOMAIN((LPCG77_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG77_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG77_STATUS0_ON() volatile
    {
        return LPCG77_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG77_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG77_STATUS0(
        CCM_LPCG77_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG77_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG77_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG77_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG77_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG77_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG77_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG77_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG77_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG77_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG77_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG77_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG77_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG77_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG77_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG77_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG77_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG77_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG77_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG77_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG77_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG77_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG77_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG77_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG77_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG77_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG77_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG77_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG77_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG77_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG77_STATUS1_CPU3_MODE get_LPCG77_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG77_STATUS1_CPU3_MODE((LPCG77_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG77_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG77_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG77_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG77_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG77_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG77_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG77_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG77_STATUS1_CPU2_MODE get_LPCG77_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG77_STATUS1_CPU2_MODE((LPCG77_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG77_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG77_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG77_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG77_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG77_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG77_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG77_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG77_STATUS1_CPU1_MODE get_LPCG77_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG77_STATUS1_CPU1_MODE((LPCG77_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG77_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG77_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG77_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG77_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG77_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG77_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG77_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG77_STATUS1_CPU0_MODE get_LPCG77_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG77_STATUS1_CPU0_MODE((LPCG77_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG77_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG77_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG77_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG77_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG77_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG77_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG77_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG77_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG77_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG77_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG77_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG77_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG77_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG77_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG77_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG77_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG77_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG77_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG77_AUTHEN_LOCK_MODE() volatile
    {
        LPCG77_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG77_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG77_AUTHEN_LOCK_MODE() volatile
    {
        LPCG77_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG77_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG77_AUTHEN_LOCK_MODE() volatile
    {
        LPCG77_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG77_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG77_AUTHEN_CPULPM() volatile
    {
        return LPCG77_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG77_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG77_AUTHEN_CPULPM() volatile
    {
        LPCG77_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG77_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG77_AUTHEN_CPULPM() volatile
    {
        LPCG77_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG77_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG77_AUTHEN_CPULPM() volatile
    {
        LPCG77_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG77_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG77_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG77_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG77_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG77_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG77_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG77_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG77_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG77_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG77_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG77_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG77_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG77_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG77_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG77_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG77_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG77_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG77_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG77_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG77_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG77_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG77_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG77_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG77_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG77_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG77_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG77_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG77_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG77_AUTHEN_LOCK_LIST() volatile
    {
        LPCG77_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG77_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG77_AUTHEN_LOCK_LIST() volatile
    {
        LPCG77_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG77_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG77_AUTHEN_LOCK_LIST() volatile
    {
        LPCG77_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG77_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG77_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG77_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG77_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG77_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG77_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG77_AUTHEN = curr;
    }

    /**
     * Get LPCG77_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG77_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG77_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG77_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG77_AUTHEN_LOCK_TZ() volatile
    {
        LPCG77_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG77_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG77_AUTHEN_LOCK_TZ() volatile
    {
        LPCG77_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG77_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG77_AUTHEN_LOCK_TZ() volatile
    {
        LPCG77_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG77_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG77_AUTHEN_TZ_NS() volatile
    {
        return LPCG77_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG77_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG77_AUTHEN_TZ_NS() volatile
    {
        LPCG77_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG77_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG77_AUTHEN_TZ_NS() volatile
    {
        LPCG77_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG77_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG77_AUTHEN_TZ_NS() volatile
    {
        LPCG77_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG77_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG77_AUTHEN_TZ_USER() volatile
    {
        return LPCG77_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG77_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG77_AUTHEN_TZ_USER() volatile
    {
        LPCG77_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG77_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG77_AUTHEN_TZ_USER() volatile
    {
        LPCG77_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG77_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG77_AUTHEN_TZ_USER() volatile
    {
        LPCG77_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG77_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG77_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG77_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG77_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG77_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG77_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG77_AUTHEN = curr;
    }

    /**
     * Get LPCG78_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG78_DIRECT_ON() volatile
    {
        return LPCG78_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG78_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG78_DIRECT_ON() volatile
    {
        LPCG78_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG78_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG78_DIRECT_ON() volatile
    {
        LPCG78_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG78_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG78_DIRECT_ON() volatile
    {
        LPCG78_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG78_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG78_DOMAIN_LEVEL3 get_LPCG78_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG78_DOMAIN_LEVEL3((LPCG78_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG78_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG78_DOMAIN_LEVEL3(
        CCM_LPCG78_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG78_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG78_DOMAIN = curr;
    }

    /**
     * Get LPCG78_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG78_DOMAIN_LEVEL2 get_LPCG78_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG78_DOMAIN_LEVEL2((LPCG78_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG78_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG78_DOMAIN_LEVEL2(
        CCM_LPCG78_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG78_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG78_DOMAIN = curr;
    }

    /**
     * Get LPCG78_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG78_DOMAIN_LEVEL1 get_LPCG78_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG78_DOMAIN_LEVEL1((LPCG78_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG78_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG78_DOMAIN_LEVEL1(
        CCM_LPCG78_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG78_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG78_DOMAIN = curr;
    }

    /**
     * Get LPCG78_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG78_DOMAIN_LEVEL0 get_LPCG78_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG78_DOMAIN_LEVEL0((LPCG78_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG78_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG78_DOMAIN_LEVEL0(
        CCM_LPCG78_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG78_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG78_DOMAIN = curr;
    }

    /**
     * Get LPCG78_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG78_DOMAIN_LEVEL get_LPCG78_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG78_DOMAIN_LEVEL((LPCG78_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG78_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG78_DOMAIN_LEVEL(CCM_LPCG78_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG78_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG78_DOMAIN = curr;
    }

    /**
     * Get all of LPCG78_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG78_DOMAIN(CCM_LPCG78_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG78_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG78_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG78_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG78_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG78_DOMAIN;

        LEVEL3 = CCM_LPCG78_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG78_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG78_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG78_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG78_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG78_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG78_DOMAIN(CCM_LPCG78_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG78_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG78_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG78_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG78_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG78_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG78_DOMAIN = curr;
    }

    /**
     * Get LPCG78_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG78_STATUS0_DOMAIN_ENABLE
    get_LPCG78_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG78_STATUS0_DOMAIN_ENABLE((LPCG78_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG78_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG78_STATUS0_ACTIVE_DOMAIN
    get_LPCG78_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG78_STATUS0_ACTIVE_DOMAIN((LPCG78_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG78_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG78_STATUS0_ON() volatile
    {
        return LPCG78_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG78_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG78_STATUS0(
        CCM_LPCG78_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG78_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG78_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG78_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG78_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG78_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG78_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG78_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG78_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG78_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG78_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG78_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG78_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG78_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG78_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG78_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG78_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG78_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG78_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG78_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG78_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG78_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG78_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG78_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG78_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG78_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG78_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG78_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG78_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG78_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG78_STATUS1_CPU3_MODE get_LPCG78_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG78_STATUS1_CPU3_MODE((LPCG78_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG78_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG78_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG78_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG78_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG78_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG78_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG78_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG78_STATUS1_CPU2_MODE get_LPCG78_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG78_STATUS1_CPU2_MODE((LPCG78_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG78_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG78_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG78_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG78_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG78_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG78_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG78_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG78_STATUS1_CPU1_MODE get_LPCG78_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG78_STATUS1_CPU1_MODE((LPCG78_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG78_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG78_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG78_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG78_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG78_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG78_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG78_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG78_STATUS1_CPU0_MODE get_LPCG78_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG78_STATUS1_CPU0_MODE((LPCG78_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG78_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG78_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG78_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG78_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG78_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG78_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG78_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG78_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG78_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG78_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG78_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG78_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG78_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG78_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG78_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG78_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG78_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG78_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG78_AUTHEN_LOCK_MODE() volatile
    {
        LPCG78_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG78_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG78_AUTHEN_LOCK_MODE() volatile
    {
        LPCG78_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG78_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG78_AUTHEN_LOCK_MODE() volatile
    {
        LPCG78_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG78_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG78_AUTHEN_CPULPM() volatile
    {
        return LPCG78_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG78_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG78_AUTHEN_CPULPM() volatile
    {
        LPCG78_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG78_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG78_AUTHEN_CPULPM() volatile
    {
        LPCG78_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG78_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG78_AUTHEN_CPULPM() volatile
    {
        LPCG78_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG78_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG78_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG78_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG78_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG78_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG78_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG78_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG78_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG78_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG78_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG78_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG78_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG78_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG78_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG78_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG78_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG78_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG78_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG78_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG78_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG78_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG78_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG78_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG78_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG78_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG78_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG78_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG78_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG78_AUTHEN_LOCK_LIST() volatile
    {
        LPCG78_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG78_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG78_AUTHEN_LOCK_LIST() volatile
    {
        LPCG78_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG78_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG78_AUTHEN_LOCK_LIST() volatile
    {
        LPCG78_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG78_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG78_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG78_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG78_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG78_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG78_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG78_AUTHEN = curr;
    }

    /**
     * Get LPCG78_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG78_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG78_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG78_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG78_AUTHEN_LOCK_TZ() volatile
    {
        LPCG78_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG78_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG78_AUTHEN_LOCK_TZ() volatile
    {
        LPCG78_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG78_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG78_AUTHEN_LOCK_TZ() volatile
    {
        LPCG78_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG78_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG78_AUTHEN_TZ_NS() volatile
    {
        return LPCG78_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG78_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG78_AUTHEN_TZ_NS() volatile
    {
        LPCG78_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG78_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG78_AUTHEN_TZ_NS() volatile
    {
        LPCG78_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG78_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG78_AUTHEN_TZ_NS() volatile
    {
        LPCG78_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG78_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG78_AUTHEN_TZ_USER() volatile
    {
        return LPCG78_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG78_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG78_AUTHEN_TZ_USER() volatile
    {
        LPCG78_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG78_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG78_AUTHEN_TZ_USER() volatile
    {
        LPCG78_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG78_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG78_AUTHEN_TZ_USER() volatile
    {
        LPCG78_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG78_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG78_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG78_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG78_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG78_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG78_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG78_AUTHEN = curr;
    }

    /**
     * Get LPCG79_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG79_DIRECT_ON() volatile
    {
        return LPCG79_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG79_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG79_DIRECT_ON() volatile
    {
        LPCG79_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG79_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG79_DIRECT_ON() volatile
    {
        LPCG79_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG79_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG79_DIRECT_ON() volatile
    {
        LPCG79_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG79_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG79_DOMAIN_LEVEL3 get_LPCG79_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG79_DOMAIN_LEVEL3((LPCG79_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG79_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG79_DOMAIN_LEVEL3(
        CCM_LPCG79_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG79_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG79_DOMAIN = curr;
    }

    /**
     * Get LPCG79_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG79_DOMAIN_LEVEL2 get_LPCG79_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG79_DOMAIN_LEVEL2((LPCG79_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG79_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG79_DOMAIN_LEVEL2(
        CCM_LPCG79_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG79_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG79_DOMAIN = curr;
    }

    /**
     * Get LPCG79_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG79_DOMAIN_LEVEL1 get_LPCG79_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG79_DOMAIN_LEVEL1((LPCG79_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG79_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG79_DOMAIN_LEVEL1(
        CCM_LPCG79_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG79_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG79_DOMAIN = curr;
    }

    /**
     * Get LPCG79_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG79_DOMAIN_LEVEL0 get_LPCG79_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG79_DOMAIN_LEVEL0((LPCG79_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG79_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG79_DOMAIN_LEVEL0(
        CCM_LPCG79_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG79_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG79_DOMAIN = curr;
    }

    /**
     * Get LPCG79_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG79_DOMAIN_LEVEL get_LPCG79_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG79_DOMAIN_LEVEL((LPCG79_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG79_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG79_DOMAIN_LEVEL(CCM_LPCG79_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG79_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG79_DOMAIN = curr;
    }

    /**
     * Get all of LPCG79_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG79_DOMAIN(CCM_LPCG79_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG79_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG79_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG79_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG79_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG79_DOMAIN;

        LEVEL3 = CCM_LPCG79_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG79_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG79_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG79_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG79_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG79_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG79_DOMAIN(CCM_LPCG79_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG79_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG79_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG79_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG79_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG79_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG79_DOMAIN = curr;
    }

    /**
     * Get LPCG79_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG79_STATUS0_DOMAIN_ENABLE
    get_LPCG79_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG79_STATUS0_DOMAIN_ENABLE((LPCG79_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG79_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG79_STATUS0_ACTIVE_DOMAIN
    get_LPCG79_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG79_STATUS0_ACTIVE_DOMAIN((LPCG79_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG79_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG79_STATUS0_ON() volatile
    {
        return LPCG79_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG79_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG79_STATUS0(
        CCM_LPCG79_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG79_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG79_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG79_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG79_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG79_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG79_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG79_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG79_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG79_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG79_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG79_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG79_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG79_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG79_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG79_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG79_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG79_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG79_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG79_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG79_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG79_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG79_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG79_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG79_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG79_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG79_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG79_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG79_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG79_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG79_STATUS1_CPU3_MODE get_LPCG79_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG79_STATUS1_CPU3_MODE((LPCG79_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG79_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG79_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG79_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG79_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG79_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG79_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG79_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG79_STATUS1_CPU2_MODE get_LPCG79_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG79_STATUS1_CPU2_MODE((LPCG79_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG79_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG79_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG79_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG79_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG79_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG79_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG79_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG79_STATUS1_CPU1_MODE get_LPCG79_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG79_STATUS1_CPU1_MODE((LPCG79_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG79_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG79_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG79_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG79_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG79_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG79_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG79_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG79_STATUS1_CPU0_MODE get_LPCG79_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG79_STATUS1_CPU0_MODE((LPCG79_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG79_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG79_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG79_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG79_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG79_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG79_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG79_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG79_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG79_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG79_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG79_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG79_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG79_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG79_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG79_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG79_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG79_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG79_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG79_AUTHEN_LOCK_MODE() volatile
    {
        LPCG79_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG79_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG79_AUTHEN_LOCK_MODE() volatile
    {
        LPCG79_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG79_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG79_AUTHEN_LOCK_MODE() volatile
    {
        LPCG79_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG79_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG79_AUTHEN_CPULPM() volatile
    {
        return LPCG79_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG79_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG79_AUTHEN_CPULPM() volatile
    {
        LPCG79_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG79_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG79_AUTHEN_CPULPM() volatile
    {
        LPCG79_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG79_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG79_AUTHEN_CPULPM() volatile
    {
        LPCG79_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG79_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG79_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG79_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG79_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG79_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG79_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG79_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG79_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG79_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG79_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG79_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG79_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG79_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG79_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG79_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG79_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG79_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG79_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG79_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG79_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG79_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG79_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG79_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG79_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG79_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG79_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG79_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG79_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG79_AUTHEN_LOCK_LIST() volatile
    {
        LPCG79_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG79_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG79_AUTHEN_LOCK_LIST() volatile
    {
        LPCG79_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG79_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG79_AUTHEN_LOCK_LIST() volatile
    {
        LPCG79_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG79_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG79_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG79_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG79_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG79_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG79_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG79_AUTHEN = curr;
    }

    /**
     * Get LPCG79_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG79_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG79_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG79_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG79_AUTHEN_LOCK_TZ() volatile
    {
        LPCG79_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG79_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG79_AUTHEN_LOCK_TZ() volatile
    {
        LPCG79_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG79_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG79_AUTHEN_LOCK_TZ() volatile
    {
        LPCG79_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG79_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG79_AUTHEN_TZ_NS() volatile
    {
        return LPCG79_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG79_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG79_AUTHEN_TZ_NS() volatile
    {
        LPCG79_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG79_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG79_AUTHEN_TZ_NS() volatile
    {
        LPCG79_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG79_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG79_AUTHEN_TZ_NS() volatile
    {
        LPCG79_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG79_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG79_AUTHEN_TZ_USER() volatile
    {
        return LPCG79_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG79_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG79_AUTHEN_TZ_USER() volatile
    {
        LPCG79_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG79_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG79_AUTHEN_TZ_USER() volatile
    {
        LPCG79_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG79_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG79_AUTHEN_TZ_USER() volatile
    {
        LPCG79_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG79_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG79_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG79_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG79_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG79_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG79_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG79_AUTHEN = curr;
    }

    /**
     * Get LPCG80_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG80_DIRECT_ON() volatile
    {
        return LPCG80_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG80_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG80_DIRECT_ON() volatile
    {
        LPCG80_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG80_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG80_DIRECT_ON() volatile
    {
        LPCG80_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG80_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG80_DIRECT_ON() volatile
    {
        LPCG80_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG80_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG80_DOMAIN_LEVEL3 get_LPCG80_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG80_DOMAIN_LEVEL3((LPCG80_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG80_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG80_DOMAIN_LEVEL3(
        CCM_LPCG80_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG80_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG80_DOMAIN = curr;
    }

    /**
     * Get LPCG80_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG80_DOMAIN_LEVEL2 get_LPCG80_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG80_DOMAIN_LEVEL2((LPCG80_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG80_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG80_DOMAIN_LEVEL2(
        CCM_LPCG80_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG80_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG80_DOMAIN = curr;
    }

    /**
     * Get LPCG80_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG80_DOMAIN_LEVEL1 get_LPCG80_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG80_DOMAIN_LEVEL1((LPCG80_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG80_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG80_DOMAIN_LEVEL1(
        CCM_LPCG80_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG80_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG80_DOMAIN = curr;
    }

    /**
     * Get LPCG80_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG80_DOMAIN_LEVEL0 get_LPCG80_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG80_DOMAIN_LEVEL0((LPCG80_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG80_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG80_DOMAIN_LEVEL0(
        CCM_LPCG80_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG80_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG80_DOMAIN = curr;
    }

    /**
     * Get LPCG80_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG80_DOMAIN_LEVEL get_LPCG80_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG80_DOMAIN_LEVEL((LPCG80_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG80_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG80_DOMAIN_LEVEL(CCM_LPCG80_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG80_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG80_DOMAIN = curr;
    }

    /**
     * Get all of LPCG80_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG80_DOMAIN(CCM_LPCG80_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG80_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG80_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG80_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG80_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG80_DOMAIN;

        LEVEL3 = CCM_LPCG80_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG80_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG80_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG80_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG80_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG80_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG80_DOMAIN(CCM_LPCG80_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG80_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG80_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG80_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG80_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG80_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG80_DOMAIN = curr;
    }

    /**
     * Get LPCG80_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG80_STATUS0_DOMAIN_ENABLE
    get_LPCG80_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG80_STATUS0_DOMAIN_ENABLE((LPCG80_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG80_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG80_STATUS0_ACTIVE_DOMAIN
    get_LPCG80_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG80_STATUS0_ACTIVE_DOMAIN((LPCG80_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG80_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG80_STATUS0_ON() volatile
    {
        return LPCG80_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG80_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG80_STATUS0(
        CCM_LPCG80_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG80_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG80_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG80_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG80_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG80_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG80_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG80_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG80_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG80_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG80_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG80_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG80_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG80_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG80_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG80_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG80_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG80_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG80_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG80_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG80_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG80_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG80_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG80_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG80_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG80_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG80_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG80_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG80_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG80_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG80_STATUS1_CPU3_MODE get_LPCG80_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG80_STATUS1_CPU3_MODE((LPCG80_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG80_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG80_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG80_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG80_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG80_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG80_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG80_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG80_STATUS1_CPU2_MODE get_LPCG80_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG80_STATUS1_CPU2_MODE((LPCG80_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG80_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG80_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG80_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG80_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG80_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG80_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG80_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG80_STATUS1_CPU1_MODE get_LPCG80_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG80_STATUS1_CPU1_MODE((LPCG80_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG80_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG80_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG80_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG80_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG80_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG80_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG80_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG80_STATUS1_CPU0_MODE get_LPCG80_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG80_STATUS1_CPU0_MODE((LPCG80_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG80_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG80_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG80_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG80_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG80_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG80_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG80_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG80_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG80_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG80_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG80_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG80_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG80_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG80_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG80_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG80_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG80_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG80_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG80_AUTHEN_LOCK_MODE() volatile
    {
        LPCG80_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG80_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG80_AUTHEN_LOCK_MODE() volatile
    {
        LPCG80_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG80_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG80_AUTHEN_LOCK_MODE() volatile
    {
        LPCG80_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG80_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG80_AUTHEN_CPULPM() volatile
    {
        return LPCG80_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG80_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG80_AUTHEN_CPULPM() volatile
    {
        LPCG80_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG80_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG80_AUTHEN_CPULPM() volatile
    {
        LPCG80_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG80_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG80_AUTHEN_CPULPM() volatile
    {
        LPCG80_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG80_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG80_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG80_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG80_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG80_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG80_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG80_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG80_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG80_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG80_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG80_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG80_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG80_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG80_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG80_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG80_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG80_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG80_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG80_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG80_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG80_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG80_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG80_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG80_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG80_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG80_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG80_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG80_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG80_AUTHEN_LOCK_LIST() volatile
    {
        LPCG80_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG80_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG80_AUTHEN_LOCK_LIST() volatile
    {
        LPCG80_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG80_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG80_AUTHEN_LOCK_LIST() volatile
    {
        LPCG80_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG80_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG80_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG80_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG80_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG80_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG80_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG80_AUTHEN = curr;
    }

    /**
     * Get LPCG80_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG80_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG80_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG80_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG80_AUTHEN_LOCK_TZ() volatile
    {
        LPCG80_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG80_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG80_AUTHEN_LOCK_TZ() volatile
    {
        LPCG80_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG80_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG80_AUTHEN_LOCK_TZ() volatile
    {
        LPCG80_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG80_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG80_AUTHEN_TZ_NS() volatile
    {
        return LPCG80_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG80_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG80_AUTHEN_TZ_NS() volatile
    {
        LPCG80_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG80_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG80_AUTHEN_TZ_NS() volatile
    {
        LPCG80_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG80_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG80_AUTHEN_TZ_NS() volatile
    {
        LPCG80_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG80_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG80_AUTHEN_TZ_USER() volatile
    {
        return LPCG80_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG80_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG80_AUTHEN_TZ_USER() volatile
    {
        LPCG80_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG80_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG80_AUTHEN_TZ_USER() volatile
    {
        LPCG80_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG80_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG80_AUTHEN_TZ_USER() volatile
    {
        LPCG80_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG80_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG80_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG80_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG80_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG80_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG80_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG80_AUTHEN = curr;
    }

    /**
     * Get LPCG81_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG81_DIRECT_ON() volatile
    {
        return LPCG81_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG81_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG81_DIRECT_ON() volatile
    {
        LPCG81_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG81_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG81_DIRECT_ON() volatile
    {
        LPCG81_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG81_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG81_DIRECT_ON() volatile
    {
        LPCG81_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG81_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG81_DOMAIN_LEVEL3 get_LPCG81_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG81_DOMAIN_LEVEL3((LPCG81_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG81_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG81_DOMAIN_LEVEL3(
        CCM_LPCG81_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG81_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG81_DOMAIN = curr;
    }

    /**
     * Get LPCG81_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG81_DOMAIN_LEVEL2 get_LPCG81_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG81_DOMAIN_LEVEL2((LPCG81_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG81_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG81_DOMAIN_LEVEL2(
        CCM_LPCG81_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG81_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG81_DOMAIN = curr;
    }

    /**
     * Get LPCG81_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG81_DOMAIN_LEVEL1 get_LPCG81_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG81_DOMAIN_LEVEL1((LPCG81_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG81_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG81_DOMAIN_LEVEL1(
        CCM_LPCG81_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG81_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG81_DOMAIN = curr;
    }

    /**
     * Get LPCG81_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG81_DOMAIN_LEVEL0 get_LPCG81_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG81_DOMAIN_LEVEL0((LPCG81_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG81_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG81_DOMAIN_LEVEL0(
        CCM_LPCG81_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG81_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG81_DOMAIN = curr;
    }

    /**
     * Get LPCG81_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG81_DOMAIN_LEVEL get_LPCG81_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG81_DOMAIN_LEVEL((LPCG81_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG81_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG81_DOMAIN_LEVEL(CCM_LPCG81_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG81_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG81_DOMAIN = curr;
    }

    /**
     * Get all of LPCG81_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG81_DOMAIN(CCM_LPCG81_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG81_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG81_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG81_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG81_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG81_DOMAIN;

        LEVEL3 = CCM_LPCG81_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG81_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG81_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG81_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG81_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG81_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG81_DOMAIN(CCM_LPCG81_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG81_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG81_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG81_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG81_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG81_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG81_DOMAIN = curr;
    }

    /**
     * Get LPCG81_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG81_STATUS0_DOMAIN_ENABLE
    get_LPCG81_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG81_STATUS0_DOMAIN_ENABLE((LPCG81_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG81_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG81_STATUS0_ACTIVE_DOMAIN
    get_LPCG81_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG81_STATUS0_ACTIVE_DOMAIN((LPCG81_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG81_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG81_STATUS0_ON() volatile
    {
        return LPCG81_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG81_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG81_STATUS0(
        CCM_LPCG81_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG81_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG81_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG81_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG81_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG81_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG81_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG81_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG81_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG81_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG81_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG81_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG81_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG81_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG81_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG81_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG81_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG81_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG81_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG81_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG81_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG81_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG81_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG81_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG81_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG81_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG81_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG81_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG81_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG81_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG81_STATUS1_CPU3_MODE get_LPCG81_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG81_STATUS1_CPU3_MODE((LPCG81_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG81_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG81_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG81_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG81_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG81_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG81_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG81_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG81_STATUS1_CPU2_MODE get_LPCG81_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG81_STATUS1_CPU2_MODE((LPCG81_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG81_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG81_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG81_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG81_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG81_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG81_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG81_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG81_STATUS1_CPU1_MODE get_LPCG81_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG81_STATUS1_CPU1_MODE((LPCG81_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG81_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG81_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG81_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG81_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG81_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG81_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG81_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG81_STATUS1_CPU0_MODE get_LPCG81_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG81_STATUS1_CPU0_MODE((LPCG81_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG81_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG81_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG81_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG81_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG81_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG81_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG81_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG81_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG81_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG81_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG81_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG81_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG81_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG81_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG81_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG81_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG81_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG81_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG81_AUTHEN_LOCK_MODE() volatile
    {
        LPCG81_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG81_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG81_AUTHEN_LOCK_MODE() volatile
    {
        LPCG81_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG81_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG81_AUTHEN_LOCK_MODE() volatile
    {
        LPCG81_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG81_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG81_AUTHEN_CPULPM() volatile
    {
        return LPCG81_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG81_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG81_AUTHEN_CPULPM() volatile
    {
        LPCG81_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG81_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG81_AUTHEN_CPULPM() volatile
    {
        LPCG81_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG81_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG81_AUTHEN_CPULPM() volatile
    {
        LPCG81_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG81_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG81_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG81_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG81_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG81_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG81_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG81_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG81_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG81_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG81_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG81_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG81_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG81_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG81_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG81_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG81_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG81_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG81_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG81_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG81_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG81_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG81_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG81_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG81_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG81_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG81_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG81_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG81_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG81_AUTHEN_LOCK_LIST() volatile
    {
        LPCG81_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG81_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG81_AUTHEN_LOCK_LIST() volatile
    {
        LPCG81_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG81_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG81_AUTHEN_LOCK_LIST() volatile
    {
        LPCG81_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG81_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG81_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG81_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG81_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG81_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG81_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG81_AUTHEN = curr;
    }

    /**
     * Get LPCG81_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG81_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG81_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG81_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG81_AUTHEN_LOCK_TZ() volatile
    {
        LPCG81_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG81_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG81_AUTHEN_LOCK_TZ() volatile
    {
        LPCG81_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG81_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG81_AUTHEN_LOCK_TZ() volatile
    {
        LPCG81_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG81_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG81_AUTHEN_TZ_NS() volatile
    {
        return LPCG81_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG81_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG81_AUTHEN_TZ_NS() volatile
    {
        LPCG81_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG81_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG81_AUTHEN_TZ_NS() volatile
    {
        LPCG81_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG81_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG81_AUTHEN_TZ_NS() volatile
    {
        LPCG81_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG81_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG81_AUTHEN_TZ_USER() volatile
    {
        return LPCG81_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG81_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG81_AUTHEN_TZ_USER() volatile
    {
        LPCG81_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG81_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG81_AUTHEN_TZ_USER() volatile
    {
        LPCG81_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG81_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG81_AUTHEN_TZ_USER() volatile
    {
        LPCG81_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG81_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG81_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG81_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG81_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG81_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG81_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG81_AUTHEN = curr;
    }

    /**
     * Get LPCG82_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG82_DIRECT_ON() volatile
    {
        return LPCG82_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG82_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG82_DIRECT_ON() volatile
    {
        LPCG82_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG82_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG82_DIRECT_ON() volatile
    {
        LPCG82_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG82_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG82_DIRECT_ON() volatile
    {
        LPCG82_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG82_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG82_DOMAIN_LEVEL3 get_LPCG82_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG82_DOMAIN_LEVEL3((LPCG82_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG82_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG82_DOMAIN_LEVEL3(
        CCM_LPCG82_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG82_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG82_DOMAIN = curr;
    }

    /**
     * Get LPCG82_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG82_DOMAIN_LEVEL2 get_LPCG82_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG82_DOMAIN_LEVEL2((LPCG82_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG82_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG82_DOMAIN_LEVEL2(
        CCM_LPCG82_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG82_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG82_DOMAIN = curr;
    }

    /**
     * Get LPCG82_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG82_DOMAIN_LEVEL1 get_LPCG82_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG82_DOMAIN_LEVEL1((LPCG82_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG82_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG82_DOMAIN_LEVEL1(
        CCM_LPCG82_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG82_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG82_DOMAIN = curr;
    }

    /**
     * Get LPCG82_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG82_DOMAIN_LEVEL0 get_LPCG82_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG82_DOMAIN_LEVEL0((LPCG82_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG82_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG82_DOMAIN_LEVEL0(
        CCM_LPCG82_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG82_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG82_DOMAIN = curr;
    }

    /**
     * Get LPCG82_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG82_DOMAIN_LEVEL get_LPCG82_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG82_DOMAIN_LEVEL((LPCG82_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG82_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG82_DOMAIN_LEVEL(CCM_LPCG82_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG82_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG82_DOMAIN = curr;
    }

    /**
     * Get all of LPCG82_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG82_DOMAIN(CCM_LPCG82_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG82_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG82_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG82_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG82_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG82_DOMAIN;

        LEVEL3 = CCM_LPCG82_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG82_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG82_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG82_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG82_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG82_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG82_DOMAIN(CCM_LPCG82_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG82_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG82_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG82_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG82_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG82_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG82_DOMAIN = curr;
    }

    /**
     * Get LPCG82_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG82_STATUS0_DOMAIN_ENABLE
    get_LPCG82_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG82_STATUS0_DOMAIN_ENABLE((LPCG82_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG82_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG82_STATUS0_ACTIVE_DOMAIN
    get_LPCG82_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG82_STATUS0_ACTIVE_DOMAIN((LPCG82_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG82_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG82_STATUS0_ON() volatile
    {
        return LPCG82_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG82_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG82_STATUS0(
        CCM_LPCG82_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG82_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG82_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG82_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG82_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG82_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG82_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG82_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG82_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG82_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG82_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG82_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG82_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG82_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG82_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG82_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG82_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG82_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG82_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG82_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG82_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG82_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG82_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG82_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG82_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG82_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG82_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG82_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG82_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG82_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG82_STATUS1_CPU3_MODE get_LPCG82_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG82_STATUS1_CPU3_MODE((LPCG82_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG82_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG82_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG82_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG82_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG82_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG82_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG82_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG82_STATUS1_CPU2_MODE get_LPCG82_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG82_STATUS1_CPU2_MODE((LPCG82_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG82_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG82_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG82_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG82_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG82_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG82_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG82_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG82_STATUS1_CPU1_MODE get_LPCG82_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG82_STATUS1_CPU1_MODE((LPCG82_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG82_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG82_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG82_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG82_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG82_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG82_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG82_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG82_STATUS1_CPU0_MODE get_LPCG82_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG82_STATUS1_CPU0_MODE((LPCG82_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG82_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG82_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG82_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG82_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG82_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG82_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG82_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG82_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG82_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG82_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG82_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG82_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG82_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG82_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG82_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG82_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG82_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG82_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG82_AUTHEN_LOCK_MODE() volatile
    {
        LPCG82_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG82_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG82_AUTHEN_LOCK_MODE() volatile
    {
        LPCG82_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG82_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG82_AUTHEN_LOCK_MODE() volatile
    {
        LPCG82_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG82_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG82_AUTHEN_CPULPM() volatile
    {
        return LPCG82_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG82_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG82_AUTHEN_CPULPM() volatile
    {
        LPCG82_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG82_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG82_AUTHEN_CPULPM() volatile
    {
        LPCG82_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG82_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG82_AUTHEN_CPULPM() volatile
    {
        LPCG82_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG82_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG82_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG82_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG82_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG82_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG82_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG82_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG82_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG82_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG82_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG82_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG82_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG82_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG82_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG82_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG82_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG82_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG82_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG82_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG82_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG82_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG82_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG82_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG82_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG82_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG82_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG82_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG82_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG82_AUTHEN_LOCK_LIST() volatile
    {
        LPCG82_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG82_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG82_AUTHEN_LOCK_LIST() volatile
    {
        LPCG82_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG82_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG82_AUTHEN_LOCK_LIST() volatile
    {
        LPCG82_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG82_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG82_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG82_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG82_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG82_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG82_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG82_AUTHEN = curr;
    }

    /**
     * Get LPCG82_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG82_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG82_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG82_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG82_AUTHEN_LOCK_TZ() volatile
    {
        LPCG82_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG82_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG82_AUTHEN_LOCK_TZ() volatile
    {
        LPCG82_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG82_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG82_AUTHEN_LOCK_TZ() volatile
    {
        LPCG82_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG82_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG82_AUTHEN_TZ_NS() volatile
    {
        return LPCG82_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG82_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG82_AUTHEN_TZ_NS() volatile
    {
        LPCG82_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG82_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG82_AUTHEN_TZ_NS() volatile
    {
        LPCG82_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG82_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG82_AUTHEN_TZ_NS() volatile
    {
        LPCG82_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG82_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG82_AUTHEN_TZ_USER() volatile
    {
        return LPCG82_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG82_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG82_AUTHEN_TZ_USER() volatile
    {
        LPCG82_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG82_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG82_AUTHEN_TZ_USER() volatile
    {
        LPCG82_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG82_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG82_AUTHEN_TZ_USER() volatile
    {
        LPCG82_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG82_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG82_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG82_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG82_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG82_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG82_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG82_AUTHEN = curr;
    }

    /**
     * Get LPCG83_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG83_DIRECT_ON() volatile
    {
        return LPCG83_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG83_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG83_DIRECT_ON() volatile
    {
        LPCG83_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG83_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG83_DIRECT_ON() volatile
    {
        LPCG83_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG83_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG83_DIRECT_ON() volatile
    {
        LPCG83_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG83_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG83_DOMAIN_LEVEL3 get_LPCG83_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG83_DOMAIN_LEVEL3((LPCG83_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG83_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG83_DOMAIN_LEVEL3(
        CCM_LPCG83_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG83_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG83_DOMAIN = curr;
    }

    /**
     * Get LPCG83_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG83_DOMAIN_LEVEL2 get_LPCG83_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG83_DOMAIN_LEVEL2((LPCG83_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG83_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG83_DOMAIN_LEVEL2(
        CCM_LPCG83_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG83_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG83_DOMAIN = curr;
    }

    /**
     * Get LPCG83_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG83_DOMAIN_LEVEL1 get_LPCG83_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG83_DOMAIN_LEVEL1((LPCG83_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG83_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG83_DOMAIN_LEVEL1(
        CCM_LPCG83_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG83_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG83_DOMAIN = curr;
    }

    /**
     * Get LPCG83_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG83_DOMAIN_LEVEL0 get_LPCG83_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG83_DOMAIN_LEVEL0((LPCG83_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG83_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG83_DOMAIN_LEVEL0(
        CCM_LPCG83_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG83_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG83_DOMAIN = curr;
    }

    /**
     * Get LPCG83_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG83_DOMAIN_LEVEL get_LPCG83_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG83_DOMAIN_LEVEL((LPCG83_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG83_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG83_DOMAIN_LEVEL(CCM_LPCG83_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG83_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG83_DOMAIN = curr;
    }

    /**
     * Get all of LPCG83_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG83_DOMAIN(CCM_LPCG83_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG83_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG83_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG83_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG83_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG83_DOMAIN;

        LEVEL3 = CCM_LPCG83_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG83_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG83_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG83_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG83_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG83_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG83_DOMAIN(CCM_LPCG83_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG83_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG83_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG83_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG83_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG83_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG83_DOMAIN = curr;
    }

    /**
     * Get LPCG83_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG83_STATUS0_DOMAIN_ENABLE
    get_LPCG83_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG83_STATUS0_DOMAIN_ENABLE((LPCG83_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG83_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG83_STATUS0_ACTIVE_DOMAIN
    get_LPCG83_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG83_STATUS0_ACTIVE_DOMAIN((LPCG83_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG83_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG83_STATUS0_ON() volatile
    {
        return LPCG83_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG83_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG83_STATUS0(
        CCM_LPCG83_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG83_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG83_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG83_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG83_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG83_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG83_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG83_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG83_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG83_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG83_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG83_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG83_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG83_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG83_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG83_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG83_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG83_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG83_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG83_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG83_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG83_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG83_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG83_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG83_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG83_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG83_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG83_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG83_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG83_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG83_STATUS1_CPU3_MODE get_LPCG83_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG83_STATUS1_CPU3_MODE((LPCG83_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG83_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG83_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG83_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG83_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG83_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG83_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG83_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG83_STATUS1_CPU2_MODE get_LPCG83_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG83_STATUS1_CPU2_MODE((LPCG83_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG83_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG83_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG83_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG83_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG83_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG83_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG83_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG83_STATUS1_CPU1_MODE get_LPCG83_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG83_STATUS1_CPU1_MODE((LPCG83_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG83_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG83_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG83_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG83_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG83_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG83_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG83_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG83_STATUS1_CPU0_MODE get_LPCG83_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG83_STATUS1_CPU0_MODE((LPCG83_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG83_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG83_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG83_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG83_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG83_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG83_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG83_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG83_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG83_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG83_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG83_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG83_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG83_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG83_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG83_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG83_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG83_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG83_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG83_AUTHEN_LOCK_MODE() volatile
    {
        LPCG83_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG83_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG83_AUTHEN_LOCK_MODE() volatile
    {
        LPCG83_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG83_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG83_AUTHEN_LOCK_MODE() volatile
    {
        LPCG83_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG83_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG83_AUTHEN_CPULPM() volatile
    {
        return LPCG83_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG83_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG83_AUTHEN_CPULPM() volatile
    {
        LPCG83_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG83_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG83_AUTHEN_CPULPM() volatile
    {
        LPCG83_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG83_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG83_AUTHEN_CPULPM() volatile
    {
        LPCG83_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG83_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG83_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG83_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG83_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG83_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG83_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG83_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG83_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG83_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG83_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG83_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG83_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG83_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG83_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG83_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG83_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG83_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG83_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG83_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG83_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG83_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG83_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG83_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG83_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG83_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG83_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG83_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG83_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG83_AUTHEN_LOCK_LIST() volatile
    {
        LPCG83_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG83_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG83_AUTHEN_LOCK_LIST() volatile
    {
        LPCG83_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG83_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG83_AUTHEN_LOCK_LIST() volatile
    {
        LPCG83_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG83_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG83_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG83_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG83_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG83_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG83_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG83_AUTHEN = curr;
    }

    /**
     * Get LPCG83_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG83_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG83_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG83_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG83_AUTHEN_LOCK_TZ() volatile
    {
        LPCG83_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG83_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG83_AUTHEN_LOCK_TZ() volatile
    {
        LPCG83_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG83_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG83_AUTHEN_LOCK_TZ() volatile
    {
        LPCG83_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG83_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG83_AUTHEN_TZ_NS() volatile
    {
        return LPCG83_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG83_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG83_AUTHEN_TZ_NS() volatile
    {
        LPCG83_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG83_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG83_AUTHEN_TZ_NS() volatile
    {
        LPCG83_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG83_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG83_AUTHEN_TZ_NS() volatile
    {
        LPCG83_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG83_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG83_AUTHEN_TZ_USER() volatile
    {
        return LPCG83_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG83_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG83_AUTHEN_TZ_USER() volatile
    {
        LPCG83_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG83_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG83_AUTHEN_TZ_USER() volatile
    {
        LPCG83_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG83_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG83_AUTHEN_TZ_USER() volatile
    {
        LPCG83_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG83_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG83_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG83_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG83_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG83_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG83_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG83_AUTHEN = curr;
    }

    /**
     * Get LPCG84_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG84_DIRECT_ON() volatile
    {
        return LPCG84_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG84_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG84_DIRECT_ON() volatile
    {
        LPCG84_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG84_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG84_DIRECT_ON() volatile
    {
        LPCG84_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG84_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG84_DIRECT_ON() volatile
    {
        LPCG84_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG84_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG84_DOMAIN_LEVEL3 get_LPCG84_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG84_DOMAIN_LEVEL3((LPCG84_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG84_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG84_DOMAIN_LEVEL3(
        CCM_LPCG84_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG84_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG84_DOMAIN = curr;
    }

    /**
     * Get LPCG84_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG84_DOMAIN_LEVEL2 get_LPCG84_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG84_DOMAIN_LEVEL2((LPCG84_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG84_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG84_DOMAIN_LEVEL2(
        CCM_LPCG84_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG84_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG84_DOMAIN = curr;
    }

    /**
     * Get LPCG84_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG84_DOMAIN_LEVEL1 get_LPCG84_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG84_DOMAIN_LEVEL1((LPCG84_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG84_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG84_DOMAIN_LEVEL1(
        CCM_LPCG84_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG84_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG84_DOMAIN = curr;
    }

    /**
     * Get LPCG84_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG84_DOMAIN_LEVEL0 get_LPCG84_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG84_DOMAIN_LEVEL0((LPCG84_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG84_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG84_DOMAIN_LEVEL0(
        CCM_LPCG84_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG84_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG84_DOMAIN = curr;
    }

    /**
     * Get LPCG84_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG84_DOMAIN_LEVEL get_LPCG84_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG84_DOMAIN_LEVEL((LPCG84_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG84_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG84_DOMAIN_LEVEL(CCM_LPCG84_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG84_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG84_DOMAIN = curr;
    }

    /**
     * Get all of LPCG84_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG84_DOMAIN(CCM_LPCG84_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG84_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG84_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG84_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG84_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG84_DOMAIN;

        LEVEL3 = CCM_LPCG84_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG84_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG84_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG84_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG84_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG84_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG84_DOMAIN(CCM_LPCG84_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG84_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG84_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG84_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG84_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG84_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG84_DOMAIN = curr;
    }

    /**
     * Get LPCG84_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG84_STATUS0_DOMAIN_ENABLE
    get_LPCG84_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG84_STATUS0_DOMAIN_ENABLE((LPCG84_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG84_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG84_STATUS0_ACTIVE_DOMAIN
    get_LPCG84_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG84_STATUS0_ACTIVE_DOMAIN((LPCG84_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG84_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG84_STATUS0_ON() volatile
    {
        return LPCG84_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG84_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG84_STATUS0(
        CCM_LPCG84_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG84_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG84_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG84_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG84_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG84_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG84_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG84_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG84_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG84_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG84_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG84_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG84_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG84_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG84_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG84_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG84_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG84_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG84_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG84_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG84_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG84_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG84_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG84_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG84_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG84_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG84_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG84_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG84_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG84_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG84_STATUS1_CPU3_MODE get_LPCG84_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG84_STATUS1_CPU3_MODE((LPCG84_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG84_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG84_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG84_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG84_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG84_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG84_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG84_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG84_STATUS1_CPU2_MODE get_LPCG84_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG84_STATUS1_CPU2_MODE((LPCG84_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG84_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG84_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG84_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG84_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG84_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG84_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG84_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG84_STATUS1_CPU1_MODE get_LPCG84_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG84_STATUS1_CPU1_MODE((LPCG84_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG84_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG84_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG84_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG84_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG84_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG84_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG84_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG84_STATUS1_CPU0_MODE get_LPCG84_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG84_STATUS1_CPU0_MODE((LPCG84_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG84_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG84_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG84_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG84_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG84_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG84_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG84_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG84_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG84_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG84_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG84_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG84_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG84_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG84_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG84_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG84_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG84_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG84_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG84_AUTHEN_LOCK_MODE() volatile
    {
        LPCG84_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG84_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG84_AUTHEN_LOCK_MODE() volatile
    {
        LPCG84_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG84_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG84_AUTHEN_LOCK_MODE() volatile
    {
        LPCG84_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG84_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG84_AUTHEN_CPULPM() volatile
    {
        return LPCG84_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG84_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG84_AUTHEN_CPULPM() volatile
    {
        LPCG84_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG84_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG84_AUTHEN_CPULPM() volatile
    {
        LPCG84_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG84_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG84_AUTHEN_CPULPM() volatile
    {
        LPCG84_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG84_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG84_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG84_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG84_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG84_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG84_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG84_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG84_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG84_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG84_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG84_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG84_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG84_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG84_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG84_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG84_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG84_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG84_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG84_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG84_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG84_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG84_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG84_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG84_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG84_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG84_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG84_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG84_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG84_AUTHEN_LOCK_LIST() volatile
    {
        LPCG84_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG84_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG84_AUTHEN_LOCK_LIST() volatile
    {
        LPCG84_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG84_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG84_AUTHEN_LOCK_LIST() volatile
    {
        LPCG84_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG84_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG84_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG84_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG84_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG84_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG84_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG84_AUTHEN = curr;
    }

    /**
     * Get LPCG84_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG84_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG84_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG84_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG84_AUTHEN_LOCK_TZ() volatile
    {
        LPCG84_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG84_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG84_AUTHEN_LOCK_TZ() volatile
    {
        LPCG84_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG84_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG84_AUTHEN_LOCK_TZ() volatile
    {
        LPCG84_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG84_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG84_AUTHEN_TZ_NS() volatile
    {
        return LPCG84_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG84_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG84_AUTHEN_TZ_NS() volatile
    {
        LPCG84_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG84_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG84_AUTHEN_TZ_NS() volatile
    {
        LPCG84_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG84_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG84_AUTHEN_TZ_NS() volatile
    {
        LPCG84_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG84_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG84_AUTHEN_TZ_USER() volatile
    {
        return LPCG84_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG84_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG84_AUTHEN_TZ_USER() volatile
    {
        LPCG84_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG84_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG84_AUTHEN_TZ_USER() volatile
    {
        LPCG84_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG84_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG84_AUTHEN_TZ_USER() volatile
    {
        LPCG84_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG84_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG84_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG84_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG84_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG84_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG84_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG84_AUTHEN = curr;
    }

    /**
     * Get LPCG85_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG85_DIRECT_ON() volatile
    {
        return LPCG85_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG85_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG85_DIRECT_ON() volatile
    {
        LPCG85_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG85_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG85_DIRECT_ON() volatile
    {
        LPCG85_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG85_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG85_DIRECT_ON() volatile
    {
        LPCG85_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG85_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG85_DOMAIN_LEVEL3 get_LPCG85_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG85_DOMAIN_LEVEL3((LPCG85_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG85_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG85_DOMAIN_LEVEL3(
        CCM_LPCG85_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG85_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG85_DOMAIN = curr;
    }

    /**
     * Get LPCG85_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG85_DOMAIN_LEVEL2 get_LPCG85_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG85_DOMAIN_LEVEL2((LPCG85_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG85_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG85_DOMAIN_LEVEL2(
        CCM_LPCG85_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG85_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG85_DOMAIN = curr;
    }

    /**
     * Get LPCG85_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG85_DOMAIN_LEVEL1 get_LPCG85_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG85_DOMAIN_LEVEL1((LPCG85_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG85_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG85_DOMAIN_LEVEL1(
        CCM_LPCG85_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG85_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG85_DOMAIN = curr;
    }

    /**
     * Get LPCG85_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG85_DOMAIN_LEVEL0 get_LPCG85_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG85_DOMAIN_LEVEL0((LPCG85_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG85_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG85_DOMAIN_LEVEL0(
        CCM_LPCG85_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG85_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG85_DOMAIN = curr;
    }

    /**
     * Get LPCG85_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG85_DOMAIN_LEVEL get_LPCG85_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG85_DOMAIN_LEVEL((LPCG85_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG85_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG85_DOMAIN_LEVEL(CCM_LPCG85_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG85_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG85_DOMAIN = curr;
    }

    /**
     * Get all of LPCG85_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG85_DOMAIN(CCM_LPCG85_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG85_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG85_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG85_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG85_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG85_DOMAIN;

        LEVEL3 = CCM_LPCG85_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG85_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG85_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG85_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG85_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG85_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG85_DOMAIN(CCM_LPCG85_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG85_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG85_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG85_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG85_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG85_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG85_DOMAIN = curr;
    }

    /**
     * Get LPCG85_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG85_STATUS0_DOMAIN_ENABLE
    get_LPCG85_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG85_STATUS0_DOMAIN_ENABLE((LPCG85_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG85_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG85_STATUS0_ACTIVE_DOMAIN
    get_LPCG85_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG85_STATUS0_ACTIVE_DOMAIN((LPCG85_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG85_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG85_STATUS0_ON() volatile
    {
        return LPCG85_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG85_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG85_STATUS0(
        CCM_LPCG85_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG85_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG85_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG85_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG85_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG85_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG85_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG85_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG85_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG85_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG85_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG85_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG85_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG85_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG85_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG85_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG85_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG85_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG85_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG85_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG85_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG85_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG85_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG85_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG85_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG85_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG85_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG85_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG85_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG85_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG85_STATUS1_CPU3_MODE get_LPCG85_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG85_STATUS1_CPU3_MODE((LPCG85_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG85_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG85_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG85_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG85_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG85_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG85_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG85_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG85_STATUS1_CPU2_MODE get_LPCG85_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG85_STATUS1_CPU2_MODE((LPCG85_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG85_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG85_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG85_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG85_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG85_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG85_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG85_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG85_STATUS1_CPU1_MODE get_LPCG85_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG85_STATUS1_CPU1_MODE((LPCG85_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG85_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG85_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG85_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG85_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG85_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG85_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG85_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG85_STATUS1_CPU0_MODE get_LPCG85_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG85_STATUS1_CPU0_MODE((LPCG85_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG85_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG85_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG85_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG85_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG85_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG85_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG85_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG85_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG85_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG85_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG85_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG85_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG85_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG85_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG85_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG85_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG85_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG85_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG85_AUTHEN_LOCK_MODE() volatile
    {
        LPCG85_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG85_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG85_AUTHEN_LOCK_MODE() volatile
    {
        LPCG85_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG85_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG85_AUTHEN_LOCK_MODE() volatile
    {
        LPCG85_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG85_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG85_AUTHEN_CPULPM() volatile
    {
        return LPCG85_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG85_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG85_AUTHEN_CPULPM() volatile
    {
        LPCG85_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG85_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG85_AUTHEN_CPULPM() volatile
    {
        LPCG85_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG85_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG85_AUTHEN_CPULPM() volatile
    {
        LPCG85_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG85_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG85_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG85_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG85_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG85_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG85_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG85_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG85_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG85_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG85_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG85_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG85_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG85_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG85_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG85_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG85_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG85_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG85_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG85_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG85_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG85_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG85_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG85_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG85_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG85_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG85_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG85_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG85_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG85_AUTHEN_LOCK_LIST() volatile
    {
        LPCG85_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG85_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG85_AUTHEN_LOCK_LIST() volatile
    {
        LPCG85_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG85_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG85_AUTHEN_LOCK_LIST() volatile
    {
        LPCG85_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG85_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG85_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG85_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG85_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG85_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG85_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG85_AUTHEN = curr;
    }

    /**
     * Get LPCG85_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG85_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG85_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG85_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG85_AUTHEN_LOCK_TZ() volatile
    {
        LPCG85_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG85_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG85_AUTHEN_LOCK_TZ() volatile
    {
        LPCG85_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG85_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG85_AUTHEN_LOCK_TZ() volatile
    {
        LPCG85_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG85_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG85_AUTHEN_TZ_NS() volatile
    {
        return LPCG85_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG85_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG85_AUTHEN_TZ_NS() volatile
    {
        LPCG85_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG85_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG85_AUTHEN_TZ_NS() volatile
    {
        LPCG85_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG85_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG85_AUTHEN_TZ_NS() volatile
    {
        LPCG85_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG85_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG85_AUTHEN_TZ_USER() volatile
    {
        return LPCG85_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG85_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG85_AUTHEN_TZ_USER() volatile
    {
        LPCG85_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG85_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG85_AUTHEN_TZ_USER() volatile
    {
        LPCG85_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG85_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG85_AUTHEN_TZ_USER() volatile
    {
        LPCG85_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG85_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG85_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG85_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG85_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG85_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG85_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG85_AUTHEN = curr;
    }

    /**
     * Get LPCG86_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG86_DIRECT_ON() volatile
    {
        return LPCG86_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG86_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG86_DIRECT_ON() volatile
    {
        LPCG86_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG86_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG86_DIRECT_ON() volatile
    {
        LPCG86_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG86_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG86_DIRECT_ON() volatile
    {
        LPCG86_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG86_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG86_DOMAIN_LEVEL3 get_LPCG86_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG86_DOMAIN_LEVEL3((LPCG86_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG86_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG86_DOMAIN_LEVEL3(
        CCM_LPCG86_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG86_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG86_DOMAIN = curr;
    }

    /**
     * Get LPCG86_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG86_DOMAIN_LEVEL2 get_LPCG86_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG86_DOMAIN_LEVEL2((LPCG86_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG86_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG86_DOMAIN_LEVEL2(
        CCM_LPCG86_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG86_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG86_DOMAIN = curr;
    }

    /**
     * Get LPCG86_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG86_DOMAIN_LEVEL1 get_LPCG86_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG86_DOMAIN_LEVEL1((LPCG86_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG86_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG86_DOMAIN_LEVEL1(
        CCM_LPCG86_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG86_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG86_DOMAIN = curr;
    }

    /**
     * Get LPCG86_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG86_DOMAIN_LEVEL0 get_LPCG86_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG86_DOMAIN_LEVEL0((LPCG86_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG86_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG86_DOMAIN_LEVEL0(
        CCM_LPCG86_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG86_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG86_DOMAIN = curr;
    }

    /**
     * Get LPCG86_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG86_DOMAIN_LEVEL get_LPCG86_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG86_DOMAIN_LEVEL((LPCG86_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG86_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG86_DOMAIN_LEVEL(CCM_LPCG86_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG86_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG86_DOMAIN = curr;
    }

    /**
     * Get all of LPCG86_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG86_DOMAIN(CCM_LPCG86_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG86_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG86_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG86_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG86_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG86_DOMAIN;

        LEVEL3 = CCM_LPCG86_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG86_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG86_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG86_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG86_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG86_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG86_DOMAIN(CCM_LPCG86_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG86_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG86_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG86_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG86_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG86_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG86_DOMAIN = curr;
    }

    /**
     * Get LPCG86_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG86_STATUS0_DOMAIN_ENABLE
    get_LPCG86_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG86_STATUS0_DOMAIN_ENABLE((LPCG86_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG86_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG86_STATUS0_ACTIVE_DOMAIN
    get_LPCG86_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG86_STATUS0_ACTIVE_DOMAIN((LPCG86_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG86_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG86_STATUS0_ON() volatile
    {
        return LPCG86_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG86_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG86_STATUS0(
        CCM_LPCG86_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG86_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG86_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG86_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG86_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG86_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG86_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG86_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG86_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG86_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG86_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG86_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG86_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG86_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG86_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG86_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG86_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG86_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG86_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG86_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG86_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG86_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG86_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG86_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG86_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG86_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG86_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG86_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG86_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG86_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG86_STATUS1_CPU3_MODE get_LPCG86_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG86_STATUS1_CPU3_MODE((LPCG86_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG86_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG86_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG86_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG86_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG86_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG86_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG86_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG86_STATUS1_CPU2_MODE get_LPCG86_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG86_STATUS1_CPU2_MODE((LPCG86_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG86_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG86_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG86_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG86_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG86_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG86_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG86_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG86_STATUS1_CPU1_MODE get_LPCG86_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG86_STATUS1_CPU1_MODE((LPCG86_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG86_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG86_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG86_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG86_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG86_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG86_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG86_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG86_STATUS1_CPU0_MODE get_LPCG86_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG86_STATUS1_CPU0_MODE((LPCG86_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG86_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG86_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG86_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG86_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG86_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG86_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG86_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG86_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG86_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG86_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG86_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG86_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG86_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG86_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG86_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG86_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG86_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG86_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG86_AUTHEN_LOCK_MODE() volatile
    {
        LPCG86_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG86_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG86_AUTHEN_LOCK_MODE() volatile
    {
        LPCG86_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG86_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG86_AUTHEN_LOCK_MODE() volatile
    {
        LPCG86_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG86_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG86_AUTHEN_CPULPM() volatile
    {
        return LPCG86_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG86_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG86_AUTHEN_CPULPM() volatile
    {
        LPCG86_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG86_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG86_AUTHEN_CPULPM() volatile
    {
        LPCG86_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG86_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG86_AUTHEN_CPULPM() volatile
    {
        LPCG86_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG86_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG86_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG86_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG86_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG86_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG86_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG86_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG86_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG86_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG86_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG86_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG86_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG86_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG86_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG86_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG86_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG86_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG86_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG86_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG86_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG86_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG86_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG86_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG86_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG86_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG86_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG86_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG86_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG86_AUTHEN_LOCK_LIST() volatile
    {
        LPCG86_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG86_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG86_AUTHEN_LOCK_LIST() volatile
    {
        LPCG86_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG86_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG86_AUTHEN_LOCK_LIST() volatile
    {
        LPCG86_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG86_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG86_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG86_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG86_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG86_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG86_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG86_AUTHEN = curr;
    }

    /**
     * Get LPCG86_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG86_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG86_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG86_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG86_AUTHEN_LOCK_TZ() volatile
    {
        LPCG86_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG86_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG86_AUTHEN_LOCK_TZ() volatile
    {
        LPCG86_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG86_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG86_AUTHEN_LOCK_TZ() volatile
    {
        LPCG86_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG86_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG86_AUTHEN_TZ_NS() volatile
    {
        return LPCG86_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG86_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG86_AUTHEN_TZ_NS() volatile
    {
        LPCG86_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG86_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG86_AUTHEN_TZ_NS() volatile
    {
        LPCG86_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG86_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG86_AUTHEN_TZ_NS() volatile
    {
        LPCG86_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG86_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG86_AUTHEN_TZ_USER() volatile
    {
        return LPCG86_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG86_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG86_AUTHEN_TZ_USER() volatile
    {
        LPCG86_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG86_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG86_AUTHEN_TZ_USER() volatile
    {
        LPCG86_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG86_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG86_AUTHEN_TZ_USER() volatile
    {
        LPCG86_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG86_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG86_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG86_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG86_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG86_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG86_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG86_AUTHEN = curr;
    }

    /**
     * Get LPCG87_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG87_DIRECT_ON() volatile
    {
        return LPCG87_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG87_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG87_DIRECT_ON() volatile
    {
        LPCG87_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG87_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG87_DIRECT_ON() volatile
    {
        LPCG87_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG87_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG87_DIRECT_ON() volatile
    {
        LPCG87_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG87_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG87_DOMAIN_LEVEL3 get_LPCG87_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG87_DOMAIN_LEVEL3((LPCG87_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG87_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG87_DOMAIN_LEVEL3(
        CCM_LPCG87_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG87_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG87_DOMAIN = curr;
    }

    /**
     * Get LPCG87_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG87_DOMAIN_LEVEL2 get_LPCG87_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG87_DOMAIN_LEVEL2((LPCG87_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG87_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG87_DOMAIN_LEVEL2(
        CCM_LPCG87_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG87_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG87_DOMAIN = curr;
    }

    /**
     * Get LPCG87_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG87_DOMAIN_LEVEL1 get_LPCG87_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG87_DOMAIN_LEVEL1((LPCG87_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG87_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG87_DOMAIN_LEVEL1(
        CCM_LPCG87_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG87_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG87_DOMAIN = curr;
    }

    /**
     * Get LPCG87_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG87_DOMAIN_LEVEL0 get_LPCG87_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG87_DOMAIN_LEVEL0((LPCG87_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG87_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG87_DOMAIN_LEVEL0(
        CCM_LPCG87_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG87_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG87_DOMAIN = curr;
    }

    /**
     * Get LPCG87_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG87_DOMAIN_LEVEL get_LPCG87_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG87_DOMAIN_LEVEL((LPCG87_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG87_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG87_DOMAIN_LEVEL(CCM_LPCG87_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG87_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG87_DOMAIN = curr;
    }

    /**
     * Get all of LPCG87_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG87_DOMAIN(CCM_LPCG87_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG87_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG87_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG87_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG87_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG87_DOMAIN;

        LEVEL3 = CCM_LPCG87_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG87_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG87_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG87_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG87_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG87_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG87_DOMAIN(CCM_LPCG87_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG87_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG87_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG87_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG87_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG87_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG87_DOMAIN = curr;
    }

    /**
     * Get LPCG87_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG87_STATUS0_DOMAIN_ENABLE
    get_LPCG87_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG87_STATUS0_DOMAIN_ENABLE((LPCG87_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG87_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG87_STATUS0_ACTIVE_DOMAIN
    get_LPCG87_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG87_STATUS0_ACTIVE_DOMAIN((LPCG87_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG87_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG87_STATUS0_ON() volatile
    {
        return LPCG87_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG87_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG87_STATUS0(
        CCM_LPCG87_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG87_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG87_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG87_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG87_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG87_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG87_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG87_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG87_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG87_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG87_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG87_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG87_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG87_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG87_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG87_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG87_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG87_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG87_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG87_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG87_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG87_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG87_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG87_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG87_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG87_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG87_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG87_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG87_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG87_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG87_STATUS1_CPU3_MODE get_LPCG87_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG87_STATUS1_CPU3_MODE((LPCG87_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG87_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG87_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG87_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG87_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG87_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG87_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG87_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG87_STATUS1_CPU2_MODE get_LPCG87_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG87_STATUS1_CPU2_MODE((LPCG87_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG87_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG87_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG87_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG87_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG87_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG87_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG87_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG87_STATUS1_CPU1_MODE get_LPCG87_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG87_STATUS1_CPU1_MODE((LPCG87_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG87_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG87_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG87_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG87_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG87_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG87_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG87_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG87_STATUS1_CPU0_MODE get_LPCG87_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG87_STATUS1_CPU0_MODE((LPCG87_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG87_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG87_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG87_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG87_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG87_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG87_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG87_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG87_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG87_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG87_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG87_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG87_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG87_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG87_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG87_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG87_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG87_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG87_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG87_AUTHEN_LOCK_MODE() volatile
    {
        LPCG87_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG87_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG87_AUTHEN_LOCK_MODE() volatile
    {
        LPCG87_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG87_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG87_AUTHEN_LOCK_MODE() volatile
    {
        LPCG87_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG87_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG87_AUTHEN_CPULPM() volatile
    {
        return LPCG87_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG87_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG87_AUTHEN_CPULPM() volatile
    {
        LPCG87_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG87_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG87_AUTHEN_CPULPM() volatile
    {
        LPCG87_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG87_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG87_AUTHEN_CPULPM() volatile
    {
        LPCG87_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG87_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG87_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG87_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG87_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG87_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG87_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG87_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG87_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG87_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG87_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG87_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG87_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG87_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG87_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG87_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG87_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG87_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG87_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG87_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG87_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG87_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG87_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG87_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG87_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG87_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG87_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG87_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG87_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG87_AUTHEN_LOCK_LIST() volatile
    {
        LPCG87_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG87_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG87_AUTHEN_LOCK_LIST() volatile
    {
        LPCG87_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG87_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG87_AUTHEN_LOCK_LIST() volatile
    {
        LPCG87_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG87_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG87_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG87_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG87_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG87_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG87_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG87_AUTHEN = curr;
    }

    /**
     * Get LPCG87_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG87_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG87_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG87_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG87_AUTHEN_LOCK_TZ() volatile
    {
        LPCG87_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG87_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG87_AUTHEN_LOCK_TZ() volatile
    {
        LPCG87_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG87_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG87_AUTHEN_LOCK_TZ() volatile
    {
        LPCG87_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG87_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG87_AUTHEN_TZ_NS() volatile
    {
        return LPCG87_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG87_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG87_AUTHEN_TZ_NS() volatile
    {
        LPCG87_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG87_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG87_AUTHEN_TZ_NS() volatile
    {
        LPCG87_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG87_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG87_AUTHEN_TZ_NS() volatile
    {
        LPCG87_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG87_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG87_AUTHEN_TZ_USER() volatile
    {
        return LPCG87_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG87_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG87_AUTHEN_TZ_USER() volatile
    {
        LPCG87_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG87_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG87_AUTHEN_TZ_USER() volatile
    {
        LPCG87_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG87_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG87_AUTHEN_TZ_USER() volatile
    {
        LPCG87_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG87_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG87_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG87_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG87_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG87_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG87_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG87_AUTHEN = curr;
    }

    /**
     * Get LPCG88_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG88_DIRECT_ON() volatile
    {
        return LPCG88_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG88_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG88_DIRECT_ON() volatile
    {
        LPCG88_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG88_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG88_DIRECT_ON() volatile
    {
        LPCG88_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG88_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG88_DIRECT_ON() volatile
    {
        LPCG88_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG88_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG88_DOMAIN_LEVEL3 get_LPCG88_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG88_DOMAIN_LEVEL3((LPCG88_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG88_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG88_DOMAIN_LEVEL3(
        CCM_LPCG88_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG88_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG88_DOMAIN = curr;
    }

    /**
     * Get LPCG88_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG88_DOMAIN_LEVEL2 get_LPCG88_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG88_DOMAIN_LEVEL2((LPCG88_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG88_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG88_DOMAIN_LEVEL2(
        CCM_LPCG88_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG88_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG88_DOMAIN = curr;
    }

    /**
     * Get LPCG88_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG88_DOMAIN_LEVEL1 get_LPCG88_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG88_DOMAIN_LEVEL1((LPCG88_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG88_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG88_DOMAIN_LEVEL1(
        CCM_LPCG88_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG88_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG88_DOMAIN = curr;
    }

    /**
     * Get LPCG88_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG88_DOMAIN_LEVEL0 get_LPCG88_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG88_DOMAIN_LEVEL0((LPCG88_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG88_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG88_DOMAIN_LEVEL0(
        CCM_LPCG88_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG88_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG88_DOMAIN = curr;
    }

    /**
     * Get LPCG88_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG88_DOMAIN_LEVEL get_LPCG88_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG88_DOMAIN_LEVEL((LPCG88_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG88_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG88_DOMAIN_LEVEL(CCM_LPCG88_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG88_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG88_DOMAIN = curr;
    }

    /**
     * Get all of LPCG88_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG88_DOMAIN(CCM_LPCG88_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG88_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG88_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG88_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG88_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG88_DOMAIN;

        LEVEL3 = CCM_LPCG88_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG88_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG88_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG88_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG88_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG88_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG88_DOMAIN(CCM_LPCG88_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG88_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG88_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG88_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG88_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG88_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG88_DOMAIN = curr;
    }

    /**
     * Get LPCG88_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG88_STATUS0_DOMAIN_ENABLE
    get_LPCG88_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG88_STATUS0_DOMAIN_ENABLE((LPCG88_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG88_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG88_STATUS0_ACTIVE_DOMAIN
    get_LPCG88_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG88_STATUS0_ACTIVE_DOMAIN((LPCG88_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG88_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG88_STATUS0_ON() volatile
    {
        return LPCG88_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG88_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG88_STATUS0(
        CCM_LPCG88_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG88_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG88_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG88_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG88_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG88_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG88_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG88_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG88_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG88_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG88_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG88_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG88_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG88_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG88_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG88_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG88_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG88_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG88_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG88_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG88_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG88_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG88_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG88_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG88_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG88_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG88_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG88_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG88_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG88_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG88_STATUS1_CPU3_MODE get_LPCG88_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG88_STATUS1_CPU3_MODE((LPCG88_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG88_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG88_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG88_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG88_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG88_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG88_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG88_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG88_STATUS1_CPU2_MODE get_LPCG88_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG88_STATUS1_CPU2_MODE((LPCG88_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG88_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG88_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG88_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG88_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG88_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG88_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG88_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG88_STATUS1_CPU1_MODE get_LPCG88_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG88_STATUS1_CPU1_MODE((LPCG88_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG88_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG88_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG88_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG88_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG88_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG88_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG88_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG88_STATUS1_CPU0_MODE get_LPCG88_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG88_STATUS1_CPU0_MODE((LPCG88_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG88_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG88_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG88_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG88_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG88_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG88_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG88_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG88_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG88_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG88_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG88_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG88_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG88_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG88_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG88_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG88_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG88_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG88_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG88_AUTHEN_LOCK_MODE() volatile
    {
        LPCG88_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG88_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG88_AUTHEN_LOCK_MODE() volatile
    {
        LPCG88_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG88_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG88_AUTHEN_LOCK_MODE() volatile
    {
        LPCG88_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG88_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG88_AUTHEN_CPULPM() volatile
    {
        return LPCG88_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG88_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG88_AUTHEN_CPULPM() volatile
    {
        LPCG88_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG88_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG88_AUTHEN_CPULPM() volatile
    {
        LPCG88_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG88_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG88_AUTHEN_CPULPM() volatile
    {
        LPCG88_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG88_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG88_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG88_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG88_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG88_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG88_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG88_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG88_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG88_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG88_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG88_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG88_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG88_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG88_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG88_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG88_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG88_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG88_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG88_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG88_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG88_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG88_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG88_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG88_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG88_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG88_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG88_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG88_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG88_AUTHEN_LOCK_LIST() volatile
    {
        LPCG88_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG88_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG88_AUTHEN_LOCK_LIST() volatile
    {
        LPCG88_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG88_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG88_AUTHEN_LOCK_LIST() volatile
    {
        LPCG88_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG88_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG88_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG88_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG88_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG88_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG88_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG88_AUTHEN = curr;
    }

    /**
     * Get LPCG88_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG88_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG88_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG88_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG88_AUTHEN_LOCK_TZ() volatile
    {
        LPCG88_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG88_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG88_AUTHEN_LOCK_TZ() volatile
    {
        LPCG88_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG88_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG88_AUTHEN_LOCK_TZ() volatile
    {
        LPCG88_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG88_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG88_AUTHEN_TZ_NS() volatile
    {
        return LPCG88_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG88_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG88_AUTHEN_TZ_NS() volatile
    {
        LPCG88_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG88_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG88_AUTHEN_TZ_NS() volatile
    {
        LPCG88_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG88_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG88_AUTHEN_TZ_NS() volatile
    {
        LPCG88_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG88_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG88_AUTHEN_TZ_USER() volatile
    {
        return LPCG88_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG88_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG88_AUTHEN_TZ_USER() volatile
    {
        LPCG88_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG88_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG88_AUTHEN_TZ_USER() volatile
    {
        LPCG88_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG88_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG88_AUTHEN_TZ_USER() volatile
    {
        LPCG88_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG88_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG88_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG88_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG88_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG88_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG88_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG88_AUTHEN = curr;
    }

    /**
     * Get LPCG89_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG89_DIRECT_ON() volatile
    {
        return LPCG89_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG89_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG89_DIRECT_ON() volatile
    {
        LPCG89_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG89_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG89_DIRECT_ON() volatile
    {
        LPCG89_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG89_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG89_DIRECT_ON() volatile
    {
        LPCG89_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG89_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG89_DOMAIN_LEVEL3 get_LPCG89_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG89_DOMAIN_LEVEL3((LPCG89_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG89_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG89_DOMAIN_LEVEL3(
        CCM_LPCG89_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG89_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG89_DOMAIN = curr;
    }

    /**
     * Get LPCG89_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG89_DOMAIN_LEVEL2 get_LPCG89_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG89_DOMAIN_LEVEL2((LPCG89_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG89_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG89_DOMAIN_LEVEL2(
        CCM_LPCG89_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG89_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG89_DOMAIN = curr;
    }

    /**
     * Get LPCG89_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG89_DOMAIN_LEVEL1 get_LPCG89_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG89_DOMAIN_LEVEL1((LPCG89_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG89_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG89_DOMAIN_LEVEL1(
        CCM_LPCG89_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG89_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG89_DOMAIN = curr;
    }

    /**
     * Get LPCG89_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG89_DOMAIN_LEVEL0 get_LPCG89_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG89_DOMAIN_LEVEL0((LPCG89_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG89_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG89_DOMAIN_LEVEL0(
        CCM_LPCG89_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG89_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG89_DOMAIN = curr;
    }

    /**
     * Get LPCG89_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG89_DOMAIN_LEVEL get_LPCG89_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG89_DOMAIN_LEVEL((LPCG89_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG89_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG89_DOMAIN_LEVEL(CCM_LPCG89_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG89_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG89_DOMAIN = curr;
    }

    /**
     * Get all of LPCG89_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG89_DOMAIN(CCM_LPCG89_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG89_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG89_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG89_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG89_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG89_DOMAIN;

        LEVEL3 = CCM_LPCG89_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG89_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG89_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG89_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG89_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG89_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG89_DOMAIN(CCM_LPCG89_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG89_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG89_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG89_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG89_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG89_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG89_DOMAIN = curr;
    }

    /**
     * Get LPCG89_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG89_STATUS0_DOMAIN_ENABLE
    get_LPCG89_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG89_STATUS0_DOMAIN_ENABLE((LPCG89_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG89_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG89_STATUS0_ACTIVE_DOMAIN
    get_LPCG89_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG89_STATUS0_ACTIVE_DOMAIN((LPCG89_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG89_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG89_STATUS0_ON() volatile
    {
        return LPCG89_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG89_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG89_STATUS0(
        CCM_LPCG89_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG89_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG89_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG89_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG89_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG89_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG89_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG89_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG89_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG89_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG89_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG89_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG89_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG89_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG89_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG89_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG89_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG89_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG89_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG89_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG89_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG89_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG89_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG89_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG89_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG89_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG89_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG89_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG89_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG89_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG89_STATUS1_CPU3_MODE get_LPCG89_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG89_STATUS1_CPU3_MODE((LPCG89_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG89_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG89_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG89_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG89_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG89_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG89_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG89_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG89_STATUS1_CPU2_MODE get_LPCG89_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG89_STATUS1_CPU2_MODE((LPCG89_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG89_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG89_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG89_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG89_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG89_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG89_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG89_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG89_STATUS1_CPU1_MODE get_LPCG89_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG89_STATUS1_CPU1_MODE((LPCG89_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG89_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG89_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG89_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG89_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG89_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG89_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG89_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG89_STATUS1_CPU0_MODE get_LPCG89_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG89_STATUS1_CPU0_MODE((LPCG89_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG89_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG89_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG89_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG89_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG89_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG89_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG89_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG89_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG89_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG89_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG89_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG89_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG89_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG89_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG89_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG89_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG89_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG89_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG89_AUTHEN_LOCK_MODE() volatile
    {
        LPCG89_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG89_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG89_AUTHEN_LOCK_MODE() volatile
    {
        LPCG89_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG89_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG89_AUTHEN_LOCK_MODE() volatile
    {
        LPCG89_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG89_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG89_AUTHEN_CPULPM() volatile
    {
        return LPCG89_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG89_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG89_AUTHEN_CPULPM() volatile
    {
        LPCG89_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG89_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG89_AUTHEN_CPULPM() volatile
    {
        LPCG89_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG89_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG89_AUTHEN_CPULPM() volatile
    {
        LPCG89_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG89_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG89_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG89_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG89_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG89_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG89_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG89_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG89_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG89_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG89_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG89_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG89_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG89_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG89_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG89_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG89_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG89_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG89_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG89_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG89_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG89_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG89_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG89_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG89_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG89_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG89_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG89_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG89_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG89_AUTHEN_LOCK_LIST() volatile
    {
        LPCG89_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG89_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG89_AUTHEN_LOCK_LIST() volatile
    {
        LPCG89_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG89_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG89_AUTHEN_LOCK_LIST() volatile
    {
        LPCG89_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG89_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG89_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG89_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG89_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG89_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG89_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG89_AUTHEN = curr;
    }

    /**
     * Get LPCG89_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG89_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG89_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG89_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG89_AUTHEN_LOCK_TZ() volatile
    {
        LPCG89_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG89_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG89_AUTHEN_LOCK_TZ() volatile
    {
        LPCG89_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG89_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG89_AUTHEN_LOCK_TZ() volatile
    {
        LPCG89_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG89_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG89_AUTHEN_TZ_NS() volatile
    {
        return LPCG89_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG89_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG89_AUTHEN_TZ_NS() volatile
    {
        LPCG89_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG89_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG89_AUTHEN_TZ_NS() volatile
    {
        LPCG89_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG89_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG89_AUTHEN_TZ_NS() volatile
    {
        LPCG89_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG89_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG89_AUTHEN_TZ_USER() volatile
    {
        return LPCG89_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG89_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG89_AUTHEN_TZ_USER() volatile
    {
        LPCG89_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG89_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG89_AUTHEN_TZ_USER() volatile
    {
        LPCG89_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG89_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG89_AUTHEN_TZ_USER() volatile
    {
        LPCG89_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG89_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG89_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG89_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG89_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG89_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG89_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG89_AUTHEN = curr;
    }

    /**
     * Get LPCG90_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG90_DIRECT_ON() volatile
    {
        return LPCG90_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG90_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG90_DIRECT_ON() volatile
    {
        LPCG90_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG90_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG90_DIRECT_ON() volatile
    {
        LPCG90_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG90_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG90_DIRECT_ON() volatile
    {
        LPCG90_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG90_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG90_DOMAIN_LEVEL3 get_LPCG90_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG90_DOMAIN_LEVEL3((LPCG90_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG90_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG90_DOMAIN_LEVEL3(
        CCM_LPCG90_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG90_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG90_DOMAIN = curr;
    }

    /**
     * Get LPCG90_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG90_DOMAIN_LEVEL2 get_LPCG90_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG90_DOMAIN_LEVEL2((LPCG90_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG90_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG90_DOMAIN_LEVEL2(
        CCM_LPCG90_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG90_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG90_DOMAIN = curr;
    }

    /**
     * Get LPCG90_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG90_DOMAIN_LEVEL1 get_LPCG90_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG90_DOMAIN_LEVEL1((LPCG90_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG90_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG90_DOMAIN_LEVEL1(
        CCM_LPCG90_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG90_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG90_DOMAIN = curr;
    }

    /**
     * Get LPCG90_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG90_DOMAIN_LEVEL0 get_LPCG90_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG90_DOMAIN_LEVEL0((LPCG90_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG90_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG90_DOMAIN_LEVEL0(
        CCM_LPCG90_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG90_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG90_DOMAIN = curr;
    }

    /**
     * Get LPCG90_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG90_DOMAIN_LEVEL get_LPCG90_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG90_DOMAIN_LEVEL((LPCG90_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG90_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG90_DOMAIN_LEVEL(CCM_LPCG90_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG90_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG90_DOMAIN = curr;
    }

    /**
     * Get all of LPCG90_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG90_DOMAIN(CCM_LPCG90_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG90_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG90_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG90_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG90_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG90_DOMAIN;

        LEVEL3 = CCM_LPCG90_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG90_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG90_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG90_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG90_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG90_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG90_DOMAIN(CCM_LPCG90_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG90_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG90_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG90_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG90_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG90_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG90_DOMAIN = curr;
    }

    /**
     * Get LPCG90_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG90_STATUS0_DOMAIN_ENABLE
    get_LPCG90_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG90_STATUS0_DOMAIN_ENABLE((LPCG90_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG90_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG90_STATUS0_ACTIVE_DOMAIN
    get_LPCG90_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG90_STATUS0_ACTIVE_DOMAIN((LPCG90_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG90_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG90_STATUS0_ON() volatile
    {
        return LPCG90_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG90_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG90_STATUS0(
        CCM_LPCG90_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG90_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG90_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG90_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG90_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG90_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG90_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG90_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG90_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG90_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG90_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG90_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG90_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG90_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG90_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG90_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG90_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG90_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG90_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG90_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG90_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG90_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG90_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG90_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG90_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG90_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG90_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG90_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG90_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG90_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG90_STATUS1_CPU3_MODE get_LPCG90_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG90_STATUS1_CPU3_MODE((LPCG90_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG90_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG90_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG90_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG90_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG90_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG90_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG90_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG90_STATUS1_CPU2_MODE get_LPCG90_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG90_STATUS1_CPU2_MODE((LPCG90_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG90_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG90_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG90_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG90_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG90_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG90_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG90_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG90_STATUS1_CPU1_MODE get_LPCG90_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG90_STATUS1_CPU1_MODE((LPCG90_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG90_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG90_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG90_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG90_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG90_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG90_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG90_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG90_STATUS1_CPU0_MODE get_LPCG90_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG90_STATUS1_CPU0_MODE((LPCG90_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG90_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG90_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG90_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG90_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG90_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG90_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG90_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG90_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG90_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG90_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG90_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG90_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG90_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG90_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG90_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG90_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG90_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG90_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG90_AUTHEN_LOCK_MODE() volatile
    {
        LPCG90_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG90_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG90_AUTHEN_LOCK_MODE() volatile
    {
        LPCG90_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG90_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG90_AUTHEN_LOCK_MODE() volatile
    {
        LPCG90_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG90_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG90_AUTHEN_CPULPM() volatile
    {
        return LPCG90_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG90_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG90_AUTHEN_CPULPM() volatile
    {
        LPCG90_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG90_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG90_AUTHEN_CPULPM() volatile
    {
        LPCG90_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG90_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG90_AUTHEN_CPULPM() volatile
    {
        LPCG90_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG90_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG90_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG90_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG90_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG90_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG90_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG90_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG90_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG90_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG90_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG90_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG90_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG90_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG90_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG90_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG90_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG90_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG90_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG90_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG90_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG90_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG90_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG90_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG90_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG90_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG90_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG90_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG90_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG90_AUTHEN_LOCK_LIST() volatile
    {
        LPCG90_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG90_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG90_AUTHEN_LOCK_LIST() volatile
    {
        LPCG90_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG90_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG90_AUTHEN_LOCK_LIST() volatile
    {
        LPCG90_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG90_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG90_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG90_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG90_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG90_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG90_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG90_AUTHEN = curr;
    }

    /**
     * Get LPCG90_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG90_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG90_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG90_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG90_AUTHEN_LOCK_TZ() volatile
    {
        LPCG90_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG90_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG90_AUTHEN_LOCK_TZ() volatile
    {
        LPCG90_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG90_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG90_AUTHEN_LOCK_TZ() volatile
    {
        LPCG90_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG90_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG90_AUTHEN_TZ_NS() volatile
    {
        return LPCG90_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG90_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG90_AUTHEN_TZ_NS() volatile
    {
        LPCG90_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG90_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG90_AUTHEN_TZ_NS() volatile
    {
        LPCG90_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG90_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG90_AUTHEN_TZ_NS() volatile
    {
        LPCG90_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG90_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG90_AUTHEN_TZ_USER() volatile
    {
        return LPCG90_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG90_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG90_AUTHEN_TZ_USER() volatile
    {
        LPCG90_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG90_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG90_AUTHEN_TZ_USER() volatile
    {
        LPCG90_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG90_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG90_AUTHEN_TZ_USER() volatile
    {
        LPCG90_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG90_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG90_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG90_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG90_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG90_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG90_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG90_AUTHEN = curr;
    }

    /**
     * Get LPCG91_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG91_DIRECT_ON() volatile
    {
        return LPCG91_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG91_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG91_DIRECT_ON() volatile
    {
        LPCG91_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG91_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG91_DIRECT_ON() volatile
    {
        LPCG91_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG91_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG91_DIRECT_ON() volatile
    {
        LPCG91_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG91_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG91_DOMAIN_LEVEL3 get_LPCG91_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG91_DOMAIN_LEVEL3((LPCG91_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG91_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG91_DOMAIN_LEVEL3(
        CCM_LPCG91_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG91_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG91_DOMAIN = curr;
    }

    /**
     * Get LPCG91_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG91_DOMAIN_LEVEL2 get_LPCG91_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG91_DOMAIN_LEVEL2((LPCG91_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG91_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG91_DOMAIN_LEVEL2(
        CCM_LPCG91_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG91_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG91_DOMAIN = curr;
    }

    /**
     * Get LPCG91_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG91_DOMAIN_LEVEL1 get_LPCG91_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG91_DOMAIN_LEVEL1((LPCG91_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG91_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG91_DOMAIN_LEVEL1(
        CCM_LPCG91_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG91_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG91_DOMAIN = curr;
    }

    /**
     * Get LPCG91_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG91_DOMAIN_LEVEL0 get_LPCG91_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG91_DOMAIN_LEVEL0((LPCG91_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG91_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG91_DOMAIN_LEVEL0(
        CCM_LPCG91_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG91_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG91_DOMAIN = curr;
    }

    /**
     * Get LPCG91_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG91_DOMAIN_LEVEL get_LPCG91_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG91_DOMAIN_LEVEL((LPCG91_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG91_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG91_DOMAIN_LEVEL(CCM_LPCG91_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG91_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG91_DOMAIN = curr;
    }

    /**
     * Get all of LPCG91_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG91_DOMAIN(CCM_LPCG91_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG91_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG91_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG91_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG91_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG91_DOMAIN;

        LEVEL3 = CCM_LPCG91_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG91_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG91_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG91_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG91_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG91_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG91_DOMAIN(CCM_LPCG91_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG91_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG91_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG91_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG91_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG91_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG91_DOMAIN = curr;
    }

    /**
     * Get LPCG91_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG91_STATUS0_DOMAIN_ENABLE
    get_LPCG91_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG91_STATUS0_DOMAIN_ENABLE((LPCG91_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG91_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG91_STATUS0_ACTIVE_DOMAIN
    get_LPCG91_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG91_STATUS0_ACTIVE_DOMAIN((LPCG91_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG91_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG91_STATUS0_ON() volatile
    {
        return LPCG91_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG91_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG91_STATUS0(
        CCM_LPCG91_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG91_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG91_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG91_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG91_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG91_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG91_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG91_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG91_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG91_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG91_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG91_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG91_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG91_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG91_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG91_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG91_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG91_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG91_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG91_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG91_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG91_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG91_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG91_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG91_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG91_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG91_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG91_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG91_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG91_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG91_STATUS1_CPU3_MODE get_LPCG91_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG91_STATUS1_CPU3_MODE((LPCG91_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG91_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG91_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG91_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG91_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG91_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG91_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG91_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG91_STATUS1_CPU2_MODE get_LPCG91_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG91_STATUS1_CPU2_MODE((LPCG91_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG91_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG91_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG91_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG91_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG91_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG91_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG91_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG91_STATUS1_CPU1_MODE get_LPCG91_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG91_STATUS1_CPU1_MODE((LPCG91_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG91_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG91_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG91_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG91_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG91_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG91_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG91_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG91_STATUS1_CPU0_MODE get_LPCG91_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG91_STATUS1_CPU0_MODE((LPCG91_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG91_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG91_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG91_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG91_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG91_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG91_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG91_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG91_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG91_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG91_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG91_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG91_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG91_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG91_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG91_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG91_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG91_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG91_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG91_AUTHEN_LOCK_MODE() volatile
    {
        LPCG91_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG91_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG91_AUTHEN_LOCK_MODE() volatile
    {
        LPCG91_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG91_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG91_AUTHEN_LOCK_MODE() volatile
    {
        LPCG91_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG91_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG91_AUTHEN_CPULPM() volatile
    {
        return LPCG91_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG91_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG91_AUTHEN_CPULPM() volatile
    {
        LPCG91_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG91_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG91_AUTHEN_CPULPM() volatile
    {
        LPCG91_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG91_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG91_AUTHEN_CPULPM() volatile
    {
        LPCG91_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG91_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG91_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG91_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG91_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG91_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG91_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG91_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG91_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG91_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG91_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG91_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG91_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG91_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG91_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG91_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG91_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG91_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG91_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG91_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG91_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG91_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG91_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG91_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG91_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG91_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG91_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG91_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG91_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG91_AUTHEN_LOCK_LIST() volatile
    {
        LPCG91_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG91_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG91_AUTHEN_LOCK_LIST() volatile
    {
        LPCG91_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG91_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG91_AUTHEN_LOCK_LIST() volatile
    {
        LPCG91_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG91_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG91_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG91_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG91_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG91_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG91_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG91_AUTHEN = curr;
    }

    /**
     * Get LPCG91_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG91_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG91_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG91_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG91_AUTHEN_LOCK_TZ() volatile
    {
        LPCG91_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG91_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG91_AUTHEN_LOCK_TZ() volatile
    {
        LPCG91_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG91_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG91_AUTHEN_LOCK_TZ() volatile
    {
        LPCG91_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG91_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG91_AUTHEN_TZ_NS() volatile
    {
        return LPCG91_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG91_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG91_AUTHEN_TZ_NS() volatile
    {
        LPCG91_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG91_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG91_AUTHEN_TZ_NS() volatile
    {
        LPCG91_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG91_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG91_AUTHEN_TZ_NS() volatile
    {
        LPCG91_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG91_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG91_AUTHEN_TZ_USER() volatile
    {
        return LPCG91_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG91_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG91_AUTHEN_TZ_USER() volatile
    {
        LPCG91_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG91_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG91_AUTHEN_TZ_USER() volatile
    {
        LPCG91_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG91_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG91_AUTHEN_TZ_USER() volatile
    {
        LPCG91_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG91_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG91_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG91_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG91_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG91_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG91_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG91_AUTHEN = curr;
    }

    /**
     * Get LPCG92_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG92_DIRECT_ON() volatile
    {
        return LPCG92_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG92_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG92_DIRECT_ON() volatile
    {
        LPCG92_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG92_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG92_DIRECT_ON() volatile
    {
        LPCG92_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG92_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG92_DIRECT_ON() volatile
    {
        LPCG92_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG92_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG92_DOMAIN_LEVEL3 get_LPCG92_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG92_DOMAIN_LEVEL3((LPCG92_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG92_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG92_DOMAIN_LEVEL3(
        CCM_LPCG92_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG92_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG92_DOMAIN = curr;
    }

    /**
     * Get LPCG92_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG92_DOMAIN_LEVEL2 get_LPCG92_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG92_DOMAIN_LEVEL2((LPCG92_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG92_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG92_DOMAIN_LEVEL2(
        CCM_LPCG92_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG92_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG92_DOMAIN = curr;
    }

    /**
     * Get LPCG92_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG92_DOMAIN_LEVEL1 get_LPCG92_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG92_DOMAIN_LEVEL1((LPCG92_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG92_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG92_DOMAIN_LEVEL1(
        CCM_LPCG92_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG92_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG92_DOMAIN = curr;
    }

    /**
     * Get LPCG92_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG92_DOMAIN_LEVEL0 get_LPCG92_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG92_DOMAIN_LEVEL0((LPCG92_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG92_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG92_DOMAIN_LEVEL0(
        CCM_LPCG92_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG92_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG92_DOMAIN = curr;
    }

    /**
     * Get LPCG92_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG92_DOMAIN_LEVEL get_LPCG92_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG92_DOMAIN_LEVEL((LPCG92_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG92_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG92_DOMAIN_LEVEL(CCM_LPCG92_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG92_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG92_DOMAIN = curr;
    }

    /**
     * Get all of LPCG92_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG92_DOMAIN(CCM_LPCG92_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG92_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG92_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG92_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG92_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG92_DOMAIN;

        LEVEL3 = CCM_LPCG92_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG92_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG92_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG92_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG92_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG92_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG92_DOMAIN(CCM_LPCG92_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG92_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG92_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG92_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG92_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG92_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG92_DOMAIN = curr;
    }

    /**
     * Get LPCG92_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG92_STATUS0_DOMAIN_ENABLE
    get_LPCG92_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG92_STATUS0_DOMAIN_ENABLE((LPCG92_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG92_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG92_STATUS0_ACTIVE_DOMAIN
    get_LPCG92_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG92_STATUS0_ACTIVE_DOMAIN((LPCG92_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG92_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG92_STATUS0_ON() volatile
    {
        return LPCG92_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG92_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG92_STATUS0(
        CCM_LPCG92_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG92_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG92_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG92_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG92_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG92_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG92_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG92_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG92_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG92_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG92_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG92_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG92_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG92_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG92_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG92_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG92_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG92_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG92_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG92_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG92_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG92_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG92_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG92_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG92_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG92_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG92_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG92_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG92_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG92_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG92_STATUS1_CPU3_MODE get_LPCG92_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG92_STATUS1_CPU3_MODE((LPCG92_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG92_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG92_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG92_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG92_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG92_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG92_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG92_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG92_STATUS1_CPU2_MODE get_LPCG92_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG92_STATUS1_CPU2_MODE((LPCG92_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG92_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG92_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG92_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG92_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG92_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG92_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG92_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG92_STATUS1_CPU1_MODE get_LPCG92_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG92_STATUS1_CPU1_MODE((LPCG92_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG92_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG92_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG92_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG92_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG92_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG92_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG92_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG92_STATUS1_CPU0_MODE get_LPCG92_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG92_STATUS1_CPU0_MODE((LPCG92_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG92_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG92_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG92_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG92_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG92_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG92_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG92_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG92_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG92_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG92_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG92_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG92_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG92_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG92_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG92_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG92_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG92_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG92_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG92_AUTHEN_LOCK_MODE() volatile
    {
        LPCG92_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG92_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG92_AUTHEN_LOCK_MODE() volatile
    {
        LPCG92_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG92_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG92_AUTHEN_LOCK_MODE() volatile
    {
        LPCG92_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG92_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG92_AUTHEN_CPULPM() volatile
    {
        return LPCG92_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG92_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG92_AUTHEN_CPULPM() volatile
    {
        LPCG92_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG92_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG92_AUTHEN_CPULPM() volatile
    {
        LPCG92_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG92_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG92_AUTHEN_CPULPM() volatile
    {
        LPCG92_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG92_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG92_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG92_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG92_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG92_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG92_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG92_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG92_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG92_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG92_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG92_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG92_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG92_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG92_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG92_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG92_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG92_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG92_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG92_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG92_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG92_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG92_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG92_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG92_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG92_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG92_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG92_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG92_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG92_AUTHEN_LOCK_LIST() volatile
    {
        LPCG92_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG92_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG92_AUTHEN_LOCK_LIST() volatile
    {
        LPCG92_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG92_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG92_AUTHEN_LOCK_LIST() volatile
    {
        LPCG92_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG92_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG92_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG92_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG92_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG92_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG92_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG92_AUTHEN = curr;
    }

    /**
     * Get LPCG92_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG92_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG92_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG92_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG92_AUTHEN_LOCK_TZ() volatile
    {
        LPCG92_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG92_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG92_AUTHEN_LOCK_TZ() volatile
    {
        LPCG92_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG92_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG92_AUTHEN_LOCK_TZ() volatile
    {
        LPCG92_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG92_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG92_AUTHEN_TZ_NS() volatile
    {
        return LPCG92_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG92_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG92_AUTHEN_TZ_NS() volatile
    {
        LPCG92_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG92_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG92_AUTHEN_TZ_NS() volatile
    {
        LPCG92_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG92_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG92_AUTHEN_TZ_NS() volatile
    {
        LPCG92_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG92_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG92_AUTHEN_TZ_USER() volatile
    {
        return LPCG92_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG92_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG92_AUTHEN_TZ_USER() volatile
    {
        LPCG92_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG92_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG92_AUTHEN_TZ_USER() volatile
    {
        LPCG92_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG92_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG92_AUTHEN_TZ_USER() volatile
    {
        LPCG92_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG92_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG92_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG92_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG92_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG92_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG92_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG92_AUTHEN = curr;
    }

    /**
     * Get LPCG93_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG93_DIRECT_ON() volatile
    {
        return LPCG93_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG93_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG93_DIRECT_ON() volatile
    {
        LPCG93_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG93_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG93_DIRECT_ON() volatile
    {
        LPCG93_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG93_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG93_DIRECT_ON() volatile
    {
        LPCG93_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG93_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG93_DOMAIN_LEVEL3 get_LPCG93_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG93_DOMAIN_LEVEL3((LPCG93_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG93_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG93_DOMAIN_LEVEL3(
        CCM_LPCG93_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG93_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG93_DOMAIN = curr;
    }

    /**
     * Get LPCG93_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG93_DOMAIN_LEVEL2 get_LPCG93_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG93_DOMAIN_LEVEL2((LPCG93_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG93_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG93_DOMAIN_LEVEL2(
        CCM_LPCG93_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG93_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG93_DOMAIN = curr;
    }

    /**
     * Get LPCG93_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG93_DOMAIN_LEVEL1 get_LPCG93_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG93_DOMAIN_LEVEL1((LPCG93_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG93_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG93_DOMAIN_LEVEL1(
        CCM_LPCG93_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG93_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG93_DOMAIN = curr;
    }

    /**
     * Get LPCG93_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG93_DOMAIN_LEVEL0 get_LPCG93_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG93_DOMAIN_LEVEL0((LPCG93_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG93_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG93_DOMAIN_LEVEL0(
        CCM_LPCG93_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG93_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG93_DOMAIN = curr;
    }

    /**
     * Get LPCG93_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG93_DOMAIN_LEVEL get_LPCG93_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG93_DOMAIN_LEVEL((LPCG93_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG93_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG93_DOMAIN_LEVEL(CCM_LPCG93_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG93_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG93_DOMAIN = curr;
    }

    /**
     * Get all of LPCG93_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG93_DOMAIN(CCM_LPCG93_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG93_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG93_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG93_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG93_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG93_DOMAIN;

        LEVEL3 = CCM_LPCG93_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG93_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG93_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG93_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG93_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG93_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG93_DOMAIN(CCM_LPCG93_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG93_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG93_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG93_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG93_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG93_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG93_DOMAIN = curr;
    }

    /**
     * Get LPCG93_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG93_STATUS0_DOMAIN_ENABLE
    get_LPCG93_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG93_STATUS0_DOMAIN_ENABLE((LPCG93_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG93_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG93_STATUS0_ACTIVE_DOMAIN
    get_LPCG93_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG93_STATUS0_ACTIVE_DOMAIN((LPCG93_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG93_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG93_STATUS0_ON() volatile
    {
        return LPCG93_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG93_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG93_STATUS0(
        CCM_LPCG93_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG93_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG93_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG93_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG93_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG93_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG93_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG93_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG93_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG93_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG93_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG93_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG93_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG93_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG93_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG93_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG93_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG93_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG93_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG93_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG93_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG93_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG93_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG93_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG93_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG93_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG93_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG93_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG93_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG93_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG93_STATUS1_CPU3_MODE get_LPCG93_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG93_STATUS1_CPU3_MODE((LPCG93_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG93_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG93_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG93_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG93_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG93_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG93_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG93_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG93_STATUS1_CPU2_MODE get_LPCG93_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG93_STATUS1_CPU2_MODE((LPCG93_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG93_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG93_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG93_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG93_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG93_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG93_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG93_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG93_STATUS1_CPU1_MODE get_LPCG93_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG93_STATUS1_CPU1_MODE((LPCG93_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG93_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG93_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG93_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG93_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG93_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG93_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG93_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG93_STATUS1_CPU0_MODE get_LPCG93_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG93_STATUS1_CPU0_MODE((LPCG93_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG93_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG93_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG93_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG93_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG93_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG93_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG93_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG93_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG93_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG93_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG93_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG93_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG93_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG93_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG93_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG93_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG93_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG93_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG93_AUTHEN_LOCK_MODE() volatile
    {
        LPCG93_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG93_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG93_AUTHEN_LOCK_MODE() volatile
    {
        LPCG93_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG93_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG93_AUTHEN_LOCK_MODE() volatile
    {
        LPCG93_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG93_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG93_AUTHEN_CPULPM() volatile
    {
        return LPCG93_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG93_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG93_AUTHEN_CPULPM() volatile
    {
        LPCG93_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG93_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG93_AUTHEN_CPULPM() volatile
    {
        LPCG93_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG93_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG93_AUTHEN_CPULPM() volatile
    {
        LPCG93_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG93_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG93_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG93_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG93_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG93_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG93_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG93_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG93_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG93_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG93_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG93_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG93_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG93_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG93_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG93_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG93_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG93_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG93_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG93_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG93_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG93_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG93_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG93_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG93_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG93_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG93_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG93_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG93_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG93_AUTHEN_LOCK_LIST() volatile
    {
        LPCG93_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG93_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG93_AUTHEN_LOCK_LIST() volatile
    {
        LPCG93_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG93_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG93_AUTHEN_LOCK_LIST() volatile
    {
        LPCG93_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG93_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG93_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG93_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG93_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG93_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG93_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG93_AUTHEN = curr;
    }

    /**
     * Get LPCG93_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG93_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG93_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG93_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG93_AUTHEN_LOCK_TZ() volatile
    {
        LPCG93_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG93_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG93_AUTHEN_LOCK_TZ() volatile
    {
        LPCG93_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG93_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG93_AUTHEN_LOCK_TZ() volatile
    {
        LPCG93_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG93_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG93_AUTHEN_TZ_NS() volatile
    {
        return LPCG93_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG93_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG93_AUTHEN_TZ_NS() volatile
    {
        LPCG93_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG93_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG93_AUTHEN_TZ_NS() volatile
    {
        LPCG93_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG93_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG93_AUTHEN_TZ_NS() volatile
    {
        LPCG93_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG93_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG93_AUTHEN_TZ_USER() volatile
    {
        return LPCG93_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG93_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG93_AUTHEN_TZ_USER() volatile
    {
        LPCG93_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG93_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG93_AUTHEN_TZ_USER() volatile
    {
        LPCG93_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG93_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG93_AUTHEN_TZ_USER() volatile
    {
        LPCG93_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG93_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG93_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG93_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG93_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG93_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG93_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG93_AUTHEN = curr;
    }

    /**
     * Get LPCG94_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG94_DIRECT_ON() volatile
    {
        return LPCG94_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG94_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG94_DIRECT_ON() volatile
    {
        LPCG94_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG94_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG94_DIRECT_ON() volatile
    {
        LPCG94_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG94_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG94_DIRECT_ON() volatile
    {
        LPCG94_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG94_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG94_DOMAIN_LEVEL3 get_LPCG94_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG94_DOMAIN_LEVEL3((LPCG94_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG94_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG94_DOMAIN_LEVEL3(
        CCM_LPCG94_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG94_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG94_DOMAIN = curr;
    }

    /**
     * Get LPCG94_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG94_DOMAIN_LEVEL2 get_LPCG94_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG94_DOMAIN_LEVEL2((LPCG94_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG94_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG94_DOMAIN_LEVEL2(
        CCM_LPCG94_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG94_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG94_DOMAIN = curr;
    }

    /**
     * Get LPCG94_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG94_DOMAIN_LEVEL1 get_LPCG94_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG94_DOMAIN_LEVEL1((LPCG94_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG94_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG94_DOMAIN_LEVEL1(
        CCM_LPCG94_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG94_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG94_DOMAIN = curr;
    }

    /**
     * Get LPCG94_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG94_DOMAIN_LEVEL0 get_LPCG94_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG94_DOMAIN_LEVEL0((LPCG94_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG94_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG94_DOMAIN_LEVEL0(
        CCM_LPCG94_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG94_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG94_DOMAIN = curr;
    }

    /**
     * Get LPCG94_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG94_DOMAIN_LEVEL get_LPCG94_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG94_DOMAIN_LEVEL((LPCG94_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG94_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG94_DOMAIN_LEVEL(CCM_LPCG94_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG94_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG94_DOMAIN = curr;
    }

    /**
     * Get all of LPCG94_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG94_DOMAIN(CCM_LPCG94_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG94_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG94_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG94_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG94_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG94_DOMAIN;

        LEVEL3 = CCM_LPCG94_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG94_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG94_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG94_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG94_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG94_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG94_DOMAIN(CCM_LPCG94_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG94_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG94_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG94_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG94_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG94_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG94_DOMAIN = curr;
    }

    /**
     * Get LPCG94_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG94_STATUS0_DOMAIN_ENABLE
    get_LPCG94_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG94_STATUS0_DOMAIN_ENABLE((LPCG94_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG94_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG94_STATUS0_ACTIVE_DOMAIN
    get_LPCG94_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG94_STATUS0_ACTIVE_DOMAIN((LPCG94_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG94_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG94_STATUS0_ON() volatile
    {
        return LPCG94_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG94_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG94_STATUS0(
        CCM_LPCG94_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG94_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG94_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG94_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG94_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG94_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG94_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG94_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG94_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG94_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG94_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG94_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG94_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG94_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG94_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG94_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG94_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG94_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG94_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG94_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG94_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG94_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG94_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG94_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG94_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG94_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG94_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG94_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG94_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG94_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG94_STATUS1_CPU3_MODE get_LPCG94_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG94_STATUS1_CPU3_MODE((LPCG94_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG94_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG94_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG94_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG94_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG94_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG94_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG94_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG94_STATUS1_CPU2_MODE get_LPCG94_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG94_STATUS1_CPU2_MODE((LPCG94_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG94_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG94_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG94_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG94_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG94_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG94_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG94_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG94_STATUS1_CPU1_MODE get_LPCG94_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG94_STATUS1_CPU1_MODE((LPCG94_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG94_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG94_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG94_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG94_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG94_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG94_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG94_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG94_STATUS1_CPU0_MODE get_LPCG94_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG94_STATUS1_CPU0_MODE((LPCG94_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG94_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG94_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG94_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG94_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG94_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG94_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG94_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG94_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG94_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG94_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG94_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG94_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG94_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG94_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG94_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG94_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG94_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG94_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG94_AUTHEN_LOCK_MODE() volatile
    {
        LPCG94_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG94_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG94_AUTHEN_LOCK_MODE() volatile
    {
        LPCG94_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG94_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG94_AUTHEN_LOCK_MODE() volatile
    {
        LPCG94_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG94_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG94_AUTHEN_CPULPM() volatile
    {
        return LPCG94_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG94_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG94_AUTHEN_CPULPM() volatile
    {
        LPCG94_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG94_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG94_AUTHEN_CPULPM() volatile
    {
        LPCG94_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG94_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG94_AUTHEN_CPULPM() volatile
    {
        LPCG94_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG94_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG94_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG94_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG94_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG94_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG94_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG94_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG94_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG94_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG94_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG94_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG94_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG94_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG94_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG94_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG94_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG94_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG94_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG94_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG94_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG94_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG94_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG94_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG94_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG94_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG94_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG94_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG94_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG94_AUTHEN_LOCK_LIST() volatile
    {
        LPCG94_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG94_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG94_AUTHEN_LOCK_LIST() volatile
    {
        LPCG94_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG94_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG94_AUTHEN_LOCK_LIST() volatile
    {
        LPCG94_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG94_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG94_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG94_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG94_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG94_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG94_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG94_AUTHEN = curr;
    }

    /**
     * Get LPCG94_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG94_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG94_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG94_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG94_AUTHEN_LOCK_TZ() volatile
    {
        LPCG94_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG94_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG94_AUTHEN_LOCK_TZ() volatile
    {
        LPCG94_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG94_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG94_AUTHEN_LOCK_TZ() volatile
    {
        LPCG94_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG94_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG94_AUTHEN_TZ_NS() volatile
    {
        return LPCG94_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG94_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG94_AUTHEN_TZ_NS() volatile
    {
        LPCG94_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG94_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG94_AUTHEN_TZ_NS() volatile
    {
        LPCG94_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG94_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG94_AUTHEN_TZ_NS() volatile
    {
        LPCG94_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG94_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG94_AUTHEN_TZ_USER() volatile
    {
        return LPCG94_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG94_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG94_AUTHEN_TZ_USER() volatile
    {
        LPCG94_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG94_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG94_AUTHEN_TZ_USER() volatile
    {
        LPCG94_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG94_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG94_AUTHEN_TZ_USER() volatile
    {
        LPCG94_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG94_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG94_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG94_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG94_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG94_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG94_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG94_AUTHEN = curr;
    }

    /**
     * Get LPCG95_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG95_DIRECT_ON() volatile
    {
        return LPCG95_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG95_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG95_DIRECT_ON() volatile
    {
        LPCG95_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG95_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG95_DIRECT_ON() volatile
    {
        LPCG95_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG95_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG95_DIRECT_ON() volatile
    {
        LPCG95_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG95_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG95_DOMAIN_LEVEL3 get_LPCG95_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG95_DOMAIN_LEVEL3((LPCG95_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG95_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG95_DOMAIN_LEVEL3(
        CCM_LPCG95_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG95_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG95_DOMAIN = curr;
    }

    /**
     * Get LPCG95_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG95_DOMAIN_LEVEL2 get_LPCG95_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG95_DOMAIN_LEVEL2((LPCG95_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG95_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG95_DOMAIN_LEVEL2(
        CCM_LPCG95_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG95_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG95_DOMAIN = curr;
    }

    /**
     * Get LPCG95_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG95_DOMAIN_LEVEL1 get_LPCG95_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG95_DOMAIN_LEVEL1((LPCG95_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG95_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG95_DOMAIN_LEVEL1(
        CCM_LPCG95_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG95_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG95_DOMAIN = curr;
    }

    /**
     * Get LPCG95_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG95_DOMAIN_LEVEL0 get_LPCG95_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG95_DOMAIN_LEVEL0((LPCG95_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG95_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG95_DOMAIN_LEVEL0(
        CCM_LPCG95_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG95_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG95_DOMAIN = curr;
    }

    /**
     * Get LPCG95_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG95_DOMAIN_LEVEL get_LPCG95_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG95_DOMAIN_LEVEL((LPCG95_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG95_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG95_DOMAIN_LEVEL(CCM_LPCG95_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG95_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG95_DOMAIN = curr;
    }

    /**
     * Get all of LPCG95_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG95_DOMAIN(CCM_LPCG95_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG95_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG95_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG95_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG95_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG95_DOMAIN;

        LEVEL3 = CCM_LPCG95_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG95_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG95_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG95_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG95_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG95_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG95_DOMAIN(CCM_LPCG95_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG95_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG95_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG95_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG95_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG95_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG95_DOMAIN = curr;
    }

    /**
     * Get LPCG95_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG95_STATUS0_DOMAIN_ENABLE
    get_LPCG95_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG95_STATUS0_DOMAIN_ENABLE((LPCG95_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG95_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG95_STATUS0_ACTIVE_DOMAIN
    get_LPCG95_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG95_STATUS0_ACTIVE_DOMAIN((LPCG95_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG95_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG95_STATUS0_ON() volatile
    {
        return LPCG95_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG95_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG95_STATUS0(
        CCM_LPCG95_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG95_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG95_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG95_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG95_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG95_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG95_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG95_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG95_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG95_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG95_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG95_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG95_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG95_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG95_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG95_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG95_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG95_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG95_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG95_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG95_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG95_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG95_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG95_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG95_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG95_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG95_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG95_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG95_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG95_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG95_STATUS1_CPU3_MODE get_LPCG95_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG95_STATUS1_CPU3_MODE((LPCG95_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG95_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG95_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG95_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG95_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG95_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG95_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG95_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG95_STATUS1_CPU2_MODE get_LPCG95_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG95_STATUS1_CPU2_MODE((LPCG95_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG95_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG95_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG95_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG95_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG95_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG95_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG95_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG95_STATUS1_CPU1_MODE get_LPCG95_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG95_STATUS1_CPU1_MODE((LPCG95_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG95_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG95_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG95_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG95_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG95_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG95_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG95_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG95_STATUS1_CPU0_MODE get_LPCG95_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG95_STATUS1_CPU0_MODE((LPCG95_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG95_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG95_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG95_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG95_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG95_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG95_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG95_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG95_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG95_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG95_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG95_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG95_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG95_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG95_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG95_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG95_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG95_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG95_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG95_AUTHEN_LOCK_MODE() volatile
    {
        LPCG95_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG95_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG95_AUTHEN_LOCK_MODE() volatile
    {
        LPCG95_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG95_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG95_AUTHEN_LOCK_MODE() volatile
    {
        LPCG95_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG95_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG95_AUTHEN_CPULPM() volatile
    {
        return LPCG95_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG95_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG95_AUTHEN_CPULPM() volatile
    {
        LPCG95_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG95_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG95_AUTHEN_CPULPM() volatile
    {
        LPCG95_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG95_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG95_AUTHEN_CPULPM() volatile
    {
        LPCG95_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG95_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG95_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG95_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG95_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG95_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG95_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG95_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG95_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG95_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG95_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG95_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG95_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG95_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG95_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG95_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG95_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG95_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG95_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG95_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG95_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG95_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG95_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG95_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG95_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG95_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG95_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG95_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG95_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG95_AUTHEN_LOCK_LIST() volatile
    {
        LPCG95_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG95_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG95_AUTHEN_LOCK_LIST() volatile
    {
        LPCG95_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG95_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG95_AUTHEN_LOCK_LIST() volatile
    {
        LPCG95_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG95_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG95_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG95_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG95_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG95_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG95_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG95_AUTHEN = curr;
    }

    /**
     * Get LPCG95_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG95_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG95_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG95_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG95_AUTHEN_LOCK_TZ() volatile
    {
        LPCG95_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG95_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG95_AUTHEN_LOCK_TZ() volatile
    {
        LPCG95_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG95_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG95_AUTHEN_LOCK_TZ() volatile
    {
        LPCG95_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG95_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG95_AUTHEN_TZ_NS() volatile
    {
        return LPCG95_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG95_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG95_AUTHEN_TZ_NS() volatile
    {
        LPCG95_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG95_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG95_AUTHEN_TZ_NS() volatile
    {
        LPCG95_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG95_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG95_AUTHEN_TZ_NS() volatile
    {
        LPCG95_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG95_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG95_AUTHEN_TZ_USER() volatile
    {
        return LPCG95_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG95_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG95_AUTHEN_TZ_USER() volatile
    {
        LPCG95_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG95_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG95_AUTHEN_TZ_USER() volatile
    {
        LPCG95_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG95_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG95_AUTHEN_TZ_USER() volatile
    {
        LPCG95_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG95_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG95_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG95_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG95_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG95_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG95_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG95_AUTHEN = curr;
    }

    /**
     * Get LPCG96_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG96_DIRECT_ON() volatile
    {
        return LPCG96_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG96_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG96_DIRECT_ON() volatile
    {
        LPCG96_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG96_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG96_DIRECT_ON() volatile
    {
        LPCG96_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG96_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG96_DIRECT_ON() volatile
    {
        LPCG96_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG96_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG96_DOMAIN_LEVEL3 get_LPCG96_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG96_DOMAIN_LEVEL3((LPCG96_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG96_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG96_DOMAIN_LEVEL3(
        CCM_LPCG96_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG96_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG96_DOMAIN = curr;
    }

    /**
     * Get LPCG96_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG96_DOMAIN_LEVEL2 get_LPCG96_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG96_DOMAIN_LEVEL2((LPCG96_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG96_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG96_DOMAIN_LEVEL2(
        CCM_LPCG96_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG96_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG96_DOMAIN = curr;
    }

    /**
     * Get LPCG96_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG96_DOMAIN_LEVEL1 get_LPCG96_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG96_DOMAIN_LEVEL1((LPCG96_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG96_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG96_DOMAIN_LEVEL1(
        CCM_LPCG96_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG96_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG96_DOMAIN = curr;
    }

    /**
     * Get LPCG96_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG96_DOMAIN_LEVEL0 get_LPCG96_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG96_DOMAIN_LEVEL0((LPCG96_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG96_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG96_DOMAIN_LEVEL0(
        CCM_LPCG96_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG96_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG96_DOMAIN = curr;
    }

    /**
     * Get LPCG96_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG96_DOMAIN_LEVEL get_LPCG96_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG96_DOMAIN_LEVEL((LPCG96_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG96_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG96_DOMAIN_LEVEL(CCM_LPCG96_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG96_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG96_DOMAIN = curr;
    }

    /**
     * Get all of LPCG96_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG96_DOMAIN(CCM_LPCG96_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG96_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG96_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG96_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG96_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG96_DOMAIN;

        LEVEL3 = CCM_LPCG96_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG96_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG96_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG96_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG96_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG96_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG96_DOMAIN(CCM_LPCG96_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG96_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG96_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG96_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG96_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG96_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG96_DOMAIN = curr;
    }

    /**
     * Get LPCG96_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG96_STATUS0_DOMAIN_ENABLE
    get_LPCG96_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG96_STATUS0_DOMAIN_ENABLE((LPCG96_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG96_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG96_STATUS0_ACTIVE_DOMAIN
    get_LPCG96_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG96_STATUS0_ACTIVE_DOMAIN((LPCG96_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG96_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG96_STATUS0_ON() volatile
    {
        return LPCG96_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG96_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG96_STATUS0(
        CCM_LPCG96_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG96_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG96_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG96_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG96_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG96_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG96_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG96_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG96_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG96_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG96_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG96_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG96_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG96_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG96_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG96_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG96_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG96_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG96_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG96_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG96_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG96_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG96_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG96_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG96_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG96_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG96_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG96_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG96_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG96_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG96_STATUS1_CPU3_MODE get_LPCG96_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG96_STATUS1_CPU3_MODE((LPCG96_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG96_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG96_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG96_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG96_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG96_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG96_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG96_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG96_STATUS1_CPU2_MODE get_LPCG96_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG96_STATUS1_CPU2_MODE((LPCG96_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG96_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG96_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG96_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG96_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG96_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG96_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG96_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG96_STATUS1_CPU1_MODE get_LPCG96_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG96_STATUS1_CPU1_MODE((LPCG96_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG96_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG96_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG96_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG96_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG96_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG96_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG96_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG96_STATUS1_CPU0_MODE get_LPCG96_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG96_STATUS1_CPU0_MODE((LPCG96_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG96_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG96_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG96_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG96_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG96_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG96_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG96_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG96_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG96_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG96_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG96_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG96_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG96_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG96_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG96_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG96_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG96_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG96_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG96_AUTHEN_LOCK_MODE() volatile
    {
        LPCG96_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG96_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG96_AUTHEN_LOCK_MODE() volatile
    {
        LPCG96_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG96_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG96_AUTHEN_LOCK_MODE() volatile
    {
        LPCG96_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG96_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG96_AUTHEN_CPULPM() volatile
    {
        return LPCG96_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG96_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG96_AUTHEN_CPULPM() volatile
    {
        LPCG96_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG96_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG96_AUTHEN_CPULPM() volatile
    {
        LPCG96_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG96_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG96_AUTHEN_CPULPM() volatile
    {
        LPCG96_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG96_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG96_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG96_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG96_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG96_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG96_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG96_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG96_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG96_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG96_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG96_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG96_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG96_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG96_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG96_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG96_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG96_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG96_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG96_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG96_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG96_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG96_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG96_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG96_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG96_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG96_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG96_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG96_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG96_AUTHEN_LOCK_LIST() volatile
    {
        LPCG96_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG96_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG96_AUTHEN_LOCK_LIST() volatile
    {
        LPCG96_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG96_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG96_AUTHEN_LOCK_LIST() volatile
    {
        LPCG96_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG96_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG96_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG96_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG96_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG96_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG96_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG96_AUTHEN = curr;
    }

    /**
     * Get LPCG96_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG96_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG96_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG96_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG96_AUTHEN_LOCK_TZ() volatile
    {
        LPCG96_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG96_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG96_AUTHEN_LOCK_TZ() volatile
    {
        LPCG96_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG96_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG96_AUTHEN_LOCK_TZ() volatile
    {
        LPCG96_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG96_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG96_AUTHEN_TZ_NS() volatile
    {
        return LPCG96_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG96_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG96_AUTHEN_TZ_NS() volatile
    {
        LPCG96_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG96_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG96_AUTHEN_TZ_NS() volatile
    {
        LPCG96_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG96_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG96_AUTHEN_TZ_NS() volatile
    {
        LPCG96_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG96_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG96_AUTHEN_TZ_USER() volatile
    {
        return LPCG96_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG96_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG96_AUTHEN_TZ_USER() volatile
    {
        LPCG96_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG96_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG96_AUTHEN_TZ_USER() volatile
    {
        LPCG96_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG96_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG96_AUTHEN_TZ_USER() volatile
    {
        LPCG96_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG96_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG96_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG96_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG96_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG96_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG96_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG96_AUTHEN = curr;
    }

    /**
     * Get LPCG97_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG97_DIRECT_ON() volatile
    {
        return LPCG97_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG97_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG97_DIRECT_ON() volatile
    {
        LPCG97_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG97_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG97_DIRECT_ON() volatile
    {
        LPCG97_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG97_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG97_DIRECT_ON() volatile
    {
        LPCG97_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG97_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG97_DOMAIN_LEVEL3 get_LPCG97_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG97_DOMAIN_LEVEL3((LPCG97_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG97_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG97_DOMAIN_LEVEL3(
        CCM_LPCG97_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG97_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG97_DOMAIN = curr;
    }

    /**
     * Get LPCG97_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG97_DOMAIN_LEVEL2 get_LPCG97_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG97_DOMAIN_LEVEL2((LPCG97_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG97_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG97_DOMAIN_LEVEL2(
        CCM_LPCG97_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG97_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG97_DOMAIN = curr;
    }

    /**
     * Get LPCG97_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG97_DOMAIN_LEVEL1 get_LPCG97_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG97_DOMAIN_LEVEL1((LPCG97_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG97_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG97_DOMAIN_LEVEL1(
        CCM_LPCG97_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG97_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG97_DOMAIN = curr;
    }

    /**
     * Get LPCG97_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG97_DOMAIN_LEVEL0 get_LPCG97_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG97_DOMAIN_LEVEL0((LPCG97_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG97_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG97_DOMAIN_LEVEL0(
        CCM_LPCG97_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG97_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG97_DOMAIN = curr;
    }

    /**
     * Get LPCG97_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG97_DOMAIN_LEVEL get_LPCG97_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG97_DOMAIN_LEVEL((LPCG97_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG97_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG97_DOMAIN_LEVEL(CCM_LPCG97_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG97_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG97_DOMAIN = curr;
    }

    /**
     * Get all of LPCG97_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG97_DOMAIN(CCM_LPCG97_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG97_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG97_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG97_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG97_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG97_DOMAIN;

        LEVEL3 = CCM_LPCG97_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG97_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG97_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG97_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG97_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG97_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG97_DOMAIN(CCM_LPCG97_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG97_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG97_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG97_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG97_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG97_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG97_DOMAIN = curr;
    }

    /**
     * Get LPCG97_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG97_STATUS0_DOMAIN_ENABLE
    get_LPCG97_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG97_STATUS0_DOMAIN_ENABLE((LPCG97_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG97_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG97_STATUS0_ACTIVE_DOMAIN
    get_LPCG97_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG97_STATUS0_ACTIVE_DOMAIN((LPCG97_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG97_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG97_STATUS0_ON() volatile
    {
        return LPCG97_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG97_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG97_STATUS0(
        CCM_LPCG97_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG97_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG97_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG97_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG97_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG97_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG97_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG97_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG97_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG97_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG97_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG97_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG97_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG97_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG97_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG97_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG97_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG97_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG97_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG97_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG97_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG97_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG97_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG97_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG97_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG97_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG97_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG97_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG97_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG97_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG97_STATUS1_CPU3_MODE get_LPCG97_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG97_STATUS1_CPU3_MODE((LPCG97_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG97_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG97_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG97_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG97_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG97_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG97_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG97_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG97_STATUS1_CPU2_MODE get_LPCG97_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG97_STATUS1_CPU2_MODE((LPCG97_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG97_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG97_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG97_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG97_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG97_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG97_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG97_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG97_STATUS1_CPU1_MODE get_LPCG97_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG97_STATUS1_CPU1_MODE((LPCG97_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG97_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG97_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG97_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG97_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG97_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG97_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG97_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG97_STATUS1_CPU0_MODE get_LPCG97_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG97_STATUS1_CPU0_MODE((LPCG97_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG97_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG97_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG97_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG97_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG97_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG97_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG97_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG97_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG97_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG97_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG97_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG97_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG97_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG97_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG97_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG97_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG97_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG97_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG97_AUTHEN_LOCK_MODE() volatile
    {
        LPCG97_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG97_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG97_AUTHEN_LOCK_MODE() volatile
    {
        LPCG97_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG97_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG97_AUTHEN_LOCK_MODE() volatile
    {
        LPCG97_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG97_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG97_AUTHEN_CPULPM() volatile
    {
        return LPCG97_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG97_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG97_AUTHEN_CPULPM() volatile
    {
        LPCG97_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG97_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG97_AUTHEN_CPULPM() volatile
    {
        LPCG97_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG97_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG97_AUTHEN_CPULPM() volatile
    {
        LPCG97_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG97_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG97_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG97_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG97_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG97_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG97_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG97_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG97_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG97_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG97_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG97_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG97_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG97_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG97_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG97_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG97_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG97_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG97_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG97_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG97_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG97_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG97_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG97_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG97_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG97_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG97_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG97_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG97_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG97_AUTHEN_LOCK_LIST() volatile
    {
        LPCG97_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG97_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG97_AUTHEN_LOCK_LIST() volatile
    {
        LPCG97_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG97_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG97_AUTHEN_LOCK_LIST() volatile
    {
        LPCG97_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG97_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG97_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG97_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG97_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG97_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG97_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG97_AUTHEN = curr;
    }

    /**
     * Get LPCG97_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG97_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG97_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG97_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG97_AUTHEN_LOCK_TZ() volatile
    {
        LPCG97_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG97_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG97_AUTHEN_LOCK_TZ() volatile
    {
        LPCG97_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG97_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG97_AUTHEN_LOCK_TZ() volatile
    {
        LPCG97_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG97_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG97_AUTHEN_TZ_NS() volatile
    {
        return LPCG97_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG97_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG97_AUTHEN_TZ_NS() volatile
    {
        LPCG97_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG97_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG97_AUTHEN_TZ_NS() volatile
    {
        LPCG97_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG97_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG97_AUTHEN_TZ_NS() volatile
    {
        LPCG97_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG97_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG97_AUTHEN_TZ_USER() volatile
    {
        return LPCG97_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG97_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG97_AUTHEN_TZ_USER() volatile
    {
        LPCG97_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG97_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG97_AUTHEN_TZ_USER() volatile
    {
        LPCG97_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG97_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG97_AUTHEN_TZ_USER() volatile
    {
        LPCG97_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG97_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG97_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG97_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG97_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG97_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG97_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG97_AUTHEN = curr;
    }

    /**
     * Get LPCG98_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG98_DIRECT_ON() volatile
    {
        return LPCG98_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG98_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG98_DIRECT_ON() volatile
    {
        LPCG98_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG98_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG98_DIRECT_ON() volatile
    {
        LPCG98_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG98_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG98_DIRECT_ON() volatile
    {
        LPCG98_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG98_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG98_DOMAIN_LEVEL3 get_LPCG98_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG98_DOMAIN_LEVEL3((LPCG98_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG98_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG98_DOMAIN_LEVEL3(
        CCM_LPCG98_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG98_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG98_DOMAIN = curr;
    }

    /**
     * Get LPCG98_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG98_DOMAIN_LEVEL2 get_LPCG98_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG98_DOMAIN_LEVEL2((LPCG98_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG98_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG98_DOMAIN_LEVEL2(
        CCM_LPCG98_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG98_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG98_DOMAIN = curr;
    }

    /**
     * Get LPCG98_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG98_DOMAIN_LEVEL1 get_LPCG98_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG98_DOMAIN_LEVEL1((LPCG98_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG98_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG98_DOMAIN_LEVEL1(
        CCM_LPCG98_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG98_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG98_DOMAIN = curr;
    }

    /**
     * Get LPCG98_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG98_DOMAIN_LEVEL0 get_LPCG98_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG98_DOMAIN_LEVEL0((LPCG98_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG98_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG98_DOMAIN_LEVEL0(
        CCM_LPCG98_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG98_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG98_DOMAIN = curr;
    }

    /**
     * Get LPCG98_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG98_DOMAIN_LEVEL get_LPCG98_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG98_DOMAIN_LEVEL((LPCG98_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG98_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG98_DOMAIN_LEVEL(CCM_LPCG98_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG98_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG98_DOMAIN = curr;
    }

    /**
     * Get all of LPCG98_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG98_DOMAIN(CCM_LPCG98_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG98_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG98_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG98_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG98_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG98_DOMAIN;

        LEVEL3 = CCM_LPCG98_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG98_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG98_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG98_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG98_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG98_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG98_DOMAIN(CCM_LPCG98_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG98_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG98_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG98_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG98_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG98_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG98_DOMAIN = curr;
    }

    /**
     * Get LPCG98_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG98_STATUS0_DOMAIN_ENABLE
    get_LPCG98_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG98_STATUS0_DOMAIN_ENABLE((LPCG98_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG98_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG98_STATUS0_ACTIVE_DOMAIN
    get_LPCG98_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG98_STATUS0_ACTIVE_DOMAIN((LPCG98_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG98_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG98_STATUS0_ON() volatile
    {
        return LPCG98_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG98_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG98_STATUS0(
        CCM_LPCG98_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG98_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG98_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG98_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG98_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG98_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG98_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG98_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG98_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG98_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG98_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG98_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG98_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG98_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG98_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG98_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG98_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG98_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG98_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG98_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG98_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG98_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG98_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG98_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG98_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG98_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG98_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG98_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG98_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG98_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG98_STATUS1_CPU3_MODE get_LPCG98_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG98_STATUS1_CPU3_MODE((LPCG98_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG98_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG98_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG98_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG98_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG98_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG98_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG98_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG98_STATUS1_CPU2_MODE get_LPCG98_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG98_STATUS1_CPU2_MODE((LPCG98_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG98_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG98_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG98_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG98_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG98_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG98_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG98_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG98_STATUS1_CPU1_MODE get_LPCG98_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG98_STATUS1_CPU1_MODE((LPCG98_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG98_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG98_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG98_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG98_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG98_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG98_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG98_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG98_STATUS1_CPU0_MODE get_LPCG98_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG98_STATUS1_CPU0_MODE((LPCG98_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG98_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG98_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG98_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG98_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG98_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG98_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG98_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG98_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG98_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG98_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG98_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG98_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG98_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG98_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG98_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG98_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG98_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG98_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG98_AUTHEN_LOCK_MODE() volatile
    {
        LPCG98_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG98_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG98_AUTHEN_LOCK_MODE() volatile
    {
        LPCG98_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG98_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG98_AUTHEN_LOCK_MODE() volatile
    {
        LPCG98_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG98_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG98_AUTHEN_CPULPM() volatile
    {
        return LPCG98_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG98_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG98_AUTHEN_CPULPM() volatile
    {
        LPCG98_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG98_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG98_AUTHEN_CPULPM() volatile
    {
        LPCG98_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG98_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG98_AUTHEN_CPULPM() volatile
    {
        LPCG98_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG98_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG98_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG98_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG98_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG98_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG98_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG98_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG98_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG98_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG98_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG98_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG98_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG98_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG98_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG98_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG98_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG98_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG98_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG98_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG98_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG98_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG98_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG98_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG98_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG98_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG98_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG98_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG98_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG98_AUTHEN_LOCK_LIST() volatile
    {
        LPCG98_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG98_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG98_AUTHEN_LOCK_LIST() volatile
    {
        LPCG98_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG98_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG98_AUTHEN_LOCK_LIST() volatile
    {
        LPCG98_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG98_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG98_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG98_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG98_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG98_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG98_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG98_AUTHEN = curr;
    }

    /**
     * Get LPCG98_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG98_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG98_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG98_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG98_AUTHEN_LOCK_TZ() volatile
    {
        LPCG98_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG98_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG98_AUTHEN_LOCK_TZ() volatile
    {
        LPCG98_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG98_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG98_AUTHEN_LOCK_TZ() volatile
    {
        LPCG98_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG98_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG98_AUTHEN_TZ_NS() volatile
    {
        return LPCG98_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG98_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG98_AUTHEN_TZ_NS() volatile
    {
        LPCG98_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG98_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG98_AUTHEN_TZ_NS() volatile
    {
        LPCG98_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG98_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG98_AUTHEN_TZ_NS() volatile
    {
        LPCG98_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG98_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG98_AUTHEN_TZ_USER() volatile
    {
        return LPCG98_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG98_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG98_AUTHEN_TZ_USER() volatile
    {
        LPCG98_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG98_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG98_AUTHEN_TZ_USER() volatile
    {
        LPCG98_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG98_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG98_AUTHEN_TZ_USER() volatile
    {
        LPCG98_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG98_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG98_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG98_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG98_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG98_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG98_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG98_AUTHEN = curr;
    }

    /**
     * Get LPCG99_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG99_DIRECT_ON() volatile
    {
        return LPCG99_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG99_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG99_DIRECT_ON() volatile
    {
        LPCG99_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG99_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG99_DIRECT_ON() volatile
    {
        LPCG99_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG99_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG99_DIRECT_ON() volatile
    {
        LPCG99_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG99_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG99_DOMAIN_LEVEL3 get_LPCG99_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG99_DOMAIN_LEVEL3((LPCG99_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG99_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG99_DOMAIN_LEVEL3(
        CCM_LPCG99_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG99_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG99_DOMAIN = curr;
    }

    /**
     * Get LPCG99_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG99_DOMAIN_LEVEL2 get_LPCG99_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG99_DOMAIN_LEVEL2((LPCG99_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG99_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG99_DOMAIN_LEVEL2(
        CCM_LPCG99_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG99_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG99_DOMAIN = curr;
    }

    /**
     * Get LPCG99_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG99_DOMAIN_LEVEL1 get_LPCG99_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG99_DOMAIN_LEVEL1((LPCG99_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG99_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG99_DOMAIN_LEVEL1(
        CCM_LPCG99_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG99_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG99_DOMAIN = curr;
    }

    /**
     * Get LPCG99_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG99_DOMAIN_LEVEL0 get_LPCG99_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG99_DOMAIN_LEVEL0((LPCG99_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG99_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG99_DOMAIN_LEVEL0(
        CCM_LPCG99_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG99_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG99_DOMAIN = curr;
    }

    /**
     * Get LPCG99_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG99_DOMAIN_LEVEL get_LPCG99_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG99_DOMAIN_LEVEL((LPCG99_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG99_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG99_DOMAIN_LEVEL(CCM_LPCG99_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG99_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG99_DOMAIN = curr;
    }

    /**
     * Get all of LPCG99_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG99_DOMAIN(CCM_LPCG99_DOMAIN_LEVEL3 &LEVEL3,
                                  CCM_LPCG99_DOMAIN_LEVEL2 &LEVEL2,
                                  CCM_LPCG99_DOMAIN_LEVEL1 &LEVEL1,
                                  CCM_LPCG99_DOMAIN_LEVEL0 &LEVEL0,
                                  CCM_LPCG99_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG99_DOMAIN;

        LEVEL3 = CCM_LPCG99_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG99_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG99_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG99_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG99_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG99_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG99_DOMAIN(CCM_LPCG99_DOMAIN_LEVEL3 LEVEL3,
                                  CCM_LPCG99_DOMAIN_LEVEL2 LEVEL2,
                                  CCM_LPCG99_DOMAIN_LEVEL1 LEVEL1,
                                  CCM_LPCG99_DOMAIN_LEVEL0 LEVEL0,
                                  CCM_LPCG99_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG99_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG99_DOMAIN = curr;
    }

    /**
     * Get LPCG99_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG99_STATUS0_DOMAIN_ENABLE
    get_LPCG99_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG99_STATUS0_DOMAIN_ENABLE((LPCG99_STATUS0 >> 12u) &
                                                0b1111u);
    }

    /**
     * Get LPCG99_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG99_STATUS0_ACTIVE_DOMAIN
    get_LPCG99_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG99_STATUS0_ACTIVE_DOMAIN((LPCG99_STATUS0 >> 8u) &
                                                0b1111u);
    }

    /**
     * Get LPCG99_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG99_STATUS0_ON() volatile
    {
        return LPCG99_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG99_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG99_STATUS0(
        CCM_LPCG99_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG99_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG99_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG99_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG99_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG99_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG99_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG99_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG99_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG99_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG99_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG99_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG99_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG99_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG99_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG99_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG99_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG99_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG99_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG99_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG99_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG99_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG99_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG99_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG99_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG99_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG99_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG99_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG99_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG99_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG99_STATUS1_CPU3_MODE get_LPCG99_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG99_STATUS1_CPU3_MODE((LPCG99_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG99_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG99_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG99_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG99_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG99_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG99_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG99_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG99_STATUS1_CPU2_MODE get_LPCG99_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG99_STATUS1_CPU2_MODE((LPCG99_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG99_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG99_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG99_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG99_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG99_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG99_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG99_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG99_STATUS1_CPU1_MODE get_LPCG99_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG99_STATUS1_CPU1_MODE((LPCG99_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG99_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG99_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG99_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG99_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG99_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG99_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG99_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG99_STATUS1_CPU0_MODE get_LPCG99_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG99_STATUS1_CPU0_MODE((LPCG99_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG99_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG99_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG99_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG99_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG99_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG99_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG99_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG99_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG99_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG99_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG99_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG99_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG99_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG99_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG99_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG99_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG99_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG99_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG99_AUTHEN_LOCK_MODE() volatile
    {
        LPCG99_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG99_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG99_AUTHEN_LOCK_MODE() volatile
    {
        LPCG99_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG99_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG99_AUTHEN_LOCK_MODE() volatile
    {
        LPCG99_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG99_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG99_AUTHEN_CPULPM() volatile
    {
        return LPCG99_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG99_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG99_AUTHEN_CPULPM() volatile
    {
        LPCG99_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG99_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG99_AUTHEN_CPULPM() volatile
    {
        LPCG99_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG99_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG99_AUTHEN_CPULPM() volatile
    {
        LPCG99_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG99_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG99_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG99_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG99_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG99_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG99_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG99_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG99_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG99_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG99_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG99_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG99_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG99_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG99_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG99_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG99_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG99_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG99_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG99_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG99_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG99_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG99_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG99_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG99_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG99_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG99_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG99_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG99_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG99_AUTHEN_LOCK_LIST() volatile
    {
        LPCG99_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG99_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG99_AUTHEN_LOCK_LIST() volatile
    {
        LPCG99_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG99_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG99_AUTHEN_LOCK_LIST() volatile
    {
        LPCG99_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG99_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG99_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG99_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG99_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG99_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG99_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG99_AUTHEN = curr;
    }

    /**
     * Get LPCG99_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG99_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG99_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG99_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG99_AUTHEN_LOCK_TZ() volatile
    {
        LPCG99_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG99_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG99_AUTHEN_LOCK_TZ() volatile
    {
        LPCG99_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG99_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG99_AUTHEN_LOCK_TZ() volatile
    {
        LPCG99_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG99_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG99_AUTHEN_TZ_NS() volatile
    {
        return LPCG99_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG99_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG99_AUTHEN_TZ_NS() volatile
    {
        LPCG99_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG99_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG99_AUTHEN_TZ_NS() volatile
    {
        LPCG99_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG99_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG99_AUTHEN_TZ_NS() volatile
    {
        LPCG99_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG99_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG99_AUTHEN_TZ_USER() volatile
    {
        return LPCG99_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG99_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG99_AUTHEN_TZ_USER() volatile
    {
        LPCG99_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG99_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG99_AUTHEN_TZ_USER() volatile
    {
        LPCG99_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG99_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG99_AUTHEN_TZ_USER() volatile
    {
        LPCG99_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG99_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG99_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                  bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                  bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                  bool &LOCK_TZ, bool &TZ_NS,
                                  bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG99_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG99_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG99_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                  bool SETPOINT_MODE, bool DOMAIN_MODE,
                                  bool LOCK_LIST, uint8_t WHITE_LIST,
                                  bool LOCK_TZ, bool TZ_NS,
                                  bool TZ_USER) volatile
    {
        uint32_t curr = LPCG99_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG99_AUTHEN = curr;
    }

    /**
     * Get LPCG100_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG100_DIRECT_ON() volatile
    {
        return LPCG100_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG100_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG100_DIRECT_ON() volatile
    {
        LPCG100_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG100_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG100_DIRECT_ON() volatile
    {
        LPCG100_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG100_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG100_DIRECT_ON() volatile
    {
        LPCG100_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG100_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG100_DOMAIN_LEVEL3 get_LPCG100_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG100_DOMAIN_LEVEL3((LPCG100_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG100_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG100_DOMAIN_LEVEL3(
        CCM_LPCG100_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG100_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG100_DOMAIN = curr;
    }

    /**
     * Get LPCG100_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG100_DOMAIN_LEVEL2 get_LPCG100_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG100_DOMAIN_LEVEL2((LPCG100_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG100_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG100_DOMAIN_LEVEL2(
        CCM_LPCG100_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG100_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG100_DOMAIN = curr;
    }

    /**
     * Get LPCG100_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG100_DOMAIN_LEVEL1 get_LPCG100_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG100_DOMAIN_LEVEL1((LPCG100_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG100_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG100_DOMAIN_LEVEL1(
        CCM_LPCG100_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG100_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG100_DOMAIN = curr;
    }

    /**
     * Get LPCG100_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG100_DOMAIN_LEVEL0 get_LPCG100_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG100_DOMAIN_LEVEL0((LPCG100_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG100_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG100_DOMAIN_LEVEL0(
        CCM_LPCG100_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG100_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG100_DOMAIN = curr;
    }

    /**
     * Get LPCG100_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG100_DOMAIN_LEVEL get_LPCG100_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG100_DOMAIN_LEVEL((LPCG100_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG100_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG100_DOMAIN_LEVEL(
        CCM_LPCG100_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG100_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG100_DOMAIN = curr;
    }

    /**
     * Get all of LPCG100_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG100_DOMAIN(CCM_LPCG100_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG100_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG100_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG100_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG100_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG100_DOMAIN;

        LEVEL3 = CCM_LPCG100_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG100_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG100_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG100_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG100_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG100_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG100_DOMAIN(CCM_LPCG100_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG100_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG100_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG100_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG100_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG100_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG100_DOMAIN = curr;
    }

    /**
     * Get LPCG100_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG100_STATUS0_DOMAIN_ENABLE
    get_LPCG100_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG100_STATUS0_DOMAIN_ENABLE((LPCG100_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG100_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG100_STATUS0_ACTIVE_DOMAIN
    get_LPCG100_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG100_STATUS0_ACTIVE_DOMAIN((LPCG100_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG100_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG100_STATUS0_ON() volatile
    {
        return LPCG100_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG100_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG100_STATUS0(
        CCM_LPCG100_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG100_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG100_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG100_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG100_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG100_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG100_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG100_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG100_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG100_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG100_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG100_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG100_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG100_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG100_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG100_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG100_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG100_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG100_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG100_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG100_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG100_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG100_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG100_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG100_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG100_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG100_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG100_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG100_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG100_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG100_STATUS1_CPU3_MODE
    get_LPCG100_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG100_STATUS1_CPU3_MODE((LPCG100_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG100_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG100_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG100_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG100_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG100_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG100_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG100_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG100_STATUS1_CPU2_MODE
    get_LPCG100_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG100_STATUS1_CPU2_MODE((LPCG100_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG100_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG100_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG100_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG100_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG100_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG100_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG100_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG100_STATUS1_CPU1_MODE
    get_LPCG100_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG100_STATUS1_CPU1_MODE((LPCG100_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG100_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG100_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG100_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG100_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG100_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG100_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG100_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG100_STATUS1_CPU0_MODE
    get_LPCG100_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG100_STATUS1_CPU0_MODE((LPCG100_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG100_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG100_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG100_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG100_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG100_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG100_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG100_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG100_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG100_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG100_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG100_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG100_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG100_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG100_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG100_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG100_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG100_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG100_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG100_AUTHEN_LOCK_MODE() volatile
    {
        LPCG100_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG100_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG100_AUTHEN_LOCK_MODE() volatile
    {
        LPCG100_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG100_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG100_AUTHEN_LOCK_MODE() volatile
    {
        LPCG100_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG100_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG100_AUTHEN_CPULPM() volatile
    {
        return LPCG100_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG100_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG100_AUTHEN_CPULPM() volatile
    {
        LPCG100_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG100_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG100_AUTHEN_CPULPM() volatile
    {
        LPCG100_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG100_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG100_AUTHEN_CPULPM() volatile
    {
        LPCG100_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG100_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG100_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG100_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG100_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG100_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG100_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG100_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG100_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG100_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG100_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG100_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG100_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG100_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG100_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG100_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG100_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG100_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG100_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG100_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG100_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG100_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG100_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG100_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG100_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG100_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG100_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG100_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG100_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG100_AUTHEN_LOCK_LIST() volatile
    {
        LPCG100_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG100_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG100_AUTHEN_LOCK_LIST() volatile
    {
        LPCG100_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG100_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG100_AUTHEN_LOCK_LIST() volatile
    {
        LPCG100_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG100_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG100_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG100_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG100_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG100_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG100_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG100_AUTHEN = curr;
    }

    /**
     * Get LPCG100_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG100_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG100_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG100_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG100_AUTHEN_LOCK_TZ() volatile
    {
        LPCG100_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG100_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG100_AUTHEN_LOCK_TZ() volatile
    {
        LPCG100_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG100_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG100_AUTHEN_LOCK_TZ() volatile
    {
        LPCG100_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG100_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG100_AUTHEN_TZ_NS() volatile
    {
        return LPCG100_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG100_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG100_AUTHEN_TZ_NS() volatile
    {
        LPCG100_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG100_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG100_AUTHEN_TZ_NS() volatile
    {
        LPCG100_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG100_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG100_AUTHEN_TZ_NS() volatile
    {
        LPCG100_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG100_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG100_AUTHEN_TZ_USER() volatile
    {
        return LPCG100_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG100_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG100_AUTHEN_TZ_USER() volatile
    {
        LPCG100_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG100_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG100_AUTHEN_TZ_USER() volatile
    {
        LPCG100_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG100_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG100_AUTHEN_TZ_USER() volatile
    {
        LPCG100_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG100_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG100_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG100_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG100_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG100_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG100_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG100_AUTHEN = curr;
    }

    /**
     * Get LPCG101_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG101_DIRECT_ON() volatile
    {
        return LPCG101_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG101_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG101_DIRECT_ON() volatile
    {
        LPCG101_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG101_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG101_DIRECT_ON() volatile
    {
        LPCG101_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG101_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG101_DIRECT_ON() volatile
    {
        LPCG101_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG101_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG101_DOMAIN_LEVEL3 get_LPCG101_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG101_DOMAIN_LEVEL3((LPCG101_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG101_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG101_DOMAIN_LEVEL3(
        CCM_LPCG101_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG101_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG101_DOMAIN = curr;
    }

    /**
     * Get LPCG101_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG101_DOMAIN_LEVEL2 get_LPCG101_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG101_DOMAIN_LEVEL2((LPCG101_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG101_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG101_DOMAIN_LEVEL2(
        CCM_LPCG101_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG101_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG101_DOMAIN = curr;
    }

    /**
     * Get LPCG101_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG101_DOMAIN_LEVEL1 get_LPCG101_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG101_DOMAIN_LEVEL1((LPCG101_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG101_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG101_DOMAIN_LEVEL1(
        CCM_LPCG101_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG101_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG101_DOMAIN = curr;
    }

    /**
     * Get LPCG101_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG101_DOMAIN_LEVEL0 get_LPCG101_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG101_DOMAIN_LEVEL0((LPCG101_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG101_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG101_DOMAIN_LEVEL0(
        CCM_LPCG101_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG101_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG101_DOMAIN = curr;
    }

    /**
     * Get LPCG101_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG101_DOMAIN_LEVEL get_LPCG101_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG101_DOMAIN_LEVEL((LPCG101_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG101_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG101_DOMAIN_LEVEL(
        CCM_LPCG101_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG101_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG101_DOMAIN = curr;
    }

    /**
     * Get all of LPCG101_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG101_DOMAIN(CCM_LPCG101_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG101_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG101_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG101_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG101_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG101_DOMAIN;

        LEVEL3 = CCM_LPCG101_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG101_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG101_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG101_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG101_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG101_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG101_DOMAIN(CCM_LPCG101_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG101_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG101_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG101_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG101_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG101_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG101_DOMAIN = curr;
    }

    /**
     * Get LPCG101_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG101_STATUS0_DOMAIN_ENABLE
    get_LPCG101_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG101_STATUS0_DOMAIN_ENABLE((LPCG101_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG101_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG101_STATUS0_ACTIVE_DOMAIN
    get_LPCG101_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG101_STATUS0_ACTIVE_DOMAIN((LPCG101_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG101_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG101_STATUS0_ON() volatile
    {
        return LPCG101_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG101_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG101_STATUS0(
        CCM_LPCG101_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG101_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG101_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG101_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG101_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG101_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG101_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG101_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG101_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG101_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG101_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG101_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG101_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG101_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG101_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG101_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG101_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG101_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG101_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG101_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG101_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG101_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG101_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG101_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG101_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG101_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG101_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG101_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG101_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG101_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG101_STATUS1_CPU3_MODE
    get_LPCG101_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG101_STATUS1_CPU3_MODE((LPCG101_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG101_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG101_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG101_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG101_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG101_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG101_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG101_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG101_STATUS1_CPU2_MODE
    get_LPCG101_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG101_STATUS1_CPU2_MODE((LPCG101_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG101_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG101_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG101_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG101_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG101_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG101_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG101_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG101_STATUS1_CPU1_MODE
    get_LPCG101_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG101_STATUS1_CPU1_MODE((LPCG101_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG101_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG101_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG101_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG101_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG101_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG101_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG101_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG101_STATUS1_CPU0_MODE
    get_LPCG101_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG101_STATUS1_CPU0_MODE((LPCG101_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG101_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG101_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG101_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG101_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG101_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG101_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG101_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG101_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG101_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG101_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG101_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG101_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG101_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG101_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG101_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG101_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG101_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG101_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG101_AUTHEN_LOCK_MODE() volatile
    {
        LPCG101_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG101_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG101_AUTHEN_LOCK_MODE() volatile
    {
        LPCG101_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG101_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG101_AUTHEN_LOCK_MODE() volatile
    {
        LPCG101_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG101_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG101_AUTHEN_CPULPM() volatile
    {
        return LPCG101_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG101_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG101_AUTHEN_CPULPM() volatile
    {
        LPCG101_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG101_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG101_AUTHEN_CPULPM() volatile
    {
        LPCG101_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG101_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG101_AUTHEN_CPULPM() volatile
    {
        LPCG101_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG101_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG101_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG101_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG101_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG101_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG101_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG101_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG101_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG101_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG101_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG101_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG101_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG101_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG101_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG101_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG101_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG101_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG101_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG101_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG101_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG101_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG101_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG101_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG101_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG101_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG101_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG101_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG101_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG101_AUTHEN_LOCK_LIST() volatile
    {
        LPCG101_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG101_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG101_AUTHEN_LOCK_LIST() volatile
    {
        LPCG101_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG101_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG101_AUTHEN_LOCK_LIST() volatile
    {
        LPCG101_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG101_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG101_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG101_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG101_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG101_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG101_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG101_AUTHEN = curr;
    }

    /**
     * Get LPCG101_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG101_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG101_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG101_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG101_AUTHEN_LOCK_TZ() volatile
    {
        LPCG101_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG101_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG101_AUTHEN_LOCK_TZ() volatile
    {
        LPCG101_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG101_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG101_AUTHEN_LOCK_TZ() volatile
    {
        LPCG101_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG101_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG101_AUTHEN_TZ_NS() volatile
    {
        return LPCG101_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG101_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG101_AUTHEN_TZ_NS() volatile
    {
        LPCG101_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG101_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG101_AUTHEN_TZ_NS() volatile
    {
        LPCG101_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG101_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG101_AUTHEN_TZ_NS() volatile
    {
        LPCG101_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG101_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG101_AUTHEN_TZ_USER() volatile
    {
        return LPCG101_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG101_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG101_AUTHEN_TZ_USER() volatile
    {
        LPCG101_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG101_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG101_AUTHEN_TZ_USER() volatile
    {
        LPCG101_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG101_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG101_AUTHEN_TZ_USER() volatile
    {
        LPCG101_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG101_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG101_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG101_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG101_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG101_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG101_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG101_AUTHEN = curr;
    }

    /**
     * Get LPCG102_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG102_DIRECT_ON() volatile
    {
        return LPCG102_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG102_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG102_DIRECT_ON() volatile
    {
        LPCG102_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG102_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG102_DIRECT_ON() volatile
    {
        LPCG102_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG102_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG102_DIRECT_ON() volatile
    {
        LPCG102_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG102_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG102_DOMAIN_LEVEL3 get_LPCG102_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG102_DOMAIN_LEVEL3((LPCG102_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG102_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG102_DOMAIN_LEVEL3(
        CCM_LPCG102_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG102_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG102_DOMAIN = curr;
    }

    /**
     * Get LPCG102_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG102_DOMAIN_LEVEL2 get_LPCG102_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG102_DOMAIN_LEVEL2((LPCG102_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG102_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG102_DOMAIN_LEVEL2(
        CCM_LPCG102_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG102_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG102_DOMAIN = curr;
    }

    /**
     * Get LPCG102_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG102_DOMAIN_LEVEL1 get_LPCG102_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG102_DOMAIN_LEVEL1((LPCG102_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG102_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG102_DOMAIN_LEVEL1(
        CCM_LPCG102_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG102_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG102_DOMAIN = curr;
    }

    /**
     * Get LPCG102_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG102_DOMAIN_LEVEL0 get_LPCG102_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG102_DOMAIN_LEVEL0((LPCG102_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG102_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG102_DOMAIN_LEVEL0(
        CCM_LPCG102_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG102_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG102_DOMAIN = curr;
    }

    /**
     * Get LPCG102_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG102_DOMAIN_LEVEL get_LPCG102_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG102_DOMAIN_LEVEL((LPCG102_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG102_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG102_DOMAIN_LEVEL(
        CCM_LPCG102_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG102_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG102_DOMAIN = curr;
    }

    /**
     * Get all of LPCG102_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG102_DOMAIN(CCM_LPCG102_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG102_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG102_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG102_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG102_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG102_DOMAIN;

        LEVEL3 = CCM_LPCG102_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG102_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG102_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG102_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG102_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG102_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG102_DOMAIN(CCM_LPCG102_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG102_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG102_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG102_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG102_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG102_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG102_DOMAIN = curr;
    }

    /**
     * Get LPCG102_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG102_STATUS0_DOMAIN_ENABLE
    get_LPCG102_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG102_STATUS0_DOMAIN_ENABLE((LPCG102_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG102_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG102_STATUS0_ACTIVE_DOMAIN
    get_LPCG102_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG102_STATUS0_ACTIVE_DOMAIN((LPCG102_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG102_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG102_STATUS0_ON() volatile
    {
        return LPCG102_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG102_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG102_STATUS0(
        CCM_LPCG102_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG102_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG102_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG102_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG102_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG102_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG102_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG102_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG102_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG102_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG102_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG102_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG102_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG102_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG102_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG102_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG102_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG102_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG102_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG102_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG102_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG102_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG102_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG102_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG102_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG102_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG102_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG102_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG102_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG102_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG102_STATUS1_CPU3_MODE
    get_LPCG102_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG102_STATUS1_CPU3_MODE((LPCG102_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG102_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG102_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG102_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG102_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG102_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG102_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG102_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG102_STATUS1_CPU2_MODE
    get_LPCG102_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG102_STATUS1_CPU2_MODE((LPCG102_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG102_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG102_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG102_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG102_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG102_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG102_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG102_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG102_STATUS1_CPU1_MODE
    get_LPCG102_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG102_STATUS1_CPU1_MODE((LPCG102_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG102_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG102_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG102_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG102_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG102_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG102_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG102_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG102_STATUS1_CPU0_MODE
    get_LPCG102_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG102_STATUS1_CPU0_MODE((LPCG102_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG102_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG102_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG102_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG102_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG102_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG102_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG102_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG102_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG102_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG102_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG102_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG102_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG102_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG102_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG102_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG102_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG102_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG102_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG102_AUTHEN_LOCK_MODE() volatile
    {
        LPCG102_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG102_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG102_AUTHEN_LOCK_MODE() volatile
    {
        LPCG102_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG102_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG102_AUTHEN_LOCK_MODE() volatile
    {
        LPCG102_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG102_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG102_AUTHEN_CPULPM() volatile
    {
        return LPCG102_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG102_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG102_AUTHEN_CPULPM() volatile
    {
        LPCG102_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG102_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG102_AUTHEN_CPULPM() volatile
    {
        LPCG102_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG102_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG102_AUTHEN_CPULPM() volatile
    {
        LPCG102_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG102_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG102_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG102_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG102_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG102_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG102_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG102_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG102_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG102_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG102_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG102_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG102_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG102_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG102_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG102_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG102_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG102_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG102_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG102_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG102_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG102_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG102_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG102_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG102_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG102_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG102_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG102_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG102_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG102_AUTHEN_LOCK_LIST() volatile
    {
        LPCG102_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG102_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG102_AUTHEN_LOCK_LIST() volatile
    {
        LPCG102_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG102_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG102_AUTHEN_LOCK_LIST() volatile
    {
        LPCG102_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG102_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG102_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG102_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG102_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG102_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG102_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG102_AUTHEN = curr;
    }

    /**
     * Get LPCG102_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG102_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG102_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG102_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG102_AUTHEN_LOCK_TZ() volatile
    {
        LPCG102_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG102_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG102_AUTHEN_LOCK_TZ() volatile
    {
        LPCG102_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG102_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG102_AUTHEN_LOCK_TZ() volatile
    {
        LPCG102_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG102_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG102_AUTHEN_TZ_NS() volatile
    {
        return LPCG102_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG102_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG102_AUTHEN_TZ_NS() volatile
    {
        LPCG102_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG102_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG102_AUTHEN_TZ_NS() volatile
    {
        LPCG102_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG102_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG102_AUTHEN_TZ_NS() volatile
    {
        LPCG102_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG102_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG102_AUTHEN_TZ_USER() volatile
    {
        return LPCG102_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG102_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG102_AUTHEN_TZ_USER() volatile
    {
        LPCG102_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG102_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG102_AUTHEN_TZ_USER() volatile
    {
        LPCG102_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG102_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG102_AUTHEN_TZ_USER() volatile
    {
        LPCG102_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG102_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG102_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG102_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG102_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG102_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG102_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG102_AUTHEN = curr;
    }

    /**
     * Get LPCG103_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG103_DIRECT_ON() volatile
    {
        return LPCG103_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG103_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG103_DIRECT_ON() volatile
    {
        LPCG103_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG103_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG103_DIRECT_ON() volatile
    {
        LPCG103_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG103_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG103_DIRECT_ON() volatile
    {
        LPCG103_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG103_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG103_DOMAIN_LEVEL3 get_LPCG103_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG103_DOMAIN_LEVEL3((LPCG103_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG103_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG103_DOMAIN_LEVEL3(
        CCM_LPCG103_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG103_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG103_DOMAIN = curr;
    }

    /**
     * Get LPCG103_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG103_DOMAIN_LEVEL2 get_LPCG103_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG103_DOMAIN_LEVEL2((LPCG103_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG103_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG103_DOMAIN_LEVEL2(
        CCM_LPCG103_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG103_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG103_DOMAIN = curr;
    }

    /**
     * Get LPCG103_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG103_DOMAIN_LEVEL1 get_LPCG103_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG103_DOMAIN_LEVEL1((LPCG103_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG103_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG103_DOMAIN_LEVEL1(
        CCM_LPCG103_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG103_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG103_DOMAIN = curr;
    }

    /**
     * Get LPCG103_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG103_DOMAIN_LEVEL0 get_LPCG103_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG103_DOMAIN_LEVEL0((LPCG103_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG103_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG103_DOMAIN_LEVEL0(
        CCM_LPCG103_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG103_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG103_DOMAIN = curr;
    }

    /**
     * Get LPCG103_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG103_DOMAIN_LEVEL get_LPCG103_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG103_DOMAIN_LEVEL((LPCG103_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG103_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG103_DOMAIN_LEVEL(
        CCM_LPCG103_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG103_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG103_DOMAIN = curr;
    }

    /**
     * Get all of LPCG103_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG103_DOMAIN(CCM_LPCG103_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG103_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG103_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG103_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG103_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG103_DOMAIN;

        LEVEL3 = CCM_LPCG103_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG103_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG103_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG103_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG103_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG103_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG103_DOMAIN(CCM_LPCG103_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG103_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG103_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG103_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG103_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG103_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG103_DOMAIN = curr;
    }

    /**
     * Get LPCG103_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG103_STATUS0_DOMAIN_ENABLE
    get_LPCG103_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG103_STATUS0_DOMAIN_ENABLE((LPCG103_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG103_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG103_STATUS0_ACTIVE_DOMAIN
    get_LPCG103_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG103_STATUS0_ACTIVE_DOMAIN((LPCG103_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG103_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG103_STATUS0_ON() volatile
    {
        return LPCG103_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG103_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG103_STATUS0(
        CCM_LPCG103_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG103_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG103_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG103_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG103_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG103_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG103_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG103_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG103_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG103_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG103_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG103_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG103_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG103_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG103_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG103_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG103_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG103_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG103_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG103_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG103_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG103_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG103_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG103_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG103_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG103_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG103_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG103_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG103_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG103_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG103_STATUS1_CPU3_MODE
    get_LPCG103_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG103_STATUS1_CPU3_MODE((LPCG103_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG103_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG103_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG103_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG103_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG103_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG103_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG103_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG103_STATUS1_CPU2_MODE
    get_LPCG103_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG103_STATUS1_CPU2_MODE((LPCG103_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG103_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG103_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG103_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG103_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG103_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG103_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG103_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG103_STATUS1_CPU1_MODE
    get_LPCG103_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG103_STATUS1_CPU1_MODE((LPCG103_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG103_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG103_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG103_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG103_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG103_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG103_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG103_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG103_STATUS1_CPU0_MODE
    get_LPCG103_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG103_STATUS1_CPU0_MODE((LPCG103_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG103_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG103_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG103_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG103_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG103_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG103_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG103_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG103_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG103_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG103_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG103_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG103_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG103_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG103_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG103_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG103_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG103_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG103_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG103_AUTHEN_LOCK_MODE() volatile
    {
        LPCG103_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG103_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG103_AUTHEN_LOCK_MODE() volatile
    {
        LPCG103_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG103_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG103_AUTHEN_LOCK_MODE() volatile
    {
        LPCG103_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG103_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG103_AUTHEN_CPULPM() volatile
    {
        return LPCG103_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG103_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG103_AUTHEN_CPULPM() volatile
    {
        LPCG103_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG103_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG103_AUTHEN_CPULPM() volatile
    {
        LPCG103_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG103_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG103_AUTHEN_CPULPM() volatile
    {
        LPCG103_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG103_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG103_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG103_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG103_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG103_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG103_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG103_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG103_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG103_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG103_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG103_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG103_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG103_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG103_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG103_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG103_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG103_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG103_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG103_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG103_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG103_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG103_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG103_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG103_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG103_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG103_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG103_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG103_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG103_AUTHEN_LOCK_LIST() volatile
    {
        LPCG103_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG103_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG103_AUTHEN_LOCK_LIST() volatile
    {
        LPCG103_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG103_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG103_AUTHEN_LOCK_LIST() volatile
    {
        LPCG103_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG103_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG103_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG103_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG103_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG103_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG103_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG103_AUTHEN = curr;
    }

    /**
     * Get LPCG103_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG103_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG103_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG103_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG103_AUTHEN_LOCK_TZ() volatile
    {
        LPCG103_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG103_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG103_AUTHEN_LOCK_TZ() volatile
    {
        LPCG103_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG103_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG103_AUTHEN_LOCK_TZ() volatile
    {
        LPCG103_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG103_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG103_AUTHEN_TZ_NS() volatile
    {
        return LPCG103_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG103_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG103_AUTHEN_TZ_NS() volatile
    {
        LPCG103_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG103_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG103_AUTHEN_TZ_NS() volatile
    {
        LPCG103_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG103_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG103_AUTHEN_TZ_NS() volatile
    {
        LPCG103_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG103_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG103_AUTHEN_TZ_USER() volatile
    {
        return LPCG103_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG103_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG103_AUTHEN_TZ_USER() volatile
    {
        LPCG103_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG103_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG103_AUTHEN_TZ_USER() volatile
    {
        LPCG103_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG103_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG103_AUTHEN_TZ_USER() volatile
    {
        LPCG103_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG103_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG103_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG103_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG103_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG103_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG103_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG103_AUTHEN = curr;
    }

    /**
     * Get LPCG104_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG104_DIRECT_ON() volatile
    {
        return LPCG104_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG104_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG104_DIRECT_ON() volatile
    {
        LPCG104_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG104_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG104_DIRECT_ON() volatile
    {
        LPCG104_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG104_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG104_DIRECT_ON() volatile
    {
        LPCG104_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG104_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG104_DOMAIN_LEVEL3 get_LPCG104_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG104_DOMAIN_LEVEL3((LPCG104_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG104_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG104_DOMAIN_LEVEL3(
        CCM_LPCG104_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG104_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG104_DOMAIN = curr;
    }

    /**
     * Get LPCG104_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG104_DOMAIN_LEVEL2 get_LPCG104_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG104_DOMAIN_LEVEL2((LPCG104_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG104_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG104_DOMAIN_LEVEL2(
        CCM_LPCG104_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG104_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG104_DOMAIN = curr;
    }

    /**
     * Get LPCG104_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG104_DOMAIN_LEVEL1 get_LPCG104_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG104_DOMAIN_LEVEL1((LPCG104_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG104_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG104_DOMAIN_LEVEL1(
        CCM_LPCG104_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG104_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG104_DOMAIN = curr;
    }

    /**
     * Get LPCG104_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG104_DOMAIN_LEVEL0 get_LPCG104_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG104_DOMAIN_LEVEL0((LPCG104_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG104_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG104_DOMAIN_LEVEL0(
        CCM_LPCG104_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG104_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG104_DOMAIN = curr;
    }

    /**
     * Get LPCG104_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG104_DOMAIN_LEVEL get_LPCG104_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG104_DOMAIN_LEVEL((LPCG104_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG104_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG104_DOMAIN_LEVEL(
        CCM_LPCG104_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG104_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG104_DOMAIN = curr;
    }

    /**
     * Get all of LPCG104_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG104_DOMAIN(CCM_LPCG104_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG104_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG104_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG104_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG104_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG104_DOMAIN;

        LEVEL3 = CCM_LPCG104_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG104_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG104_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG104_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG104_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG104_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG104_DOMAIN(CCM_LPCG104_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG104_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG104_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG104_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG104_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG104_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG104_DOMAIN = curr;
    }

    /**
     * Get LPCG104_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG104_STATUS0_DOMAIN_ENABLE
    get_LPCG104_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG104_STATUS0_DOMAIN_ENABLE((LPCG104_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG104_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG104_STATUS0_ACTIVE_DOMAIN
    get_LPCG104_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG104_STATUS0_ACTIVE_DOMAIN((LPCG104_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG104_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG104_STATUS0_ON() volatile
    {
        return LPCG104_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG104_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG104_STATUS0(
        CCM_LPCG104_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG104_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG104_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG104_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG104_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG104_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG104_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG104_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG104_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG104_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG104_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG104_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG104_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG104_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG104_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG104_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG104_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG104_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG104_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG104_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG104_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG104_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG104_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG104_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG104_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG104_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG104_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG104_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG104_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG104_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG104_STATUS1_CPU3_MODE
    get_LPCG104_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG104_STATUS1_CPU3_MODE((LPCG104_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG104_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG104_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG104_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG104_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG104_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG104_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG104_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG104_STATUS1_CPU2_MODE
    get_LPCG104_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG104_STATUS1_CPU2_MODE((LPCG104_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG104_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG104_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG104_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG104_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG104_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG104_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG104_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG104_STATUS1_CPU1_MODE
    get_LPCG104_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG104_STATUS1_CPU1_MODE((LPCG104_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG104_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG104_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG104_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG104_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG104_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG104_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG104_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG104_STATUS1_CPU0_MODE
    get_LPCG104_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG104_STATUS1_CPU0_MODE((LPCG104_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG104_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG104_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG104_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG104_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG104_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG104_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG104_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG104_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG104_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG104_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG104_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG104_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG104_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG104_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG104_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG104_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG104_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG104_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG104_AUTHEN_LOCK_MODE() volatile
    {
        LPCG104_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG104_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG104_AUTHEN_LOCK_MODE() volatile
    {
        LPCG104_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG104_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG104_AUTHEN_LOCK_MODE() volatile
    {
        LPCG104_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG104_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG104_AUTHEN_CPULPM() volatile
    {
        return LPCG104_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG104_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG104_AUTHEN_CPULPM() volatile
    {
        LPCG104_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG104_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG104_AUTHEN_CPULPM() volatile
    {
        LPCG104_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG104_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG104_AUTHEN_CPULPM() volatile
    {
        LPCG104_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG104_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG104_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG104_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG104_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG104_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG104_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG104_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG104_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG104_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG104_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG104_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG104_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG104_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG104_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG104_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG104_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG104_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG104_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG104_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG104_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG104_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG104_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG104_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG104_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG104_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG104_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG104_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG104_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG104_AUTHEN_LOCK_LIST() volatile
    {
        LPCG104_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG104_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG104_AUTHEN_LOCK_LIST() volatile
    {
        LPCG104_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG104_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG104_AUTHEN_LOCK_LIST() volatile
    {
        LPCG104_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG104_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG104_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG104_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG104_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG104_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG104_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG104_AUTHEN = curr;
    }

    /**
     * Get LPCG104_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG104_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG104_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG104_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG104_AUTHEN_LOCK_TZ() volatile
    {
        LPCG104_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG104_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG104_AUTHEN_LOCK_TZ() volatile
    {
        LPCG104_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG104_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG104_AUTHEN_LOCK_TZ() volatile
    {
        LPCG104_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG104_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG104_AUTHEN_TZ_NS() volatile
    {
        return LPCG104_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG104_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG104_AUTHEN_TZ_NS() volatile
    {
        LPCG104_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG104_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG104_AUTHEN_TZ_NS() volatile
    {
        LPCG104_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG104_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG104_AUTHEN_TZ_NS() volatile
    {
        LPCG104_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG104_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG104_AUTHEN_TZ_USER() volatile
    {
        return LPCG104_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG104_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG104_AUTHEN_TZ_USER() volatile
    {
        LPCG104_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG104_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG104_AUTHEN_TZ_USER() volatile
    {
        LPCG104_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG104_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG104_AUTHEN_TZ_USER() volatile
    {
        LPCG104_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG104_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG104_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG104_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG104_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG104_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG104_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG104_AUTHEN = curr;
    }

    /**
     * Get LPCG105_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG105_DIRECT_ON() volatile
    {
        return LPCG105_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG105_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG105_DIRECT_ON() volatile
    {
        LPCG105_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG105_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG105_DIRECT_ON() volatile
    {
        LPCG105_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG105_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG105_DIRECT_ON() volatile
    {
        LPCG105_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG105_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG105_DOMAIN_LEVEL3 get_LPCG105_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG105_DOMAIN_LEVEL3((LPCG105_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG105_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG105_DOMAIN_LEVEL3(
        CCM_LPCG105_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG105_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG105_DOMAIN = curr;
    }

    /**
     * Get LPCG105_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG105_DOMAIN_LEVEL2 get_LPCG105_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG105_DOMAIN_LEVEL2((LPCG105_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG105_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG105_DOMAIN_LEVEL2(
        CCM_LPCG105_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG105_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG105_DOMAIN = curr;
    }

    /**
     * Get LPCG105_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG105_DOMAIN_LEVEL1 get_LPCG105_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG105_DOMAIN_LEVEL1((LPCG105_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG105_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG105_DOMAIN_LEVEL1(
        CCM_LPCG105_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG105_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG105_DOMAIN = curr;
    }

    /**
     * Get LPCG105_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG105_DOMAIN_LEVEL0 get_LPCG105_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG105_DOMAIN_LEVEL0((LPCG105_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG105_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG105_DOMAIN_LEVEL0(
        CCM_LPCG105_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG105_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG105_DOMAIN = curr;
    }

    /**
     * Get LPCG105_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG105_DOMAIN_LEVEL get_LPCG105_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG105_DOMAIN_LEVEL((LPCG105_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG105_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG105_DOMAIN_LEVEL(
        CCM_LPCG105_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG105_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG105_DOMAIN = curr;
    }

    /**
     * Get all of LPCG105_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG105_DOMAIN(CCM_LPCG105_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG105_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG105_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG105_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG105_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG105_DOMAIN;

        LEVEL3 = CCM_LPCG105_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG105_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG105_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG105_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG105_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG105_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG105_DOMAIN(CCM_LPCG105_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG105_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG105_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG105_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG105_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG105_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG105_DOMAIN = curr;
    }

    /**
     * Get LPCG105_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG105_STATUS0_DOMAIN_ENABLE
    get_LPCG105_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG105_STATUS0_DOMAIN_ENABLE((LPCG105_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG105_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG105_STATUS0_ACTIVE_DOMAIN
    get_LPCG105_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG105_STATUS0_ACTIVE_DOMAIN((LPCG105_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG105_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG105_STATUS0_ON() volatile
    {
        return LPCG105_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG105_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG105_STATUS0(
        CCM_LPCG105_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG105_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG105_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG105_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG105_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG105_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG105_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG105_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG105_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG105_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG105_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG105_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG105_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG105_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG105_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG105_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG105_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG105_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG105_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG105_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG105_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG105_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG105_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG105_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG105_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG105_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG105_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG105_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG105_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG105_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG105_STATUS1_CPU3_MODE
    get_LPCG105_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG105_STATUS1_CPU3_MODE((LPCG105_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG105_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG105_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG105_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG105_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG105_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG105_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG105_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG105_STATUS1_CPU2_MODE
    get_LPCG105_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG105_STATUS1_CPU2_MODE((LPCG105_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG105_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG105_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG105_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG105_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG105_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG105_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG105_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG105_STATUS1_CPU1_MODE
    get_LPCG105_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG105_STATUS1_CPU1_MODE((LPCG105_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG105_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG105_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG105_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG105_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG105_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG105_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG105_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG105_STATUS1_CPU0_MODE
    get_LPCG105_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG105_STATUS1_CPU0_MODE((LPCG105_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG105_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG105_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG105_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG105_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG105_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG105_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG105_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG105_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG105_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG105_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG105_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG105_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG105_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG105_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG105_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG105_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG105_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG105_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG105_AUTHEN_LOCK_MODE() volatile
    {
        LPCG105_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG105_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG105_AUTHEN_LOCK_MODE() volatile
    {
        LPCG105_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG105_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG105_AUTHEN_LOCK_MODE() volatile
    {
        LPCG105_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG105_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG105_AUTHEN_CPULPM() volatile
    {
        return LPCG105_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG105_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG105_AUTHEN_CPULPM() volatile
    {
        LPCG105_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG105_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG105_AUTHEN_CPULPM() volatile
    {
        LPCG105_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG105_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG105_AUTHEN_CPULPM() volatile
    {
        LPCG105_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG105_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG105_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG105_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG105_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG105_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG105_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG105_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG105_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG105_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG105_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG105_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG105_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG105_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG105_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG105_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG105_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG105_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG105_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG105_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG105_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG105_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG105_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG105_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG105_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG105_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG105_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG105_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG105_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG105_AUTHEN_LOCK_LIST() volatile
    {
        LPCG105_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG105_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG105_AUTHEN_LOCK_LIST() volatile
    {
        LPCG105_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG105_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG105_AUTHEN_LOCK_LIST() volatile
    {
        LPCG105_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG105_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG105_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG105_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG105_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG105_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG105_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG105_AUTHEN = curr;
    }

    /**
     * Get LPCG105_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG105_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG105_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG105_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG105_AUTHEN_LOCK_TZ() volatile
    {
        LPCG105_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG105_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG105_AUTHEN_LOCK_TZ() volatile
    {
        LPCG105_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG105_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG105_AUTHEN_LOCK_TZ() volatile
    {
        LPCG105_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG105_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG105_AUTHEN_TZ_NS() volatile
    {
        return LPCG105_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG105_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG105_AUTHEN_TZ_NS() volatile
    {
        LPCG105_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG105_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG105_AUTHEN_TZ_NS() volatile
    {
        LPCG105_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG105_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG105_AUTHEN_TZ_NS() volatile
    {
        LPCG105_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG105_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG105_AUTHEN_TZ_USER() volatile
    {
        return LPCG105_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG105_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG105_AUTHEN_TZ_USER() volatile
    {
        LPCG105_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG105_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG105_AUTHEN_TZ_USER() volatile
    {
        LPCG105_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG105_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG105_AUTHEN_TZ_USER() volatile
    {
        LPCG105_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG105_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG105_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG105_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG105_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG105_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG105_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG105_AUTHEN = curr;
    }

    /**
     * Get LPCG106_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG106_DIRECT_ON() volatile
    {
        return LPCG106_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG106_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG106_DIRECT_ON() volatile
    {
        LPCG106_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG106_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG106_DIRECT_ON() volatile
    {
        LPCG106_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG106_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG106_DIRECT_ON() volatile
    {
        LPCG106_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG106_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG106_DOMAIN_LEVEL3 get_LPCG106_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG106_DOMAIN_LEVEL3((LPCG106_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG106_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG106_DOMAIN_LEVEL3(
        CCM_LPCG106_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG106_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG106_DOMAIN = curr;
    }

    /**
     * Get LPCG106_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG106_DOMAIN_LEVEL2 get_LPCG106_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG106_DOMAIN_LEVEL2((LPCG106_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG106_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG106_DOMAIN_LEVEL2(
        CCM_LPCG106_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG106_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG106_DOMAIN = curr;
    }

    /**
     * Get LPCG106_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG106_DOMAIN_LEVEL1 get_LPCG106_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG106_DOMAIN_LEVEL1((LPCG106_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG106_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG106_DOMAIN_LEVEL1(
        CCM_LPCG106_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG106_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG106_DOMAIN = curr;
    }

    /**
     * Get LPCG106_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG106_DOMAIN_LEVEL0 get_LPCG106_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG106_DOMAIN_LEVEL0((LPCG106_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG106_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG106_DOMAIN_LEVEL0(
        CCM_LPCG106_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG106_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG106_DOMAIN = curr;
    }

    /**
     * Get LPCG106_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG106_DOMAIN_LEVEL get_LPCG106_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG106_DOMAIN_LEVEL((LPCG106_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG106_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG106_DOMAIN_LEVEL(
        CCM_LPCG106_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG106_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG106_DOMAIN = curr;
    }

    /**
     * Get all of LPCG106_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG106_DOMAIN(CCM_LPCG106_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG106_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG106_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG106_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG106_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG106_DOMAIN;

        LEVEL3 = CCM_LPCG106_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG106_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG106_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG106_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG106_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG106_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG106_DOMAIN(CCM_LPCG106_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG106_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG106_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG106_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG106_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG106_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG106_DOMAIN = curr;
    }

    /**
     * Get LPCG106_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG106_STATUS0_DOMAIN_ENABLE
    get_LPCG106_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG106_STATUS0_DOMAIN_ENABLE((LPCG106_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG106_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG106_STATUS0_ACTIVE_DOMAIN
    get_LPCG106_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG106_STATUS0_ACTIVE_DOMAIN((LPCG106_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG106_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG106_STATUS0_ON() volatile
    {
        return LPCG106_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG106_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG106_STATUS0(
        CCM_LPCG106_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG106_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG106_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG106_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG106_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG106_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG106_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG106_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG106_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG106_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG106_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG106_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG106_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG106_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG106_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG106_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG106_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG106_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG106_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG106_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG106_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG106_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG106_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG106_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG106_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG106_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG106_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG106_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG106_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG106_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG106_STATUS1_CPU3_MODE
    get_LPCG106_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG106_STATUS1_CPU3_MODE((LPCG106_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG106_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG106_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG106_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG106_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG106_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG106_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG106_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG106_STATUS1_CPU2_MODE
    get_LPCG106_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG106_STATUS1_CPU2_MODE((LPCG106_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG106_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG106_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG106_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG106_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG106_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG106_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG106_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG106_STATUS1_CPU1_MODE
    get_LPCG106_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG106_STATUS1_CPU1_MODE((LPCG106_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG106_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG106_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG106_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG106_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG106_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG106_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG106_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG106_STATUS1_CPU0_MODE
    get_LPCG106_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG106_STATUS1_CPU0_MODE((LPCG106_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG106_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG106_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG106_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG106_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG106_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG106_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG106_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG106_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG106_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG106_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG106_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG106_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG106_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG106_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG106_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG106_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG106_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG106_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG106_AUTHEN_LOCK_MODE() volatile
    {
        LPCG106_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG106_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG106_AUTHEN_LOCK_MODE() volatile
    {
        LPCG106_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG106_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG106_AUTHEN_LOCK_MODE() volatile
    {
        LPCG106_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG106_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG106_AUTHEN_CPULPM() volatile
    {
        return LPCG106_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG106_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG106_AUTHEN_CPULPM() volatile
    {
        LPCG106_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG106_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG106_AUTHEN_CPULPM() volatile
    {
        LPCG106_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG106_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG106_AUTHEN_CPULPM() volatile
    {
        LPCG106_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG106_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG106_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG106_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG106_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG106_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG106_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG106_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG106_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG106_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG106_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG106_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG106_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG106_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG106_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG106_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG106_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG106_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG106_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG106_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG106_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG106_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG106_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG106_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG106_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG106_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG106_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG106_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG106_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG106_AUTHEN_LOCK_LIST() volatile
    {
        LPCG106_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG106_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG106_AUTHEN_LOCK_LIST() volatile
    {
        LPCG106_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG106_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG106_AUTHEN_LOCK_LIST() volatile
    {
        LPCG106_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG106_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG106_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG106_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG106_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG106_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG106_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG106_AUTHEN = curr;
    }

    /**
     * Get LPCG106_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG106_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG106_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG106_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG106_AUTHEN_LOCK_TZ() volatile
    {
        LPCG106_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG106_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG106_AUTHEN_LOCK_TZ() volatile
    {
        LPCG106_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG106_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG106_AUTHEN_LOCK_TZ() volatile
    {
        LPCG106_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG106_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG106_AUTHEN_TZ_NS() volatile
    {
        return LPCG106_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG106_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG106_AUTHEN_TZ_NS() volatile
    {
        LPCG106_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG106_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG106_AUTHEN_TZ_NS() volatile
    {
        LPCG106_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG106_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG106_AUTHEN_TZ_NS() volatile
    {
        LPCG106_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG106_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG106_AUTHEN_TZ_USER() volatile
    {
        return LPCG106_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG106_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG106_AUTHEN_TZ_USER() volatile
    {
        LPCG106_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG106_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG106_AUTHEN_TZ_USER() volatile
    {
        LPCG106_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG106_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG106_AUTHEN_TZ_USER() volatile
    {
        LPCG106_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG106_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG106_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG106_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG106_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG106_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG106_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG106_AUTHEN = curr;
    }

    /**
     * Get LPCG107_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG107_DIRECT_ON() volatile
    {
        return LPCG107_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG107_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG107_DIRECT_ON() volatile
    {
        LPCG107_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG107_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG107_DIRECT_ON() volatile
    {
        LPCG107_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG107_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG107_DIRECT_ON() volatile
    {
        LPCG107_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG107_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG107_DOMAIN_LEVEL3 get_LPCG107_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG107_DOMAIN_LEVEL3((LPCG107_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG107_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG107_DOMAIN_LEVEL3(
        CCM_LPCG107_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG107_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG107_DOMAIN = curr;
    }

    /**
     * Get LPCG107_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG107_DOMAIN_LEVEL2 get_LPCG107_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG107_DOMAIN_LEVEL2((LPCG107_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG107_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG107_DOMAIN_LEVEL2(
        CCM_LPCG107_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG107_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG107_DOMAIN = curr;
    }

    /**
     * Get LPCG107_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG107_DOMAIN_LEVEL1 get_LPCG107_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG107_DOMAIN_LEVEL1((LPCG107_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG107_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG107_DOMAIN_LEVEL1(
        CCM_LPCG107_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG107_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG107_DOMAIN = curr;
    }

    /**
     * Get LPCG107_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG107_DOMAIN_LEVEL0 get_LPCG107_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG107_DOMAIN_LEVEL0((LPCG107_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG107_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG107_DOMAIN_LEVEL0(
        CCM_LPCG107_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG107_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG107_DOMAIN = curr;
    }

    /**
     * Get LPCG107_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG107_DOMAIN_LEVEL get_LPCG107_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG107_DOMAIN_LEVEL((LPCG107_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG107_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG107_DOMAIN_LEVEL(
        CCM_LPCG107_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG107_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG107_DOMAIN = curr;
    }

    /**
     * Get all of LPCG107_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG107_DOMAIN(CCM_LPCG107_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG107_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG107_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG107_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG107_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG107_DOMAIN;

        LEVEL3 = CCM_LPCG107_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG107_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG107_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG107_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG107_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG107_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG107_DOMAIN(CCM_LPCG107_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG107_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG107_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG107_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG107_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG107_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG107_DOMAIN = curr;
    }

    /**
     * Get LPCG107_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG107_STATUS0_DOMAIN_ENABLE
    get_LPCG107_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG107_STATUS0_DOMAIN_ENABLE((LPCG107_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG107_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG107_STATUS0_ACTIVE_DOMAIN
    get_LPCG107_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG107_STATUS0_ACTIVE_DOMAIN((LPCG107_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG107_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG107_STATUS0_ON() volatile
    {
        return LPCG107_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG107_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG107_STATUS0(
        CCM_LPCG107_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG107_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG107_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG107_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG107_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG107_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG107_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG107_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG107_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG107_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG107_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG107_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG107_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG107_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG107_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG107_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG107_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG107_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG107_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG107_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG107_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG107_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG107_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG107_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG107_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG107_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG107_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG107_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG107_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG107_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG107_STATUS1_CPU3_MODE
    get_LPCG107_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG107_STATUS1_CPU3_MODE((LPCG107_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG107_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG107_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG107_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG107_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG107_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG107_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG107_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG107_STATUS1_CPU2_MODE
    get_LPCG107_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG107_STATUS1_CPU2_MODE((LPCG107_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG107_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG107_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG107_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG107_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG107_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG107_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG107_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG107_STATUS1_CPU1_MODE
    get_LPCG107_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG107_STATUS1_CPU1_MODE((LPCG107_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG107_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG107_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG107_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG107_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG107_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG107_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG107_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG107_STATUS1_CPU0_MODE
    get_LPCG107_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG107_STATUS1_CPU0_MODE((LPCG107_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG107_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG107_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG107_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG107_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG107_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG107_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG107_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG107_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG107_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG107_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG107_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG107_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG107_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG107_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG107_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG107_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG107_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG107_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG107_AUTHEN_LOCK_MODE() volatile
    {
        LPCG107_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG107_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG107_AUTHEN_LOCK_MODE() volatile
    {
        LPCG107_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG107_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG107_AUTHEN_LOCK_MODE() volatile
    {
        LPCG107_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG107_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG107_AUTHEN_CPULPM() volatile
    {
        return LPCG107_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG107_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG107_AUTHEN_CPULPM() volatile
    {
        LPCG107_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG107_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG107_AUTHEN_CPULPM() volatile
    {
        LPCG107_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG107_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG107_AUTHEN_CPULPM() volatile
    {
        LPCG107_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG107_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG107_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG107_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG107_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG107_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG107_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG107_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG107_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG107_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG107_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG107_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG107_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG107_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG107_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG107_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG107_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG107_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG107_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG107_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG107_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG107_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG107_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG107_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG107_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG107_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG107_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG107_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG107_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG107_AUTHEN_LOCK_LIST() volatile
    {
        LPCG107_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG107_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG107_AUTHEN_LOCK_LIST() volatile
    {
        LPCG107_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG107_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG107_AUTHEN_LOCK_LIST() volatile
    {
        LPCG107_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG107_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG107_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG107_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG107_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG107_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG107_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG107_AUTHEN = curr;
    }

    /**
     * Get LPCG107_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG107_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG107_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG107_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG107_AUTHEN_LOCK_TZ() volatile
    {
        LPCG107_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG107_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG107_AUTHEN_LOCK_TZ() volatile
    {
        LPCG107_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG107_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG107_AUTHEN_LOCK_TZ() volatile
    {
        LPCG107_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG107_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG107_AUTHEN_TZ_NS() volatile
    {
        return LPCG107_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG107_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG107_AUTHEN_TZ_NS() volatile
    {
        LPCG107_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG107_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG107_AUTHEN_TZ_NS() volatile
    {
        LPCG107_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG107_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG107_AUTHEN_TZ_NS() volatile
    {
        LPCG107_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG107_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG107_AUTHEN_TZ_USER() volatile
    {
        return LPCG107_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG107_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG107_AUTHEN_TZ_USER() volatile
    {
        LPCG107_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG107_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG107_AUTHEN_TZ_USER() volatile
    {
        LPCG107_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG107_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG107_AUTHEN_TZ_USER() volatile
    {
        LPCG107_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG107_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG107_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG107_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG107_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG107_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG107_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG107_AUTHEN = curr;
    }

    /**
     * Get LPCG108_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG108_DIRECT_ON() volatile
    {
        return LPCG108_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG108_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG108_DIRECT_ON() volatile
    {
        LPCG108_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG108_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG108_DIRECT_ON() volatile
    {
        LPCG108_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG108_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG108_DIRECT_ON() volatile
    {
        LPCG108_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG108_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG108_DOMAIN_LEVEL3 get_LPCG108_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG108_DOMAIN_LEVEL3((LPCG108_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG108_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG108_DOMAIN_LEVEL3(
        CCM_LPCG108_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG108_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG108_DOMAIN = curr;
    }

    /**
     * Get LPCG108_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG108_DOMAIN_LEVEL2 get_LPCG108_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG108_DOMAIN_LEVEL2((LPCG108_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG108_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG108_DOMAIN_LEVEL2(
        CCM_LPCG108_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG108_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG108_DOMAIN = curr;
    }

    /**
     * Get LPCG108_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG108_DOMAIN_LEVEL1 get_LPCG108_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG108_DOMAIN_LEVEL1((LPCG108_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG108_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG108_DOMAIN_LEVEL1(
        CCM_LPCG108_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG108_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG108_DOMAIN = curr;
    }

    /**
     * Get LPCG108_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG108_DOMAIN_LEVEL0 get_LPCG108_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG108_DOMAIN_LEVEL0((LPCG108_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG108_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG108_DOMAIN_LEVEL0(
        CCM_LPCG108_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG108_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG108_DOMAIN = curr;
    }

    /**
     * Get LPCG108_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG108_DOMAIN_LEVEL get_LPCG108_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG108_DOMAIN_LEVEL((LPCG108_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG108_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG108_DOMAIN_LEVEL(
        CCM_LPCG108_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG108_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG108_DOMAIN = curr;
    }

    /**
     * Get all of LPCG108_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG108_DOMAIN(CCM_LPCG108_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG108_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG108_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG108_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG108_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG108_DOMAIN;

        LEVEL3 = CCM_LPCG108_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG108_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG108_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG108_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG108_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG108_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG108_DOMAIN(CCM_LPCG108_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG108_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG108_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG108_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG108_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG108_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG108_DOMAIN = curr;
    }

    /**
     * Get LPCG108_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG108_STATUS0_DOMAIN_ENABLE
    get_LPCG108_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG108_STATUS0_DOMAIN_ENABLE((LPCG108_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG108_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG108_STATUS0_ACTIVE_DOMAIN
    get_LPCG108_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG108_STATUS0_ACTIVE_DOMAIN((LPCG108_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG108_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG108_STATUS0_ON() volatile
    {
        return LPCG108_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG108_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG108_STATUS0(
        CCM_LPCG108_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG108_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG108_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG108_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG108_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG108_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG108_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG108_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG108_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG108_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG108_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG108_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG108_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG108_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG108_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG108_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG108_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG108_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG108_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG108_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG108_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG108_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG108_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG108_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG108_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG108_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG108_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG108_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG108_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG108_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG108_STATUS1_CPU3_MODE
    get_LPCG108_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG108_STATUS1_CPU3_MODE((LPCG108_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG108_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG108_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG108_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG108_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG108_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG108_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG108_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG108_STATUS1_CPU2_MODE
    get_LPCG108_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG108_STATUS1_CPU2_MODE((LPCG108_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG108_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG108_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG108_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG108_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG108_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG108_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG108_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG108_STATUS1_CPU1_MODE
    get_LPCG108_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG108_STATUS1_CPU1_MODE((LPCG108_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG108_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG108_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG108_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG108_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG108_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG108_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG108_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG108_STATUS1_CPU0_MODE
    get_LPCG108_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG108_STATUS1_CPU0_MODE((LPCG108_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG108_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG108_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG108_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG108_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG108_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG108_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG108_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG108_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG108_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG108_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG108_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG108_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG108_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG108_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG108_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG108_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG108_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG108_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG108_AUTHEN_LOCK_MODE() volatile
    {
        LPCG108_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG108_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG108_AUTHEN_LOCK_MODE() volatile
    {
        LPCG108_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG108_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG108_AUTHEN_LOCK_MODE() volatile
    {
        LPCG108_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG108_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG108_AUTHEN_CPULPM() volatile
    {
        return LPCG108_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG108_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG108_AUTHEN_CPULPM() volatile
    {
        LPCG108_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG108_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG108_AUTHEN_CPULPM() volatile
    {
        LPCG108_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG108_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG108_AUTHEN_CPULPM() volatile
    {
        LPCG108_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG108_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG108_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG108_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG108_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG108_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG108_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG108_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG108_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG108_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG108_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG108_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG108_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG108_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG108_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG108_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG108_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG108_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG108_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG108_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG108_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG108_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG108_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG108_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG108_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG108_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG108_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG108_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG108_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG108_AUTHEN_LOCK_LIST() volatile
    {
        LPCG108_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG108_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG108_AUTHEN_LOCK_LIST() volatile
    {
        LPCG108_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG108_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG108_AUTHEN_LOCK_LIST() volatile
    {
        LPCG108_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG108_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG108_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG108_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG108_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG108_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG108_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG108_AUTHEN = curr;
    }

    /**
     * Get LPCG108_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG108_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG108_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG108_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG108_AUTHEN_LOCK_TZ() volatile
    {
        LPCG108_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG108_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG108_AUTHEN_LOCK_TZ() volatile
    {
        LPCG108_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG108_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG108_AUTHEN_LOCK_TZ() volatile
    {
        LPCG108_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG108_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG108_AUTHEN_TZ_NS() volatile
    {
        return LPCG108_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG108_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG108_AUTHEN_TZ_NS() volatile
    {
        LPCG108_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG108_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG108_AUTHEN_TZ_NS() volatile
    {
        LPCG108_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG108_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG108_AUTHEN_TZ_NS() volatile
    {
        LPCG108_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG108_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG108_AUTHEN_TZ_USER() volatile
    {
        return LPCG108_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG108_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG108_AUTHEN_TZ_USER() volatile
    {
        LPCG108_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG108_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG108_AUTHEN_TZ_USER() volatile
    {
        LPCG108_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG108_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG108_AUTHEN_TZ_USER() volatile
    {
        LPCG108_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG108_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG108_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG108_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG108_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG108_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG108_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG108_AUTHEN = curr;
    }

    /**
     * Get LPCG109_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG109_DIRECT_ON() volatile
    {
        return LPCG109_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG109_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG109_DIRECT_ON() volatile
    {
        LPCG109_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG109_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG109_DIRECT_ON() volatile
    {
        LPCG109_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG109_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG109_DIRECT_ON() volatile
    {
        LPCG109_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG109_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG109_DOMAIN_LEVEL3 get_LPCG109_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG109_DOMAIN_LEVEL3((LPCG109_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG109_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG109_DOMAIN_LEVEL3(
        CCM_LPCG109_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG109_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG109_DOMAIN = curr;
    }

    /**
     * Get LPCG109_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG109_DOMAIN_LEVEL2 get_LPCG109_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG109_DOMAIN_LEVEL2((LPCG109_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG109_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG109_DOMAIN_LEVEL2(
        CCM_LPCG109_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG109_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG109_DOMAIN = curr;
    }

    /**
     * Get LPCG109_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG109_DOMAIN_LEVEL1 get_LPCG109_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG109_DOMAIN_LEVEL1((LPCG109_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG109_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG109_DOMAIN_LEVEL1(
        CCM_LPCG109_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG109_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG109_DOMAIN = curr;
    }

    /**
     * Get LPCG109_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG109_DOMAIN_LEVEL0 get_LPCG109_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG109_DOMAIN_LEVEL0((LPCG109_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG109_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG109_DOMAIN_LEVEL0(
        CCM_LPCG109_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG109_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG109_DOMAIN = curr;
    }

    /**
     * Get LPCG109_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG109_DOMAIN_LEVEL get_LPCG109_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG109_DOMAIN_LEVEL((LPCG109_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG109_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG109_DOMAIN_LEVEL(
        CCM_LPCG109_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG109_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG109_DOMAIN = curr;
    }

    /**
     * Get all of LPCG109_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG109_DOMAIN(CCM_LPCG109_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG109_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG109_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG109_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG109_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG109_DOMAIN;

        LEVEL3 = CCM_LPCG109_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG109_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG109_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG109_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG109_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG109_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG109_DOMAIN(CCM_LPCG109_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG109_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG109_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG109_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG109_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG109_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG109_DOMAIN = curr;
    }

    /**
     * Get LPCG109_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG109_STATUS0_DOMAIN_ENABLE
    get_LPCG109_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG109_STATUS0_DOMAIN_ENABLE((LPCG109_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG109_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG109_STATUS0_ACTIVE_DOMAIN
    get_LPCG109_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG109_STATUS0_ACTIVE_DOMAIN((LPCG109_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG109_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG109_STATUS0_ON() volatile
    {
        return LPCG109_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG109_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG109_STATUS0(
        CCM_LPCG109_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG109_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG109_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG109_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG109_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG109_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG109_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG109_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG109_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG109_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG109_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG109_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG109_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG109_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG109_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG109_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG109_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG109_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG109_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG109_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG109_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG109_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG109_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG109_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG109_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG109_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG109_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG109_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG109_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG109_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG109_STATUS1_CPU3_MODE
    get_LPCG109_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG109_STATUS1_CPU3_MODE((LPCG109_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG109_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG109_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG109_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG109_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG109_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG109_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG109_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG109_STATUS1_CPU2_MODE
    get_LPCG109_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG109_STATUS1_CPU2_MODE((LPCG109_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG109_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG109_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG109_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG109_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG109_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG109_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG109_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG109_STATUS1_CPU1_MODE
    get_LPCG109_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG109_STATUS1_CPU1_MODE((LPCG109_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG109_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG109_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG109_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG109_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG109_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG109_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG109_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG109_STATUS1_CPU0_MODE
    get_LPCG109_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG109_STATUS1_CPU0_MODE((LPCG109_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG109_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG109_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG109_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG109_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG109_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG109_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG109_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG109_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG109_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG109_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG109_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG109_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG109_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG109_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG109_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG109_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG109_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG109_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG109_AUTHEN_LOCK_MODE() volatile
    {
        LPCG109_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG109_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG109_AUTHEN_LOCK_MODE() volatile
    {
        LPCG109_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG109_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG109_AUTHEN_LOCK_MODE() volatile
    {
        LPCG109_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG109_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG109_AUTHEN_CPULPM() volatile
    {
        return LPCG109_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG109_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG109_AUTHEN_CPULPM() volatile
    {
        LPCG109_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG109_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG109_AUTHEN_CPULPM() volatile
    {
        LPCG109_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG109_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG109_AUTHEN_CPULPM() volatile
    {
        LPCG109_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG109_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG109_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG109_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG109_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG109_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG109_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG109_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG109_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG109_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG109_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG109_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG109_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG109_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG109_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG109_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG109_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG109_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG109_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG109_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG109_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG109_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG109_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG109_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG109_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG109_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG109_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG109_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG109_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG109_AUTHEN_LOCK_LIST() volatile
    {
        LPCG109_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG109_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG109_AUTHEN_LOCK_LIST() volatile
    {
        LPCG109_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG109_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG109_AUTHEN_LOCK_LIST() volatile
    {
        LPCG109_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG109_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG109_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG109_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG109_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG109_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG109_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG109_AUTHEN = curr;
    }

    /**
     * Get LPCG109_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG109_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG109_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG109_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG109_AUTHEN_LOCK_TZ() volatile
    {
        LPCG109_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG109_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG109_AUTHEN_LOCK_TZ() volatile
    {
        LPCG109_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG109_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG109_AUTHEN_LOCK_TZ() volatile
    {
        LPCG109_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG109_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG109_AUTHEN_TZ_NS() volatile
    {
        return LPCG109_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG109_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG109_AUTHEN_TZ_NS() volatile
    {
        LPCG109_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG109_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG109_AUTHEN_TZ_NS() volatile
    {
        LPCG109_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG109_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG109_AUTHEN_TZ_NS() volatile
    {
        LPCG109_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG109_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG109_AUTHEN_TZ_USER() volatile
    {
        return LPCG109_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG109_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG109_AUTHEN_TZ_USER() volatile
    {
        LPCG109_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG109_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG109_AUTHEN_TZ_USER() volatile
    {
        LPCG109_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG109_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG109_AUTHEN_TZ_USER() volatile
    {
        LPCG109_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG109_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG109_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG109_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG109_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG109_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG109_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG109_AUTHEN = curr;
    }

    /**
     * Get LPCG110_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG110_DIRECT_ON() volatile
    {
        return LPCG110_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG110_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG110_DIRECT_ON() volatile
    {
        LPCG110_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG110_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG110_DIRECT_ON() volatile
    {
        LPCG110_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG110_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG110_DIRECT_ON() volatile
    {
        LPCG110_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG110_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG110_DOMAIN_LEVEL3 get_LPCG110_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG110_DOMAIN_LEVEL3((LPCG110_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG110_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG110_DOMAIN_LEVEL3(
        CCM_LPCG110_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG110_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG110_DOMAIN = curr;
    }

    /**
     * Get LPCG110_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG110_DOMAIN_LEVEL2 get_LPCG110_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG110_DOMAIN_LEVEL2((LPCG110_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG110_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG110_DOMAIN_LEVEL2(
        CCM_LPCG110_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG110_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG110_DOMAIN = curr;
    }

    /**
     * Get LPCG110_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG110_DOMAIN_LEVEL1 get_LPCG110_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG110_DOMAIN_LEVEL1((LPCG110_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG110_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG110_DOMAIN_LEVEL1(
        CCM_LPCG110_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG110_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG110_DOMAIN = curr;
    }

    /**
     * Get LPCG110_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG110_DOMAIN_LEVEL0 get_LPCG110_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG110_DOMAIN_LEVEL0((LPCG110_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG110_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG110_DOMAIN_LEVEL0(
        CCM_LPCG110_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG110_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG110_DOMAIN = curr;
    }

    /**
     * Get LPCG110_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG110_DOMAIN_LEVEL get_LPCG110_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG110_DOMAIN_LEVEL((LPCG110_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG110_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG110_DOMAIN_LEVEL(
        CCM_LPCG110_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG110_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG110_DOMAIN = curr;
    }

    /**
     * Get all of LPCG110_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG110_DOMAIN(CCM_LPCG110_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG110_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG110_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG110_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG110_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG110_DOMAIN;

        LEVEL3 = CCM_LPCG110_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG110_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG110_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG110_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG110_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG110_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG110_DOMAIN(CCM_LPCG110_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG110_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG110_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG110_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG110_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG110_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG110_DOMAIN = curr;
    }

    /**
     * Get LPCG110_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG110_STATUS0_DOMAIN_ENABLE
    get_LPCG110_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG110_STATUS0_DOMAIN_ENABLE((LPCG110_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG110_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG110_STATUS0_ACTIVE_DOMAIN
    get_LPCG110_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG110_STATUS0_ACTIVE_DOMAIN((LPCG110_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG110_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG110_STATUS0_ON() volatile
    {
        return LPCG110_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG110_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG110_STATUS0(
        CCM_LPCG110_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG110_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG110_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG110_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG110_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG110_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG110_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG110_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG110_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG110_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG110_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG110_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG110_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG110_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG110_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG110_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG110_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG110_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG110_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG110_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG110_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG110_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG110_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG110_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG110_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG110_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG110_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG110_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG110_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG110_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG110_STATUS1_CPU3_MODE
    get_LPCG110_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG110_STATUS1_CPU3_MODE((LPCG110_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG110_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG110_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG110_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG110_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG110_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG110_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG110_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG110_STATUS1_CPU2_MODE
    get_LPCG110_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG110_STATUS1_CPU2_MODE((LPCG110_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG110_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG110_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG110_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG110_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG110_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG110_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG110_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG110_STATUS1_CPU1_MODE
    get_LPCG110_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG110_STATUS1_CPU1_MODE((LPCG110_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG110_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG110_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG110_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG110_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG110_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG110_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG110_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG110_STATUS1_CPU0_MODE
    get_LPCG110_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG110_STATUS1_CPU0_MODE((LPCG110_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG110_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG110_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG110_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG110_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG110_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG110_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG110_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG110_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG110_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG110_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG110_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG110_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG110_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG110_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG110_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG110_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG110_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG110_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG110_AUTHEN_LOCK_MODE() volatile
    {
        LPCG110_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG110_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG110_AUTHEN_LOCK_MODE() volatile
    {
        LPCG110_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG110_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG110_AUTHEN_LOCK_MODE() volatile
    {
        LPCG110_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG110_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG110_AUTHEN_CPULPM() volatile
    {
        return LPCG110_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG110_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG110_AUTHEN_CPULPM() volatile
    {
        LPCG110_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG110_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG110_AUTHEN_CPULPM() volatile
    {
        LPCG110_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG110_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG110_AUTHEN_CPULPM() volatile
    {
        LPCG110_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG110_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG110_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG110_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG110_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG110_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG110_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG110_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG110_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG110_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG110_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG110_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG110_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG110_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG110_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG110_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG110_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG110_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG110_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG110_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG110_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG110_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG110_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG110_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG110_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG110_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG110_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG110_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG110_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG110_AUTHEN_LOCK_LIST() volatile
    {
        LPCG110_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG110_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG110_AUTHEN_LOCK_LIST() volatile
    {
        LPCG110_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG110_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG110_AUTHEN_LOCK_LIST() volatile
    {
        LPCG110_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG110_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG110_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG110_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG110_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG110_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG110_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG110_AUTHEN = curr;
    }

    /**
     * Get LPCG110_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG110_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG110_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG110_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG110_AUTHEN_LOCK_TZ() volatile
    {
        LPCG110_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG110_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG110_AUTHEN_LOCK_TZ() volatile
    {
        LPCG110_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG110_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG110_AUTHEN_LOCK_TZ() volatile
    {
        LPCG110_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG110_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG110_AUTHEN_TZ_NS() volatile
    {
        return LPCG110_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG110_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG110_AUTHEN_TZ_NS() volatile
    {
        LPCG110_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG110_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG110_AUTHEN_TZ_NS() volatile
    {
        LPCG110_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG110_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG110_AUTHEN_TZ_NS() volatile
    {
        LPCG110_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG110_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG110_AUTHEN_TZ_USER() volatile
    {
        return LPCG110_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG110_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG110_AUTHEN_TZ_USER() volatile
    {
        LPCG110_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG110_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG110_AUTHEN_TZ_USER() volatile
    {
        LPCG110_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG110_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG110_AUTHEN_TZ_USER() volatile
    {
        LPCG110_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG110_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG110_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG110_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG110_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG110_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG110_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG110_AUTHEN = curr;
    }

    /**
     * Get LPCG111_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG111_DIRECT_ON() volatile
    {
        return LPCG111_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG111_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG111_DIRECT_ON() volatile
    {
        LPCG111_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG111_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG111_DIRECT_ON() volatile
    {
        LPCG111_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG111_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG111_DIRECT_ON() volatile
    {
        LPCG111_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG111_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG111_DOMAIN_LEVEL3 get_LPCG111_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG111_DOMAIN_LEVEL3((LPCG111_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG111_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG111_DOMAIN_LEVEL3(
        CCM_LPCG111_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG111_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG111_DOMAIN = curr;
    }

    /**
     * Get LPCG111_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG111_DOMAIN_LEVEL2 get_LPCG111_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG111_DOMAIN_LEVEL2((LPCG111_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG111_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG111_DOMAIN_LEVEL2(
        CCM_LPCG111_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG111_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG111_DOMAIN = curr;
    }

    /**
     * Get LPCG111_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG111_DOMAIN_LEVEL1 get_LPCG111_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG111_DOMAIN_LEVEL1((LPCG111_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG111_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG111_DOMAIN_LEVEL1(
        CCM_LPCG111_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG111_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG111_DOMAIN = curr;
    }

    /**
     * Get LPCG111_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG111_DOMAIN_LEVEL0 get_LPCG111_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG111_DOMAIN_LEVEL0((LPCG111_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG111_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG111_DOMAIN_LEVEL0(
        CCM_LPCG111_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG111_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG111_DOMAIN = curr;
    }

    /**
     * Get LPCG111_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG111_DOMAIN_LEVEL get_LPCG111_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG111_DOMAIN_LEVEL((LPCG111_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG111_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG111_DOMAIN_LEVEL(
        CCM_LPCG111_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG111_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG111_DOMAIN = curr;
    }

    /**
     * Get all of LPCG111_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG111_DOMAIN(CCM_LPCG111_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG111_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG111_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG111_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG111_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG111_DOMAIN;

        LEVEL3 = CCM_LPCG111_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG111_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG111_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG111_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG111_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG111_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG111_DOMAIN(CCM_LPCG111_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG111_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG111_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG111_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG111_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG111_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG111_DOMAIN = curr;
    }

    /**
     * Get LPCG111_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG111_STATUS0_DOMAIN_ENABLE
    get_LPCG111_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG111_STATUS0_DOMAIN_ENABLE((LPCG111_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG111_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG111_STATUS0_ACTIVE_DOMAIN
    get_LPCG111_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG111_STATUS0_ACTIVE_DOMAIN((LPCG111_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG111_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG111_STATUS0_ON() volatile
    {
        return LPCG111_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG111_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG111_STATUS0(
        CCM_LPCG111_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG111_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG111_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG111_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG111_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG111_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG111_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG111_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG111_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG111_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG111_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG111_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG111_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG111_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG111_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG111_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG111_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG111_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG111_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG111_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG111_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG111_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG111_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG111_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG111_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG111_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG111_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG111_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG111_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG111_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG111_STATUS1_CPU3_MODE
    get_LPCG111_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG111_STATUS1_CPU3_MODE((LPCG111_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG111_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG111_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG111_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG111_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG111_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG111_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG111_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG111_STATUS1_CPU2_MODE
    get_LPCG111_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG111_STATUS1_CPU2_MODE((LPCG111_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG111_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG111_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG111_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG111_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG111_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG111_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG111_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG111_STATUS1_CPU1_MODE
    get_LPCG111_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG111_STATUS1_CPU1_MODE((LPCG111_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG111_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG111_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG111_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG111_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG111_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG111_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG111_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG111_STATUS1_CPU0_MODE
    get_LPCG111_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG111_STATUS1_CPU0_MODE((LPCG111_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG111_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG111_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG111_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG111_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG111_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG111_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG111_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG111_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG111_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG111_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG111_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG111_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG111_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG111_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG111_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG111_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG111_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG111_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG111_AUTHEN_LOCK_MODE() volatile
    {
        LPCG111_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG111_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG111_AUTHEN_LOCK_MODE() volatile
    {
        LPCG111_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG111_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG111_AUTHEN_LOCK_MODE() volatile
    {
        LPCG111_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG111_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG111_AUTHEN_CPULPM() volatile
    {
        return LPCG111_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG111_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG111_AUTHEN_CPULPM() volatile
    {
        LPCG111_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG111_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG111_AUTHEN_CPULPM() volatile
    {
        LPCG111_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG111_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG111_AUTHEN_CPULPM() volatile
    {
        LPCG111_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG111_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG111_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG111_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG111_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG111_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG111_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG111_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG111_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG111_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG111_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG111_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG111_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG111_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG111_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG111_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG111_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG111_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG111_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG111_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG111_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG111_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG111_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG111_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG111_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG111_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG111_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG111_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG111_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG111_AUTHEN_LOCK_LIST() volatile
    {
        LPCG111_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG111_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG111_AUTHEN_LOCK_LIST() volatile
    {
        LPCG111_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG111_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG111_AUTHEN_LOCK_LIST() volatile
    {
        LPCG111_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG111_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG111_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG111_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG111_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG111_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG111_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG111_AUTHEN = curr;
    }

    /**
     * Get LPCG111_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG111_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG111_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG111_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG111_AUTHEN_LOCK_TZ() volatile
    {
        LPCG111_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG111_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG111_AUTHEN_LOCK_TZ() volatile
    {
        LPCG111_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG111_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG111_AUTHEN_LOCK_TZ() volatile
    {
        LPCG111_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG111_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG111_AUTHEN_TZ_NS() volatile
    {
        return LPCG111_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG111_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG111_AUTHEN_TZ_NS() volatile
    {
        LPCG111_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG111_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG111_AUTHEN_TZ_NS() volatile
    {
        LPCG111_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG111_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG111_AUTHEN_TZ_NS() volatile
    {
        LPCG111_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG111_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG111_AUTHEN_TZ_USER() volatile
    {
        return LPCG111_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG111_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG111_AUTHEN_TZ_USER() volatile
    {
        LPCG111_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG111_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG111_AUTHEN_TZ_USER() volatile
    {
        LPCG111_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG111_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG111_AUTHEN_TZ_USER() volatile
    {
        LPCG111_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG111_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG111_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG111_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG111_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG111_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG111_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG111_AUTHEN = curr;
    }

    /**
     * Get LPCG112_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG112_DIRECT_ON() volatile
    {
        return LPCG112_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG112_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG112_DIRECT_ON() volatile
    {
        LPCG112_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG112_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG112_DIRECT_ON() volatile
    {
        LPCG112_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG112_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG112_DIRECT_ON() volatile
    {
        LPCG112_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG112_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG112_DOMAIN_LEVEL3 get_LPCG112_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG112_DOMAIN_LEVEL3((LPCG112_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG112_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG112_DOMAIN_LEVEL3(
        CCM_LPCG112_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG112_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG112_DOMAIN = curr;
    }

    /**
     * Get LPCG112_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG112_DOMAIN_LEVEL2 get_LPCG112_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG112_DOMAIN_LEVEL2((LPCG112_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG112_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG112_DOMAIN_LEVEL2(
        CCM_LPCG112_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG112_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG112_DOMAIN = curr;
    }

    /**
     * Get LPCG112_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG112_DOMAIN_LEVEL1 get_LPCG112_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG112_DOMAIN_LEVEL1((LPCG112_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG112_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG112_DOMAIN_LEVEL1(
        CCM_LPCG112_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG112_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG112_DOMAIN = curr;
    }

    /**
     * Get LPCG112_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG112_DOMAIN_LEVEL0 get_LPCG112_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG112_DOMAIN_LEVEL0((LPCG112_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG112_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG112_DOMAIN_LEVEL0(
        CCM_LPCG112_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG112_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG112_DOMAIN = curr;
    }

    /**
     * Get LPCG112_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG112_DOMAIN_LEVEL get_LPCG112_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG112_DOMAIN_LEVEL((LPCG112_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG112_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG112_DOMAIN_LEVEL(
        CCM_LPCG112_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG112_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG112_DOMAIN = curr;
    }

    /**
     * Get all of LPCG112_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG112_DOMAIN(CCM_LPCG112_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG112_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG112_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG112_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG112_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG112_DOMAIN;

        LEVEL3 = CCM_LPCG112_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG112_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG112_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG112_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG112_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG112_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG112_DOMAIN(CCM_LPCG112_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG112_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG112_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG112_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG112_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG112_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG112_DOMAIN = curr;
    }

    /**
     * Get LPCG112_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG112_STATUS0_DOMAIN_ENABLE
    get_LPCG112_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG112_STATUS0_DOMAIN_ENABLE((LPCG112_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG112_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG112_STATUS0_ACTIVE_DOMAIN
    get_LPCG112_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG112_STATUS0_ACTIVE_DOMAIN((LPCG112_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG112_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG112_STATUS0_ON() volatile
    {
        return LPCG112_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG112_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG112_STATUS0(
        CCM_LPCG112_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG112_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG112_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG112_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG112_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG112_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG112_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG112_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG112_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG112_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG112_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG112_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG112_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG112_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG112_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG112_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG112_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG112_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG112_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG112_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG112_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG112_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG112_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG112_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG112_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG112_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG112_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG112_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG112_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG112_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG112_STATUS1_CPU3_MODE
    get_LPCG112_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG112_STATUS1_CPU3_MODE((LPCG112_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG112_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG112_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG112_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG112_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG112_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG112_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG112_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG112_STATUS1_CPU2_MODE
    get_LPCG112_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG112_STATUS1_CPU2_MODE((LPCG112_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG112_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG112_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG112_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG112_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG112_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG112_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG112_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG112_STATUS1_CPU1_MODE
    get_LPCG112_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG112_STATUS1_CPU1_MODE((LPCG112_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG112_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG112_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG112_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG112_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG112_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG112_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG112_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG112_STATUS1_CPU0_MODE
    get_LPCG112_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG112_STATUS1_CPU0_MODE((LPCG112_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG112_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG112_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG112_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG112_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG112_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG112_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG112_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG112_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG112_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG112_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG112_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG112_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG112_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG112_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG112_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG112_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG112_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG112_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG112_AUTHEN_LOCK_MODE() volatile
    {
        LPCG112_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG112_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG112_AUTHEN_LOCK_MODE() volatile
    {
        LPCG112_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG112_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG112_AUTHEN_LOCK_MODE() volatile
    {
        LPCG112_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG112_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG112_AUTHEN_CPULPM() volatile
    {
        return LPCG112_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG112_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG112_AUTHEN_CPULPM() volatile
    {
        LPCG112_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG112_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG112_AUTHEN_CPULPM() volatile
    {
        LPCG112_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG112_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG112_AUTHEN_CPULPM() volatile
    {
        LPCG112_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG112_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG112_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG112_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG112_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG112_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG112_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG112_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG112_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG112_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG112_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG112_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG112_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG112_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG112_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG112_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG112_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG112_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG112_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG112_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG112_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG112_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG112_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG112_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG112_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG112_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG112_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG112_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG112_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG112_AUTHEN_LOCK_LIST() volatile
    {
        LPCG112_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG112_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG112_AUTHEN_LOCK_LIST() volatile
    {
        LPCG112_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG112_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG112_AUTHEN_LOCK_LIST() volatile
    {
        LPCG112_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG112_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG112_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG112_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG112_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG112_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG112_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG112_AUTHEN = curr;
    }

    /**
     * Get LPCG112_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG112_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG112_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG112_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG112_AUTHEN_LOCK_TZ() volatile
    {
        LPCG112_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG112_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG112_AUTHEN_LOCK_TZ() volatile
    {
        LPCG112_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG112_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG112_AUTHEN_LOCK_TZ() volatile
    {
        LPCG112_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG112_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG112_AUTHEN_TZ_NS() volatile
    {
        return LPCG112_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG112_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG112_AUTHEN_TZ_NS() volatile
    {
        LPCG112_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG112_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG112_AUTHEN_TZ_NS() volatile
    {
        LPCG112_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG112_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG112_AUTHEN_TZ_NS() volatile
    {
        LPCG112_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG112_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG112_AUTHEN_TZ_USER() volatile
    {
        return LPCG112_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG112_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG112_AUTHEN_TZ_USER() volatile
    {
        LPCG112_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG112_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG112_AUTHEN_TZ_USER() volatile
    {
        LPCG112_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG112_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG112_AUTHEN_TZ_USER() volatile
    {
        LPCG112_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG112_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG112_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG112_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG112_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG112_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG112_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG112_AUTHEN = curr;
    }

    /**
     * Get LPCG113_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG113_DIRECT_ON() volatile
    {
        return LPCG113_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG113_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG113_DIRECT_ON() volatile
    {
        LPCG113_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG113_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG113_DIRECT_ON() volatile
    {
        LPCG113_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG113_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG113_DIRECT_ON() volatile
    {
        LPCG113_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG113_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG113_DOMAIN_LEVEL3 get_LPCG113_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG113_DOMAIN_LEVEL3((LPCG113_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG113_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG113_DOMAIN_LEVEL3(
        CCM_LPCG113_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG113_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG113_DOMAIN = curr;
    }

    /**
     * Get LPCG113_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG113_DOMAIN_LEVEL2 get_LPCG113_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG113_DOMAIN_LEVEL2((LPCG113_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG113_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG113_DOMAIN_LEVEL2(
        CCM_LPCG113_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG113_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG113_DOMAIN = curr;
    }

    /**
     * Get LPCG113_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG113_DOMAIN_LEVEL1 get_LPCG113_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG113_DOMAIN_LEVEL1((LPCG113_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG113_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG113_DOMAIN_LEVEL1(
        CCM_LPCG113_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG113_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG113_DOMAIN = curr;
    }

    /**
     * Get LPCG113_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG113_DOMAIN_LEVEL0 get_LPCG113_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG113_DOMAIN_LEVEL0((LPCG113_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG113_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG113_DOMAIN_LEVEL0(
        CCM_LPCG113_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG113_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG113_DOMAIN = curr;
    }

    /**
     * Get LPCG113_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG113_DOMAIN_LEVEL get_LPCG113_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG113_DOMAIN_LEVEL((LPCG113_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG113_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG113_DOMAIN_LEVEL(
        CCM_LPCG113_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG113_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG113_DOMAIN = curr;
    }

    /**
     * Get all of LPCG113_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG113_DOMAIN(CCM_LPCG113_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG113_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG113_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG113_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG113_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG113_DOMAIN;

        LEVEL3 = CCM_LPCG113_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG113_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG113_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG113_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG113_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG113_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG113_DOMAIN(CCM_LPCG113_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG113_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG113_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG113_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG113_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG113_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG113_DOMAIN = curr;
    }

    /**
     * Get LPCG113_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG113_STATUS0_DOMAIN_ENABLE
    get_LPCG113_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG113_STATUS0_DOMAIN_ENABLE((LPCG113_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG113_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG113_STATUS0_ACTIVE_DOMAIN
    get_LPCG113_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG113_STATUS0_ACTIVE_DOMAIN((LPCG113_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG113_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG113_STATUS0_ON() volatile
    {
        return LPCG113_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG113_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG113_STATUS0(
        CCM_LPCG113_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG113_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG113_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG113_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG113_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG113_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG113_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG113_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG113_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG113_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG113_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG113_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG113_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG113_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG113_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG113_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG113_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG113_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG113_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG113_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG113_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG113_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG113_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG113_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG113_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG113_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG113_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG113_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG113_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG113_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG113_STATUS1_CPU3_MODE
    get_LPCG113_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG113_STATUS1_CPU3_MODE((LPCG113_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG113_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG113_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG113_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG113_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG113_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG113_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG113_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG113_STATUS1_CPU2_MODE
    get_LPCG113_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG113_STATUS1_CPU2_MODE((LPCG113_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG113_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG113_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG113_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG113_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG113_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG113_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG113_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG113_STATUS1_CPU1_MODE
    get_LPCG113_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG113_STATUS1_CPU1_MODE((LPCG113_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG113_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG113_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG113_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG113_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG113_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG113_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG113_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG113_STATUS1_CPU0_MODE
    get_LPCG113_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG113_STATUS1_CPU0_MODE((LPCG113_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG113_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG113_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG113_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG113_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG113_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG113_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG113_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG113_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG113_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG113_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG113_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG113_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG113_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG113_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG113_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG113_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG113_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG113_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG113_AUTHEN_LOCK_MODE() volatile
    {
        LPCG113_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG113_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG113_AUTHEN_LOCK_MODE() volatile
    {
        LPCG113_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG113_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG113_AUTHEN_LOCK_MODE() volatile
    {
        LPCG113_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG113_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG113_AUTHEN_CPULPM() volatile
    {
        return LPCG113_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG113_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG113_AUTHEN_CPULPM() volatile
    {
        LPCG113_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG113_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG113_AUTHEN_CPULPM() volatile
    {
        LPCG113_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG113_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG113_AUTHEN_CPULPM() volatile
    {
        LPCG113_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG113_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG113_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG113_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG113_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG113_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG113_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG113_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG113_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG113_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG113_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG113_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG113_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG113_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG113_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG113_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG113_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG113_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG113_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG113_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG113_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG113_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG113_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG113_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG113_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG113_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG113_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG113_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG113_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG113_AUTHEN_LOCK_LIST() volatile
    {
        LPCG113_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG113_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG113_AUTHEN_LOCK_LIST() volatile
    {
        LPCG113_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG113_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG113_AUTHEN_LOCK_LIST() volatile
    {
        LPCG113_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG113_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG113_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG113_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG113_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG113_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG113_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG113_AUTHEN = curr;
    }

    /**
     * Get LPCG113_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG113_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG113_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG113_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG113_AUTHEN_LOCK_TZ() volatile
    {
        LPCG113_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG113_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG113_AUTHEN_LOCK_TZ() volatile
    {
        LPCG113_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG113_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG113_AUTHEN_LOCK_TZ() volatile
    {
        LPCG113_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG113_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG113_AUTHEN_TZ_NS() volatile
    {
        return LPCG113_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG113_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG113_AUTHEN_TZ_NS() volatile
    {
        LPCG113_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG113_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG113_AUTHEN_TZ_NS() volatile
    {
        LPCG113_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG113_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG113_AUTHEN_TZ_NS() volatile
    {
        LPCG113_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG113_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG113_AUTHEN_TZ_USER() volatile
    {
        return LPCG113_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG113_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG113_AUTHEN_TZ_USER() volatile
    {
        LPCG113_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG113_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG113_AUTHEN_TZ_USER() volatile
    {
        LPCG113_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG113_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG113_AUTHEN_TZ_USER() volatile
    {
        LPCG113_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG113_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG113_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG113_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG113_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG113_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG113_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG113_AUTHEN = curr;
    }

    /**
     * Get LPCG114_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG114_DIRECT_ON() volatile
    {
        return LPCG114_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG114_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG114_DIRECT_ON() volatile
    {
        LPCG114_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG114_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG114_DIRECT_ON() volatile
    {
        LPCG114_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG114_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG114_DIRECT_ON() volatile
    {
        LPCG114_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG114_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG114_DOMAIN_LEVEL3 get_LPCG114_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG114_DOMAIN_LEVEL3((LPCG114_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG114_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG114_DOMAIN_LEVEL3(
        CCM_LPCG114_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG114_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG114_DOMAIN = curr;
    }

    /**
     * Get LPCG114_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG114_DOMAIN_LEVEL2 get_LPCG114_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG114_DOMAIN_LEVEL2((LPCG114_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG114_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG114_DOMAIN_LEVEL2(
        CCM_LPCG114_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG114_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG114_DOMAIN = curr;
    }

    /**
     * Get LPCG114_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG114_DOMAIN_LEVEL1 get_LPCG114_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG114_DOMAIN_LEVEL1((LPCG114_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG114_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG114_DOMAIN_LEVEL1(
        CCM_LPCG114_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG114_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG114_DOMAIN = curr;
    }

    /**
     * Get LPCG114_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG114_DOMAIN_LEVEL0 get_LPCG114_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG114_DOMAIN_LEVEL0((LPCG114_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG114_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG114_DOMAIN_LEVEL0(
        CCM_LPCG114_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG114_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG114_DOMAIN = curr;
    }

    /**
     * Get LPCG114_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG114_DOMAIN_LEVEL get_LPCG114_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG114_DOMAIN_LEVEL((LPCG114_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG114_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG114_DOMAIN_LEVEL(
        CCM_LPCG114_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG114_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG114_DOMAIN = curr;
    }

    /**
     * Get all of LPCG114_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG114_DOMAIN(CCM_LPCG114_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG114_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG114_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG114_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG114_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG114_DOMAIN;

        LEVEL3 = CCM_LPCG114_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG114_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG114_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG114_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG114_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG114_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG114_DOMAIN(CCM_LPCG114_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG114_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG114_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG114_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG114_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG114_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG114_DOMAIN = curr;
    }

    /**
     * Get LPCG114_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG114_STATUS0_DOMAIN_ENABLE
    get_LPCG114_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG114_STATUS0_DOMAIN_ENABLE((LPCG114_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG114_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG114_STATUS0_ACTIVE_DOMAIN
    get_LPCG114_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG114_STATUS0_ACTIVE_DOMAIN((LPCG114_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG114_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG114_STATUS0_ON() volatile
    {
        return LPCG114_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG114_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG114_STATUS0(
        CCM_LPCG114_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG114_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG114_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG114_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG114_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG114_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG114_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG114_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG114_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG114_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG114_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG114_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG114_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG114_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG114_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG114_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG114_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG114_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG114_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG114_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG114_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG114_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG114_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG114_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG114_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG114_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG114_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG114_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG114_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG114_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG114_STATUS1_CPU3_MODE
    get_LPCG114_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG114_STATUS1_CPU3_MODE((LPCG114_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG114_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG114_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG114_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG114_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG114_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG114_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG114_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG114_STATUS1_CPU2_MODE
    get_LPCG114_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG114_STATUS1_CPU2_MODE((LPCG114_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG114_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG114_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG114_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG114_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG114_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG114_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG114_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG114_STATUS1_CPU1_MODE
    get_LPCG114_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG114_STATUS1_CPU1_MODE((LPCG114_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG114_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG114_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG114_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG114_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG114_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG114_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG114_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG114_STATUS1_CPU0_MODE
    get_LPCG114_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG114_STATUS1_CPU0_MODE((LPCG114_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG114_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG114_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG114_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG114_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG114_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG114_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG114_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG114_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG114_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG114_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG114_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG114_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG114_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG114_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG114_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG114_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG114_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG114_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG114_AUTHEN_LOCK_MODE() volatile
    {
        LPCG114_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG114_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG114_AUTHEN_LOCK_MODE() volatile
    {
        LPCG114_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG114_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG114_AUTHEN_LOCK_MODE() volatile
    {
        LPCG114_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG114_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG114_AUTHEN_CPULPM() volatile
    {
        return LPCG114_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG114_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG114_AUTHEN_CPULPM() volatile
    {
        LPCG114_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG114_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG114_AUTHEN_CPULPM() volatile
    {
        LPCG114_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG114_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG114_AUTHEN_CPULPM() volatile
    {
        LPCG114_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG114_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG114_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG114_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG114_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG114_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG114_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG114_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG114_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG114_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG114_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG114_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG114_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG114_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG114_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG114_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG114_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG114_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG114_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG114_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG114_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG114_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG114_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG114_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG114_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG114_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG114_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG114_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG114_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG114_AUTHEN_LOCK_LIST() volatile
    {
        LPCG114_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG114_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG114_AUTHEN_LOCK_LIST() volatile
    {
        LPCG114_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG114_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG114_AUTHEN_LOCK_LIST() volatile
    {
        LPCG114_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG114_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG114_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG114_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG114_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG114_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG114_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG114_AUTHEN = curr;
    }

    /**
     * Get LPCG114_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG114_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG114_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG114_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG114_AUTHEN_LOCK_TZ() volatile
    {
        LPCG114_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG114_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG114_AUTHEN_LOCK_TZ() volatile
    {
        LPCG114_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG114_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG114_AUTHEN_LOCK_TZ() volatile
    {
        LPCG114_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG114_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG114_AUTHEN_TZ_NS() volatile
    {
        return LPCG114_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG114_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG114_AUTHEN_TZ_NS() volatile
    {
        LPCG114_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG114_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG114_AUTHEN_TZ_NS() volatile
    {
        LPCG114_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG114_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG114_AUTHEN_TZ_NS() volatile
    {
        LPCG114_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG114_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG114_AUTHEN_TZ_USER() volatile
    {
        return LPCG114_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG114_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG114_AUTHEN_TZ_USER() volatile
    {
        LPCG114_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG114_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG114_AUTHEN_TZ_USER() volatile
    {
        LPCG114_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG114_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG114_AUTHEN_TZ_USER() volatile
    {
        LPCG114_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG114_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG114_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG114_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG114_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG114_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG114_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG114_AUTHEN = curr;
    }

    /**
     * Get LPCG115_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG115_DIRECT_ON() volatile
    {
        return LPCG115_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG115_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG115_DIRECT_ON() volatile
    {
        LPCG115_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG115_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG115_DIRECT_ON() volatile
    {
        LPCG115_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG115_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG115_DIRECT_ON() volatile
    {
        LPCG115_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG115_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG115_DOMAIN_LEVEL3 get_LPCG115_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG115_DOMAIN_LEVEL3((LPCG115_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG115_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG115_DOMAIN_LEVEL3(
        CCM_LPCG115_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG115_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG115_DOMAIN = curr;
    }

    /**
     * Get LPCG115_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG115_DOMAIN_LEVEL2 get_LPCG115_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG115_DOMAIN_LEVEL2((LPCG115_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG115_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG115_DOMAIN_LEVEL2(
        CCM_LPCG115_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG115_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG115_DOMAIN = curr;
    }

    /**
     * Get LPCG115_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG115_DOMAIN_LEVEL1 get_LPCG115_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG115_DOMAIN_LEVEL1((LPCG115_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG115_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG115_DOMAIN_LEVEL1(
        CCM_LPCG115_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG115_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG115_DOMAIN = curr;
    }

    /**
     * Get LPCG115_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG115_DOMAIN_LEVEL0 get_LPCG115_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG115_DOMAIN_LEVEL0((LPCG115_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG115_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG115_DOMAIN_LEVEL0(
        CCM_LPCG115_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG115_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG115_DOMAIN = curr;
    }

    /**
     * Get LPCG115_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG115_DOMAIN_LEVEL get_LPCG115_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG115_DOMAIN_LEVEL((LPCG115_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG115_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG115_DOMAIN_LEVEL(
        CCM_LPCG115_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG115_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG115_DOMAIN = curr;
    }

    /**
     * Get all of LPCG115_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG115_DOMAIN(CCM_LPCG115_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG115_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG115_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG115_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG115_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG115_DOMAIN;

        LEVEL3 = CCM_LPCG115_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG115_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG115_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG115_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG115_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG115_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG115_DOMAIN(CCM_LPCG115_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG115_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG115_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG115_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG115_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG115_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG115_DOMAIN = curr;
    }

    /**
     * Get LPCG115_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG115_STATUS0_DOMAIN_ENABLE
    get_LPCG115_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG115_STATUS0_DOMAIN_ENABLE((LPCG115_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG115_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG115_STATUS0_ACTIVE_DOMAIN
    get_LPCG115_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG115_STATUS0_ACTIVE_DOMAIN((LPCG115_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG115_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG115_STATUS0_ON() volatile
    {
        return LPCG115_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG115_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG115_STATUS0(
        CCM_LPCG115_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG115_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG115_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG115_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG115_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG115_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG115_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG115_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG115_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG115_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG115_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG115_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG115_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG115_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG115_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG115_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG115_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG115_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG115_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG115_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG115_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG115_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG115_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG115_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG115_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG115_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG115_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG115_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG115_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG115_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG115_STATUS1_CPU3_MODE
    get_LPCG115_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG115_STATUS1_CPU3_MODE((LPCG115_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG115_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG115_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG115_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG115_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG115_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG115_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG115_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG115_STATUS1_CPU2_MODE
    get_LPCG115_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG115_STATUS1_CPU2_MODE((LPCG115_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG115_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG115_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG115_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG115_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG115_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG115_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG115_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG115_STATUS1_CPU1_MODE
    get_LPCG115_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG115_STATUS1_CPU1_MODE((LPCG115_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG115_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG115_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG115_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG115_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG115_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG115_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG115_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG115_STATUS1_CPU0_MODE
    get_LPCG115_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG115_STATUS1_CPU0_MODE((LPCG115_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG115_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG115_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG115_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG115_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG115_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG115_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG115_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG115_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG115_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG115_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG115_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG115_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG115_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG115_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG115_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG115_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG115_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG115_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG115_AUTHEN_LOCK_MODE() volatile
    {
        LPCG115_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG115_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG115_AUTHEN_LOCK_MODE() volatile
    {
        LPCG115_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG115_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG115_AUTHEN_LOCK_MODE() volatile
    {
        LPCG115_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG115_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG115_AUTHEN_CPULPM() volatile
    {
        return LPCG115_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG115_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG115_AUTHEN_CPULPM() volatile
    {
        LPCG115_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG115_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG115_AUTHEN_CPULPM() volatile
    {
        LPCG115_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG115_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG115_AUTHEN_CPULPM() volatile
    {
        LPCG115_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG115_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG115_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG115_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG115_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG115_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG115_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG115_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG115_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG115_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG115_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG115_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG115_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG115_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG115_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG115_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG115_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG115_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG115_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG115_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG115_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG115_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG115_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG115_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG115_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG115_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG115_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG115_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG115_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG115_AUTHEN_LOCK_LIST() volatile
    {
        LPCG115_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG115_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG115_AUTHEN_LOCK_LIST() volatile
    {
        LPCG115_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG115_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG115_AUTHEN_LOCK_LIST() volatile
    {
        LPCG115_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG115_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG115_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG115_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG115_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG115_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG115_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG115_AUTHEN = curr;
    }

    /**
     * Get LPCG115_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG115_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG115_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG115_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG115_AUTHEN_LOCK_TZ() volatile
    {
        LPCG115_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG115_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG115_AUTHEN_LOCK_TZ() volatile
    {
        LPCG115_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG115_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG115_AUTHEN_LOCK_TZ() volatile
    {
        LPCG115_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG115_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG115_AUTHEN_TZ_NS() volatile
    {
        return LPCG115_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG115_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG115_AUTHEN_TZ_NS() volatile
    {
        LPCG115_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG115_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG115_AUTHEN_TZ_NS() volatile
    {
        LPCG115_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG115_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG115_AUTHEN_TZ_NS() volatile
    {
        LPCG115_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG115_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG115_AUTHEN_TZ_USER() volatile
    {
        return LPCG115_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG115_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG115_AUTHEN_TZ_USER() volatile
    {
        LPCG115_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG115_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG115_AUTHEN_TZ_USER() volatile
    {
        LPCG115_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG115_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG115_AUTHEN_TZ_USER() volatile
    {
        LPCG115_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG115_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG115_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG115_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG115_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG115_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG115_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG115_AUTHEN = curr;
    }

    /**
     * Get LPCG116_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG116_DIRECT_ON() volatile
    {
        return LPCG116_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG116_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG116_DIRECT_ON() volatile
    {
        LPCG116_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG116_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG116_DIRECT_ON() volatile
    {
        LPCG116_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG116_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG116_DIRECT_ON() volatile
    {
        LPCG116_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG116_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG116_DOMAIN_LEVEL3 get_LPCG116_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG116_DOMAIN_LEVEL3((LPCG116_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG116_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG116_DOMAIN_LEVEL3(
        CCM_LPCG116_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG116_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG116_DOMAIN = curr;
    }

    /**
     * Get LPCG116_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG116_DOMAIN_LEVEL2 get_LPCG116_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG116_DOMAIN_LEVEL2((LPCG116_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG116_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG116_DOMAIN_LEVEL2(
        CCM_LPCG116_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG116_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG116_DOMAIN = curr;
    }

    /**
     * Get LPCG116_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG116_DOMAIN_LEVEL1 get_LPCG116_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG116_DOMAIN_LEVEL1((LPCG116_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG116_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG116_DOMAIN_LEVEL1(
        CCM_LPCG116_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG116_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG116_DOMAIN = curr;
    }

    /**
     * Get LPCG116_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG116_DOMAIN_LEVEL0 get_LPCG116_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG116_DOMAIN_LEVEL0((LPCG116_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG116_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG116_DOMAIN_LEVEL0(
        CCM_LPCG116_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG116_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG116_DOMAIN = curr;
    }

    /**
     * Get LPCG116_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG116_DOMAIN_LEVEL get_LPCG116_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG116_DOMAIN_LEVEL((LPCG116_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG116_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG116_DOMAIN_LEVEL(
        CCM_LPCG116_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG116_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG116_DOMAIN = curr;
    }

    /**
     * Get all of LPCG116_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG116_DOMAIN(CCM_LPCG116_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG116_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG116_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG116_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG116_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG116_DOMAIN;

        LEVEL3 = CCM_LPCG116_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG116_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG116_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG116_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG116_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG116_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG116_DOMAIN(CCM_LPCG116_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG116_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG116_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG116_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG116_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG116_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG116_DOMAIN = curr;
    }

    /**
     * Get LPCG116_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG116_STATUS0_DOMAIN_ENABLE
    get_LPCG116_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG116_STATUS0_DOMAIN_ENABLE((LPCG116_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG116_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG116_STATUS0_ACTIVE_DOMAIN
    get_LPCG116_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG116_STATUS0_ACTIVE_DOMAIN((LPCG116_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG116_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG116_STATUS0_ON() volatile
    {
        return LPCG116_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG116_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG116_STATUS0(
        CCM_LPCG116_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG116_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG116_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG116_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG116_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG116_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG116_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG116_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG116_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG116_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG116_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG116_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG116_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG116_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG116_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG116_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG116_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG116_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG116_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG116_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG116_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG116_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG116_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG116_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG116_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG116_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG116_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG116_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG116_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG116_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG116_STATUS1_CPU3_MODE
    get_LPCG116_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG116_STATUS1_CPU3_MODE((LPCG116_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG116_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG116_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG116_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG116_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG116_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG116_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG116_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG116_STATUS1_CPU2_MODE
    get_LPCG116_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG116_STATUS1_CPU2_MODE((LPCG116_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG116_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG116_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG116_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG116_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG116_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG116_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG116_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG116_STATUS1_CPU1_MODE
    get_LPCG116_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG116_STATUS1_CPU1_MODE((LPCG116_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG116_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG116_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG116_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG116_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG116_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG116_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG116_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG116_STATUS1_CPU0_MODE
    get_LPCG116_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG116_STATUS1_CPU0_MODE((LPCG116_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG116_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG116_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG116_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG116_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG116_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG116_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG116_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG116_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG116_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG116_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG116_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG116_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG116_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG116_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG116_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG116_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG116_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG116_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG116_AUTHEN_LOCK_MODE() volatile
    {
        LPCG116_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG116_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG116_AUTHEN_LOCK_MODE() volatile
    {
        LPCG116_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG116_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG116_AUTHEN_LOCK_MODE() volatile
    {
        LPCG116_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG116_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG116_AUTHEN_CPULPM() volatile
    {
        return LPCG116_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG116_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG116_AUTHEN_CPULPM() volatile
    {
        LPCG116_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG116_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG116_AUTHEN_CPULPM() volatile
    {
        LPCG116_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG116_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG116_AUTHEN_CPULPM() volatile
    {
        LPCG116_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG116_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG116_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG116_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG116_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG116_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG116_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG116_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG116_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG116_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG116_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG116_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG116_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG116_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG116_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG116_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG116_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG116_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG116_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG116_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG116_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG116_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG116_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG116_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG116_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG116_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG116_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG116_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG116_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG116_AUTHEN_LOCK_LIST() volatile
    {
        LPCG116_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG116_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG116_AUTHEN_LOCK_LIST() volatile
    {
        LPCG116_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG116_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG116_AUTHEN_LOCK_LIST() volatile
    {
        LPCG116_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG116_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG116_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG116_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG116_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG116_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG116_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG116_AUTHEN = curr;
    }

    /**
     * Get LPCG116_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG116_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG116_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG116_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG116_AUTHEN_LOCK_TZ() volatile
    {
        LPCG116_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG116_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG116_AUTHEN_LOCK_TZ() volatile
    {
        LPCG116_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG116_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG116_AUTHEN_LOCK_TZ() volatile
    {
        LPCG116_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG116_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG116_AUTHEN_TZ_NS() volatile
    {
        return LPCG116_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG116_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG116_AUTHEN_TZ_NS() volatile
    {
        LPCG116_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG116_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG116_AUTHEN_TZ_NS() volatile
    {
        LPCG116_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG116_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG116_AUTHEN_TZ_NS() volatile
    {
        LPCG116_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG116_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG116_AUTHEN_TZ_USER() volatile
    {
        return LPCG116_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG116_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG116_AUTHEN_TZ_USER() volatile
    {
        LPCG116_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG116_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG116_AUTHEN_TZ_USER() volatile
    {
        LPCG116_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG116_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG116_AUTHEN_TZ_USER() volatile
    {
        LPCG116_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG116_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG116_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG116_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG116_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG116_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG116_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG116_AUTHEN = curr;
    }

    /**
     * Get LPCG117_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG117_DIRECT_ON() volatile
    {
        return LPCG117_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG117_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG117_DIRECT_ON() volatile
    {
        LPCG117_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG117_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG117_DIRECT_ON() volatile
    {
        LPCG117_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG117_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG117_DIRECT_ON() volatile
    {
        LPCG117_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG117_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG117_DOMAIN_LEVEL3 get_LPCG117_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG117_DOMAIN_LEVEL3((LPCG117_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG117_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG117_DOMAIN_LEVEL3(
        CCM_LPCG117_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG117_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG117_DOMAIN = curr;
    }

    /**
     * Get LPCG117_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG117_DOMAIN_LEVEL2 get_LPCG117_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG117_DOMAIN_LEVEL2((LPCG117_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG117_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG117_DOMAIN_LEVEL2(
        CCM_LPCG117_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG117_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG117_DOMAIN = curr;
    }

    /**
     * Get LPCG117_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG117_DOMAIN_LEVEL1 get_LPCG117_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG117_DOMAIN_LEVEL1((LPCG117_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG117_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG117_DOMAIN_LEVEL1(
        CCM_LPCG117_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG117_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG117_DOMAIN = curr;
    }

    /**
     * Get LPCG117_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG117_DOMAIN_LEVEL0 get_LPCG117_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG117_DOMAIN_LEVEL0((LPCG117_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG117_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG117_DOMAIN_LEVEL0(
        CCM_LPCG117_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG117_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG117_DOMAIN = curr;
    }

    /**
     * Get LPCG117_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG117_DOMAIN_LEVEL get_LPCG117_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG117_DOMAIN_LEVEL((LPCG117_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG117_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG117_DOMAIN_LEVEL(
        CCM_LPCG117_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG117_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG117_DOMAIN = curr;
    }

    /**
     * Get all of LPCG117_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG117_DOMAIN(CCM_LPCG117_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG117_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG117_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG117_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG117_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG117_DOMAIN;

        LEVEL3 = CCM_LPCG117_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG117_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG117_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG117_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG117_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG117_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG117_DOMAIN(CCM_LPCG117_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG117_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG117_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG117_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG117_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG117_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG117_DOMAIN = curr;
    }

    /**
     * Get LPCG117_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG117_STATUS0_DOMAIN_ENABLE
    get_LPCG117_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG117_STATUS0_DOMAIN_ENABLE((LPCG117_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG117_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG117_STATUS0_ACTIVE_DOMAIN
    get_LPCG117_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG117_STATUS0_ACTIVE_DOMAIN((LPCG117_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG117_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG117_STATUS0_ON() volatile
    {
        return LPCG117_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG117_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG117_STATUS0(
        CCM_LPCG117_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG117_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG117_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG117_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG117_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG117_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG117_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG117_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG117_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG117_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG117_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG117_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG117_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG117_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG117_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG117_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG117_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG117_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG117_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG117_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG117_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG117_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG117_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG117_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG117_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG117_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG117_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG117_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG117_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG117_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG117_STATUS1_CPU3_MODE
    get_LPCG117_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG117_STATUS1_CPU3_MODE((LPCG117_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG117_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG117_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG117_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG117_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG117_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG117_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG117_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG117_STATUS1_CPU2_MODE
    get_LPCG117_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG117_STATUS1_CPU2_MODE((LPCG117_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG117_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG117_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG117_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG117_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG117_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG117_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG117_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG117_STATUS1_CPU1_MODE
    get_LPCG117_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG117_STATUS1_CPU1_MODE((LPCG117_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG117_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG117_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG117_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG117_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG117_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG117_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG117_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG117_STATUS1_CPU0_MODE
    get_LPCG117_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG117_STATUS1_CPU0_MODE((LPCG117_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG117_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG117_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG117_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG117_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG117_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG117_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG117_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG117_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG117_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG117_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG117_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG117_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG117_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG117_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG117_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG117_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG117_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG117_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG117_AUTHEN_LOCK_MODE() volatile
    {
        LPCG117_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG117_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG117_AUTHEN_LOCK_MODE() volatile
    {
        LPCG117_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG117_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG117_AUTHEN_LOCK_MODE() volatile
    {
        LPCG117_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG117_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG117_AUTHEN_CPULPM() volatile
    {
        return LPCG117_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG117_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG117_AUTHEN_CPULPM() volatile
    {
        LPCG117_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG117_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG117_AUTHEN_CPULPM() volatile
    {
        LPCG117_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG117_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG117_AUTHEN_CPULPM() volatile
    {
        LPCG117_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG117_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG117_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG117_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG117_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG117_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG117_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG117_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG117_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG117_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG117_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG117_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG117_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG117_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG117_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG117_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG117_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG117_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG117_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG117_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG117_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG117_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG117_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG117_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG117_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG117_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG117_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG117_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG117_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG117_AUTHEN_LOCK_LIST() volatile
    {
        LPCG117_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG117_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG117_AUTHEN_LOCK_LIST() volatile
    {
        LPCG117_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG117_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG117_AUTHEN_LOCK_LIST() volatile
    {
        LPCG117_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG117_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG117_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG117_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG117_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG117_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG117_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG117_AUTHEN = curr;
    }

    /**
     * Get LPCG117_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG117_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG117_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG117_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG117_AUTHEN_LOCK_TZ() volatile
    {
        LPCG117_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG117_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG117_AUTHEN_LOCK_TZ() volatile
    {
        LPCG117_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG117_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG117_AUTHEN_LOCK_TZ() volatile
    {
        LPCG117_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG117_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG117_AUTHEN_TZ_NS() volatile
    {
        return LPCG117_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG117_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG117_AUTHEN_TZ_NS() volatile
    {
        LPCG117_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG117_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG117_AUTHEN_TZ_NS() volatile
    {
        LPCG117_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG117_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG117_AUTHEN_TZ_NS() volatile
    {
        LPCG117_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG117_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG117_AUTHEN_TZ_USER() volatile
    {
        return LPCG117_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG117_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG117_AUTHEN_TZ_USER() volatile
    {
        LPCG117_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG117_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG117_AUTHEN_TZ_USER() volatile
    {
        LPCG117_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG117_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG117_AUTHEN_TZ_USER() volatile
    {
        LPCG117_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG117_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG117_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG117_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG117_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG117_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG117_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG117_AUTHEN = curr;
    }

    /**
     * Get LPCG118_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG118_DIRECT_ON() volatile
    {
        return LPCG118_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG118_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG118_DIRECT_ON() volatile
    {
        LPCG118_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG118_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG118_DIRECT_ON() volatile
    {
        LPCG118_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG118_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG118_DIRECT_ON() volatile
    {
        LPCG118_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG118_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG118_DOMAIN_LEVEL3 get_LPCG118_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG118_DOMAIN_LEVEL3((LPCG118_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG118_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG118_DOMAIN_LEVEL3(
        CCM_LPCG118_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG118_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG118_DOMAIN = curr;
    }

    /**
     * Get LPCG118_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG118_DOMAIN_LEVEL2 get_LPCG118_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG118_DOMAIN_LEVEL2((LPCG118_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG118_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG118_DOMAIN_LEVEL2(
        CCM_LPCG118_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG118_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG118_DOMAIN = curr;
    }

    /**
     * Get LPCG118_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG118_DOMAIN_LEVEL1 get_LPCG118_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG118_DOMAIN_LEVEL1((LPCG118_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG118_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG118_DOMAIN_LEVEL1(
        CCM_LPCG118_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG118_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG118_DOMAIN = curr;
    }

    /**
     * Get LPCG118_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG118_DOMAIN_LEVEL0 get_LPCG118_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG118_DOMAIN_LEVEL0((LPCG118_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG118_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG118_DOMAIN_LEVEL0(
        CCM_LPCG118_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG118_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG118_DOMAIN = curr;
    }

    /**
     * Get LPCG118_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG118_DOMAIN_LEVEL get_LPCG118_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG118_DOMAIN_LEVEL((LPCG118_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG118_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG118_DOMAIN_LEVEL(
        CCM_LPCG118_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG118_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG118_DOMAIN = curr;
    }

    /**
     * Get all of LPCG118_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG118_DOMAIN(CCM_LPCG118_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG118_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG118_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG118_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG118_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG118_DOMAIN;

        LEVEL3 = CCM_LPCG118_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG118_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG118_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG118_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG118_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG118_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG118_DOMAIN(CCM_LPCG118_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG118_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG118_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG118_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG118_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG118_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG118_DOMAIN = curr;
    }

    /**
     * Get LPCG118_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG118_STATUS0_DOMAIN_ENABLE
    get_LPCG118_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG118_STATUS0_DOMAIN_ENABLE((LPCG118_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG118_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG118_STATUS0_ACTIVE_DOMAIN
    get_LPCG118_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG118_STATUS0_ACTIVE_DOMAIN((LPCG118_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG118_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG118_STATUS0_ON() volatile
    {
        return LPCG118_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG118_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG118_STATUS0(
        CCM_LPCG118_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG118_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG118_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG118_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG118_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG118_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG118_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG118_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG118_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG118_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG118_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG118_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG118_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG118_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG118_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG118_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG118_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG118_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG118_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG118_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG118_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG118_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG118_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG118_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG118_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG118_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG118_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG118_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG118_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG118_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG118_STATUS1_CPU3_MODE
    get_LPCG118_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG118_STATUS1_CPU3_MODE((LPCG118_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG118_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG118_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG118_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG118_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG118_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG118_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG118_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG118_STATUS1_CPU2_MODE
    get_LPCG118_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG118_STATUS1_CPU2_MODE((LPCG118_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG118_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG118_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG118_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG118_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG118_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG118_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG118_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG118_STATUS1_CPU1_MODE
    get_LPCG118_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG118_STATUS1_CPU1_MODE((LPCG118_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG118_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG118_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG118_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG118_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG118_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG118_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG118_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG118_STATUS1_CPU0_MODE
    get_LPCG118_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG118_STATUS1_CPU0_MODE((LPCG118_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG118_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG118_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG118_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG118_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG118_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG118_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG118_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG118_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG118_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG118_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG118_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG118_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG118_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG118_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG118_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG118_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG118_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG118_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG118_AUTHEN_LOCK_MODE() volatile
    {
        LPCG118_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG118_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG118_AUTHEN_LOCK_MODE() volatile
    {
        LPCG118_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG118_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG118_AUTHEN_LOCK_MODE() volatile
    {
        LPCG118_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG118_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG118_AUTHEN_CPULPM() volatile
    {
        return LPCG118_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG118_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG118_AUTHEN_CPULPM() volatile
    {
        LPCG118_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG118_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG118_AUTHEN_CPULPM() volatile
    {
        LPCG118_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG118_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG118_AUTHEN_CPULPM() volatile
    {
        LPCG118_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG118_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG118_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG118_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG118_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG118_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG118_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG118_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG118_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG118_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG118_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG118_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG118_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG118_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG118_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG118_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG118_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG118_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG118_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG118_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG118_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG118_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG118_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG118_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG118_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG118_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG118_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG118_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG118_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG118_AUTHEN_LOCK_LIST() volatile
    {
        LPCG118_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG118_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG118_AUTHEN_LOCK_LIST() volatile
    {
        LPCG118_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG118_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG118_AUTHEN_LOCK_LIST() volatile
    {
        LPCG118_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG118_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG118_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG118_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG118_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG118_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG118_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG118_AUTHEN = curr;
    }

    /**
     * Get LPCG118_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG118_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG118_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG118_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG118_AUTHEN_LOCK_TZ() volatile
    {
        LPCG118_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG118_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG118_AUTHEN_LOCK_TZ() volatile
    {
        LPCG118_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG118_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG118_AUTHEN_LOCK_TZ() volatile
    {
        LPCG118_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG118_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG118_AUTHEN_TZ_NS() volatile
    {
        return LPCG118_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG118_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG118_AUTHEN_TZ_NS() volatile
    {
        LPCG118_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG118_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG118_AUTHEN_TZ_NS() volatile
    {
        LPCG118_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG118_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG118_AUTHEN_TZ_NS() volatile
    {
        LPCG118_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG118_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG118_AUTHEN_TZ_USER() volatile
    {
        return LPCG118_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG118_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG118_AUTHEN_TZ_USER() volatile
    {
        LPCG118_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG118_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG118_AUTHEN_TZ_USER() volatile
    {
        LPCG118_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG118_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG118_AUTHEN_TZ_USER() volatile
    {
        LPCG118_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG118_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG118_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG118_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG118_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG118_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG118_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG118_AUTHEN = curr;
    }

    /**
     * Get LPCG119_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG119_DIRECT_ON() volatile
    {
        return LPCG119_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG119_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG119_DIRECT_ON() volatile
    {
        LPCG119_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG119_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG119_DIRECT_ON() volatile
    {
        LPCG119_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG119_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG119_DIRECT_ON() volatile
    {
        LPCG119_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG119_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG119_DOMAIN_LEVEL3 get_LPCG119_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG119_DOMAIN_LEVEL3((LPCG119_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG119_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG119_DOMAIN_LEVEL3(
        CCM_LPCG119_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG119_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG119_DOMAIN = curr;
    }

    /**
     * Get LPCG119_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG119_DOMAIN_LEVEL2 get_LPCG119_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG119_DOMAIN_LEVEL2((LPCG119_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG119_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG119_DOMAIN_LEVEL2(
        CCM_LPCG119_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG119_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG119_DOMAIN = curr;
    }

    /**
     * Get LPCG119_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG119_DOMAIN_LEVEL1 get_LPCG119_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG119_DOMAIN_LEVEL1((LPCG119_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG119_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG119_DOMAIN_LEVEL1(
        CCM_LPCG119_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG119_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG119_DOMAIN = curr;
    }

    /**
     * Get LPCG119_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG119_DOMAIN_LEVEL0 get_LPCG119_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG119_DOMAIN_LEVEL0((LPCG119_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG119_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG119_DOMAIN_LEVEL0(
        CCM_LPCG119_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG119_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG119_DOMAIN = curr;
    }

    /**
     * Get LPCG119_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG119_DOMAIN_LEVEL get_LPCG119_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG119_DOMAIN_LEVEL((LPCG119_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG119_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG119_DOMAIN_LEVEL(
        CCM_LPCG119_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG119_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG119_DOMAIN = curr;
    }

    /**
     * Get all of LPCG119_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG119_DOMAIN(CCM_LPCG119_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG119_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG119_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG119_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG119_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG119_DOMAIN;

        LEVEL3 = CCM_LPCG119_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG119_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG119_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG119_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG119_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG119_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG119_DOMAIN(CCM_LPCG119_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG119_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG119_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG119_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG119_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG119_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG119_DOMAIN = curr;
    }

    /**
     * Get LPCG119_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG119_STATUS0_DOMAIN_ENABLE
    get_LPCG119_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG119_STATUS0_DOMAIN_ENABLE((LPCG119_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG119_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG119_STATUS0_ACTIVE_DOMAIN
    get_LPCG119_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG119_STATUS0_ACTIVE_DOMAIN((LPCG119_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG119_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG119_STATUS0_ON() volatile
    {
        return LPCG119_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG119_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG119_STATUS0(
        CCM_LPCG119_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG119_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG119_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG119_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG119_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG119_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG119_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG119_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG119_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG119_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG119_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG119_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG119_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG119_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG119_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG119_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG119_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG119_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG119_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG119_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG119_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG119_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG119_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG119_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG119_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG119_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG119_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG119_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG119_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG119_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG119_STATUS1_CPU3_MODE
    get_LPCG119_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG119_STATUS1_CPU3_MODE((LPCG119_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG119_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG119_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG119_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG119_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG119_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG119_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG119_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG119_STATUS1_CPU2_MODE
    get_LPCG119_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG119_STATUS1_CPU2_MODE((LPCG119_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG119_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG119_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG119_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG119_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG119_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG119_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG119_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG119_STATUS1_CPU1_MODE
    get_LPCG119_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG119_STATUS1_CPU1_MODE((LPCG119_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG119_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG119_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG119_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG119_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG119_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG119_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG119_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG119_STATUS1_CPU0_MODE
    get_LPCG119_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG119_STATUS1_CPU0_MODE((LPCG119_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG119_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG119_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG119_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG119_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG119_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG119_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG119_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG119_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG119_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG119_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG119_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG119_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG119_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG119_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG119_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG119_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG119_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG119_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG119_AUTHEN_LOCK_MODE() volatile
    {
        LPCG119_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG119_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG119_AUTHEN_LOCK_MODE() volatile
    {
        LPCG119_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG119_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG119_AUTHEN_LOCK_MODE() volatile
    {
        LPCG119_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG119_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG119_AUTHEN_CPULPM() volatile
    {
        return LPCG119_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG119_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG119_AUTHEN_CPULPM() volatile
    {
        LPCG119_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG119_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG119_AUTHEN_CPULPM() volatile
    {
        LPCG119_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG119_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG119_AUTHEN_CPULPM() volatile
    {
        LPCG119_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG119_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG119_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG119_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG119_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG119_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG119_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG119_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG119_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG119_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG119_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG119_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG119_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG119_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG119_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG119_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG119_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG119_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG119_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG119_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG119_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG119_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG119_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG119_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG119_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG119_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG119_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG119_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG119_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG119_AUTHEN_LOCK_LIST() volatile
    {
        LPCG119_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG119_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG119_AUTHEN_LOCK_LIST() volatile
    {
        LPCG119_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG119_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG119_AUTHEN_LOCK_LIST() volatile
    {
        LPCG119_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG119_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG119_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG119_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG119_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG119_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG119_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG119_AUTHEN = curr;
    }

    /**
     * Get LPCG119_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG119_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG119_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG119_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG119_AUTHEN_LOCK_TZ() volatile
    {
        LPCG119_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG119_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG119_AUTHEN_LOCK_TZ() volatile
    {
        LPCG119_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG119_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG119_AUTHEN_LOCK_TZ() volatile
    {
        LPCG119_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG119_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG119_AUTHEN_TZ_NS() volatile
    {
        return LPCG119_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG119_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG119_AUTHEN_TZ_NS() volatile
    {
        LPCG119_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG119_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG119_AUTHEN_TZ_NS() volatile
    {
        LPCG119_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG119_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG119_AUTHEN_TZ_NS() volatile
    {
        LPCG119_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG119_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG119_AUTHEN_TZ_USER() volatile
    {
        return LPCG119_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG119_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG119_AUTHEN_TZ_USER() volatile
    {
        LPCG119_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG119_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG119_AUTHEN_TZ_USER() volatile
    {
        LPCG119_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG119_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG119_AUTHEN_TZ_USER() volatile
    {
        LPCG119_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG119_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG119_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG119_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG119_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG119_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG119_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG119_AUTHEN = curr;
    }

    /**
     * Get LPCG120_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG120_DIRECT_ON() volatile
    {
        return LPCG120_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG120_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG120_DIRECT_ON() volatile
    {
        LPCG120_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG120_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG120_DIRECT_ON() volatile
    {
        LPCG120_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG120_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG120_DIRECT_ON() volatile
    {
        LPCG120_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG120_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG120_DOMAIN_LEVEL3 get_LPCG120_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG120_DOMAIN_LEVEL3((LPCG120_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG120_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG120_DOMAIN_LEVEL3(
        CCM_LPCG120_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG120_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG120_DOMAIN = curr;
    }

    /**
     * Get LPCG120_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG120_DOMAIN_LEVEL2 get_LPCG120_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG120_DOMAIN_LEVEL2((LPCG120_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG120_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG120_DOMAIN_LEVEL2(
        CCM_LPCG120_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG120_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG120_DOMAIN = curr;
    }

    /**
     * Get LPCG120_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG120_DOMAIN_LEVEL1 get_LPCG120_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG120_DOMAIN_LEVEL1((LPCG120_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG120_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG120_DOMAIN_LEVEL1(
        CCM_LPCG120_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG120_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG120_DOMAIN = curr;
    }

    /**
     * Get LPCG120_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG120_DOMAIN_LEVEL0 get_LPCG120_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG120_DOMAIN_LEVEL0((LPCG120_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG120_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG120_DOMAIN_LEVEL0(
        CCM_LPCG120_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG120_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG120_DOMAIN = curr;
    }

    /**
     * Get LPCG120_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG120_DOMAIN_LEVEL get_LPCG120_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG120_DOMAIN_LEVEL((LPCG120_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG120_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG120_DOMAIN_LEVEL(
        CCM_LPCG120_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG120_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG120_DOMAIN = curr;
    }

    /**
     * Get all of LPCG120_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG120_DOMAIN(CCM_LPCG120_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG120_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG120_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG120_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG120_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG120_DOMAIN;

        LEVEL3 = CCM_LPCG120_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG120_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG120_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG120_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG120_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG120_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG120_DOMAIN(CCM_LPCG120_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG120_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG120_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG120_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG120_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG120_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG120_DOMAIN = curr;
    }

    /**
     * Get LPCG120_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG120_STATUS0_DOMAIN_ENABLE
    get_LPCG120_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG120_STATUS0_DOMAIN_ENABLE((LPCG120_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG120_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG120_STATUS0_ACTIVE_DOMAIN
    get_LPCG120_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG120_STATUS0_ACTIVE_DOMAIN((LPCG120_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG120_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG120_STATUS0_ON() volatile
    {
        return LPCG120_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG120_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG120_STATUS0(
        CCM_LPCG120_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG120_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG120_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG120_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG120_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG120_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG120_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG120_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG120_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG120_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG120_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG120_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG120_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG120_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG120_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG120_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG120_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG120_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG120_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG120_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG120_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG120_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG120_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG120_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG120_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG120_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG120_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG120_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG120_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG120_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG120_STATUS1_CPU3_MODE
    get_LPCG120_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG120_STATUS1_CPU3_MODE((LPCG120_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG120_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG120_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG120_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG120_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG120_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG120_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG120_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG120_STATUS1_CPU2_MODE
    get_LPCG120_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG120_STATUS1_CPU2_MODE((LPCG120_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG120_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG120_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG120_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG120_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG120_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG120_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG120_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG120_STATUS1_CPU1_MODE
    get_LPCG120_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG120_STATUS1_CPU1_MODE((LPCG120_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG120_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG120_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG120_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG120_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG120_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG120_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG120_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG120_STATUS1_CPU0_MODE
    get_LPCG120_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG120_STATUS1_CPU0_MODE((LPCG120_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG120_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG120_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG120_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG120_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG120_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG120_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG120_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG120_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG120_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG120_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG120_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG120_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG120_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG120_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG120_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG120_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG120_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG120_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG120_AUTHEN_LOCK_MODE() volatile
    {
        LPCG120_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG120_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG120_AUTHEN_LOCK_MODE() volatile
    {
        LPCG120_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG120_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG120_AUTHEN_LOCK_MODE() volatile
    {
        LPCG120_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG120_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG120_AUTHEN_CPULPM() volatile
    {
        return LPCG120_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG120_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG120_AUTHEN_CPULPM() volatile
    {
        LPCG120_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG120_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG120_AUTHEN_CPULPM() volatile
    {
        LPCG120_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG120_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG120_AUTHEN_CPULPM() volatile
    {
        LPCG120_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG120_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG120_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG120_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG120_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG120_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG120_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG120_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG120_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG120_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG120_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG120_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG120_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG120_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG120_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG120_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG120_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG120_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG120_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG120_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG120_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG120_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG120_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG120_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG120_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG120_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG120_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG120_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG120_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG120_AUTHEN_LOCK_LIST() volatile
    {
        LPCG120_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG120_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG120_AUTHEN_LOCK_LIST() volatile
    {
        LPCG120_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG120_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG120_AUTHEN_LOCK_LIST() volatile
    {
        LPCG120_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG120_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG120_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG120_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG120_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG120_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG120_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG120_AUTHEN = curr;
    }

    /**
     * Get LPCG120_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG120_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG120_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG120_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG120_AUTHEN_LOCK_TZ() volatile
    {
        LPCG120_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG120_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG120_AUTHEN_LOCK_TZ() volatile
    {
        LPCG120_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG120_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG120_AUTHEN_LOCK_TZ() volatile
    {
        LPCG120_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG120_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG120_AUTHEN_TZ_NS() volatile
    {
        return LPCG120_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG120_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG120_AUTHEN_TZ_NS() volatile
    {
        LPCG120_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG120_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG120_AUTHEN_TZ_NS() volatile
    {
        LPCG120_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG120_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG120_AUTHEN_TZ_NS() volatile
    {
        LPCG120_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG120_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG120_AUTHEN_TZ_USER() volatile
    {
        return LPCG120_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG120_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG120_AUTHEN_TZ_USER() volatile
    {
        LPCG120_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG120_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG120_AUTHEN_TZ_USER() volatile
    {
        LPCG120_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG120_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG120_AUTHEN_TZ_USER() volatile
    {
        LPCG120_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG120_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG120_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG120_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG120_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG120_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG120_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG120_AUTHEN = curr;
    }

    /**
     * Get LPCG121_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG121_DIRECT_ON() volatile
    {
        return LPCG121_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG121_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG121_DIRECT_ON() volatile
    {
        LPCG121_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG121_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG121_DIRECT_ON() volatile
    {
        LPCG121_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG121_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG121_DIRECT_ON() volatile
    {
        LPCG121_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG121_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG121_DOMAIN_LEVEL3 get_LPCG121_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG121_DOMAIN_LEVEL3((LPCG121_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG121_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG121_DOMAIN_LEVEL3(
        CCM_LPCG121_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG121_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG121_DOMAIN = curr;
    }

    /**
     * Get LPCG121_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG121_DOMAIN_LEVEL2 get_LPCG121_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG121_DOMAIN_LEVEL2((LPCG121_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG121_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG121_DOMAIN_LEVEL2(
        CCM_LPCG121_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG121_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG121_DOMAIN = curr;
    }

    /**
     * Get LPCG121_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG121_DOMAIN_LEVEL1 get_LPCG121_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG121_DOMAIN_LEVEL1((LPCG121_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG121_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG121_DOMAIN_LEVEL1(
        CCM_LPCG121_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG121_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG121_DOMAIN = curr;
    }

    /**
     * Get LPCG121_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG121_DOMAIN_LEVEL0 get_LPCG121_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG121_DOMAIN_LEVEL0((LPCG121_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG121_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG121_DOMAIN_LEVEL0(
        CCM_LPCG121_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG121_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG121_DOMAIN = curr;
    }

    /**
     * Get LPCG121_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG121_DOMAIN_LEVEL get_LPCG121_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG121_DOMAIN_LEVEL((LPCG121_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG121_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG121_DOMAIN_LEVEL(
        CCM_LPCG121_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG121_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG121_DOMAIN = curr;
    }

    /**
     * Get all of LPCG121_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG121_DOMAIN(CCM_LPCG121_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG121_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG121_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG121_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG121_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG121_DOMAIN;

        LEVEL3 = CCM_LPCG121_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG121_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG121_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG121_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG121_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG121_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG121_DOMAIN(CCM_LPCG121_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG121_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG121_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG121_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG121_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG121_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG121_DOMAIN = curr;
    }

    /**
     * Get LPCG121_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG121_STATUS0_DOMAIN_ENABLE
    get_LPCG121_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG121_STATUS0_DOMAIN_ENABLE((LPCG121_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG121_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG121_STATUS0_ACTIVE_DOMAIN
    get_LPCG121_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG121_STATUS0_ACTIVE_DOMAIN((LPCG121_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG121_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG121_STATUS0_ON() volatile
    {
        return LPCG121_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG121_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG121_STATUS0(
        CCM_LPCG121_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG121_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG121_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG121_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG121_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG121_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG121_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG121_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG121_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG121_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG121_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG121_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG121_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG121_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG121_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG121_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG121_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG121_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG121_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG121_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG121_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG121_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG121_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG121_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG121_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG121_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG121_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG121_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG121_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG121_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG121_STATUS1_CPU3_MODE
    get_LPCG121_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG121_STATUS1_CPU3_MODE((LPCG121_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG121_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG121_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG121_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG121_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG121_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG121_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG121_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG121_STATUS1_CPU2_MODE
    get_LPCG121_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG121_STATUS1_CPU2_MODE((LPCG121_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG121_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG121_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG121_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG121_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG121_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG121_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG121_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG121_STATUS1_CPU1_MODE
    get_LPCG121_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG121_STATUS1_CPU1_MODE((LPCG121_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG121_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG121_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG121_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG121_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG121_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG121_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG121_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG121_STATUS1_CPU0_MODE
    get_LPCG121_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG121_STATUS1_CPU0_MODE((LPCG121_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG121_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG121_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG121_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG121_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG121_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG121_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG121_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG121_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG121_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG121_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG121_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG121_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG121_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG121_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG121_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG121_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG121_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG121_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG121_AUTHEN_LOCK_MODE() volatile
    {
        LPCG121_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG121_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG121_AUTHEN_LOCK_MODE() volatile
    {
        LPCG121_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG121_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG121_AUTHEN_LOCK_MODE() volatile
    {
        LPCG121_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG121_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG121_AUTHEN_CPULPM() volatile
    {
        return LPCG121_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG121_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG121_AUTHEN_CPULPM() volatile
    {
        LPCG121_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG121_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG121_AUTHEN_CPULPM() volatile
    {
        LPCG121_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG121_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG121_AUTHEN_CPULPM() volatile
    {
        LPCG121_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG121_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG121_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG121_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG121_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG121_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG121_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG121_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG121_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG121_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG121_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG121_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG121_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG121_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG121_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG121_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG121_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG121_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG121_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG121_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG121_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG121_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG121_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG121_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG121_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG121_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG121_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG121_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG121_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG121_AUTHEN_LOCK_LIST() volatile
    {
        LPCG121_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG121_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG121_AUTHEN_LOCK_LIST() volatile
    {
        LPCG121_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG121_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG121_AUTHEN_LOCK_LIST() volatile
    {
        LPCG121_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG121_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG121_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG121_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG121_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG121_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG121_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG121_AUTHEN = curr;
    }

    /**
     * Get LPCG121_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG121_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG121_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG121_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG121_AUTHEN_LOCK_TZ() volatile
    {
        LPCG121_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG121_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG121_AUTHEN_LOCK_TZ() volatile
    {
        LPCG121_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG121_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG121_AUTHEN_LOCK_TZ() volatile
    {
        LPCG121_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG121_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG121_AUTHEN_TZ_NS() volatile
    {
        return LPCG121_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG121_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG121_AUTHEN_TZ_NS() volatile
    {
        LPCG121_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG121_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG121_AUTHEN_TZ_NS() volatile
    {
        LPCG121_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG121_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG121_AUTHEN_TZ_NS() volatile
    {
        LPCG121_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG121_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG121_AUTHEN_TZ_USER() volatile
    {
        return LPCG121_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG121_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG121_AUTHEN_TZ_USER() volatile
    {
        LPCG121_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG121_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG121_AUTHEN_TZ_USER() volatile
    {
        LPCG121_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG121_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG121_AUTHEN_TZ_USER() volatile
    {
        LPCG121_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG121_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG121_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG121_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG121_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG121_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG121_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG121_AUTHEN = curr;
    }

    /**
     * Get LPCG122_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG122_DIRECT_ON() volatile
    {
        return LPCG122_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG122_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG122_DIRECT_ON() volatile
    {
        LPCG122_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG122_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG122_DIRECT_ON() volatile
    {
        LPCG122_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG122_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG122_DIRECT_ON() volatile
    {
        LPCG122_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG122_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG122_DOMAIN_LEVEL3 get_LPCG122_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG122_DOMAIN_LEVEL3((LPCG122_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG122_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG122_DOMAIN_LEVEL3(
        CCM_LPCG122_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG122_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG122_DOMAIN = curr;
    }

    /**
     * Get LPCG122_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG122_DOMAIN_LEVEL2 get_LPCG122_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG122_DOMAIN_LEVEL2((LPCG122_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG122_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG122_DOMAIN_LEVEL2(
        CCM_LPCG122_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG122_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG122_DOMAIN = curr;
    }

    /**
     * Get LPCG122_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG122_DOMAIN_LEVEL1 get_LPCG122_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG122_DOMAIN_LEVEL1((LPCG122_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG122_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG122_DOMAIN_LEVEL1(
        CCM_LPCG122_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG122_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG122_DOMAIN = curr;
    }

    /**
     * Get LPCG122_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG122_DOMAIN_LEVEL0 get_LPCG122_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG122_DOMAIN_LEVEL0((LPCG122_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG122_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG122_DOMAIN_LEVEL0(
        CCM_LPCG122_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG122_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG122_DOMAIN = curr;
    }

    /**
     * Get LPCG122_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG122_DOMAIN_LEVEL get_LPCG122_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG122_DOMAIN_LEVEL((LPCG122_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG122_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG122_DOMAIN_LEVEL(
        CCM_LPCG122_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG122_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG122_DOMAIN = curr;
    }

    /**
     * Get all of LPCG122_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG122_DOMAIN(CCM_LPCG122_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG122_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG122_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG122_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG122_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG122_DOMAIN;

        LEVEL3 = CCM_LPCG122_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG122_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG122_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG122_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG122_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG122_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG122_DOMAIN(CCM_LPCG122_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG122_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG122_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG122_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG122_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG122_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG122_DOMAIN = curr;
    }

    /**
     * Get LPCG122_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG122_STATUS0_DOMAIN_ENABLE
    get_LPCG122_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG122_STATUS0_DOMAIN_ENABLE((LPCG122_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG122_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG122_STATUS0_ACTIVE_DOMAIN
    get_LPCG122_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG122_STATUS0_ACTIVE_DOMAIN((LPCG122_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG122_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG122_STATUS0_ON() volatile
    {
        return LPCG122_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG122_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG122_STATUS0(
        CCM_LPCG122_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG122_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG122_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG122_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG122_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG122_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG122_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG122_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG122_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG122_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG122_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG122_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG122_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG122_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG122_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG122_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG122_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG122_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG122_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG122_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG122_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG122_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG122_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG122_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG122_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG122_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG122_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG122_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG122_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG122_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG122_STATUS1_CPU3_MODE
    get_LPCG122_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG122_STATUS1_CPU3_MODE((LPCG122_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG122_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG122_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG122_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG122_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG122_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG122_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG122_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG122_STATUS1_CPU2_MODE
    get_LPCG122_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG122_STATUS1_CPU2_MODE((LPCG122_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG122_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG122_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG122_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG122_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG122_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG122_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG122_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG122_STATUS1_CPU1_MODE
    get_LPCG122_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG122_STATUS1_CPU1_MODE((LPCG122_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG122_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG122_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG122_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG122_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG122_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG122_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG122_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG122_STATUS1_CPU0_MODE
    get_LPCG122_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG122_STATUS1_CPU0_MODE((LPCG122_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG122_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG122_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG122_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG122_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG122_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG122_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG122_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG122_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG122_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG122_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG122_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG122_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG122_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG122_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG122_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG122_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG122_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG122_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG122_AUTHEN_LOCK_MODE() volatile
    {
        LPCG122_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG122_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG122_AUTHEN_LOCK_MODE() volatile
    {
        LPCG122_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG122_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG122_AUTHEN_LOCK_MODE() volatile
    {
        LPCG122_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG122_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG122_AUTHEN_CPULPM() volatile
    {
        return LPCG122_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG122_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG122_AUTHEN_CPULPM() volatile
    {
        LPCG122_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG122_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG122_AUTHEN_CPULPM() volatile
    {
        LPCG122_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG122_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG122_AUTHEN_CPULPM() volatile
    {
        LPCG122_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG122_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG122_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG122_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG122_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG122_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG122_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG122_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG122_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG122_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG122_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG122_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG122_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG122_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG122_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG122_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG122_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG122_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG122_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG122_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG122_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG122_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG122_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG122_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG122_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG122_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG122_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG122_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG122_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG122_AUTHEN_LOCK_LIST() volatile
    {
        LPCG122_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG122_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG122_AUTHEN_LOCK_LIST() volatile
    {
        LPCG122_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG122_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG122_AUTHEN_LOCK_LIST() volatile
    {
        LPCG122_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG122_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG122_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG122_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG122_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG122_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG122_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG122_AUTHEN = curr;
    }

    /**
     * Get LPCG122_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG122_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG122_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG122_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG122_AUTHEN_LOCK_TZ() volatile
    {
        LPCG122_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG122_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG122_AUTHEN_LOCK_TZ() volatile
    {
        LPCG122_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG122_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG122_AUTHEN_LOCK_TZ() volatile
    {
        LPCG122_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG122_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG122_AUTHEN_TZ_NS() volatile
    {
        return LPCG122_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG122_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG122_AUTHEN_TZ_NS() volatile
    {
        LPCG122_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG122_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG122_AUTHEN_TZ_NS() volatile
    {
        LPCG122_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG122_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG122_AUTHEN_TZ_NS() volatile
    {
        LPCG122_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG122_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG122_AUTHEN_TZ_USER() volatile
    {
        return LPCG122_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG122_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG122_AUTHEN_TZ_USER() volatile
    {
        LPCG122_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG122_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG122_AUTHEN_TZ_USER() volatile
    {
        LPCG122_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG122_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG122_AUTHEN_TZ_USER() volatile
    {
        LPCG122_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG122_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG122_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG122_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG122_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG122_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG122_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG122_AUTHEN = curr;
    }

    /**
     * Get LPCG123_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG123_DIRECT_ON() volatile
    {
        return LPCG123_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG123_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG123_DIRECT_ON() volatile
    {
        LPCG123_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG123_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG123_DIRECT_ON() volatile
    {
        LPCG123_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG123_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG123_DIRECT_ON() volatile
    {
        LPCG123_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG123_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG123_DOMAIN_LEVEL3 get_LPCG123_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG123_DOMAIN_LEVEL3((LPCG123_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG123_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG123_DOMAIN_LEVEL3(
        CCM_LPCG123_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG123_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG123_DOMAIN = curr;
    }

    /**
     * Get LPCG123_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG123_DOMAIN_LEVEL2 get_LPCG123_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG123_DOMAIN_LEVEL2((LPCG123_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG123_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG123_DOMAIN_LEVEL2(
        CCM_LPCG123_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG123_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG123_DOMAIN = curr;
    }

    /**
     * Get LPCG123_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG123_DOMAIN_LEVEL1 get_LPCG123_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG123_DOMAIN_LEVEL1((LPCG123_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG123_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG123_DOMAIN_LEVEL1(
        CCM_LPCG123_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG123_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG123_DOMAIN = curr;
    }

    /**
     * Get LPCG123_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG123_DOMAIN_LEVEL0 get_LPCG123_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG123_DOMAIN_LEVEL0((LPCG123_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG123_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG123_DOMAIN_LEVEL0(
        CCM_LPCG123_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG123_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG123_DOMAIN = curr;
    }

    /**
     * Get LPCG123_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG123_DOMAIN_LEVEL get_LPCG123_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG123_DOMAIN_LEVEL((LPCG123_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG123_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG123_DOMAIN_LEVEL(
        CCM_LPCG123_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG123_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG123_DOMAIN = curr;
    }

    /**
     * Get all of LPCG123_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG123_DOMAIN(CCM_LPCG123_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG123_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG123_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG123_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG123_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG123_DOMAIN;

        LEVEL3 = CCM_LPCG123_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG123_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG123_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG123_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG123_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG123_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG123_DOMAIN(CCM_LPCG123_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG123_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG123_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG123_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG123_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG123_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG123_DOMAIN = curr;
    }

    /**
     * Get LPCG123_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG123_STATUS0_DOMAIN_ENABLE
    get_LPCG123_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG123_STATUS0_DOMAIN_ENABLE((LPCG123_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG123_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG123_STATUS0_ACTIVE_DOMAIN
    get_LPCG123_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG123_STATUS0_ACTIVE_DOMAIN((LPCG123_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG123_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG123_STATUS0_ON() volatile
    {
        return LPCG123_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG123_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG123_STATUS0(
        CCM_LPCG123_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG123_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG123_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG123_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG123_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG123_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG123_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG123_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG123_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG123_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG123_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG123_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG123_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG123_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG123_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG123_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG123_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG123_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG123_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG123_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG123_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG123_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG123_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG123_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG123_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG123_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG123_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG123_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG123_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG123_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG123_STATUS1_CPU3_MODE
    get_LPCG123_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG123_STATUS1_CPU3_MODE((LPCG123_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG123_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG123_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG123_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG123_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG123_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG123_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG123_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG123_STATUS1_CPU2_MODE
    get_LPCG123_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG123_STATUS1_CPU2_MODE((LPCG123_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG123_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG123_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG123_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG123_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG123_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG123_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG123_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG123_STATUS1_CPU1_MODE
    get_LPCG123_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG123_STATUS1_CPU1_MODE((LPCG123_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG123_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG123_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG123_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG123_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG123_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG123_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG123_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG123_STATUS1_CPU0_MODE
    get_LPCG123_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG123_STATUS1_CPU0_MODE((LPCG123_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG123_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG123_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG123_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG123_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG123_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG123_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG123_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG123_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG123_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG123_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG123_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG123_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG123_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG123_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG123_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG123_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG123_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG123_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG123_AUTHEN_LOCK_MODE() volatile
    {
        LPCG123_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG123_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG123_AUTHEN_LOCK_MODE() volatile
    {
        LPCG123_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG123_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG123_AUTHEN_LOCK_MODE() volatile
    {
        LPCG123_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG123_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG123_AUTHEN_CPULPM() volatile
    {
        return LPCG123_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG123_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG123_AUTHEN_CPULPM() volatile
    {
        LPCG123_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG123_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG123_AUTHEN_CPULPM() volatile
    {
        LPCG123_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG123_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG123_AUTHEN_CPULPM() volatile
    {
        LPCG123_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG123_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG123_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG123_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG123_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG123_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG123_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG123_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG123_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG123_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG123_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG123_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG123_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG123_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG123_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG123_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG123_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG123_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG123_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG123_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG123_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG123_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG123_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG123_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG123_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG123_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG123_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG123_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG123_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG123_AUTHEN_LOCK_LIST() volatile
    {
        LPCG123_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG123_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG123_AUTHEN_LOCK_LIST() volatile
    {
        LPCG123_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG123_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG123_AUTHEN_LOCK_LIST() volatile
    {
        LPCG123_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG123_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG123_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG123_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG123_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG123_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG123_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG123_AUTHEN = curr;
    }

    /**
     * Get LPCG123_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG123_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG123_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG123_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG123_AUTHEN_LOCK_TZ() volatile
    {
        LPCG123_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG123_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG123_AUTHEN_LOCK_TZ() volatile
    {
        LPCG123_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG123_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG123_AUTHEN_LOCK_TZ() volatile
    {
        LPCG123_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG123_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG123_AUTHEN_TZ_NS() volatile
    {
        return LPCG123_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG123_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG123_AUTHEN_TZ_NS() volatile
    {
        LPCG123_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG123_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG123_AUTHEN_TZ_NS() volatile
    {
        LPCG123_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG123_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG123_AUTHEN_TZ_NS() volatile
    {
        LPCG123_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG123_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG123_AUTHEN_TZ_USER() volatile
    {
        return LPCG123_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG123_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG123_AUTHEN_TZ_USER() volatile
    {
        LPCG123_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG123_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG123_AUTHEN_TZ_USER() volatile
    {
        LPCG123_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG123_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG123_AUTHEN_TZ_USER() volatile
    {
        LPCG123_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG123_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG123_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG123_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG123_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG123_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG123_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG123_AUTHEN = curr;
    }

    /**
     * Get LPCG124_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG124_DIRECT_ON() volatile
    {
        return LPCG124_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG124_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG124_DIRECT_ON() volatile
    {
        LPCG124_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG124_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG124_DIRECT_ON() volatile
    {
        LPCG124_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG124_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG124_DIRECT_ON() volatile
    {
        LPCG124_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG124_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG124_DOMAIN_LEVEL3 get_LPCG124_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG124_DOMAIN_LEVEL3((LPCG124_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG124_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG124_DOMAIN_LEVEL3(
        CCM_LPCG124_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG124_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG124_DOMAIN = curr;
    }

    /**
     * Get LPCG124_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG124_DOMAIN_LEVEL2 get_LPCG124_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG124_DOMAIN_LEVEL2((LPCG124_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG124_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG124_DOMAIN_LEVEL2(
        CCM_LPCG124_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG124_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG124_DOMAIN = curr;
    }

    /**
     * Get LPCG124_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG124_DOMAIN_LEVEL1 get_LPCG124_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG124_DOMAIN_LEVEL1((LPCG124_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG124_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG124_DOMAIN_LEVEL1(
        CCM_LPCG124_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG124_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG124_DOMAIN = curr;
    }

    /**
     * Get LPCG124_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG124_DOMAIN_LEVEL0 get_LPCG124_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG124_DOMAIN_LEVEL0((LPCG124_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG124_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG124_DOMAIN_LEVEL0(
        CCM_LPCG124_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG124_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG124_DOMAIN = curr;
    }

    /**
     * Get LPCG124_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG124_DOMAIN_LEVEL get_LPCG124_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG124_DOMAIN_LEVEL((LPCG124_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG124_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG124_DOMAIN_LEVEL(
        CCM_LPCG124_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG124_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG124_DOMAIN = curr;
    }

    /**
     * Get all of LPCG124_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG124_DOMAIN(CCM_LPCG124_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG124_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG124_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG124_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG124_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG124_DOMAIN;

        LEVEL3 = CCM_LPCG124_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG124_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG124_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG124_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG124_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG124_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG124_DOMAIN(CCM_LPCG124_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG124_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG124_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG124_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG124_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG124_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG124_DOMAIN = curr;
    }

    /**
     * Get LPCG124_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG124_STATUS0_DOMAIN_ENABLE
    get_LPCG124_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG124_STATUS0_DOMAIN_ENABLE((LPCG124_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG124_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG124_STATUS0_ACTIVE_DOMAIN
    get_LPCG124_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG124_STATUS0_ACTIVE_DOMAIN((LPCG124_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG124_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG124_STATUS0_ON() volatile
    {
        return LPCG124_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG124_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG124_STATUS0(
        CCM_LPCG124_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG124_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG124_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG124_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG124_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG124_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG124_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG124_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG124_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG124_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG124_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG124_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG124_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG124_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG124_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG124_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG124_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG124_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG124_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG124_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG124_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG124_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG124_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG124_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG124_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG124_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG124_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG124_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG124_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG124_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG124_STATUS1_CPU3_MODE
    get_LPCG124_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG124_STATUS1_CPU3_MODE((LPCG124_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG124_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG124_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG124_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG124_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG124_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG124_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG124_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG124_STATUS1_CPU2_MODE
    get_LPCG124_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG124_STATUS1_CPU2_MODE((LPCG124_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG124_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG124_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG124_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG124_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG124_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG124_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG124_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG124_STATUS1_CPU1_MODE
    get_LPCG124_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG124_STATUS1_CPU1_MODE((LPCG124_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG124_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG124_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG124_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG124_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG124_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG124_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG124_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG124_STATUS1_CPU0_MODE
    get_LPCG124_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG124_STATUS1_CPU0_MODE((LPCG124_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG124_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG124_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG124_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG124_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG124_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG124_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG124_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG124_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG124_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG124_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG124_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG124_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG124_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG124_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG124_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG124_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG124_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG124_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG124_AUTHEN_LOCK_MODE() volatile
    {
        LPCG124_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG124_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG124_AUTHEN_LOCK_MODE() volatile
    {
        LPCG124_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG124_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG124_AUTHEN_LOCK_MODE() volatile
    {
        LPCG124_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG124_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG124_AUTHEN_CPULPM() volatile
    {
        return LPCG124_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG124_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG124_AUTHEN_CPULPM() volatile
    {
        LPCG124_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG124_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG124_AUTHEN_CPULPM() volatile
    {
        LPCG124_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG124_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG124_AUTHEN_CPULPM() volatile
    {
        LPCG124_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG124_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG124_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG124_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG124_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG124_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG124_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG124_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG124_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG124_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG124_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG124_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG124_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG124_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG124_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG124_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG124_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG124_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG124_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG124_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG124_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG124_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG124_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG124_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG124_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG124_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG124_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG124_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG124_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG124_AUTHEN_LOCK_LIST() volatile
    {
        LPCG124_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG124_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG124_AUTHEN_LOCK_LIST() volatile
    {
        LPCG124_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG124_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG124_AUTHEN_LOCK_LIST() volatile
    {
        LPCG124_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG124_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG124_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG124_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG124_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG124_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG124_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG124_AUTHEN = curr;
    }

    /**
     * Get LPCG124_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG124_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG124_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG124_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG124_AUTHEN_LOCK_TZ() volatile
    {
        LPCG124_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG124_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG124_AUTHEN_LOCK_TZ() volatile
    {
        LPCG124_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG124_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG124_AUTHEN_LOCK_TZ() volatile
    {
        LPCG124_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG124_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG124_AUTHEN_TZ_NS() volatile
    {
        return LPCG124_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG124_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG124_AUTHEN_TZ_NS() volatile
    {
        LPCG124_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG124_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG124_AUTHEN_TZ_NS() volatile
    {
        LPCG124_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG124_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG124_AUTHEN_TZ_NS() volatile
    {
        LPCG124_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG124_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG124_AUTHEN_TZ_USER() volatile
    {
        return LPCG124_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG124_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG124_AUTHEN_TZ_USER() volatile
    {
        LPCG124_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG124_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG124_AUTHEN_TZ_USER() volatile
    {
        LPCG124_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG124_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG124_AUTHEN_TZ_USER() volatile
    {
        LPCG124_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG124_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG124_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG124_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG124_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG124_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG124_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG124_AUTHEN = curr;
    }

    /**
     * Get LPCG125_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG125_DIRECT_ON() volatile
    {
        return LPCG125_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG125_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG125_DIRECT_ON() volatile
    {
        LPCG125_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG125_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG125_DIRECT_ON() volatile
    {
        LPCG125_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG125_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG125_DIRECT_ON() volatile
    {
        LPCG125_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG125_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG125_DOMAIN_LEVEL3 get_LPCG125_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG125_DOMAIN_LEVEL3((LPCG125_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG125_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG125_DOMAIN_LEVEL3(
        CCM_LPCG125_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG125_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG125_DOMAIN = curr;
    }

    /**
     * Get LPCG125_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG125_DOMAIN_LEVEL2 get_LPCG125_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG125_DOMAIN_LEVEL2((LPCG125_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG125_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG125_DOMAIN_LEVEL2(
        CCM_LPCG125_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG125_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG125_DOMAIN = curr;
    }

    /**
     * Get LPCG125_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG125_DOMAIN_LEVEL1 get_LPCG125_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG125_DOMAIN_LEVEL1((LPCG125_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG125_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG125_DOMAIN_LEVEL1(
        CCM_LPCG125_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG125_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG125_DOMAIN = curr;
    }

    /**
     * Get LPCG125_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG125_DOMAIN_LEVEL0 get_LPCG125_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG125_DOMAIN_LEVEL0((LPCG125_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG125_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG125_DOMAIN_LEVEL0(
        CCM_LPCG125_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG125_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG125_DOMAIN = curr;
    }

    /**
     * Get LPCG125_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG125_DOMAIN_LEVEL get_LPCG125_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG125_DOMAIN_LEVEL((LPCG125_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG125_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG125_DOMAIN_LEVEL(
        CCM_LPCG125_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG125_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG125_DOMAIN = curr;
    }

    /**
     * Get all of LPCG125_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG125_DOMAIN(CCM_LPCG125_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG125_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG125_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG125_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG125_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG125_DOMAIN;

        LEVEL3 = CCM_LPCG125_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG125_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG125_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG125_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG125_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG125_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG125_DOMAIN(CCM_LPCG125_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG125_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG125_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG125_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG125_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG125_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG125_DOMAIN = curr;
    }

    /**
     * Get LPCG125_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG125_STATUS0_DOMAIN_ENABLE
    get_LPCG125_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG125_STATUS0_DOMAIN_ENABLE((LPCG125_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG125_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG125_STATUS0_ACTIVE_DOMAIN
    get_LPCG125_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG125_STATUS0_ACTIVE_DOMAIN((LPCG125_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG125_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG125_STATUS0_ON() volatile
    {
        return LPCG125_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG125_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG125_STATUS0(
        CCM_LPCG125_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG125_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG125_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG125_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG125_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG125_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG125_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG125_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG125_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG125_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG125_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG125_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG125_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG125_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG125_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG125_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG125_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG125_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG125_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG125_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG125_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG125_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG125_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG125_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG125_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG125_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG125_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG125_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG125_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG125_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG125_STATUS1_CPU3_MODE
    get_LPCG125_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG125_STATUS1_CPU3_MODE((LPCG125_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG125_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG125_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG125_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG125_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG125_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG125_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG125_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG125_STATUS1_CPU2_MODE
    get_LPCG125_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG125_STATUS1_CPU2_MODE((LPCG125_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG125_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG125_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG125_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG125_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG125_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG125_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG125_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG125_STATUS1_CPU1_MODE
    get_LPCG125_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG125_STATUS1_CPU1_MODE((LPCG125_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG125_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG125_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG125_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG125_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG125_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG125_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG125_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG125_STATUS1_CPU0_MODE
    get_LPCG125_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG125_STATUS1_CPU0_MODE((LPCG125_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG125_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG125_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG125_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG125_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG125_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG125_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG125_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG125_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG125_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG125_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG125_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG125_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG125_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG125_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG125_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG125_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG125_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG125_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG125_AUTHEN_LOCK_MODE() volatile
    {
        LPCG125_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG125_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG125_AUTHEN_LOCK_MODE() volatile
    {
        LPCG125_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG125_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG125_AUTHEN_LOCK_MODE() volatile
    {
        LPCG125_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG125_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG125_AUTHEN_CPULPM() volatile
    {
        return LPCG125_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG125_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG125_AUTHEN_CPULPM() volatile
    {
        LPCG125_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG125_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG125_AUTHEN_CPULPM() volatile
    {
        LPCG125_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG125_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG125_AUTHEN_CPULPM() volatile
    {
        LPCG125_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG125_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG125_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG125_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG125_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG125_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG125_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG125_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG125_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG125_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG125_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG125_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG125_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG125_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG125_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG125_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG125_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG125_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG125_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG125_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG125_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG125_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG125_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG125_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG125_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG125_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG125_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG125_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG125_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG125_AUTHEN_LOCK_LIST() volatile
    {
        LPCG125_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG125_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG125_AUTHEN_LOCK_LIST() volatile
    {
        LPCG125_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG125_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG125_AUTHEN_LOCK_LIST() volatile
    {
        LPCG125_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG125_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG125_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG125_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG125_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG125_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG125_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG125_AUTHEN = curr;
    }

    /**
     * Get LPCG125_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG125_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG125_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG125_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG125_AUTHEN_LOCK_TZ() volatile
    {
        LPCG125_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG125_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG125_AUTHEN_LOCK_TZ() volatile
    {
        LPCG125_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG125_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG125_AUTHEN_LOCK_TZ() volatile
    {
        LPCG125_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG125_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG125_AUTHEN_TZ_NS() volatile
    {
        return LPCG125_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG125_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG125_AUTHEN_TZ_NS() volatile
    {
        LPCG125_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG125_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG125_AUTHEN_TZ_NS() volatile
    {
        LPCG125_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG125_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG125_AUTHEN_TZ_NS() volatile
    {
        LPCG125_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG125_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG125_AUTHEN_TZ_USER() volatile
    {
        return LPCG125_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG125_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG125_AUTHEN_TZ_USER() volatile
    {
        LPCG125_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG125_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG125_AUTHEN_TZ_USER() volatile
    {
        LPCG125_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG125_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG125_AUTHEN_TZ_USER() volatile
    {
        LPCG125_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG125_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG125_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG125_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG125_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG125_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG125_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG125_AUTHEN = curr;
    }

    /**
     * Get LPCG126_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG126_DIRECT_ON() volatile
    {
        return LPCG126_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG126_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG126_DIRECT_ON() volatile
    {
        LPCG126_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG126_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG126_DIRECT_ON() volatile
    {
        LPCG126_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG126_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG126_DIRECT_ON() volatile
    {
        LPCG126_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG126_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG126_DOMAIN_LEVEL3 get_LPCG126_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG126_DOMAIN_LEVEL3((LPCG126_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG126_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG126_DOMAIN_LEVEL3(
        CCM_LPCG126_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG126_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG126_DOMAIN = curr;
    }

    /**
     * Get LPCG126_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG126_DOMAIN_LEVEL2 get_LPCG126_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG126_DOMAIN_LEVEL2((LPCG126_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG126_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG126_DOMAIN_LEVEL2(
        CCM_LPCG126_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG126_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG126_DOMAIN = curr;
    }

    /**
     * Get LPCG126_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG126_DOMAIN_LEVEL1 get_LPCG126_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG126_DOMAIN_LEVEL1((LPCG126_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG126_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG126_DOMAIN_LEVEL1(
        CCM_LPCG126_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG126_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG126_DOMAIN = curr;
    }

    /**
     * Get LPCG126_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG126_DOMAIN_LEVEL0 get_LPCG126_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG126_DOMAIN_LEVEL0((LPCG126_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG126_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG126_DOMAIN_LEVEL0(
        CCM_LPCG126_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG126_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG126_DOMAIN = curr;
    }

    /**
     * Get LPCG126_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG126_DOMAIN_LEVEL get_LPCG126_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG126_DOMAIN_LEVEL((LPCG126_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG126_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG126_DOMAIN_LEVEL(
        CCM_LPCG126_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG126_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG126_DOMAIN = curr;
    }

    /**
     * Get all of LPCG126_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG126_DOMAIN(CCM_LPCG126_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG126_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG126_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG126_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG126_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG126_DOMAIN;

        LEVEL3 = CCM_LPCG126_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG126_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG126_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG126_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG126_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG126_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG126_DOMAIN(CCM_LPCG126_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG126_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG126_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG126_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG126_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG126_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG126_DOMAIN = curr;
    }

    /**
     * Get LPCG126_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG126_STATUS0_DOMAIN_ENABLE
    get_LPCG126_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG126_STATUS0_DOMAIN_ENABLE((LPCG126_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG126_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG126_STATUS0_ACTIVE_DOMAIN
    get_LPCG126_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG126_STATUS0_ACTIVE_DOMAIN((LPCG126_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG126_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG126_STATUS0_ON() volatile
    {
        return LPCG126_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG126_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG126_STATUS0(
        CCM_LPCG126_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG126_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG126_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG126_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG126_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG126_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG126_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG126_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG126_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG126_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG126_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG126_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG126_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG126_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG126_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG126_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG126_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG126_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG126_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG126_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG126_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG126_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG126_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG126_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG126_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG126_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG126_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG126_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG126_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG126_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG126_STATUS1_CPU3_MODE
    get_LPCG126_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG126_STATUS1_CPU3_MODE((LPCG126_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG126_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG126_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG126_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG126_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG126_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG126_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG126_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG126_STATUS1_CPU2_MODE
    get_LPCG126_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG126_STATUS1_CPU2_MODE((LPCG126_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG126_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG126_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG126_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG126_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG126_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG126_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG126_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG126_STATUS1_CPU1_MODE
    get_LPCG126_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG126_STATUS1_CPU1_MODE((LPCG126_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG126_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG126_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG126_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG126_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG126_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG126_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG126_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG126_STATUS1_CPU0_MODE
    get_LPCG126_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG126_STATUS1_CPU0_MODE((LPCG126_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG126_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG126_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG126_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG126_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG126_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG126_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG126_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG126_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG126_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG126_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG126_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG126_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG126_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG126_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG126_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG126_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG126_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG126_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG126_AUTHEN_LOCK_MODE() volatile
    {
        LPCG126_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG126_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG126_AUTHEN_LOCK_MODE() volatile
    {
        LPCG126_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG126_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG126_AUTHEN_LOCK_MODE() volatile
    {
        LPCG126_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG126_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG126_AUTHEN_CPULPM() volatile
    {
        return LPCG126_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG126_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG126_AUTHEN_CPULPM() volatile
    {
        LPCG126_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG126_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG126_AUTHEN_CPULPM() volatile
    {
        LPCG126_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG126_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG126_AUTHEN_CPULPM() volatile
    {
        LPCG126_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG126_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG126_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG126_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG126_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG126_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG126_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG126_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG126_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG126_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG126_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG126_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG126_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG126_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG126_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG126_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG126_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG126_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG126_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG126_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG126_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG126_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG126_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG126_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG126_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG126_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG126_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG126_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG126_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG126_AUTHEN_LOCK_LIST() volatile
    {
        LPCG126_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG126_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG126_AUTHEN_LOCK_LIST() volatile
    {
        LPCG126_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG126_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG126_AUTHEN_LOCK_LIST() volatile
    {
        LPCG126_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG126_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG126_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG126_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG126_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG126_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG126_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG126_AUTHEN = curr;
    }

    /**
     * Get LPCG126_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG126_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG126_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG126_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG126_AUTHEN_LOCK_TZ() volatile
    {
        LPCG126_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG126_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG126_AUTHEN_LOCK_TZ() volatile
    {
        LPCG126_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG126_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG126_AUTHEN_LOCK_TZ() volatile
    {
        LPCG126_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG126_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG126_AUTHEN_TZ_NS() volatile
    {
        return LPCG126_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG126_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG126_AUTHEN_TZ_NS() volatile
    {
        LPCG126_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG126_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG126_AUTHEN_TZ_NS() volatile
    {
        LPCG126_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG126_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG126_AUTHEN_TZ_NS() volatile
    {
        LPCG126_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG126_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG126_AUTHEN_TZ_USER() volatile
    {
        return LPCG126_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG126_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG126_AUTHEN_TZ_USER() volatile
    {
        LPCG126_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG126_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG126_AUTHEN_TZ_USER() volatile
    {
        LPCG126_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG126_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG126_AUTHEN_TZ_USER() volatile
    {
        LPCG126_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG126_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG126_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG126_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG126_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG126_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG126_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG126_AUTHEN = curr;
    }

    /**
     * Get LPCG127_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG127_DIRECT_ON() volatile
    {
        return LPCG127_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG127_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG127_DIRECT_ON() volatile
    {
        LPCG127_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG127_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG127_DIRECT_ON() volatile
    {
        LPCG127_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG127_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG127_DIRECT_ON() volatile
    {
        LPCG127_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG127_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG127_DOMAIN_LEVEL3 get_LPCG127_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG127_DOMAIN_LEVEL3((LPCG127_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG127_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG127_DOMAIN_LEVEL3(
        CCM_LPCG127_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG127_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG127_DOMAIN = curr;
    }

    /**
     * Get LPCG127_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG127_DOMAIN_LEVEL2 get_LPCG127_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG127_DOMAIN_LEVEL2((LPCG127_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG127_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG127_DOMAIN_LEVEL2(
        CCM_LPCG127_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG127_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG127_DOMAIN = curr;
    }

    /**
     * Get LPCG127_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG127_DOMAIN_LEVEL1 get_LPCG127_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG127_DOMAIN_LEVEL1((LPCG127_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG127_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG127_DOMAIN_LEVEL1(
        CCM_LPCG127_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG127_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG127_DOMAIN = curr;
    }

    /**
     * Get LPCG127_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG127_DOMAIN_LEVEL0 get_LPCG127_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG127_DOMAIN_LEVEL0((LPCG127_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG127_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG127_DOMAIN_LEVEL0(
        CCM_LPCG127_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG127_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG127_DOMAIN = curr;
    }

    /**
     * Get LPCG127_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG127_DOMAIN_LEVEL get_LPCG127_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG127_DOMAIN_LEVEL((LPCG127_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG127_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG127_DOMAIN_LEVEL(
        CCM_LPCG127_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG127_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG127_DOMAIN = curr;
    }

    /**
     * Get all of LPCG127_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG127_DOMAIN(CCM_LPCG127_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG127_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG127_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG127_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG127_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG127_DOMAIN;

        LEVEL3 = CCM_LPCG127_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG127_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG127_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG127_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG127_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG127_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG127_DOMAIN(CCM_LPCG127_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG127_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG127_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG127_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG127_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG127_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG127_DOMAIN = curr;
    }

    /**
     * Get LPCG127_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG127_STATUS0_DOMAIN_ENABLE
    get_LPCG127_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG127_STATUS0_DOMAIN_ENABLE((LPCG127_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG127_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG127_STATUS0_ACTIVE_DOMAIN
    get_LPCG127_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG127_STATUS0_ACTIVE_DOMAIN((LPCG127_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG127_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG127_STATUS0_ON() volatile
    {
        return LPCG127_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG127_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG127_STATUS0(
        CCM_LPCG127_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG127_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG127_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG127_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG127_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG127_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG127_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG127_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG127_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG127_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG127_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG127_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG127_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG127_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG127_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG127_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG127_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG127_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG127_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG127_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG127_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG127_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG127_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG127_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG127_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG127_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG127_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG127_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG127_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG127_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG127_STATUS1_CPU3_MODE
    get_LPCG127_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG127_STATUS1_CPU3_MODE((LPCG127_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG127_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG127_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG127_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG127_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG127_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG127_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG127_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG127_STATUS1_CPU2_MODE
    get_LPCG127_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG127_STATUS1_CPU2_MODE((LPCG127_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG127_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG127_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG127_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG127_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG127_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG127_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG127_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG127_STATUS1_CPU1_MODE
    get_LPCG127_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG127_STATUS1_CPU1_MODE((LPCG127_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG127_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG127_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG127_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG127_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG127_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG127_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG127_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG127_STATUS1_CPU0_MODE
    get_LPCG127_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG127_STATUS1_CPU0_MODE((LPCG127_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG127_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG127_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG127_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG127_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG127_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG127_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG127_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG127_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG127_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG127_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG127_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG127_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG127_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG127_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG127_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG127_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG127_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG127_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG127_AUTHEN_LOCK_MODE() volatile
    {
        LPCG127_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG127_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG127_AUTHEN_LOCK_MODE() volatile
    {
        LPCG127_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG127_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG127_AUTHEN_LOCK_MODE() volatile
    {
        LPCG127_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG127_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG127_AUTHEN_CPULPM() volatile
    {
        return LPCG127_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG127_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG127_AUTHEN_CPULPM() volatile
    {
        LPCG127_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG127_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG127_AUTHEN_CPULPM() volatile
    {
        LPCG127_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG127_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG127_AUTHEN_CPULPM() volatile
    {
        LPCG127_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG127_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG127_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG127_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG127_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG127_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG127_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG127_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG127_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG127_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG127_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG127_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG127_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG127_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG127_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG127_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG127_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG127_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG127_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG127_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG127_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG127_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG127_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG127_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG127_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG127_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG127_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG127_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG127_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG127_AUTHEN_LOCK_LIST() volatile
    {
        LPCG127_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG127_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG127_AUTHEN_LOCK_LIST() volatile
    {
        LPCG127_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG127_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG127_AUTHEN_LOCK_LIST() volatile
    {
        LPCG127_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG127_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG127_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG127_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG127_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG127_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG127_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG127_AUTHEN = curr;
    }

    /**
     * Get LPCG127_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG127_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG127_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG127_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG127_AUTHEN_LOCK_TZ() volatile
    {
        LPCG127_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG127_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG127_AUTHEN_LOCK_TZ() volatile
    {
        LPCG127_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG127_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG127_AUTHEN_LOCK_TZ() volatile
    {
        LPCG127_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG127_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG127_AUTHEN_TZ_NS() volatile
    {
        return LPCG127_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG127_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG127_AUTHEN_TZ_NS() volatile
    {
        LPCG127_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG127_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG127_AUTHEN_TZ_NS() volatile
    {
        LPCG127_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG127_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG127_AUTHEN_TZ_NS() volatile
    {
        LPCG127_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG127_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG127_AUTHEN_TZ_USER() volatile
    {
        return LPCG127_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG127_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG127_AUTHEN_TZ_USER() volatile
    {
        LPCG127_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG127_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG127_AUTHEN_TZ_USER() volatile
    {
        LPCG127_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG127_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG127_AUTHEN_TZ_USER() volatile
    {
        LPCG127_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG127_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG127_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG127_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG127_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG127_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG127_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG127_AUTHEN = curr;
    }

    /**
     * Get LPCG128_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG128_DIRECT_ON() volatile
    {
        return LPCG128_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG128_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG128_DIRECT_ON() volatile
    {
        LPCG128_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG128_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG128_DIRECT_ON() volatile
    {
        LPCG128_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG128_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG128_DIRECT_ON() volatile
    {
        LPCG128_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG128_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG128_DOMAIN_LEVEL3 get_LPCG128_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG128_DOMAIN_LEVEL3((LPCG128_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG128_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG128_DOMAIN_LEVEL3(
        CCM_LPCG128_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG128_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG128_DOMAIN = curr;
    }

    /**
     * Get LPCG128_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG128_DOMAIN_LEVEL2 get_LPCG128_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG128_DOMAIN_LEVEL2((LPCG128_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG128_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG128_DOMAIN_LEVEL2(
        CCM_LPCG128_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG128_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG128_DOMAIN = curr;
    }

    /**
     * Get LPCG128_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG128_DOMAIN_LEVEL1 get_LPCG128_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG128_DOMAIN_LEVEL1((LPCG128_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG128_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG128_DOMAIN_LEVEL1(
        CCM_LPCG128_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG128_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG128_DOMAIN = curr;
    }

    /**
     * Get LPCG128_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG128_DOMAIN_LEVEL0 get_LPCG128_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG128_DOMAIN_LEVEL0((LPCG128_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG128_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG128_DOMAIN_LEVEL0(
        CCM_LPCG128_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG128_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG128_DOMAIN = curr;
    }

    /**
     * Get LPCG128_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG128_DOMAIN_LEVEL get_LPCG128_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG128_DOMAIN_LEVEL((LPCG128_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG128_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG128_DOMAIN_LEVEL(
        CCM_LPCG128_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG128_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG128_DOMAIN = curr;
    }

    /**
     * Get all of LPCG128_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG128_DOMAIN(CCM_LPCG128_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG128_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG128_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG128_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG128_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG128_DOMAIN;

        LEVEL3 = CCM_LPCG128_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG128_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG128_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG128_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG128_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG128_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG128_DOMAIN(CCM_LPCG128_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG128_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG128_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG128_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG128_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG128_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG128_DOMAIN = curr;
    }

    /**
     * Get LPCG128_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG128_STATUS0_DOMAIN_ENABLE
    get_LPCG128_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG128_STATUS0_DOMAIN_ENABLE((LPCG128_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG128_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG128_STATUS0_ACTIVE_DOMAIN
    get_LPCG128_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG128_STATUS0_ACTIVE_DOMAIN((LPCG128_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG128_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG128_STATUS0_ON() volatile
    {
        return LPCG128_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG128_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG128_STATUS0(
        CCM_LPCG128_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG128_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG128_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG128_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG128_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG128_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG128_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG128_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG128_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG128_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG128_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG128_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG128_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG128_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG128_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG128_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG128_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG128_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG128_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG128_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG128_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG128_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG128_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG128_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG128_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG128_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG128_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG128_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG128_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG128_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG128_STATUS1_CPU3_MODE
    get_LPCG128_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG128_STATUS1_CPU3_MODE((LPCG128_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG128_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG128_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG128_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG128_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG128_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG128_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG128_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG128_STATUS1_CPU2_MODE
    get_LPCG128_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG128_STATUS1_CPU2_MODE((LPCG128_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG128_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG128_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG128_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG128_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG128_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG128_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG128_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG128_STATUS1_CPU1_MODE
    get_LPCG128_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG128_STATUS1_CPU1_MODE((LPCG128_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG128_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG128_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG128_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG128_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG128_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG128_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG128_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG128_STATUS1_CPU0_MODE
    get_LPCG128_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG128_STATUS1_CPU0_MODE((LPCG128_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG128_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG128_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG128_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG128_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG128_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG128_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG128_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG128_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG128_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG128_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG128_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG128_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG128_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG128_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG128_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG128_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG128_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG128_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG128_AUTHEN_LOCK_MODE() volatile
    {
        LPCG128_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG128_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG128_AUTHEN_LOCK_MODE() volatile
    {
        LPCG128_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG128_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG128_AUTHEN_LOCK_MODE() volatile
    {
        LPCG128_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG128_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG128_AUTHEN_CPULPM() volatile
    {
        return LPCG128_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG128_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG128_AUTHEN_CPULPM() volatile
    {
        LPCG128_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG128_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG128_AUTHEN_CPULPM() volatile
    {
        LPCG128_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG128_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG128_AUTHEN_CPULPM() volatile
    {
        LPCG128_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG128_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG128_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG128_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG128_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG128_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG128_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG128_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG128_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG128_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG128_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG128_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG128_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG128_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG128_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG128_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG128_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG128_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG128_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG128_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG128_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG128_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG128_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG128_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG128_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG128_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG128_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG128_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG128_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG128_AUTHEN_LOCK_LIST() volatile
    {
        LPCG128_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG128_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG128_AUTHEN_LOCK_LIST() volatile
    {
        LPCG128_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG128_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG128_AUTHEN_LOCK_LIST() volatile
    {
        LPCG128_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG128_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG128_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG128_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG128_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG128_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG128_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG128_AUTHEN = curr;
    }

    /**
     * Get LPCG128_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG128_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG128_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG128_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG128_AUTHEN_LOCK_TZ() volatile
    {
        LPCG128_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG128_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG128_AUTHEN_LOCK_TZ() volatile
    {
        LPCG128_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG128_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG128_AUTHEN_LOCK_TZ() volatile
    {
        LPCG128_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG128_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG128_AUTHEN_TZ_NS() volatile
    {
        return LPCG128_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG128_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG128_AUTHEN_TZ_NS() volatile
    {
        LPCG128_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG128_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG128_AUTHEN_TZ_NS() volatile
    {
        LPCG128_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG128_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG128_AUTHEN_TZ_NS() volatile
    {
        LPCG128_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG128_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG128_AUTHEN_TZ_USER() volatile
    {
        return LPCG128_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG128_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG128_AUTHEN_TZ_USER() volatile
    {
        LPCG128_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG128_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG128_AUTHEN_TZ_USER() volatile
    {
        LPCG128_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG128_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG128_AUTHEN_TZ_USER() volatile
    {
        LPCG128_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG128_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG128_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG128_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG128_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG128_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG128_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG128_AUTHEN = curr;
    }

    /**
     * Get LPCG129_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG129_DIRECT_ON() volatile
    {
        return LPCG129_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG129_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG129_DIRECT_ON() volatile
    {
        LPCG129_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG129_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG129_DIRECT_ON() volatile
    {
        LPCG129_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG129_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG129_DIRECT_ON() volatile
    {
        LPCG129_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG129_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG129_DOMAIN_LEVEL3 get_LPCG129_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG129_DOMAIN_LEVEL3((LPCG129_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG129_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG129_DOMAIN_LEVEL3(
        CCM_LPCG129_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG129_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG129_DOMAIN = curr;
    }

    /**
     * Get LPCG129_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG129_DOMAIN_LEVEL2 get_LPCG129_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG129_DOMAIN_LEVEL2((LPCG129_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG129_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG129_DOMAIN_LEVEL2(
        CCM_LPCG129_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG129_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG129_DOMAIN = curr;
    }

    /**
     * Get LPCG129_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG129_DOMAIN_LEVEL1 get_LPCG129_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG129_DOMAIN_LEVEL1((LPCG129_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG129_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG129_DOMAIN_LEVEL1(
        CCM_LPCG129_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG129_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG129_DOMAIN = curr;
    }

    /**
     * Get LPCG129_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG129_DOMAIN_LEVEL0 get_LPCG129_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG129_DOMAIN_LEVEL0((LPCG129_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG129_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG129_DOMAIN_LEVEL0(
        CCM_LPCG129_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG129_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG129_DOMAIN = curr;
    }

    /**
     * Get LPCG129_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG129_DOMAIN_LEVEL get_LPCG129_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG129_DOMAIN_LEVEL((LPCG129_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG129_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG129_DOMAIN_LEVEL(
        CCM_LPCG129_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG129_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG129_DOMAIN = curr;
    }

    /**
     * Get all of LPCG129_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG129_DOMAIN(CCM_LPCG129_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG129_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG129_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG129_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG129_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG129_DOMAIN;

        LEVEL3 = CCM_LPCG129_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG129_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG129_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG129_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG129_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG129_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG129_DOMAIN(CCM_LPCG129_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG129_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG129_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG129_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG129_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG129_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG129_DOMAIN = curr;
    }

    /**
     * Get LPCG129_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG129_STATUS0_DOMAIN_ENABLE
    get_LPCG129_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG129_STATUS0_DOMAIN_ENABLE((LPCG129_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG129_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG129_STATUS0_ACTIVE_DOMAIN
    get_LPCG129_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG129_STATUS0_ACTIVE_DOMAIN((LPCG129_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG129_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG129_STATUS0_ON() volatile
    {
        return LPCG129_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG129_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG129_STATUS0(
        CCM_LPCG129_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG129_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG129_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG129_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG129_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG129_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG129_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG129_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG129_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG129_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG129_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG129_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG129_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG129_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG129_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG129_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG129_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG129_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG129_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG129_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG129_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG129_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG129_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG129_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG129_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG129_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG129_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG129_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG129_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG129_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG129_STATUS1_CPU3_MODE
    get_LPCG129_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG129_STATUS1_CPU3_MODE((LPCG129_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG129_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG129_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG129_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG129_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG129_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG129_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG129_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG129_STATUS1_CPU2_MODE
    get_LPCG129_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG129_STATUS1_CPU2_MODE((LPCG129_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG129_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG129_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG129_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG129_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG129_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG129_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG129_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG129_STATUS1_CPU1_MODE
    get_LPCG129_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG129_STATUS1_CPU1_MODE((LPCG129_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG129_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG129_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG129_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG129_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG129_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG129_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG129_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG129_STATUS1_CPU0_MODE
    get_LPCG129_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG129_STATUS1_CPU0_MODE((LPCG129_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG129_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG129_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG129_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG129_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG129_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG129_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG129_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG129_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG129_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG129_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG129_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG129_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG129_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG129_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG129_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG129_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG129_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG129_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG129_AUTHEN_LOCK_MODE() volatile
    {
        LPCG129_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG129_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG129_AUTHEN_LOCK_MODE() volatile
    {
        LPCG129_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG129_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG129_AUTHEN_LOCK_MODE() volatile
    {
        LPCG129_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG129_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG129_AUTHEN_CPULPM() volatile
    {
        return LPCG129_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG129_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG129_AUTHEN_CPULPM() volatile
    {
        LPCG129_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG129_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG129_AUTHEN_CPULPM() volatile
    {
        LPCG129_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG129_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG129_AUTHEN_CPULPM() volatile
    {
        LPCG129_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG129_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG129_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG129_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG129_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG129_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG129_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG129_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG129_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG129_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG129_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG129_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG129_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG129_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG129_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG129_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG129_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG129_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG129_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG129_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG129_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG129_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG129_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG129_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG129_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG129_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG129_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG129_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG129_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG129_AUTHEN_LOCK_LIST() volatile
    {
        LPCG129_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG129_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG129_AUTHEN_LOCK_LIST() volatile
    {
        LPCG129_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG129_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG129_AUTHEN_LOCK_LIST() volatile
    {
        LPCG129_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG129_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG129_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG129_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG129_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG129_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG129_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG129_AUTHEN = curr;
    }

    /**
     * Get LPCG129_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG129_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG129_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG129_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG129_AUTHEN_LOCK_TZ() volatile
    {
        LPCG129_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG129_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG129_AUTHEN_LOCK_TZ() volatile
    {
        LPCG129_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG129_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG129_AUTHEN_LOCK_TZ() volatile
    {
        LPCG129_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG129_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG129_AUTHEN_TZ_NS() volatile
    {
        return LPCG129_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG129_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG129_AUTHEN_TZ_NS() volatile
    {
        LPCG129_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG129_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG129_AUTHEN_TZ_NS() volatile
    {
        LPCG129_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG129_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG129_AUTHEN_TZ_NS() volatile
    {
        LPCG129_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG129_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG129_AUTHEN_TZ_USER() volatile
    {
        return LPCG129_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG129_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG129_AUTHEN_TZ_USER() volatile
    {
        LPCG129_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG129_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG129_AUTHEN_TZ_USER() volatile
    {
        LPCG129_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG129_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG129_AUTHEN_TZ_USER() volatile
    {
        LPCG129_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG129_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG129_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG129_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG129_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG129_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG129_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG129_AUTHEN = curr;
    }

    /**
     * Get LPCG130_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG130_DIRECT_ON() volatile
    {
        return LPCG130_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG130_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG130_DIRECT_ON() volatile
    {
        LPCG130_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG130_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG130_DIRECT_ON() volatile
    {
        LPCG130_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG130_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG130_DIRECT_ON() volatile
    {
        LPCG130_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG130_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG130_DOMAIN_LEVEL3 get_LPCG130_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG130_DOMAIN_LEVEL3((LPCG130_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG130_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG130_DOMAIN_LEVEL3(
        CCM_LPCG130_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG130_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG130_DOMAIN = curr;
    }

    /**
     * Get LPCG130_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG130_DOMAIN_LEVEL2 get_LPCG130_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG130_DOMAIN_LEVEL2((LPCG130_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG130_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG130_DOMAIN_LEVEL2(
        CCM_LPCG130_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG130_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG130_DOMAIN = curr;
    }

    /**
     * Get LPCG130_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG130_DOMAIN_LEVEL1 get_LPCG130_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG130_DOMAIN_LEVEL1((LPCG130_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG130_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG130_DOMAIN_LEVEL1(
        CCM_LPCG130_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG130_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG130_DOMAIN = curr;
    }

    /**
     * Get LPCG130_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG130_DOMAIN_LEVEL0 get_LPCG130_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG130_DOMAIN_LEVEL0((LPCG130_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG130_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG130_DOMAIN_LEVEL0(
        CCM_LPCG130_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG130_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG130_DOMAIN = curr;
    }

    /**
     * Get LPCG130_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG130_DOMAIN_LEVEL get_LPCG130_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG130_DOMAIN_LEVEL((LPCG130_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG130_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG130_DOMAIN_LEVEL(
        CCM_LPCG130_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG130_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG130_DOMAIN = curr;
    }

    /**
     * Get all of LPCG130_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG130_DOMAIN(CCM_LPCG130_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG130_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG130_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG130_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG130_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG130_DOMAIN;

        LEVEL3 = CCM_LPCG130_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG130_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG130_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG130_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG130_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG130_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG130_DOMAIN(CCM_LPCG130_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG130_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG130_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG130_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG130_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG130_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG130_DOMAIN = curr;
    }

    /**
     * Get LPCG130_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG130_STATUS0_DOMAIN_ENABLE
    get_LPCG130_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG130_STATUS0_DOMAIN_ENABLE((LPCG130_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG130_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG130_STATUS0_ACTIVE_DOMAIN
    get_LPCG130_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG130_STATUS0_ACTIVE_DOMAIN((LPCG130_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG130_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG130_STATUS0_ON() volatile
    {
        return LPCG130_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG130_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG130_STATUS0(
        CCM_LPCG130_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG130_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG130_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG130_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG130_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG130_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG130_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG130_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG130_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG130_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG130_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG130_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG130_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG130_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG130_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG130_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG130_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG130_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG130_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG130_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG130_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG130_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG130_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG130_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG130_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG130_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG130_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG130_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG130_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG130_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG130_STATUS1_CPU3_MODE
    get_LPCG130_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG130_STATUS1_CPU3_MODE((LPCG130_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG130_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG130_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG130_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG130_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG130_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG130_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG130_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG130_STATUS1_CPU2_MODE
    get_LPCG130_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG130_STATUS1_CPU2_MODE((LPCG130_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG130_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG130_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG130_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG130_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG130_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG130_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG130_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG130_STATUS1_CPU1_MODE
    get_LPCG130_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG130_STATUS1_CPU1_MODE((LPCG130_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG130_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG130_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG130_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG130_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG130_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG130_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG130_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG130_STATUS1_CPU0_MODE
    get_LPCG130_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG130_STATUS1_CPU0_MODE((LPCG130_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG130_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG130_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG130_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG130_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG130_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG130_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG130_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG130_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG130_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG130_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG130_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG130_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG130_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG130_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG130_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG130_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG130_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG130_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG130_AUTHEN_LOCK_MODE() volatile
    {
        LPCG130_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG130_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG130_AUTHEN_LOCK_MODE() volatile
    {
        LPCG130_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG130_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG130_AUTHEN_LOCK_MODE() volatile
    {
        LPCG130_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG130_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG130_AUTHEN_CPULPM() volatile
    {
        return LPCG130_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG130_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG130_AUTHEN_CPULPM() volatile
    {
        LPCG130_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG130_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG130_AUTHEN_CPULPM() volatile
    {
        LPCG130_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG130_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG130_AUTHEN_CPULPM() volatile
    {
        LPCG130_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG130_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG130_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG130_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG130_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG130_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG130_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG130_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG130_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG130_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG130_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG130_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG130_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG130_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG130_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG130_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG130_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG130_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG130_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG130_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG130_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG130_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG130_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG130_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG130_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG130_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG130_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG130_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG130_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG130_AUTHEN_LOCK_LIST() volatile
    {
        LPCG130_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG130_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG130_AUTHEN_LOCK_LIST() volatile
    {
        LPCG130_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG130_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG130_AUTHEN_LOCK_LIST() volatile
    {
        LPCG130_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG130_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG130_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG130_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG130_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG130_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG130_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG130_AUTHEN = curr;
    }

    /**
     * Get LPCG130_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG130_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG130_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG130_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG130_AUTHEN_LOCK_TZ() volatile
    {
        LPCG130_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG130_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG130_AUTHEN_LOCK_TZ() volatile
    {
        LPCG130_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG130_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG130_AUTHEN_LOCK_TZ() volatile
    {
        LPCG130_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG130_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG130_AUTHEN_TZ_NS() volatile
    {
        return LPCG130_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG130_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG130_AUTHEN_TZ_NS() volatile
    {
        LPCG130_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG130_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG130_AUTHEN_TZ_NS() volatile
    {
        LPCG130_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG130_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG130_AUTHEN_TZ_NS() volatile
    {
        LPCG130_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG130_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG130_AUTHEN_TZ_USER() volatile
    {
        return LPCG130_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG130_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG130_AUTHEN_TZ_USER() volatile
    {
        LPCG130_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG130_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG130_AUTHEN_TZ_USER() volatile
    {
        LPCG130_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG130_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG130_AUTHEN_TZ_USER() volatile
    {
        LPCG130_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG130_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG130_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG130_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG130_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG130_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG130_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG130_AUTHEN = curr;
    }

    /**
     * Get LPCG131_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG131_DIRECT_ON() volatile
    {
        return LPCG131_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG131_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG131_DIRECT_ON() volatile
    {
        LPCG131_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG131_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG131_DIRECT_ON() volatile
    {
        LPCG131_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG131_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG131_DIRECT_ON() volatile
    {
        LPCG131_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG131_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG131_DOMAIN_LEVEL3 get_LPCG131_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG131_DOMAIN_LEVEL3((LPCG131_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG131_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG131_DOMAIN_LEVEL3(
        CCM_LPCG131_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG131_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG131_DOMAIN = curr;
    }

    /**
     * Get LPCG131_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG131_DOMAIN_LEVEL2 get_LPCG131_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG131_DOMAIN_LEVEL2((LPCG131_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG131_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG131_DOMAIN_LEVEL2(
        CCM_LPCG131_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG131_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG131_DOMAIN = curr;
    }

    /**
     * Get LPCG131_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG131_DOMAIN_LEVEL1 get_LPCG131_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG131_DOMAIN_LEVEL1((LPCG131_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG131_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG131_DOMAIN_LEVEL1(
        CCM_LPCG131_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG131_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG131_DOMAIN = curr;
    }

    /**
     * Get LPCG131_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG131_DOMAIN_LEVEL0 get_LPCG131_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG131_DOMAIN_LEVEL0((LPCG131_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG131_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG131_DOMAIN_LEVEL0(
        CCM_LPCG131_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG131_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG131_DOMAIN = curr;
    }

    /**
     * Get LPCG131_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG131_DOMAIN_LEVEL get_LPCG131_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG131_DOMAIN_LEVEL((LPCG131_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG131_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG131_DOMAIN_LEVEL(
        CCM_LPCG131_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG131_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG131_DOMAIN = curr;
    }

    /**
     * Get all of LPCG131_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG131_DOMAIN(CCM_LPCG131_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG131_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG131_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG131_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG131_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG131_DOMAIN;

        LEVEL3 = CCM_LPCG131_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG131_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG131_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG131_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG131_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG131_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG131_DOMAIN(CCM_LPCG131_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG131_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG131_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG131_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG131_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG131_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG131_DOMAIN = curr;
    }

    /**
     * Get LPCG131_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG131_STATUS0_DOMAIN_ENABLE
    get_LPCG131_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG131_STATUS0_DOMAIN_ENABLE((LPCG131_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG131_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG131_STATUS0_ACTIVE_DOMAIN
    get_LPCG131_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG131_STATUS0_ACTIVE_DOMAIN((LPCG131_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG131_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG131_STATUS0_ON() volatile
    {
        return LPCG131_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG131_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG131_STATUS0(
        CCM_LPCG131_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG131_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG131_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG131_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG131_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG131_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG131_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG131_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG131_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG131_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG131_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG131_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG131_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG131_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG131_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG131_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG131_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG131_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG131_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG131_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG131_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG131_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG131_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG131_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG131_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG131_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG131_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG131_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG131_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG131_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG131_STATUS1_CPU3_MODE
    get_LPCG131_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG131_STATUS1_CPU3_MODE((LPCG131_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG131_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG131_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG131_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG131_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG131_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG131_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG131_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG131_STATUS1_CPU2_MODE
    get_LPCG131_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG131_STATUS1_CPU2_MODE((LPCG131_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG131_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG131_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG131_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG131_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG131_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG131_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG131_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG131_STATUS1_CPU1_MODE
    get_LPCG131_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG131_STATUS1_CPU1_MODE((LPCG131_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG131_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG131_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG131_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG131_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG131_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG131_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG131_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG131_STATUS1_CPU0_MODE
    get_LPCG131_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG131_STATUS1_CPU0_MODE((LPCG131_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG131_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG131_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG131_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG131_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG131_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG131_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG131_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG131_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG131_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG131_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG131_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG131_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG131_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG131_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG131_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG131_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG131_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG131_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG131_AUTHEN_LOCK_MODE() volatile
    {
        LPCG131_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG131_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG131_AUTHEN_LOCK_MODE() volatile
    {
        LPCG131_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG131_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG131_AUTHEN_LOCK_MODE() volatile
    {
        LPCG131_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG131_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG131_AUTHEN_CPULPM() volatile
    {
        return LPCG131_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG131_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG131_AUTHEN_CPULPM() volatile
    {
        LPCG131_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG131_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG131_AUTHEN_CPULPM() volatile
    {
        LPCG131_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG131_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG131_AUTHEN_CPULPM() volatile
    {
        LPCG131_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG131_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG131_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG131_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG131_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG131_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG131_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG131_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG131_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG131_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG131_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG131_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG131_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG131_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG131_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG131_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG131_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG131_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG131_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG131_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG131_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG131_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG131_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG131_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG131_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG131_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG131_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG131_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG131_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG131_AUTHEN_LOCK_LIST() volatile
    {
        LPCG131_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG131_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG131_AUTHEN_LOCK_LIST() volatile
    {
        LPCG131_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG131_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG131_AUTHEN_LOCK_LIST() volatile
    {
        LPCG131_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG131_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG131_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG131_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG131_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG131_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG131_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG131_AUTHEN = curr;
    }

    /**
     * Get LPCG131_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG131_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG131_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG131_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG131_AUTHEN_LOCK_TZ() volatile
    {
        LPCG131_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG131_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG131_AUTHEN_LOCK_TZ() volatile
    {
        LPCG131_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG131_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG131_AUTHEN_LOCK_TZ() volatile
    {
        LPCG131_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG131_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG131_AUTHEN_TZ_NS() volatile
    {
        return LPCG131_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG131_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG131_AUTHEN_TZ_NS() volatile
    {
        LPCG131_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG131_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG131_AUTHEN_TZ_NS() volatile
    {
        LPCG131_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG131_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG131_AUTHEN_TZ_NS() volatile
    {
        LPCG131_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG131_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG131_AUTHEN_TZ_USER() volatile
    {
        return LPCG131_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG131_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG131_AUTHEN_TZ_USER() volatile
    {
        LPCG131_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG131_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG131_AUTHEN_TZ_USER() volatile
    {
        LPCG131_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG131_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG131_AUTHEN_TZ_USER() volatile
    {
        LPCG131_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG131_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG131_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG131_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG131_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG131_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG131_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG131_AUTHEN = curr;
    }

    /**
     * Get LPCG132_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG132_DIRECT_ON() volatile
    {
        return LPCG132_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG132_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG132_DIRECT_ON() volatile
    {
        LPCG132_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG132_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG132_DIRECT_ON() volatile
    {
        LPCG132_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG132_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG132_DIRECT_ON() volatile
    {
        LPCG132_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG132_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG132_DOMAIN_LEVEL3 get_LPCG132_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG132_DOMAIN_LEVEL3((LPCG132_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG132_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG132_DOMAIN_LEVEL3(
        CCM_LPCG132_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG132_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG132_DOMAIN = curr;
    }

    /**
     * Get LPCG132_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG132_DOMAIN_LEVEL2 get_LPCG132_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG132_DOMAIN_LEVEL2((LPCG132_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG132_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG132_DOMAIN_LEVEL2(
        CCM_LPCG132_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG132_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG132_DOMAIN = curr;
    }

    /**
     * Get LPCG132_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG132_DOMAIN_LEVEL1 get_LPCG132_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG132_DOMAIN_LEVEL1((LPCG132_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG132_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG132_DOMAIN_LEVEL1(
        CCM_LPCG132_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG132_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG132_DOMAIN = curr;
    }

    /**
     * Get LPCG132_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG132_DOMAIN_LEVEL0 get_LPCG132_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG132_DOMAIN_LEVEL0((LPCG132_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG132_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG132_DOMAIN_LEVEL0(
        CCM_LPCG132_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG132_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG132_DOMAIN = curr;
    }

    /**
     * Get LPCG132_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG132_DOMAIN_LEVEL get_LPCG132_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG132_DOMAIN_LEVEL((LPCG132_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG132_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG132_DOMAIN_LEVEL(
        CCM_LPCG132_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG132_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG132_DOMAIN = curr;
    }

    /**
     * Get all of LPCG132_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG132_DOMAIN(CCM_LPCG132_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG132_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG132_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG132_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG132_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG132_DOMAIN;

        LEVEL3 = CCM_LPCG132_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG132_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG132_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG132_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG132_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG132_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG132_DOMAIN(CCM_LPCG132_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG132_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG132_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG132_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG132_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG132_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG132_DOMAIN = curr;
    }

    /**
     * Get LPCG132_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG132_STATUS0_DOMAIN_ENABLE
    get_LPCG132_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG132_STATUS0_DOMAIN_ENABLE((LPCG132_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG132_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG132_STATUS0_ACTIVE_DOMAIN
    get_LPCG132_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG132_STATUS0_ACTIVE_DOMAIN((LPCG132_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG132_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG132_STATUS0_ON() volatile
    {
        return LPCG132_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG132_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG132_STATUS0(
        CCM_LPCG132_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG132_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG132_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG132_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG132_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG132_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG132_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG132_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG132_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG132_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG132_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG132_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG132_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG132_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG132_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG132_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG132_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG132_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG132_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG132_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG132_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG132_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG132_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG132_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG132_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG132_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG132_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG132_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG132_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG132_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG132_STATUS1_CPU3_MODE
    get_LPCG132_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG132_STATUS1_CPU3_MODE((LPCG132_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG132_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG132_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG132_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG132_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG132_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG132_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG132_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG132_STATUS1_CPU2_MODE
    get_LPCG132_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG132_STATUS1_CPU2_MODE((LPCG132_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG132_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG132_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG132_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG132_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG132_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG132_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG132_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG132_STATUS1_CPU1_MODE
    get_LPCG132_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG132_STATUS1_CPU1_MODE((LPCG132_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG132_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG132_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG132_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG132_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG132_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG132_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG132_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG132_STATUS1_CPU0_MODE
    get_LPCG132_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG132_STATUS1_CPU0_MODE((LPCG132_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG132_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG132_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG132_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG132_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG132_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG132_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG132_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG132_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG132_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG132_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG132_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG132_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG132_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG132_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG132_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG132_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG132_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG132_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG132_AUTHEN_LOCK_MODE() volatile
    {
        LPCG132_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG132_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG132_AUTHEN_LOCK_MODE() volatile
    {
        LPCG132_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG132_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG132_AUTHEN_LOCK_MODE() volatile
    {
        LPCG132_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG132_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG132_AUTHEN_CPULPM() volatile
    {
        return LPCG132_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG132_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG132_AUTHEN_CPULPM() volatile
    {
        LPCG132_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG132_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG132_AUTHEN_CPULPM() volatile
    {
        LPCG132_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG132_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG132_AUTHEN_CPULPM() volatile
    {
        LPCG132_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG132_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG132_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG132_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG132_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG132_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG132_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG132_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG132_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG132_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG132_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG132_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG132_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG132_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG132_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG132_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG132_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG132_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG132_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG132_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG132_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG132_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG132_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG132_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG132_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG132_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG132_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG132_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG132_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG132_AUTHEN_LOCK_LIST() volatile
    {
        LPCG132_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG132_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG132_AUTHEN_LOCK_LIST() volatile
    {
        LPCG132_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG132_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG132_AUTHEN_LOCK_LIST() volatile
    {
        LPCG132_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG132_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG132_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG132_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG132_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG132_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG132_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG132_AUTHEN = curr;
    }

    /**
     * Get LPCG132_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG132_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG132_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG132_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG132_AUTHEN_LOCK_TZ() volatile
    {
        LPCG132_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG132_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG132_AUTHEN_LOCK_TZ() volatile
    {
        LPCG132_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG132_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG132_AUTHEN_LOCK_TZ() volatile
    {
        LPCG132_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG132_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG132_AUTHEN_TZ_NS() volatile
    {
        return LPCG132_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG132_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG132_AUTHEN_TZ_NS() volatile
    {
        LPCG132_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG132_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG132_AUTHEN_TZ_NS() volatile
    {
        LPCG132_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG132_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG132_AUTHEN_TZ_NS() volatile
    {
        LPCG132_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG132_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG132_AUTHEN_TZ_USER() volatile
    {
        return LPCG132_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG132_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG132_AUTHEN_TZ_USER() volatile
    {
        LPCG132_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG132_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG132_AUTHEN_TZ_USER() volatile
    {
        LPCG132_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG132_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG132_AUTHEN_TZ_USER() volatile
    {
        LPCG132_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG132_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG132_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG132_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG132_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG132_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG132_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG132_AUTHEN = curr;
    }

    /**
     * Get LPCG133_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG133_DIRECT_ON() volatile
    {
        return LPCG133_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG133_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG133_DIRECT_ON() volatile
    {
        LPCG133_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG133_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG133_DIRECT_ON() volatile
    {
        LPCG133_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG133_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG133_DIRECT_ON() volatile
    {
        LPCG133_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG133_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG133_DOMAIN_LEVEL3 get_LPCG133_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG133_DOMAIN_LEVEL3((LPCG133_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG133_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG133_DOMAIN_LEVEL3(
        CCM_LPCG133_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG133_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG133_DOMAIN = curr;
    }

    /**
     * Get LPCG133_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG133_DOMAIN_LEVEL2 get_LPCG133_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG133_DOMAIN_LEVEL2((LPCG133_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG133_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG133_DOMAIN_LEVEL2(
        CCM_LPCG133_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG133_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG133_DOMAIN = curr;
    }

    /**
     * Get LPCG133_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG133_DOMAIN_LEVEL1 get_LPCG133_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG133_DOMAIN_LEVEL1((LPCG133_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG133_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG133_DOMAIN_LEVEL1(
        CCM_LPCG133_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG133_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG133_DOMAIN = curr;
    }

    /**
     * Get LPCG133_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG133_DOMAIN_LEVEL0 get_LPCG133_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG133_DOMAIN_LEVEL0((LPCG133_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG133_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG133_DOMAIN_LEVEL0(
        CCM_LPCG133_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG133_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG133_DOMAIN = curr;
    }

    /**
     * Get LPCG133_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG133_DOMAIN_LEVEL get_LPCG133_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG133_DOMAIN_LEVEL((LPCG133_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG133_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG133_DOMAIN_LEVEL(
        CCM_LPCG133_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG133_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG133_DOMAIN = curr;
    }

    /**
     * Get all of LPCG133_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG133_DOMAIN(CCM_LPCG133_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG133_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG133_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG133_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG133_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG133_DOMAIN;

        LEVEL3 = CCM_LPCG133_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG133_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG133_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG133_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG133_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG133_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG133_DOMAIN(CCM_LPCG133_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG133_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG133_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG133_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG133_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG133_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG133_DOMAIN = curr;
    }

    /**
     * Get LPCG133_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG133_STATUS0_DOMAIN_ENABLE
    get_LPCG133_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG133_STATUS0_DOMAIN_ENABLE((LPCG133_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG133_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG133_STATUS0_ACTIVE_DOMAIN
    get_LPCG133_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG133_STATUS0_ACTIVE_DOMAIN((LPCG133_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG133_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG133_STATUS0_ON() volatile
    {
        return LPCG133_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG133_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG133_STATUS0(
        CCM_LPCG133_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG133_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG133_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG133_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG133_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG133_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG133_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG133_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG133_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG133_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG133_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG133_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG133_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG133_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG133_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG133_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG133_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG133_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG133_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG133_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG133_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG133_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG133_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG133_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG133_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG133_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG133_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG133_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG133_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG133_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG133_STATUS1_CPU3_MODE
    get_LPCG133_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG133_STATUS1_CPU3_MODE((LPCG133_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG133_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG133_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG133_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG133_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG133_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG133_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG133_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG133_STATUS1_CPU2_MODE
    get_LPCG133_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG133_STATUS1_CPU2_MODE((LPCG133_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG133_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG133_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG133_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG133_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG133_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG133_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG133_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG133_STATUS1_CPU1_MODE
    get_LPCG133_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG133_STATUS1_CPU1_MODE((LPCG133_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG133_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG133_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG133_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG133_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG133_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG133_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG133_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG133_STATUS1_CPU0_MODE
    get_LPCG133_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG133_STATUS1_CPU0_MODE((LPCG133_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG133_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG133_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG133_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG133_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG133_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG133_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG133_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG133_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG133_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG133_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG133_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG133_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG133_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG133_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG133_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG133_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG133_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG133_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG133_AUTHEN_LOCK_MODE() volatile
    {
        LPCG133_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG133_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG133_AUTHEN_LOCK_MODE() volatile
    {
        LPCG133_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG133_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG133_AUTHEN_LOCK_MODE() volatile
    {
        LPCG133_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG133_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG133_AUTHEN_CPULPM() volatile
    {
        return LPCG133_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG133_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG133_AUTHEN_CPULPM() volatile
    {
        LPCG133_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG133_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG133_AUTHEN_CPULPM() volatile
    {
        LPCG133_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG133_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG133_AUTHEN_CPULPM() volatile
    {
        LPCG133_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG133_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG133_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG133_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG133_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG133_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG133_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG133_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG133_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG133_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG133_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG133_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG133_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG133_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG133_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG133_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG133_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG133_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG133_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG133_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG133_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG133_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG133_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG133_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG133_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG133_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG133_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG133_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG133_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG133_AUTHEN_LOCK_LIST() volatile
    {
        LPCG133_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG133_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG133_AUTHEN_LOCK_LIST() volatile
    {
        LPCG133_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG133_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG133_AUTHEN_LOCK_LIST() volatile
    {
        LPCG133_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG133_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG133_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG133_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG133_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG133_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG133_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG133_AUTHEN = curr;
    }

    /**
     * Get LPCG133_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG133_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG133_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG133_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG133_AUTHEN_LOCK_TZ() volatile
    {
        LPCG133_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG133_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG133_AUTHEN_LOCK_TZ() volatile
    {
        LPCG133_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG133_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG133_AUTHEN_LOCK_TZ() volatile
    {
        LPCG133_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG133_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG133_AUTHEN_TZ_NS() volatile
    {
        return LPCG133_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG133_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG133_AUTHEN_TZ_NS() volatile
    {
        LPCG133_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG133_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG133_AUTHEN_TZ_NS() volatile
    {
        LPCG133_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG133_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG133_AUTHEN_TZ_NS() volatile
    {
        LPCG133_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG133_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG133_AUTHEN_TZ_USER() volatile
    {
        return LPCG133_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG133_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG133_AUTHEN_TZ_USER() volatile
    {
        LPCG133_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG133_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG133_AUTHEN_TZ_USER() volatile
    {
        LPCG133_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG133_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG133_AUTHEN_TZ_USER() volatile
    {
        LPCG133_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG133_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG133_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG133_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG133_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG133_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG133_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG133_AUTHEN = curr;
    }

    /**
     * Get LPCG134_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG134_DIRECT_ON() volatile
    {
        return LPCG134_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG134_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG134_DIRECT_ON() volatile
    {
        LPCG134_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG134_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG134_DIRECT_ON() volatile
    {
        LPCG134_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG134_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG134_DIRECT_ON() volatile
    {
        LPCG134_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG134_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG134_DOMAIN_LEVEL3 get_LPCG134_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG134_DOMAIN_LEVEL3((LPCG134_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG134_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG134_DOMAIN_LEVEL3(
        CCM_LPCG134_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG134_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG134_DOMAIN = curr;
    }

    /**
     * Get LPCG134_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG134_DOMAIN_LEVEL2 get_LPCG134_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG134_DOMAIN_LEVEL2((LPCG134_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG134_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG134_DOMAIN_LEVEL2(
        CCM_LPCG134_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG134_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG134_DOMAIN = curr;
    }

    /**
     * Get LPCG134_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG134_DOMAIN_LEVEL1 get_LPCG134_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG134_DOMAIN_LEVEL1((LPCG134_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG134_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG134_DOMAIN_LEVEL1(
        CCM_LPCG134_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG134_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG134_DOMAIN = curr;
    }

    /**
     * Get LPCG134_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG134_DOMAIN_LEVEL0 get_LPCG134_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG134_DOMAIN_LEVEL0((LPCG134_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG134_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG134_DOMAIN_LEVEL0(
        CCM_LPCG134_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG134_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG134_DOMAIN = curr;
    }

    /**
     * Get LPCG134_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG134_DOMAIN_LEVEL get_LPCG134_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG134_DOMAIN_LEVEL((LPCG134_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG134_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG134_DOMAIN_LEVEL(
        CCM_LPCG134_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG134_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG134_DOMAIN = curr;
    }

    /**
     * Get all of LPCG134_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG134_DOMAIN(CCM_LPCG134_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG134_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG134_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG134_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG134_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG134_DOMAIN;

        LEVEL3 = CCM_LPCG134_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG134_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG134_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG134_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG134_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG134_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG134_DOMAIN(CCM_LPCG134_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG134_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG134_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG134_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG134_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG134_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG134_DOMAIN = curr;
    }

    /**
     * Get LPCG134_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG134_STATUS0_DOMAIN_ENABLE
    get_LPCG134_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG134_STATUS0_DOMAIN_ENABLE((LPCG134_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG134_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG134_STATUS0_ACTIVE_DOMAIN
    get_LPCG134_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG134_STATUS0_ACTIVE_DOMAIN((LPCG134_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG134_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG134_STATUS0_ON() volatile
    {
        return LPCG134_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG134_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG134_STATUS0(
        CCM_LPCG134_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG134_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG134_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG134_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG134_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG134_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG134_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG134_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG134_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG134_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG134_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG134_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG134_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG134_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG134_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG134_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG134_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG134_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG134_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG134_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG134_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG134_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG134_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG134_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG134_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG134_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG134_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG134_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG134_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG134_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG134_STATUS1_CPU3_MODE
    get_LPCG134_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG134_STATUS1_CPU3_MODE((LPCG134_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG134_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG134_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG134_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG134_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG134_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG134_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG134_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG134_STATUS1_CPU2_MODE
    get_LPCG134_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG134_STATUS1_CPU2_MODE((LPCG134_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG134_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG134_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG134_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG134_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG134_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG134_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG134_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG134_STATUS1_CPU1_MODE
    get_LPCG134_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG134_STATUS1_CPU1_MODE((LPCG134_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG134_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG134_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG134_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG134_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG134_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG134_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG134_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG134_STATUS1_CPU0_MODE
    get_LPCG134_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG134_STATUS1_CPU0_MODE((LPCG134_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG134_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG134_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG134_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG134_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG134_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG134_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG134_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG134_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG134_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG134_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG134_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG134_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG134_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG134_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG134_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG134_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG134_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG134_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG134_AUTHEN_LOCK_MODE() volatile
    {
        LPCG134_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG134_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG134_AUTHEN_LOCK_MODE() volatile
    {
        LPCG134_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG134_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG134_AUTHEN_LOCK_MODE() volatile
    {
        LPCG134_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG134_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG134_AUTHEN_CPULPM() volatile
    {
        return LPCG134_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG134_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG134_AUTHEN_CPULPM() volatile
    {
        LPCG134_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG134_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG134_AUTHEN_CPULPM() volatile
    {
        LPCG134_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG134_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG134_AUTHEN_CPULPM() volatile
    {
        LPCG134_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG134_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG134_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG134_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG134_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG134_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG134_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG134_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG134_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG134_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG134_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG134_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG134_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG134_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG134_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG134_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG134_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG134_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG134_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG134_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG134_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG134_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG134_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG134_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG134_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG134_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG134_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG134_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG134_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG134_AUTHEN_LOCK_LIST() volatile
    {
        LPCG134_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG134_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG134_AUTHEN_LOCK_LIST() volatile
    {
        LPCG134_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG134_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG134_AUTHEN_LOCK_LIST() volatile
    {
        LPCG134_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG134_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG134_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG134_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG134_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG134_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG134_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG134_AUTHEN = curr;
    }

    /**
     * Get LPCG134_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG134_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG134_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG134_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG134_AUTHEN_LOCK_TZ() volatile
    {
        LPCG134_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG134_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG134_AUTHEN_LOCK_TZ() volatile
    {
        LPCG134_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG134_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG134_AUTHEN_LOCK_TZ() volatile
    {
        LPCG134_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG134_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG134_AUTHEN_TZ_NS() volatile
    {
        return LPCG134_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG134_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG134_AUTHEN_TZ_NS() volatile
    {
        LPCG134_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG134_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG134_AUTHEN_TZ_NS() volatile
    {
        LPCG134_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG134_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG134_AUTHEN_TZ_NS() volatile
    {
        LPCG134_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG134_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG134_AUTHEN_TZ_USER() volatile
    {
        return LPCG134_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG134_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG134_AUTHEN_TZ_USER() volatile
    {
        LPCG134_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG134_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG134_AUTHEN_TZ_USER() volatile
    {
        LPCG134_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG134_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG134_AUTHEN_TZ_USER() volatile
    {
        LPCG134_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG134_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG134_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG134_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG134_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG134_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG134_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG134_AUTHEN = curr;
    }

    /**
     * Get LPCG135_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG135_DIRECT_ON() volatile
    {
        return LPCG135_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG135_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG135_DIRECT_ON() volatile
    {
        LPCG135_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG135_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG135_DIRECT_ON() volatile
    {
        LPCG135_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG135_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG135_DIRECT_ON() volatile
    {
        LPCG135_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG135_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG135_DOMAIN_LEVEL3 get_LPCG135_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG135_DOMAIN_LEVEL3((LPCG135_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG135_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG135_DOMAIN_LEVEL3(
        CCM_LPCG135_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG135_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG135_DOMAIN = curr;
    }

    /**
     * Get LPCG135_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG135_DOMAIN_LEVEL2 get_LPCG135_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG135_DOMAIN_LEVEL2((LPCG135_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG135_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG135_DOMAIN_LEVEL2(
        CCM_LPCG135_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG135_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG135_DOMAIN = curr;
    }

    /**
     * Get LPCG135_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG135_DOMAIN_LEVEL1 get_LPCG135_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG135_DOMAIN_LEVEL1((LPCG135_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG135_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG135_DOMAIN_LEVEL1(
        CCM_LPCG135_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG135_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG135_DOMAIN = curr;
    }

    /**
     * Get LPCG135_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG135_DOMAIN_LEVEL0 get_LPCG135_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG135_DOMAIN_LEVEL0((LPCG135_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG135_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG135_DOMAIN_LEVEL0(
        CCM_LPCG135_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG135_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG135_DOMAIN = curr;
    }

    /**
     * Get LPCG135_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG135_DOMAIN_LEVEL get_LPCG135_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG135_DOMAIN_LEVEL((LPCG135_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG135_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG135_DOMAIN_LEVEL(
        CCM_LPCG135_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG135_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG135_DOMAIN = curr;
    }

    /**
     * Get all of LPCG135_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG135_DOMAIN(CCM_LPCG135_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG135_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG135_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG135_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG135_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG135_DOMAIN;

        LEVEL3 = CCM_LPCG135_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG135_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG135_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG135_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG135_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG135_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG135_DOMAIN(CCM_LPCG135_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG135_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG135_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG135_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG135_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG135_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG135_DOMAIN = curr;
    }

    /**
     * Get LPCG135_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG135_STATUS0_DOMAIN_ENABLE
    get_LPCG135_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG135_STATUS0_DOMAIN_ENABLE((LPCG135_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG135_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG135_STATUS0_ACTIVE_DOMAIN
    get_LPCG135_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG135_STATUS0_ACTIVE_DOMAIN((LPCG135_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG135_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG135_STATUS0_ON() volatile
    {
        return LPCG135_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG135_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG135_STATUS0(
        CCM_LPCG135_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG135_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG135_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG135_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG135_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG135_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG135_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG135_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG135_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG135_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG135_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG135_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG135_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG135_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG135_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG135_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG135_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG135_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG135_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG135_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG135_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG135_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG135_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG135_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG135_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG135_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG135_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG135_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG135_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG135_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG135_STATUS1_CPU3_MODE
    get_LPCG135_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG135_STATUS1_CPU3_MODE((LPCG135_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG135_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG135_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG135_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG135_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG135_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG135_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG135_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG135_STATUS1_CPU2_MODE
    get_LPCG135_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG135_STATUS1_CPU2_MODE((LPCG135_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG135_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG135_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG135_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG135_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG135_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG135_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG135_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG135_STATUS1_CPU1_MODE
    get_LPCG135_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG135_STATUS1_CPU1_MODE((LPCG135_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG135_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG135_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG135_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG135_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG135_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG135_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG135_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG135_STATUS1_CPU0_MODE
    get_LPCG135_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG135_STATUS1_CPU0_MODE((LPCG135_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG135_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG135_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG135_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG135_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG135_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG135_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG135_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG135_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG135_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG135_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG135_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG135_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG135_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG135_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG135_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG135_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG135_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG135_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG135_AUTHEN_LOCK_MODE() volatile
    {
        LPCG135_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG135_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG135_AUTHEN_LOCK_MODE() volatile
    {
        LPCG135_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG135_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG135_AUTHEN_LOCK_MODE() volatile
    {
        LPCG135_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG135_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG135_AUTHEN_CPULPM() volatile
    {
        return LPCG135_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG135_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG135_AUTHEN_CPULPM() volatile
    {
        LPCG135_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG135_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG135_AUTHEN_CPULPM() volatile
    {
        LPCG135_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG135_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG135_AUTHEN_CPULPM() volatile
    {
        LPCG135_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG135_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG135_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG135_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG135_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG135_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG135_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG135_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG135_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG135_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG135_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG135_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG135_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG135_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG135_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG135_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG135_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG135_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG135_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG135_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG135_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG135_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG135_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG135_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG135_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG135_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG135_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG135_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG135_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG135_AUTHEN_LOCK_LIST() volatile
    {
        LPCG135_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG135_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG135_AUTHEN_LOCK_LIST() volatile
    {
        LPCG135_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG135_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG135_AUTHEN_LOCK_LIST() volatile
    {
        LPCG135_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG135_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG135_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG135_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG135_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG135_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG135_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG135_AUTHEN = curr;
    }

    /**
     * Get LPCG135_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG135_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG135_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG135_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG135_AUTHEN_LOCK_TZ() volatile
    {
        LPCG135_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG135_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG135_AUTHEN_LOCK_TZ() volatile
    {
        LPCG135_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG135_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG135_AUTHEN_LOCK_TZ() volatile
    {
        LPCG135_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG135_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG135_AUTHEN_TZ_NS() volatile
    {
        return LPCG135_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG135_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG135_AUTHEN_TZ_NS() volatile
    {
        LPCG135_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG135_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG135_AUTHEN_TZ_NS() volatile
    {
        LPCG135_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG135_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG135_AUTHEN_TZ_NS() volatile
    {
        LPCG135_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG135_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG135_AUTHEN_TZ_USER() volatile
    {
        return LPCG135_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG135_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG135_AUTHEN_TZ_USER() volatile
    {
        LPCG135_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG135_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG135_AUTHEN_TZ_USER() volatile
    {
        LPCG135_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG135_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG135_AUTHEN_TZ_USER() volatile
    {
        LPCG135_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG135_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG135_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG135_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG135_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG135_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG135_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG135_AUTHEN = curr;
    }

    /**
     * Get LPCG136_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG136_DIRECT_ON() volatile
    {
        return LPCG136_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG136_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG136_DIRECT_ON() volatile
    {
        LPCG136_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG136_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG136_DIRECT_ON() volatile
    {
        LPCG136_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG136_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG136_DIRECT_ON() volatile
    {
        LPCG136_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG136_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG136_DOMAIN_LEVEL3 get_LPCG136_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG136_DOMAIN_LEVEL3((LPCG136_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG136_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG136_DOMAIN_LEVEL3(
        CCM_LPCG136_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG136_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG136_DOMAIN = curr;
    }

    /**
     * Get LPCG136_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG136_DOMAIN_LEVEL2 get_LPCG136_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG136_DOMAIN_LEVEL2((LPCG136_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG136_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG136_DOMAIN_LEVEL2(
        CCM_LPCG136_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG136_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG136_DOMAIN = curr;
    }

    /**
     * Get LPCG136_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG136_DOMAIN_LEVEL1 get_LPCG136_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG136_DOMAIN_LEVEL1((LPCG136_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG136_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG136_DOMAIN_LEVEL1(
        CCM_LPCG136_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG136_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG136_DOMAIN = curr;
    }

    /**
     * Get LPCG136_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG136_DOMAIN_LEVEL0 get_LPCG136_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG136_DOMAIN_LEVEL0((LPCG136_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG136_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG136_DOMAIN_LEVEL0(
        CCM_LPCG136_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG136_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG136_DOMAIN = curr;
    }

    /**
     * Get LPCG136_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG136_DOMAIN_LEVEL get_LPCG136_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG136_DOMAIN_LEVEL((LPCG136_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG136_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG136_DOMAIN_LEVEL(
        CCM_LPCG136_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG136_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG136_DOMAIN = curr;
    }

    /**
     * Get all of LPCG136_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG136_DOMAIN(CCM_LPCG136_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG136_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG136_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG136_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG136_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG136_DOMAIN;

        LEVEL3 = CCM_LPCG136_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG136_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG136_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG136_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG136_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG136_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG136_DOMAIN(CCM_LPCG136_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG136_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG136_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG136_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG136_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG136_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG136_DOMAIN = curr;
    }

    /**
     * Get LPCG136_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG136_STATUS0_DOMAIN_ENABLE
    get_LPCG136_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG136_STATUS0_DOMAIN_ENABLE((LPCG136_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG136_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG136_STATUS0_ACTIVE_DOMAIN
    get_LPCG136_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG136_STATUS0_ACTIVE_DOMAIN((LPCG136_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG136_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG136_STATUS0_ON() volatile
    {
        return LPCG136_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG136_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG136_STATUS0(
        CCM_LPCG136_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG136_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG136_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG136_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG136_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG136_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG136_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG136_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG136_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG136_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG136_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG136_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG136_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG136_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG136_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG136_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG136_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG136_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG136_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG136_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG136_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG136_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG136_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG136_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG136_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG136_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG136_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG136_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG136_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG136_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG136_STATUS1_CPU3_MODE
    get_LPCG136_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG136_STATUS1_CPU3_MODE((LPCG136_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG136_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG136_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG136_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG136_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG136_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG136_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG136_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG136_STATUS1_CPU2_MODE
    get_LPCG136_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG136_STATUS1_CPU2_MODE((LPCG136_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG136_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG136_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG136_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG136_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG136_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG136_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG136_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG136_STATUS1_CPU1_MODE
    get_LPCG136_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG136_STATUS1_CPU1_MODE((LPCG136_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG136_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG136_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG136_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG136_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG136_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG136_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG136_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG136_STATUS1_CPU0_MODE
    get_LPCG136_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG136_STATUS1_CPU0_MODE((LPCG136_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG136_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG136_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG136_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG136_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG136_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG136_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG136_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG136_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG136_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG136_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG136_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG136_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG136_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG136_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG136_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG136_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG136_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG136_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG136_AUTHEN_LOCK_MODE() volatile
    {
        LPCG136_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG136_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG136_AUTHEN_LOCK_MODE() volatile
    {
        LPCG136_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG136_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG136_AUTHEN_LOCK_MODE() volatile
    {
        LPCG136_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG136_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG136_AUTHEN_CPULPM() volatile
    {
        return LPCG136_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG136_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG136_AUTHEN_CPULPM() volatile
    {
        LPCG136_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG136_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG136_AUTHEN_CPULPM() volatile
    {
        LPCG136_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG136_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG136_AUTHEN_CPULPM() volatile
    {
        LPCG136_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG136_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG136_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG136_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG136_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG136_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG136_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG136_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG136_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG136_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG136_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG136_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG136_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG136_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG136_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG136_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG136_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG136_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG136_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG136_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG136_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG136_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG136_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG136_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG136_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG136_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG136_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG136_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG136_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG136_AUTHEN_LOCK_LIST() volatile
    {
        LPCG136_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG136_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG136_AUTHEN_LOCK_LIST() volatile
    {
        LPCG136_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG136_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG136_AUTHEN_LOCK_LIST() volatile
    {
        LPCG136_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG136_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG136_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG136_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG136_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG136_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG136_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG136_AUTHEN = curr;
    }

    /**
     * Get LPCG136_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG136_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG136_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG136_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG136_AUTHEN_LOCK_TZ() volatile
    {
        LPCG136_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG136_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG136_AUTHEN_LOCK_TZ() volatile
    {
        LPCG136_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG136_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG136_AUTHEN_LOCK_TZ() volatile
    {
        LPCG136_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG136_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG136_AUTHEN_TZ_NS() volatile
    {
        return LPCG136_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG136_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG136_AUTHEN_TZ_NS() volatile
    {
        LPCG136_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG136_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG136_AUTHEN_TZ_NS() volatile
    {
        LPCG136_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG136_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG136_AUTHEN_TZ_NS() volatile
    {
        LPCG136_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG136_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG136_AUTHEN_TZ_USER() volatile
    {
        return LPCG136_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG136_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG136_AUTHEN_TZ_USER() volatile
    {
        LPCG136_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG136_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG136_AUTHEN_TZ_USER() volatile
    {
        LPCG136_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG136_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG136_AUTHEN_TZ_USER() volatile
    {
        LPCG136_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG136_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG136_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG136_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG136_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG136_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG136_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG136_AUTHEN = curr;
    }

    /**
     * Get LPCG137_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline bool get_LPCG137_DIRECT_ON() volatile
    {
        return LPCG137_DIRECT & (1u << 0u);
    }

    /**
     * Set LPCG137_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void set_LPCG137_DIRECT_ON() volatile
    {
        LPCG137_DIRECT |= 1u << 0u;
    }

    /**
     * Clear LPCG137_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void clear_LPCG137_DIRECT_ON() volatile
    {
        LPCG137_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG137_DIRECT's ON bit.
     *
     * LPCG on
     */
    inline void toggle_LPCG137_DIRECT_ON() volatile
    {
        LPCG137_DIRECT ^= 1u << 0u;
    }

    /**
     * Get LPCG137_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline CCM_LPCG137_DOMAIN_LEVEL3 get_LPCG137_DOMAIN_LEVEL3() volatile
    {
        return CCM_LPCG137_DOMAIN_LEVEL3((LPCG137_DOMAIN >> 28u) & 0b111u);
    }

    /**
     * Set LPCG137_DOMAIN's LEVEL3 field.
     *
     * Depend level
     */
    inline void set_LPCG137_DOMAIN_LEVEL3(
        CCM_LPCG137_DOMAIN_LEVEL3 value) volatile
    {
        uint32_t curr = LPCG137_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        LPCG137_DOMAIN = curr;
    }

    /**
     * Get LPCG137_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline CCM_LPCG137_DOMAIN_LEVEL2 get_LPCG137_DOMAIN_LEVEL2() volatile
    {
        return CCM_LPCG137_DOMAIN_LEVEL2((LPCG137_DOMAIN >> 24u) & 0b111u);
    }

    /**
     * Set LPCG137_DOMAIN's LEVEL2 field.
     *
     * Depend level
     */
    inline void set_LPCG137_DOMAIN_LEVEL2(
        CCM_LPCG137_DOMAIN_LEVEL2 value) volatile
    {
        uint32_t curr = LPCG137_DOMAIN;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        LPCG137_DOMAIN = curr;
    }

    /**
     * Get LPCG137_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline CCM_LPCG137_DOMAIN_LEVEL1 get_LPCG137_DOMAIN_LEVEL1() volatile
    {
        return CCM_LPCG137_DOMAIN_LEVEL1((LPCG137_DOMAIN >> 20u) & 0b111u);
    }

    /**
     * Set LPCG137_DOMAIN's LEVEL1 field.
     *
     * Depend level
     */
    inline void set_LPCG137_DOMAIN_LEVEL1(
        CCM_LPCG137_DOMAIN_LEVEL1 value) volatile
    {
        uint32_t curr = LPCG137_DOMAIN;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        LPCG137_DOMAIN = curr;
    }

    /**
     * Get LPCG137_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline CCM_LPCG137_DOMAIN_LEVEL0 get_LPCG137_DOMAIN_LEVEL0() volatile
    {
        return CCM_LPCG137_DOMAIN_LEVEL0((LPCG137_DOMAIN >> 16u) & 0b111u);
    }

    /**
     * Set LPCG137_DOMAIN's LEVEL0 field.
     *
     * Depend level
     */
    inline void set_LPCG137_DOMAIN_LEVEL0(
        CCM_LPCG137_DOMAIN_LEVEL0 value) volatile
    {
        uint32_t curr = LPCG137_DOMAIN;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        LPCG137_DOMAIN = curr;
    }

    /**
     * Get LPCG137_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline CCM_LPCG137_DOMAIN_LEVEL get_LPCG137_DOMAIN_LEVEL() volatile
    {
        return CCM_LPCG137_DOMAIN_LEVEL((LPCG137_DOMAIN >> 0u) & 0b111u);
    }

    /**
     * Set LPCG137_DOMAIN's LEVEL field.
     *
     * Current dependence level
     */
    inline void set_LPCG137_DOMAIN_LEVEL(
        CCM_LPCG137_DOMAIN_LEVEL value) volatile
    {
        uint32_t curr = LPCG137_DOMAIN;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        LPCG137_DOMAIN = curr;
    }

    /**
     * Get all of LPCG137_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void get_LPCG137_DOMAIN(CCM_LPCG137_DOMAIN_LEVEL3 &LEVEL3,
                                   CCM_LPCG137_DOMAIN_LEVEL2 &LEVEL2,
                                   CCM_LPCG137_DOMAIN_LEVEL1 &LEVEL1,
                                   CCM_LPCG137_DOMAIN_LEVEL0 &LEVEL0,
                                   CCM_LPCG137_DOMAIN_LEVEL &LEVEL) volatile
    {
        uint32_t curr = LPCG137_DOMAIN;

        LEVEL3 = CCM_LPCG137_DOMAIN_LEVEL3((curr >> 28u) & 0b111u);
        LEVEL2 = CCM_LPCG137_DOMAIN_LEVEL2((curr >> 24u) & 0b111u);
        LEVEL1 = CCM_LPCG137_DOMAIN_LEVEL1((curr >> 20u) & 0b111u);
        LEVEL0 = CCM_LPCG137_DOMAIN_LEVEL0((curr >> 16u) & 0b111u);
        LEVEL = CCM_LPCG137_DOMAIN_LEVEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of LPCG137_DOMAIN's bit fields.
     *
     * (read-write) LPCG domain control
     */
    inline void set_LPCG137_DOMAIN(CCM_LPCG137_DOMAIN_LEVEL3 LEVEL3,
                                   CCM_LPCG137_DOMAIN_LEVEL2 LEVEL2,
                                   CCM_LPCG137_DOMAIN_LEVEL1 LEVEL1,
                                   CCM_LPCG137_DOMAIN_LEVEL0 LEVEL0,
                                   CCM_LPCG137_DOMAIN_LEVEL LEVEL) volatile
    {
        uint32_t curr = LPCG137_DOMAIN;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(LEVEL3) & 0b111u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(LEVEL2) & 0b111u) << 24u;
        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(LEVEL1) & 0b111u) << 20u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(LEVEL0) & 0b111u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(LEVEL) & 0b111u) << 0u;

        LPCG137_DOMAIN = curr;
    }

    /**
     * Get LPCG137_STATUS0's DOMAIN_ENABLE field.
     *
     * Enable status from each domain
     */
    inline CCM_LPCG137_STATUS0_DOMAIN_ENABLE
    get_LPCG137_STATUS0_DOMAIN_ENABLE() volatile
    {
        return CCM_LPCG137_STATUS0_DOMAIN_ENABLE((LPCG137_STATUS0 >> 12u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG137_STATUS0's ACTIVE_DOMAIN field.
     *
     * Domains that own this clock gate
     */
    inline CCM_LPCG137_STATUS0_ACTIVE_DOMAIN
    get_LPCG137_STATUS0_ACTIVE_DOMAIN() volatile
    {
        return CCM_LPCG137_STATUS0_ACTIVE_DOMAIN((LPCG137_STATUS0 >> 8u) &
                                                 0b1111u);
    }

    /**
     * Get LPCG137_STATUS0's ON bit.
     *
     * LPCG current state
     */
    inline bool get_LPCG137_STATUS0_ON() volatile
    {
        return LPCG137_STATUS0 & (1u << 0u);
    }

    /**
     * Get all of LPCG137_STATUS0's bit fields.
     *
     * (read-write) LPCG working status
     */
    inline void get_LPCG137_STATUS0(
        CCM_LPCG137_STATUS0_DOMAIN_ENABLE &DOMAIN_ENABLE,
        CCM_LPCG137_STATUS0_ACTIVE_DOMAIN &ACTIVE_DOMAIN, bool &ON) volatile
    {
        uint32_t curr = LPCG137_STATUS0;

        DOMAIN_ENABLE =
            CCM_LPCG137_STATUS0_DOMAIN_ENABLE((curr >> 12u) & 0b1111u);
        ACTIVE_DOMAIN =
            CCM_LPCG137_STATUS0_ACTIVE_DOMAIN((curr >> 8u) & 0b1111u);
        ON = curr & (1u << 0u);
    }

    /**
     * Get LPCG137_STATUS1's SETPOINT_ON_DONE bit.
     *
     * Clock gate turn on finish from GPC Setpoint
     */
    inline bool get_LPCG137_STATUS1_SETPOINT_ON_DONE() volatile
    {
        return LPCG137_STATUS1 & (1u << 27u);
    }

    /**
     * Get LPCG137_STATUS1's SETPOINT_ON_REQUEST bit.
     *
     * Clock gate turn on request from GPC Setpoint
     */
    inline bool get_LPCG137_STATUS1_SETPOINT_ON_REQUEST() volatile
    {
        return LPCG137_STATUS1 & (1u << 26u);
    }

    /**
     * Get LPCG137_STATUS1's SETPOINT_OFF_DONE bit.
     *
     * Clock gate turn off finish from GPC Setpoint
     */
    inline bool get_LPCG137_STATUS1_SETPOINT_OFF_DONE() volatile
    {
        return LPCG137_STATUS1 & (1u << 25u);
    }

    /**
     * Get LPCG137_STATUS1's SETPOINT_OFF_REQUEST bit.
     *
     * Clock gate turn off request from GPC Setpoint
     */
    inline bool get_LPCG137_STATUS1_SETPOINT_OFF_REQUEST() volatile
    {
        return LPCG137_STATUS1 & (1u << 24u);
    }

    /**
     * Get LPCG137_STATUS1's CURRENT_SETPOINT field.
     *
     * Current Setpoint
     */
    inline uint8_t get_LPCG137_STATUS1_CURRENT_SETPOINT() volatile
    {
        return (LPCG137_STATUS1 >> 20u) & 0b1111u;
    }

    /**
     * Get LPCG137_STATUS1's TARGET_SETPOINT field.
     *
     * Next Setpoint to change to
     */
    inline uint8_t get_LPCG137_STATUS1_TARGET_SETPOINT() volatile
    {
        return (LPCG137_STATUS1 >> 16u) & 0b1111u;
    }

    /**
     * Get LPCG137_STATUS1's CPU3_MODE_DONE bit.
     *
     * Domain3 Low Power Mode task done
     */
    inline bool get_LPCG137_STATUS1_CPU3_MODE_DONE() volatile
    {
        return LPCG137_STATUS1 & (1u << 15u);
    }

    /**
     * Get LPCG137_STATUS1's CPU3_MODE_REQUEST bit.
     *
     * Domain3 request enter Low Power Mode
     */
    inline bool get_LPCG137_STATUS1_CPU3_MODE_REQUEST() volatile
    {
        return LPCG137_STATUS1 & (1u << 14u);
    }

    /**
     * Get LPCG137_STATUS1's CPU3_MODE field.
     *
     * Domain3 Low Power Mode
     */
    inline CCM_LPCG137_STATUS1_CPU3_MODE
    get_LPCG137_STATUS1_CPU3_MODE() volatile
    {
        return CCM_LPCG137_STATUS1_CPU3_MODE((LPCG137_STATUS1 >> 12u) & 0b11u);
    }

    /**
     * Get LPCG137_STATUS1's CPU2_MODE_DONE bit.
     *
     * Domain2 Low Power Mode task done
     */
    inline bool get_LPCG137_STATUS1_CPU2_MODE_DONE() volatile
    {
        return LPCG137_STATUS1 & (1u << 11u);
    }

    /**
     * Get LPCG137_STATUS1's CPU2_MODE_REQUEST bit.
     *
     * Domain2 request enter Low Power Mode
     */
    inline bool get_LPCG137_STATUS1_CPU2_MODE_REQUEST() volatile
    {
        return LPCG137_STATUS1 & (1u << 10u);
    }

    /**
     * Get LPCG137_STATUS1's CPU2_MODE field.
     *
     * Domain2 Low Power Mode
     */
    inline CCM_LPCG137_STATUS1_CPU2_MODE
    get_LPCG137_STATUS1_CPU2_MODE() volatile
    {
        return CCM_LPCG137_STATUS1_CPU2_MODE((LPCG137_STATUS1 >> 8u) & 0b11u);
    }

    /**
     * Get LPCG137_STATUS1's CPU1_MODE_DONE bit.
     *
     * Domain1 Low Power Mode task done
     */
    inline bool get_LPCG137_STATUS1_CPU1_MODE_DONE() volatile
    {
        return LPCG137_STATUS1 & (1u << 7u);
    }

    /**
     * Get LPCG137_STATUS1's CPU1_MODE_REQUEST bit.
     *
     * Domain1 request enter Low Power Mode
     */
    inline bool get_LPCG137_STATUS1_CPU1_MODE_REQUEST() volatile
    {
        return LPCG137_STATUS1 & (1u << 6u);
    }

    /**
     * Get LPCG137_STATUS1's CPU1_MODE field.
     *
     * Domain1 Low Power Mode
     */
    inline CCM_LPCG137_STATUS1_CPU1_MODE
    get_LPCG137_STATUS1_CPU1_MODE() volatile
    {
        return CCM_LPCG137_STATUS1_CPU1_MODE((LPCG137_STATUS1 >> 4u) & 0b11u);
    }

    /**
     * Get LPCG137_STATUS1's CPU0_MODE_DONE bit.
     *
     * Domain0 Low Power Mode task done
     */
    inline bool get_LPCG137_STATUS1_CPU0_MODE_DONE() volatile
    {
        return LPCG137_STATUS1 & (1u << 3u);
    }

    /**
     * Get LPCG137_STATUS1's CPU0_MODE_REQUEST bit.
     *
     * Domain0 request enter Low Power Mode
     */
    inline bool get_LPCG137_STATUS1_CPU0_MODE_REQUEST() volatile
    {
        return LPCG137_STATUS1 & (1u << 2u);
    }

    /**
     * Get LPCG137_STATUS1's CPU0_MODE field.
     *
     * Domain0 Low Power Mode
     */
    inline CCM_LPCG137_STATUS1_CPU0_MODE
    get_LPCG137_STATUS1_CPU0_MODE() volatile
    {
        return CCM_LPCG137_STATUS1_CPU0_MODE((LPCG137_STATUS1 >> 0u) & 0b11u);
    }

    /**
     * Get all of LPCG137_STATUS1's bit fields.
     *
     * (read-write) LPCG low power status
     */
    inline void get_LPCG137_STATUS1(
        bool &SETPOINT_ON_DONE, bool &SETPOINT_ON_REQUEST,
        bool &SETPOINT_OFF_DONE, bool &SETPOINT_OFF_REQUEST,
        uint8_t &CURRENT_SETPOINT, uint8_t &TARGET_SETPOINT,
        bool &CPU3_MODE_DONE, bool &CPU3_MODE_REQUEST,
        CCM_LPCG137_STATUS1_CPU3_MODE &CPU3_MODE, bool &CPU2_MODE_DONE,
        bool &CPU2_MODE_REQUEST, CCM_LPCG137_STATUS1_CPU2_MODE &CPU2_MODE,
        bool &CPU1_MODE_DONE, bool &CPU1_MODE_REQUEST,
        CCM_LPCG137_STATUS1_CPU1_MODE &CPU1_MODE, bool &CPU0_MODE_DONE,
        bool &CPU0_MODE_REQUEST,
        CCM_LPCG137_STATUS1_CPU0_MODE &CPU0_MODE) volatile
    {
        uint32_t curr = LPCG137_STATUS1;

        SETPOINT_ON_DONE = curr & (1u << 27u);
        SETPOINT_ON_REQUEST = curr & (1u << 26u);
        SETPOINT_OFF_DONE = curr & (1u << 25u);
        SETPOINT_OFF_REQUEST = curr & (1u << 24u);
        CURRENT_SETPOINT = (curr >> 20u) & 0b1111u;
        TARGET_SETPOINT = (curr >> 16u) & 0b1111u;
        CPU3_MODE_DONE = curr & (1u << 15u);
        CPU3_MODE_REQUEST = curr & (1u << 14u);
        CPU3_MODE = CCM_LPCG137_STATUS1_CPU3_MODE((curr >> 12u) & 0b11u);
        CPU2_MODE_DONE = curr & (1u << 11u);
        CPU2_MODE_REQUEST = curr & (1u << 10u);
        CPU2_MODE = CCM_LPCG137_STATUS1_CPU2_MODE((curr >> 8u) & 0b11u);
        CPU1_MODE_DONE = curr & (1u << 7u);
        CPU1_MODE_REQUEST = curr & (1u << 6u);
        CPU1_MODE = CCM_LPCG137_STATUS1_CPU1_MODE((curr >> 4u) & 0b11u);
        CPU0_MODE_DONE = curr & (1u << 3u);
        CPU0_MODE_REQUEST = curr & (1u << 2u);
        CPU0_MODE = CCM_LPCG137_STATUS1_CPU0_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Get LPCG137_CONFIG's SETPOINT_PRESENT bit.
     *
     * Setpoint present
     */
    inline bool get_LPCG137_CONFIG_SETPOINT_PRESENT() volatile
    {
        return LPCG137_CONFIG & (1u << 4u);
    }

    /**
     * Get LPCG137_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_LPCG137_AUTHEN_LOCK_MODE() volatile
    {
        return LPCG137_AUTHEN & (1u << 20u);
    }

    /**
     * Set LPCG137_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_LPCG137_AUTHEN_LOCK_MODE() volatile
    {
        LPCG137_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear LPCG137_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_LPCG137_AUTHEN_LOCK_MODE() volatile
    {
        LPCG137_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle LPCG137_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_LPCG137_AUTHEN_LOCK_MODE() volatile
    {
        LPCG137_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get LPCG137_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline bool get_LPCG137_AUTHEN_CPULPM() volatile
    {
        return LPCG137_AUTHEN & (1u << 18u);
    }

    /**
     * Set LPCG137_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void set_LPCG137_AUTHEN_CPULPM() volatile
    {
        LPCG137_AUTHEN |= 1u << 18u;
    }

    /**
     * Clear LPCG137_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void clear_LPCG137_AUTHEN_CPULPM() volatile
    {
        LPCG137_AUTHEN &= ~(1u << 18u);
    }

    /**
     * Toggle LPCG137_AUTHEN's CPULPM bit.
     *
     * CPU Low Power Mode
     */
    inline void toggle_LPCG137_AUTHEN_CPULPM() volatile
    {
        LPCG137_AUTHEN ^= 1u << 18u;
    }

    /**
     * Get LPCG137_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline bool get_LPCG137_AUTHEN_SETPOINT_MODE() volatile
    {
        return LPCG137_AUTHEN & (1u << 17u);
    }

    /**
     * Set LPCG137_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void set_LPCG137_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG137_AUTHEN |= 1u << 17u;
    }

    /**
     * Clear LPCG137_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void clear_LPCG137_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG137_AUTHEN &= ~(1u << 17u);
    }

    /**
     * Toggle LPCG137_AUTHEN's SETPOINT_MODE bit.
     *
     * Low power and access control by Setpoint
     */
    inline void toggle_LPCG137_AUTHEN_SETPOINT_MODE() volatile
    {
        LPCG137_AUTHEN ^= 1u << 17u;
    }

    /**
     * Get LPCG137_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_LPCG137_AUTHEN_DOMAIN_MODE() volatile
    {
        return LPCG137_AUTHEN & (1u << 16u);
    }

    /**
     * Set LPCG137_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_LPCG137_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG137_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear LPCG137_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_LPCG137_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG137_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle LPCG137_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_LPCG137_AUTHEN_DOMAIN_MODE() volatile
    {
        LPCG137_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get LPCG137_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_LPCG137_AUTHEN_LOCK_LIST() volatile
    {
        return LPCG137_AUTHEN & (1u << 12u);
    }

    /**
     * Set LPCG137_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_LPCG137_AUTHEN_LOCK_LIST() volatile
    {
        LPCG137_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear LPCG137_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_LPCG137_AUTHEN_LOCK_LIST() volatile
    {
        LPCG137_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle LPCG137_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_LPCG137_AUTHEN_LOCK_LIST() volatile
    {
        LPCG137_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get LPCG137_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_LPCG137_AUTHEN_WHITE_LIST() volatile
    {
        return (LPCG137_AUTHEN >> 8u) & 0b1111u;
    }

    /**
     * Set LPCG137_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_LPCG137_AUTHEN_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = LPCG137_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        LPCG137_AUTHEN = curr;
    }

    /**
     * Get LPCG137_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline bool get_LPCG137_AUTHEN_LOCK_TZ() volatile
    {
        return LPCG137_AUTHEN & (1u << 4u);
    }

    /**
     * Set LPCG137_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void set_LPCG137_AUTHEN_LOCK_TZ() volatile
    {
        LPCG137_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear LPCG137_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void clear_LPCG137_AUTHEN_LOCK_TZ() volatile
    {
        LPCG137_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle LPCG137_AUTHEN's LOCK_TZ bit.
     *
     * lock truszone setting
     */
    inline void toggle_LPCG137_AUTHEN_LOCK_TZ() volatile
    {
        LPCG137_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get LPCG137_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_LPCG137_AUTHEN_TZ_NS() volatile
    {
        return LPCG137_AUTHEN & (1u << 1u);
    }

    /**
     * Set LPCG137_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_LPCG137_AUTHEN_TZ_NS() volatile
    {
        LPCG137_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear LPCG137_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_LPCG137_AUTHEN_TZ_NS() volatile
    {
        LPCG137_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle LPCG137_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_LPCG137_AUTHEN_TZ_NS() volatile
    {
        LPCG137_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get LPCG137_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_LPCG137_AUTHEN_TZ_USER() volatile
    {
        return LPCG137_AUTHEN & (1u << 0u);
    }

    /**
     * Set LPCG137_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_LPCG137_AUTHEN_TZ_USER() volatile
    {
        LPCG137_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear LPCG137_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_LPCG137_AUTHEN_TZ_USER() volatile
    {
        LPCG137_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle LPCG137_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_LPCG137_AUTHEN_TZ_USER() volatile
    {
        LPCG137_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of LPCG137_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void get_LPCG137_AUTHEN(bool &LOCK_MODE, bool &CPULPM,
                                   bool &SETPOINT_MODE, bool &DOMAIN_MODE,
                                   bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                   bool &LOCK_TZ, bool &TZ_NS,
                                   bool &TZ_USER) volatile
    {
        uint32_t curr = LPCG137_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        CPULPM = curr & (1u << 18u);
        SETPOINT_MODE = curr & (1u << 17u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of LPCG137_AUTHEN's bit fields.
     *
     * (read-write) LPCG access control
     */
    inline void set_LPCG137_AUTHEN(bool LOCK_MODE, bool CPULPM,
                                   bool SETPOINT_MODE, bool DOMAIN_MODE,
                                   bool LOCK_LIST, uint8_t WHITE_LIST,
                                   bool LOCK_TZ, bool TZ_NS,
                                   bool TZ_USER) volatile
    {
        uint32_t curr = LPCG137_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (CPULPM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SETPOINT_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        LPCG137_AUTHEN = curr;
    }
};

static_assert(sizeof(ccm) == ccm::size);

static volatile ccm *const CCM = reinterpret_cast<ccm *>(0x40CC0000);

}; // namespace MIMXRT1176::CM7
