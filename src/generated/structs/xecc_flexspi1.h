/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * XECC
 */
struct [[gnu::packed]] xecc_flexspi1
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        92; /*!< xecc_flexspi1's size in bytes. */

    /* Fields. */
    uint32_t ECC_CTRL;     /*!< (read-write) ECC Control Register */
    uint32_t ERR_STATUS;   /*!< (read-write) Error Interrupt Status Register */
    uint32_t ERR_STAT_EN;  /*!< (read-write) Error Interrupt Status Enable
                              Register */
    uint32_t ERR_SIG_EN;   /*!< (read-write) Error Interrupt Enable Register */
    uint32_t ERR_DATA_INJ; /*!< (read-write) Error Injection On Write Data */
    uint32_t ERR_ECC_INJ;  /*!< (read-write) Error Injection On ECC Code of
                              Write Data */
    uint32_t SINGLE_ERR_ADDR; /*!< (read-write) Single Error Address */
    uint32_t SINGLE_ERR_DATA; /*!< (read-write) Single Error Read Data */
    uint32_t SINGLE_ERR_ECC;  /*!< (read-write) Single Error ECC Code */
    uint32_t SINGLE_ERR_POS;  /*!< (read-write) Single Error Bit Position */
    uint32_t SINGLE_ERR_BIT_FIELD; /*!< (read-write) Single Error Bit Field */
    uint32_t MULTI_ERR_ADDR;       /*!< (read-write) Multiple Error Address */
    uint32_t MULTI_ERR_DATA;      /*!< (read-write) Multiple Error Read Data */
    uint32_t MULTI_ERR_ECC;       /*!< (read-write) Multiple Error ECC code */
    uint32_t MULTI_ERR_BIT_FIELD; /*!< (read-write) Multiple Error Bit Field */
    uint32_t ECC_BASE_ADDR0; /*!< (read-write) ECC Region 0 Base Address */
    uint32_t ECC_END_ADDR0;  /*!< (read-write) ECC Region 0 End Address */
    uint32_t ECC_BASE_ADDR1; /*!< (read-write) ECC Region 1 Base Address */
    uint32_t ECC_END_ADDR1;  /*!< (read-write) ECC Region 1 End Address */
    uint32_t ECC_BASE_ADDR2; /*!< (read-write) ECC Region 2 Base Address */
    uint32_t ECC_END_ADDR2;  /*!< (read-write) ECC Region 2 End Address */
    uint32_t ECC_BASE_ADDR3; /*!< (read-write) ECC Region 3 Base Address */
    uint32_t ECC_END_ADDR3;  /*!< (read-write) ECC Region 3 End Address */

    /* Methods. */

    /**
     * Get ECC_CTRL's SWAP_EN bit.
     *
     * Swap Data Enable
     */
    inline bool get_ECC_CTRL_SWAP_EN() volatile
    {
        return ECC_CTRL & (1u << 3u);
    }

    /**
     * Set ECC_CTRL's SWAP_EN bit.
     *
     * Swap Data Enable
     */
    inline void set_ECC_CTRL_SWAP_EN() volatile
    {
        ECC_CTRL |= 1u << 3u;
    }

    /**
     * Clear ECC_CTRL's SWAP_EN bit.
     *
     * Swap Data Enable
     */
    inline void clear_ECC_CTRL_SWAP_EN() volatile
    {
        ECC_CTRL &= ~(1u << 3u);
    }

    /**
     * Toggle ECC_CTRL's SWAP_EN bit.
     *
     * Swap Data Enable
     */
    inline void toggle_ECC_CTRL_SWAP_EN() volatile
    {
        ECC_CTRL ^= 1u << 3u;
    }

    /**
     * Get ECC_CTRL's RECC_EN bit.
     *
     * Read ECC Function Enable
     */
    inline bool get_ECC_CTRL_RECC_EN() volatile
    {
        return ECC_CTRL & (1u << 2u);
    }

    /**
     * Set ECC_CTRL's RECC_EN bit.
     *
     * Read ECC Function Enable
     */
    inline void set_ECC_CTRL_RECC_EN() volatile
    {
        ECC_CTRL |= 1u << 2u;
    }

    /**
     * Clear ECC_CTRL's RECC_EN bit.
     *
     * Read ECC Function Enable
     */
    inline void clear_ECC_CTRL_RECC_EN() volatile
    {
        ECC_CTRL &= ~(1u << 2u);
    }

    /**
     * Toggle ECC_CTRL's RECC_EN bit.
     *
     * Read ECC Function Enable
     */
    inline void toggle_ECC_CTRL_RECC_EN() volatile
    {
        ECC_CTRL ^= 1u << 2u;
    }

    /**
     * Get ECC_CTRL's WECC_EN bit.
     *
     * Write ECC Encode Function Enable
     */
    inline bool get_ECC_CTRL_WECC_EN() volatile
    {
        return ECC_CTRL & (1u << 1u);
    }

    /**
     * Set ECC_CTRL's WECC_EN bit.
     *
     * Write ECC Encode Function Enable
     */
    inline void set_ECC_CTRL_WECC_EN() volatile
    {
        ECC_CTRL |= 1u << 1u;
    }

    /**
     * Clear ECC_CTRL's WECC_EN bit.
     *
     * Write ECC Encode Function Enable
     */
    inline void clear_ECC_CTRL_WECC_EN() volatile
    {
        ECC_CTRL &= ~(1u << 1u);
    }

    /**
     * Toggle ECC_CTRL's WECC_EN bit.
     *
     * Write ECC Encode Function Enable
     */
    inline void toggle_ECC_CTRL_WECC_EN() volatile
    {
        ECC_CTRL ^= 1u << 1u;
    }

    /**
     * Get ECC_CTRL's ECC_EN bit.
     *
     * ECC Function Enable
     */
    inline bool get_ECC_CTRL_ECC_EN() volatile
    {
        return ECC_CTRL & (1u << 0u);
    }

    /**
     * Set ECC_CTRL's ECC_EN bit.
     *
     * ECC Function Enable
     */
    inline void set_ECC_CTRL_ECC_EN() volatile
    {
        ECC_CTRL |= 1u << 0u;
    }

    /**
     * Clear ECC_CTRL's ECC_EN bit.
     *
     * ECC Function Enable
     */
    inline void clear_ECC_CTRL_ECC_EN() volatile
    {
        ECC_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle ECC_CTRL's ECC_EN bit.
     *
     * ECC Function Enable
     */
    inline void toggle_ECC_CTRL_ECC_EN() volatile
    {
        ECC_CTRL ^= 1u << 0u;
    }

    /**
     * Get all of ECC_CTRL's bit fields.
     *
     * (read-write) ECC Control Register
     */
    inline void get_ECC_CTRL(bool &SWAP_EN, bool &RECC_EN, bool &WECC_EN,
                             bool &ECC_EN) volatile
    {
        uint32_t curr = ECC_CTRL;

        SWAP_EN = curr & (1u << 3u);
        RECC_EN = curr & (1u << 2u);
        WECC_EN = curr & (1u << 1u);
        ECC_EN = curr & (1u << 0u);
    }

    /**
     * Set all of ECC_CTRL's bit fields.
     *
     * (read-write) ECC Control Register
     */
    inline void set_ECC_CTRL(bool SWAP_EN, bool RECC_EN, bool WECC_EN,
                             bool ECC_EN) volatile
    {
        uint32_t curr = ECC_CTRL;

        curr &= ~(0b1u << 3u);
        curr |= (SWAP_EN & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (RECC_EN & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (WECC_EN & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ECC_EN & 0b1u) << 0u;

        ECC_CTRL = curr;
    }

    /**
     * Get ERR_STATUS's Reserved1 field.
     *
     * Reserved
     */
    inline uint32_t get_ERR_STATUS_Reserved1() volatile
    {
        return (ERR_STATUS >> 2u) & 0b111111111111111111111111111111u;
    }

    /**
     * Get ERR_STATUS's MULTI_ERR bit.
     *
     * Multiple Bits Error
     */
    inline bool get_ERR_STATUS_MULTI_ERR() volatile
    {
        return ERR_STATUS & (1u << 1u);
    }

    /**
     * Set ERR_STATUS's MULTI_ERR bit.
     *
     * Multiple Bits Error
     */
    inline void set_ERR_STATUS_MULTI_ERR() volatile
    {
        ERR_STATUS |= 1u << 1u;
    }

    /**
     * Clear ERR_STATUS's MULTI_ERR bit.
     *
     * Multiple Bits Error
     */
    inline void clear_ERR_STATUS_MULTI_ERR() volatile
    {
        ERR_STATUS &= ~(1u << 1u);
    }

    /**
     * Toggle ERR_STATUS's MULTI_ERR bit.
     *
     * Multiple Bits Error
     */
    inline void toggle_ERR_STATUS_MULTI_ERR() volatile
    {
        ERR_STATUS ^= 1u << 1u;
    }

    /**
     * Get ERR_STATUS's SINGLE_ERR bit.
     *
     * Single Bit Error
     */
    inline bool get_ERR_STATUS_SINGLE_ERR() volatile
    {
        return ERR_STATUS & (1u << 0u);
    }

    /**
     * Set ERR_STATUS's SINGLE_ERR bit.
     *
     * Single Bit Error
     */
    inline void set_ERR_STATUS_SINGLE_ERR() volatile
    {
        ERR_STATUS |= 1u << 0u;
    }

    /**
     * Clear ERR_STATUS's SINGLE_ERR bit.
     *
     * Single Bit Error
     */
    inline void clear_ERR_STATUS_SINGLE_ERR() volatile
    {
        ERR_STATUS &= ~(1u << 0u);
    }

    /**
     * Toggle ERR_STATUS's SINGLE_ERR bit.
     *
     * Single Bit Error
     */
    inline void toggle_ERR_STATUS_SINGLE_ERR() volatile
    {
        ERR_STATUS ^= 1u << 0u;
    }

    /**
     * Get all of ERR_STATUS's bit fields.
     *
     * (read-write) Error Interrupt Status Register
     */
    inline void get_ERR_STATUS(uint32_t &Reserved1, bool &MULTI_ERR,
                               bool &SINGLE_ERR) volatile
    {
        uint32_t curr = ERR_STATUS;

        Reserved1 = (curr >> 2u) & 0b111111111111111111111111111111u;
        MULTI_ERR = curr & (1u << 1u);
        SINGLE_ERR = curr & (1u << 0u);
    }

    /**
     * Set all of ERR_STATUS's bit fields.
     *
     * (read-write) Error Interrupt Status Register
     */
    inline void set_ERR_STATUS(bool MULTI_ERR, bool SINGLE_ERR) volatile
    {
        uint32_t curr = ERR_STATUS;

        curr &= ~(0b1u << 1u);
        curr |= (MULTI_ERR & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SINGLE_ERR & 0b1u) << 0u;

        ERR_STATUS = curr;
    }

    /**
     * Get ERR_STAT_EN's Reserved1 field.
     *
     * Reserved
     */
    inline uint32_t get_ERR_STAT_EN_Reserved1() volatile
    {
        return (ERR_STAT_EN >> 2u) & 0b111111111111111111111111111111u;
    }

    /**
     * Get ERR_STAT_EN's MULIT_ERR_STAT_EN bit.
     *
     * Multiple Bits Error Status Enable
     */
    inline bool get_ERR_STAT_EN_MULIT_ERR_STAT_EN() volatile
    {
        return ERR_STAT_EN & (1u << 1u);
    }

    /**
     * Set ERR_STAT_EN's MULIT_ERR_STAT_EN bit.
     *
     * Multiple Bits Error Status Enable
     */
    inline void set_ERR_STAT_EN_MULIT_ERR_STAT_EN() volatile
    {
        ERR_STAT_EN |= 1u << 1u;
    }

    /**
     * Clear ERR_STAT_EN's MULIT_ERR_STAT_EN bit.
     *
     * Multiple Bits Error Status Enable
     */
    inline void clear_ERR_STAT_EN_MULIT_ERR_STAT_EN() volatile
    {
        ERR_STAT_EN &= ~(1u << 1u);
    }

    /**
     * Toggle ERR_STAT_EN's MULIT_ERR_STAT_EN bit.
     *
     * Multiple Bits Error Status Enable
     */
    inline void toggle_ERR_STAT_EN_MULIT_ERR_STAT_EN() volatile
    {
        ERR_STAT_EN ^= 1u << 1u;
    }

    /**
     * Get ERR_STAT_EN's SINGLE_ERR_STAT_EN bit.
     *
     * Single Bit Error Status Enable
     */
    inline bool get_ERR_STAT_EN_SINGLE_ERR_STAT_EN() volatile
    {
        return ERR_STAT_EN & (1u << 0u);
    }

    /**
     * Set ERR_STAT_EN's SINGLE_ERR_STAT_EN bit.
     *
     * Single Bit Error Status Enable
     */
    inline void set_ERR_STAT_EN_SINGLE_ERR_STAT_EN() volatile
    {
        ERR_STAT_EN |= 1u << 0u;
    }

    /**
     * Clear ERR_STAT_EN's SINGLE_ERR_STAT_EN bit.
     *
     * Single Bit Error Status Enable
     */
    inline void clear_ERR_STAT_EN_SINGLE_ERR_STAT_EN() volatile
    {
        ERR_STAT_EN &= ~(1u << 0u);
    }

    /**
     * Toggle ERR_STAT_EN's SINGLE_ERR_STAT_EN bit.
     *
     * Single Bit Error Status Enable
     */
    inline void toggle_ERR_STAT_EN_SINGLE_ERR_STAT_EN() volatile
    {
        ERR_STAT_EN ^= 1u << 0u;
    }

    /**
     * Get all of ERR_STAT_EN's bit fields.
     *
     * (read-write) Error Interrupt Status Enable Register
     */
    inline void get_ERR_STAT_EN(uint32_t &Reserved1, bool &MULIT_ERR_STAT_EN,
                                bool &SINGLE_ERR_STAT_EN) volatile
    {
        uint32_t curr = ERR_STAT_EN;

        Reserved1 = (curr >> 2u) & 0b111111111111111111111111111111u;
        MULIT_ERR_STAT_EN = curr & (1u << 1u);
        SINGLE_ERR_STAT_EN = curr & (1u << 0u);
    }

    /**
     * Set all of ERR_STAT_EN's bit fields.
     *
     * (read-write) Error Interrupt Status Enable Register
     */
    inline void set_ERR_STAT_EN(bool MULIT_ERR_STAT_EN,
                                bool SINGLE_ERR_STAT_EN) volatile
    {
        uint32_t curr = ERR_STAT_EN;

        curr &= ~(0b1u << 1u);
        curr |= (MULIT_ERR_STAT_EN & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SINGLE_ERR_STAT_EN & 0b1u) << 0u;

        ERR_STAT_EN = curr;
    }

    /**
     * Get ERR_SIG_EN's Reserved1 field.
     *
     * Reserved
     */
    inline uint32_t get_ERR_SIG_EN_Reserved1() volatile
    {
        return (ERR_SIG_EN >> 2u) & 0b111111111111111111111111111111u;
    }

    /**
     * Get ERR_SIG_EN's MULTI_ERR_SIG_EN bit.
     *
     * Multiple Bits Error Interrupt Enable
     */
    inline bool get_ERR_SIG_EN_MULTI_ERR_SIG_EN() volatile
    {
        return ERR_SIG_EN & (1u << 1u);
    }

    /**
     * Set ERR_SIG_EN's MULTI_ERR_SIG_EN bit.
     *
     * Multiple Bits Error Interrupt Enable
     */
    inline void set_ERR_SIG_EN_MULTI_ERR_SIG_EN() volatile
    {
        ERR_SIG_EN |= 1u << 1u;
    }

    /**
     * Clear ERR_SIG_EN's MULTI_ERR_SIG_EN bit.
     *
     * Multiple Bits Error Interrupt Enable
     */
    inline void clear_ERR_SIG_EN_MULTI_ERR_SIG_EN() volatile
    {
        ERR_SIG_EN &= ~(1u << 1u);
    }

    /**
     * Toggle ERR_SIG_EN's MULTI_ERR_SIG_EN bit.
     *
     * Multiple Bits Error Interrupt Enable
     */
    inline void toggle_ERR_SIG_EN_MULTI_ERR_SIG_EN() volatile
    {
        ERR_SIG_EN ^= 1u << 1u;
    }

    /**
     * Get ERR_SIG_EN's SINGLE_ERR_SIG_EN bit.
     *
     * Single Bit Error Interrupt Enable
     */
    inline bool get_ERR_SIG_EN_SINGLE_ERR_SIG_EN() volatile
    {
        return ERR_SIG_EN & (1u << 0u);
    }

    /**
     * Set ERR_SIG_EN's SINGLE_ERR_SIG_EN bit.
     *
     * Single Bit Error Interrupt Enable
     */
    inline void set_ERR_SIG_EN_SINGLE_ERR_SIG_EN() volatile
    {
        ERR_SIG_EN |= 1u << 0u;
    }

    /**
     * Clear ERR_SIG_EN's SINGLE_ERR_SIG_EN bit.
     *
     * Single Bit Error Interrupt Enable
     */
    inline void clear_ERR_SIG_EN_SINGLE_ERR_SIG_EN() volatile
    {
        ERR_SIG_EN &= ~(1u << 0u);
    }

    /**
     * Toggle ERR_SIG_EN's SINGLE_ERR_SIG_EN bit.
     *
     * Single Bit Error Interrupt Enable
     */
    inline void toggle_ERR_SIG_EN_SINGLE_ERR_SIG_EN() volatile
    {
        ERR_SIG_EN ^= 1u << 0u;
    }

    /**
     * Get all of ERR_SIG_EN's bit fields.
     *
     * (read-write) Error Interrupt Enable Register
     */
    inline void get_ERR_SIG_EN(uint32_t &Reserved1, bool &MULTI_ERR_SIG_EN,
                               bool &SINGLE_ERR_SIG_EN) volatile
    {
        uint32_t curr = ERR_SIG_EN;

        Reserved1 = (curr >> 2u) & 0b111111111111111111111111111111u;
        MULTI_ERR_SIG_EN = curr & (1u << 1u);
        SINGLE_ERR_SIG_EN = curr & (1u << 0u);
    }

    /**
     * Set all of ERR_SIG_EN's bit fields.
     *
     * (read-write) Error Interrupt Enable Register
     */
    inline void set_ERR_SIG_EN(bool MULTI_ERR_SIG_EN,
                               bool SINGLE_ERR_SIG_EN) volatile
    {
        uint32_t curr = ERR_SIG_EN;

        curr &= ~(0b1u << 1u);
        curr |= (MULTI_ERR_SIG_EN & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SINGLE_ERR_SIG_EN & 0b1u) << 0u;

        ERR_SIG_EN = curr;
    }

    /**
     * Get ERR_DATA_INJ's ERR_DATA_INJ field.
     *
     * Error Injection On Write Data
     */
    inline uint32_t get_ERR_DATA_INJ_ERR_DATA_INJ() volatile
    {
        return (ERR_DATA_INJ >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set ERR_DATA_INJ's ERR_DATA_INJ field.
     *
     * Error Injection On Write Data
     */
    inline void set_ERR_DATA_INJ_ERR_DATA_INJ(uint32_t value) volatile
    {
        uint32_t curr = ERR_DATA_INJ;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        ERR_DATA_INJ = curr;
    }

    /**
     * Get ERR_ECC_INJ's ERR_ECC_INJ field.
     *
     * Error Injection On ECC Code of Write Data
     */
    inline uint32_t get_ERR_ECC_INJ_ERR_ECC_INJ() volatile
    {
        return (ERR_ECC_INJ >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set ERR_ECC_INJ's ERR_ECC_INJ field.
     *
     * Error Injection On ECC Code of Write Data
     */
    inline void set_ERR_ECC_INJ_ERR_ECC_INJ(uint32_t value) volatile
    {
        uint32_t curr = ERR_ECC_INJ;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        ERR_ECC_INJ = curr;
    }

    /**
     * Get SINGLE_ERR_ADDR's SINGLE_ERR_ADDR field.
     *
     * Single Error Address
     */
    inline uint32_t get_SINGLE_ERR_ADDR_SINGLE_ERR_ADDR() volatile
    {
        return (SINGLE_ERR_ADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_DATA's SINGLE_ERR_DATA field.
     *
     * Single Error Read Data
     */
    inline uint32_t get_SINGLE_ERR_DATA_SINGLE_ERR_DATA() volatile
    {
        return (SINGLE_ERR_DATA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_ECC's SINGLE_ERR_ECC field.
     *
     * Single Error ECC code
     */
    inline uint32_t get_SINGLE_ERR_ECC_SINGLE_ERR_ECC() volatile
    {
        return (SINGLE_ERR_ECC >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_POS's SINGLE_ERR_POS field.
     *
     * Single Error bit Position
     */
    inline uint32_t get_SINGLE_ERR_POS_SINGLE_ERR_POS() volatile
    {
        return (SINGLE_ERR_POS >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_BIT_FIELD's Reserved1 field.
     *
     * Reserved
     */
    inline uint32_t get_SINGLE_ERR_BIT_FIELD_Reserved1() volatile
    {
        return (SINGLE_ERR_BIT_FIELD >> 8u) & 0b111111111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_BIT_FIELD's SINGLE_ERR_BIT_FIELD field.
     *
     * Single Error Bit Field
     */
    inline uint8_t get_SINGLE_ERR_BIT_FIELD_SINGLE_ERR_BIT_FIELD() volatile
    {
        return (SINGLE_ERR_BIT_FIELD >> 0u) & 0b11111111u;
    }

    /**
     * Get all of SINGLE_ERR_BIT_FIELD's bit fields.
     *
     * (read-write) Single Error Bit Field
     */
    inline void get_SINGLE_ERR_BIT_FIELD(
        uint32_t &Reserved1, uint8_t &SINGLE_ERR_BIT_FIELD) volatile
    {
        uint32_t curr = SINGLE_ERR_BIT_FIELD;

        Reserved1 = (curr >> 8u) & 0b111111111111111111111111u;
        SINGLE_ERR_BIT_FIELD = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get MULTI_ERR_ADDR's MULTI_ERR_ADDR field.
     *
     * Multiple Error Address
     */
    inline uint32_t get_MULTI_ERR_ADDR_MULTI_ERR_ADDR() volatile
    {
        return (MULTI_ERR_ADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get MULTI_ERR_DATA's MULTI_ERR_DATA field.
     *
     * Multiple Error Read Data
     */
    inline uint32_t get_MULTI_ERR_DATA_MULTI_ERR_DATA() volatile
    {
        return (MULTI_ERR_DATA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get MULTI_ERR_ECC's MULTI_ERR_ECC field.
     *
     * Multiple Error ECC code
     */
    inline uint32_t get_MULTI_ERR_ECC_MULTI_ERR_ECC() volatile
    {
        return (MULTI_ERR_ECC >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get MULTI_ERR_BIT_FIELD's Reserved1 field.
     *
     * Reserved
     */
    inline uint32_t get_MULTI_ERR_BIT_FIELD_Reserved1() volatile
    {
        return (MULTI_ERR_BIT_FIELD >> 8u) & 0b111111111111111111111111u;
    }

    /**
     * Get MULTI_ERR_BIT_FIELD's MULTI_ERR_BIT_FIELD field.
     *
     * Multiple Error Bit Field
     */
    inline uint8_t get_MULTI_ERR_BIT_FIELD_MULTI_ERR_BIT_FIELD() volatile
    {
        return (MULTI_ERR_BIT_FIELD >> 0u) & 0b11111111u;
    }

    /**
     * Get all of MULTI_ERR_BIT_FIELD's bit fields.
     *
     * (read-write) Multiple Error Bit Field
     */
    inline void get_MULTI_ERR_BIT_FIELD(uint32_t &Reserved1,
                                        uint8_t &MULTI_ERR_BIT_FIELD) volatile
    {
        uint32_t curr = MULTI_ERR_BIT_FIELD;

        Reserved1 = (curr >> 8u) & 0b111111111111111111111111u;
        MULTI_ERR_BIT_FIELD = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get ECC_BASE_ADDR0's ECC_BASE_ADDR0 field.
     *
     * ECC Region 0 Base Address
     */
    inline uint32_t get_ECC_BASE_ADDR0_ECC_BASE_ADDR0() volatile
    {
        return (ECC_BASE_ADDR0 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set ECC_BASE_ADDR0's ECC_BASE_ADDR0 field.
     *
     * ECC Region 0 Base Address
     */
    inline void set_ECC_BASE_ADDR0_ECC_BASE_ADDR0(uint32_t value) volatile
    {
        uint32_t curr = ECC_BASE_ADDR0;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        ECC_BASE_ADDR0 = curr;
    }

    /**
     * Get ECC_END_ADDR0's ECC_END_ADDR0 field.
     *
     * ECC Region 0 End Address
     */
    inline uint32_t get_ECC_END_ADDR0_ECC_END_ADDR0() volatile
    {
        return (ECC_END_ADDR0 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set ECC_END_ADDR0's ECC_END_ADDR0 field.
     *
     * ECC Region 0 End Address
     */
    inline void set_ECC_END_ADDR0_ECC_END_ADDR0(uint32_t value) volatile
    {
        uint32_t curr = ECC_END_ADDR0;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        ECC_END_ADDR0 = curr;
    }

    /**
     * Get ECC_BASE_ADDR1's ECC_BASE_ADDR1 field.
     *
     * ECC Region 1 Base Address
     */
    inline uint32_t get_ECC_BASE_ADDR1_ECC_BASE_ADDR1() volatile
    {
        return (ECC_BASE_ADDR1 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set ECC_BASE_ADDR1's ECC_BASE_ADDR1 field.
     *
     * ECC Region 1 Base Address
     */
    inline void set_ECC_BASE_ADDR1_ECC_BASE_ADDR1(uint32_t value) volatile
    {
        uint32_t curr = ECC_BASE_ADDR1;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        ECC_BASE_ADDR1 = curr;
    }

    /**
     * Get ECC_END_ADDR1's ECC_END_ADDR1 field.
     *
     * ECC Region 1 End Address
     */
    inline uint32_t get_ECC_END_ADDR1_ECC_END_ADDR1() volatile
    {
        return (ECC_END_ADDR1 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set ECC_END_ADDR1's ECC_END_ADDR1 field.
     *
     * ECC Region 1 End Address
     */
    inline void set_ECC_END_ADDR1_ECC_END_ADDR1(uint32_t value) volatile
    {
        uint32_t curr = ECC_END_ADDR1;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        ECC_END_ADDR1 = curr;
    }

    /**
     * Get ECC_BASE_ADDR2's ECC_BASE_ADDR2 field.
     *
     * ECC Region 2 Base Address
     */
    inline uint32_t get_ECC_BASE_ADDR2_ECC_BASE_ADDR2() volatile
    {
        return (ECC_BASE_ADDR2 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set ECC_BASE_ADDR2's ECC_BASE_ADDR2 field.
     *
     * ECC Region 2 Base Address
     */
    inline void set_ECC_BASE_ADDR2_ECC_BASE_ADDR2(uint32_t value) volatile
    {
        uint32_t curr = ECC_BASE_ADDR2;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        ECC_BASE_ADDR2 = curr;
    }

    /**
     * Get ECC_END_ADDR2's ECC_END_ADDR2 field.
     *
     * ECC Region 2 End Address
     */
    inline uint32_t get_ECC_END_ADDR2_ECC_END_ADDR2() volatile
    {
        return (ECC_END_ADDR2 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set ECC_END_ADDR2's ECC_END_ADDR2 field.
     *
     * ECC Region 2 End Address
     */
    inline void set_ECC_END_ADDR2_ECC_END_ADDR2(uint32_t value) volatile
    {
        uint32_t curr = ECC_END_ADDR2;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        ECC_END_ADDR2 = curr;
    }

    /**
     * Get ECC_BASE_ADDR3's ECC_BASE_ADDR3 field.
     *
     * ECC Region 3 Base Address
     */
    inline uint32_t get_ECC_BASE_ADDR3_ECC_BASE_ADDR3() volatile
    {
        return (ECC_BASE_ADDR3 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set ECC_BASE_ADDR3's ECC_BASE_ADDR3 field.
     *
     * ECC Region 3 Base Address
     */
    inline void set_ECC_BASE_ADDR3_ECC_BASE_ADDR3(uint32_t value) volatile
    {
        uint32_t curr = ECC_BASE_ADDR3;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        ECC_BASE_ADDR3 = curr;
    }

    /**
     * Get ECC_END_ADDR3's ECC_END_ADDR3 field.
     *
     * ECC Region 3 End Address
     */
    inline uint32_t get_ECC_END_ADDR3_ECC_END_ADDR3() volatile
    {
        return (ECC_END_ADDR3 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set ECC_END_ADDR3's ECC_END_ADDR3 field.
     *
     * ECC Region 3 End Address
     */
    inline void set_ECC_END_ADDR3_ECC_END_ADDR3(uint32_t value) volatile
    {
        uint32_t curr = ECC_END_ADDR3;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        ECC_END_ADDR3 = curr;
    }
};

static_assert(sizeof(xecc_flexspi1) == xecc_flexspi1::size);

static volatile xecc_flexspi1 *const XECC_FLEXSPI1 =
    reinterpret_cast<xecc_flexspi1 *>(0x4001C000);

static volatile xecc_flexspi1 *const XECC_FLEXSPI2 =
    reinterpret_cast<xecc_flexspi1 *>(0x40020000);

static volatile xecc_flexspi1 *const XECC_SEMC =
    reinterpret_cast<xecc_flexspi1 *>(0x40024000);

}; // namespace MIMXRT1176::CM7
