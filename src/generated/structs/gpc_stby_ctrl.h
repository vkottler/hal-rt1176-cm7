/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/GPC_STBY_CTRL_STBY_BANDGAP_IN_CTRL_CNT_MODE.h"
#include "../enums/GPC_STBY_CTRL_STBY_BANDGAP_OUT_CTRL_CNT_MODE.h"
#include "../enums/GPC_STBY_CTRL_STBY_BIAS_IN_CTRL_CNT_MODE.h"
#include "../enums/GPC_STBY_CTRL_STBY_BIAS_OUT_CTRL_CNT_MODE.h"
#include "../enums/GPC_STBY_CTRL_STBY_DCDC_IN_CTRL_CNT_MODE.h"
#include "../enums/GPC_STBY_CTRL_STBY_DCDC_OUT_CTRL_CNT_MODE.h"
#include "../enums/GPC_STBY_CTRL_STBY_LDO_IN_CTRL_CNT_MODE.h"
#include "../enums/GPC_STBY_CTRL_STBY_LDO_OUT_CTRL_CNT_MODE.h"
#include "../enums/GPC_STBY_CTRL_STBY_LPCG_IN_CTRL_CNT_MODE.h"
#include "../enums/GPC_STBY_CTRL_STBY_LPCG_OUT_CTRL_CNT_MODE.h"
#include "../enums/GPC_STBY_CTRL_STBY_PLDO_IN_CTRL_CNT_MODE.h"
#include "../enums/GPC_STBY_CTRL_STBY_PLDO_OUT_CTRL_CNT_MODE.h"
#include "../enums/GPC_STBY_CTRL_STBY_PLL_IN_CTRL_CNT_MODE.h"
#include "../enums/GPC_STBY_CTRL_STBY_PLL_OUT_CTRL_CNT_MODE.h"
#include "../enums/GPC_STBY_CTRL_STBY_PMIC_IN_CTRL_CNT_MODE.h"
#include "../enums/GPC_STBY_CTRL_STBY_PMIC_OUT_CTRL_CNT_MODE.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * GPC_STBY
 */
struct [[gnu::packed]] gpc_stby_ctrl
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        612; /*!< gpc_stby_ctrl's size in bytes. */

    /* Fields. */
    const uint32_t reserved_padding0 = {};
    uint32_t
        STBY_AUTHEN_CTRL; /*!< (read-write) Standby Authentication Control */
    const uint32_t reserved_padding1 = {};
    uint32_t STBY_MISC; /*!< (read-write) STBY Misc */
    static constexpr std::size_t reserved_padding2_length = 56;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    uint32_t STBY_LPCG_IN_CTRL; /*!< (read-write) STBY lpcg_in control */
    static constexpr std::size_t reserved_padding3_length = 3;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    uint32_t STBY_PLL_IN_CTRL; /*!< (read-write) STBY pll_in control */
    static constexpr std::size_t reserved_padding4_length = 3;
    const uint32_t reserved_padding4[reserved_padding4_length] = {};
    uint32_t STBY_BIAS_IN_CTRL; /*!< (read-write) STBY bias_in control */
    static constexpr std::size_t reserved_padding5_length = 3;
    const uint32_t reserved_padding5[reserved_padding5_length] = {};
    uint32_t STBY_PLDO_IN_CTRL; /*!< (read-write) STBY pldo_in control */
    const uint32_t reserved_padding6 = {};
    uint32_t STBY_BANDGAP_IN_CTRL; /*!< (read-write) STBY bandgap_in control */
    const uint32_t reserved_padding7 = {};
    uint32_t STBY_LDO_IN_CTRL; /*!< (read-write) STBY ldo_in control */
    static constexpr std::size_t reserved_padding8_length = 3;
    const uint32_t reserved_padding8[reserved_padding8_length] = {};
    uint32_t STBY_DCDC_IN_CTRL; /*!< (read-write) STBY dcdc_in control */
    static constexpr std::size_t reserved_padding9_length = 3;
    const uint32_t reserved_padding9[reserved_padding9_length] = {};
    uint32_t STBY_PMIC_IN_CTRL; /*!< (read-write) STBY PMIC in control */
    static constexpr std::size_t reserved_padding10_length = 43;
    const uint32_t reserved_padding10[reserved_padding10_length] = {};
    uint32_t STBY_PMIC_OUT_CTRL; /*!< (read-write) STBY PMIC out control */
    static constexpr std::size_t reserved_padding11_length = 3;
    const uint32_t reserved_padding11[reserved_padding11_length] = {};
    uint32_t STBY_DCDC_OUT_CTRL; /*!< (read-write) STBY DCDC out control */
    static constexpr std::size_t reserved_padding12_length = 3;
    const uint32_t reserved_padding12[reserved_padding12_length] = {};
    uint32_t STBY_LDO_OUT_CTRL; /*!< (read-write) STBY LDO out control */
    static constexpr std::size_t reserved_padding13_length = 3;
    const uint32_t reserved_padding13[reserved_padding13_length] = {};
    uint32_t
        STBY_BANDGAP_OUT_CTRL; /*!< (read-write) STBY bandgap out control */
    const uint32_t reserved_padding14 = {};
    uint32_t STBY_PLDO_OUT_CTRL; /*!< (read-write) STBY pldo out control */
    const uint32_t reserved_padding15 = {};
    uint32_t STBY_BIAS_OUT_CTRL; /*!< (read-write) STBY bias out control */
    static constexpr std::size_t reserved_padding16_length = 3;
    const uint32_t reserved_padding16[reserved_padding16_length] = {};
    uint32_t STBY_PLL_OUT_CTRL; /*!< (read-write) STBY PLL out control */
    static constexpr std::size_t reserved_padding17_length = 3;
    const uint32_t reserved_padding17[reserved_padding17_length] = {};
    uint32_t STBY_LPCG_OUT_CTRL; /*!< (read-write) STBY LPCG out control */

    /* Methods. */

    /**
     * Get STBY_AUTHEN_CTRL's LOCK_CFG bit.
     *
     * Configuration lock
     */
    inline bool get_STBY_AUTHEN_CTRL_LOCK_CFG() volatile
    {
        return STBY_AUTHEN_CTRL & (1u << 20u);
    }

    /**
     * Set STBY_AUTHEN_CTRL's LOCK_CFG bit.
     *
     * Configuration lock
     */
    inline void set_STBY_AUTHEN_CTRL_LOCK_CFG() volatile
    {
        STBY_AUTHEN_CTRL |= 1u << 20u;
    }

    /**
     * Clear STBY_AUTHEN_CTRL's LOCK_CFG bit.
     *
     * Configuration lock
     */
    inline void clear_STBY_AUTHEN_CTRL_LOCK_CFG() volatile
    {
        STBY_AUTHEN_CTRL &= ~(1u << 20u);
    }

    /**
     * Toggle STBY_AUTHEN_CTRL's LOCK_CFG bit.
     *
     * Configuration lock
     */
    inline void toggle_STBY_AUTHEN_CTRL_LOCK_CFG() volatile
    {
        STBY_AUTHEN_CTRL ^= 1u << 20u;
    }

    /**
     * Get STBY_MISC's FORCE_CPU3_STBY bit.
     *
     * Force CPU3 requesting standby mode
     */
    inline bool get_STBY_MISC_FORCE_CPU3_STBY() volatile
    {
        return STBY_MISC & (1u << 3u);
    }

    /**
     * Set STBY_MISC's FORCE_CPU3_STBY bit.
     *
     * Force CPU3 requesting standby mode
     */
    inline void set_STBY_MISC_FORCE_CPU3_STBY() volatile
    {
        STBY_MISC |= 1u << 3u;
    }

    /**
     * Clear STBY_MISC's FORCE_CPU3_STBY bit.
     *
     * Force CPU3 requesting standby mode
     */
    inline void clear_STBY_MISC_FORCE_CPU3_STBY() volatile
    {
        STBY_MISC &= ~(1u << 3u);
    }

    /**
     * Toggle STBY_MISC's FORCE_CPU3_STBY bit.
     *
     * Force CPU3 requesting standby mode
     */
    inline void toggle_STBY_MISC_FORCE_CPU3_STBY() volatile
    {
        STBY_MISC ^= 1u << 3u;
    }

    /**
     * Get STBY_MISC's FORCE_CPU2_STBY bit.
     *
     * Force CPU2 requesting standby mode
     */
    inline bool get_STBY_MISC_FORCE_CPU2_STBY() volatile
    {
        return STBY_MISC & (1u << 2u);
    }

    /**
     * Set STBY_MISC's FORCE_CPU2_STBY bit.
     *
     * Force CPU2 requesting standby mode
     */
    inline void set_STBY_MISC_FORCE_CPU2_STBY() volatile
    {
        STBY_MISC |= 1u << 2u;
    }

    /**
     * Clear STBY_MISC's FORCE_CPU2_STBY bit.
     *
     * Force CPU2 requesting standby mode
     */
    inline void clear_STBY_MISC_FORCE_CPU2_STBY() volatile
    {
        STBY_MISC &= ~(1u << 2u);
    }

    /**
     * Toggle STBY_MISC's FORCE_CPU2_STBY bit.
     *
     * Force CPU2 requesting standby mode
     */
    inline void toggle_STBY_MISC_FORCE_CPU2_STBY() volatile
    {
        STBY_MISC ^= 1u << 2u;
    }

    /**
     * Get STBY_MISC's FORCE_CPU1_STBY bit.
     *
     * Force CPU0 requesting standby mode
     */
    inline bool get_STBY_MISC_FORCE_CPU1_STBY() volatile
    {
        return STBY_MISC & (1u << 1u);
    }

    /**
     * Set STBY_MISC's FORCE_CPU1_STBY bit.
     *
     * Force CPU0 requesting standby mode
     */
    inline void set_STBY_MISC_FORCE_CPU1_STBY() volatile
    {
        STBY_MISC |= 1u << 1u;
    }

    /**
     * Clear STBY_MISC's FORCE_CPU1_STBY bit.
     *
     * Force CPU0 requesting standby mode
     */
    inline void clear_STBY_MISC_FORCE_CPU1_STBY() volatile
    {
        STBY_MISC &= ~(1u << 1u);
    }

    /**
     * Toggle STBY_MISC's FORCE_CPU1_STBY bit.
     *
     * Force CPU0 requesting standby mode
     */
    inline void toggle_STBY_MISC_FORCE_CPU1_STBY() volatile
    {
        STBY_MISC ^= 1u << 1u;
    }

    /**
     * Get STBY_MISC's FORCE_CPU0_STBY bit.
     *
     * Force CPU0 requesting standby mode
     */
    inline bool get_STBY_MISC_FORCE_CPU0_STBY() volatile
    {
        return STBY_MISC & (1u << 0u);
    }

    /**
     * Set STBY_MISC's FORCE_CPU0_STBY bit.
     *
     * Force CPU0 requesting standby mode
     */
    inline void set_STBY_MISC_FORCE_CPU0_STBY() volatile
    {
        STBY_MISC |= 1u << 0u;
    }

    /**
     * Clear STBY_MISC's FORCE_CPU0_STBY bit.
     *
     * Force CPU0 requesting standby mode
     */
    inline void clear_STBY_MISC_FORCE_CPU0_STBY() volatile
    {
        STBY_MISC &= ~(1u << 0u);
    }

    /**
     * Toggle STBY_MISC's FORCE_CPU0_STBY bit.
     *
     * Force CPU0 requesting standby mode
     */
    inline void toggle_STBY_MISC_FORCE_CPU0_STBY() volatile
    {
        STBY_MISC ^= 1u << 0u;
    }

    /**
     * Get all of STBY_MISC's bit fields.
     *
     * (read-write) STBY Misc
     */
    inline void get_STBY_MISC(bool &FORCE_CPU3_STBY, bool &FORCE_CPU2_STBY,
                              bool &FORCE_CPU1_STBY,
                              bool &FORCE_CPU0_STBY) volatile
    {
        uint32_t curr = STBY_MISC;

        FORCE_CPU3_STBY = curr & (1u << 3u);
        FORCE_CPU2_STBY = curr & (1u << 2u);
        FORCE_CPU1_STBY = curr & (1u << 1u);
        FORCE_CPU0_STBY = curr & (1u << 0u);
    }

    /**
     * Set all of STBY_MISC's bit fields.
     *
     * (read-write) STBY Misc
     */
    inline void set_STBY_MISC(bool FORCE_CPU3_STBY, bool FORCE_CPU2_STBY,
                              bool FORCE_CPU1_STBY,
                              bool FORCE_CPU0_STBY) volatile
    {
        uint32_t curr = STBY_MISC;

        curr &= ~(0b1u << 3u);
        curr |= (FORCE_CPU3_STBY & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (FORCE_CPU2_STBY & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (FORCE_CPU1_STBY & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (FORCE_CPU0_STBY & 0b1u) << 0u;

        STBY_MISC = curr;
    }

    /**
     * Get STBY_LPCG_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_STBY_LPCG_IN_CTRL_DISABLE() volatile
    {
        return STBY_LPCG_IN_CTRL & (1u << 31u);
    }

    /**
     * Set STBY_LPCG_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_STBY_LPCG_IN_CTRL_DISABLE() volatile
    {
        STBY_LPCG_IN_CTRL |= 1u << 31u;
    }

    /**
     * Clear STBY_LPCG_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_STBY_LPCG_IN_CTRL_DISABLE() volatile
    {
        STBY_LPCG_IN_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle STBY_LPCG_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_STBY_LPCG_IN_CTRL_DISABLE() volatile
    {
        STBY_LPCG_IN_CTRL ^= 1u << 31u;
    }

    /**
     * Get STBY_LPCG_IN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_STBY_CTRL_STBY_LPCG_IN_CTRL_CNT_MODE
    get_STBY_LPCG_IN_CTRL_CNT_MODE() volatile
    {
        return GPC_STBY_CTRL_STBY_LPCG_IN_CTRL_CNT_MODE(
            (STBY_LPCG_IN_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set STBY_LPCG_IN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_STBY_LPCG_IN_CTRL_CNT_MODE(
        GPC_STBY_CTRL_STBY_LPCG_IN_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = STBY_LPCG_IN_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        STBY_LPCG_IN_CTRL = curr;
    }

    /**
     * Get STBY_LPCG_IN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_STBY_LPCG_IN_CTRL_STEP_CNT() volatile
    {
        return (STBY_LPCG_IN_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set STBY_LPCG_IN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_STBY_LPCG_IN_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = STBY_LPCG_IN_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        STBY_LPCG_IN_CTRL = curr;
    }

    /**
     * Get all of STBY_LPCG_IN_CTRL's bit fields.
     *
     * (read-write) STBY lpcg_in control
     */
    inline void get_STBY_LPCG_IN_CTRL(
        bool &DISABLE, GPC_STBY_CTRL_STBY_LPCG_IN_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = STBY_LPCG_IN_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_STBY_CTRL_STBY_LPCG_IN_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of STBY_LPCG_IN_CTRL's bit fields.
     *
     * (read-write) STBY lpcg_in control
     */
    inline void set_STBY_LPCG_IN_CTRL(
        bool DISABLE, GPC_STBY_CTRL_STBY_LPCG_IN_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = STBY_LPCG_IN_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        STBY_LPCG_IN_CTRL = curr;
    }

    /**
     * Get STBY_PLL_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_STBY_PLL_IN_CTRL_DISABLE() volatile
    {
        return STBY_PLL_IN_CTRL & (1u << 31u);
    }

    /**
     * Set STBY_PLL_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_STBY_PLL_IN_CTRL_DISABLE() volatile
    {
        STBY_PLL_IN_CTRL |= 1u << 31u;
    }

    /**
     * Clear STBY_PLL_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_STBY_PLL_IN_CTRL_DISABLE() volatile
    {
        STBY_PLL_IN_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle STBY_PLL_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_STBY_PLL_IN_CTRL_DISABLE() volatile
    {
        STBY_PLL_IN_CTRL ^= 1u << 31u;
    }

    /**
     * Get STBY_PLL_IN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_STBY_CTRL_STBY_PLL_IN_CTRL_CNT_MODE
    get_STBY_PLL_IN_CTRL_CNT_MODE() volatile
    {
        return GPC_STBY_CTRL_STBY_PLL_IN_CTRL_CNT_MODE(
            (STBY_PLL_IN_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set STBY_PLL_IN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_STBY_PLL_IN_CTRL_CNT_MODE(
        GPC_STBY_CTRL_STBY_PLL_IN_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = STBY_PLL_IN_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        STBY_PLL_IN_CTRL = curr;
    }

    /**
     * Get STBY_PLL_IN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_STBY_PLL_IN_CTRL_STEP_CNT() volatile
    {
        return (STBY_PLL_IN_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set STBY_PLL_IN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_STBY_PLL_IN_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = STBY_PLL_IN_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        STBY_PLL_IN_CTRL = curr;
    }

    /**
     * Get all of STBY_PLL_IN_CTRL's bit fields.
     *
     * (read-write) STBY pll_in control
     */
    inline void get_STBY_PLL_IN_CTRL(
        bool &DISABLE, GPC_STBY_CTRL_STBY_PLL_IN_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = STBY_PLL_IN_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_STBY_CTRL_STBY_PLL_IN_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of STBY_PLL_IN_CTRL's bit fields.
     *
     * (read-write) STBY pll_in control
     */
    inline void set_STBY_PLL_IN_CTRL(
        bool DISABLE, GPC_STBY_CTRL_STBY_PLL_IN_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = STBY_PLL_IN_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        STBY_PLL_IN_CTRL = curr;
    }

    /**
     * Get STBY_BIAS_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_STBY_BIAS_IN_CTRL_DISABLE() volatile
    {
        return STBY_BIAS_IN_CTRL & (1u << 31u);
    }

    /**
     * Set STBY_BIAS_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_STBY_BIAS_IN_CTRL_DISABLE() volatile
    {
        STBY_BIAS_IN_CTRL |= 1u << 31u;
    }

    /**
     * Clear STBY_BIAS_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_STBY_BIAS_IN_CTRL_DISABLE() volatile
    {
        STBY_BIAS_IN_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle STBY_BIAS_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_STBY_BIAS_IN_CTRL_DISABLE() volatile
    {
        STBY_BIAS_IN_CTRL ^= 1u << 31u;
    }

    /**
     * Get STBY_BIAS_IN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_STBY_CTRL_STBY_BIAS_IN_CTRL_CNT_MODE
    get_STBY_BIAS_IN_CTRL_CNT_MODE() volatile
    {
        return GPC_STBY_CTRL_STBY_BIAS_IN_CTRL_CNT_MODE(
            (STBY_BIAS_IN_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set STBY_BIAS_IN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_STBY_BIAS_IN_CTRL_CNT_MODE(
        GPC_STBY_CTRL_STBY_BIAS_IN_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = STBY_BIAS_IN_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        STBY_BIAS_IN_CTRL = curr;
    }

    /**
     * Get STBY_BIAS_IN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_STBY_BIAS_IN_CTRL_STEP_CNT() volatile
    {
        return (STBY_BIAS_IN_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set STBY_BIAS_IN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_STBY_BIAS_IN_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = STBY_BIAS_IN_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        STBY_BIAS_IN_CTRL = curr;
    }

    /**
     * Get all of STBY_BIAS_IN_CTRL's bit fields.
     *
     * (read-write) STBY bias_in control
     */
    inline void get_STBY_BIAS_IN_CTRL(
        bool &DISABLE, GPC_STBY_CTRL_STBY_BIAS_IN_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = STBY_BIAS_IN_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_STBY_CTRL_STBY_BIAS_IN_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of STBY_BIAS_IN_CTRL's bit fields.
     *
     * (read-write) STBY bias_in control
     */
    inline void set_STBY_BIAS_IN_CTRL(
        bool DISABLE, GPC_STBY_CTRL_STBY_BIAS_IN_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = STBY_BIAS_IN_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        STBY_BIAS_IN_CTRL = curr;
    }

    /**
     * Get STBY_PLDO_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_STBY_PLDO_IN_CTRL_DISABLE() volatile
    {
        return STBY_PLDO_IN_CTRL & (1u << 31u);
    }

    /**
     * Set STBY_PLDO_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_STBY_PLDO_IN_CTRL_DISABLE() volatile
    {
        STBY_PLDO_IN_CTRL |= 1u << 31u;
    }

    /**
     * Clear STBY_PLDO_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_STBY_PLDO_IN_CTRL_DISABLE() volatile
    {
        STBY_PLDO_IN_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle STBY_PLDO_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_STBY_PLDO_IN_CTRL_DISABLE() volatile
    {
        STBY_PLDO_IN_CTRL ^= 1u << 31u;
    }

    /**
     * Get STBY_PLDO_IN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_STBY_CTRL_STBY_PLDO_IN_CTRL_CNT_MODE
    get_STBY_PLDO_IN_CTRL_CNT_MODE() volatile
    {
        return GPC_STBY_CTRL_STBY_PLDO_IN_CTRL_CNT_MODE(
            (STBY_PLDO_IN_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set STBY_PLDO_IN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_STBY_PLDO_IN_CTRL_CNT_MODE(
        GPC_STBY_CTRL_STBY_PLDO_IN_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = STBY_PLDO_IN_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        STBY_PLDO_IN_CTRL = curr;
    }

    /**
     * Get STBY_PLDO_IN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_STBY_PLDO_IN_CTRL_STEP_CNT() volatile
    {
        return (STBY_PLDO_IN_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set STBY_PLDO_IN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_STBY_PLDO_IN_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = STBY_PLDO_IN_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        STBY_PLDO_IN_CTRL = curr;
    }

    /**
     * Get all of STBY_PLDO_IN_CTRL's bit fields.
     *
     * (read-write) STBY pldo_in control
     */
    inline void get_STBY_PLDO_IN_CTRL(
        bool &DISABLE, GPC_STBY_CTRL_STBY_PLDO_IN_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = STBY_PLDO_IN_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_STBY_CTRL_STBY_PLDO_IN_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of STBY_PLDO_IN_CTRL's bit fields.
     *
     * (read-write) STBY pldo_in control
     */
    inline void set_STBY_PLDO_IN_CTRL(
        bool DISABLE, GPC_STBY_CTRL_STBY_PLDO_IN_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = STBY_PLDO_IN_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        STBY_PLDO_IN_CTRL = curr;
    }

    /**
     * Get STBY_BANDGAP_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_STBY_BANDGAP_IN_CTRL_DISABLE() volatile
    {
        return STBY_BANDGAP_IN_CTRL & (1u << 31u);
    }

    /**
     * Set STBY_BANDGAP_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_STBY_BANDGAP_IN_CTRL_DISABLE() volatile
    {
        STBY_BANDGAP_IN_CTRL |= 1u << 31u;
    }

    /**
     * Clear STBY_BANDGAP_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_STBY_BANDGAP_IN_CTRL_DISABLE() volatile
    {
        STBY_BANDGAP_IN_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle STBY_BANDGAP_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_STBY_BANDGAP_IN_CTRL_DISABLE() volatile
    {
        STBY_BANDGAP_IN_CTRL ^= 1u << 31u;
    }

    /**
     * Get STBY_BANDGAP_IN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_STBY_CTRL_STBY_BANDGAP_IN_CTRL_CNT_MODE
    get_STBY_BANDGAP_IN_CTRL_CNT_MODE() volatile
    {
        return GPC_STBY_CTRL_STBY_BANDGAP_IN_CTRL_CNT_MODE(
            (STBY_BANDGAP_IN_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set STBY_BANDGAP_IN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_STBY_BANDGAP_IN_CTRL_CNT_MODE(
        GPC_STBY_CTRL_STBY_BANDGAP_IN_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = STBY_BANDGAP_IN_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        STBY_BANDGAP_IN_CTRL = curr;
    }

    /**
     * Get STBY_BANDGAP_IN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_STBY_BANDGAP_IN_CTRL_STEP_CNT() volatile
    {
        return (STBY_BANDGAP_IN_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set STBY_BANDGAP_IN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_STBY_BANDGAP_IN_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = STBY_BANDGAP_IN_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        STBY_BANDGAP_IN_CTRL = curr;
    }

    /**
     * Get all of STBY_BANDGAP_IN_CTRL's bit fields.
     *
     * (read-write) STBY bandgap_in control
     */
    inline void get_STBY_BANDGAP_IN_CTRL(
        bool &DISABLE, GPC_STBY_CTRL_STBY_BANDGAP_IN_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = STBY_BANDGAP_IN_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_STBY_CTRL_STBY_BANDGAP_IN_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of STBY_BANDGAP_IN_CTRL's bit fields.
     *
     * (read-write) STBY bandgap_in control
     */
    inline void set_STBY_BANDGAP_IN_CTRL(
        bool DISABLE, GPC_STBY_CTRL_STBY_BANDGAP_IN_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = STBY_BANDGAP_IN_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        STBY_BANDGAP_IN_CTRL = curr;
    }

    /**
     * Get STBY_LDO_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_STBY_LDO_IN_CTRL_DISABLE() volatile
    {
        return STBY_LDO_IN_CTRL & (1u << 31u);
    }

    /**
     * Set STBY_LDO_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_STBY_LDO_IN_CTRL_DISABLE() volatile
    {
        STBY_LDO_IN_CTRL |= 1u << 31u;
    }

    /**
     * Clear STBY_LDO_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_STBY_LDO_IN_CTRL_DISABLE() volatile
    {
        STBY_LDO_IN_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle STBY_LDO_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_STBY_LDO_IN_CTRL_DISABLE() volatile
    {
        STBY_LDO_IN_CTRL ^= 1u << 31u;
    }

    /**
     * Get STBY_LDO_IN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_STBY_CTRL_STBY_LDO_IN_CTRL_CNT_MODE
    get_STBY_LDO_IN_CTRL_CNT_MODE() volatile
    {
        return GPC_STBY_CTRL_STBY_LDO_IN_CTRL_CNT_MODE(
            (STBY_LDO_IN_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set STBY_LDO_IN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_STBY_LDO_IN_CTRL_CNT_MODE(
        GPC_STBY_CTRL_STBY_LDO_IN_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = STBY_LDO_IN_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        STBY_LDO_IN_CTRL = curr;
    }

    /**
     * Get STBY_LDO_IN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_STBY_LDO_IN_CTRL_STEP_CNT() volatile
    {
        return (STBY_LDO_IN_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set STBY_LDO_IN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_STBY_LDO_IN_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = STBY_LDO_IN_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        STBY_LDO_IN_CTRL = curr;
    }

    /**
     * Get all of STBY_LDO_IN_CTRL's bit fields.
     *
     * (read-write) STBY ldo_in control
     */
    inline void get_STBY_LDO_IN_CTRL(
        bool &DISABLE, GPC_STBY_CTRL_STBY_LDO_IN_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = STBY_LDO_IN_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_STBY_CTRL_STBY_LDO_IN_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of STBY_LDO_IN_CTRL's bit fields.
     *
     * (read-write) STBY ldo_in control
     */
    inline void set_STBY_LDO_IN_CTRL(
        bool DISABLE, GPC_STBY_CTRL_STBY_LDO_IN_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = STBY_LDO_IN_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        STBY_LDO_IN_CTRL = curr;
    }

    /**
     * Get STBY_DCDC_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_STBY_DCDC_IN_CTRL_DISABLE() volatile
    {
        return STBY_DCDC_IN_CTRL & (1u << 31u);
    }

    /**
     * Set STBY_DCDC_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_STBY_DCDC_IN_CTRL_DISABLE() volatile
    {
        STBY_DCDC_IN_CTRL |= 1u << 31u;
    }

    /**
     * Clear STBY_DCDC_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_STBY_DCDC_IN_CTRL_DISABLE() volatile
    {
        STBY_DCDC_IN_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle STBY_DCDC_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_STBY_DCDC_IN_CTRL_DISABLE() volatile
    {
        STBY_DCDC_IN_CTRL ^= 1u << 31u;
    }

    /**
     * Get STBY_DCDC_IN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_STBY_CTRL_STBY_DCDC_IN_CTRL_CNT_MODE
    get_STBY_DCDC_IN_CTRL_CNT_MODE() volatile
    {
        return GPC_STBY_CTRL_STBY_DCDC_IN_CTRL_CNT_MODE(
            (STBY_DCDC_IN_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set STBY_DCDC_IN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_STBY_DCDC_IN_CTRL_CNT_MODE(
        GPC_STBY_CTRL_STBY_DCDC_IN_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = STBY_DCDC_IN_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        STBY_DCDC_IN_CTRL = curr;
    }

    /**
     * Get STBY_DCDC_IN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_STBY_DCDC_IN_CTRL_STEP_CNT() volatile
    {
        return (STBY_DCDC_IN_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set STBY_DCDC_IN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_STBY_DCDC_IN_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = STBY_DCDC_IN_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        STBY_DCDC_IN_CTRL = curr;
    }

    /**
     * Get all of STBY_DCDC_IN_CTRL's bit fields.
     *
     * (read-write) STBY dcdc_in control
     */
    inline void get_STBY_DCDC_IN_CTRL(
        bool &DISABLE, GPC_STBY_CTRL_STBY_DCDC_IN_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = STBY_DCDC_IN_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_STBY_CTRL_STBY_DCDC_IN_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of STBY_DCDC_IN_CTRL's bit fields.
     *
     * (read-write) STBY dcdc_in control
     */
    inline void set_STBY_DCDC_IN_CTRL(
        bool DISABLE, GPC_STBY_CTRL_STBY_DCDC_IN_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = STBY_DCDC_IN_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        STBY_DCDC_IN_CTRL = curr;
    }

    /**
     * Get STBY_PMIC_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_STBY_PMIC_IN_CTRL_DISABLE() volatile
    {
        return STBY_PMIC_IN_CTRL & (1u << 31u);
    }

    /**
     * Set STBY_PMIC_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_STBY_PMIC_IN_CTRL_DISABLE() volatile
    {
        STBY_PMIC_IN_CTRL |= 1u << 31u;
    }

    /**
     * Clear STBY_PMIC_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_STBY_PMIC_IN_CTRL_DISABLE() volatile
    {
        STBY_PMIC_IN_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle STBY_PMIC_IN_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_STBY_PMIC_IN_CTRL_DISABLE() volatile
    {
        STBY_PMIC_IN_CTRL ^= 1u << 31u;
    }

    /**
     * Get STBY_PMIC_IN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_STBY_CTRL_STBY_PMIC_IN_CTRL_CNT_MODE
    get_STBY_PMIC_IN_CTRL_CNT_MODE() volatile
    {
        return GPC_STBY_CTRL_STBY_PMIC_IN_CTRL_CNT_MODE(
            (STBY_PMIC_IN_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set STBY_PMIC_IN_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_STBY_PMIC_IN_CTRL_CNT_MODE(
        GPC_STBY_CTRL_STBY_PMIC_IN_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = STBY_PMIC_IN_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        STBY_PMIC_IN_CTRL = curr;
    }

    /**
     * Get STBY_PMIC_IN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_STBY_PMIC_IN_CTRL_STEP_CNT() volatile
    {
        return (STBY_PMIC_IN_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set STBY_PMIC_IN_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_STBY_PMIC_IN_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = STBY_PMIC_IN_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        STBY_PMIC_IN_CTRL = curr;
    }

    /**
     * Get all of STBY_PMIC_IN_CTRL's bit fields.
     *
     * (read-write) STBY PMIC in control
     */
    inline void get_STBY_PMIC_IN_CTRL(
        bool &DISABLE, GPC_STBY_CTRL_STBY_PMIC_IN_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = STBY_PMIC_IN_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_STBY_CTRL_STBY_PMIC_IN_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of STBY_PMIC_IN_CTRL's bit fields.
     *
     * (read-write) STBY PMIC in control
     */
    inline void set_STBY_PMIC_IN_CTRL(
        bool DISABLE, GPC_STBY_CTRL_STBY_PMIC_IN_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = STBY_PMIC_IN_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        STBY_PMIC_IN_CTRL = curr;
    }

    /**
     * Get STBY_PMIC_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_STBY_PMIC_OUT_CTRL_DISABLE() volatile
    {
        return STBY_PMIC_OUT_CTRL & (1u << 31u);
    }

    /**
     * Set STBY_PMIC_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_STBY_PMIC_OUT_CTRL_DISABLE() volatile
    {
        STBY_PMIC_OUT_CTRL |= 1u << 31u;
    }

    /**
     * Clear STBY_PMIC_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_STBY_PMIC_OUT_CTRL_DISABLE() volatile
    {
        STBY_PMIC_OUT_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle STBY_PMIC_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_STBY_PMIC_OUT_CTRL_DISABLE() volatile
    {
        STBY_PMIC_OUT_CTRL ^= 1u << 31u;
    }

    /**
     * Get STBY_PMIC_OUT_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_STBY_CTRL_STBY_PMIC_OUT_CTRL_CNT_MODE
    get_STBY_PMIC_OUT_CTRL_CNT_MODE() volatile
    {
        return GPC_STBY_CTRL_STBY_PMIC_OUT_CTRL_CNT_MODE(
            (STBY_PMIC_OUT_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set STBY_PMIC_OUT_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_STBY_PMIC_OUT_CTRL_CNT_MODE(
        GPC_STBY_CTRL_STBY_PMIC_OUT_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = STBY_PMIC_OUT_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        STBY_PMIC_OUT_CTRL = curr;
    }

    /**
     * Get STBY_PMIC_OUT_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_STBY_PMIC_OUT_CTRL_STEP_CNT() volatile
    {
        return (STBY_PMIC_OUT_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set STBY_PMIC_OUT_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_STBY_PMIC_OUT_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = STBY_PMIC_OUT_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        STBY_PMIC_OUT_CTRL = curr;
    }

    /**
     * Get all of STBY_PMIC_OUT_CTRL's bit fields.
     *
     * (read-write) STBY PMIC out control
     */
    inline void get_STBY_PMIC_OUT_CTRL(
        bool &DISABLE, GPC_STBY_CTRL_STBY_PMIC_OUT_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = STBY_PMIC_OUT_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_STBY_CTRL_STBY_PMIC_OUT_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of STBY_PMIC_OUT_CTRL's bit fields.
     *
     * (read-write) STBY PMIC out control
     */
    inline void set_STBY_PMIC_OUT_CTRL(
        bool DISABLE, GPC_STBY_CTRL_STBY_PMIC_OUT_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = STBY_PMIC_OUT_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        STBY_PMIC_OUT_CTRL = curr;
    }

    /**
     * Get STBY_DCDC_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_STBY_DCDC_OUT_CTRL_DISABLE() volatile
    {
        return STBY_DCDC_OUT_CTRL & (1u << 31u);
    }

    /**
     * Set STBY_DCDC_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_STBY_DCDC_OUT_CTRL_DISABLE() volatile
    {
        STBY_DCDC_OUT_CTRL |= 1u << 31u;
    }

    /**
     * Clear STBY_DCDC_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_STBY_DCDC_OUT_CTRL_DISABLE() volatile
    {
        STBY_DCDC_OUT_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle STBY_DCDC_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_STBY_DCDC_OUT_CTRL_DISABLE() volatile
    {
        STBY_DCDC_OUT_CTRL ^= 1u << 31u;
    }

    /**
     * Get STBY_DCDC_OUT_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_STBY_CTRL_STBY_DCDC_OUT_CTRL_CNT_MODE
    get_STBY_DCDC_OUT_CTRL_CNT_MODE() volatile
    {
        return GPC_STBY_CTRL_STBY_DCDC_OUT_CTRL_CNT_MODE(
            (STBY_DCDC_OUT_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set STBY_DCDC_OUT_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_STBY_DCDC_OUT_CTRL_CNT_MODE(
        GPC_STBY_CTRL_STBY_DCDC_OUT_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = STBY_DCDC_OUT_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        STBY_DCDC_OUT_CTRL = curr;
    }

    /**
     * Get STBY_DCDC_OUT_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_STBY_DCDC_OUT_CTRL_STEP_CNT() volatile
    {
        return (STBY_DCDC_OUT_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set STBY_DCDC_OUT_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_STBY_DCDC_OUT_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = STBY_DCDC_OUT_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        STBY_DCDC_OUT_CTRL = curr;
    }

    /**
     * Get all of STBY_DCDC_OUT_CTRL's bit fields.
     *
     * (read-write) STBY DCDC out control
     */
    inline void get_STBY_DCDC_OUT_CTRL(
        bool &DISABLE, GPC_STBY_CTRL_STBY_DCDC_OUT_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = STBY_DCDC_OUT_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_STBY_CTRL_STBY_DCDC_OUT_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of STBY_DCDC_OUT_CTRL's bit fields.
     *
     * (read-write) STBY DCDC out control
     */
    inline void set_STBY_DCDC_OUT_CTRL(
        bool DISABLE, GPC_STBY_CTRL_STBY_DCDC_OUT_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = STBY_DCDC_OUT_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        STBY_DCDC_OUT_CTRL = curr;
    }

    /**
     * Get STBY_LDO_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_STBY_LDO_OUT_CTRL_DISABLE() volatile
    {
        return STBY_LDO_OUT_CTRL & (1u << 31u);
    }

    /**
     * Set STBY_LDO_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_STBY_LDO_OUT_CTRL_DISABLE() volatile
    {
        STBY_LDO_OUT_CTRL |= 1u << 31u;
    }

    /**
     * Clear STBY_LDO_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_STBY_LDO_OUT_CTRL_DISABLE() volatile
    {
        STBY_LDO_OUT_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle STBY_LDO_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_STBY_LDO_OUT_CTRL_DISABLE() volatile
    {
        STBY_LDO_OUT_CTRL ^= 1u << 31u;
    }

    /**
     * Get STBY_LDO_OUT_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_STBY_CTRL_STBY_LDO_OUT_CTRL_CNT_MODE
    get_STBY_LDO_OUT_CTRL_CNT_MODE() volatile
    {
        return GPC_STBY_CTRL_STBY_LDO_OUT_CTRL_CNT_MODE(
            (STBY_LDO_OUT_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set STBY_LDO_OUT_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_STBY_LDO_OUT_CTRL_CNT_MODE(
        GPC_STBY_CTRL_STBY_LDO_OUT_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = STBY_LDO_OUT_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        STBY_LDO_OUT_CTRL = curr;
    }

    /**
     * Get STBY_LDO_OUT_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_STBY_LDO_OUT_CTRL_STEP_CNT() volatile
    {
        return (STBY_LDO_OUT_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set STBY_LDO_OUT_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_STBY_LDO_OUT_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = STBY_LDO_OUT_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        STBY_LDO_OUT_CTRL = curr;
    }

    /**
     * Get all of STBY_LDO_OUT_CTRL's bit fields.
     *
     * (read-write) STBY LDO out control
     */
    inline void get_STBY_LDO_OUT_CTRL(
        bool &DISABLE, GPC_STBY_CTRL_STBY_LDO_OUT_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = STBY_LDO_OUT_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_STBY_CTRL_STBY_LDO_OUT_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of STBY_LDO_OUT_CTRL's bit fields.
     *
     * (read-write) STBY LDO out control
     */
    inline void set_STBY_LDO_OUT_CTRL(
        bool DISABLE, GPC_STBY_CTRL_STBY_LDO_OUT_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = STBY_LDO_OUT_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        STBY_LDO_OUT_CTRL = curr;
    }

    /**
     * Get STBY_BANDGAP_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_STBY_BANDGAP_OUT_CTRL_DISABLE() volatile
    {
        return STBY_BANDGAP_OUT_CTRL & (1u << 31u);
    }

    /**
     * Set STBY_BANDGAP_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_STBY_BANDGAP_OUT_CTRL_DISABLE() volatile
    {
        STBY_BANDGAP_OUT_CTRL |= 1u << 31u;
    }

    /**
     * Clear STBY_BANDGAP_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_STBY_BANDGAP_OUT_CTRL_DISABLE() volatile
    {
        STBY_BANDGAP_OUT_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle STBY_BANDGAP_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_STBY_BANDGAP_OUT_CTRL_DISABLE() volatile
    {
        STBY_BANDGAP_OUT_CTRL ^= 1u << 31u;
    }

    /**
     * Get STBY_BANDGAP_OUT_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_STBY_CTRL_STBY_BANDGAP_OUT_CTRL_CNT_MODE
    get_STBY_BANDGAP_OUT_CTRL_CNT_MODE() volatile
    {
        return GPC_STBY_CTRL_STBY_BANDGAP_OUT_CTRL_CNT_MODE(
            (STBY_BANDGAP_OUT_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set STBY_BANDGAP_OUT_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_STBY_BANDGAP_OUT_CTRL_CNT_MODE(
        GPC_STBY_CTRL_STBY_BANDGAP_OUT_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = STBY_BANDGAP_OUT_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        STBY_BANDGAP_OUT_CTRL = curr;
    }

    /**
     * Get STBY_BANDGAP_OUT_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_STBY_BANDGAP_OUT_CTRL_STEP_CNT() volatile
    {
        return (STBY_BANDGAP_OUT_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set STBY_BANDGAP_OUT_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_STBY_BANDGAP_OUT_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = STBY_BANDGAP_OUT_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        STBY_BANDGAP_OUT_CTRL = curr;
    }

    /**
     * Get all of STBY_BANDGAP_OUT_CTRL's bit fields.
     *
     * (read-write) STBY bandgap out control
     */
    inline void get_STBY_BANDGAP_OUT_CTRL(
        bool &DISABLE, GPC_STBY_CTRL_STBY_BANDGAP_OUT_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = STBY_BANDGAP_OUT_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE = GPC_STBY_CTRL_STBY_BANDGAP_OUT_CTRL_CNT_MODE((curr >> 28u) &
                                                                0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of STBY_BANDGAP_OUT_CTRL's bit fields.
     *
     * (read-write) STBY bandgap out control
     */
    inline void set_STBY_BANDGAP_OUT_CTRL(
        bool DISABLE, GPC_STBY_CTRL_STBY_BANDGAP_OUT_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = STBY_BANDGAP_OUT_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        STBY_BANDGAP_OUT_CTRL = curr;
    }

    /**
     * Get STBY_PLDO_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_STBY_PLDO_OUT_CTRL_DISABLE() volatile
    {
        return STBY_PLDO_OUT_CTRL & (1u << 31u);
    }

    /**
     * Set STBY_PLDO_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_STBY_PLDO_OUT_CTRL_DISABLE() volatile
    {
        STBY_PLDO_OUT_CTRL |= 1u << 31u;
    }

    /**
     * Clear STBY_PLDO_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_STBY_PLDO_OUT_CTRL_DISABLE() volatile
    {
        STBY_PLDO_OUT_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle STBY_PLDO_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_STBY_PLDO_OUT_CTRL_DISABLE() volatile
    {
        STBY_PLDO_OUT_CTRL ^= 1u << 31u;
    }

    /**
     * Get STBY_PLDO_OUT_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_STBY_CTRL_STBY_PLDO_OUT_CTRL_CNT_MODE
    get_STBY_PLDO_OUT_CTRL_CNT_MODE() volatile
    {
        return GPC_STBY_CTRL_STBY_PLDO_OUT_CTRL_CNT_MODE(
            (STBY_PLDO_OUT_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set STBY_PLDO_OUT_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_STBY_PLDO_OUT_CTRL_CNT_MODE(
        GPC_STBY_CTRL_STBY_PLDO_OUT_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = STBY_PLDO_OUT_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        STBY_PLDO_OUT_CTRL = curr;
    }

    /**
     * Get STBY_PLDO_OUT_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_STBY_PLDO_OUT_CTRL_STEP_CNT() volatile
    {
        return (STBY_PLDO_OUT_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set STBY_PLDO_OUT_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_STBY_PLDO_OUT_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = STBY_PLDO_OUT_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        STBY_PLDO_OUT_CTRL = curr;
    }

    /**
     * Get all of STBY_PLDO_OUT_CTRL's bit fields.
     *
     * (read-write) STBY pldo out control
     */
    inline void get_STBY_PLDO_OUT_CTRL(
        bool &DISABLE, GPC_STBY_CTRL_STBY_PLDO_OUT_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = STBY_PLDO_OUT_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_STBY_CTRL_STBY_PLDO_OUT_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of STBY_PLDO_OUT_CTRL's bit fields.
     *
     * (read-write) STBY pldo out control
     */
    inline void set_STBY_PLDO_OUT_CTRL(
        bool DISABLE, GPC_STBY_CTRL_STBY_PLDO_OUT_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = STBY_PLDO_OUT_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        STBY_PLDO_OUT_CTRL = curr;
    }

    /**
     * Get STBY_BIAS_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_STBY_BIAS_OUT_CTRL_DISABLE() volatile
    {
        return STBY_BIAS_OUT_CTRL & (1u << 31u);
    }

    /**
     * Set STBY_BIAS_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_STBY_BIAS_OUT_CTRL_DISABLE() volatile
    {
        STBY_BIAS_OUT_CTRL |= 1u << 31u;
    }

    /**
     * Clear STBY_BIAS_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_STBY_BIAS_OUT_CTRL_DISABLE() volatile
    {
        STBY_BIAS_OUT_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle STBY_BIAS_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_STBY_BIAS_OUT_CTRL_DISABLE() volatile
    {
        STBY_BIAS_OUT_CTRL ^= 1u << 31u;
    }

    /**
     * Get STBY_BIAS_OUT_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_STBY_CTRL_STBY_BIAS_OUT_CTRL_CNT_MODE
    get_STBY_BIAS_OUT_CTRL_CNT_MODE() volatile
    {
        return GPC_STBY_CTRL_STBY_BIAS_OUT_CTRL_CNT_MODE(
            (STBY_BIAS_OUT_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set STBY_BIAS_OUT_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_STBY_BIAS_OUT_CTRL_CNT_MODE(
        GPC_STBY_CTRL_STBY_BIAS_OUT_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = STBY_BIAS_OUT_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        STBY_BIAS_OUT_CTRL = curr;
    }

    /**
     * Get STBY_BIAS_OUT_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_STBY_BIAS_OUT_CTRL_STEP_CNT() volatile
    {
        return (STBY_BIAS_OUT_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set STBY_BIAS_OUT_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_STBY_BIAS_OUT_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = STBY_BIAS_OUT_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        STBY_BIAS_OUT_CTRL = curr;
    }

    /**
     * Get all of STBY_BIAS_OUT_CTRL's bit fields.
     *
     * (read-write) STBY bias out control
     */
    inline void get_STBY_BIAS_OUT_CTRL(
        bool &DISABLE, GPC_STBY_CTRL_STBY_BIAS_OUT_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = STBY_BIAS_OUT_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_STBY_CTRL_STBY_BIAS_OUT_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of STBY_BIAS_OUT_CTRL's bit fields.
     *
     * (read-write) STBY bias out control
     */
    inline void set_STBY_BIAS_OUT_CTRL(
        bool DISABLE, GPC_STBY_CTRL_STBY_BIAS_OUT_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = STBY_BIAS_OUT_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        STBY_BIAS_OUT_CTRL = curr;
    }

    /**
     * Get STBY_PLL_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_STBY_PLL_OUT_CTRL_DISABLE() volatile
    {
        return STBY_PLL_OUT_CTRL & (1u << 31u);
    }

    /**
     * Set STBY_PLL_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_STBY_PLL_OUT_CTRL_DISABLE() volatile
    {
        STBY_PLL_OUT_CTRL |= 1u << 31u;
    }

    /**
     * Clear STBY_PLL_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_STBY_PLL_OUT_CTRL_DISABLE() volatile
    {
        STBY_PLL_OUT_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle STBY_PLL_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_STBY_PLL_OUT_CTRL_DISABLE() volatile
    {
        STBY_PLL_OUT_CTRL ^= 1u << 31u;
    }

    /**
     * Get STBY_PLL_OUT_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_STBY_CTRL_STBY_PLL_OUT_CTRL_CNT_MODE
    get_STBY_PLL_OUT_CTRL_CNT_MODE() volatile
    {
        return GPC_STBY_CTRL_STBY_PLL_OUT_CTRL_CNT_MODE(
            (STBY_PLL_OUT_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set STBY_PLL_OUT_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_STBY_PLL_OUT_CTRL_CNT_MODE(
        GPC_STBY_CTRL_STBY_PLL_OUT_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = STBY_PLL_OUT_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        STBY_PLL_OUT_CTRL = curr;
    }

    /**
     * Get STBY_PLL_OUT_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_STBY_PLL_OUT_CTRL_STEP_CNT() volatile
    {
        return (STBY_PLL_OUT_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set STBY_PLL_OUT_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_STBY_PLL_OUT_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = STBY_PLL_OUT_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        STBY_PLL_OUT_CTRL = curr;
    }

    /**
     * Get all of STBY_PLL_OUT_CTRL's bit fields.
     *
     * (read-write) STBY PLL out control
     */
    inline void get_STBY_PLL_OUT_CTRL(
        bool &DISABLE, GPC_STBY_CTRL_STBY_PLL_OUT_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = STBY_PLL_OUT_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_STBY_CTRL_STBY_PLL_OUT_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of STBY_PLL_OUT_CTRL's bit fields.
     *
     * (read-write) STBY PLL out control
     */
    inline void set_STBY_PLL_OUT_CTRL(
        bool DISABLE, GPC_STBY_CTRL_STBY_PLL_OUT_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = STBY_PLL_OUT_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        STBY_PLL_OUT_CTRL = curr;
    }

    /**
     * Get STBY_LPCG_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline bool get_STBY_LPCG_OUT_CTRL_DISABLE() volatile
    {
        return STBY_LPCG_OUT_CTRL & (1u << 31u);
    }

    /**
     * Set STBY_LPCG_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void set_STBY_LPCG_OUT_CTRL_DISABLE() volatile
    {
        STBY_LPCG_OUT_CTRL |= 1u << 31u;
    }

    /**
     * Clear STBY_LPCG_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void clear_STBY_LPCG_OUT_CTRL_DISABLE() volatile
    {
        STBY_LPCG_OUT_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle STBY_LPCG_OUT_CTRL's DISABLE bit.
     *
     * Disable this step
     */
    inline void toggle_STBY_LPCG_OUT_CTRL_DISABLE() volatile
    {
        STBY_LPCG_OUT_CTRL ^= 1u << 31u;
    }

    /**
     * Get STBY_LPCG_OUT_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline GPC_STBY_CTRL_STBY_LPCG_OUT_CTRL_CNT_MODE
    get_STBY_LPCG_OUT_CTRL_CNT_MODE() volatile
    {
        return GPC_STBY_CTRL_STBY_LPCG_OUT_CTRL_CNT_MODE(
            (STBY_LPCG_OUT_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set STBY_LPCG_OUT_CTRL's CNT_MODE field.
     *
     * Count mode
     */
    inline void set_STBY_LPCG_OUT_CTRL_CNT_MODE(
        GPC_STBY_CTRL_STBY_LPCG_OUT_CTRL_CNT_MODE value) volatile
    {
        uint32_t curr = STBY_LPCG_OUT_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        STBY_LPCG_OUT_CTRL = curr;
    }

    /**
     * Get STBY_LPCG_OUT_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline uint16_t get_STBY_LPCG_OUT_CTRL_STEP_CNT() volatile
    {
        return (STBY_LPCG_OUT_CTRL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set STBY_LPCG_OUT_CTRL's STEP_CNT field.
     *
     * Step count, useage is depending on CNT_MODE
     */
    inline void set_STBY_LPCG_OUT_CTRL_STEP_CNT(uint16_t value) volatile
    {
        uint32_t curr = STBY_LPCG_OUT_CTRL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        STBY_LPCG_OUT_CTRL = curr;
    }

    /**
     * Get all of STBY_LPCG_OUT_CTRL's bit fields.
     *
     * (read-write) STBY LPCG out control
     */
    inline void get_STBY_LPCG_OUT_CTRL(
        bool &DISABLE, GPC_STBY_CTRL_STBY_LPCG_OUT_CTRL_CNT_MODE &CNT_MODE,
        uint16_t &STEP_CNT) volatile
    {
        uint32_t curr = STBY_LPCG_OUT_CTRL;

        DISABLE = curr & (1u << 31u);
        CNT_MODE =
            GPC_STBY_CTRL_STBY_LPCG_OUT_CTRL_CNT_MODE((curr >> 28u) & 0b11u);
        STEP_CNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of STBY_LPCG_OUT_CTRL's bit fields.
     *
     * (read-write) STBY LPCG out control
     */
    inline void set_STBY_LPCG_OUT_CTRL(
        bool DISABLE, GPC_STBY_CTRL_STBY_LPCG_OUT_CTRL_CNT_MODE CNT_MODE,
        uint16_t STEP_CNT) volatile
    {
        uint32_t curr = STBY_LPCG_OUT_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (DISABLE & 0b1u) << 31u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(CNT_MODE) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (STEP_CNT & 0b1111111111111111u) << 0u;

        STBY_LPCG_OUT_CTRL = curr;
    }
};

static_assert(sizeof(gpc_stby_ctrl) == gpc_stby_ctrl::size);

static volatile gpc_stby_ctrl *const GPC_STBY_CTRL =
    reinterpret_cast<gpc_stby_ctrl *>(0x40C02800);

}; // namespace MIMXRT1176::CM7
