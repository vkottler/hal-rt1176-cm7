/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/IOMUXC_LPSR_GPR_GPR0_DWP.h"
#include "../enums/IOMUXC_LPSR_GPR_GPR0_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_GPR_GPR1_DWP.h"
#include "../enums/IOMUXC_LPSR_GPR_GPR1_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_GPR_GPR26_DWP.h"
#include "../enums/IOMUXC_LPSR_GPR_GPR26_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_GPR_GPR33_DWP.h"
#include "../enums/IOMUXC_LPSR_GPR_GPR33_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_GPR_GPR34_DWP.h"
#include "../enums/IOMUXC_LPSR_GPR_GPR34_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_GPR_GPR35_DWP.h"
#include "../enums/IOMUXC_LPSR_GPR_GPR35_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_GPR_GPR36_DWP.h"
#include "../enums/IOMUXC_LPSR_GPR_GPR36_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_GPR_GPR37_DWP.h"
#include "../enums/IOMUXC_LPSR_GPR_GPR37_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_GPR_GPR38_DWP.h"
#include "../enums/IOMUXC_LPSR_GPR_GPR38_DWP_LOCK.h"
#include "../enums/IOMUXC_LPSR_GPR_GPR39_DWP.h"
#include "../enums/IOMUXC_LPSR_GPR_GPR39_DWP_LOCK.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * IOMUXC LPSR GPR
 */
struct [[gnu::packed]] iomuxc_lpsr_gpr
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        168; /*!< iomuxc_lpsr_gpr's size in bytes. */

    /* Fields. */
    uint32_t GPR0;  /*!< (read-write) GPR0 General Purpose Register */
    uint32_t GPR1;  /*!< (read-write) GPR1 General Purpose Register */
    uint32_t GPR2;  /*!< (read-write) GPR2 General Purpose Register */
    uint32_t GPR3;  /*!< (read-write) GPR3 General Purpose Register */
    uint32_t GPR4;  /*!< (read-write) GPR4 General Purpose Register */
    uint32_t GPR5;  /*!< (read-write) GPR5 General Purpose Register */
    uint32_t GPR6;  /*!< (read-write) GPR6 General Purpose Register */
    uint32_t GPR7;  /*!< (read-write) GPR7 General Purpose Register */
    uint32_t GPR8;  /*!< (read-write) GPR8 General Purpose Register */
    uint32_t GPR9;  /*!< (read-write) GPR9 General Purpose Register */
    uint32_t GPR10; /*!< (read-write) GPR10 General Purpose Register */
    uint32_t GPR11; /*!< (read-write) GPR11 General Purpose Register */
    uint32_t GPR12; /*!< (read-write) GPR12 General Purpose Register */
    uint32_t GPR13; /*!< (read-write) GPR13 General Purpose Register */
    uint32_t GPR14; /*!< (read-write) GPR14 General Purpose Register */
    uint32_t GPR15; /*!< (read-write) GPR15 General Purpose Register */
    uint32_t GPR16; /*!< (read-write) GPR16 General Purpose Register */
    uint32_t GPR17; /*!< (read-write) GPR17 General Purpose Register */
    uint32_t GPR18; /*!< (read-write) GPR18 General Purpose Register */
    uint32_t GPR19; /*!< (read-write) GPR19 General Purpose Register */
    uint32_t GPR20; /*!< (read-write) GPR20 General Purpose Register */
    uint32_t GPR21; /*!< (read-write) GPR21 General Purpose Register */
    uint32_t GPR22; /*!< (read-write) GPR22 General Purpose Register */
    uint32_t GPR23; /*!< (read-write) GPR23 General Purpose Register */
    uint32_t GPR24; /*!< (read-write) GPR24 General Purpose Register */
    uint32_t GPR25; /*!< (read-write) GPR25 General Purpose Register */
    uint32_t GPR26; /*!< (read-write) GPR26 General Purpose Register */
    static constexpr std::size_t reserved_padding0_length = 6;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t GPR33; /*!< (read-write) GPR33 General Purpose Register */
    uint32_t GPR34; /*!< (read-write) GPR34 General Purpose Register */
    uint32_t GPR35; /*!< (read-write) GPR35 General Purpose Register */
    uint32_t GPR36; /*!< (read-write) GPR36 General Purpose Register */
    uint32_t GPR37; /*!< (read-write) GPR37 General Purpose Register */
    uint32_t GPR38; /*!< (read-write) GPR38 General Purpose Register */
    uint32_t GPR39; /*!< (read-write) GPR39 General Purpose Register */
    uint32_t GPR40; /*!< (read-write) GPR40 General Purpose Register */
    uint32_t GPR41; /*!< (read-write) GPR41 General Purpose Register */

    /* Methods. */

    /**
     * Get GPR0's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_GPR_GPR0_DWP_LOCK get_GPR0_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_GPR_GPR0_DWP_LOCK((GPR0 >> 30u) & 0b11u);
    }

    /**
     * Set GPR0's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_GPR0_DWP_LOCK(IOMUXC_LPSR_GPR_GPR0_DWP_LOCK value) volatile
    {
        uint32_t curr = GPR0;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        GPR0 = curr;
    }

    /**
     * Get GPR0's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_GPR_GPR0_DWP get_GPR0_DWP() volatile
    {
        return IOMUXC_LPSR_GPR_GPR0_DWP((GPR0 >> 28u) & 0b11u);
    }

    /**
     * Set GPR0's DWP field.
     *
     * Domain write protection
     */
    inline void set_GPR0_DWP(IOMUXC_LPSR_GPR_GPR0_DWP value) volatile
    {
        uint32_t curr = GPR0;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        GPR0 = curr;
    }

    /**
     * Get GPR0's CM4_INIT_VTOR_LOW field.
     *
     * CM4 Vector table offset value lower bits out of reset
     */
    inline uint16_t get_GPR0_CM4_INIT_VTOR_LOW() volatile
    {
        return (GPR0 >> 3u) & 0b1111111111111u;
    }

    /**
     * Set GPR0's CM4_INIT_VTOR_LOW field.
     *
     * CM4 Vector table offset value lower bits out of reset
     */
    inline void set_GPR0_CM4_INIT_VTOR_LOW(uint16_t value) volatile
    {
        uint32_t curr = GPR0;

        curr &= ~(0b1111111111111u << 3u);
        curr |= (value & 0b1111111111111u) << 3u;

        GPR0 = curr;
    }

    /**
     * Get all of GPR0's bit fields.
     *
     * (read-write) GPR0 General Purpose Register
     */
    inline void get_GPR0(IOMUXC_LPSR_GPR_GPR0_DWP_LOCK &DWP_LOCK,
                         IOMUXC_LPSR_GPR_GPR0_DWP &DWP,
                         uint16_t &CM4_INIT_VTOR_LOW) volatile
    {
        uint32_t curr = GPR0;

        DWP_LOCK = IOMUXC_LPSR_GPR_GPR0_DWP_LOCK((curr >> 30u) & 0b11u);
        DWP = IOMUXC_LPSR_GPR_GPR0_DWP((curr >> 28u) & 0b11u);
        CM4_INIT_VTOR_LOW = (curr >> 3u) & 0b1111111111111u;
    }

    /**
     * Set all of GPR0's bit fields.
     *
     * (read-write) GPR0 General Purpose Register
     */
    inline void set_GPR0(IOMUXC_LPSR_GPR_GPR0_DWP_LOCK DWP_LOCK,
                         IOMUXC_LPSR_GPR_GPR0_DWP DWP,
                         uint16_t CM4_INIT_VTOR_LOW) volatile
    {
        uint32_t curr = GPR0;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1111111111111u << 3u);
        curr |= (CM4_INIT_VTOR_LOW & 0b1111111111111u) << 3u;

        GPR0 = curr;
    }

    /**
     * Get GPR1's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_GPR_GPR1_DWP_LOCK get_GPR1_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_GPR_GPR1_DWP_LOCK((GPR1 >> 30u) & 0b11u);
    }

    /**
     * Set GPR1's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_GPR1_DWP_LOCK(IOMUXC_LPSR_GPR_GPR1_DWP_LOCK value) volatile
    {
        uint32_t curr = GPR1;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        GPR1 = curr;
    }

    /**
     * Get GPR1's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_GPR_GPR1_DWP get_GPR1_DWP() volatile
    {
        return IOMUXC_LPSR_GPR_GPR1_DWP((GPR1 >> 28u) & 0b11u);
    }

    /**
     * Set GPR1's DWP field.
     *
     * Domain write protection
     */
    inline void set_GPR1_DWP(IOMUXC_LPSR_GPR_GPR1_DWP value) volatile
    {
        uint32_t curr = GPR1;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        GPR1 = curr;
    }

    /**
     * Get GPR1's CM4_INIT_VTOR_HIGH field.
     *
     * CM4 Vector table offset value higher bits out of reset
     */
    inline uint16_t get_GPR1_CM4_INIT_VTOR_HIGH() volatile
    {
        return (GPR1 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set GPR1's CM4_INIT_VTOR_HIGH field.
     *
     * CM4 Vector table offset value higher bits out of reset
     */
    inline void set_GPR1_CM4_INIT_VTOR_HIGH(uint16_t value) volatile
    {
        uint32_t curr = GPR1;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        GPR1 = curr;
    }

    /**
     * Get all of GPR1's bit fields.
     *
     * (read-write) GPR1 General Purpose Register
     */
    inline void get_GPR1(IOMUXC_LPSR_GPR_GPR1_DWP_LOCK &DWP_LOCK,
                         IOMUXC_LPSR_GPR_GPR1_DWP &DWP,
                         uint16_t &CM4_INIT_VTOR_HIGH) volatile
    {
        uint32_t curr = GPR1;

        DWP_LOCK = IOMUXC_LPSR_GPR_GPR1_DWP_LOCK((curr >> 30u) & 0b11u);
        DWP = IOMUXC_LPSR_GPR_GPR1_DWP((curr >> 28u) & 0b11u);
        CM4_INIT_VTOR_HIGH = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of GPR1's bit fields.
     *
     * (read-write) GPR1 General Purpose Register
     */
    inline void set_GPR1(IOMUXC_LPSR_GPR_GPR1_DWP_LOCK DWP_LOCK,
                         IOMUXC_LPSR_GPR_GPR1_DWP DWP,
                         uint16_t CM4_INIT_VTOR_HIGH) volatile
    {
        uint32_t curr = GPR1;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (CM4_INIT_VTOR_HIGH & 0b1111111111111111u) << 0u;

        GPR1 = curr;
    }

    /**
     * Get GPR2's APC_AC_R0_BOT field.
     *
     * APC start address of memory region-0
     */
    inline uint32_t get_GPR2_APC_AC_R0_BOT() volatile
    {
        return (GPR2 >> 3u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set GPR2's APC_AC_R0_BOT field.
     *
     * APC start address of memory region-0
     */
    inline void set_GPR2_APC_AC_R0_BOT(uint32_t value) volatile
    {
        uint32_t curr = GPR2;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (value & 0b11111111111111111111111111111u) << 3u;

        GPR2 = curr;
    }

    /**
     * Get GPR2's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline bool get_GPR2_LOCK() volatile
    {
        return GPR2 & (1u << 0u);
    }

    /**
     * Set GPR2's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void set_GPR2_LOCK() volatile
    {
        GPR2 |= 1u << 0u;
    }

    /**
     * Clear GPR2's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void clear_GPR2_LOCK() volatile
    {
        GPR2 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR2's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void toggle_GPR2_LOCK() volatile
    {
        GPR2 ^= 1u << 0u;
    }

    /**
     * Get all of GPR2's bit fields.
     *
     * (read-write) GPR2 General Purpose Register
     */
    inline void get_GPR2(uint32_t &APC_AC_R0_BOT, bool &LOCK) volatile
    {
        uint32_t curr = GPR2;

        APC_AC_R0_BOT = (curr >> 3u) & 0b11111111111111111111111111111u;
        LOCK = curr & (1u << 0u);
    }

    /**
     * Set all of GPR2's bit fields.
     *
     * (read-write) GPR2 General Purpose Register
     */
    inline void set_GPR2(uint32_t APC_AC_R0_BOT, bool LOCK) volatile
    {
        uint32_t curr = GPR2;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (APC_AC_R0_BOT & 0b11111111111111111111111111111u) << 3u;
        curr &= ~(0b1u << 0u);
        curr |= (LOCK & 0b1u) << 0u;

        GPR2 = curr;
    }

    /**
     * Get GPR3's APC_AC_R0_TOP field.
     *
     * APC end address of memory region-0
     */
    inline uint32_t get_GPR3_APC_AC_R0_TOP() volatile
    {
        return (GPR3 >> 3u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set GPR3's APC_AC_R0_TOP field.
     *
     * APC end address of memory region-0
     */
    inline void set_GPR3_APC_AC_R0_TOP(uint32_t value) volatile
    {
        uint32_t curr = GPR3;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (value & 0b11111111111111111111111111111u) << 3u;

        GPR3 = curr;
    }

    /**
     * Get GPR3's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline bool get_GPR3_LOCK() volatile
    {
        return GPR3 & (1u << 0u);
    }

    /**
     * Set GPR3's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void set_GPR3_LOCK() volatile
    {
        GPR3 |= 1u << 0u;
    }

    /**
     * Clear GPR3's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void clear_GPR3_LOCK() volatile
    {
        GPR3 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR3's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void toggle_GPR3_LOCK() volatile
    {
        GPR3 ^= 1u << 0u;
    }

    /**
     * Get all of GPR3's bit fields.
     *
     * (read-write) GPR3 General Purpose Register
     */
    inline void get_GPR3(uint32_t &APC_AC_R0_TOP, bool &LOCK) volatile
    {
        uint32_t curr = GPR3;

        APC_AC_R0_TOP = (curr >> 3u) & 0b11111111111111111111111111111u;
        LOCK = curr & (1u << 0u);
    }

    /**
     * Set all of GPR3's bit fields.
     *
     * (read-write) GPR3 General Purpose Register
     */
    inline void set_GPR3(uint32_t APC_AC_R0_TOP, bool LOCK) volatile
    {
        uint32_t curr = GPR3;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (APC_AC_R0_TOP & 0b11111111111111111111111111111u) << 3u;
        curr &= ~(0b1u << 0u);
        curr |= (LOCK & 0b1u) << 0u;

        GPR3 = curr;
    }

    /**
     * Get GPR4's APC_AC_R1_BOT field.
     *
     * APC start address of memory region-1
     */
    inline uint32_t get_GPR4_APC_AC_R1_BOT() volatile
    {
        return (GPR4 >> 3u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set GPR4's APC_AC_R1_BOT field.
     *
     * APC start address of memory region-1
     */
    inline void set_GPR4_APC_AC_R1_BOT(uint32_t value) volatile
    {
        uint32_t curr = GPR4;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (value & 0b11111111111111111111111111111u) << 3u;

        GPR4 = curr;
    }

    /**
     * Get GPR4's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline bool get_GPR4_LOCK() volatile
    {
        return GPR4 & (1u << 0u);
    }

    /**
     * Set GPR4's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void set_GPR4_LOCK() volatile
    {
        GPR4 |= 1u << 0u;
    }

    /**
     * Clear GPR4's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void clear_GPR4_LOCK() volatile
    {
        GPR4 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR4's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void toggle_GPR4_LOCK() volatile
    {
        GPR4 ^= 1u << 0u;
    }

    /**
     * Get all of GPR4's bit fields.
     *
     * (read-write) GPR4 General Purpose Register
     */
    inline void get_GPR4(uint32_t &APC_AC_R1_BOT, bool &LOCK) volatile
    {
        uint32_t curr = GPR4;

        APC_AC_R1_BOT = (curr >> 3u) & 0b11111111111111111111111111111u;
        LOCK = curr & (1u << 0u);
    }

    /**
     * Set all of GPR4's bit fields.
     *
     * (read-write) GPR4 General Purpose Register
     */
    inline void set_GPR4(uint32_t APC_AC_R1_BOT, bool LOCK) volatile
    {
        uint32_t curr = GPR4;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (APC_AC_R1_BOT & 0b11111111111111111111111111111u) << 3u;
        curr &= ~(0b1u << 0u);
        curr |= (LOCK & 0b1u) << 0u;

        GPR4 = curr;
    }

    /**
     * Get GPR5's APC_AC_R1_TOP field.
     *
     * APC end address of memory region-1
     */
    inline uint32_t get_GPR5_APC_AC_R1_TOP() volatile
    {
        return (GPR5 >> 3u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set GPR5's APC_AC_R1_TOP field.
     *
     * APC end address of memory region-1
     */
    inline void set_GPR5_APC_AC_R1_TOP(uint32_t value) volatile
    {
        uint32_t curr = GPR5;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (value & 0b11111111111111111111111111111u) << 3u;

        GPR5 = curr;
    }

    /**
     * Get GPR5's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline bool get_GPR5_LOCK() volatile
    {
        return GPR5 & (1u << 0u);
    }

    /**
     * Set GPR5's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void set_GPR5_LOCK() volatile
    {
        GPR5 |= 1u << 0u;
    }

    /**
     * Clear GPR5's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void clear_GPR5_LOCK() volatile
    {
        GPR5 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR5's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void toggle_GPR5_LOCK() volatile
    {
        GPR5 ^= 1u << 0u;
    }

    /**
     * Get all of GPR5's bit fields.
     *
     * (read-write) GPR5 General Purpose Register
     */
    inline void get_GPR5(uint32_t &APC_AC_R1_TOP, bool &LOCK) volatile
    {
        uint32_t curr = GPR5;

        APC_AC_R1_TOP = (curr >> 3u) & 0b11111111111111111111111111111u;
        LOCK = curr & (1u << 0u);
    }

    /**
     * Set all of GPR5's bit fields.
     *
     * (read-write) GPR5 General Purpose Register
     */
    inline void set_GPR5(uint32_t APC_AC_R1_TOP, bool LOCK) volatile
    {
        uint32_t curr = GPR5;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (APC_AC_R1_TOP & 0b11111111111111111111111111111u) << 3u;
        curr &= ~(0b1u << 0u);
        curr |= (LOCK & 0b1u) << 0u;

        GPR5 = curr;
    }

    /**
     * Get GPR6's APC_AC_R2_BOT field.
     *
     * APC start address of memory region-2
     */
    inline uint32_t get_GPR6_APC_AC_R2_BOT() volatile
    {
        return (GPR6 >> 3u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set GPR6's APC_AC_R2_BOT field.
     *
     * APC start address of memory region-2
     */
    inline void set_GPR6_APC_AC_R2_BOT(uint32_t value) volatile
    {
        uint32_t curr = GPR6;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (value & 0b11111111111111111111111111111u) << 3u;

        GPR6 = curr;
    }

    /**
     * Get GPR6's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline bool get_GPR6_LOCK() volatile
    {
        return GPR6 & (1u << 0u);
    }

    /**
     * Set GPR6's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void set_GPR6_LOCK() volatile
    {
        GPR6 |= 1u << 0u;
    }

    /**
     * Clear GPR6's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void clear_GPR6_LOCK() volatile
    {
        GPR6 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR6's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void toggle_GPR6_LOCK() volatile
    {
        GPR6 ^= 1u << 0u;
    }

    /**
     * Get all of GPR6's bit fields.
     *
     * (read-write) GPR6 General Purpose Register
     */
    inline void get_GPR6(uint32_t &APC_AC_R2_BOT, bool &LOCK) volatile
    {
        uint32_t curr = GPR6;

        APC_AC_R2_BOT = (curr >> 3u) & 0b11111111111111111111111111111u;
        LOCK = curr & (1u << 0u);
    }

    /**
     * Set all of GPR6's bit fields.
     *
     * (read-write) GPR6 General Purpose Register
     */
    inline void set_GPR6(uint32_t APC_AC_R2_BOT, bool LOCK) volatile
    {
        uint32_t curr = GPR6;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (APC_AC_R2_BOT & 0b11111111111111111111111111111u) << 3u;
        curr &= ~(0b1u << 0u);
        curr |= (LOCK & 0b1u) << 0u;

        GPR6 = curr;
    }

    /**
     * Get GPR7's APC_AC_R2_TOP field.
     *
     * APC end address of memory region-2
     */
    inline uint32_t get_GPR7_APC_AC_R2_TOP() volatile
    {
        return (GPR7 >> 3u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set GPR7's APC_AC_R2_TOP field.
     *
     * APC end address of memory region-2
     */
    inline void set_GPR7_APC_AC_R2_TOP(uint32_t value) volatile
    {
        uint32_t curr = GPR7;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (value & 0b11111111111111111111111111111u) << 3u;

        GPR7 = curr;
    }

    /**
     * Get GPR7's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline bool get_GPR7_LOCK() volatile
    {
        return GPR7 & (1u << 0u);
    }

    /**
     * Set GPR7's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void set_GPR7_LOCK() volatile
    {
        GPR7 |= 1u << 0u;
    }

    /**
     * Clear GPR7's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void clear_GPR7_LOCK() volatile
    {
        GPR7 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR7's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void toggle_GPR7_LOCK() volatile
    {
        GPR7 ^= 1u << 0u;
    }

    /**
     * Get all of GPR7's bit fields.
     *
     * (read-write) GPR7 General Purpose Register
     */
    inline void get_GPR7(uint32_t &APC_AC_R2_TOP, bool &LOCK) volatile
    {
        uint32_t curr = GPR7;

        APC_AC_R2_TOP = (curr >> 3u) & 0b11111111111111111111111111111u;
        LOCK = curr & (1u << 0u);
    }

    /**
     * Set all of GPR7's bit fields.
     *
     * (read-write) GPR7 General Purpose Register
     */
    inline void set_GPR7(uint32_t APC_AC_R2_TOP, bool LOCK) volatile
    {
        uint32_t curr = GPR7;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (APC_AC_R2_TOP & 0b11111111111111111111111111111u) << 3u;
        curr &= ~(0b1u << 0u);
        curr |= (LOCK & 0b1u) << 0u;

        GPR7 = curr;
    }

    /**
     * Get GPR8's APC_AC_R3_BOT field.
     *
     * APC start address of memory region-3
     */
    inline uint32_t get_GPR8_APC_AC_R3_BOT() volatile
    {
        return (GPR8 >> 3u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set GPR8's APC_AC_R3_BOT field.
     *
     * APC start address of memory region-3
     */
    inline void set_GPR8_APC_AC_R3_BOT(uint32_t value) volatile
    {
        uint32_t curr = GPR8;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (value & 0b11111111111111111111111111111u) << 3u;

        GPR8 = curr;
    }

    /**
     * Get GPR8's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline bool get_GPR8_LOCK() volatile
    {
        return GPR8 & (1u << 0u);
    }

    /**
     * Set GPR8's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void set_GPR8_LOCK() volatile
    {
        GPR8 |= 1u << 0u;
    }

    /**
     * Clear GPR8's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void clear_GPR8_LOCK() volatile
    {
        GPR8 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR8's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void toggle_GPR8_LOCK() volatile
    {
        GPR8 ^= 1u << 0u;
    }

    /**
     * Get all of GPR8's bit fields.
     *
     * (read-write) GPR8 General Purpose Register
     */
    inline void get_GPR8(uint32_t &APC_AC_R3_BOT, bool &LOCK) volatile
    {
        uint32_t curr = GPR8;

        APC_AC_R3_BOT = (curr >> 3u) & 0b11111111111111111111111111111u;
        LOCK = curr & (1u << 0u);
    }

    /**
     * Set all of GPR8's bit fields.
     *
     * (read-write) GPR8 General Purpose Register
     */
    inline void set_GPR8(uint32_t APC_AC_R3_BOT, bool LOCK) volatile
    {
        uint32_t curr = GPR8;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (APC_AC_R3_BOT & 0b11111111111111111111111111111u) << 3u;
        curr &= ~(0b1u << 0u);
        curr |= (LOCK & 0b1u) << 0u;

        GPR8 = curr;
    }

    /**
     * Get GPR9's APC_AC_R3_TOP field.
     *
     * APC end address of memory region-3
     */
    inline uint32_t get_GPR9_APC_AC_R3_TOP() volatile
    {
        return (GPR9 >> 3u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set GPR9's APC_AC_R3_TOP field.
     *
     * APC end address of memory region-3
     */
    inline void set_GPR9_APC_AC_R3_TOP(uint32_t value) volatile
    {
        uint32_t curr = GPR9;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (value & 0b11111111111111111111111111111u) << 3u;

        GPR9 = curr;
    }

    /**
     * Get GPR9's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline bool get_GPR9_LOCK() volatile
    {
        return GPR9 & (1u << 0u);
    }

    /**
     * Set GPR9's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void set_GPR9_LOCK() volatile
    {
        GPR9 |= 1u << 0u;
    }

    /**
     * Clear GPR9's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void clear_GPR9_LOCK() volatile
    {
        GPR9 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR9's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void toggle_GPR9_LOCK() volatile
    {
        GPR9 ^= 1u << 0u;
    }

    /**
     * Get all of GPR9's bit fields.
     *
     * (read-write) GPR9 General Purpose Register
     */
    inline void get_GPR9(uint32_t &APC_AC_R3_TOP, bool &LOCK) volatile
    {
        uint32_t curr = GPR9;

        APC_AC_R3_TOP = (curr >> 3u) & 0b11111111111111111111111111111u;
        LOCK = curr & (1u << 0u);
    }

    /**
     * Set all of GPR9's bit fields.
     *
     * (read-write) GPR9 General Purpose Register
     */
    inline void set_GPR9(uint32_t APC_AC_R3_TOP, bool LOCK) volatile
    {
        uint32_t curr = GPR9;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (APC_AC_R3_TOP & 0b11111111111111111111111111111u) << 3u;
        curr &= ~(0b1u << 0u);
        curr |= (LOCK & 0b1u) << 0u;

        GPR9 = curr;
    }

    /**
     * Get GPR10's APC_AC_R4_BOT field.
     *
     * APC start address of memory region-4
     */
    inline uint32_t get_GPR10_APC_AC_R4_BOT() volatile
    {
        return (GPR10 >> 3u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set GPR10's APC_AC_R4_BOT field.
     *
     * APC start address of memory region-4
     */
    inline void set_GPR10_APC_AC_R4_BOT(uint32_t value) volatile
    {
        uint32_t curr = GPR10;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (value & 0b11111111111111111111111111111u) << 3u;

        GPR10 = curr;
    }

    /**
     * Get GPR10's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline bool get_GPR10_LOCK() volatile
    {
        return GPR10 & (1u << 0u);
    }

    /**
     * Set GPR10's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void set_GPR10_LOCK() volatile
    {
        GPR10 |= 1u << 0u;
    }

    /**
     * Clear GPR10's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void clear_GPR10_LOCK() volatile
    {
        GPR10 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR10's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void toggle_GPR10_LOCK() volatile
    {
        GPR10 ^= 1u << 0u;
    }

    /**
     * Get all of GPR10's bit fields.
     *
     * (read-write) GPR10 General Purpose Register
     */
    inline void get_GPR10(uint32_t &APC_AC_R4_BOT, bool &LOCK) volatile
    {
        uint32_t curr = GPR10;

        APC_AC_R4_BOT = (curr >> 3u) & 0b11111111111111111111111111111u;
        LOCK = curr & (1u << 0u);
    }

    /**
     * Set all of GPR10's bit fields.
     *
     * (read-write) GPR10 General Purpose Register
     */
    inline void set_GPR10(uint32_t APC_AC_R4_BOT, bool LOCK) volatile
    {
        uint32_t curr = GPR10;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (APC_AC_R4_BOT & 0b11111111111111111111111111111u) << 3u;
        curr &= ~(0b1u << 0u);
        curr |= (LOCK & 0b1u) << 0u;

        GPR10 = curr;
    }

    /**
     * Get GPR11's APC_AC_R4_TOP field.
     *
     * APC end address of memory region-4
     */
    inline uint32_t get_GPR11_APC_AC_R4_TOP() volatile
    {
        return (GPR11 >> 3u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set GPR11's APC_AC_R4_TOP field.
     *
     * APC end address of memory region-4
     */
    inline void set_GPR11_APC_AC_R4_TOP(uint32_t value) volatile
    {
        uint32_t curr = GPR11;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (value & 0b11111111111111111111111111111u) << 3u;

        GPR11 = curr;
    }

    /**
     * Get GPR11's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline bool get_GPR11_LOCK() volatile
    {
        return GPR11 & (1u << 0u);
    }

    /**
     * Set GPR11's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void set_GPR11_LOCK() volatile
    {
        GPR11 |= 1u << 0u;
    }

    /**
     * Clear GPR11's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void clear_GPR11_LOCK() volatile
    {
        GPR11 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR11's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void toggle_GPR11_LOCK() volatile
    {
        GPR11 ^= 1u << 0u;
    }

    /**
     * Get all of GPR11's bit fields.
     *
     * (read-write) GPR11 General Purpose Register
     */
    inline void get_GPR11(uint32_t &APC_AC_R4_TOP, bool &LOCK) volatile
    {
        uint32_t curr = GPR11;

        APC_AC_R4_TOP = (curr >> 3u) & 0b11111111111111111111111111111u;
        LOCK = curr & (1u << 0u);
    }

    /**
     * Set all of GPR11's bit fields.
     *
     * (read-write) GPR11 General Purpose Register
     */
    inline void set_GPR11(uint32_t APC_AC_R4_TOP, bool LOCK) volatile
    {
        uint32_t curr = GPR11;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (APC_AC_R4_TOP & 0b11111111111111111111111111111u) << 3u;
        curr &= ~(0b1u << 0u);
        curr |= (LOCK & 0b1u) << 0u;

        GPR11 = curr;
    }

    /**
     * Get GPR12's APC_AC_R5_BOT field.
     *
     * APC start address of memory region-5
     */
    inline uint32_t get_GPR12_APC_AC_R5_BOT() volatile
    {
        return (GPR12 >> 3u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set GPR12's APC_AC_R5_BOT field.
     *
     * APC start address of memory region-5
     */
    inline void set_GPR12_APC_AC_R5_BOT(uint32_t value) volatile
    {
        uint32_t curr = GPR12;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (value & 0b11111111111111111111111111111u) << 3u;

        GPR12 = curr;
    }

    /**
     * Get GPR12's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline bool get_GPR12_LOCK() volatile
    {
        return GPR12 & (1u << 0u);
    }

    /**
     * Set GPR12's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void set_GPR12_LOCK() volatile
    {
        GPR12 |= 1u << 0u;
    }

    /**
     * Clear GPR12's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void clear_GPR12_LOCK() volatile
    {
        GPR12 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR12's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void toggle_GPR12_LOCK() volatile
    {
        GPR12 ^= 1u << 0u;
    }

    /**
     * Get all of GPR12's bit fields.
     *
     * (read-write) GPR12 General Purpose Register
     */
    inline void get_GPR12(uint32_t &APC_AC_R5_BOT, bool &LOCK) volatile
    {
        uint32_t curr = GPR12;

        APC_AC_R5_BOT = (curr >> 3u) & 0b11111111111111111111111111111u;
        LOCK = curr & (1u << 0u);
    }

    /**
     * Set all of GPR12's bit fields.
     *
     * (read-write) GPR12 General Purpose Register
     */
    inline void set_GPR12(uint32_t APC_AC_R5_BOT, bool LOCK) volatile
    {
        uint32_t curr = GPR12;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (APC_AC_R5_BOT & 0b11111111111111111111111111111u) << 3u;
        curr &= ~(0b1u << 0u);
        curr |= (LOCK & 0b1u) << 0u;

        GPR12 = curr;
    }

    /**
     * Get GPR13's APC_AC_R5_TOP field.
     *
     * APC end address of memory region-5
     */
    inline uint32_t get_GPR13_APC_AC_R5_TOP() volatile
    {
        return (GPR13 >> 3u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set GPR13's APC_AC_R5_TOP field.
     *
     * APC end address of memory region-5
     */
    inline void set_GPR13_APC_AC_R5_TOP(uint32_t value) volatile
    {
        uint32_t curr = GPR13;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (value & 0b11111111111111111111111111111u) << 3u;

        GPR13 = curr;
    }

    /**
     * Get GPR13's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline bool get_GPR13_LOCK() volatile
    {
        return GPR13 & (1u << 0u);
    }

    /**
     * Set GPR13's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void set_GPR13_LOCK() volatile
    {
        GPR13 |= 1u << 0u;
    }

    /**
     * Clear GPR13's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void clear_GPR13_LOCK() volatile
    {
        GPR13 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR13's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void toggle_GPR13_LOCK() volatile
    {
        GPR13 ^= 1u << 0u;
    }

    /**
     * Get all of GPR13's bit fields.
     *
     * (read-write) GPR13 General Purpose Register
     */
    inline void get_GPR13(uint32_t &APC_AC_R5_TOP, bool &LOCK) volatile
    {
        uint32_t curr = GPR13;

        APC_AC_R5_TOP = (curr >> 3u) & 0b11111111111111111111111111111u;
        LOCK = curr & (1u << 0u);
    }

    /**
     * Set all of GPR13's bit fields.
     *
     * (read-write) GPR13 General Purpose Register
     */
    inline void set_GPR13(uint32_t APC_AC_R5_TOP, bool LOCK) volatile
    {
        uint32_t curr = GPR13;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (APC_AC_R5_TOP & 0b11111111111111111111111111111u) << 3u;
        curr &= ~(0b1u << 0u);
        curr |= (LOCK & 0b1u) << 0u;

        GPR13 = curr;
    }

    /**
     * Get GPR14's APC_AC_R6_BOT field.
     *
     * APC start address of memory region-6
     */
    inline uint32_t get_GPR14_APC_AC_R6_BOT() volatile
    {
        return (GPR14 >> 3u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set GPR14's APC_AC_R6_BOT field.
     *
     * APC start address of memory region-6
     */
    inline void set_GPR14_APC_AC_R6_BOT(uint32_t value) volatile
    {
        uint32_t curr = GPR14;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (value & 0b11111111111111111111111111111u) << 3u;

        GPR14 = curr;
    }

    /**
     * Get GPR14's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline bool get_GPR14_LOCK() volatile
    {
        return GPR14 & (1u << 0u);
    }

    /**
     * Set GPR14's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void set_GPR14_LOCK() volatile
    {
        GPR14 |= 1u << 0u;
    }

    /**
     * Clear GPR14's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void clear_GPR14_LOCK() volatile
    {
        GPR14 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR14's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void toggle_GPR14_LOCK() volatile
    {
        GPR14 ^= 1u << 0u;
    }

    /**
     * Get all of GPR14's bit fields.
     *
     * (read-write) GPR14 General Purpose Register
     */
    inline void get_GPR14(uint32_t &APC_AC_R6_BOT, bool &LOCK) volatile
    {
        uint32_t curr = GPR14;

        APC_AC_R6_BOT = (curr >> 3u) & 0b11111111111111111111111111111u;
        LOCK = curr & (1u << 0u);
    }

    /**
     * Set all of GPR14's bit fields.
     *
     * (read-write) GPR14 General Purpose Register
     */
    inline void set_GPR14(uint32_t APC_AC_R6_BOT, bool LOCK) volatile
    {
        uint32_t curr = GPR14;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (APC_AC_R6_BOT & 0b11111111111111111111111111111u) << 3u;
        curr &= ~(0b1u << 0u);
        curr |= (LOCK & 0b1u) << 0u;

        GPR14 = curr;
    }

    /**
     * Get GPR15's APC_AC_R6_TOP field.
     *
     * APC end address of memory region-6
     */
    inline uint32_t get_GPR15_APC_AC_R6_TOP() volatile
    {
        return (GPR15 >> 3u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set GPR15's APC_AC_R6_TOP field.
     *
     * APC end address of memory region-6
     */
    inline void set_GPR15_APC_AC_R6_TOP(uint32_t value) volatile
    {
        uint32_t curr = GPR15;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (value & 0b11111111111111111111111111111u) << 3u;

        GPR15 = curr;
    }

    /**
     * Get GPR15's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline bool get_GPR15_LOCK() volatile
    {
        return GPR15 & (1u << 0u);
    }

    /**
     * Set GPR15's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void set_GPR15_LOCK() volatile
    {
        GPR15 |= 1u << 0u;
    }

    /**
     * Clear GPR15's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void clear_GPR15_LOCK() volatile
    {
        GPR15 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR15's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void toggle_GPR15_LOCK() volatile
    {
        GPR15 ^= 1u << 0u;
    }

    /**
     * Get all of GPR15's bit fields.
     *
     * (read-write) GPR15 General Purpose Register
     */
    inline void get_GPR15(uint32_t &APC_AC_R6_TOP, bool &LOCK) volatile
    {
        uint32_t curr = GPR15;

        APC_AC_R6_TOP = (curr >> 3u) & 0b11111111111111111111111111111u;
        LOCK = curr & (1u << 0u);
    }

    /**
     * Set all of GPR15's bit fields.
     *
     * (read-write) GPR15 General Purpose Register
     */
    inline void set_GPR15(uint32_t APC_AC_R6_TOP, bool LOCK) volatile
    {
        uint32_t curr = GPR15;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (APC_AC_R6_TOP & 0b11111111111111111111111111111u) << 3u;
        curr &= ~(0b1u << 0u);
        curr |= (LOCK & 0b1u) << 0u;

        GPR15 = curr;
    }

    /**
     * Get GPR16's APC_AC_R7_BOT field.
     *
     * APC start address of memory region-7
     */
    inline uint32_t get_GPR16_APC_AC_R7_BOT() volatile
    {
        return (GPR16 >> 3u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set GPR16's APC_AC_R7_BOT field.
     *
     * APC start address of memory region-7
     */
    inline void set_GPR16_APC_AC_R7_BOT(uint32_t value) volatile
    {
        uint32_t curr = GPR16;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (value & 0b11111111111111111111111111111u) << 3u;

        GPR16 = curr;
    }

    /**
     * Get GPR16's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline bool get_GPR16_LOCK() volatile
    {
        return GPR16 & (1u << 0u);
    }

    /**
     * Set GPR16's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void set_GPR16_LOCK() volatile
    {
        GPR16 |= 1u << 0u;
    }

    /**
     * Clear GPR16's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void clear_GPR16_LOCK() volatile
    {
        GPR16 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR16's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void toggle_GPR16_LOCK() volatile
    {
        GPR16 ^= 1u << 0u;
    }

    /**
     * Get all of GPR16's bit fields.
     *
     * (read-write) GPR16 General Purpose Register
     */
    inline void get_GPR16(uint32_t &APC_AC_R7_BOT, bool &LOCK) volatile
    {
        uint32_t curr = GPR16;

        APC_AC_R7_BOT = (curr >> 3u) & 0b11111111111111111111111111111u;
        LOCK = curr & (1u << 0u);
    }

    /**
     * Set all of GPR16's bit fields.
     *
     * (read-write) GPR16 General Purpose Register
     */
    inline void set_GPR16(uint32_t APC_AC_R7_BOT, bool LOCK) volatile
    {
        uint32_t curr = GPR16;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (APC_AC_R7_BOT & 0b11111111111111111111111111111u) << 3u;
        curr &= ~(0b1u << 0u);
        curr |= (LOCK & 0b1u) << 0u;

        GPR16 = curr;
    }

    /**
     * Get GPR17's APC_AC_R7_TOP field.
     *
     * APC end address of memory region-7
     */
    inline uint32_t get_GPR17_APC_AC_R7_TOP() volatile
    {
        return (GPR17 >> 3u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set GPR17's APC_AC_R7_TOP field.
     *
     * APC end address of memory region-7
     */
    inline void set_GPR17_APC_AC_R7_TOP(uint32_t value) volatile
    {
        uint32_t curr = GPR17;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (value & 0b11111111111111111111111111111u) << 3u;

        GPR17 = curr;
    }

    /**
     * Get GPR17's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline bool get_GPR17_LOCK() volatile
    {
        return GPR17 & (1u << 0u);
    }

    /**
     * Set GPR17's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void set_GPR17_LOCK() volatile
    {
        GPR17 |= 1u << 0u;
    }

    /**
     * Clear GPR17's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void clear_GPR17_LOCK() volatile
    {
        GPR17 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR17's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void toggle_GPR17_LOCK() volatile
    {
        GPR17 ^= 1u << 0u;
    }

    /**
     * Get all of GPR17's bit fields.
     *
     * (read-write) GPR17 General Purpose Register
     */
    inline void get_GPR17(uint32_t &APC_AC_R7_TOP, bool &LOCK) volatile
    {
        uint32_t curr = GPR17;

        APC_AC_R7_TOP = (curr >> 3u) & 0b11111111111111111111111111111u;
        LOCK = curr & (1u << 0u);
    }

    /**
     * Set all of GPR17's bit fields.
     *
     * (read-write) GPR17 General Purpose Register
     */
    inline void set_GPR17(uint32_t APC_AC_R7_TOP, bool LOCK) volatile
    {
        uint32_t curr = GPR17;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (APC_AC_R7_TOP & 0b11111111111111111111111111111u) << 3u;
        curr &= ~(0b1u << 0u);
        curr |= (LOCK & 0b1u) << 0u;

        GPR17 = curr;
    }

    /**
     * Get GPR18's LOCK field.
     *
     * Lock the write to bit 15:0
     */
    inline uint16_t get_GPR18_LOCK() volatile
    {
        return (GPR18 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set GPR18's LOCK field.
     *
     * Lock the write to bit 15:0
     */
    inline void set_GPR18_LOCK(uint16_t value) volatile
    {
        uint32_t curr = GPR18;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        GPR18 = curr;
    }

    /**
     * Get GPR18's APC_R0_ENCRYPT_ENABLE bit.
     *
     * APC memory region-0 encryption enable
     */
    inline bool get_GPR18_APC_R0_ENCRYPT_ENABLE() volatile
    {
        return GPR18 & (1u << 4u);
    }

    /**
     * Set GPR18's APC_R0_ENCRYPT_ENABLE bit.
     *
     * APC memory region-0 encryption enable
     */
    inline void set_GPR18_APC_R0_ENCRYPT_ENABLE() volatile
    {
        GPR18 |= 1u << 4u;
    }

    /**
     * Clear GPR18's APC_R0_ENCRYPT_ENABLE bit.
     *
     * APC memory region-0 encryption enable
     */
    inline void clear_GPR18_APC_R0_ENCRYPT_ENABLE() volatile
    {
        GPR18 &= ~(1u << 4u);
    }

    /**
     * Toggle GPR18's APC_R0_ENCRYPT_ENABLE bit.
     *
     * APC memory region-0 encryption enable
     */
    inline void toggle_GPR18_APC_R0_ENCRYPT_ENABLE() volatile
    {
        GPR18 ^= 1u << 4u;
    }

    /**
     * Get all of GPR18's bit fields.
     *
     * (read-write) GPR18 General Purpose Register
     */
    inline void get_GPR18(uint16_t &LOCK, bool &APC_R0_ENCRYPT_ENABLE) volatile
    {
        uint32_t curr = GPR18;

        LOCK = (curr >> 16u) & 0b1111111111111111u;
        APC_R0_ENCRYPT_ENABLE = curr & (1u << 4u);
    }

    /**
     * Set all of GPR18's bit fields.
     *
     * (read-write) GPR18 General Purpose Register
     */
    inline void set_GPR18(uint16_t LOCK, bool APC_R0_ENCRYPT_ENABLE) volatile
    {
        uint32_t curr = GPR18;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (LOCK & 0b1111111111111111u) << 16u;
        curr &= ~(0b1u << 4u);
        curr |= (APC_R0_ENCRYPT_ENABLE & 0b1u) << 4u;

        GPR18 = curr;
    }

    /**
     * Get GPR19's LOCK field.
     *
     * Lock the write to bit 15:0
     */
    inline uint16_t get_GPR19_LOCK() volatile
    {
        return (GPR19 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set GPR19's LOCK field.
     *
     * Lock the write to bit 15:0
     */
    inline void set_GPR19_LOCK(uint16_t value) volatile
    {
        uint32_t curr = GPR19;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        GPR19 = curr;
    }

    /**
     * Get GPR19's APC_R1_ENCRYPT_ENABLE bit.
     *
     * APC memory region-1 encryption enable
     */
    inline bool get_GPR19_APC_R1_ENCRYPT_ENABLE() volatile
    {
        return GPR19 & (1u << 4u);
    }

    /**
     * Set GPR19's APC_R1_ENCRYPT_ENABLE bit.
     *
     * APC memory region-1 encryption enable
     */
    inline void set_GPR19_APC_R1_ENCRYPT_ENABLE() volatile
    {
        GPR19 |= 1u << 4u;
    }

    /**
     * Clear GPR19's APC_R1_ENCRYPT_ENABLE bit.
     *
     * APC memory region-1 encryption enable
     */
    inline void clear_GPR19_APC_R1_ENCRYPT_ENABLE() volatile
    {
        GPR19 &= ~(1u << 4u);
    }

    /**
     * Toggle GPR19's APC_R1_ENCRYPT_ENABLE bit.
     *
     * APC memory region-1 encryption enable
     */
    inline void toggle_GPR19_APC_R1_ENCRYPT_ENABLE() volatile
    {
        GPR19 ^= 1u << 4u;
    }

    /**
     * Get all of GPR19's bit fields.
     *
     * (read-write) GPR19 General Purpose Register
     */
    inline void get_GPR19(uint16_t &LOCK, bool &APC_R1_ENCRYPT_ENABLE) volatile
    {
        uint32_t curr = GPR19;

        LOCK = (curr >> 16u) & 0b1111111111111111u;
        APC_R1_ENCRYPT_ENABLE = curr & (1u << 4u);
    }

    /**
     * Set all of GPR19's bit fields.
     *
     * (read-write) GPR19 General Purpose Register
     */
    inline void set_GPR19(uint16_t LOCK, bool APC_R1_ENCRYPT_ENABLE) volatile
    {
        uint32_t curr = GPR19;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (LOCK & 0b1111111111111111u) << 16u;
        curr &= ~(0b1u << 4u);
        curr |= (APC_R1_ENCRYPT_ENABLE & 0b1u) << 4u;

        GPR19 = curr;
    }

    /**
     * Get GPR20's LOCK field.
     *
     * Lock the write to bit 15:0
     */
    inline uint16_t get_GPR20_LOCK() volatile
    {
        return (GPR20 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set GPR20's LOCK field.
     *
     * Lock the write to bit 15:0
     */
    inline void set_GPR20_LOCK(uint16_t value) volatile
    {
        uint32_t curr = GPR20;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        GPR20 = curr;
    }

    /**
     * Get GPR20's APC_R2_ENCRYPT_ENABLE bit.
     *
     * APC memory region-2 encryption enable
     */
    inline bool get_GPR20_APC_R2_ENCRYPT_ENABLE() volatile
    {
        return GPR20 & (1u << 4u);
    }

    /**
     * Set GPR20's APC_R2_ENCRYPT_ENABLE bit.
     *
     * APC memory region-2 encryption enable
     */
    inline void set_GPR20_APC_R2_ENCRYPT_ENABLE() volatile
    {
        GPR20 |= 1u << 4u;
    }

    /**
     * Clear GPR20's APC_R2_ENCRYPT_ENABLE bit.
     *
     * APC memory region-2 encryption enable
     */
    inline void clear_GPR20_APC_R2_ENCRYPT_ENABLE() volatile
    {
        GPR20 &= ~(1u << 4u);
    }

    /**
     * Toggle GPR20's APC_R2_ENCRYPT_ENABLE bit.
     *
     * APC memory region-2 encryption enable
     */
    inline void toggle_GPR20_APC_R2_ENCRYPT_ENABLE() volatile
    {
        GPR20 ^= 1u << 4u;
    }

    /**
     * Get all of GPR20's bit fields.
     *
     * (read-write) GPR20 General Purpose Register
     */
    inline void get_GPR20(uint16_t &LOCK, bool &APC_R2_ENCRYPT_ENABLE) volatile
    {
        uint32_t curr = GPR20;

        LOCK = (curr >> 16u) & 0b1111111111111111u;
        APC_R2_ENCRYPT_ENABLE = curr & (1u << 4u);
    }

    /**
     * Set all of GPR20's bit fields.
     *
     * (read-write) GPR20 General Purpose Register
     */
    inline void set_GPR20(uint16_t LOCK, bool APC_R2_ENCRYPT_ENABLE) volatile
    {
        uint32_t curr = GPR20;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (LOCK & 0b1111111111111111u) << 16u;
        curr &= ~(0b1u << 4u);
        curr |= (APC_R2_ENCRYPT_ENABLE & 0b1u) << 4u;

        GPR20 = curr;
    }

    /**
     * Get GPR21's LOCK field.
     *
     * Lock the write to bit 15:0
     */
    inline uint16_t get_GPR21_LOCK() volatile
    {
        return (GPR21 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set GPR21's LOCK field.
     *
     * Lock the write to bit 15:0
     */
    inline void set_GPR21_LOCK(uint16_t value) volatile
    {
        uint32_t curr = GPR21;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        GPR21 = curr;
    }

    /**
     * Get GPR21's APC_R3_ENCRYPT_ENABLE bit.
     *
     * APC memory region-3 encryption enable
     */
    inline bool get_GPR21_APC_R3_ENCRYPT_ENABLE() volatile
    {
        return GPR21 & (1u << 4u);
    }

    /**
     * Set GPR21's APC_R3_ENCRYPT_ENABLE bit.
     *
     * APC memory region-3 encryption enable
     */
    inline void set_GPR21_APC_R3_ENCRYPT_ENABLE() volatile
    {
        GPR21 |= 1u << 4u;
    }

    /**
     * Clear GPR21's APC_R3_ENCRYPT_ENABLE bit.
     *
     * APC memory region-3 encryption enable
     */
    inline void clear_GPR21_APC_R3_ENCRYPT_ENABLE() volatile
    {
        GPR21 &= ~(1u << 4u);
    }

    /**
     * Toggle GPR21's APC_R3_ENCRYPT_ENABLE bit.
     *
     * APC memory region-3 encryption enable
     */
    inline void toggle_GPR21_APC_R3_ENCRYPT_ENABLE() volatile
    {
        GPR21 ^= 1u << 4u;
    }

    /**
     * Get all of GPR21's bit fields.
     *
     * (read-write) GPR21 General Purpose Register
     */
    inline void get_GPR21(uint16_t &LOCK, bool &APC_R3_ENCRYPT_ENABLE) volatile
    {
        uint32_t curr = GPR21;

        LOCK = (curr >> 16u) & 0b1111111111111111u;
        APC_R3_ENCRYPT_ENABLE = curr & (1u << 4u);
    }

    /**
     * Set all of GPR21's bit fields.
     *
     * (read-write) GPR21 General Purpose Register
     */
    inline void set_GPR21(uint16_t LOCK, bool APC_R3_ENCRYPT_ENABLE) volatile
    {
        uint32_t curr = GPR21;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (LOCK & 0b1111111111111111u) << 16u;
        curr &= ~(0b1u << 4u);
        curr |= (APC_R3_ENCRYPT_ENABLE & 0b1u) << 4u;

        GPR21 = curr;
    }

    /**
     * Get GPR22's LOCK field.
     *
     * Lock the write to bit 15:0
     */
    inline uint16_t get_GPR22_LOCK() volatile
    {
        return (GPR22 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set GPR22's LOCK field.
     *
     * Lock the write to bit 15:0
     */
    inline void set_GPR22_LOCK(uint16_t value) volatile
    {
        uint32_t curr = GPR22;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        GPR22 = curr;
    }

    /**
     * Get GPR22's APC_R4_ENCRYPT_ENABLE bit.
     *
     * APC memory region-4 encryption enable
     */
    inline bool get_GPR22_APC_R4_ENCRYPT_ENABLE() volatile
    {
        return GPR22 & (1u << 4u);
    }

    /**
     * Set GPR22's APC_R4_ENCRYPT_ENABLE bit.
     *
     * APC memory region-4 encryption enable
     */
    inline void set_GPR22_APC_R4_ENCRYPT_ENABLE() volatile
    {
        GPR22 |= 1u << 4u;
    }

    /**
     * Clear GPR22's APC_R4_ENCRYPT_ENABLE bit.
     *
     * APC memory region-4 encryption enable
     */
    inline void clear_GPR22_APC_R4_ENCRYPT_ENABLE() volatile
    {
        GPR22 &= ~(1u << 4u);
    }

    /**
     * Toggle GPR22's APC_R4_ENCRYPT_ENABLE bit.
     *
     * APC memory region-4 encryption enable
     */
    inline void toggle_GPR22_APC_R4_ENCRYPT_ENABLE() volatile
    {
        GPR22 ^= 1u << 4u;
    }

    /**
     * Get all of GPR22's bit fields.
     *
     * (read-write) GPR22 General Purpose Register
     */
    inline void get_GPR22(uint16_t &LOCK, bool &APC_R4_ENCRYPT_ENABLE) volatile
    {
        uint32_t curr = GPR22;

        LOCK = (curr >> 16u) & 0b1111111111111111u;
        APC_R4_ENCRYPT_ENABLE = curr & (1u << 4u);
    }

    /**
     * Set all of GPR22's bit fields.
     *
     * (read-write) GPR22 General Purpose Register
     */
    inline void set_GPR22(uint16_t LOCK, bool APC_R4_ENCRYPT_ENABLE) volatile
    {
        uint32_t curr = GPR22;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (LOCK & 0b1111111111111111u) << 16u;
        curr &= ~(0b1u << 4u);
        curr |= (APC_R4_ENCRYPT_ENABLE & 0b1u) << 4u;

        GPR22 = curr;
    }

    /**
     * Get GPR23's LOCK field.
     *
     * Lock the write to bit 15:0
     */
    inline uint16_t get_GPR23_LOCK() volatile
    {
        return (GPR23 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set GPR23's LOCK field.
     *
     * Lock the write to bit 15:0
     */
    inline void set_GPR23_LOCK(uint16_t value) volatile
    {
        uint32_t curr = GPR23;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        GPR23 = curr;
    }

    /**
     * Get GPR23's APC_R5_ENCRYPT_ENABLE bit.
     *
     * APC memory region-5 encryption enable
     */
    inline bool get_GPR23_APC_R5_ENCRYPT_ENABLE() volatile
    {
        return GPR23 & (1u << 4u);
    }

    /**
     * Set GPR23's APC_R5_ENCRYPT_ENABLE bit.
     *
     * APC memory region-5 encryption enable
     */
    inline void set_GPR23_APC_R5_ENCRYPT_ENABLE() volatile
    {
        GPR23 |= 1u << 4u;
    }

    /**
     * Clear GPR23's APC_R5_ENCRYPT_ENABLE bit.
     *
     * APC memory region-5 encryption enable
     */
    inline void clear_GPR23_APC_R5_ENCRYPT_ENABLE() volatile
    {
        GPR23 &= ~(1u << 4u);
    }

    /**
     * Toggle GPR23's APC_R5_ENCRYPT_ENABLE bit.
     *
     * APC memory region-5 encryption enable
     */
    inline void toggle_GPR23_APC_R5_ENCRYPT_ENABLE() volatile
    {
        GPR23 ^= 1u << 4u;
    }

    /**
     * Get all of GPR23's bit fields.
     *
     * (read-write) GPR23 General Purpose Register
     */
    inline void get_GPR23(uint16_t &LOCK, bool &APC_R5_ENCRYPT_ENABLE) volatile
    {
        uint32_t curr = GPR23;

        LOCK = (curr >> 16u) & 0b1111111111111111u;
        APC_R5_ENCRYPT_ENABLE = curr & (1u << 4u);
    }

    /**
     * Set all of GPR23's bit fields.
     *
     * (read-write) GPR23 General Purpose Register
     */
    inline void set_GPR23(uint16_t LOCK, bool APC_R5_ENCRYPT_ENABLE) volatile
    {
        uint32_t curr = GPR23;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (LOCK & 0b1111111111111111u) << 16u;
        curr &= ~(0b1u << 4u);
        curr |= (APC_R5_ENCRYPT_ENABLE & 0b1u) << 4u;

        GPR23 = curr;
    }

    /**
     * Get GPR24's LOCK field.
     *
     * Lock the write to bit 15:0
     */
    inline uint16_t get_GPR24_LOCK() volatile
    {
        return (GPR24 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set GPR24's LOCK field.
     *
     * Lock the write to bit 15:0
     */
    inline void set_GPR24_LOCK(uint16_t value) volatile
    {
        uint32_t curr = GPR24;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        GPR24 = curr;
    }

    /**
     * Get GPR24's APC_R6_ENCRYPT_ENABLE bit.
     *
     * APC memory region-6 encryption enable
     */
    inline bool get_GPR24_APC_R6_ENCRYPT_ENABLE() volatile
    {
        return GPR24 & (1u << 4u);
    }

    /**
     * Set GPR24's APC_R6_ENCRYPT_ENABLE bit.
     *
     * APC memory region-6 encryption enable
     */
    inline void set_GPR24_APC_R6_ENCRYPT_ENABLE() volatile
    {
        GPR24 |= 1u << 4u;
    }

    /**
     * Clear GPR24's APC_R6_ENCRYPT_ENABLE bit.
     *
     * APC memory region-6 encryption enable
     */
    inline void clear_GPR24_APC_R6_ENCRYPT_ENABLE() volatile
    {
        GPR24 &= ~(1u << 4u);
    }

    /**
     * Toggle GPR24's APC_R6_ENCRYPT_ENABLE bit.
     *
     * APC memory region-6 encryption enable
     */
    inline void toggle_GPR24_APC_R6_ENCRYPT_ENABLE() volatile
    {
        GPR24 ^= 1u << 4u;
    }

    /**
     * Get all of GPR24's bit fields.
     *
     * (read-write) GPR24 General Purpose Register
     */
    inline void get_GPR24(uint16_t &LOCK, bool &APC_R6_ENCRYPT_ENABLE) volatile
    {
        uint32_t curr = GPR24;

        LOCK = (curr >> 16u) & 0b1111111111111111u;
        APC_R6_ENCRYPT_ENABLE = curr & (1u << 4u);
    }

    /**
     * Set all of GPR24's bit fields.
     *
     * (read-write) GPR24 General Purpose Register
     */
    inline void set_GPR24(uint16_t LOCK, bool APC_R6_ENCRYPT_ENABLE) volatile
    {
        uint32_t curr = GPR24;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (LOCK & 0b1111111111111111u) << 16u;
        curr &= ~(0b1u << 4u);
        curr |= (APC_R6_ENCRYPT_ENABLE & 0b1u) << 4u;

        GPR24 = curr;
    }

    /**
     * Get GPR25's LOCK field.
     *
     * Lock the write to bit 15:0
     */
    inline uint16_t get_GPR25_LOCK() volatile
    {
        return (GPR25 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set GPR25's LOCK field.
     *
     * Lock the write to bit 15:0
     */
    inline void set_GPR25_LOCK(uint16_t value) volatile
    {
        uint32_t curr = GPR25;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        GPR25 = curr;
    }

    /**
     * Get GPR25's APC_VALID bit.
     *
     * APC global enable bit
     */
    inline bool get_GPR25_APC_VALID() volatile
    {
        return GPR25 & (1u << 5u);
    }

    /**
     * Set GPR25's APC_VALID bit.
     *
     * APC global enable bit
     */
    inline void set_GPR25_APC_VALID() volatile
    {
        GPR25 |= 1u << 5u;
    }

    /**
     * Clear GPR25's APC_VALID bit.
     *
     * APC global enable bit
     */
    inline void clear_GPR25_APC_VALID() volatile
    {
        GPR25 &= ~(1u << 5u);
    }

    /**
     * Toggle GPR25's APC_VALID bit.
     *
     * APC global enable bit
     */
    inline void toggle_GPR25_APC_VALID() volatile
    {
        GPR25 ^= 1u << 5u;
    }

    /**
     * Get GPR25's APC_R7_ENCRYPT_ENABLE bit.
     *
     * APC memory region-7 encryption enable
     */
    inline bool get_GPR25_APC_R7_ENCRYPT_ENABLE() volatile
    {
        return GPR25 & (1u << 4u);
    }

    /**
     * Set GPR25's APC_R7_ENCRYPT_ENABLE bit.
     *
     * APC memory region-7 encryption enable
     */
    inline void set_GPR25_APC_R7_ENCRYPT_ENABLE() volatile
    {
        GPR25 |= 1u << 4u;
    }

    /**
     * Clear GPR25's APC_R7_ENCRYPT_ENABLE bit.
     *
     * APC memory region-7 encryption enable
     */
    inline void clear_GPR25_APC_R7_ENCRYPT_ENABLE() volatile
    {
        GPR25 &= ~(1u << 4u);
    }

    /**
     * Toggle GPR25's APC_R7_ENCRYPT_ENABLE bit.
     *
     * APC memory region-7 encryption enable
     */
    inline void toggle_GPR25_APC_R7_ENCRYPT_ENABLE() volatile
    {
        GPR25 ^= 1u << 4u;
    }

    /**
     * Get all of GPR25's bit fields.
     *
     * (read-write) GPR25 General Purpose Register
     */
    inline void get_GPR25(uint16_t &LOCK, bool &APC_VALID,
                          bool &APC_R7_ENCRYPT_ENABLE) volatile
    {
        uint32_t curr = GPR25;

        LOCK = (curr >> 16u) & 0b1111111111111111u;
        APC_VALID = curr & (1u << 5u);
        APC_R7_ENCRYPT_ENABLE = curr & (1u << 4u);
    }

    /**
     * Set all of GPR25's bit fields.
     *
     * (read-write) GPR25 General Purpose Register
     */
    inline void set_GPR25(uint16_t LOCK, bool APC_VALID,
                          bool APC_R7_ENCRYPT_ENABLE) volatile
    {
        uint32_t curr = GPR25;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (LOCK & 0b1111111111111111u) << 16u;
        curr &= ~(0b1u << 5u);
        curr |= (APC_VALID & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (APC_R7_ENCRYPT_ENABLE & 0b1u) << 4u;

        GPR25 = curr;
    }

    /**
     * Get GPR26's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_GPR_GPR26_DWP_LOCK get_GPR26_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_GPR_GPR26_DWP_LOCK((GPR26 >> 30u) & 0b11u);
    }

    /**
     * Set GPR26's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_GPR26_DWP_LOCK(
        IOMUXC_LPSR_GPR_GPR26_DWP_LOCK value) volatile
    {
        uint32_t curr = GPR26;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        GPR26 = curr;
    }

    /**
     * Get GPR26's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_GPR_GPR26_DWP get_GPR26_DWP() volatile
    {
        return IOMUXC_LPSR_GPR_GPR26_DWP((GPR26 >> 28u) & 0b11u);
    }

    /**
     * Set GPR26's DWP field.
     *
     * Domain write protection
     */
    inline void set_GPR26_DWP(IOMUXC_LPSR_GPR_GPR26_DWP value) volatile
    {
        uint32_t curr = GPR26;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        GPR26 = curr;
    }

    /**
     * Get GPR26's FIELD_0 field.
     *
     * General purpose bits
     */
    inline uint8_t get_GPR26_FIELD_0() volatile
    {
        return (GPR26 >> 25u) & 0b111u;
    }

    /**
     * Set GPR26's FIELD_0 field.
     *
     * General purpose bits
     */
    inline void set_GPR26_FIELD_0(uint8_t value) volatile
    {
        uint32_t curr = GPR26;

        curr &= ~(0b111u << 25u);
        curr |= (value & 0b111u) << 25u;

        GPR26 = curr;
    }

    /**
     * Get GPR26's CM7_INIT_VTOR field.
     *
     * Vector table offset register out of reset. See the ARM v7-M Architecture
     * Reference Manual for more information about the vector table offset
     * register (VTOR).
     */
    inline uint32_t get_GPR26_CM7_INIT_VTOR() volatile
    {
        return (GPR26 >> 0u) & 0b1111111111111111111111111u;
    }

    /**
     * Set GPR26's CM7_INIT_VTOR field.
     *
     * Vector table offset register out of reset. See the ARM v7-M Architecture
     * Reference Manual for more information about the vector table offset
     * register (VTOR).
     */
    inline void set_GPR26_CM7_INIT_VTOR(uint32_t value) volatile
    {
        uint32_t curr = GPR26;

        curr &= ~(0b1111111111111111111111111u << 0u);
        curr |= (value & 0b1111111111111111111111111u) << 0u;

        GPR26 = curr;
    }

    /**
     * Get all of GPR26's bit fields.
     *
     * (read-write) GPR26 General Purpose Register
     */
    inline void get_GPR26(IOMUXC_LPSR_GPR_GPR26_DWP_LOCK &DWP_LOCK,
                          IOMUXC_LPSR_GPR_GPR26_DWP &DWP, uint8_t &FIELD_0,
                          uint32_t &CM7_INIT_VTOR) volatile
    {
        uint32_t curr = GPR26;

        DWP_LOCK = IOMUXC_LPSR_GPR_GPR26_DWP_LOCK((curr >> 30u) & 0b11u);
        DWP = IOMUXC_LPSR_GPR_GPR26_DWP((curr >> 28u) & 0b11u);
        FIELD_0 = (curr >> 25u) & 0b111u;
        CM7_INIT_VTOR = (curr >> 0u) & 0b1111111111111111111111111u;
    }

    /**
     * Set all of GPR26's bit fields.
     *
     * (read-write) GPR26 General Purpose Register
     */
    inline void set_GPR26(IOMUXC_LPSR_GPR_GPR26_DWP_LOCK DWP_LOCK,
                          IOMUXC_LPSR_GPR_GPR26_DWP DWP, uint8_t FIELD_0,
                          uint32_t CM7_INIT_VTOR) volatile
    {
        uint32_t curr = GPR26;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b111u << 25u);
        curr |= (FIELD_0 & 0b111u) << 25u;
        curr &= ~(0b1111111111111111111111111u << 0u);
        curr |= (CM7_INIT_VTOR & 0b1111111111111111111111111u) << 0u;

        GPR26 = curr;
    }

    /**
     * Get GPR33's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_GPR_GPR33_DWP_LOCK get_GPR33_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_GPR_GPR33_DWP_LOCK((GPR33 >> 30u) & 0b11u);
    }

    /**
     * Set GPR33's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_GPR33_DWP_LOCK(
        IOMUXC_LPSR_GPR_GPR33_DWP_LOCK value) volatile
    {
        uint32_t curr = GPR33;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        GPR33 = curr;
    }

    /**
     * Get GPR33's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_GPR_GPR33_DWP get_GPR33_DWP() volatile
    {
        return IOMUXC_LPSR_GPR_GPR33_DWP((GPR33 >> 28u) & 0b11u);
    }

    /**
     * Set GPR33's DWP field.
     *
     * Domain write protection
     */
    inline void set_GPR33_DWP(IOMUXC_LPSR_GPR_GPR33_DWP value) volatile
    {
        uint32_t curr = GPR33;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        GPR33 = curr;
    }

    /**
     * Get GPR33's USBPHY2_WAKEUP_IRQ_CLEAR bit.
     *
     * Clear USBPHY1 wakeup interrupt holding register
     */
    inline bool get_GPR33_USBPHY2_WAKEUP_IRQ_CLEAR() volatile
    {
        return GPR33 & (1u << 9u);
    }

    /**
     * Set GPR33's USBPHY2_WAKEUP_IRQ_CLEAR bit.
     *
     * Clear USBPHY1 wakeup interrupt holding register
     */
    inline void set_GPR33_USBPHY2_WAKEUP_IRQ_CLEAR() volatile
    {
        GPR33 |= 1u << 9u;
    }

    /**
     * Clear GPR33's USBPHY2_WAKEUP_IRQ_CLEAR bit.
     *
     * Clear USBPHY1 wakeup interrupt holding register
     */
    inline void clear_GPR33_USBPHY2_WAKEUP_IRQ_CLEAR() volatile
    {
        GPR33 &= ~(1u << 9u);
    }

    /**
     * Toggle GPR33's USBPHY2_WAKEUP_IRQ_CLEAR bit.
     *
     * Clear USBPHY1 wakeup interrupt holding register
     */
    inline void toggle_GPR33_USBPHY2_WAKEUP_IRQ_CLEAR() volatile
    {
        GPR33 ^= 1u << 9u;
    }

    /**
     * Get GPR33's USBPHY1_WAKEUP_IRQ_CLEAR bit.
     *
     * Clear USBPHY1 wakeup interrupt holding register
     */
    inline bool get_GPR33_USBPHY1_WAKEUP_IRQ_CLEAR() volatile
    {
        return GPR33 & (1u << 8u);
    }

    /**
     * Set GPR33's USBPHY1_WAKEUP_IRQ_CLEAR bit.
     *
     * Clear USBPHY1 wakeup interrupt holding register
     */
    inline void set_GPR33_USBPHY1_WAKEUP_IRQ_CLEAR() volatile
    {
        GPR33 |= 1u << 8u;
    }

    /**
     * Clear GPR33's USBPHY1_WAKEUP_IRQ_CLEAR bit.
     *
     * Clear USBPHY1 wakeup interrupt holding register
     */
    inline void clear_GPR33_USBPHY1_WAKEUP_IRQ_CLEAR() volatile
    {
        GPR33 &= ~(1u << 8u);
    }

    /**
     * Toggle GPR33's USBPHY1_WAKEUP_IRQ_CLEAR bit.
     *
     * Clear USBPHY1 wakeup interrupt holding register
     */
    inline void toggle_GPR33_USBPHY1_WAKEUP_IRQ_CLEAR() volatile
    {
        GPR33 ^= 1u << 8u;
    }

    /**
     * Get GPR33's M4_NMI_CLEAR bit.
     *
     * Clear CM4 NMI holding register
     */
    inline bool get_GPR33_M4_NMI_CLEAR() volatile
    {
        return GPR33 & (1u << 0u);
    }

    /**
     * Set GPR33's M4_NMI_CLEAR bit.
     *
     * Clear CM4 NMI holding register
     */
    inline void set_GPR33_M4_NMI_CLEAR() volatile
    {
        GPR33 |= 1u << 0u;
    }

    /**
     * Clear GPR33's M4_NMI_CLEAR bit.
     *
     * Clear CM4 NMI holding register
     */
    inline void clear_GPR33_M4_NMI_CLEAR() volatile
    {
        GPR33 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR33's M4_NMI_CLEAR bit.
     *
     * Clear CM4 NMI holding register
     */
    inline void toggle_GPR33_M4_NMI_CLEAR() volatile
    {
        GPR33 ^= 1u << 0u;
    }

    /**
     * Get all of GPR33's bit fields.
     *
     * (read-write) GPR33 General Purpose Register
     */
    inline void get_GPR33(IOMUXC_LPSR_GPR_GPR33_DWP_LOCK &DWP_LOCK,
                          IOMUXC_LPSR_GPR_GPR33_DWP &DWP,
                          bool &USBPHY2_WAKEUP_IRQ_CLEAR,
                          bool &USBPHY1_WAKEUP_IRQ_CLEAR,
                          bool &M4_NMI_CLEAR) volatile
    {
        uint32_t curr = GPR33;

        DWP_LOCK = IOMUXC_LPSR_GPR_GPR33_DWP_LOCK((curr >> 30u) & 0b11u);
        DWP = IOMUXC_LPSR_GPR_GPR33_DWP((curr >> 28u) & 0b11u);
        USBPHY2_WAKEUP_IRQ_CLEAR = curr & (1u << 9u);
        USBPHY1_WAKEUP_IRQ_CLEAR = curr & (1u << 8u);
        M4_NMI_CLEAR = curr & (1u << 0u);
    }

    /**
     * Set all of GPR33's bit fields.
     *
     * (read-write) GPR33 General Purpose Register
     */
    inline void set_GPR33(IOMUXC_LPSR_GPR_GPR33_DWP_LOCK DWP_LOCK,
                          IOMUXC_LPSR_GPR_GPR33_DWP DWP,
                          bool USBPHY2_WAKEUP_IRQ_CLEAR,
                          bool USBPHY1_WAKEUP_IRQ_CLEAR,
                          bool M4_NMI_CLEAR) volatile
    {
        uint32_t curr = GPR33;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 9u);
        curr |= (USBPHY2_WAKEUP_IRQ_CLEAR & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (USBPHY1_WAKEUP_IRQ_CLEAR & 0b1u) << 8u;
        curr &= ~(0b1u << 0u);
        curr |= (M4_NMI_CLEAR & 0b1u) << 0u;

        GPR33 = curr;
    }

    /**
     * Get GPR34's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_GPR_GPR34_DWP_LOCK get_GPR34_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_GPR_GPR34_DWP_LOCK((GPR34 >> 30u) & 0b11u);
    }

    /**
     * Set GPR34's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_GPR34_DWP_LOCK(
        IOMUXC_LPSR_GPR_GPR34_DWP_LOCK value) volatile
    {
        uint32_t curr = GPR34;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        GPR34 = curr;
    }

    /**
     * Get GPR34's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_GPR_GPR34_DWP get_GPR34_DWP() volatile
    {
        return IOMUXC_LPSR_GPR_GPR34_DWP((GPR34 >> 28u) & 0b11u);
    }

    /**
     * Set GPR34's DWP field.
     *
     * Domain write protection
     */
    inline void set_GPR34_DWP(IOMUXC_LPSR_GPR_GPR34_DWP value) volatile
    {
        uint32_t curr = GPR34;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        GPR34 = curr;
    }

    /**
     * Get GPR34's SEC_ERR_RESP bit.
     *
     * Security error response enable
     */
    inline bool get_GPR34_SEC_ERR_RESP() volatile
    {
        return GPR34 & (1u << 11u);
    }

    /**
     * Set GPR34's SEC_ERR_RESP bit.
     *
     * Security error response enable
     */
    inline void set_GPR34_SEC_ERR_RESP() volatile
    {
        GPR34 |= 1u << 11u;
    }

    /**
     * Clear GPR34's SEC_ERR_RESP bit.
     *
     * Security error response enable
     */
    inline void clear_GPR34_SEC_ERR_RESP() volatile
    {
        GPR34 &= ~(1u << 11u);
    }

    /**
     * Toggle GPR34's SEC_ERR_RESP bit.
     *
     * Security error response enable
     */
    inline void toggle_GPR34_SEC_ERR_RESP() volatile
    {
        GPR34 ^= 1u << 11u;
    }

    /**
     * Get GPR34's M4_GPC_SLEEP_SEL bit.
     *
     * CM4 sleep request selection
     */
    inline bool get_GPR34_M4_GPC_SLEEP_SEL() volatile
    {
        return GPR34 & (1u << 5u);
    }

    /**
     * Set GPR34's M4_GPC_SLEEP_SEL bit.
     *
     * CM4 sleep request selection
     */
    inline void set_GPR34_M4_GPC_SLEEP_SEL() volatile
    {
        GPR34 |= 1u << 5u;
    }

    /**
     * Clear GPR34's M4_GPC_SLEEP_SEL bit.
     *
     * CM4 sleep request selection
     */
    inline void clear_GPR34_M4_GPC_SLEEP_SEL() volatile
    {
        GPR34 &= ~(1u << 5u);
    }

    /**
     * Toggle GPR34's M4_GPC_SLEEP_SEL bit.
     *
     * CM4 sleep request selection
     */
    inline void toggle_GPR34_M4_GPC_SLEEP_SEL() volatile
    {
        GPR34 ^= 1u << 5u;
    }

    /**
     * Get GPR34's M4_NMI_MASK bit.
     *
     * Mask CM4 NMI pin input
     */
    inline bool get_GPR34_M4_NMI_MASK() volatile
    {
        return GPR34 & (1u << 4u);
    }

    /**
     * Set GPR34's M4_NMI_MASK bit.
     *
     * Mask CM4 NMI pin input
     */
    inline void set_GPR34_M4_NMI_MASK() volatile
    {
        GPR34 |= 1u << 4u;
    }

    /**
     * Clear GPR34's M4_NMI_MASK bit.
     *
     * Mask CM4 NMI pin input
     */
    inline void clear_GPR34_M4_NMI_MASK() volatile
    {
        GPR34 &= ~(1u << 4u);
    }

    /**
     * Toggle GPR34's M4_NMI_MASK bit.
     *
     * Mask CM4 NMI pin input
     */
    inline void toggle_GPR34_M4_NMI_MASK() volatile
    {
        GPR34 ^= 1u << 4u;
    }

    /**
     * Get GPR34's M7_NMI_MASK bit.
     *
     * Mask CM7 NMI pin input
     */
    inline bool get_GPR34_M7_NMI_MASK() volatile
    {
        return GPR34 & (1u << 3u);
    }

    /**
     * Set GPR34's M7_NMI_MASK bit.
     *
     * Mask CM7 NMI pin input
     */
    inline void set_GPR34_M7_NMI_MASK() volatile
    {
        GPR34 |= 1u << 3u;
    }

    /**
     * Clear GPR34's M7_NMI_MASK bit.
     *
     * Mask CM7 NMI pin input
     */
    inline void clear_GPR34_M7_NMI_MASK() volatile
    {
        GPR34 &= ~(1u << 3u);
    }

    /**
     * Toggle GPR34's M7_NMI_MASK bit.
     *
     * Mask CM7 NMI pin input
     */
    inline void toggle_GPR34_M7_NMI_MASK() volatile
    {
        GPR34 ^= 1u << 3u;
    }

    /**
     * Get GPR34's GPIO_LPSR_LOW_RANGE bit.
     *
     * GPIO_LPSR IO bank supply voltage range selection
     */
    inline bool get_GPR34_GPIO_LPSR_LOW_RANGE() volatile
    {
        return GPR34 & (1u << 2u);
    }

    /**
     * Set GPR34's GPIO_LPSR_LOW_RANGE bit.
     *
     * GPIO_LPSR IO bank supply voltage range selection
     */
    inline void set_GPR34_GPIO_LPSR_LOW_RANGE() volatile
    {
        GPR34 |= 1u << 2u;
    }

    /**
     * Clear GPR34's GPIO_LPSR_LOW_RANGE bit.
     *
     * GPIO_LPSR IO bank supply voltage range selection
     */
    inline void clear_GPR34_GPIO_LPSR_LOW_RANGE() volatile
    {
        GPR34 &= ~(1u << 2u);
    }

    /**
     * Toggle GPR34's GPIO_LPSR_LOW_RANGE bit.
     *
     * GPIO_LPSR IO bank supply voltage range selection
     */
    inline void toggle_GPR34_GPIO_LPSR_LOW_RANGE() volatile
    {
        GPR34 ^= 1u << 2u;
    }

    /**
     * Get GPR34's GPIO_LPSR_HIGH_RANGE bit.
     *
     * GPIO_LPSR IO bank supply voltage range selection
     */
    inline bool get_GPR34_GPIO_LPSR_HIGH_RANGE() volatile
    {
        return GPR34 & (1u << 1u);
    }

    /**
     * Set GPR34's GPIO_LPSR_HIGH_RANGE bit.
     *
     * GPIO_LPSR IO bank supply voltage range selection
     */
    inline void set_GPR34_GPIO_LPSR_HIGH_RANGE() volatile
    {
        GPR34 |= 1u << 1u;
    }

    /**
     * Clear GPR34's GPIO_LPSR_HIGH_RANGE bit.
     *
     * GPIO_LPSR IO bank supply voltage range selection
     */
    inline void clear_GPR34_GPIO_LPSR_HIGH_RANGE() volatile
    {
        GPR34 &= ~(1u << 1u);
    }

    /**
     * Toggle GPR34's GPIO_LPSR_HIGH_RANGE bit.
     *
     * GPIO_LPSR IO bank supply voltage range selection
     */
    inline void toggle_GPR34_GPIO_LPSR_HIGH_RANGE() volatile
    {
        GPR34 ^= 1u << 1u;
    }

    /**
     * Get all of GPR34's bit fields.
     *
     * (read-write) GPR34 General Purpose Register
     */
    inline void get_GPR34(IOMUXC_LPSR_GPR_GPR34_DWP_LOCK &DWP_LOCK,
                          IOMUXC_LPSR_GPR_GPR34_DWP &DWP, bool &SEC_ERR_RESP,
                          bool &M4_GPC_SLEEP_SEL, bool &M4_NMI_MASK,
                          bool &M7_NMI_MASK, bool &GPIO_LPSR_LOW_RANGE,
                          bool &GPIO_LPSR_HIGH_RANGE) volatile
    {
        uint32_t curr = GPR34;

        DWP_LOCK = IOMUXC_LPSR_GPR_GPR34_DWP_LOCK((curr >> 30u) & 0b11u);
        DWP = IOMUXC_LPSR_GPR_GPR34_DWP((curr >> 28u) & 0b11u);
        SEC_ERR_RESP = curr & (1u << 11u);
        M4_GPC_SLEEP_SEL = curr & (1u << 5u);
        M4_NMI_MASK = curr & (1u << 4u);
        M7_NMI_MASK = curr & (1u << 3u);
        GPIO_LPSR_LOW_RANGE = curr & (1u << 2u);
        GPIO_LPSR_HIGH_RANGE = curr & (1u << 1u);
    }

    /**
     * Set all of GPR34's bit fields.
     *
     * (read-write) GPR34 General Purpose Register
     */
    inline void set_GPR34(IOMUXC_LPSR_GPR_GPR34_DWP_LOCK DWP_LOCK,
                          IOMUXC_LPSR_GPR_GPR34_DWP DWP, bool SEC_ERR_RESP,
                          bool M4_GPC_SLEEP_SEL, bool M4_NMI_MASK,
                          bool M7_NMI_MASK, bool GPIO_LPSR_LOW_RANGE,
                          bool GPIO_LPSR_HIGH_RANGE) volatile
    {
        uint32_t curr = GPR34;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 11u);
        curr |= (SEC_ERR_RESP & 0b1u) << 11u;
        curr &= ~(0b1u << 5u);
        curr |= (M4_GPC_SLEEP_SEL & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (M4_NMI_MASK & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (M7_NMI_MASK & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (GPIO_LPSR_LOW_RANGE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (GPIO_LPSR_HIGH_RANGE & 0b1u) << 1u;

        GPR34 = curr;
    }

    /**
     * Get GPR35's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_GPR_GPR35_DWP_LOCK get_GPR35_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_GPR_GPR35_DWP_LOCK((GPR35 >> 30u) & 0b11u);
    }

    /**
     * Set GPR35's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_GPR35_DWP_LOCK(
        IOMUXC_LPSR_GPR_GPR35_DWP_LOCK value) volatile
    {
        uint32_t curr = GPR35;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        GPR35 = curr;
    }

    /**
     * Get GPR35's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_GPR_GPR35_DWP get_GPR35_DWP() volatile
    {
        return IOMUXC_LPSR_GPR_GPR35_DWP((GPR35 >> 28u) & 0b11u);
    }

    /**
     * Set GPR35's DWP field.
     *
     * Domain write protection
     */
    inline void set_GPR35_DWP(IOMUXC_LPSR_GPR_GPR35_DWP value) volatile
    {
        uint32_t curr = GPR35;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        GPR35 = curr;
    }

    /**
     * Get GPR35's FLEXSPI2_STOP_REQ bit.
     *
     * FLEXSPI2 stop request
     */
    inline bool get_GPR35_FLEXSPI2_STOP_REQ() volatile
    {
        return GPR35 & (1u << 26u);
    }

    /**
     * Set GPR35's FLEXSPI2_STOP_REQ bit.
     *
     * FLEXSPI2 stop request
     */
    inline void set_GPR35_FLEXSPI2_STOP_REQ() volatile
    {
        GPR35 |= 1u << 26u;
    }

    /**
     * Clear GPR35's FLEXSPI2_STOP_REQ bit.
     *
     * FLEXSPI2 stop request
     */
    inline void clear_GPR35_FLEXSPI2_STOP_REQ() volatile
    {
        GPR35 &= ~(1u << 26u);
    }

    /**
     * Toggle GPR35's FLEXSPI2_STOP_REQ bit.
     *
     * FLEXSPI2 stop request
     */
    inline void toggle_GPR35_FLEXSPI2_STOP_REQ() volatile
    {
        GPR35 ^= 1u << 26u;
    }

    /**
     * Get GPR35's FLEXSPI2_IPG_DOZE bit.
     *
     * FLEXSPI2 doze mode
     */
    inline bool get_GPR35_FLEXSPI2_IPG_DOZE() volatile
    {
        return GPR35 & (1u << 25u);
    }

    /**
     * Set GPR35's FLEXSPI2_IPG_DOZE bit.
     *
     * FLEXSPI2 doze mode
     */
    inline void set_GPR35_FLEXSPI2_IPG_DOZE() volatile
    {
        GPR35 |= 1u << 25u;
    }

    /**
     * Clear GPR35's FLEXSPI2_IPG_DOZE bit.
     *
     * FLEXSPI2 doze mode
     */
    inline void clear_GPR35_FLEXSPI2_IPG_DOZE() volatile
    {
        GPR35 &= ~(1u << 25u);
    }

    /**
     * Toggle GPR35's FLEXSPI2_IPG_DOZE bit.
     *
     * FLEXSPI2 doze mode
     */
    inline void toggle_GPR35_FLEXSPI2_IPG_DOZE() volatile
    {
        GPR35 ^= 1u << 25u;
    }

    /**
     * Get GPR35's FLEXSPI1_STOP_REQ bit.
     *
     * FLEXSPI1 stop request
     */
    inline bool get_GPR35_FLEXSPI1_STOP_REQ() volatile
    {
        return GPR35 & (1u << 24u);
    }

    /**
     * Set GPR35's FLEXSPI1_STOP_REQ bit.
     *
     * FLEXSPI1 stop request
     */
    inline void set_GPR35_FLEXSPI1_STOP_REQ() volatile
    {
        GPR35 |= 1u << 24u;
    }

    /**
     * Clear GPR35's FLEXSPI1_STOP_REQ bit.
     *
     * FLEXSPI1 stop request
     */
    inline void clear_GPR35_FLEXSPI1_STOP_REQ() volatile
    {
        GPR35 &= ~(1u << 24u);
    }

    /**
     * Toggle GPR35's FLEXSPI1_STOP_REQ bit.
     *
     * FLEXSPI1 stop request
     */
    inline void toggle_GPR35_FLEXSPI1_STOP_REQ() volatile
    {
        GPR35 ^= 1u << 24u;
    }

    /**
     * Get GPR35's FLEXSPI1_IPG_DOZE bit.
     *
     * FLEXSPI1 doze mode
     */
    inline bool get_GPR35_FLEXSPI1_IPG_DOZE() volatile
    {
        return GPR35 & (1u << 23u);
    }

    /**
     * Set GPR35's FLEXSPI1_IPG_DOZE bit.
     *
     * FLEXSPI1 doze mode
     */
    inline void set_GPR35_FLEXSPI1_IPG_DOZE() volatile
    {
        GPR35 |= 1u << 23u;
    }

    /**
     * Clear GPR35's FLEXSPI1_IPG_DOZE bit.
     *
     * FLEXSPI1 doze mode
     */
    inline void clear_GPR35_FLEXSPI1_IPG_DOZE() volatile
    {
        GPR35 &= ~(1u << 23u);
    }

    /**
     * Toggle GPR35's FLEXSPI1_IPG_DOZE bit.
     *
     * FLEXSPI1 doze mode
     */
    inline void toggle_GPR35_FLEXSPI1_IPG_DOZE() volatile
    {
        GPR35 ^= 1u << 23u;
    }

    /**
     * Get GPR35's FLEXIO2_IPG_DOZE bit.
     *
     * FLEXIO2 doze mode
     */
    inline bool get_GPR35_FLEXIO2_IPG_DOZE() volatile
    {
        return GPR35 & (1u << 22u);
    }

    /**
     * Set GPR35's FLEXIO2_IPG_DOZE bit.
     *
     * FLEXIO2 doze mode
     */
    inline void set_GPR35_FLEXIO2_IPG_DOZE() volatile
    {
        GPR35 |= 1u << 22u;
    }

    /**
     * Clear GPR35's FLEXIO2_IPG_DOZE bit.
     *
     * FLEXIO2 doze mode
     */
    inline void clear_GPR35_FLEXIO2_IPG_DOZE() volatile
    {
        GPR35 &= ~(1u << 22u);
    }

    /**
     * Toggle GPR35's FLEXIO2_IPG_DOZE bit.
     *
     * FLEXIO2 doze mode
     */
    inline void toggle_GPR35_FLEXIO2_IPG_DOZE() volatile
    {
        GPR35 ^= 1u << 22u;
    }

    /**
     * Get GPR35's FLEXIO1_IPG_DOZE bit.
     *
     * FLEXIO2 doze mode
     */
    inline bool get_GPR35_FLEXIO1_IPG_DOZE() volatile
    {
        return GPR35 & (1u << 21u);
    }

    /**
     * Set GPR35's FLEXIO1_IPG_DOZE bit.
     *
     * FLEXIO2 doze mode
     */
    inline void set_GPR35_FLEXIO1_IPG_DOZE() volatile
    {
        GPR35 |= 1u << 21u;
    }

    /**
     * Clear GPR35's FLEXIO1_IPG_DOZE bit.
     *
     * FLEXIO2 doze mode
     */
    inline void clear_GPR35_FLEXIO1_IPG_DOZE() volatile
    {
        GPR35 &= ~(1u << 21u);
    }

    /**
     * Toggle GPR35's FLEXIO1_IPG_DOZE bit.
     *
     * FLEXIO2 doze mode
     */
    inline void toggle_GPR35_FLEXIO1_IPG_DOZE() volatile
    {
        GPR35 ^= 1u << 21u;
    }

    /**
     * Get GPR35's ENET1G_STOP_REQ bit.
     *
     * ENET1G stop request
     */
    inline bool get_GPR35_ENET1G_STOP_REQ() volatile
    {
        return GPR35 & (1u << 20u);
    }

    /**
     * Set GPR35's ENET1G_STOP_REQ bit.
     *
     * ENET1G stop request
     */
    inline void set_GPR35_ENET1G_STOP_REQ() volatile
    {
        GPR35 |= 1u << 20u;
    }

    /**
     * Clear GPR35's ENET1G_STOP_REQ bit.
     *
     * ENET1G stop request
     */
    inline void clear_GPR35_ENET1G_STOP_REQ() volatile
    {
        GPR35 &= ~(1u << 20u);
    }

    /**
     * Toggle GPR35's ENET1G_STOP_REQ bit.
     *
     * ENET1G stop request
     */
    inline void toggle_GPR35_ENET1G_STOP_REQ() volatile
    {
        GPR35 ^= 1u << 20u;
    }

    /**
     * Get GPR35's ENET1G_IPG_DOZE bit.
     *
     * ENET1G doze mode
     */
    inline bool get_GPR35_ENET1G_IPG_DOZE() volatile
    {
        return GPR35 & (1u << 19u);
    }

    /**
     * Set GPR35's ENET1G_IPG_DOZE bit.
     *
     * ENET1G doze mode
     */
    inline void set_GPR35_ENET1G_IPG_DOZE() volatile
    {
        GPR35 |= 1u << 19u;
    }

    /**
     * Clear GPR35's ENET1G_IPG_DOZE bit.
     *
     * ENET1G doze mode
     */
    inline void clear_GPR35_ENET1G_IPG_DOZE() volatile
    {
        GPR35 &= ~(1u << 19u);
    }

    /**
     * Toggle GPR35's ENET1G_IPG_DOZE bit.
     *
     * ENET1G doze mode
     */
    inline void toggle_GPR35_ENET1G_IPG_DOZE() volatile
    {
        GPR35 ^= 1u << 19u;
    }

    /**
     * Get GPR35's ENET_STOP_REQ bit.
     *
     * ENET stop request
     */
    inline bool get_GPR35_ENET_STOP_REQ() volatile
    {
        return GPR35 & (1u << 18u);
    }

    /**
     * Set GPR35's ENET_STOP_REQ bit.
     *
     * ENET stop request
     */
    inline void set_GPR35_ENET_STOP_REQ() volatile
    {
        GPR35 |= 1u << 18u;
    }

    /**
     * Clear GPR35's ENET_STOP_REQ bit.
     *
     * ENET stop request
     */
    inline void clear_GPR35_ENET_STOP_REQ() volatile
    {
        GPR35 &= ~(1u << 18u);
    }

    /**
     * Toggle GPR35's ENET_STOP_REQ bit.
     *
     * ENET stop request
     */
    inline void toggle_GPR35_ENET_STOP_REQ() volatile
    {
        GPR35 ^= 1u << 18u;
    }

    /**
     * Get GPR35's ENET_IPG_DOZE bit.
     *
     * ENET doze mode
     */
    inline bool get_GPR35_ENET_IPG_DOZE() volatile
    {
        return GPR35 & (1u << 17u);
    }

    /**
     * Set GPR35's ENET_IPG_DOZE bit.
     *
     * ENET doze mode
     */
    inline void set_GPR35_ENET_IPG_DOZE() volatile
    {
        GPR35 |= 1u << 17u;
    }

    /**
     * Clear GPR35's ENET_IPG_DOZE bit.
     *
     * ENET doze mode
     */
    inline void clear_GPR35_ENET_IPG_DOZE() volatile
    {
        GPR35 &= ~(1u << 17u);
    }

    /**
     * Toggle GPR35's ENET_IPG_DOZE bit.
     *
     * ENET doze mode
     */
    inline void toggle_GPR35_ENET_IPG_DOZE() volatile
    {
        GPR35 ^= 1u << 17u;
    }

    /**
     * Get GPR35's EDMA_LPSR_STOP_REQ bit.
     *
     * EDMA_LPSR stop request
     */
    inline bool get_GPR35_EDMA_LPSR_STOP_REQ() volatile
    {
        return GPR35 & (1u << 16u);
    }

    /**
     * Set GPR35's EDMA_LPSR_STOP_REQ bit.
     *
     * EDMA_LPSR stop request
     */
    inline void set_GPR35_EDMA_LPSR_STOP_REQ() volatile
    {
        GPR35 |= 1u << 16u;
    }

    /**
     * Clear GPR35's EDMA_LPSR_STOP_REQ bit.
     *
     * EDMA_LPSR stop request
     */
    inline void clear_GPR35_EDMA_LPSR_STOP_REQ() volatile
    {
        GPR35 &= ~(1u << 16u);
    }

    /**
     * Toggle GPR35's EDMA_LPSR_STOP_REQ bit.
     *
     * EDMA_LPSR stop request
     */
    inline void toggle_GPR35_EDMA_LPSR_STOP_REQ() volatile
    {
        GPR35 ^= 1u << 16u;
    }

    /**
     * Get GPR35's EDMA_STOP_REQ bit.
     *
     * EDMA stop request
     */
    inline bool get_GPR35_EDMA_STOP_REQ() volatile
    {
        return GPR35 & (1u << 15u);
    }

    /**
     * Set GPR35's EDMA_STOP_REQ bit.
     *
     * EDMA stop request
     */
    inline void set_GPR35_EDMA_STOP_REQ() volatile
    {
        GPR35 |= 1u << 15u;
    }

    /**
     * Clear GPR35's EDMA_STOP_REQ bit.
     *
     * EDMA stop request
     */
    inline void clear_GPR35_EDMA_STOP_REQ() volatile
    {
        GPR35 &= ~(1u << 15u);
    }

    /**
     * Toggle GPR35's EDMA_STOP_REQ bit.
     *
     * EDMA stop request
     */
    inline void toggle_GPR35_EDMA_STOP_REQ() volatile
    {
        GPR35 ^= 1u << 15u;
    }

    /**
     * Get GPR35's CAN3_STOP_REQ bit.
     *
     * CAN3 stop request
     */
    inline bool get_GPR35_CAN3_STOP_REQ() volatile
    {
        return GPR35 & (1u << 13u);
    }

    /**
     * Set GPR35's CAN3_STOP_REQ bit.
     *
     * CAN3 stop request
     */
    inline void set_GPR35_CAN3_STOP_REQ() volatile
    {
        GPR35 |= 1u << 13u;
    }

    /**
     * Clear GPR35's CAN3_STOP_REQ bit.
     *
     * CAN3 stop request
     */
    inline void clear_GPR35_CAN3_STOP_REQ() volatile
    {
        GPR35 &= ~(1u << 13u);
    }

    /**
     * Toggle GPR35's CAN3_STOP_REQ bit.
     *
     * CAN3 stop request
     */
    inline void toggle_GPR35_CAN3_STOP_REQ() volatile
    {
        GPR35 ^= 1u << 13u;
    }

    /**
     * Get GPR35's CAN3_IPG_DOZE bit.
     *
     * CAN3 doze mode
     */
    inline bool get_GPR35_CAN3_IPG_DOZE() volatile
    {
        return GPR35 & (1u << 12u);
    }

    /**
     * Set GPR35's CAN3_IPG_DOZE bit.
     *
     * CAN3 doze mode
     */
    inline void set_GPR35_CAN3_IPG_DOZE() volatile
    {
        GPR35 |= 1u << 12u;
    }

    /**
     * Clear GPR35's CAN3_IPG_DOZE bit.
     *
     * CAN3 doze mode
     */
    inline void clear_GPR35_CAN3_IPG_DOZE() volatile
    {
        GPR35 &= ~(1u << 12u);
    }

    /**
     * Toggle GPR35's CAN3_IPG_DOZE bit.
     *
     * CAN3 doze mode
     */
    inline void toggle_GPR35_CAN3_IPG_DOZE() volatile
    {
        GPR35 ^= 1u << 12u;
    }

    /**
     * Get GPR35's CAN2_STOP_REQ bit.
     *
     * CAN2 stop request
     */
    inline bool get_GPR35_CAN2_STOP_REQ() volatile
    {
        return GPR35 & (1u << 11u);
    }

    /**
     * Set GPR35's CAN2_STOP_REQ bit.
     *
     * CAN2 stop request
     */
    inline void set_GPR35_CAN2_STOP_REQ() volatile
    {
        GPR35 |= 1u << 11u;
    }

    /**
     * Clear GPR35's CAN2_STOP_REQ bit.
     *
     * CAN2 stop request
     */
    inline void clear_GPR35_CAN2_STOP_REQ() volatile
    {
        GPR35 &= ~(1u << 11u);
    }

    /**
     * Toggle GPR35's CAN2_STOP_REQ bit.
     *
     * CAN2 stop request
     */
    inline void toggle_GPR35_CAN2_STOP_REQ() volatile
    {
        GPR35 ^= 1u << 11u;
    }

    /**
     * Get GPR35's CAN2_IPG_DOZE bit.
     *
     * CAN2 doze mode
     */
    inline bool get_GPR35_CAN2_IPG_DOZE() volatile
    {
        return GPR35 & (1u << 10u);
    }

    /**
     * Set GPR35's CAN2_IPG_DOZE bit.
     *
     * CAN2 doze mode
     */
    inline void set_GPR35_CAN2_IPG_DOZE() volatile
    {
        GPR35 |= 1u << 10u;
    }

    /**
     * Clear GPR35's CAN2_IPG_DOZE bit.
     *
     * CAN2 doze mode
     */
    inline void clear_GPR35_CAN2_IPG_DOZE() volatile
    {
        GPR35 &= ~(1u << 10u);
    }

    /**
     * Toggle GPR35's CAN2_IPG_DOZE bit.
     *
     * CAN2 doze mode
     */
    inline void toggle_GPR35_CAN2_IPG_DOZE() volatile
    {
        GPR35 ^= 1u << 10u;
    }

    /**
     * Get GPR35's CAN1_STOP_REQ bit.
     *
     * CAN1 stop request
     */
    inline bool get_GPR35_CAN1_STOP_REQ() volatile
    {
        return GPR35 & (1u << 9u);
    }

    /**
     * Set GPR35's CAN1_STOP_REQ bit.
     *
     * CAN1 stop request
     */
    inline void set_GPR35_CAN1_STOP_REQ() volatile
    {
        GPR35 |= 1u << 9u;
    }

    /**
     * Clear GPR35's CAN1_STOP_REQ bit.
     *
     * CAN1 stop request
     */
    inline void clear_GPR35_CAN1_STOP_REQ() volatile
    {
        GPR35 &= ~(1u << 9u);
    }

    /**
     * Toggle GPR35's CAN1_STOP_REQ bit.
     *
     * CAN1 stop request
     */
    inline void toggle_GPR35_CAN1_STOP_REQ() volatile
    {
        GPR35 ^= 1u << 9u;
    }

    /**
     * Get GPR35's CAN1_IPG_DOZE bit.
     *
     * CAN1 doze mode
     */
    inline bool get_GPR35_CAN1_IPG_DOZE() volatile
    {
        return GPR35 & (1u << 8u);
    }

    /**
     * Set GPR35's CAN1_IPG_DOZE bit.
     *
     * CAN1 doze mode
     */
    inline void set_GPR35_CAN1_IPG_DOZE() volatile
    {
        GPR35 |= 1u << 8u;
    }

    /**
     * Clear GPR35's CAN1_IPG_DOZE bit.
     *
     * CAN1 doze mode
     */
    inline void clear_GPR35_CAN1_IPG_DOZE() volatile
    {
        GPR35 &= ~(1u << 8u);
    }

    /**
     * Toggle GPR35's CAN1_IPG_DOZE bit.
     *
     * CAN1 doze mode
     */
    inline void toggle_GPR35_CAN1_IPG_DOZE() volatile
    {
        GPR35 ^= 1u << 8u;
    }

    /**
     * Get GPR35's CAAM_STOP_REQ bit.
     *
     * CAAM stop request
     */
    inline bool get_GPR35_CAAM_STOP_REQ() volatile
    {
        return GPR35 & (1u << 7u);
    }

    /**
     * Set GPR35's CAAM_STOP_REQ bit.
     *
     * CAAM stop request
     */
    inline void set_GPR35_CAAM_STOP_REQ() volatile
    {
        GPR35 |= 1u << 7u;
    }

    /**
     * Clear GPR35's CAAM_STOP_REQ bit.
     *
     * CAAM stop request
     */
    inline void clear_GPR35_CAAM_STOP_REQ() volatile
    {
        GPR35 &= ~(1u << 7u);
    }

    /**
     * Toggle GPR35's CAAM_STOP_REQ bit.
     *
     * CAAM stop request
     */
    inline void toggle_GPR35_CAAM_STOP_REQ() volatile
    {
        GPR35 ^= 1u << 7u;
    }

    /**
     * Get GPR35's CAAM_IPG_DOZE bit.
     *
     * CAN3 doze mode
     */
    inline bool get_GPR35_CAAM_IPG_DOZE() volatile
    {
        return GPR35 & (1u << 6u);
    }

    /**
     * Set GPR35's CAAM_IPG_DOZE bit.
     *
     * CAN3 doze mode
     */
    inline void set_GPR35_CAAM_IPG_DOZE() volatile
    {
        GPR35 |= 1u << 6u;
    }

    /**
     * Clear GPR35's CAAM_IPG_DOZE bit.
     *
     * CAN3 doze mode
     */
    inline void clear_GPR35_CAAM_IPG_DOZE() volatile
    {
        GPR35 &= ~(1u << 6u);
    }

    /**
     * Toggle GPR35's CAAM_IPG_DOZE bit.
     *
     * CAN3 doze mode
     */
    inline void toggle_GPR35_CAAM_IPG_DOZE() volatile
    {
        GPR35 ^= 1u << 6u;
    }

    /**
     * Get GPR35's ADC2_IPG_STOP_MODE bit.
     *
     * ADC2 stop mode selection. This bitfield cannot change when ADC2_STOP_REQ
     * is asserted.
     */
    inline bool get_GPR35_ADC2_IPG_STOP_MODE() volatile
    {
        return GPR35 & (1u << 5u);
    }

    /**
     * Set GPR35's ADC2_IPG_STOP_MODE bit.
     *
     * ADC2 stop mode selection. This bitfield cannot change when ADC2_STOP_REQ
     * is asserted.
     */
    inline void set_GPR35_ADC2_IPG_STOP_MODE() volatile
    {
        GPR35 |= 1u << 5u;
    }

    /**
     * Clear GPR35's ADC2_IPG_STOP_MODE bit.
     *
     * ADC2 stop mode selection. This bitfield cannot change when ADC2_STOP_REQ
     * is asserted.
     */
    inline void clear_GPR35_ADC2_IPG_STOP_MODE() volatile
    {
        GPR35 &= ~(1u << 5u);
    }

    /**
     * Toggle GPR35's ADC2_IPG_STOP_MODE bit.
     *
     * ADC2 stop mode selection. This bitfield cannot change when ADC2_STOP_REQ
     * is asserted.
     */
    inline void toggle_GPR35_ADC2_IPG_STOP_MODE() volatile
    {
        GPR35 ^= 1u << 5u;
    }

    /**
     * Get GPR35's ADC2_STOP_REQ bit.
     *
     * ADC2 stop request
     */
    inline bool get_GPR35_ADC2_STOP_REQ() volatile
    {
        return GPR35 & (1u << 4u);
    }

    /**
     * Set GPR35's ADC2_STOP_REQ bit.
     *
     * ADC2 stop request
     */
    inline void set_GPR35_ADC2_STOP_REQ() volatile
    {
        GPR35 |= 1u << 4u;
    }

    /**
     * Clear GPR35's ADC2_STOP_REQ bit.
     *
     * ADC2 stop request
     */
    inline void clear_GPR35_ADC2_STOP_REQ() volatile
    {
        GPR35 &= ~(1u << 4u);
    }

    /**
     * Toggle GPR35's ADC2_STOP_REQ bit.
     *
     * ADC2 stop request
     */
    inline void toggle_GPR35_ADC2_STOP_REQ() volatile
    {
        GPR35 ^= 1u << 4u;
    }

    /**
     * Get GPR35's ADC2_IPG_DOZE bit.
     *
     * ADC2 doze mode
     */
    inline bool get_GPR35_ADC2_IPG_DOZE() volatile
    {
        return GPR35 & (1u << 3u);
    }

    /**
     * Set GPR35's ADC2_IPG_DOZE bit.
     *
     * ADC2 doze mode
     */
    inline void set_GPR35_ADC2_IPG_DOZE() volatile
    {
        GPR35 |= 1u << 3u;
    }

    /**
     * Clear GPR35's ADC2_IPG_DOZE bit.
     *
     * ADC2 doze mode
     */
    inline void clear_GPR35_ADC2_IPG_DOZE() volatile
    {
        GPR35 &= ~(1u << 3u);
    }

    /**
     * Toggle GPR35's ADC2_IPG_DOZE bit.
     *
     * ADC2 doze mode
     */
    inline void toggle_GPR35_ADC2_IPG_DOZE() volatile
    {
        GPR35 ^= 1u << 3u;
    }

    /**
     * Get GPR35's ADC1_IPG_STOP_MODE bit.
     *
     * ADC1 stop mode selection. This bitfield cannot change when ADC1_STOP_REQ
     * is asserted.
     */
    inline bool get_GPR35_ADC1_IPG_STOP_MODE() volatile
    {
        return GPR35 & (1u << 2u);
    }

    /**
     * Set GPR35's ADC1_IPG_STOP_MODE bit.
     *
     * ADC1 stop mode selection. This bitfield cannot change when ADC1_STOP_REQ
     * is asserted.
     */
    inline void set_GPR35_ADC1_IPG_STOP_MODE() volatile
    {
        GPR35 |= 1u << 2u;
    }

    /**
     * Clear GPR35's ADC1_IPG_STOP_MODE bit.
     *
     * ADC1 stop mode selection. This bitfield cannot change when ADC1_STOP_REQ
     * is asserted.
     */
    inline void clear_GPR35_ADC1_IPG_STOP_MODE() volatile
    {
        GPR35 &= ~(1u << 2u);
    }

    /**
     * Toggle GPR35's ADC1_IPG_STOP_MODE bit.
     *
     * ADC1 stop mode selection. This bitfield cannot change when ADC1_STOP_REQ
     * is asserted.
     */
    inline void toggle_GPR35_ADC1_IPG_STOP_MODE() volatile
    {
        GPR35 ^= 1u << 2u;
    }

    /**
     * Get GPR35's ADC1_STOP_REQ bit.
     *
     * ADC1 stop request
     */
    inline bool get_GPR35_ADC1_STOP_REQ() volatile
    {
        return GPR35 & (1u << 1u);
    }

    /**
     * Set GPR35's ADC1_STOP_REQ bit.
     *
     * ADC1 stop request
     */
    inline void set_GPR35_ADC1_STOP_REQ() volatile
    {
        GPR35 |= 1u << 1u;
    }

    /**
     * Clear GPR35's ADC1_STOP_REQ bit.
     *
     * ADC1 stop request
     */
    inline void clear_GPR35_ADC1_STOP_REQ() volatile
    {
        GPR35 &= ~(1u << 1u);
    }

    /**
     * Toggle GPR35's ADC1_STOP_REQ bit.
     *
     * ADC1 stop request
     */
    inline void toggle_GPR35_ADC1_STOP_REQ() volatile
    {
        GPR35 ^= 1u << 1u;
    }

    /**
     * Get GPR35's ADC1_IPG_DOZE bit.
     *
     * ADC1 doze mode
     */
    inline bool get_GPR35_ADC1_IPG_DOZE() volatile
    {
        return GPR35 & (1u << 0u);
    }

    /**
     * Set GPR35's ADC1_IPG_DOZE bit.
     *
     * ADC1 doze mode
     */
    inline void set_GPR35_ADC1_IPG_DOZE() volatile
    {
        GPR35 |= 1u << 0u;
    }

    /**
     * Clear GPR35's ADC1_IPG_DOZE bit.
     *
     * ADC1 doze mode
     */
    inline void clear_GPR35_ADC1_IPG_DOZE() volatile
    {
        GPR35 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR35's ADC1_IPG_DOZE bit.
     *
     * ADC1 doze mode
     */
    inline void toggle_GPR35_ADC1_IPG_DOZE() volatile
    {
        GPR35 ^= 1u << 0u;
    }

    /**
     * Get all of GPR35's bit fields.
     *
     * (read-write) GPR35 General Purpose Register
     */
    inline void get_GPR35(IOMUXC_LPSR_GPR_GPR35_DWP_LOCK &DWP_LOCK,
                          IOMUXC_LPSR_GPR_GPR35_DWP &DWP,
                          bool &FLEXSPI2_STOP_REQ, bool &FLEXSPI2_IPG_DOZE,
                          bool &FLEXSPI1_STOP_REQ, bool &FLEXSPI1_IPG_DOZE,
                          bool &FLEXIO2_IPG_DOZE, bool &FLEXIO1_IPG_DOZE,
                          bool &ENET1G_STOP_REQ, bool &ENET1G_IPG_DOZE,
                          bool &ENET_STOP_REQ, bool &ENET_IPG_DOZE,
                          bool &EDMA_LPSR_STOP_REQ, bool &EDMA_STOP_REQ,
                          bool &CAN3_STOP_REQ, bool &CAN3_IPG_DOZE,
                          bool &CAN2_STOP_REQ, bool &CAN2_IPG_DOZE,
                          bool &CAN1_STOP_REQ, bool &CAN1_IPG_DOZE,
                          bool &CAAM_STOP_REQ, bool &CAAM_IPG_DOZE,
                          bool &ADC2_IPG_STOP_MODE, bool &ADC2_STOP_REQ,
                          bool &ADC2_IPG_DOZE, bool &ADC1_IPG_STOP_MODE,
                          bool &ADC1_STOP_REQ, bool &ADC1_IPG_DOZE) volatile
    {
        uint32_t curr = GPR35;

        DWP_LOCK = IOMUXC_LPSR_GPR_GPR35_DWP_LOCK((curr >> 30u) & 0b11u);
        DWP = IOMUXC_LPSR_GPR_GPR35_DWP((curr >> 28u) & 0b11u);
        FLEXSPI2_STOP_REQ = curr & (1u << 26u);
        FLEXSPI2_IPG_DOZE = curr & (1u << 25u);
        FLEXSPI1_STOP_REQ = curr & (1u << 24u);
        FLEXSPI1_IPG_DOZE = curr & (1u << 23u);
        FLEXIO2_IPG_DOZE = curr & (1u << 22u);
        FLEXIO1_IPG_DOZE = curr & (1u << 21u);
        ENET1G_STOP_REQ = curr & (1u << 20u);
        ENET1G_IPG_DOZE = curr & (1u << 19u);
        ENET_STOP_REQ = curr & (1u << 18u);
        ENET_IPG_DOZE = curr & (1u << 17u);
        EDMA_LPSR_STOP_REQ = curr & (1u << 16u);
        EDMA_STOP_REQ = curr & (1u << 15u);
        CAN3_STOP_REQ = curr & (1u << 13u);
        CAN3_IPG_DOZE = curr & (1u << 12u);
        CAN2_STOP_REQ = curr & (1u << 11u);
        CAN2_IPG_DOZE = curr & (1u << 10u);
        CAN1_STOP_REQ = curr & (1u << 9u);
        CAN1_IPG_DOZE = curr & (1u << 8u);
        CAAM_STOP_REQ = curr & (1u << 7u);
        CAAM_IPG_DOZE = curr & (1u << 6u);
        ADC2_IPG_STOP_MODE = curr & (1u << 5u);
        ADC2_STOP_REQ = curr & (1u << 4u);
        ADC2_IPG_DOZE = curr & (1u << 3u);
        ADC1_IPG_STOP_MODE = curr & (1u << 2u);
        ADC1_STOP_REQ = curr & (1u << 1u);
        ADC1_IPG_DOZE = curr & (1u << 0u);
    }

    /**
     * Set all of GPR35's bit fields.
     *
     * (read-write) GPR35 General Purpose Register
     */
    inline void set_GPR35(
        IOMUXC_LPSR_GPR_GPR35_DWP_LOCK DWP_LOCK, IOMUXC_LPSR_GPR_GPR35_DWP DWP,
        bool FLEXSPI2_STOP_REQ, bool FLEXSPI2_IPG_DOZE, bool FLEXSPI1_STOP_REQ,
        bool FLEXSPI1_IPG_DOZE, bool FLEXIO2_IPG_DOZE, bool FLEXIO1_IPG_DOZE,
        bool ENET1G_STOP_REQ, bool ENET1G_IPG_DOZE, bool ENET_STOP_REQ,
        bool ENET_IPG_DOZE, bool EDMA_LPSR_STOP_REQ, bool EDMA_STOP_REQ,
        bool CAN3_STOP_REQ, bool CAN3_IPG_DOZE, bool CAN2_STOP_REQ,
        bool CAN2_IPG_DOZE, bool CAN1_STOP_REQ, bool CAN1_IPG_DOZE,
        bool CAAM_STOP_REQ, bool CAAM_IPG_DOZE, bool ADC2_IPG_STOP_MODE,
        bool ADC2_STOP_REQ, bool ADC2_IPG_DOZE, bool ADC1_IPG_STOP_MODE,
        bool ADC1_STOP_REQ, bool ADC1_IPG_DOZE) volatile
    {
        uint32_t curr = GPR35;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 26u);
        curr |= (FLEXSPI2_STOP_REQ & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (FLEXSPI2_IPG_DOZE & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (FLEXSPI1_STOP_REQ & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (FLEXSPI1_IPG_DOZE & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (FLEXIO2_IPG_DOZE & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (FLEXIO1_IPG_DOZE & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (ENET1G_STOP_REQ & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (ENET1G_IPG_DOZE & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (ENET_STOP_REQ & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (ENET_IPG_DOZE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (EDMA_LPSR_STOP_REQ & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (EDMA_STOP_REQ & 0b1u) << 15u;
        curr &= ~(0b1u << 13u);
        curr |= (CAN3_STOP_REQ & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (CAN3_IPG_DOZE & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (CAN2_STOP_REQ & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (CAN2_IPG_DOZE & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (CAN1_STOP_REQ & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (CAN1_IPG_DOZE & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (CAAM_STOP_REQ & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CAAM_IPG_DOZE & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (ADC2_IPG_STOP_MODE & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ADC2_STOP_REQ & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (ADC2_IPG_DOZE & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (ADC1_IPG_STOP_MODE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (ADC1_STOP_REQ & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ADC1_IPG_DOZE & 0b1u) << 0u;

        GPR35 = curr;
    }

    /**
     * Get GPR36's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_GPR_GPR36_DWP_LOCK get_GPR36_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_GPR_GPR36_DWP_LOCK((GPR36 >> 30u) & 0b11u);
    }

    /**
     * Set GPR36's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_GPR36_DWP_LOCK(
        IOMUXC_LPSR_GPR_GPR36_DWP_LOCK value) volatile
    {
        uint32_t curr = GPR36;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        GPR36 = curr;
    }

    /**
     * Get GPR36's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_GPR_GPR36_DWP get_GPR36_DWP() volatile
    {
        return IOMUXC_LPSR_GPR_GPR36_DWP((GPR36 >> 28u) & 0b11u);
    }

    /**
     * Set GPR36's DWP field.
     *
     * Domain write protection
     */
    inline void set_GPR36_DWP(IOMUXC_LPSR_GPR_GPR36_DWP value) volatile
    {
        uint32_t curr = GPR36;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        GPR36 = curr;
    }

    /**
     * Get GPR36's LPSPI1_IPG_STOP_MODE bit.
     *
     * LPSPI1 stop mode selection. This bitfield cannot change when
     * LPSPI1_STOP_REQ is asserted.
     */
    inline bool get_GPR36_LPSPI1_IPG_STOP_MODE() volatile
    {
        return GPR36 & (1u << 26u);
    }

    /**
     * Set GPR36's LPSPI1_IPG_STOP_MODE bit.
     *
     * LPSPI1 stop mode selection. This bitfield cannot change when
     * LPSPI1_STOP_REQ is asserted.
     */
    inline void set_GPR36_LPSPI1_IPG_STOP_MODE() volatile
    {
        GPR36 |= 1u << 26u;
    }

    /**
     * Clear GPR36's LPSPI1_IPG_STOP_MODE bit.
     *
     * LPSPI1 stop mode selection. This bitfield cannot change when
     * LPSPI1_STOP_REQ is asserted.
     */
    inline void clear_GPR36_LPSPI1_IPG_STOP_MODE() volatile
    {
        GPR36 &= ~(1u << 26u);
    }

    /**
     * Toggle GPR36's LPSPI1_IPG_STOP_MODE bit.
     *
     * LPSPI1 stop mode selection. This bitfield cannot change when
     * LPSPI1_STOP_REQ is asserted.
     */
    inline void toggle_GPR36_LPSPI1_IPG_STOP_MODE() volatile
    {
        GPR36 ^= 1u << 26u;
    }

    /**
     * Get GPR36's LPSPI1_STOP_REQ bit.
     *
     * LPSPI1 stop request
     */
    inline bool get_GPR36_LPSPI1_STOP_REQ() volatile
    {
        return GPR36 & (1u << 25u);
    }

    /**
     * Set GPR36's LPSPI1_STOP_REQ bit.
     *
     * LPSPI1 stop request
     */
    inline void set_GPR36_LPSPI1_STOP_REQ() volatile
    {
        GPR36 |= 1u << 25u;
    }

    /**
     * Clear GPR36's LPSPI1_STOP_REQ bit.
     *
     * LPSPI1 stop request
     */
    inline void clear_GPR36_LPSPI1_STOP_REQ() volatile
    {
        GPR36 &= ~(1u << 25u);
    }

    /**
     * Toggle GPR36's LPSPI1_STOP_REQ bit.
     *
     * LPSPI1 stop request
     */
    inline void toggle_GPR36_LPSPI1_STOP_REQ() volatile
    {
        GPR36 ^= 1u << 25u;
    }

    /**
     * Get GPR36's LPSPI1_IPG_DOZE bit.
     *
     * LPSPI1 doze mode
     */
    inline bool get_GPR36_LPSPI1_IPG_DOZE() volatile
    {
        return GPR36 & (1u << 24u);
    }

    /**
     * Set GPR36's LPSPI1_IPG_DOZE bit.
     *
     * LPSPI1 doze mode
     */
    inline void set_GPR36_LPSPI1_IPG_DOZE() volatile
    {
        GPR36 |= 1u << 24u;
    }

    /**
     * Clear GPR36's LPSPI1_IPG_DOZE bit.
     *
     * LPSPI1 doze mode
     */
    inline void clear_GPR36_LPSPI1_IPG_DOZE() volatile
    {
        GPR36 &= ~(1u << 24u);
    }

    /**
     * Toggle GPR36's LPSPI1_IPG_DOZE bit.
     *
     * LPSPI1 doze mode
     */
    inline void toggle_GPR36_LPSPI1_IPG_DOZE() volatile
    {
        GPR36 ^= 1u << 24u;
    }

    /**
     * Get GPR36's LPI2C6_IPG_STOP_MODE bit.
     *
     * LPI2C6 stop mode selection. This bitfield cannot change when
     * LPI2C6_STOP_REQ is asserted.
     */
    inline bool get_GPR36_LPI2C6_IPG_STOP_MODE() volatile
    {
        return GPR36 & (1u << 23u);
    }

    /**
     * Set GPR36's LPI2C6_IPG_STOP_MODE bit.
     *
     * LPI2C6 stop mode selection. This bitfield cannot change when
     * LPI2C6_STOP_REQ is asserted.
     */
    inline void set_GPR36_LPI2C6_IPG_STOP_MODE() volatile
    {
        GPR36 |= 1u << 23u;
    }

    /**
     * Clear GPR36's LPI2C6_IPG_STOP_MODE bit.
     *
     * LPI2C6 stop mode selection. This bitfield cannot change when
     * LPI2C6_STOP_REQ is asserted.
     */
    inline void clear_GPR36_LPI2C6_IPG_STOP_MODE() volatile
    {
        GPR36 &= ~(1u << 23u);
    }

    /**
     * Toggle GPR36's LPI2C6_IPG_STOP_MODE bit.
     *
     * LPI2C6 stop mode selection. This bitfield cannot change when
     * LPI2C6_STOP_REQ is asserted.
     */
    inline void toggle_GPR36_LPI2C6_IPG_STOP_MODE() volatile
    {
        GPR36 ^= 1u << 23u;
    }

    /**
     * Get GPR36's LPI2C6_STOP_REQ bit.
     *
     * LPI2C6 stop request
     */
    inline bool get_GPR36_LPI2C6_STOP_REQ() volatile
    {
        return GPR36 & (1u << 22u);
    }

    /**
     * Set GPR36's LPI2C6_STOP_REQ bit.
     *
     * LPI2C6 stop request
     */
    inline void set_GPR36_LPI2C6_STOP_REQ() volatile
    {
        GPR36 |= 1u << 22u;
    }

    /**
     * Clear GPR36's LPI2C6_STOP_REQ bit.
     *
     * LPI2C6 stop request
     */
    inline void clear_GPR36_LPI2C6_STOP_REQ() volatile
    {
        GPR36 &= ~(1u << 22u);
    }

    /**
     * Toggle GPR36's LPI2C6_STOP_REQ bit.
     *
     * LPI2C6 stop request
     */
    inline void toggle_GPR36_LPI2C6_STOP_REQ() volatile
    {
        GPR36 ^= 1u << 22u;
    }

    /**
     * Get GPR36's LPI2C6_IPG_DOZE bit.
     *
     * LPI2C6 doze mode
     */
    inline bool get_GPR36_LPI2C6_IPG_DOZE() volatile
    {
        return GPR36 & (1u << 21u);
    }

    /**
     * Set GPR36's LPI2C6_IPG_DOZE bit.
     *
     * LPI2C6 doze mode
     */
    inline void set_GPR36_LPI2C6_IPG_DOZE() volatile
    {
        GPR36 |= 1u << 21u;
    }

    /**
     * Clear GPR36's LPI2C6_IPG_DOZE bit.
     *
     * LPI2C6 doze mode
     */
    inline void clear_GPR36_LPI2C6_IPG_DOZE() volatile
    {
        GPR36 &= ~(1u << 21u);
    }

    /**
     * Toggle GPR36's LPI2C6_IPG_DOZE bit.
     *
     * LPI2C6 doze mode
     */
    inline void toggle_GPR36_LPI2C6_IPG_DOZE() volatile
    {
        GPR36 ^= 1u << 21u;
    }

    /**
     * Get GPR36's LPI2C5_IPG_STOP_MODE bit.
     *
     * LPI2C5 stop mode selection. This bitfield cannot change when
     * LPI2C5_STOP_REQ is asserted.
     */
    inline bool get_GPR36_LPI2C5_IPG_STOP_MODE() volatile
    {
        return GPR36 & (1u << 20u);
    }

    /**
     * Set GPR36's LPI2C5_IPG_STOP_MODE bit.
     *
     * LPI2C5 stop mode selection. This bitfield cannot change when
     * LPI2C5_STOP_REQ is asserted.
     */
    inline void set_GPR36_LPI2C5_IPG_STOP_MODE() volatile
    {
        GPR36 |= 1u << 20u;
    }

    /**
     * Clear GPR36's LPI2C5_IPG_STOP_MODE bit.
     *
     * LPI2C5 stop mode selection. This bitfield cannot change when
     * LPI2C5_STOP_REQ is asserted.
     */
    inline void clear_GPR36_LPI2C5_IPG_STOP_MODE() volatile
    {
        GPR36 &= ~(1u << 20u);
    }

    /**
     * Toggle GPR36's LPI2C5_IPG_STOP_MODE bit.
     *
     * LPI2C5 stop mode selection. This bitfield cannot change when
     * LPI2C5_STOP_REQ is asserted.
     */
    inline void toggle_GPR36_LPI2C5_IPG_STOP_MODE() volatile
    {
        GPR36 ^= 1u << 20u;
    }

    /**
     * Get GPR36's LPI2C5_STOP_REQ bit.
     *
     * LPI2C5 stop request
     */
    inline bool get_GPR36_LPI2C5_STOP_REQ() volatile
    {
        return GPR36 & (1u << 19u);
    }

    /**
     * Set GPR36's LPI2C5_STOP_REQ bit.
     *
     * LPI2C5 stop request
     */
    inline void set_GPR36_LPI2C5_STOP_REQ() volatile
    {
        GPR36 |= 1u << 19u;
    }

    /**
     * Clear GPR36's LPI2C5_STOP_REQ bit.
     *
     * LPI2C5 stop request
     */
    inline void clear_GPR36_LPI2C5_STOP_REQ() volatile
    {
        GPR36 &= ~(1u << 19u);
    }

    /**
     * Toggle GPR36's LPI2C5_STOP_REQ bit.
     *
     * LPI2C5 stop request
     */
    inline void toggle_GPR36_LPI2C5_STOP_REQ() volatile
    {
        GPR36 ^= 1u << 19u;
    }

    /**
     * Get GPR36's LPI2C5_IPG_DOZE bit.
     *
     * LPI2C5 doze mode
     */
    inline bool get_GPR36_LPI2C5_IPG_DOZE() volatile
    {
        return GPR36 & (1u << 18u);
    }

    /**
     * Set GPR36's LPI2C5_IPG_DOZE bit.
     *
     * LPI2C5 doze mode
     */
    inline void set_GPR36_LPI2C5_IPG_DOZE() volatile
    {
        GPR36 |= 1u << 18u;
    }

    /**
     * Clear GPR36's LPI2C5_IPG_DOZE bit.
     *
     * LPI2C5 doze mode
     */
    inline void clear_GPR36_LPI2C5_IPG_DOZE() volatile
    {
        GPR36 &= ~(1u << 18u);
    }

    /**
     * Toggle GPR36's LPI2C5_IPG_DOZE bit.
     *
     * LPI2C5 doze mode
     */
    inline void toggle_GPR36_LPI2C5_IPG_DOZE() volatile
    {
        GPR36 ^= 1u << 18u;
    }

    /**
     * Get GPR36's LPI2C4_IPG_STOP_MODE bit.
     *
     * LPI2C4 stop mode selection. This bitfield cannot change when
     * LPI2C4_STOP_REQ is asserted.
     */
    inline bool get_GPR36_LPI2C4_IPG_STOP_MODE() volatile
    {
        return GPR36 & (1u << 17u);
    }

    /**
     * Set GPR36's LPI2C4_IPG_STOP_MODE bit.
     *
     * LPI2C4 stop mode selection. This bitfield cannot change when
     * LPI2C4_STOP_REQ is asserted.
     */
    inline void set_GPR36_LPI2C4_IPG_STOP_MODE() volatile
    {
        GPR36 |= 1u << 17u;
    }

    /**
     * Clear GPR36's LPI2C4_IPG_STOP_MODE bit.
     *
     * LPI2C4 stop mode selection. This bitfield cannot change when
     * LPI2C4_STOP_REQ is asserted.
     */
    inline void clear_GPR36_LPI2C4_IPG_STOP_MODE() volatile
    {
        GPR36 &= ~(1u << 17u);
    }

    /**
     * Toggle GPR36's LPI2C4_IPG_STOP_MODE bit.
     *
     * LPI2C4 stop mode selection. This bitfield cannot change when
     * LPI2C4_STOP_REQ is asserted.
     */
    inline void toggle_GPR36_LPI2C4_IPG_STOP_MODE() volatile
    {
        GPR36 ^= 1u << 17u;
    }

    /**
     * Get GPR36's LPI2C4_STOP_REQ bit.
     *
     * LPI2C4 stop request
     */
    inline bool get_GPR36_LPI2C4_STOP_REQ() volatile
    {
        return GPR36 & (1u << 16u);
    }

    /**
     * Set GPR36's LPI2C4_STOP_REQ bit.
     *
     * LPI2C4 stop request
     */
    inline void set_GPR36_LPI2C4_STOP_REQ() volatile
    {
        GPR36 |= 1u << 16u;
    }

    /**
     * Clear GPR36's LPI2C4_STOP_REQ bit.
     *
     * LPI2C4 stop request
     */
    inline void clear_GPR36_LPI2C4_STOP_REQ() volatile
    {
        GPR36 &= ~(1u << 16u);
    }

    /**
     * Toggle GPR36's LPI2C4_STOP_REQ bit.
     *
     * LPI2C4 stop request
     */
    inline void toggle_GPR36_LPI2C4_STOP_REQ() volatile
    {
        GPR36 ^= 1u << 16u;
    }

    /**
     * Get GPR36's LPI2C4_IPG_DOZE bit.
     *
     * LPI2C4 doze mode
     */
    inline bool get_GPR36_LPI2C4_IPG_DOZE() volatile
    {
        return GPR36 & (1u << 15u);
    }

    /**
     * Set GPR36's LPI2C4_IPG_DOZE bit.
     *
     * LPI2C4 doze mode
     */
    inline void set_GPR36_LPI2C4_IPG_DOZE() volatile
    {
        GPR36 |= 1u << 15u;
    }

    /**
     * Clear GPR36's LPI2C4_IPG_DOZE bit.
     *
     * LPI2C4 doze mode
     */
    inline void clear_GPR36_LPI2C4_IPG_DOZE() volatile
    {
        GPR36 &= ~(1u << 15u);
    }

    /**
     * Toggle GPR36's LPI2C4_IPG_DOZE bit.
     *
     * LPI2C4 doze mode
     */
    inline void toggle_GPR36_LPI2C4_IPG_DOZE() volatile
    {
        GPR36 ^= 1u << 15u;
    }

    /**
     * Get GPR36's LPI2C3_IPG_STOP_MODE bit.
     *
     * LPI2C3 stop mode selection. This bitfield cannot change when
     * LPI2C3_STOP_REQ is asserted.
     */
    inline bool get_GPR36_LPI2C3_IPG_STOP_MODE() volatile
    {
        return GPR36 & (1u << 14u);
    }

    /**
     * Set GPR36's LPI2C3_IPG_STOP_MODE bit.
     *
     * LPI2C3 stop mode selection. This bitfield cannot change when
     * LPI2C3_STOP_REQ is asserted.
     */
    inline void set_GPR36_LPI2C3_IPG_STOP_MODE() volatile
    {
        GPR36 |= 1u << 14u;
    }

    /**
     * Clear GPR36's LPI2C3_IPG_STOP_MODE bit.
     *
     * LPI2C3 stop mode selection. This bitfield cannot change when
     * LPI2C3_STOP_REQ is asserted.
     */
    inline void clear_GPR36_LPI2C3_IPG_STOP_MODE() volatile
    {
        GPR36 &= ~(1u << 14u);
    }

    /**
     * Toggle GPR36's LPI2C3_IPG_STOP_MODE bit.
     *
     * LPI2C3 stop mode selection. This bitfield cannot change when
     * LPI2C3_STOP_REQ is asserted.
     */
    inline void toggle_GPR36_LPI2C3_IPG_STOP_MODE() volatile
    {
        GPR36 ^= 1u << 14u;
    }

    /**
     * Get GPR36's LPI2C3_STOP_REQ bit.
     *
     * LPI2C3 stop request
     */
    inline bool get_GPR36_LPI2C3_STOP_REQ() volatile
    {
        return GPR36 & (1u << 13u);
    }

    /**
     * Set GPR36's LPI2C3_STOP_REQ bit.
     *
     * LPI2C3 stop request
     */
    inline void set_GPR36_LPI2C3_STOP_REQ() volatile
    {
        GPR36 |= 1u << 13u;
    }

    /**
     * Clear GPR36's LPI2C3_STOP_REQ bit.
     *
     * LPI2C3 stop request
     */
    inline void clear_GPR36_LPI2C3_STOP_REQ() volatile
    {
        GPR36 &= ~(1u << 13u);
    }

    /**
     * Toggle GPR36's LPI2C3_STOP_REQ bit.
     *
     * LPI2C3 stop request
     */
    inline void toggle_GPR36_LPI2C3_STOP_REQ() volatile
    {
        GPR36 ^= 1u << 13u;
    }

    /**
     * Get GPR36's LPI2C3_IPG_DOZE bit.
     *
     * LPI2C3 doze mode
     */
    inline bool get_GPR36_LPI2C3_IPG_DOZE() volatile
    {
        return GPR36 & (1u << 12u);
    }

    /**
     * Set GPR36's LPI2C3_IPG_DOZE bit.
     *
     * LPI2C3 doze mode
     */
    inline void set_GPR36_LPI2C3_IPG_DOZE() volatile
    {
        GPR36 |= 1u << 12u;
    }

    /**
     * Clear GPR36's LPI2C3_IPG_DOZE bit.
     *
     * LPI2C3 doze mode
     */
    inline void clear_GPR36_LPI2C3_IPG_DOZE() volatile
    {
        GPR36 &= ~(1u << 12u);
    }

    /**
     * Toggle GPR36's LPI2C3_IPG_DOZE bit.
     *
     * LPI2C3 doze mode
     */
    inline void toggle_GPR36_LPI2C3_IPG_DOZE() volatile
    {
        GPR36 ^= 1u << 12u;
    }

    /**
     * Get GPR36's LPI2C2_IPG_STOP_MODE bit.
     *
     * LPI2C2 stop mode selection. This bitfield cannot change when
     * LPI2C2_STOP_REQ is asserted.
     */
    inline bool get_GPR36_LPI2C2_IPG_STOP_MODE() volatile
    {
        return GPR36 & (1u << 11u);
    }

    /**
     * Set GPR36's LPI2C2_IPG_STOP_MODE bit.
     *
     * LPI2C2 stop mode selection. This bitfield cannot change when
     * LPI2C2_STOP_REQ is asserted.
     */
    inline void set_GPR36_LPI2C2_IPG_STOP_MODE() volatile
    {
        GPR36 |= 1u << 11u;
    }

    /**
     * Clear GPR36's LPI2C2_IPG_STOP_MODE bit.
     *
     * LPI2C2 stop mode selection. This bitfield cannot change when
     * LPI2C2_STOP_REQ is asserted.
     */
    inline void clear_GPR36_LPI2C2_IPG_STOP_MODE() volatile
    {
        GPR36 &= ~(1u << 11u);
    }

    /**
     * Toggle GPR36's LPI2C2_IPG_STOP_MODE bit.
     *
     * LPI2C2 stop mode selection. This bitfield cannot change when
     * LPI2C2_STOP_REQ is asserted.
     */
    inline void toggle_GPR36_LPI2C2_IPG_STOP_MODE() volatile
    {
        GPR36 ^= 1u << 11u;
    }

    /**
     * Get GPR36's LPI2C2_STOP_REQ bit.
     *
     * LPI2C2 stop request
     */
    inline bool get_GPR36_LPI2C2_STOP_REQ() volatile
    {
        return GPR36 & (1u << 10u);
    }

    /**
     * Set GPR36's LPI2C2_STOP_REQ bit.
     *
     * LPI2C2 stop request
     */
    inline void set_GPR36_LPI2C2_STOP_REQ() volatile
    {
        GPR36 |= 1u << 10u;
    }

    /**
     * Clear GPR36's LPI2C2_STOP_REQ bit.
     *
     * LPI2C2 stop request
     */
    inline void clear_GPR36_LPI2C2_STOP_REQ() volatile
    {
        GPR36 &= ~(1u << 10u);
    }

    /**
     * Toggle GPR36's LPI2C2_STOP_REQ bit.
     *
     * LPI2C2 stop request
     */
    inline void toggle_GPR36_LPI2C2_STOP_REQ() volatile
    {
        GPR36 ^= 1u << 10u;
    }

    /**
     * Get GPR36's LPI2C2_IPG_DOZE bit.
     *
     * LPI2C2 doze mode
     */
    inline bool get_GPR36_LPI2C2_IPG_DOZE() volatile
    {
        return GPR36 & (1u << 9u);
    }

    /**
     * Set GPR36's LPI2C2_IPG_DOZE bit.
     *
     * LPI2C2 doze mode
     */
    inline void set_GPR36_LPI2C2_IPG_DOZE() volatile
    {
        GPR36 |= 1u << 9u;
    }

    /**
     * Clear GPR36's LPI2C2_IPG_DOZE bit.
     *
     * LPI2C2 doze mode
     */
    inline void clear_GPR36_LPI2C2_IPG_DOZE() volatile
    {
        GPR36 &= ~(1u << 9u);
    }

    /**
     * Toggle GPR36's LPI2C2_IPG_DOZE bit.
     *
     * LPI2C2 doze mode
     */
    inline void toggle_GPR36_LPI2C2_IPG_DOZE() volatile
    {
        GPR36 ^= 1u << 9u;
    }

    /**
     * Get GPR36's LPI2C1_IPG_STOP_MODE bit.
     *
     * LPI2C1 stop mode selection. This bitfield cannot change when
     * LPI2C1_STOP_REQ is asserted.
     */
    inline bool get_GPR36_LPI2C1_IPG_STOP_MODE() volatile
    {
        return GPR36 & (1u << 8u);
    }

    /**
     * Set GPR36's LPI2C1_IPG_STOP_MODE bit.
     *
     * LPI2C1 stop mode selection. This bitfield cannot change when
     * LPI2C1_STOP_REQ is asserted.
     */
    inline void set_GPR36_LPI2C1_IPG_STOP_MODE() volatile
    {
        GPR36 |= 1u << 8u;
    }

    /**
     * Clear GPR36's LPI2C1_IPG_STOP_MODE bit.
     *
     * LPI2C1 stop mode selection. This bitfield cannot change when
     * LPI2C1_STOP_REQ is asserted.
     */
    inline void clear_GPR36_LPI2C1_IPG_STOP_MODE() volatile
    {
        GPR36 &= ~(1u << 8u);
    }

    /**
     * Toggle GPR36's LPI2C1_IPG_STOP_MODE bit.
     *
     * LPI2C1 stop mode selection. This bitfield cannot change when
     * LPI2C1_STOP_REQ is asserted.
     */
    inline void toggle_GPR36_LPI2C1_IPG_STOP_MODE() volatile
    {
        GPR36 ^= 1u << 8u;
    }

    /**
     * Get GPR36's LPI2C1_STOP_REQ bit.
     *
     * LPI2C1 stop request
     */
    inline bool get_GPR36_LPI2C1_STOP_REQ() volatile
    {
        return GPR36 & (1u << 7u);
    }

    /**
     * Set GPR36's LPI2C1_STOP_REQ bit.
     *
     * LPI2C1 stop request
     */
    inline void set_GPR36_LPI2C1_STOP_REQ() volatile
    {
        GPR36 |= 1u << 7u;
    }

    /**
     * Clear GPR36's LPI2C1_STOP_REQ bit.
     *
     * LPI2C1 stop request
     */
    inline void clear_GPR36_LPI2C1_STOP_REQ() volatile
    {
        GPR36 &= ~(1u << 7u);
    }

    /**
     * Toggle GPR36's LPI2C1_STOP_REQ bit.
     *
     * LPI2C1 stop request
     */
    inline void toggle_GPR36_LPI2C1_STOP_REQ() volatile
    {
        GPR36 ^= 1u << 7u;
    }

    /**
     * Get GPR36's LPI2C1_IPG_DOZE bit.
     *
     * LPI2C1 doze mode
     */
    inline bool get_GPR36_LPI2C1_IPG_DOZE() volatile
    {
        return GPR36 & (1u << 6u);
    }

    /**
     * Set GPR36's LPI2C1_IPG_DOZE bit.
     *
     * LPI2C1 doze mode
     */
    inline void set_GPR36_LPI2C1_IPG_DOZE() volatile
    {
        GPR36 |= 1u << 6u;
    }

    /**
     * Clear GPR36's LPI2C1_IPG_DOZE bit.
     *
     * LPI2C1 doze mode
     */
    inline void clear_GPR36_LPI2C1_IPG_DOZE() volatile
    {
        GPR36 &= ~(1u << 6u);
    }

    /**
     * Toggle GPR36's LPI2C1_IPG_DOZE bit.
     *
     * LPI2C1 doze mode
     */
    inline void toggle_GPR36_LPI2C1_IPG_DOZE() volatile
    {
        GPR36 ^= 1u << 6u;
    }

    /**
     * Get GPR36's GPT6_IPG_DOZE bit.
     *
     * GPT6 doze mode
     */
    inline bool get_GPR36_GPT6_IPG_DOZE() volatile
    {
        return GPR36 & (1u << 5u);
    }

    /**
     * Set GPR36's GPT6_IPG_DOZE bit.
     *
     * GPT6 doze mode
     */
    inline void set_GPR36_GPT6_IPG_DOZE() volatile
    {
        GPR36 |= 1u << 5u;
    }

    /**
     * Clear GPR36's GPT6_IPG_DOZE bit.
     *
     * GPT6 doze mode
     */
    inline void clear_GPR36_GPT6_IPG_DOZE() volatile
    {
        GPR36 &= ~(1u << 5u);
    }

    /**
     * Toggle GPR36's GPT6_IPG_DOZE bit.
     *
     * GPT6 doze mode
     */
    inline void toggle_GPR36_GPT6_IPG_DOZE() volatile
    {
        GPR36 ^= 1u << 5u;
    }

    /**
     * Get GPR36's GPT5_IPG_DOZE bit.
     *
     * GPT5 doze mode
     */
    inline bool get_GPR36_GPT5_IPG_DOZE() volatile
    {
        return GPR36 & (1u << 4u);
    }

    /**
     * Set GPR36's GPT5_IPG_DOZE bit.
     *
     * GPT5 doze mode
     */
    inline void set_GPR36_GPT5_IPG_DOZE() volatile
    {
        GPR36 |= 1u << 4u;
    }

    /**
     * Clear GPR36's GPT5_IPG_DOZE bit.
     *
     * GPT5 doze mode
     */
    inline void clear_GPR36_GPT5_IPG_DOZE() volatile
    {
        GPR36 &= ~(1u << 4u);
    }

    /**
     * Toggle GPR36's GPT5_IPG_DOZE bit.
     *
     * GPT5 doze mode
     */
    inline void toggle_GPR36_GPT5_IPG_DOZE() volatile
    {
        GPR36 ^= 1u << 4u;
    }

    /**
     * Get GPR36's GPT4_IPG_DOZE bit.
     *
     * GPT4 doze mode
     */
    inline bool get_GPR36_GPT4_IPG_DOZE() volatile
    {
        return GPR36 & (1u << 3u);
    }

    /**
     * Set GPR36's GPT4_IPG_DOZE bit.
     *
     * GPT4 doze mode
     */
    inline void set_GPR36_GPT4_IPG_DOZE() volatile
    {
        GPR36 |= 1u << 3u;
    }

    /**
     * Clear GPR36's GPT4_IPG_DOZE bit.
     *
     * GPT4 doze mode
     */
    inline void clear_GPR36_GPT4_IPG_DOZE() volatile
    {
        GPR36 &= ~(1u << 3u);
    }

    /**
     * Toggle GPR36's GPT4_IPG_DOZE bit.
     *
     * GPT4 doze mode
     */
    inline void toggle_GPR36_GPT4_IPG_DOZE() volatile
    {
        GPR36 ^= 1u << 3u;
    }

    /**
     * Get GPR36's GPT3_IPG_DOZE bit.
     *
     * GPT3 doze mode
     */
    inline bool get_GPR36_GPT3_IPG_DOZE() volatile
    {
        return GPR36 & (1u << 2u);
    }

    /**
     * Set GPR36's GPT3_IPG_DOZE bit.
     *
     * GPT3 doze mode
     */
    inline void set_GPR36_GPT3_IPG_DOZE() volatile
    {
        GPR36 |= 1u << 2u;
    }

    /**
     * Clear GPR36's GPT3_IPG_DOZE bit.
     *
     * GPT3 doze mode
     */
    inline void clear_GPR36_GPT3_IPG_DOZE() volatile
    {
        GPR36 &= ~(1u << 2u);
    }

    /**
     * Toggle GPR36's GPT3_IPG_DOZE bit.
     *
     * GPT3 doze mode
     */
    inline void toggle_GPR36_GPT3_IPG_DOZE() volatile
    {
        GPR36 ^= 1u << 2u;
    }

    /**
     * Get GPR36's GPT2_IPG_DOZE bit.
     *
     * GPT2 doze mode
     */
    inline bool get_GPR36_GPT2_IPG_DOZE() volatile
    {
        return GPR36 & (1u << 1u);
    }

    /**
     * Set GPR36's GPT2_IPG_DOZE bit.
     *
     * GPT2 doze mode
     */
    inline void set_GPR36_GPT2_IPG_DOZE() volatile
    {
        GPR36 |= 1u << 1u;
    }

    /**
     * Clear GPR36's GPT2_IPG_DOZE bit.
     *
     * GPT2 doze mode
     */
    inline void clear_GPR36_GPT2_IPG_DOZE() volatile
    {
        GPR36 &= ~(1u << 1u);
    }

    /**
     * Toggle GPR36's GPT2_IPG_DOZE bit.
     *
     * GPT2 doze mode
     */
    inline void toggle_GPR36_GPT2_IPG_DOZE() volatile
    {
        GPR36 ^= 1u << 1u;
    }

    /**
     * Get GPR36's GPT1_IPG_DOZE bit.
     *
     * GPT1 doze mode
     */
    inline bool get_GPR36_GPT1_IPG_DOZE() volatile
    {
        return GPR36 & (1u << 0u);
    }

    /**
     * Set GPR36's GPT1_IPG_DOZE bit.
     *
     * GPT1 doze mode
     */
    inline void set_GPR36_GPT1_IPG_DOZE() volatile
    {
        GPR36 |= 1u << 0u;
    }

    /**
     * Clear GPR36's GPT1_IPG_DOZE bit.
     *
     * GPT1 doze mode
     */
    inline void clear_GPR36_GPT1_IPG_DOZE() volatile
    {
        GPR36 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR36's GPT1_IPG_DOZE bit.
     *
     * GPT1 doze mode
     */
    inline void toggle_GPR36_GPT1_IPG_DOZE() volatile
    {
        GPR36 ^= 1u << 0u;
    }

    /**
     * Get all of GPR36's bit fields.
     *
     * (read-write) GPR36 General Purpose Register
     */
    inline void get_GPR36(IOMUXC_LPSR_GPR_GPR36_DWP_LOCK &DWP_LOCK,
                          IOMUXC_LPSR_GPR_GPR36_DWP &DWP,
                          bool &LPSPI1_IPG_STOP_MODE, bool &LPSPI1_STOP_REQ,
                          bool &LPSPI1_IPG_DOZE, bool &LPI2C6_IPG_STOP_MODE,
                          bool &LPI2C6_STOP_REQ, bool &LPI2C6_IPG_DOZE,
                          bool &LPI2C5_IPG_STOP_MODE, bool &LPI2C5_STOP_REQ,
                          bool &LPI2C5_IPG_DOZE, bool &LPI2C4_IPG_STOP_MODE,
                          bool &LPI2C4_STOP_REQ, bool &LPI2C4_IPG_DOZE,
                          bool &LPI2C3_IPG_STOP_MODE, bool &LPI2C3_STOP_REQ,
                          bool &LPI2C3_IPG_DOZE, bool &LPI2C2_IPG_STOP_MODE,
                          bool &LPI2C2_STOP_REQ, bool &LPI2C2_IPG_DOZE,
                          bool &LPI2C1_IPG_STOP_MODE, bool &LPI2C1_STOP_REQ,
                          bool &LPI2C1_IPG_DOZE, bool &GPT6_IPG_DOZE,
                          bool &GPT5_IPG_DOZE, bool &GPT4_IPG_DOZE,
                          bool &GPT3_IPG_DOZE, bool &GPT2_IPG_DOZE,
                          bool &GPT1_IPG_DOZE) volatile
    {
        uint32_t curr = GPR36;

        DWP_LOCK = IOMUXC_LPSR_GPR_GPR36_DWP_LOCK((curr >> 30u) & 0b11u);
        DWP = IOMUXC_LPSR_GPR_GPR36_DWP((curr >> 28u) & 0b11u);
        LPSPI1_IPG_STOP_MODE = curr & (1u << 26u);
        LPSPI1_STOP_REQ = curr & (1u << 25u);
        LPSPI1_IPG_DOZE = curr & (1u << 24u);
        LPI2C6_IPG_STOP_MODE = curr & (1u << 23u);
        LPI2C6_STOP_REQ = curr & (1u << 22u);
        LPI2C6_IPG_DOZE = curr & (1u << 21u);
        LPI2C5_IPG_STOP_MODE = curr & (1u << 20u);
        LPI2C5_STOP_REQ = curr & (1u << 19u);
        LPI2C5_IPG_DOZE = curr & (1u << 18u);
        LPI2C4_IPG_STOP_MODE = curr & (1u << 17u);
        LPI2C4_STOP_REQ = curr & (1u << 16u);
        LPI2C4_IPG_DOZE = curr & (1u << 15u);
        LPI2C3_IPG_STOP_MODE = curr & (1u << 14u);
        LPI2C3_STOP_REQ = curr & (1u << 13u);
        LPI2C3_IPG_DOZE = curr & (1u << 12u);
        LPI2C2_IPG_STOP_MODE = curr & (1u << 11u);
        LPI2C2_STOP_REQ = curr & (1u << 10u);
        LPI2C2_IPG_DOZE = curr & (1u << 9u);
        LPI2C1_IPG_STOP_MODE = curr & (1u << 8u);
        LPI2C1_STOP_REQ = curr & (1u << 7u);
        LPI2C1_IPG_DOZE = curr & (1u << 6u);
        GPT6_IPG_DOZE = curr & (1u << 5u);
        GPT5_IPG_DOZE = curr & (1u << 4u);
        GPT4_IPG_DOZE = curr & (1u << 3u);
        GPT3_IPG_DOZE = curr & (1u << 2u);
        GPT2_IPG_DOZE = curr & (1u << 1u);
        GPT1_IPG_DOZE = curr & (1u << 0u);
    }

    /**
     * Set all of GPR36's bit fields.
     *
     * (read-write) GPR36 General Purpose Register
     */
    inline void set_GPR36(
        IOMUXC_LPSR_GPR_GPR36_DWP_LOCK DWP_LOCK, IOMUXC_LPSR_GPR_GPR36_DWP DWP,
        bool LPSPI1_IPG_STOP_MODE, bool LPSPI1_STOP_REQ, bool LPSPI1_IPG_DOZE,
        bool LPI2C6_IPG_STOP_MODE, bool LPI2C6_STOP_REQ, bool LPI2C6_IPG_DOZE,
        bool LPI2C5_IPG_STOP_MODE, bool LPI2C5_STOP_REQ, bool LPI2C5_IPG_DOZE,
        bool LPI2C4_IPG_STOP_MODE, bool LPI2C4_STOP_REQ, bool LPI2C4_IPG_DOZE,
        bool LPI2C3_IPG_STOP_MODE, bool LPI2C3_STOP_REQ, bool LPI2C3_IPG_DOZE,
        bool LPI2C2_IPG_STOP_MODE, bool LPI2C2_STOP_REQ, bool LPI2C2_IPG_DOZE,
        bool LPI2C1_IPG_STOP_MODE, bool LPI2C1_STOP_REQ, bool LPI2C1_IPG_DOZE,
        bool GPT6_IPG_DOZE, bool GPT5_IPG_DOZE, bool GPT4_IPG_DOZE,
        bool GPT3_IPG_DOZE, bool GPT2_IPG_DOZE, bool GPT1_IPG_DOZE) volatile
    {
        uint32_t curr = GPR36;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 26u);
        curr |= (LPSPI1_IPG_STOP_MODE & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (LPSPI1_STOP_REQ & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (LPSPI1_IPG_DOZE & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (LPI2C6_IPG_STOP_MODE & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (LPI2C6_STOP_REQ & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (LPI2C6_IPG_DOZE & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (LPI2C5_IPG_STOP_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (LPI2C5_STOP_REQ & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (LPI2C5_IPG_DOZE & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (LPI2C4_IPG_STOP_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (LPI2C4_STOP_REQ & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (LPI2C4_IPG_DOZE & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (LPI2C3_IPG_STOP_MODE & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (LPI2C3_STOP_REQ & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (LPI2C3_IPG_DOZE & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (LPI2C2_IPG_STOP_MODE & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (LPI2C2_STOP_REQ & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (LPI2C2_IPG_DOZE & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (LPI2C1_IPG_STOP_MODE & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (LPI2C1_STOP_REQ & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (LPI2C1_IPG_DOZE & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (GPT6_IPG_DOZE & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (GPT5_IPG_DOZE & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (GPT4_IPG_DOZE & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (GPT3_IPG_DOZE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (GPT2_IPG_DOZE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (GPT1_IPG_DOZE & 0b1u) << 0u;

        GPR36 = curr;
    }

    /**
     * Get GPR37's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_GPR_GPR37_DWP_LOCK get_GPR37_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_GPR_GPR37_DWP_LOCK((GPR37 >> 30u) & 0b11u);
    }

    /**
     * Set GPR37's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_GPR37_DWP_LOCK(
        IOMUXC_LPSR_GPR_GPR37_DWP_LOCK value) volatile
    {
        uint32_t curr = GPR37;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        GPR37 = curr;
    }

    /**
     * Get GPR37's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_GPR_GPR37_DWP get_GPR37_DWP() volatile
    {
        return IOMUXC_LPSR_GPR_GPR37_DWP((GPR37 >> 28u) & 0b11u);
    }

    /**
     * Set GPR37's DWP field.
     *
     * Domain write protection
     */
    inline void set_GPR37_DWP(IOMUXC_LPSR_GPR_GPR37_DWP value) volatile
    {
        uint32_t curr = GPR37;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        GPR37 = curr;
    }

    /**
     * Get GPR37's LPUART4_IPG_STOP_MODE bit.
     *
     * LPUART4 stop mode selection. This bitfield cannot change when
     * LPUART4_STOP_REQ is asserted.
     */
    inline bool get_GPR37_LPUART4_IPG_STOP_MODE() volatile
    {
        return GPR37 & (1u << 26u);
    }

    /**
     * Set GPR37's LPUART4_IPG_STOP_MODE bit.
     *
     * LPUART4 stop mode selection. This bitfield cannot change when
     * LPUART4_STOP_REQ is asserted.
     */
    inline void set_GPR37_LPUART4_IPG_STOP_MODE() volatile
    {
        GPR37 |= 1u << 26u;
    }

    /**
     * Clear GPR37's LPUART4_IPG_STOP_MODE bit.
     *
     * LPUART4 stop mode selection. This bitfield cannot change when
     * LPUART4_STOP_REQ is asserted.
     */
    inline void clear_GPR37_LPUART4_IPG_STOP_MODE() volatile
    {
        GPR37 &= ~(1u << 26u);
    }

    /**
     * Toggle GPR37's LPUART4_IPG_STOP_MODE bit.
     *
     * LPUART4 stop mode selection. This bitfield cannot change when
     * LPUART4_STOP_REQ is asserted.
     */
    inline void toggle_GPR37_LPUART4_IPG_STOP_MODE() volatile
    {
        GPR37 ^= 1u << 26u;
    }

    /**
     * Get GPR37's LPUART4_STOP_REQ bit.
     *
     * LPUART4 stop request
     */
    inline bool get_GPR37_LPUART4_STOP_REQ() volatile
    {
        return GPR37 & (1u << 25u);
    }

    /**
     * Set GPR37's LPUART4_STOP_REQ bit.
     *
     * LPUART4 stop request
     */
    inline void set_GPR37_LPUART4_STOP_REQ() volatile
    {
        GPR37 |= 1u << 25u;
    }

    /**
     * Clear GPR37's LPUART4_STOP_REQ bit.
     *
     * LPUART4 stop request
     */
    inline void clear_GPR37_LPUART4_STOP_REQ() volatile
    {
        GPR37 &= ~(1u << 25u);
    }

    /**
     * Toggle GPR37's LPUART4_STOP_REQ bit.
     *
     * LPUART4 stop request
     */
    inline void toggle_GPR37_LPUART4_STOP_REQ() volatile
    {
        GPR37 ^= 1u << 25u;
    }

    /**
     * Get GPR37's LPUART4_IPG_DOZE bit.
     *
     * LPUART4 doze mode
     */
    inline bool get_GPR37_LPUART4_IPG_DOZE() volatile
    {
        return GPR37 & (1u << 24u);
    }

    /**
     * Set GPR37's LPUART4_IPG_DOZE bit.
     *
     * LPUART4 doze mode
     */
    inline void set_GPR37_LPUART4_IPG_DOZE() volatile
    {
        GPR37 |= 1u << 24u;
    }

    /**
     * Clear GPR37's LPUART4_IPG_DOZE bit.
     *
     * LPUART4 doze mode
     */
    inline void clear_GPR37_LPUART4_IPG_DOZE() volatile
    {
        GPR37 &= ~(1u << 24u);
    }

    /**
     * Toggle GPR37's LPUART4_IPG_DOZE bit.
     *
     * LPUART4 doze mode
     */
    inline void toggle_GPR37_LPUART4_IPG_DOZE() volatile
    {
        GPR37 ^= 1u << 24u;
    }

    /**
     * Get GPR37's LPUART3_IPG_STOP_MODE bit.
     *
     * LPUART3 stop mode selection. This bitfield cannot change when
     * LPUART3_STOP_REQ is asserted.
     */
    inline bool get_GPR37_LPUART3_IPG_STOP_MODE() volatile
    {
        return GPR37 & (1u << 23u);
    }

    /**
     * Set GPR37's LPUART3_IPG_STOP_MODE bit.
     *
     * LPUART3 stop mode selection. This bitfield cannot change when
     * LPUART3_STOP_REQ is asserted.
     */
    inline void set_GPR37_LPUART3_IPG_STOP_MODE() volatile
    {
        GPR37 |= 1u << 23u;
    }

    /**
     * Clear GPR37's LPUART3_IPG_STOP_MODE bit.
     *
     * LPUART3 stop mode selection. This bitfield cannot change when
     * LPUART3_STOP_REQ is asserted.
     */
    inline void clear_GPR37_LPUART3_IPG_STOP_MODE() volatile
    {
        GPR37 &= ~(1u << 23u);
    }

    /**
     * Toggle GPR37's LPUART3_IPG_STOP_MODE bit.
     *
     * LPUART3 stop mode selection. This bitfield cannot change when
     * LPUART3_STOP_REQ is asserted.
     */
    inline void toggle_GPR37_LPUART3_IPG_STOP_MODE() volatile
    {
        GPR37 ^= 1u << 23u;
    }

    /**
     * Get GPR37's LPUART3_STOP_REQ bit.
     *
     * LPUART3 stop request
     */
    inline bool get_GPR37_LPUART3_STOP_REQ() volatile
    {
        return GPR37 & (1u << 22u);
    }

    /**
     * Set GPR37's LPUART3_STOP_REQ bit.
     *
     * LPUART3 stop request
     */
    inline void set_GPR37_LPUART3_STOP_REQ() volatile
    {
        GPR37 |= 1u << 22u;
    }

    /**
     * Clear GPR37's LPUART3_STOP_REQ bit.
     *
     * LPUART3 stop request
     */
    inline void clear_GPR37_LPUART3_STOP_REQ() volatile
    {
        GPR37 &= ~(1u << 22u);
    }

    /**
     * Toggle GPR37's LPUART3_STOP_REQ bit.
     *
     * LPUART3 stop request
     */
    inline void toggle_GPR37_LPUART3_STOP_REQ() volatile
    {
        GPR37 ^= 1u << 22u;
    }

    /**
     * Get GPR37's LPUART3_IPG_DOZE bit.
     *
     * LPUART3 doze mode
     */
    inline bool get_GPR37_LPUART3_IPG_DOZE() volatile
    {
        return GPR37 & (1u << 21u);
    }

    /**
     * Set GPR37's LPUART3_IPG_DOZE bit.
     *
     * LPUART3 doze mode
     */
    inline void set_GPR37_LPUART3_IPG_DOZE() volatile
    {
        GPR37 |= 1u << 21u;
    }

    /**
     * Clear GPR37's LPUART3_IPG_DOZE bit.
     *
     * LPUART3 doze mode
     */
    inline void clear_GPR37_LPUART3_IPG_DOZE() volatile
    {
        GPR37 &= ~(1u << 21u);
    }

    /**
     * Toggle GPR37's LPUART3_IPG_DOZE bit.
     *
     * LPUART3 doze mode
     */
    inline void toggle_GPR37_LPUART3_IPG_DOZE() volatile
    {
        GPR37 ^= 1u << 21u;
    }

    /**
     * Get GPR37's LPUART2_IPG_STOP_MODE bit.
     *
     * LPUART2 stop mode selection. This bitfield cannot change when
     * LPUART2_STOP_REQ is asserted.
     */
    inline bool get_GPR37_LPUART2_IPG_STOP_MODE() volatile
    {
        return GPR37 & (1u << 20u);
    }

    /**
     * Set GPR37's LPUART2_IPG_STOP_MODE bit.
     *
     * LPUART2 stop mode selection. This bitfield cannot change when
     * LPUART2_STOP_REQ is asserted.
     */
    inline void set_GPR37_LPUART2_IPG_STOP_MODE() volatile
    {
        GPR37 |= 1u << 20u;
    }

    /**
     * Clear GPR37's LPUART2_IPG_STOP_MODE bit.
     *
     * LPUART2 stop mode selection. This bitfield cannot change when
     * LPUART2_STOP_REQ is asserted.
     */
    inline void clear_GPR37_LPUART2_IPG_STOP_MODE() volatile
    {
        GPR37 &= ~(1u << 20u);
    }

    /**
     * Toggle GPR37's LPUART2_IPG_STOP_MODE bit.
     *
     * LPUART2 stop mode selection. This bitfield cannot change when
     * LPUART2_STOP_REQ is asserted.
     */
    inline void toggle_GPR37_LPUART2_IPG_STOP_MODE() volatile
    {
        GPR37 ^= 1u << 20u;
    }

    /**
     * Get GPR37's LPUART2_STOP_REQ bit.
     *
     * LPUART2 stop request
     */
    inline bool get_GPR37_LPUART2_STOP_REQ() volatile
    {
        return GPR37 & (1u << 19u);
    }

    /**
     * Set GPR37's LPUART2_STOP_REQ bit.
     *
     * LPUART2 stop request
     */
    inline void set_GPR37_LPUART2_STOP_REQ() volatile
    {
        GPR37 |= 1u << 19u;
    }

    /**
     * Clear GPR37's LPUART2_STOP_REQ bit.
     *
     * LPUART2 stop request
     */
    inline void clear_GPR37_LPUART2_STOP_REQ() volatile
    {
        GPR37 &= ~(1u << 19u);
    }

    /**
     * Toggle GPR37's LPUART2_STOP_REQ bit.
     *
     * LPUART2 stop request
     */
    inline void toggle_GPR37_LPUART2_STOP_REQ() volatile
    {
        GPR37 ^= 1u << 19u;
    }

    /**
     * Get GPR37's LPUART2_IPG_DOZE bit.
     *
     * LPUART2 doze mode
     */
    inline bool get_GPR37_LPUART2_IPG_DOZE() volatile
    {
        return GPR37 & (1u << 18u);
    }

    /**
     * Set GPR37's LPUART2_IPG_DOZE bit.
     *
     * LPUART2 doze mode
     */
    inline void set_GPR37_LPUART2_IPG_DOZE() volatile
    {
        GPR37 |= 1u << 18u;
    }

    /**
     * Clear GPR37's LPUART2_IPG_DOZE bit.
     *
     * LPUART2 doze mode
     */
    inline void clear_GPR37_LPUART2_IPG_DOZE() volatile
    {
        GPR37 &= ~(1u << 18u);
    }

    /**
     * Toggle GPR37's LPUART2_IPG_DOZE bit.
     *
     * LPUART2 doze mode
     */
    inline void toggle_GPR37_LPUART2_IPG_DOZE() volatile
    {
        GPR37 ^= 1u << 18u;
    }

    /**
     * Get GPR37's LPUART1_IPG_STOP_MODE bit.
     *
     * LPUART1 stop mode selection. This bitfield cannot change when
     * LPUART1_STOP_REQ is asserted.
     */
    inline bool get_GPR37_LPUART1_IPG_STOP_MODE() volatile
    {
        return GPR37 & (1u << 17u);
    }

    /**
     * Set GPR37's LPUART1_IPG_STOP_MODE bit.
     *
     * LPUART1 stop mode selection. This bitfield cannot change when
     * LPUART1_STOP_REQ is asserted.
     */
    inline void set_GPR37_LPUART1_IPG_STOP_MODE() volatile
    {
        GPR37 |= 1u << 17u;
    }

    /**
     * Clear GPR37's LPUART1_IPG_STOP_MODE bit.
     *
     * LPUART1 stop mode selection. This bitfield cannot change when
     * LPUART1_STOP_REQ is asserted.
     */
    inline void clear_GPR37_LPUART1_IPG_STOP_MODE() volatile
    {
        GPR37 &= ~(1u << 17u);
    }

    /**
     * Toggle GPR37's LPUART1_IPG_STOP_MODE bit.
     *
     * LPUART1 stop mode selection. This bitfield cannot change when
     * LPUART1_STOP_REQ is asserted.
     */
    inline void toggle_GPR37_LPUART1_IPG_STOP_MODE() volatile
    {
        GPR37 ^= 1u << 17u;
    }

    /**
     * Get GPR37's LPUART1_STOP_REQ bit.
     *
     * LPUART1 stop request
     */
    inline bool get_GPR37_LPUART1_STOP_REQ() volatile
    {
        return GPR37 & (1u << 16u);
    }

    /**
     * Set GPR37's LPUART1_STOP_REQ bit.
     *
     * LPUART1 stop request
     */
    inline void set_GPR37_LPUART1_STOP_REQ() volatile
    {
        GPR37 |= 1u << 16u;
    }

    /**
     * Clear GPR37's LPUART1_STOP_REQ bit.
     *
     * LPUART1 stop request
     */
    inline void clear_GPR37_LPUART1_STOP_REQ() volatile
    {
        GPR37 &= ~(1u << 16u);
    }

    /**
     * Toggle GPR37's LPUART1_STOP_REQ bit.
     *
     * LPUART1 stop request
     */
    inline void toggle_GPR37_LPUART1_STOP_REQ() volatile
    {
        GPR37 ^= 1u << 16u;
    }

    /**
     * Get GPR37's LPUART1_IPG_DOZE bit.
     *
     * LPUART1 doze mode
     */
    inline bool get_GPR37_LPUART1_IPG_DOZE() volatile
    {
        return GPR37 & (1u << 15u);
    }

    /**
     * Set GPR37's LPUART1_IPG_DOZE bit.
     *
     * LPUART1 doze mode
     */
    inline void set_GPR37_LPUART1_IPG_DOZE() volatile
    {
        GPR37 |= 1u << 15u;
    }

    /**
     * Clear GPR37's LPUART1_IPG_DOZE bit.
     *
     * LPUART1 doze mode
     */
    inline void clear_GPR37_LPUART1_IPG_DOZE() volatile
    {
        GPR37 &= ~(1u << 15u);
    }

    /**
     * Toggle GPR37's LPUART1_IPG_DOZE bit.
     *
     * LPUART1 doze mode
     */
    inline void toggle_GPR37_LPUART1_IPG_DOZE() volatile
    {
        GPR37 ^= 1u << 15u;
    }

    /**
     * Get GPR37's LPSPI6_IPG_STOP_MODE bit.
     *
     * LPSPI6 stop mode selection. This bitfield cannot change when
     * LPSPI6_STOP_REQ is asserted.
     */
    inline bool get_GPR37_LPSPI6_IPG_STOP_MODE() volatile
    {
        return GPR37 & (1u << 14u);
    }

    /**
     * Set GPR37's LPSPI6_IPG_STOP_MODE bit.
     *
     * LPSPI6 stop mode selection. This bitfield cannot change when
     * LPSPI6_STOP_REQ is asserted.
     */
    inline void set_GPR37_LPSPI6_IPG_STOP_MODE() volatile
    {
        GPR37 |= 1u << 14u;
    }

    /**
     * Clear GPR37's LPSPI6_IPG_STOP_MODE bit.
     *
     * LPSPI6 stop mode selection. This bitfield cannot change when
     * LPSPI6_STOP_REQ is asserted.
     */
    inline void clear_GPR37_LPSPI6_IPG_STOP_MODE() volatile
    {
        GPR37 &= ~(1u << 14u);
    }

    /**
     * Toggle GPR37's LPSPI6_IPG_STOP_MODE bit.
     *
     * LPSPI6 stop mode selection. This bitfield cannot change when
     * LPSPI6_STOP_REQ is asserted.
     */
    inline void toggle_GPR37_LPSPI6_IPG_STOP_MODE() volatile
    {
        GPR37 ^= 1u << 14u;
    }

    /**
     * Get GPR37's LPSPI6_STOP_REQ bit.
     *
     * LPSPI6 stop request
     */
    inline bool get_GPR37_LPSPI6_STOP_REQ() volatile
    {
        return GPR37 & (1u << 13u);
    }

    /**
     * Set GPR37's LPSPI6_STOP_REQ bit.
     *
     * LPSPI6 stop request
     */
    inline void set_GPR37_LPSPI6_STOP_REQ() volatile
    {
        GPR37 |= 1u << 13u;
    }

    /**
     * Clear GPR37's LPSPI6_STOP_REQ bit.
     *
     * LPSPI6 stop request
     */
    inline void clear_GPR37_LPSPI6_STOP_REQ() volatile
    {
        GPR37 &= ~(1u << 13u);
    }

    /**
     * Toggle GPR37's LPSPI6_STOP_REQ bit.
     *
     * LPSPI6 stop request
     */
    inline void toggle_GPR37_LPSPI6_STOP_REQ() volatile
    {
        GPR37 ^= 1u << 13u;
    }

    /**
     * Get GPR37's LPSPI6_IPG_DOZE bit.
     *
     * LPSPI6 doze mode
     */
    inline bool get_GPR37_LPSPI6_IPG_DOZE() volatile
    {
        return GPR37 & (1u << 12u);
    }

    /**
     * Set GPR37's LPSPI6_IPG_DOZE bit.
     *
     * LPSPI6 doze mode
     */
    inline void set_GPR37_LPSPI6_IPG_DOZE() volatile
    {
        GPR37 |= 1u << 12u;
    }

    /**
     * Clear GPR37's LPSPI6_IPG_DOZE bit.
     *
     * LPSPI6 doze mode
     */
    inline void clear_GPR37_LPSPI6_IPG_DOZE() volatile
    {
        GPR37 &= ~(1u << 12u);
    }

    /**
     * Toggle GPR37's LPSPI6_IPG_DOZE bit.
     *
     * LPSPI6 doze mode
     */
    inline void toggle_GPR37_LPSPI6_IPG_DOZE() volatile
    {
        GPR37 ^= 1u << 12u;
    }

    /**
     * Get GPR37's LPSPI5_IPG_STOP_MODE bit.
     *
     * LPSPI5 stop mode selection. This bitfield cannot change when
     * LPSPI5_STOP_REQ is asserted.
     */
    inline bool get_GPR37_LPSPI5_IPG_STOP_MODE() volatile
    {
        return GPR37 & (1u << 11u);
    }

    /**
     * Set GPR37's LPSPI5_IPG_STOP_MODE bit.
     *
     * LPSPI5 stop mode selection. This bitfield cannot change when
     * LPSPI5_STOP_REQ is asserted.
     */
    inline void set_GPR37_LPSPI5_IPG_STOP_MODE() volatile
    {
        GPR37 |= 1u << 11u;
    }

    /**
     * Clear GPR37's LPSPI5_IPG_STOP_MODE bit.
     *
     * LPSPI5 stop mode selection. This bitfield cannot change when
     * LPSPI5_STOP_REQ is asserted.
     */
    inline void clear_GPR37_LPSPI5_IPG_STOP_MODE() volatile
    {
        GPR37 &= ~(1u << 11u);
    }

    /**
     * Toggle GPR37's LPSPI5_IPG_STOP_MODE bit.
     *
     * LPSPI5 stop mode selection. This bitfield cannot change when
     * LPSPI5_STOP_REQ is asserted.
     */
    inline void toggle_GPR37_LPSPI5_IPG_STOP_MODE() volatile
    {
        GPR37 ^= 1u << 11u;
    }

    /**
     * Get GPR37's LPSPI5_STOP_REQ bit.
     *
     * LPSPI5 stop request
     */
    inline bool get_GPR37_LPSPI5_STOP_REQ() volatile
    {
        return GPR37 & (1u << 10u);
    }

    /**
     * Set GPR37's LPSPI5_STOP_REQ bit.
     *
     * LPSPI5 stop request
     */
    inline void set_GPR37_LPSPI5_STOP_REQ() volatile
    {
        GPR37 |= 1u << 10u;
    }

    /**
     * Clear GPR37's LPSPI5_STOP_REQ bit.
     *
     * LPSPI5 stop request
     */
    inline void clear_GPR37_LPSPI5_STOP_REQ() volatile
    {
        GPR37 &= ~(1u << 10u);
    }

    /**
     * Toggle GPR37's LPSPI5_STOP_REQ bit.
     *
     * LPSPI5 stop request
     */
    inline void toggle_GPR37_LPSPI5_STOP_REQ() volatile
    {
        GPR37 ^= 1u << 10u;
    }

    /**
     * Get GPR37's LPSPI5_IPG_DOZE bit.
     *
     * LPSPI5 doze mode
     */
    inline bool get_GPR37_LPSPI5_IPG_DOZE() volatile
    {
        return GPR37 & (1u << 9u);
    }

    /**
     * Set GPR37's LPSPI5_IPG_DOZE bit.
     *
     * LPSPI5 doze mode
     */
    inline void set_GPR37_LPSPI5_IPG_DOZE() volatile
    {
        GPR37 |= 1u << 9u;
    }

    /**
     * Clear GPR37's LPSPI5_IPG_DOZE bit.
     *
     * LPSPI5 doze mode
     */
    inline void clear_GPR37_LPSPI5_IPG_DOZE() volatile
    {
        GPR37 &= ~(1u << 9u);
    }

    /**
     * Toggle GPR37's LPSPI5_IPG_DOZE bit.
     *
     * LPSPI5 doze mode
     */
    inline void toggle_GPR37_LPSPI5_IPG_DOZE() volatile
    {
        GPR37 ^= 1u << 9u;
    }

    /**
     * Get GPR37's LPSPI4_IPG_STOP_MODE bit.
     *
     * LPSPI4 stop mode selection. This bitfield cannot change when
     * LPSPI4_STOP_REQ is asserted.
     */
    inline bool get_GPR37_LPSPI4_IPG_STOP_MODE() volatile
    {
        return GPR37 & (1u << 8u);
    }

    /**
     * Set GPR37's LPSPI4_IPG_STOP_MODE bit.
     *
     * LPSPI4 stop mode selection. This bitfield cannot change when
     * LPSPI4_STOP_REQ is asserted.
     */
    inline void set_GPR37_LPSPI4_IPG_STOP_MODE() volatile
    {
        GPR37 |= 1u << 8u;
    }

    /**
     * Clear GPR37's LPSPI4_IPG_STOP_MODE bit.
     *
     * LPSPI4 stop mode selection. This bitfield cannot change when
     * LPSPI4_STOP_REQ is asserted.
     */
    inline void clear_GPR37_LPSPI4_IPG_STOP_MODE() volatile
    {
        GPR37 &= ~(1u << 8u);
    }

    /**
     * Toggle GPR37's LPSPI4_IPG_STOP_MODE bit.
     *
     * LPSPI4 stop mode selection. This bitfield cannot change when
     * LPSPI4_STOP_REQ is asserted.
     */
    inline void toggle_GPR37_LPSPI4_IPG_STOP_MODE() volatile
    {
        GPR37 ^= 1u << 8u;
    }

    /**
     * Get GPR37's LPSPI4_STOP_REQ bit.
     *
     * LPSPI4 stop request
     */
    inline bool get_GPR37_LPSPI4_STOP_REQ() volatile
    {
        return GPR37 & (1u << 7u);
    }

    /**
     * Set GPR37's LPSPI4_STOP_REQ bit.
     *
     * LPSPI4 stop request
     */
    inline void set_GPR37_LPSPI4_STOP_REQ() volatile
    {
        GPR37 |= 1u << 7u;
    }

    /**
     * Clear GPR37's LPSPI4_STOP_REQ bit.
     *
     * LPSPI4 stop request
     */
    inline void clear_GPR37_LPSPI4_STOP_REQ() volatile
    {
        GPR37 &= ~(1u << 7u);
    }

    /**
     * Toggle GPR37's LPSPI4_STOP_REQ bit.
     *
     * LPSPI4 stop request
     */
    inline void toggle_GPR37_LPSPI4_STOP_REQ() volatile
    {
        GPR37 ^= 1u << 7u;
    }

    /**
     * Get GPR37's LPSPI4_IPG_DOZE bit.
     *
     * LPSPI4 doze mode
     */
    inline bool get_GPR37_LPSPI4_IPG_DOZE() volatile
    {
        return GPR37 & (1u << 6u);
    }

    /**
     * Set GPR37's LPSPI4_IPG_DOZE bit.
     *
     * LPSPI4 doze mode
     */
    inline void set_GPR37_LPSPI4_IPG_DOZE() volatile
    {
        GPR37 |= 1u << 6u;
    }

    /**
     * Clear GPR37's LPSPI4_IPG_DOZE bit.
     *
     * LPSPI4 doze mode
     */
    inline void clear_GPR37_LPSPI4_IPG_DOZE() volatile
    {
        GPR37 &= ~(1u << 6u);
    }

    /**
     * Toggle GPR37's LPSPI4_IPG_DOZE bit.
     *
     * LPSPI4 doze mode
     */
    inline void toggle_GPR37_LPSPI4_IPG_DOZE() volatile
    {
        GPR37 ^= 1u << 6u;
    }

    /**
     * Get GPR37's LPSPI3_IPG_STOP_MODE bit.
     *
     * LPSPI3 stop mode selection. This bitfield cannot change when
     * LPSPI3_STOP_REQ is asserted.
     */
    inline bool get_GPR37_LPSPI3_IPG_STOP_MODE() volatile
    {
        return GPR37 & (1u << 5u);
    }

    /**
     * Set GPR37's LPSPI3_IPG_STOP_MODE bit.
     *
     * LPSPI3 stop mode selection. This bitfield cannot change when
     * LPSPI3_STOP_REQ is asserted.
     */
    inline void set_GPR37_LPSPI3_IPG_STOP_MODE() volatile
    {
        GPR37 |= 1u << 5u;
    }

    /**
     * Clear GPR37's LPSPI3_IPG_STOP_MODE bit.
     *
     * LPSPI3 stop mode selection. This bitfield cannot change when
     * LPSPI3_STOP_REQ is asserted.
     */
    inline void clear_GPR37_LPSPI3_IPG_STOP_MODE() volatile
    {
        GPR37 &= ~(1u << 5u);
    }

    /**
     * Toggle GPR37's LPSPI3_IPG_STOP_MODE bit.
     *
     * LPSPI3 stop mode selection. This bitfield cannot change when
     * LPSPI3_STOP_REQ is asserted.
     */
    inline void toggle_GPR37_LPSPI3_IPG_STOP_MODE() volatile
    {
        GPR37 ^= 1u << 5u;
    }

    /**
     * Get GPR37's LPSPI3_STOP_REQ bit.
     *
     * LPSPI3 stop request
     */
    inline bool get_GPR37_LPSPI3_STOP_REQ() volatile
    {
        return GPR37 & (1u << 4u);
    }

    /**
     * Set GPR37's LPSPI3_STOP_REQ bit.
     *
     * LPSPI3 stop request
     */
    inline void set_GPR37_LPSPI3_STOP_REQ() volatile
    {
        GPR37 |= 1u << 4u;
    }

    /**
     * Clear GPR37's LPSPI3_STOP_REQ bit.
     *
     * LPSPI3 stop request
     */
    inline void clear_GPR37_LPSPI3_STOP_REQ() volatile
    {
        GPR37 &= ~(1u << 4u);
    }

    /**
     * Toggle GPR37's LPSPI3_STOP_REQ bit.
     *
     * LPSPI3 stop request
     */
    inline void toggle_GPR37_LPSPI3_STOP_REQ() volatile
    {
        GPR37 ^= 1u << 4u;
    }

    /**
     * Get GPR37's LPSPI3_IPG_DOZE bit.
     *
     * LPSPI3 doze mode
     */
    inline bool get_GPR37_LPSPI3_IPG_DOZE() volatile
    {
        return GPR37 & (1u << 3u);
    }

    /**
     * Set GPR37's LPSPI3_IPG_DOZE bit.
     *
     * LPSPI3 doze mode
     */
    inline void set_GPR37_LPSPI3_IPG_DOZE() volatile
    {
        GPR37 |= 1u << 3u;
    }

    /**
     * Clear GPR37's LPSPI3_IPG_DOZE bit.
     *
     * LPSPI3 doze mode
     */
    inline void clear_GPR37_LPSPI3_IPG_DOZE() volatile
    {
        GPR37 &= ~(1u << 3u);
    }

    /**
     * Toggle GPR37's LPSPI3_IPG_DOZE bit.
     *
     * LPSPI3 doze mode
     */
    inline void toggle_GPR37_LPSPI3_IPG_DOZE() volatile
    {
        GPR37 ^= 1u << 3u;
    }

    /**
     * Get GPR37's LPSPI2_IPG_STOP_MODE bit.
     *
     * LPSPI2 stop mode selection. This bitfield cannot change when
     * LPSPI2_STOP_REQ is asserted.
     */
    inline bool get_GPR37_LPSPI2_IPG_STOP_MODE() volatile
    {
        return GPR37 & (1u << 2u);
    }

    /**
     * Set GPR37's LPSPI2_IPG_STOP_MODE bit.
     *
     * LPSPI2 stop mode selection. This bitfield cannot change when
     * LPSPI2_STOP_REQ is asserted.
     */
    inline void set_GPR37_LPSPI2_IPG_STOP_MODE() volatile
    {
        GPR37 |= 1u << 2u;
    }

    /**
     * Clear GPR37's LPSPI2_IPG_STOP_MODE bit.
     *
     * LPSPI2 stop mode selection. This bitfield cannot change when
     * LPSPI2_STOP_REQ is asserted.
     */
    inline void clear_GPR37_LPSPI2_IPG_STOP_MODE() volatile
    {
        GPR37 &= ~(1u << 2u);
    }

    /**
     * Toggle GPR37's LPSPI2_IPG_STOP_MODE bit.
     *
     * LPSPI2 stop mode selection. This bitfield cannot change when
     * LPSPI2_STOP_REQ is asserted.
     */
    inline void toggle_GPR37_LPSPI2_IPG_STOP_MODE() volatile
    {
        GPR37 ^= 1u << 2u;
    }

    /**
     * Get GPR37's LPSPI2_STOP_REQ bit.
     *
     * LPSPI2 stop request
     */
    inline bool get_GPR37_LPSPI2_STOP_REQ() volatile
    {
        return GPR37 & (1u << 1u);
    }

    /**
     * Set GPR37's LPSPI2_STOP_REQ bit.
     *
     * LPSPI2 stop request
     */
    inline void set_GPR37_LPSPI2_STOP_REQ() volatile
    {
        GPR37 |= 1u << 1u;
    }

    /**
     * Clear GPR37's LPSPI2_STOP_REQ bit.
     *
     * LPSPI2 stop request
     */
    inline void clear_GPR37_LPSPI2_STOP_REQ() volatile
    {
        GPR37 &= ~(1u << 1u);
    }

    /**
     * Toggle GPR37's LPSPI2_STOP_REQ bit.
     *
     * LPSPI2 stop request
     */
    inline void toggle_GPR37_LPSPI2_STOP_REQ() volatile
    {
        GPR37 ^= 1u << 1u;
    }

    /**
     * Get GPR37's LPSPI2_IPG_DOZE bit.
     *
     * LPSPI2 doze mode
     */
    inline bool get_GPR37_LPSPI2_IPG_DOZE() volatile
    {
        return GPR37 & (1u << 0u);
    }

    /**
     * Set GPR37's LPSPI2_IPG_DOZE bit.
     *
     * LPSPI2 doze mode
     */
    inline void set_GPR37_LPSPI2_IPG_DOZE() volatile
    {
        GPR37 |= 1u << 0u;
    }

    /**
     * Clear GPR37's LPSPI2_IPG_DOZE bit.
     *
     * LPSPI2 doze mode
     */
    inline void clear_GPR37_LPSPI2_IPG_DOZE() volatile
    {
        GPR37 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR37's LPSPI2_IPG_DOZE bit.
     *
     * LPSPI2 doze mode
     */
    inline void toggle_GPR37_LPSPI2_IPG_DOZE() volatile
    {
        GPR37 ^= 1u << 0u;
    }

    /**
     * Get all of GPR37's bit fields.
     *
     * (read-write) GPR37 General Purpose Register
     */
    inline void get_GPR37(IOMUXC_LPSR_GPR_GPR37_DWP_LOCK &DWP_LOCK,
                          IOMUXC_LPSR_GPR_GPR37_DWP &DWP,
                          bool &LPUART4_IPG_STOP_MODE, bool &LPUART4_STOP_REQ,
                          bool &LPUART4_IPG_DOZE, bool &LPUART3_IPG_STOP_MODE,
                          bool &LPUART3_STOP_REQ, bool &LPUART3_IPG_DOZE,
                          bool &LPUART2_IPG_STOP_MODE, bool &LPUART2_STOP_REQ,
                          bool &LPUART2_IPG_DOZE, bool &LPUART1_IPG_STOP_MODE,
                          bool &LPUART1_STOP_REQ, bool &LPUART1_IPG_DOZE,
                          bool &LPSPI6_IPG_STOP_MODE, bool &LPSPI6_STOP_REQ,
                          bool &LPSPI6_IPG_DOZE, bool &LPSPI5_IPG_STOP_MODE,
                          bool &LPSPI5_STOP_REQ, bool &LPSPI5_IPG_DOZE,
                          bool &LPSPI4_IPG_STOP_MODE, bool &LPSPI4_STOP_REQ,
                          bool &LPSPI4_IPG_DOZE, bool &LPSPI3_IPG_STOP_MODE,
                          bool &LPSPI3_STOP_REQ, bool &LPSPI3_IPG_DOZE,
                          bool &LPSPI2_IPG_STOP_MODE, bool &LPSPI2_STOP_REQ,
                          bool &LPSPI2_IPG_DOZE) volatile
    {
        uint32_t curr = GPR37;

        DWP_LOCK = IOMUXC_LPSR_GPR_GPR37_DWP_LOCK((curr >> 30u) & 0b11u);
        DWP = IOMUXC_LPSR_GPR_GPR37_DWP((curr >> 28u) & 0b11u);
        LPUART4_IPG_STOP_MODE = curr & (1u << 26u);
        LPUART4_STOP_REQ = curr & (1u << 25u);
        LPUART4_IPG_DOZE = curr & (1u << 24u);
        LPUART3_IPG_STOP_MODE = curr & (1u << 23u);
        LPUART3_STOP_REQ = curr & (1u << 22u);
        LPUART3_IPG_DOZE = curr & (1u << 21u);
        LPUART2_IPG_STOP_MODE = curr & (1u << 20u);
        LPUART2_STOP_REQ = curr & (1u << 19u);
        LPUART2_IPG_DOZE = curr & (1u << 18u);
        LPUART1_IPG_STOP_MODE = curr & (1u << 17u);
        LPUART1_STOP_REQ = curr & (1u << 16u);
        LPUART1_IPG_DOZE = curr & (1u << 15u);
        LPSPI6_IPG_STOP_MODE = curr & (1u << 14u);
        LPSPI6_STOP_REQ = curr & (1u << 13u);
        LPSPI6_IPG_DOZE = curr & (1u << 12u);
        LPSPI5_IPG_STOP_MODE = curr & (1u << 11u);
        LPSPI5_STOP_REQ = curr & (1u << 10u);
        LPSPI5_IPG_DOZE = curr & (1u << 9u);
        LPSPI4_IPG_STOP_MODE = curr & (1u << 8u);
        LPSPI4_STOP_REQ = curr & (1u << 7u);
        LPSPI4_IPG_DOZE = curr & (1u << 6u);
        LPSPI3_IPG_STOP_MODE = curr & (1u << 5u);
        LPSPI3_STOP_REQ = curr & (1u << 4u);
        LPSPI3_IPG_DOZE = curr & (1u << 3u);
        LPSPI2_IPG_STOP_MODE = curr & (1u << 2u);
        LPSPI2_STOP_REQ = curr & (1u << 1u);
        LPSPI2_IPG_DOZE = curr & (1u << 0u);
    }

    /**
     * Set all of GPR37's bit fields.
     *
     * (read-write) GPR37 General Purpose Register
     */
    inline void set_GPR37(IOMUXC_LPSR_GPR_GPR37_DWP_LOCK DWP_LOCK,
                          IOMUXC_LPSR_GPR_GPR37_DWP DWP,
                          bool LPUART4_IPG_STOP_MODE, bool LPUART4_STOP_REQ,
                          bool LPUART4_IPG_DOZE, bool LPUART3_IPG_STOP_MODE,
                          bool LPUART3_STOP_REQ, bool LPUART3_IPG_DOZE,
                          bool LPUART2_IPG_STOP_MODE, bool LPUART2_STOP_REQ,
                          bool LPUART2_IPG_DOZE, bool LPUART1_IPG_STOP_MODE,
                          bool LPUART1_STOP_REQ, bool LPUART1_IPG_DOZE,
                          bool LPSPI6_IPG_STOP_MODE, bool LPSPI6_STOP_REQ,
                          bool LPSPI6_IPG_DOZE, bool LPSPI5_IPG_STOP_MODE,
                          bool LPSPI5_STOP_REQ, bool LPSPI5_IPG_DOZE,
                          bool LPSPI4_IPG_STOP_MODE, bool LPSPI4_STOP_REQ,
                          bool LPSPI4_IPG_DOZE, bool LPSPI3_IPG_STOP_MODE,
                          bool LPSPI3_STOP_REQ, bool LPSPI3_IPG_DOZE,
                          bool LPSPI2_IPG_STOP_MODE, bool LPSPI2_STOP_REQ,
                          bool LPSPI2_IPG_DOZE) volatile
    {
        uint32_t curr = GPR37;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 26u);
        curr |= (LPUART4_IPG_STOP_MODE & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (LPUART4_STOP_REQ & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (LPUART4_IPG_DOZE & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (LPUART3_IPG_STOP_MODE & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (LPUART3_STOP_REQ & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (LPUART3_IPG_DOZE & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (LPUART2_IPG_STOP_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (LPUART2_STOP_REQ & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (LPUART2_IPG_DOZE & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (LPUART1_IPG_STOP_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (LPUART1_STOP_REQ & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (LPUART1_IPG_DOZE & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (LPSPI6_IPG_STOP_MODE & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (LPSPI6_STOP_REQ & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (LPSPI6_IPG_DOZE & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (LPSPI5_IPG_STOP_MODE & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (LPSPI5_STOP_REQ & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (LPSPI5_IPG_DOZE & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (LPSPI4_IPG_STOP_MODE & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (LPSPI4_STOP_REQ & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (LPSPI4_IPG_DOZE & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (LPSPI3_IPG_STOP_MODE & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (LPSPI3_STOP_REQ & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (LPSPI3_IPG_DOZE & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (LPSPI2_IPG_STOP_MODE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (LPSPI2_STOP_REQ & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (LPSPI2_IPG_DOZE & 0b1u) << 0u;

        GPR37 = curr;
    }

    /**
     * Get GPR38's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_GPR_GPR38_DWP_LOCK get_GPR38_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_GPR_GPR38_DWP_LOCK((GPR38 >> 30u) & 0b11u);
    }

    /**
     * Set GPR38's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_GPR38_DWP_LOCK(
        IOMUXC_LPSR_GPR_GPR38_DWP_LOCK value) volatile
    {
        uint32_t curr = GPR38;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        GPR38 = curr;
    }

    /**
     * Get GPR38's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_GPR_GPR38_DWP get_GPR38_DWP() volatile
    {
        return IOMUXC_LPSR_GPR_GPR38_DWP((GPR38 >> 28u) & 0b11u);
    }

    /**
     * Set GPR38's DWP field.
     *
     * Domain write protection
     */
    inline void set_GPR38_DWP(IOMUXC_LPSR_GPR_GPR38_DWP value) volatile
    {
        uint32_t curr = GPR38;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        GPR38 = curr;
    }

    /**
     * Get GPR38's MIC_IPG_STOP_MODE bit.
     *
     * MIC stop mode selection. This bitfield cannot change when MIC_STOP_REQ
     * is asserted.
     */
    inline bool get_GPR38_MIC_IPG_STOP_MODE() volatile
    {
        return GPR38 & (1u << 26u);
    }

    /**
     * Set GPR38's MIC_IPG_STOP_MODE bit.
     *
     * MIC stop mode selection. This bitfield cannot change when MIC_STOP_REQ
     * is asserted.
     */
    inline void set_GPR38_MIC_IPG_STOP_MODE() volatile
    {
        GPR38 |= 1u << 26u;
    }

    /**
     * Clear GPR38's MIC_IPG_STOP_MODE bit.
     *
     * MIC stop mode selection. This bitfield cannot change when MIC_STOP_REQ
     * is asserted.
     */
    inline void clear_GPR38_MIC_IPG_STOP_MODE() volatile
    {
        GPR38 &= ~(1u << 26u);
    }

    /**
     * Toggle GPR38's MIC_IPG_STOP_MODE bit.
     *
     * MIC stop mode selection. This bitfield cannot change when MIC_STOP_REQ
     * is asserted.
     */
    inline void toggle_GPR38_MIC_IPG_STOP_MODE() volatile
    {
        GPR38 ^= 1u << 26u;
    }

    /**
     * Get GPR38's MIC_STOP_REQ bit.
     *
     * MIC stop request
     */
    inline bool get_GPR38_MIC_STOP_REQ() volatile
    {
        return GPR38 & (1u << 25u);
    }

    /**
     * Set GPR38's MIC_STOP_REQ bit.
     *
     * MIC stop request
     */
    inline void set_GPR38_MIC_STOP_REQ() volatile
    {
        GPR38 |= 1u << 25u;
    }

    /**
     * Clear GPR38's MIC_STOP_REQ bit.
     *
     * MIC stop request
     */
    inline void clear_GPR38_MIC_STOP_REQ() volatile
    {
        GPR38 &= ~(1u << 25u);
    }

    /**
     * Toggle GPR38's MIC_STOP_REQ bit.
     *
     * MIC stop request
     */
    inline void toggle_GPR38_MIC_STOP_REQ() volatile
    {
        GPR38 ^= 1u << 25u;
    }

    /**
     * Get GPR38's MIC_IPG_DOZE bit.
     *
     * MIC doze mode
     */
    inline bool get_GPR38_MIC_IPG_DOZE() volatile
    {
        return GPR38 & (1u << 24u);
    }

    /**
     * Set GPR38's MIC_IPG_DOZE bit.
     *
     * MIC doze mode
     */
    inline void set_GPR38_MIC_IPG_DOZE() volatile
    {
        GPR38 |= 1u << 24u;
    }

    /**
     * Clear GPR38's MIC_IPG_DOZE bit.
     *
     * MIC doze mode
     */
    inline void clear_GPR38_MIC_IPG_DOZE() volatile
    {
        GPR38 &= ~(1u << 24u);
    }

    /**
     * Toggle GPR38's MIC_IPG_DOZE bit.
     *
     * MIC doze mode
     */
    inline void toggle_GPR38_MIC_IPG_DOZE() volatile
    {
        GPR38 ^= 1u << 24u;
    }

    /**
     * Get GPR38's LPUART12_IPG_STOP_MODE bit.
     *
     * LPUART12 stop mode selection. This bitfield cannot change when
     * LPUART12_STOP_REQ is asserted.
     */
    inline bool get_GPR38_LPUART12_IPG_STOP_MODE() volatile
    {
        return GPR38 & (1u << 23u);
    }

    /**
     * Set GPR38's LPUART12_IPG_STOP_MODE bit.
     *
     * LPUART12 stop mode selection. This bitfield cannot change when
     * LPUART12_STOP_REQ is asserted.
     */
    inline void set_GPR38_LPUART12_IPG_STOP_MODE() volatile
    {
        GPR38 |= 1u << 23u;
    }

    /**
     * Clear GPR38's LPUART12_IPG_STOP_MODE bit.
     *
     * LPUART12 stop mode selection. This bitfield cannot change when
     * LPUART12_STOP_REQ is asserted.
     */
    inline void clear_GPR38_LPUART12_IPG_STOP_MODE() volatile
    {
        GPR38 &= ~(1u << 23u);
    }

    /**
     * Toggle GPR38's LPUART12_IPG_STOP_MODE bit.
     *
     * LPUART12 stop mode selection. This bitfield cannot change when
     * LPUART12_STOP_REQ is asserted.
     */
    inline void toggle_GPR38_LPUART12_IPG_STOP_MODE() volatile
    {
        GPR38 ^= 1u << 23u;
    }

    /**
     * Get GPR38's LPUART12_STOP_REQ bit.
     *
     * LPUART12 stop request
     */
    inline bool get_GPR38_LPUART12_STOP_REQ() volatile
    {
        return GPR38 & (1u << 22u);
    }

    /**
     * Set GPR38's LPUART12_STOP_REQ bit.
     *
     * LPUART12 stop request
     */
    inline void set_GPR38_LPUART12_STOP_REQ() volatile
    {
        GPR38 |= 1u << 22u;
    }

    /**
     * Clear GPR38's LPUART12_STOP_REQ bit.
     *
     * LPUART12 stop request
     */
    inline void clear_GPR38_LPUART12_STOP_REQ() volatile
    {
        GPR38 &= ~(1u << 22u);
    }

    /**
     * Toggle GPR38's LPUART12_STOP_REQ bit.
     *
     * LPUART12 stop request
     */
    inline void toggle_GPR38_LPUART12_STOP_REQ() volatile
    {
        GPR38 ^= 1u << 22u;
    }

    /**
     * Get GPR38's LPUART12_IPG_DOZE bit.
     *
     * LPUART12 doze mode
     */
    inline bool get_GPR38_LPUART12_IPG_DOZE() volatile
    {
        return GPR38 & (1u << 21u);
    }

    /**
     * Set GPR38's LPUART12_IPG_DOZE bit.
     *
     * LPUART12 doze mode
     */
    inline void set_GPR38_LPUART12_IPG_DOZE() volatile
    {
        GPR38 |= 1u << 21u;
    }

    /**
     * Clear GPR38's LPUART12_IPG_DOZE bit.
     *
     * LPUART12 doze mode
     */
    inline void clear_GPR38_LPUART12_IPG_DOZE() volatile
    {
        GPR38 &= ~(1u << 21u);
    }

    /**
     * Toggle GPR38's LPUART12_IPG_DOZE bit.
     *
     * LPUART12 doze mode
     */
    inline void toggle_GPR38_LPUART12_IPG_DOZE() volatile
    {
        GPR38 ^= 1u << 21u;
    }

    /**
     * Get GPR38's LPUART11_IPG_STOP_MODE bit.
     *
     * LPUART11 stop mode selection. This bitfield cannot change when
     * LPUART11_STOP_REQ is asserted.
     */
    inline bool get_GPR38_LPUART11_IPG_STOP_MODE() volatile
    {
        return GPR38 & (1u << 20u);
    }

    /**
     * Set GPR38's LPUART11_IPG_STOP_MODE bit.
     *
     * LPUART11 stop mode selection. This bitfield cannot change when
     * LPUART11_STOP_REQ is asserted.
     */
    inline void set_GPR38_LPUART11_IPG_STOP_MODE() volatile
    {
        GPR38 |= 1u << 20u;
    }

    /**
     * Clear GPR38's LPUART11_IPG_STOP_MODE bit.
     *
     * LPUART11 stop mode selection. This bitfield cannot change when
     * LPUART11_STOP_REQ is asserted.
     */
    inline void clear_GPR38_LPUART11_IPG_STOP_MODE() volatile
    {
        GPR38 &= ~(1u << 20u);
    }

    /**
     * Toggle GPR38's LPUART11_IPG_STOP_MODE bit.
     *
     * LPUART11 stop mode selection. This bitfield cannot change when
     * LPUART11_STOP_REQ is asserted.
     */
    inline void toggle_GPR38_LPUART11_IPG_STOP_MODE() volatile
    {
        GPR38 ^= 1u << 20u;
    }

    /**
     * Get GPR38's LPUART11_STOP_REQ bit.
     *
     * LPUART11 stop request
     */
    inline bool get_GPR38_LPUART11_STOP_REQ() volatile
    {
        return GPR38 & (1u << 19u);
    }

    /**
     * Set GPR38's LPUART11_STOP_REQ bit.
     *
     * LPUART11 stop request
     */
    inline void set_GPR38_LPUART11_STOP_REQ() volatile
    {
        GPR38 |= 1u << 19u;
    }

    /**
     * Clear GPR38's LPUART11_STOP_REQ bit.
     *
     * LPUART11 stop request
     */
    inline void clear_GPR38_LPUART11_STOP_REQ() volatile
    {
        GPR38 &= ~(1u << 19u);
    }

    /**
     * Toggle GPR38's LPUART11_STOP_REQ bit.
     *
     * LPUART11 stop request
     */
    inline void toggle_GPR38_LPUART11_STOP_REQ() volatile
    {
        GPR38 ^= 1u << 19u;
    }

    /**
     * Get GPR38's LPUART11_IPG_DOZE bit.
     *
     * LPUART11 doze mode
     */
    inline bool get_GPR38_LPUART11_IPG_DOZE() volatile
    {
        return GPR38 & (1u << 18u);
    }

    /**
     * Set GPR38's LPUART11_IPG_DOZE bit.
     *
     * LPUART11 doze mode
     */
    inline void set_GPR38_LPUART11_IPG_DOZE() volatile
    {
        GPR38 |= 1u << 18u;
    }

    /**
     * Clear GPR38's LPUART11_IPG_DOZE bit.
     *
     * LPUART11 doze mode
     */
    inline void clear_GPR38_LPUART11_IPG_DOZE() volatile
    {
        GPR38 &= ~(1u << 18u);
    }

    /**
     * Toggle GPR38's LPUART11_IPG_DOZE bit.
     *
     * LPUART11 doze mode
     */
    inline void toggle_GPR38_LPUART11_IPG_DOZE() volatile
    {
        GPR38 ^= 1u << 18u;
    }

    /**
     * Get GPR38's LPUART10_IPG_STOP_MODE bit.
     *
     * LPUART10 stop mode selection. This bitfield cannot change when
     * LPUART10_STOP_REQ is asserted.
     */
    inline bool get_GPR38_LPUART10_IPG_STOP_MODE() volatile
    {
        return GPR38 & (1u << 17u);
    }

    /**
     * Set GPR38's LPUART10_IPG_STOP_MODE bit.
     *
     * LPUART10 stop mode selection. This bitfield cannot change when
     * LPUART10_STOP_REQ is asserted.
     */
    inline void set_GPR38_LPUART10_IPG_STOP_MODE() volatile
    {
        GPR38 |= 1u << 17u;
    }

    /**
     * Clear GPR38's LPUART10_IPG_STOP_MODE bit.
     *
     * LPUART10 stop mode selection. This bitfield cannot change when
     * LPUART10_STOP_REQ is asserted.
     */
    inline void clear_GPR38_LPUART10_IPG_STOP_MODE() volatile
    {
        GPR38 &= ~(1u << 17u);
    }

    /**
     * Toggle GPR38's LPUART10_IPG_STOP_MODE bit.
     *
     * LPUART10 stop mode selection. This bitfield cannot change when
     * LPUART10_STOP_REQ is asserted.
     */
    inline void toggle_GPR38_LPUART10_IPG_STOP_MODE() volatile
    {
        GPR38 ^= 1u << 17u;
    }

    /**
     * Get GPR38's LPUART10_STOP_REQ bit.
     *
     * LPUART10 stop request
     */
    inline bool get_GPR38_LPUART10_STOP_REQ() volatile
    {
        return GPR38 & (1u << 16u);
    }

    /**
     * Set GPR38's LPUART10_STOP_REQ bit.
     *
     * LPUART10 stop request
     */
    inline void set_GPR38_LPUART10_STOP_REQ() volatile
    {
        GPR38 |= 1u << 16u;
    }

    /**
     * Clear GPR38's LPUART10_STOP_REQ bit.
     *
     * LPUART10 stop request
     */
    inline void clear_GPR38_LPUART10_STOP_REQ() volatile
    {
        GPR38 &= ~(1u << 16u);
    }

    /**
     * Toggle GPR38's LPUART10_STOP_REQ bit.
     *
     * LPUART10 stop request
     */
    inline void toggle_GPR38_LPUART10_STOP_REQ() volatile
    {
        GPR38 ^= 1u << 16u;
    }

    /**
     * Get GPR38's LPUART10_IPG_DOZE bit.
     *
     * LPUART10 doze mode
     */
    inline bool get_GPR38_LPUART10_IPG_DOZE() volatile
    {
        return GPR38 & (1u << 15u);
    }

    /**
     * Set GPR38's LPUART10_IPG_DOZE bit.
     *
     * LPUART10 doze mode
     */
    inline void set_GPR38_LPUART10_IPG_DOZE() volatile
    {
        GPR38 |= 1u << 15u;
    }

    /**
     * Clear GPR38's LPUART10_IPG_DOZE bit.
     *
     * LPUART10 doze mode
     */
    inline void clear_GPR38_LPUART10_IPG_DOZE() volatile
    {
        GPR38 &= ~(1u << 15u);
    }

    /**
     * Toggle GPR38's LPUART10_IPG_DOZE bit.
     *
     * LPUART10 doze mode
     */
    inline void toggle_GPR38_LPUART10_IPG_DOZE() volatile
    {
        GPR38 ^= 1u << 15u;
    }

    /**
     * Get GPR38's LPUART9_IPG_STOP_MODE bit.
     *
     * LPUART9 stop mode selection. This bitfield cannot change when
     * LPUART9_STOP_REQ is asserted.
     */
    inline bool get_GPR38_LPUART9_IPG_STOP_MODE() volatile
    {
        return GPR38 & (1u << 14u);
    }

    /**
     * Set GPR38's LPUART9_IPG_STOP_MODE bit.
     *
     * LPUART9 stop mode selection. This bitfield cannot change when
     * LPUART9_STOP_REQ is asserted.
     */
    inline void set_GPR38_LPUART9_IPG_STOP_MODE() volatile
    {
        GPR38 |= 1u << 14u;
    }

    /**
     * Clear GPR38's LPUART9_IPG_STOP_MODE bit.
     *
     * LPUART9 stop mode selection. This bitfield cannot change when
     * LPUART9_STOP_REQ is asserted.
     */
    inline void clear_GPR38_LPUART9_IPG_STOP_MODE() volatile
    {
        GPR38 &= ~(1u << 14u);
    }

    /**
     * Toggle GPR38's LPUART9_IPG_STOP_MODE bit.
     *
     * LPUART9 stop mode selection. This bitfield cannot change when
     * LPUART9_STOP_REQ is asserted.
     */
    inline void toggle_GPR38_LPUART9_IPG_STOP_MODE() volatile
    {
        GPR38 ^= 1u << 14u;
    }

    /**
     * Get GPR38's LPUART9_STOP_REQ bit.
     *
     * LPUART9 stop request
     */
    inline bool get_GPR38_LPUART9_STOP_REQ() volatile
    {
        return GPR38 & (1u << 13u);
    }

    /**
     * Set GPR38's LPUART9_STOP_REQ bit.
     *
     * LPUART9 stop request
     */
    inline void set_GPR38_LPUART9_STOP_REQ() volatile
    {
        GPR38 |= 1u << 13u;
    }

    /**
     * Clear GPR38's LPUART9_STOP_REQ bit.
     *
     * LPUART9 stop request
     */
    inline void clear_GPR38_LPUART9_STOP_REQ() volatile
    {
        GPR38 &= ~(1u << 13u);
    }

    /**
     * Toggle GPR38's LPUART9_STOP_REQ bit.
     *
     * LPUART9 stop request
     */
    inline void toggle_GPR38_LPUART9_STOP_REQ() volatile
    {
        GPR38 ^= 1u << 13u;
    }

    /**
     * Get GPR38's LPUART9_IPG_DOZE bit.
     *
     * LPUART9 doze mode
     */
    inline bool get_GPR38_LPUART9_IPG_DOZE() volatile
    {
        return GPR38 & (1u << 12u);
    }

    /**
     * Set GPR38's LPUART9_IPG_DOZE bit.
     *
     * LPUART9 doze mode
     */
    inline void set_GPR38_LPUART9_IPG_DOZE() volatile
    {
        GPR38 |= 1u << 12u;
    }

    /**
     * Clear GPR38's LPUART9_IPG_DOZE bit.
     *
     * LPUART9 doze mode
     */
    inline void clear_GPR38_LPUART9_IPG_DOZE() volatile
    {
        GPR38 &= ~(1u << 12u);
    }

    /**
     * Toggle GPR38's LPUART9_IPG_DOZE bit.
     *
     * LPUART9 doze mode
     */
    inline void toggle_GPR38_LPUART9_IPG_DOZE() volatile
    {
        GPR38 ^= 1u << 12u;
    }

    /**
     * Get GPR38's LPUART8_IPG_STOP_MODE bit.
     *
     * LPUART8 stop mode selection. This bitfield cannot change when
     * LPUART8_STOP_REQ is asserted.
     */
    inline bool get_GPR38_LPUART8_IPG_STOP_MODE() volatile
    {
        return GPR38 & (1u << 11u);
    }

    /**
     * Set GPR38's LPUART8_IPG_STOP_MODE bit.
     *
     * LPUART8 stop mode selection. This bitfield cannot change when
     * LPUART8_STOP_REQ is asserted.
     */
    inline void set_GPR38_LPUART8_IPG_STOP_MODE() volatile
    {
        GPR38 |= 1u << 11u;
    }

    /**
     * Clear GPR38's LPUART8_IPG_STOP_MODE bit.
     *
     * LPUART8 stop mode selection. This bitfield cannot change when
     * LPUART8_STOP_REQ is asserted.
     */
    inline void clear_GPR38_LPUART8_IPG_STOP_MODE() volatile
    {
        GPR38 &= ~(1u << 11u);
    }

    /**
     * Toggle GPR38's LPUART8_IPG_STOP_MODE bit.
     *
     * LPUART8 stop mode selection. This bitfield cannot change when
     * LPUART8_STOP_REQ is asserted.
     */
    inline void toggle_GPR38_LPUART8_IPG_STOP_MODE() volatile
    {
        GPR38 ^= 1u << 11u;
    }

    /**
     * Get GPR38's LPUART8_STOP_REQ bit.
     *
     * LPUART8 stop request
     */
    inline bool get_GPR38_LPUART8_STOP_REQ() volatile
    {
        return GPR38 & (1u << 10u);
    }

    /**
     * Set GPR38's LPUART8_STOP_REQ bit.
     *
     * LPUART8 stop request
     */
    inline void set_GPR38_LPUART8_STOP_REQ() volatile
    {
        GPR38 |= 1u << 10u;
    }

    /**
     * Clear GPR38's LPUART8_STOP_REQ bit.
     *
     * LPUART8 stop request
     */
    inline void clear_GPR38_LPUART8_STOP_REQ() volatile
    {
        GPR38 &= ~(1u << 10u);
    }

    /**
     * Toggle GPR38's LPUART8_STOP_REQ bit.
     *
     * LPUART8 stop request
     */
    inline void toggle_GPR38_LPUART8_STOP_REQ() volatile
    {
        GPR38 ^= 1u << 10u;
    }

    /**
     * Get GPR38's LPUART8_IPG_DOZE bit.
     *
     * LPUART8 doze mode
     */
    inline bool get_GPR38_LPUART8_IPG_DOZE() volatile
    {
        return GPR38 & (1u << 9u);
    }

    /**
     * Set GPR38's LPUART8_IPG_DOZE bit.
     *
     * LPUART8 doze mode
     */
    inline void set_GPR38_LPUART8_IPG_DOZE() volatile
    {
        GPR38 |= 1u << 9u;
    }

    /**
     * Clear GPR38's LPUART8_IPG_DOZE bit.
     *
     * LPUART8 doze mode
     */
    inline void clear_GPR38_LPUART8_IPG_DOZE() volatile
    {
        GPR38 &= ~(1u << 9u);
    }

    /**
     * Toggle GPR38's LPUART8_IPG_DOZE bit.
     *
     * LPUART8 doze mode
     */
    inline void toggle_GPR38_LPUART8_IPG_DOZE() volatile
    {
        GPR38 ^= 1u << 9u;
    }

    /**
     * Get GPR38's LPUART7_IPG_STOP_MODE bit.
     *
     * LPUART7 stop mode selection. This bitfield cannot change when
     * LPUART7_STOP_REQ is asserted.
     */
    inline bool get_GPR38_LPUART7_IPG_STOP_MODE() volatile
    {
        return GPR38 & (1u << 8u);
    }

    /**
     * Set GPR38's LPUART7_IPG_STOP_MODE bit.
     *
     * LPUART7 stop mode selection. This bitfield cannot change when
     * LPUART7_STOP_REQ is asserted.
     */
    inline void set_GPR38_LPUART7_IPG_STOP_MODE() volatile
    {
        GPR38 |= 1u << 8u;
    }

    /**
     * Clear GPR38's LPUART7_IPG_STOP_MODE bit.
     *
     * LPUART7 stop mode selection. This bitfield cannot change when
     * LPUART7_STOP_REQ is asserted.
     */
    inline void clear_GPR38_LPUART7_IPG_STOP_MODE() volatile
    {
        GPR38 &= ~(1u << 8u);
    }

    /**
     * Toggle GPR38's LPUART7_IPG_STOP_MODE bit.
     *
     * LPUART7 stop mode selection. This bitfield cannot change when
     * LPUART7_STOP_REQ is asserted.
     */
    inline void toggle_GPR38_LPUART7_IPG_STOP_MODE() volatile
    {
        GPR38 ^= 1u << 8u;
    }

    /**
     * Get GPR38's LPUART7_STOP_REQ bit.
     *
     * LPUART7 stop request
     */
    inline bool get_GPR38_LPUART7_STOP_REQ() volatile
    {
        return GPR38 & (1u << 7u);
    }

    /**
     * Set GPR38's LPUART7_STOP_REQ bit.
     *
     * LPUART7 stop request
     */
    inline void set_GPR38_LPUART7_STOP_REQ() volatile
    {
        GPR38 |= 1u << 7u;
    }

    /**
     * Clear GPR38's LPUART7_STOP_REQ bit.
     *
     * LPUART7 stop request
     */
    inline void clear_GPR38_LPUART7_STOP_REQ() volatile
    {
        GPR38 &= ~(1u << 7u);
    }

    /**
     * Toggle GPR38's LPUART7_STOP_REQ bit.
     *
     * LPUART7 stop request
     */
    inline void toggle_GPR38_LPUART7_STOP_REQ() volatile
    {
        GPR38 ^= 1u << 7u;
    }

    /**
     * Get GPR38's LPUART7_IPG_DOZE bit.
     *
     * LPUART7 doze mode
     */
    inline bool get_GPR38_LPUART7_IPG_DOZE() volatile
    {
        return GPR38 & (1u << 6u);
    }

    /**
     * Set GPR38's LPUART7_IPG_DOZE bit.
     *
     * LPUART7 doze mode
     */
    inline void set_GPR38_LPUART7_IPG_DOZE() volatile
    {
        GPR38 |= 1u << 6u;
    }

    /**
     * Clear GPR38's LPUART7_IPG_DOZE bit.
     *
     * LPUART7 doze mode
     */
    inline void clear_GPR38_LPUART7_IPG_DOZE() volatile
    {
        GPR38 &= ~(1u << 6u);
    }

    /**
     * Toggle GPR38's LPUART7_IPG_DOZE bit.
     *
     * LPUART7 doze mode
     */
    inline void toggle_GPR38_LPUART7_IPG_DOZE() volatile
    {
        GPR38 ^= 1u << 6u;
    }

    /**
     * Get GPR38's LPUART6_IPG_STOP_MODE bit.
     *
     * LPUART6 stop mode selection. This bitfield cannot change when
     * LPUART6_STOP_REQ is asserted.
     */
    inline bool get_GPR38_LPUART6_IPG_STOP_MODE() volatile
    {
        return GPR38 & (1u << 5u);
    }

    /**
     * Set GPR38's LPUART6_IPG_STOP_MODE bit.
     *
     * LPUART6 stop mode selection. This bitfield cannot change when
     * LPUART6_STOP_REQ is asserted.
     */
    inline void set_GPR38_LPUART6_IPG_STOP_MODE() volatile
    {
        GPR38 |= 1u << 5u;
    }

    /**
     * Clear GPR38's LPUART6_IPG_STOP_MODE bit.
     *
     * LPUART6 stop mode selection. This bitfield cannot change when
     * LPUART6_STOP_REQ is asserted.
     */
    inline void clear_GPR38_LPUART6_IPG_STOP_MODE() volatile
    {
        GPR38 &= ~(1u << 5u);
    }

    /**
     * Toggle GPR38's LPUART6_IPG_STOP_MODE bit.
     *
     * LPUART6 stop mode selection. This bitfield cannot change when
     * LPUART6_STOP_REQ is asserted.
     */
    inline void toggle_GPR38_LPUART6_IPG_STOP_MODE() volatile
    {
        GPR38 ^= 1u << 5u;
    }

    /**
     * Get GPR38's LPUART6_STOP_REQ bit.
     *
     * LPUART6 stop request
     */
    inline bool get_GPR38_LPUART6_STOP_REQ() volatile
    {
        return GPR38 & (1u << 4u);
    }

    /**
     * Set GPR38's LPUART6_STOP_REQ bit.
     *
     * LPUART6 stop request
     */
    inline void set_GPR38_LPUART6_STOP_REQ() volatile
    {
        GPR38 |= 1u << 4u;
    }

    /**
     * Clear GPR38's LPUART6_STOP_REQ bit.
     *
     * LPUART6 stop request
     */
    inline void clear_GPR38_LPUART6_STOP_REQ() volatile
    {
        GPR38 &= ~(1u << 4u);
    }

    /**
     * Toggle GPR38's LPUART6_STOP_REQ bit.
     *
     * LPUART6 stop request
     */
    inline void toggle_GPR38_LPUART6_STOP_REQ() volatile
    {
        GPR38 ^= 1u << 4u;
    }

    /**
     * Get GPR38's LPUART6_IPG_DOZE bit.
     *
     * LPUART6 doze mode
     */
    inline bool get_GPR38_LPUART6_IPG_DOZE() volatile
    {
        return GPR38 & (1u << 3u);
    }

    /**
     * Set GPR38's LPUART6_IPG_DOZE bit.
     *
     * LPUART6 doze mode
     */
    inline void set_GPR38_LPUART6_IPG_DOZE() volatile
    {
        GPR38 |= 1u << 3u;
    }

    /**
     * Clear GPR38's LPUART6_IPG_DOZE bit.
     *
     * LPUART6 doze mode
     */
    inline void clear_GPR38_LPUART6_IPG_DOZE() volatile
    {
        GPR38 &= ~(1u << 3u);
    }

    /**
     * Toggle GPR38's LPUART6_IPG_DOZE bit.
     *
     * LPUART6 doze mode
     */
    inline void toggle_GPR38_LPUART6_IPG_DOZE() volatile
    {
        GPR38 ^= 1u << 3u;
    }

    /**
     * Get GPR38's LPUART5_IPG_STOP_MODE bit.
     *
     * LPUART5 stop mode selection. This bitfield cannot change when
     * LPUART5_STOP_REQ is asserted.
     */
    inline bool get_GPR38_LPUART5_IPG_STOP_MODE() volatile
    {
        return GPR38 & (1u << 2u);
    }

    /**
     * Set GPR38's LPUART5_IPG_STOP_MODE bit.
     *
     * LPUART5 stop mode selection. This bitfield cannot change when
     * LPUART5_STOP_REQ is asserted.
     */
    inline void set_GPR38_LPUART5_IPG_STOP_MODE() volatile
    {
        GPR38 |= 1u << 2u;
    }

    /**
     * Clear GPR38's LPUART5_IPG_STOP_MODE bit.
     *
     * LPUART5 stop mode selection. This bitfield cannot change when
     * LPUART5_STOP_REQ is asserted.
     */
    inline void clear_GPR38_LPUART5_IPG_STOP_MODE() volatile
    {
        GPR38 &= ~(1u << 2u);
    }

    /**
     * Toggle GPR38's LPUART5_IPG_STOP_MODE bit.
     *
     * LPUART5 stop mode selection. This bitfield cannot change when
     * LPUART5_STOP_REQ is asserted.
     */
    inline void toggle_GPR38_LPUART5_IPG_STOP_MODE() volatile
    {
        GPR38 ^= 1u << 2u;
    }

    /**
     * Get GPR38's LPUART5_STOP_REQ bit.
     *
     * LPUART5 stop request
     */
    inline bool get_GPR38_LPUART5_STOP_REQ() volatile
    {
        return GPR38 & (1u << 1u);
    }

    /**
     * Set GPR38's LPUART5_STOP_REQ bit.
     *
     * LPUART5 stop request
     */
    inline void set_GPR38_LPUART5_STOP_REQ() volatile
    {
        GPR38 |= 1u << 1u;
    }

    /**
     * Clear GPR38's LPUART5_STOP_REQ bit.
     *
     * LPUART5 stop request
     */
    inline void clear_GPR38_LPUART5_STOP_REQ() volatile
    {
        GPR38 &= ~(1u << 1u);
    }

    /**
     * Toggle GPR38's LPUART5_STOP_REQ bit.
     *
     * LPUART5 stop request
     */
    inline void toggle_GPR38_LPUART5_STOP_REQ() volatile
    {
        GPR38 ^= 1u << 1u;
    }

    /**
     * Get GPR38's LPUART5_IPG_DOZE bit.
     *
     * LPUART5 doze mode
     */
    inline bool get_GPR38_LPUART5_IPG_DOZE() volatile
    {
        return GPR38 & (1u << 0u);
    }

    /**
     * Set GPR38's LPUART5_IPG_DOZE bit.
     *
     * LPUART5 doze mode
     */
    inline void set_GPR38_LPUART5_IPG_DOZE() volatile
    {
        GPR38 |= 1u << 0u;
    }

    /**
     * Clear GPR38's LPUART5_IPG_DOZE bit.
     *
     * LPUART5 doze mode
     */
    inline void clear_GPR38_LPUART5_IPG_DOZE() volatile
    {
        GPR38 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR38's LPUART5_IPG_DOZE bit.
     *
     * LPUART5 doze mode
     */
    inline void toggle_GPR38_LPUART5_IPG_DOZE() volatile
    {
        GPR38 ^= 1u << 0u;
    }

    /**
     * Get all of GPR38's bit fields.
     *
     * (read-write) GPR38 General Purpose Register
     */
    inline void get_GPR38(IOMUXC_LPSR_GPR_GPR38_DWP_LOCK &DWP_LOCK,
                          IOMUXC_LPSR_GPR_GPR38_DWP &DWP,
                          bool &MIC_IPG_STOP_MODE, bool &MIC_STOP_REQ,
                          bool &MIC_IPG_DOZE, bool &LPUART12_IPG_STOP_MODE,
                          bool &LPUART12_STOP_REQ, bool &LPUART12_IPG_DOZE,
                          bool &LPUART11_IPG_STOP_MODE,
                          bool &LPUART11_STOP_REQ, bool &LPUART11_IPG_DOZE,
                          bool &LPUART10_IPG_STOP_MODE,
                          bool &LPUART10_STOP_REQ, bool &LPUART10_IPG_DOZE,
                          bool &LPUART9_IPG_STOP_MODE, bool &LPUART9_STOP_REQ,
                          bool &LPUART9_IPG_DOZE, bool &LPUART8_IPG_STOP_MODE,
                          bool &LPUART8_STOP_REQ, bool &LPUART8_IPG_DOZE,
                          bool &LPUART7_IPG_STOP_MODE, bool &LPUART7_STOP_REQ,
                          bool &LPUART7_IPG_DOZE, bool &LPUART6_IPG_STOP_MODE,
                          bool &LPUART6_STOP_REQ, bool &LPUART6_IPG_DOZE,
                          bool &LPUART5_IPG_STOP_MODE, bool &LPUART5_STOP_REQ,
                          bool &LPUART5_IPG_DOZE) volatile
    {
        uint32_t curr = GPR38;

        DWP_LOCK = IOMUXC_LPSR_GPR_GPR38_DWP_LOCK((curr >> 30u) & 0b11u);
        DWP = IOMUXC_LPSR_GPR_GPR38_DWP((curr >> 28u) & 0b11u);
        MIC_IPG_STOP_MODE = curr & (1u << 26u);
        MIC_STOP_REQ = curr & (1u << 25u);
        MIC_IPG_DOZE = curr & (1u << 24u);
        LPUART12_IPG_STOP_MODE = curr & (1u << 23u);
        LPUART12_STOP_REQ = curr & (1u << 22u);
        LPUART12_IPG_DOZE = curr & (1u << 21u);
        LPUART11_IPG_STOP_MODE = curr & (1u << 20u);
        LPUART11_STOP_REQ = curr & (1u << 19u);
        LPUART11_IPG_DOZE = curr & (1u << 18u);
        LPUART10_IPG_STOP_MODE = curr & (1u << 17u);
        LPUART10_STOP_REQ = curr & (1u << 16u);
        LPUART10_IPG_DOZE = curr & (1u << 15u);
        LPUART9_IPG_STOP_MODE = curr & (1u << 14u);
        LPUART9_STOP_REQ = curr & (1u << 13u);
        LPUART9_IPG_DOZE = curr & (1u << 12u);
        LPUART8_IPG_STOP_MODE = curr & (1u << 11u);
        LPUART8_STOP_REQ = curr & (1u << 10u);
        LPUART8_IPG_DOZE = curr & (1u << 9u);
        LPUART7_IPG_STOP_MODE = curr & (1u << 8u);
        LPUART7_STOP_REQ = curr & (1u << 7u);
        LPUART7_IPG_DOZE = curr & (1u << 6u);
        LPUART6_IPG_STOP_MODE = curr & (1u << 5u);
        LPUART6_STOP_REQ = curr & (1u << 4u);
        LPUART6_IPG_DOZE = curr & (1u << 3u);
        LPUART5_IPG_STOP_MODE = curr & (1u << 2u);
        LPUART5_STOP_REQ = curr & (1u << 1u);
        LPUART5_IPG_DOZE = curr & (1u << 0u);
    }

    /**
     * Set all of GPR38's bit fields.
     *
     * (read-write) GPR38 General Purpose Register
     */
    inline void set_GPR38(IOMUXC_LPSR_GPR_GPR38_DWP_LOCK DWP_LOCK,
                          IOMUXC_LPSR_GPR_GPR38_DWP DWP,
                          bool MIC_IPG_STOP_MODE, bool MIC_STOP_REQ,
                          bool MIC_IPG_DOZE, bool LPUART12_IPG_STOP_MODE,
                          bool LPUART12_STOP_REQ, bool LPUART12_IPG_DOZE,
                          bool LPUART11_IPG_STOP_MODE, bool LPUART11_STOP_REQ,
                          bool LPUART11_IPG_DOZE, bool LPUART10_IPG_STOP_MODE,
                          bool LPUART10_STOP_REQ, bool LPUART10_IPG_DOZE,
                          bool LPUART9_IPG_STOP_MODE, bool LPUART9_STOP_REQ,
                          bool LPUART9_IPG_DOZE, bool LPUART8_IPG_STOP_MODE,
                          bool LPUART8_STOP_REQ, bool LPUART8_IPG_DOZE,
                          bool LPUART7_IPG_STOP_MODE, bool LPUART7_STOP_REQ,
                          bool LPUART7_IPG_DOZE, bool LPUART6_IPG_STOP_MODE,
                          bool LPUART6_STOP_REQ, bool LPUART6_IPG_DOZE,
                          bool LPUART5_IPG_STOP_MODE, bool LPUART5_STOP_REQ,
                          bool LPUART5_IPG_DOZE) volatile
    {
        uint32_t curr = GPR38;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 26u);
        curr |= (MIC_IPG_STOP_MODE & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (MIC_STOP_REQ & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (MIC_IPG_DOZE & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (LPUART12_IPG_STOP_MODE & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (LPUART12_STOP_REQ & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (LPUART12_IPG_DOZE & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (LPUART11_IPG_STOP_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (LPUART11_STOP_REQ & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (LPUART11_IPG_DOZE & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (LPUART10_IPG_STOP_MODE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (LPUART10_STOP_REQ & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (LPUART10_IPG_DOZE & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (LPUART9_IPG_STOP_MODE & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (LPUART9_STOP_REQ & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (LPUART9_IPG_DOZE & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (LPUART8_IPG_STOP_MODE & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (LPUART8_STOP_REQ & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (LPUART8_IPG_DOZE & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (LPUART7_IPG_STOP_MODE & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (LPUART7_STOP_REQ & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (LPUART7_IPG_DOZE & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (LPUART6_IPG_STOP_MODE & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (LPUART6_STOP_REQ & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (LPUART6_IPG_DOZE & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (LPUART5_IPG_STOP_MODE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (LPUART5_STOP_REQ & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (LPUART5_IPG_DOZE & 0b1u) << 0u;

        GPR38 = curr;
    }

    /**
     * Get GPR39's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_LPSR_GPR_GPR39_DWP_LOCK get_GPR39_DWP_LOCK() volatile
    {
        return IOMUXC_LPSR_GPR_GPR39_DWP_LOCK((GPR39 >> 30u) & 0b11u);
    }

    /**
     * Set GPR39's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_GPR39_DWP_LOCK(
        IOMUXC_LPSR_GPR_GPR39_DWP_LOCK value) volatile
    {
        uint32_t curr = GPR39;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        GPR39 = curr;
    }

    /**
     * Get GPR39's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_LPSR_GPR_GPR39_DWP get_GPR39_DWP() volatile
    {
        return IOMUXC_LPSR_GPR_GPR39_DWP((GPR39 >> 28u) & 0b11u);
    }

    /**
     * Set GPR39's DWP field.
     *
     * Domain write protection
     */
    inline void set_GPR39_DWP(IOMUXC_LPSR_GPR_GPR39_DWP value) volatile
    {
        uint32_t curr = GPR39;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        GPR39 = curr;
    }

    /**
     * Get GPR39's FLEXIO2_STOP_REQ_PER bit.
     *
     * FLEXIO2 peripheral clock domain stop request
     */
    inline bool get_GPR39_FLEXIO2_STOP_REQ_PER() volatile
    {
        return GPR39 & (1u << 17u);
    }

    /**
     * Set GPR39's FLEXIO2_STOP_REQ_PER bit.
     *
     * FLEXIO2 peripheral clock domain stop request
     */
    inline void set_GPR39_FLEXIO2_STOP_REQ_PER() volatile
    {
        GPR39 |= 1u << 17u;
    }

    /**
     * Clear GPR39's FLEXIO2_STOP_REQ_PER bit.
     *
     * FLEXIO2 peripheral clock domain stop request
     */
    inline void clear_GPR39_FLEXIO2_STOP_REQ_PER() volatile
    {
        GPR39 &= ~(1u << 17u);
    }

    /**
     * Toggle GPR39's FLEXIO2_STOP_REQ_PER bit.
     *
     * FLEXIO2 peripheral clock domain stop request
     */
    inline void toggle_GPR39_FLEXIO2_STOP_REQ_PER() volatile
    {
        GPR39 ^= 1u << 17u;
    }

    /**
     * Get GPR39's FLEXIO2_STOP_REQ_BUS bit.
     *
     * FLEXIO2 bus clock domain stop request
     */
    inline bool get_GPR39_FLEXIO2_STOP_REQ_BUS() volatile
    {
        return GPR39 & (1u << 16u);
    }

    /**
     * Set GPR39's FLEXIO2_STOP_REQ_BUS bit.
     *
     * FLEXIO2 bus clock domain stop request
     */
    inline void set_GPR39_FLEXIO2_STOP_REQ_BUS() volatile
    {
        GPR39 |= 1u << 16u;
    }

    /**
     * Clear GPR39's FLEXIO2_STOP_REQ_BUS bit.
     *
     * FLEXIO2 bus clock domain stop request
     */
    inline void clear_GPR39_FLEXIO2_STOP_REQ_BUS() volatile
    {
        GPR39 &= ~(1u << 16u);
    }

    /**
     * Toggle GPR39's FLEXIO2_STOP_REQ_BUS bit.
     *
     * FLEXIO2 bus clock domain stop request
     */
    inline void toggle_GPR39_FLEXIO2_STOP_REQ_BUS() volatile
    {
        GPR39 ^= 1u << 16u;
    }

    /**
     * Get GPR39's FLEXIO1_STOP_REQ_PER bit.
     *
     * FLEXIO1 peripheral clock domain stop request
     */
    inline bool get_GPR39_FLEXIO1_STOP_REQ_PER() volatile
    {
        return GPR39 & (1u << 15u);
    }

    /**
     * Set GPR39's FLEXIO1_STOP_REQ_PER bit.
     *
     * FLEXIO1 peripheral clock domain stop request
     */
    inline void set_GPR39_FLEXIO1_STOP_REQ_PER() volatile
    {
        GPR39 |= 1u << 15u;
    }

    /**
     * Clear GPR39's FLEXIO1_STOP_REQ_PER bit.
     *
     * FLEXIO1 peripheral clock domain stop request
     */
    inline void clear_GPR39_FLEXIO1_STOP_REQ_PER() volatile
    {
        GPR39 &= ~(1u << 15u);
    }

    /**
     * Toggle GPR39's FLEXIO1_STOP_REQ_PER bit.
     *
     * FLEXIO1 peripheral clock domain stop request
     */
    inline void toggle_GPR39_FLEXIO1_STOP_REQ_PER() volatile
    {
        GPR39 ^= 1u << 15u;
    }

    /**
     * Get GPR39's FLEXIO1_STOP_REQ_BUS bit.
     *
     * FLEXIO1 bus clock domain stop request
     */
    inline bool get_GPR39_FLEXIO1_STOP_REQ_BUS() volatile
    {
        return GPR39 & (1u << 14u);
    }

    /**
     * Set GPR39's FLEXIO1_STOP_REQ_BUS bit.
     *
     * FLEXIO1 bus clock domain stop request
     */
    inline void set_GPR39_FLEXIO1_STOP_REQ_BUS() volatile
    {
        GPR39 |= 1u << 14u;
    }

    /**
     * Clear GPR39's FLEXIO1_STOP_REQ_BUS bit.
     *
     * FLEXIO1 bus clock domain stop request
     */
    inline void clear_GPR39_FLEXIO1_STOP_REQ_BUS() volatile
    {
        GPR39 &= ~(1u << 14u);
    }

    /**
     * Toggle GPR39's FLEXIO1_STOP_REQ_BUS bit.
     *
     * FLEXIO1 bus clock domain stop request
     */
    inline void toggle_GPR39_FLEXIO1_STOP_REQ_BUS() volatile
    {
        GPR39 ^= 1u << 14u;
    }

    /**
     * Get GPR39's SAI4_STOP_REQ bit.
     *
     * SAI4 stop request
     */
    inline bool get_GPR39_SAI4_STOP_REQ() volatile
    {
        return GPR39 & (1u << 13u);
    }

    /**
     * Set GPR39's SAI4_STOP_REQ bit.
     *
     * SAI4 stop request
     */
    inline void set_GPR39_SAI4_STOP_REQ() volatile
    {
        GPR39 |= 1u << 13u;
    }

    /**
     * Clear GPR39's SAI4_STOP_REQ bit.
     *
     * SAI4 stop request
     */
    inline void clear_GPR39_SAI4_STOP_REQ() volatile
    {
        GPR39 &= ~(1u << 13u);
    }

    /**
     * Toggle GPR39's SAI4_STOP_REQ bit.
     *
     * SAI4 stop request
     */
    inline void toggle_GPR39_SAI4_STOP_REQ() volatile
    {
        GPR39 ^= 1u << 13u;
    }

    /**
     * Get GPR39's SAI3_STOP_REQ bit.
     *
     * SAI3 stop request
     */
    inline bool get_GPR39_SAI3_STOP_REQ() volatile
    {
        return GPR39 & (1u << 12u);
    }

    /**
     * Set GPR39's SAI3_STOP_REQ bit.
     *
     * SAI3 stop request
     */
    inline void set_GPR39_SAI3_STOP_REQ() volatile
    {
        GPR39 |= 1u << 12u;
    }

    /**
     * Clear GPR39's SAI3_STOP_REQ bit.
     *
     * SAI3 stop request
     */
    inline void clear_GPR39_SAI3_STOP_REQ() volatile
    {
        GPR39 &= ~(1u << 12u);
    }

    /**
     * Toggle GPR39's SAI3_STOP_REQ bit.
     *
     * SAI3 stop request
     */
    inline void toggle_GPR39_SAI3_STOP_REQ() volatile
    {
        GPR39 ^= 1u << 12u;
    }

    /**
     * Get GPR39's SAI2_STOP_REQ bit.
     *
     * SAI2 stop request
     */
    inline bool get_GPR39_SAI2_STOP_REQ() volatile
    {
        return GPR39 & (1u << 11u);
    }

    /**
     * Set GPR39's SAI2_STOP_REQ bit.
     *
     * SAI2 stop request
     */
    inline void set_GPR39_SAI2_STOP_REQ() volatile
    {
        GPR39 |= 1u << 11u;
    }

    /**
     * Clear GPR39's SAI2_STOP_REQ bit.
     *
     * SAI2 stop request
     */
    inline void clear_GPR39_SAI2_STOP_REQ() volatile
    {
        GPR39 &= ~(1u << 11u);
    }

    /**
     * Toggle GPR39's SAI2_STOP_REQ bit.
     *
     * SAI2 stop request
     */
    inline void toggle_GPR39_SAI2_STOP_REQ() volatile
    {
        GPR39 ^= 1u << 11u;
    }

    /**
     * Get GPR39's SAI1_STOP_REQ bit.
     *
     * SAI1 stop request
     */
    inline bool get_GPR39_SAI1_STOP_REQ() volatile
    {
        return GPR39 & (1u << 10u);
    }

    /**
     * Set GPR39's SAI1_STOP_REQ bit.
     *
     * SAI1 stop request
     */
    inline void set_GPR39_SAI1_STOP_REQ() volatile
    {
        GPR39 |= 1u << 10u;
    }

    /**
     * Clear GPR39's SAI1_STOP_REQ bit.
     *
     * SAI1 stop request
     */
    inline void clear_GPR39_SAI1_STOP_REQ() volatile
    {
        GPR39 &= ~(1u << 10u);
    }

    /**
     * Toggle GPR39's SAI1_STOP_REQ bit.
     *
     * SAI1 stop request
     */
    inline void toggle_GPR39_SAI1_STOP_REQ() volatile
    {
        GPR39 ^= 1u << 10u;
    }

    /**
     * Get GPR39's WDOG2_IPG_DOZE bit.
     *
     * WDOG2 doze mode
     */
    inline bool get_GPR39_WDOG2_IPG_DOZE() volatile
    {
        return GPR39 & (1u << 9u);
    }

    /**
     * Set GPR39's WDOG2_IPG_DOZE bit.
     *
     * WDOG2 doze mode
     */
    inline void set_GPR39_WDOG2_IPG_DOZE() volatile
    {
        GPR39 |= 1u << 9u;
    }

    /**
     * Clear GPR39's WDOG2_IPG_DOZE bit.
     *
     * WDOG2 doze mode
     */
    inline void clear_GPR39_WDOG2_IPG_DOZE() volatile
    {
        GPR39 &= ~(1u << 9u);
    }

    /**
     * Toggle GPR39's WDOG2_IPG_DOZE bit.
     *
     * WDOG2 doze mode
     */
    inline void toggle_GPR39_WDOG2_IPG_DOZE() volatile
    {
        GPR39 ^= 1u << 9u;
    }

    /**
     * Get GPR39's WDOG1_IPG_DOZE bit.
     *
     * WDOG1 doze mode
     */
    inline bool get_GPR39_WDOG1_IPG_DOZE() volatile
    {
        return GPR39 & (1u << 8u);
    }

    /**
     * Set GPR39's WDOG1_IPG_DOZE bit.
     *
     * WDOG1 doze mode
     */
    inline void set_GPR39_WDOG1_IPG_DOZE() volatile
    {
        GPR39 |= 1u << 8u;
    }

    /**
     * Clear GPR39's WDOG1_IPG_DOZE bit.
     *
     * WDOG1 doze mode
     */
    inline void clear_GPR39_WDOG1_IPG_DOZE() volatile
    {
        GPR39 &= ~(1u << 8u);
    }

    /**
     * Toggle GPR39's WDOG1_IPG_DOZE bit.
     *
     * WDOG1 doze mode
     */
    inline void toggle_GPR39_WDOG1_IPG_DOZE() volatile
    {
        GPR39 ^= 1u << 8u;
    }

    /**
     * Get GPR39's SNVS_HP_STOP_REQ bit.
     *
     * SNVS_HP stop request
     */
    inline bool get_GPR39_SNVS_HP_STOP_REQ() volatile
    {
        return GPR39 & (1u << 7u);
    }

    /**
     * Set GPR39's SNVS_HP_STOP_REQ bit.
     *
     * SNVS_HP stop request
     */
    inline void set_GPR39_SNVS_HP_STOP_REQ() volatile
    {
        GPR39 |= 1u << 7u;
    }

    /**
     * Clear GPR39's SNVS_HP_STOP_REQ bit.
     *
     * SNVS_HP stop request
     */
    inline void clear_GPR39_SNVS_HP_STOP_REQ() volatile
    {
        GPR39 &= ~(1u << 7u);
    }

    /**
     * Toggle GPR39's SNVS_HP_STOP_REQ bit.
     *
     * SNVS_HP stop request
     */
    inline void toggle_GPR39_SNVS_HP_STOP_REQ() volatile
    {
        GPR39 ^= 1u << 7u;
    }

    /**
     * Get GPR39's SNVS_HP_IPG_DOZE bit.
     *
     * SNVS_HP doze mode
     */
    inline bool get_GPR39_SNVS_HP_IPG_DOZE() volatile
    {
        return GPR39 & (1u << 6u);
    }

    /**
     * Set GPR39's SNVS_HP_IPG_DOZE bit.
     *
     * SNVS_HP doze mode
     */
    inline void set_GPR39_SNVS_HP_IPG_DOZE() volatile
    {
        GPR39 |= 1u << 6u;
    }

    /**
     * Clear GPR39's SNVS_HP_IPG_DOZE bit.
     *
     * SNVS_HP doze mode
     */
    inline void clear_GPR39_SNVS_HP_IPG_DOZE() volatile
    {
        GPR39 &= ~(1u << 6u);
    }

    /**
     * Toggle GPR39's SNVS_HP_IPG_DOZE bit.
     *
     * SNVS_HP doze mode
     */
    inline void toggle_GPR39_SNVS_HP_IPG_DOZE() volatile
    {
        GPR39 ^= 1u << 6u;
    }

    /**
     * Get GPR39's SIM2_IPG_DOZE bit.
     *
     * SIM2 doze mode
     */
    inline bool get_GPR39_SIM2_IPG_DOZE() volatile
    {
        return GPR39 & (1u << 5u);
    }

    /**
     * Set GPR39's SIM2_IPG_DOZE bit.
     *
     * SIM2 doze mode
     */
    inline void set_GPR39_SIM2_IPG_DOZE() volatile
    {
        GPR39 |= 1u << 5u;
    }

    /**
     * Clear GPR39's SIM2_IPG_DOZE bit.
     *
     * SIM2 doze mode
     */
    inline void clear_GPR39_SIM2_IPG_DOZE() volatile
    {
        GPR39 &= ~(1u << 5u);
    }

    /**
     * Toggle GPR39's SIM2_IPG_DOZE bit.
     *
     * SIM2 doze mode
     */
    inline void toggle_GPR39_SIM2_IPG_DOZE() volatile
    {
        GPR39 ^= 1u << 5u;
    }

    /**
     * Get GPR39's SIM1_IPG_DOZE bit.
     *
     * SIM1 doze mode
     */
    inline bool get_GPR39_SIM1_IPG_DOZE() volatile
    {
        return GPR39 & (1u << 4u);
    }

    /**
     * Set GPR39's SIM1_IPG_DOZE bit.
     *
     * SIM1 doze mode
     */
    inline void set_GPR39_SIM1_IPG_DOZE() volatile
    {
        GPR39 |= 1u << 4u;
    }

    /**
     * Clear GPR39's SIM1_IPG_DOZE bit.
     *
     * SIM1 doze mode
     */
    inline void clear_GPR39_SIM1_IPG_DOZE() volatile
    {
        GPR39 &= ~(1u << 4u);
    }

    /**
     * Toggle GPR39's SIM1_IPG_DOZE bit.
     *
     * SIM1 doze mode
     */
    inline void toggle_GPR39_SIM1_IPG_DOZE() volatile
    {
        GPR39 ^= 1u << 4u;
    }

    /**
     * Get GPR39's SEMC_STOP_REQ bit.
     *
     * SEMC stop request
     */
    inline bool get_GPR39_SEMC_STOP_REQ() volatile
    {
        return GPR39 & (1u << 3u);
    }

    /**
     * Set GPR39's SEMC_STOP_REQ bit.
     *
     * SEMC stop request
     */
    inline void set_GPR39_SEMC_STOP_REQ() volatile
    {
        GPR39 |= 1u << 3u;
    }

    /**
     * Clear GPR39's SEMC_STOP_REQ bit.
     *
     * SEMC stop request
     */
    inline void clear_GPR39_SEMC_STOP_REQ() volatile
    {
        GPR39 &= ~(1u << 3u);
    }

    /**
     * Toggle GPR39's SEMC_STOP_REQ bit.
     *
     * SEMC stop request
     */
    inline void toggle_GPR39_SEMC_STOP_REQ() volatile
    {
        GPR39 ^= 1u << 3u;
    }

    /**
     * Get GPR39's PIT2_STOP_REQ bit.
     *
     * PIT2 stop request
     */
    inline bool get_GPR39_PIT2_STOP_REQ() volatile
    {
        return GPR39 & (1u << 2u);
    }

    /**
     * Set GPR39's PIT2_STOP_REQ bit.
     *
     * PIT2 stop request
     */
    inline void set_GPR39_PIT2_STOP_REQ() volatile
    {
        GPR39 |= 1u << 2u;
    }

    /**
     * Clear GPR39's PIT2_STOP_REQ bit.
     *
     * PIT2 stop request
     */
    inline void clear_GPR39_PIT2_STOP_REQ() volatile
    {
        GPR39 &= ~(1u << 2u);
    }

    /**
     * Toggle GPR39's PIT2_STOP_REQ bit.
     *
     * PIT2 stop request
     */
    inline void toggle_GPR39_PIT2_STOP_REQ() volatile
    {
        GPR39 ^= 1u << 2u;
    }

    /**
     * Get GPR39's PIT1_STOP_REQ bit.
     *
     * PIT1 stop request
     */
    inline bool get_GPR39_PIT1_STOP_REQ() volatile
    {
        return GPR39 & (1u << 1u);
    }

    /**
     * Set GPR39's PIT1_STOP_REQ bit.
     *
     * PIT1 stop request
     */
    inline void set_GPR39_PIT1_STOP_REQ() volatile
    {
        GPR39 |= 1u << 1u;
    }

    /**
     * Clear GPR39's PIT1_STOP_REQ bit.
     *
     * PIT1 stop request
     */
    inline void clear_GPR39_PIT1_STOP_REQ() volatile
    {
        GPR39 &= ~(1u << 1u);
    }

    /**
     * Toggle GPR39's PIT1_STOP_REQ bit.
     *
     * PIT1 stop request
     */
    inline void toggle_GPR39_PIT1_STOP_REQ() volatile
    {
        GPR39 ^= 1u << 1u;
    }

    /**
     * Get all of GPR39's bit fields.
     *
     * (read-write) GPR39 General Purpose Register
     */
    inline void get_GPR39(
        IOMUXC_LPSR_GPR_GPR39_DWP_LOCK &DWP_LOCK,
        IOMUXC_LPSR_GPR_GPR39_DWP &DWP, bool &FLEXIO2_STOP_REQ_PER,
        bool &FLEXIO2_STOP_REQ_BUS, bool &FLEXIO1_STOP_REQ_PER,
        bool &FLEXIO1_STOP_REQ_BUS, bool &SAI4_STOP_REQ, bool &SAI3_STOP_REQ,
        bool &SAI2_STOP_REQ, bool &SAI1_STOP_REQ, bool &WDOG2_IPG_DOZE,
        bool &WDOG1_IPG_DOZE, bool &SNVS_HP_STOP_REQ, bool &SNVS_HP_IPG_DOZE,
        bool &SIM2_IPG_DOZE, bool &SIM1_IPG_DOZE, bool &SEMC_STOP_REQ,
        bool &PIT2_STOP_REQ, bool &PIT1_STOP_REQ) volatile
    {
        uint32_t curr = GPR39;

        DWP_LOCK = IOMUXC_LPSR_GPR_GPR39_DWP_LOCK((curr >> 30u) & 0b11u);
        DWP = IOMUXC_LPSR_GPR_GPR39_DWP((curr >> 28u) & 0b11u);
        FLEXIO2_STOP_REQ_PER = curr & (1u << 17u);
        FLEXIO2_STOP_REQ_BUS = curr & (1u << 16u);
        FLEXIO1_STOP_REQ_PER = curr & (1u << 15u);
        FLEXIO1_STOP_REQ_BUS = curr & (1u << 14u);
        SAI4_STOP_REQ = curr & (1u << 13u);
        SAI3_STOP_REQ = curr & (1u << 12u);
        SAI2_STOP_REQ = curr & (1u << 11u);
        SAI1_STOP_REQ = curr & (1u << 10u);
        WDOG2_IPG_DOZE = curr & (1u << 9u);
        WDOG1_IPG_DOZE = curr & (1u << 8u);
        SNVS_HP_STOP_REQ = curr & (1u << 7u);
        SNVS_HP_IPG_DOZE = curr & (1u << 6u);
        SIM2_IPG_DOZE = curr & (1u << 5u);
        SIM1_IPG_DOZE = curr & (1u << 4u);
        SEMC_STOP_REQ = curr & (1u << 3u);
        PIT2_STOP_REQ = curr & (1u << 2u);
        PIT1_STOP_REQ = curr & (1u << 1u);
    }

    /**
     * Set all of GPR39's bit fields.
     *
     * (read-write) GPR39 General Purpose Register
     */
    inline void set_GPR39(IOMUXC_LPSR_GPR_GPR39_DWP_LOCK DWP_LOCK,
                          IOMUXC_LPSR_GPR_GPR39_DWP DWP,
                          bool FLEXIO2_STOP_REQ_PER, bool FLEXIO2_STOP_REQ_BUS,
                          bool FLEXIO1_STOP_REQ_PER, bool FLEXIO1_STOP_REQ_BUS,
                          bool SAI4_STOP_REQ, bool SAI3_STOP_REQ,
                          bool SAI2_STOP_REQ, bool SAI1_STOP_REQ,
                          bool WDOG2_IPG_DOZE, bool WDOG1_IPG_DOZE,
                          bool SNVS_HP_STOP_REQ, bool SNVS_HP_IPG_DOZE,
                          bool SIM2_IPG_DOZE, bool SIM1_IPG_DOZE,
                          bool SEMC_STOP_REQ, bool PIT2_STOP_REQ,
                          bool PIT1_STOP_REQ) volatile
    {
        uint32_t curr = GPR39;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 17u);
        curr |= (FLEXIO2_STOP_REQ_PER & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (FLEXIO2_STOP_REQ_BUS & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (FLEXIO1_STOP_REQ_PER & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (FLEXIO1_STOP_REQ_BUS & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (SAI4_STOP_REQ & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (SAI3_STOP_REQ & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (SAI2_STOP_REQ & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (SAI1_STOP_REQ & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (WDOG2_IPG_DOZE & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (WDOG1_IPG_DOZE & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (SNVS_HP_STOP_REQ & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (SNVS_HP_IPG_DOZE & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (SIM2_IPG_DOZE & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (SIM1_IPG_DOZE & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SEMC_STOP_REQ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PIT2_STOP_REQ & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (PIT1_STOP_REQ & 0b1u) << 1u;

        GPR39 = curr;
    }

    /**
     * Get GPR40's LPUART8_STOP_ACK bit.
     *
     * LPUART8 stop acknowledge
     */
    inline bool get_GPR40_LPUART8_STOP_ACK() volatile
    {
        return GPR40 & (1u << 31u);
    }

    /**
     * Get GPR40's LPUART7_STOP_ACK bit.
     *
     * LPUART7 stop acknowledge
     */
    inline bool get_GPR40_LPUART7_STOP_ACK() volatile
    {
        return GPR40 & (1u << 30u);
    }

    /**
     * Get GPR40's LPUART6_STOP_ACK bit.
     *
     * LPUART6 stop acknowledge
     */
    inline bool get_GPR40_LPUART6_STOP_ACK() volatile
    {
        return GPR40 & (1u << 29u);
    }

    /**
     * Get GPR40's LPUART5_STOP_ACK bit.
     *
     * LPUART5 stop acknowledge
     */
    inline bool get_GPR40_LPUART5_STOP_ACK() volatile
    {
        return GPR40 & (1u << 28u);
    }

    /**
     * Get GPR40's LPUART4_STOP_ACK bit.
     *
     * LPUART4 stop acknowledge
     */
    inline bool get_GPR40_LPUART4_STOP_ACK() volatile
    {
        return GPR40 & (1u << 27u);
    }

    /**
     * Get GPR40's LPUART3_STOP_ACK bit.
     *
     * LPUART3 stop acknowledge
     */
    inline bool get_GPR40_LPUART3_STOP_ACK() volatile
    {
        return GPR40 & (1u << 26u);
    }

    /**
     * Get GPR40's LPUART2_STOP_ACK bit.
     *
     * LPUART2 stop acknowledge
     */
    inline bool get_GPR40_LPUART2_STOP_ACK() volatile
    {
        return GPR40 & (1u << 25u);
    }

    /**
     * Get GPR40's LPUART1_STOP_ACK bit.
     *
     * LPUART1 stop acknowledge
     */
    inline bool get_GPR40_LPUART1_STOP_ACK() volatile
    {
        return GPR40 & (1u << 24u);
    }

    /**
     * Get GPR40's LPSPI6_STOP_ACK bit.
     *
     * LPSPI6 stop acknowledge
     */
    inline bool get_GPR40_LPSPI6_STOP_ACK() volatile
    {
        return GPR40 & (1u << 23u);
    }

    /**
     * Get GPR40's LPSPI5_STOP_ACK bit.
     *
     * LPSPI5 stop acknowledge
     */
    inline bool get_GPR40_LPSPI5_STOP_ACK() volatile
    {
        return GPR40 & (1u << 22u);
    }

    /**
     * Get GPR40's LPSPI4_STOP_ACK bit.
     *
     * LPSPI4 stop acknowledge
     */
    inline bool get_GPR40_LPSPI4_STOP_ACK() volatile
    {
        return GPR40 & (1u << 21u);
    }

    /**
     * Get GPR40's LPSPI3_STOP_ACK bit.
     *
     * LPSPI3 stop acknowledge
     */
    inline bool get_GPR40_LPSPI3_STOP_ACK() volatile
    {
        return GPR40 & (1u << 20u);
    }

    /**
     * Get GPR40's LPSPI2_STOP_ACK bit.
     *
     * LPSPI2 stop acknowledge
     */
    inline bool get_GPR40_LPSPI2_STOP_ACK() volatile
    {
        return GPR40 & (1u << 19u);
    }

    /**
     * Get GPR40's LPSPI1_STOP_ACK bit.
     *
     * LPSPI1 stop acknowledge
     */
    inline bool get_GPR40_LPSPI1_STOP_ACK() volatile
    {
        return GPR40 & (1u << 18u);
    }

    /**
     * Get GPR40's LPI2C6_STOP_ACK bit.
     *
     * LPI2C6 stop acknowledge
     */
    inline bool get_GPR40_LPI2C6_STOP_ACK() volatile
    {
        return GPR40 & (1u << 17u);
    }

    /**
     * Get GPR40's LPI2C5_STOP_ACK bit.
     *
     * LPI2C5 stop acknowledge
     */
    inline bool get_GPR40_LPI2C5_STOP_ACK() volatile
    {
        return GPR40 & (1u << 16u);
    }

    /**
     * Get GPR40's LPI2C4_STOP_ACK bit.
     *
     * LPI2C4 stop acknowledge
     */
    inline bool get_GPR40_LPI2C4_STOP_ACK() volatile
    {
        return GPR40 & (1u << 15u);
    }

    /**
     * Get GPR40's LPI2C3_STOP_ACK bit.
     *
     * LPI2C3 stop acknowledge
     */
    inline bool get_GPR40_LPI2C3_STOP_ACK() volatile
    {
        return GPR40 & (1u << 14u);
    }

    /**
     * Get GPR40's LPI2C2_STOP_ACK bit.
     *
     * LPI2C2 stop acknowledge
     */
    inline bool get_GPR40_LPI2C2_STOP_ACK() volatile
    {
        return GPR40 & (1u << 13u);
    }

    /**
     * Get GPR40's LPI2C1_STOP_ACK bit.
     *
     * LPI2C1 stop acknowledge
     */
    inline bool get_GPR40_LPI2C1_STOP_ACK() volatile
    {
        return GPR40 & (1u << 12u);
    }

    /**
     * Get GPR40's FLEXSPI2_STOP_ACK bit.
     *
     * FLEXSPI2 stop acknowledge
     */
    inline bool get_GPR40_FLEXSPI2_STOP_ACK() volatile
    {
        return GPR40 & (1u << 11u);
    }

    /**
     * Get GPR40's FLEXSPI1_STOP_ACK bit.
     *
     * FLEXSPI1 stop acknowledge
     */
    inline bool get_GPR40_FLEXSPI1_STOP_ACK() volatile
    {
        return GPR40 & (1u << 10u);
    }

    /**
     * Get GPR40's ENET1G_STOP_ACK bit.
     *
     * ENET1G stop acknowledge
     */
    inline bool get_GPR40_ENET1G_STOP_ACK() volatile
    {
        return GPR40 & (1u << 9u);
    }

    /**
     * Get GPR40's ENET_STOP_ACK bit.
     *
     * ENET stop acknowledge
     */
    inline bool get_GPR40_ENET_STOP_ACK() volatile
    {
        return GPR40 & (1u << 8u);
    }

    /**
     * Get GPR40's EDMA_LPSR_STOP_ACK bit.
     *
     * EDMA_LPSR stop acknowledge
     */
    inline bool get_GPR40_EDMA_LPSR_STOP_ACK() volatile
    {
        return GPR40 & (1u << 7u);
    }

    /**
     * Get GPR40's EDMA_STOP_ACK bit.
     *
     * EDMA stop acknowledge
     */
    inline bool get_GPR40_EDMA_STOP_ACK() volatile
    {
        return GPR40 & (1u << 6u);
    }

    /**
     * Get GPR40's CAN3_STOP_ACK bit.
     *
     * CAN3 stop acknowledge
     */
    inline bool get_GPR40_CAN3_STOP_ACK() volatile
    {
        return GPR40 & (1u << 5u);
    }

    /**
     * Get GPR40's CAN2_STOP_ACK bit.
     *
     * CAN2 stop acknowledge
     */
    inline bool get_GPR40_CAN2_STOP_ACK() volatile
    {
        return GPR40 & (1u << 4u);
    }

    /**
     * Get GPR40's CAN1_STOP_ACK bit.
     *
     * CAN1 stop acknowledge
     */
    inline bool get_GPR40_CAN1_STOP_ACK() volatile
    {
        return GPR40 & (1u << 3u);
    }

    /**
     * Get GPR40's CAAM_STOP_ACK bit.
     *
     * CAAM stop acknowledge
     */
    inline bool get_GPR40_CAAM_STOP_ACK() volatile
    {
        return GPR40 & (1u << 2u);
    }

    /**
     * Get GPR40's ADC2_STOP_ACK bit.
     *
     * ADC2 stop acknowledge
     */
    inline bool get_GPR40_ADC2_STOP_ACK() volatile
    {
        return GPR40 & (1u << 1u);
    }

    /**
     * Get GPR40's ADC1_STOP_ACK bit.
     *
     * ADC1 stop acknowledge
     */
    inline bool get_GPR40_ADC1_STOP_ACK() volatile
    {
        return GPR40 & (1u << 0u);
    }

    /**
     * Get all of GPR40's bit fields.
     *
     * (read-write) GPR40 General Purpose Register
     */
    inline void get_GPR40(
        bool &LPUART8_STOP_ACK, bool &LPUART7_STOP_ACK, bool &LPUART6_STOP_ACK,
        bool &LPUART5_STOP_ACK, bool &LPUART4_STOP_ACK, bool &LPUART3_STOP_ACK,
        bool &LPUART2_STOP_ACK, bool &LPUART1_STOP_ACK, bool &LPSPI6_STOP_ACK,
        bool &LPSPI5_STOP_ACK, bool &LPSPI4_STOP_ACK, bool &LPSPI3_STOP_ACK,
        bool &LPSPI2_STOP_ACK, bool &LPSPI1_STOP_ACK, bool &LPI2C6_STOP_ACK,
        bool &LPI2C5_STOP_ACK, bool &LPI2C4_STOP_ACK, bool &LPI2C3_STOP_ACK,
        bool &LPI2C2_STOP_ACK, bool &LPI2C1_STOP_ACK, bool &FLEXSPI2_STOP_ACK,
        bool &FLEXSPI1_STOP_ACK, bool &ENET1G_STOP_ACK, bool &ENET_STOP_ACK,
        bool &EDMA_LPSR_STOP_ACK, bool &EDMA_STOP_ACK, bool &CAN3_STOP_ACK,
        bool &CAN2_STOP_ACK, bool &CAN1_STOP_ACK, bool &CAAM_STOP_ACK,
        bool &ADC2_STOP_ACK, bool &ADC1_STOP_ACK) volatile
    {
        uint32_t curr = GPR40;

        LPUART8_STOP_ACK = curr & (1u << 31u);
        LPUART7_STOP_ACK = curr & (1u << 30u);
        LPUART6_STOP_ACK = curr & (1u << 29u);
        LPUART5_STOP_ACK = curr & (1u << 28u);
        LPUART4_STOP_ACK = curr & (1u << 27u);
        LPUART3_STOP_ACK = curr & (1u << 26u);
        LPUART2_STOP_ACK = curr & (1u << 25u);
        LPUART1_STOP_ACK = curr & (1u << 24u);
        LPSPI6_STOP_ACK = curr & (1u << 23u);
        LPSPI5_STOP_ACK = curr & (1u << 22u);
        LPSPI4_STOP_ACK = curr & (1u << 21u);
        LPSPI3_STOP_ACK = curr & (1u << 20u);
        LPSPI2_STOP_ACK = curr & (1u << 19u);
        LPSPI1_STOP_ACK = curr & (1u << 18u);
        LPI2C6_STOP_ACK = curr & (1u << 17u);
        LPI2C5_STOP_ACK = curr & (1u << 16u);
        LPI2C4_STOP_ACK = curr & (1u << 15u);
        LPI2C3_STOP_ACK = curr & (1u << 14u);
        LPI2C2_STOP_ACK = curr & (1u << 13u);
        LPI2C1_STOP_ACK = curr & (1u << 12u);
        FLEXSPI2_STOP_ACK = curr & (1u << 11u);
        FLEXSPI1_STOP_ACK = curr & (1u << 10u);
        ENET1G_STOP_ACK = curr & (1u << 9u);
        ENET_STOP_ACK = curr & (1u << 8u);
        EDMA_LPSR_STOP_ACK = curr & (1u << 7u);
        EDMA_STOP_ACK = curr & (1u << 6u);
        CAN3_STOP_ACK = curr & (1u << 5u);
        CAN2_STOP_ACK = curr & (1u << 4u);
        CAN1_STOP_ACK = curr & (1u << 3u);
        CAAM_STOP_ACK = curr & (1u << 2u);
        ADC2_STOP_ACK = curr & (1u << 1u);
        ADC1_STOP_ACK = curr & (1u << 0u);
    }

    /**
     * Get GPR41's ROM_READ_LOCKED bit.
     *
     * ROM read lock status bit
     */
    inline bool get_GPR41_ROM_READ_LOCKED() volatile
    {
        return GPR41 & (1u << 24u);
    }

    /**
     * Get GPR41's FLEXIO2_STOP_ACK_PER bit.
     *
     * FLEXIO2 stop acknowledge of peripheral clock domain
     */
    inline bool get_GPR41_FLEXIO2_STOP_ACK_PER() volatile
    {
        return GPR41 & (1u << 16u);
    }

    /**
     * Get GPR41's FLEXIO2_STOP_ACK_BUS bit.
     *
     * FLEXIO2 stop acknowledge of bus clock domain
     */
    inline bool get_GPR41_FLEXIO2_STOP_ACK_BUS() volatile
    {
        return GPR41 & (1u << 15u);
    }

    /**
     * Get GPR41's FLEXIO1_STOP_ACK_PER bit.
     *
     * FLEXIO1 stop acknowledge of peripheral clock domain
     */
    inline bool get_GPR41_FLEXIO1_STOP_ACK_PER() volatile
    {
        return GPR41 & (1u << 14u);
    }

    /**
     * Get GPR41's FLEXIO1_STOP_ACK_BUS bit.
     *
     * FLEXIO1 stop acknowledge of bus clock domain
     */
    inline bool get_GPR41_FLEXIO1_STOP_ACK_BUS() volatile
    {
        return GPR41 & (1u << 13u);
    }

    /**
     * Get GPR41's SAI4_STOP_ACK bit.
     *
     * SAI4 stop acknowledge
     */
    inline bool get_GPR41_SAI4_STOP_ACK() volatile
    {
        return GPR41 & (1u << 12u);
    }

    /**
     * Get GPR41's SAI3_STOP_ACK bit.
     *
     * SAI3 stop acknowledge
     */
    inline bool get_GPR41_SAI3_STOP_ACK() volatile
    {
        return GPR41 & (1u << 11u);
    }

    /**
     * Get GPR41's SAI2_STOP_ACK bit.
     *
     * SAI2 stop acknowledge
     */
    inline bool get_GPR41_SAI2_STOP_ACK() volatile
    {
        return GPR41 & (1u << 10u);
    }

    /**
     * Get GPR41's SAI1_STOP_ACK bit.
     *
     * SAI1 stop acknowledge
     */
    inline bool get_GPR41_SAI1_STOP_ACK() volatile
    {
        return GPR41 & (1u << 9u);
    }

    /**
     * Get GPR41's SNVS_HP_STOP_ACK bit.
     *
     * SNVS_HP stop acknowledge
     */
    inline bool get_GPR41_SNVS_HP_STOP_ACK() volatile
    {
        return GPR41 & (1u << 8u);
    }

    /**
     * Get GPR41's SEMC_STOP_ACK bit.
     *
     * SEMC stop acknowledge
     */
    inline bool get_GPR41_SEMC_STOP_ACK() volatile
    {
        return GPR41 & (1u << 7u);
    }

    /**
     * Get GPR41's PIT2_STOP_ACK bit.
     *
     * PIT2 stop acknowledge
     */
    inline bool get_GPR41_PIT2_STOP_ACK() volatile
    {
        return GPR41 & (1u << 6u);
    }

    /**
     * Get GPR41's PIT1_STOP_ACK bit.
     *
     * PIT1 stop acknowledge
     */
    inline bool get_GPR41_PIT1_STOP_ACK() volatile
    {
        return GPR41 & (1u << 5u);
    }

    /**
     * Get GPR41's MIC_STOP_ACK bit.
     *
     * MIC stop acknowledge
     */
    inline bool get_GPR41_MIC_STOP_ACK() volatile
    {
        return GPR41 & (1u << 4u);
    }

    /**
     * Get GPR41's LPUART12_STOP_ACK bit.
     *
     * LPUART12 stop acknowledge
     */
    inline bool get_GPR41_LPUART12_STOP_ACK() volatile
    {
        return GPR41 & (1u << 3u);
    }

    /**
     * Get GPR41's LPUART11_STOP_ACK bit.
     *
     * LPUART11 stop acknowledge
     */
    inline bool get_GPR41_LPUART11_STOP_ACK() volatile
    {
        return GPR41 & (1u << 2u);
    }

    /**
     * Get GPR41's LPUART10_STOP_ACK bit.
     *
     * LPUART10 stop acknowledge
     */
    inline bool get_GPR41_LPUART10_STOP_ACK() volatile
    {
        return GPR41 & (1u << 1u);
    }

    /**
     * Get GPR41's LPUART9_STOP_ACK bit.
     *
     * LPUART9 stop acknowledge
     */
    inline bool get_GPR41_LPUART9_STOP_ACK() volatile
    {
        return GPR41 & (1u << 0u);
    }

    /**
     * Get all of GPR41's bit fields.
     *
     * (read-write) GPR41 General Purpose Register
     */
    inline void get_GPR41(
        bool &ROM_READ_LOCKED, bool &FLEXIO2_STOP_ACK_PER,
        bool &FLEXIO2_STOP_ACK_BUS, bool &FLEXIO1_STOP_ACK_PER,
        bool &FLEXIO1_STOP_ACK_BUS, bool &SAI4_STOP_ACK, bool &SAI3_STOP_ACK,
        bool &SAI2_STOP_ACK, bool &SAI1_STOP_ACK, bool &SNVS_HP_STOP_ACK,
        bool &SEMC_STOP_ACK, bool &PIT2_STOP_ACK, bool &PIT1_STOP_ACK,
        bool &MIC_STOP_ACK, bool &LPUART12_STOP_ACK, bool &LPUART11_STOP_ACK,
        bool &LPUART10_STOP_ACK, bool &LPUART9_STOP_ACK) volatile
    {
        uint32_t curr = GPR41;

        ROM_READ_LOCKED = curr & (1u << 24u);
        FLEXIO2_STOP_ACK_PER = curr & (1u << 16u);
        FLEXIO2_STOP_ACK_BUS = curr & (1u << 15u);
        FLEXIO1_STOP_ACK_PER = curr & (1u << 14u);
        FLEXIO1_STOP_ACK_BUS = curr & (1u << 13u);
        SAI4_STOP_ACK = curr & (1u << 12u);
        SAI3_STOP_ACK = curr & (1u << 11u);
        SAI2_STOP_ACK = curr & (1u << 10u);
        SAI1_STOP_ACK = curr & (1u << 9u);
        SNVS_HP_STOP_ACK = curr & (1u << 8u);
        SEMC_STOP_ACK = curr & (1u << 7u);
        PIT2_STOP_ACK = curr & (1u << 6u);
        PIT1_STOP_ACK = curr & (1u << 5u);
        MIC_STOP_ACK = curr & (1u << 4u);
        LPUART12_STOP_ACK = curr & (1u << 3u);
        LPUART11_STOP_ACK = curr & (1u << 2u);
        LPUART10_STOP_ACK = curr & (1u << 1u);
        LPUART9_STOP_ACK = curr & (1u << 0u);
    }
};

static_assert(sizeof(iomuxc_lpsr_gpr) == iomuxc_lpsr_gpr::size);

static volatile iomuxc_lpsr_gpr *const IOMUXC_LPSR_GPR =
    reinterpret_cast<iomuxc_lpsr_gpr *>(0x40C0C000);

}; // namespace MIMXRT1176::CM7
