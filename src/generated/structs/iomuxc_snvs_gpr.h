/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/IOMUXC_SNVS_GPR_GPR34_SNVS_CLK_DET_OFFSET_HIGH.h"
#include "../enums/IOMUXC_SNVS_GPR_GPR34_SNVS_CLK_DET_OFFSET_LOW.h"
#include "../enums/IOMUXC_SNVS_GPR_GPR35_SNVS_TEMP_DET_OFFSET_HIGH.h"
#include "../enums/IOMUXC_SNVS_GPR_GPR35_SNVS_TEMP_DET_OFFSET_LOW.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * IOMUXC SNVS GPR
 */
struct [[gnu::packed]] iomuxc_snvs_gpr
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        152; /*!< iomuxc_snvs_gpr's size in bytes. */

    /* Fields. */
    static constexpr std::size_t GPR_length = 32;
    uint32_t
        GPR[GPR_length]; /*!< (read-write) GPR0 General Purpose Register */
    uint32_t GPR32;      /*!< (read-write) GPR32 General Purpose Register */
    uint32_t GPR33;      /*!< (read-write) GPR33 General Purpose Register */
    uint32_t GPR34;      /*!< (read-write) GPR34 General Purpose Register */
    uint32_t GPR35;      /*!< (read-write) GPR35 General Purpose Register */
    uint32_t GPR36;      /*!< (read-write) GPR36 General Purpose Register */
    uint32_t GPR37;      /*!< (read-write) GPR37 General Purpose Register */

    /* Methods. */

    /**
     * Get GPR's GPR field.
     *
     * General purpose bits
     */
    inline uint32_t get_GPR_GPR(std::size_t index) volatile
    {
        return (GPR[index] >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR's GPR field.
     *
     * General purpose bits
     */
    inline void set_GPR_GPR(std::size_t index, uint32_t value) volatile
    {
        uint32_t curr = GPR[index];

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR[index] = curr;
    }

    /**
     * Get GPR32's LOCK field.
     *
     * Lock the write to bit 15:0
     */
    inline uint16_t get_GPR32_LOCK() volatile
    {
        return (GPR32 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set GPR32's LOCK field.
     *
     * Lock the write to bit 15:0
     */
    inline void set_GPR32_LOCK(uint16_t value) volatile
    {
        uint32_t curr = GPR32;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        GPR32 = curr;
    }

    /**
     * Get GPR32's GPR field.
     *
     * General purpose bits
     */
    inline uint16_t get_GPR32_GPR() volatile
    {
        return (GPR32 >> 1u) & 0b111111111111111u;
    }

    /**
     * Set GPR32's GPR field.
     *
     * General purpose bits
     */
    inline void set_GPR32_GPR(uint16_t value) volatile
    {
        uint32_t curr = GPR32;

        curr &= ~(0b111111111111111u << 1u);
        curr |= (value & 0b111111111111111u) << 1u;

        GPR32 = curr;
    }

    /**
     * Get all of GPR32's bit fields.
     *
     * (read-write) GPR32 General Purpose Register
     */
    inline void get_GPR32(uint16_t &LOCK, uint16_t &GPR) volatile
    {
        uint32_t curr = GPR32;

        LOCK = (curr >> 16u) & 0b1111111111111111u;
        GPR = (curr >> 1u) & 0b111111111111111u;
    }

    /**
     * Set all of GPR32's bit fields.
     *
     * (read-write) GPR32 General Purpose Register
     */
    inline void set_GPR32(uint16_t LOCK, uint16_t GPR) volatile
    {
        uint32_t curr = GPR32;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (LOCK & 0b1111111111111111u) << 16u;
        curr &= ~(0b111111111111111u << 1u);
        curr |= (GPR & 0b111111111111111u) << 1u;

        GPR32 = curr;
    }

    /**
     * Get GPR33's SNVS_XTAL_CLK_OK bit.
     *
     * 32K OSC ok flag
     */
    inline bool get_GPR33_SNVS_XTAL_CLK_OK() volatile
    {
        return GPR33 & (1u << 20u);
    }

    /**
     * Get GPR33's DCDC_STS_DC_OK bit.
     *
     * DCDC status OK
     */
    inline bool get_GPR33_DCDC_STS_DC_OK() volatile
    {
        return GPR33 & (1u << 19u);
    }

    /**
     * Get GPR33's DCDC_OVER_VOL bit.
     *
     * DCDC output over voltage alert
     */
    inline bool get_GPR33_DCDC_OVER_VOL() volatile
    {
        return GPR33 & (1u << 18u);
    }

    /**
     * Get GPR33's DCDC_OVER_CUR bit.
     *
     * DCDC output over current alert
     */
    inline bool get_GPR33_DCDC_OVER_CUR() volatile
    {
        return GPR33 & (1u << 17u);
    }

    /**
     * Get GPR33's DCDC_IN_LOW_VOL bit.
     *
     * DCDC_IN low voltage detect
     */
    inline bool get_GPR33_DCDC_IN_LOW_VOL() volatile
    {
        return GPR33 & (1u << 16u);
    }

    /**
     * Get GPR33's SNVS_BYPASS_EN bit.
     *
     * SNVS LDO_SNVS_ANA bypass enable
     */
    inline bool get_GPR33_SNVS_BYPASS_EN() volatile
    {
        return GPR33 & (1u << 2u);
    }

    /**
     * Set GPR33's SNVS_BYPASS_EN bit.
     *
     * SNVS LDO_SNVS_ANA bypass enable
     */
    inline void set_GPR33_SNVS_BYPASS_EN() volatile
    {
        GPR33 |= 1u << 2u;
    }

    /**
     * Clear GPR33's SNVS_BYPASS_EN bit.
     *
     * SNVS LDO_SNVS_ANA bypass enable
     */
    inline void clear_GPR33_SNVS_BYPASS_EN() volatile
    {
        GPR33 &= ~(1u << 2u);
    }

    /**
     * Toggle GPR33's SNVS_BYPASS_EN bit.
     *
     * SNVS LDO_SNVS_ANA bypass enable
     */
    inline void toggle_GPR33_SNVS_BYPASS_EN() volatile
    {
        GPR33 ^= 1u << 2u;
    }

    /**
     * Get GPR33's DCDC_STATUS_CAPT_CLR bit.
     *
     * DCDC captured status clear
     */
    inline bool get_GPR33_DCDC_STATUS_CAPT_CLR() volatile
    {
        return GPR33 & (1u << 1u);
    }

    /**
     * Set GPR33's DCDC_STATUS_CAPT_CLR bit.
     *
     * DCDC captured status clear
     */
    inline void set_GPR33_DCDC_STATUS_CAPT_CLR() volatile
    {
        GPR33 |= 1u << 1u;
    }

    /**
     * Clear GPR33's DCDC_STATUS_CAPT_CLR bit.
     *
     * DCDC captured status clear
     */
    inline void clear_GPR33_DCDC_STATUS_CAPT_CLR() volatile
    {
        GPR33 &= ~(1u << 1u);
    }

    /**
     * Toggle GPR33's DCDC_STATUS_CAPT_CLR bit.
     *
     * DCDC captured status clear
     */
    inline void toggle_GPR33_DCDC_STATUS_CAPT_CLR() volatile
    {
        GPR33 ^= 1u << 1u;
    }

    /**
     * Get all of GPR33's bit fields.
     *
     * (read-write) GPR33 General Purpose Register
     */
    inline void get_GPR33(bool &SNVS_XTAL_CLK_OK, bool &DCDC_STS_DC_OK,
                          bool &DCDC_OVER_VOL, bool &DCDC_OVER_CUR,
                          bool &DCDC_IN_LOW_VOL, bool &SNVS_BYPASS_EN,
                          bool &DCDC_STATUS_CAPT_CLR) volatile
    {
        uint32_t curr = GPR33;

        SNVS_XTAL_CLK_OK = curr & (1u << 20u);
        DCDC_STS_DC_OK = curr & (1u << 19u);
        DCDC_OVER_VOL = curr & (1u << 18u);
        DCDC_OVER_CUR = curr & (1u << 17u);
        DCDC_IN_LOW_VOL = curr & (1u << 16u);
        SNVS_BYPASS_EN = curr & (1u << 2u);
        DCDC_STATUS_CAPT_CLR = curr & (1u << 1u);
    }

    /**
     * Set all of GPR33's bit fields.
     *
     * (read-write) GPR33 General Purpose Register
     */
    inline void set_GPR33(bool SNVS_BYPASS_EN,
                          bool DCDC_STATUS_CAPT_CLR) volatile
    {
        uint32_t curr = GPR33;

        curr &= ~(0b1u << 2u);
        curr |= (SNVS_BYPASS_EN & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DCDC_STATUS_CAPT_CLR & 0b1u) << 1u;

        GPR33 = curr;
    }

    /**
     * Get GPR34's SNVS_OSC_CAP_TRIM field.
     *
     * SNVS OSC load capacitor trim
     */
    inline uint8_t get_GPR34_SNVS_OSC_CAP_TRIM() volatile
    {
        return (GPR34 >> 24u) & 0b1111u;
    }

    /**
     * Set GPR34's SNVS_OSC_CAP_TRIM field.
     *
     * SNVS OSC load capacitor trim
     */
    inline void set_GPR34_SNVS_OSC_CAP_TRIM(uint8_t value) volatile
    {
        uint32_t curr = GPR34;

        curr &= ~(0b1111u << 24u);
        curr |= (value & 0b1111u) << 24u;

        GPR34 = curr;
    }

    /**
     * Get GPR34's SNVS_CAP_TRIM_SEL bit.
     *
     * SNVS OSC load capacitor trim select
     */
    inline bool get_GPR34_SNVS_CAP_TRIM_SEL() volatile
    {
        return GPR34 & (1u << 23u);
    }

    /**
     * Set GPR34's SNVS_CAP_TRIM_SEL bit.
     *
     * SNVS OSC load capacitor trim select
     */
    inline void set_GPR34_SNVS_CAP_TRIM_SEL() volatile
    {
        GPR34 |= 1u << 23u;
    }

    /**
     * Clear GPR34's SNVS_CAP_TRIM_SEL bit.
     *
     * SNVS OSC load capacitor trim select
     */
    inline void clear_GPR34_SNVS_CAP_TRIM_SEL() volatile
    {
        GPR34 &= ~(1u << 23u);
    }

    /**
     * Toggle GPR34's SNVS_CAP_TRIM_SEL bit.
     *
     * SNVS OSC load capacitor trim select
     */
    inline void toggle_GPR34_SNVS_CAP_TRIM_SEL() volatile
    {
        GPR34 ^= 1u << 23u;
    }

    /**
     * Get GPR34's SNVS_CLK_DET_OFFSET_LOW field.
     *
     * SNVS clock detect offset of low boundary frequency
     */
    inline IOMUXC_SNVS_GPR_GPR34_SNVS_CLK_DET_OFFSET_LOW
    get_GPR34_SNVS_CLK_DET_OFFSET_LOW() volatile
    {
        return IOMUXC_SNVS_GPR_GPR34_SNVS_CLK_DET_OFFSET_LOW((GPR34 >> 18u) &
                                                             0b11u);
    }

    /**
     * Set GPR34's SNVS_CLK_DET_OFFSET_LOW field.
     *
     * SNVS clock detect offset of low boundary frequency
     */
    inline void set_GPR34_SNVS_CLK_DET_OFFSET_LOW(
        IOMUXC_SNVS_GPR_GPR34_SNVS_CLK_DET_OFFSET_LOW value) volatile
    {
        uint32_t curr = GPR34;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        GPR34 = curr;
    }

    /**
     * Get GPR34's SNVS_CLK_DET_OFFSET_HIGH field.
     *
     * SNVS clock detect offset of high boundary frequency
     */
    inline IOMUXC_SNVS_GPR_GPR34_SNVS_CLK_DET_OFFSET_HIGH
    get_GPR34_SNVS_CLK_DET_OFFSET_HIGH() volatile
    {
        return IOMUXC_SNVS_GPR_GPR34_SNVS_CLK_DET_OFFSET_HIGH((GPR34 >> 16u) &
                                                              0b11u);
    }

    /**
     * Set GPR34's SNVS_CLK_DET_OFFSET_HIGH field.
     *
     * SNVS clock detect offset of high boundary frequency
     */
    inline void set_GPR34_SNVS_CLK_DET_OFFSET_HIGH(
        IOMUXC_SNVS_GPR_GPR34_SNVS_CLK_DET_OFFSET_HIGH value) volatile
    {
        uint32_t curr = GPR34;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        GPR34 = curr;
    }

    /**
     * Get GPR34's SNVS_CLK_DET_TRIM field.
     *
     * SNVS clock detect trim bits
     */
    inline uint8_t get_GPR34_SNVS_CLK_DET_TRIM() volatile
    {
        return (GPR34 >> 8u) & 0b11111111u;
    }

    /**
     * Set GPR34's SNVS_CLK_DET_TRIM field.
     *
     * SNVS clock detect trim bits
     */
    inline void set_GPR34_SNVS_CLK_DET_TRIM(uint8_t value) volatile
    {
        uint32_t curr = GPR34;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        GPR34 = curr;
    }

    /**
     * Get GPR34's SNVS_CLK_DET_TRIM_SEL bit.
     *
     * SNVS clock detect trim select
     */
    inline bool get_GPR34_SNVS_CLK_DET_TRIM_SEL() volatile
    {
        return GPR34 & (1u << 7u);
    }

    /**
     * Set GPR34's SNVS_CLK_DET_TRIM_SEL bit.
     *
     * SNVS clock detect trim select
     */
    inline void set_GPR34_SNVS_CLK_DET_TRIM_SEL() volatile
    {
        GPR34 |= 1u << 7u;
    }

    /**
     * Clear GPR34's SNVS_CLK_DET_TRIM_SEL bit.
     *
     * SNVS clock detect trim select
     */
    inline void clear_GPR34_SNVS_CLK_DET_TRIM_SEL() volatile
    {
        GPR34 &= ~(1u << 7u);
    }

    /**
     * Toggle GPR34's SNVS_CLK_DET_TRIM_SEL bit.
     *
     * SNVS clock detect trim select
     */
    inline void toggle_GPR34_SNVS_CLK_DET_TRIM_SEL() volatile
    {
        GPR34 ^= 1u << 7u;
    }

    /**
     * Get GPR34's SNVS_CORE_VOLT_DET_TRIM field.
     *
     * SNVS core voltage detect trim
     */
    inline uint8_t get_GPR34_SNVS_CORE_VOLT_DET_TRIM() volatile
    {
        return (GPR34 >> 2u) & 0b11u;
    }

    /**
     * Set GPR34's SNVS_CORE_VOLT_DET_TRIM field.
     *
     * SNVS core voltage detect trim
     */
    inline void set_GPR34_SNVS_CORE_VOLT_DET_TRIM(uint8_t value) volatile
    {
        uint32_t curr = GPR34;

        curr &= ~(0b11u << 2u);
        curr |= (value & 0b11u) << 2u;

        GPR34 = curr;
    }

    /**
     * Get GPR34's SNVS_CORE_VOLT_DET_TRIM_SEL bit.
     *
     * SNVS core voltage detect trim select
     */
    inline bool get_GPR34_SNVS_CORE_VOLT_DET_TRIM_SEL() volatile
    {
        return GPR34 & (1u << 1u);
    }

    /**
     * Set GPR34's SNVS_CORE_VOLT_DET_TRIM_SEL bit.
     *
     * SNVS core voltage detect trim select
     */
    inline void set_GPR34_SNVS_CORE_VOLT_DET_TRIM_SEL() volatile
    {
        GPR34 |= 1u << 1u;
    }

    /**
     * Clear GPR34's SNVS_CORE_VOLT_DET_TRIM_SEL bit.
     *
     * SNVS core voltage detect trim select
     */
    inline void clear_GPR34_SNVS_CORE_VOLT_DET_TRIM_SEL() volatile
    {
        GPR34 &= ~(1u << 1u);
    }

    /**
     * Toggle GPR34's SNVS_CORE_VOLT_DET_TRIM_SEL bit.
     *
     * SNVS core voltage detect trim select
     */
    inline void toggle_GPR34_SNVS_CORE_VOLT_DET_TRIM_SEL() volatile
    {
        GPR34 ^= 1u << 1u;
    }

    /**
     * Get GPR34's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline bool get_GPR34_LOCK() volatile
    {
        return GPR34 & (1u << 0u);
    }

    /**
     * Set GPR34's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void set_GPR34_LOCK() volatile
    {
        GPR34 |= 1u << 0u;
    }

    /**
     * Clear GPR34's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void clear_GPR34_LOCK() volatile
    {
        GPR34 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR34's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void toggle_GPR34_LOCK() volatile
    {
        GPR34 ^= 1u << 0u;
    }

    /**
     * Get all of GPR34's bit fields.
     *
     * (read-write) GPR34 General Purpose Register
     */
    inline void get_GPR34(
        uint8_t &SNVS_OSC_CAP_TRIM, bool &SNVS_CAP_TRIM_SEL,
        IOMUXC_SNVS_GPR_GPR34_SNVS_CLK_DET_OFFSET_LOW &SNVS_CLK_DET_OFFSET_LOW,
        IOMUXC_SNVS_GPR_GPR34_SNVS_CLK_DET_OFFSET_HIGH
            &SNVS_CLK_DET_OFFSET_HIGH,
        uint8_t &SNVS_CLK_DET_TRIM, bool &SNVS_CLK_DET_TRIM_SEL,
        uint8_t &SNVS_CORE_VOLT_DET_TRIM, bool &SNVS_CORE_VOLT_DET_TRIM_SEL,
        bool &LOCK) volatile
    {
        uint32_t curr = GPR34;

        SNVS_OSC_CAP_TRIM = (curr >> 24u) & 0b1111u;
        SNVS_CAP_TRIM_SEL = curr & (1u << 23u);
        SNVS_CLK_DET_OFFSET_LOW =
            IOMUXC_SNVS_GPR_GPR34_SNVS_CLK_DET_OFFSET_LOW((curr >> 18u) &
                                                          0b11u);
        SNVS_CLK_DET_OFFSET_HIGH =
            IOMUXC_SNVS_GPR_GPR34_SNVS_CLK_DET_OFFSET_HIGH((curr >> 16u) &
                                                           0b11u);
        SNVS_CLK_DET_TRIM = (curr >> 8u) & 0b11111111u;
        SNVS_CLK_DET_TRIM_SEL = curr & (1u << 7u);
        SNVS_CORE_VOLT_DET_TRIM = (curr >> 2u) & 0b11u;
        SNVS_CORE_VOLT_DET_TRIM_SEL = curr & (1u << 1u);
        LOCK = curr & (1u << 0u);
    }

    /**
     * Set all of GPR34's bit fields.
     *
     * (read-write) GPR34 General Purpose Register
     */
    inline void set_GPR34(
        uint8_t SNVS_OSC_CAP_TRIM, bool SNVS_CAP_TRIM_SEL,
        IOMUXC_SNVS_GPR_GPR34_SNVS_CLK_DET_OFFSET_LOW SNVS_CLK_DET_OFFSET_LOW,
        IOMUXC_SNVS_GPR_GPR34_SNVS_CLK_DET_OFFSET_HIGH
            SNVS_CLK_DET_OFFSET_HIGH,
        uint8_t SNVS_CLK_DET_TRIM, bool SNVS_CLK_DET_TRIM_SEL,
        uint8_t SNVS_CORE_VOLT_DET_TRIM, bool SNVS_CORE_VOLT_DET_TRIM_SEL,
        bool LOCK) volatile
    {
        uint32_t curr = GPR34;

        curr &= ~(0b1111u << 24u);
        curr |= (SNVS_OSC_CAP_TRIM & 0b1111u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (SNVS_CAP_TRIM_SEL & 0b1u) << 23u;
        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(SNVS_CLK_DET_OFFSET_LOW) & 0b11u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(SNVS_CLK_DET_OFFSET_HIGH) & 0b11u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (SNVS_CLK_DET_TRIM & 0b11111111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (SNVS_CLK_DET_TRIM_SEL & 0b1u) << 7u;
        curr &= ~(0b11u << 2u);
        curr |= (SNVS_CORE_VOLT_DET_TRIM & 0b11u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (SNVS_CORE_VOLT_DET_TRIM_SEL & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (LOCK & 0b1u) << 0u;

        GPR34 = curr;
    }

    /**
     * Get GPR35's SNVS_TEMP_DET_OFFSET_LOW field.
     *
     * SNVS temperature detect offset of low temperature boundary
     */
    inline IOMUXC_SNVS_GPR_GPR35_SNVS_TEMP_DET_OFFSET_LOW
    get_GPR35_SNVS_TEMP_DET_OFFSET_LOW() volatile
    {
        return IOMUXC_SNVS_GPR_GPR35_SNVS_TEMP_DET_OFFSET_LOW((GPR35 >> 30u) &
                                                              0b11u);
    }

    /**
     * Set GPR35's SNVS_TEMP_DET_OFFSET_LOW field.
     *
     * SNVS temperature detect offset of low temperature boundary
     */
    inline void set_GPR35_SNVS_TEMP_DET_OFFSET_LOW(
        IOMUXC_SNVS_GPR_GPR35_SNVS_TEMP_DET_OFFSET_LOW value) volatile
    {
        uint32_t curr = GPR35;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        GPR35 = curr;
    }

    /**
     * Get GPR35's SNVS_TEMP_DET_OFFSET_HIGH field.
     *
     * SNVS temperature detect offset of high temperature boundary
     */
    inline IOMUXC_SNVS_GPR_GPR35_SNVS_TEMP_DET_OFFSET_HIGH
    get_GPR35_SNVS_TEMP_DET_OFFSET_HIGH() volatile
    {
        return IOMUXC_SNVS_GPR_GPR35_SNVS_TEMP_DET_OFFSET_HIGH((GPR35 >> 28u) &
                                                               0b11u);
    }

    /**
     * Set GPR35's SNVS_TEMP_DET_OFFSET_HIGH field.
     *
     * SNVS temperature detect offset of high temperature boundary
     */
    inline void set_GPR35_SNVS_TEMP_DET_OFFSET_HIGH(
        IOMUXC_SNVS_GPR_GPR35_SNVS_TEMP_DET_OFFSET_HIGH value) volatile
    {
        uint32_t curr = GPR35;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        GPR35 = curr;
    }

    /**
     * Get GPR35's SNVS_TEMP_DET_TRIM field.
     *
     * SNVS temperature detect trim
     */
    inline uint16_t get_GPR35_SNVS_TEMP_DET_TRIM() volatile
    {
        return (GPR35 >> 16u) & 0b111111111111u;
    }

    /**
     * Set GPR35's SNVS_TEMP_DET_TRIM field.
     *
     * SNVS temperature detect trim
     */
    inline void set_GPR35_SNVS_TEMP_DET_TRIM(uint16_t value) volatile
    {
        uint32_t curr = GPR35;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        GPR35 = curr;
    }

    /**
     * Get GPR35's SNVS_TEMP_DET_TRIM_SEL bit.
     *
     * SNVS temperature detect trim select
     */
    inline bool get_GPR35_SNVS_TEMP_DET_TRIM_SEL() volatile
    {
        return GPR35 & (1u << 15u);
    }

    /**
     * Set GPR35's SNVS_TEMP_DET_TRIM_SEL bit.
     *
     * SNVS temperature detect trim select
     */
    inline void set_GPR35_SNVS_TEMP_DET_TRIM_SEL() volatile
    {
        GPR35 |= 1u << 15u;
    }

    /**
     * Clear GPR35's SNVS_TEMP_DET_TRIM_SEL bit.
     *
     * SNVS temperature detect trim select
     */
    inline void clear_GPR35_SNVS_TEMP_DET_TRIM_SEL() volatile
    {
        GPR35 &= ~(1u << 15u);
    }

    /**
     * Toggle GPR35's SNVS_TEMP_DET_TRIM_SEL bit.
     *
     * SNVS temperature detect trim select
     */
    inline void toggle_GPR35_SNVS_TEMP_DET_TRIM_SEL() volatile
    {
        GPR35 ^= 1u << 15u;
    }

    /**
     * Get GPR35's SNVS_VOLT_DET_TRIM field.
     *
     * SNVS voltage detect trim
     */
    inline uint8_t get_GPR35_SNVS_VOLT_DET_TRIM() volatile
    {
        return (GPR35 >> 4u) & 0b11111111u;
    }

    /**
     * Set GPR35's SNVS_VOLT_DET_TRIM field.
     *
     * SNVS voltage detect trim
     */
    inline void set_GPR35_SNVS_VOLT_DET_TRIM(uint8_t value) volatile
    {
        uint32_t curr = GPR35;

        curr &= ~(0b11111111u << 4u);
        curr |= (value & 0b11111111u) << 4u;

        GPR35 = curr;
    }

    /**
     * Get GPR35's SNVS_VOLT_DET_TRIM_SEL bit.
     *
     * SNVS voltage detect trim select
     */
    inline bool get_GPR35_SNVS_VOLT_DET_TRIM_SEL() volatile
    {
        return GPR35 & (1u << 3u);
    }

    /**
     * Set GPR35's SNVS_VOLT_DET_TRIM_SEL bit.
     *
     * SNVS voltage detect trim select
     */
    inline void set_GPR35_SNVS_VOLT_DET_TRIM_SEL() volatile
    {
        GPR35 |= 1u << 3u;
    }

    /**
     * Clear GPR35's SNVS_VOLT_DET_TRIM_SEL bit.
     *
     * SNVS voltage detect trim select
     */
    inline void clear_GPR35_SNVS_VOLT_DET_TRIM_SEL() volatile
    {
        GPR35 &= ~(1u << 3u);
    }

    /**
     * Toggle GPR35's SNVS_VOLT_DET_TRIM_SEL bit.
     *
     * SNVS voltage detect trim select
     */
    inline void toggle_GPR35_SNVS_VOLT_DET_TRIM_SEL() volatile
    {
        GPR35 ^= 1u << 3u;
    }

    /**
     * Get GPR35's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline bool get_GPR35_LOCK() volatile
    {
        return GPR35 & (1u << 0u);
    }

    /**
     * Set GPR35's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void set_GPR35_LOCK() volatile
    {
        GPR35 |= 1u << 0u;
    }

    /**
     * Clear GPR35's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void clear_GPR35_LOCK() volatile
    {
        GPR35 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR35's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void toggle_GPR35_LOCK() volatile
    {
        GPR35 ^= 1u << 0u;
    }

    /**
     * Get all of GPR35's bit fields.
     *
     * (read-write) GPR35 General Purpose Register
     */
    inline void get_GPR35(IOMUXC_SNVS_GPR_GPR35_SNVS_TEMP_DET_OFFSET_LOW
                              &SNVS_TEMP_DET_OFFSET_LOW,
                          IOMUXC_SNVS_GPR_GPR35_SNVS_TEMP_DET_OFFSET_HIGH
                              &SNVS_TEMP_DET_OFFSET_HIGH,
                          uint16_t &SNVS_TEMP_DET_TRIM,
                          bool &SNVS_TEMP_DET_TRIM_SEL,
                          uint8_t &SNVS_VOLT_DET_TRIM,
                          bool &SNVS_VOLT_DET_TRIM_SEL, bool &LOCK) volatile
    {
        uint32_t curr = GPR35;

        SNVS_TEMP_DET_OFFSET_LOW =
            IOMUXC_SNVS_GPR_GPR35_SNVS_TEMP_DET_OFFSET_LOW((curr >> 30u) &
                                                           0b11u);
        SNVS_TEMP_DET_OFFSET_HIGH =
            IOMUXC_SNVS_GPR_GPR35_SNVS_TEMP_DET_OFFSET_HIGH((curr >> 28u) &
                                                            0b11u);
        SNVS_TEMP_DET_TRIM = (curr >> 16u) & 0b111111111111u;
        SNVS_TEMP_DET_TRIM_SEL = curr & (1u << 15u);
        SNVS_VOLT_DET_TRIM = (curr >> 4u) & 0b11111111u;
        SNVS_VOLT_DET_TRIM_SEL = curr & (1u << 3u);
        LOCK = curr & (1u << 0u);
    }

    /**
     * Set all of GPR35's bit fields.
     *
     * (read-write) GPR35 General Purpose Register
     */
    inline void set_GPR35(IOMUXC_SNVS_GPR_GPR35_SNVS_TEMP_DET_OFFSET_LOW
                              SNVS_TEMP_DET_OFFSET_LOW,
                          IOMUXC_SNVS_GPR_GPR35_SNVS_TEMP_DET_OFFSET_HIGH
                              SNVS_TEMP_DET_OFFSET_HIGH,
                          uint16_t SNVS_TEMP_DET_TRIM,
                          bool SNVS_TEMP_DET_TRIM_SEL,
                          uint8_t SNVS_VOLT_DET_TRIM,
                          bool SNVS_VOLT_DET_TRIM_SEL, bool LOCK) volatile
    {
        uint32_t curr = GPR35;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(SNVS_TEMP_DET_OFFSET_LOW) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(SNVS_TEMP_DET_OFFSET_HIGH) & 0b11u) << 28u;
        curr &= ~(0b111111111111u << 16u);
        curr |= (SNVS_TEMP_DET_TRIM & 0b111111111111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (SNVS_TEMP_DET_TRIM_SEL & 0b1u) << 15u;
        curr &= ~(0b11111111u << 4u);
        curr |= (SNVS_VOLT_DET_TRIM & 0b11111111u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SNVS_VOLT_DET_TRIM_SEL & 0b1u) << 3u;
        curr &= ~(0b1u << 0u);
        curr |= (LOCK & 0b1u) << 0u;

        GPR35 = curr;
    }

    /**
     * Get GPR36's SNVS_SRAM_PSWSMALL bit.
     *
     * SNVS SRAM small switch control bit
     */
    inline bool get_GPR36_SNVS_SRAM_PSWSMALL() volatile
    {
        return GPR36 & (1u << 31u);
    }

    /**
     * Set GPR36's SNVS_SRAM_PSWSMALL bit.
     *
     * SNVS SRAM small switch control bit
     */
    inline void set_GPR36_SNVS_SRAM_PSWSMALL() volatile
    {
        GPR36 |= 1u << 31u;
    }

    /**
     * Clear GPR36's SNVS_SRAM_PSWSMALL bit.
     *
     * SNVS SRAM small switch control bit
     */
    inline void clear_GPR36_SNVS_SRAM_PSWSMALL() volatile
    {
        GPR36 &= ~(1u << 31u);
    }

    /**
     * Toggle GPR36's SNVS_SRAM_PSWSMALL bit.
     *
     * SNVS SRAM small switch control bit
     */
    inline void toggle_GPR36_SNVS_SRAM_PSWSMALL() volatile
    {
        GPR36 ^= 1u << 31u;
    }

    /**
     * Get GPR36's SNVS_SRAM_PSWSMALLMP_FORCE bit.
     *
     * SNVS SRAM small switch control bit for peripheral
     */
    inline bool get_GPR36_SNVS_SRAM_PSWSMALLMP_FORCE() volatile
    {
        return GPR36 & (1u << 30u);
    }

    /**
     * Set GPR36's SNVS_SRAM_PSWSMALLMP_FORCE bit.
     *
     * SNVS SRAM small switch control bit for peripheral
     */
    inline void set_GPR36_SNVS_SRAM_PSWSMALLMP_FORCE() volatile
    {
        GPR36 |= 1u << 30u;
    }

    /**
     * Clear GPR36's SNVS_SRAM_PSWSMALLMP_FORCE bit.
     *
     * SNVS SRAM small switch control bit for peripheral
     */
    inline void clear_GPR36_SNVS_SRAM_PSWSMALLMP_FORCE() volatile
    {
        GPR36 &= ~(1u << 30u);
    }

    /**
     * Toggle GPR36's SNVS_SRAM_PSWSMALLMP_FORCE bit.
     *
     * SNVS SRAM small switch control bit for peripheral
     */
    inline void toggle_GPR36_SNVS_SRAM_PSWSMALLMP_FORCE() volatile
    {
        GPR36 ^= 1u << 30u;
    }

    /**
     * Get GPR36's SNVS_SRAM_PSWLARGE bit.
     *
     * SNVS SRAM large switch control bit
     */
    inline bool get_GPR36_SNVS_SRAM_PSWLARGE() volatile
    {
        return GPR36 & (1u << 29u);
    }

    /**
     * Set GPR36's SNVS_SRAM_PSWLARGE bit.
     *
     * SNVS SRAM large switch control bit
     */
    inline void set_GPR36_SNVS_SRAM_PSWLARGE() volatile
    {
        GPR36 |= 1u << 29u;
    }

    /**
     * Clear GPR36's SNVS_SRAM_PSWLARGE bit.
     *
     * SNVS SRAM large switch control bit
     */
    inline void clear_GPR36_SNVS_SRAM_PSWLARGE() volatile
    {
        GPR36 &= ~(1u << 29u);
    }

    /**
     * Toggle GPR36's SNVS_SRAM_PSWLARGE bit.
     *
     * SNVS SRAM large switch control bit
     */
    inline void toggle_GPR36_SNVS_SRAM_PSWLARGE() volatile
    {
        GPR36 ^= 1u << 29u;
    }

    /**
     * Get GPR36's SNVS_SRAM_PSWLARGEMP_FORCE bit.
     *
     * SNVS SRAM large switch control bit for peripheral
     */
    inline bool get_GPR36_SNVS_SRAM_PSWLARGEMP_FORCE() volatile
    {
        return GPR36 & (1u << 28u);
    }

    /**
     * Set GPR36's SNVS_SRAM_PSWLARGEMP_FORCE bit.
     *
     * SNVS SRAM large switch control bit for peripheral
     */
    inline void set_GPR36_SNVS_SRAM_PSWLARGEMP_FORCE() volatile
    {
        GPR36 |= 1u << 28u;
    }

    /**
     * Clear GPR36's SNVS_SRAM_PSWLARGEMP_FORCE bit.
     *
     * SNVS SRAM large switch control bit for peripheral
     */
    inline void clear_GPR36_SNVS_SRAM_PSWLARGEMP_FORCE() volatile
    {
        GPR36 &= ~(1u << 28u);
    }

    /**
     * Toggle GPR36's SNVS_SRAM_PSWLARGEMP_FORCE bit.
     *
     * SNVS SRAM large switch control bit for peripheral
     */
    inline void toggle_GPR36_SNVS_SRAM_PSWLARGEMP_FORCE() volatile
    {
        GPR36 ^= 1u << 28u;
    }

    /**
     * Get GPR36's SNVS_SRAM_STDBY bit.
     *
     * SNVS SRAM standby enable bit
     */
    inline bool get_GPR36_SNVS_SRAM_STDBY() volatile
    {
        return GPR36 & (1u << 27u);
    }

    /**
     * Set GPR36's SNVS_SRAM_STDBY bit.
     *
     * SNVS SRAM standby enable bit
     */
    inline void set_GPR36_SNVS_SRAM_STDBY() volatile
    {
        GPR36 |= 1u << 27u;
    }

    /**
     * Clear GPR36's SNVS_SRAM_STDBY bit.
     *
     * SNVS SRAM standby enable bit
     */
    inline void clear_GPR36_SNVS_SRAM_STDBY() volatile
    {
        GPR36 &= ~(1u << 27u);
    }

    /**
     * Toggle GPR36's SNVS_SRAM_STDBY bit.
     *
     * SNVS SRAM standby enable bit
     */
    inline void toggle_GPR36_SNVS_SRAM_STDBY() volatile
    {
        GPR36 ^= 1u << 27u;
    }

    /**
     * Get GPR36's SNVS_SRAM_SLEEP bit.
     *
     * SNVS SRAM power-down enable bit
     */
    inline bool get_GPR36_SNVS_SRAM_SLEEP() volatile
    {
        return GPR36 & (1u << 26u);
    }

    /**
     * Set GPR36's SNVS_SRAM_SLEEP bit.
     *
     * SNVS SRAM power-down enable bit
     */
    inline void set_GPR36_SNVS_SRAM_SLEEP() volatile
    {
        GPR36 |= 1u << 26u;
    }

    /**
     * Clear GPR36's SNVS_SRAM_SLEEP bit.
     *
     * SNVS SRAM power-down enable bit
     */
    inline void clear_GPR36_SNVS_SRAM_SLEEP() volatile
    {
        GPR36 &= ~(1u << 26u);
    }

    /**
     * Toggle GPR36's SNVS_SRAM_SLEEP bit.
     *
     * SNVS SRAM power-down enable bit
     */
    inline void toggle_GPR36_SNVS_SRAM_SLEEP() volatile
    {
        GPR36 ^= 1u << 26u;
    }

    /**
     * Get GPR36's SNVSDIG_SNVS1P8_ISO_EN bit.
     *
     * SNVS RAM isolation enable bit
     */
    inline bool get_GPR36_SNVSDIG_SNVS1P8_ISO_EN() volatile
    {
        return GPR36 & (1u << 23u);
    }

    /**
     * Set GPR36's SNVSDIG_SNVS1P8_ISO_EN bit.
     *
     * SNVS RAM isolation enable bit
     */
    inline void set_GPR36_SNVSDIG_SNVS1P8_ISO_EN() volatile
    {
        GPR36 |= 1u << 23u;
    }

    /**
     * Clear GPR36's SNVSDIG_SNVS1P8_ISO_EN bit.
     *
     * SNVS RAM isolation enable bit
     */
    inline void clear_GPR36_SNVSDIG_SNVS1P8_ISO_EN() volatile
    {
        GPR36 &= ~(1u << 23u);
    }

    /**
     * Toggle GPR36's SNVSDIG_SNVS1P8_ISO_EN bit.
     *
     * SNVS RAM isolation enable bit
     */
    inline void toggle_GPR36_SNVSDIG_SNVS1P8_ISO_EN() volatile
    {
        GPR36 ^= 1u << 23u;
    }

    /**
     * Get all of GPR36's bit fields.
     *
     * (read-write) GPR36 General Purpose Register
     */
    inline void get_GPR36(bool &SNVS_SRAM_PSWSMALL,
                          bool &SNVS_SRAM_PSWSMALLMP_FORCE,
                          bool &SNVS_SRAM_PSWLARGE,
                          bool &SNVS_SRAM_PSWLARGEMP_FORCE,
                          bool &SNVS_SRAM_STDBY, bool &SNVS_SRAM_SLEEP,
                          bool &SNVSDIG_SNVS1P8_ISO_EN) volatile
    {
        uint32_t curr = GPR36;

        SNVS_SRAM_PSWSMALL = curr & (1u << 31u);
        SNVS_SRAM_PSWSMALLMP_FORCE = curr & (1u << 30u);
        SNVS_SRAM_PSWLARGE = curr & (1u << 29u);
        SNVS_SRAM_PSWLARGEMP_FORCE = curr & (1u << 28u);
        SNVS_SRAM_STDBY = curr & (1u << 27u);
        SNVS_SRAM_SLEEP = curr & (1u << 26u);
        SNVSDIG_SNVS1P8_ISO_EN = curr & (1u << 23u);
    }

    /**
     * Set all of GPR36's bit fields.
     *
     * (read-write) GPR36 General Purpose Register
     */
    inline void set_GPR36(bool SNVS_SRAM_PSWSMALL,
                          bool SNVS_SRAM_PSWSMALLMP_FORCE,
                          bool SNVS_SRAM_PSWLARGE,
                          bool SNVS_SRAM_PSWLARGEMP_FORCE,
                          bool SNVS_SRAM_STDBY, bool SNVS_SRAM_SLEEP,
                          bool SNVSDIG_SNVS1P8_ISO_EN) volatile
    {
        uint32_t curr = GPR36;

        curr &= ~(0b1u << 31u);
        curr |= (SNVS_SRAM_PSWSMALL & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (SNVS_SRAM_PSWSMALLMP_FORCE & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (SNVS_SRAM_PSWLARGE & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (SNVS_SRAM_PSWLARGEMP_FORCE & 0b1u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (SNVS_SRAM_STDBY & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (SNVS_SRAM_SLEEP & 0b1u) << 26u;
        curr &= ~(0b1u << 23u);
        curr |= (SNVSDIG_SNVS1P8_ISO_EN & 0b1u) << 23u;

        GPR36 = curr;
    }

    /**
     * Get GPR37's SNVS_TAMPER_PUS field.
     *
     * SNVS tamper detect pin pull selection bit
     */
    inline uint16_t get_GPR37_SNVS_TAMPER_PUS() volatile
    {
        return (GPR37 >> 11u) & 0b1111111111u;
    }

    /**
     * Set GPR37's SNVS_TAMPER_PUS field.
     *
     * SNVS tamper detect pin pull selection bit
     */
    inline void set_GPR37_SNVS_TAMPER_PUS(uint16_t value) volatile
    {
        uint32_t curr = GPR37;

        curr &= ~(0b1111111111u << 11u);
        curr |= (value & 0b1111111111u) << 11u;

        GPR37 = curr;
    }

    /**
     * Get GPR37's SNVS_TAMPER_PUE field.
     *
     * SNVS tamper detect pin pull enable bit
     */
    inline uint16_t get_GPR37_SNVS_TAMPER_PUE() volatile
    {
        return (GPR37 >> 1u) & 0b1111111111u;
    }

    /**
     * Set GPR37's SNVS_TAMPER_PUE field.
     *
     * SNVS tamper detect pin pull enable bit
     */
    inline void set_GPR37_SNVS_TAMPER_PUE(uint16_t value) volatile
    {
        uint32_t curr = GPR37;

        curr &= ~(0b1111111111u << 1u);
        curr |= (value & 0b1111111111u) << 1u;

        GPR37 = curr;
    }

    /**
     * Get GPR37's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline bool get_GPR37_LOCK() volatile
    {
        return GPR37 & (1u << 0u);
    }

    /**
     * Set GPR37's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void set_GPR37_LOCK() volatile
    {
        GPR37 |= 1u << 0u;
    }

    /**
     * Clear GPR37's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void clear_GPR37_LOCK() volatile
    {
        GPR37 &= ~(1u << 0u);
    }

    /**
     * Toggle GPR37's LOCK bit.
     *
     * Lock the write to bit 31:1
     */
    inline void toggle_GPR37_LOCK() volatile
    {
        GPR37 ^= 1u << 0u;
    }

    /**
     * Get all of GPR37's bit fields.
     *
     * (read-write) GPR37 General Purpose Register
     */
    inline void get_GPR37(uint16_t &SNVS_TAMPER_PUS, uint16_t &SNVS_TAMPER_PUE,
                          bool &LOCK) volatile
    {
        uint32_t curr = GPR37;

        SNVS_TAMPER_PUS = (curr >> 11u) & 0b1111111111u;
        SNVS_TAMPER_PUE = (curr >> 1u) & 0b1111111111u;
        LOCK = curr & (1u << 0u);
    }

    /**
     * Set all of GPR37's bit fields.
     *
     * (read-write) GPR37 General Purpose Register
     */
    inline void set_GPR37(uint16_t SNVS_TAMPER_PUS, uint16_t SNVS_TAMPER_PUE,
                          bool LOCK) volatile
    {
        uint32_t curr = GPR37;

        curr &= ~(0b1111111111u << 11u);
        curr |= (SNVS_TAMPER_PUS & 0b1111111111u) << 11u;
        curr &= ~(0b1111111111u << 1u);
        curr |= (SNVS_TAMPER_PUE & 0b1111111111u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (LOCK & 0b1u) << 0u;

        GPR37 = curr;
    }
};

static_assert(sizeof(iomuxc_snvs_gpr) == iomuxc_snvs_gpr::size);

static volatile iomuxc_snvs_gpr *const IOMUXC_SNVS_GPR =
    reinterpret_cast<iomuxc_snvs_gpr *>(0x40C98000);

}; // namespace MIMXRT1176::CM7
