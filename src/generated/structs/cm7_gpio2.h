/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/CM7_GPIO2_ICR1_ICR0.h"
#include "../enums/CM7_GPIO2_ICR1_ICR1.h"
#include "../enums/CM7_GPIO2_ICR1_ICR10.h"
#include "../enums/CM7_GPIO2_ICR1_ICR11.h"
#include "../enums/CM7_GPIO2_ICR1_ICR12.h"
#include "../enums/CM7_GPIO2_ICR1_ICR13.h"
#include "../enums/CM7_GPIO2_ICR1_ICR14.h"
#include "../enums/CM7_GPIO2_ICR1_ICR15.h"
#include "../enums/CM7_GPIO2_ICR1_ICR2.h"
#include "../enums/CM7_GPIO2_ICR1_ICR3.h"
#include "../enums/CM7_GPIO2_ICR1_ICR4.h"
#include "../enums/CM7_GPIO2_ICR1_ICR5.h"
#include "../enums/CM7_GPIO2_ICR1_ICR6.h"
#include "../enums/CM7_GPIO2_ICR1_ICR7.h"
#include "../enums/CM7_GPIO2_ICR1_ICR8.h"
#include "../enums/CM7_GPIO2_ICR1_ICR9.h"
#include "../enums/CM7_GPIO2_ICR2_ICR16.h"
#include "../enums/CM7_GPIO2_ICR2_ICR17.h"
#include "../enums/CM7_GPIO2_ICR2_ICR18.h"
#include "../enums/CM7_GPIO2_ICR2_ICR19.h"
#include "../enums/CM7_GPIO2_ICR2_ICR20.h"
#include "../enums/CM7_GPIO2_ICR2_ICR21.h"
#include "../enums/CM7_GPIO2_ICR2_ICR22.h"
#include "../enums/CM7_GPIO2_ICR2_ICR23.h"
#include "../enums/CM7_GPIO2_ICR2_ICR24.h"
#include "../enums/CM7_GPIO2_ICR2_ICR25.h"
#include "../enums/CM7_GPIO2_ICR2_ICR26.h"
#include "../enums/CM7_GPIO2_ICR2_ICR27.h"
#include "../enums/CM7_GPIO2_ICR2_ICR28.h"
#include "../enums/CM7_GPIO2_ICR2_ICR29.h"
#include "../enums/CM7_GPIO2_ICR2_ICR30.h"
#include "../enums/CM7_GPIO2_ICR2_ICR31.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * GPIO
 */
struct [[gnu::packed]] cm7_gpio2
{
    /* Constant attributes. */
    static constexpr std::size_t size = 144; /*!< cm7_gpio2's size in bytes. */

    /* Fields. */
    uint32_t DR;   /*!< (read-write) GPIO data register */
    uint32_t GDIR; /*!< (read-write) GPIO direction register */
    uint32_t PSR;  /*!< (read-write) GPIO pad status register */
    uint32_t ICR1; /*!< (read-write) GPIO interrupt configuration register1 */
    uint32_t ICR2; /*!< (read-write) GPIO interrupt configuration register2 */
    uint32_t IMR;  /*!< (read-write) GPIO interrupt mask register */
    uint32_t ISR;  /*!< (read-write) GPIO interrupt status register */
    uint32_t EDGE_SEL; /*!< (read-write) GPIO edge select register */
    static constexpr std::size_t reserved_padding0_length = 25;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t DR_SET;    /*!< (read-write) GPIO data register SET */
    uint32_t DR_CLEAR;  /*!< (read-write) GPIO data register CLEAR */
    uint32_t DR_TOGGLE; /*!< (read-write) GPIO data register TOGGLE */

    /* Methods. */

    /**
     * Get DR's DR field.
     *
     * DR data bits
     */
    inline uint32_t get_DR_DR() volatile
    {
        return (DR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DR's DR field.
     *
     * DR data bits
     */
    inline void set_DR_DR(uint32_t value) volatile
    {
        uint32_t curr = DR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DR = curr;
    }

    /**
     * Get GDIR's GDIR field.
     *
     * GPIO direction bits
     */
    inline uint32_t get_GDIR_GDIR() volatile
    {
        return (GDIR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GDIR's GDIR field.
     *
     * GPIO direction bits
     */
    inline void set_GDIR_GDIR(uint32_t value) volatile
    {
        uint32_t curr = GDIR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GDIR = curr;
    }

    /**
     * Get PSR's PSR field.
     *
     * GPIO pad status bits
     */
    inline uint32_t get_PSR_PSR() volatile
    {
        return (PSR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get ICR1's ICR15 field.
     *
     * Interrupt configuration field for GPIO interrupt 15
     */
    inline CM7_GPIO2_ICR1_ICR15 get_ICR1_ICR15() volatile
    {
        return CM7_GPIO2_ICR1_ICR15((ICR1 >> 30u) & 0b11u);
    }

    /**
     * Set ICR1's ICR15 field.
     *
     * Interrupt configuration field for GPIO interrupt 15
     */
    inline void set_ICR1_ICR15(CM7_GPIO2_ICR1_ICR15 value) volatile
    {
        uint32_t curr = ICR1;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        ICR1 = curr;
    }

    /**
     * Get ICR1's ICR14 field.
     *
     * Interrupt configuration field for GPIO interrupt 14
     */
    inline CM7_GPIO2_ICR1_ICR14 get_ICR1_ICR14() volatile
    {
        return CM7_GPIO2_ICR1_ICR14((ICR1 >> 28u) & 0b11u);
    }

    /**
     * Set ICR1's ICR14 field.
     *
     * Interrupt configuration field for GPIO interrupt 14
     */
    inline void set_ICR1_ICR14(CM7_GPIO2_ICR1_ICR14 value) volatile
    {
        uint32_t curr = ICR1;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        ICR1 = curr;
    }

    /**
     * Get ICR1's ICR13 field.
     *
     * Interrupt configuration field for GPIO interrupt 13
     */
    inline CM7_GPIO2_ICR1_ICR13 get_ICR1_ICR13() volatile
    {
        return CM7_GPIO2_ICR1_ICR13((ICR1 >> 26u) & 0b11u);
    }

    /**
     * Set ICR1's ICR13 field.
     *
     * Interrupt configuration field for GPIO interrupt 13
     */
    inline void set_ICR1_ICR13(CM7_GPIO2_ICR1_ICR13 value) volatile
    {
        uint32_t curr = ICR1;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        ICR1 = curr;
    }

    /**
     * Get ICR1's ICR12 field.
     *
     * Interrupt configuration field for GPIO interrupt 12
     */
    inline CM7_GPIO2_ICR1_ICR12 get_ICR1_ICR12() volatile
    {
        return CM7_GPIO2_ICR1_ICR12((ICR1 >> 24u) & 0b11u);
    }

    /**
     * Set ICR1's ICR12 field.
     *
     * Interrupt configuration field for GPIO interrupt 12
     */
    inline void set_ICR1_ICR12(CM7_GPIO2_ICR1_ICR12 value) volatile
    {
        uint32_t curr = ICR1;

        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(value) & 0b11u) << 24u;

        ICR1 = curr;
    }

    /**
     * Get ICR1's ICR11 field.
     *
     * Interrupt configuration field for GPIO interrupt 11
     */
    inline CM7_GPIO2_ICR1_ICR11 get_ICR1_ICR11() volatile
    {
        return CM7_GPIO2_ICR1_ICR11((ICR1 >> 22u) & 0b11u);
    }

    /**
     * Set ICR1's ICR11 field.
     *
     * Interrupt configuration field for GPIO interrupt 11
     */
    inline void set_ICR1_ICR11(CM7_GPIO2_ICR1_ICR11 value) volatile
    {
        uint32_t curr = ICR1;

        curr &= ~(0b11u << 22u);
        curr |= (std::to_underlying(value) & 0b11u) << 22u;

        ICR1 = curr;
    }

    /**
     * Get ICR1's ICR10 field.
     *
     * Interrupt configuration field for GPIO interrupt 10
     */
    inline CM7_GPIO2_ICR1_ICR10 get_ICR1_ICR10() volatile
    {
        return CM7_GPIO2_ICR1_ICR10((ICR1 >> 20u) & 0b11u);
    }

    /**
     * Set ICR1's ICR10 field.
     *
     * Interrupt configuration field for GPIO interrupt 10
     */
    inline void set_ICR1_ICR10(CM7_GPIO2_ICR1_ICR10 value) volatile
    {
        uint32_t curr = ICR1;

        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(value) & 0b11u) << 20u;

        ICR1 = curr;
    }

    /**
     * Get ICR1's ICR9 field.
     *
     * Interrupt configuration field for GPIO interrupt 9
     */
    inline CM7_GPIO2_ICR1_ICR9 get_ICR1_ICR9() volatile
    {
        return CM7_GPIO2_ICR1_ICR9((ICR1 >> 18u) & 0b11u);
    }

    /**
     * Set ICR1's ICR9 field.
     *
     * Interrupt configuration field for GPIO interrupt 9
     */
    inline void set_ICR1_ICR9(CM7_GPIO2_ICR1_ICR9 value) volatile
    {
        uint32_t curr = ICR1;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        ICR1 = curr;
    }

    /**
     * Get ICR1's ICR8 field.
     *
     * Interrupt configuration field for GPIO interrupt 8
     */
    inline CM7_GPIO2_ICR1_ICR8 get_ICR1_ICR8() volatile
    {
        return CM7_GPIO2_ICR1_ICR8((ICR1 >> 16u) & 0b11u);
    }

    /**
     * Set ICR1's ICR8 field.
     *
     * Interrupt configuration field for GPIO interrupt 8
     */
    inline void set_ICR1_ICR8(CM7_GPIO2_ICR1_ICR8 value) volatile
    {
        uint32_t curr = ICR1;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        ICR1 = curr;
    }

    /**
     * Get ICR1's ICR7 field.
     *
     * Interrupt configuration field for GPIO interrupt 7
     */
    inline CM7_GPIO2_ICR1_ICR7 get_ICR1_ICR7() volatile
    {
        return CM7_GPIO2_ICR1_ICR7((ICR1 >> 14u) & 0b11u);
    }

    /**
     * Set ICR1's ICR7 field.
     *
     * Interrupt configuration field for GPIO interrupt 7
     */
    inline void set_ICR1_ICR7(CM7_GPIO2_ICR1_ICR7 value) volatile
    {
        uint32_t curr = ICR1;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        ICR1 = curr;
    }

    /**
     * Get ICR1's ICR6 field.
     *
     * Interrupt configuration field for GPIO interrupt 6
     */
    inline CM7_GPIO2_ICR1_ICR6 get_ICR1_ICR6() volatile
    {
        return CM7_GPIO2_ICR1_ICR6((ICR1 >> 12u) & 0b11u);
    }

    /**
     * Set ICR1's ICR6 field.
     *
     * Interrupt configuration field for GPIO interrupt 6
     */
    inline void set_ICR1_ICR6(CM7_GPIO2_ICR1_ICR6 value) volatile
    {
        uint32_t curr = ICR1;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        ICR1 = curr;
    }

    /**
     * Get ICR1's ICR5 field.
     *
     * Interrupt configuration field for GPIO interrupt 5
     */
    inline CM7_GPIO2_ICR1_ICR5 get_ICR1_ICR5() volatile
    {
        return CM7_GPIO2_ICR1_ICR5((ICR1 >> 10u) & 0b11u);
    }

    /**
     * Set ICR1's ICR5 field.
     *
     * Interrupt configuration field for GPIO interrupt 5
     */
    inline void set_ICR1_ICR5(CM7_GPIO2_ICR1_ICR5 value) volatile
    {
        uint32_t curr = ICR1;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        ICR1 = curr;
    }

    /**
     * Get ICR1's ICR4 field.
     *
     * Interrupt configuration field for GPIO interrupt 4
     */
    inline CM7_GPIO2_ICR1_ICR4 get_ICR1_ICR4() volatile
    {
        return CM7_GPIO2_ICR1_ICR4((ICR1 >> 8u) & 0b11u);
    }

    /**
     * Set ICR1's ICR4 field.
     *
     * Interrupt configuration field for GPIO interrupt 4
     */
    inline void set_ICR1_ICR4(CM7_GPIO2_ICR1_ICR4 value) volatile
    {
        uint32_t curr = ICR1;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        ICR1 = curr;
    }

    /**
     * Get ICR1's ICR3 field.
     *
     * Interrupt configuration field for GPIO interrupt 3
     */
    inline CM7_GPIO2_ICR1_ICR3 get_ICR1_ICR3() volatile
    {
        return CM7_GPIO2_ICR1_ICR3((ICR1 >> 6u) & 0b11u);
    }

    /**
     * Set ICR1's ICR3 field.
     *
     * Interrupt configuration field for GPIO interrupt 3
     */
    inline void set_ICR1_ICR3(CM7_GPIO2_ICR1_ICR3 value) volatile
    {
        uint32_t curr = ICR1;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        ICR1 = curr;
    }

    /**
     * Get ICR1's ICR2 field.
     *
     * Interrupt configuration field for GPIO interrupt 2
     */
    inline CM7_GPIO2_ICR1_ICR2 get_ICR1_ICR2() volatile
    {
        return CM7_GPIO2_ICR1_ICR2((ICR1 >> 4u) & 0b11u);
    }

    /**
     * Set ICR1's ICR2 field.
     *
     * Interrupt configuration field for GPIO interrupt 2
     */
    inline void set_ICR1_ICR2(CM7_GPIO2_ICR1_ICR2 value) volatile
    {
        uint32_t curr = ICR1;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        ICR1 = curr;
    }

    /**
     * Get ICR1's ICR1 field.
     *
     * Interrupt configuration field for GPIO interrupt 1
     */
    inline CM7_GPIO2_ICR1_ICR1 get_ICR1_ICR1() volatile
    {
        return CM7_GPIO2_ICR1_ICR1((ICR1 >> 2u) & 0b11u);
    }

    /**
     * Set ICR1's ICR1 field.
     *
     * Interrupt configuration field for GPIO interrupt 1
     */
    inline void set_ICR1_ICR1(CM7_GPIO2_ICR1_ICR1 value) volatile
    {
        uint32_t curr = ICR1;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        ICR1 = curr;
    }

    /**
     * Get ICR1's ICR0 field.
     *
     * Interrupt configuration field for GPIO interrupt 0
     */
    inline CM7_GPIO2_ICR1_ICR0 get_ICR1_ICR0() volatile
    {
        return CM7_GPIO2_ICR1_ICR0((ICR1 >> 0u) & 0b11u);
    }

    /**
     * Set ICR1's ICR0 field.
     *
     * Interrupt configuration field for GPIO interrupt 0
     */
    inline void set_ICR1_ICR0(CM7_GPIO2_ICR1_ICR0 value) volatile
    {
        uint32_t curr = ICR1;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        ICR1 = curr;
    }

    /**
     * Get all of ICR1's bit fields.
     *
     * (read-write) GPIO interrupt configuration register1
     */
    inline void get_ICR1(
        CM7_GPIO2_ICR1_ICR15 &ICR15, CM7_GPIO2_ICR1_ICR14 &ICR14,
        CM7_GPIO2_ICR1_ICR13 &ICR13, CM7_GPIO2_ICR1_ICR12 &ICR12,
        CM7_GPIO2_ICR1_ICR11 &ICR11, CM7_GPIO2_ICR1_ICR10 &ICR10,
        CM7_GPIO2_ICR1_ICR9 &ICR9, CM7_GPIO2_ICR1_ICR8 &ICR8,
        CM7_GPIO2_ICR1_ICR7 &ICR7, CM7_GPIO2_ICR1_ICR6 &ICR6,
        CM7_GPIO2_ICR1_ICR5 &ICR5, CM7_GPIO2_ICR1_ICR4 &ICR4,
        CM7_GPIO2_ICR1_ICR3 &ICR3, CM7_GPIO2_ICR1_ICR2 &ICR2,
        CM7_GPIO2_ICR1_ICR1 &ICR1, CM7_GPIO2_ICR1_ICR0 &ICR0) volatile
    {
        uint32_t curr = ICR1;

        ICR15 = CM7_GPIO2_ICR1_ICR15((curr >> 30u) & 0b11u);
        ICR14 = CM7_GPIO2_ICR1_ICR14((curr >> 28u) & 0b11u);
        ICR13 = CM7_GPIO2_ICR1_ICR13((curr >> 26u) & 0b11u);
        ICR12 = CM7_GPIO2_ICR1_ICR12((curr >> 24u) & 0b11u);
        ICR11 = CM7_GPIO2_ICR1_ICR11((curr >> 22u) & 0b11u);
        ICR10 = CM7_GPIO2_ICR1_ICR10((curr >> 20u) & 0b11u);
        ICR9 = CM7_GPIO2_ICR1_ICR9((curr >> 18u) & 0b11u);
        ICR8 = CM7_GPIO2_ICR1_ICR8((curr >> 16u) & 0b11u);
        ICR7 = CM7_GPIO2_ICR1_ICR7((curr >> 14u) & 0b11u);
        ICR6 = CM7_GPIO2_ICR1_ICR6((curr >> 12u) & 0b11u);
        ICR5 = CM7_GPIO2_ICR1_ICR5((curr >> 10u) & 0b11u);
        ICR4 = CM7_GPIO2_ICR1_ICR4((curr >> 8u) & 0b11u);
        ICR3 = CM7_GPIO2_ICR1_ICR3((curr >> 6u) & 0b11u);
        ICR2 = CM7_GPIO2_ICR1_ICR2((curr >> 4u) & 0b11u);
        ICR1 = CM7_GPIO2_ICR1_ICR1((curr >> 2u) & 0b11u);
        ICR0 = CM7_GPIO2_ICR1_ICR0((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of ICR1's bit fields.
     *
     * (read-write) GPIO interrupt configuration register1
     */
    inline void set_ICR1(CM7_GPIO2_ICR1_ICR15 ICR15,
                         CM7_GPIO2_ICR1_ICR14 ICR14,
                         CM7_GPIO2_ICR1_ICR13 ICR13,
                         CM7_GPIO2_ICR1_ICR12 ICR12,
                         CM7_GPIO2_ICR1_ICR11 ICR11,
                         CM7_GPIO2_ICR1_ICR10 ICR10, CM7_GPIO2_ICR1_ICR9 ICR9,
                         CM7_GPIO2_ICR1_ICR8 ICR8, CM7_GPIO2_ICR1_ICR7 ICR7,
                         CM7_GPIO2_ICR1_ICR6 ICR6, CM7_GPIO2_ICR1_ICR5 ICR5,
                         CM7_GPIO2_ICR1_ICR4 ICR4, CM7_GPIO2_ICR1_ICR3 ICR3,
                         CM7_GPIO2_ICR1_ICR2 ICR2, CM7_GPIO2_ICR1_ICR1 ICR1,
                         CM7_GPIO2_ICR1_ICR0 ICR0) volatile
    {
        uint32_t curr = ICR1;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(ICR15) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(ICR14) & 0b11u) << 28u;
        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(ICR13) & 0b11u) << 26u;
        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(ICR12) & 0b11u) << 24u;
        curr &= ~(0b11u << 22u);
        curr |= (std::to_underlying(ICR11) & 0b11u) << 22u;
        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(ICR10) & 0b11u) << 20u;
        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(ICR9) & 0b11u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(ICR8) & 0b11u) << 16u;
        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(ICR7) & 0b11u) << 14u;
        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(ICR6) & 0b11u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(ICR5) & 0b11u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(ICR4) & 0b11u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(ICR3) & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(ICR2) & 0b11u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(ICR1) & 0b11u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(ICR0) & 0b11u) << 0u;

        ICR1 = curr;
    }

    /**
     * Get ICR2's ICR31 field.
     *
     * Interrupt configuration field for GPIO interrupt 31
     */
    inline CM7_GPIO2_ICR2_ICR31 get_ICR2_ICR31() volatile
    {
        return CM7_GPIO2_ICR2_ICR31((ICR2 >> 30u) & 0b11u);
    }

    /**
     * Set ICR2's ICR31 field.
     *
     * Interrupt configuration field for GPIO interrupt 31
     */
    inline void set_ICR2_ICR31(CM7_GPIO2_ICR2_ICR31 value) volatile
    {
        uint32_t curr = ICR2;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        ICR2 = curr;
    }

    /**
     * Get ICR2's ICR30 field.
     *
     * Interrupt configuration field for GPIO interrupt 30
     */
    inline CM7_GPIO2_ICR2_ICR30 get_ICR2_ICR30() volatile
    {
        return CM7_GPIO2_ICR2_ICR30((ICR2 >> 28u) & 0b11u);
    }

    /**
     * Set ICR2's ICR30 field.
     *
     * Interrupt configuration field for GPIO interrupt 30
     */
    inline void set_ICR2_ICR30(CM7_GPIO2_ICR2_ICR30 value) volatile
    {
        uint32_t curr = ICR2;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        ICR2 = curr;
    }

    /**
     * Get ICR2's ICR29 field.
     *
     * Interrupt configuration field for GPIO interrupt 29
     */
    inline CM7_GPIO2_ICR2_ICR29 get_ICR2_ICR29() volatile
    {
        return CM7_GPIO2_ICR2_ICR29((ICR2 >> 26u) & 0b11u);
    }

    /**
     * Set ICR2's ICR29 field.
     *
     * Interrupt configuration field for GPIO interrupt 29
     */
    inline void set_ICR2_ICR29(CM7_GPIO2_ICR2_ICR29 value) volatile
    {
        uint32_t curr = ICR2;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        ICR2 = curr;
    }

    /**
     * Get ICR2's ICR28 field.
     *
     * Interrupt configuration field for GPIO interrupt 28
     */
    inline CM7_GPIO2_ICR2_ICR28 get_ICR2_ICR28() volatile
    {
        return CM7_GPIO2_ICR2_ICR28((ICR2 >> 24u) & 0b11u);
    }

    /**
     * Set ICR2's ICR28 field.
     *
     * Interrupt configuration field for GPIO interrupt 28
     */
    inline void set_ICR2_ICR28(CM7_GPIO2_ICR2_ICR28 value) volatile
    {
        uint32_t curr = ICR2;

        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(value) & 0b11u) << 24u;

        ICR2 = curr;
    }

    /**
     * Get ICR2's ICR27 field.
     *
     * Interrupt configuration field for GPIO interrupt 27
     */
    inline CM7_GPIO2_ICR2_ICR27 get_ICR2_ICR27() volatile
    {
        return CM7_GPIO2_ICR2_ICR27((ICR2 >> 22u) & 0b11u);
    }

    /**
     * Set ICR2's ICR27 field.
     *
     * Interrupt configuration field for GPIO interrupt 27
     */
    inline void set_ICR2_ICR27(CM7_GPIO2_ICR2_ICR27 value) volatile
    {
        uint32_t curr = ICR2;

        curr &= ~(0b11u << 22u);
        curr |= (std::to_underlying(value) & 0b11u) << 22u;

        ICR2 = curr;
    }

    /**
     * Get ICR2's ICR26 field.
     *
     * Interrupt configuration field for GPIO interrupt 26
     */
    inline CM7_GPIO2_ICR2_ICR26 get_ICR2_ICR26() volatile
    {
        return CM7_GPIO2_ICR2_ICR26((ICR2 >> 20u) & 0b11u);
    }

    /**
     * Set ICR2's ICR26 field.
     *
     * Interrupt configuration field for GPIO interrupt 26
     */
    inline void set_ICR2_ICR26(CM7_GPIO2_ICR2_ICR26 value) volatile
    {
        uint32_t curr = ICR2;

        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(value) & 0b11u) << 20u;

        ICR2 = curr;
    }

    /**
     * Get ICR2's ICR25 field.
     *
     * Interrupt configuration field for GPIO interrupt 25
     */
    inline CM7_GPIO2_ICR2_ICR25 get_ICR2_ICR25() volatile
    {
        return CM7_GPIO2_ICR2_ICR25((ICR2 >> 18u) & 0b11u);
    }

    /**
     * Set ICR2's ICR25 field.
     *
     * Interrupt configuration field for GPIO interrupt 25
     */
    inline void set_ICR2_ICR25(CM7_GPIO2_ICR2_ICR25 value) volatile
    {
        uint32_t curr = ICR2;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        ICR2 = curr;
    }

    /**
     * Get ICR2's ICR24 field.
     *
     * Interrupt configuration field for GPIO interrupt 24
     */
    inline CM7_GPIO2_ICR2_ICR24 get_ICR2_ICR24() volatile
    {
        return CM7_GPIO2_ICR2_ICR24((ICR2 >> 16u) & 0b11u);
    }

    /**
     * Set ICR2's ICR24 field.
     *
     * Interrupt configuration field for GPIO interrupt 24
     */
    inline void set_ICR2_ICR24(CM7_GPIO2_ICR2_ICR24 value) volatile
    {
        uint32_t curr = ICR2;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        ICR2 = curr;
    }

    /**
     * Get ICR2's ICR23 field.
     *
     * Interrupt configuration field for GPIO interrupt 23
     */
    inline CM7_GPIO2_ICR2_ICR23 get_ICR2_ICR23() volatile
    {
        return CM7_GPIO2_ICR2_ICR23((ICR2 >> 14u) & 0b11u);
    }

    /**
     * Set ICR2's ICR23 field.
     *
     * Interrupt configuration field for GPIO interrupt 23
     */
    inline void set_ICR2_ICR23(CM7_GPIO2_ICR2_ICR23 value) volatile
    {
        uint32_t curr = ICR2;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        ICR2 = curr;
    }

    /**
     * Get ICR2's ICR22 field.
     *
     * Interrupt configuration field for GPIO interrupt 22
     */
    inline CM7_GPIO2_ICR2_ICR22 get_ICR2_ICR22() volatile
    {
        return CM7_GPIO2_ICR2_ICR22((ICR2 >> 12u) & 0b11u);
    }

    /**
     * Set ICR2's ICR22 field.
     *
     * Interrupt configuration field for GPIO interrupt 22
     */
    inline void set_ICR2_ICR22(CM7_GPIO2_ICR2_ICR22 value) volatile
    {
        uint32_t curr = ICR2;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        ICR2 = curr;
    }

    /**
     * Get ICR2's ICR21 field.
     *
     * Interrupt configuration field for GPIO interrupt 21
     */
    inline CM7_GPIO2_ICR2_ICR21 get_ICR2_ICR21() volatile
    {
        return CM7_GPIO2_ICR2_ICR21((ICR2 >> 10u) & 0b11u);
    }

    /**
     * Set ICR2's ICR21 field.
     *
     * Interrupt configuration field for GPIO interrupt 21
     */
    inline void set_ICR2_ICR21(CM7_GPIO2_ICR2_ICR21 value) volatile
    {
        uint32_t curr = ICR2;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        ICR2 = curr;
    }

    /**
     * Get ICR2's ICR20 field.
     *
     * Interrupt configuration field for GPIO interrupt 20
     */
    inline CM7_GPIO2_ICR2_ICR20 get_ICR2_ICR20() volatile
    {
        return CM7_GPIO2_ICR2_ICR20((ICR2 >> 8u) & 0b11u);
    }

    /**
     * Set ICR2's ICR20 field.
     *
     * Interrupt configuration field for GPIO interrupt 20
     */
    inline void set_ICR2_ICR20(CM7_GPIO2_ICR2_ICR20 value) volatile
    {
        uint32_t curr = ICR2;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        ICR2 = curr;
    }

    /**
     * Get ICR2's ICR19 field.
     *
     * Interrupt configuration field for GPIO interrupt 19
     */
    inline CM7_GPIO2_ICR2_ICR19 get_ICR2_ICR19() volatile
    {
        return CM7_GPIO2_ICR2_ICR19((ICR2 >> 6u) & 0b11u);
    }

    /**
     * Set ICR2's ICR19 field.
     *
     * Interrupt configuration field for GPIO interrupt 19
     */
    inline void set_ICR2_ICR19(CM7_GPIO2_ICR2_ICR19 value) volatile
    {
        uint32_t curr = ICR2;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        ICR2 = curr;
    }

    /**
     * Get ICR2's ICR18 field.
     *
     * Interrupt configuration field for GPIO interrupt 18
     */
    inline CM7_GPIO2_ICR2_ICR18 get_ICR2_ICR18() volatile
    {
        return CM7_GPIO2_ICR2_ICR18((ICR2 >> 4u) & 0b11u);
    }

    /**
     * Set ICR2's ICR18 field.
     *
     * Interrupt configuration field for GPIO interrupt 18
     */
    inline void set_ICR2_ICR18(CM7_GPIO2_ICR2_ICR18 value) volatile
    {
        uint32_t curr = ICR2;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        ICR2 = curr;
    }

    /**
     * Get ICR2's ICR17 field.
     *
     * Interrupt configuration field for GPIO interrupt 17
     */
    inline CM7_GPIO2_ICR2_ICR17 get_ICR2_ICR17() volatile
    {
        return CM7_GPIO2_ICR2_ICR17((ICR2 >> 2u) & 0b11u);
    }

    /**
     * Set ICR2's ICR17 field.
     *
     * Interrupt configuration field for GPIO interrupt 17
     */
    inline void set_ICR2_ICR17(CM7_GPIO2_ICR2_ICR17 value) volatile
    {
        uint32_t curr = ICR2;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        ICR2 = curr;
    }

    /**
     * Get ICR2's ICR16 field.
     *
     * Interrupt configuration field for GPIO interrupt 16
     */
    inline CM7_GPIO2_ICR2_ICR16 get_ICR2_ICR16() volatile
    {
        return CM7_GPIO2_ICR2_ICR16((ICR2 >> 0u) & 0b11u);
    }

    /**
     * Set ICR2's ICR16 field.
     *
     * Interrupt configuration field for GPIO interrupt 16
     */
    inline void set_ICR2_ICR16(CM7_GPIO2_ICR2_ICR16 value) volatile
    {
        uint32_t curr = ICR2;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        ICR2 = curr;
    }

    /**
     * Get all of ICR2's bit fields.
     *
     * (read-write) GPIO interrupt configuration register2
     */
    inline void get_ICR2(
        CM7_GPIO2_ICR2_ICR31 &ICR31, CM7_GPIO2_ICR2_ICR30 &ICR30,
        CM7_GPIO2_ICR2_ICR29 &ICR29, CM7_GPIO2_ICR2_ICR28 &ICR28,
        CM7_GPIO2_ICR2_ICR27 &ICR27, CM7_GPIO2_ICR2_ICR26 &ICR26,
        CM7_GPIO2_ICR2_ICR25 &ICR25, CM7_GPIO2_ICR2_ICR24 &ICR24,
        CM7_GPIO2_ICR2_ICR23 &ICR23, CM7_GPIO2_ICR2_ICR22 &ICR22,
        CM7_GPIO2_ICR2_ICR21 &ICR21, CM7_GPIO2_ICR2_ICR20 &ICR20,
        CM7_GPIO2_ICR2_ICR19 &ICR19, CM7_GPIO2_ICR2_ICR18 &ICR18,
        CM7_GPIO2_ICR2_ICR17 &ICR17, CM7_GPIO2_ICR2_ICR16 &ICR16) volatile
    {
        uint32_t curr = ICR2;

        ICR31 = CM7_GPIO2_ICR2_ICR31((curr >> 30u) & 0b11u);
        ICR30 = CM7_GPIO2_ICR2_ICR30((curr >> 28u) & 0b11u);
        ICR29 = CM7_GPIO2_ICR2_ICR29((curr >> 26u) & 0b11u);
        ICR28 = CM7_GPIO2_ICR2_ICR28((curr >> 24u) & 0b11u);
        ICR27 = CM7_GPIO2_ICR2_ICR27((curr >> 22u) & 0b11u);
        ICR26 = CM7_GPIO2_ICR2_ICR26((curr >> 20u) & 0b11u);
        ICR25 = CM7_GPIO2_ICR2_ICR25((curr >> 18u) & 0b11u);
        ICR24 = CM7_GPIO2_ICR2_ICR24((curr >> 16u) & 0b11u);
        ICR23 = CM7_GPIO2_ICR2_ICR23((curr >> 14u) & 0b11u);
        ICR22 = CM7_GPIO2_ICR2_ICR22((curr >> 12u) & 0b11u);
        ICR21 = CM7_GPIO2_ICR2_ICR21((curr >> 10u) & 0b11u);
        ICR20 = CM7_GPIO2_ICR2_ICR20((curr >> 8u) & 0b11u);
        ICR19 = CM7_GPIO2_ICR2_ICR19((curr >> 6u) & 0b11u);
        ICR18 = CM7_GPIO2_ICR2_ICR18((curr >> 4u) & 0b11u);
        ICR17 = CM7_GPIO2_ICR2_ICR17((curr >> 2u) & 0b11u);
        ICR16 = CM7_GPIO2_ICR2_ICR16((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of ICR2's bit fields.
     *
     * (read-write) GPIO interrupt configuration register2
     */
    inline void set_ICR2(
        CM7_GPIO2_ICR2_ICR31 ICR31, CM7_GPIO2_ICR2_ICR30 ICR30,
        CM7_GPIO2_ICR2_ICR29 ICR29, CM7_GPIO2_ICR2_ICR28 ICR28,
        CM7_GPIO2_ICR2_ICR27 ICR27, CM7_GPIO2_ICR2_ICR26 ICR26,
        CM7_GPIO2_ICR2_ICR25 ICR25, CM7_GPIO2_ICR2_ICR24 ICR24,
        CM7_GPIO2_ICR2_ICR23 ICR23, CM7_GPIO2_ICR2_ICR22 ICR22,
        CM7_GPIO2_ICR2_ICR21 ICR21, CM7_GPIO2_ICR2_ICR20 ICR20,
        CM7_GPIO2_ICR2_ICR19 ICR19, CM7_GPIO2_ICR2_ICR18 ICR18,
        CM7_GPIO2_ICR2_ICR17 ICR17, CM7_GPIO2_ICR2_ICR16 ICR16) volatile
    {
        uint32_t curr = ICR2;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(ICR31) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(ICR30) & 0b11u) << 28u;
        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(ICR29) & 0b11u) << 26u;
        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(ICR28) & 0b11u) << 24u;
        curr &= ~(0b11u << 22u);
        curr |= (std::to_underlying(ICR27) & 0b11u) << 22u;
        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(ICR26) & 0b11u) << 20u;
        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(ICR25) & 0b11u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(ICR24) & 0b11u) << 16u;
        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(ICR23) & 0b11u) << 14u;
        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(ICR22) & 0b11u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(ICR21) & 0b11u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(ICR20) & 0b11u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(ICR19) & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(ICR18) & 0b11u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(ICR17) & 0b11u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(ICR16) & 0b11u) << 0u;

        ICR2 = curr;
    }

    /**
     * Get IMR's IMR field.
     *
     * Interrupt Mask bits
     */
    inline uint32_t get_IMR_IMR() volatile
    {
        return (IMR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set IMR's IMR field.
     *
     * Interrupt Mask bits
     */
    inline void set_IMR_IMR(uint32_t value) volatile
    {
        uint32_t curr = IMR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        IMR = curr;
    }

    /**
     * Get ISR's ISR field.
     *
     * Interrupt status bits
     */
    inline uint32_t get_ISR_ISR() volatile
    {
        return (ISR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set ISR's ISR field.
     *
     * Interrupt status bits
     */
    inline void set_ISR_ISR(uint32_t value) volatile
    {
        uint32_t curr = ISR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        ISR = curr;
    }

    /**
     * Get EDGE_SEL's GPIO_EDGE_SEL field.
     *
     * Edge select
     */
    inline uint32_t get_EDGE_SEL_GPIO_EDGE_SEL() volatile
    {
        return (EDGE_SEL >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set EDGE_SEL's GPIO_EDGE_SEL field.
     *
     * Edge select
     */
    inline void set_EDGE_SEL_GPIO_EDGE_SEL(uint32_t value) volatile
    {
        uint32_t curr = EDGE_SEL;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        EDGE_SEL = curr;
    }

    /**
     * Set DR_SET's DR_SET field.
     *
     * Set
     */
    inline void set_DR_SET_DR_SET(uint32_t value) volatile
    {
        uint32_t curr = DR_SET;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DR_SET = curr;
    }

    /**
     * Set DR_CLEAR's DR_CLEAR field.
     *
     * Clear
     */
    inline void set_DR_CLEAR_DR_CLEAR(uint32_t value) volatile
    {
        uint32_t curr = DR_CLEAR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DR_CLEAR = curr;
    }

    /**
     * Set DR_TOGGLE's DR_TOGGLE field.
     *
     * Toggle
     */
    inline void set_DR_TOGGLE_DR_TOGGLE(uint32_t value) volatile
    {
        uint32_t curr = DR_TOGGLE;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DR_TOGGLE = curr;
    }
};

static_assert(sizeof(cm7_gpio2) == cm7_gpio2::size);

static volatile cm7_gpio2 *const CM7_GPIO2 =
    reinterpret_cast<cm7_gpio2 *>(0x42008000);

static volatile cm7_gpio2 *const CM7_GPIO3 =
    reinterpret_cast<cm7_gpio2 *>(0x4200C000);

static volatile cm7_gpio2 *const GPIO1 =
    reinterpret_cast<cm7_gpio2 *>(0x4012C000);

static volatile cm7_gpio2 *const GPIO10 =
    reinterpret_cast<cm7_gpio2 *>(0x40C68000);

static volatile cm7_gpio2 *const GPIO11 =
    reinterpret_cast<cm7_gpio2 *>(0x40C6C000);

static volatile cm7_gpio2 *const GPIO12 =
    reinterpret_cast<cm7_gpio2 *>(0x40C70000);

static volatile cm7_gpio2 *const GPIO13 =
    reinterpret_cast<cm7_gpio2 *>(0x40CA0000);

static volatile cm7_gpio2 *const GPIO2 =
    reinterpret_cast<cm7_gpio2 *>(0x40130000);

static volatile cm7_gpio2 *const GPIO3 =
    reinterpret_cast<cm7_gpio2 *>(0x40134000);

static volatile cm7_gpio2 *const GPIO4 =
    reinterpret_cast<cm7_gpio2 *>(0x40138000);

static volatile cm7_gpio2 *const GPIO5 =
    reinterpret_cast<cm7_gpio2 *>(0x4013C000);

static volatile cm7_gpio2 *const GPIO6 =
    reinterpret_cast<cm7_gpio2 *>(0x40140000);

static volatile cm7_gpio2 *const GPIO7 =
    reinterpret_cast<cm7_gpio2 *>(0x40C5C000);

static volatile cm7_gpio2 *const GPIO8 =
    reinterpret_cast<cm7_gpio2 *>(0x40C60000);

static volatile cm7_gpio2 *const GPIO9 =
    reinterpret_cast<cm7_gpio2 *>(0x40C64000);

}; // namespace MIMXRT1176::CM7
