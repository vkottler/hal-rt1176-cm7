/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * FLEXRAM
 */
struct [[gnu::packed]] flexram
{
    /* Constant attributes. */
    static constexpr std::size_t size = 272; /*!< flexram's size in bytes. */

    /* Fields. */
    uint32_t TCM_CTRL; /*!< (read-write) TCM CRTL Register */
    uint32_t
        OCRAM_MAGIC_ADDR;     /*!< (read-write) OCRAM Magic Address Register */
    uint32_t DTCM_MAGIC_ADDR; /*!< (read-write) DTCM Magic Address Register */
    uint32_t ITCM_MAGIC_ADDR; /*!< (read-write) ITCM Magic Address Register */
    uint32_t INT_STATUS;      /*!< (read-write) Interrupt Status Register */
    uint32_t INT_STAT_EN; /*!< (read-write) Interrupt Status Enable Register */
    uint32_t INT_SIG_EN;  /*!< (read-write) Interrupt Enable Register */
    uint32_t OCRAM_ECC_SINGLE_ERROR_INFO; /*!< (read-write) OCRAM single-bit
                                             ECC Error Information Register */
    uint32_t OCRAM_ECC_SINGLE_ERROR_ADDR; /*!< (read-write) OCRAM single-bit
                                             ECC Error Address Register */
    uint32_t
        OCRAM_ECC_SINGLE_ERROR_DATA_LSB; /*!< (read-write) OCRAM single-bit ECC
                                            Error Data Register */
    uint32_t
        OCRAM_ECC_SINGLE_ERROR_DATA_MSB; /*!< (read-write) OCRAM single-bit ECC
                                            Error Data Register */
    uint32_t OCRAM_ECC_MULTI_ERROR_INFO; /*!< (read-write) OCRAM multi-bit ECC
                                            Error Information Register */
    uint32_t OCRAM_ECC_MULTI_ERROR_ADDR; /*!< (read-write) OCRAM multi-bit ECC
                                            Error Address Register */
    uint32_t OCRAM_ECC_MULTI_ERROR_DATA_LSB; /*!< (read-write) OCRAM multi-bit
                                                ECC Error Data Register */
    uint32_t OCRAM_ECC_MULTI_ERROR_DATA_MSB; /*!< (read-write) OCRAM multi-bit
                                                ECC Error Data Register */
    uint32_t ITCM_ECC_SINGLE_ERROR_INFO; /*!< (read-write) ITCM single-bit ECC
                                            Error Information Register */
    uint32_t ITCM_ECC_SINGLE_ERROR_ADDR; /*!< (read-write) ITCM single-bit ECC
                                            Error Address Register */
    uint32_t ITCM_ECC_SINGLE_ERROR_DATA_LSB; /*!< (read-write) ITCM single-bit
                                                ECC Error Data Register */
    uint32_t ITCM_ECC_SINGLE_ERROR_DATA_MSB; /*!< (read-write) ITCM single-bit
                                                ECC Error Data Register */
    uint32_t ITCM_ECC_MULTI_ERROR_INFO; /*!< (read-write) ITCM multi-bit ECC
                                           Error Information Register */
    uint32_t ITCM_ECC_MULTI_ERROR_ADDR; /*!< (read-write) ITCM multi-bit ECC
                                           Error Address Register */
    uint32_t ITCM_ECC_MULTI_ERROR_DATA_LSB; /*!< (read-write) ITCM multi-bit
                                               ECC Error Data Register */
    uint32_t ITCM_ECC_MULTI_ERROR_DATA_MSB; /*!< (read-write) ITCM multi-bit
                                               ECC Error Data Register */
    uint32_t D0TCM_ECC_SINGLE_ERROR_INFO;   /*!< (read-write) D0TCM single-bit
                                               ECC Error Information Register */
    uint32_t D0TCM_ECC_SINGLE_ERROR_ADDR;   /*!< (read-write) D0TCM single-bit
                                               ECC Error Address Register */
    uint32_t D0TCM_ECC_SINGLE_ERROR_DATA;   /*!< (read-write) D0TCM single-bit
                                               ECC Error Data Register */
    uint32_t D0TCM_ECC_MULTI_ERROR_INFO;  /*!< (read-write) D0TCM multi-bit ECC
                                             Error Information Register */
    uint32_t D0TCM_ECC_MULTI_ERROR_ADDR;  /*!< (read-write) D0TCM multi-bit ECC
                                             Error Address Register */
    uint32_t D0TCM_ECC_MULTI_ERROR_DATA;  /*!< (read-write) D0TCM multi-bit ECC
                                             Error Data Register */
    uint32_t D1TCM_ECC_SINGLE_ERROR_INFO; /*!< (read-write) D1TCM single-bit
                                             ECC Error Information Register */
    uint32_t D1TCM_ECC_SINGLE_ERROR_ADDR; /*!< (read-write) D1TCM single-bit
                                             ECC Error Address Register */
    uint32_t D1TCM_ECC_SINGLE_ERROR_DATA; /*!< (read-write) D1TCM single-bit
                                             ECC Error Data Register */
    uint32_t D1TCM_ECC_MULTI_ERROR_INFO;  /*!< (read-write) D1TCM multi-bit ECC
                                             Error Information Register */
    uint32_t D1TCM_ECC_MULTI_ERROR_ADDR;  /*!< (read-write) D1TCM multi-bit ECC
                                             Error Address Register */
    uint32_t D1TCM_ECC_MULTI_ERROR_DATA;  /*!< (read-write) D1TCM multi-bit ECC
                                             Error Data Register */
    static constexpr std::size_t reserved_padding0_length = 31;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t
        FLEXRAM_CTRL; /*!< (read-write) FlexRAM feature Control register */
    uint32_t OCRAM_PIPELINE_STATUS; /*!< (read-write) OCRAM Pipeline Status
                                       register */

    /* Methods. */

    /**
     * Get TCM_CTRL's Reserved field.
     *
     * Reserved
     */
    inline uint32_t get_TCM_CTRL_Reserved() volatile
    {
        return (TCM_CTRL >> 3u) & 0b11111111111111111111111111111u;
    }

    /**
     * Get TCM_CTRL's FORCE_CLK_ON bit.
     *
     * Force RAM Clock Always On
     */
    inline bool get_TCM_CTRL_FORCE_CLK_ON() volatile
    {
        return TCM_CTRL & (1u << 2u);
    }

    /**
     * Set TCM_CTRL's FORCE_CLK_ON bit.
     *
     * Force RAM Clock Always On
     */
    inline void set_TCM_CTRL_FORCE_CLK_ON() volatile
    {
        TCM_CTRL |= 1u << 2u;
    }

    /**
     * Clear TCM_CTRL's FORCE_CLK_ON bit.
     *
     * Force RAM Clock Always On
     */
    inline void clear_TCM_CTRL_FORCE_CLK_ON() volatile
    {
        TCM_CTRL &= ~(1u << 2u);
    }

    /**
     * Toggle TCM_CTRL's FORCE_CLK_ON bit.
     *
     * Force RAM Clock Always On
     */
    inline void toggle_TCM_CTRL_FORCE_CLK_ON() volatile
    {
        TCM_CTRL ^= 1u << 2u;
    }

    /**
     * Get TCM_CTRL's TCM_RWAIT_EN bit.
     *
     * TCM Read Wait Mode Enable
     */
    inline bool get_TCM_CTRL_TCM_RWAIT_EN() volatile
    {
        return TCM_CTRL & (1u << 1u);
    }

    /**
     * Set TCM_CTRL's TCM_RWAIT_EN bit.
     *
     * TCM Read Wait Mode Enable
     */
    inline void set_TCM_CTRL_TCM_RWAIT_EN() volatile
    {
        TCM_CTRL |= 1u << 1u;
    }

    /**
     * Clear TCM_CTRL's TCM_RWAIT_EN bit.
     *
     * TCM Read Wait Mode Enable
     */
    inline void clear_TCM_CTRL_TCM_RWAIT_EN() volatile
    {
        TCM_CTRL &= ~(1u << 1u);
    }

    /**
     * Toggle TCM_CTRL's TCM_RWAIT_EN bit.
     *
     * TCM Read Wait Mode Enable
     */
    inline void toggle_TCM_CTRL_TCM_RWAIT_EN() volatile
    {
        TCM_CTRL ^= 1u << 1u;
    }

    /**
     * Get TCM_CTRL's TCM_WWAIT_EN bit.
     *
     * TCM Write Wait Mode Enable
     */
    inline bool get_TCM_CTRL_TCM_WWAIT_EN() volatile
    {
        return TCM_CTRL & (1u << 0u);
    }

    /**
     * Set TCM_CTRL's TCM_WWAIT_EN bit.
     *
     * TCM Write Wait Mode Enable
     */
    inline void set_TCM_CTRL_TCM_WWAIT_EN() volatile
    {
        TCM_CTRL |= 1u << 0u;
    }

    /**
     * Clear TCM_CTRL's TCM_WWAIT_EN bit.
     *
     * TCM Write Wait Mode Enable
     */
    inline void clear_TCM_CTRL_TCM_WWAIT_EN() volatile
    {
        TCM_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle TCM_CTRL's TCM_WWAIT_EN bit.
     *
     * TCM Write Wait Mode Enable
     */
    inline void toggle_TCM_CTRL_TCM_WWAIT_EN() volatile
    {
        TCM_CTRL ^= 1u << 0u;
    }

    /**
     * Get all of TCM_CTRL's bit fields.
     *
     * (read-write) TCM CRTL Register
     */
    inline void get_TCM_CTRL(uint32_t &Reserved, bool &FORCE_CLK_ON,
                             bool &TCM_RWAIT_EN, bool &TCM_WWAIT_EN) volatile
    {
        uint32_t curr = TCM_CTRL;

        Reserved = (curr >> 3u) & 0b11111111111111111111111111111u;
        FORCE_CLK_ON = curr & (1u << 2u);
        TCM_RWAIT_EN = curr & (1u << 1u);
        TCM_WWAIT_EN = curr & (1u << 0u);
    }

    /**
     * Set all of TCM_CTRL's bit fields.
     *
     * (read-write) TCM CRTL Register
     */
    inline void set_TCM_CTRL(bool FORCE_CLK_ON, bool TCM_RWAIT_EN,
                             bool TCM_WWAIT_EN) volatile
    {
        uint32_t curr = TCM_CTRL;

        curr &= ~(0b1u << 2u);
        curr |= (FORCE_CLK_ON & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (TCM_RWAIT_EN & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TCM_WWAIT_EN & 0b1u) << 0u;

        TCM_CTRL = curr;
    }

    /**
     * Get OCRAM_MAGIC_ADDR's Reserved field.
     *
     * Reserved
     */
    inline uint16_t get_OCRAM_MAGIC_ADDR_Reserved() volatile
    {
        return (OCRAM_MAGIC_ADDR >> 18u) & 0b11111111111111u;
    }

    /**
     * Get OCRAM_MAGIC_ADDR's OCRAM_MAGIC_ADDR field.
     *
     * OCRAM Magic Address
     */
    inline uint32_t get_OCRAM_MAGIC_ADDR_OCRAM_MAGIC_ADDR() volatile
    {
        return (OCRAM_MAGIC_ADDR >> 1u) & 0b11111111111111111u;
    }

    /**
     * Set OCRAM_MAGIC_ADDR's OCRAM_MAGIC_ADDR field.
     *
     * OCRAM Magic Address
     */
    inline void set_OCRAM_MAGIC_ADDR_OCRAM_MAGIC_ADDR(uint32_t value) volatile
    {
        uint32_t curr = OCRAM_MAGIC_ADDR;

        curr &= ~(0b11111111111111111u << 1u);
        curr |= (value & 0b11111111111111111u) << 1u;

        OCRAM_MAGIC_ADDR = curr;
    }

    /**
     * Get OCRAM_MAGIC_ADDR's OCRAM_WR_RD_SEL bit.
     *
     * OCRAM Write Read Select
     */
    inline bool get_OCRAM_MAGIC_ADDR_OCRAM_WR_RD_SEL() volatile
    {
        return OCRAM_MAGIC_ADDR & (1u << 0u);
    }

    /**
     * Set OCRAM_MAGIC_ADDR's OCRAM_WR_RD_SEL bit.
     *
     * OCRAM Write Read Select
     */
    inline void set_OCRAM_MAGIC_ADDR_OCRAM_WR_RD_SEL() volatile
    {
        OCRAM_MAGIC_ADDR |= 1u << 0u;
    }

    /**
     * Clear OCRAM_MAGIC_ADDR's OCRAM_WR_RD_SEL bit.
     *
     * OCRAM Write Read Select
     */
    inline void clear_OCRAM_MAGIC_ADDR_OCRAM_WR_RD_SEL() volatile
    {
        OCRAM_MAGIC_ADDR &= ~(1u << 0u);
    }

    /**
     * Toggle OCRAM_MAGIC_ADDR's OCRAM_WR_RD_SEL bit.
     *
     * OCRAM Write Read Select
     */
    inline void toggle_OCRAM_MAGIC_ADDR_OCRAM_WR_RD_SEL() volatile
    {
        OCRAM_MAGIC_ADDR ^= 1u << 0u;
    }

    /**
     * Get all of OCRAM_MAGIC_ADDR's bit fields.
     *
     * (read-write) OCRAM Magic Address Register
     */
    inline void get_OCRAM_MAGIC_ADDR(uint16_t &Reserved,
                                     uint32_t &OCRAM_MAGIC_ADDR,
                                     bool &OCRAM_WR_RD_SEL) volatile
    {
        uint32_t curr = OCRAM_MAGIC_ADDR;

        Reserved = (curr >> 18u) & 0b11111111111111u;
        OCRAM_MAGIC_ADDR = (curr >> 1u) & 0b11111111111111111u;
        OCRAM_WR_RD_SEL = curr & (1u << 0u);
    }

    /**
     * Set all of OCRAM_MAGIC_ADDR's bit fields.
     *
     * (read-write) OCRAM Magic Address Register
     */
    inline void set_OCRAM_MAGIC_ADDR(uint32_t OCRAM_MAGIC_ADDR,
                                     bool OCRAM_WR_RD_SEL) volatile
    {
        uint32_t curr = OCRAM_MAGIC_ADDR;

        curr &= ~(0b11111111111111111u << 1u);
        curr |= (OCRAM_MAGIC_ADDR & 0b11111111111111111u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (OCRAM_WR_RD_SEL & 0b1u) << 0u;

        OCRAM_MAGIC_ADDR = curr;
    }

    /**
     * Get DTCM_MAGIC_ADDR's Reserved field.
     *
     * Reserved
     */
    inline uint16_t get_DTCM_MAGIC_ADDR_Reserved() volatile
    {
        return (DTCM_MAGIC_ADDR >> 17u) & 0b111111111111111u;
    }

    /**
     * Get DTCM_MAGIC_ADDR's DTCM_MAGIC_ADDR field.
     *
     * DTCM Magic Address
     */
    inline uint16_t get_DTCM_MAGIC_ADDR_DTCM_MAGIC_ADDR() volatile
    {
        return (DTCM_MAGIC_ADDR >> 1u) & 0b1111111111111111u;
    }

    /**
     * Set DTCM_MAGIC_ADDR's DTCM_MAGIC_ADDR field.
     *
     * DTCM Magic Address
     */
    inline void set_DTCM_MAGIC_ADDR_DTCM_MAGIC_ADDR(uint16_t value) volatile
    {
        uint32_t curr = DTCM_MAGIC_ADDR;

        curr &= ~(0b1111111111111111u << 1u);
        curr |= (value & 0b1111111111111111u) << 1u;

        DTCM_MAGIC_ADDR = curr;
    }

    /**
     * Get DTCM_MAGIC_ADDR's DTCM_WR_RD_SEL bit.
     *
     * DTCM Write Read Select
     */
    inline bool get_DTCM_MAGIC_ADDR_DTCM_WR_RD_SEL() volatile
    {
        return DTCM_MAGIC_ADDR & (1u << 0u);
    }

    /**
     * Set DTCM_MAGIC_ADDR's DTCM_WR_RD_SEL bit.
     *
     * DTCM Write Read Select
     */
    inline void set_DTCM_MAGIC_ADDR_DTCM_WR_RD_SEL() volatile
    {
        DTCM_MAGIC_ADDR |= 1u << 0u;
    }

    /**
     * Clear DTCM_MAGIC_ADDR's DTCM_WR_RD_SEL bit.
     *
     * DTCM Write Read Select
     */
    inline void clear_DTCM_MAGIC_ADDR_DTCM_WR_RD_SEL() volatile
    {
        DTCM_MAGIC_ADDR &= ~(1u << 0u);
    }

    /**
     * Toggle DTCM_MAGIC_ADDR's DTCM_WR_RD_SEL bit.
     *
     * DTCM Write Read Select
     */
    inline void toggle_DTCM_MAGIC_ADDR_DTCM_WR_RD_SEL() volatile
    {
        DTCM_MAGIC_ADDR ^= 1u << 0u;
    }

    /**
     * Get all of DTCM_MAGIC_ADDR's bit fields.
     *
     * (read-write) DTCM Magic Address Register
     */
    inline void get_DTCM_MAGIC_ADDR(uint16_t &Reserved,
                                    uint16_t &DTCM_MAGIC_ADDR,
                                    bool &DTCM_WR_RD_SEL) volatile
    {
        uint32_t curr = DTCM_MAGIC_ADDR;

        Reserved = (curr >> 17u) & 0b111111111111111u;
        DTCM_MAGIC_ADDR = (curr >> 1u) & 0b1111111111111111u;
        DTCM_WR_RD_SEL = curr & (1u << 0u);
    }

    /**
     * Set all of DTCM_MAGIC_ADDR's bit fields.
     *
     * (read-write) DTCM Magic Address Register
     */
    inline void set_DTCM_MAGIC_ADDR(uint16_t DTCM_MAGIC_ADDR,
                                    bool DTCM_WR_RD_SEL) volatile
    {
        uint32_t curr = DTCM_MAGIC_ADDR;

        curr &= ~(0b1111111111111111u << 1u);
        curr |= (DTCM_MAGIC_ADDR & 0b1111111111111111u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (DTCM_WR_RD_SEL & 0b1u) << 0u;

        DTCM_MAGIC_ADDR = curr;
    }

    /**
     * Get ITCM_MAGIC_ADDR's Reserved field.
     *
     * Reserved
     */
    inline uint16_t get_ITCM_MAGIC_ADDR_Reserved() volatile
    {
        return (ITCM_MAGIC_ADDR >> 17u) & 0b111111111111111u;
    }

    /**
     * Get ITCM_MAGIC_ADDR's ITCM_MAGIC_ADDR field.
     *
     * ITCM Magic Address
     */
    inline uint16_t get_ITCM_MAGIC_ADDR_ITCM_MAGIC_ADDR() volatile
    {
        return (ITCM_MAGIC_ADDR >> 1u) & 0b1111111111111111u;
    }

    /**
     * Set ITCM_MAGIC_ADDR's ITCM_MAGIC_ADDR field.
     *
     * ITCM Magic Address
     */
    inline void set_ITCM_MAGIC_ADDR_ITCM_MAGIC_ADDR(uint16_t value) volatile
    {
        uint32_t curr = ITCM_MAGIC_ADDR;

        curr &= ~(0b1111111111111111u << 1u);
        curr |= (value & 0b1111111111111111u) << 1u;

        ITCM_MAGIC_ADDR = curr;
    }

    /**
     * Get ITCM_MAGIC_ADDR's ITCM_WR_RD_SEL bit.
     *
     * ITCM Write Read Select
     */
    inline bool get_ITCM_MAGIC_ADDR_ITCM_WR_RD_SEL() volatile
    {
        return ITCM_MAGIC_ADDR & (1u << 0u);
    }

    /**
     * Set ITCM_MAGIC_ADDR's ITCM_WR_RD_SEL bit.
     *
     * ITCM Write Read Select
     */
    inline void set_ITCM_MAGIC_ADDR_ITCM_WR_RD_SEL() volatile
    {
        ITCM_MAGIC_ADDR |= 1u << 0u;
    }

    /**
     * Clear ITCM_MAGIC_ADDR's ITCM_WR_RD_SEL bit.
     *
     * ITCM Write Read Select
     */
    inline void clear_ITCM_MAGIC_ADDR_ITCM_WR_RD_SEL() volatile
    {
        ITCM_MAGIC_ADDR &= ~(1u << 0u);
    }

    /**
     * Toggle ITCM_MAGIC_ADDR's ITCM_WR_RD_SEL bit.
     *
     * ITCM Write Read Select
     */
    inline void toggle_ITCM_MAGIC_ADDR_ITCM_WR_RD_SEL() volatile
    {
        ITCM_MAGIC_ADDR ^= 1u << 0u;
    }

    /**
     * Get all of ITCM_MAGIC_ADDR's bit fields.
     *
     * (read-write) ITCM Magic Address Register
     */
    inline void get_ITCM_MAGIC_ADDR(uint16_t &Reserved,
                                    uint16_t &ITCM_MAGIC_ADDR,
                                    bool &ITCM_WR_RD_SEL) volatile
    {
        uint32_t curr = ITCM_MAGIC_ADDR;

        Reserved = (curr >> 17u) & 0b111111111111111u;
        ITCM_MAGIC_ADDR = (curr >> 1u) & 0b1111111111111111u;
        ITCM_WR_RD_SEL = curr & (1u << 0u);
    }

    /**
     * Set all of ITCM_MAGIC_ADDR's bit fields.
     *
     * (read-write) ITCM Magic Address Register
     */
    inline void set_ITCM_MAGIC_ADDR(uint16_t ITCM_MAGIC_ADDR,
                                    bool ITCM_WR_RD_SEL) volatile
    {
        uint32_t curr = ITCM_MAGIC_ADDR;

        curr &= ~(0b1111111111111111u << 1u);
        curr |= (ITCM_MAGIC_ADDR & 0b1111111111111111u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ITCM_WR_RD_SEL & 0b1u) << 0u;

        ITCM_MAGIC_ADDR = curr;
    }

    /**
     * Get INT_STATUS's Reserved field.
     *
     * Reserved
     */
    inline uint16_t get_INT_STATUS_Reserved() volatile
    {
        return (INT_STATUS >> 18u) & 0b11111111111111u;
    }

    /**
     * Get INT_STATUS's OCRAM_PARTIAL_WR_INT_S bit.
     *
     * OCRAM Partial Write Interrupt Status
     */
    inline bool get_INT_STATUS_OCRAM_PARTIAL_WR_INT_S() volatile
    {
        return INT_STATUS & (1u << 17u);
    }

    /**
     * Set INT_STATUS's OCRAM_PARTIAL_WR_INT_S bit.
     *
     * OCRAM Partial Write Interrupt Status
     */
    inline void set_INT_STATUS_OCRAM_PARTIAL_WR_INT_S() volatile
    {
        INT_STATUS |= 1u << 17u;
    }

    /**
     * Clear INT_STATUS's OCRAM_PARTIAL_WR_INT_S bit.
     *
     * OCRAM Partial Write Interrupt Status
     */
    inline void clear_INT_STATUS_OCRAM_PARTIAL_WR_INT_S() volatile
    {
        INT_STATUS &= ~(1u << 17u);
    }

    /**
     * Toggle INT_STATUS's OCRAM_PARTIAL_WR_INT_S bit.
     *
     * OCRAM Partial Write Interrupt Status
     */
    inline void toggle_INT_STATUS_OCRAM_PARTIAL_WR_INT_S() volatile
    {
        INT_STATUS ^= 1u << 17u;
    }

    /**
     * Get INT_STATUS's D1TCM_PARTIAL_WR_INT_S bit.
     *
     * D1TCM Partial Write Interrupt Status
     */
    inline bool get_INT_STATUS_D1TCM_PARTIAL_WR_INT_S() volatile
    {
        return INT_STATUS & (1u << 16u);
    }

    /**
     * Set INT_STATUS's D1TCM_PARTIAL_WR_INT_S bit.
     *
     * D1TCM Partial Write Interrupt Status
     */
    inline void set_INT_STATUS_D1TCM_PARTIAL_WR_INT_S() volatile
    {
        INT_STATUS |= 1u << 16u;
    }

    /**
     * Clear INT_STATUS's D1TCM_PARTIAL_WR_INT_S bit.
     *
     * D1TCM Partial Write Interrupt Status
     */
    inline void clear_INT_STATUS_D1TCM_PARTIAL_WR_INT_S() volatile
    {
        INT_STATUS &= ~(1u << 16u);
    }

    /**
     * Toggle INT_STATUS's D1TCM_PARTIAL_WR_INT_S bit.
     *
     * D1TCM Partial Write Interrupt Status
     */
    inline void toggle_INT_STATUS_D1TCM_PARTIAL_WR_INT_S() volatile
    {
        INT_STATUS ^= 1u << 16u;
    }

    /**
     * Get INT_STATUS's D0TCM_PARTIAL_WR_INT_S bit.
     *
     * D0TCM Partial Write Interrupt Status
     */
    inline bool get_INT_STATUS_D0TCM_PARTIAL_WR_INT_S() volatile
    {
        return INT_STATUS & (1u << 15u);
    }

    /**
     * Set INT_STATUS's D0TCM_PARTIAL_WR_INT_S bit.
     *
     * D0TCM Partial Write Interrupt Status
     */
    inline void set_INT_STATUS_D0TCM_PARTIAL_WR_INT_S() volatile
    {
        INT_STATUS |= 1u << 15u;
    }

    /**
     * Clear INT_STATUS's D0TCM_PARTIAL_WR_INT_S bit.
     *
     * D0TCM Partial Write Interrupt Status
     */
    inline void clear_INT_STATUS_D0TCM_PARTIAL_WR_INT_S() volatile
    {
        INT_STATUS &= ~(1u << 15u);
    }

    /**
     * Toggle INT_STATUS's D0TCM_PARTIAL_WR_INT_S bit.
     *
     * D0TCM Partial Write Interrupt Status
     */
    inline void toggle_INT_STATUS_D0TCM_PARTIAL_WR_INT_S() volatile
    {
        INT_STATUS ^= 1u << 15u;
    }

    /**
     * Get INT_STATUS's ITCM_PARTIAL_WR_INT_S bit.
     *
     * ITCM Partial Write Interrupt Status
     */
    inline bool get_INT_STATUS_ITCM_PARTIAL_WR_INT_S() volatile
    {
        return INT_STATUS & (1u << 14u);
    }

    /**
     * Set INT_STATUS's ITCM_PARTIAL_WR_INT_S bit.
     *
     * ITCM Partial Write Interrupt Status
     */
    inline void set_INT_STATUS_ITCM_PARTIAL_WR_INT_S() volatile
    {
        INT_STATUS |= 1u << 14u;
    }

    /**
     * Clear INT_STATUS's ITCM_PARTIAL_WR_INT_S bit.
     *
     * ITCM Partial Write Interrupt Status
     */
    inline void clear_INT_STATUS_ITCM_PARTIAL_WR_INT_S() volatile
    {
        INT_STATUS &= ~(1u << 14u);
    }

    /**
     * Toggle INT_STATUS's ITCM_PARTIAL_WR_INT_S bit.
     *
     * ITCM Partial Write Interrupt Status
     */
    inline void toggle_INT_STATUS_ITCM_PARTIAL_WR_INT_S() volatile
    {
        INT_STATUS ^= 1u << 14u;
    }

    /**
     * Get INT_STATUS's D1TCM_ECC_ERRS_INT bit.
     *
     * D1TCM access single-bit ECC Error Interrupt Status
     */
    inline bool get_INT_STATUS_D1TCM_ECC_ERRS_INT() volatile
    {
        return INT_STATUS & (1u << 13u);
    }

    /**
     * Set INT_STATUS's D1TCM_ECC_ERRS_INT bit.
     *
     * D1TCM access single-bit ECC Error Interrupt Status
     */
    inline void set_INT_STATUS_D1TCM_ECC_ERRS_INT() volatile
    {
        INT_STATUS |= 1u << 13u;
    }

    /**
     * Clear INT_STATUS's D1TCM_ECC_ERRS_INT bit.
     *
     * D1TCM access single-bit ECC Error Interrupt Status
     */
    inline void clear_INT_STATUS_D1TCM_ECC_ERRS_INT() volatile
    {
        INT_STATUS &= ~(1u << 13u);
    }

    /**
     * Toggle INT_STATUS's D1TCM_ECC_ERRS_INT bit.
     *
     * D1TCM access single-bit ECC Error Interrupt Status
     */
    inline void toggle_INT_STATUS_D1TCM_ECC_ERRS_INT() volatile
    {
        INT_STATUS ^= 1u << 13u;
    }

    /**
     * Get INT_STATUS's D1TCM_ECC_ERRM_INT bit.
     *
     * D1TCM access multi-bit ECC Error Interrupt Status
     */
    inline bool get_INT_STATUS_D1TCM_ECC_ERRM_INT() volatile
    {
        return INT_STATUS & (1u << 12u);
    }

    /**
     * Set INT_STATUS's D1TCM_ECC_ERRM_INT bit.
     *
     * D1TCM access multi-bit ECC Error Interrupt Status
     */
    inline void set_INT_STATUS_D1TCM_ECC_ERRM_INT() volatile
    {
        INT_STATUS |= 1u << 12u;
    }

    /**
     * Clear INT_STATUS's D1TCM_ECC_ERRM_INT bit.
     *
     * D1TCM access multi-bit ECC Error Interrupt Status
     */
    inline void clear_INT_STATUS_D1TCM_ECC_ERRM_INT() volatile
    {
        INT_STATUS &= ~(1u << 12u);
    }

    /**
     * Toggle INT_STATUS's D1TCM_ECC_ERRM_INT bit.
     *
     * D1TCM access multi-bit ECC Error Interrupt Status
     */
    inline void toggle_INT_STATUS_D1TCM_ECC_ERRM_INT() volatile
    {
        INT_STATUS ^= 1u << 12u;
    }

    /**
     * Get INT_STATUS's D0TCM_ECC_ERRS_INT bit.
     *
     * D0TCM access single-bit ECC Error Interrupt Status
     */
    inline bool get_INT_STATUS_D0TCM_ECC_ERRS_INT() volatile
    {
        return INT_STATUS & (1u << 11u);
    }

    /**
     * Set INT_STATUS's D0TCM_ECC_ERRS_INT bit.
     *
     * D0TCM access single-bit ECC Error Interrupt Status
     */
    inline void set_INT_STATUS_D0TCM_ECC_ERRS_INT() volatile
    {
        INT_STATUS |= 1u << 11u;
    }

    /**
     * Clear INT_STATUS's D0TCM_ECC_ERRS_INT bit.
     *
     * D0TCM access single-bit ECC Error Interrupt Status
     */
    inline void clear_INT_STATUS_D0TCM_ECC_ERRS_INT() volatile
    {
        INT_STATUS &= ~(1u << 11u);
    }

    /**
     * Toggle INT_STATUS's D0TCM_ECC_ERRS_INT bit.
     *
     * D0TCM access single-bit ECC Error Interrupt Status
     */
    inline void toggle_INT_STATUS_D0TCM_ECC_ERRS_INT() volatile
    {
        INT_STATUS ^= 1u << 11u;
    }

    /**
     * Get INT_STATUS's D0TCM_ECC_ERRM_INT bit.
     *
     * D0TCM access multi-bit ECC Error Interrupt Status
     */
    inline bool get_INT_STATUS_D0TCM_ECC_ERRM_INT() volatile
    {
        return INT_STATUS & (1u << 10u);
    }

    /**
     * Set INT_STATUS's D0TCM_ECC_ERRM_INT bit.
     *
     * D0TCM access multi-bit ECC Error Interrupt Status
     */
    inline void set_INT_STATUS_D0TCM_ECC_ERRM_INT() volatile
    {
        INT_STATUS |= 1u << 10u;
    }

    /**
     * Clear INT_STATUS's D0TCM_ECC_ERRM_INT bit.
     *
     * D0TCM access multi-bit ECC Error Interrupt Status
     */
    inline void clear_INT_STATUS_D0TCM_ECC_ERRM_INT() volatile
    {
        INT_STATUS &= ~(1u << 10u);
    }

    /**
     * Toggle INT_STATUS's D0TCM_ECC_ERRM_INT bit.
     *
     * D0TCM access multi-bit ECC Error Interrupt Status
     */
    inline void toggle_INT_STATUS_D0TCM_ECC_ERRM_INT() volatile
    {
        INT_STATUS ^= 1u << 10u;
    }

    /**
     * Get INT_STATUS's ITCM_ECC_ERRS_INT bit.
     *
     * ITCM access single-bit ECC Error Interrupt Status
     */
    inline bool get_INT_STATUS_ITCM_ECC_ERRS_INT() volatile
    {
        return INT_STATUS & (1u << 9u);
    }

    /**
     * Set INT_STATUS's ITCM_ECC_ERRS_INT bit.
     *
     * ITCM access single-bit ECC Error Interrupt Status
     */
    inline void set_INT_STATUS_ITCM_ECC_ERRS_INT() volatile
    {
        INT_STATUS |= 1u << 9u;
    }

    /**
     * Clear INT_STATUS's ITCM_ECC_ERRS_INT bit.
     *
     * ITCM access single-bit ECC Error Interrupt Status
     */
    inline void clear_INT_STATUS_ITCM_ECC_ERRS_INT() volatile
    {
        INT_STATUS &= ~(1u << 9u);
    }

    /**
     * Toggle INT_STATUS's ITCM_ECC_ERRS_INT bit.
     *
     * ITCM access single-bit ECC Error Interrupt Status
     */
    inline void toggle_INT_STATUS_ITCM_ECC_ERRS_INT() volatile
    {
        INT_STATUS ^= 1u << 9u;
    }

    /**
     * Get INT_STATUS's ITCM_ECC_ERRM_INT bit.
     *
     * ITCM Access multi-bit ECC Error Interrupt Status
     */
    inline bool get_INT_STATUS_ITCM_ECC_ERRM_INT() volatile
    {
        return INT_STATUS & (1u << 8u);
    }

    /**
     * Set INT_STATUS's ITCM_ECC_ERRM_INT bit.
     *
     * ITCM Access multi-bit ECC Error Interrupt Status
     */
    inline void set_INT_STATUS_ITCM_ECC_ERRM_INT() volatile
    {
        INT_STATUS |= 1u << 8u;
    }

    /**
     * Clear INT_STATUS's ITCM_ECC_ERRM_INT bit.
     *
     * ITCM Access multi-bit ECC Error Interrupt Status
     */
    inline void clear_INT_STATUS_ITCM_ECC_ERRM_INT() volatile
    {
        INT_STATUS &= ~(1u << 8u);
    }

    /**
     * Toggle INT_STATUS's ITCM_ECC_ERRM_INT bit.
     *
     * ITCM Access multi-bit ECC Error Interrupt Status
     */
    inline void toggle_INT_STATUS_ITCM_ECC_ERRM_INT() volatile
    {
        INT_STATUS ^= 1u << 8u;
    }

    /**
     * Get INT_STATUS's OCRAM_ECC_ERRS_INT bit.
     *
     * OCRAM access single-bit ECC Error Interrupt Status
     */
    inline bool get_INT_STATUS_OCRAM_ECC_ERRS_INT() volatile
    {
        return INT_STATUS & (1u << 7u);
    }

    /**
     * Set INT_STATUS's OCRAM_ECC_ERRS_INT bit.
     *
     * OCRAM access single-bit ECC Error Interrupt Status
     */
    inline void set_INT_STATUS_OCRAM_ECC_ERRS_INT() volatile
    {
        INT_STATUS |= 1u << 7u;
    }

    /**
     * Clear INT_STATUS's OCRAM_ECC_ERRS_INT bit.
     *
     * OCRAM access single-bit ECC Error Interrupt Status
     */
    inline void clear_INT_STATUS_OCRAM_ECC_ERRS_INT() volatile
    {
        INT_STATUS &= ~(1u << 7u);
    }

    /**
     * Toggle INT_STATUS's OCRAM_ECC_ERRS_INT bit.
     *
     * OCRAM access single-bit ECC Error Interrupt Status
     */
    inline void toggle_INT_STATUS_OCRAM_ECC_ERRS_INT() volatile
    {
        INT_STATUS ^= 1u << 7u;
    }

    /**
     * Get INT_STATUS's OCRAM_ECC_ERRM_INT bit.
     *
     * OCRAM access multi-bit ECC Error Interrupt Status
     */
    inline bool get_INT_STATUS_OCRAM_ECC_ERRM_INT() volatile
    {
        return INT_STATUS & (1u << 6u);
    }

    /**
     * Set INT_STATUS's OCRAM_ECC_ERRM_INT bit.
     *
     * OCRAM access multi-bit ECC Error Interrupt Status
     */
    inline void set_INT_STATUS_OCRAM_ECC_ERRM_INT() volatile
    {
        INT_STATUS |= 1u << 6u;
    }

    /**
     * Clear INT_STATUS's OCRAM_ECC_ERRM_INT bit.
     *
     * OCRAM access multi-bit ECC Error Interrupt Status
     */
    inline void clear_INT_STATUS_OCRAM_ECC_ERRM_INT() volatile
    {
        INT_STATUS &= ~(1u << 6u);
    }

    /**
     * Toggle INT_STATUS's OCRAM_ECC_ERRM_INT bit.
     *
     * OCRAM access multi-bit ECC Error Interrupt Status
     */
    inline void toggle_INT_STATUS_OCRAM_ECC_ERRM_INT() volatile
    {
        INT_STATUS ^= 1u << 6u;
    }

    /**
     * Get INT_STATUS's OCRAM_ERR_STATUS bit.
     *
     * OCRAM Access Error Status
     */
    inline bool get_INT_STATUS_OCRAM_ERR_STATUS() volatile
    {
        return INT_STATUS & (1u << 5u);
    }

    /**
     * Set INT_STATUS's OCRAM_ERR_STATUS bit.
     *
     * OCRAM Access Error Status
     */
    inline void set_INT_STATUS_OCRAM_ERR_STATUS() volatile
    {
        INT_STATUS |= 1u << 5u;
    }

    /**
     * Clear INT_STATUS's OCRAM_ERR_STATUS bit.
     *
     * OCRAM Access Error Status
     */
    inline void clear_INT_STATUS_OCRAM_ERR_STATUS() volatile
    {
        INT_STATUS &= ~(1u << 5u);
    }

    /**
     * Toggle INT_STATUS's OCRAM_ERR_STATUS bit.
     *
     * OCRAM Access Error Status
     */
    inline void toggle_INT_STATUS_OCRAM_ERR_STATUS() volatile
    {
        INT_STATUS ^= 1u << 5u;
    }

    /**
     * Get INT_STATUS's DTCM_ERR_STATUS bit.
     *
     * DTCM Access Error Status
     */
    inline bool get_INT_STATUS_DTCM_ERR_STATUS() volatile
    {
        return INT_STATUS & (1u << 4u);
    }

    /**
     * Set INT_STATUS's DTCM_ERR_STATUS bit.
     *
     * DTCM Access Error Status
     */
    inline void set_INT_STATUS_DTCM_ERR_STATUS() volatile
    {
        INT_STATUS |= 1u << 4u;
    }

    /**
     * Clear INT_STATUS's DTCM_ERR_STATUS bit.
     *
     * DTCM Access Error Status
     */
    inline void clear_INT_STATUS_DTCM_ERR_STATUS() volatile
    {
        INT_STATUS &= ~(1u << 4u);
    }

    /**
     * Toggle INT_STATUS's DTCM_ERR_STATUS bit.
     *
     * DTCM Access Error Status
     */
    inline void toggle_INT_STATUS_DTCM_ERR_STATUS() volatile
    {
        INT_STATUS ^= 1u << 4u;
    }

    /**
     * Get INT_STATUS's ITCM_ERR_STATUS bit.
     *
     * ITCM Access Error Status
     */
    inline bool get_INT_STATUS_ITCM_ERR_STATUS() volatile
    {
        return INT_STATUS & (1u << 3u);
    }

    /**
     * Set INT_STATUS's ITCM_ERR_STATUS bit.
     *
     * ITCM Access Error Status
     */
    inline void set_INT_STATUS_ITCM_ERR_STATUS() volatile
    {
        INT_STATUS |= 1u << 3u;
    }

    /**
     * Clear INT_STATUS's ITCM_ERR_STATUS bit.
     *
     * ITCM Access Error Status
     */
    inline void clear_INT_STATUS_ITCM_ERR_STATUS() volatile
    {
        INT_STATUS &= ~(1u << 3u);
    }

    /**
     * Toggle INT_STATUS's ITCM_ERR_STATUS bit.
     *
     * ITCM Access Error Status
     */
    inline void toggle_INT_STATUS_ITCM_ERR_STATUS() volatile
    {
        INT_STATUS ^= 1u << 3u;
    }

    /**
     * Get INT_STATUS's OCRAM_MAM_STATUS bit.
     *
     * OCRAM Magic Address Match Status
     */
    inline bool get_INT_STATUS_OCRAM_MAM_STATUS() volatile
    {
        return INT_STATUS & (1u << 2u);
    }

    /**
     * Set INT_STATUS's OCRAM_MAM_STATUS bit.
     *
     * OCRAM Magic Address Match Status
     */
    inline void set_INT_STATUS_OCRAM_MAM_STATUS() volatile
    {
        INT_STATUS |= 1u << 2u;
    }

    /**
     * Clear INT_STATUS's OCRAM_MAM_STATUS bit.
     *
     * OCRAM Magic Address Match Status
     */
    inline void clear_INT_STATUS_OCRAM_MAM_STATUS() volatile
    {
        INT_STATUS &= ~(1u << 2u);
    }

    /**
     * Toggle INT_STATUS's OCRAM_MAM_STATUS bit.
     *
     * OCRAM Magic Address Match Status
     */
    inline void toggle_INT_STATUS_OCRAM_MAM_STATUS() volatile
    {
        INT_STATUS ^= 1u << 2u;
    }

    /**
     * Get INT_STATUS's DTCM_MAM_STATUS bit.
     *
     * DTCM Magic Address Match Status
     */
    inline bool get_INT_STATUS_DTCM_MAM_STATUS() volatile
    {
        return INT_STATUS & (1u << 1u);
    }

    /**
     * Set INT_STATUS's DTCM_MAM_STATUS bit.
     *
     * DTCM Magic Address Match Status
     */
    inline void set_INT_STATUS_DTCM_MAM_STATUS() volatile
    {
        INT_STATUS |= 1u << 1u;
    }

    /**
     * Clear INT_STATUS's DTCM_MAM_STATUS bit.
     *
     * DTCM Magic Address Match Status
     */
    inline void clear_INT_STATUS_DTCM_MAM_STATUS() volatile
    {
        INT_STATUS &= ~(1u << 1u);
    }

    /**
     * Toggle INT_STATUS's DTCM_MAM_STATUS bit.
     *
     * DTCM Magic Address Match Status
     */
    inline void toggle_INT_STATUS_DTCM_MAM_STATUS() volatile
    {
        INT_STATUS ^= 1u << 1u;
    }

    /**
     * Get INT_STATUS's ITCM_MAM_STATUS bit.
     *
     * ITCM Magic Address Match Status
     */
    inline bool get_INT_STATUS_ITCM_MAM_STATUS() volatile
    {
        return INT_STATUS & (1u << 0u);
    }

    /**
     * Set INT_STATUS's ITCM_MAM_STATUS bit.
     *
     * ITCM Magic Address Match Status
     */
    inline void set_INT_STATUS_ITCM_MAM_STATUS() volatile
    {
        INT_STATUS |= 1u << 0u;
    }

    /**
     * Clear INT_STATUS's ITCM_MAM_STATUS bit.
     *
     * ITCM Magic Address Match Status
     */
    inline void clear_INT_STATUS_ITCM_MAM_STATUS() volatile
    {
        INT_STATUS &= ~(1u << 0u);
    }

    /**
     * Toggle INT_STATUS's ITCM_MAM_STATUS bit.
     *
     * ITCM Magic Address Match Status
     */
    inline void toggle_INT_STATUS_ITCM_MAM_STATUS() volatile
    {
        INT_STATUS ^= 1u << 0u;
    }

    /**
     * Get all of INT_STATUS's bit fields.
     *
     * (read-write) Interrupt Status Register
     */
    inline void get_INT_STATUS(
        uint16_t &Reserved, bool &OCRAM_PARTIAL_WR_INT_S,
        bool &D1TCM_PARTIAL_WR_INT_S, bool &D0TCM_PARTIAL_WR_INT_S,
        bool &ITCM_PARTIAL_WR_INT_S, bool &D1TCM_ECC_ERRS_INT,
        bool &D1TCM_ECC_ERRM_INT, bool &D0TCM_ECC_ERRS_INT,
        bool &D0TCM_ECC_ERRM_INT, bool &ITCM_ECC_ERRS_INT,
        bool &ITCM_ECC_ERRM_INT, bool &OCRAM_ECC_ERRS_INT,
        bool &OCRAM_ECC_ERRM_INT, bool &OCRAM_ERR_STATUS,
        bool &DTCM_ERR_STATUS, bool &ITCM_ERR_STATUS, bool &OCRAM_MAM_STATUS,
        bool &DTCM_MAM_STATUS, bool &ITCM_MAM_STATUS) volatile
    {
        uint32_t curr = INT_STATUS;

        Reserved = (curr >> 18u) & 0b11111111111111u;
        OCRAM_PARTIAL_WR_INT_S = curr & (1u << 17u);
        D1TCM_PARTIAL_WR_INT_S = curr & (1u << 16u);
        D0TCM_PARTIAL_WR_INT_S = curr & (1u << 15u);
        ITCM_PARTIAL_WR_INT_S = curr & (1u << 14u);
        D1TCM_ECC_ERRS_INT = curr & (1u << 13u);
        D1TCM_ECC_ERRM_INT = curr & (1u << 12u);
        D0TCM_ECC_ERRS_INT = curr & (1u << 11u);
        D0TCM_ECC_ERRM_INT = curr & (1u << 10u);
        ITCM_ECC_ERRS_INT = curr & (1u << 9u);
        ITCM_ECC_ERRM_INT = curr & (1u << 8u);
        OCRAM_ECC_ERRS_INT = curr & (1u << 7u);
        OCRAM_ECC_ERRM_INT = curr & (1u << 6u);
        OCRAM_ERR_STATUS = curr & (1u << 5u);
        DTCM_ERR_STATUS = curr & (1u << 4u);
        ITCM_ERR_STATUS = curr & (1u << 3u);
        OCRAM_MAM_STATUS = curr & (1u << 2u);
        DTCM_MAM_STATUS = curr & (1u << 1u);
        ITCM_MAM_STATUS = curr & (1u << 0u);
    }

    /**
     * Set all of INT_STATUS's bit fields.
     *
     * (read-write) Interrupt Status Register
     */
    inline void set_INT_STATUS(
        bool OCRAM_PARTIAL_WR_INT_S, bool D1TCM_PARTIAL_WR_INT_S,
        bool D0TCM_PARTIAL_WR_INT_S, bool ITCM_PARTIAL_WR_INT_S,
        bool D1TCM_ECC_ERRS_INT, bool D1TCM_ECC_ERRM_INT,
        bool D0TCM_ECC_ERRS_INT, bool D0TCM_ECC_ERRM_INT,
        bool ITCM_ECC_ERRS_INT, bool ITCM_ECC_ERRM_INT,
        bool OCRAM_ECC_ERRS_INT, bool OCRAM_ECC_ERRM_INT,
        bool OCRAM_ERR_STATUS, bool DTCM_ERR_STATUS, bool ITCM_ERR_STATUS,
        bool OCRAM_MAM_STATUS, bool DTCM_MAM_STATUS,
        bool ITCM_MAM_STATUS) volatile
    {
        uint32_t curr = INT_STATUS;

        curr &= ~(0b1u << 17u);
        curr |= (OCRAM_PARTIAL_WR_INT_S & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (D1TCM_PARTIAL_WR_INT_S & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (D0TCM_PARTIAL_WR_INT_S & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (ITCM_PARTIAL_WR_INT_S & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (D1TCM_ECC_ERRS_INT & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (D1TCM_ECC_ERRM_INT & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (D0TCM_ECC_ERRS_INT & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (D0TCM_ECC_ERRM_INT & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (ITCM_ECC_ERRS_INT & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (ITCM_ECC_ERRM_INT & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (OCRAM_ECC_ERRS_INT & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (OCRAM_ECC_ERRM_INT & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (OCRAM_ERR_STATUS & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (DTCM_ERR_STATUS & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (ITCM_ERR_STATUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (OCRAM_MAM_STATUS & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DTCM_MAM_STATUS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ITCM_MAM_STATUS & 0b1u) << 0u;

        INT_STATUS = curr;
    }

    /**
     * Get INT_STAT_EN's Reserved field.
     *
     * Reserved
     */
    inline uint16_t get_INT_STAT_EN_Reserved() volatile
    {
        return (INT_STAT_EN >> 18u) & 0b11111111111111u;
    }

    /**
     * Get INT_STAT_EN's OCRAM_PARTIAL_WR_INT_S_EN bit.
     *
     * OCRAM Partial Write Interrupt Status
     */
    inline bool get_INT_STAT_EN_OCRAM_PARTIAL_WR_INT_S_EN() volatile
    {
        return INT_STAT_EN & (1u << 17u);
    }

    /**
     * Set INT_STAT_EN's OCRAM_PARTIAL_WR_INT_S_EN bit.
     *
     * OCRAM Partial Write Interrupt Status
     */
    inline void set_INT_STAT_EN_OCRAM_PARTIAL_WR_INT_S_EN() volatile
    {
        INT_STAT_EN |= 1u << 17u;
    }

    /**
     * Clear INT_STAT_EN's OCRAM_PARTIAL_WR_INT_S_EN bit.
     *
     * OCRAM Partial Write Interrupt Status
     */
    inline void clear_INT_STAT_EN_OCRAM_PARTIAL_WR_INT_S_EN() volatile
    {
        INT_STAT_EN &= ~(1u << 17u);
    }

    /**
     * Toggle INT_STAT_EN's OCRAM_PARTIAL_WR_INT_S_EN bit.
     *
     * OCRAM Partial Write Interrupt Status
     */
    inline void toggle_INT_STAT_EN_OCRAM_PARTIAL_WR_INT_S_EN() volatile
    {
        INT_STAT_EN ^= 1u << 17u;
    }

    /**
     * Get INT_STAT_EN's D1TCM_PARTIAL_WR_INT_S_EN bit.
     *
     * D1TCM Partial Write Interrupt Status EN
     */
    inline bool get_INT_STAT_EN_D1TCM_PARTIAL_WR_INT_S_EN() volatile
    {
        return INT_STAT_EN & (1u << 16u);
    }

    /**
     * Set INT_STAT_EN's D1TCM_PARTIAL_WR_INT_S_EN bit.
     *
     * D1TCM Partial Write Interrupt Status EN
     */
    inline void set_INT_STAT_EN_D1TCM_PARTIAL_WR_INT_S_EN() volatile
    {
        INT_STAT_EN |= 1u << 16u;
    }

    /**
     * Clear INT_STAT_EN's D1TCM_PARTIAL_WR_INT_S_EN bit.
     *
     * D1TCM Partial Write Interrupt Status EN
     */
    inline void clear_INT_STAT_EN_D1TCM_PARTIAL_WR_INT_S_EN() volatile
    {
        INT_STAT_EN &= ~(1u << 16u);
    }

    /**
     * Toggle INT_STAT_EN's D1TCM_PARTIAL_WR_INT_S_EN bit.
     *
     * D1TCM Partial Write Interrupt Status EN
     */
    inline void toggle_INT_STAT_EN_D1TCM_PARTIAL_WR_INT_S_EN() volatile
    {
        INT_STAT_EN ^= 1u << 16u;
    }

    /**
     * Get INT_STAT_EN's D0TCM_PARTIAL_WR_INT_S_EN bit.
     *
     * D0TCM Partial Write Interrupt Status Enable
     */
    inline bool get_INT_STAT_EN_D0TCM_PARTIAL_WR_INT_S_EN() volatile
    {
        return INT_STAT_EN & (1u << 15u);
    }

    /**
     * Set INT_STAT_EN's D0TCM_PARTIAL_WR_INT_S_EN bit.
     *
     * D0TCM Partial Write Interrupt Status Enable
     */
    inline void set_INT_STAT_EN_D0TCM_PARTIAL_WR_INT_S_EN() volatile
    {
        INT_STAT_EN |= 1u << 15u;
    }

    /**
     * Clear INT_STAT_EN's D0TCM_PARTIAL_WR_INT_S_EN bit.
     *
     * D0TCM Partial Write Interrupt Status Enable
     */
    inline void clear_INT_STAT_EN_D0TCM_PARTIAL_WR_INT_S_EN() volatile
    {
        INT_STAT_EN &= ~(1u << 15u);
    }

    /**
     * Toggle INT_STAT_EN's D0TCM_PARTIAL_WR_INT_S_EN bit.
     *
     * D0TCM Partial Write Interrupt Status Enable
     */
    inline void toggle_INT_STAT_EN_D0TCM_PARTIAL_WR_INT_S_EN() volatile
    {
        INT_STAT_EN ^= 1u << 15u;
    }

    /**
     * Get INT_STAT_EN's ITCM_PARTIAL_WR_INT_S_EN bit.
     *
     * ITCM Partial Write Interrupt Status Enable
     */
    inline bool get_INT_STAT_EN_ITCM_PARTIAL_WR_INT_S_EN() volatile
    {
        return INT_STAT_EN & (1u << 14u);
    }

    /**
     * Set INT_STAT_EN's ITCM_PARTIAL_WR_INT_S_EN bit.
     *
     * ITCM Partial Write Interrupt Status Enable
     */
    inline void set_INT_STAT_EN_ITCM_PARTIAL_WR_INT_S_EN() volatile
    {
        INT_STAT_EN |= 1u << 14u;
    }

    /**
     * Clear INT_STAT_EN's ITCM_PARTIAL_WR_INT_S_EN bit.
     *
     * ITCM Partial Write Interrupt Status Enable
     */
    inline void clear_INT_STAT_EN_ITCM_PARTIAL_WR_INT_S_EN() volatile
    {
        INT_STAT_EN &= ~(1u << 14u);
    }

    /**
     * Toggle INT_STAT_EN's ITCM_PARTIAL_WR_INT_S_EN bit.
     *
     * ITCM Partial Write Interrupt Status Enable
     */
    inline void toggle_INT_STAT_EN_ITCM_PARTIAL_WR_INT_S_EN() volatile
    {
        INT_STAT_EN ^= 1u << 14u;
    }

    /**
     * Get INT_STAT_EN's D1TCM_ERRS_INT_EN bit.
     *
     * D1TCM Access single-bit ECC Error Interrupt Status Enable
     */
    inline bool get_INT_STAT_EN_D1TCM_ERRS_INT_EN() volatile
    {
        return INT_STAT_EN & (1u << 13u);
    }

    /**
     * Set INT_STAT_EN's D1TCM_ERRS_INT_EN bit.
     *
     * D1TCM Access single-bit ECC Error Interrupt Status Enable
     */
    inline void set_INT_STAT_EN_D1TCM_ERRS_INT_EN() volatile
    {
        INT_STAT_EN |= 1u << 13u;
    }

    /**
     * Clear INT_STAT_EN's D1TCM_ERRS_INT_EN bit.
     *
     * D1TCM Access single-bit ECC Error Interrupt Status Enable
     */
    inline void clear_INT_STAT_EN_D1TCM_ERRS_INT_EN() volatile
    {
        INT_STAT_EN &= ~(1u << 13u);
    }

    /**
     * Toggle INT_STAT_EN's D1TCM_ERRS_INT_EN bit.
     *
     * D1TCM Access single-bit ECC Error Interrupt Status Enable
     */
    inline void toggle_INT_STAT_EN_D1TCM_ERRS_INT_EN() volatile
    {
        INT_STAT_EN ^= 1u << 13u;
    }

    /**
     * Get INT_STAT_EN's D1TCM_ERRM_INT_EN bit.
     *
     * D1TCM Access multi-bit ECC Error Interrupt Status Enable
     */
    inline bool get_INT_STAT_EN_D1TCM_ERRM_INT_EN() volatile
    {
        return INT_STAT_EN & (1u << 12u);
    }

    /**
     * Set INT_STAT_EN's D1TCM_ERRM_INT_EN bit.
     *
     * D1TCM Access multi-bit ECC Error Interrupt Status Enable
     */
    inline void set_INT_STAT_EN_D1TCM_ERRM_INT_EN() volatile
    {
        INT_STAT_EN |= 1u << 12u;
    }

    /**
     * Clear INT_STAT_EN's D1TCM_ERRM_INT_EN bit.
     *
     * D1TCM Access multi-bit ECC Error Interrupt Status Enable
     */
    inline void clear_INT_STAT_EN_D1TCM_ERRM_INT_EN() volatile
    {
        INT_STAT_EN &= ~(1u << 12u);
    }

    /**
     * Toggle INT_STAT_EN's D1TCM_ERRM_INT_EN bit.
     *
     * D1TCM Access multi-bit ECC Error Interrupt Status Enable
     */
    inline void toggle_INT_STAT_EN_D1TCM_ERRM_INT_EN() volatile
    {
        INT_STAT_EN ^= 1u << 12u;
    }

    /**
     * Get INT_STAT_EN's D0TCM_ERRS_INT_EN bit.
     *
     * D0TCM Access single-bit ECC Error Interrupt Status Enable
     */
    inline bool get_INT_STAT_EN_D0TCM_ERRS_INT_EN() volatile
    {
        return INT_STAT_EN & (1u << 11u);
    }

    /**
     * Set INT_STAT_EN's D0TCM_ERRS_INT_EN bit.
     *
     * D0TCM Access single-bit ECC Error Interrupt Status Enable
     */
    inline void set_INT_STAT_EN_D0TCM_ERRS_INT_EN() volatile
    {
        INT_STAT_EN |= 1u << 11u;
    }

    /**
     * Clear INT_STAT_EN's D0TCM_ERRS_INT_EN bit.
     *
     * D0TCM Access single-bit ECC Error Interrupt Status Enable
     */
    inline void clear_INT_STAT_EN_D0TCM_ERRS_INT_EN() volatile
    {
        INT_STAT_EN &= ~(1u << 11u);
    }

    /**
     * Toggle INT_STAT_EN's D0TCM_ERRS_INT_EN bit.
     *
     * D0TCM Access single-bit ECC Error Interrupt Status Enable
     */
    inline void toggle_INT_STAT_EN_D0TCM_ERRS_INT_EN() volatile
    {
        INT_STAT_EN ^= 1u << 11u;
    }

    /**
     * Get INT_STAT_EN's D0TCM_ERRM_INT_EN bit.
     *
     * D0TCM Access multi-bit ECC Error Interrupt Status Enable
     */
    inline bool get_INT_STAT_EN_D0TCM_ERRM_INT_EN() volatile
    {
        return INT_STAT_EN & (1u << 10u);
    }

    /**
     * Set INT_STAT_EN's D0TCM_ERRM_INT_EN bit.
     *
     * D0TCM Access multi-bit ECC Error Interrupt Status Enable
     */
    inline void set_INT_STAT_EN_D0TCM_ERRM_INT_EN() volatile
    {
        INT_STAT_EN |= 1u << 10u;
    }

    /**
     * Clear INT_STAT_EN's D0TCM_ERRM_INT_EN bit.
     *
     * D0TCM Access multi-bit ECC Error Interrupt Status Enable
     */
    inline void clear_INT_STAT_EN_D0TCM_ERRM_INT_EN() volatile
    {
        INT_STAT_EN &= ~(1u << 10u);
    }

    /**
     * Toggle INT_STAT_EN's D0TCM_ERRM_INT_EN bit.
     *
     * D0TCM Access multi-bit ECC Error Interrupt Status Enable
     */
    inline void toggle_INT_STAT_EN_D0TCM_ERRM_INT_EN() volatile
    {
        INT_STAT_EN ^= 1u << 10u;
    }

    /**
     * Get INT_STAT_EN's ITCM_ERRS_INT_EN bit.
     *
     * ITCM Access single-bit ECC Error Interrupt Status Enable
     */
    inline bool get_INT_STAT_EN_ITCM_ERRS_INT_EN() volatile
    {
        return INT_STAT_EN & (1u << 9u);
    }

    /**
     * Set INT_STAT_EN's ITCM_ERRS_INT_EN bit.
     *
     * ITCM Access single-bit ECC Error Interrupt Status Enable
     */
    inline void set_INT_STAT_EN_ITCM_ERRS_INT_EN() volatile
    {
        INT_STAT_EN |= 1u << 9u;
    }

    /**
     * Clear INT_STAT_EN's ITCM_ERRS_INT_EN bit.
     *
     * ITCM Access single-bit ECC Error Interrupt Status Enable
     */
    inline void clear_INT_STAT_EN_ITCM_ERRS_INT_EN() volatile
    {
        INT_STAT_EN &= ~(1u << 9u);
    }

    /**
     * Toggle INT_STAT_EN's ITCM_ERRS_INT_EN bit.
     *
     * ITCM Access single-bit ECC Error Interrupt Status Enable
     */
    inline void toggle_INT_STAT_EN_ITCM_ERRS_INT_EN() volatile
    {
        INT_STAT_EN ^= 1u << 9u;
    }

    /**
     * Get INT_STAT_EN's ITCM_ERRM_INT_EN bit.
     *
     * ITCM Access multi-bit ECC Error Interrupt Status Enable
     */
    inline bool get_INT_STAT_EN_ITCM_ERRM_INT_EN() volatile
    {
        return INT_STAT_EN & (1u << 8u);
    }

    /**
     * Set INT_STAT_EN's ITCM_ERRM_INT_EN bit.
     *
     * ITCM Access multi-bit ECC Error Interrupt Status Enable
     */
    inline void set_INT_STAT_EN_ITCM_ERRM_INT_EN() volatile
    {
        INT_STAT_EN |= 1u << 8u;
    }

    /**
     * Clear INT_STAT_EN's ITCM_ERRM_INT_EN bit.
     *
     * ITCM Access multi-bit ECC Error Interrupt Status Enable
     */
    inline void clear_INT_STAT_EN_ITCM_ERRM_INT_EN() volatile
    {
        INT_STAT_EN &= ~(1u << 8u);
    }

    /**
     * Toggle INT_STAT_EN's ITCM_ERRM_INT_EN bit.
     *
     * ITCM Access multi-bit ECC Error Interrupt Status Enable
     */
    inline void toggle_INT_STAT_EN_ITCM_ERRM_INT_EN() volatile
    {
        INT_STAT_EN ^= 1u << 8u;
    }

    /**
     * Get INT_STAT_EN's OCRAM_ERRS_INT_EN bit.
     *
     * OCRAM Access single-bit ECC Error Interrupt Status Enable
     */
    inline bool get_INT_STAT_EN_OCRAM_ERRS_INT_EN() volatile
    {
        return INT_STAT_EN & (1u << 7u);
    }

    /**
     * Set INT_STAT_EN's OCRAM_ERRS_INT_EN bit.
     *
     * OCRAM Access single-bit ECC Error Interrupt Status Enable
     */
    inline void set_INT_STAT_EN_OCRAM_ERRS_INT_EN() volatile
    {
        INT_STAT_EN |= 1u << 7u;
    }

    /**
     * Clear INT_STAT_EN's OCRAM_ERRS_INT_EN bit.
     *
     * OCRAM Access single-bit ECC Error Interrupt Status Enable
     */
    inline void clear_INT_STAT_EN_OCRAM_ERRS_INT_EN() volatile
    {
        INT_STAT_EN &= ~(1u << 7u);
    }

    /**
     * Toggle INT_STAT_EN's OCRAM_ERRS_INT_EN bit.
     *
     * OCRAM Access single-bit ECC Error Interrupt Status Enable
     */
    inline void toggle_INT_STAT_EN_OCRAM_ERRS_INT_EN() volatile
    {
        INT_STAT_EN ^= 1u << 7u;
    }

    /**
     * Get INT_STAT_EN's OCRAM_ERRM_INT_EN bit.
     *
     * OCRAM Access multi-bit ECC Error Interrupt Status Enable
     */
    inline bool get_INT_STAT_EN_OCRAM_ERRM_INT_EN() volatile
    {
        return INT_STAT_EN & (1u << 6u);
    }

    /**
     * Set INT_STAT_EN's OCRAM_ERRM_INT_EN bit.
     *
     * OCRAM Access multi-bit ECC Error Interrupt Status Enable
     */
    inline void set_INT_STAT_EN_OCRAM_ERRM_INT_EN() volatile
    {
        INT_STAT_EN |= 1u << 6u;
    }

    /**
     * Clear INT_STAT_EN's OCRAM_ERRM_INT_EN bit.
     *
     * OCRAM Access multi-bit ECC Error Interrupt Status Enable
     */
    inline void clear_INT_STAT_EN_OCRAM_ERRM_INT_EN() volatile
    {
        INT_STAT_EN &= ~(1u << 6u);
    }

    /**
     * Toggle INT_STAT_EN's OCRAM_ERRM_INT_EN bit.
     *
     * OCRAM Access multi-bit ECC Error Interrupt Status Enable
     */
    inline void toggle_INT_STAT_EN_OCRAM_ERRM_INT_EN() volatile
    {
        INT_STAT_EN ^= 1u << 6u;
    }

    /**
     * Get INT_STAT_EN's OCRAM_ERR_STAT_EN bit.
     *
     * OCRAM Access Error Status Enable
     */
    inline bool get_INT_STAT_EN_OCRAM_ERR_STAT_EN() volatile
    {
        return INT_STAT_EN & (1u << 5u);
    }

    /**
     * Set INT_STAT_EN's OCRAM_ERR_STAT_EN bit.
     *
     * OCRAM Access Error Status Enable
     */
    inline void set_INT_STAT_EN_OCRAM_ERR_STAT_EN() volatile
    {
        INT_STAT_EN |= 1u << 5u;
    }

    /**
     * Clear INT_STAT_EN's OCRAM_ERR_STAT_EN bit.
     *
     * OCRAM Access Error Status Enable
     */
    inline void clear_INT_STAT_EN_OCRAM_ERR_STAT_EN() volatile
    {
        INT_STAT_EN &= ~(1u << 5u);
    }

    /**
     * Toggle INT_STAT_EN's OCRAM_ERR_STAT_EN bit.
     *
     * OCRAM Access Error Status Enable
     */
    inline void toggle_INT_STAT_EN_OCRAM_ERR_STAT_EN() volatile
    {
        INT_STAT_EN ^= 1u << 5u;
    }

    /**
     * Get INT_STAT_EN's DTCM_ERR_STAT_EN bit.
     *
     * DTCM Access Error Status Enable
     */
    inline bool get_INT_STAT_EN_DTCM_ERR_STAT_EN() volatile
    {
        return INT_STAT_EN & (1u << 4u);
    }

    /**
     * Set INT_STAT_EN's DTCM_ERR_STAT_EN bit.
     *
     * DTCM Access Error Status Enable
     */
    inline void set_INT_STAT_EN_DTCM_ERR_STAT_EN() volatile
    {
        INT_STAT_EN |= 1u << 4u;
    }

    /**
     * Clear INT_STAT_EN's DTCM_ERR_STAT_EN bit.
     *
     * DTCM Access Error Status Enable
     */
    inline void clear_INT_STAT_EN_DTCM_ERR_STAT_EN() volatile
    {
        INT_STAT_EN &= ~(1u << 4u);
    }

    /**
     * Toggle INT_STAT_EN's DTCM_ERR_STAT_EN bit.
     *
     * DTCM Access Error Status Enable
     */
    inline void toggle_INT_STAT_EN_DTCM_ERR_STAT_EN() volatile
    {
        INT_STAT_EN ^= 1u << 4u;
    }

    /**
     * Get INT_STAT_EN's ITCM_ERR_STAT_EN bit.
     *
     * ITCM Access Error Status Enable
     */
    inline bool get_INT_STAT_EN_ITCM_ERR_STAT_EN() volatile
    {
        return INT_STAT_EN & (1u << 3u);
    }

    /**
     * Set INT_STAT_EN's ITCM_ERR_STAT_EN bit.
     *
     * ITCM Access Error Status Enable
     */
    inline void set_INT_STAT_EN_ITCM_ERR_STAT_EN() volatile
    {
        INT_STAT_EN |= 1u << 3u;
    }

    /**
     * Clear INT_STAT_EN's ITCM_ERR_STAT_EN bit.
     *
     * ITCM Access Error Status Enable
     */
    inline void clear_INT_STAT_EN_ITCM_ERR_STAT_EN() volatile
    {
        INT_STAT_EN &= ~(1u << 3u);
    }

    /**
     * Toggle INT_STAT_EN's ITCM_ERR_STAT_EN bit.
     *
     * ITCM Access Error Status Enable
     */
    inline void toggle_INT_STAT_EN_ITCM_ERR_STAT_EN() volatile
    {
        INT_STAT_EN ^= 1u << 3u;
    }

    /**
     * Get INT_STAT_EN's OCRAM_MAM_STAT_EN bit.
     *
     * OCRAM Magic Address Match Status Enable
     */
    inline bool get_INT_STAT_EN_OCRAM_MAM_STAT_EN() volatile
    {
        return INT_STAT_EN & (1u << 2u);
    }

    /**
     * Set INT_STAT_EN's OCRAM_MAM_STAT_EN bit.
     *
     * OCRAM Magic Address Match Status Enable
     */
    inline void set_INT_STAT_EN_OCRAM_MAM_STAT_EN() volatile
    {
        INT_STAT_EN |= 1u << 2u;
    }

    /**
     * Clear INT_STAT_EN's OCRAM_MAM_STAT_EN bit.
     *
     * OCRAM Magic Address Match Status Enable
     */
    inline void clear_INT_STAT_EN_OCRAM_MAM_STAT_EN() volatile
    {
        INT_STAT_EN &= ~(1u << 2u);
    }

    /**
     * Toggle INT_STAT_EN's OCRAM_MAM_STAT_EN bit.
     *
     * OCRAM Magic Address Match Status Enable
     */
    inline void toggle_INT_STAT_EN_OCRAM_MAM_STAT_EN() volatile
    {
        INT_STAT_EN ^= 1u << 2u;
    }

    /**
     * Get INT_STAT_EN's DTCM_MAM_STAT_EN bit.
     *
     * DTCM Magic Address Match Status Enable
     */
    inline bool get_INT_STAT_EN_DTCM_MAM_STAT_EN() volatile
    {
        return INT_STAT_EN & (1u << 1u);
    }

    /**
     * Set INT_STAT_EN's DTCM_MAM_STAT_EN bit.
     *
     * DTCM Magic Address Match Status Enable
     */
    inline void set_INT_STAT_EN_DTCM_MAM_STAT_EN() volatile
    {
        INT_STAT_EN |= 1u << 1u;
    }

    /**
     * Clear INT_STAT_EN's DTCM_MAM_STAT_EN bit.
     *
     * DTCM Magic Address Match Status Enable
     */
    inline void clear_INT_STAT_EN_DTCM_MAM_STAT_EN() volatile
    {
        INT_STAT_EN &= ~(1u << 1u);
    }

    /**
     * Toggle INT_STAT_EN's DTCM_MAM_STAT_EN bit.
     *
     * DTCM Magic Address Match Status Enable
     */
    inline void toggle_INT_STAT_EN_DTCM_MAM_STAT_EN() volatile
    {
        INT_STAT_EN ^= 1u << 1u;
    }

    /**
     * Get INT_STAT_EN's ITCM_MAM_STAT_EN bit.
     *
     * ITCM Magic Address Match Status Enable
     */
    inline bool get_INT_STAT_EN_ITCM_MAM_STAT_EN() volatile
    {
        return INT_STAT_EN & (1u << 0u);
    }

    /**
     * Set INT_STAT_EN's ITCM_MAM_STAT_EN bit.
     *
     * ITCM Magic Address Match Status Enable
     */
    inline void set_INT_STAT_EN_ITCM_MAM_STAT_EN() volatile
    {
        INT_STAT_EN |= 1u << 0u;
    }

    /**
     * Clear INT_STAT_EN's ITCM_MAM_STAT_EN bit.
     *
     * ITCM Magic Address Match Status Enable
     */
    inline void clear_INT_STAT_EN_ITCM_MAM_STAT_EN() volatile
    {
        INT_STAT_EN &= ~(1u << 0u);
    }

    /**
     * Toggle INT_STAT_EN's ITCM_MAM_STAT_EN bit.
     *
     * ITCM Magic Address Match Status Enable
     */
    inline void toggle_INT_STAT_EN_ITCM_MAM_STAT_EN() volatile
    {
        INT_STAT_EN ^= 1u << 0u;
    }

    /**
     * Get all of INT_STAT_EN's bit fields.
     *
     * (read-write) Interrupt Status Enable Register
     */
    inline void get_INT_STAT_EN(
        uint16_t &Reserved, bool &OCRAM_PARTIAL_WR_INT_S_EN,
        bool &D1TCM_PARTIAL_WR_INT_S_EN, bool &D0TCM_PARTIAL_WR_INT_S_EN,
        bool &ITCM_PARTIAL_WR_INT_S_EN, bool &D1TCM_ERRS_INT_EN,
        bool &D1TCM_ERRM_INT_EN, bool &D0TCM_ERRS_INT_EN,
        bool &D0TCM_ERRM_INT_EN, bool &ITCM_ERRS_INT_EN,
        bool &ITCM_ERRM_INT_EN, bool &OCRAM_ERRS_INT_EN,
        bool &OCRAM_ERRM_INT_EN, bool &OCRAM_ERR_STAT_EN,
        bool &DTCM_ERR_STAT_EN, bool &ITCM_ERR_STAT_EN,
        bool &OCRAM_MAM_STAT_EN, bool &DTCM_MAM_STAT_EN,
        bool &ITCM_MAM_STAT_EN) volatile
    {
        uint32_t curr = INT_STAT_EN;

        Reserved = (curr >> 18u) & 0b11111111111111u;
        OCRAM_PARTIAL_WR_INT_S_EN = curr & (1u << 17u);
        D1TCM_PARTIAL_WR_INT_S_EN = curr & (1u << 16u);
        D0TCM_PARTIAL_WR_INT_S_EN = curr & (1u << 15u);
        ITCM_PARTIAL_WR_INT_S_EN = curr & (1u << 14u);
        D1TCM_ERRS_INT_EN = curr & (1u << 13u);
        D1TCM_ERRM_INT_EN = curr & (1u << 12u);
        D0TCM_ERRS_INT_EN = curr & (1u << 11u);
        D0TCM_ERRM_INT_EN = curr & (1u << 10u);
        ITCM_ERRS_INT_EN = curr & (1u << 9u);
        ITCM_ERRM_INT_EN = curr & (1u << 8u);
        OCRAM_ERRS_INT_EN = curr & (1u << 7u);
        OCRAM_ERRM_INT_EN = curr & (1u << 6u);
        OCRAM_ERR_STAT_EN = curr & (1u << 5u);
        DTCM_ERR_STAT_EN = curr & (1u << 4u);
        ITCM_ERR_STAT_EN = curr & (1u << 3u);
        OCRAM_MAM_STAT_EN = curr & (1u << 2u);
        DTCM_MAM_STAT_EN = curr & (1u << 1u);
        ITCM_MAM_STAT_EN = curr & (1u << 0u);
    }

    /**
     * Set all of INT_STAT_EN's bit fields.
     *
     * (read-write) Interrupt Status Enable Register
     */
    inline void set_INT_STAT_EN(
        bool OCRAM_PARTIAL_WR_INT_S_EN, bool D1TCM_PARTIAL_WR_INT_S_EN,
        bool D0TCM_PARTIAL_WR_INT_S_EN, bool ITCM_PARTIAL_WR_INT_S_EN,
        bool D1TCM_ERRS_INT_EN, bool D1TCM_ERRM_INT_EN, bool D0TCM_ERRS_INT_EN,
        bool D0TCM_ERRM_INT_EN, bool ITCM_ERRS_INT_EN, bool ITCM_ERRM_INT_EN,
        bool OCRAM_ERRS_INT_EN, bool OCRAM_ERRM_INT_EN, bool OCRAM_ERR_STAT_EN,
        bool DTCM_ERR_STAT_EN, bool ITCM_ERR_STAT_EN, bool OCRAM_MAM_STAT_EN,
        bool DTCM_MAM_STAT_EN, bool ITCM_MAM_STAT_EN) volatile
    {
        uint32_t curr = INT_STAT_EN;

        curr &= ~(0b1u << 17u);
        curr |= (OCRAM_PARTIAL_WR_INT_S_EN & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (D1TCM_PARTIAL_WR_INT_S_EN & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (D0TCM_PARTIAL_WR_INT_S_EN & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (ITCM_PARTIAL_WR_INT_S_EN & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (D1TCM_ERRS_INT_EN & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (D1TCM_ERRM_INT_EN & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (D0TCM_ERRS_INT_EN & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (D0TCM_ERRM_INT_EN & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (ITCM_ERRS_INT_EN & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (ITCM_ERRM_INT_EN & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (OCRAM_ERRS_INT_EN & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (OCRAM_ERRM_INT_EN & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (OCRAM_ERR_STAT_EN & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (DTCM_ERR_STAT_EN & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (ITCM_ERR_STAT_EN & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (OCRAM_MAM_STAT_EN & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DTCM_MAM_STAT_EN & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ITCM_MAM_STAT_EN & 0b1u) << 0u;

        INT_STAT_EN = curr;
    }

    /**
     * Get INT_SIG_EN's Reserved field.
     *
     * Reserved
     */
    inline uint16_t get_INT_SIG_EN_Reserved() volatile
    {
        return (INT_SIG_EN >> 18u) & 0b11111111111111u;
    }

    /**
     * Get INT_SIG_EN's OCRAM_PARTIAL_WR_INT_SIG_EN bit.
     *
     * OCRAM Partial Write Interrupt Signal Enable
     */
    inline bool get_INT_SIG_EN_OCRAM_PARTIAL_WR_INT_SIG_EN() volatile
    {
        return INT_SIG_EN & (1u << 17u);
    }

    /**
     * Set INT_SIG_EN's OCRAM_PARTIAL_WR_INT_SIG_EN bit.
     *
     * OCRAM Partial Write Interrupt Signal Enable
     */
    inline void set_INT_SIG_EN_OCRAM_PARTIAL_WR_INT_SIG_EN() volatile
    {
        INT_SIG_EN |= 1u << 17u;
    }

    /**
     * Clear INT_SIG_EN's OCRAM_PARTIAL_WR_INT_SIG_EN bit.
     *
     * OCRAM Partial Write Interrupt Signal Enable
     */
    inline void clear_INT_SIG_EN_OCRAM_PARTIAL_WR_INT_SIG_EN() volatile
    {
        INT_SIG_EN &= ~(1u << 17u);
    }

    /**
     * Toggle INT_SIG_EN's OCRAM_PARTIAL_WR_INT_SIG_EN bit.
     *
     * OCRAM Partial Write Interrupt Signal Enable
     */
    inline void toggle_INT_SIG_EN_OCRAM_PARTIAL_WR_INT_SIG_EN() volatile
    {
        INT_SIG_EN ^= 1u << 17u;
    }

    /**
     * Get INT_SIG_EN's D1TCM_PARTIAL_WR_INT_SIG_EN bit.
     *
     * D1TCM Partial Write Interrupt Signal Enable EN
     */
    inline bool get_INT_SIG_EN_D1TCM_PARTIAL_WR_INT_SIG_EN() volatile
    {
        return INT_SIG_EN & (1u << 16u);
    }

    /**
     * Set INT_SIG_EN's D1TCM_PARTIAL_WR_INT_SIG_EN bit.
     *
     * D1TCM Partial Write Interrupt Signal Enable EN
     */
    inline void set_INT_SIG_EN_D1TCM_PARTIAL_WR_INT_SIG_EN() volatile
    {
        INT_SIG_EN |= 1u << 16u;
    }

    /**
     * Clear INT_SIG_EN's D1TCM_PARTIAL_WR_INT_SIG_EN bit.
     *
     * D1TCM Partial Write Interrupt Signal Enable EN
     */
    inline void clear_INT_SIG_EN_D1TCM_PARTIAL_WR_INT_SIG_EN() volatile
    {
        INT_SIG_EN &= ~(1u << 16u);
    }

    /**
     * Toggle INT_SIG_EN's D1TCM_PARTIAL_WR_INT_SIG_EN bit.
     *
     * D1TCM Partial Write Interrupt Signal Enable EN
     */
    inline void toggle_INT_SIG_EN_D1TCM_PARTIAL_WR_INT_SIG_EN() volatile
    {
        INT_SIG_EN ^= 1u << 16u;
    }

    /**
     * Get INT_SIG_EN's D0TCM_PARTIAL_WR_INT_SIG_EN bit.
     *
     * D0TCM Partial Write Interrupt Signal Enable Enable
     */
    inline bool get_INT_SIG_EN_D0TCM_PARTIAL_WR_INT_SIG_EN() volatile
    {
        return INT_SIG_EN & (1u << 15u);
    }

    /**
     * Set INT_SIG_EN's D0TCM_PARTIAL_WR_INT_SIG_EN bit.
     *
     * D0TCM Partial Write Interrupt Signal Enable Enable
     */
    inline void set_INT_SIG_EN_D0TCM_PARTIAL_WR_INT_SIG_EN() volatile
    {
        INT_SIG_EN |= 1u << 15u;
    }

    /**
     * Clear INT_SIG_EN's D0TCM_PARTIAL_WR_INT_SIG_EN bit.
     *
     * D0TCM Partial Write Interrupt Signal Enable Enable
     */
    inline void clear_INT_SIG_EN_D0TCM_PARTIAL_WR_INT_SIG_EN() volatile
    {
        INT_SIG_EN &= ~(1u << 15u);
    }

    /**
     * Toggle INT_SIG_EN's D0TCM_PARTIAL_WR_INT_SIG_EN bit.
     *
     * D0TCM Partial Write Interrupt Signal Enable Enable
     */
    inline void toggle_INT_SIG_EN_D0TCM_PARTIAL_WR_INT_SIG_EN() volatile
    {
        INT_SIG_EN ^= 1u << 15u;
    }

    /**
     * Get INT_SIG_EN's ITCM_PARTIAL_WR_INT_SIG_EN bit.
     *
     * ITCM Partial Write Interrupt Signal Enable Enable
     */
    inline bool get_INT_SIG_EN_ITCM_PARTIAL_WR_INT_SIG_EN() volatile
    {
        return INT_SIG_EN & (1u << 14u);
    }

    /**
     * Set INT_SIG_EN's ITCM_PARTIAL_WR_INT_SIG_EN bit.
     *
     * ITCM Partial Write Interrupt Signal Enable Enable
     */
    inline void set_INT_SIG_EN_ITCM_PARTIAL_WR_INT_SIG_EN() volatile
    {
        INT_SIG_EN |= 1u << 14u;
    }

    /**
     * Clear INT_SIG_EN's ITCM_PARTIAL_WR_INT_SIG_EN bit.
     *
     * ITCM Partial Write Interrupt Signal Enable Enable
     */
    inline void clear_INT_SIG_EN_ITCM_PARTIAL_WR_INT_SIG_EN() volatile
    {
        INT_SIG_EN &= ~(1u << 14u);
    }

    /**
     * Toggle INT_SIG_EN's ITCM_PARTIAL_WR_INT_SIG_EN bit.
     *
     * ITCM Partial Write Interrupt Signal Enable Enable
     */
    inline void toggle_INT_SIG_EN_ITCM_PARTIAL_WR_INT_SIG_EN() volatile
    {
        INT_SIG_EN ^= 1u << 14u;
    }

    /**
     * Get INT_SIG_EN's D1TCM_ERRS_INT_SIG_EN bit.
     *
     * D1TCM Access single-bit ECC Error Interrupt Signal Enable
     */
    inline bool get_INT_SIG_EN_D1TCM_ERRS_INT_SIG_EN() volatile
    {
        return INT_SIG_EN & (1u << 13u);
    }

    /**
     * Set INT_SIG_EN's D1TCM_ERRS_INT_SIG_EN bit.
     *
     * D1TCM Access single-bit ECC Error Interrupt Signal Enable
     */
    inline void set_INT_SIG_EN_D1TCM_ERRS_INT_SIG_EN() volatile
    {
        INT_SIG_EN |= 1u << 13u;
    }

    /**
     * Clear INT_SIG_EN's D1TCM_ERRS_INT_SIG_EN bit.
     *
     * D1TCM Access single-bit ECC Error Interrupt Signal Enable
     */
    inline void clear_INT_SIG_EN_D1TCM_ERRS_INT_SIG_EN() volatile
    {
        INT_SIG_EN &= ~(1u << 13u);
    }

    /**
     * Toggle INT_SIG_EN's D1TCM_ERRS_INT_SIG_EN bit.
     *
     * D1TCM Access single-bit ECC Error Interrupt Signal Enable
     */
    inline void toggle_INT_SIG_EN_D1TCM_ERRS_INT_SIG_EN() volatile
    {
        INT_SIG_EN ^= 1u << 13u;
    }

    /**
     * Get INT_SIG_EN's D1TCM_ERRM_INT_SIG_EN bit.
     *
     * D1TCM Access multi-bit ECC Error Interrupt Signal Enable
     */
    inline bool get_INT_SIG_EN_D1TCM_ERRM_INT_SIG_EN() volatile
    {
        return INT_SIG_EN & (1u << 12u);
    }

    /**
     * Set INT_SIG_EN's D1TCM_ERRM_INT_SIG_EN bit.
     *
     * D1TCM Access multi-bit ECC Error Interrupt Signal Enable
     */
    inline void set_INT_SIG_EN_D1TCM_ERRM_INT_SIG_EN() volatile
    {
        INT_SIG_EN |= 1u << 12u;
    }

    /**
     * Clear INT_SIG_EN's D1TCM_ERRM_INT_SIG_EN bit.
     *
     * D1TCM Access multi-bit ECC Error Interrupt Signal Enable
     */
    inline void clear_INT_SIG_EN_D1TCM_ERRM_INT_SIG_EN() volatile
    {
        INT_SIG_EN &= ~(1u << 12u);
    }

    /**
     * Toggle INT_SIG_EN's D1TCM_ERRM_INT_SIG_EN bit.
     *
     * D1TCM Access multi-bit ECC Error Interrupt Signal Enable
     */
    inline void toggle_INT_SIG_EN_D1TCM_ERRM_INT_SIG_EN() volatile
    {
        INT_SIG_EN ^= 1u << 12u;
    }

    /**
     * Get INT_SIG_EN's D0TCM_ERRS_INT_SIG_EN bit.
     *
     * D0TCM Access single-bit ECC Error Interrupt Signal Enable
     */
    inline bool get_INT_SIG_EN_D0TCM_ERRS_INT_SIG_EN() volatile
    {
        return INT_SIG_EN & (1u << 11u);
    }

    /**
     * Set INT_SIG_EN's D0TCM_ERRS_INT_SIG_EN bit.
     *
     * D0TCM Access single-bit ECC Error Interrupt Signal Enable
     */
    inline void set_INT_SIG_EN_D0TCM_ERRS_INT_SIG_EN() volatile
    {
        INT_SIG_EN |= 1u << 11u;
    }

    /**
     * Clear INT_SIG_EN's D0TCM_ERRS_INT_SIG_EN bit.
     *
     * D0TCM Access single-bit ECC Error Interrupt Signal Enable
     */
    inline void clear_INT_SIG_EN_D0TCM_ERRS_INT_SIG_EN() volatile
    {
        INT_SIG_EN &= ~(1u << 11u);
    }

    /**
     * Toggle INT_SIG_EN's D0TCM_ERRS_INT_SIG_EN bit.
     *
     * D0TCM Access single-bit ECC Error Interrupt Signal Enable
     */
    inline void toggle_INT_SIG_EN_D0TCM_ERRS_INT_SIG_EN() volatile
    {
        INT_SIG_EN ^= 1u << 11u;
    }

    /**
     * Get INT_SIG_EN's D0TCM_ERRM_INT_SIG_EN bit.
     *
     * D0TCM Access multi-bit ECC Error Interrupt Signal Enable
     */
    inline bool get_INT_SIG_EN_D0TCM_ERRM_INT_SIG_EN() volatile
    {
        return INT_SIG_EN & (1u << 10u);
    }

    /**
     * Set INT_SIG_EN's D0TCM_ERRM_INT_SIG_EN bit.
     *
     * D0TCM Access multi-bit ECC Error Interrupt Signal Enable
     */
    inline void set_INT_SIG_EN_D0TCM_ERRM_INT_SIG_EN() volatile
    {
        INT_SIG_EN |= 1u << 10u;
    }

    /**
     * Clear INT_SIG_EN's D0TCM_ERRM_INT_SIG_EN bit.
     *
     * D0TCM Access multi-bit ECC Error Interrupt Signal Enable
     */
    inline void clear_INT_SIG_EN_D0TCM_ERRM_INT_SIG_EN() volatile
    {
        INT_SIG_EN &= ~(1u << 10u);
    }

    /**
     * Toggle INT_SIG_EN's D0TCM_ERRM_INT_SIG_EN bit.
     *
     * D0TCM Access multi-bit ECC Error Interrupt Signal Enable
     */
    inline void toggle_INT_SIG_EN_D0TCM_ERRM_INT_SIG_EN() volatile
    {
        INT_SIG_EN ^= 1u << 10u;
    }

    /**
     * Get INT_SIG_EN's ITCM_ERRS_INT_SIG_EN bit.
     *
     * ITCM Access single-bit ECC Error Interrupt Signal Enable
     */
    inline bool get_INT_SIG_EN_ITCM_ERRS_INT_SIG_EN() volatile
    {
        return INT_SIG_EN & (1u << 9u);
    }

    /**
     * Set INT_SIG_EN's ITCM_ERRS_INT_SIG_EN bit.
     *
     * ITCM Access single-bit ECC Error Interrupt Signal Enable
     */
    inline void set_INT_SIG_EN_ITCM_ERRS_INT_SIG_EN() volatile
    {
        INT_SIG_EN |= 1u << 9u;
    }

    /**
     * Clear INT_SIG_EN's ITCM_ERRS_INT_SIG_EN bit.
     *
     * ITCM Access single-bit ECC Error Interrupt Signal Enable
     */
    inline void clear_INT_SIG_EN_ITCM_ERRS_INT_SIG_EN() volatile
    {
        INT_SIG_EN &= ~(1u << 9u);
    }

    /**
     * Toggle INT_SIG_EN's ITCM_ERRS_INT_SIG_EN bit.
     *
     * ITCM Access single-bit ECC Error Interrupt Signal Enable
     */
    inline void toggle_INT_SIG_EN_ITCM_ERRS_INT_SIG_EN() volatile
    {
        INT_SIG_EN ^= 1u << 9u;
    }

    /**
     * Get INT_SIG_EN's ITCM_ERRM_INT_SIG_EN bit.
     *
     * ITCM Access multi-bit ECC Error Interrupt Signal Enable
     */
    inline bool get_INT_SIG_EN_ITCM_ERRM_INT_SIG_EN() volatile
    {
        return INT_SIG_EN & (1u << 8u);
    }

    /**
     * Set INT_SIG_EN's ITCM_ERRM_INT_SIG_EN bit.
     *
     * ITCM Access multi-bit ECC Error Interrupt Signal Enable
     */
    inline void set_INT_SIG_EN_ITCM_ERRM_INT_SIG_EN() volatile
    {
        INT_SIG_EN |= 1u << 8u;
    }

    /**
     * Clear INT_SIG_EN's ITCM_ERRM_INT_SIG_EN bit.
     *
     * ITCM Access multi-bit ECC Error Interrupt Signal Enable
     */
    inline void clear_INT_SIG_EN_ITCM_ERRM_INT_SIG_EN() volatile
    {
        INT_SIG_EN &= ~(1u << 8u);
    }

    /**
     * Toggle INT_SIG_EN's ITCM_ERRM_INT_SIG_EN bit.
     *
     * ITCM Access multi-bit ECC Error Interrupt Signal Enable
     */
    inline void toggle_INT_SIG_EN_ITCM_ERRM_INT_SIG_EN() volatile
    {
        INT_SIG_EN ^= 1u << 8u;
    }

    /**
     * Get INT_SIG_EN's OCRAM_ERRS_INT_SIG_EN bit.
     *
     * OCRAM Access single-bit ECC Error Interrupt Signal Enable
     */
    inline bool get_INT_SIG_EN_OCRAM_ERRS_INT_SIG_EN() volatile
    {
        return INT_SIG_EN & (1u << 7u);
    }

    /**
     * Set INT_SIG_EN's OCRAM_ERRS_INT_SIG_EN bit.
     *
     * OCRAM Access single-bit ECC Error Interrupt Signal Enable
     */
    inline void set_INT_SIG_EN_OCRAM_ERRS_INT_SIG_EN() volatile
    {
        INT_SIG_EN |= 1u << 7u;
    }

    /**
     * Clear INT_SIG_EN's OCRAM_ERRS_INT_SIG_EN bit.
     *
     * OCRAM Access single-bit ECC Error Interrupt Signal Enable
     */
    inline void clear_INT_SIG_EN_OCRAM_ERRS_INT_SIG_EN() volatile
    {
        INT_SIG_EN &= ~(1u << 7u);
    }

    /**
     * Toggle INT_SIG_EN's OCRAM_ERRS_INT_SIG_EN bit.
     *
     * OCRAM Access single-bit ECC Error Interrupt Signal Enable
     */
    inline void toggle_INT_SIG_EN_OCRAM_ERRS_INT_SIG_EN() volatile
    {
        INT_SIG_EN ^= 1u << 7u;
    }

    /**
     * Get INT_SIG_EN's OCRAM_ERRM_INT_SIG_EN bit.
     *
     * OCRAM Access multi-bit ECC Error Interrupt Signal Enable
     */
    inline bool get_INT_SIG_EN_OCRAM_ERRM_INT_SIG_EN() volatile
    {
        return INT_SIG_EN & (1u << 6u);
    }

    /**
     * Set INT_SIG_EN's OCRAM_ERRM_INT_SIG_EN bit.
     *
     * OCRAM Access multi-bit ECC Error Interrupt Signal Enable
     */
    inline void set_INT_SIG_EN_OCRAM_ERRM_INT_SIG_EN() volatile
    {
        INT_SIG_EN |= 1u << 6u;
    }

    /**
     * Clear INT_SIG_EN's OCRAM_ERRM_INT_SIG_EN bit.
     *
     * OCRAM Access multi-bit ECC Error Interrupt Signal Enable
     */
    inline void clear_INT_SIG_EN_OCRAM_ERRM_INT_SIG_EN() volatile
    {
        INT_SIG_EN &= ~(1u << 6u);
    }

    /**
     * Toggle INT_SIG_EN's OCRAM_ERRM_INT_SIG_EN bit.
     *
     * OCRAM Access multi-bit ECC Error Interrupt Signal Enable
     */
    inline void toggle_INT_SIG_EN_OCRAM_ERRM_INT_SIG_EN() volatile
    {
        INT_SIG_EN ^= 1u << 6u;
    }

    /**
     * Get INT_SIG_EN's OCRAM_ERR_SIG_EN bit.
     *
     * OCRAM Access Error Interrupt Enable
     */
    inline bool get_INT_SIG_EN_OCRAM_ERR_SIG_EN() volatile
    {
        return INT_SIG_EN & (1u << 5u);
    }

    /**
     * Set INT_SIG_EN's OCRAM_ERR_SIG_EN bit.
     *
     * OCRAM Access Error Interrupt Enable
     */
    inline void set_INT_SIG_EN_OCRAM_ERR_SIG_EN() volatile
    {
        INT_SIG_EN |= 1u << 5u;
    }

    /**
     * Clear INT_SIG_EN's OCRAM_ERR_SIG_EN bit.
     *
     * OCRAM Access Error Interrupt Enable
     */
    inline void clear_INT_SIG_EN_OCRAM_ERR_SIG_EN() volatile
    {
        INT_SIG_EN &= ~(1u << 5u);
    }

    /**
     * Toggle INT_SIG_EN's OCRAM_ERR_SIG_EN bit.
     *
     * OCRAM Access Error Interrupt Enable
     */
    inline void toggle_INT_SIG_EN_OCRAM_ERR_SIG_EN() volatile
    {
        INT_SIG_EN ^= 1u << 5u;
    }

    /**
     * Get INT_SIG_EN's DTCM_ERR_SIG_EN bit.
     *
     * DTCM Access Error Interrupt Enable
     */
    inline bool get_INT_SIG_EN_DTCM_ERR_SIG_EN() volatile
    {
        return INT_SIG_EN & (1u << 4u);
    }

    /**
     * Set INT_SIG_EN's DTCM_ERR_SIG_EN bit.
     *
     * DTCM Access Error Interrupt Enable
     */
    inline void set_INT_SIG_EN_DTCM_ERR_SIG_EN() volatile
    {
        INT_SIG_EN |= 1u << 4u;
    }

    /**
     * Clear INT_SIG_EN's DTCM_ERR_SIG_EN bit.
     *
     * DTCM Access Error Interrupt Enable
     */
    inline void clear_INT_SIG_EN_DTCM_ERR_SIG_EN() volatile
    {
        INT_SIG_EN &= ~(1u << 4u);
    }

    /**
     * Toggle INT_SIG_EN's DTCM_ERR_SIG_EN bit.
     *
     * DTCM Access Error Interrupt Enable
     */
    inline void toggle_INT_SIG_EN_DTCM_ERR_SIG_EN() volatile
    {
        INT_SIG_EN ^= 1u << 4u;
    }

    /**
     * Get INT_SIG_EN's ITCM_ERR_SIG_EN bit.
     *
     * ITCM Access Error Interrupt Enable
     */
    inline bool get_INT_SIG_EN_ITCM_ERR_SIG_EN() volatile
    {
        return INT_SIG_EN & (1u << 3u);
    }

    /**
     * Set INT_SIG_EN's ITCM_ERR_SIG_EN bit.
     *
     * ITCM Access Error Interrupt Enable
     */
    inline void set_INT_SIG_EN_ITCM_ERR_SIG_EN() volatile
    {
        INT_SIG_EN |= 1u << 3u;
    }

    /**
     * Clear INT_SIG_EN's ITCM_ERR_SIG_EN bit.
     *
     * ITCM Access Error Interrupt Enable
     */
    inline void clear_INT_SIG_EN_ITCM_ERR_SIG_EN() volatile
    {
        INT_SIG_EN &= ~(1u << 3u);
    }

    /**
     * Toggle INT_SIG_EN's ITCM_ERR_SIG_EN bit.
     *
     * ITCM Access Error Interrupt Enable
     */
    inline void toggle_INT_SIG_EN_ITCM_ERR_SIG_EN() volatile
    {
        INT_SIG_EN ^= 1u << 3u;
    }

    /**
     * Get INT_SIG_EN's OCRAM_MAM_SIG_EN bit.
     *
     * OCRAM Magic Address Match Interrupt Enable
     */
    inline bool get_INT_SIG_EN_OCRAM_MAM_SIG_EN() volatile
    {
        return INT_SIG_EN & (1u << 2u);
    }

    /**
     * Set INT_SIG_EN's OCRAM_MAM_SIG_EN bit.
     *
     * OCRAM Magic Address Match Interrupt Enable
     */
    inline void set_INT_SIG_EN_OCRAM_MAM_SIG_EN() volatile
    {
        INT_SIG_EN |= 1u << 2u;
    }

    /**
     * Clear INT_SIG_EN's OCRAM_MAM_SIG_EN bit.
     *
     * OCRAM Magic Address Match Interrupt Enable
     */
    inline void clear_INT_SIG_EN_OCRAM_MAM_SIG_EN() volatile
    {
        INT_SIG_EN &= ~(1u << 2u);
    }

    /**
     * Toggle INT_SIG_EN's OCRAM_MAM_SIG_EN bit.
     *
     * OCRAM Magic Address Match Interrupt Enable
     */
    inline void toggle_INT_SIG_EN_OCRAM_MAM_SIG_EN() volatile
    {
        INT_SIG_EN ^= 1u << 2u;
    }

    /**
     * Get INT_SIG_EN's DTCM_MAM_SIG_EN bit.
     *
     * DTCM Magic Address Match Interrupt Enable
     */
    inline bool get_INT_SIG_EN_DTCM_MAM_SIG_EN() volatile
    {
        return INT_SIG_EN & (1u << 1u);
    }

    /**
     * Set INT_SIG_EN's DTCM_MAM_SIG_EN bit.
     *
     * DTCM Magic Address Match Interrupt Enable
     */
    inline void set_INT_SIG_EN_DTCM_MAM_SIG_EN() volatile
    {
        INT_SIG_EN |= 1u << 1u;
    }

    /**
     * Clear INT_SIG_EN's DTCM_MAM_SIG_EN bit.
     *
     * DTCM Magic Address Match Interrupt Enable
     */
    inline void clear_INT_SIG_EN_DTCM_MAM_SIG_EN() volatile
    {
        INT_SIG_EN &= ~(1u << 1u);
    }

    /**
     * Toggle INT_SIG_EN's DTCM_MAM_SIG_EN bit.
     *
     * DTCM Magic Address Match Interrupt Enable
     */
    inline void toggle_INT_SIG_EN_DTCM_MAM_SIG_EN() volatile
    {
        INT_SIG_EN ^= 1u << 1u;
    }

    /**
     * Get INT_SIG_EN's ITCM_MAM_SIG_EN bit.
     *
     * ITCM Magic Address Match Interrupt Enable
     */
    inline bool get_INT_SIG_EN_ITCM_MAM_SIG_EN() volatile
    {
        return INT_SIG_EN & (1u << 0u);
    }

    /**
     * Set INT_SIG_EN's ITCM_MAM_SIG_EN bit.
     *
     * ITCM Magic Address Match Interrupt Enable
     */
    inline void set_INT_SIG_EN_ITCM_MAM_SIG_EN() volatile
    {
        INT_SIG_EN |= 1u << 0u;
    }

    /**
     * Clear INT_SIG_EN's ITCM_MAM_SIG_EN bit.
     *
     * ITCM Magic Address Match Interrupt Enable
     */
    inline void clear_INT_SIG_EN_ITCM_MAM_SIG_EN() volatile
    {
        INT_SIG_EN &= ~(1u << 0u);
    }

    /**
     * Toggle INT_SIG_EN's ITCM_MAM_SIG_EN bit.
     *
     * ITCM Magic Address Match Interrupt Enable
     */
    inline void toggle_INT_SIG_EN_ITCM_MAM_SIG_EN() volatile
    {
        INT_SIG_EN ^= 1u << 0u;
    }

    /**
     * Get all of INT_SIG_EN's bit fields.
     *
     * (read-write) Interrupt Enable Register
     */
    inline void get_INT_SIG_EN(
        uint16_t &Reserved, bool &OCRAM_PARTIAL_WR_INT_SIG_EN,
        bool &D1TCM_PARTIAL_WR_INT_SIG_EN, bool &D0TCM_PARTIAL_WR_INT_SIG_EN,
        bool &ITCM_PARTIAL_WR_INT_SIG_EN, bool &D1TCM_ERRS_INT_SIG_EN,
        bool &D1TCM_ERRM_INT_SIG_EN, bool &D0TCM_ERRS_INT_SIG_EN,
        bool &D0TCM_ERRM_INT_SIG_EN, bool &ITCM_ERRS_INT_SIG_EN,
        bool &ITCM_ERRM_INT_SIG_EN, bool &OCRAM_ERRS_INT_SIG_EN,
        bool &OCRAM_ERRM_INT_SIG_EN, bool &OCRAM_ERR_SIG_EN,
        bool &DTCM_ERR_SIG_EN, bool &ITCM_ERR_SIG_EN, bool &OCRAM_MAM_SIG_EN,
        bool &DTCM_MAM_SIG_EN, bool &ITCM_MAM_SIG_EN) volatile
    {
        uint32_t curr = INT_SIG_EN;

        Reserved = (curr >> 18u) & 0b11111111111111u;
        OCRAM_PARTIAL_WR_INT_SIG_EN = curr & (1u << 17u);
        D1TCM_PARTIAL_WR_INT_SIG_EN = curr & (1u << 16u);
        D0TCM_PARTIAL_WR_INT_SIG_EN = curr & (1u << 15u);
        ITCM_PARTIAL_WR_INT_SIG_EN = curr & (1u << 14u);
        D1TCM_ERRS_INT_SIG_EN = curr & (1u << 13u);
        D1TCM_ERRM_INT_SIG_EN = curr & (1u << 12u);
        D0TCM_ERRS_INT_SIG_EN = curr & (1u << 11u);
        D0TCM_ERRM_INT_SIG_EN = curr & (1u << 10u);
        ITCM_ERRS_INT_SIG_EN = curr & (1u << 9u);
        ITCM_ERRM_INT_SIG_EN = curr & (1u << 8u);
        OCRAM_ERRS_INT_SIG_EN = curr & (1u << 7u);
        OCRAM_ERRM_INT_SIG_EN = curr & (1u << 6u);
        OCRAM_ERR_SIG_EN = curr & (1u << 5u);
        DTCM_ERR_SIG_EN = curr & (1u << 4u);
        ITCM_ERR_SIG_EN = curr & (1u << 3u);
        OCRAM_MAM_SIG_EN = curr & (1u << 2u);
        DTCM_MAM_SIG_EN = curr & (1u << 1u);
        ITCM_MAM_SIG_EN = curr & (1u << 0u);
    }

    /**
     * Set all of INT_SIG_EN's bit fields.
     *
     * (read-write) Interrupt Enable Register
     */
    inline void set_INT_SIG_EN(
        bool OCRAM_PARTIAL_WR_INT_SIG_EN, bool D1TCM_PARTIAL_WR_INT_SIG_EN,
        bool D0TCM_PARTIAL_WR_INT_SIG_EN, bool ITCM_PARTIAL_WR_INT_SIG_EN,
        bool D1TCM_ERRS_INT_SIG_EN, bool D1TCM_ERRM_INT_SIG_EN,
        bool D0TCM_ERRS_INT_SIG_EN, bool D0TCM_ERRM_INT_SIG_EN,
        bool ITCM_ERRS_INT_SIG_EN, bool ITCM_ERRM_INT_SIG_EN,
        bool OCRAM_ERRS_INT_SIG_EN, bool OCRAM_ERRM_INT_SIG_EN,
        bool OCRAM_ERR_SIG_EN, bool DTCM_ERR_SIG_EN, bool ITCM_ERR_SIG_EN,
        bool OCRAM_MAM_SIG_EN, bool DTCM_MAM_SIG_EN,
        bool ITCM_MAM_SIG_EN) volatile
    {
        uint32_t curr = INT_SIG_EN;

        curr &= ~(0b1u << 17u);
        curr |= (OCRAM_PARTIAL_WR_INT_SIG_EN & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (D1TCM_PARTIAL_WR_INT_SIG_EN & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (D0TCM_PARTIAL_WR_INT_SIG_EN & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (ITCM_PARTIAL_WR_INT_SIG_EN & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (D1TCM_ERRS_INT_SIG_EN & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (D1TCM_ERRM_INT_SIG_EN & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (D0TCM_ERRS_INT_SIG_EN & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (D0TCM_ERRM_INT_SIG_EN & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (ITCM_ERRS_INT_SIG_EN & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (ITCM_ERRM_INT_SIG_EN & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (OCRAM_ERRS_INT_SIG_EN & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (OCRAM_ERRM_INT_SIG_EN & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (OCRAM_ERR_SIG_EN & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (DTCM_ERR_SIG_EN & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (ITCM_ERR_SIG_EN & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (OCRAM_MAM_SIG_EN & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DTCM_MAM_SIG_EN & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ITCM_MAM_SIG_EN & 0b1u) << 0u;

        INT_SIG_EN = curr;
    }

    /**
     * Get OCRAM_ECC_SINGLE_ERROR_INFO's Reserved field.
     *
     * Reserved
     */
    inline uint16_t get_OCRAM_ECC_SINGLE_ERROR_INFO_Reserved() volatile
    {
        return (OCRAM_ECC_SINGLE_ERROR_INFO >> 16u) & 0b1111111111111111u;
    }

    /**
     * Get OCRAM_ECC_SINGLE_ERROR_INFO's OCRAM_ECCS_ERRED_SYN field.
     *
     * corresponding ECC syndrome of OCRAM single-bit ECC error
     */
    inline uint8_t
    get_OCRAM_ECC_SINGLE_ERROR_INFO_OCRAM_ECCS_ERRED_SYN() volatile
    {
        return (OCRAM_ECC_SINGLE_ERROR_INFO >> 8u) & 0b11111111u;
    }

    /**
     * Get OCRAM_ECC_SINGLE_ERROR_INFO's OCRAM_ECCS_ERRED_ECC field.
     *
     * corresponding ECC cipher of OCRAM single-bit ECC error
     */
    inline uint8_t
    get_OCRAM_ECC_SINGLE_ERROR_INFO_OCRAM_ECCS_ERRED_ECC() volatile
    {
        return (OCRAM_ECC_SINGLE_ERROR_INFO >> 0u) & 0b11111111u;
    }

    /**
     * Get all of OCRAM_ECC_SINGLE_ERROR_INFO's bit fields.
     *
     * (read-write) OCRAM single-bit ECC Error Information Register
     */
    inline void get_OCRAM_ECC_SINGLE_ERROR_INFO(
        uint16_t &Reserved, uint8_t &OCRAM_ECCS_ERRED_SYN,
        uint8_t &OCRAM_ECCS_ERRED_ECC) volatile
    {
        uint32_t curr = OCRAM_ECC_SINGLE_ERROR_INFO;

        Reserved = (curr >> 16u) & 0b1111111111111111u;
        OCRAM_ECCS_ERRED_SYN = (curr >> 8u) & 0b11111111u;
        OCRAM_ECCS_ERRED_ECC = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get OCRAM_ECC_SINGLE_ERROR_ADDR's OCRAM_ECCS_ERRED_ADDR field.
     *
     * OCRAM single-bit ECC error address
     */
    inline uint32_t
    get_OCRAM_ECC_SINGLE_ERROR_ADDR_OCRAM_ECCS_ERRED_ADDR() volatile
    {
        return (OCRAM_ECC_SINGLE_ERROR_ADDR >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get OCRAM_ECC_SINGLE_ERROR_DATA_LSB's OCRAM_ECCS_ERRED_DATA_LSB field.
     *
     * OCRAM single-bit ECC error data [31:0]
     */
    inline uint32_t
    get_OCRAM_ECC_SINGLE_ERROR_DATA_LSB_OCRAM_ECCS_ERRED_DATA_LSB() volatile
    {
        return (OCRAM_ECC_SINGLE_ERROR_DATA_LSB >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get OCRAM_ECC_SINGLE_ERROR_DATA_MSB's OCRAM_ECCS_ERRED_DATA_MSB field.
     *
     * OCRAM single-bit ECC error data [63:32]
     */
    inline uint32_t
    get_OCRAM_ECC_SINGLE_ERROR_DATA_MSB_OCRAM_ECCS_ERRED_DATA_MSB() volatile
    {
        return (OCRAM_ECC_SINGLE_ERROR_DATA_MSB >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get OCRAM_ECC_MULTI_ERROR_INFO's Reserved field.
     *
     * Reserved
     */
    inline uint32_t get_OCRAM_ECC_MULTI_ERROR_INFO_Reserved() volatile
    {
        return (OCRAM_ECC_MULTI_ERROR_INFO >> 8u) &
               0b111111111111111111111111u;
    }

    /**
     * Get OCRAM_ECC_MULTI_ERROR_INFO's OCRAM_ECCM_ERRED_ECC field.
     *
     * OCRAM multi-bit ECC error corresponding ECC value
     */
    inline uint8_t
    get_OCRAM_ECC_MULTI_ERROR_INFO_OCRAM_ECCM_ERRED_ECC() volatile
    {
        return (OCRAM_ECC_MULTI_ERROR_INFO >> 0u) & 0b11111111u;
    }

    /**
     * Get all of OCRAM_ECC_MULTI_ERROR_INFO's bit fields.
     *
     * (read-write) OCRAM multi-bit ECC Error Information Register
     */
    inline void get_OCRAM_ECC_MULTI_ERROR_INFO(
        uint32_t &Reserved, uint8_t &OCRAM_ECCM_ERRED_ECC) volatile
    {
        uint32_t curr = OCRAM_ECC_MULTI_ERROR_INFO;

        Reserved = (curr >> 8u) & 0b111111111111111111111111u;
        OCRAM_ECCM_ERRED_ECC = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get OCRAM_ECC_MULTI_ERROR_ADDR's OCRAM_ECCM_ERRED_ADDR field.
     *
     * OCRAM multi-bit ECC error address
     */
    inline uint32_t
    get_OCRAM_ECC_MULTI_ERROR_ADDR_OCRAM_ECCM_ERRED_ADDR() volatile
    {
        return (OCRAM_ECC_MULTI_ERROR_ADDR >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get OCRAM_ECC_MULTI_ERROR_DATA_LSB's OCRAM_ECCM_ERRED_DATA_LSB field.
     *
     * OCRAM multi-bit ECC error data [31:0]
     */
    inline uint32_t
    get_OCRAM_ECC_MULTI_ERROR_DATA_LSB_OCRAM_ECCM_ERRED_DATA_LSB() volatile
    {
        return (OCRAM_ECC_MULTI_ERROR_DATA_LSB >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get OCRAM_ECC_MULTI_ERROR_DATA_MSB's OCRAM_ECCM_ERRED_DATA_MSB field.
     *
     * OCRAM multi-bit ECC error data [63:32]
     */
    inline uint32_t
    get_OCRAM_ECC_MULTI_ERROR_DATA_MSB_OCRAM_ECCM_ERRED_DATA_MSB() volatile
    {
        return (OCRAM_ECC_MULTI_ERROR_DATA_MSB >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get ITCM_ECC_SINGLE_ERROR_INFO's Reserved field.
     *
     * Reserved
     */
    inline uint16_t get_ITCM_ECC_SINGLE_ERROR_INFO_Reserved() volatile
    {
        return (ITCM_ECC_SINGLE_ERROR_INFO >> 20u) & 0b111111111111u;
    }

    /**
     * Get ITCM_ECC_SINGLE_ERROR_INFO's ITCM_ECCS_EFSYN field.
     *
     * ITCM single-bit ECC error corresponding syndrome
     */
    inline uint8_t get_ITCM_ECC_SINGLE_ERROR_INFO_ITCM_ECCS_EFSYN() volatile
    {
        return (ITCM_ECC_SINGLE_ERROR_INFO >> 12u) & 0b11111111u;
    }

    /**
     * Get ITCM_ECC_SINGLE_ERROR_INFO's ITCM_ECCS_EFPRT field.
     *
     * ITCM single-bit ECC error corresponding TCM_PRIV.
     */
    inline uint8_t get_ITCM_ECC_SINGLE_ERROR_INFO_ITCM_ECCS_EFPRT() volatile
    {
        return (ITCM_ECC_SINGLE_ERROR_INFO >> 8u) & 0b1111u;
    }

    /**
     * Get ITCM_ECC_SINGLE_ERROR_INFO's ITCM_ECCS_EFMST field.
     *
     * ITCM single-bit ECC error corresponding TCM_MASTER.
     */
    inline uint8_t get_ITCM_ECC_SINGLE_ERROR_INFO_ITCM_ECCS_EFMST() volatile
    {
        return (ITCM_ECC_SINGLE_ERROR_INFO >> 4u) & 0b1111u;
    }

    /**
     * Get ITCM_ECC_SINGLE_ERROR_INFO's ITCM_ECCS_EFSIZ field.
     *
     * ITCM single-bit ECC error corresponding TCM size
     */
    inline uint8_t get_ITCM_ECC_SINGLE_ERROR_INFO_ITCM_ECCS_EFSIZ() volatile
    {
        return (ITCM_ECC_SINGLE_ERROR_INFO >> 1u) & 0b111u;
    }

    /**
     * Get ITCM_ECC_SINGLE_ERROR_INFO's ITCM_ECCS_EFW bit.
     *
     * ITCM single-bit ECC error corresponding TCM_WR value.
     */
    inline bool get_ITCM_ECC_SINGLE_ERROR_INFO_ITCM_ECCS_EFW() volatile
    {
        return ITCM_ECC_SINGLE_ERROR_INFO & (1u << 0u);
    }

    /**
     * Get all of ITCM_ECC_SINGLE_ERROR_INFO's bit fields.
     *
     * (read-write) ITCM single-bit ECC Error Information Register
     */
    inline void get_ITCM_ECC_SINGLE_ERROR_INFO(uint16_t &Reserved,
                                               uint8_t &ITCM_ECCS_EFSYN,
                                               uint8_t &ITCM_ECCS_EFPRT,
                                               uint8_t &ITCM_ECCS_EFMST,
                                               uint8_t &ITCM_ECCS_EFSIZ,
                                               bool &ITCM_ECCS_EFW) volatile
    {
        uint32_t curr = ITCM_ECC_SINGLE_ERROR_INFO;

        Reserved = (curr >> 20u) & 0b111111111111u;
        ITCM_ECCS_EFSYN = (curr >> 12u) & 0b11111111u;
        ITCM_ECCS_EFPRT = (curr >> 8u) & 0b1111u;
        ITCM_ECCS_EFMST = (curr >> 4u) & 0b1111u;
        ITCM_ECCS_EFSIZ = (curr >> 1u) & 0b111u;
        ITCM_ECCS_EFW = curr & (1u << 0u);
    }

    /**
     * Get ITCM_ECC_SINGLE_ERROR_ADDR's ITCM_ECCS_ERRED_ADDR field.
     *
     * ITCM single-bit ECC error address
     */
    inline uint32_t
    get_ITCM_ECC_SINGLE_ERROR_ADDR_ITCM_ECCS_ERRED_ADDR() volatile
    {
        return (ITCM_ECC_SINGLE_ERROR_ADDR >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get ITCM_ECC_SINGLE_ERROR_DATA_LSB's ITCM_ECCS_ERRED_DATA_LSB field.
     *
     * ITCM single-bit ECC error data [31:0]
     */
    inline uint32_t
    get_ITCM_ECC_SINGLE_ERROR_DATA_LSB_ITCM_ECCS_ERRED_DATA_LSB() volatile
    {
        return (ITCM_ECC_SINGLE_ERROR_DATA_LSB >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get ITCM_ECC_SINGLE_ERROR_DATA_MSB's ITCM_ECCS_ERRED_DATA_MSB field.
     *
     * ITCM single-bit ECC error data [63:32]
     */
    inline uint32_t
    get_ITCM_ECC_SINGLE_ERROR_DATA_MSB_ITCM_ECCS_ERRED_DATA_MSB() volatile
    {
        return (ITCM_ECC_SINGLE_ERROR_DATA_MSB >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get ITCM_ECC_MULTI_ERROR_INFO's Reserved field.
     *
     * Reserved
     */
    inline uint16_t get_ITCM_ECC_MULTI_ERROR_INFO_Reserved() volatile
    {
        return (ITCM_ECC_MULTI_ERROR_INFO >> 20u) & 0b111111111111u;
    }

    /**
     * Get ITCM_ECC_MULTI_ERROR_INFO's ITCM_ECCM_EFSYN field.
     *
     * ITCM multi-bit ECC error corresponding syndrome
     */
    inline uint8_t get_ITCM_ECC_MULTI_ERROR_INFO_ITCM_ECCM_EFSYN() volatile
    {
        return (ITCM_ECC_MULTI_ERROR_INFO >> 12u) & 0b11111111u;
    }

    /**
     * Get ITCM_ECC_MULTI_ERROR_INFO's ITCM_ECCM_EFPRT field.
     *
     * ITCM multi-bit ECC error corresponding TCM_PRIV
     */
    inline uint8_t get_ITCM_ECC_MULTI_ERROR_INFO_ITCM_ECCM_EFPRT() volatile
    {
        return (ITCM_ECC_MULTI_ERROR_INFO >> 8u) & 0b1111u;
    }

    /**
     * Get ITCM_ECC_MULTI_ERROR_INFO's ITCM_ECCM_EFMST field.
     *
     * ITCM multi-bit ECC error corresponding TCM_MASTER
     */
    inline uint8_t get_ITCM_ECC_MULTI_ERROR_INFO_ITCM_ECCM_EFMST() volatile
    {
        return (ITCM_ECC_MULTI_ERROR_INFO >> 4u) & 0b1111u;
    }

    /**
     * Get ITCM_ECC_MULTI_ERROR_INFO's ITCM_ECCM_EFSIZ field.
     *
     * ITCM multi-bit ECC error corresponding tcm access size
     */
    inline uint8_t get_ITCM_ECC_MULTI_ERROR_INFO_ITCM_ECCM_EFSIZ() volatile
    {
        return (ITCM_ECC_MULTI_ERROR_INFO >> 1u) & 0b111u;
    }

    /**
     * Get ITCM_ECC_MULTI_ERROR_INFO's ITCM_ECCM_EFW bit.
     *
     * ITCM multi-bit ECC error corresponding TCM_WR value
     */
    inline bool get_ITCM_ECC_MULTI_ERROR_INFO_ITCM_ECCM_EFW() volatile
    {
        return ITCM_ECC_MULTI_ERROR_INFO & (1u << 0u);
    }

    /**
     * Get all of ITCM_ECC_MULTI_ERROR_INFO's bit fields.
     *
     * (read-write) ITCM multi-bit ECC Error Information Register
     */
    inline void get_ITCM_ECC_MULTI_ERROR_INFO(uint16_t &Reserved,
                                              uint8_t &ITCM_ECCM_EFSYN,
                                              uint8_t &ITCM_ECCM_EFPRT,
                                              uint8_t &ITCM_ECCM_EFMST,
                                              uint8_t &ITCM_ECCM_EFSIZ,
                                              bool &ITCM_ECCM_EFW) volatile
    {
        uint32_t curr = ITCM_ECC_MULTI_ERROR_INFO;

        Reserved = (curr >> 20u) & 0b111111111111u;
        ITCM_ECCM_EFSYN = (curr >> 12u) & 0b11111111u;
        ITCM_ECCM_EFPRT = (curr >> 8u) & 0b1111u;
        ITCM_ECCM_EFMST = (curr >> 4u) & 0b1111u;
        ITCM_ECCM_EFSIZ = (curr >> 1u) & 0b111u;
        ITCM_ECCM_EFW = curr & (1u << 0u);
    }

    /**
     * Get ITCM_ECC_MULTI_ERROR_ADDR's ITCM_ECCM_ERRED_ADDR field.
     *
     * ITCM multi-bit ECC error address
     */
    inline uint32_t
    get_ITCM_ECC_MULTI_ERROR_ADDR_ITCM_ECCM_ERRED_ADDR() volatile
    {
        return (ITCM_ECC_MULTI_ERROR_ADDR >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get ITCM_ECC_MULTI_ERROR_DATA_LSB's ITCM_ECCM_ERRED_DATA_LSB field.
     *
     * ITCM multi-bit ECC error data [31:0]
     */
    inline uint32_t
    get_ITCM_ECC_MULTI_ERROR_DATA_LSB_ITCM_ECCM_ERRED_DATA_LSB() volatile
    {
        return (ITCM_ECC_MULTI_ERROR_DATA_LSB >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get ITCM_ECC_MULTI_ERROR_DATA_MSB's ITCM_ECCM_ERRED_DATA_MSB field.
     *
     * ITCM multi-bit ECC error data [63:32]
     */
    inline uint32_t
    get_ITCM_ECC_MULTI_ERROR_DATA_MSB_ITCM_ECCM_ERRED_DATA_MSB() volatile
    {
        return (ITCM_ECC_MULTI_ERROR_DATA_MSB >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get D0TCM_ECC_SINGLE_ERROR_INFO's Reserved field.
     *
     * Reserved
     */
    inline uint16_t get_D0TCM_ECC_SINGLE_ERROR_INFO_Reserved() volatile
    {
        return (D0TCM_ECC_SINGLE_ERROR_INFO >> 19u) & 0b1111111111111u;
    }

    /**
     * Get D0TCM_ECC_SINGLE_ERROR_INFO's D0TCM_ECCS_EFSYN field.
     *
     * D0TCM single-bit ECC error corresponding syndrome
     */
    inline uint8_t get_D0TCM_ECC_SINGLE_ERROR_INFO_D0TCM_ECCS_EFSYN() volatile
    {
        return (D0TCM_ECC_SINGLE_ERROR_INFO >> 12u) & 0b1111111u;
    }

    /**
     * Get D0TCM_ECC_SINGLE_ERROR_INFO's D0TCM_ECCS_EFPRT field.
     *
     * D0TCM single-bit ECC error corresponding TCM_PRIV
     */
    inline uint8_t get_D0TCM_ECC_SINGLE_ERROR_INFO_D0TCM_ECCS_EFPRT() volatile
    {
        return (D0TCM_ECC_SINGLE_ERROR_INFO >> 8u) & 0b1111u;
    }

    /**
     * Get D0TCM_ECC_SINGLE_ERROR_INFO's D0TCM_ECCS_EFMST field.
     *
     * D0TCM single-bit ECC error corresponding TCM_MASTER
     */
    inline uint8_t get_D0TCM_ECC_SINGLE_ERROR_INFO_D0TCM_ECCS_EFMST() volatile
    {
        return (D0TCM_ECC_SINGLE_ERROR_INFO >> 4u) & 0b1111u;
    }

    /**
     * Get D0TCM_ECC_SINGLE_ERROR_INFO's D0TCM_ECCS_EFSIZ field.
     *
     * D0TCM single-bit ECC error corresponding tcm access size
     */
    inline uint8_t get_D0TCM_ECC_SINGLE_ERROR_INFO_D0TCM_ECCS_EFSIZ() volatile
    {
        return (D0TCM_ECC_SINGLE_ERROR_INFO >> 1u) & 0b111u;
    }

    /**
     * Get D0TCM_ECC_SINGLE_ERROR_INFO's D0TCM_ECCS_EFW bit.
     *
     * D0TCM single-bit ECC error corresponding TCM_WR value
     */
    inline bool get_D0TCM_ECC_SINGLE_ERROR_INFO_D0TCM_ECCS_EFW() volatile
    {
        return D0TCM_ECC_SINGLE_ERROR_INFO & (1u << 0u);
    }

    /**
     * Get all of D0TCM_ECC_SINGLE_ERROR_INFO's bit fields.
     *
     * (read-write) D0TCM single-bit ECC Error Information Register
     */
    inline void get_D0TCM_ECC_SINGLE_ERROR_INFO(uint16_t &Reserved,
                                                uint8_t &D0TCM_ECCS_EFSYN,
                                                uint8_t &D0TCM_ECCS_EFPRT,
                                                uint8_t &D0TCM_ECCS_EFMST,
                                                uint8_t &D0TCM_ECCS_EFSIZ,
                                                bool &D0TCM_ECCS_EFW) volatile
    {
        uint32_t curr = D0TCM_ECC_SINGLE_ERROR_INFO;

        Reserved = (curr >> 19u) & 0b1111111111111u;
        D0TCM_ECCS_EFSYN = (curr >> 12u) & 0b1111111u;
        D0TCM_ECCS_EFPRT = (curr >> 8u) & 0b1111u;
        D0TCM_ECCS_EFMST = (curr >> 4u) & 0b1111u;
        D0TCM_ECCS_EFSIZ = (curr >> 1u) & 0b111u;
        D0TCM_ECCS_EFW = curr & (1u << 0u);
    }

    /**
     * Get D0TCM_ECC_SINGLE_ERROR_ADDR's D0TCM_ECCS_ERRED_ADDR field.
     *
     * D0TCM single-bit ECC error address
     */
    inline uint32_t
    get_D0TCM_ECC_SINGLE_ERROR_ADDR_D0TCM_ECCS_ERRED_ADDR() volatile
    {
        return (D0TCM_ECC_SINGLE_ERROR_ADDR >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get D0TCM_ECC_SINGLE_ERROR_DATA's D0TCM_ECCS_ERRED_DATA field.
     *
     * D0TCM single-bit ECC error data
     */
    inline uint32_t
    get_D0TCM_ECC_SINGLE_ERROR_DATA_D0TCM_ECCS_ERRED_DATA() volatile
    {
        return (D0TCM_ECC_SINGLE_ERROR_DATA >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get D0TCM_ECC_MULTI_ERROR_INFO's Reserved field.
     *
     * Reserved
     */
    inline uint16_t get_D0TCM_ECC_MULTI_ERROR_INFO_Reserved() volatile
    {
        return (D0TCM_ECC_MULTI_ERROR_INFO >> 19u) & 0b1111111111111u;
    }

    /**
     * Get D0TCM_ECC_MULTI_ERROR_INFO's D0TCM_ECCM_EFSYN field.
     *
     * D0TCM multi-bit ECC error corresponding syndrome
     */
    inline uint8_t get_D0TCM_ECC_MULTI_ERROR_INFO_D0TCM_ECCM_EFSYN() volatile
    {
        return (D0TCM_ECC_MULTI_ERROR_INFO >> 12u) & 0b1111111u;
    }

    /**
     * Get D0TCM_ECC_MULTI_ERROR_INFO's D0TCM_ECCM_EFPRT field.
     *
     * D0TCM multi-bit ECC error corresponding TCM_PRIV
     */
    inline uint8_t get_D0TCM_ECC_MULTI_ERROR_INFO_D0TCM_ECCM_EFPRT() volatile
    {
        return (D0TCM_ECC_MULTI_ERROR_INFO >> 8u) & 0b1111u;
    }

    /**
     * Get D0TCM_ECC_MULTI_ERROR_INFO's D0TCM_ECCM_EFMST field.
     *
     * D0TCM multi-bit ECC error corresponding TCM_MASTER
     */
    inline uint8_t get_D0TCM_ECC_MULTI_ERROR_INFO_D0TCM_ECCM_EFMST() volatile
    {
        return (D0TCM_ECC_MULTI_ERROR_INFO >> 4u) & 0b1111u;
    }

    /**
     * Get D0TCM_ECC_MULTI_ERROR_INFO's D0TCM_ECCM_EFSIZ field.
     *
     * D0TCM multi-bit ECC error corresponding tcm access size
     */
    inline uint8_t get_D0TCM_ECC_MULTI_ERROR_INFO_D0TCM_ECCM_EFSIZ() volatile
    {
        return (D0TCM_ECC_MULTI_ERROR_INFO >> 1u) & 0b111u;
    }

    /**
     * Get D0TCM_ECC_MULTI_ERROR_INFO's D0TCM_ECCM_EFW bit.
     *
     * D0TCM multi-bit ECC error corresponding TCM_WR value
     */
    inline bool get_D0TCM_ECC_MULTI_ERROR_INFO_D0TCM_ECCM_EFW() volatile
    {
        return D0TCM_ECC_MULTI_ERROR_INFO & (1u << 0u);
    }

    /**
     * Get all of D0TCM_ECC_MULTI_ERROR_INFO's bit fields.
     *
     * (read-write) D0TCM multi-bit ECC Error Information Register
     */
    inline void get_D0TCM_ECC_MULTI_ERROR_INFO(uint16_t &Reserved,
                                               uint8_t &D0TCM_ECCM_EFSYN,
                                               uint8_t &D0TCM_ECCM_EFPRT,
                                               uint8_t &D0TCM_ECCM_EFMST,
                                               uint8_t &D0TCM_ECCM_EFSIZ,
                                               bool &D0TCM_ECCM_EFW) volatile
    {
        uint32_t curr = D0TCM_ECC_MULTI_ERROR_INFO;

        Reserved = (curr >> 19u) & 0b1111111111111u;
        D0TCM_ECCM_EFSYN = (curr >> 12u) & 0b1111111u;
        D0TCM_ECCM_EFPRT = (curr >> 8u) & 0b1111u;
        D0TCM_ECCM_EFMST = (curr >> 4u) & 0b1111u;
        D0TCM_ECCM_EFSIZ = (curr >> 1u) & 0b111u;
        D0TCM_ECCM_EFW = curr & (1u << 0u);
    }

    /**
     * Get D0TCM_ECC_MULTI_ERROR_ADDR's D0TCM_ECCM_ERRED_ADDR field.
     *
     * D0TCM multi-bit ECC error address
     */
    inline uint32_t
    get_D0TCM_ECC_MULTI_ERROR_ADDR_D0TCM_ECCM_ERRED_ADDR() volatile
    {
        return (D0TCM_ECC_MULTI_ERROR_ADDR >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get D0TCM_ECC_MULTI_ERROR_DATA's D0TCM_ECCM_ERRED_DATA field.
     *
     * D0TCM multi-bit ECC error data
     */
    inline uint32_t
    get_D0TCM_ECC_MULTI_ERROR_DATA_D0TCM_ECCM_ERRED_DATA() volatile
    {
        return (D0TCM_ECC_MULTI_ERROR_DATA >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get D1TCM_ECC_SINGLE_ERROR_INFO's Reserved field.
     *
     * Reserved
     */
    inline uint16_t get_D1TCM_ECC_SINGLE_ERROR_INFO_Reserved() volatile
    {
        return (D1TCM_ECC_SINGLE_ERROR_INFO >> 19u) & 0b1111111111111u;
    }

    /**
     * Get D1TCM_ECC_SINGLE_ERROR_INFO's D1TCM_ECCS_EFSYN field.
     *
     * D1TCM single-bit ECC error corresponding syndrome
     */
    inline uint8_t get_D1TCM_ECC_SINGLE_ERROR_INFO_D1TCM_ECCS_EFSYN() volatile
    {
        return (D1TCM_ECC_SINGLE_ERROR_INFO >> 12u) & 0b1111111u;
    }

    /**
     * Get D1TCM_ECC_SINGLE_ERROR_INFO's D1TCM_ECCS_EFPRT field.
     *
     * D1TCM single-bit ECC error corresponding TCM_PRIV
     */
    inline uint8_t get_D1TCM_ECC_SINGLE_ERROR_INFO_D1TCM_ECCS_EFPRT() volatile
    {
        return (D1TCM_ECC_SINGLE_ERROR_INFO >> 8u) & 0b1111u;
    }

    /**
     * Get D1TCM_ECC_SINGLE_ERROR_INFO's D1TCM_ECCS_EFMST field.
     *
     * D1TCM single-bit ECC error corresponding TCM_MASTER
     */
    inline uint8_t get_D1TCM_ECC_SINGLE_ERROR_INFO_D1TCM_ECCS_EFMST() volatile
    {
        return (D1TCM_ECC_SINGLE_ERROR_INFO >> 4u) & 0b1111u;
    }

    /**
     * Get D1TCM_ECC_SINGLE_ERROR_INFO's D1TCM_ECCS_EFSIZ field.
     *
     * D1TCM single-bit ECC error corresponding tcm access size
     */
    inline uint8_t get_D1TCM_ECC_SINGLE_ERROR_INFO_D1TCM_ECCS_EFSIZ() volatile
    {
        return (D1TCM_ECC_SINGLE_ERROR_INFO >> 1u) & 0b111u;
    }

    /**
     * Get D1TCM_ECC_SINGLE_ERROR_INFO's D1TCM_ECCS_EFW bit.
     *
     * D1TCM single-bit ECC error corresponding TCM_WR value
     */
    inline bool get_D1TCM_ECC_SINGLE_ERROR_INFO_D1TCM_ECCS_EFW() volatile
    {
        return D1TCM_ECC_SINGLE_ERROR_INFO & (1u << 0u);
    }

    /**
     * Get all of D1TCM_ECC_SINGLE_ERROR_INFO's bit fields.
     *
     * (read-write) D1TCM single-bit ECC Error Information Register
     */
    inline void get_D1TCM_ECC_SINGLE_ERROR_INFO(uint16_t &Reserved,
                                                uint8_t &D1TCM_ECCS_EFSYN,
                                                uint8_t &D1TCM_ECCS_EFPRT,
                                                uint8_t &D1TCM_ECCS_EFMST,
                                                uint8_t &D1TCM_ECCS_EFSIZ,
                                                bool &D1TCM_ECCS_EFW) volatile
    {
        uint32_t curr = D1TCM_ECC_SINGLE_ERROR_INFO;

        Reserved = (curr >> 19u) & 0b1111111111111u;
        D1TCM_ECCS_EFSYN = (curr >> 12u) & 0b1111111u;
        D1TCM_ECCS_EFPRT = (curr >> 8u) & 0b1111u;
        D1TCM_ECCS_EFMST = (curr >> 4u) & 0b1111u;
        D1TCM_ECCS_EFSIZ = (curr >> 1u) & 0b111u;
        D1TCM_ECCS_EFW = curr & (1u << 0u);
    }

    /**
     * Get D1TCM_ECC_SINGLE_ERROR_ADDR's D1TCM_ECCS_ERRED_ADDR field.
     *
     * D1TCM single-bit ECC error address
     */
    inline uint32_t
    get_D1TCM_ECC_SINGLE_ERROR_ADDR_D1TCM_ECCS_ERRED_ADDR() volatile
    {
        return (D1TCM_ECC_SINGLE_ERROR_ADDR >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get D1TCM_ECC_SINGLE_ERROR_DATA's D1TCM_ECCS_ERRED_DATA field.
     *
     * D1TCM single-bit ECC error data
     */
    inline uint32_t
    get_D1TCM_ECC_SINGLE_ERROR_DATA_D1TCM_ECCS_ERRED_DATA() volatile
    {
        return (D1TCM_ECC_SINGLE_ERROR_DATA >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get D1TCM_ECC_MULTI_ERROR_INFO's Reserved field.
     *
     * Reserved
     */
    inline uint16_t get_D1TCM_ECC_MULTI_ERROR_INFO_Reserved() volatile
    {
        return (D1TCM_ECC_MULTI_ERROR_INFO >> 19u) & 0b1111111111111u;
    }

    /**
     * Get D1TCM_ECC_MULTI_ERROR_INFO's D1TCM_ECCM_EFSYN field.
     *
     * D1TCM multi-bit ECC error corresponding syndrome
     */
    inline uint8_t get_D1TCM_ECC_MULTI_ERROR_INFO_D1TCM_ECCM_EFSYN() volatile
    {
        return (D1TCM_ECC_MULTI_ERROR_INFO >> 12u) & 0b1111111u;
    }

    /**
     * Get D1TCM_ECC_MULTI_ERROR_INFO's D1TCM_ECCM_EFPRT field.
     *
     * D1TCM multi-bit ECC error corresponding TCM_PRIV
     */
    inline uint8_t get_D1TCM_ECC_MULTI_ERROR_INFO_D1TCM_ECCM_EFPRT() volatile
    {
        return (D1TCM_ECC_MULTI_ERROR_INFO >> 8u) & 0b1111u;
    }

    /**
     * Get D1TCM_ECC_MULTI_ERROR_INFO's D1TCM_ECCM_EFMST field.
     *
     * D1TCM multi-bit ECC error corresponding TCM_MASTER
     */
    inline uint8_t get_D1TCM_ECC_MULTI_ERROR_INFO_D1TCM_ECCM_EFMST() volatile
    {
        return (D1TCM_ECC_MULTI_ERROR_INFO >> 4u) & 0b1111u;
    }

    /**
     * Get D1TCM_ECC_MULTI_ERROR_INFO's D1TCM_ECCM_EFSIZ field.
     *
     * D1TCM multi-bit ECC error corresponding tcm access size
     */
    inline uint8_t get_D1TCM_ECC_MULTI_ERROR_INFO_D1TCM_ECCM_EFSIZ() volatile
    {
        return (D1TCM_ECC_MULTI_ERROR_INFO >> 1u) & 0b111u;
    }

    /**
     * Get D1TCM_ECC_MULTI_ERROR_INFO's D1TCM_ECCM_EFW bit.
     *
     * D1TCM multi-bit ECC error corresponding TCM_WR value
     */
    inline bool get_D1TCM_ECC_MULTI_ERROR_INFO_D1TCM_ECCM_EFW() volatile
    {
        return D1TCM_ECC_MULTI_ERROR_INFO & (1u << 0u);
    }

    /**
     * Get all of D1TCM_ECC_MULTI_ERROR_INFO's bit fields.
     *
     * (read-write) D1TCM multi-bit ECC Error Information Register
     */
    inline void get_D1TCM_ECC_MULTI_ERROR_INFO(uint16_t &Reserved,
                                               uint8_t &D1TCM_ECCM_EFSYN,
                                               uint8_t &D1TCM_ECCM_EFPRT,
                                               uint8_t &D1TCM_ECCM_EFMST,
                                               uint8_t &D1TCM_ECCM_EFSIZ,
                                               bool &D1TCM_ECCM_EFW) volatile
    {
        uint32_t curr = D1TCM_ECC_MULTI_ERROR_INFO;

        Reserved = (curr >> 19u) & 0b1111111111111u;
        D1TCM_ECCM_EFSYN = (curr >> 12u) & 0b1111111u;
        D1TCM_ECCM_EFPRT = (curr >> 8u) & 0b1111u;
        D1TCM_ECCM_EFMST = (curr >> 4u) & 0b1111u;
        D1TCM_ECCM_EFSIZ = (curr >> 1u) & 0b111u;
        D1TCM_ECCM_EFW = curr & (1u << 0u);
    }

    /**
     * Get D1TCM_ECC_MULTI_ERROR_ADDR's D1TCM_ECCM_ERRED_ADDR field.
     *
     * D1TCM multi-bit ECC error address
     */
    inline uint32_t
    get_D1TCM_ECC_MULTI_ERROR_ADDR_D1TCM_ECCM_ERRED_ADDR() volatile
    {
        return (D1TCM_ECC_MULTI_ERROR_ADDR >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get D1TCM_ECC_MULTI_ERROR_DATA's D1TCM_ECCM_ERRED_DATA field.
     *
     * D1TCM multi-bit ECC error data
     */
    inline uint32_t
    get_D1TCM_ECC_MULTI_ERROR_DATA_D1TCM_ECCM_ERRED_DATA() volatile
    {
        return (D1TCM_ECC_MULTI_ERROR_DATA >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get FLEXRAM_CTRL's Reserved field.
     *
     * Reserved
     */
    inline uint32_t get_FLEXRAM_CTRL_Reserved() volatile
    {
        return (FLEXRAM_CTRL >> 6u) & 0b11111111111111111111111111u;
    }

    /**
     * Get FLEXRAM_CTRL's TCM_ECC_EN bit.
     *
     * TCM ECC enable
     */
    inline bool get_FLEXRAM_CTRL_TCM_ECC_EN() volatile
    {
        return FLEXRAM_CTRL & (1u << 5u);
    }

    /**
     * Set FLEXRAM_CTRL's TCM_ECC_EN bit.
     *
     * TCM ECC enable
     */
    inline void set_FLEXRAM_CTRL_TCM_ECC_EN() volatile
    {
        FLEXRAM_CTRL |= 1u << 5u;
    }

    /**
     * Clear FLEXRAM_CTRL's TCM_ECC_EN bit.
     *
     * TCM ECC enable
     */
    inline void clear_FLEXRAM_CTRL_TCM_ECC_EN() volatile
    {
        FLEXRAM_CTRL &= ~(1u << 5u);
    }

    /**
     * Toggle FLEXRAM_CTRL's TCM_ECC_EN bit.
     *
     * TCM ECC enable
     */
    inline void toggle_FLEXRAM_CTRL_TCM_ECC_EN() volatile
    {
        FLEXRAM_CTRL ^= 1u << 5u;
    }

    /**
     * Get FLEXRAM_CTRL's OCRAM_ECC_EN bit.
     *
     * OCRAM ECC enable
     */
    inline bool get_FLEXRAM_CTRL_OCRAM_ECC_EN() volatile
    {
        return FLEXRAM_CTRL & (1u << 4u);
    }

    /**
     * Set FLEXRAM_CTRL's OCRAM_ECC_EN bit.
     *
     * OCRAM ECC enable
     */
    inline void set_FLEXRAM_CTRL_OCRAM_ECC_EN() volatile
    {
        FLEXRAM_CTRL |= 1u << 4u;
    }

    /**
     * Clear FLEXRAM_CTRL's OCRAM_ECC_EN bit.
     *
     * OCRAM ECC enable
     */
    inline void clear_FLEXRAM_CTRL_OCRAM_ECC_EN() volatile
    {
        FLEXRAM_CTRL &= ~(1u << 4u);
    }

    /**
     * Toggle FLEXRAM_CTRL's OCRAM_ECC_EN bit.
     *
     * OCRAM ECC enable
     */
    inline void toggle_FLEXRAM_CTRL_OCRAM_ECC_EN() volatile
    {
        FLEXRAM_CTRL ^= 1u << 4u;
    }

    /**
     * Get FLEXRAM_CTRL's OCRAM_WRADDR_PIPELINE_EN bit.
     *
     * Write Address Pipeline Enable
     */
    inline bool get_FLEXRAM_CTRL_OCRAM_WRADDR_PIPELINE_EN() volatile
    {
        return FLEXRAM_CTRL & (1u << 3u);
    }

    /**
     * Set FLEXRAM_CTRL's OCRAM_WRADDR_PIPELINE_EN bit.
     *
     * Write Address Pipeline Enable
     */
    inline void set_FLEXRAM_CTRL_OCRAM_WRADDR_PIPELINE_EN() volatile
    {
        FLEXRAM_CTRL |= 1u << 3u;
    }

    /**
     * Clear FLEXRAM_CTRL's OCRAM_WRADDR_PIPELINE_EN bit.
     *
     * Write Address Pipeline Enable
     */
    inline void clear_FLEXRAM_CTRL_OCRAM_WRADDR_PIPELINE_EN() volatile
    {
        FLEXRAM_CTRL &= ~(1u << 3u);
    }

    /**
     * Toggle FLEXRAM_CTRL's OCRAM_WRADDR_PIPELINE_EN bit.
     *
     * Write Address Pipeline Enable
     */
    inline void toggle_FLEXRAM_CTRL_OCRAM_WRADDR_PIPELINE_EN() volatile
    {
        FLEXRAM_CTRL ^= 1u << 3u;
    }

    /**
     * Get FLEXRAM_CTRL's OCRAM_WRDATA_PIPELINE_EN bit.
     *
     * Write Data Pipeline Enable
     */
    inline bool get_FLEXRAM_CTRL_OCRAM_WRDATA_PIPELINE_EN() volatile
    {
        return FLEXRAM_CTRL & (1u << 2u);
    }

    /**
     * Set FLEXRAM_CTRL's OCRAM_WRDATA_PIPELINE_EN bit.
     *
     * Write Data Pipeline Enable
     */
    inline void set_FLEXRAM_CTRL_OCRAM_WRDATA_PIPELINE_EN() volatile
    {
        FLEXRAM_CTRL |= 1u << 2u;
    }

    /**
     * Clear FLEXRAM_CTRL's OCRAM_WRDATA_PIPELINE_EN bit.
     *
     * Write Data Pipeline Enable
     */
    inline void clear_FLEXRAM_CTRL_OCRAM_WRDATA_PIPELINE_EN() volatile
    {
        FLEXRAM_CTRL &= ~(1u << 2u);
    }

    /**
     * Toggle FLEXRAM_CTRL's OCRAM_WRDATA_PIPELINE_EN bit.
     *
     * Write Data Pipeline Enable
     */
    inline void toggle_FLEXRAM_CTRL_OCRAM_WRDATA_PIPELINE_EN() volatile
    {
        FLEXRAM_CTRL ^= 1u << 2u;
    }

    /**
     * Get FLEXRAM_CTRL's OCRAM_RADDR_PIPELINE_EN bit.
     *
     * Read Address Pipeline Enable
     */
    inline bool get_FLEXRAM_CTRL_OCRAM_RADDR_PIPELINE_EN() volatile
    {
        return FLEXRAM_CTRL & (1u << 1u);
    }

    /**
     * Set FLEXRAM_CTRL's OCRAM_RADDR_PIPELINE_EN bit.
     *
     * Read Address Pipeline Enable
     */
    inline void set_FLEXRAM_CTRL_OCRAM_RADDR_PIPELINE_EN() volatile
    {
        FLEXRAM_CTRL |= 1u << 1u;
    }

    /**
     * Clear FLEXRAM_CTRL's OCRAM_RADDR_PIPELINE_EN bit.
     *
     * Read Address Pipeline Enable
     */
    inline void clear_FLEXRAM_CTRL_OCRAM_RADDR_PIPELINE_EN() volatile
    {
        FLEXRAM_CTRL &= ~(1u << 1u);
    }

    /**
     * Toggle FLEXRAM_CTRL's OCRAM_RADDR_PIPELINE_EN bit.
     *
     * Read Address Pipeline Enable
     */
    inline void toggle_FLEXRAM_CTRL_OCRAM_RADDR_PIPELINE_EN() volatile
    {
        FLEXRAM_CTRL ^= 1u << 1u;
    }

    /**
     * Get FLEXRAM_CTRL's OCRAM_RDATA_WAIT_EN bit.
     *
     * Read Data Wait Enable
     */
    inline bool get_FLEXRAM_CTRL_OCRAM_RDATA_WAIT_EN() volatile
    {
        return FLEXRAM_CTRL & (1u << 0u);
    }

    /**
     * Set FLEXRAM_CTRL's OCRAM_RDATA_WAIT_EN bit.
     *
     * Read Data Wait Enable
     */
    inline void set_FLEXRAM_CTRL_OCRAM_RDATA_WAIT_EN() volatile
    {
        FLEXRAM_CTRL |= 1u << 0u;
    }

    /**
     * Clear FLEXRAM_CTRL's OCRAM_RDATA_WAIT_EN bit.
     *
     * Read Data Wait Enable
     */
    inline void clear_FLEXRAM_CTRL_OCRAM_RDATA_WAIT_EN() volatile
    {
        FLEXRAM_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle FLEXRAM_CTRL's OCRAM_RDATA_WAIT_EN bit.
     *
     * Read Data Wait Enable
     */
    inline void toggle_FLEXRAM_CTRL_OCRAM_RDATA_WAIT_EN() volatile
    {
        FLEXRAM_CTRL ^= 1u << 0u;
    }

    /**
     * Get all of FLEXRAM_CTRL's bit fields.
     *
     * (read-write) FlexRAM feature Control register
     */
    inline void get_FLEXRAM_CTRL(uint32_t &Reserved, bool &TCM_ECC_EN,
                                 bool &OCRAM_ECC_EN,
                                 bool &OCRAM_WRADDR_PIPELINE_EN,
                                 bool &OCRAM_WRDATA_PIPELINE_EN,
                                 bool &OCRAM_RADDR_PIPELINE_EN,
                                 bool &OCRAM_RDATA_WAIT_EN) volatile
    {
        uint32_t curr = FLEXRAM_CTRL;

        Reserved = (curr >> 6u) & 0b11111111111111111111111111u;
        TCM_ECC_EN = curr & (1u << 5u);
        OCRAM_ECC_EN = curr & (1u << 4u);
        OCRAM_WRADDR_PIPELINE_EN = curr & (1u << 3u);
        OCRAM_WRDATA_PIPELINE_EN = curr & (1u << 2u);
        OCRAM_RADDR_PIPELINE_EN = curr & (1u << 1u);
        OCRAM_RDATA_WAIT_EN = curr & (1u << 0u);
    }

    /**
     * Set all of FLEXRAM_CTRL's bit fields.
     *
     * (read-write) FlexRAM feature Control register
     */
    inline void set_FLEXRAM_CTRL(bool TCM_ECC_EN, bool OCRAM_ECC_EN,
                                 bool OCRAM_WRADDR_PIPELINE_EN,
                                 bool OCRAM_WRDATA_PIPELINE_EN,
                                 bool OCRAM_RADDR_PIPELINE_EN,
                                 bool OCRAM_RDATA_WAIT_EN) volatile
    {
        uint32_t curr = FLEXRAM_CTRL;

        curr &= ~(0b1u << 5u);
        curr |= (TCM_ECC_EN & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (OCRAM_ECC_EN & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (OCRAM_WRADDR_PIPELINE_EN & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (OCRAM_WRDATA_PIPELINE_EN & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (OCRAM_RADDR_PIPELINE_EN & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (OCRAM_RDATA_WAIT_EN & 0b1u) << 0u;

        FLEXRAM_CTRL = curr;
    }

    /**
     * Get OCRAM_PIPELINE_STATUS's Reserved field.
     *
     * Reserved
     */
    inline uint32_t get_OCRAM_PIPELINE_STATUS_Reserved() volatile
    {
        return (OCRAM_PIPELINE_STATUS >> 4u) & 0b1111111111111111111111111111u;
    }

    /**
     * Get OCRAM_PIPELINE_STATUS's OCRAM_WRADDR_PIPELINE_EN_UPDATA_PENDING bit.
     *
     * Write Address Pipeline Enable Pending
     */
    inline bool
    get_OCRAM_PIPELINE_STATUS_OCRAM_WRADDR_PIPELINE_EN_UPDATA_PENDING() volatile
    {
        return OCRAM_PIPELINE_STATUS & (1u << 3u);
    }

    /**
     * Get OCRAM_PIPELINE_STATUS's OCRAM_WRDATA_PIPELINE_EN_UPDATA_PENDING bit.
     *
     * Write Data Pipeline Enable Pending
     */
    inline bool
    get_OCRAM_PIPELINE_STATUS_OCRAM_WRDATA_PIPELINE_EN_UPDATA_PENDING() volatile
    {
        return OCRAM_PIPELINE_STATUS & (1u << 2u);
    }

    /**
     * Get OCRAM_PIPELINE_STATUS's OCRAM_RADDR_PIPELINE_EN_UPDATA_PENDING bit.
     *
     * Read Address Pipeline Enable Pending
     */
    inline bool
    get_OCRAM_PIPELINE_STATUS_OCRAM_RADDR_PIPELINE_EN_UPDATA_PENDING() volatile
    {
        return OCRAM_PIPELINE_STATUS & (1u << 1u);
    }

    /**
     * Get OCRAM_PIPELINE_STATUS's OCRAM_RDATA_WAIT_EN_UPDATA_PENDING bit.
     *
     * Read Data Wait Enable Pending
     */
    inline bool
    get_OCRAM_PIPELINE_STATUS_OCRAM_RDATA_WAIT_EN_UPDATA_PENDING() volatile
    {
        return OCRAM_PIPELINE_STATUS & (1u << 0u);
    }

    /**
     * Get all of OCRAM_PIPELINE_STATUS's bit fields.
     *
     * (read-write) OCRAM Pipeline Status register
     */
    inline void get_OCRAM_PIPELINE_STATUS(
        uint32_t &Reserved, bool &OCRAM_WRADDR_PIPELINE_EN_UPDATA_PENDING,
        bool &OCRAM_WRDATA_PIPELINE_EN_UPDATA_PENDING,
        bool &OCRAM_RADDR_PIPELINE_EN_UPDATA_PENDING,
        bool &OCRAM_RDATA_WAIT_EN_UPDATA_PENDING) volatile
    {
        uint32_t curr = OCRAM_PIPELINE_STATUS;

        Reserved = (curr >> 4u) & 0b1111111111111111111111111111u;
        OCRAM_WRADDR_PIPELINE_EN_UPDATA_PENDING = curr & (1u << 3u);
        OCRAM_WRDATA_PIPELINE_EN_UPDATA_PENDING = curr & (1u << 2u);
        OCRAM_RADDR_PIPELINE_EN_UPDATA_PENDING = curr & (1u << 1u);
        OCRAM_RDATA_WAIT_EN_UPDATA_PENDING = curr & (1u << 0u);
    }
};

static_assert(sizeof(flexram) == flexram::size);

static volatile flexram *const FLEXRAM =
    reinterpret_cast<flexram *>(0x40028000);

}; // namespace MIMXRT1176::CM7
