/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * KEYMGR
 */
struct [[gnu::packed]] key_manager
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        1044; /*!< key_manager's size in bytes. */

    /* Fields. */
    uint32_t
        MASTER_KEY_CTRL; /*!< (read-write) CSR Master Key Control Register */
    static constexpr std::size_t reserved_padding0_length = 3;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t OTFAD1_KEY_CTRL; /*!< (read-write) CSR OTFAD-1 Key Control */
    const uint32_t reserved_padding1 = {};
    uint32_t OTFAD2_KEY_CTRL; /*!< (read-write) CSR OTFAD-2 Key Control */
    const uint32_t reserved_padding2 = {};
    uint32_t IEE_KEY_CTRL; /*!< (read-write) CSR IEE Key Control */
    static constexpr std::size_t reserved_padding3_length = 3;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    uint32_t PUF_KEY_CTRL; /*!< (read-write) CSR PUF Key Control */
    static constexpr std::size_t reserved_padding4_length = 243;
    const uint32_t reserved_padding4[reserved_padding4_length] = {};
    uint32_t SLOT0_CTRL; /*!< (read-write) Slot 0 Control */
    uint32_t SLOT1_CTRL; /*!< (read-write) Slot1 Control */
    uint32_t SLOT2_CTRL; /*!< (read-write) Slot2 Control */
    uint32_t SLOT3_CTRL; /*!< (read-write) Slot3 Control */
    uint32_t SLOT4_CTRL; /*!< (read-write) Slot 4 Control */

    /* Methods. */

    /**
     * Get MASTER_KEY_CTRL's LOCK bit.
     *
     * lock this register, prevent from writing. Default value comes from
     * FUSE_MASTER_KEY_SEL_LOCK.
     */
    inline bool get_MASTER_KEY_CTRL_LOCK() volatile
    {
        return MASTER_KEY_CTRL & (1u << 16u);
    }

    /**
     * Set MASTER_KEY_CTRL's LOCK bit.
     *
     * lock this register, prevent from writing. Default value comes from
     * FUSE_MASTER_KEY_SEL_LOCK.
     */
    inline void set_MASTER_KEY_CTRL_LOCK() volatile
    {
        MASTER_KEY_CTRL |= 1u << 16u;
    }

    /**
     * Clear MASTER_KEY_CTRL's LOCK bit.
     *
     * lock this register, prevent from writing. Default value comes from
     * FUSE_MASTER_KEY_SEL_LOCK.
     */
    inline void clear_MASTER_KEY_CTRL_LOCK() volatile
    {
        MASTER_KEY_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle MASTER_KEY_CTRL's LOCK bit.
     *
     * lock this register, prevent from writing. Default value comes from
     * FUSE_MASTER_KEY_SEL_LOCK.
     */
    inline void toggle_MASTER_KEY_CTRL_LOCK() volatile
    {
        MASTER_KEY_CTRL ^= 1u << 16u;
    }

    /**
     * Get MASTER_KEY_CTRL's SELECT bit.
     *
     * Key select for SNVS OTPMK. Default value comes from FUSE_MASTER_KEY_SEL.
     */
    inline bool get_MASTER_KEY_CTRL_SELECT() volatile
    {
        return MASTER_KEY_CTRL & (1u << 0u);
    }

    /**
     * Set MASTER_KEY_CTRL's SELECT bit.
     *
     * Key select for SNVS OTPMK. Default value comes from FUSE_MASTER_KEY_SEL.
     */
    inline void set_MASTER_KEY_CTRL_SELECT() volatile
    {
        MASTER_KEY_CTRL |= 1u << 0u;
    }

    /**
     * Clear MASTER_KEY_CTRL's SELECT bit.
     *
     * Key select for SNVS OTPMK. Default value comes from FUSE_MASTER_KEY_SEL.
     */
    inline void clear_MASTER_KEY_CTRL_SELECT() volatile
    {
        MASTER_KEY_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle MASTER_KEY_CTRL's SELECT bit.
     *
     * Key select for SNVS OTPMK. Default value comes from FUSE_MASTER_KEY_SEL.
     */
    inline void toggle_MASTER_KEY_CTRL_SELECT() volatile
    {
        MASTER_KEY_CTRL ^= 1u << 0u;
    }

    /**
     * Get all of MASTER_KEY_CTRL's bit fields.
     *
     * (read-write) CSR Master Key Control Register
     */
    inline void get_MASTER_KEY_CTRL(bool &LOCK, bool &SELECT) volatile
    {
        uint32_t curr = MASTER_KEY_CTRL;

        LOCK = curr & (1u << 16u);
        SELECT = curr & (1u << 0u);
    }

    /**
     * Set all of MASTER_KEY_CTRL's bit fields.
     *
     * (read-write) CSR Master Key Control Register
     */
    inline void set_MASTER_KEY_CTRL(bool LOCK, bool SELECT) volatile
    {
        uint32_t curr = MASTER_KEY_CTRL;

        curr &= ~(0b1u << 16u);
        curr |= (LOCK & 0b1u) << 16u;
        curr &= ~(0b1u << 0u);
        curr |= (SELECT & 0b1u) << 0u;

        MASTER_KEY_CTRL = curr;
    }

    /**
     * Get OTFAD1_KEY_CTRL's LOCK bit.
     *
     * lock this register, prevent from writing. Default value comes from
     * FUSE_OTFAD1_KEY_SEL_LOCK.
     */
    inline bool get_OTFAD1_KEY_CTRL_LOCK() volatile
    {
        return OTFAD1_KEY_CTRL & (1u << 16u);
    }

    /**
     * Set OTFAD1_KEY_CTRL's LOCK bit.
     *
     * lock this register, prevent from writing. Default value comes from
     * FUSE_OTFAD1_KEY_SEL_LOCK.
     */
    inline void set_OTFAD1_KEY_CTRL_LOCK() volatile
    {
        OTFAD1_KEY_CTRL |= 1u << 16u;
    }

    /**
     * Clear OTFAD1_KEY_CTRL's LOCK bit.
     *
     * lock this register, prevent from writing. Default value comes from
     * FUSE_OTFAD1_KEY_SEL_LOCK.
     */
    inline void clear_OTFAD1_KEY_CTRL_LOCK() volatile
    {
        OTFAD1_KEY_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle OTFAD1_KEY_CTRL's LOCK bit.
     *
     * lock this register, prevent from writing. Default value comes from
     * FUSE_OTFAD1_KEY_SEL_LOCK.
     */
    inline void toggle_OTFAD1_KEY_CTRL_LOCK() volatile
    {
        OTFAD1_KEY_CTRL ^= 1u << 16u;
    }

    /**
     * Get OTFAD1_KEY_CTRL's SELECT bit.
     *
     * key select for OTFAD-1. Default value comes from FUSE_OTFAD1_KEY_SEL.
     */
    inline bool get_OTFAD1_KEY_CTRL_SELECT() volatile
    {
        return OTFAD1_KEY_CTRL & (1u << 0u);
    }

    /**
     * Set OTFAD1_KEY_CTRL's SELECT bit.
     *
     * key select for OTFAD-1. Default value comes from FUSE_OTFAD1_KEY_SEL.
     */
    inline void set_OTFAD1_KEY_CTRL_SELECT() volatile
    {
        OTFAD1_KEY_CTRL |= 1u << 0u;
    }

    /**
     * Clear OTFAD1_KEY_CTRL's SELECT bit.
     *
     * key select for OTFAD-1. Default value comes from FUSE_OTFAD1_KEY_SEL.
     */
    inline void clear_OTFAD1_KEY_CTRL_SELECT() volatile
    {
        OTFAD1_KEY_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle OTFAD1_KEY_CTRL's SELECT bit.
     *
     * key select for OTFAD-1. Default value comes from FUSE_OTFAD1_KEY_SEL.
     */
    inline void toggle_OTFAD1_KEY_CTRL_SELECT() volatile
    {
        OTFAD1_KEY_CTRL ^= 1u << 0u;
    }

    /**
     * Get all of OTFAD1_KEY_CTRL's bit fields.
     *
     * (read-write) CSR OTFAD-1 Key Control
     */
    inline void get_OTFAD1_KEY_CTRL(bool &LOCK, bool &SELECT) volatile
    {
        uint32_t curr = OTFAD1_KEY_CTRL;

        LOCK = curr & (1u << 16u);
        SELECT = curr & (1u << 0u);
    }

    /**
     * Set all of OTFAD1_KEY_CTRL's bit fields.
     *
     * (read-write) CSR OTFAD-1 Key Control
     */
    inline void set_OTFAD1_KEY_CTRL(bool LOCK, bool SELECT) volatile
    {
        uint32_t curr = OTFAD1_KEY_CTRL;

        curr &= ~(0b1u << 16u);
        curr |= (LOCK & 0b1u) << 16u;
        curr &= ~(0b1u << 0u);
        curr |= (SELECT & 0b1u) << 0u;

        OTFAD1_KEY_CTRL = curr;
    }

    /**
     * Get OTFAD2_KEY_CTRL's LOCK bit.
     *
     * lock this register, prevent from writing. Default value comes from
     * FUSE_OTFAD2_KEY_SEL_LOCK.
     */
    inline bool get_OTFAD2_KEY_CTRL_LOCK() volatile
    {
        return OTFAD2_KEY_CTRL & (1u << 16u);
    }

    /**
     * Set OTFAD2_KEY_CTRL's LOCK bit.
     *
     * lock this register, prevent from writing. Default value comes from
     * FUSE_OTFAD2_KEY_SEL_LOCK.
     */
    inline void set_OTFAD2_KEY_CTRL_LOCK() volatile
    {
        OTFAD2_KEY_CTRL |= 1u << 16u;
    }

    /**
     * Clear OTFAD2_KEY_CTRL's LOCK bit.
     *
     * lock this register, prevent from writing. Default value comes from
     * FUSE_OTFAD2_KEY_SEL_LOCK.
     */
    inline void clear_OTFAD2_KEY_CTRL_LOCK() volatile
    {
        OTFAD2_KEY_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle OTFAD2_KEY_CTRL's LOCK bit.
     *
     * lock this register, prevent from writing. Default value comes from
     * FUSE_OTFAD2_KEY_SEL_LOCK.
     */
    inline void toggle_OTFAD2_KEY_CTRL_LOCK() volatile
    {
        OTFAD2_KEY_CTRL ^= 1u << 16u;
    }

    /**
     * Get OTFAD2_KEY_CTRL's SELECT bit.
     *
     * key select for OTFAD-2. Default value comes from FUSE_OTFAD1_KEY_SEL.
     */
    inline bool get_OTFAD2_KEY_CTRL_SELECT() volatile
    {
        return OTFAD2_KEY_CTRL & (1u << 0u);
    }

    /**
     * Set OTFAD2_KEY_CTRL's SELECT bit.
     *
     * key select for OTFAD-2. Default value comes from FUSE_OTFAD1_KEY_SEL.
     */
    inline void set_OTFAD2_KEY_CTRL_SELECT() volatile
    {
        OTFAD2_KEY_CTRL |= 1u << 0u;
    }

    /**
     * Clear OTFAD2_KEY_CTRL's SELECT bit.
     *
     * key select for OTFAD-2. Default value comes from FUSE_OTFAD1_KEY_SEL.
     */
    inline void clear_OTFAD2_KEY_CTRL_SELECT() volatile
    {
        OTFAD2_KEY_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle OTFAD2_KEY_CTRL's SELECT bit.
     *
     * key select for OTFAD-2. Default value comes from FUSE_OTFAD1_KEY_SEL.
     */
    inline void toggle_OTFAD2_KEY_CTRL_SELECT() volatile
    {
        OTFAD2_KEY_CTRL ^= 1u << 0u;
    }

    /**
     * Get all of OTFAD2_KEY_CTRL's bit fields.
     *
     * (read-write) CSR OTFAD-2 Key Control
     */
    inline void get_OTFAD2_KEY_CTRL(bool &LOCK, bool &SELECT) volatile
    {
        uint32_t curr = OTFAD2_KEY_CTRL;

        LOCK = curr & (1u << 16u);
        SELECT = curr & (1u << 0u);
    }

    /**
     * Set all of OTFAD2_KEY_CTRL's bit fields.
     *
     * (read-write) CSR OTFAD-2 Key Control
     */
    inline void set_OTFAD2_KEY_CTRL(bool LOCK, bool SELECT) volatile
    {
        uint32_t curr = OTFAD2_KEY_CTRL;

        curr &= ~(0b1u << 16u);
        curr |= (LOCK & 0b1u) << 16u;
        curr &= ~(0b1u << 0u);
        curr |= (SELECT & 0b1u) << 0u;

        OTFAD2_KEY_CTRL = curr;
    }

    /**
     * Get IEE_KEY_CTRL's RELOAD bit.
     *
     * Restart load key signal for IEE
     */
    inline bool get_IEE_KEY_CTRL_RELOAD() volatile
    {
        return IEE_KEY_CTRL & (1u << 0u);
    }

    /**
     * Set IEE_KEY_CTRL's RELOAD bit.
     *
     * Restart load key signal for IEE
     */
    inline void set_IEE_KEY_CTRL_RELOAD() volatile
    {
        IEE_KEY_CTRL |= 1u << 0u;
    }

    /**
     * Clear IEE_KEY_CTRL's RELOAD bit.
     *
     * Restart load key signal for IEE
     */
    inline void clear_IEE_KEY_CTRL_RELOAD() volatile
    {
        IEE_KEY_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle IEE_KEY_CTRL's RELOAD bit.
     *
     * Restart load key signal for IEE
     */
    inline void toggle_IEE_KEY_CTRL_RELOAD() volatile
    {
        IEE_KEY_CTRL ^= 1u << 0u;
    }

    /**
     * Get PUF_KEY_CTRL's LOCK bit.
     *
     * Lock signal for key select
     */
    inline bool get_PUF_KEY_CTRL_LOCK() volatile
    {
        return PUF_KEY_CTRL & (1u << 0u);
    }

    /**
     * Set PUF_KEY_CTRL's LOCK bit.
     *
     * Lock signal for key select
     */
    inline void set_PUF_KEY_CTRL_LOCK() volatile
    {
        PUF_KEY_CTRL |= 1u << 0u;
    }

    /**
     * Clear PUF_KEY_CTRL's LOCK bit.
     *
     * Lock signal for key select
     */
    inline void clear_PUF_KEY_CTRL_LOCK() volatile
    {
        PUF_KEY_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle PUF_KEY_CTRL's LOCK bit.
     *
     * Lock signal for key select
     */
    inline void toggle_PUF_KEY_CTRL_LOCK() volatile
    {
        PUF_KEY_CTRL ^= 1u << 0u;
    }

    /**
     * Get SLOT0_CTRL's LOCK_CONTROL bit.
     *
     * Lock control of this slot
     */
    inline bool get_SLOT0_CTRL_LOCK_CONTROL() volatile
    {
        return SLOT0_CTRL & (1u << 31u);
    }

    /**
     * Set SLOT0_CTRL's LOCK_CONTROL bit.
     *
     * Lock control of this slot
     */
    inline void set_SLOT0_CTRL_LOCK_CONTROL() volatile
    {
        SLOT0_CTRL |= 1u << 31u;
    }

    /**
     * Clear SLOT0_CTRL's LOCK_CONTROL bit.
     *
     * Lock control of this slot
     */
    inline void clear_SLOT0_CTRL_LOCK_CONTROL() volatile
    {
        SLOT0_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SLOT0_CTRL's LOCK_CONTROL bit.
     *
     * Lock control of this slot
     */
    inline void toggle_SLOT0_CTRL_LOCK_CONTROL() volatile
    {
        SLOT0_CTRL ^= 1u << 31u;
    }

    /**
     * Get SLOT0_CTRL's TZ_USER bit.
     *
     * Allow user write access to this register and the slot it controls
     */
    inline bool get_SLOT0_CTRL_TZ_USER() volatile
    {
        return SLOT0_CTRL & (1u << 17u);
    }

    /**
     * Set SLOT0_CTRL's TZ_USER bit.
     *
     * Allow user write access to this register and the slot it controls
     */
    inline void set_SLOT0_CTRL_TZ_USER() volatile
    {
        SLOT0_CTRL |= 1u << 17u;
    }

    /**
     * Clear SLOT0_CTRL's TZ_USER bit.
     *
     * Allow user write access to this register and the slot it controls
     */
    inline void clear_SLOT0_CTRL_TZ_USER() volatile
    {
        SLOT0_CTRL &= ~(1u << 17u);
    }

    /**
     * Toggle SLOT0_CTRL's TZ_USER bit.
     *
     * Allow user write access to this register and the slot it controls
     */
    inline void toggle_SLOT0_CTRL_TZ_USER() volatile
    {
        SLOT0_CTRL ^= 1u << 17u;
    }

    /**
     * Get SLOT0_CTRL's TZ_NS bit.
     *
     * Allow non-secure write access to this register and the slot it controls
     */
    inline bool get_SLOT0_CTRL_TZ_NS() volatile
    {
        return SLOT0_CTRL & (1u << 16u);
    }

    /**
     * Set SLOT0_CTRL's TZ_NS bit.
     *
     * Allow non-secure write access to this register and the slot it controls
     */
    inline void set_SLOT0_CTRL_TZ_NS() volatile
    {
        SLOT0_CTRL |= 1u << 16u;
    }

    /**
     * Clear SLOT0_CTRL's TZ_NS bit.
     *
     * Allow non-secure write access to this register and the slot it controls
     */
    inline void clear_SLOT0_CTRL_TZ_NS() volatile
    {
        SLOT0_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle SLOT0_CTRL's TZ_NS bit.
     *
     * Allow non-secure write access to this register and the slot it controls
     */
    inline void toggle_SLOT0_CTRL_TZ_NS() volatile
    {
        SLOT0_CTRL ^= 1u << 16u;
    }

    /**
     * Get SLOT0_CTRL's LOCK_LIST bit.
     *
     * Lock whitelist
     */
    inline bool get_SLOT0_CTRL_LOCK_LIST() volatile
    {
        return SLOT0_CTRL & (1u << 15u);
    }

    /**
     * Set SLOT0_CTRL's LOCK_LIST bit.
     *
     * Lock whitelist
     */
    inline void set_SLOT0_CTRL_LOCK_LIST() volatile
    {
        SLOT0_CTRL |= 1u << 15u;
    }

    /**
     * Clear SLOT0_CTRL's LOCK_LIST bit.
     *
     * Lock whitelist
     */
    inline void clear_SLOT0_CTRL_LOCK_LIST() volatile
    {
        SLOT0_CTRL &= ~(1u << 15u);
    }

    /**
     * Toggle SLOT0_CTRL's LOCK_LIST bit.
     *
     * Lock whitelist
     */
    inline void toggle_SLOT0_CTRL_LOCK_LIST() volatile
    {
        SLOT0_CTRL ^= 1u << 15u;
    }

    /**
     * Get SLOT0_CTRL's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_SLOT0_CTRL_WHITE_LIST() volatile
    {
        return (SLOT0_CTRL >> 0u) & 0b1111u;
    }

    /**
     * Set SLOT0_CTRL's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_SLOT0_CTRL_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = SLOT0_CTRL;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        SLOT0_CTRL = curr;
    }

    /**
     * Get all of SLOT0_CTRL's bit fields.
     *
     * (read-write) Slot 0 Control
     */
    inline void get_SLOT0_CTRL(bool &LOCK_CONTROL, bool &TZ_USER, bool &TZ_NS,
                               bool &LOCK_LIST, uint8_t &WHITE_LIST) volatile
    {
        uint32_t curr = SLOT0_CTRL;

        LOCK_CONTROL = curr & (1u << 31u);
        TZ_USER = curr & (1u << 17u);
        TZ_NS = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 15u);
        WHITE_LIST = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of SLOT0_CTRL's bit fields.
     *
     * (read-write) Slot 0 Control
     */
    inline void set_SLOT0_CTRL(bool LOCK_CONTROL, bool TZ_USER, bool TZ_NS,
                               bool LOCK_LIST, uint8_t WHITE_LIST) volatile
    {
        uint32_t curr = SLOT0_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (LOCK_CONTROL & 0b1u) << 31u;
        curr &= ~(0b1u << 17u);
        curr |= (TZ_USER & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (TZ_NS & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (LOCK_LIST & 0b1u) << 15u;
        curr &= ~(0b1111u << 0u);
        curr |= (WHITE_LIST & 0b1111u) << 0u;

        SLOT0_CTRL = curr;
    }

    /**
     * Get SLOT1_CTRL's LOCK_CONTROL bit.
     *
     * Lock control of this slot
     */
    inline bool get_SLOT1_CTRL_LOCK_CONTROL() volatile
    {
        return SLOT1_CTRL & (1u << 31u);
    }

    /**
     * Set SLOT1_CTRL's LOCK_CONTROL bit.
     *
     * Lock control of this slot
     */
    inline void set_SLOT1_CTRL_LOCK_CONTROL() volatile
    {
        SLOT1_CTRL |= 1u << 31u;
    }

    /**
     * Clear SLOT1_CTRL's LOCK_CONTROL bit.
     *
     * Lock control of this slot
     */
    inline void clear_SLOT1_CTRL_LOCK_CONTROL() volatile
    {
        SLOT1_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SLOT1_CTRL's LOCK_CONTROL bit.
     *
     * Lock control of this slot
     */
    inline void toggle_SLOT1_CTRL_LOCK_CONTROL() volatile
    {
        SLOT1_CTRL ^= 1u << 31u;
    }

    /**
     * Get SLOT1_CTRL's TZ_USER bit.
     *
     * Allow user write access to this register and the slot it controls
     */
    inline bool get_SLOT1_CTRL_TZ_USER() volatile
    {
        return SLOT1_CTRL & (1u << 17u);
    }

    /**
     * Set SLOT1_CTRL's TZ_USER bit.
     *
     * Allow user write access to this register and the slot it controls
     */
    inline void set_SLOT1_CTRL_TZ_USER() volatile
    {
        SLOT1_CTRL |= 1u << 17u;
    }

    /**
     * Clear SLOT1_CTRL's TZ_USER bit.
     *
     * Allow user write access to this register and the slot it controls
     */
    inline void clear_SLOT1_CTRL_TZ_USER() volatile
    {
        SLOT1_CTRL &= ~(1u << 17u);
    }

    /**
     * Toggle SLOT1_CTRL's TZ_USER bit.
     *
     * Allow user write access to this register and the slot it controls
     */
    inline void toggle_SLOT1_CTRL_TZ_USER() volatile
    {
        SLOT1_CTRL ^= 1u << 17u;
    }

    /**
     * Get SLOT1_CTRL's TZ_NS bit.
     *
     * Allow non-secure write access to this register and the slot it controls
     */
    inline bool get_SLOT1_CTRL_TZ_NS() volatile
    {
        return SLOT1_CTRL & (1u << 16u);
    }

    /**
     * Set SLOT1_CTRL's TZ_NS bit.
     *
     * Allow non-secure write access to this register and the slot it controls
     */
    inline void set_SLOT1_CTRL_TZ_NS() volatile
    {
        SLOT1_CTRL |= 1u << 16u;
    }

    /**
     * Clear SLOT1_CTRL's TZ_NS bit.
     *
     * Allow non-secure write access to this register and the slot it controls
     */
    inline void clear_SLOT1_CTRL_TZ_NS() volatile
    {
        SLOT1_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle SLOT1_CTRL's TZ_NS bit.
     *
     * Allow non-secure write access to this register and the slot it controls
     */
    inline void toggle_SLOT1_CTRL_TZ_NS() volatile
    {
        SLOT1_CTRL ^= 1u << 16u;
    }

    /**
     * Get SLOT1_CTRL's LOCK_LIST bit.
     *
     * Lock whitelist
     */
    inline bool get_SLOT1_CTRL_LOCK_LIST() volatile
    {
        return SLOT1_CTRL & (1u << 15u);
    }

    /**
     * Set SLOT1_CTRL's LOCK_LIST bit.
     *
     * Lock whitelist
     */
    inline void set_SLOT1_CTRL_LOCK_LIST() volatile
    {
        SLOT1_CTRL |= 1u << 15u;
    }

    /**
     * Clear SLOT1_CTRL's LOCK_LIST bit.
     *
     * Lock whitelist
     */
    inline void clear_SLOT1_CTRL_LOCK_LIST() volatile
    {
        SLOT1_CTRL &= ~(1u << 15u);
    }

    /**
     * Toggle SLOT1_CTRL's LOCK_LIST bit.
     *
     * Lock whitelist
     */
    inline void toggle_SLOT1_CTRL_LOCK_LIST() volatile
    {
        SLOT1_CTRL ^= 1u << 15u;
    }

    /**
     * Get SLOT1_CTRL's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_SLOT1_CTRL_WHITE_LIST() volatile
    {
        return (SLOT1_CTRL >> 0u) & 0b1111u;
    }

    /**
     * Set SLOT1_CTRL's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_SLOT1_CTRL_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = SLOT1_CTRL;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        SLOT1_CTRL = curr;
    }

    /**
     * Get all of SLOT1_CTRL's bit fields.
     *
     * (read-write) Slot1 Control
     */
    inline void get_SLOT1_CTRL(bool &LOCK_CONTROL, bool &TZ_USER, bool &TZ_NS,
                               bool &LOCK_LIST, uint8_t &WHITE_LIST) volatile
    {
        uint32_t curr = SLOT1_CTRL;

        LOCK_CONTROL = curr & (1u << 31u);
        TZ_USER = curr & (1u << 17u);
        TZ_NS = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 15u);
        WHITE_LIST = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of SLOT1_CTRL's bit fields.
     *
     * (read-write) Slot1 Control
     */
    inline void set_SLOT1_CTRL(bool LOCK_CONTROL, bool TZ_USER, bool TZ_NS,
                               bool LOCK_LIST, uint8_t WHITE_LIST) volatile
    {
        uint32_t curr = SLOT1_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (LOCK_CONTROL & 0b1u) << 31u;
        curr &= ~(0b1u << 17u);
        curr |= (TZ_USER & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (TZ_NS & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (LOCK_LIST & 0b1u) << 15u;
        curr &= ~(0b1111u << 0u);
        curr |= (WHITE_LIST & 0b1111u) << 0u;

        SLOT1_CTRL = curr;
    }

    /**
     * Get SLOT2_CTRL's LOCK_CONTROL bit.
     *
     * Lock control of this slot
     */
    inline bool get_SLOT2_CTRL_LOCK_CONTROL() volatile
    {
        return SLOT2_CTRL & (1u << 31u);
    }

    /**
     * Set SLOT2_CTRL's LOCK_CONTROL bit.
     *
     * Lock control of this slot
     */
    inline void set_SLOT2_CTRL_LOCK_CONTROL() volatile
    {
        SLOT2_CTRL |= 1u << 31u;
    }

    /**
     * Clear SLOT2_CTRL's LOCK_CONTROL bit.
     *
     * Lock control of this slot
     */
    inline void clear_SLOT2_CTRL_LOCK_CONTROL() volatile
    {
        SLOT2_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SLOT2_CTRL's LOCK_CONTROL bit.
     *
     * Lock control of this slot
     */
    inline void toggle_SLOT2_CTRL_LOCK_CONTROL() volatile
    {
        SLOT2_CTRL ^= 1u << 31u;
    }

    /**
     * Get SLOT2_CTRL's TZ_USER bit.
     *
     * Allow user write access to this register and the slot it controls
     */
    inline bool get_SLOT2_CTRL_TZ_USER() volatile
    {
        return SLOT2_CTRL & (1u << 17u);
    }

    /**
     * Set SLOT2_CTRL's TZ_USER bit.
     *
     * Allow user write access to this register and the slot it controls
     */
    inline void set_SLOT2_CTRL_TZ_USER() volatile
    {
        SLOT2_CTRL |= 1u << 17u;
    }

    /**
     * Clear SLOT2_CTRL's TZ_USER bit.
     *
     * Allow user write access to this register and the slot it controls
     */
    inline void clear_SLOT2_CTRL_TZ_USER() volatile
    {
        SLOT2_CTRL &= ~(1u << 17u);
    }

    /**
     * Toggle SLOT2_CTRL's TZ_USER bit.
     *
     * Allow user write access to this register and the slot it controls
     */
    inline void toggle_SLOT2_CTRL_TZ_USER() volatile
    {
        SLOT2_CTRL ^= 1u << 17u;
    }

    /**
     * Get SLOT2_CTRL's TZ_NS bit.
     *
     * Allow non-secure write access to this register and the slot it controls
     */
    inline bool get_SLOT2_CTRL_TZ_NS() volatile
    {
        return SLOT2_CTRL & (1u << 16u);
    }

    /**
     * Set SLOT2_CTRL's TZ_NS bit.
     *
     * Allow non-secure write access to this register and the slot it controls
     */
    inline void set_SLOT2_CTRL_TZ_NS() volatile
    {
        SLOT2_CTRL |= 1u << 16u;
    }

    /**
     * Clear SLOT2_CTRL's TZ_NS bit.
     *
     * Allow non-secure write access to this register and the slot it controls
     */
    inline void clear_SLOT2_CTRL_TZ_NS() volatile
    {
        SLOT2_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle SLOT2_CTRL's TZ_NS bit.
     *
     * Allow non-secure write access to this register and the slot it controls
     */
    inline void toggle_SLOT2_CTRL_TZ_NS() volatile
    {
        SLOT2_CTRL ^= 1u << 16u;
    }

    /**
     * Get SLOT2_CTRL's LOCK_LIST bit.
     *
     * Lock whitelist
     */
    inline bool get_SLOT2_CTRL_LOCK_LIST() volatile
    {
        return SLOT2_CTRL & (1u << 15u);
    }

    /**
     * Set SLOT2_CTRL's LOCK_LIST bit.
     *
     * Lock whitelist
     */
    inline void set_SLOT2_CTRL_LOCK_LIST() volatile
    {
        SLOT2_CTRL |= 1u << 15u;
    }

    /**
     * Clear SLOT2_CTRL's LOCK_LIST bit.
     *
     * Lock whitelist
     */
    inline void clear_SLOT2_CTRL_LOCK_LIST() volatile
    {
        SLOT2_CTRL &= ~(1u << 15u);
    }

    /**
     * Toggle SLOT2_CTRL's LOCK_LIST bit.
     *
     * Lock whitelist
     */
    inline void toggle_SLOT2_CTRL_LOCK_LIST() volatile
    {
        SLOT2_CTRL ^= 1u << 15u;
    }

    /**
     * Get SLOT2_CTRL's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_SLOT2_CTRL_WHITE_LIST() volatile
    {
        return (SLOT2_CTRL >> 0u) & 0b1111u;
    }

    /**
     * Set SLOT2_CTRL's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_SLOT2_CTRL_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = SLOT2_CTRL;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        SLOT2_CTRL = curr;
    }

    /**
     * Get all of SLOT2_CTRL's bit fields.
     *
     * (read-write) Slot2 Control
     */
    inline void get_SLOT2_CTRL(bool &LOCK_CONTROL, bool &TZ_USER, bool &TZ_NS,
                               bool &LOCK_LIST, uint8_t &WHITE_LIST) volatile
    {
        uint32_t curr = SLOT2_CTRL;

        LOCK_CONTROL = curr & (1u << 31u);
        TZ_USER = curr & (1u << 17u);
        TZ_NS = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 15u);
        WHITE_LIST = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of SLOT2_CTRL's bit fields.
     *
     * (read-write) Slot2 Control
     */
    inline void set_SLOT2_CTRL(bool LOCK_CONTROL, bool TZ_USER, bool TZ_NS,
                               bool LOCK_LIST, uint8_t WHITE_LIST) volatile
    {
        uint32_t curr = SLOT2_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (LOCK_CONTROL & 0b1u) << 31u;
        curr &= ~(0b1u << 17u);
        curr |= (TZ_USER & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (TZ_NS & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (LOCK_LIST & 0b1u) << 15u;
        curr &= ~(0b1111u << 0u);
        curr |= (WHITE_LIST & 0b1111u) << 0u;

        SLOT2_CTRL = curr;
    }

    /**
     * Get SLOT3_CTRL's LOCK_CONTROL bit.
     *
     * Lock control of this slot
     */
    inline bool get_SLOT3_CTRL_LOCK_CONTROL() volatile
    {
        return SLOT3_CTRL & (1u << 31u);
    }

    /**
     * Set SLOT3_CTRL's LOCK_CONTROL bit.
     *
     * Lock control of this slot
     */
    inline void set_SLOT3_CTRL_LOCK_CONTROL() volatile
    {
        SLOT3_CTRL |= 1u << 31u;
    }

    /**
     * Clear SLOT3_CTRL's LOCK_CONTROL bit.
     *
     * Lock control of this slot
     */
    inline void clear_SLOT3_CTRL_LOCK_CONTROL() volatile
    {
        SLOT3_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SLOT3_CTRL's LOCK_CONTROL bit.
     *
     * Lock control of this slot
     */
    inline void toggle_SLOT3_CTRL_LOCK_CONTROL() volatile
    {
        SLOT3_CTRL ^= 1u << 31u;
    }

    /**
     * Get SLOT3_CTRL's TZ_USER bit.
     *
     * Allow user write access to this register and the slot it controls
     */
    inline bool get_SLOT3_CTRL_TZ_USER() volatile
    {
        return SLOT3_CTRL & (1u << 17u);
    }

    /**
     * Set SLOT3_CTRL's TZ_USER bit.
     *
     * Allow user write access to this register and the slot it controls
     */
    inline void set_SLOT3_CTRL_TZ_USER() volatile
    {
        SLOT3_CTRL |= 1u << 17u;
    }

    /**
     * Clear SLOT3_CTRL's TZ_USER bit.
     *
     * Allow user write access to this register and the slot it controls
     */
    inline void clear_SLOT3_CTRL_TZ_USER() volatile
    {
        SLOT3_CTRL &= ~(1u << 17u);
    }

    /**
     * Toggle SLOT3_CTRL's TZ_USER bit.
     *
     * Allow user write access to this register and the slot it controls
     */
    inline void toggle_SLOT3_CTRL_TZ_USER() volatile
    {
        SLOT3_CTRL ^= 1u << 17u;
    }

    /**
     * Get SLOT3_CTRL's TZ_NS bit.
     *
     * Allow non-secure write access to this register and the slot it controls
     */
    inline bool get_SLOT3_CTRL_TZ_NS() volatile
    {
        return SLOT3_CTRL & (1u << 16u);
    }

    /**
     * Set SLOT3_CTRL's TZ_NS bit.
     *
     * Allow non-secure write access to this register and the slot it controls
     */
    inline void set_SLOT3_CTRL_TZ_NS() volatile
    {
        SLOT3_CTRL |= 1u << 16u;
    }

    /**
     * Clear SLOT3_CTRL's TZ_NS bit.
     *
     * Allow non-secure write access to this register and the slot it controls
     */
    inline void clear_SLOT3_CTRL_TZ_NS() volatile
    {
        SLOT3_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle SLOT3_CTRL's TZ_NS bit.
     *
     * Allow non-secure write access to this register and the slot it controls
     */
    inline void toggle_SLOT3_CTRL_TZ_NS() volatile
    {
        SLOT3_CTRL ^= 1u << 16u;
    }

    /**
     * Get SLOT3_CTRL's LOCK_LIST bit.
     *
     * Lock whitelist
     */
    inline bool get_SLOT3_CTRL_LOCK_LIST() volatile
    {
        return SLOT3_CTRL & (1u << 15u);
    }

    /**
     * Set SLOT3_CTRL's LOCK_LIST bit.
     *
     * Lock whitelist
     */
    inline void set_SLOT3_CTRL_LOCK_LIST() volatile
    {
        SLOT3_CTRL |= 1u << 15u;
    }

    /**
     * Clear SLOT3_CTRL's LOCK_LIST bit.
     *
     * Lock whitelist
     */
    inline void clear_SLOT3_CTRL_LOCK_LIST() volatile
    {
        SLOT3_CTRL &= ~(1u << 15u);
    }

    /**
     * Toggle SLOT3_CTRL's LOCK_LIST bit.
     *
     * Lock whitelist
     */
    inline void toggle_SLOT3_CTRL_LOCK_LIST() volatile
    {
        SLOT3_CTRL ^= 1u << 15u;
    }

    /**
     * Get SLOT3_CTRL's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_SLOT3_CTRL_WHITE_LIST() volatile
    {
        return (SLOT3_CTRL >> 0u) & 0b1111u;
    }

    /**
     * Set SLOT3_CTRL's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_SLOT3_CTRL_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = SLOT3_CTRL;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        SLOT3_CTRL = curr;
    }

    /**
     * Get all of SLOT3_CTRL's bit fields.
     *
     * (read-write) Slot3 Control
     */
    inline void get_SLOT3_CTRL(bool &LOCK_CONTROL, bool &TZ_USER, bool &TZ_NS,
                               bool &LOCK_LIST, uint8_t &WHITE_LIST) volatile
    {
        uint32_t curr = SLOT3_CTRL;

        LOCK_CONTROL = curr & (1u << 31u);
        TZ_USER = curr & (1u << 17u);
        TZ_NS = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 15u);
        WHITE_LIST = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of SLOT3_CTRL's bit fields.
     *
     * (read-write) Slot3 Control
     */
    inline void set_SLOT3_CTRL(bool LOCK_CONTROL, bool TZ_USER, bool TZ_NS,
                               bool LOCK_LIST, uint8_t WHITE_LIST) volatile
    {
        uint32_t curr = SLOT3_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (LOCK_CONTROL & 0b1u) << 31u;
        curr &= ~(0b1u << 17u);
        curr |= (TZ_USER & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (TZ_NS & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (LOCK_LIST & 0b1u) << 15u;
        curr &= ~(0b1111u << 0u);
        curr |= (WHITE_LIST & 0b1111u) << 0u;

        SLOT3_CTRL = curr;
    }

    /**
     * Get SLOT4_CTRL's LOCK_CONTROL bit.
     *
     * Lock control of this slot
     */
    inline bool get_SLOT4_CTRL_LOCK_CONTROL() volatile
    {
        return SLOT4_CTRL & (1u << 31u);
    }

    /**
     * Set SLOT4_CTRL's LOCK_CONTROL bit.
     *
     * Lock control of this slot
     */
    inline void set_SLOT4_CTRL_LOCK_CONTROL() volatile
    {
        SLOT4_CTRL |= 1u << 31u;
    }

    /**
     * Clear SLOT4_CTRL's LOCK_CONTROL bit.
     *
     * Lock control of this slot
     */
    inline void clear_SLOT4_CTRL_LOCK_CONTROL() volatile
    {
        SLOT4_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SLOT4_CTRL's LOCK_CONTROL bit.
     *
     * Lock control of this slot
     */
    inline void toggle_SLOT4_CTRL_LOCK_CONTROL() volatile
    {
        SLOT4_CTRL ^= 1u << 31u;
    }

    /**
     * Get SLOT4_CTRL's TZ_USER bit.
     *
     * Allow user write access to this register and the slot it controls
     */
    inline bool get_SLOT4_CTRL_TZ_USER() volatile
    {
        return SLOT4_CTRL & (1u << 17u);
    }

    /**
     * Set SLOT4_CTRL's TZ_USER bit.
     *
     * Allow user write access to this register and the slot it controls
     */
    inline void set_SLOT4_CTRL_TZ_USER() volatile
    {
        SLOT4_CTRL |= 1u << 17u;
    }

    /**
     * Clear SLOT4_CTRL's TZ_USER bit.
     *
     * Allow user write access to this register and the slot it controls
     */
    inline void clear_SLOT4_CTRL_TZ_USER() volatile
    {
        SLOT4_CTRL &= ~(1u << 17u);
    }

    /**
     * Toggle SLOT4_CTRL's TZ_USER bit.
     *
     * Allow user write access to this register and the slot it controls
     */
    inline void toggle_SLOT4_CTRL_TZ_USER() volatile
    {
        SLOT4_CTRL ^= 1u << 17u;
    }

    /**
     * Get SLOT4_CTRL's TZ_NS bit.
     *
     * Allow non-secure write access to this register and the slot it controls
     */
    inline bool get_SLOT4_CTRL_TZ_NS() volatile
    {
        return SLOT4_CTRL & (1u << 16u);
    }

    /**
     * Set SLOT4_CTRL's TZ_NS bit.
     *
     * Allow non-secure write access to this register and the slot it controls
     */
    inline void set_SLOT4_CTRL_TZ_NS() volatile
    {
        SLOT4_CTRL |= 1u << 16u;
    }

    /**
     * Clear SLOT4_CTRL's TZ_NS bit.
     *
     * Allow non-secure write access to this register and the slot it controls
     */
    inline void clear_SLOT4_CTRL_TZ_NS() volatile
    {
        SLOT4_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle SLOT4_CTRL's TZ_NS bit.
     *
     * Allow non-secure write access to this register and the slot it controls
     */
    inline void toggle_SLOT4_CTRL_TZ_NS() volatile
    {
        SLOT4_CTRL ^= 1u << 16u;
    }

    /**
     * Get SLOT4_CTRL's LOCK_LIST bit.
     *
     * Lock whitelist
     */
    inline bool get_SLOT4_CTRL_LOCK_LIST() volatile
    {
        return SLOT4_CTRL & (1u << 15u);
    }

    /**
     * Set SLOT4_CTRL's LOCK_LIST bit.
     *
     * Lock whitelist
     */
    inline void set_SLOT4_CTRL_LOCK_LIST() volatile
    {
        SLOT4_CTRL |= 1u << 15u;
    }

    /**
     * Clear SLOT4_CTRL's LOCK_LIST bit.
     *
     * Lock whitelist
     */
    inline void clear_SLOT4_CTRL_LOCK_LIST() volatile
    {
        SLOT4_CTRL &= ~(1u << 15u);
    }

    /**
     * Toggle SLOT4_CTRL's LOCK_LIST bit.
     *
     * Lock whitelist
     */
    inline void toggle_SLOT4_CTRL_LOCK_LIST() volatile
    {
        SLOT4_CTRL ^= 1u << 15u;
    }

    /**
     * Get SLOT4_CTRL's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_SLOT4_CTRL_WHITE_LIST() volatile
    {
        return (SLOT4_CTRL >> 0u) & 0b1111u;
    }

    /**
     * Set SLOT4_CTRL's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_SLOT4_CTRL_WHITE_LIST(uint8_t value) volatile
    {
        uint32_t curr = SLOT4_CTRL;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        SLOT4_CTRL = curr;
    }

    /**
     * Get all of SLOT4_CTRL's bit fields.
     *
     * (read-write) Slot 4 Control
     */
    inline void get_SLOT4_CTRL(bool &LOCK_CONTROL, bool &TZ_USER, bool &TZ_NS,
                               bool &LOCK_LIST, uint8_t &WHITE_LIST) volatile
    {
        uint32_t curr = SLOT4_CTRL;

        LOCK_CONTROL = curr & (1u << 31u);
        TZ_USER = curr & (1u << 17u);
        TZ_NS = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 15u);
        WHITE_LIST = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of SLOT4_CTRL's bit fields.
     *
     * (read-write) Slot 4 Control
     */
    inline void set_SLOT4_CTRL(bool LOCK_CONTROL, bool TZ_USER, bool TZ_NS,
                               bool LOCK_LIST, uint8_t WHITE_LIST) volatile
    {
        uint32_t curr = SLOT4_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (LOCK_CONTROL & 0b1u) << 31u;
        curr &= ~(0b1u << 17u);
        curr |= (TZ_USER & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (TZ_NS & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (LOCK_LIST & 0b1u) << 15u;
        curr &= ~(0b1111u << 0u);
        curr |= (WHITE_LIST & 0b1111u) << 0u;

        SLOT4_CTRL = curr;
    }
};

static_assert(sizeof(key_manager) == key_manager::size);

static volatile key_manager *const KEY_MANAGER =
    reinterpret_cast<key_manager *>(0x40C80000);

}; // namespace MIMXRT1176::CM7
