/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/KEY_MANAGER__PUF_KEYENABLE_ENABLE0.h"
#include "../enums/KEY_MANAGER__PUF_KEYENABLE_ENABLE1.h"
#include "../enums/KEY_MANAGER__PUF_KEYINDEX_KEYIDX.h"
#include "../enums/KEY_MANAGER__PUF_KEYLOCK_LOCK0.h"
#include "../enums/KEY_MANAGER__PUF_KEYLOCK_LOCK1.h"
#include "../enums/KEY_MANAGER__PUF_KEYRESET_RESET0.h"
#include "../enums/KEY_MANAGER__PUF_KEYRESET_RESET1.h"
#include "../enums/KEY_MANAGER__PUF_KEYSIZE_KEYSIZE.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * PUF
 */
struct [[gnu::packed]] key_manager__puf
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        604; /*!< key_manager__puf's size in bytes. */

    /* Fields. */
    uint32_t CTRL;     /*!< (read-write) PUF Control Register */
    uint32_t KEYINDEX; /*!< (read-write) PUF Key Index Register */
    uint32_t KEYSIZE;  /*!< (read-write) PUF Key Size Register */
    static constexpr std::size_t reserved_padding0_length = 5;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t STAT; /*!< (read-write) PUF Status Register */
    const uint32_t reserved_padding1 = {};
    uint32_t ALLOW; /*!< (read-write) PUF Allow Register */
    static constexpr std::size_t reserved_padding2_length = 5;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    uint32_t KEYINPUT;   /*!< (read-write) PUF Key Input Register */
    uint32_t CODEINPUT;  /*!< (read-write) PUF Code Input Register */
    uint32_t CODEOUTPUT; /*!< (read-write) PUF Code Output Register */
    static constexpr std::size_t reserved_padding3_length = 5;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    uint32_t KEYOUTINDEX; /*!< (read-write) PUF Key Output Index Register */
    uint32_t KEYOUTPUT;   /*!< (read-write) PUF Key Output Register */
    static constexpr std::size_t reserved_padding4_length = 29;
    const uint32_t reserved_padding4[reserved_padding4_length] = {};
    uint32_t IFSTAT; /*!< (read-write) PUF Interface Status Register */
    static constexpr std::size_t reserved_padding5_length = 7;
    const uint32_t reserved_padding5[reserved_padding5_length] = {};
    uint32_t VERSION; /*!< (read-write) PUF Version Register */
    uint32_t INTEN;   /*!< (read-write) PUF Interrupt Enable */
    uint32_t INTSTAT; /*!< (read-write) PUF Interrupt Status */
    uint32_t PWRCTRL; /*!< (read-write) PUF Power Control Of RAM */
    uint32_t CFG;     /*!< (read-write) PUF Configuration Register */
    static constexpr std::size_t reserved_padding6_length = 60;
    const uint32_t reserved_padding6[reserved_padding6_length] = {};
    uint32_t KEYLOCK;   /*!< (read-write) PUF Key Manager Lock */
    uint32_t KEYENABLE; /*!< (read-write) PUF Key Manager Enable */
    uint32_t KEYRESET;  /*!< (read-write) PUF Key Manager Reset */
    uint32_t IDXBLK;    /*!< (read-write) PUF Index Block Key Output */
    uint32_t IDXBLK_DP; /*!< (read-write) PUF Index Block Key Output */
    uint32_t KEYMASK0;  /*!< (read-write) PUF Key Block 0 Mask Enable */
    uint32_t KEYMASK1;  /*!< (read-write) PUF Key Block 1 Mask Enable */
    static constexpr std::size_t reserved_padding7_length = 14;
    const uint32_t reserved_padding7[reserved_padding7_length] = {};
    uint32_t IDXBLK_STATUS; /*!< (read-write) PUF Index Block Setting Status
                               Register */
    uint32_t IDXBLK_SHIFT;  /*!< (read-write) PUF Key Manager Shift Status */

    /* Methods. */

    /**
     * Get CTRL's GETKEY bit.
     *
     * Begin Get Key operation
     */
    inline bool get_CTRL_GETKEY() volatile
    {
        return CTRL & (1u << 6u);
    }

    /**
     * Set CTRL's GETKEY bit.
     *
     * Begin Get Key operation
     */
    inline void set_CTRL_GETKEY() volatile
    {
        CTRL |= 1u << 6u;
    }

    /**
     * Clear CTRL's GETKEY bit.
     *
     * Begin Get Key operation
     */
    inline void clear_CTRL_GETKEY() volatile
    {
        CTRL &= ~(1u << 6u);
    }

    /**
     * Toggle CTRL's GETKEY bit.
     *
     * Begin Get Key operation
     */
    inline void toggle_CTRL_GETKEY() volatile
    {
        CTRL ^= 1u << 6u;
    }

    /**
     * Get CTRL's SETKEY bit.
     *
     * Begin Set User Key operation
     */
    inline bool get_CTRL_SETKEY() volatile
    {
        return CTRL & (1u << 4u);
    }

    /**
     * Set CTRL's SETKEY bit.
     *
     * Begin Set User Key operation
     */
    inline void set_CTRL_SETKEY() volatile
    {
        CTRL |= 1u << 4u;
    }

    /**
     * Clear CTRL's SETKEY bit.
     *
     * Begin Set User Key operation
     */
    inline void clear_CTRL_SETKEY() volatile
    {
        CTRL &= ~(1u << 4u);
    }

    /**
     * Toggle CTRL's SETKEY bit.
     *
     * Begin Set User Key operation
     */
    inline void toggle_CTRL_SETKEY() volatile
    {
        CTRL ^= 1u << 4u;
    }

    /**
     * Get CTRL's GENERATEKEY bit.
     *
     * Begin Set Intrinsic Key operation
     */
    inline bool get_CTRL_GENERATEKEY() volatile
    {
        return CTRL & (1u << 3u);
    }

    /**
     * Set CTRL's GENERATEKEY bit.
     *
     * Begin Set Intrinsic Key operation
     */
    inline void set_CTRL_GENERATEKEY() volatile
    {
        CTRL |= 1u << 3u;
    }

    /**
     * Clear CTRL's GENERATEKEY bit.
     *
     * Begin Set Intrinsic Key operation
     */
    inline void clear_CTRL_GENERATEKEY() volatile
    {
        CTRL &= ~(1u << 3u);
    }

    /**
     * Toggle CTRL's GENERATEKEY bit.
     *
     * Begin Set Intrinsic Key operation
     */
    inline void toggle_CTRL_GENERATEKEY() volatile
    {
        CTRL ^= 1u << 3u;
    }

    /**
     * Get CTRL's START bit.
     *
     * Begin Start operation
     */
    inline bool get_CTRL_START() volatile
    {
        return CTRL & (1u << 2u);
    }

    /**
     * Set CTRL's START bit.
     *
     * Begin Start operation
     */
    inline void set_CTRL_START() volatile
    {
        CTRL |= 1u << 2u;
    }

    /**
     * Clear CTRL's START bit.
     *
     * Begin Start operation
     */
    inline void clear_CTRL_START() volatile
    {
        CTRL &= ~(1u << 2u);
    }

    /**
     * Toggle CTRL's START bit.
     *
     * Begin Start operation
     */
    inline void toggle_CTRL_START() volatile
    {
        CTRL ^= 1u << 2u;
    }

    /**
     * Get CTRL's ENROLL bit.
     *
     * Begin Enroll operation
     */
    inline bool get_CTRL_ENROLL() volatile
    {
        return CTRL & (1u << 1u);
    }

    /**
     * Set CTRL's ENROLL bit.
     *
     * Begin Enroll operation
     */
    inline void set_CTRL_ENROLL() volatile
    {
        CTRL |= 1u << 1u;
    }

    /**
     * Clear CTRL's ENROLL bit.
     *
     * Begin Enroll operation
     */
    inline void clear_CTRL_ENROLL() volatile
    {
        CTRL &= ~(1u << 1u);
    }

    /**
     * Toggle CTRL's ENROLL bit.
     *
     * Begin Enroll operation
     */
    inline void toggle_CTRL_ENROLL() volatile
    {
        CTRL ^= 1u << 1u;
    }

    /**
     * Get CTRL's ZEROIZE bit.
     *
     * Begin Zeroize operation for PUF and go to Error state
     */
    inline bool get_CTRL_ZEROIZE() volatile
    {
        return CTRL & (1u << 0u);
    }

    /**
     * Set CTRL's ZEROIZE bit.
     *
     * Begin Zeroize operation for PUF and go to Error state
     */
    inline void set_CTRL_ZEROIZE() volatile
    {
        CTRL |= 1u << 0u;
    }

    /**
     * Clear CTRL's ZEROIZE bit.
     *
     * Begin Zeroize operation for PUF and go to Error state
     */
    inline void clear_CTRL_ZEROIZE() volatile
    {
        CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle CTRL's ZEROIZE bit.
     *
     * Begin Zeroize operation for PUF and go to Error state
     */
    inline void toggle_CTRL_ZEROIZE() volatile
    {
        CTRL ^= 1u << 0u;
    }

    /**
     * Get all of CTRL's bit fields.
     *
     * (read-write) PUF Control Register
     */
    inline void get_CTRL(bool &GETKEY, bool &SETKEY, bool &GENERATEKEY,
                         bool &START, bool &ENROLL, bool &ZEROIZE) volatile
    {
        uint32_t curr = CTRL;

        GETKEY = curr & (1u << 6u);
        SETKEY = curr & (1u << 4u);
        GENERATEKEY = curr & (1u << 3u);
        START = curr & (1u << 2u);
        ENROLL = curr & (1u << 1u);
        ZEROIZE = curr & (1u << 0u);
    }

    /**
     * Set all of CTRL's bit fields.
     *
     * (read-write) PUF Control Register
     */
    inline void set_CTRL(bool GETKEY, bool SETKEY, bool GENERATEKEY,
                         bool START, bool ENROLL, bool ZEROIZE) volatile
    {
        uint32_t curr = CTRL;

        curr &= ~(0b1u << 6u);
        curr |= (GETKEY & 0b1u) << 6u;
        curr &= ~(0b1u << 4u);
        curr |= (SETKEY & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (GENERATEKEY & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (START & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (ENROLL & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ZEROIZE & 0b1u) << 0u;

        CTRL = curr;
    }

    /**
     * Get KEYINDEX's KEYIDX field.
     *
     * PUF Key Index
     */
    inline KEY_MANAGER__PUF_KEYINDEX_KEYIDX get_KEYINDEX_KEYIDX() volatile
    {
        return KEY_MANAGER__PUF_KEYINDEX_KEYIDX((KEYINDEX >> 0u) & 0b1111u);
    }

    /**
     * Set KEYINDEX's KEYIDX field.
     *
     * PUF Key Index
     */
    inline void set_KEYINDEX_KEYIDX(
        KEY_MANAGER__PUF_KEYINDEX_KEYIDX value) volatile
    {
        uint32_t curr = KEYINDEX;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        KEYINDEX = curr;
    }

    /**
     * Get KEYSIZE's KEYSIZE field.
     *
     * PUF Key Size
     */
    inline KEY_MANAGER__PUF_KEYSIZE_KEYSIZE get_KEYSIZE_KEYSIZE() volatile
    {
        return KEY_MANAGER__PUF_KEYSIZE_KEYSIZE((KEYSIZE >> 0u) & 0b111111u);
    }

    /**
     * Set KEYSIZE's KEYSIZE field.
     *
     * PUF Key Size
     */
    inline void set_KEYSIZE_KEYSIZE(
        KEY_MANAGER__PUF_KEYSIZE_KEYSIZE value) volatile
    {
        uint32_t curr = KEYSIZE;

        curr &= ~(0b111111u << 0u);
        curr |= (std::to_underlying(value) & 0b111111u) << 0u;

        KEYSIZE = curr;
    }

    /**
     * Get STAT's CODEOUTAVAIL bit.
     *
     * CO_or
     */
    inline bool get_STAT_CODEOUTAVAIL() volatile
    {
        return STAT & (1u << 7u);
    }

    /**
     * Get STAT's CODEINREQ bit.
     *
     * CI_ir
     */
    inline bool get_STAT_CODEINREQ() volatile
    {
        return STAT & (1u << 6u);
    }

    /**
     * Get STAT's KEYOUTAVAIL bit.
     *
     * KO_or
     */
    inline bool get_STAT_KEYOUTAVAIL() volatile
    {
        return STAT & (1u << 5u);
    }

    /**
     * Get STAT's KEYINREQ bit.
     *
     * KI_ir
     */
    inline bool get_STAT_KEYINREQ() volatile
    {
        return STAT & (1u << 4u);
    }

    /**
     * Get STAT's ERROR bit.
     *
     * puf_error
     */
    inline bool get_STAT_ERROR() volatile
    {
        return STAT & (1u << 2u);
    }

    /**
     * Get STAT's SUCCESS bit.
     *
     * puf_ok
     */
    inline bool get_STAT_SUCCESS() volatile
    {
        return STAT & (1u << 1u);
    }

    /**
     * Get STAT's BUSY bit.
     *
     * puf_busy
     */
    inline bool get_STAT_BUSY() volatile
    {
        return STAT & (1u << 0u);
    }

    /**
     * Get all of STAT's bit fields.
     *
     * (read-write) PUF Status Register
     */
    inline void get_STAT(bool &CODEOUTAVAIL, bool &CODEINREQ,
                         bool &KEYOUTAVAIL, bool &KEYINREQ, bool &ERROR,
                         bool &SUCCESS, bool &BUSY) volatile
    {
        uint32_t curr = STAT;

        CODEOUTAVAIL = curr & (1u << 7u);
        CODEINREQ = curr & (1u << 6u);
        KEYOUTAVAIL = curr & (1u << 5u);
        KEYINREQ = curr & (1u << 4u);
        ERROR = curr & (1u << 2u);
        SUCCESS = curr & (1u << 1u);
        BUSY = curr & (1u << 0u);
    }

    /**
     * Get ALLOW's ALLOWGETKEY bit.
     *
     * Allow Get Key operation
     */
    inline bool get_ALLOW_ALLOWGETKEY() volatile
    {
        return ALLOW & (1u << 3u);
    }

    /**
     * Get ALLOW's ALLOWSETKEY bit.
     *
     * Allow Set Key operations
     */
    inline bool get_ALLOW_ALLOWSETKEY() volatile
    {
        return ALLOW & (1u << 2u);
    }

    /**
     * Get ALLOW's ALLOWSTART bit.
     *
     * Allow Start operation
     */
    inline bool get_ALLOW_ALLOWSTART() volatile
    {
        return ALLOW & (1u << 1u);
    }

    /**
     * Get ALLOW's ALLOWENROLL bit.
     *
     * Allow Enroll operation
     */
    inline bool get_ALLOW_ALLOWENROLL() volatile
    {
        return ALLOW & (1u << 0u);
    }

    /**
     * Get all of ALLOW's bit fields.
     *
     * (read-write) PUF Allow Register
     */
    inline void get_ALLOW(bool &ALLOWGETKEY, bool &ALLOWSETKEY,
                          bool &ALLOWSTART, bool &ALLOWENROLL) volatile
    {
        uint32_t curr = ALLOW;

        ALLOWGETKEY = curr & (1u << 3u);
        ALLOWSETKEY = curr & (1u << 2u);
        ALLOWSTART = curr & (1u << 1u);
        ALLOWENROLL = curr & (1u << 0u);
    }

    /**
     * Set KEYINPUT's KEYIN field.
     *
     * Key input data
     */
    inline void set_KEYINPUT_KEYIN(uint32_t value) volatile
    {
        uint32_t curr = KEYINPUT;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        KEYINPUT = curr;
    }

    /**
     * Set CODEINPUT's CODEIN field.
     *
     * AC/KC input data
     */
    inline void set_CODEINPUT_CODEIN(uint32_t value) volatile
    {
        uint32_t curr = CODEINPUT;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        CODEINPUT = curr;
    }

    /**
     * Get CODEOUTPUT's CODEOUT field.
     *
     * AC/KC output data
     */
    inline uint32_t get_CODEOUTPUT_CODEOUT() volatile
    {
        return (CODEOUTPUT >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get KEYOUTINDEX's KEYOUTIDX field.
     *
     * Output Key index
     */
    inline uint32_t get_KEYOUTINDEX_KEYOUTIDX() volatile
    {
        return (KEYOUTINDEX >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get KEYOUTPUT's KEYOUT field.
     *
     * Key output data from a Get Key operation
     */
    inline uint32_t get_KEYOUTPUT_KEYOUT() volatile
    {
        return (KEYOUTPUT >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get IFSTAT's ERROR bit.
     *
     * APB error has occurred
     */
    inline bool get_IFSTAT_ERROR() volatile
    {
        return IFSTAT & (1u << 0u);
    }

    /**
     * Set IFSTAT's ERROR bit.
     *
     * APB error has occurred
     */
    inline void set_IFSTAT_ERROR() volatile
    {
        IFSTAT |= 1u << 0u;
    }

    /**
     * Clear IFSTAT's ERROR bit.
     *
     * APB error has occurred
     */
    inline void clear_IFSTAT_ERROR() volatile
    {
        IFSTAT &= ~(1u << 0u);
    }

    /**
     * Toggle IFSTAT's ERROR bit.
     *
     * APB error has occurred
     */
    inline void toggle_IFSTAT_ERROR() volatile
    {
        IFSTAT ^= 1u << 0u;
    }

    /**
     * Get VERSION's VERSION field.
     *
     * Version of PUF
     */
    inline uint32_t get_VERSION_VERSION() volatile
    {
        return (VERSION >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get INTEN's CODEOUTAVAILEN bit.
     *
     * PUF Code Output Register Interrupt Enable
     */
    inline bool get_INTEN_CODEOUTAVAILEN() volatile
    {
        return INTEN & (1u << 7u);
    }

    /**
     * Set INTEN's CODEOUTAVAILEN bit.
     *
     * PUF Code Output Register Interrupt Enable
     */
    inline void set_INTEN_CODEOUTAVAILEN() volatile
    {
        INTEN |= 1u << 7u;
    }

    /**
     * Clear INTEN's CODEOUTAVAILEN bit.
     *
     * PUF Code Output Register Interrupt Enable
     */
    inline void clear_INTEN_CODEOUTAVAILEN() volatile
    {
        INTEN &= ~(1u << 7u);
    }

    /**
     * Toggle INTEN's CODEOUTAVAILEN bit.
     *
     * PUF Code Output Register Interrupt Enable
     */
    inline void toggle_INTEN_CODEOUTAVAILEN() volatile
    {
        INTEN ^= 1u << 7u;
    }

    /**
     * Get INTEN's CODEINREQEN bit.
     *
     * PUF Code Input Register Interrupt Enable
     */
    inline bool get_INTEN_CODEINREQEN() volatile
    {
        return INTEN & (1u << 6u);
    }

    /**
     * Set INTEN's CODEINREQEN bit.
     *
     * PUF Code Input Register Interrupt Enable
     */
    inline void set_INTEN_CODEINREQEN() volatile
    {
        INTEN |= 1u << 6u;
    }

    /**
     * Clear INTEN's CODEINREQEN bit.
     *
     * PUF Code Input Register Interrupt Enable
     */
    inline void clear_INTEN_CODEINREQEN() volatile
    {
        INTEN &= ~(1u << 6u);
    }

    /**
     * Toggle INTEN's CODEINREQEN bit.
     *
     * PUF Code Input Register Interrupt Enable
     */
    inline void toggle_INTEN_CODEINREQEN() volatile
    {
        INTEN ^= 1u << 6u;
    }

    /**
     * Get INTEN's KEYOUTAVAILEN bit.
     *
     * PUF Key Output Register Interrupt Enable
     */
    inline bool get_INTEN_KEYOUTAVAILEN() volatile
    {
        return INTEN & (1u << 5u);
    }

    /**
     * Set INTEN's KEYOUTAVAILEN bit.
     *
     * PUF Key Output Register Interrupt Enable
     */
    inline void set_INTEN_KEYOUTAVAILEN() volatile
    {
        INTEN |= 1u << 5u;
    }

    /**
     * Clear INTEN's KEYOUTAVAILEN bit.
     *
     * PUF Key Output Register Interrupt Enable
     */
    inline void clear_INTEN_KEYOUTAVAILEN() volatile
    {
        INTEN &= ~(1u << 5u);
    }

    /**
     * Toggle INTEN's KEYOUTAVAILEN bit.
     *
     * PUF Key Output Register Interrupt Enable
     */
    inline void toggle_INTEN_KEYOUTAVAILEN() volatile
    {
        INTEN ^= 1u << 5u;
    }

    /**
     * Get INTEN's KEYINREQEN bit.
     *
     * PUF Key Input Register Interrupt Enable
     */
    inline bool get_INTEN_KEYINREQEN() volatile
    {
        return INTEN & (1u << 4u);
    }

    /**
     * Set INTEN's KEYINREQEN bit.
     *
     * PUF Key Input Register Interrupt Enable
     */
    inline void set_INTEN_KEYINREQEN() volatile
    {
        INTEN |= 1u << 4u;
    }

    /**
     * Clear INTEN's KEYINREQEN bit.
     *
     * PUF Key Input Register Interrupt Enable
     */
    inline void clear_INTEN_KEYINREQEN() volatile
    {
        INTEN &= ~(1u << 4u);
    }

    /**
     * Toggle INTEN's KEYINREQEN bit.
     *
     * PUF Key Input Register Interrupt Enable
     */
    inline void toggle_INTEN_KEYINREQEN() volatile
    {
        INTEN ^= 1u << 4u;
    }

    /**
     * Get INTEN's ERROREN bit.
     *
     * PUF Error Interrupt Enable
     */
    inline bool get_INTEN_ERROREN() volatile
    {
        return INTEN & (1u << 2u);
    }

    /**
     * Set INTEN's ERROREN bit.
     *
     * PUF Error Interrupt Enable
     */
    inline void set_INTEN_ERROREN() volatile
    {
        INTEN |= 1u << 2u;
    }

    /**
     * Clear INTEN's ERROREN bit.
     *
     * PUF Error Interrupt Enable
     */
    inline void clear_INTEN_ERROREN() volatile
    {
        INTEN &= ~(1u << 2u);
    }

    /**
     * Toggle INTEN's ERROREN bit.
     *
     * PUF Error Interrupt Enable
     */
    inline void toggle_INTEN_ERROREN() volatile
    {
        INTEN ^= 1u << 2u;
    }

    /**
     * Get INTEN's SUCCESSEN bit.
     *
     * PUF_OK Interrupt Enable
     */
    inline bool get_INTEN_SUCCESSEN() volatile
    {
        return INTEN & (1u << 1u);
    }

    /**
     * Set INTEN's SUCCESSEN bit.
     *
     * PUF_OK Interrupt Enable
     */
    inline void set_INTEN_SUCCESSEN() volatile
    {
        INTEN |= 1u << 1u;
    }

    /**
     * Clear INTEN's SUCCESSEN bit.
     *
     * PUF_OK Interrupt Enable
     */
    inline void clear_INTEN_SUCCESSEN() volatile
    {
        INTEN &= ~(1u << 1u);
    }

    /**
     * Toggle INTEN's SUCCESSEN bit.
     *
     * PUF_OK Interrupt Enable
     */
    inline void toggle_INTEN_SUCCESSEN() volatile
    {
        INTEN ^= 1u << 1u;
    }

    /**
     * Get INTEN's READYEN bit.
     *
     * PUF Ready Interrupt Enable
     */
    inline bool get_INTEN_READYEN() volatile
    {
        return INTEN & (1u << 0u);
    }

    /**
     * Set INTEN's READYEN bit.
     *
     * PUF Ready Interrupt Enable
     */
    inline void set_INTEN_READYEN() volatile
    {
        INTEN |= 1u << 0u;
    }

    /**
     * Clear INTEN's READYEN bit.
     *
     * PUF Ready Interrupt Enable
     */
    inline void clear_INTEN_READYEN() volatile
    {
        INTEN &= ~(1u << 0u);
    }

    /**
     * Toggle INTEN's READYEN bit.
     *
     * PUF Ready Interrupt Enable
     */
    inline void toggle_INTEN_READYEN() volatile
    {
        INTEN ^= 1u << 0u;
    }

    /**
     * Get all of INTEN's bit fields.
     *
     * (read-write) PUF Interrupt Enable
     */
    inline void get_INTEN(bool &CODEOUTAVAILEN, bool &CODEINREQEN,
                          bool &KEYOUTAVAILEN, bool &KEYINREQEN, bool &ERROREN,
                          bool &SUCCESSEN, bool &READYEN) volatile
    {
        uint32_t curr = INTEN;

        CODEOUTAVAILEN = curr & (1u << 7u);
        CODEINREQEN = curr & (1u << 6u);
        KEYOUTAVAILEN = curr & (1u << 5u);
        KEYINREQEN = curr & (1u << 4u);
        ERROREN = curr & (1u << 2u);
        SUCCESSEN = curr & (1u << 1u);
        READYEN = curr & (1u << 0u);
    }

    /**
     * Set all of INTEN's bit fields.
     *
     * (read-write) PUF Interrupt Enable
     */
    inline void set_INTEN(bool CODEOUTAVAILEN, bool CODEINREQEN,
                          bool KEYOUTAVAILEN, bool KEYINREQEN, bool ERROREN,
                          bool SUCCESSEN, bool READYEN) volatile
    {
        uint32_t curr = INTEN;

        curr &= ~(0b1u << 7u);
        curr |= (CODEOUTAVAILEN & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CODEINREQEN & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (KEYOUTAVAILEN & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (KEYINREQEN & 0b1u) << 4u;
        curr &= ~(0b1u << 2u);
        curr |= (ERROREN & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (SUCCESSEN & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (READYEN & 0b1u) << 0u;

        INTEN = curr;
    }

    /**
     * Get INTSTAT's CODEOUTAVAIL bit.
     *
     * PUF Code Output Register Interrupt Status
     */
    inline bool get_INTSTAT_CODEOUTAVAIL() volatile
    {
        return INTSTAT & (1u << 7u);
    }

    /**
     * Get INTSTAT's CODEINREQ bit.
     *
     * PUF Code Input Register Interrupt Status
     */
    inline bool get_INTSTAT_CODEINREQ() volatile
    {
        return INTSTAT & (1u << 6u);
    }

    /**
     * Get INTSTAT's KEYOUTAVAIL bit.
     *
     * PUF Key Output Register Interrupt Status
     */
    inline bool get_INTSTAT_KEYOUTAVAIL() volatile
    {
        return INTSTAT & (1u << 5u);
    }

    /**
     * Get INTSTAT's KEYINREQ bit.
     *
     * PUF Key Input Register Interrupt Status
     */
    inline bool get_INTSTAT_KEYINREQ() volatile
    {
        return INTSTAT & (1u << 4u);
    }

    /**
     * Get INTSTAT's ERROR bit.
     *
     * PUF_ERROR Interrupt Status
     */
    inline bool get_INTSTAT_ERROR() volatile
    {
        return INTSTAT & (1u << 2u);
    }

    /**
     * Get INTSTAT's SUCCESS bit.
     *
     * PUF_OK Interrupt Status
     */
    inline bool get_INTSTAT_SUCCESS() volatile
    {
        return INTSTAT & (1u << 1u);
    }

    /**
     * Get INTSTAT's READY bit.
     *
     * PUF_FINISH Interrupt Status
     */
    inline bool get_INTSTAT_READY() volatile
    {
        return INTSTAT & (1u << 0u);
    }

    /**
     * Set INTSTAT's READY bit.
     *
     * PUF_FINISH Interrupt Status
     */
    inline void set_INTSTAT_READY() volatile
    {
        INTSTAT |= 1u << 0u;
    }

    /**
     * Clear INTSTAT's READY bit.
     *
     * PUF_FINISH Interrupt Status
     */
    inline void clear_INTSTAT_READY() volatile
    {
        INTSTAT &= ~(1u << 0u);
    }

    /**
     * Toggle INTSTAT's READY bit.
     *
     * PUF_FINISH Interrupt Status
     */
    inline void toggle_INTSTAT_READY() volatile
    {
        INTSTAT ^= 1u << 0u;
    }

    /**
     * Get all of INTSTAT's bit fields.
     *
     * (read-write) PUF Interrupt Status
     */
    inline void get_INTSTAT(bool &CODEOUTAVAIL, bool &CODEINREQ,
                            bool &KEYOUTAVAIL, bool &KEYINREQ, bool &ERROR,
                            bool &SUCCESS, bool &READY) volatile
    {
        uint32_t curr = INTSTAT;

        CODEOUTAVAIL = curr & (1u << 7u);
        CODEINREQ = curr & (1u << 6u);
        KEYOUTAVAIL = curr & (1u << 5u);
        KEYINREQ = curr & (1u << 4u);
        ERROR = curr & (1u << 2u);
        SUCCESS = curr & (1u << 1u);
        READY = curr & (1u << 0u);
    }

    /**
     * Get PWRCTRL's RAM_PSW field.
     *
     * PUF RAM power switches
     */
    inline uint8_t get_PWRCTRL_RAM_PSW() volatile
    {
        return (PWRCTRL >> 4u) & 0b1111u;
    }

    /**
     * Set PWRCTRL's RAM_PSW field.
     *
     * PUF RAM power switches
     */
    inline void set_PWRCTRL_RAM_PSW(uint8_t value) volatile
    {
        uint32_t curr = PWRCTRL;

        curr &= ~(0b1111u << 4u);
        curr |= (value & 0b1111u) << 4u;

        PWRCTRL = curr;
    }

    /**
     * Get PWRCTRL's RAM_INITN bit.
     *
     * RAM initialization
     */
    inline bool get_PWRCTRL_RAM_INITN() volatile
    {
        return PWRCTRL & (1u << 3u);
    }

    /**
     * Set PWRCTRL's RAM_INITN bit.
     *
     * RAM initialization
     */
    inline void set_PWRCTRL_RAM_INITN() volatile
    {
        PWRCTRL |= 1u << 3u;
    }

    /**
     * Clear PWRCTRL's RAM_INITN bit.
     *
     * RAM initialization
     */
    inline void clear_PWRCTRL_RAM_INITN() volatile
    {
        PWRCTRL &= ~(1u << 3u);
    }

    /**
     * Toggle PWRCTRL's RAM_INITN bit.
     *
     * RAM initialization
     */
    inline void toggle_PWRCTRL_RAM_INITN() volatile
    {
        PWRCTRL ^= 1u << 3u;
    }

    /**
     * Get PWRCTRL's CK_DIS bit.
     *
     * Clock disable
     */
    inline bool get_PWRCTRL_CK_DIS() volatile
    {
        return PWRCTRL & (1u << 2u);
    }

    /**
     * Set PWRCTRL's CK_DIS bit.
     *
     * Clock disable
     */
    inline void set_PWRCTRL_CK_DIS() volatile
    {
        PWRCTRL |= 1u << 2u;
    }

    /**
     * Clear PWRCTRL's CK_DIS bit.
     *
     * Clock disable
     */
    inline void clear_PWRCTRL_CK_DIS() volatile
    {
        PWRCTRL &= ~(1u << 2u);
    }

    /**
     * Toggle PWRCTRL's CK_DIS bit.
     *
     * Clock disable
     */
    inline void toggle_PWRCTRL_CK_DIS() volatile
    {
        PWRCTRL ^= 1u << 2u;
    }

    /**
     * Get PWRCTRL's RAM_ON bit.
     *
     * PUF RAM on
     */
    inline bool get_PWRCTRL_RAM_ON() volatile
    {
        return PWRCTRL & (1u << 0u);
    }

    /**
     * Set PWRCTRL's RAM_ON bit.
     *
     * PUF RAM on
     */
    inline void set_PWRCTRL_RAM_ON() volatile
    {
        PWRCTRL |= 1u << 0u;
    }

    /**
     * Clear PWRCTRL's RAM_ON bit.
     *
     * PUF RAM on
     */
    inline void clear_PWRCTRL_RAM_ON() volatile
    {
        PWRCTRL &= ~(1u << 0u);
    }

    /**
     * Toggle PWRCTRL's RAM_ON bit.
     *
     * PUF RAM on
     */
    inline void toggle_PWRCTRL_RAM_ON() volatile
    {
        PWRCTRL ^= 1u << 0u;
    }

    /**
     * Get all of PWRCTRL's bit fields.
     *
     * (read-write) PUF Power Control Of RAM
     */
    inline void get_PWRCTRL(uint8_t &RAM_PSW, bool &RAM_INITN, bool &CK_DIS,
                            bool &RAM_ON) volatile
    {
        uint32_t curr = PWRCTRL;

        RAM_PSW = (curr >> 4u) & 0b1111u;
        RAM_INITN = curr & (1u << 3u);
        CK_DIS = curr & (1u << 2u);
        RAM_ON = curr & (1u << 0u);
    }

    /**
     * Set all of PWRCTRL's bit fields.
     *
     * (read-write) PUF Power Control Of RAM
     */
    inline void set_PWRCTRL(uint8_t RAM_PSW, bool RAM_INITN, bool CK_DIS,
                            bool RAM_ON) volatile
    {
        uint32_t curr = PWRCTRL;

        curr &= ~(0b1111u << 4u);
        curr |= (RAM_PSW & 0b1111u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (RAM_INITN & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CK_DIS & 0b1u) << 2u;
        curr &= ~(0b1u << 0u);
        curr |= (RAM_ON & 0b1u) << 0u;

        PWRCTRL = curr;
    }

    /**
     * Get CFG's PUF_BLOCK_ENROLL bit.
     *
     * PUF Block Enroll Disable
     */
    inline bool get_CFG_PUF_BLOCK_ENROLL() volatile
    {
        return CFG & (1u << 1u);
    }

    /**
     * Set CFG's PUF_BLOCK_ENROLL bit.
     *
     * PUF Block Enroll Disable
     */
    inline void set_CFG_PUF_BLOCK_ENROLL() volatile
    {
        CFG |= 1u << 1u;
    }

    /**
     * Clear CFG's PUF_BLOCK_ENROLL bit.
     *
     * PUF Block Enroll Disable
     */
    inline void clear_CFG_PUF_BLOCK_ENROLL() volatile
    {
        CFG &= ~(1u << 1u);
    }

    /**
     * Toggle CFG's PUF_BLOCK_ENROLL bit.
     *
     * PUF Block Enroll Disable
     */
    inline void toggle_CFG_PUF_BLOCK_ENROLL() volatile
    {
        CFG ^= 1u << 1u;
    }

    /**
     * Get CFG's PUF_BLOCK_SET_KEY bit.
     *
     * PUF Block Set Key Disable
     */
    inline bool get_CFG_PUF_BLOCK_SET_KEY() volatile
    {
        return CFG & (1u << 0u);
    }

    /**
     * Set CFG's PUF_BLOCK_SET_KEY bit.
     *
     * PUF Block Set Key Disable
     */
    inline void set_CFG_PUF_BLOCK_SET_KEY() volatile
    {
        CFG |= 1u << 0u;
    }

    /**
     * Clear CFG's PUF_BLOCK_SET_KEY bit.
     *
     * PUF Block Set Key Disable
     */
    inline void clear_CFG_PUF_BLOCK_SET_KEY() volatile
    {
        CFG &= ~(1u << 0u);
    }

    /**
     * Toggle CFG's PUF_BLOCK_SET_KEY bit.
     *
     * PUF Block Set Key Disable
     */
    inline void toggle_CFG_PUF_BLOCK_SET_KEY() volatile
    {
        CFG ^= 1u << 0u;
    }

    /**
     * Get all of CFG's bit fields.
     *
     * (read-write) PUF Configuration Register
     */
    inline void get_CFG(bool &PUF_BLOCK_ENROLL,
                        bool &PUF_BLOCK_SET_KEY) volatile
    {
        uint32_t curr = CFG;

        PUF_BLOCK_ENROLL = curr & (1u << 1u);
        PUF_BLOCK_SET_KEY = curr & (1u << 0u);
    }

    /**
     * Set all of CFG's bit fields.
     *
     * (read-write) PUF Configuration Register
     */
    inline void set_CFG(bool PUF_BLOCK_ENROLL, bool PUF_BLOCK_SET_KEY) volatile
    {
        uint32_t curr = CFG;

        curr &= ~(0b1u << 1u);
        curr |= (PUF_BLOCK_ENROLL & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (PUF_BLOCK_SET_KEY & 0b1u) << 0u;

        CFG = curr;
    }

    /**
     * Get KEYLOCK's LOCK1 field.
     *
     * Lock Block 1
     */
    inline KEY_MANAGER__PUF_KEYLOCK_LOCK1 get_KEYLOCK_LOCK1() volatile
    {
        return KEY_MANAGER__PUF_KEYLOCK_LOCK1((KEYLOCK >> 2u) & 0b11u);
    }

    /**
     * Set KEYLOCK's LOCK1 field.
     *
     * Lock Block 1
     */
    inline void set_KEYLOCK_LOCK1(
        KEY_MANAGER__PUF_KEYLOCK_LOCK1 value) volatile
    {
        uint32_t curr = KEYLOCK;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        KEYLOCK = curr;
    }

    /**
     * Get KEYLOCK's LOCK0 field.
     *
     * Lock Block 0
     */
    inline KEY_MANAGER__PUF_KEYLOCK_LOCK0 get_KEYLOCK_LOCK0() volatile
    {
        return KEY_MANAGER__PUF_KEYLOCK_LOCK0((KEYLOCK >> 0u) & 0b11u);
    }

    /**
     * Set KEYLOCK's LOCK0 field.
     *
     * Lock Block 0
     */
    inline void set_KEYLOCK_LOCK0(
        KEY_MANAGER__PUF_KEYLOCK_LOCK0 value) volatile
    {
        uint32_t curr = KEYLOCK;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        KEYLOCK = curr;
    }

    /**
     * Get all of KEYLOCK's bit fields.
     *
     * (read-write) PUF Key Manager Lock
     */
    inline void get_KEYLOCK(KEY_MANAGER__PUF_KEYLOCK_LOCK1 &LOCK1,
                            KEY_MANAGER__PUF_KEYLOCK_LOCK0 &LOCK0) volatile
    {
        uint32_t curr = KEYLOCK;

        LOCK1 = KEY_MANAGER__PUF_KEYLOCK_LOCK1((curr >> 2u) & 0b11u);
        LOCK0 = KEY_MANAGER__PUF_KEYLOCK_LOCK0((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of KEYLOCK's bit fields.
     *
     * (read-write) PUF Key Manager Lock
     */
    inline void set_KEYLOCK(KEY_MANAGER__PUF_KEYLOCK_LOCK1 LOCK1,
                            KEY_MANAGER__PUF_KEYLOCK_LOCK0 LOCK0) volatile
    {
        uint32_t curr = KEYLOCK;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(LOCK1) & 0b11u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(LOCK0) & 0b11u) << 0u;

        KEYLOCK = curr;
    }

    /**
     * Get KEYENABLE's ENABLE1 field.
     *
     * Enable Block 1
     */
    inline KEY_MANAGER__PUF_KEYENABLE_ENABLE1 get_KEYENABLE_ENABLE1() volatile
    {
        return KEY_MANAGER__PUF_KEYENABLE_ENABLE1((KEYENABLE >> 2u) & 0b11u);
    }

    /**
     * Set KEYENABLE's ENABLE1 field.
     *
     * Enable Block 1
     */
    inline void set_KEYENABLE_ENABLE1(
        KEY_MANAGER__PUF_KEYENABLE_ENABLE1 value) volatile
    {
        uint32_t curr = KEYENABLE;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        KEYENABLE = curr;
    }

    /**
     * Get KEYENABLE's ENABLE0 field.
     *
     * Enable Block 0
     */
    inline KEY_MANAGER__PUF_KEYENABLE_ENABLE0 get_KEYENABLE_ENABLE0() volatile
    {
        return KEY_MANAGER__PUF_KEYENABLE_ENABLE0((KEYENABLE >> 0u) & 0b11u);
    }

    /**
     * Set KEYENABLE's ENABLE0 field.
     *
     * Enable Block 0
     */
    inline void set_KEYENABLE_ENABLE0(
        KEY_MANAGER__PUF_KEYENABLE_ENABLE0 value) volatile
    {
        uint32_t curr = KEYENABLE;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        KEYENABLE = curr;
    }

    /**
     * Get all of KEYENABLE's bit fields.
     *
     * (read-write) PUF Key Manager Enable
     */
    inline void get_KEYENABLE(
        KEY_MANAGER__PUF_KEYENABLE_ENABLE1 &ENABLE1,
        KEY_MANAGER__PUF_KEYENABLE_ENABLE0 &ENABLE0) volatile
    {
        uint32_t curr = KEYENABLE;

        ENABLE1 = KEY_MANAGER__PUF_KEYENABLE_ENABLE1((curr >> 2u) & 0b11u);
        ENABLE0 = KEY_MANAGER__PUF_KEYENABLE_ENABLE0((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of KEYENABLE's bit fields.
     *
     * (read-write) PUF Key Manager Enable
     */
    inline void set_KEYENABLE(
        KEY_MANAGER__PUF_KEYENABLE_ENABLE1 ENABLE1,
        KEY_MANAGER__PUF_KEYENABLE_ENABLE0 ENABLE0) volatile
    {
        uint32_t curr = KEYENABLE;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(ENABLE1) & 0b11u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(ENABLE0) & 0b11u) << 0u;

        KEYENABLE = curr;
    }

    /**
     * Get KEYRESET's RESET1 field.
     *
     * Reset Block 1
     */
    inline KEY_MANAGER__PUF_KEYRESET_RESET1 get_KEYRESET_RESET1() volatile
    {
        return KEY_MANAGER__PUF_KEYRESET_RESET1((KEYRESET >> 2u) & 0b11u);
    }

    /**
     * Set KEYRESET's RESET1 field.
     *
     * Reset Block 1
     */
    inline void set_KEYRESET_RESET1(
        KEY_MANAGER__PUF_KEYRESET_RESET1 value) volatile
    {
        uint32_t curr = KEYRESET;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        KEYRESET = curr;
    }

    /**
     * Get KEYRESET's RESET0 field.
     *
     * Reset Block 0
     */
    inline KEY_MANAGER__PUF_KEYRESET_RESET0 get_KEYRESET_RESET0() volatile
    {
        return KEY_MANAGER__PUF_KEYRESET_RESET0((KEYRESET >> 0u) & 0b11u);
    }

    /**
     * Set KEYRESET's RESET0 field.
     *
     * Reset Block 0
     */
    inline void set_KEYRESET_RESET0(
        KEY_MANAGER__PUF_KEYRESET_RESET0 value) volatile
    {
        uint32_t curr = KEYRESET;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        KEYRESET = curr;
    }

    /**
     * Get all of KEYRESET's bit fields.
     *
     * (read-write) PUF Key Manager Reset
     */
    inline void get_KEYRESET(KEY_MANAGER__PUF_KEYRESET_RESET1 &RESET1,
                             KEY_MANAGER__PUF_KEYRESET_RESET0 &RESET0) volatile
    {
        uint32_t curr = KEYRESET;

        RESET1 = KEY_MANAGER__PUF_KEYRESET_RESET1((curr >> 2u) & 0b11u);
        RESET0 = KEY_MANAGER__PUF_KEYRESET_RESET0((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of KEYRESET's bit fields.
     *
     * (read-write) PUF Key Manager Reset
     */
    inline void set_KEYRESET(KEY_MANAGER__PUF_KEYRESET_RESET1 RESET1,
                             KEY_MANAGER__PUF_KEYRESET_RESET0 RESET0) volatile
    {
        uint32_t curr = KEYRESET;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(RESET1) & 0b11u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(RESET0) & 0b11u) << 0u;

        KEYRESET = curr;
    }

    /**
     * Get IDXBLK's IDXBLK15 field.
     *
     * idxblk15
     */
    inline uint8_t get_IDXBLK_IDXBLK15() volatile
    {
        return (IDXBLK >> 30u) & 0b11u;
    }

    /**
     * Set IDXBLK's IDXBLK15 field.
     *
     * idxblk15
     */
    inline void set_IDXBLK_IDXBLK15(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK;

        curr &= ~(0b11u << 30u);
        curr |= (value & 0b11u) << 30u;

        IDXBLK = curr;
    }

    /**
     * Get IDXBLK's IDXBLK14 field.
     *
     * idxblk14
     */
    inline uint8_t get_IDXBLK_IDXBLK14() volatile
    {
        return (IDXBLK >> 28u) & 0b11u;
    }

    /**
     * Set IDXBLK's IDXBLK14 field.
     *
     * idxblk14
     */
    inline void set_IDXBLK_IDXBLK14(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK;

        curr &= ~(0b11u << 28u);
        curr |= (value & 0b11u) << 28u;

        IDXBLK = curr;
    }

    /**
     * Get IDXBLK's IDXBLK13 field.
     *
     * idxblk13
     */
    inline uint8_t get_IDXBLK_IDXBLK13() volatile
    {
        return (IDXBLK >> 26u) & 0b11u;
    }

    /**
     * Set IDXBLK's IDXBLK13 field.
     *
     * idxblk13
     */
    inline void set_IDXBLK_IDXBLK13(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK;

        curr &= ~(0b11u << 26u);
        curr |= (value & 0b11u) << 26u;

        IDXBLK = curr;
    }

    /**
     * Get IDXBLK's IDXBLK12 field.
     *
     * idxblk12
     */
    inline uint8_t get_IDXBLK_IDXBLK12() volatile
    {
        return (IDXBLK >> 24u) & 0b11u;
    }

    /**
     * Set IDXBLK's IDXBLK12 field.
     *
     * idxblk12
     */
    inline void set_IDXBLK_IDXBLK12(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK;

        curr &= ~(0b11u << 24u);
        curr |= (value & 0b11u) << 24u;

        IDXBLK = curr;
    }

    /**
     * Get IDXBLK's IDXBLK11 field.
     *
     * idxblk11
     */
    inline uint8_t get_IDXBLK_IDXBLK11() volatile
    {
        return (IDXBLK >> 22u) & 0b11u;
    }

    /**
     * Set IDXBLK's IDXBLK11 field.
     *
     * idxblk11
     */
    inline void set_IDXBLK_IDXBLK11(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK;

        curr &= ~(0b11u << 22u);
        curr |= (value & 0b11u) << 22u;

        IDXBLK = curr;
    }

    /**
     * Get IDXBLK's IDXBLK10 field.
     *
     * idxblk10
     */
    inline uint8_t get_IDXBLK_IDXBLK10() volatile
    {
        return (IDXBLK >> 20u) & 0b11u;
    }

    /**
     * Set IDXBLK's IDXBLK10 field.
     *
     * idxblk10
     */
    inline void set_IDXBLK_IDXBLK10(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK;

        curr &= ~(0b11u << 20u);
        curr |= (value & 0b11u) << 20u;

        IDXBLK = curr;
    }

    /**
     * Get IDXBLK's IDXBLK9 field.
     *
     * idxblk9
     */
    inline uint8_t get_IDXBLK_IDXBLK9() volatile
    {
        return (IDXBLK >> 18u) & 0b11u;
    }

    /**
     * Set IDXBLK's IDXBLK9 field.
     *
     * idxblk9
     */
    inline void set_IDXBLK_IDXBLK9(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK;

        curr &= ~(0b11u << 18u);
        curr |= (value & 0b11u) << 18u;

        IDXBLK = curr;
    }

    /**
     * Get IDXBLK's IDXBLK8 field.
     *
     * idxblk8
     */
    inline uint8_t get_IDXBLK_IDXBLK8() volatile
    {
        return (IDXBLK >> 16u) & 0b11u;
    }

    /**
     * Set IDXBLK's IDXBLK8 field.
     *
     * idxblk8
     */
    inline void set_IDXBLK_IDXBLK8(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK;

        curr &= ~(0b11u << 16u);
        curr |= (value & 0b11u) << 16u;

        IDXBLK = curr;
    }

    /**
     * Get IDXBLK's IDXBLK7 field.
     *
     * idxblk7
     */
    inline uint8_t get_IDXBLK_IDXBLK7() volatile
    {
        return (IDXBLK >> 14u) & 0b11u;
    }

    /**
     * Set IDXBLK's IDXBLK7 field.
     *
     * idxblk7
     */
    inline void set_IDXBLK_IDXBLK7(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK;

        curr &= ~(0b11u << 14u);
        curr |= (value & 0b11u) << 14u;

        IDXBLK = curr;
    }

    /**
     * Get IDXBLK's IDXBLK6 field.
     *
     * idxblk6
     */
    inline uint8_t get_IDXBLK_IDXBLK6() volatile
    {
        return (IDXBLK >> 12u) & 0b11u;
    }

    /**
     * Set IDXBLK's IDXBLK6 field.
     *
     * idxblk6
     */
    inline void set_IDXBLK_IDXBLK6(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK;

        curr &= ~(0b11u << 12u);
        curr |= (value & 0b11u) << 12u;

        IDXBLK = curr;
    }

    /**
     * Get IDXBLK's IDXBLK5 field.
     *
     * idxblk5
     */
    inline uint8_t get_IDXBLK_IDXBLK5() volatile
    {
        return (IDXBLK >> 10u) & 0b11u;
    }

    /**
     * Set IDXBLK's IDXBLK5 field.
     *
     * idxblk5
     */
    inline void set_IDXBLK_IDXBLK5(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK;

        curr &= ~(0b11u << 10u);
        curr |= (value & 0b11u) << 10u;

        IDXBLK = curr;
    }

    /**
     * Get IDXBLK's IDXBLK4 field.
     *
     * idxblk4
     */
    inline uint8_t get_IDXBLK_IDXBLK4() volatile
    {
        return (IDXBLK >> 8u) & 0b11u;
    }

    /**
     * Set IDXBLK's IDXBLK4 field.
     *
     * idxblk4
     */
    inline void set_IDXBLK_IDXBLK4(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK;

        curr &= ~(0b11u << 8u);
        curr |= (value & 0b11u) << 8u;

        IDXBLK = curr;
    }

    /**
     * Get IDXBLK's IDXBLK3 field.
     *
     * idxblk3
     */
    inline uint8_t get_IDXBLK_IDXBLK3() volatile
    {
        return (IDXBLK >> 6u) & 0b11u;
    }

    /**
     * Set IDXBLK's IDXBLK3 field.
     *
     * idxblk3
     */
    inline void set_IDXBLK_IDXBLK3(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK;

        curr &= ~(0b11u << 6u);
        curr |= (value & 0b11u) << 6u;

        IDXBLK = curr;
    }

    /**
     * Get IDXBLK's IDXBLK2 field.
     *
     * idxblk2
     */
    inline uint8_t get_IDXBLK_IDXBLK2() volatile
    {
        return (IDXBLK >> 4u) & 0b11u;
    }

    /**
     * Set IDXBLK's IDXBLK2 field.
     *
     * idxblk2
     */
    inline void set_IDXBLK_IDXBLK2(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK;

        curr &= ~(0b11u << 4u);
        curr |= (value & 0b11u) << 4u;

        IDXBLK = curr;
    }

    /**
     * Get IDXBLK's IDXBLK1 field.
     *
     * idxblk1
     */
    inline uint8_t get_IDXBLK_IDXBLK1() volatile
    {
        return (IDXBLK >> 2u) & 0b11u;
    }

    /**
     * Set IDXBLK's IDXBLK1 field.
     *
     * idxblk1
     */
    inline void set_IDXBLK_IDXBLK1(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK;

        curr &= ~(0b11u << 2u);
        curr |= (value & 0b11u) << 2u;

        IDXBLK = curr;
    }

    /**
     * Get IDXBLK's IDXBLK0 field.
     *
     * idxblk0
     */
    inline uint8_t get_IDXBLK_IDXBLK0() volatile
    {
        return (IDXBLK >> 0u) & 0b11u;
    }

    /**
     * Set IDXBLK's IDXBLK0 field.
     *
     * idxblk0
     */
    inline void set_IDXBLK_IDXBLK0(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK;

        curr &= ~(0b11u << 0u);
        curr |= (value & 0b11u) << 0u;

        IDXBLK = curr;
    }

    /**
     * Get all of IDXBLK's bit fields.
     *
     * (read-write) PUF Index Block Key Output
     */
    inline void get_IDXBLK(uint8_t &IDXBLK15, uint8_t &IDXBLK14,
                           uint8_t &IDXBLK13, uint8_t &IDXBLK12,
                           uint8_t &IDXBLK11, uint8_t &IDXBLK10,
                           uint8_t &IDXBLK9, uint8_t &IDXBLK8,
                           uint8_t &IDXBLK7, uint8_t &IDXBLK6,
                           uint8_t &IDXBLK5, uint8_t &IDXBLK4,
                           uint8_t &IDXBLK3, uint8_t &IDXBLK2,
                           uint8_t &IDXBLK1, uint8_t &IDXBLK0) volatile
    {
        uint32_t curr = IDXBLK;

        IDXBLK15 = (curr >> 30u) & 0b11u;
        IDXBLK14 = (curr >> 28u) & 0b11u;
        IDXBLK13 = (curr >> 26u) & 0b11u;
        IDXBLK12 = (curr >> 24u) & 0b11u;
        IDXBLK11 = (curr >> 22u) & 0b11u;
        IDXBLK10 = (curr >> 20u) & 0b11u;
        IDXBLK9 = (curr >> 18u) & 0b11u;
        IDXBLK8 = (curr >> 16u) & 0b11u;
        IDXBLK7 = (curr >> 14u) & 0b11u;
        IDXBLK6 = (curr >> 12u) & 0b11u;
        IDXBLK5 = (curr >> 10u) & 0b11u;
        IDXBLK4 = (curr >> 8u) & 0b11u;
        IDXBLK3 = (curr >> 6u) & 0b11u;
        IDXBLK2 = (curr >> 4u) & 0b11u;
        IDXBLK1 = (curr >> 2u) & 0b11u;
        IDXBLK0 = (curr >> 0u) & 0b11u;
    }

    /**
     * Set all of IDXBLK's bit fields.
     *
     * (read-write) PUF Index Block Key Output
     */
    inline void set_IDXBLK(uint8_t IDXBLK15, uint8_t IDXBLK14,
                           uint8_t IDXBLK13, uint8_t IDXBLK12,
                           uint8_t IDXBLK11, uint8_t IDXBLK10, uint8_t IDXBLK9,
                           uint8_t IDXBLK8, uint8_t IDXBLK7, uint8_t IDXBLK6,
                           uint8_t IDXBLK5, uint8_t IDXBLK4, uint8_t IDXBLK3,
                           uint8_t IDXBLK2, uint8_t IDXBLK1,
                           uint8_t IDXBLK0) volatile
    {
        uint32_t curr = IDXBLK;

        curr &= ~(0b11u << 30u);
        curr |= (IDXBLK15 & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (IDXBLK14 & 0b11u) << 28u;
        curr &= ~(0b11u << 26u);
        curr |= (IDXBLK13 & 0b11u) << 26u;
        curr &= ~(0b11u << 24u);
        curr |= (IDXBLK12 & 0b11u) << 24u;
        curr &= ~(0b11u << 22u);
        curr |= (IDXBLK11 & 0b11u) << 22u;
        curr &= ~(0b11u << 20u);
        curr |= (IDXBLK10 & 0b11u) << 20u;
        curr &= ~(0b11u << 18u);
        curr |= (IDXBLK9 & 0b11u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (IDXBLK8 & 0b11u) << 16u;
        curr &= ~(0b11u << 14u);
        curr |= (IDXBLK7 & 0b11u) << 14u;
        curr &= ~(0b11u << 12u);
        curr |= (IDXBLK6 & 0b11u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (IDXBLK5 & 0b11u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (IDXBLK4 & 0b11u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (IDXBLK3 & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (IDXBLK2 & 0b11u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (IDXBLK1 & 0b11u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (IDXBLK0 & 0b11u) << 0u;

        IDXBLK = curr;
    }

    /**
     * Get IDXBLK_DP's IDXBLK_DP15 field.
     *
     * idxblk_dp15
     */
    inline uint8_t get_IDXBLK_DP_IDXBLK_DP15() volatile
    {
        return (IDXBLK_DP >> 30u) & 0b11u;
    }

    /**
     * Set IDXBLK_DP's IDXBLK_DP15 field.
     *
     * idxblk_dp15
     */
    inline void set_IDXBLK_DP_IDXBLK_DP15(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK_DP;

        curr &= ~(0b11u << 30u);
        curr |= (value & 0b11u) << 30u;

        IDXBLK_DP = curr;
    }

    /**
     * Get IDXBLK_DP's IDXBLK_DP14 field.
     *
     * idxblk_dp14
     */
    inline uint8_t get_IDXBLK_DP_IDXBLK_DP14() volatile
    {
        return (IDXBLK_DP >> 28u) & 0b11u;
    }

    /**
     * Set IDXBLK_DP's IDXBLK_DP14 field.
     *
     * idxblk_dp14
     */
    inline void set_IDXBLK_DP_IDXBLK_DP14(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK_DP;

        curr &= ~(0b11u << 28u);
        curr |= (value & 0b11u) << 28u;

        IDXBLK_DP = curr;
    }

    /**
     * Get IDXBLK_DP's IDXBLK_DP13 field.
     *
     * idxblk_dp13
     */
    inline uint8_t get_IDXBLK_DP_IDXBLK_DP13() volatile
    {
        return (IDXBLK_DP >> 26u) & 0b11u;
    }

    /**
     * Set IDXBLK_DP's IDXBLK_DP13 field.
     *
     * idxblk_dp13
     */
    inline void set_IDXBLK_DP_IDXBLK_DP13(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK_DP;

        curr &= ~(0b11u << 26u);
        curr |= (value & 0b11u) << 26u;

        IDXBLK_DP = curr;
    }

    /**
     * Get IDXBLK_DP's IDXBLK_DP12 field.
     *
     * idxblk_dp12
     */
    inline uint8_t get_IDXBLK_DP_IDXBLK_DP12() volatile
    {
        return (IDXBLK_DP >> 24u) & 0b11u;
    }

    /**
     * Set IDXBLK_DP's IDXBLK_DP12 field.
     *
     * idxblk_dp12
     */
    inline void set_IDXBLK_DP_IDXBLK_DP12(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK_DP;

        curr &= ~(0b11u << 24u);
        curr |= (value & 0b11u) << 24u;

        IDXBLK_DP = curr;
    }

    /**
     * Get IDXBLK_DP's IDXBLK_DP11 field.
     *
     * idxblk_dp11
     */
    inline uint8_t get_IDXBLK_DP_IDXBLK_DP11() volatile
    {
        return (IDXBLK_DP >> 22u) & 0b11u;
    }

    /**
     * Set IDXBLK_DP's IDXBLK_DP11 field.
     *
     * idxblk_dp11
     */
    inline void set_IDXBLK_DP_IDXBLK_DP11(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK_DP;

        curr &= ~(0b11u << 22u);
        curr |= (value & 0b11u) << 22u;

        IDXBLK_DP = curr;
    }

    /**
     * Get IDXBLK_DP's IDXBLK_DP10 field.
     *
     * idxblk_dp10
     */
    inline uint8_t get_IDXBLK_DP_IDXBLK_DP10() volatile
    {
        return (IDXBLK_DP >> 20u) & 0b11u;
    }

    /**
     * Set IDXBLK_DP's IDXBLK_DP10 field.
     *
     * idxblk_dp10
     */
    inline void set_IDXBLK_DP_IDXBLK_DP10(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK_DP;

        curr &= ~(0b11u << 20u);
        curr |= (value & 0b11u) << 20u;

        IDXBLK_DP = curr;
    }

    /**
     * Get IDXBLK_DP's IDXBLK_DP9 field.
     *
     * idxblk_dp9
     */
    inline uint8_t get_IDXBLK_DP_IDXBLK_DP9() volatile
    {
        return (IDXBLK_DP >> 18u) & 0b11u;
    }

    /**
     * Set IDXBLK_DP's IDXBLK_DP9 field.
     *
     * idxblk_dp9
     */
    inline void set_IDXBLK_DP_IDXBLK_DP9(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK_DP;

        curr &= ~(0b11u << 18u);
        curr |= (value & 0b11u) << 18u;

        IDXBLK_DP = curr;
    }

    /**
     * Get IDXBLK_DP's IDXBLK_DP8 field.
     *
     * idxblk_dp8
     */
    inline uint8_t get_IDXBLK_DP_IDXBLK_DP8() volatile
    {
        return (IDXBLK_DP >> 16u) & 0b11u;
    }

    /**
     * Set IDXBLK_DP's IDXBLK_DP8 field.
     *
     * idxblk_dp8
     */
    inline void set_IDXBLK_DP_IDXBLK_DP8(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK_DP;

        curr &= ~(0b11u << 16u);
        curr |= (value & 0b11u) << 16u;

        IDXBLK_DP = curr;
    }

    /**
     * Get IDXBLK_DP's IDXBLK_DP7 field.
     *
     * idxblk_dp7
     */
    inline uint8_t get_IDXBLK_DP_IDXBLK_DP7() volatile
    {
        return (IDXBLK_DP >> 14u) & 0b11u;
    }

    /**
     * Set IDXBLK_DP's IDXBLK_DP7 field.
     *
     * idxblk_dp7
     */
    inline void set_IDXBLK_DP_IDXBLK_DP7(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK_DP;

        curr &= ~(0b11u << 14u);
        curr |= (value & 0b11u) << 14u;

        IDXBLK_DP = curr;
    }

    /**
     * Get IDXBLK_DP's IDXBLK_DP6 field.
     *
     * idxblk_dp6
     */
    inline uint8_t get_IDXBLK_DP_IDXBLK_DP6() volatile
    {
        return (IDXBLK_DP >> 12u) & 0b11u;
    }

    /**
     * Set IDXBLK_DP's IDXBLK_DP6 field.
     *
     * idxblk_dp6
     */
    inline void set_IDXBLK_DP_IDXBLK_DP6(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK_DP;

        curr &= ~(0b11u << 12u);
        curr |= (value & 0b11u) << 12u;

        IDXBLK_DP = curr;
    }

    /**
     * Get IDXBLK_DP's IDXBLK_DP5 field.
     *
     * idxblk_dp5
     */
    inline uint8_t get_IDXBLK_DP_IDXBLK_DP5() volatile
    {
        return (IDXBLK_DP >> 10u) & 0b11u;
    }

    /**
     * Set IDXBLK_DP's IDXBLK_DP5 field.
     *
     * idxblk_dp5
     */
    inline void set_IDXBLK_DP_IDXBLK_DP5(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK_DP;

        curr &= ~(0b11u << 10u);
        curr |= (value & 0b11u) << 10u;

        IDXBLK_DP = curr;
    }

    /**
     * Get IDXBLK_DP's IDXBLK_DP4 field.
     *
     * idxblk_dp4
     */
    inline uint8_t get_IDXBLK_DP_IDXBLK_DP4() volatile
    {
        return (IDXBLK_DP >> 8u) & 0b11u;
    }

    /**
     * Set IDXBLK_DP's IDXBLK_DP4 field.
     *
     * idxblk_dp4
     */
    inline void set_IDXBLK_DP_IDXBLK_DP4(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK_DP;

        curr &= ~(0b11u << 8u);
        curr |= (value & 0b11u) << 8u;

        IDXBLK_DP = curr;
    }

    /**
     * Get IDXBLK_DP's IDXBLK_DP3 field.
     *
     * idxblk_dp3
     */
    inline uint8_t get_IDXBLK_DP_IDXBLK_DP3() volatile
    {
        return (IDXBLK_DP >> 6u) & 0b11u;
    }

    /**
     * Set IDXBLK_DP's IDXBLK_DP3 field.
     *
     * idxblk_dp3
     */
    inline void set_IDXBLK_DP_IDXBLK_DP3(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK_DP;

        curr &= ~(0b11u << 6u);
        curr |= (value & 0b11u) << 6u;

        IDXBLK_DP = curr;
    }

    /**
     * Get IDXBLK_DP's IDXBLK_DP2 field.
     *
     * idxblk_dp2
     */
    inline uint8_t get_IDXBLK_DP_IDXBLK_DP2() volatile
    {
        return (IDXBLK_DP >> 4u) & 0b11u;
    }

    /**
     * Set IDXBLK_DP's IDXBLK_DP2 field.
     *
     * idxblk_dp2
     */
    inline void set_IDXBLK_DP_IDXBLK_DP2(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK_DP;

        curr &= ~(0b11u << 4u);
        curr |= (value & 0b11u) << 4u;

        IDXBLK_DP = curr;
    }

    /**
     * Get IDXBLK_DP's IDXBLK_DP1 field.
     *
     * idxblk_dp1
     */
    inline uint8_t get_IDXBLK_DP_IDXBLK_DP1() volatile
    {
        return (IDXBLK_DP >> 2u) & 0b11u;
    }

    /**
     * Set IDXBLK_DP's IDXBLK_DP1 field.
     *
     * idxblk_dp1
     */
    inline void set_IDXBLK_DP_IDXBLK_DP1(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK_DP;

        curr &= ~(0b11u << 2u);
        curr |= (value & 0b11u) << 2u;

        IDXBLK_DP = curr;
    }

    /**
     * Get IDXBLK_DP's IDXBLK_DP0 field.
     *
     * idxblk_dp0
     */
    inline uint8_t get_IDXBLK_DP_IDXBLK_DP0() volatile
    {
        return (IDXBLK_DP >> 0u) & 0b11u;
    }

    /**
     * Set IDXBLK_DP's IDXBLK_DP0 field.
     *
     * idxblk_dp0
     */
    inline void set_IDXBLK_DP_IDXBLK_DP0(uint8_t value) volatile
    {
        uint32_t curr = IDXBLK_DP;

        curr &= ~(0b11u << 0u);
        curr |= (value & 0b11u) << 0u;

        IDXBLK_DP = curr;
    }

    /**
     * Get all of IDXBLK_DP's bit fields.
     *
     * (read-write) PUF Index Block Key Output
     */
    inline void get_IDXBLK_DP(uint8_t &IDXBLK_DP15, uint8_t &IDXBLK_DP14,
                              uint8_t &IDXBLK_DP13, uint8_t &IDXBLK_DP12,
                              uint8_t &IDXBLK_DP11, uint8_t &IDXBLK_DP10,
                              uint8_t &IDXBLK_DP9, uint8_t &IDXBLK_DP8,
                              uint8_t &IDXBLK_DP7, uint8_t &IDXBLK_DP6,
                              uint8_t &IDXBLK_DP5, uint8_t &IDXBLK_DP4,
                              uint8_t &IDXBLK_DP3, uint8_t &IDXBLK_DP2,
                              uint8_t &IDXBLK_DP1,
                              uint8_t &IDXBLK_DP0) volatile
    {
        uint32_t curr = IDXBLK_DP;

        IDXBLK_DP15 = (curr >> 30u) & 0b11u;
        IDXBLK_DP14 = (curr >> 28u) & 0b11u;
        IDXBLK_DP13 = (curr >> 26u) & 0b11u;
        IDXBLK_DP12 = (curr >> 24u) & 0b11u;
        IDXBLK_DP11 = (curr >> 22u) & 0b11u;
        IDXBLK_DP10 = (curr >> 20u) & 0b11u;
        IDXBLK_DP9 = (curr >> 18u) & 0b11u;
        IDXBLK_DP8 = (curr >> 16u) & 0b11u;
        IDXBLK_DP7 = (curr >> 14u) & 0b11u;
        IDXBLK_DP6 = (curr >> 12u) & 0b11u;
        IDXBLK_DP5 = (curr >> 10u) & 0b11u;
        IDXBLK_DP4 = (curr >> 8u) & 0b11u;
        IDXBLK_DP3 = (curr >> 6u) & 0b11u;
        IDXBLK_DP2 = (curr >> 4u) & 0b11u;
        IDXBLK_DP1 = (curr >> 2u) & 0b11u;
        IDXBLK_DP0 = (curr >> 0u) & 0b11u;
    }

    /**
     * Set all of IDXBLK_DP's bit fields.
     *
     * (read-write) PUF Index Block Key Output
     */
    inline void set_IDXBLK_DP(uint8_t IDXBLK_DP15, uint8_t IDXBLK_DP14,
                              uint8_t IDXBLK_DP13, uint8_t IDXBLK_DP12,
                              uint8_t IDXBLK_DP11, uint8_t IDXBLK_DP10,
                              uint8_t IDXBLK_DP9, uint8_t IDXBLK_DP8,
                              uint8_t IDXBLK_DP7, uint8_t IDXBLK_DP6,
                              uint8_t IDXBLK_DP5, uint8_t IDXBLK_DP4,
                              uint8_t IDXBLK_DP3, uint8_t IDXBLK_DP2,
                              uint8_t IDXBLK_DP1, uint8_t IDXBLK_DP0) volatile
    {
        uint32_t curr = IDXBLK_DP;

        curr &= ~(0b11u << 30u);
        curr |= (IDXBLK_DP15 & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (IDXBLK_DP14 & 0b11u) << 28u;
        curr &= ~(0b11u << 26u);
        curr |= (IDXBLK_DP13 & 0b11u) << 26u;
        curr &= ~(0b11u << 24u);
        curr |= (IDXBLK_DP12 & 0b11u) << 24u;
        curr &= ~(0b11u << 22u);
        curr |= (IDXBLK_DP11 & 0b11u) << 22u;
        curr &= ~(0b11u << 20u);
        curr |= (IDXBLK_DP10 & 0b11u) << 20u;
        curr &= ~(0b11u << 18u);
        curr |= (IDXBLK_DP9 & 0b11u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (IDXBLK_DP8 & 0b11u) << 16u;
        curr &= ~(0b11u << 14u);
        curr |= (IDXBLK_DP7 & 0b11u) << 14u;
        curr &= ~(0b11u << 12u);
        curr |= (IDXBLK_DP6 & 0b11u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (IDXBLK_DP5 & 0b11u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (IDXBLK_DP4 & 0b11u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (IDXBLK_DP3 & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (IDXBLK_DP2 & 0b11u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (IDXBLK_DP1 & 0b11u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (IDXBLK_DP0 & 0b11u) << 0u;

        IDXBLK_DP = curr;
    }

    /**
     * Get KEYMASK0's KEYMASK field.
     *
     * KEYMASK0
     */
    inline uint32_t get_KEYMASK0_KEYMASK() volatile
    {
        return (KEYMASK0 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set KEYMASK0's KEYMASK field.
     *
     * KEYMASK0
     */
    inline void set_KEYMASK0_KEYMASK(uint32_t value) volatile
    {
        uint32_t curr = KEYMASK0;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        KEYMASK0 = curr;
    }

    /**
     * Get KEYMASK1's KEYMASK field.
     *
     * KEYMASK1
     */
    inline uint32_t get_KEYMASK1_KEYMASK() volatile
    {
        return (KEYMASK1 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set KEYMASK1's KEYMASK field.
     *
     * KEYMASK1
     */
    inline void set_KEYMASK1_KEYMASK(uint32_t value) volatile
    {
        uint32_t curr = KEYMASK1;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        KEYMASK1 = curr;
    }

    /**
     * Get IDXBLK_STATUS's IDXBLK_STATUS15 field.
     *
     * idxblk_status15
     */
    inline uint8_t get_IDXBLK_STATUS_IDXBLK_STATUS15() volatile
    {
        return (IDXBLK_STATUS >> 30u) & 0b11u;
    }

    /**
     * Get IDXBLK_STATUS's IDXBLK_STATUS14 field.
     *
     * idxblk_status14
     */
    inline uint8_t get_IDXBLK_STATUS_IDXBLK_STATUS14() volatile
    {
        return (IDXBLK_STATUS >> 28u) & 0b11u;
    }

    /**
     * Get IDXBLK_STATUS's IDXBLK_STATUS13 field.
     *
     * idxblk_status13
     */
    inline uint8_t get_IDXBLK_STATUS_IDXBLK_STATUS13() volatile
    {
        return (IDXBLK_STATUS >> 26u) & 0b11u;
    }

    /**
     * Get IDXBLK_STATUS's IDXBLK_STATUS12 field.
     *
     * idxblk_status12
     */
    inline uint8_t get_IDXBLK_STATUS_IDXBLK_STATUS12() volatile
    {
        return (IDXBLK_STATUS >> 24u) & 0b11u;
    }

    /**
     * Get IDXBLK_STATUS's IDXBLK_STATUS11 field.
     *
     * idxblk_status11
     */
    inline uint8_t get_IDXBLK_STATUS_IDXBLK_STATUS11() volatile
    {
        return (IDXBLK_STATUS >> 22u) & 0b11u;
    }

    /**
     * Get IDXBLK_STATUS's IDXBLK_STATUS10 field.
     *
     * idxblk_status10
     */
    inline uint8_t get_IDXBLK_STATUS_IDXBLK_STATUS10() volatile
    {
        return (IDXBLK_STATUS >> 20u) & 0b11u;
    }

    /**
     * Get IDXBLK_STATUS's IDXBLK_STATUS9 field.
     *
     * idxblk_status9
     */
    inline uint8_t get_IDXBLK_STATUS_IDXBLK_STATUS9() volatile
    {
        return (IDXBLK_STATUS >> 18u) & 0b11u;
    }

    /**
     * Get IDXBLK_STATUS's IDXBLK_STATUS8 field.
     *
     * idxblk_status8
     */
    inline uint8_t get_IDXBLK_STATUS_IDXBLK_STATUS8() volatile
    {
        return (IDXBLK_STATUS >> 16u) & 0b11u;
    }

    /**
     * Get IDXBLK_STATUS's IDXBLK_STATUS7 field.
     *
     * idxblk_status7
     */
    inline uint8_t get_IDXBLK_STATUS_IDXBLK_STATUS7() volatile
    {
        return (IDXBLK_STATUS >> 14u) & 0b11u;
    }

    /**
     * Get IDXBLK_STATUS's IDXBLK_STATUS6 field.
     *
     * idxblk_status6
     */
    inline uint8_t get_IDXBLK_STATUS_IDXBLK_STATUS6() volatile
    {
        return (IDXBLK_STATUS >> 12u) & 0b11u;
    }

    /**
     * Get IDXBLK_STATUS's IDXBLK_STATUS5 field.
     *
     * idxblk_status5
     */
    inline uint8_t get_IDXBLK_STATUS_IDXBLK_STATUS5() volatile
    {
        return (IDXBLK_STATUS >> 10u) & 0b11u;
    }

    /**
     * Get IDXBLK_STATUS's IDXBLK_STATUS4 field.
     *
     * idxblk_status4
     */
    inline uint8_t get_IDXBLK_STATUS_IDXBLK_STATUS4() volatile
    {
        return (IDXBLK_STATUS >> 8u) & 0b11u;
    }

    /**
     * Get IDXBLK_STATUS's IDXBLK_STATUS3 field.
     *
     * idxblk_status3
     */
    inline uint8_t get_IDXBLK_STATUS_IDXBLK_STATUS3() volatile
    {
        return (IDXBLK_STATUS >> 6u) & 0b11u;
    }

    /**
     * Get IDXBLK_STATUS's IDXBLK_STATUS2 field.
     *
     * idxblk_status2
     */
    inline uint8_t get_IDXBLK_STATUS_IDXBLK_STATUS2() volatile
    {
        return (IDXBLK_STATUS >> 4u) & 0b11u;
    }

    /**
     * Get IDXBLK_STATUS's IDXBLK_STATUS1 field.
     *
     * idxblk_status1
     */
    inline uint8_t get_IDXBLK_STATUS_IDXBLK_STATUS1() volatile
    {
        return (IDXBLK_STATUS >> 2u) & 0b11u;
    }

    /**
     * Get IDXBLK_STATUS's IDXBLK_STATUS0 field.
     *
     * idxblk_status0
     */
    inline uint8_t get_IDXBLK_STATUS_IDXBLK_STATUS0() volatile
    {
        return (IDXBLK_STATUS >> 0u) & 0b11u;
    }

    /**
     * Get all of IDXBLK_STATUS's bit fields.
     *
     * (read-write) PUF Index Block Setting Status Register
     */
    inline void get_IDXBLK_STATUS(
        uint8_t &IDXBLK_STATUS15, uint8_t &IDXBLK_STATUS14,
        uint8_t &IDXBLK_STATUS13, uint8_t &IDXBLK_STATUS12,
        uint8_t &IDXBLK_STATUS11, uint8_t &IDXBLK_STATUS10,
        uint8_t &IDXBLK_STATUS9, uint8_t &IDXBLK_STATUS8,
        uint8_t &IDXBLK_STATUS7, uint8_t &IDXBLK_STATUS6,
        uint8_t &IDXBLK_STATUS5, uint8_t &IDXBLK_STATUS4,
        uint8_t &IDXBLK_STATUS3, uint8_t &IDXBLK_STATUS2,
        uint8_t &IDXBLK_STATUS1, uint8_t &IDXBLK_STATUS0) volatile
    {
        uint32_t curr = IDXBLK_STATUS;

        IDXBLK_STATUS15 = (curr >> 30u) & 0b11u;
        IDXBLK_STATUS14 = (curr >> 28u) & 0b11u;
        IDXBLK_STATUS13 = (curr >> 26u) & 0b11u;
        IDXBLK_STATUS12 = (curr >> 24u) & 0b11u;
        IDXBLK_STATUS11 = (curr >> 22u) & 0b11u;
        IDXBLK_STATUS10 = (curr >> 20u) & 0b11u;
        IDXBLK_STATUS9 = (curr >> 18u) & 0b11u;
        IDXBLK_STATUS8 = (curr >> 16u) & 0b11u;
        IDXBLK_STATUS7 = (curr >> 14u) & 0b11u;
        IDXBLK_STATUS6 = (curr >> 12u) & 0b11u;
        IDXBLK_STATUS5 = (curr >> 10u) & 0b11u;
        IDXBLK_STATUS4 = (curr >> 8u) & 0b11u;
        IDXBLK_STATUS3 = (curr >> 6u) & 0b11u;
        IDXBLK_STATUS2 = (curr >> 4u) & 0b11u;
        IDXBLK_STATUS1 = (curr >> 2u) & 0b11u;
        IDXBLK_STATUS0 = (curr >> 0u) & 0b11u;
    }

    /**
     * Get IDXBLK_SHIFT's IND_KEY1 field.
     *
     * Index of key space in block 1
     */
    inline uint8_t get_IDXBLK_SHIFT_IND_KEY1() volatile
    {
        return (IDXBLK_SHIFT >> 4u) & 0b1111u;
    }

    /**
     * Get IDXBLK_SHIFT's IND_KEY0 field.
     *
     * Index of key space in block 0
     */
    inline uint8_t get_IDXBLK_SHIFT_IND_KEY0() volatile
    {
        return (IDXBLK_SHIFT >> 0u) & 0b1111u;
    }

    /**
     * Get all of IDXBLK_SHIFT's bit fields.
     *
     * (read-write) PUF Key Manager Shift Status
     */
    inline void get_IDXBLK_SHIFT(uint8_t &IND_KEY1, uint8_t &IND_KEY0) volatile
    {
        uint32_t curr = IDXBLK_SHIFT;

        IND_KEY1 = (curr >> 4u) & 0b1111u;
        IND_KEY0 = (curr >> 0u) & 0b1111u;
    }
};

static_assert(sizeof(key_manager__puf) == key_manager__puf::size);

static volatile key_manager__puf *const KEY_MANAGER__PUF =
    reinterpret_cast<key_manager__puf *>(0x40C82000);

}; // namespace MIMXRT1176::CM7
