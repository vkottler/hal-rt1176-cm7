/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG_MUX_MODE.h"
#include "../enums/IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG_MUX_MODE.h"
#include "../enums/IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG_MUX_MODE.h"
#include "../enums/IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG_MUX_MODE.h"
#include "../enums/IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG_MUX_MODE.h"
#include "../enums/IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG_MUX_MODE.h"
#include "../enums/IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG_MUX_MODE.h"
#include "../enums/IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG_MUX_MODE.h"
#include "../enums/IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG_MUX_MODE.h"
#include "../enums/IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG_MUX_MODE.h"
#include "../enums/IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG_MUX_MODE.h"
#include "../enums/IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG_MUX_MODE.h"
#include "../enums/IOMUXC_SNVS_SW_MUX_CTL_PAD_WAKEUP_DIG_MUX_MODE.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DWP.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DWP_LOCK.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DWP.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DWP_LOCK.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DWP.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DWP_LOCK.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DWP.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DWP_LOCK.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DWP.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DWP_LOCK.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DWP.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DWP_LOCK.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DWP.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DWP_LOCK.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DWP.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DWP_LOCK.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DWP.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DWP_LOCK.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DWP.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DWP_LOCK.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_DIG_DWP.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_DIG_DWP_LOCK.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DWP.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DWP_LOCK.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DWP.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DWP_LOCK.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_DIG_DWP.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_DIG_DWP_LOCK.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_DIG_DWP.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_DIG_DWP_LOCK.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_DIG_DWP.h"
#include "../enums/IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_DIG_DWP_LOCK.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * IOMUXC SNVS
 */
struct [[gnu::packed]] iomuxc_snvs
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        116; /*!< iomuxc_snvs's size in bytes. */

    /* Fields. */
    uint32_t
        SW_MUX_CTL_PAD_WAKEUP_DIG; /*!< (read-write) SW_MUX_CTL_PAD_WAKEUP_DIG
                                      SW MUX Control Register */
    uint32_t SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG; /*!< (read-write)
                                                SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG
                                                SW MUX Control Register */
    uint32_t
        SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG; /*!< (read-write)
                                             SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG
                                             SW MUX Control Register */
    uint32_t
        SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG; /*!< (read-write)
                                            SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG
                                            SW MUX Control Register */
    uint32_t
        SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG; /*!< (read-write)
                                            SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG
                                            SW MUX Control Register */
    uint32_t
        SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG; /*!< (read-write)
                                            SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG
                                            SW MUX Control Register */
    uint32_t
        SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG; /*!< (read-write)
                                            SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG
                                            SW MUX Control Register */
    uint32_t
        SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG; /*!< (read-write)
                                            SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG
                                            SW MUX Control Register */
    uint32_t
        SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG; /*!< (read-write)
                                            SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG
                                            SW MUX Control Register */
    uint32_t
        SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG; /*!< (read-write)
                                            SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG
                                            SW MUX Control Register */
    uint32_t
        SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG; /*!< (read-write)
                                            SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG
                                            SW MUX Control Register */
    uint32_t
        SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG; /*!< (read-write)
                                            SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG
                                            SW MUX Control Register */
    uint32_t
        SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG;   /*!< (read-write)
                                              SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG
                                              SW MUX Control Register */
    uint32_t SW_PAD_CTL_PAD_TEST_MODE_DIG; /*!< (read-write)
                                              SW_PAD_CTL_PAD_TEST_MODE_DIG SW
                                              PAD Control Register */
    uint32_t
        SW_PAD_CTL_PAD_POR_B_DIG; /*!< (read-write) SW_PAD_CTL_PAD_POR_B_DIG SW
                                     PAD Control Register */
    uint32_t
        SW_PAD_CTL_PAD_ONOFF_DIG; /*!< (read-write) SW_PAD_CTL_PAD_ONOFF_DIG SW
                                     PAD Control Register */
    uint32_t
        SW_PAD_CTL_PAD_WAKEUP_DIG; /*!< (read-write) SW_PAD_CTL_PAD_WAKEUP_DIG
                                      SW PAD Control Register */
    uint32_t SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG; /*!< (read-write)
                                                SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG
                                                SW PAD Control Register */
    uint32_t
        SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG; /*!< (read-write)
                                             SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG
                                             SW PAD Control Register */
    uint32_t
        SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG; /*!< (read-write)
                                            SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG
                                            SW PAD Control Register */
    uint32_t
        SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG; /*!< (read-write)
                                            SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG
                                            SW PAD Control Register */
    uint32_t
        SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG; /*!< (read-write)
                                            SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG
                                            SW PAD Control Register */
    uint32_t
        SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG; /*!< (read-write)
                                            SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG
                                            SW PAD Control Register */
    uint32_t
        SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG; /*!< (read-write)
                                            SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG
                                            SW PAD Control Register */
    uint32_t
        SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG; /*!< (read-write)
                                            SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG
                                            SW PAD Control Register */
    uint32_t
        SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG; /*!< (read-write)
                                            SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG
                                            SW PAD Control Register */
    uint32_t
        SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG; /*!< (read-write)
                                            SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG
                                            SW PAD Control Register */
    uint32_t
        SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG; /*!< (read-write)
                                            SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG
                                            SW PAD Control Register */
    uint32_t
        SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG; /*!< (read-write)
                                            SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG
                                            SW PAD Control Register */

    /* Methods. */

    /**
     * Get SW_MUX_CTL_PAD_WAKEUP_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_WAKEUP_DIG_SION() volatile
    {
        return SW_MUX_CTL_PAD_WAKEUP_DIG & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_WAKEUP_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_WAKEUP_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_WAKEUP_DIG |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_WAKEUP_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_WAKEUP_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_WAKEUP_DIG &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_WAKEUP_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_WAKEUP_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_WAKEUP_DIG ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_WAKEUP_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_SNVS_SW_MUX_CTL_PAD_WAKEUP_DIG_MUX_MODE
    get_SW_MUX_CTL_PAD_WAKEUP_DIG_MUX_MODE() volatile
    {
        return IOMUXC_SNVS_SW_MUX_CTL_PAD_WAKEUP_DIG_MUX_MODE(
            (SW_MUX_CTL_PAD_WAKEUP_DIG >> 0u) & 0b111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_WAKEUP_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_WAKEUP_DIG_MUX_MODE(
        IOMUXC_SNVS_SW_MUX_CTL_PAD_WAKEUP_DIG_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_WAKEUP_DIG;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_WAKEUP_DIG = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_WAKEUP_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_WAKEUP_DIG SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_WAKEUP_DIG(
        bool &SION,
        IOMUXC_SNVS_SW_MUX_CTL_PAD_WAKEUP_DIG_MUX_MODE &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_WAKEUP_DIG;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_SNVS_SW_MUX_CTL_PAD_WAKEUP_DIG_MUX_MODE(
            (curr >> 0u) & 0b111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_WAKEUP_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_WAKEUP_DIG SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_WAKEUP_DIG(
        bool SION,
        IOMUXC_SNVS_SW_MUX_CTL_PAD_WAKEUP_DIG_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_WAKEUP_DIG;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_WAKEUP_DIG = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG_SION() volatile
    {
        return SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG_MUX_MODE
    get_SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG_MUX_MODE() volatile
    {
        return IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG_MUX_MODE(
            (SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG >> 0u) & 0b111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG_MUX_MODE(
        IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG(
        bool &SION,
        IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG_MUX_MODE &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG_MUX_MODE(
            (curr >> 0u) & 0b111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG(
        bool SION,
        IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_PMIC_ON_REQ_DIG = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG_SION() volatile
    {
        return SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG_MUX_MODE
    get_SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG_MUX_MODE() volatile
    {
        return IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG_MUX_MODE(
            (SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG >> 0u) & 0b111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG_MUX_MODE(
        IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG(
        bool &SION, IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG_MUX_MODE
                        &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG_MUX_MODE(
            (curr >> 0u) & 0b111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG(
        bool SION, IOMUXC_SNVS_SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG_MUX_MODE
                       MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_PMIC_STBY_REQ_DIG = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG_MUX_MODE() volatile
    {
        return IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG >> 0u) & 0b111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG_MUX_MODE(
        IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG(
        bool &SION, IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG_MUX_MODE
                        &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG_MUX_MODE(
            (curr >> 0u) & 0b111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG(
        bool SION,
        IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_SNVS_00_DIG = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG_MUX_MODE() volatile
    {
        return IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG >> 0u) & 0b111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG_MUX_MODE(
        IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG(
        bool &SION, IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG_MUX_MODE
                        &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG_MUX_MODE(
            (curr >> 0u) & 0b111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG(
        bool SION,
        IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_SNVS_01_DIG = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG_MUX_MODE() volatile
    {
        return IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG >> 0u) & 0b111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG_MUX_MODE(
        IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG(
        bool &SION, IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG_MUX_MODE
                        &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG_MUX_MODE(
            (curr >> 0u) & 0b111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG(
        bool SION,
        IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_SNVS_02_DIG = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG_MUX_MODE() volatile
    {
        return IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG >> 0u) & 0b111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG_MUX_MODE(
        IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG(
        bool &SION, IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG_MUX_MODE
                        &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG_MUX_MODE(
            (curr >> 0u) & 0b111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG(
        bool SION,
        IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_SNVS_03_DIG = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG_MUX_MODE() volatile
    {
        return IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG >> 0u) & 0b111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG_MUX_MODE(
        IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG(
        bool &SION, IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG_MUX_MODE
                        &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG_MUX_MODE(
            (curr >> 0u) & 0b111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG(
        bool SION,
        IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_SNVS_04_DIG = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG_MUX_MODE() volatile
    {
        return IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG >> 0u) & 0b111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG_MUX_MODE(
        IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG(
        bool &SION, IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG_MUX_MODE
                        &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG_MUX_MODE(
            (curr >> 0u) & 0b111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG(
        bool SION,
        IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_SNVS_05_DIG = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG_MUX_MODE() volatile
    {
        return IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG >> 0u) & 0b111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG_MUX_MODE(
        IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG(
        bool &SION, IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG_MUX_MODE
                        &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG_MUX_MODE(
            (curr >> 0u) & 0b111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG(
        bool SION,
        IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_SNVS_06_DIG = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG_MUX_MODE() volatile
    {
        return IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG >> 0u) & 0b111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG_MUX_MODE(
        IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG(
        bool &SION, IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG_MUX_MODE
                        &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG_MUX_MODE(
            (curr >> 0u) & 0b111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG(
        bool SION,
        IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_SNVS_07_DIG = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG_MUX_MODE() volatile
    {
        return IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG >> 0u) & 0b111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG_MUX_MODE(
        IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG(
        bool &SION, IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG_MUX_MODE
                        &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG_MUX_MODE(
            (curr >> 0u) & 0b111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG(
        bool SION,
        IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_SNVS_08_DIG = curr;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline bool get_SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG_SION() volatile
    {
        return SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG & (1u << 4u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG |= 1u << 4u;
    }

    /**
     * Clear SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void clear_SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG &= ~(1u << 4u);
    }

    /**
     * Toggle SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG's SION bit.
     *
     * Software Input On Field.
     */
    inline void toggle_SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG_SION() volatile
    {
        SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG ^= 1u << 4u;
    }

    /**
     * Get SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG_MUX_MODE
    get_SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG_MUX_MODE() volatile
    {
        return IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG_MUX_MODE(
            (SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG >> 0u) & 0b111u);
    }

    /**
     * Set SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG's MUX_MODE field.
     *
     * MUX Mode Select Field.
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG_MUX_MODE(
        IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG_MUX_MODE value) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG = curr;
    }

    /**
     * Get all of SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG SW MUX Control Register
     */
    inline void get_SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG(
        bool &SION, IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG_MUX_MODE
                        &MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG;

        SION = curr & (1u << 4u);
        MUX_MODE = IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG_MUX_MODE(
            (curr >> 0u) & 0b111u);
    }

    /**
     * Set all of SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG's bit fields.
     *
     * (read-write) SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG SW MUX Control Register
     */
    inline void set_SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG(
        bool SION,
        IOMUXC_SNVS_SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG_MUX_MODE MUX_MODE) volatile
    {
        uint32_t curr = SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG;

        curr &= ~(0b1u << 4u);
        curr |= (SION & 0b1u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(MUX_MODE) & 0b111u) << 0u;

        SW_MUX_CTL_PAD_GPIO_SNVS_09_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_TEST_MODE_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_DIG_DWP_LOCK
    get_SW_PAD_CTL_PAD_TEST_MODE_DIG_DWP_LOCK() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_DIG_DWP_LOCK(
            (SW_PAD_CTL_PAD_TEST_MODE_DIG >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_TEST_MODE_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_TEST_MODE_DIG_DWP_LOCK(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_DIG_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_TEST_MODE_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_TEST_MODE_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_TEST_MODE_DIG's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_DIG_DWP
    get_SW_PAD_CTL_PAD_TEST_MODE_DIG_DWP() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_DIG_DWP(
            (SW_PAD_CTL_PAD_TEST_MODE_DIG >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_TEST_MODE_DIG's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_TEST_MODE_DIG_DWP(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_DIG_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_TEST_MODE_DIG;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_TEST_MODE_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_TEST_MODE_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_TEST_MODE_DIG_PUS() volatile
    {
        return SW_PAD_CTL_PAD_TEST_MODE_DIG & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_TEST_MODE_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_TEST_MODE_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_TEST_MODE_DIG |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_TEST_MODE_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_TEST_MODE_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_TEST_MODE_DIG &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_TEST_MODE_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_TEST_MODE_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_TEST_MODE_DIG ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_TEST_MODE_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_TEST_MODE_DIG_PUE() volatile
    {
        return SW_PAD_CTL_PAD_TEST_MODE_DIG & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_TEST_MODE_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_TEST_MODE_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_TEST_MODE_DIG |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_TEST_MODE_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_TEST_MODE_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_TEST_MODE_DIG &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_TEST_MODE_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_TEST_MODE_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_TEST_MODE_DIG ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_TEST_MODE_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_TEST_MODE_DIG_DSE() volatile
    {
        return SW_PAD_CTL_PAD_TEST_MODE_DIG & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_TEST_MODE_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_TEST_MODE_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_TEST_MODE_DIG |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_TEST_MODE_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_TEST_MODE_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_TEST_MODE_DIG &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_TEST_MODE_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_TEST_MODE_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_TEST_MODE_DIG ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_TEST_MODE_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_TEST_MODE_DIG_SRE() volatile
    {
        return SW_PAD_CTL_PAD_TEST_MODE_DIG & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_TEST_MODE_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_TEST_MODE_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_TEST_MODE_DIG |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_TEST_MODE_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_TEST_MODE_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_TEST_MODE_DIG &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_TEST_MODE_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_TEST_MODE_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_TEST_MODE_DIG ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_TEST_MODE_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_TEST_MODE_DIG SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_TEST_MODE_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_DIG_DWP_LOCK &DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_DIG_DWP &DWP, bool &PUS,
        bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_TEST_MODE_DIG;

        DWP_LOCK = IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_DIG_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP = IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_DIG_DWP((curr >> 28u) &
                                                           0b11u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_TEST_MODE_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_TEST_MODE_DIG SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_TEST_MODE_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_DIG_DWP_LOCK DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_TEST_MODE_DIG_DWP DWP, bool PUS, bool PUE,
        bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_TEST_MODE_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_TEST_MODE_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_POR_B_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_DIG_DWP_LOCK
    get_SW_PAD_CTL_PAD_POR_B_DIG_DWP_LOCK() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_DIG_DWP_LOCK(
            (SW_PAD_CTL_PAD_POR_B_DIG >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_POR_B_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_POR_B_DIG_DWP_LOCK(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_DIG_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_POR_B_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_POR_B_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_POR_B_DIG's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_DIG_DWP
    get_SW_PAD_CTL_PAD_POR_B_DIG_DWP() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_DIG_DWP(
            (SW_PAD_CTL_PAD_POR_B_DIG >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_POR_B_DIG's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_POR_B_DIG_DWP(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_DIG_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_POR_B_DIG;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_POR_B_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_POR_B_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_POR_B_DIG_PUS() volatile
    {
        return SW_PAD_CTL_PAD_POR_B_DIG & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_POR_B_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_POR_B_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_POR_B_DIG |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_POR_B_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_POR_B_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_POR_B_DIG &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_POR_B_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_POR_B_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_POR_B_DIG ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_POR_B_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_POR_B_DIG_PUE() volatile
    {
        return SW_PAD_CTL_PAD_POR_B_DIG & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_POR_B_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_POR_B_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_POR_B_DIG |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_POR_B_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_POR_B_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_POR_B_DIG &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_POR_B_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_POR_B_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_POR_B_DIG ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_POR_B_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_POR_B_DIG_DSE() volatile
    {
        return SW_PAD_CTL_PAD_POR_B_DIG & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_POR_B_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_POR_B_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_POR_B_DIG |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_POR_B_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_POR_B_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_POR_B_DIG &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_POR_B_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_POR_B_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_POR_B_DIG ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_POR_B_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_POR_B_DIG_SRE() volatile
    {
        return SW_PAD_CTL_PAD_POR_B_DIG & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_POR_B_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_POR_B_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_POR_B_DIG |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_POR_B_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_POR_B_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_POR_B_DIG &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_POR_B_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_POR_B_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_POR_B_DIG ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_POR_B_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_POR_B_DIG SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_POR_B_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_DIG_DWP_LOCK &DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_DIG_DWP &DWP, bool &PUS, bool &PUE,
        bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_POR_B_DIG;

        DWP_LOCK = IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_DIG_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP = IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_DIG_DWP((curr >> 28u) & 0b11u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_POR_B_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_POR_B_DIG SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_POR_B_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_DIG_DWP_LOCK DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_POR_B_DIG_DWP DWP, bool PUS, bool PUE,
        bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_POR_B_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_POR_B_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_ONOFF_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_DIG_DWP_LOCK
    get_SW_PAD_CTL_PAD_ONOFF_DIG_DWP_LOCK() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_DIG_DWP_LOCK(
            (SW_PAD_CTL_PAD_ONOFF_DIG >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_ONOFF_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_ONOFF_DIG_DWP_LOCK(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_DIG_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_ONOFF_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_ONOFF_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_ONOFF_DIG's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_DIG_DWP
    get_SW_PAD_CTL_PAD_ONOFF_DIG_DWP() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_DIG_DWP(
            (SW_PAD_CTL_PAD_ONOFF_DIG >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_ONOFF_DIG's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_ONOFF_DIG_DWP(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_DIG_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_ONOFF_DIG;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_ONOFF_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_ONOFF_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_ONOFF_DIG_PUS() volatile
    {
        return SW_PAD_CTL_PAD_ONOFF_DIG & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_ONOFF_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_ONOFF_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_ONOFF_DIG |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_ONOFF_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_ONOFF_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_ONOFF_DIG &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_ONOFF_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_ONOFF_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_ONOFF_DIG ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_ONOFF_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_ONOFF_DIG_PUE() volatile
    {
        return SW_PAD_CTL_PAD_ONOFF_DIG & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_ONOFF_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_ONOFF_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_ONOFF_DIG |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_ONOFF_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_ONOFF_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_ONOFF_DIG &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_ONOFF_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_ONOFF_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_ONOFF_DIG ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_ONOFF_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_ONOFF_DIG_DSE() volatile
    {
        return SW_PAD_CTL_PAD_ONOFF_DIG & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_ONOFF_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_ONOFF_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_ONOFF_DIG |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_ONOFF_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_ONOFF_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_ONOFF_DIG &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_ONOFF_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_ONOFF_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_ONOFF_DIG ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_ONOFF_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_ONOFF_DIG_SRE() volatile
    {
        return SW_PAD_CTL_PAD_ONOFF_DIG & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_ONOFF_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_ONOFF_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_ONOFF_DIG |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_ONOFF_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_ONOFF_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_ONOFF_DIG &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_ONOFF_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_ONOFF_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_ONOFF_DIG ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_ONOFF_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_ONOFF_DIG SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_ONOFF_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_DIG_DWP_LOCK &DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_DIG_DWP &DWP, bool &PUS, bool &PUE,
        bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_ONOFF_DIG;

        DWP_LOCK = IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_DIG_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP = IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_DIG_DWP((curr >> 28u) & 0b11u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_ONOFF_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_ONOFF_DIG SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_ONOFF_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_DIG_DWP_LOCK DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_ONOFF_DIG_DWP DWP, bool PUS, bool PUE,
        bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_ONOFF_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_ONOFF_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_WAKEUP_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_DIG_DWP_LOCK
    get_SW_PAD_CTL_PAD_WAKEUP_DIG_DWP_LOCK() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_DIG_DWP_LOCK(
            (SW_PAD_CTL_PAD_WAKEUP_DIG >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_WAKEUP_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_WAKEUP_DIG_DWP_LOCK(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_DIG_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_WAKEUP_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_WAKEUP_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_WAKEUP_DIG's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_DIG_DWP
    get_SW_PAD_CTL_PAD_WAKEUP_DIG_DWP() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_DIG_DWP(
            (SW_PAD_CTL_PAD_WAKEUP_DIG >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_WAKEUP_DIG's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_WAKEUP_DIG_DWP(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_DIG_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_WAKEUP_DIG;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_WAKEUP_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_WAKEUP_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline bool get_SW_PAD_CTL_PAD_WAKEUP_DIG_ODE_SNVS() volatile
    {
        return SW_PAD_CTL_PAD_WAKEUP_DIG & (1u << 6u);
    }

    /**
     * Set SW_PAD_CTL_PAD_WAKEUP_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void set_SW_PAD_CTL_PAD_WAKEUP_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_WAKEUP_DIG |= 1u << 6u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_WAKEUP_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void clear_SW_PAD_CTL_PAD_WAKEUP_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_WAKEUP_DIG &= ~(1u << 6u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_WAKEUP_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void toggle_SW_PAD_CTL_PAD_WAKEUP_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_WAKEUP_DIG ^= 1u << 6u;
    }

    /**
     * Get SW_PAD_CTL_PAD_WAKEUP_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_WAKEUP_DIG_PUS() volatile
    {
        return SW_PAD_CTL_PAD_WAKEUP_DIG & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_WAKEUP_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_WAKEUP_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_WAKEUP_DIG |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_WAKEUP_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_WAKEUP_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_WAKEUP_DIG &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_WAKEUP_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_WAKEUP_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_WAKEUP_DIG ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_WAKEUP_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_WAKEUP_DIG_PUE() volatile
    {
        return SW_PAD_CTL_PAD_WAKEUP_DIG & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_WAKEUP_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_WAKEUP_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_WAKEUP_DIG |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_WAKEUP_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_WAKEUP_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_WAKEUP_DIG &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_WAKEUP_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_WAKEUP_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_WAKEUP_DIG ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_WAKEUP_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_WAKEUP_DIG_DSE() volatile
    {
        return SW_PAD_CTL_PAD_WAKEUP_DIG & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_WAKEUP_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_WAKEUP_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_WAKEUP_DIG |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_WAKEUP_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_WAKEUP_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_WAKEUP_DIG &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_WAKEUP_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_WAKEUP_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_WAKEUP_DIG ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_WAKEUP_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_WAKEUP_DIG_SRE() volatile
    {
        return SW_PAD_CTL_PAD_WAKEUP_DIG & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_WAKEUP_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_WAKEUP_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_WAKEUP_DIG |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_WAKEUP_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_WAKEUP_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_WAKEUP_DIG &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_WAKEUP_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_WAKEUP_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_WAKEUP_DIG ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_WAKEUP_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_WAKEUP_DIG SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_WAKEUP_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_DIG_DWP_LOCK &DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_DIG_DWP &DWP, bool &ODE_SNVS,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_WAKEUP_DIG;

        DWP_LOCK = IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_DIG_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP = IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_DIG_DWP((curr >> 28u) & 0b11u);
        ODE_SNVS = curr & (1u << 6u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_WAKEUP_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_WAKEUP_DIG SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_WAKEUP_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_DIG_DWP_LOCK DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP_DIG_DWP DWP, bool ODE_SNVS, bool PUS,
        bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_WAKEUP_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 6u);
        curr |= (ODE_SNVS & 0b1u) << 6u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_WAKEUP_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DWP_LOCK
    get_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DWP_LOCK() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DWP_LOCK(
            (SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DWP_LOCK(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DWP
    get_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DWP() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DWP(
            (SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DWP(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline bool get_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_ODE_SNVS() volatile
    {
        return SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG & (1u << 6u);
    }

    /**
     * Set SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void set_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG |= 1u << 6u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void clear_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG &= ~(1u << 6u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void toggle_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG ^= 1u << 6u;
    }

    /**
     * Get SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_PUS() volatile
    {
        return SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_PUE() volatile
    {
        return SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DSE() volatile
    {
        return SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_SRE() volatile
    {
        return SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DWP_LOCK &DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DWP &DWP, bool &ODE_SNVS,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG;

        DWP_LOCK = IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP = IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DWP((curr >> 28u) &
                                                             0b11u);
        ODE_SNVS = curr & (1u << 6u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DWP_LOCK DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG_DWP DWP, bool ODE_SNVS,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 6u);
        curr |= (ODE_SNVS & 0b1u) << 6u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_PMIC_ON_REQ_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DWP_LOCK
    get_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DWP_LOCK() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DWP_LOCK(
            (SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DWP_LOCK(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DWP
    get_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DWP() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DWP(
            (SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DWP(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline bool get_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_ODE_SNVS() volatile
    {
        return SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG & (1u << 6u);
    }

    /**
     * Set SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void set_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG |= 1u << 6u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void clear_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG &= ~(1u << 6u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void toggle_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG ^= 1u << 6u;
    }

    /**
     * Get SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_PUS() volatile
    {
        return SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_PUE() volatile
    {
        return SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DSE() volatile
    {
        return SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_SRE() volatile
    {
        return SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DWP_LOCK &DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DWP &DWP, bool &ODE_SNVS,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG;

        DWP_LOCK = IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP = IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DWP((curr >> 28u) &
                                                               0b11u);
        ODE_SNVS = curr & (1u << 6u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DWP_LOCK DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG_DWP DWP, bool ODE_SNVS,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 6u);
        curr |= (ODE_SNVS & 0b1u) << 6u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_PMIC_STBY_REQ_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DWP_LOCK() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DWP_LOCK(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DWP
    get_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DWP() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DWP(
            (SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DWP(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_ODE_SNVS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG & (1u << 6u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG |= 1u << 6u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG &= ~(1u << 6u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG ^= 1u << 6u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DWP_LOCK &DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DWP &DWP, bool &ODE_SNVS,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG;

        DWP_LOCK = IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP = IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DWP((curr >> 28u) &
                                                              0b11u);
        ODE_SNVS = curr & (1u << 6u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DWP_LOCK DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG_DWP DWP, bool ODE_SNVS,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 6u);
        curr |= (ODE_SNVS & 0b1u) << 6u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_SNVS_00_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DWP_LOCK() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DWP_LOCK(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DWP
    get_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DWP() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DWP(
            (SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DWP(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_ODE_SNVS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG & (1u << 6u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG |= 1u << 6u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG &= ~(1u << 6u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG ^= 1u << 6u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DWP_LOCK &DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DWP &DWP, bool &ODE_SNVS,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG;

        DWP_LOCK = IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP = IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DWP((curr >> 28u) &
                                                              0b11u);
        ODE_SNVS = curr & (1u << 6u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DWP_LOCK DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG_DWP DWP, bool ODE_SNVS,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 6u);
        curr |= (ODE_SNVS & 0b1u) << 6u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_SNVS_01_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DWP_LOCK() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DWP_LOCK(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DWP
    get_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DWP() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DWP(
            (SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DWP(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_ODE_SNVS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG & (1u << 6u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG |= 1u << 6u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG &= ~(1u << 6u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG ^= 1u << 6u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DWP_LOCK &DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DWP &DWP, bool &ODE_SNVS,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG;

        DWP_LOCK = IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP = IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DWP((curr >> 28u) &
                                                              0b11u);
        ODE_SNVS = curr & (1u << 6u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DWP_LOCK DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG_DWP DWP, bool ODE_SNVS,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 6u);
        curr |= (ODE_SNVS & 0b1u) << 6u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_SNVS_02_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DWP_LOCK() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DWP_LOCK(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DWP
    get_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DWP() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DWP(
            (SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DWP(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_ODE_SNVS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG & (1u << 6u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG |= 1u << 6u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG &= ~(1u << 6u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG ^= 1u << 6u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DWP_LOCK &DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DWP &DWP, bool &ODE_SNVS,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG;

        DWP_LOCK = IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP = IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DWP((curr >> 28u) &
                                                              0b11u);
        ODE_SNVS = curr & (1u << 6u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DWP_LOCK DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG_DWP DWP, bool ODE_SNVS,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 6u);
        curr |= (ODE_SNVS & 0b1u) << 6u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_SNVS_03_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DWP_LOCK() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DWP_LOCK(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DWP
    get_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DWP() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DWP(
            (SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DWP(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_ODE_SNVS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG & (1u << 6u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG |= 1u << 6u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG &= ~(1u << 6u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG ^= 1u << 6u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DWP_LOCK &DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DWP &DWP, bool &ODE_SNVS,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG;

        DWP_LOCK = IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP = IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DWP((curr >> 28u) &
                                                              0b11u);
        ODE_SNVS = curr & (1u << 6u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DWP_LOCK DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG_DWP DWP, bool ODE_SNVS,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 6u);
        curr |= (ODE_SNVS & 0b1u) << 6u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_SNVS_04_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DWP_LOCK() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DWP_LOCK(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DWP
    get_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DWP() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DWP(
            (SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DWP(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_ODE_SNVS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG & (1u << 6u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG |= 1u << 6u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG &= ~(1u << 6u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG ^= 1u << 6u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DWP_LOCK &DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DWP &DWP, bool &ODE_SNVS,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG;

        DWP_LOCK = IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP = IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DWP((curr >> 28u) &
                                                              0b11u);
        ODE_SNVS = curr & (1u << 6u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DWP_LOCK DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG_DWP DWP, bool ODE_SNVS,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 6u);
        curr |= (ODE_SNVS & 0b1u) << 6u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_SNVS_05_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DWP_LOCK() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DWP_LOCK(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DWP
    get_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DWP() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DWP(
            (SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DWP(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_ODE_SNVS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG & (1u << 6u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG |= 1u << 6u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG &= ~(1u << 6u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG ^= 1u << 6u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DWP_LOCK &DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DWP &DWP, bool &ODE_SNVS,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG;

        DWP_LOCK = IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP = IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DWP((curr >> 28u) &
                                                              0b11u);
        ODE_SNVS = curr & (1u << 6u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DWP_LOCK DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG_DWP DWP, bool ODE_SNVS,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 6u);
        curr |= (ODE_SNVS & 0b1u) << 6u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_SNVS_06_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DWP_LOCK() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DWP_LOCK(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DWP
    get_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DWP() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DWP(
            (SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DWP(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_ODE_SNVS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG & (1u << 6u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG |= 1u << 6u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG &= ~(1u << 6u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG ^= 1u << 6u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DWP_LOCK &DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DWP &DWP, bool &ODE_SNVS,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG;

        DWP_LOCK = IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP = IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DWP((curr >> 28u) &
                                                              0b11u);
        ODE_SNVS = curr & (1u << 6u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DWP_LOCK DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG_DWP DWP, bool ODE_SNVS,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 6u);
        curr |= (ODE_SNVS & 0b1u) << 6u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_SNVS_07_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DWP_LOCK() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DWP_LOCK(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DWP
    get_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DWP() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DWP(
            (SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DWP(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_ODE_SNVS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG & (1u << 6u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG |= 1u << 6u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG &= ~(1u << 6u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG ^= 1u << 6u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DWP_LOCK &DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DWP &DWP, bool &ODE_SNVS,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG;

        DWP_LOCK = IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP = IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DWP((curr >> 28u) &
                                                              0b11u);
        ODE_SNVS = curr & (1u << 6u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DWP_LOCK DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG_DWP DWP, bool ODE_SNVS,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 6u);
        curr |= (ODE_SNVS & 0b1u) << 6u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_SNVS_08_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DWP_LOCK
    get_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DWP_LOCK() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DWP_LOCK(
            (SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG >> 30u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's DWP_LOCK field.
     *
     * Domain write protection lock
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DWP_LOCK(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DWP_LOCK value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's DWP field.
     *
     * Domain write protection
     */
    inline IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DWP
    get_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DWP() volatile
    {
        return IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DWP(
            (SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG >> 28u) & 0b11u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's DWP field.
     *
     * Domain write protection
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DWP(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DWP value) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG = curr;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_ODE_SNVS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG & (1u << 6u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG |= 1u << 6u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG &= ~(1u << 6u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's ODE_SNVS bit.
     *
     * Open Drain SNVS Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_ODE_SNVS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG ^= 1u << 6u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_PUS() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG & (1u << 3u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG |= 1u << 3u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG &= ~(1u << 3u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's PUS bit.
     *
     * Pull Up / Down Config. Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_PUS() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG ^= 1u << 3u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_PUE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG & (1u << 2u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG |= 1u << 2u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG &= ~(1u << 2u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's PUE bit.
     *
     * Pull / Keep Select Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_PUE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG ^= 1u << 2u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DSE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG & (1u << 1u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG |= 1u << 1u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG &= ~(1u << 1u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's DSE bit.
     *
     * Drive Strength Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DSE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG ^= 1u << 1u;
    }

    /**
     * Get SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline bool get_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_SRE() volatile
    {
        return SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG & (1u << 0u);
    }

    /**
     * Set SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG |= 1u << 0u;
    }

    /**
     * Clear SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void clear_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG &= ~(1u << 0u);
    }

    /**
     * Toggle SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's SRE bit.
     *
     * Slew Rate Field
     */
    inline void toggle_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_SRE() volatile
    {
        SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG ^= 1u << 0u;
    }

    /**
     * Get all of SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG SW PAD Control Register
     */
    inline void get_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DWP_LOCK &DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DWP &DWP, bool &ODE_SNVS,
        bool &PUS, bool &PUE, bool &DSE, bool &SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG;

        DWP_LOCK = IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DWP_LOCK(
            (curr >> 30u) & 0b11u);
        DWP = IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DWP((curr >> 28u) &
                                                              0b11u);
        ODE_SNVS = curr & (1u << 6u);
        PUS = curr & (1u << 3u);
        PUE = curr & (1u << 2u);
        DSE = curr & (1u << 1u);
        SRE = curr & (1u << 0u);
    }

    /**
     * Set all of SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG's bit fields.
     *
     * (read-write) SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG SW PAD Control Register
     */
    inline void set_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG(
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DWP_LOCK DWP_LOCK,
        IOMUXC_SNVS_SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG_DWP DWP, bool ODE_SNVS,
        bool PUS, bool PUE, bool DSE, bool SRE) volatile
    {
        uint32_t curr = SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(DWP_LOCK) & 0b11u) << 30u;
        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(DWP) & 0b11u) << 28u;
        curr &= ~(0b1u << 6u);
        curr |= (ODE_SNVS & 0b1u) << 6u;
        curr &= ~(0b1u << 3u);
        curr |= (PUS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SRE & 0b1u) << 0u;

        SW_PAD_CTL_PAD_GPIO_SNVS_09_DIG = curr;
    }
};

static_assert(sizeof(iomuxc_snvs) == iomuxc_snvs::size);

static volatile iomuxc_snvs *const IOMUXC_SNVS =
    reinterpret_cast<iomuxc_snvs *>(0x40C94000);

}; // namespace MIMXRT1176::CM7
