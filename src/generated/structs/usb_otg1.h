/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/USB_OTG1_FRINDEX_FRINDEX.h"
#include "../enums/USB_OTG1_HCSPARAMS_N_CC.h"
#include "../enums/USB_OTG1_HWGENERAL_PHYM.h"
#include "../enums/USB_OTG1_HWGENERAL_PHYW.h"
#include "../enums/USB_OTG1_HWGENERAL_SM.h"
#include "../enums/USB_OTG1_PORTSC1_LS.h"
#include "../enums/USB_OTG1_PORTSC1_PIC.h"
#include "../enums/USB_OTG1_PORTSC1_PSPD.h"
#include "../enums/USB_OTG1_PORTSC1_PTC.h"
#include "../enums/USB_OTG1_SBUSCFG_AHBBRST.h"
#include "../enums/USB_OTG1_USBCMD_ITC.h"
#include "../enums/USB_OTG1_USBMODE_CM.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * USB
 */
struct [[gnu::packed]] usb_otg1
{
    /* Constant attributes. */
    static constexpr std::size_t size = 480; /*!< usb_otg1's size in bytes. */

    /* Fields. */
    uint32_t ID;        /*!< (read-write) Identification register */
    uint32_t HWGENERAL; /*!< (read-write) Hardware General */
    uint32_t HWHOST;    /*!< (read-write) Host Hardware Parameters */
    uint32_t HWDEVICE;  /*!< (read-write) Device Hardware Parameters */
    uint32_t HWTXBUF;   /*!< (read-write) TX Buffer Hardware Parameters */
    uint32_t HWRXBUF;   /*!< (read-write) RX Buffer Hardware Parameters */
    static constexpr std::size_t reserved_padding0_length = 26;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t GPTIMER0LD; /*!< (read-write) General Purpose Timer #0 Load */
    uint32_t
        GPTIMER0CTRL; /*!< (read-write) General Purpose Timer #0 Controller */
    uint32_t GPTIMER1LD; /*!< (read-write) General Purpose Timer #1 Load */
    uint32_t
        GPTIMER1CTRL; /*!< (read-write) General Purpose Timer #1 Controller */
    uint32_t SBUSCFG; /*!< (read-write) System Bus Config */
    static constexpr std::size_t reserved_padding1_length = 27;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    uint8_t CAPLENGTH; /*!< (read-write) Capability Registers Length */
    const uint8_t reserved_padding2 = {};
    uint16_t HCIVERSION; /*!< (read-write) Host Controller Interface Version */
    uint32_t
        HCSPARAMS; /*!< (read-write) Host Controller Structural Parameters */
    uint32_t
        HCCPARAMS; /*!< (read-write) Host Controller Capability Parameters */
    static constexpr std::size_t reserved_padding3_length = 5;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    uint16_t
        DCIVERSION; /*!< (read-write) Device Controller Interface Version */
    static constexpr std::size_t reserved_padding4_length = 2;
    const uint8_t reserved_padding4[reserved_padding4_length] = {};
    uint32_t
        DCCPARAMS; /*!< (read-write) Device Controller Capability Parameters */
    static constexpr std::size_t reserved_padding5_length = 6;
    const uint32_t reserved_padding5[reserved_padding5_length] = {};
    uint32_t USBCMD;  /*!< (read-write) USB Command Register */
    uint32_t USBSTS;  /*!< (read-write) USB Status Register */
    uint32_t USBINTR; /*!< (read-write) Interrupt Enable Register */
    uint32_t FRINDEX; /*!< (read-write) USB Frame Index */
    const uint32_t reserved_padding6 = {};
    uint32_t DEVICEADDR; /*!< (read-write) Device Address */
    static constexpr std::size_t reserved_padding7_length = 2;
    const uint32_t reserved_padding7[reserved_padding7_length] = {};
    uint32_t BURSTSIZE;    /*!< (read-write) Programmable Burst Size */
    uint32_t TXFILLTUNING; /*!< (read-write) TX FIFO Fill Tuning */
    static constexpr std::size_t reserved_padding8_length = 4;
    const uint32_t reserved_padding8[reserved_padding8_length] = {};
    uint32_t ENDPTNAK;   /*!< (read-write) Endpoint NAK */
    uint32_t ENDPTNAKEN; /*!< (read-write) Endpoint NAK Enable */
    uint32_t CONFIGFLAG; /*!< (read-write) Configure Flag Register */
    uint32_t PORTSC1;    /*!< (read-write) Port Status & Control */
    static constexpr std::size_t reserved_padding9_length = 7;
    const uint32_t reserved_padding9[reserved_padding9_length] = {};
    uint32_t OTGSC;          /*!< (read-write) On-The-Go Status & control */
    uint32_t USBMODE;        /*!< (read-write) USB Device Mode */
    uint32_t ENDPTSETUPSTAT; /*!< (read-write) Endpoint Setup Status */
    uint32_t ENDPTPRIME;     /*!< (read-write) Endpoint Prime */
    uint32_t ENDPTFLUSH;     /*!< (read-write) Endpoint Flush */
    uint32_t ENDPTSTAT;      /*!< (read-write) Endpoint Status */
    uint32_t ENDPTCOMPLETE;  /*!< (read-write) Endpoint Complete */
    uint32_t ENDPTCTRL0;     /*!< (read-write) Endpoint Control0 */
    uint32_t ENDPTCTRL1;     /*!< (read-write) Endpoint Control 1 */
    uint32_t ENDPTCTRL2;     /*!< (read-write) Endpoint Control 2 */
    uint32_t ENDPTCTRL3;     /*!< (read-write) Endpoint Control 3 */
    uint32_t ENDPTCTRL4;     /*!< (read-write) Endpoint Control 4 */
    uint32_t ENDPTCTRL5;     /*!< (read-write) Endpoint Control 5 */
    uint32_t ENDPTCTRL6;     /*!< (read-write) Endpoint Control 6 */
    uint32_t ENDPTCTRL7;     /*!< (read-write) Endpoint Control 7 */

    /* Methods. */

    /**
     * Get ID's REVISION field.
     *
     * REVISION
     */
    inline uint8_t get_ID_REVISION() volatile
    {
        return (ID >> 16u) & 0b11111111u;
    }

    /**
     * Get ID's NID field.
     *
     * NID
     */
    inline uint8_t get_ID_NID() volatile
    {
        return (ID >> 8u) & 0b111111u;
    }

    /**
     * Get ID's ID field.
     *
     * ID
     */
    inline uint8_t get_ID_ID() volatile
    {
        return (ID >> 0u) & 0b111111u;
    }

    /**
     * Get all of ID's bit fields.
     *
     * (read-write) Identification register
     */
    inline void get_ID(uint8_t &REVISION, uint8_t &NID, uint8_t &ID) volatile
    {
        uint32_t curr = ID;

        REVISION = (curr >> 16u) & 0b11111111u;
        NID = (curr >> 8u) & 0b111111u;
        ID = (curr >> 0u) & 0b111111u;
    }

    /**
     * Get HWGENERAL's SM field.
     *
     * SM
     */
    inline USB_OTG1_HWGENERAL_SM get_HWGENERAL_SM() volatile
    {
        return USB_OTG1_HWGENERAL_SM((HWGENERAL >> 9u) & 0b11u);
    }

    /**
     * Get HWGENERAL's PHYM field.
     *
     * PHYM
     */
    inline USB_OTG1_HWGENERAL_PHYM get_HWGENERAL_PHYM() volatile
    {
        return USB_OTG1_HWGENERAL_PHYM((HWGENERAL >> 6u) & 0b111u);
    }

    /**
     * Get HWGENERAL's PHYW field.
     *
     * PHYW
     */
    inline USB_OTG1_HWGENERAL_PHYW get_HWGENERAL_PHYW() volatile
    {
        return USB_OTG1_HWGENERAL_PHYW((HWGENERAL >> 4u) & 0b11u);
    }

    /**
     * Get all of HWGENERAL's bit fields.
     *
     * (read-write) Hardware General
     */
    inline void get_HWGENERAL(USB_OTG1_HWGENERAL_SM &SM,
                              USB_OTG1_HWGENERAL_PHYM &PHYM,
                              USB_OTG1_HWGENERAL_PHYW &PHYW) volatile
    {
        uint32_t curr = HWGENERAL;

        SM = USB_OTG1_HWGENERAL_SM((curr >> 9u) & 0b11u);
        PHYM = USB_OTG1_HWGENERAL_PHYM((curr >> 6u) & 0b111u);
        PHYW = USB_OTG1_HWGENERAL_PHYW((curr >> 4u) & 0b11u);
    }

    /**
     * Get HWHOST's NPORT field.
     *
     * NPORT
     */
    inline uint8_t get_HWHOST_NPORT() volatile
    {
        return (HWHOST >> 1u) & 0b111u;
    }

    /**
     * Get HWHOST's HC bit.
     *
     * HC
     */
    inline bool get_HWHOST_HC() volatile
    {
        return HWHOST & (1u << 0u);
    }

    /**
     * Get all of HWHOST's bit fields.
     *
     * (read-write) Host Hardware Parameters
     */
    inline void get_HWHOST(uint8_t &NPORT, bool &HC) volatile
    {
        uint32_t curr = HWHOST;

        NPORT = (curr >> 1u) & 0b111u;
        HC = curr & (1u << 0u);
    }

    /**
     * Get HWDEVICE's DEVEP field.
     *
     * DEVEP
     */
    inline uint8_t get_HWDEVICE_DEVEP() volatile
    {
        return (HWDEVICE >> 1u) & 0b11111u;
    }

    /**
     * Get HWDEVICE's DC bit.
     *
     * DC
     */
    inline bool get_HWDEVICE_DC() volatile
    {
        return HWDEVICE & (1u << 0u);
    }

    /**
     * Get all of HWDEVICE's bit fields.
     *
     * (read-write) Device Hardware Parameters
     */
    inline void get_HWDEVICE(uint8_t &DEVEP, bool &DC) volatile
    {
        uint32_t curr = HWDEVICE;

        DEVEP = (curr >> 1u) & 0b11111u;
        DC = curr & (1u << 0u);
    }

    /**
     * Get HWTXBUF's TXCHANADD field.
     *
     * TXCHANADD
     */
    inline uint8_t get_HWTXBUF_TXCHANADD() volatile
    {
        return (HWTXBUF >> 16u) & 0b11111111u;
    }

    /**
     * Get HWTXBUF's TXBURST field.
     *
     * TXBURST
     */
    inline uint8_t get_HWTXBUF_TXBURST() volatile
    {
        return (HWTXBUF >> 0u) & 0b11111111u;
    }

    /**
     * Get all of HWTXBUF's bit fields.
     *
     * (read-write) TX Buffer Hardware Parameters
     */
    inline void get_HWTXBUF(uint8_t &TXCHANADD, uint8_t &TXBURST) volatile
    {
        uint32_t curr = HWTXBUF;

        TXCHANADD = (curr >> 16u) & 0b11111111u;
        TXBURST = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get HWRXBUF's RXADD field.
     *
     * RXADD
     */
    inline uint8_t get_HWRXBUF_RXADD() volatile
    {
        return (HWRXBUF >> 8u) & 0b11111111u;
    }

    /**
     * Get HWRXBUF's RXBURST field.
     *
     * RXBURST
     */
    inline uint8_t get_HWRXBUF_RXBURST() volatile
    {
        return (HWRXBUF >> 0u) & 0b11111111u;
    }

    /**
     * Get all of HWRXBUF's bit fields.
     *
     * (read-write) RX Buffer Hardware Parameters
     */
    inline void get_HWRXBUF(uint8_t &RXADD, uint8_t &RXBURST) volatile
    {
        uint32_t curr = HWRXBUF;

        RXADD = (curr >> 8u) & 0b11111111u;
        RXBURST = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get GPTIMER0LD's GPTLD field.
     *
     * GPTLD
     */
    inline uint32_t get_GPTIMER0LD_GPTLD() volatile
    {
        return (GPTIMER0LD >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Set GPTIMER0LD's GPTLD field.
     *
     * GPTLD
     */
    inline void set_GPTIMER0LD_GPTLD(uint32_t value) volatile
    {
        uint32_t curr = GPTIMER0LD;

        curr &= ~(0b111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111u) << 0u;

        GPTIMER0LD = curr;
    }

    /**
     * Get GPTIMER0CTRL's GPTRUN bit.
     *
     * GPTRUN
     */
    inline bool get_GPTIMER0CTRL_GPTRUN() volatile
    {
        return GPTIMER0CTRL & (1u << 31u);
    }

    /**
     * Set GPTIMER0CTRL's GPTRUN bit.
     *
     * GPTRUN
     */
    inline void set_GPTIMER0CTRL_GPTRUN() volatile
    {
        GPTIMER0CTRL |= 1u << 31u;
    }

    /**
     * Clear GPTIMER0CTRL's GPTRUN bit.
     *
     * GPTRUN
     */
    inline void clear_GPTIMER0CTRL_GPTRUN() volatile
    {
        GPTIMER0CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle GPTIMER0CTRL's GPTRUN bit.
     *
     * GPTRUN
     */
    inline void toggle_GPTIMER0CTRL_GPTRUN() volatile
    {
        GPTIMER0CTRL ^= 1u << 31u;
    }

    /**
     * Get GPTIMER0CTRL's GPTRST bit.
     *
     * GPTRST
     */
    inline bool get_GPTIMER0CTRL_GPTRST() volatile
    {
        return GPTIMER0CTRL & (1u << 30u);
    }

    /**
     * Set GPTIMER0CTRL's GPTRST bit.
     *
     * GPTRST
     */
    inline void set_GPTIMER0CTRL_GPTRST() volatile
    {
        GPTIMER0CTRL |= 1u << 30u;
    }

    /**
     * Clear GPTIMER0CTRL's GPTRST bit.
     *
     * GPTRST
     */
    inline void clear_GPTIMER0CTRL_GPTRST() volatile
    {
        GPTIMER0CTRL &= ~(1u << 30u);
    }

    /**
     * Toggle GPTIMER0CTRL's GPTRST bit.
     *
     * GPTRST
     */
    inline void toggle_GPTIMER0CTRL_GPTRST() volatile
    {
        GPTIMER0CTRL ^= 1u << 30u;
    }

    /**
     * Get GPTIMER0CTRL's GPTMODE bit.
     *
     * GPTMODE
     */
    inline bool get_GPTIMER0CTRL_GPTMODE() volatile
    {
        return GPTIMER0CTRL & (1u << 24u);
    }

    /**
     * Set GPTIMER0CTRL's GPTMODE bit.
     *
     * GPTMODE
     */
    inline void set_GPTIMER0CTRL_GPTMODE() volatile
    {
        GPTIMER0CTRL |= 1u << 24u;
    }

    /**
     * Clear GPTIMER0CTRL's GPTMODE bit.
     *
     * GPTMODE
     */
    inline void clear_GPTIMER0CTRL_GPTMODE() volatile
    {
        GPTIMER0CTRL &= ~(1u << 24u);
    }

    /**
     * Toggle GPTIMER0CTRL's GPTMODE bit.
     *
     * GPTMODE
     */
    inline void toggle_GPTIMER0CTRL_GPTMODE() volatile
    {
        GPTIMER0CTRL ^= 1u << 24u;
    }

    /**
     * Get GPTIMER0CTRL's GPTCNT field.
     *
     * GPTCNT
     */
    inline uint32_t get_GPTIMER0CTRL_GPTCNT() volatile
    {
        return (GPTIMER0CTRL >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Set GPTIMER0CTRL's GPTCNT field.
     *
     * GPTCNT
     */
    inline void set_GPTIMER0CTRL_GPTCNT(uint32_t value) volatile
    {
        uint32_t curr = GPTIMER0CTRL;

        curr &= ~(0b111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111u) << 0u;

        GPTIMER0CTRL = curr;
    }

    /**
     * Get all of GPTIMER0CTRL's bit fields.
     *
     * (read-write) General Purpose Timer #0 Controller
     */
    inline void get_GPTIMER0CTRL(bool &GPTRUN, bool &GPTRST, bool &GPTMODE,
                                 uint32_t &GPTCNT) volatile
    {
        uint32_t curr = GPTIMER0CTRL;

        GPTRUN = curr & (1u << 31u);
        GPTRST = curr & (1u << 30u);
        GPTMODE = curr & (1u << 24u);
        GPTCNT = (curr >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Set all of GPTIMER0CTRL's bit fields.
     *
     * (read-write) General Purpose Timer #0 Controller
     */
    inline void set_GPTIMER0CTRL(bool GPTRUN, bool GPTRST, bool GPTMODE,
                                 uint32_t GPTCNT) volatile
    {
        uint32_t curr = GPTIMER0CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (GPTRUN & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (GPTRST & 0b1u) << 30u;
        curr &= ~(0b1u << 24u);
        curr |= (GPTMODE & 0b1u) << 24u;
        curr &= ~(0b111111111111111111111111u << 0u);
        curr |= (GPTCNT & 0b111111111111111111111111u) << 0u;

        GPTIMER0CTRL = curr;
    }

    /**
     * Get GPTIMER1LD's GPTLD field.
     *
     * GPTLD
     */
    inline uint32_t get_GPTIMER1LD_GPTLD() volatile
    {
        return (GPTIMER1LD >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Set GPTIMER1LD's GPTLD field.
     *
     * GPTLD
     */
    inline void set_GPTIMER1LD_GPTLD(uint32_t value) volatile
    {
        uint32_t curr = GPTIMER1LD;

        curr &= ~(0b111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111u) << 0u;

        GPTIMER1LD = curr;
    }

    /**
     * Get GPTIMER1CTRL's GPTRUN bit.
     *
     * GPTRUN
     */
    inline bool get_GPTIMER1CTRL_GPTRUN() volatile
    {
        return GPTIMER1CTRL & (1u << 31u);
    }

    /**
     * Set GPTIMER1CTRL's GPTRUN bit.
     *
     * GPTRUN
     */
    inline void set_GPTIMER1CTRL_GPTRUN() volatile
    {
        GPTIMER1CTRL |= 1u << 31u;
    }

    /**
     * Clear GPTIMER1CTRL's GPTRUN bit.
     *
     * GPTRUN
     */
    inline void clear_GPTIMER1CTRL_GPTRUN() volatile
    {
        GPTIMER1CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle GPTIMER1CTRL's GPTRUN bit.
     *
     * GPTRUN
     */
    inline void toggle_GPTIMER1CTRL_GPTRUN() volatile
    {
        GPTIMER1CTRL ^= 1u << 31u;
    }

    /**
     * Get GPTIMER1CTRL's GPTRST bit.
     *
     * GPTRST
     */
    inline bool get_GPTIMER1CTRL_GPTRST() volatile
    {
        return GPTIMER1CTRL & (1u << 30u);
    }

    /**
     * Set GPTIMER1CTRL's GPTRST bit.
     *
     * GPTRST
     */
    inline void set_GPTIMER1CTRL_GPTRST() volatile
    {
        GPTIMER1CTRL |= 1u << 30u;
    }

    /**
     * Clear GPTIMER1CTRL's GPTRST bit.
     *
     * GPTRST
     */
    inline void clear_GPTIMER1CTRL_GPTRST() volatile
    {
        GPTIMER1CTRL &= ~(1u << 30u);
    }

    /**
     * Toggle GPTIMER1CTRL's GPTRST bit.
     *
     * GPTRST
     */
    inline void toggle_GPTIMER1CTRL_GPTRST() volatile
    {
        GPTIMER1CTRL ^= 1u << 30u;
    }

    /**
     * Get GPTIMER1CTRL's GPTMODE bit.
     *
     * GPTMODE
     */
    inline bool get_GPTIMER1CTRL_GPTMODE() volatile
    {
        return GPTIMER1CTRL & (1u << 24u);
    }

    /**
     * Set GPTIMER1CTRL's GPTMODE bit.
     *
     * GPTMODE
     */
    inline void set_GPTIMER1CTRL_GPTMODE() volatile
    {
        GPTIMER1CTRL |= 1u << 24u;
    }

    /**
     * Clear GPTIMER1CTRL's GPTMODE bit.
     *
     * GPTMODE
     */
    inline void clear_GPTIMER1CTRL_GPTMODE() volatile
    {
        GPTIMER1CTRL &= ~(1u << 24u);
    }

    /**
     * Toggle GPTIMER1CTRL's GPTMODE bit.
     *
     * GPTMODE
     */
    inline void toggle_GPTIMER1CTRL_GPTMODE() volatile
    {
        GPTIMER1CTRL ^= 1u << 24u;
    }

    /**
     * Get GPTIMER1CTRL's GPTCNT field.
     *
     * GPTCNT
     */
    inline uint32_t get_GPTIMER1CTRL_GPTCNT() volatile
    {
        return (GPTIMER1CTRL >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Set GPTIMER1CTRL's GPTCNT field.
     *
     * GPTCNT
     */
    inline void set_GPTIMER1CTRL_GPTCNT(uint32_t value) volatile
    {
        uint32_t curr = GPTIMER1CTRL;

        curr &= ~(0b111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111u) << 0u;

        GPTIMER1CTRL = curr;
    }

    /**
     * Get all of GPTIMER1CTRL's bit fields.
     *
     * (read-write) General Purpose Timer #1 Controller
     */
    inline void get_GPTIMER1CTRL(bool &GPTRUN, bool &GPTRST, bool &GPTMODE,
                                 uint32_t &GPTCNT) volatile
    {
        uint32_t curr = GPTIMER1CTRL;

        GPTRUN = curr & (1u << 31u);
        GPTRST = curr & (1u << 30u);
        GPTMODE = curr & (1u << 24u);
        GPTCNT = (curr >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Set all of GPTIMER1CTRL's bit fields.
     *
     * (read-write) General Purpose Timer #1 Controller
     */
    inline void set_GPTIMER1CTRL(bool GPTRUN, bool GPTRST, bool GPTMODE,
                                 uint32_t GPTCNT) volatile
    {
        uint32_t curr = GPTIMER1CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (GPTRUN & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (GPTRST & 0b1u) << 30u;
        curr &= ~(0b1u << 24u);
        curr |= (GPTMODE & 0b1u) << 24u;
        curr &= ~(0b111111111111111111111111u << 0u);
        curr |= (GPTCNT & 0b111111111111111111111111u) << 0u;

        GPTIMER1CTRL = curr;
    }

    /**
     * Get SBUSCFG's AHBBRST field.
     *
     * AHBBRST
     */
    inline USB_OTG1_SBUSCFG_AHBBRST get_SBUSCFG_AHBBRST() volatile
    {
        return USB_OTG1_SBUSCFG_AHBBRST((SBUSCFG >> 0u) & 0b111u);
    }

    /**
     * Set SBUSCFG's AHBBRST field.
     *
     * AHBBRST
     */
    inline void set_SBUSCFG_AHBBRST(USB_OTG1_SBUSCFG_AHBBRST value) volatile
    {
        uint32_t curr = SBUSCFG;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        SBUSCFG = curr;
    }

    /**
     * Get CAPLENGTH's CAPLENGTH field.
     *
     * CAPLENGTH
     */
    inline uint8_t get_CAPLENGTH_CAPLENGTH() volatile
    {
        return (CAPLENGTH >> 0u) & 0b11111111u;
    }

    /**
     * Get HCIVERSION's HCIVERSION field.
     *
     * HCIVERSION
     */
    inline uint16_t get_HCIVERSION_HCIVERSION() volatile
    {
        return (HCIVERSION >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get HCSPARAMS's N_TT field.
     *
     * N_TT
     */
    inline uint8_t get_HCSPARAMS_N_TT() volatile
    {
        return (HCSPARAMS >> 24u) & 0b1111u;
    }

    /**
     * Get HCSPARAMS's N_PTT field.
     *
     * N_PTT
     */
    inline uint8_t get_HCSPARAMS_N_PTT() volatile
    {
        return (HCSPARAMS >> 20u) & 0b1111u;
    }

    /**
     * Get HCSPARAMS's PI bit.
     *
     * PI
     */
    inline bool get_HCSPARAMS_PI() volatile
    {
        return HCSPARAMS & (1u << 16u);
    }

    /**
     * Get HCSPARAMS's N_CC field.
     *
     * N_CC
     */
    inline USB_OTG1_HCSPARAMS_N_CC get_HCSPARAMS_N_CC() volatile
    {
        return USB_OTG1_HCSPARAMS_N_CC((HCSPARAMS >> 12u) & 0b1111u);
    }

    /**
     * Get HCSPARAMS's N_PCC field.
     *
     * N_PCC
     */
    inline uint8_t get_HCSPARAMS_N_PCC() volatile
    {
        return (HCSPARAMS >> 8u) & 0b1111u;
    }

    /**
     * Get HCSPARAMS's PPC bit.
     *
     * PPC
     */
    inline bool get_HCSPARAMS_PPC() volatile
    {
        return HCSPARAMS & (1u << 4u);
    }

    /**
     * Get HCSPARAMS's N_PORTS field.
     *
     * N_PORTS
     */
    inline uint8_t get_HCSPARAMS_N_PORTS() volatile
    {
        return (HCSPARAMS >> 0u) & 0b1111u;
    }

    /**
     * Get all of HCSPARAMS's bit fields.
     *
     * (read-write) Host Controller Structural Parameters
     */
    inline void get_HCSPARAMS(uint8_t &N_TT, uint8_t &N_PTT, bool &PI,
                              USB_OTG1_HCSPARAMS_N_CC &N_CC, uint8_t &N_PCC,
                              bool &PPC, uint8_t &N_PORTS) volatile
    {
        uint32_t curr = HCSPARAMS;

        N_TT = (curr >> 24u) & 0b1111u;
        N_PTT = (curr >> 20u) & 0b1111u;
        PI = curr & (1u << 16u);
        N_CC = USB_OTG1_HCSPARAMS_N_CC((curr >> 12u) & 0b1111u);
        N_PCC = (curr >> 8u) & 0b1111u;
        PPC = curr & (1u << 4u);
        N_PORTS = (curr >> 0u) & 0b1111u;
    }

    /**
     * Get HCCPARAMS's EECP field.
     *
     * EECP
     */
    inline uint8_t get_HCCPARAMS_EECP() volatile
    {
        return (HCCPARAMS >> 8u) & 0b11111111u;
    }

    /**
     * Get HCCPARAMS's IST field.
     *
     * IST
     */
    inline uint8_t get_HCCPARAMS_IST() volatile
    {
        return (HCCPARAMS >> 4u) & 0b1111u;
    }

    /**
     * Get HCCPARAMS's ASP bit.
     *
     * ASP
     */
    inline bool get_HCCPARAMS_ASP() volatile
    {
        return HCCPARAMS & (1u << 2u);
    }

    /**
     * Get HCCPARAMS's PFL bit.
     *
     * PFL
     */
    inline bool get_HCCPARAMS_PFL() volatile
    {
        return HCCPARAMS & (1u << 1u);
    }

    /**
     * Get HCCPARAMS's ADC bit.
     *
     * ADC
     */
    inline bool get_HCCPARAMS_ADC() volatile
    {
        return HCCPARAMS & (1u << 0u);
    }

    /**
     * Get all of HCCPARAMS's bit fields.
     *
     * (read-write) Host Controller Capability Parameters
     */
    inline void get_HCCPARAMS(uint8_t &EECP, uint8_t &IST, bool &ASP,
                              bool &PFL, bool &ADC) volatile
    {
        uint32_t curr = HCCPARAMS;

        EECP = (curr >> 8u) & 0b11111111u;
        IST = (curr >> 4u) & 0b1111u;
        ASP = curr & (1u << 2u);
        PFL = curr & (1u << 1u);
        ADC = curr & (1u << 0u);
    }

    /**
     * Get DCIVERSION's DCIVERSION field.
     *
     * DCIVERSION
     */
    inline uint16_t get_DCIVERSION_DCIVERSION() volatile
    {
        return (DCIVERSION >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get DCCPARAMS's HC bit.
     *
     * HC
     */
    inline bool get_DCCPARAMS_HC() volatile
    {
        return DCCPARAMS & (1u << 8u);
    }

    /**
     * Get DCCPARAMS's DC bit.
     *
     * DC
     */
    inline bool get_DCCPARAMS_DC() volatile
    {
        return DCCPARAMS & (1u << 7u);
    }

    /**
     * Get DCCPARAMS's DEN field.
     *
     * DEN
     */
    inline uint8_t get_DCCPARAMS_DEN() volatile
    {
        return (DCCPARAMS >> 0u) & 0b11111u;
    }

    /**
     * Get all of DCCPARAMS's bit fields.
     *
     * (read-write) Device Controller Capability Parameters
     */
    inline void get_DCCPARAMS(bool &HC, bool &DC, uint8_t &DEN) volatile
    {
        uint32_t curr = DCCPARAMS;

        HC = curr & (1u << 8u);
        DC = curr & (1u << 7u);
        DEN = (curr >> 0u) & 0b11111u;
    }

    /**
     * Get USBCMD's ITC field.
     *
     * ITC
     */
    inline USB_OTG1_USBCMD_ITC get_USBCMD_ITC() volatile
    {
        return USB_OTG1_USBCMD_ITC((USBCMD >> 16u) & 0b11111111u);
    }

    /**
     * Set USBCMD's ITC field.
     *
     * ITC
     */
    inline void set_USBCMD_ITC(USB_OTG1_USBCMD_ITC value) volatile
    {
        uint32_t curr = USBCMD;

        curr &= ~(0b11111111u << 16u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 16u;

        USBCMD = curr;
    }

    /**
     * Get USBCMD's FS_2 bit.
     *
     * FS_2
     */
    inline bool get_USBCMD_FS_2() volatile
    {
        return USBCMD & (1u << 15u);
    }

    /**
     * Set USBCMD's FS_2 bit.
     *
     * FS_2
     */
    inline void set_USBCMD_FS_2() volatile
    {
        USBCMD |= 1u << 15u;
    }

    /**
     * Clear USBCMD's FS_2 bit.
     *
     * FS_2
     */
    inline void clear_USBCMD_FS_2() volatile
    {
        USBCMD &= ~(1u << 15u);
    }

    /**
     * Toggle USBCMD's FS_2 bit.
     *
     * FS_2
     */
    inline void toggle_USBCMD_FS_2() volatile
    {
        USBCMD ^= 1u << 15u;
    }

    /**
     * Get USBCMD's ATDTW bit.
     *
     * ATDTW
     */
    inline bool get_USBCMD_ATDTW() volatile
    {
        return USBCMD & (1u << 14u);
    }

    /**
     * Set USBCMD's ATDTW bit.
     *
     * ATDTW
     */
    inline void set_USBCMD_ATDTW() volatile
    {
        USBCMD |= 1u << 14u;
    }

    /**
     * Clear USBCMD's ATDTW bit.
     *
     * ATDTW
     */
    inline void clear_USBCMD_ATDTW() volatile
    {
        USBCMD &= ~(1u << 14u);
    }

    /**
     * Toggle USBCMD's ATDTW bit.
     *
     * ATDTW
     */
    inline void toggle_USBCMD_ATDTW() volatile
    {
        USBCMD ^= 1u << 14u;
    }

    /**
     * Get USBCMD's SUTW bit.
     *
     * SUTW
     */
    inline bool get_USBCMD_SUTW() volatile
    {
        return USBCMD & (1u << 13u);
    }

    /**
     * Set USBCMD's SUTW bit.
     *
     * SUTW
     */
    inline void set_USBCMD_SUTW() volatile
    {
        USBCMD |= 1u << 13u;
    }

    /**
     * Clear USBCMD's SUTW bit.
     *
     * SUTW
     */
    inline void clear_USBCMD_SUTW() volatile
    {
        USBCMD &= ~(1u << 13u);
    }

    /**
     * Toggle USBCMD's SUTW bit.
     *
     * SUTW
     */
    inline void toggle_USBCMD_SUTW() volatile
    {
        USBCMD ^= 1u << 13u;
    }

    /**
     * Get USBCMD's ASPE bit.
     *
     * ASPE
     */
    inline bool get_USBCMD_ASPE() volatile
    {
        return USBCMD & (1u << 11u);
    }

    /**
     * Set USBCMD's ASPE bit.
     *
     * ASPE
     */
    inline void set_USBCMD_ASPE() volatile
    {
        USBCMD |= 1u << 11u;
    }

    /**
     * Clear USBCMD's ASPE bit.
     *
     * ASPE
     */
    inline void clear_USBCMD_ASPE() volatile
    {
        USBCMD &= ~(1u << 11u);
    }

    /**
     * Toggle USBCMD's ASPE bit.
     *
     * ASPE
     */
    inline void toggle_USBCMD_ASPE() volatile
    {
        USBCMD ^= 1u << 11u;
    }

    /**
     * Get USBCMD's ASP field.
     *
     * ASP
     */
    inline uint8_t get_USBCMD_ASP() volatile
    {
        return (USBCMD >> 8u) & 0b11u;
    }

    /**
     * Set USBCMD's ASP field.
     *
     * ASP
     */
    inline void set_USBCMD_ASP(uint8_t value) volatile
    {
        uint32_t curr = USBCMD;

        curr &= ~(0b11u << 8u);
        curr |= (value & 0b11u) << 8u;

        USBCMD = curr;
    }

    /**
     * Get USBCMD's IAA bit.
     *
     * IAA
     */
    inline bool get_USBCMD_IAA() volatile
    {
        return USBCMD & (1u << 6u);
    }

    /**
     * Set USBCMD's IAA bit.
     *
     * IAA
     */
    inline void set_USBCMD_IAA() volatile
    {
        USBCMD |= 1u << 6u;
    }

    /**
     * Clear USBCMD's IAA bit.
     *
     * IAA
     */
    inline void clear_USBCMD_IAA() volatile
    {
        USBCMD &= ~(1u << 6u);
    }

    /**
     * Toggle USBCMD's IAA bit.
     *
     * IAA
     */
    inline void toggle_USBCMD_IAA() volatile
    {
        USBCMD ^= 1u << 6u;
    }

    /**
     * Get USBCMD's ASE bit.
     *
     * ASE
     */
    inline bool get_USBCMD_ASE() volatile
    {
        return USBCMD & (1u << 5u);
    }

    /**
     * Set USBCMD's ASE bit.
     *
     * ASE
     */
    inline void set_USBCMD_ASE() volatile
    {
        USBCMD |= 1u << 5u;
    }

    /**
     * Clear USBCMD's ASE bit.
     *
     * ASE
     */
    inline void clear_USBCMD_ASE() volatile
    {
        USBCMD &= ~(1u << 5u);
    }

    /**
     * Toggle USBCMD's ASE bit.
     *
     * ASE
     */
    inline void toggle_USBCMD_ASE() volatile
    {
        USBCMD ^= 1u << 5u;
    }

    /**
     * Get USBCMD's PSE bit.
     *
     * PSE
     */
    inline bool get_USBCMD_PSE() volatile
    {
        return USBCMD & (1u << 4u);
    }

    /**
     * Set USBCMD's PSE bit.
     *
     * PSE
     */
    inline void set_USBCMD_PSE() volatile
    {
        USBCMD |= 1u << 4u;
    }

    /**
     * Clear USBCMD's PSE bit.
     *
     * PSE
     */
    inline void clear_USBCMD_PSE() volatile
    {
        USBCMD &= ~(1u << 4u);
    }

    /**
     * Toggle USBCMD's PSE bit.
     *
     * PSE
     */
    inline void toggle_USBCMD_PSE() volatile
    {
        USBCMD ^= 1u << 4u;
    }

    /**
     * Get USBCMD's FS_1 field.
     *
     * FS_1
     */
    inline uint8_t get_USBCMD_FS_1() volatile
    {
        return (USBCMD >> 2u) & 0b11u;
    }

    /**
     * Set USBCMD's FS_1 field.
     *
     * FS_1
     */
    inline void set_USBCMD_FS_1(uint8_t value) volatile
    {
        uint32_t curr = USBCMD;

        curr &= ~(0b11u << 2u);
        curr |= (value & 0b11u) << 2u;

        USBCMD = curr;
    }

    /**
     * Get USBCMD's RST bit.
     *
     * RST
     */
    inline bool get_USBCMD_RST() volatile
    {
        return USBCMD & (1u << 1u);
    }

    /**
     * Set USBCMD's RST bit.
     *
     * RST
     */
    inline void set_USBCMD_RST() volatile
    {
        USBCMD |= 1u << 1u;
    }

    /**
     * Clear USBCMD's RST bit.
     *
     * RST
     */
    inline void clear_USBCMD_RST() volatile
    {
        USBCMD &= ~(1u << 1u);
    }

    /**
     * Toggle USBCMD's RST bit.
     *
     * RST
     */
    inline void toggle_USBCMD_RST() volatile
    {
        USBCMD ^= 1u << 1u;
    }

    /**
     * Get USBCMD's RS bit.
     *
     * RS
     */
    inline bool get_USBCMD_RS() volatile
    {
        return USBCMD & (1u << 0u);
    }

    /**
     * Set USBCMD's RS bit.
     *
     * RS
     */
    inline void set_USBCMD_RS() volatile
    {
        USBCMD |= 1u << 0u;
    }

    /**
     * Clear USBCMD's RS bit.
     *
     * RS
     */
    inline void clear_USBCMD_RS() volatile
    {
        USBCMD &= ~(1u << 0u);
    }

    /**
     * Toggle USBCMD's RS bit.
     *
     * RS
     */
    inline void toggle_USBCMD_RS() volatile
    {
        USBCMD ^= 1u << 0u;
    }

    /**
     * Get all of USBCMD's bit fields.
     *
     * (read-write) USB Command Register
     */
    inline void get_USBCMD(USB_OTG1_USBCMD_ITC &ITC, bool &FS_2, bool &ATDTW,
                           bool &SUTW, bool &ASPE, uint8_t &ASP, bool &IAA,
                           bool &ASE, bool &PSE, uint8_t &FS_1, bool &RST,
                           bool &RS) volatile
    {
        uint32_t curr = USBCMD;

        ITC = USB_OTG1_USBCMD_ITC((curr >> 16u) & 0b11111111u);
        FS_2 = curr & (1u << 15u);
        ATDTW = curr & (1u << 14u);
        SUTW = curr & (1u << 13u);
        ASPE = curr & (1u << 11u);
        ASP = (curr >> 8u) & 0b11u;
        IAA = curr & (1u << 6u);
        ASE = curr & (1u << 5u);
        PSE = curr & (1u << 4u);
        FS_1 = (curr >> 2u) & 0b11u;
        RST = curr & (1u << 1u);
        RS = curr & (1u << 0u);
    }

    /**
     * Set all of USBCMD's bit fields.
     *
     * (read-write) USB Command Register
     */
    inline void set_USBCMD(USB_OTG1_USBCMD_ITC ITC, bool FS_2, bool ATDTW,
                           bool SUTW, bool ASPE, uint8_t ASP, bool IAA,
                           bool ASE, bool PSE, uint8_t FS_1, bool RST,
                           bool RS) volatile
    {
        uint32_t curr = USBCMD;

        curr &= ~(0b11111111u << 16u);
        curr |= (std::to_underlying(ITC) & 0b11111111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (FS_2 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (ATDTW & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (SUTW & 0b1u) << 13u;
        curr &= ~(0b1u << 11u);
        curr |= (ASPE & 0b1u) << 11u;
        curr &= ~(0b11u << 8u);
        curr |= (ASP & 0b11u) << 8u;
        curr &= ~(0b1u << 6u);
        curr |= (IAA & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (ASE & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (PSE & 0b1u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (FS_1 & 0b11u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (RST & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RS & 0b1u) << 0u;

        USBCMD = curr;
    }

    /**
     * Get USBSTS's TI1 bit.
     *
     * TI1
     */
    inline bool get_USBSTS_TI1() volatile
    {
        return USBSTS & (1u << 25u);
    }

    /**
     * Set USBSTS's TI1 bit.
     *
     * TI1
     */
    inline void set_USBSTS_TI1() volatile
    {
        USBSTS |= 1u << 25u;
    }

    /**
     * Clear USBSTS's TI1 bit.
     *
     * TI1
     */
    inline void clear_USBSTS_TI1() volatile
    {
        USBSTS &= ~(1u << 25u);
    }

    /**
     * Toggle USBSTS's TI1 bit.
     *
     * TI1
     */
    inline void toggle_USBSTS_TI1() volatile
    {
        USBSTS ^= 1u << 25u;
    }

    /**
     * Get USBSTS's TI0 bit.
     *
     * TI0
     */
    inline bool get_USBSTS_TI0() volatile
    {
        return USBSTS & (1u << 24u);
    }

    /**
     * Set USBSTS's TI0 bit.
     *
     * TI0
     */
    inline void set_USBSTS_TI0() volatile
    {
        USBSTS |= 1u << 24u;
    }

    /**
     * Clear USBSTS's TI0 bit.
     *
     * TI0
     */
    inline void clear_USBSTS_TI0() volatile
    {
        USBSTS &= ~(1u << 24u);
    }

    /**
     * Toggle USBSTS's TI0 bit.
     *
     * TI0
     */
    inline void toggle_USBSTS_TI0() volatile
    {
        USBSTS ^= 1u << 24u;
    }

    /**
     * Get USBSTS's NAKI bit.
     *
     * NAKI
     */
    inline bool get_USBSTS_NAKI() volatile
    {
        return USBSTS & (1u << 16u);
    }

    /**
     * Get USBSTS's AS bit.
     *
     * AS
     */
    inline bool get_USBSTS_AS() volatile
    {
        return USBSTS & (1u << 15u);
    }

    /**
     * Set USBSTS's AS bit.
     *
     * AS
     */
    inline void set_USBSTS_AS() volatile
    {
        USBSTS |= 1u << 15u;
    }

    /**
     * Clear USBSTS's AS bit.
     *
     * AS
     */
    inline void clear_USBSTS_AS() volatile
    {
        USBSTS &= ~(1u << 15u);
    }

    /**
     * Toggle USBSTS's AS bit.
     *
     * AS
     */
    inline void toggle_USBSTS_AS() volatile
    {
        USBSTS ^= 1u << 15u;
    }

    /**
     * Get USBSTS's PS bit.
     *
     * PS
     */
    inline bool get_USBSTS_PS() volatile
    {
        return USBSTS & (1u << 14u);
    }

    /**
     * Set USBSTS's PS bit.
     *
     * PS
     */
    inline void set_USBSTS_PS() volatile
    {
        USBSTS |= 1u << 14u;
    }

    /**
     * Clear USBSTS's PS bit.
     *
     * PS
     */
    inline void clear_USBSTS_PS() volatile
    {
        USBSTS &= ~(1u << 14u);
    }

    /**
     * Toggle USBSTS's PS bit.
     *
     * PS
     */
    inline void toggle_USBSTS_PS() volatile
    {
        USBSTS ^= 1u << 14u;
    }

    /**
     * Get USBSTS's RCL bit.
     *
     * RCL
     */
    inline bool get_USBSTS_RCL() volatile
    {
        return USBSTS & (1u << 13u);
    }

    /**
     * Set USBSTS's RCL bit.
     *
     * RCL
     */
    inline void set_USBSTS_RCL() volatile
    {
        USBSTS |= 1u << 13u;
    }

    /**
     * Clear USBSTS's RCL bit.
     *
     * RCL
     */
    inline void clear_USBSTS_RCL() volatile
    {
        USBSTS &= ~(1u << 13u);
    }

    /**
     * Toggle USBSTS's RCL bit.
     *
     * RCL
     */
    inline void toggle_USBSTS_RCL() volatile
    {
        USBSTS ^= 1u << 13u;
    }

    /**
     * Get USBSTS's HCH bit.
     *
     * HCH
     */
    inline bool get_USBSTS_HCH() volatile
    {
        return USBSTS & (1u << 12u);
    }

    /**
     * Set USBSTS's HCH bit.
     *
     * HCH
     */
    inline void set_USBSTS_HCH() volatile
    {
        USBSTS |= 1u << 12u;
    }

    /**
     * Clear USBSTS's HCH bit.
     *
     * HCH
     */
    inline void clear_USBSTS_HCH() volatile
    {
        USBSTS &= ~(1u << 12u);
    }

    /**
     * Toggle USBSTS's HCH bit.
     *
     * HCH
     */
    inline void toggle_USBSTS_HCH() volatile
    {
        USBSTS ^= 1u << 12u;
    }

    /**
     * Get USBSTS's ULPII bit.
     *
     * ULPII
     */
    inline bool get_USBSTS_ULPII() volatile
    {
        return USBSTS & (1u << 10u);
    }

    /**
     * Set USBSTS's ULPII bit.
     *
     * ULPII
     */
    inline void set_USBSTS_ULPII() volatile
    {
        USBSTS |= 1u << 10u;
    }

    /**
     * Clear USBSTS's ULPII bit.
     *
     * ULPII
     */
    inline void clear_USBSTS_ULPII() volatile
    {
        USBSTS &= ~(1u << 10u);
    }

    /**
     * Toggle USBSTS's ULPII bit.
     *
     * ULPII
     */
    inline void toggle_USBSTS_ULPII() volatile
    {
        USBSTS ^= 1u << 10u;
    }

    /**
     * Get USBSTS's SLI bit.
     *
     * SLI
     */
    inline bool get_USBSTS_SLI() volatile
    {
        return USBSTS & (1u << 8u);
    }

    /**
     * Set USBSTS's SLI bit.
     *
     * SLI
     */
    inline void set_USBSTS_SLI() volatile
    {
        USBSTS |= 1u << 8u;
    }

    /**
     * Clear USBSTS's SLI bit.
     *
     * SLI
     */
    inline void clear_USBSTS_SLI() volatile
    {
        USBSTS &= ~(1u << 8u);
    }

    /**
     * Toggle USBSTS's SLI bit.
     *
     * SLI
     */
    inline void toggle_USBSTS_SLI() volatile
    {
        USBSTS ^= 1u << 8u;
    }

    /**
     * Get USBSTS's SRI bit.
     *
     * SRI
     */
    inline bool get_USBSTS_SRI() volatile
    {
        return USBSTS & (1u << 7u);
    }

    /**
     * Set USBSTS's SRI bit.
     *
     * SRI
     */
    inline void set_USBSTS_SRI() volatile
    {
        USBSTS |= 1u << 7u;
    }

    /**
     * Clear USBSTS's SRI bit.
     *
     * SRI
     */
    inline void clear_USBSTS_SRI() volatile
    {
        USBSTS &= ~(1u << 7u);
    }

    /**
     * Toggle USBSTS's SRI bit.
     *
     * SRI
     */
    inline void toggle_USBSTS_SRI() volatile
    {
        USBSTS ^= 1u << 7u;
    }

    /**
     * Get USBSTS's URI bit.
     *
     * URI
     */
    inline bool get_USBSTS_URI() volatile
    {
        return USBSTS & (1u << 6u);
    }

    /**
     * Set USBSTS's URI bit.
     *
     * URI
     */
    inline void set_USBSTS_URI() volatile
    {
        USBSTS |= 1u << 6u;
    }

    /**
     * Clear USBSTS's URI bit.
     *
     * URI
     */
    inline void clear_USBSTS_URI() volatile
    {
        USBSTS &= ~(1u << 6u);
    }

    /**
     * Toggle USBSTS's URI bit.
     *
     * URI
     */
    inline void toggle_USBSTS_URI() volatile
    {
        USBSTS ^= 1u << 6u;
    }

    /**
     * Get USBSTS's AAI bit.
     *
     * AAI
     */
    inline bool get_USBSTS_AAI() volatile
    {
        return USBSTS & (1u << 5u);
    }

    /**
     * Set USBSTS's AAI bit.
     *
     * AAI
     */
    inline void set_USBSTS_AAI() volatile
    {
        USBSTS |= 1u << 5u;
    }

    /**
     * Clear USBSTS's AAI bit.
     *
     * AAI
     */
    inline void clear_USBSTS_AAI() volatile
    {
        USBSTS &= ~(1u << 5u);
    }

    /**
     * Toggle USBSTS's AAI bit.
     *
     * AAI
     */
    inline void toggle_USBSTS_AAI() volatile
    {
        USBSTS ^= 1u << 5u;
    }

    /**
     * Get USBSTS's SEI bit.
     *
     * SEI
     */
    inline bool get_USBSTS_SEI() volatile
    {
        return USBSTS & (1u << 4u);
    }

    /**
     * Set USBSTS's SEI bit.
     *
     * SEI
     */
    inline void set_USBSTS_SEI() volatile
    {
        USBSTS |= 1u << 4u;
    }

    /**
     * Clear USBSTS's SEI bit.
     *
     * SEI
     */
    inline void clear_USBSTS_SEI() volatile
    {
        USBSTS &= ~(1u << 4u);
    }

    /**
     * Toggle USBSTS's SEI bit.
     *
     * SEI
     */
    inline void toggle_USBSTS_SEI() volatile
    {
        USBSTS ^= 1u << 4u;
    }

    /**
     * Get USBSTS's FRI bit.
     *
     * FRI
     */
    inline bool get_USBSTS_FRI() volatile
    {
        return USBSTS & (1u << 3u);
    }

    /**
     * Set USBSTS's FRI bit.
     *
     * FRI
     */
    inline void set_USBSTS_FRI() volatile
    {
        USBSTS |= 1u << 3u;
    }

    /**
     * Clear USBSTS's FRI bit.
     *
     * FRI
     */
    inline void clear_USBSTS_FRI() volatile
    {
        USBSTS &= ~(1u << 3u);
    }

    /**
     * Toggle USBSTS's FRI bit.
     *
     * FRI
     */
    inline void toggle_USBSTS_FRI() volatile
    {
        USBSTS ^= 1u << 3u;
    }

    /**
     * Get USBSTS's PCI bit.
     *
     * PCI
     */
    inline bool get_USBSTS_PCI() volatile
    {
        return USBSTS & (1u << 2u);
    }

    /**
     * Set USBSTS's PCI bit.
     *
     * PCI
     */
    inline void set_USBSTS_PCI() volatile
    {
        USBSTS |= 1u << 2u;
    }

    /**
     * Clear USBSTS's PCI bit.
     *
     * PCI
     */
    inline void clear_USBSTS_PCI() volatile
    {
        USBSTS &= ~(1u << 2u);
    }

    /**
     * Toggle USBSTS's PCI bit.
     *
     * PCI
     */
    inline void toggle_USBSTS_PCI() volatile
    {
        USBSTS ^= 1u << 2u;
    }

    /**
     * Get USBSTS's UEI bit.
     *
     * UEI
     */
    inline bool get_USBSTS_UEI() volatile
    {
        return USBSTS & (1u << 1u);
    }

    /**
     * Set USBSTS's UEI bit.
     *
     * UEI
     */
    inline void set_USBSTS_UEI() volatile
    {
        USBSTS |= 1u << 1u;
    }

    /**
     * Clear USBSTS's UEI bit.
     *
     * UEI
     */
    inline void clear_USBSTS_UEI() volatile
    {
        USBSTS &= ~(1u << 1u);
    }

    /**
     * Toggle USBSTS's UEI bit.
     *
     * UEI
     */
    inline void toggle_USBSTS_UEI() volatile
    {
        USBSTS ^= 1u << 1u;
    }

    /**
     * Get USBSTS's UI bit.
     *
     * UI
     */
    inline bool get_USBSTS_UI() volatile
    {
        return USBSTS & (1u << 0u);
    }

    /**
     * Set USBSTS's UI bit.
     *
     * UI
     */
    inline void set_USBSTS_UI() volatile
    {
        USBSTS |= 1u << 0u;
    }

    /**
     * Clear USBSTS's UI bit.
     *
     * UI
     */
    inline void clear_USBSTS_UI() volatile
    {
        USBSTS &= ~(1u << 0u);
    }

    /**
     * Toggle USBSTS's UI bit.
     *
     * UI
     */
    inline void toggle_USBSTS_UI() volatile
    {
        USBSTS ^= 1u << 0u;
    }

    /**
     * Get all of USBSTS's bit fields.
     *
     * (read-write) USB Status Register
     */
    inline void get_USBSTS(bool &TI1, bool &TI0, bool &NAKI, bool &AS,
                           bool &PS, bool &RCL, bool &HCH, bool &ULPII,
                           bool &SLI, bool &SRI, bool &URI, bool &AAI,
                           bool &SEI, bool &FRI, bool &PCI, bool &UEI,
                           bool &UI) volatile
    {
        uint32_t curr = USBSTS;

        TI1 = curr & (1u << 25u);
        TI0 = curr & (1u << 24u);
        NAKI = curr & (1u << 16u);
        AS = curr & (1u << 15u);
        PS = curr & (1u << 14u);
        RCL = curr & (1u << 13u);
        HCH = curr & (1u << 12u);
        ULPII = curr & (1u << 10u);
        SLI = curr & (1u << 8u);
        SRI = curr & (1u << 7u);
        URI = curr & (1u << 6u);
        AAI = curr & (1u << 5u);
        SEI = curr & (1u << 4u);
        FRI = curr & (1u << 3u);
        PCI = curr & (1u << 2u);
        UEI = curr & (1u << 1u);
        UI = curr & (1u << 0u);
    }

    /**
     * Set all of USBSTS's bit fields.
     *
     * (read-write) USB Status Register
     */
    inline void set_USBSTS(bool TI1, bool TI0, bool AS, bool PS, bool RCL,
                           bool HCH, bool ULPII, bool SLI, bool SRI, bool URI,
                           bool AAI, bool SEI, bool FRI, bool PCI, bool UEI,
                           bool UI) volatile
    {
        uint32_t curr = USBSTS;

        curr &= ~(0b1u << 25u);
        curr |= (TI1 & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (TI0 & 0b1u) << 24u;
        curr &= ~(0b1u << 15u);
        curr |= (AS & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (PS & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (RCL & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (HCH & 0b1u) << 12u;
        curr &= ~(0b1u << 10u);
        curr |= (ULPII & 0b1u) << 10u;
        curr &= ~(0b1u << 8u);
        curr |= (SLI & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (SRI & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (URI & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (AAI & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (SEI & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (FRI & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PCI & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (UEI & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (UI & 0b1u) << 0u;

        USBSTS = curr;
    }

    /**
     * Get USBINTR's TIE1 bit.
     *
     * TIE1
     */
    inline bool get_USBINTR_TIE1() volatile
    {
        return USBINTR & (1u << 25u);
    }

    /**
     * Set USBINTR's TIE1 bit.
     *
     * TIE1
     */
    inline void set_USBINTR_TIE1() volatile
    {
        USBINTR |= 1u << 25u;
    }

    /**
     * Clear USBINTR's TIE1 bit.
     *
     * TIE1
     */
    inline void clear_USBINTR_TIE1() volatile
    {
        USBINTR &= ~(1u << 25u);
    }

    /**
     * Toggle USBINTR's TIE1 bit.
     *
     * TIE1
     */
    inline void toggle_USBINTR_TIE1() volatile
    {
        USBINTR ^= 1u << 25u;
    }

    /**
     * Get USBINTR's TIE0 bit.
     *
     * TIE0
     */
    inline bool get_USBINTR_TIE0() volatile
    {
        return USBINTR & (1u << 24u);
    }

    /**
     * Set USBINTR's TIE0 bit.
     *
     * TIE0
     */
    inline void set_USBINTR_TIE0() volatile
    {
        USBINTR |= 1u << 24u;
    }

    /**
     * Clear USBINTR's TIE0 bit.
     *
     * TIE0
     */
    inline void clear_USBINTR_TIE0() volatile
    {
        USBINTR &= ~(1u << 24u);
    }

    /**
     * Toggle USBINTR's TIE0 bit.
     *
     * TIE0
     */
    inline void toggle_USBINTR_TIE0() volatile
    {
        USBINTR ^= 1u << 24u;
    }

    /**
     * Get USBINTR's UPIE bit.
     *
     * UPIE
     */
    inline bool get_USBINTR_UPIE() volatile
    {
        return USBINTR & (1u << 19u);
    }

    /**
     * Set USBINTR's UPIE bit.
     *
     * UPIE
     */
    inline void set_USBINTR_UPIE() volatile
    {
        USBINTR |= 1u << 19u;
    }

    /**
     * Clear USBINTR's UPIE bit.
     *
     * UPIE
     */
    inline void clear_USBINTR_UPIE() volatile
    {
        USBINTR &= ~(1u << 19u);
    }

    /**
     * Toggle USBINTR's UPIE bit.
     *
     * UPIE
     */
    inline void toggle_USBINTR_UPIE() volatile
    {
        USBINTR ^= 1u << 19u;
    }

    /**
     * Get USBINTR's UAIE bit.
     *
     * UAIE
     */
    inline bool get_USBINTR_UAIE() volatile
    {
        return USBINTR & (1u << 18u);
    }

    /**
     * Set USBINTR's UAIE bit.
     *
     * UAIE
     */
    inline void set_USBINTR_UAIE() volatile
    {
        USBINTR |= 1u << 18u;
    }

    /**
     * Clear USBINTR's UAIE bit.
     *
     * UAIE
     */
    inline void clear_USBINTR_UAIE() volatile
    {
        USBINTR &= ~(1u << 18u);
    }

    /**
     * Toggle USBINTR's UAIE bit.
     *
     * UAIE
     */
    inline void toggle_USBINTR_UAIE() volatile
    {
        USBINTR ^= 1u << 18u;
    }

    /**
     * Get USBINTR's NAKE bit.
     *
     * NAKE
     */
    inline bool get_USBINTR_NAKE() volatile
    {
        return USBINTR & (1u << 16u);
    }

    /**
     * Set USBINTR's NAKE bit.
     *
     * NAKE
     */
    inline void set_USBINTR_NAKE() volatile
    {
        USBINTR |= 1u << 16u;
    }

    /**
     * Clear USBINTR's NAKE bit.
     *
     * NAKE
     */
    inline void clear_USBINTR_NAKE() volatile
    {
        USBINTR &= ~(1u << 16u);
    }

    /**
     * Toggle USBINTR's NAKE bit.
     *
     * NAKE
     */
    inline void toggle_USBINTR_NAKE() volatile
    {
        USBINTR ^= 1u << 16u;
    }

    /**
     * Get USBINTR's ULPIE bit.
     *
     * ULPIE
     */
    inline bool get_USBINTR_ULPIE() volatile
    {
        return USBINTR & (1u << 10u);
    }

    /**
     * Set USBINTR's ULPIE bit.
     *
     * ULPIE
     */
    inline void set_USBINTR_ULPIE() volatile
    {
        USBINTR |= 1u << 10u;
    }

    /**
     * Clear USBINTR's ULPIE bit.
     *
     * ULPIE
     */
    inline void clear_USBINTR_ULPIE() volatile
    {
        USBINTR &= ~(1u << 10u);
    }

    /**
     * Toggle USBINTR's ULPIE bit.
     *
     * ULPIE
     */
    inline void toggle_USBINTR_ULPIE() volatile
    {
        USBINTR ^= 1u << 10u;
    }

    /**
     * Get USBINTR's SLE bit.
     *
     * SLE
     */
    inline bool get_USBINTR_SLE() volatile
    {
        return USBINTR & (1u << 8u);
    }

    /**
     * Set USBINTR's SLE bit.
     *
     * SLE
     */
    inline void set_USBINTR_SLE() volatile
    {
        USBINTR |= 1u << 8u;
    }

    /**
     * Clear USBINTR's SLE bit.
     *
     * SLE
     */
    inline void clear_USBINTR_SLE() volatile
    {
        USBINTR &= ~(1u << 8u);
    }

    /**
     * Toggle USBINTR's SLE bit.
     *
     * SLE
     */
    inline void toggle_USBINTR_SLE() volatile
    {
        USBINTR ^= 1u << 8u;
    }

    /**
     * Get USBINTR's SRE bit.
     *
     * SRE
     */
    inline bool get_USBINTR_SRE() volatile
    {
        return USBINTR & (1u << 7u);
    }

    /**
     * Set USBINTR's SRE bit.
     *
     * SRE
     */
    inline void set_USBINTR_SRE() volatile
    {
        USBINTR |= 1u << 7u;
    }

    /**
     * Clear USBINTR's SRE bit.
     *
     * SRE
     */
    inline void clear_USBINTR_SRE() volatile
    {
        USBINTR &= ~(1u << 7u);
    }

    /**
     * Toggle USBINTR's SRE bit.
     *
     * SRE
     */
    inline void toggle_USBINTR_SRE() volatile
    {
        USBINTR ^= 1u << 7u;
    }

    /**
     * Get USBINTR's URE bit.
     *
     * URE
     */
    inline bool get_USBINTR_URE() volatile
    {
        return USBINTR & (1u << 6u);
    }

    /**
     * Set USBINTR's URE bit.
     *
     * URE
     */
    inline void set_USBINTR_URE() volatile
    {
        USBINTR |= 1u << 6u;
    }

    /**
     * Clear USBINTR's URE bit.
     *
     * URE
     */
    inline void clear_USBINTR_URE() volatile
    {
        USBINTR &= ~(1u << 6u);
    }

    /**
     * Toggle USBINTR's URE bit.
     *
     * URE
     */
    inline void toggle_USBINTR_URE() volatile
    {
        USBINTR ^= 1u << 6u;
    }

    /**
     * Get USBINTR's AAE bit.
     *
     * AAE
     */
    inline bool get_USBINTR_AAE() volatile
    {
        return USBINTR & (1u << 5u);
    }

    /**
     * Set USBINTR's AAE bit.
     *
     * AAE
     */
    inline void set_USBINTR_AAE() volatile
    {
        USBINTR |= 1u << 5u;
    }

    /**
     * Clear USBINTR's AAE bit.
     *
     * AAE
     */
    inline void clear_USBINTR_AAE() volatile
    {
        USBINTR &= ~(1u << 5u);
    }

    /**
     * Toggle USBINTR's AAE bit.
     *
     * AAE
     */
    inline void toggle_USBINTR_AAE() volatile
    {
        USBINTR ^= 1u << 5u;
    }

    /**
     * Get USBINTR's SEE bit.
     *
     * SEE
     */
    inline bool get_USBINTR_SEE() volatile
    {
        return USBINTR & (1u << 4u);
    }

    /**
     * Set USBINTR's SEE bit.
     *
     * SEE
     */
    inline void set_USBINTR_SEE() volatile
    {
        USBINTR |= 1u << 4u;
    }

    /**
     * Clear USBINTR's SEE bit.
     *
     * SEE
     */
    inline void clear_USBINTR_SEE() volatile
    {
        USBINTR &= ~(1u << 4u);
    }

    /**
     * Toggle USBINTR's SEE bit.
     *
     * SEE
     */
    inline void toggle_USBINTR_SEE() volatile
    {
        USBINTR ^= 1u << 4u;
    }

    /**
     * Get USBINTR's FRE bit.
     *
     * FRE
     */
    inline bool get_USBINTR_FRE() volatile
    {
        return USBINTR & (1u << 3u);
    }

    /**
     * Set USBINTR's FRE bit.
     *
     * FRE
     */
    inline void set_USBINTR_FRE() volatile
    {
        USBINTR |= 1u << 3u;
    }

    /**
     * Clear USBINTR's FRE bit.
     *
     * FRE
     */
    inline void clear_USBINTR_FRE() volatile
    {
        USBINTR &= ~(1u << 3u);
    }

    /**
     * Toggle USBINTR's FRE bit.
     *
     * FRE
     */
    inline void toggle_USBINTR_FRE() volatile
    {
        USBINTR ^= 1u << 3u;
    }

    /**
     * Get USBINTR's PCE bit.
     *
     * PCE
     */
    inline bool get_USBINTR_PCE() volatile
    {
        return USBINTR & (1u << 2u);
    }

    /**
     * Set USBINTR's PCE bit.
     *
     * PCE
     */
    inline void set_USBINTR_PCE() volatile
    {
        USBINTR |= 1u << 2u;
    }

    /**
     * Clear USBINTR's PCE bit.
     *
     * PCE
     */
    inline void clear_USBINTR_PCE() volatile
    {
        USBINTR &= ~(1u << 2u);
    }

    /**
     * Toggle USBINTR's PCE bit.
     *
     * PCE
     */
    inline void toggle_USBINTR_PCE() volatile
    {
        USBINTR ^= 1u << 2u;
    }

    /**
     * Get USBINTR's UEE bit.
     *
     * UEE
     */
    inline bool get_USBINTR_UEE() volatile
    {
        return USBINTR & (1u << 1u);
    }

    /**
     * Set USBINTR's UEE bit.
     *
     * UEE
     */
    inline void set_USBINTR_UEE() volatile
    {
        USBINTR |= 1u << 1u;
    }

    /**
     * Clear USBINTR's UEE bit.
     *
     * UEE
     */
    inline void clear_USBINTR_UEE() volatile
    {
        USBINTR &= ~(1u << 1u);
    }

    /**
     * Toggle USBINTR's UEE bit.
     *
     * UEE
     */
    inline void toggle_USBINTR_UEE() volatile
    {
        USBINTR ^= 1u << 1u;
    }

    /**
     * Get USBINTR's UE bit.
     *
     * UE
     */
    inline bool get_USBINTR_UE() volatile
    {
        return USBINTR & (1u << 0u);
    }

    /**
     * Set USBINTR's UE bit.
     *
     * UE
     */
    inline void set_USBINTR_UE() volatile
    {
        USBINTR |= 1u << 0u;
    }

    /**
     * Clear USBINTR's UE bit.
     *
     * UE
     */
    inline void clear_USBINTR_UE() volatile
    {
        USBINTR &= ~(1u << 0u);
    }

    /**
     * Toggle USBINTR's UE bit.
     *
     * UE
     */
    inline void toggle_USBINTR_UE() volatile
    {
        USBINTR ^= 1u << 0u;
    }

    /**
     * Get all of USBINTR's bit fields.
     *
     * (read-write) Interrupt Enable Register
     */
    inline void get_USBINTR(bool &TIE1, bool &TIE0, bool &UPIE, bool &UAIE,
                            bool &NAKE, bool &ULPIE, bool &SLE, bool &SRE,
                            bool &URE, bool &AAE, bool &SEE, bool &FRE,
                            bool &PCE, bool &UEE, bool &UE) volatile
    {
        uint32_t curr = USBINTR;

        TIE1 = curr & (1u << 25u);
        TIE0 = curr & (1u << 24u);
        UPIE = curr & (1u << 19u);
        UAIE = curr & (1u << 18u);
        NAKE = curr & (1u << 16u);
        ULPIE = curr & (1u << 10u);
        SLE = curr & (1u << 8u);
        SRE = curr & (1u << 7u);
        URE = curr & (1u << 6u);
        AAE = curr & (1u << 5u);
        SEE = curr & (1u << 4u);
        FRE = curr & (1u << 3u);
        PCE = curr & (1u << 2u);
        UEE = curr & (1u << 1u);
        UE = curr & (1u << 0u);
    }

    /**
     * Set all of USBINTR's bit fields.
     *
     * (read-write) Interrupt Enable Register
     */
    inline void set_USBINTR(bool TIE1, bool TIE0, bool UPIE, bool UAIE,
                            bool NAKE, bool ULPIE, bool SLE, bool SRE,
                            bool URE, bool AAE, bool SEE, bool FRE, bool PCE,
                            bool UEE, bool UE) volatile
    {
        uint32_t curr = USBINTR;

        curr &= ~(0b1u << 25u);
        curr |= (TIE1 & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (TIE0 & 0b1u) << 24u;
        curr &= ~(0b1u << 19u);
        curr |= (UPIE & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (UAIE & 0b1u) << 18u;
        curr &= ~(0b1u << 16u);
        curr |= (NAKE & 0b1u) << 16u;
        curr &= ~(0b1u << 10u);
        curr |= (ULPIE & 0b1u) << 10u;
        curr &= ~(0b1u << 8u);
        curr |= (SLE & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (SRE & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (URE & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (AAE & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (SEE & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (FRE & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PCE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (UEE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (UE & 0b1u) << 0u;

        USBINTR = curr;
    }

    /**
     * Get FRINDEX's FRINDEX field.
     *
     * FRINDEX
     */
    inline USB_OTG1_FRINDEX_FRINDEX get_FRINDEX_FRINDEX() volatile
    {
        return USB_OTG1_FRINDEX_FRINDEX((FRINDEX >> 0u) & 0b11111111111111u);
    }

    /**
     * Set FRINDEX's FRINDEX field.
     *
     * FRINDEX
     */
    inline void set_FRINDEX_FRINDEX(USB_OTG1_FRINDEX_FRINDEX value) volatile
    {
        uint32_t curr = FRINDEX;

        curr &= ~(0b11111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111111111u) << 0u;

        FRINDEX = curr;
    }

    /**
     * Get DEVICEADDR's USBADR field.
     *
     * USBADR
     */
    inline uint8_t get_DEVICEADDR_USBADR() volatile
    {
        return (DEVICEADDR >> 25u) & 0b1111111u;
    }

    /**
     * Set DEVICEADDR's USBADR field.
     *
     * USBADR
     */
    inline void set_DEVICEADDR_USBADR(uint8_t value) volatile
    {
        uint32_t curr = DEVICEADDR;

        curr &= ~(0b1111111u << 25u);
        curr |= (value & 0b1111111u) << 25u;

        DEVICEADDR = curr;
    }

    /**
     * Get DEVICEADDR's USBADRA bit.
     *
     * USBADRA
     */
    inline bool get_DEVICEADDR_USBADRA() volatile
    {
        return DEVICEADDR & (1u << 24u);
    }

    /**
     * Set DEVICEADDR's USBADRA bit.
     *
     * USBADRA
     */
    inline void set_DEVICEADDR_USBADRA() volatile
    {
        DEVICEADDR |= 1u << 24u;
    }

    /**
     * Clear DEVICEADDR's USBADRA bit.
     *
     * USBADRA
     */
    inline void clear_DEVICEADDR_USBADRA() volatile
    {
        DEVICEADDR &= ~(1u << 24u);
    }

    /**
     * Toggle DEVICEADDR's USBADRA bit.
     *
     * USBADRA
     */
    inline void toggle_DEVICEADDR_USBADRA() volatile
    {
        DEVICEADDR ^= 1u << 24u;
    }

    /**
     * Get all of DEVICEADDR's bit fields.
     *
     * (read-write) Device Address
     */
    inline void get_DEVICEADDR(uint8_t &USBADR, bool &USBADRA) volatile
    {
        uint32_t curr = DEVICEADDR;

        USBADR = (curr >> 25u) & 0b1111111u;
        USBADRA = curr & (1u << 24u);
    }

    /**
     * Set all of DEVICEADDR's bit fields.
     *
     * (read-write) Device Address
     */
    inline void set_DEVICEADDR(uint8_t USBADR, bool USBADRA) volatile
    {
        uint32_t curr = DEVICEADDR;

        curr &= ~(0b1111111u << 25u);
        curr |= (USBADR & 0b1111111u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (USBADRA & 0b1u) << 24u;

        DEVICEADDR = curr;
    }

    /**
     * Get BURSTSIZE's TXPBURST field.
     *
     * TXPBURST
     */
    inline uint16_t get_BURSTSIZE_TXPBURST() volatile
    {
        return (BURSTSIZE >> 8u) & 0b111111111u;
    }

    /**
     * Set BURSTSIZE's TXPBURST field.
     *
     * TXPBURST
     */
    inline void set_BURSTSIZE_TXPBURST(uint16_t value) volatile
    {
        uint32_t curr = BURSTSIZE;

        curr &= ~(0b111111111u << 8u);
        curr |= (value & 0b111111111u) << 8u;

        BURSTSIZE = curr;
    }

    /**
     * Get BURSTSIZE's RXPBURST field.
     *
     * RXPBURST
     */
    inline uint8_t get_BURSTSIZE_RXPBURST() volatile
    {
        return (BURSTSIZE >> 0u) & 0b11111111u;
    }

    /**
     * Set BURSTSIZE's RXPBURST field.
     *
     * RXPBURST
     */
    inline void set_BURSTSIZE_RXPBURST(uint8_t value) volatile
    {
        uint32_t curr = BURSTSIZE;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        BURSTSIZE = curr;
    }

    /**
     * Get all of BURSTSIZE's bit fields.
     *
     * (read-write) Programmable Burst Size
     */
    inline void get_BURSTSIZE(uint16_t &TXPBURST, uint8_t &RXPBURST) volatile
    {
        uint32_t curr = BURSTSIZE;

        TXPBURST = (curr >> 8u) & 0b111111111u;
        RXPBURST = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of BURSTSIZE's bit fields.
     *
     * (read-write) Programmable Burst Size
     */
    inline void set_BURSTSIZE(uint16_t TXPBURST, uint8_t RXPBURST) volatile
    {
        uint32_t curr = BURSTSIZE;

        curr &= ~(0b111111111u << 8u);
        curr |= (TXPBURST & 0b111111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (RXPBURST & 0b11111111u) << 0u;

        BURSTSIZE = curr;
    }

    /**
     * Get TXFILLTUNING's TXFIFOTHRES field.
     *
     * TXFIFOTHRES
     */
    inline uint8_t get_TXFILLTUNING_TXFIFOTHRES() volatile
    {
        return (TXFILLTUNING >> 16u) & 0b111111u;
    }

    /**
     * Set TXFILLTUNING's TXFIFOTHRES field.
     *
     * TXFIFOTHRES
     */
    inline void set_TXFILLTUNING_TXFIFOTHRES(uint8_t value) volatile
    {
        uint32_t curr = TXFILLTUNING;

        curr &= ~(0b111111u << 16u);
        curr |= (value & 0b111111u) << 16u;

        TXFILLTUNING = curr;
    }

    /**
     * Get TXFILLTUNING's TXSCHHEALTH field.
     *
     * TXSCHHEALTH
     */
    inline uint8_t get_TXFILLTUNING_TXSCHHEALTH() volatile
    {
        return (TXFILLTUNING >> 8u) & 0b11111u;
    }

    /**
     * Set TXFILLTUNING's TXSCHHEALTH field.
     *
     * TXSCHHEALTH
     */
    inline void set_TXFILLTUNING_TXSCHHEALTH(uint8_t value) volatile
    {
        uint32_t curr = TXFILLTUNING;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TXFILLTUNING = curr;
    }

    /**
     * Get TXFILLTUNING's TXSCHOH field.
     *
     * TXSCHOH
     */
    inline uint8_t get_TXFILLTUNING_TXSCHOH() volatile
    {
        return (TXFILLTUNING >> 0u) & 0b11111111u;
    }

    /**
     * Set TXFILLTUNING's TXSCHOH field.
     *
     * TXSCHOH
     */
    inline void set_TXFILLTUNING_TXSCHOH(uint8_t value) volatile
    {
        uint32_t curr = TXFILLTUNING;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        TXFILLTUNING = curr;
    }

    /**
     * Get all of TXFILLTUNING's bit fields.
     *
     * (read-write) TX FIFO Fill Tuning
     */
    inline void get_TXFILLTUNING(uint8_t &TXFIFOTHRES, uint8_t &TXSCHHEALTH,
                                 uint8_t &TXSCHOH) volatile
    {
        uint32_t curr = TXFILLTUNING;

        TXFIFOTHRES = (curr >> 16u) & 0b111111u;
        TXSCHHEALTH = (curr >> 8u) & 0b11111u;
        TXSCHOH = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of TXFILLTUNING's bit fields.
     *
     * (read-write) TX FIFO Fill Tuning
     */
    inline void set_TXFILLTUNING(uint8_t TXFIFOTHRES, uint8_t TXSCHHEALTH,
                                 uint8_t TXSCHOH) volatile
    {
        uint32_t curr = TXFILLTUNING;

        curr &= ~(0b111111u << 16u);
        curr |= (TXFIFOTHRES & 0b111111u) << 16u;
        curr &= ~(0b11111u << 8u);
        curr |= (TXSCHHEALTH & 0b11111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (TXSCHOH & 0b11111111u) << 0u;

        TXFILLTUNING = curr;
    }

    /**
     * Get ENDPTNAK's EPTN field.
     *
     * EPTN
     */
    inline uint8_t get_ENDPTNAK_EPTN() volatile
    {
        return (ENDPTNAK >> 16u) & 0b11111111u;
    }

    /**
     * Set ENDPTNAK's EPTN field.
     *
     * EPTN
     */
    inline void set_ENDPTNAK_EPTN(uint8_t value) volatile
    {
        uint32_t curr = ENDPTNAK;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        ENDPTNAK = curr;
    }

    /**
     * Get ENDPTNAK's EPRN field.
     *
     * EPRN
     */
    inline uint8_t get_ENDPTNAK_EPRN() volatile
    {
        return (ENDPTNAK >> 0u) & 0b11111111u;
    }

    /**
     * Set ENDPTNAK's EPRN field.
     *
     * EPRN
     */
    inline void set_ENDPTNAK_EPRN(uint8_t value) volatile
    {
        uint32_t curr = ENDPTNAK;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        ENDPTNAK = curr;
    }

    /**
     * Get all of ENDPTNAK's bit fields.
     *
     * (read-write) Endpoint NAK
     */
    inline void get_ENDPTNAK(uint8_t &EPTN, uint8_t &EPRN) volatile
    {
        uint32_t curr = ENDPTNAK;

        EPTN = (curr >> 16u) & 0b11111111u;
        EPRN = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of ENDPTNAK's bit fields.
     *
     * (read-write) Endpoint NAK
     */
    inline void set_ENDPTNAK(uint8_t EPTN, uint8_t EPRN) volatile
    {
        uint32_t curr = ENDPTNAK;

        curr &= ~(0b11111111u << 16u);
        curr |= (EPTN & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 0u);
        curr |= (EPRN & 0b11111111u) << 0u;

        ENDPTNAK = curr;
    }

    /**
     * Get ENDPTNAKEN's EPTNE field.
     *
     * EPTNE
     */
    inline uint8_t get_ENDPTNAKEN_EPTNE() volatile
    {
        return (ENDPTNAKEN >> 16u) & 0b11111111u;
    }

    /**
     * Set ENDPTNAKEN's EPTNE field.
     *
     * EPTNE
     */
    inline void set_ENDPTNAKEN_EPTNE(uint8_t value) volatile
    {
        uint32_t curr = ENDPTNAKEN;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        ENDPTNAKEN = curr;
    }

    /**
     * Get ENDPTNAKEN's EPRNE field.
     *
     * EPRNE
     */
    inline uint8_t get_ENDPTNAKEN_EPRNE() volatile
    {
        return (ENDPTNAKEN >> 0u) & 0b11111111u;
    }

    /**
     * Set ENDPTNAKEN's EPRNE field.
     *
     * EPRNE
     */
    inline void set_ENDPTNAKEN_EPRNE(uint8_t value) volatile
    {
        uint32_t curr = ENDPTNAKEN;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        ENDPTNAKEN = curr;
    }

    /**
     * Get all of ENDPTNAKEN's bit fields.
     *
     * (read-write) Endpoint NAK Enable
     */
    inline void get_ENDPTNAKEN(uint8_t &EPTNE, uint8_t &EPRNE) volatile
    {
        uint32_t curr = ENDPTNAKEN;

        EPTNE = (curr >> 16u) & 0b11111111u;
        EPRNE = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of ENDPTNAKEN's bit fields.
     *
     * (read-write) Endpoint NAK Enable
     */
    inline void set_ENDPTNAKEN(uint8_t EPTNE, uint8_t EPRNE) volatile
    {
        uint32_t curr = ENDPTNAKEN;

        curr &= ~(0b11111111u << 16u);
        curr |= (EPTNE & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 0u);
        curr |= (EPRNE & 0b11111111u) << 0u;

        ENDPTNAKEN = curr;
    }

    /**
     * Get CONFIGFLAG's CF bit.
     *
     * CF
     */
    inline bool get_CONFIGFLAG_CF() volatile
    {
        return CONFIGFLAG & (1u << 0u);
    }

    /**
     * Get PORTSC1's PTS_1 field.
     *
     * PTS_1
     */
    inline uint8_t get_PORTSC1_PTS_1() volatile
    {
        return (PORTSC1 >> 30u) & 0b11u;
    }

    /**
     * Set PORTSC1's PTS_1 field.
     *
     * PTS_1
     */
    inline void set_PORTSC1_PTS_1(uint8_t value) volatile
    {
        uint32_t curr = PORTSC1;

        curr &= ~(0b11u << 30u);
        curr |= (value & 0b11u) << 30u;

        PORTSC1 = curr;
    }

    /**
     * Get PORTSC1's STS bit.
     *
     * STS
     */
    inline bool get_PORTSC1_STS() volatile
    {
        return PORTSC1 & (1u << 29u);
    }

    /**
     * Set PORTSC1's STS bit.
     *
     * STS
     */
    inline void set_PORTSC1_STS() volatile
    {
        PORTSC1 |= 1u << 29u;
    }

    /**
     * Clear PORTSC1's STS bit.
     *
     * STS
     */
    inline void clear_PORTSC1_STS() volatile
    {
        PORTSC1 &= ~(1u << 29u);
    }

    /**
     * Toggle PORTSC1's STS bit.
     *
     * STS
     */
    inline void toggle_PORTSC1_STS() volatile
    {
        PORTSC1 ^= 1u << 29u;
    }

    /**
     * Get PORTSC1's PTW bit.
     *
     * PTW
     */
    inline bool get_PORTSC1_PTW() volatile
    {
        return PORTSC1 & (1u << 28u);
    }

    /**
     * Set PORTSC1's PTW bit.
     *
     * PTW
     */
    inline void set_PORTSC1_PTW() volatile
    {
        PORTSC1 |= 1u << 28u;
    }

    /**
     * Clear PORTSC1's PTW bit.
     *
     * PTW
     */
    inline void clear_PORTSC1_PTW() volatile
    {
        PORTSC1 &= ~(1u << 28u);
    }

    /**
     * Toggle PORTSC1's PTW bit.
     *
     * PTW
     */
    inline void toggle_PORTSC1_PTW() volatile
    {
        PORTSC1 ^= 1u << 28u;
    }

    /**
     * Get PORTSC1's PSPD field.
     *
     * PSPD
     */
    inline USB_OTG1_PORTSC1_PSPD get_PORTSC1_PSPD() volatile
    {
        return USB_OTG1_PORTSC1_PSPD((PORTSC1 >> 26u) & 0b11u);
    }

    /**
     * Set PORTSC1's PSPD field.
     *
     * PSPD
     */
    inline void set_PORTSC1_PSPD(USB_OTG1_PORTSC1_PSPD value) volatile
    {
        uint32_t curr = PORTSC1;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        PORTSC1 = curr;
    }

    /**
     * Get PORTSC1's PTS_2 bit.
     *
     * PTS_2
     */
    inline bool get_PORTSC1_PTS_2() volatile
    {
        return PORTSC1 & (1u << 25u);
    }

    /**
     * Set PORTSC1's PTS_2 bit.
     *
     * PTS_2
     */
    inline void set_PORTSC1_PTS_2() volatile
    {
        PORTSC1 |= 1u << 25u;
    }

    /**
     * Clear PORTSC1's PTS_2 bit.
     *
     * PTS_2
     */
    inline void clear_PORTSC1_PTS_2() volatile
    {
        PORTSC1 &= ~(1u << 25u);
    }

    /**
     * Toggle PORTSC1's PTS_2 bit.
     *
     * PTS_2
     */
    inline void toggle_PORTSC1_PTS_2() volatile
    {
        PORTSC1 ^= 1u << 25u;
    }

    /**
     * Get PORTSC1's PFSC bit.
     *
     * PFSC
     */
    inline bool get_PORTSC1_PFSC() volatile
    {
        return PORTSC1 & (1u << 24u);
    }

    /**
     * Set PORTSC1's PFSC bit.
     *
     * PFSC
     */
    inline void set_PORTSC1_PFSC() volatile
    {
        PORTSC1 |= 1u << 24u;
    }

    /**
     * Clear PORTSC1's PFSC bit.
     *
     * PFSC
     */
    inline void clear_PORTSC1_PFSC() volatile
    {
        PORTSC1 &= ~(1u << 24u);
    }

    /**
     * Toggle PORTSC1's PFSC bit.
     *
     * PFSC
     */
    inline void toggle_PORTSC1_PFSC() volatile
    {
        PORTSC1 ^= 1u << 24u;
    }

    /**
     * Get PORTSC1's PHCD bit.
     *
     * PHCD
     */
    inline bool get_PORTSC1_PHCD() volatile
    {
        return PORTSC1 & (1u << 23u);
    }

    /**
     * Set PORTSC1's PHCD bit.
     *
     * PHCD
     */
    inline void set_PORTSC1_PHCD() volatile
    {
        PORTSC1 |= 1u << 23u;
    }

    /**
     * Clear PORTSC1's PHCD bit.
     *
     * PHCD
     */
    inline void clear_PORTSC1_PHCD() volatile
    {
        PORTSC1 &= ~(1u << 23u);
    }

    /**
     * Toggle PORTSC1's PHCD bit.
     *
     * PHCD
     */
    inline void toggle_PORTSC1_PHCD() volatile
    {
        PORTSC1 ^= 1u << 23u;
    }

    /**
     * Get PORTSC1's WKOC bit.
     *
     * WKOC
     */
    inline bool get_PORTSC1_WKOC() volatile
    {
        return PORTSC1 & (1u << 22u);
    }

    /**
     * Set PORTSC1's WKOC bit.
     *
     * WKOC
     */
    inline void set_PORTSC1_WKOC() volatile
    {
        PORTSC1 |= 1u << 22u;
    }

    /**
     * Clear PORTSC1's WKOC bit.
     *
     * WKOC
     */
    inline void clear_PORTSC1_WKOC() volatile
    {
        PORTSC1 &= ~(1u << 22u);
    }

    /**
     * Toggle PORTSC1's WKOC bit.
     *
     * WKOC
     */
    inline void toggle_PORTSC1_WKOC() volatile
    {
        PORTSC1 ^= 1u << 22u;
    }

    /**
     * Get PORTSC1's WKDC bit.
     *
     * WKDC
     */
    inline bool get_PORTSC1_WKDC() volatile
    {
        return PORTSC1 & (1u << 21u);
    }

    /**
     * Set PORTSC1's WKDC bit.
     *
     * WKDC
     */
    inline void set_PORTSC1_WKDC() volatile
    {
        PORTSC1 |= 1u << 21u;
    }

    /**
     * Clear PORTSC1's WKDC bit.
     *
     * WKDC
     */
    inline void clear_PORTSC1_WKDC() volatile
    {
        PORTSC1 &= ~(1u << 21u);
    }

    /**
     * Toggle PORTSC1's WKDC bit.
     *
     * WKDC
     */
    inline void toggle_PORTSC1_WKDC() volatile
    {
        PORTSC1 ^= 1u << 21u;
    }

    /**
     * Get PORTSC1's WKCN bit.
     *
     * WKCN
     */
    inline bool get_PORTSC1_WKCN() volatile
    {
        return PORTSC1 & (1u << 20u);
    }

    /**
     * Set PORTSC1's WKCN bit.
     *
     * WKCN
     */
    inline void set_PORTSC1_WKCN() volatile
    {
        PORTSC1 |= 1u << 20u;
    }

    /**
     * Clear PORTSC1's WKCN bit.
     *
     * WKCN
     */
    inline void clear_PORTSC1_WKCN() volatile
    {
        PORTSC1 &= ~(1u << 20u);
    }

    /**
     * Toggle PORTSC1's WKCN bit.
     *
     * WKCN
     */
    inline void toggle_PORTSC1_WKCN() volatile
    {
        PORTSC1 ^= 1u << 20u;
    }

    /**
     * Get PORTSC1's PTC field.
     *
     * PTC
     */
    inline USB_OTG1_PORTSC1_PTC get_PORTSC1_PTC() volatile
    {
        return USB_OTG1_PORTSC1_PTC((PORTSC1 >> 16u) & 0b1111u);
    }

    /**
     * Set PORTSC1's PTC field.
     *
     * PTC
     */
    inline void set_PORTSC1_PTC(USB_OTG1_PORTSC1_PTC value) volatile
    {
        uint32_t curr = PORTSC1;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        PORTSC1 = curr;
    }

    /**
     * Get PORTSC1's PIC field.
     *
     * PIC
     */
    inline USB_OTG1_PORTSC1_PIC get_PORTSC1_PIC() volatile
    {
        return USB_OTG1_PORTSC1_PIC((PORTSC1 >> 14u) & 0b11u);
    }

    /**
     * Set PORTSC1's PIC field.
     *
     * PIC
     */
    inline void set_PORTSC1_PIC(USB_OTG1_PORTSC1_PIC value) volatile
    {
        uint32_t curr = PORTSC1;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        PORTSC1 = curr;
    }

    /**
     * Get PORTSC1's PO bit.
     *
     * PO
     */
    inline bool get_PORTSC1_PO() volatile
    {
        return PORTSC1 & (1u << 13u);
    }

    /**
     * Set PORTSC1's PO bit.
     *
     * PO
     */
    inline void set_PORTSC1_PO() volatile
    {
        PORTSC1 |= 1u << 13u;
    }

    /**
     * Clear PORTSC1's PO bit.
     *
     * PO
     */
    inline void clear_PORTSC1_PO() volatile
    {
        PORTSC1 &= ~(1u << 13u);
    }

    /**
     * Toggle PORTSC1's PO bit.
     *
     * PO
     */
    inline void toggle_PORTSC1_PO() volatile
    {
        PORTSC1 ^= 1u << 13u;
    }

    /**
     * Get PORTSC1's PP bit.
     *
     * PP
     */
    inline bool get_PORTSC1_PP() volatile
    {
        return PORTSC1 & (1u << 12u);
    }

    /**
     * Set PORTSC1's PP bit.
     *
     * PP
     */
    inline void set_PORTSC1_PP() volatile
    {
        PORTSC1 |= 1u << 12u;
    }

    /**
     * Clear PORTSC1's PP bit.
     *
     * PP
     */
    inline void clear_PORTSC1_PP() volatile
    {
        PORTSC1 &= ~(1u << 12u);
    }

    /**
     * Toggle PORTSC1's PP bit.
     *
     * PP
     */
    inline void toggle_PORTSC1_PP() volatile
    {
        PORTSC1 ^= 1u << 12u;
    }

    /**
     * Get PORTSC1's LS field.
     *
     * LS
     */
    inline USB_OTG1_PORTSC1_LS get_PORTSC1_LS() volatile
    {
        return USB_OTG1_PORTSC1_LS((PORTSC1 >> 10u) & 0b11u);
    }

    /**
     * Set PORTSC1's LS field.
     *
     * LS
     */
    inline void set_PORTSC1_LS(USB_OTG1_PORTSC1_LS value) volatile
    {
        uint32_t curr = PORTSC1;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        PORTSC1 = curr;
    }

    /**
     * Get PORTSC1's HSP bit.
     *
     * HSP
     */
    inline bool get_PORTSC1_HSP() volatile
    {
        return PORTSC1 & (1u << 9u);
    }

    /**
     * Get PORTSC1's PR bit.
     *
     * PR
     */
    inline bool get_PORTSC1_PR() volatile
    {
        return PORTSC1 & (1u << 8u);
    }

    /**
     * Set PORTSC1's PR bit.
     *
     * PR
     */
    inline void set_PORTSC1_PR() volatile
    {
        PORTSC1 |= 1u << 8u;
    }

    /**
     * Clear PORTSC1's PR bit.
     *
     * PR
     */
    inline void clear_PORTSC1_PR() volatile
    {
        PORTSC1 &= ~(1u << 8u);
    }

    /**
     * Toggle PORTSC1's PR bit.
     *
     * PR
     */
    inline void toggle_PORTSC1_PR() volatile
    {
        PORTSC1 ^= 1u << 8u;
    }

    /**
     * Get PORTSC1's SUSP bit.
     *
     * SUSP
     */
    inline bool get_PORTSC1_SUSP() volatile
    {
        return PORTSC1 & (1u << 7u);
    }

    /**
     * Set PORTSC1's SUSP bit.
     *
     * SUSP
     */
    inline void set_PORTSC1_SUSP() volatile
    {
        PORTSC1 |= 1u << 7u;
    }

    /**
     * Clear PORTSC1's SUSP bit.
     *
     * SUSP
     */
    inline void clear_PORTSC1_SUSP() volatile
    {
        PORTSC1 &= ~(1u << 7u);
    }

    /**
     * Toggle PORTSC1's SUSP bit.
     *
     * SUSP
     */
    inline void toggle_PORTSC1_SUSP() volatile
    {
        PORTSC1 ^= 1u << 7u;
    }

    /**
     * Get PORTSC1's FPR bit.
     *
     * FPR
     */
    inline bool get_PORTSC1_FPR() volatile
    {
        return PORTSC1 & (1u << 6u);
    }

    /**
     * Set PORTSC1's FPR bit.
     *
     * FPR
     */
    inline void set_PORTSC1_FPR() volatile
    {
        PORTSC1 |= 1u << 6u;
    }

    /**
     * Clear PORTSC1's FPR bit.
     *
     * FPR
     */
    inline void clear_PORTSC1_FPR() volatile
    {
        PORTSC1 &= ~(1u << 6u);
    }

    /**
     * Toggle PORTSC1's FPR bit.
     *
     * FPR
     */
    inline void toggle_PORTSC1_FPR() volatile
    {
        PORTSC1 ^= 1u << 6u;
    }

    /**
     * Get PORTSC1's OCC bit.
     *
     * OCC
     */
    inline bool get_PORTSC1_OCC() volatile
    {
        return PORTSC1 & (1u << 5u);
    }

    /**
     * Set PORTSC1's OCC bit.
     *
     * OCC
     */
    inline void set_PORTSC1_OCC() volatile
    {
        PORTSC1 |= 1u << 5u;
    }

    /**
     * Clear PORTSC1's OCC bit.
     *
     * OCC
     */
    inline void clear_PORTSC1_OCC() volatile
    {
        PORTSC1 &= ~(1u << 5u);
    }

    /**
     * Toggle PORTSC1's OCC bit.
     *
     * OCC
     */
    inline void toggle_PORTSC1_OCC() volatile
    {
        PORTSC1 ^= 1u << 5u;
    }

    /**
     * Get PORTSC1's OCA bit.
     *
     * OCA
     */
    inline bool get_PORTSC1_OCA() volatile
    {
        return PORTSC1 & (1u << 4u);
    }

    /**
     * Get PORTSC1's PEC bit.
     *
     * PEC
     */
    inline bool get_PORTSC1_PEC() volatile
    {
        return PORTSC1 & (1u << 3u);
    }

    /**
     * Set PORTSC1's PEC bit.
     *
     * PEC
     */
    inline void set_PORTSC1_PEC() volatile
    {
        PORTSC1 |= 1u << 3u;
    }

    /**
     * Clear PORTSC1's PEC bit.
     *
     * PEC
     */
    inline void clear_PORTSC1_PEC() volatile
    {
        PORTSC1 &= ~(1u << 3u);
    }

    /**
     * Toggle PORTSC1's PEC bit.
     *
     * PEC
     */
    inline void toggle_PORTSC1_PEC() volatile
    {
        PORTSC1 ^= 1u << 3u;
    }

    /**
     * Get PORTSC1's PE bit.
     *
     * PE
     */
    inline bool get_PORTSC1_PE() volatile
    {
        return PORTSC1 & (1u << 2u);
    }

    /**
     * Set PORTSC1's PE bit.
     *
     * PE
     */
    inline void set_PORTSC1_PE() volatile
    {
        PORTSC1 |= 1u << 2u;
    }

    /**
     * Clear PORTSC1's PE bit.
     *
     * PE
     */
    inline void clear_PORTSC1_PE() volatile
    {
        PORTSC1 &= ~(1u << 2u);
    }

    /**
     * Toggle PORTSC1's PE bit.
     *
     * PE
     */
    inline void toggle_PORTSC1_PE() volatile
    {
        PORTSC1 ^= 1u << 2u;
    }

    /**
     * Get PORTSC1's CSC bit.
     *
     * CSC
     */
    inline bool get_PORTSC1_CSC() volatile
    {
        return PORTSC1 & (1u << 1u);
    }

    /**
     * Set PORTSC1's CSC bit.
     *
     * CSC
     */
    inline void set_PORTSC1_CSC() volatile
    {
        PORTSC1 |= 1u << 1u;
    }

    /**
     * Clear PORTSC1's CSC bit.
     *
     * CSC
     */
    inline void clear_PORTSC1_CSC() volatile
    {
        PORTSC1 &= ~(1u << 1u);
    }

    /**
     * Toggle PORTSC1's CSC bit.
     *
     * CSC
     */
    inline void toggle_PORTSC1_CSC() volatile
    {
        PORTSC1 ^= 1u << 1u;
    }

    /**
     * Get PORTSC1's CCS bit.
     *
     * CCS
     */
    inline bool get_PORTSC1_CCS() volatile
    {
        return PORTSC1 & (1u << 0u);
    }

    /**
     * Get all of PORTSC1's bit fields.
     *
     * (read-write) Port Status & Control
     */
    inline void get_PORTSC1(uint8_t &PTS_1, bool &STS, bool &PTW,
                            USB_OTG1_PORTSC1_PSPD &PSPD, bool &PTS_2,
                            bool &PFSC, bool &PHCD, bool &WKOC, bool &WKDC,
                            bool &WKCN, USB_OTG1_PORTSC1_PTC &PTC,
                            USB_OTG1_PORTSC1_PIC &PIC, bool &PO, bool &PP,
                            USB_OTG1_PORTSC1_LS &LS, bool &HSP, bool &PR,
                            bool &SUSP, bool &FPR, bool &OCC, bool &OCA,
                            bool &PEC, bool &PE, bool &CSC, bool &CCS) volatile
    {
        uint32_t curr = PORTSC1;

        PTS_1 = (curr >> 30u) & 0b11u;
        STS = curr & (1u << 29u);
        PTW = curr & (1u << 28u);
        PSPD = USB_OTG1_PORTSC1_PSPD((curr >> 26u) & 0b11u);
        PTS_2 = curr & (1u << 25u);
        PFSC = curr & (1u << 24u);
        PHCD = curr & (1u << 23u);
        WKOC = curr & (1u << 22u);
        WKDC = curr & (1u << 21u);
        WKCN = curr & (1u << 20u);
        PTC = USB_OTG1_PORTSC1_PTC((curr >> 16u) & 0b1111u);
        PIC = USB_OTG1_PORTSC1_PIC((curr >> 14u) & 0b11u);
        PO = curr & (1u << 13u);
        PP = curr & (1u << 12u);
        LS = USB_OTG1_PORTSC1_LS((curr >> 10u) & 0b11u);
        HSP = curr & (1u << 9u);
        PR = curr & (1u << 8u);
        SUSP = curr & (1u << 7u);
        FPR = curr & (1u << 6u);
        OCC = curr & (1u << 5u);
        OCA = curr & (1u << 4u);
        PEC = curr & (1u << 3u);
        PE = curr & (1u << 2u);
        CSC = curr & (1u << 1u);
        CCS = curr & (1u << 0u);
    }

    /**
     * Set all of PORTSC1's bit fields.
     *
     * (read-write) Port Status & Control
     */
    inline void set_PORTSC1(uint8_t PTS_1, bool STS, bool PTW,
                            USB_OTG1_PORTSC1_PSPD PSPD, bool PTS_2, bool PFSC,
                            bool PHCD, bool WKOC, bool WKDC, bool WKCN,
                            USB_OTG1_PORTSC1_PTC PTC, USB_OTG1_PORTSC1_PIC PIC,
                            bool PO, bool PP, USB_OTG1_PORTSC1_LS LS, bool PR,
                            bool SUSP, bool FPR, bool OCC, bool PEC, bool PE,
                            bool CSC) volatile
    {
        uint32_t curr = PORTSC1;

        curr &= ~(0b11u << 30u);
        curr |= (PTS_1 & 0b11u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (STS & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (PTW & 0b1u) << 28u;
        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(PSPD) & 0b11u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (PTS_2 & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (PFSC & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (PHCD & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (WKOC & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (WKDC & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (WKCN & 0b1u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(PTC) & 0b1111u) << 16u;
        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(PIC) & 0b11u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (PO & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (PP & 0b1u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(LS) & 0b11u) << 10u;
        curr &= ~(0b1u << 8u);
        curr |= (PR & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (SUSP & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (FPR & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (OCC & 0b1u) << 5u;
        curr &= ~(0b1u << 3u);
        curr |= (PEC & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CSC & 0b1u) << 1u;

        PORTSC1 = curr;
    }

    /**
     * Get OTGSC's DPIE bit.
     *
     * DPIE
     */
    inline bool get_OTGSC_DPIE() volatile
    {
        return OTGSC & (1u << 30u);
    }

    /**
     * Set OTGSC's DPIE bit.
     *
     * DPIE
     */
    inline void set_OTGSC_DPIE() volatile
    {
        OTGSC |= 1u << 30u;
    }

    /**
     * Clear OTGSC's DPIE bit.
     *
     * DPIE
     */
    inline void clear_OTGSC_DPIE() volatile
    {
        OTGSC &= ~(1u << 30u);
    }

    /**
     * Toggle OTGSC's DPIE bit.
     *
     * DPIE
     */
    inline void toggle_OTGSC_DPIE() volatile
    {
        OTGSC ^= 1u << 30u;
    }

    /**
     * Get OTGSC's EN_1MS bit.
     *
     * EN_1MS
     */
    inline bool get_OTGSC_EN_1MS() volatile
    {
        return OTGSC & (1u << 29u);
    }

    /**
     * Set OTGSC's EN_1MS bit.
     *
     * EN_1MS
     */
    inline void set_OTGSC_EN_1MS() volatile
    {
        OTGSC |= 1u << 29u;
    }

    /**
     * Clear OTGSC's EN_1MS bit.
     *
     * EN_1MS
     */
    inline void clear_OTGSC_EN_1MS() volatile
    {
        OTGSC &= ~(1u << 29u);
    }

    /**
     * Toggle OTGSC's EN_1MS bit.
     *
     * EN_1MS
     */
    inline void toggle_OTGSC_EN_1MS() volatile
    {
        OTGSC ^= 1u << 29u;
    }

    /**
     * Get OTGSC's BSEIE bit.
     *
     * BSEIE
     */
    inline bool get_OTGSC_BSEIE() volatile
    {
        return OTGSC & (1u << 28u);
    }

    /**
     * Set OTGSC's BSEIE bit.
     *
     * BSEIE
     */
    inline void set_OTGSC_BSEIE() volatile
    {
        OTGSC |= 1u << 28u;
    }

    /**
     * Clear OTGSC's BSEIE bit.
     *
     * BSEIE
     */
    inline void clear_OTGSC_BSEIE() volatile
    {
        OTGSC &= ~(1u << 28u);
    }

    /**
     * Toggle OTGSC's BSEIE bit.
     *
     * BSEIE
     */
    inline void toggle_OTGSC_BSEIE() volatile
    {
        OTGSC ^= 1u << 28u;
    }

    /**
     * Get OTGSC's BSVIE bit.
     *
     * BSVIE
     */
    inline bool get_OTGSC_BSVIE() volatile
    {
        return OTGSC & (1u << 27u);
    }

    /**
     * Set OTGSC's BSVIE bit.
     *
     * BSVIE
     */
    inline void set_OTGSC_BSVIE() volatile
    {
        OTGSC |= 1u << 27u;
    }

    /**
     * Clear OTGSC's BSVIE bit.
     *
     * BSVIE
     */
    inline void clear_OTGSC_BSVIE() volatile
    {
        OTGSC &= ~(1u << 27u);
    }

    /**
     * Toggle OTGSC's BSVIE bit.
     *
     * BSVIE
     */
    inline void toggle_OTGSC_BSVIE() volatile
    {
        OTGSC ^= 1u << 27u;
    }

    /**
     * Get OTGSC's ASVIE bit.
     *
     * ASVIE
     */
    inline bool get_OTGSC_ASVIE() volatile
    {
        return OTGSC & (1u << 26u);
    }

    /**
     * Set OTGSC's ASVIE bit.
     *
     * ASVIE
     */
    inline void set_OTGSC_ASVIE() volatile
    {
        OTGSC |= 1u << 26u;
    }

    /**
     * Clear OTGSC's ASVIE bit.
     *
     * ASVIE
     */
    inline void clear_OTGSC_ASVIE() volatile
    {
        OTGSC &= ~(1u << 26u);
    }

    /**
     * Toggle OTGSC's ASVIE bit.
     *
     * ASVIE
     */
    inline void toggle_OTGSC_ASVIE() volatile
    {
        OTGSC ^= 1u << 26u;
    }

    /**
     * Get OTGSC's AVVIE bit.
     *
     * AVVIE
     */
    inline bool get_OTGSC_AVVIE() volatile
    {
        return OTGSC & (1u << 25u);
    }

    /**
     * Set OTGSC's AVVIE bit.
     *
     * AVVIE
     */
    inline void set_OTGSC_AVVIE() volatile
    {
        OTGSC |= 1u << 25u;
    }

    /**
     * Clear OTGSC's AVVIE bit.
     *
     * AVVIE
     */
    inline void clear_OTGSC_AVVIE() volatile
    {
        OTGSC &= ~(1u << 25u);
    }

    /**
     * Toggle OTGSC's AVVIE bit.
     *
     * AVVIE
     */
    inline void toggle_OTGSC_AVVIE() volatile
    {
        OTGSC ^= 1u << 25u;
    }

    /**
     * Get OTGSC's IDIE bit.
     *
     * IDIE
     */
    inline bool get_OTGSC_IDIE() volatile
    {
        return OTGSC & (1u << 24u);
    }

    /**
     * Set OTGSC's IDIE bit.
     *
     * IDIE
     */
    inline void set_OTGSC_IDIE() volatile
    {
        OTGSC |= 1u << 24u;
    }

    /**
     * Clear OTGSC's IDIE bit.
     *
     * IDIE
     */
    inline void clear_OTGSC_IDIE() volatile
    {
        OTGSC &= ~(1u << 24u);
    }

    /**
     * Toggle OTGSC's IDIE bit.
     *
     * IDIE
     */
    inline void toggle_OTGSC_IDIE() volatile
    {
        OTGSC ^= 1u << 24u;
    }

    /**
     * Get OTGSC's DPIS bit.
     *
     * DPIS
     */
    inline bool get_OTGSC_DPIS() volatile
    {
        return OTGSC & (1u << 22u);
    }

    /**
     * Set OTGSC's DPIS bit.
     *
     * DPIS
     */
    inline void set_OTGSC_DPIS() volatile
    {
        OTGSC |= 1u << 22u;
    }

    /**
     * Clear OTGSC's DPIS bit.
     *
     * DPIS
     */
    inline void clear_OTGSC_DPIS() volatile
    {
        OTGSC &= ~(1u << 22u);
    }

    /**
     * Toggle OTGSC's DPIS bit.
     *
     * DPIS
     */
    inline void toggle_OTGSC_DPIS() volatile
    {
        OTGSC ^= 1u << 22u;
    }

    /**
     * Get OTGSC's STATUS_1MS bit.
     *
     * STATUS_1MS
     */
    inline bool get_OTGSC_STATUS_1MS() volatile
    {
        return OTGSC & (1u << 21u);
    }

    /**
     * Set OTGSC's STATUS_1MS bit.
     *
     * STATUS_1MS
     */
    inline void set_OTGSC_STATUS_1MS() volatile
    {
        OTGSC |= 1u << 21u;
    }

    /**
     * Clear OTGSC's STATUS_1MS bit.
     *
     * STATUS_1MS
     */
    inline void clear_OTGSC_STATUS_1MS() volatile
    {
        OTGSC &= ~(1u << 21u);
    }

    /**
     * Toggle OTGSC's STATUS_1MS bit.
     *
     * STATUS_1MS
     */
    inline void toggle_OTGSC_STATUS_1MS() volatile
    {
        OTGSC ^= 1u << 21u;
    }

    /**
     * Get OTGSC's BSEIS bit.
     *
     * BSEIS
     */
    inline bool get_OTGSC_BSEIS() volatile
    {
        return OTGSC & (1u << 20u);
    }

    /**
     * Set OTGSC's BSEIS bit.
     *
     * BSEIS
     */
    inline void set_OTGSC_BSEIS() volatile
    {
        OTGSC |= 1u << 20u;
    }

    /**
     * Clear OTGSC's BSEIS bit.
     *
     * BSEIS
     */
    inline void clear_OTGSC_BSEIS() volatile
    {
        OTGSC &= ~(1u << 20u);
    }

    /**
     * Toggle OTGSC's BSEIS bit.
     *
     * BSEIS
     */
    inline void toggle_OTGSC_BSEIS() volatile
    {
        OTGSC ^= 1u << 20u;
    }

    /**
     * Get OTGSC's BSVIS bit.
     *
     * BSVIS
     */
    inline bool get_OTGSC_BSVIS() volatile
    {
        return OTGSC & (1u << 19u);
    }

    /**
     * Set OTGSC's BSVIS bit.
     *
     * BSVIS
     */
    inline void set_OTGSC_BSVIS() volatile
    {
        OTGSC |= 1u << 19u;
    }

    /**
     * Clear OTGSC's BSVIS bit.
     *
     * BSVIS
     */
    inline void clear_OTGSC_BSVIS() volatile
    {
        OTGSC &= ~(1u << 19u);
    }

    /**
     * Toggle OTGSC's BSVIS bit.
     *
     * BSVIS
     */
    inline void toggle_OTGSC_BSVIS() volatile
    {
        OTGSC ^= 1u << 19u;
    }

    /**
     * Get OTGSC's ASVIS bit.
     *
     * ASVIS
     */
    inline bool get_OTGSC_ASVIS() volatile
    {
        return OTGSC & (1u << 18u);
    }

    /**
     * Set OTGSC's ASVIS bit.
     *
     * ASVIS
     */
    inline void set_OTGSC_ASVIS() volatile
    {
        OTGSC |= 1u << 18u;
    }

    /**
     * Clear OTGSC's ASVIS bit.
     *
     * ASVIS
     */
    inline void clear_OTGSC_ASVIS() volatile
    {
        OTGSC &= ~(1u << 18u);
    }

    /**
     * Toggle OTGSC's ASVIS bit.
     *
     * ASVIS
     */
    inline void toggle_OTGSC_ASVIS() volatile
    {
        OTGSC ^= 1u << 18u;
    }

    /**
     * Get OTGSC's AVVIS bit.
     *
     * AVVIS
     */
    inline bool get_OTGSC_AVVIS() volatile
    {
        return OTGSC & (1u << 17u);
    }

    /**
     * Set OTGSC's AVVIS bit.
     *
     * AVVIS
     */
    inline void set_OTGSC_AVVIS() volatile
    {
        OTGSC |= 1u << 17u;
    }

    /**
     * Clear OTGSC's AVVIS bit.
     *
     * AVVIS
     */
    inline void clear_OTGSC_AVVIS() volatile
    {
        OTGSC &= ~(1u << 17u);
    }

    /**
     * Toggle OTGSC's AVVIS bit.
     *
     * AVVIS
     */
    inline void toggle_OTGSC_AVVIS() volatile
    {
        OTGSC ^= 1u << 17u;
    }

    /**
     * Get OTGSC's IDIS bit.
     *
     * IDIS
     */
    inline bool get_OTGSC_IDIS() volatile
    {
        return OTGSC & (1u << 16u);
    }

    /**
     * Set OTGSC's IDIS bit.
     *
     * IDIS
     */
    inline void set_OTGSC_IDIS() volatile
    {
        OTGSC |= 1u << 16u;
    }

    /**
     * Clear OTGSC's IDIS bit.
     *
     * IDIS
     */
    inline void clear_OTGSC_IDIS() volatile
    {
        OTGSC &= ~(1u << 16u);
    }

    /**
     * Toggle OTGSC's IDIS bit.
     *
     * IDIS
     */
    inline void toggle_OTGSC_IDIS() volatile
    {
        OTGSC ^= 1u << 16u;
    }

    /**
     * Get OTGSC's DPS bit.
     *
     * DPS
     */
    inline bool get_OTGSC_DPS() volatile
    {
        return OTGSC & (1u << 14u);
    }

    /**
     * Get OTGSC's TOG_1MS bit.
     *
     * TOG_1MS
     */
    inline bool get_OTGSC_TOG_1MS() volatile
    {
        return OTGSC & (1u << 13u);
    }

    /**
     * Get OTGSC's BSE bit.
     *
     * BSE
     */
    inline bool get_OTGSC_BSE() volatile
    {
        return OTGSC & (1u << 12u);
    }

    /**
     * Get OTGSC's BSV bit.
     *
     * BSV
     */
    inline bool get_OTGSC_BSV() volatile
    {
        return OTGSC & (1u << 11u);
    }

    /**
     * Get OTGSC's ASV bit.
     *
     * ASV
     */
    inline bool get_OTGSC_ASV() volatile
    {
        return OTGSC & (1u << 10u);
    }

    /**
     * Get OTGSC's AVV bit.
     *
     * AVV
     */
    inline bool get_OTGSC_AVV() volatile
    {
        return OTGSC & (1u << 9u);
    }

    /**
     * Get OTGSC's ID bit.
     *
     * ID
     */
    inline bool get_OTGSC_ID() volatile
    {
        return OTGSC & (1u << 8u);
    }

    /**
     * Get OTGSC's IDPU bit.
     *
     * IDPU
     */
    inline bool get_OTGSC_IDPU() volatile
    {
        return OTGSC & (1u << 5u);
    }

    /**
     * Set OTGSC's IDPU bit.
     *
     * IDPU
     */
    inline void set_OTGSC_IDPU() volatile
    {
        OTGSC |= 1u << 5u;
    }

    /**
     * Clear OTGSC's IDPU bit.
     *
     * IDPU
     */
    inline void clear_OTGSC_IDPU() volatile
    {
        OTGSC &= ~(1u << 5u);
    }

    /**
     * Toggle OTGSC's IDPU bit.
     *
     * IDPU
     */
    inline void toggle_OTGSC_IDPU() volatile
    {
        OTGSC ^= 1u << 5u;
    }

    /**
     * Get OTGSC's DP bit.
     *
     * DP
     */
    inline bool get_OTGSC_DP() volatile
    {
        return OTGSC & (1u << 4u);
    }

    /**
     * Set OTGSC's DP bit.
     *
     * DP
     */
    inline void set_OTGSC_DP() volatile
    {
        OTGSC |= 1u << 4u;
    }

    /**
     * Clear OTGSC's DP bit.
     *
     * DP
     */
    inline void clear_OTGSC_DP() volatile
    {
        OTGSC &= ~(1u << 4u);
    }

    /**
     * Toggle OTGSC's DP bit.
     *
     * DP
     */
    inline void toggle_OTGSC_DP() volatile
    {
        OTGSC ^= 1u << 4u;
    }

    /**
     * Get OTGSC's OT bit.
     *
     * OT
     */
    inline bool get_OTGSC_OT() volatile
    {
        return OTGSC & (1u << 3u);
    }

    /**
     * Set OTGSC's OT bit.
     *
     * OT
     */
    inline void set_OTGSC_OT() volatile
    {
        OTGSC |= 1u << 3u;
    }

    /**
     * Clear OTGSC's OT bit.
     *
     * OT
     */
    inline void clear_OTGSC_OT() volatile
    {
        OTGSC &= ~(1u << 3u);
    }

    /**
     * Toggle OTGSC's OT bit.
     *
     * OT
     */
    inline void toggle_OTGSC_OT() volatile
    {
        OTGSC ^= 1u << 3u;
    }

    /**
     * Get OTGSC's VC bit.
     *
     * VC
     */
    inline bool get_OTGSC_VC() volatile
    {
        return OTGSC & (1u << 1u);
    }

    /**
     * Set OTGSC's VC bit.
     *
     * VC
     */
    inline void set_OTGSC_VC() volatile
    {
        OTGSC |= 1u << 1u;
    }

    /**
     * Clear OTGSC's VC bit.
     *
     * VC
     */
    inline void clear_OTGSC_VC() volatile
    {
        OTGSC &= ~(1u << 1u);
    }

    /**
     * Toggle OTGSC's VC bit.
     *
     * VC
     */
    inline void toggle_OTGSC_VC() volatile
    {
        OTGSC ^= 1u << 1u;
    }

    /**
     * Get OTGSC's VD bit.
     *
     * VD
     */
    inline bool get_OTGSC_VD() volatile
    {
        return OTGSC & (1u << 0u);
    }

    /**
     * Set OTGSC's VD bit.
     *
     * VD
     */
    inline void set_OTGSC_VD() volatile
    {
        OTGSC |= 1u << 0u;
    }

    /**
     * Clear OTGSC's VD bit.
     *
     * VD
     */
    inline void clear_OTGSC_VD() volatile
    {
        OTGSC &= ~(1u << 0u);
    }

    /**
     * Toggle OTGSC's VD bit.
     *
     * VD
     */
    inline void toggle_OTGSC_VD() volatile
    {
        OTGSC ^= 1u << 0u;
    }

    /**
     * Get all of OTGSC's bit fields.
     *
     * (read-write) On-The-Go Status & control
     */
    inline void get_OTGSC(bool &DPIE, bool &EN_1MS, bool &BSEIE, bool &BSVIE,
                          bool &ASVIE, bool &AVVIE, bool &IDIE, bool &DPIS,
                          bool &STATUS_1MS, bool &BSEIS, bool &BSVIS,
                          bool &ASVIS, bool &AVVIS, bool &IDIS, bool &DPS,
                          bool &TOG_1MS, bool &BSE, bool &BSV, bool &ASV,
                          bool &AVV, bool &ID, bool &IDPU, bool &DP, bool &OT,
                          bool &VC, bool &VD) volatile
    {
        uint32_t curr = OTGSC;

        DPIE = curr & (1u << 30u);
        EN_1MS = curr & (1u << 29u);
        BSEIE = curr & (1u << 28u);
        BSVIE = curr & (1u << 27u);
        ASVIE = curr & (1u << 26u);
        AVVIE = curr & (1u << 25u);
        IDIE = curr & (1u << 24u);
        DPIS = curr & (1u << 22u);
        STATUS_1MS = curr & (1u << 21u);
        BSEIS = curr & (1u << 20u);
        BSVIS = curr & (1u << 19u);
        ASVIS = curr & (1u << 18u);
        AVVIS = curr & (1u << 17u);
        IDIS = curr & (1u << 16u);
        DPS = curr & (1u << 14u);
        TOG_1MS = curr & (1u << 13u);
        BSE = curr & (1u << 12u);
        BSV = curr & (1u << 11u);
        ASV = curr & (1u << 10u);
        AVV = curr & (1u << 9u);
        ID = curr & (1u << 8u);
        IDPU = curr & (1u << 5u);
        DP = curr & (1u << 4u);
        OT = curr & (1u << 3u);
        VC = curr & (1u << 1u);
        VD = curr & (1u << 0u);
    }

    /**
     * Set all of OTGSC's bit fields.
     *
     * (read-write) On-The-Go Status & control
     */
    inline void set_OTGSC(bool DPIE, bool EN_1MS, bool BSEIE, bool BSVIE,
                          bool ASVIE, bool AVVIE, bool IDIE, bool DPIS,
                          bool STATUS_1MS, bool BSEIS, bool BSVIS, bool ASVIS,
                          bool AVVIS, bool IDIS, bool IDPU, bool DP, bool OT,
                          bool VC, bool VD) volatile
    {
        uint32_t curr = OTGSC;

        curr &= ~(0b1u << 30u);
        curr |= (DPIE & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (EN_1MS & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (BSEIE & 0b1u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (BSVIE & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (ASVIE & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (AVVIE & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (IDIE & 0b1u) << 24u;
        curr &= ~(0b1u << 22u);
        curr |= (DPIS & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (STATUS_1MS & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (BSEIS & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (BSVIS & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (ASVIS & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (AVVIS & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (IDIS & 0b1u) << 16u;
        curr &= ~(0b1u << 5u);
        curr |= (IDPU & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (DP & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (OT & 0b1u) << 3u;
        curr &= ~(0b1u << 1u);
        curr |= (VC & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (VD & 0b1u) << 0u;

        OTGSC = curr;
    }

    /**
     * Get USBMODE's SDIS bit.
     *
     * SDIS
     */
    inline bool get_USBMODE_SDIS() volatile
    {
        return USBMODE & (1u << 4u);
    }

    /**
     * Set USBMODE's SDIS bit.
     *
     * SDIS
     */
    inline void set_USBMODE_SDIS() volatile
    {
        USBMODE |= 1u << 4u;
    }

    /**
     * Clear USBMODE's SDIS bit.
     *
     * SDIS
     */
    inline void clear_USBMODE_SDIS() volatile
    {
        USBMODE &= ~(1u << 4u);
    }

    /**
     * Toggle USBMODE's SDIS bit.
     *
     * SDIS
     */
    inline void toggle_USBMODE_SDIS() volatile
    {
        USBMODE ^= 1u << 4u;
    }

    /**
     * Get USBMODE's SLOM bit.
     *
     * SLOM
     */
    inline bool get_USBMODE_SLOM() volatile
    {
        return USBMODE & (1u << 3u);
    }

    /**
     * Set USBMODE's SLOM bit.
     *
     * SLOM
     */
    inline void set_USBMODE_SLOM() volatile
    {
        USBMODE |= 1u << 3u;
    }

    /**
     * Clear USBMODE's SLOM bit.
     *
     * SLOM
     */
    inline void clear_USBMODE_SLOM() volatile
    {
        USBMODE &= ~(1u << 3u);
    }

    /**
     * Toggle USBMODE's SLOM bit.
     *
     * SLOM
     */
    inline void toggle_USBMODE_SLOM() volatile
    {
        USBMODE ^= 1u << 3u;
    }

    /**
     * Get USBMODE's ES bit.
     *
     * ES
     */
    inline bool get_USBMODE_ES() volatile
    {
        return USBMODE & (1u << 2u);
    }

    /**
     * Set USBMODE's ES bit.
     *
     * ES
     */
    inline void set_USBMODE_ES() volatile
    {
        USBMODE |= 1u << 2u;
    }

    /**
     * Clear USBMODE's ES bit.
     *
     * ES
     */
    inline void clear_USBMODE_ES() volatile
    {
        USBMODE &= ~(1u << 2u);
    }

    /**
     * Toggle USBMODE's ES bit.
     *
     * ES
     */
    inline void toggle_USBMODE_ES() volatile
    {
        USBMODE ^= 1u << 2u;
    }

    /**
     * Get USBMODE's CM field.
     *
     * CM
     */
    inline USB_OTG1_USBMODE_CM get_USBMODE_CM() volatile
    {
        return USB_OTG1_USBMODE_CM((USBMODE >> 0u) & 0b11u);
    }

    /**
     * Set USBMODE's CM field.
     *
     * CM
     */
    inline void set_USBMODE_CM(USB_OTG1_USBMODE_CM value) volatile
    {
        uint32_t curr = USBMODE;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        USBMODE = curr;
    }

    /**
     * Get all of USBMODE's bit fields.
     *
     * (read-write) USB Device Mode
     */
    inline void get_USBMODE(bool &SDIS, bool &SLOM, bool &ES,
                            USB_OTG1_USBMODE_CM &CM) volatile
    {
        uint32_t curr = USBMODE;

        SDIS = curr & (1u << 4u);
        SLOM = curr & (1u << 3u);
        ES = curr & (1u << 2u);
        CM = USB_OTG1_USBMODE_CM((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of USBMODE's bit fields.
     *
     * (read-write) USB Device Mode
     */
    inline void set_USBMODE(bool SDIS, bool SLOM, bool ES,
                            USB_OTG1_USBMODE_CM CM) volatile
    {
        uint32_t curr = USBMODE;

        curr &= ~(0b1u << 4u);
        curr |= (SDIS & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SLOM & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (ES & 0b1u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(CM) & 0b11u) << 0u;

        USBMODE = curr;
    }

    /**
     * Get ENDPTSETUPSTAT's ENDPTSETUPSTAT field.
     *
     * ENDPTSETUPSTAT
     */
    inline uint16_t get_ENDPTSETUPSTAT_ENDPTSETUPSTAT() volatile
    {
        return (ENDPTSETUPSTAT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set ENDPTSETUPSTAT's ENDPTSETUPSTAT field.
     *
     * ENDPTSETUPSTAT
     */
    inline void set_ENDPTSETUPSTAT_ENDPTSETUPSTAT(uint16_t value) volatile
    {
        uint32_t curr = ENDPTSETUPSTAT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        ENDPTSETUPSTAT = curr;
    }

    /**
     * Get ENDPTPRIME's PETB field.
     *
     * PETB
     */
    inline uint8_t get_ENDPTPRIME_PETB() volatile
    {
        return (ENDPTPRIME >> 16u) & 0b11111111u;
    }

    /**
     * Set ENDPTPRIME's PETB field.
     *
     * PETB
     */
    inline void set_ENDPTPRIME_PETB(uint8_t value) volatile
    {
        uint32_t curr = ENDPTPRIME;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        ENDPTPRIME = curr;
    }

    /**
     * Get ENDPTPRIME's PERB field.
     *
     * PERB
     */
    inline uint8_t get_ENDPTPRIME_PERB() volatile
    {
        return (ENDPTPRIME >> 0u) & 0b11111111u;
    }

    /**
     * Set ENDPTPRIME's PERB field.
     *
     * PERB
     */
    inline void set_ENDPTPRIME_PERB(uint8_t value) volatile
    {
        uint32_t curr = ENDPTPRIME;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        ENDPTPRIME = curr;
    }

    /**
     * Get all of ENDPTPRIME's bit fields.
     *
     * (read-write) Endpoint Prime
     */
    inline void get_ENDPTPRIME(uint8_t &PETB, uint8_t &PERB) volatile
    {
        uint32_t curr = ENDPTPRIME;

        PETB = (curr >> 16u) & 0b11111111u;
        PERB = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of ENDPTPRIME's bit fields.
     *
     * (read-write) Endpoint Prime
     */
    inline void set_ENDPTPRIME(uint8_t PETB, uint8_t PERB) volatile
    {
        uint32_t curr = ENDPTPRIME;

        curr &= ~(0b11111111u << 16u);
        curr |= (PETB & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 0u);
        curr |= (PERB & 0b11111111u) << 0u;

        ENDPTPRIME = curr;
    }

    /**
     * Get ENDPTFLUSH's FETB field.
     *
     * FETB
     */
    inline uint8_t get_ENDPTFLUSH_FETB() volatile
    {
        return (ENDPTFLUSH >> 16u) & 0b11111111u;
    }

    /**
     * Set ENDPTFLUSH's FETB field.
     *
     * FETB
     */
    inline void set_ENDPTFLUSH_FETB(uint8_t value) volatile
    {
        uint32_t curr = ENDPTFLUSH;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        ENDPTFLUSH = curr;
    }

    /**
     * Get ENDPTFLUSH's FERB field.
     *
     * FERB
     */
    inline uint8_t get_ENDPTFLUSH_FERB() volatile
    {
        return (ENDPTFLUSH >> 0u) & 0b11111111u;
    }

    /**
     * Set ENDPTFLUSH's FERB field.
     *
     * FERB
     */
    inline void set_ENDPTFLUSH_FERB(uint8_t value) volatile
    {
        uint32_t curr = ENDPTFLUSH;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        ENDPTFLUSH = curr;
    }

    /**
     * Get all of ENDPTFLUSH's bit fields.
     *
     * (read-write) Endpoint Flush
     */
    inline void get_ENDPTFLUSH(uint8_t &FETB, uint8_t &FERB) volatile
    {
        uint32_t curr = ENDPTFLUSH;

        FETB = (curr >> 16u) & 0b11111111u;
        FERB = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of ENDPTFLUSH's bit fields.
     *
     * (read-write) Endpoint Flush
     */
    inline void set_ENDPTFLUSH(uint8_t FETB, uint8_t FERB) volatile
    {
        uint32_t curr = ENDPTFLUSH;

        curr &= ~(0b11111111u << 16u);
        curr |= (FETB & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 0u);
        curr |= (FERB & 0b11111111u) << 0u;

        ENDPTFLUSH = curr;
    }

    /**
     * Get ENDPTSTAT's ETBR field.
     *
     * ETBR
     */
    inline uint8_t get_ENDPTSTAT_ETBR() volatile
    {
        return (ENDPTSTAT >> 16u) & 0b11111111u;
    }

    /**
     * Get ENDPTSTAT's ERBR field.
     *
     * ERBR
     */
    inline uint8_t get_ENDPTSTAT_ERBR() volatile
    {
        return (ENDPTSTAT >> 0u) & 0b11111111u;
    }

    /**
     * Get all of ENDPTSTAT's bit fields.
     *
     * (read-write) Endpoint Status
     */
    inline void get_ENDPTSTAT(uint8_t &ETBR, uint8_t &ERBR) volatile
    {
        uint32_t curr = ENDPTSTAT;

        ETBR = (curr >> 16u) & 0b11111111u;
        ERBR = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get ENDPTCOMPLETE's ETCE field.
     *
     * ETCE
     */
    inline uint8_t get_ENDPTCOMPLETE_ETCE() volatile
    {
        return (ENDPTCOMPLETE >> 16u) & 0b11111111u;
    }

    /**
     * Set ENDPTCOMPLETE's ETCE field.
     *
     * ETCE
     */
    inline void set_ENDPTCOMPLETE_ETCE(uint8_t value) volatile
    {
        uint32_t curr = ENDPTCOMPLETE;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        ENDPTCOMPLETE = curr;
    }

    /**
     * Get ENDPTCOMPLETE's ERCE field.
     *
     * ERCE
     */
    inline uint8_t get_ENDPTCOMPLETE_ERCE() volatile
    {
        return (ENDPTCOMPLETE >> 0u) & 0b11111111u;
    }

    /**
     * Set ENDPTCOMPLETE's ERCE field.
     *
     * ERCE
     */
    inline void set_ENDPTCOMPLETE_ERCE(uint8_t value) volatile
    {
        uint32_t curr = ENDPTCOMPLETE;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        ENDPTCOMPLETE = curr;
    }

    /**
     * Get all of ENDPTCOMPLETE's bit fields.
     *
     * (read-write) Endpoint Complete
     */
    inline void get_ENDPTCOMPLETE(uint8_t &ETCE, uint8_t &ERCE) volatile
    {
        uint32_t curr = ENDPTCOMPLETE;

        ETCE = (curr >> 16u) & 0b11111111u;
        ERCE = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of ENDPTCOMPLETE's bit fields.
     *
     * (read-write) Endpoint Complete
     */
    inline void set_ENDPTCOMPLETE(uint8_t ETCE, uint8_t ERCE) volatile
    {
        uint32_t curr = ENDPTCOMPLETE;

        curr &= ~(0b11111111u << 16u);
        curr |= (ETCE & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 0u);
        curr |= (ERCE & 0b11111111u) << 0u;

        ENDPTCOMPLETE = curr;
    }

    /**
     * Get ENDPTCTRL0's TXE bit.
     *
     * TXE
     */
    inline bool get_ENDPTCTRL0_TXE() volatile
    {
        return ENDPTCTRL0 & (1u << 23u);
    }

    /**
     * Set ENDPTCTRL0's TXE bit.
     *
     * TXE
     */
    inline void set_ENDPTCTRL0_TXE() volatile
    {
        ENDPTCTRL0 |= 1u << 23u;
    }

    /**
     * Clear ENDPTCTRL0's TXE bit.
     *
     * TXE
     */
    inline void clear_ENDPTCTRL0_TXE() volatile
    {
        ENDPTCTRL0 &= ~(1u << 23u);
    }

    /**
     * Toggle ENDPTCTRL0's TXE bit.
     *
     * TXE
     */
    inline void toggle_ENDPTCTRL0_TXE() volatile
    {
        ENDPTCTRL0 ^= 1u << 23u;
    }

    /**
     * Get ENDPTCTRL0's TXT field.
     *
     * TXT
     */
    inline uint8_t get_ENDPTCTRL0_TXT() volatile
    {
        return (ENDPTCTRL0 >> 18u) & 0b11u;
    }

    /**
     * Set ENDPTCTRL0's TXT field.
     *
     * TXT
     */
    inline void set_ENDPTCTRL0_TXT(uint8_t value) volatile
    {
        uint32_t curr = ENDPTCTRL0;

        curr &= ~(0b11u << 18u);
        curr |= (value & 0b11u) << 18u;

        ENDPTCTRL0 = curr;
    }

    /**
     * Get ENDPTCTRL0's TXS bit.
     *
     * TXS
     */
    inline bool get_ENDPTCTRL0_TXS() volatile
    {
        return ENDPTCTRL0 & (1u << 16u);
    }

    /**
     * Set ENDPTCTRL0's TXS bit.
     *
     * TXS
     */
    inline void set_ENDPTCTRL0_TXS() volatile
    {
        ENDPTCTRL0 |= 1u << 16u;
    }

    /**
     * Clear ENDPTCTRL0's TXS bit.
     *
     * TXS
     */
    inline void clear_ENDPTCTRL0_TXS() volatile
    {
        ENDPTCTRL0 &= ~(1u << 16u);
    }

    /**
     * Toggle ENDPTCTRL0's TXS bit.
     *
     * TXS
     */
    inline void toggle_ENDPTCTRL0_TXS() volatile
    {
        ENDPTCTRL0 ^= 1u << 16u;
    }

    /**
     * Get ENDPTCTRL0's RXE bit.
     *
     * RXE
     */
    inline bool get_ENDPTCTRL0_RXE() volatile
    {
        return ENDPTCTRL0 & (1u << 7u);
    }

    /**
     * Set ENDPTCTRL0's RXE bit.
     *
     * RXE
     */
    inline void set_ENDPTCTRL0_RXE() volatile
    {
        ENDPTCTRL0 |= 1u << 7u;
    }

    /**
     * Clear ENDPTCTRL0's RXE bit.
     *
     * RXE
     */
    inline void clear_ENDPTCTRL0_RXE() volatile
    {
        ENDPTCTRL0 &= ~(1u << 7u);
    }

    /**
     * Toggle ENDPTCTRL0's RXE bit.
     *
     * RXE
     */
    inline void toggle_ENDPTCTRL0_RXE() volatile
    {
        ENDPTCTRL0 ^= 1u << 7u;
    }

    /**
     * Get ENDPTCTRL0's RXT field.
     *
     * RXT
     */
    inline uint8_t get_ENDPTCTRL0_RXT() volatile
    {
        return (ENDPTCTRL0 >> 2u) & 0b11u;
    }

    /**
     * Set ENDPTCTRL0's RXT field.
     *
     * RXT
     */
    inline void set_ENDPTCTRL0_RXT(uint8_t value) volatile
    {
        uint32_t curr = ENDPTCTRL0;

        curr &= ~(0b11u << 2u);
        curr |= (value & 0b11u) << 2u;

        ENDPTCTRL0 = curr;
    }

    /**
     * Get ENDPTCTRL0's RXS bit.
     *
     * RXS
     */
    inline bool get_ENDPTCTRL0_RXS() volatile
    {
        return ENDPTCTRL0 & (1u << 0u);
    }

    /**
     * Set ENDPTCTRL0's RXS bit.
     *
     * RXS
     */
    inline void set_ENDPTCTRL0_RXS() volatile
    {
        ENDPTCTRL0 |= 1u << 0u;
    }

    /**
     * Clear ENDPTCTRL0's RXS bit.
     *
     * RXS
     */
    inline void clear_ENDPTCTRL0_RXS() volatile
    {
        ENDPTCTRL0 &= ~(1u << 0u);
    }

    /**
     * Toggle ENDPTCTRL0's RXS bit.
     *
     * RXS
     */
    inline void toggle_ENDPTCTRL0_RXS() volatile
    {
        ENDPTCTRL0 ^= 1u << 0u;
    }

    /**
     * Get all of ENDPTCTRL0's bit fields.
     *
     * (read-write) Endpoint Control0
     */
    inline void get_ENDPTCTRL0(bool &TXE, uint8_t &TXT, bool &TXS, bool &RXE,
                               uint8_t &RXT, bool &RXS) volatile
    {
        uint32_t curr = ENDPTCTRL0;

        TXE = curr & (1u << 23u);
        TXT = (curr >> 18u) & 0b11u;
        TXS = curr & (1u << 16u);
        RXE = curr & (1u << 7u);
        RXT = (curr >> 2u) & 0b11u;
        RXS = curr & (1u << 0u);
    }

    /**
     * Set all of ENDPTCTRL0's bit fields.
     *
     * (read-write) Endpoint Control0
     */
    inline void set_ENDPTCTRL0(bool TXE, uint8_t TXT, bool TXS, bool RXE,
                               uint8_t RXT, bool RXS) volatile
    {
        uint32_t curr = ENDPTCTRL0;

        curr &= ~(0b1u << 23u);
        curr |= (TXE & 0b1u) << 23u;
        curr &= ~(0b11u << 18u);
        curr |= (TXT & 0b11u) << 18u;
        curr &= ~(0b1u << 16u);
        curr |= (TXS & 0b1u) << 16u;
        curr &= ~(0b1u << 7u);
        curr |= (RXE & 0b1u) << 7u;
        curr &= ~(0b11u << 2u);
        curr |= (RXT & 0b11u) << 2u;
        curr &= ~(0b1u << 0u);
        curr |= (RXS & 0b1u) << 0u;

        ENDPTCTRL0 = curr;
    }

    /**
     * Get ENDPTCTRL1's TXE bit.
     *
     * TXE
     */
    inline bool get_ENDPTCTRL1_TXE() volatile
    {
        return ENDPTCTRL1 & (1u << 23u);
    }

    /**
     * Set ENDPTCTRL1's TXE bit.
     *
     * TXE
     */
    inline void set_ENDPTCTRL1_TXE() volatile
    {
        ENDPTCTRL1 |= 1u << 23u;
    }

    /**
     * Clear ENDPTCTRL1's TXE bit.
     *
     * TXE
     */
    inline void clear_ENDPTCTRL1_TXE() volatile
    {
        ENDPTCTRL1 &= ~(1u << 23u);
    }

    /**
     * Toggle ENDPTCTRL1's TXE bit.
     *
     * TXE
     */
    inline void toggle_ENDPTCTRL1_TXE() volatile
    {
        ENDPTCTRL1 ^= 1u << 23u;
    }

    /**
     * Get ENDPTCTRL1's TXR bit.
     *
     * TXR
     */
    inline bool get_ENDPTCTRL1_TXR() volatile
    {
        return ENDPTCTRL1 & (1u << 22u);
    }

    /**
     * Set ENDPTCTRL1's TXR bit.
     *
     * TXR
     */
    inline void set_ENDPTCTRL1_TXR() volatile
    {
        ENDPTCTRL1 |= 1u << 22u;
    }

    /**
     * Clear ENDPTCTRL1's TXR bit.
     *
     * TXR
     */
    inline void clear_ENDPTCTRL1_TXR() volatile
    {
        ENDPTCTRL1 &= ~(1u << 22u);
    }

    /**
     * Toggle ENDPTCTRL1's TXR bit.
     *
     * TXR
     */
    inline void toggle_ENDPTCTRL1_TXR() volatile
    {
        ENDPTCTRL1 ^= 1u << 22u;
    }

    /**
     * Get ENDPTCTRL1's TXI bit.
     *
     * TXI
     */
    inline bool get_ENDPTCTRL1_TXI() volatile
    {
        return ENDPTCTRL1 & (1u << 21u);
    }

    /**
     * Set ENDPTCTRL1's TXI bit.
     *
     * TXI
     */
    inline void set_ENDPTCTRL1_TXI() volatile
    {
        ENDPTCTRL1 |= 1u << 21u;
    }

    /**
     * Clear ENDPTCTRL1's TXI bit.
     *
     * TXI
     */
    inline void clear_ENDPTCTRL1_TXI() volatile
    {
        ENDPTCTRL1 &= ~(1u << 21u);
    }

    /**
     * Toggle ENDPTCTRL1's TXI bit.
     *
     * TXI
     */
    inline void toggle_ENDPTCTRL1_TXI() volatile
    {
        ENDPTCTRL1 ^= 1u << 21u;
    }

    /**
     * Get ENDPTCTRL1's TXT field.
     *
     * TXT
     */
    inline uint8_t get_ENDPTCTRL1_TXT() volatile
    {
        return (ENDPTCTRL1 >> 18u) & 0b11u;
    }

    /**
     * Set ENDPTCTRL1's TXT field.
     *
     * TXT
     */
    inline void set_ENDPTCTRL1_TXT(uint8_t value) volatile
    {
        uint32_t curr = ENDPTCTRL1;

        curr &= ~(0b11u << 18u);
        curr |= (value & 0b11u) << 18u;

        ENDPTCTRL1 = curr;
    }

    /**
     * Get ENDPTCTRL1's TXD bit.
     *
     * TXD
     */
    inline bool get_ENDPTCTRL1_TXD() volatile
    {
        return ENDPTCTRL1 & (1u << 17u);
    }

    /**
     * Set ENDPTCTRL1's TXD bit.
     *
     * TXD
     */
    inline void set_ENDPTCTRL1_TXD() volatile
    {
        ENDPTCTRL1 |= 1u << 17u;
    }

    /**
     * Clear ENDPTCTRL1's TXD bit.
     *
     * TXD
     */
    inline void clear_ENDPTCTRL1_TXD() volatile
    {
        ENDPTCTRL1 &= ~(1u << 17u);
    }

    /**
     * Toggle ENDPTCTRL1's TXD bit.
     *
     * TXD
     */
    inline void toggle_ENDPTCTRL1_TXD() volatile
    {
        ENDPTCTRL1 ^= 1u << 17u;
    }

    /**
     * Get ENDPTCTRL1's TXS bit.
     *
     * TXS
     */
    inline bool get_ENDPTCTRL1_TXS() volatile
    {
        return ENDPTCTRL1 & (1u << 16u);
    }

    /**
     * Set ENDPTCTRL1's TXS bit.
     *
     * TXS
     */
    inline void set_ENDPTCTRL1_TXS() volatile
    {
        ENDPTCTRL1 |= 1u << 16u;
    }

    /**
     * Clear ENDPTCTRL1's TXS bit.
     *
     * TXS
     */
    inline void clear_ENDPTCTRL1_TXS() volatile
    {
        ENDPTCTRL1 &= ~(1u << 16u);
    }

    /**
     * Toggle ENDPTCTRL1's TXS bit.
     *
     * TXS
     */
    inline void toggle_ENDPTCTRL1_TXS() volatile
    {
        ENDPTCTRL1 ^= 1u << 16u;
    }

    /**
     * Get ENDPTCTRL1's RXE bit.
     *
     * RXE
     */
    inline bool get_ENDPTCTRL1_RXE() volatile
    {
        return ENDPTCTRL1 & (1u << 7u);
    }

    /**
     * Set ENDPTCTRL1's RXE bit.
     *
     * RXE
     */
    inline void set_ENDPTCTRL1_RXE() volatile
    {
        ENDPTCTRL1 |= 1u << 7u;
    }

    /**
     * Clear ENDPTCTRL1's RXE bit.
     *
     * RXE
     */
    inline void clear_ENDPTCTRL1_RXE() volatile
    {
        ENDPTCTRL1 &= ~(1u << 7u);
    }

    /**
     * Toggle ENDPTCTRL1's RXE bit.
     *
     * RXE
     */
    inline void toggle_ENDPTCTRL1_RXE() volatile
    {
        ENDPTCTRL1 ^= 1u << 7u;
    }

    /**
     * Get ENDPTCTRL1's RXR bit.
     *
     * RXR
     */
    inline bool get_ENDPTCTRL1_RXR() volatile
    {
        return ENDPTCTRL1 & (1u << 6u);
    }

    /**
     * Set ENDPTCTRL1's RXR bit.
     *
     * RXR
     */
    inline void set_ENDPTCTRL1_RXR() volatile
    {
        ENDPTCTRL1 |= 1u << 6u;
    }

    /**
     * Clear ENDPTCTRL1's RXR bit.
     *
     * RXR
     */
    inline void clear_ENDPTCTRL1_RXR() volatile
    {
        ENDPTCTRL1 &= ~(1u << 6u);
    }

    /**
     * Toggle ENDPTCTRL1's RXR bit.
     *
     * RXR
     */
    inline void toggle_ENDPTCTRL1_RXR() volatile
    {
        ENDPTCTRL1 ^= 1u << 6u;
    }

    /**
     * Get ENDPTCTRL1's RXI bit.
     *
     * RXI
     */
    inline bool get_ENDPTCTRL1_RXI() volatile
    {
        return ENDPTCTRL1 & (1u << 5u);
    }

    /**
     * Set ENDPTCTRL1's RXI bit.
     *
     * RXI
     */
    inline void set_ENDPTCTRL1_RXI() volatile
    {
        ENDPTCTRL1 |= 1u << 5u;
    }

    /**
     * Clear ENDPTCTRL1's RXI bit.
     *
     * RXI
     */
    inline void clear_ENDPTCTRL1_RXI() volatile
    {
        ENDPTCTRL1 &= ~(1u << 5u);
    }

    /**
     * Toggle ENDPTCTRL1's RXI bit.
     *
     * RXI
     */
    inline void toggle_ENDPTCTRL1_RXI() volatile
    {
        ENDPTCTRL1 ^= 1u << 5u;
    }

    /**
     * Get ENDPTCTRL1's RXT field.
     *
     * RXT
     */
    inline uint8_t get_ENDPTCTRL1_RXT() volatile
    {
        return (ENDPTCTRL1 >> 2u) & 0b11u;
    }

    /**
     * Set ENDPTCTRL1's RXT field.
     *
     * RXT
     */
    inline void set_ENDPTCTRL1_RXT(uint8_t value) volatile
    {
        uint32_t curr = ENDPTCTRL1;

        curr &= ~(0b11u << 2u);
        curr |= (value & 0b11u) << 2u;

        ENDPTCTRL1 = curr;
    }

    /**
     * Get ENDPTCTRL1's RXD bit.
     *
     * RXD
     */
    inline bool get_ENDPTCTRL1_RXD() volatile
    {
        return ENDPTCTRL1 & (1u << 1u);
    }

    /**
     * Set ENDPTCTRL1's RXD bit.
     *
     * RXD
     */
    inline void set_ENDPTCTRL1_RXD() volatile
    {
        ENDPTCTRL1 |= 1u << 1u;
    }

    /**
     * Clear ENDPTCTRL1's RXD bit.
     *
     * RXD
     */
    inline void clear_ENDPTCTRL1_RXD() volatile
    {
        ENDPTCTRL1 &= ~(1u << 1u);
    }

    /**
     * Toggle ENDPTCTRL1's RXD bit.
     *
     * RXD
     */
    inline void toggle_ENDPTCTRL1_RXD() volatile
    {
        ENDPTCTRL1 ^= 1u << 1u;
    }

    /**
     * Get ENDPTCTRL1's RXS bit.
     *
     * RXS
     */
    inline bool get_ENDPTCTRL1_RXS() volatile
    {
        return ENDPTCTRL1 & (1u << 0u);
    }

    /**
     * Set ENDPTCTRL1's RXS bit.
     *
     * RXS
     */
    inline void set_ENDPTCTRL1_RXS() volatile
    {
        ENDPTCTRL1 |= 1u << 0u;
    }

    /**
     * Clear ENDPTCTRL1's RXS bit.
     *
     * RXS
     */
    inline void clear_ENDPTCTRL1_RXS() volatile
    {
        ENDPTCTRL1 &= ~(1u << 0u);
    }

    /**
     * Toggle ENDPTCTRL1's RXS bit.
     *
     * RXS
     */
    inline void toggle_ENDPTCTRL1_RXS() volatile
    {
        ENDPTCTRL1 ^= 1u << 0u;
    }

    /**
     * Get all of ENDPTCTRL1's bit fields.
     *
     * (read-write) Endpoint Control 1
     */
    inline void get_ENDPTCTRL1(bool &TXE, bool &TXR, bool &TXI, uint8_t &TXT,
                               bool &TXD, bool &TXS, bool &RXE, bool &RXR,
                               bool &RXI, uint8_t &RXT, bool &RXD,
                               bool &RXS) volatile
    {
        uint32_t curr = ENDPTCTRL1;

        TXE = curr & (1u << 23u);
        TXR = curr & (1u << 22u);
        TXI = curr & (1u << 21u);
        TXT = (curr >> 18u) & 0b11u;
        TXD = curr & (1u << 17u);
        TXS = curr & (1u << 16u);
        RXE = curr & (1u << 7u);
        RXR = curr & (1u << 6u);
        RXI = curr & (1u << 5u);
        RXT = (curr >> 2u) & 0b11u;
        RXD = curr & (1u << 1u);
        RXS = curr & (1u << 0u);
    }

    /**
     * Set all of ENDPTCTRL1's bit fields.
     *
     * (read-write) Endpoint Control 1
     */
    inline void set_ENDPTCTRL1(bool TXE, bool TXR, bool TXI, uint8_t TXT,
                               bool TXD, bool TXS, bool RXE, bool RXR,
                               bool RXI, uint8_t RXT, bool RXD,
                               bool RXS) volatile
    {
        uint32_t curr = ENDPTCTRL1;

        curr &= ~(0b1u << 23u);
        curr |= (TXE & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (TXR & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (TXI & 0b1u) << 21u;
        curr &= ~(0b11u << 18u);
        curr |= (TXT & 0b11u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (TXD & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (TXS & 0b1u) << 16u;
        curr &= ~(0b1u << 7u);
        curr |= (RXE & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (RXR & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (RXI & 0b1u) << 5u;
        curr &= ~(0b11u << 2u);
        curr |= (RXT & 0b11u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (RXD & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RXS & 0b1u) << 0u;

        ENDPTCTRL1 = curr;
    }

    /**
     * Get ENDPTCTRL2's TXE bit.
     *
     * TXE
     */
    inline bool get_ENDPTCTRL2_TXE() volatile
    {
        return ENDPTCTRL2 & (1u << 23u);
    }

    /**
     * Set ENDPTCTRL2's TXE bit.
     *
     * TXE
     */
    inline void set_ENDPTCTRL2_TXE() volatile
    {
        ENDPTCTRL2 |= 1u << 23u;
    }

    /**
     * Clear ENDPTCTRL2's TXE bit.
     *
     * TXE
     */
    inline void clear_ENDPTCTRL2_TXE() volatile
    {
        ENDPTCTRL2 &= ~(1u << 23u);
    }

    /**
     * Toggle ENDPTCTRL2's TXE bit.
     *
     * TXE
     */
    inline void toggle_ENDPTCTRL2_TXE() volatile
    {
        ENDPTCTRL2 ^= 1u << 23u;
    }

    /**
     * Get ENDPTCTRL2's TXR bit.
     *
     * TXR
     */
    inline bool get_ENDPTCTRL2_TXR() volatile
    {
        return ENDPTCTRL2 & (1u << 22u);
    }

    /**
     * Set ENDPTCTRL2's TXR bit.
     *
     * TXR
     */
    inline void set_ENDPTCTRL2_TXR() volatile
    {
        ENDPTCTRL2 |= 1u << 22u;
    }

    /**
     * Clear ENDPTCTRL2's TXR bit.
     *
     * TXR
     */
    inline void clear_ENDPTCTRL2_TXR() volatile
    {
        ENDPTCTRL2 &= ~(1u << 22u);
    }

    /**
     * Toggle ENDPTCTRL2's TXR bit.
     *
     * TXR
     */
    inline void toggle_ENDPTCTRL2_TXR() volatile
    {
        ENDPTCTRL2 ^= 1u << 22u;
    }

    /**
     * Get ENDPTCTRL2's TXI bit.
     *
     * TXI
     */
    inline bool get_ENDPTCTRL2_TXI() volatile
    {
        return ENDPTCTRL2 & (1u << 21u);
    }

    /**
     * Set ENDPTCTRL2's TXI bit.
     *
     * TXI
     */
    inline void set_ENDPTCTRL2_TXI() volatile
    {
        ENDPTCTRL2 |= 1u << 21u;
    }

    /**
     * Clear ENDPTCTRL2's TXI bit.
     *
     * TXI
     */
    inline void clear_ENDPTCTRL2_TXI() volatile
    {
        ENDPTCTRL2 &= ~(1u << 21u);
    }

    /**
     * Toggle ENDPTCTRL2's TXI bit.
     *
     * TXI
     */
    inline void toggle_ENDPTCTRL2_TXI() volatile
    {
        ENDPTCTRL2 ^= 1u << 21u;
    }

    /**
     * Get ENDPTCTRL2's TXT field.
     *
     * TXT
     */
    inline uint8_t get_ENDPTCTRL2_TXT() volatile
    {
        return (ENDPTCTRL2 >> 18u) & 0b11u;
    }

    /**
     * Set ENDPTCTRL2's TXT field.
     *
     * TXT
     */
    inline void set_ENDPTCTRL2_TXT(uint8_t value) volatile
    {
        uint32_t curr = ENDPTCTRL2;

        curr &= ~(0b11u << 18u);
        curr |= (value & 0b11u) << 18u;

        ENDPTCTRL2 = curr;
    }

    /**
     * Get ENDPTCTRL2's TXD bit.
     *
     * TXD
     */
    inline bool get_ENDPTCTRL2_TXD() volatile
    {
        return ENDPTCTRL2 & (1u << 17u);
    }

    /**
     * Set ENDPTCTRL2's TXD bit.
     *
     * TXD
     */
    inline void set_ENDPTCTRL2_TXD() volatile
    {
        ENDPTCTRL2 |= 1u << 17u;
    }

    /**
     * Clear ENDPTCTRL2's TXD bit.
     *
     * TXD
     */
    inline void clear_ENDPTCTRL2_TXD() volatile
    {
        ENDPTCTRL2 &= ~(1u << 17u);
    }

    /**
     * Toggle ENDPTCTRL2's TXD bit.
     *
     * TXD
     */
    inline void toggle_ENDPTCTRL2_TXD() volatile
    {
        ENDPTCTRL2 ^= 1u << 17u;
    }

    /**
     * Get ENDPTCTRL2's TXS bit.
     *
     * TXS
     */
    inline bool get_ENDPTCTRL2_TXS() volatile
    {
        return ENDPTCTRL2 & (1u << 16u);
    }

    /**
     * Set ENDPTCTRL2's TXS bit.
     *
     * TXS
     */
    inline void set_ENDPTCTRL2_TXS() volatile
    {
        ENDPTCTRL2 |= 1u << 16u;
    }

    /**
     * Clear ENDPTCTRL2's TXS bit.
     *
     * TXS
     */
    inline void clear_ENDPTCTRL2_TXS() volatile
    {
        ENDPTCTRL2 &= ~(1u << 16u);
    }

    /**
     * Toggle ENDPTCTRL2's TXS bit.
     *
     * TXS
     */
    inline void toggle_ENDPTCTRL2_TXS() volatile
    {
        ENDPTCTRL2 ^= 1u << 16u;
    }

    /**
     * Get ENDPTCTRL2's RXE bit.
     *
     * RXE
     */
    inline bool get_ENDPTCTRL2_RXE() volatile
    {
        return ENDPTCTRL2 & (1u << 7u);
    }

    /**
     * Set ENDPTCTRL2's RXE bit.
     *
     * RXE
     */
    inline void set_ENDPTCTRL2_RXE() volatile
    {
        ENDPTCTRL2 |= 1u << 7u;
    }

    /**
     * Clear ENDPTCTRL2's RXE bit.
     *
     * RXE
     */
    inline void clear_ENDPTCTRL2_RXE() volatile
    {
        ENDPTCTRL2 &= ~(1u << 7u);
    }

    /**
     * Toggle ENDPTCTRL2's RXE bit.
     *
     * RXE
     */
    inline void toggle_ENDPTCTRL2_RXE() volatile
    {
        ENDPTCTRL2 ^= 1u << 7u;
    }

    /**
     * Get ENDPTCTRL2's RXR bit.
     *
     * RXR
     */
    inline bool get_ENDPTCTRL2_RXR() volatile
    {
        return ENDPTCTRL2 & (1u << 6u);
    }

    /**
     * Set ENDPTCTRL2's RXR bit.
     *
     * RXR
     */
    inline void set_ENDPTCTRL2_RXR() volatile
    {
        ENDPTCTRL2 |= 1u << 6u;
    }

    /**
     * Clear ENDPTCTRL2's RXR bit.
     *
     * RXR
     */
    inline void clear_ENDPTCTRL2_RXR() volatile
    {
        ENDPTCTRL2 &= ~(1u << 6u);
    }

    /**
     * Toggle ENDPTCTRL2's RXR bit.
     *
     * RXR
     */
    inline void toggle_ENDPTCTRL2_RXR() volatile
    {
        ENDPTCTRL2 ^= 1u << 6u;
    }

    /**
     * Get ENDPTCTRL2's RXI bit.
     *
     * RXI
     */
    inline bool get_ENDPTCTRL2_RXI() volatile
    {
        return ENDPTCTRL2 & (1u << 5u);
    }

    /**
     * Set ENDPTCTRL2's RXI bit.
     *
     * RXI
     */
    inline void set_ENDPTCTRL2_RXI() volatile
    {
        ENDPTCTRL2 |= 1u << 5u;
    }

    /**
     * Clear ENDPTCTRL2's RXI bit.
     *
     * RXI
     */
    inline void clear_ENDPTCTRL2_RXI() volatile
    {
        ENDPTCTRL2 &= ~(1u << 5u);
    }

    /**
     * Toggle ENDPTCTRL2's RXI bit.
     *
     * RXI
     */
    inline void toggle_ENDPTCTRL2_RXI() volatile
    {
        ENDPTCTRL2 ^= 1u << 5u;
    }

    /**
     * Get ENDPTCTRL2's RXT field.
     *
     * RXT
     */
    inline uint8_t get_ENDPTCTRL2_RXT() volatile
    {
        return (ENDPTCTRL2 >> 2u) & 0b11u;
    }

    /**
     * Set ENDPTCTRL2's RXT field.
     *
     * RXT
     */
    inline void set_ENDPTCTRL2_RXT(uint8_t value) volatile
    {
        uint32_t curr = ENDPTCTRL2;

        curr &= ~(0b11u << 2u);
        curr |= (value & 0b11u) << 2u;

        ENDPTCTRL2 = curr;
    }

    /**
     * Get ENDPTCTRL2's RXD bit.
     *
     * RXD
     */
    inline bool get_ENDPTCTRL2_RXD() volatile
    {
        return ENDPTCTRL2 & (1u << 1u);
    }

    /**
     * Set ENDPTCTRL2's RXD bit.
     *
     * RXD
     */
    inline void set_ENDPTCTRL2_RXD() volatile
    {
        ENDPTCTRL2 |= 1u << 1u;
    }

    /**
     * Clear ENDPTCTRL2's RXD bit.
     *
     * RXD
     */
    inline void clear_ENDPTCTRL2_RXD() volatile
    {
        ENDPTCTRL2 &= ~(1u << 1u);
    }

    /**
     * Toggle ENDPTCTRL2's RXD bit.
     *
     * RXD
     */
    inline void toggle_ENDPTCTRL2_RXD() volatile
    {
        ENDPTCTRL2 ^= 1u << 1u;
    }

    /**
     * Get ENDPTCTRL2's RXS bit.
     *
     * RXS
     */
    inline bool get_ENDPTCTRL2_RXS() volatile
    {
        return ENDPTCTRL2 & (1u << 0u);
    }

    /**
     * Set ENDPTCTRL2's RXS bit.
     *
     * RXS
     */
    inline void set_ENDPTCTRL2_RXS() volatile
    {
        ENDPTCTRL2 |= 1u << 0u;
    }

    /**
     * Clear ENDPTCTRL2's RXS bit.
     *
     * RXS
     */
    inline void clear_ENDPTCTRL2_RXS() volatile
    {
        ENDPTCTRL2 &= ~(1u << 0u);
    }

    /**
     * Toggle ENDPTCTRL2's RXS bit.
     *
     * RXS
     */
    inline void toggle_ENDPTCTRL2_RXS() volatile
    {
        ENDPTCTRL2 ^= 1u << 0u;
    }

    /**
     * Get all of ENDPTCTRL2's bit fields.
     *
     * (read-write) Endpoint Control 2
     */
    inline void get_ENDPTCTRL2(bool &TXE, bool &TXR, bool &TXI, uint8_t &TXT,
                               bool &TXD, bool &TXS, bool &RXE, bool &RXR,
                               bool &RXI, uint8_t &RXT, bool &RXD,
                               bool &RXS) volatile
    {
        uint32_t curr = ENDPTCTRL2;

        TXE = curr & (1u << 23u);
        TXR = curr & (1u << 22u);
        TXI = curr & (1u << 21u);
        TXT = (curr >> 18u) & 0b11u;
        TXD = curr & (1u << 17u);
        TXS = curr & (1u << 16u);
        RXE = curr & (1u << 7u);
        RXR = curr & (1u << 6u);
        RXI = curr & (1u << 5u);
        RXT = (curr >> 2u) & 0b11u;
        RXD = curr & (1u << 1u);
        RXS = curr & (1u << 0u);
    }

    /**
     * Set all of ENDPTCTRL2's bit fields.
     *
     * (read-write) Endpoint Control 2
     */
    inline void set_ENDPTCTRL2(bool TXE, bool TXR, bool TXI, uint8_t TXT,
                               bool TXD, bool TXS, bool RXE, bool RXR,
                               bool RXI, uint8_t RXT, bool RXD,
                               bool RXS) volatile
    {
        uint32_t curr = ENDPTCTRL2;

        curr &= ~(0b1u << 23u);
        curr |= (TXE & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (TXR & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (TXI & 0b1u) << 21u;
        curr &= ~(0b11u << 18u);
        curr |= (TXT & 0b11u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (TXD & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (TXS & 0b1u) << 16u;
        curr &= ~(0b1u << 7u);
        curr |= (RXE & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (RXR & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (RXI & 0b1u) << 5u;
        curr &= ~(0b11u << 2u);
        curr |= (RXT & 0b11u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (RXD & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RXS & 0b1u) << 0u;

        ENDPTCTRL2 = curr;
    }

    /**
     * Get ENDPTCTRL3's TXE bit.
     *
     * TXE
     */
    inline bool get_ENDPTCTRL3_TXE() volatile
    {
        return ENDPTCTRL3 & (1u << 23u);
    }

    /**
     * Set ENDPTCTRL3's TXE bit.
     *
     * TXE
     */
    inline void set_ENDPTCTRL3_TXE() volatile
    {
        ENDPTCTRL3 |= 1u << 23u;
    }

    /**
     * Clear ENDPTCTRL3's TXE bit.
     *
     * TXE
     */
    inline void clear_ENDPTCTRL3_TXE() volatile
    {
        ENDPTCTRL3 &= ~(1u << 23u);
    }

    /**
     * Toggle ENDPTCTRL3's TXE bit.
     *
     * TXE
     */
    inline void toggle_ENDPTCTRL3_TXE() volatile
    {
        ENDPTCTRL3 ^= 1u << 23u;
    }

    /**
     * Get ENDPTCTRL3's TXR bit.
     *
     * TXR
     */
    inline bool get_ENDPTCTRL3_TXR() volatile
    {
        return ENDPTCTRL3 & (1u << 22u);
    }

    /**
     * Set ENDPTCTRL3's TXR bit.
     *
     * TXR
     */
    inline void set_ENDPTCTRL3_TXR() volatile
    {
        ENDPTCTRL3 |= 1u << 22u;
    }

    /**
     * Clear ENDPTCTRL3's TXR bit.
     *
     * TXR
     */
    inline void clear_ENDPTCTRL3_TXR() volatile
    {
        ENDPTCTRL3 &= ~(1u << 22u);
    }

    /**
     * Toggle ENDPTCTRL3's TXR bit.
     *
     * TXR
     */
    inline void toggle_ENDPTCTRL3_TXR() volatile
    {
        ENDPTCTRL3 ^= 1u << 22u;
    }

    /**
     * Get ENDPTCTRL3's TXI bit.
     *
     * TXI
     */
    inline bool get_ENDPTCTRL3_TXI() volatile
    {
        return ENDPTCTRL3 & (1u << 21u);
    }

    /**
     * Set ENDPTCTRL3's TXI bit.
     *
     * TXI
     */
    inline void set_ENDPTCTRL3_TXI() volatile
    {
        ENDPTCTRL3 |= 1u << 21u;
    }

    /**
     * Clear ENDPTCTRL3's TXI bit.
     *
     * TXI
     */
    inline void clear_ENDPTCTRL3_TXI() volatile
    {
        ENDPTCTRL3 &= ~(1u << 21u);
    }

    /**
     * Toggle ENDPTCTRL3's TXI bit.
     *
     * TXI
     */
    inline void toggle_ENDPTCTRL3_TXI() volatile
    {
        ENDPTCTRL3 ^= 1u << 21u;
    }

    /**
     * Get ENDPTCTRL3's TXT field.
     *
     * TXT
     */
    inline uint8_t get_ENDPTCTRL3_TXT() volatile
    {
        return (ENDPTCTRL3 >> 18u) & 0b11u;
    }

    /**
     * Set ENDPTCTRL3's TXT field.
     *
     * TXT
     */
    inline void set_ENDPTCTRL3_TXT(uint8_t value) volatile
    {
        uint32_t curr = ENDPTCTRL3;

        curr &= ~(0b11u << 18u);
        curr |= (value & 0b11u) << 18u;

        ENDPTCTRL3 = curr;
    }

    /**
     * Get ENDPTCTRL3's TXD bit.
     *
     * TXD
     */
    inline bool get_ENDPTCTRL3_TXD() volatile
    {
        return ENDPTCTRL3 & (1u << 17u);
    }

    /**
     * Set ENDPTCTRL3's TXD bit.
     *
     * TXD
     */
    inline void set_ENDPTCTRL3_TXD() volatile
    {
        ENDPTCTRL3 |= 1u << 17u;
    }

    /**
     * Clear ENDPTCTRL3's TXD bit.
     *
     * TXD
     */
    inline void clear_ENDPTCTRL3_TXD() volatile
    {
        ENDPTCTRL3 &= ~(1u << 17u);
    }

    /**
     * Toggle ENDPTCTRL3's TXD bit.
     *
     * TXD
     */
    inline void toggle_ENDPTCTRL3_TXD() volatile
    {
        ENDPTCTRL3 ^= 1u << 17u;
    }

    /**
     * Get ENDPTCTRL3's TXS bit.
     *
     * TXS
     */
    inline bool get_ENDPTCTRL3_TXS() volatile
    {
        return ENDPTCTRL3 & (1u << 16u);
    }

    /**
     * Set ENDPTCTRL3's TXS bit.
     *
     * TXS
     */
    inline void set_ENDPTCTRL3_TXS() volatile
    {
        ENDPTCTRL3 |= 1u << 16u;
    }

    /**
     * Clear ENDPTCTRL3's TXS bit.
     *
     * TXS
     */
    inline void clear_ENDPTCTRL3_TXS() volatile
    {
        ENDPTCTRL3 &= ~(1u << 16u);
    }

    /**
     * Toggle ENDPTCTRL3's TXS bit.
     *
     * TXS
     */
    inline void toggle_ENDPTCTRL3_TXS() volatile
    {
        ENDPTCTRL3 ^= 1u << 16u;
    }

    /**
     * Get ENDPTCTRL3's RXE bit.
     *
     * RXE
     */
    inline bool get_ENDPTCTRL3_RXE() volatile
    {
        return ENDPTCTRL3 & (1u << 7u);
    }

    /**
     * Set ENDPTCTRL3's RXE bit.
     *
     * RXE
     */
    inline void set_ENDPTCTRL3_RXE() volatile
    {
        ENDPTCTRL3 |= 1u << 7u;
    }

    /**
     * Clear ENDPTCTRL3's RXE bit.
     *
     * RXE
     */
    inline void clear_ENDPTCTRL3_RXE() volatile
    {
        ENDPTCTRL3 &= ~(1u << 7u);
    }

    /**
     * Toggle ENDPTCTRL3's RXE bit.
     *
     * RXE
     */
    inline void toggle_ENDPTCTRL3_RXE() volatile
    {
        ENDPTCTRL3 ^= 1u << 7u;
    }

    /**
     * Get ENDPTCTRL3's RXR bit.
     *
     * RXR
     */
    inline bool get_ENDPTCTRL3_RXR() volatile
    {
        return ENDPTCTRL3 & (1u << 6u);
    }

    /**
     * Set ENDPTCTRL3's RXR bit.
     *
     * RXR
     */
    inline void set_ENDPTCTRL3_RXR() volatile
    {
        ENDPTCTRL3 |= 1u << 6u;
    }

    /**
     * Clear ENDPTCTRL3's RXR bit.
     *
     * RXR
     */
    inline void clear_ENDPTCTRL3_RXR() volatile
    {
        ENDPTCTRL3 &= ~(1u << 6u);
    }

    /**
     * Toggle ENDPTCTRL3's RXR bit.
     *
     * RXR
     */
    inline void toggle_ENDPTCTRL3_RXR() volatile
    {
        ENDPTCTRL3 ^= 1u << 6u;
    }

    /**
     * Get ENDPTCTRL3's RXI bit.
     *
     * RXI
     */
    inline bool get_ENDPTCTRL3_RXI() volatile
    {
        return ENDPTCTRL3 & (1u << 5u);
    }

    /**
     * Set ENDPTCTRL3's RXI bit.
     *
     * RXI
     */
    inline void set_ENDPTCTRL3_RXI() volatile
    {
        ENDPTCTRL3 |= 1u << 5u;
    }

    /**
     * Clear ENDPTCTRL3's RXI bit.
     *
     * RXI
     */
    inline void clear_ENDPTCTRL3_RXI() volatile
    {
        ENDPTCTRL3 &= ~(1u << 5u);
    }

    /**
     * Toggle ENDPTCTRL3's RXI bit.
     *
     * RXI
     */
    inline void toggle_ENDPTCTRL3_RXI() volatile
    {
        ENDPTCTRL3 ^= 1u << 5u;
    }

    /**
     * Get ENDPTCTRL3's RXT field.
     *
     * RXT
     */
    inline uint8_t get_ENDPTCTRL3_RXT() volatile
    {
        return (ENDPTCTRL3 >> 2u) & 0b11u;
    }

    /**
     * Set ENDPTCTRL3's RXT field.
     *
     * RXT
     */
    inline void set_ENDPTCTRL3_RXT(uint8_t value) volatile
    {
        uint32_t curr = ENDPTCTRL3;

        curr &= ~(0b11u << 2u);
        curr |= (value & 0b11u) << 2u;

        ENDPTCTRL3 = curr;
    }

    /**
     * Get ENDPTCTRL3's RXD bit.
     *
     * RXD
     */
    inline bool get_ENDPTCTRL3_RXD() volatile
    {
        return ENDPTCTRL3 & (1u << 1u);
    }

    /**
     * Set ENDPTCTRL3's RXD bit.
     *
     * RXD
     */
    inline void set_ENDPTCTRL3_RXD() volatile
    {
        ENDPTCTRL3 |= 1u << 1u;
    }

    /**
     * Clear ENDPTCTRL3's RXD bit.
     *
     * RXD
     */
    inline void clear_ENDPTCTRL3_RXD() volatile
    {
        ENDPTCTRL3 &= ~(1u << 1u);
    }

    /**
     * Toggle ENDPTCTRL3's RXD bit.
     *
     * RXD
     */
    inline void toggle_ENDPTCTRL3_RXD() volatile
    {
        ENDPTCTRL3 ^= 1u << 1u;
    }

    /**
     * Get ENDPTCTRL3's RXS bit.
     *
     * RXS
     */
    inline bool get_ENDPTCTRL3_RXS() volatile
    {
        return ENDPTCTRL3 & (1u << 0u);
    }

    /**
     * Set ENDPTCTRL3's RXS bit.
     *
     * RXS
     */
    inline void set_ENDPTCTRL3_RXS() volatile
    {
        ENDPTCTRL3 |= 1u << 0u;
    }

    /**
     * Clear ENDPTCTRL3's RXS bit.
     *
     * RXS
     */
    inline void clear_ENDPTCTRL3_RXS() volatile
    {
        ENDPTCTRL3 &= ~(1u << 0u);
    }

    /**
     * Toggle ENDPTCTRL3's RXS bit.
     *
     * RXS
     */
    inline void toggle_ENDPTCTRL3_RXS() volatile
    {
        ENDPTCTRL3 ^= 1u << 0u;
    }

    /**
     * Get all of ENDPTCTRL3's bit fields.
     *
     * (read-write) Endpoint Control 3
     */
    inline void get_ENDPTCTRL3(bool &TXE, bool &TXR, bool &TXI, uint8_t &TXT,
                               bool &TXD, bool &TXS, bool &RXE, bool &RXR,
                               bool &RXI, uint8_t &RXT, bool &RXD,
                               bool &RXS) volatile
    {
        uint32_t curr = ENDPTCTRL3;

        TXE = curr & (1u << 23u);
        TXR = curr & (1u << 22u);
        TXI = curr & (1u << 21u);
        TXT = (curr >> 18u) & 0b11u;
        TXD = curr & (1u << 17u);
        TXS = curr & (1u << 16u);
        RXE = curr & (1u << 7u);
        RXR = curr & (1u << 6u);
        RXI = curr & (1u << 5u);
        RXT = (curr >> 2u) & 0b11u;
        RXD = curr & (1u << 1u);
        RXS = curr & (1u << 0u);
    }

    /**
     * Set all of ENDPTCTRL3's bit fields.
     *
     * (read-write) Endpoint Control 3
     */
    inline void set_ENDPTCTRL3(bool TXE, bool TXR, bool TXI, uint8_t TXT,
                               bool TXD, bool TXS, bool RXE, bool RXR,
                               bool RXI, uint8_t RXT, bool RXD,
                               bool RXS) volatile
    {
        uint32_t curr = ENDPTCTRL3;

        curr &= ~(0b1u << 23u);
        curr |= (TXE & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (TXR & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (TXI & 0b1u) << 21u;
        curr &= ~(0b11u << 18u);
        curr |= (TXT & 0b11u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (TXD & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (TXS & 0b1u) << 16u;
        curr &= ~(0b1u << 7u);
        curr |= (RXE & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (RXR & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (RXI & 0b1u) << 5u;
        curr &= ~(0b11u << 2u);
        curr |= (RXT & 0b11u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (RXD & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RXS & 0b1u) << 0u;

        ENDPTCTRL3 = curr;
    }

    /**
     * Get ENDPTCTRL4's TXE bit.
     *
     * TXE
     */
    inline bool get_ENDPTCTRL4_TXE() volatile
    {
        return ENDPTCTRL4 & (1u << 23u);
    }

    /**
     * Set ENDPTCTRL4's TXE bit.
     *
     * TXE
     */
    inline void set_ENDPTCTRL4_TXE() volatile
    {
        ENDPTCTRL4 |= 1u << 23u;
    }

    /**
     * Clear ENDPTCTRL4's TXE bit.
     *
     * TXE
     */
    inline void clear_ENDPTCTRL4_TXE() volatile
    {
        ENDPTCTRL4 &= ~(1u << 23u);
    }

    /**
     * Toggle ENDPTCTRL4's TXE bit.
     *
     * TXE
     */
    inline void toggle_ENDPTCTRL4_TXE() volatile
    {
        ENDPTCTRL4 ^= 1u << 23u;
    }

    /**
     * Get ENDPTCTRL4's TXR bit.
     *
     * TXR
     */
    inline bool get_ENDPTCTRL4_TXR() volatile
    {
        return ENDPTCTRL4 & (1u << 22u);
    }

    /**
     * Set ENDPTCTRL4's TXR bit.
     *
     * TXR
     */
    inline void set_ENDPTCTRL4_TXR() volatile
    {
        ENDPTCTRL4 |= 1u << 22u;
    }

    /**
     * Clear ENDPTCTRL4's TXR bit.
     *
     * TXR
     */
    inline void clear_ENDPTCTRL4_TXR() volatile
    {
        ENDPTCTRL4 &= ~(1u << 22u);
    }

    /**
     * Toggle ENDPTCTRL4's TXR bit.
     *
     * TXR
     */
    inline void toggle_ENDPTCTRL4_TXR() volatile
    {
        ENDPTCTRL4 ^= 1u << 22u;
    }

    /**
     * Get ENDPTCTRL4's TXI bit.
     *
     * TXI
     */
    inline bool get_ENDPTCTRL4_TXI() volatile
    {
        return ENDPTCTRL4 & (1u << 21u);
    }

    /**
     * Set ENDPTCTRL4's TXI bit.
     *
     * TXI
     */
    inline void set_ENDPTCTRL4_TXI() volatile
    {
        ENDPTCTRL4 |= 1u << 21u;
    }

    /**
     * Clear ENDPTCTRL4's TXI bit.
     *
     * TXI
     */
    inline void clear_ENDPTCTRL4_TXI() volatile
    {
        ENDPTCTRL4 &= ~(1u << 21u);
    }

    /**
     * Toggle ENDPTCTRL4's TXI bit.
     *
     * TXI
     */
    inline void toggle_ENDPTCTRL4_TXI() volatile
    {
        ENDPTCTRL4 ^= 1u << 21u;
    }

    /**
     * Get ENDPTCTRL4's TXT field.
     *
     * TXT
     */
    inline uint8_t get_ENDPTCTRL4_TXT() volatile
    {
        return (ENDPTCTRL4 >> 18u) & 0b11u;
    }

    /**
     * Set ENDPTCTRL4's TXT field.
     *
     * TXT
     */
    inline void set_ENDPTCTRL4_TXT(uint8_t value) volatile
    {
        uint32_t curr = ENDPTCTRL4;

        curr &= ~(0b11u << 18u);
        curr |= (value & 0b11u) << 18u;

        ENDPTCTRL4 = curr;
    }

    /**
     * Get ENDPTCTRL4's TXD bit.
     *
     * TXD
     */
    inline bool get_ENDPTCTRL4_TXD() volatile
    {
        return ENDPTCTRL4 & (1u << 17u);
    }

    /**
     * Set ENDPTCTRL4's TXD bit.
     *
     * TXD
     */
    inline void set_ENDPTCTRL4_TXD() volatile
    {
        ENDPTCTRL4 |= 1u << 17u;
    }

    /**
     * Clear ENDPTCTRL4's TXD bit.
     *
     * TXD
     */
    inline void clear_ENDPTCTRL4_TXD() volatile
    {
        ENDPTCTRL4 &= ~(1u << 17u);
    }

    /**
     * Toggle ENDPTCTRL4's TXD bit.
     *
     * TXD
     */
    inline void toggle_ENDPTCTRL4_TXD() volatile
    {
        ENDPTCTRL4 ^= 1u << 17u;
    }

    /**
     * Get ENDPTCTRL4's TXS bit.
     *
     * TXS
     */
    inline bool get_ENDPTCTRL4_TXS() volatile
    {
        return ENDPTCTRL4 & (1u << 16u);
    }

    /**
     * Set ENDPTCTRL4's TXS bit.
     *
     * TXS
     */
    inline void set_ENDPTCTRL4_TXS() volatile
    {
        ENDPTCTRL4 |= 1u << 16u;
    }

    /**
     * Clear ENDPTCTRL4's TXS bit.
     *
     * TXS
     */
    inline void clear_ENDPTCTRL4_TXS() volatile
    {
        ENDPTCTRL4 &= ~(1u << 16u);
    }

    /**
     * Toggle ENDPTCTRL4's TXS bit.
     *
     * TXS
     */
    inline void toggle_ENDPTCTRL4_TXS() volatile
    {
        ENDPTCTRL4 ^= 1u << 16u;
    }

    /**
     * Get ENDPTCTRL4's RXE bit.
     *
     * RXE
     */
    inline bool get_ENDPTCTRL4_RXE() volatile
    {
        return ENDPTCTRL4 & (1u << 7u);
    }

    /**
     * Set ENDPTCTRL4's RXE bit.
     *
     * RXE
     */
    inline void set_ENDPTCTRL4_RXE() volatile
    {
        ENDPTCTRL4 |= 1u << 7u;
    }

    /**
     * Clear ENDPTCTRL4's RXE bit.
     *
     * RXE
     */
    inline void clear_ENDPTCTRL4_RXE() volatile
    {
        ENDPTCTRL4 &= ~(1u << 7u);
    }

    /**
     * Toggle ENDPTCTRL4's RXE bit.
     *
     * RXE
     */
    inline void toggle_ENDPTCTRL4_RXE() volatile
    {
        ENDPTCTRL4 ^= 1u << 7u;
    }

    /**
     * Get ENDPTCTRL4's RXR bit.
     *
     * RXR
     */
    inline bool get_ENDPTCTRL4_RXR() volatile
    {
        return ENDPTCTRL4 & (1u << 6u);
    }

    /**
     * Set ENDPTCTRL4's RXR bit.
     *
     * RXR
     */
    inline void set_ENDPTCTRL4_RXR() volatile
    {
        ENDPTCTRL4 |= 1u << 6u;
    }

    /**
     * Clear ENDPTCTRL4's RXR bit.
     *
     * RXR
     */
    inline void clear_ENDPTCTRL4_RXR() volatile
    {
        ENDPTCTRL4 &= ~(1u << 6u);
    }

    /**
     * Toggle ENDPTCTRL4's RXR bit.
     *
     * RXR
     */
    inline void toggle_ENDPTCTRL4_RXR() volatile
    {
        ENDPTCTRL4 ^= 1u << 6u;
    }

    /**
     * Get ENDPTCTRL4's RXI bit.
     *
     * RXI
     */
    inline bool get_ENDPTCTRL4_RXI() volatile
    {
        return ENDPTCTRL4 & (1u << 5u);
    }

    /**
     * Set ENDPTCTRL4's RXI bit.
     *
     * RXI
     */
    inline void set_ENDPTCTRL4_RXI() volatile
    {
        ENDPTCTRL4 |= 1u << 5u;
    }

    /**
     * Clear ENDPTCTRL4's RXI bit.
     *
     * RXI
     */
    inline void clear_ENDPTCTRL4_RXI() volatile
    {
        ENDPTCTRL4 &= ~(1u << 5u);
    }

    /**
     * Toggle ENDPTCTRL4's RXI bit.
     *
     * RXI
     */
    inline void toggle_ENDPTCTRL4_RXI() volatile
    {
        ENDPTCTRL4 ^= 1u << 5u;
    }

    /**
     * Get ENDPTCTRL4's RXT field.
     *
     * RXT
     */
    inline uint8_t get_ENDPTCTRL4_RXT() volatile
    {
        return (ENDPTCTRL4 >> 2u) & 0b11u;
    }

    /**
     * Set ENDPTCTRL4's RXT field.
     *
     * RXT
     */
    inline void set_ENDPTCTRL4_RXT(uint8_t value) volatile
    {
        uint32_t curr = ENDPTCTRL4;

        curr &= ~(0b11u << 2u);
        curr |= (value & 0b11u) << 2u;

        ENDPTCTRL4 = curr;
    }

    /**
     * Get ENDPTCTRL4's RXD bit.
     *
     * RXD
     */
    inline bool get_ENDPTCTRL4_RXD() volatile
    {
        return ENDPTCTRL4 & (1u << 1u);
    }

    /**
     * Set ENDPTCTRL4's RXD bit.
     *
     * RXD
     */
    inline void set_ENDPTCTRL4_RXD() volatile
    {
        ENDPTCTRL4 |= 1u << 1u;
    }

    /**
     * Clear ENDPTCTRL4's RXD bit.
     *
     * RXD
     */
    inline void clear_ENDPTCTRL4_RXD() volatile
    {
        ENDPTCTRL4 &= ~(1u << 1u);
    }

    /**
     * Toggle ENDPTCTRL4's RXD bit.
     *
     * RXD
     */
    inline void toggle_ENDPTCTRL4_RXD() volatile
    {
        ENDPTCTRL4 ^= 1u << 1u;
    }

    /**
     * Get ENDPTCTRL4's RXS bit.
     *
     * RXS
     */
    inline bool get_ENDPTCTRL4_RXS() volatile
    {
        return ENDPTCTRL4 & (1u << 0u);
    }

    /**
     * Set ENDPTCTRL4's RXS bit.
     *
     * RXS
     */
    inline void set_ENDPTCTRL4_RXS() volatile
    {
        ENDPTCTRL4 |= 1u << 0u;
    }

    /**
     * Clear ENDPTCTRL4's RXS bit.
     *
     * RXS
     */
    inline void clear_ENDPTCTRL4_RXS() volatile
    {
        ENDPTCTRL4 &= ~(1u << 0u);
    }

    /**
     * Toggle ENDPTCTRL4's RXS bit.
     *
     * RXS
     */
    inline void toggle_ENDPTCTRL4_RXS() volatile
    {
        ENDPTCTRL4 ^= 1u << 0u;
    }

    /**
     * Get all of ENDPTCTRL4's bit fields.
     *
     * (read-write) Endpoint Control 4
     */
    inline void get_ENDPTCTRL4(bool &TXE, bool &TXR, bool &TXI, uint8_t &TXT,
                               bool &TXD, bool &TXS, bool &RXE, bool &RXR,
                               bool &RXI, uint8_t &RXT, bool &RXD,
                               bool &RXS) volatile
    {
        uint32_t curr = ENDPTCTRL4;

        TXE = curr & (1u << 23u);
        TXR = curr & (1u << 22u);
        TXI = curr & (1u << 21u);
        TXT = (curr >> 18u) & 0b11u;
        TXD = curr & (1u << 17u);
        TXS = curr & (1u << 16u);
        RXE = curr & (1u << 7u);
        RXR = curr & (1u << 6u);
        RXI = curr & (1u << 5u);
        RXT = (curr >> 2u) & 0b11u;
        RXD = curr & (1u << 1u);
        RXS = curr & (1u << 0u);
    }

    /**
     * Set all of ENDPTCTRL4's bit fields.
     *
     * (read-write) Endpoint Control 4
     */
    inline void set_ENDPTCTRL4(bool TXE, bool TXR, bool TXI, uint8_t TXT,
                               bool TXD, bool TXS, bool RXE, bool RXR,
                               bool RXI, uint8_t RXT, bool RXD,
                               bool RXS) volatile
    {
        uint32_t curr = ENDPTCTRL4;

        curr &= ~(0b1u << 23u);
        curr |= (TXE & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (TXR & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (TXI & 0b1u) << 21u;
        curr &= ~(0b11u << 18u);
        curr |= (TXT & 0b11u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (TXD & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (TXS & 0b1u) << 16u;
        curr &= ~(0b1u << 7u);
        curr |= (RXE & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (RXR & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (RXI & 0b1u) << 5u;
        curr &= ~(0b11u << 2u);
        curr |= (RXT & 0b11u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (RXD & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RXS & 0b1u) << 0u;

        ENDPTCTRL4 = curr;
    }

    /**
     * Get ENDPTCTRL5's TXE bit.
     *
     * TXE
     */
    inline bool get_ENDPTCTRL5_TXE() volatile
    {
        return ENDPTCTRL5 & (1u << 23u);
    }

    /**
     * Set ENDPTCTRL5's TXE bit.
     *
     * TXE
     */
    inline void set_ENDPTCTRL5_TXE() volatile
    {
        ENDPTCTRL5 |= 1u << 23u;
    }

    /**
     * Clear ENDPTCTRL5's TXE bit.
     *
     * TXE
     */
    inline void clear_ENDPTCTRL5_TXE() volatile
    {
        ENDPTCTRL5 &= ~(1u << 23u);
    }

    /**
     * Toggle ENDPTCTRL5's TXE bit.
     *
     * TXE
     */
    inline void toggle_ENDPTCTRL5_TXE() volatile
    {
        ENDPTCTRL5 ^= 1u << 23u;
    }

    /**
     * Get ENDPTCTRL5's TXR bit.
     *
     * TXR
     */
    inline bool get_ENDPTCTRL5_TXR() volatile
    {
        return ENDPTCTRL5 & (1u << 22u);
    }

    /**
     * Set ENDPTCTRL5's TXR bit.
     *
     * TXR
     */
    inline void set_ENDPTCTRL5_TXR() volatile
    {
        ENDPTCTRL5 |= 1u << 22u;
    }

    /**
     * Clear ENDPTCTRL5's TXR bit.
     *
     * TXR
     */
    inline void clear_ENDPTCTRL5_TXR() volatile
    {
        ENDPTCTRL5 &= ~(1u << 22u);
    }

    /**
     * Toggle ENDPTCTRL5's TXR bit.
     *
     * TXR
     */
    inline void toggle_ENDPTCTRL5_TXR() volatile
    {
        ENDPTCTRL5 ^= 1u << 22u;
    }

    /**
     * Get ENDPTCTRL5's TXI bit.
     *
     * TXI
     */
    inline bool get_ENDPTCTRL5_TXI() volatile
    {
        return ENDPTCTRL5 & (1u << 21u);
    }

    /**
     * Set ENDPTCTRL5's TXI bit.
     *
     * TXI
     */
    inline void set_ENDPTCTRL5_TXI() volatile
    {
        ENDPTCTRL5 |= 1u << 21u;
    }

    /**
     * Clear ENDPTCTRL5's TXI bit.
     *
     * TXI
     */
    inline void clear_ENDPTCTRL5_TXI() volatile
    {
        ENDPTCTRL5 &= ~(1u << 21u);
    }

    /**
     * Toggle ENDPTCTRL5's TXI bit.
     *
     * TXI
     */
    inline void toggle_ENDPTCTRL5_TXI() volatile
    {
        ENDPTCTRL5 ^= 1u << 21u;
    }

    /**
     * Get ENDPTCTRL5's TXT field.
     *
     * TXT
     */
    inline uint8_t get_ENDPTCTRL5_TXT() volatile
    {
        return (ENDPTCTRL5 >> 18u) & 0b11u;
    }

    /**
     * Set ENDPTCTRL5's TXT field.
     *
     * TXT
     */
    inline void set_ENDPTCTRL5_TXT(uint8_t value) volatile
    {
        uint32_t curr = ENDPTCTRL5;

        curr &= ~(0b11u << 18u);
        curr |= (value & 0b11u) << 18u;

        ENDPTCTRL5 = curr;
    }

    /**
     * Get ENDPTCTRL5's TXD bit.
     *
     * TXD
     */
    inline bool get_ENDPTCTRL5_TXD() volatile
    {
        return ENDPTCTRL5 & (1u << 17u);
    }

    /**
     * Set ENDPTCTRL5's TXD bit.
     *
     * TXD
     */
    inline void set_ENDPTCTRL5_TXD() volatile
    {
        ENDPTCTRL5 |= 1u << 17u;
    }

    /**
     * Clear ENDPTCTRL5's TXD bit.
     *
     * TXD
     */
    inline void clear_ENDPTCTRL5_TXD() volatile
    {
        ENDPTCTRL5 &= ~(1u << 17u);
    }

    /**
     * Toggle ENDPTCTRL5's TXD bit.
     *
     * TXD
     */
    inline void toggle_ENDPTCTRL5_TXD() volatile
    {
        ENDPTCTRL5 ^= 1u << 17u;
    }

    /**
     * Get ENDPTCTRL5's TXS bit.
     *
     * TXS
     */
    inline bool get_ENDPTCTRL5_TXS() volatile
    {
        return ENDPTCTRL5 & (1u << 16u);
    }

    /**
     * Set ENDPTCTRL5's TXS bit.
     *
     * TXS
     */
    inline void set_ENDPTCTRL5_TXS() volatile
    {
        ENDPTCTRL5 |= 1u << 16u;
    }

    /**
     * Clear ENDPTCTRL5's TXS bit.
     *
     * TXS
     */
    inline void clear_ENDPTCTRL5_TXS() volatile
    {
        ENDPTCTRL5 &= ~(1u << 16u);
    }

    /**
     * Toggle ENDPTCTRL5's TXS bit.
     *
     * TXS
     */
    inline void toggle_ENDPTCTRL5_TXS() volatile
    {
        ENDPTCTRL5 ^= 1u << 16u;
    }

    /**
     * Get ENDPTCTRL5's RXE bit.
     *
     * RXE
     */
    inline bool get_ENDPTCTRL5_RXE() volatile
    {
        return ENDPTCTRL5 & (1u << 7u);
    }

    /**
     * Set ENDPTCTRL5's RXE bit.
     *
     * RXE
     */
    inline void set_ENDPTCTRL5_RXE() volatile
    {
        ENDPTCTRL5 |= 1u << 7u;
    }

    /**
     * Clear ENDPTCTRL5's RXE bit.
     *
     * RXE
     */
    inline void clear_ENDPTCTRL5_RXE() volatile
    {
        ENDPTCTRL5 &= ~(1u << 7u);
    }

    /**
     * Toggle ENDPTCTRL5's RXE bit.
     *
     * RXE
     */
    inline void toggle_ENDPTCTRL5_RXE() volatile
    {
        ENDPTCTRL5 ^= 1u << 7u;
    }

    /**
     * Get ENDPTCTRL5's RXR bit.
     *
     * RXR
     */
    inline bool get_ENDPTCTRL5_RXR() volatile
    {
        return ENDPTCTRL5 & (1u << 6u);
    }

    /**
     * Set ENDPTCTRL5's RXR bit.
     *
     * RXR
     */
    inline void set_ENDPTCTRL5_RXR() volatile
    {
        ENDPTCTRL5 |= 1u << 6u;
    }

    /**
     * Clear ENDPTCTRL5's RXR bit.
     *
     * RXR
     */
    inline void clear_ENDPTCTRL5_RXR() volatile
    {
        ENDPTCTRL5 &= ~(1u << 6u);
    }

    /**
     * Toggle ENDPTCTRL5's RXR bit.
     *
     * RXR
     */
    inline void toggle_ENDPTCTRL5_RXR() volatile
    {
        ENDPTCTRL5 ^= 1u << 6u;
    }

    /**
     * Get ENDPTCTRL5's RXI bit.
     *
     * RXI
     */
    inline bool get_ENDPTCTRL5_RXI() volatile
    {
        return ENDPTCTRL5 & (1u << 5u);
    }

    /**
     * Set ENDPTCTRL5's RXI bit.
     *
     * RXI
     */
    inline void set_ENDPTCTRL5_RXI() volatile
    {
        ENDPTCTRL5 |= 1u << 5u;
    }

    /**
     * Clear ENDPTCTRL5's RXI bit.
     *
     * RXI
     */
    inline void clear_ENDPTCTRL5_RXI() volatile
    {
        ENDPTCTRL5 &= ~(1u << 5u);
    }

    /**
     * Toggle ENDPTCTRL5's RXI bit.
     *
     * RXI
     */
    inline void toggle_ENDPTCTRL5_RXI() volatile
    {
        ENDPTCTRL5 ^= 1u << 5u;
    }

    /**
     * Get ENDPTCTRL5's RXT field.
     *
     * RXT
     */
    inline uint8_t get_ENDPTCTRL5_RXT() volatile
    {
        return (ENDPTCTRL5 >> 2u) & 0b11u;
    }

    /**
     * Set ENDPTCTRL5's RXT field.
     *
     * RXT
     */
    inline void set_ENDPTCTRL5_RXT(uint8_t value) volatile
    {
        uint32_t curr = ENDPTCTRL5;

        curr &= ~(0b11u << 2u);
        curr |= (value & 0b11u) << 2u;

        ENDPTCTRL5 = curr;
    }

    /**
     * Get ENDPTCTRL5's RXD bit.
     *
     * RXD
     */
    inline bool get_ENDPTCTRL5_RXD() volatile
    {
        return ENDPTCTRL5 & (1u << 1u);
    }

    /**
     * Set ENDPTCTRL5's RXD bit.
     *
     * RXD
     */
    inline void set_ENDPTCTRL5_RXD() volatile
    {
        ENDPTCTRL5 |= 1u << 1u;
    }

    /**
     * Clear ENDPTCTRL5's RXD bit.
     *
     * RXD
     */
    inline void clear_ENDPTCTRL5_RXD() volatile
    {
        ENDPTCTRL5 &= ~(1u << 1u);
    }

    /**
     * Toggle ENDPTCTRL5's RXD bit.
     *
     * RXD
     */
    inline void toggle_ENDPTCTRL5_RXD() volatile
    {
        ENDPTCTRL5 ^= 1u << 1u;
    }

    /**
     * Get ENDPTCTRL5's RXS bit.
     *
     * RXS
     */
    inline bool get_ENDPTCTRL5_RXS() volatile
    {
        return ENDPTCTRL5 & (1u << 0u);
    }

    /**
     * Set ENDPTCTRL5's RXS bit.
     *
     * RXS
     */
    inline void set_ENDPTCTRL5_RXS() volatile
    {
        ENDPTCTRL5 |= 1u << 0u;
    }

    /**
     * Clear ENDPTCTRL5's RXS bit.
     *
     * RXS
     */
    inline void clear_ENDPTCTRL5_RXS() volatile
    {
        ENDPTCTRL5 &= ~(1u << 0u);
    }

    /**
     * Toggle ENDPTCTRL5's RXS bit.
     *
     * RXS
     */
    inline void toggle_ENDPTCTRL5_RXS() volatile
    {
        ENDPTCTRL5 ^= 1u << 0u;
    }

    /**
     * Get all of ENDPTCTRL5's bit fields.
     *
     * (read-write) Endpoint Control 5
     */
    inline void get_ENDPTCTRL5(bool &TXE, bool &TXR, bool &TXI, uint8_t &TXT,
                               bool &TXD, bool &TXS, bool &RXE, bool &RXR,
                               bool &RXI, uint8_t &RXT, bool &RXD,
                               bool &RXS) volatile
    {
        uint32_t curr = ENDPTCTRL5;

        TXE = curr & (1u << 23u);
        TXR = curr & (1u << 22u);
        TXI = curr & (1u << 21u);
        TXT = (curr >> 18u) & 0b11u;
        TXD = curr & (1u << 17u);
        TXS = curr & (1u << 16u);
        RXE = curr & (1u << 7u);
        RXR = curr & (1u << 6u);
        RXI = curr & (1u << 5u);
        RXT = (curr >> 2u) & 0b11u;
        RXD = curr & (1u << 1u);
        RXS = curr & (1u << 0u);
    }

    /**
     * Set all of ENDPTCTRL5's bit fields.
     *
     * (read-write) Endpoint Control 5
     */
    inline void set_ENDPTCTRL5(bool TXE, bool TXR, bool TXI, uint8_t TXT,
                               bool TXD, bool TXS, bool RXE, bool RXR,
                               bool RXI, uint8_t RXT, bool RXD,
                               bool RXS) volatile
    {
        uint32_t curr = ENDPTCTRL5;

        curr &= ~(0b1u << 23u);
        curr |= (TXE & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (TXR & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (TXI & 0b1u) << 21u;
        curr &= ~(0b11u << 18u);
        curr |= (TXT & 0b11u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (TXD & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (TXS & 0b1u) << 16u;
        curr &= ~(0b1u << 7u);
        curr |= (RXE & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (RXR & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (RXI & 0b1u) << 5u;
        curr &= ~(0b11u << 2u);
        curr |= (RXT & 0b11u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (RXD & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RXS & 0b1u) << 0u;

        ENDPTCTRL5 = curr;
    }

    /**
     * Get ENDPTCTRL6's TXE bit.
     *
     * TXE
     */
    inline bool get_ENDPTCTRL6_TXE() volatile
    {
        return ENDPTCTRL6 & (1u << 23u);
    }

    /**
     * Set ENDPTCTRL6's TXE bit.
     *
     * TXE
     */
    inline void set_ENDPTCTRL6_TXE() volatile
    {
        ENDPTCTRL6 |= 1u << 23u;
    }

    /**
     * Clear ENDPTCTRL6's TXE bit.
     *
     * TXE
     */
    inline void clear_ENDPTCTRL6_TXE() volatile
    {
        ENDPTCTRL6 &= ~(1u << 23u);
    }

    /**
     * Toggle ENDPTCTRL6's TXE bit.
     *
     * TXE
     */
    inline void toggle_ENDPTCTRL6_TXE() volatile
    {
        ENDPTCTRL6 ^= 1u << 23u;
    }

    /**
     * Get ENDPTCTRL6's TXR bit.
     *
     * TXR
     */
    inline bool get_ENDPTCTRL6_TXR() volatile
    {
        return ENDPTCTRL6 & (1u << 22u);
    }

    /**
     * Set ENDPTCTRL6's TXR bit.
     *
     * TXR
     */
    inline void set_ENDPTCTRL6_TXR() volatile
    {
        ENDPTCTRL6 |= 1u << 22u;
    }

    /**
     * Clear ENDPTCTRL6's TXR bit.
     *
     * TXR
     */
    inline void clear_ENDPTCTRL6_TXR() volatile
    {
        ENDPTCTRL6 &= ~(1u << 22u);
    }

    /**
     * Toggle ENDPTCTRL6's TXR bit.
     *
     * TXR
     */
    inline void toggle_ENDPTCTRL6_TXR() volatile
    {
        ENDPTCTRL6 ^= 1u << 22u;
    }

    /**
     * Get ENDPTCTRL6's TXI bit.
     *
     * TXI
     */
    inline bool get_ENDPTCTRL6_TXI() volatile
    {
        return ENDPTCTRL6 & (1u << 21u);
    }

    /**
     * Set ENDPTCTRL6's TXI bit.
     *
     * TXI
     */
    inline void set_ENDPTCTRL6_TXI() volatile
    {
        ENDPTCTRL6 |= 1u << 21u;
    }

    /**
     * Clear ENDPTCTRL6's TXI bit.
     *
     * TXI
     */
    inline void clear_ENDPTCTRL6_TXI() volatile
    {
        ENDPTCTRL6 &= ~(1u << 21u);
    }

    /**
     * Toggle ENDPTCTRL6's TXI bit.
     *
     * TXI
     */
    inline void toggle_ENDPTCTRL6_TXI() volatile
    {
        ENDPTCTRL6 ^= 1u << 21u;
    }

    /**
     * Get ENDPTCTRL6's TXT field.
     *
     * TXT
     */
    inline uint8_t get_ENDPTCTRL6_TXT() volatile
    {
        return (ENDPTCTRL6 >> 18u) & 0b11u;
    }

    /**
     * Set ENDPTCTRL6's TXT field.
     *
     * TXT
     */
    inline void set_ENDPTCTRL6_TXT(uint8_t value) volatile
    {
        uint32_t curr = ENDPTCTRL6;

        curr &= ~(0b11u << 18u);
        curr |= (value & 0b11u) << 18u;

        ENDPTCTRL6 = curr;
    }

    /**
     * Get ENDPTCTRL6's TXD bit.
     *
     * TXD
     */
    inline bool get_ENDPTCTRL6_TXD() volatile
    {
        return ENDPTCTRL6 & (1u << 17u);
    }

    /**
     * Set ENDPTCTRL6's TXD bit.
     *
     * TXD
     */
    inline void set_ENDPTCTRL6_TXD() volatile
    {
        ENDPTCTRL6 |= 1u << 17u;
    }

    /**
     * Clear ENDPTCTRL6's TXD bit.
     *
     * TXD
     */
    inline void clear_ENDPTCTRL6_TXD() volatile
    {
        ENDPTCTRL6 &= ~(1u << 17u);
    }

    /**
     * Toggle ENDPTCTRL6's TXD bit.
     *
     * TXD
     */
    inline void toggle_ENDPTCTRL6_TXD() volatile
    {
        ENDPTCTRL6 ^= 1u << 17u;
    }

    /**
     * Get ENDPTCTRL6's TXS bit.
     *
     * TXS
     */
    inline bool get_ENDPTCTRL6_TXS() volatile
    {
        return ENDPTCTRL6 & (1u << 16u);
    }

    /**
     * Set ENDPTCTRL6's TXS bit.
     *
     * TXS
     */
    inline void set_ENDPTCTRL6_TXS() volatile
    {
        ENDPTCTRL6 |= 1u << 16u;
    }

    /**
     * Clear ENDPTCTRL6's TXS bit.
     *
     * TXS
     */
    inline void clear_ENDPTCTRL6_TXS() volatile
    {
        ENDPTCTRL6 &= ~(1u << 16u);
    }

    /**
     * Toggle ENDPTCTRL6's TXS bit.
     *
     * TXS
     */
    inline void toggle_ENDPTCTRL6_TXS() volatile
    {
        ENDPTCTRL6 ^= 1u << 16u;
    }

    /**
     * Get ENDPTCTRL6's RXE bit.
     *
     * RXE
     */
    inline bool get_ENDPTCTRL6_RXE() volatile
    {
        return ENDPTCTRL6 & (1u << 7u);
    }

    /**
     * Set ENDPTCTRL6's RXE bit.
     *
     * RXE
     */
    inline void set_ENDPTCTRL6_RXE() volatile
    {
        ENDPTCTRL6 |= 1u << 7u;
    }

    /**
     * Clear ENDPTCTRL6's RXE bit.
     *
     * RXE
     */
    inline void clear_ENDPTCTRL6_RXE() volatile
    {
        ENDPTCTRL6 &= ~(1u << 7u);
    }

    /**
     * Toggle ENDPTCTRL6's RXE bit.
     *
     * RXE
     */
    inline void toggle_ENDPTCTRL6_RXE() volatile
    {
        ENDPTCTRL6 ^= 1u << 7u;
    }

    /**
     * Get ENDPTCTRL6's RXR bit.
     *
     * RXR
     */
    inline bool get_ENDPTCTRL6_RXR() volatile
    {
        return ENDPTCTRL6 & (1u << 6u);
    }

    /**
     * Set ENDPTCTRL6's RXR bit.
     *
     * RXR
     */
    inline void set_ENDPTCTRL6_RXR() volatile
    {
        ENDPTCTRL6 |= 1u << 6u;
    }

    /**
     * Clear ENDPTCTRL6's RXR bit.
     *
     * RXR
     */
    inline void clear_ENDPTCTRL6_RXR() volatile
    {
        ENDPTCTRL6 &= ~(1u << 6u);
    }

    /**
     * Toggle ENDPTCTRL6's RXR bit.
     *
     * RXR
     */
    inline void toggle_ENDPTCTRL6_RXR() volatile
    {
        ENDPTCTRL6 ^= 1u << 6u;
    }

    /**
     * Get ENDPTCTRL6's RXI bit.
     *
     * RXI
     */
    inline bool get_ENDPTCTRL6_RXI() volatile
    {
        return ENDPTCTRL6 & (1u << 5u);
    }

    /**
     * Set ENDPTCTRL6's RXI bit.
     *
     * RXI
     */
    inline void set_ENDPTCTRL6_RXI() volatile
    {
        ENDPTCTRL6 |= 1u << 5u;
    }

    /**
     * Clear ENDPTCTRL6's RXI bit.
     *
     * RXI
     */
    inline void clear_ENDPTCTRL6_RXI() volatile
    {
        ENDPTCTRL6 &= ~(1u << 5u);
    }

    /**
     * Toggle ENDPTCTRL6's RXI bit.
     *
     * RXI
     */
    inline void toggle_ENDPTCTRL6_RXI() volatile
    {
        ENDPTCTRL6 ^= 1u << 5u;
    }

    /**
     * Get ENDPTCTRL6's RXT field.
     *
     * RXT
     */
    inline uint8_t get_ENDPTCTRL6_RXT() volatile
    {
        return (ENDPTCTRL6 >> 2u) & 0b11u;
    }

    /**
     * Set ENDPTCTRL6's RXT field.
     *
     * RXT
     */
    inline void set_ENDPTCTRL6_RXT(uint8_t value) volatile
    {
        uint32_t curr = ENDPTCTRL6;

        curr &= ~(0b11u << 2u);
        curr |= (value & 0b11u) << 2u;

        ENDPTCTRL6 = curr;
    }

    /**
     * Get ENDPTCTRL6's RXD bit.
     *
     * RXD
     */
    inline bool get_ENDPTCTRL6_RXD() volatile
    {
        return ENDPTCTRL6 & (1u << 1u);
    }

    /**
     * Set ENDPTCTRL6's RXD bit.
     *
     * RXD
     */
    inline void set_ENDPTCTRL6_RXD() volatile
    {
        ENDPTCTRL6 |= 1u << 1u;
    }

    /**
     * Clear ENDPTCTRL6's RXD bit.
     *
     * RXD
     */
    inline void clear_ENDPTCTRL6_RXD() volatile
    {
        ENDPTCTRL6 &= ~(1u << 1u);
    }

    /**
     * Toggle ENDPTCTRL6's RXD bit.
     *
     * RXD
     */
    inline void toggle_ENDPTCTRL6_RXD() volatile
    {
        ENDPTCTRL6 ^= 1u << 1u;
    }

    /**
     * Get ENDPTCTRL6's RXS bit.
     *
     * RXS
     */
    inline bool get_ENDPTCTRL6_RXS() volatile
    {
        return ENDPTCTRL6 & (1u << 0u);
    }

    /**
     * Set ENDPTCTRL6's RXS bit.
     *
     * RXS
     */
    inline void set_ENDPTCTRL6_RXS() volatile
    {
        ENDPTCTRL6 |= 1u << 0u;
    }

    /**
     * Clear ENDPTCTRL6's RXS bit.
     *
     * RXS
     */
    inline void clear_ENDPTCTRL6_RXS() volatile
    {
        ENDPTCTRL6 &= ~(1u << 0u);
    }

    /**
     * Toggle ENDPTCTRL6's RXS bit.
     *
     * RXS
     */
    inline void toggle_ENDPTCTRL6_RXS() volatile
    {
        ENDPTCTRL6 ^= 1u << 0u;
    }

    /**
     * Get all of ENDPTCTRL6's bit fields.
     *
     * (read-write) Endpoint Control 6
     */
    inline void get_ENDPTCTRL6(bool &TXE, bool &TXR, bool &TXI, uint8_t &TXT,
                               bool &TXD, bool &TXS, bool &RXE, bool &RXR,
                               bool &RXI, uint8_t &RXT, bool &RXD,
                               bool &RXS) volatile
    {
        uint32_t curr = ENDPTCTRL6;

        TXE = curr & (1u << 23u);
        TXR = curr & (1u << 22u);
        TXI = curr & (1u << 21u);
        TXT = (curr >> 18u) & 0b11u;
        TXD = curr & (1u << 17u);
        TXS = curr & (1u << 16u);
        RXE = curr & (1u << 7u);
        RXR = curr & (1u << 6u);
        RXI = curr & (1u << 5u);
        RXT = (curr >> 2u) & 0b11u;
        RXD = curr & (1u << 1u);
        RXS = curr & (1u << 0u);
    }

    /**
     * Set all of ENDPTCTRL6's bit fields.
     *
     * (read-write) Endpoint Control 6
     */
    inline void set_ENDPTCTRL6(bool TXE, bool TXR, bool TXI, uint8_t TXT,
                               bool TXD, bool TXS, bool RXE, bool RXR,
                               bool RXI, uint8_t RXT, bool RXD,
                               bool RXS) volatile
    {
        uint32_t curr = ENDPTCTRL6;

        curr &= ~(0b1u << 23u);
        curr |= (TXE & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (TXR & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (TXI & 0b1u) << 21u;
        curr &= ~(0b11u << 18u);
        curr |= (TXT & 0b11u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (TXD & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (TXS & 0b1u) << 16u;
        curr &= ~(0b1u << 7u);
        curr |= (RXE & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (RXR & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (RXI & 0b1u) << 5u;
        curr &= ~(0b11u << 2u);
        curr |= (RXT & 0b11u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (RXD & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RXS & 0b1u) << 0u;

        ENDPTCTRL6 = curr;
    }

    /**
     * Get ENDPTCTRL7's TXE bit.
     *
     * TXE
     */
    inline bool get_ENDPTCTRL7_TXE() volatile
    {
        return ENDPTCTRL7 & (1u << 23u);
    }

    /**
     * Set ENDPTCTRL7's TXE bit.
     *
     * TXE
     */
    inline void set_ENDPTCTRL7_TXE() volatile
    {
        ENDPTCTRL7 |= 1u << 23u;
    }

    /**
     * Clear ENDPTCTRL7's TXE bit.
     *
     * TXE
     */
    inline void clear_ENDPTCTRL7_TXE() volatile
    {
        ENDPTCTRL7 &= ~(1u << 23u);
    }

    /**
     * Toggle ENDPTCTRL7's TXE bit.
     *
     * TXE
     */
    inline void toggle_ENDPTCTRL7_TXE() volatile
    {
        ENDPTCTRL7 ^= 1u << 23u;
    }

    /**
     * Get ENDPTCTRL7's TXR bit.
     *
     * TXR
     */
    inline bool get_ENDPTCTRL7_TXR() volatile
    {
        return ENDPTCTRL7 & (1u << 22u);
    }

    /**
     * Set ENDPTCTRL7's TXR bit.
     *
     * TXR
     */
    inline void set_ENDPTCTRL7_TXR() volatile
    {
        ENDPTCTRL7 |= 1u << 22u;
    }

    /**
     * Clear ENDPTCTRL7's TXR bit.
     *
     * TXR
     */
    inline void clear_ENDPTCTRL7_TXR() volatile
    {
        ENDPTCTRL7 &= ~(1u << 22u);
    }

    /**
     * Toggle ENDPTCTRL7's TXR bit.
     *
     * TXR
     */
    inline void toggle_ENDPTCTRL7_TXR() volatile
    {
        ENDPTCTRL7 ^= 1u << 22u;
    }

    /**
     * Get ENDPTCTRL7's TXI bit.
     *
     * TXI
     */
    inline bool get_ENDPTCTRL7_TXI() volatile
    {
        return ENDPTCTRL7 & (1u << 21u);
    }

    /**
     * Set ENDPTCTRL7's TXI bit.
     *
     * TXI
     */
    inline void set_ENDPTCTRL7_TXI() volatile
    {
        ENDPTCTRL7 |= 1u << 21u;
    }

    /**
     * Clear ENDPTCTRL7's TXI bit.
     *
     * TXI
     */
    inline void clear_ENDPTCTRL7_TXI() volatile
    {
        ENDPTCTRL7 &= ~(1u << 21u);
    }

    /**
     * Toggle ENDPTCTRL7's TXI bit.
     *
     * TXI
     */
    inline void toggle_ENDPTCTRL7_TXI() volatile
    {
        ENDPTCTRL7 ^= 1u << 21u;
    }

    /**
     * Get ENDPTCTRL7's TXT field.
     *
     * TXT
     */
    inline uint8_t get_ENDPTCTRL7_TXT() volatile
    {
        return (ENDPTCTRL7 >> 18u) & 0b11u;
    }

    /**
     * Set ENDPTCTRL7's TXT field.
     *
     * TXT
     */
    inline void set_ENDPTCTRL7_TXT(uint8_t value) volatile
    {
        uint32_t curr = ENDPTCTRL7;

        curr &= ~(0b11u << 18u);
        curr |= (value & 0b11u) << 18u;

        ENDPTCTRL7 = curr;
    }

    /**
     * Get ENDPTCTRL7's TXD bit.
     *
     * TXD
     */
    inline bool get_ENDPTCTRL7_TXD() volatile
    {
        return ENDPTCTRL7 & (1u << 17u);
    }

    /**
     * Set ENDPTCTRL7's TXD bit.
     *
     * TXD
     */
    inline void set_ENDPTCTRL7_TXD() volatile
    {
        ENDPTCTRL7 |= 1u << 17u;
    }

    /**
     * Clear ENDPTCTRL7's TXD bit.
     *
     * TXD
     */
    inline void clear_ENDPTCTRL7_TXD() volatile
    {
        ENDPTCTRL7 &= ~(1u << 17u);
    }

    /**
     * Toggle ENDPTCTRL7's TXD bit.
     *
     * TXD
     */
    inline void toggle_ENDPTCTRL7_TXD() volatile
    {
        ENDPTCTRL7 ^= 1u << 17u;
    }

    /**
     * Get ENDPTCTRL7's TXS bit.
     *
     * TXS
     */
    inline bool get_ENDPTCTRL7_TXS() volatile
    {
        return ENDPTCTRL7 & (1u << 16u);
    }

    /**
     * Set ENDPTCTRL7's TXS bit.
     *
     * TXS
     */
    inline void set_ENDPTCTRL7_TXS() volatile
    {
        ENDPTCTRL7 |= 1u << 16u;
    }

    /**
     * Clear ENDPTCTRL7's TXS bit.
     *
     * TXS
     */
    inline void clear_ENDPTCTRL7_TXS() volatile
    {
        ENDPTCTRL7 &= ~(1u << 16u);
    }

    /**
     * Toggle ENDPTCTRL7's TXS bit.
     *
     * TXS
     */
    inline void toggle_ENDPTCTRL7_TXS() volatile
    {
        ENDPTCTRL7 ^= 1u << 16u;
    }

    /**
     * Get ENDPTCTRL7's RXE bit.
     *
     * RXE
     */
    inline bool get_ENDPTCTRL7_RXE() volatile
    {
        return ENDPTCTRL7 & (1u << 7u);
    }

    /**
     * Set ENDPTCTRL7's RXE bit.
     *
     * RXE
     */
    inline void set_ENDPTCTRL7_RXE() volatile
    {
        ENDPTCTRL7 |= 1u << 7u;
    }

    /**
     * Clear ENDPTCTRL7's RXE bit.
     *
     * RXE
     */
    inline void clear_ENDPTCTRL7_RXE() volatile
    {
        ENDPTCTRL7 &= ~(1u << 7u);
    }

    /**
     * Toggle ENDPTCTRL7's RXE bit.
     *
     * RXE
     */
    inline void toggle_ENDPTCTRL7_RXE() volatile
    {
        ENDPTCTRL7 ^= 1u << 7u;
    }

    /**
     * Get ENDPTCTRL7's RXR bit.
     *
     * RXR
     */
    inline bool get_ENDPTCTRL7_RXR() volatile
    {
        return ENDPTCTRL7 & (1u << 6u);
    }

    /**
     * Set ENDPTCTRL7's RXR bit.
     *
     * RXR
     */
    inline void set_ENDPTCTRL7_RXR() volatile
    {
        ENDPTCTRL7 |= 1u << 6u;
    }

    /**
     * Clear ENDPTCTRL7's RXR bit.
     *
     * RXR
     */
    inline void clear_ENDPTCTRL7_RXR() volatile
    {
        ENDPTCTRL7 &= ~(1u << 6u);
    }

    /**
     * Toggle ENDPTCTRL7's RXR bit.
     *
     * RXR
     */
    inline void toggle_ENDPTCTRL7_RXR() volatile
    {
        ENDPTCTRL7 ^= 1u << 6u;
    }

    /**
     * Get ENDPTCTRL7's RXI bit.
     *
     * RXI
     */
    inline bool get_ENDPTCTRL7_RXI() volatile
    {
        return ENDPTCTRL7 & (1u << 5u);
    }

    /**
     * Set ENDPTCTRL7's RXI bit.
     *
     * RXI
     */
    inline void set_ENDPTCTRL7_RXI() volatile
    {
        ENDPTCTRL7 |= 1u << 5u;
    }

    /**
     * Clear ENDPTCTRL7's RXI bit.
     *
     * RXI
     */
    inline void clear_ENDPTCTRL7_RXI() volatile
    {
        ENDPTCTRL7 &= ~(1u << 5u);
    }

    /**
     * Toggle ENDPTCTRL7's RXI bit.
     *
     * RXI
     */
    inline void toggle_ENDPTCTRL7_RXI() volatile
    {
        ENDPTCTRL7 ^= 1u << 5u;
    }

    /**
     * Get ENDPTCTRL7's RXT field.
     *
     * RXT
     */
    inline uint8_t get_ENDPTCTRL7_RXT() volatile
    {
        return (ENDPTCTRL7 >> 2u) & 0b11u;
    }

    /**
     * Set ENDPTCTRL7's RXT field.
     *
     * RXT
     */
    inline void set_ENDPTCTRL7_RXT(uint8_t value) volatile
    {
        uint32_t curr = ENDPTCTRL7;

        curr &= ~(0b11u << 2u);
        curr |= (value & 0b11u) << 2u;

        ENDPTCTRL7 = curr;
    }

    /**
     * Get ENDPTCTRL7's RXD bit.
     *
     * RXD
     */
    inline bool get_ENDPTCTRL7_RXD() volatile
    {
        return ENDPTCTRL7 & (1u << 1u);
    }

    /**
     * Set ENDPTCTRL7's RXD bit.
     *
     * RXD
     */
    inline void set_ENDPTCTRL7_RXD() volatile
    {
        ENDPTCTRL7 |= 1u << 1u;
    }

    /**
     * Clear ENDPTCTRL7's RXD bit.
     *
     * RXD
     */
    inline void clear_ENDPTCTRL7_RXD() volatile
    {
        ENDPTCTRL7 &= ~(1u << 1u);
    }

    /**
     * Toggle ENDPTCTRL7's RXD bit.
     *
     * RXD
     */
    inline void toggle_ENDPTCTRL7_RXD() volatile
    {
        ENDPTCTRL7 ^= 1u << 1u;
    }

    /**
     * Get ENDPTCTRL7's RXS bit.
     *
     * RXS
     */
    inline bool get_ENDPTCTRL7_RXS() volatile
    {
        return ENDPTCTRL7 & (1u << 0u);
    }

    /**
     * Set ENDPTCTRL7's RXS bit.
     *
     * RXS
     */
    inline void set_ENDPTCTRL7_RXS() volatile
    {
        ENDPTCTRL7 |= 1u << 0u;
    }

    /**
     * Clear ENDPTCTRL7's RXS bit.
     *
     * RXS
     */
    inline void clear_ENDPTCTRL7_RXS() volatile
    {
        ENDPTCTRL7 &= ~(1u << 0u);
    }

    /**
     * Toggle ENDPTCTRL7's RXS bit.
     *
     * RXS
     */
    inline void toggle_ENDPTCTRL7_RXS() volatile
    {
        ENDPTCTRL7 ^= 1u << 0u;
    }

    /**
     * Get all of ENDPTCTRL7's bit fields.
     *
     * (read-write) Endpoint Control 7
     */
    inline void get_ENDPTCTRL7(bool &TXE, bool &TXR, bool &TXI, uint8_t &TXT,
                               bool &TXD, bool &TXS, bool &RXE, bool &RXR,
                               bool &RXI, uint8_t &RXT, bool &RXD,
                               bool &RXS) volatile
    {
        uint32_t curr = ENDPTCTRL7;

        TXE = curr & (1u << 23u);
        TXR = curr & (1u << 22u);
        TXI = curr & (1u << 21u);
        TXT = (curr >> 18u) & 0b11u;
        TXD = curr & (1u << 17u);
        TXS = curr & (1u << 16u);
        RXE = curr & (1u << 7u);
        RXR = curr & (1u << 6u);
        RXI = curr & (1u << 5u);
        RXT = (curr >> 2u) & 0b11u;
        RXD = curr & (1u << 1u);
        RXS = curr & (1u << 0u);
    }

    /**
     * Set all of ENDPTCTRL7's bit fields.
     *
     * (read-write) Endpoint Control 7
     */
    inline void set_ENDPTCTRL7(bool TXE, bool TXR, bool TXI, uint8_t TXT,
                               bool TXD, bool TXS, bool RXE, bool RXR,
                               bool RXI, uint8_t RXT, bool RXD,
                               bool RXS) volatile
    {
        uint32_t curr = ENDPTCTRL7;

        curr &= ~(0b1u << 23u);
        curr |= (TXE & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (TXR & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (TXI & 0b1u) << 21u;
        curr &= ~(0b11u << 18u);
        curr |= (TXT & 0b11u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (TXD & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (TXS & 0b1u) << 16u;
        curr &= ~(0b1u << 7u);
        curr |= (RXE & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (RXR & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (RXI & 0b1u) << 5u;
        curr &= ~(0b11u << 2u);
        curr |= (RXT & 0b11u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (RXD & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RXS & 0b1u) << 0u;

        ENDPTCTRL7 = curr;
    }
};

static_assert(sizeof(usb_otg1) == usb_otg1::size);

static volatile usb_otg1 *const USB_OTG1 =
    reinterpret_cast<usb_otg1 *>(0x40430000);

static volatile usb_otg1 *const USB_OTG2 =
    reinterpret_cast<usb_otg1 *>(0x4042C000);

}; // namespace MIMXRT1176::CM7
