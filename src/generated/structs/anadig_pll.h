/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * MX6RT_ANADIG_REGISTER
 */
struct [[gnu::packed]] anadig_pll
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        916; /*!< anadig_pll's size in bytes. */

    /* Fields. */
    static constexpr std::size_t reserved_padding0_length = 128;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t ARM_PLL_CTRL; /*!< (read-write) ARM_PLL_CTRL_REGISTER */
    static constexpr std::size_t reserved_padding1_length = 3;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    uint32_t SYS_PLL3_CTRL; /*!< (read-write) SYS_PLL3_CTRL_REGISTER */
    static constexpr std::size_t reserved_padding2_length = 3;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    uint32_t SYS_PLL3_UPDATE; /*!< (read-write) SYS_PLL3_UPDATE_REGISTER */
    static constexpr std::size_t reserved_padding3_length = 3;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    uint32_t SYS_PLL3_PFD; /*!< (read-write) SYS_PLL3_PFD_REGISTER */
    static constexpr std::size_t reserved_padding4_length = 3;
    const uint32_t reserved_padding4[reserved_padding4_length] = {};
    uint32_t SYS_PLL2_CTRL; /*!< (read-write) SYS_PLL2_CTRL_REGISTER */
    static constexpr std::size_t reserved_padding5_length = 3;
    const uint32_t reserved_padding5[reserved_padding5_length] = {};
    uint32_t SYS_PLL2_UPDATE; /*!< (read-write) SYS_PLL2_UPDATE_REGISTER */
    static constexpr std::size_t reserved_padding6_length = 3;
    const uint32_t reserved_padding6[reserved_padding6_length] = {};
    uint32_t SYS_PLL2_SS; /*!< (read-write) SYS_PLL2_SS_REGISTER */
    static constexpr std::size_t reserved_padding7_length = 3;
    const uint32_t reserved_padding7[reserved_padding7_length] = {};
    uint32_t SYS_PLL2_PFD; /*!< (read-write) SYS_PLL2_PFD_REGISTER */
    static constexpr std::size_t reserved_padding8_length = 11;
    const uint32_t reserved_padding8[reserved_padding8_length] = {};
    uint32_t SYS_PLL2_MFD; /*!< (read-write) SYS_PLL2_MFD_REGISTER */
    static constexpr std::size_t reserved_padding9_length = 3;
    const uint32_t reserved_padding9[reserved_padding9_length] = {};
    uint32_t SYS_PLL1_SS; /*!< (read-write) SYS_PLL1_SS_REGISTER */
    static constexpr std::size_t reserved_padding10_length = 3;
    const uint32_t reserved_padding10[reserved_padding10_length] = {};
    uint32_t SYS_PLL1_CTRL; /*!< (read-write) SYS_PLL1_CTRL_REGISTER */
    static constexpr std::size_t reserved_padding11_length = 3;
    const uint32_t reserved_padding11[reserved_padding11_length] = {};
    uint32_t SYS_PLL1_DENOMINATOR; /*!< (read-write)
                                      SYS_PLL1_DENOMINATOR_REGISTER */
    static constexpr std::size_t reserved_padding12_length = 3;
    const uint32_t reserved_padding12[reserved_padding12_length] = {};
    uint32_t
        SYS_PLL1_NUMERATOR; /*!< (read-write) SYS_PLL1_NUMERATOR_REGISTER */
    static constexpr std::size_t reserved_padding13_length = 3;
    const uint32_t reserved_padding13[reserved_padding13_length] = {};
    uint32_t
        SYS_PLL1_DIV_SELECT; /*!< (read-write) SYS_PLL1_DIV_SELECT_REGISTER */
    static constexpr std::size_t reserved_padding14_length = 3;
    const uint32_t reserved_padding14[reserved_padding14_length] = {};
    uint32_t PLL_AUDIO_CTRL; /*!< (read-write) PLL_AUDIO_CTRL_REGISTER */
    static constexpr std::size_t reserved_padding15_length = 3;
    const uint32_t reserved_padding15[reserved_padding15_length] = {};
    uint32_t PLL_AUDIO_SS; /*!< (read-write) PLL_AUDIO_SS_REGISTER */
    static constexpr std::size_t reserved_padding16_length = 3;
    const uint32_t reserved_padding16[reserved_padding16_length] = {};
    uint32_t PLL_AUDIO_DENOMINATOR; /*!< (read-write)
                                       PLL_AUDIO_DENOMINATOR_REGISTER */
    static constexpr std::size_t reserved_padding17_length = 3;
    const uint32_t reserved_padding17[reserved_padding17_length] = {};
    uint32_t
        PLL_AUDIO_NUMERATOR; /*!< (read-write) PLL_AUDIO_NUMERATOR_REGISTER */
    static constexpr std::size_t reserved_padding18_length = 3;
    const uint32_t reserved_padding18[reserved_padding18_length] = {};
    uint32_t PLL_AUDIO_DIV_SELECT; /*!< (read-write)
                                      PLL_AUDIO_DIV_SELECT_REGISTER */
    static constexpr std::size_t reserved_padding19_length = 3;
    const uint32_t reserved_padding19[reserved_padding19_length] = {};
    uint32_t PLL_VIDEO_CTRL; /*!< (read-write) PLL_VIDEO_CTRL_REGISTER */
    static constexpr std::size_t reserved_padding20_length = 3;
    const uint32_t reserved_padding20[reserved_padding20_length] = {};
    uint32_t PLL_VIDEO_SS; /*!< (read-write) PLL_VIDEO_SS_REGISTER */
    static constexpr std::size_t reserved_padding21_length = 3;
    const uint32_t reserved_padding21[reserved_padding21_length] = {};
    uint32_t PLL_VIDEO_DENOMINATOR; /*!< (read-write)
                                       PLL_VIDEO_DENOMINATOR_REGISTER */
    static constexpr std::size_t reserved_padding22_length = 3;
    const uint32_t reserved_padding22[reserved_padding22_length] = {};
    uint32_t
        PLL_VIDEO_NUMERATOR; /*!< (read-write) PLL_VIDEO_NUMERATOR_REGISTER */
    static constexpr std::size_t reserved_padding23_length = 3;
    const uint32_t reserved_padding23[reserved_padding23_length] = {};
    uint32_t PLL_VIDEO_DIV_SELECT; /*!< (read-write)
                                      PLL_VIDEO_DIV_SELECT_REGISTER */

    /* Methods. */

    /**
     * Get ARM_PLL_CTRL's ARM_PLL_CONTROL_MODE bit.
     *
     * pll_arm_control_mode
     */
    inline bool get_ARM_PLL_CTRL_ARM_PLL_CONTROL_MODE() volatile
    {
        return ARM_PLL_CTRL & (1u << 31u);
    }

    /**
     * Set ARM_PLL_CTRL's ARM_PLL_CONTROL_MODE bit.
     *
     * pll_arm_control_mode
     */
    inline void set_ARM_PLL_CTRL_ARM_PLL_CONTROL_MODE() volatile
    {
        ARM_PLL_CTRL |= 1u << 31u;
    }

    /**
     * Clear ARM_PLL_CTRL's ARM_PLL_CONTROL_MODE bit.
     *
     * pll_arm_control_mode
     */
    inline void clear_ARM_PLL_CTRL_ARM_PLL_CONTROL_MODE() volatile
    {
        ARM_PLL_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle ARM_PLL_CTRL's ARM_PLL_CONTROL_MODE bit.
     *
     * pll_arm_control_mode
     */
    inline void toggle_ARM_PLL_CTRL_ARM_PLL_CONTROL_MODE() volatile
    {
        ARM_PLL_CTRL ^= 1u << 31u;
    }

    /**
     * Get ARM_PLL_CTRL's ARM_PLL_GATE bit.
     *
     * ARM_PLL_GATE
     */
    inline bool get_ARM_PLL_CTRL_ARM_PLL_GATE() volatile
    {
        return ARM_PLL_CTRL & (1u << 30u);
    }

    /**
     * Set ARM_PLL_CTRL's ARM_PLL_GATE bit.
     *
     * ARM_PLL_GATE
     */
    inline void set_ARM_PLL_CTRL_ARM_PLL_GATE() volatile
    {
        ARM_PLL_CTRL |= 1u << 30u;
    }

    /**
     * Clear ARM_PLL_CTRL's ARM_PLL_GATE bit.
     *
     * ARM_PLL_GATE
     */
    inline void clear_ARM_PLL_CTRL_ARM_PLL_GATE() volatile
    {
        ARM_PLL_CTRL &= ~(1u << 30u);
    }

    /**
     * Toggle ARM_PLL_CTRL's ARM_PLL_GATE bit.
     *
     * ARM_PLL_GATE
     */
    inline void toggle_ARM_PLL_CTRL_ARM_PLL_GATE() volatile
    {
        ARM_PLL_CTRL ^= 1u << 30u;
    }

    /**
     * Get ARM_PLL_CTRL's ARM_PLL_STABLE bit.
     *
     * ARM_PLL_STABLE
     */
    inline bool get_ARM_PLL_CTRL_ARM_PLL_STABLE() volatile
    {
        return ARM_PLL_CTRL & (1u << 29u);
    }

    /**
     * Get ARM_PLL_CTRL's BYPASS bit.
     *
     * Bypass the pll.
     */
    inline bool get_ARM_PLL_CTRL_BYPASS() volatile
    {
        return ARM_PLL_CTRL & (1u << 17u);
    }

    /**
     * Set ARM_PLL_CTRL's BYPASS bit.
     *
     * Bypass the pll.
     */
    inline void set_ARM_PLL_CTRL_BYPASS() volatile
    {
        ARM_PLL_CTRL |= 1u << 17u;
    }

    /**
     * Clear ARM_PLL_CTRL's BYPASS bit.
     *
     * Bypass the pll.
     */
    inline void clear_ARM_PLL_CTRL_BYPASS() volatile
    {
        ARM_PLL_CTRL &= ~(1u << 17u);
    }

    /**
     * Toggle ARM_PLL_CTRL's BYPASS bit.
     *
     * Bypass the pll.
     */
    inline void toggle_ARM_PLL_CTRL_BYPASS() volatile
    {
        ARM_PLL_CTRL ^= 1u << 17u;
    }

    /**
     * Get ARM_PLL_CTRL's POST_DIV_SEL field.
     *
     * POST_DIV_SEL
     */
    inline ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL
    get_ARM_PLL_CTRL_POST_DIV_SEL() volatile
    {
        return ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL((ARM_PLL_CTRL >> 15u) &
                                                    0b11u);
    }

    /**
     * Set ARM_PLL_CTRL's POST_DIV_SEL field.
     *
     * POST_DIV_SEL
     */
    inline void set_ARM_PLL_CTRL_POST_DIV_SEL(
        ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL value) volatile
    {
        uint32_t curr = ARM_PLL_CTRL;

        curr &= ~(0b11u << 15u);
        curr |= (std::to_underlying(value) & 0b11u) << 15u;

        ARM_PLL_CTRL = curr;
    }

    /**
     * Get ARM_PLL_CTRL's ENABLE_CLK bit.
     *
     * Enable the clock output.
     */
    inline bool get_ARM_PLL_CTRL_ENABLE_CLK() volatile
    {
        return ARM_PLL_CTRL & (1u << 14u);
    }

    /**
     * Set ARM_PLL_CTRL's ENABLE_CLK bit.
     *
     * Enable the clock output.
     */
    inline void set_ARM_PLL_CTRL_ENABLE_CLK() volatile
    {
        ARM_PLL_CTRL |= 1u << 14u;
    }

    /**
     * Clear ARM_PLL_CTRL's ENABLE_CLK bit.
     *
     * Enable the clock output.
     */
    inline void clear_ARM_PLL_CTRL_ENABLE_CLK() volatile
    {
        ARM_PLL_CTRL &= ~(1u << 14u);
    }

    /**
     * Toggle ARM_PLL_CTRL's ENABLE_CLK bit.
     *
     * Enable the clock output.
     */
    inline void toggle_ARM_PLL_CTRL_ENABLE_CLK() volatile
    {
        ARM_PLL_CTRL ^= 1u << 14u;
    }

    /**
     * Get ARM_PLL_CTRL's POWERUP bit.
     *
     * Powers up the PLL.
     */
    inline bool get_ARM_PLL_CTRL_POWERUP() volatile
    {
        return ARM_PLL_CTRL & (1u << 13u);
    }

    /**
     * Set ARM_PLL_CTRL's POWERUP bit.
     *
     * Powers up the PLL.
     */
    inline void set_ARM_PLL_CTRL_POWERUP() volatile
    {
        ARM_PLL_CTRL |= 1u << 13u;
    }

    /**
     * Clear ARM_PLL_CTRL's POWERUP bit.
     *
     * Powers up the PLL.
     */
    inline void clear_ARM_PLL_CTRL_POWERUP() volatile
    {
        ARM_PLL_CTRL &= ~(1u << 13u);
    }

    /**
     * Toggle ARM_PLL_CTRL's POWERUP bit.
     *
     * Powers up the PLL.
     */
    inline void toggle_ARM_PLL_CTRL_POWERUP() volatile
    {
        ARM_PLL_CTRL ^= 1u << 13u;
    }

    /**
     * Get ARM_PLL_CTRL's HOLD_RING_OFF bit.
     *
     * PLL Start up initialization
     */
    inline bool get_ARM_PLL_CTRL_HOLD_RING_OFF() volatile
    {
        return ARM_PLL_CTRL & (1u << 12u);
    }

    /**
     * Set ARM_PLL_CTRL's HOLD_RING_OFF bit.
     *
     * PLL Start up initialization
     */
    inline void set_ARM_PLL_CTRL_HOLD_RING_OFF() volatile
    {
        ARM_PLL_CTRL |= 1u << 12u;
    }

    /**
     * Clear ARM_PLL_CTRL's HOLD_RING_OFF bit.
     *
     * PLL Start up initialization
     */
    inline void clear_ARM_PLL_CTRL_HOLD_RING_OFF() volatile
    {
        ARM_PLL_CTRL &= ~(1u << 12u);
    }

    /**
     * Toggle ARM_PLL_CTRL's HOLD_RING_OFF bit.
     *
     * PLL Start up initialization
     */
    inline void toggle_ARM_PLL_CTRL_HOLD_RING_OFF() volatile
    {
        ARM_PLL_CTRL ^= 1u << 12u;
    }

    /**
     * Get ARM_PLL_CTRL's DIV_SELECT field.
     *
     * DIV_SELECT
     */
    inline uint8_t get_ARM_PLL_CTRL_DIV_SELECT() volatile
    {
        return (ARM_PLL_CTRL >> 0u) & 0b11111111u;
    }

    /**
     * Set ARM_PLL_CTRL's DIV_SELECT field.
     *
     * DIV_SELECT
     */
    inline void set_ARM_PLL_CTRL_DIV_SELECT(uint8_t value) volatile
    {
        uint32_t curr = ARM_PLL_CTRL;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        ARM_PLL_CTRL = curr;
    }

    /**
     * Get all of ARM_PLL_CTRL's bit fields.
     *
     * (read-write) ARM_PLL_CTRL_REGISTER
     */
    inline void get_ARM_PLL_CTRL(
        bool &ARM_PLL_CONTROL_MODE, bool &ARM_PLL_GATE, bool &ARM_PLL_STABLE,
        bool &BYPASS, ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL &POST_DIV_SEL,
        bool &ENABLE_CLK, bool &POWERUP, bool &HOLD_RING_OFF,
        uint8_t &DIV_SELECT) volatile
    {
        uint32_t curr = ARM_PLL_CTRL;

        ARM_PLL_CONTROL_MODE = curr & (1u << 31u);
        ARM_PLL_GATE = curr & (1u << 30u);
        ARM_PLL_STABLE = curr & (1u << 29u);
        BYPASS = curr & (1u << 17u);
        POST_DIV_SEL =
            ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL((curr >> 15u) & 0b11u);
        ENABLE_CLK = curr & (1u << 14u);
        POWERUP = curr & (1u << 13u);
        HOLD_RING_OFF = curr & (1u << 12u);
        DIV_SELECT = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of ARM_PLL_CTRL's bit fields.
     *
     * (read-write) ARM_PLL_CTRL_REGISTER
     */
    inline void set_ARM_PLL_CTRL(
        bool ARM_PLL_CONTROL_MODE, bool ARM_PLL_GATE, bool BYPASS,
        ANADIG_PLL_ARM_PLL_CTRL_POST_DIV_SEL POST_DIV_SEL, bool ENABLE_CLK,
        bool POWERUP, bool HOLD_RING_OFF, uint8_t DIV_SELECT) volatile
    {
        uint32_t curr = ARM_PLL_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (ARM_PLL_CONTROL_MODE & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (ARM_PLL_GATE & 0b1u) << 30u;
        curr &= ~(0b1u << 17u);
        curr |= (BYPASS & 0b1u) << 17u;
        curr &= ~(0b11u << 15u);
        curr |= (std::to_underlying(POST_DIV_SEL) & 0b11u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (ENABLE_CLK & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (POWERUP & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (HOLD_RING_OFF & 0b1u) << 12u;
        curr &= ~(0b11111111u << 0u);
        curr |= (DIV_SELECT & 0b11111111u) << 0u;

        ARM_PLL_CTRL = curr;
    }

    /**
     * Get SYS_PLL3_CTRL's SYS_PLL3_CONTROL_MODE bit.
     *
     * SYS_PLL3_control_mode
     */
    inline bool get_SYS_PLL3_CTRL_SYS_PLL3_CONTROL_MODE() volatile
    {
        return SYS_PLL3_CTRL & (1u << 31u);
    }

    /**
     * Set SYS_PLL3_CTRL's SYS_PLL3_CONTROL_MODE bit.
     *
     * SYS_PLL3_control_mode
     */
    inline void set_SYS_PLL3_CTRL_SYS_PLL3_CONTROL_MODE() volatile
    {
        SYS_PLL3_CTRL |= 1u << 31u;
    }

    /**
     * Clear SYS_PLL3_CTRL's SYS_PLL3_CONTROL_MODE bit.
     *
     * SYS_PLL3_control_mode
     */
    inline void clear_SYS_PLL3_CTRL_SYS_PLL3_CONTROL_MODE() volatile
    {
        SYS_PLL3_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SYS_PLL3_CTRL's SYS_PLL3_CONTROL_MODE bit.
     *
     * SYS_PLL3_control_mode
     */
    inline void toggle_SYS_PLL3_CTRL_SYS_PLL3_CONTROL_MODE() volatile
    {
        SYS_PLL3_CTRL ^= 1u << 31u;
    }

    /**
     * Get SYS_PLL3_CTRL's SYS_PLL3_GATE bit.
     *
     * SYS_PLL3_GATE
     */
    inline bool get_SYS_PLL3_CTRL_SYS_PLL3_GATE() volatile
    {
        return SYS_PLL3_CTRL & (1u << 30u);
    }

    /**
     * Set SYS_PLL3_CTRL's SYS_PLL3_GATE bit.
     *
     * SYS_PLL3_GATE
     */
    inline void set_SYS_PLL3_CTRL_SYS_PLL3_GATE() volatile
    {
        SYS_PLL3_CTRL |= 1u << 30u;
    }

    /**
     * Clear SYS_PLL3_CTRL's SYS_PLL3_GATE bit.
     *
     * SYS_PLL3_GATE
     */
    inline void clear_SYS_PLL3_CTRL_SYS_PLL3_GATE() volatile
    {
        SYS_PLL3_CTRL &= ~(1u << 30u);
    }

    /**
     * Toggle SYS_PLL3_CTRL's SYS_PLL3_GATE bit.
     *
     * SYS_PLL3_GATE
     */
    inline void toggle_SYS_PLL3_CTRL_SYS_PLL3_GATE() volatile
    {
        SYS_PLL3_CTRL ^= 1u << 30u;
    }

    /**
     * Get SYS_PLL3_CTRL's SYS_PLL3_STABLE bit.
     *
     * SYS_PLL3_STABLE
     */
    inline bool get_SYS_PLL3_CTRL_SYS_PLL3_STABLE() volatile
    {
        return SYS_PLL3_CTRL & (1u << 29u);
    }

    /**
     * Get SYS_PLL3_CTRL's SYS_PLL3_DIV2_CONTROL_MODE bit.
     *
     * SYS_PLL3_DIV2_CONTROL_MODE
     */
    inline bool get_SYS_PLL3_CTRL_SYS_PLL3_DIV2_CONTROL_MODE() volatile
    {
        return SYS_PLL3_CTRL & (1u << 28u);
    }

    /**
     * Set SYS_PLL3_CTRL's SYS_PLL3_DIV2_CONTROL_MODE bit.
     *
     * SYS_PLL3_DIV2_CONTROL_MODE
     */
    inline void set_SYS_PLL3_CTRL_SYS_PLL3_DIV2_CONTROL_MODE() volatile
    {
        SYS_PLL3_CTRL |= 1u << 28u;
    }

    /**
     * Clear SYS_PLL3_CTRL's SYS_PLL3_DIV2_CONTROL_MODE bit.
     *
     * SYS_PLL3_DIV2_CONTROL_MODE
     */
    inline void clear_SYS_PLL3_CTRL_SYS_PLL3_DIV2_CONTROL_MODE() volatile
    {
        SYS_PLL3_CTRL &= ~(1u << 28u);
    }

    /**
     * Toggle SYS_PLL3_CTRL's SYS_PLL3_DIV2_CONTROL_MODE bit.
     *
     * SYS_PLL3_DIV2_CONTROL_MODE
     */
    inline void toggle_SYS_PLL3_CTRL_SYS_PLL3_DIV2_CONTROL_MODE() volatile
    {
        SYS_PLL3_CTRL ^= 1u << 28u;
    }

    /**
     * Get SYS_PLL3_CTRL's POWERUP bit.
     *
     * Powers up the PLL.
     */
    inline bool get_SYS_PLL3_CTRL_POWERUP() volatile
    {
        return SYS_PLL3_CTRL & (1u << 21u);
    }

    /**
     * Set SYS_PLL3_CTRL's POWERUP bit.
     *
     * Powers up the PLL.
     */
    inline void set_SYS_PLL3_CTRL_POWERUP() volatile
    {
        SYS_PLL3_CTRL |= 1u << 21u;
    }

    /**
     * Clear SYS_PLL3_CTRL's POWERUP bit.
     *
     * Powers up the PLL.
     */
    inline void clear_SYS_PLL3_CTRL_POWERUP() volatile
    {
        SYS_PLL3_CTRL &= ~(1u << 21u);
    }

    /**
     * Toggle SYS_PLL3_CTRL's POWERUP bit.
     *
     * Powers up the PLL.
     */
    inline void toggle_SYS_PLL3_CTRL_POWERUP() volatile
    {
        SYS_PLL3_CTRL ^= 1u << 21u;
    }

    /**
     * Get SYS_PLL3_CTRL's BYPASS bit.
     *
     * BYPASS
     */
    inline bool get_SYS_PLL3_CTRL_BYPASS() volatile
    {
        return SYS_PLL3_CTRL & (1u << 16u);
    }

    /**
     * Set SYS_PLL3_CTRL's BYPASS bit.
     *
     * BYPASS
     */
    inline void set_SYS_PLL3_CTRL_BYPASS() volatile
    {
        SYS_PLL3_CTRL |= 1u << 16u;
    }

    /**
     * Clear SYS_PLL3_CTRL's BYPASS bit.
     *
     * BYPASS
     */
    inline void clear_SYS_PLL3_CTRL_BYPASS() volatile
    {
        SYS_PLL3_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle SYS_PLL3_CTRL's BYPASS bit.
     *
     * BYPASS
     */
    inline void toggle_SYS_PLL3_CTRL_BYPASS() volatile
    {
        SYS_PLL3_CTRL ^= 1u << 16u;
    }

    /**
     * Get SYS_PLL3_CTRL's ENABLE_CLK bit.
     *
     * Enable the clock output.
     */
    inline bool get_SYS_PLL3_CTRL_ENABLE_CLK() volatile
    {
        return SYS_PLL3_CTRL & (1u << 13u);
    }

    /**
     * Set SYS_PLL3_CTRL's ENABLE_CLK bit.
     *
     * Enable the clock output.
     */
    inline void set_SYS_PLL3_CTRL_ENABLE_CLK() volatile
    {
        SYS_PLL3_CTRL |= 1u << 13u;
    }

    /**
     * Clear SYS_PLL3_CTRL's ENABLE_CLK bit.
     *
     * Enable the clock output.
     */
    inline void clear_SYS_PLL3_CTRL_ENABLE_CLK() volatile
    {
        SYS_PLL3_CTRL &= ~(1u << 13u);
    }

    /**
     * Toggle SYS_PLL3_CTRL's ENABLE_CLK bit.
     *
     * Enable the clock output.
     */
    inline void toggle_SYS_PLL3_CTRL_ENABLE_CLK() volatile
    {
        SYS_PLL3_CTRL ^= 1u << 13u;
    }

    /**
     * Get SYS_PLL3_CTRL's HOLD_RING_OFF bit.
     *
     * PLL Start up initialization
     */
    inline bool get_SYS_PLL3_CTRL_HOLD_RING_OFF() volatile
    {
        return SYS_PLL3_CTRL & (1u << 11u);
    }

    /**
     * Set SYS_PLL3_CTRL's HOLD_RING_OFF bit.
     *
     * PLL Start up initialization
     */
    inline void set_SYS_PLL3_CTRL_HOLD_RING_OFF() volatile
    {
        SYS_PLL3_CTRL |= 1u << 11u;
    }

    /**
     * Clear SYS_PLL3_CTRL's HOLD_RING_OFF bit.
     *
     * PLL Start up initialization
     */
    inline void clear_SYS_PLL3_CTRL_HOLD_RING_OFF() volatile
    {
        SYS_PLL3_CTRL &= ~(1u << 11u);
    }

    /**
     * Toggle SYS_PLL3_CTRL's HOLD_RING_OFF bit.
     *
     * PLL Start up initialization
     */
    inline void toggle_SYS_PLL3_CTRL_HOLD_RING_OFF() volatile
    {
        SYS_PLL3_CTRL ^= 1u << 11u;
    }

    /**
     * Get SYS_PLL3_CTRL's PLL_REG_EN bit.
     *
     * Enable Internal PLL Regulator
     */
    inline bool get_SYS_PLL3_CTRL_PLL_REG_EN() volatile
    {
        return SYS_PLL3_CTRL & (1u << 4u);
    }

    /**
     * Set SYS_PLL3_CTRL's PLL_REG_EN bit.
     *
     * Enable Internal PLL Regulator
     */
    inline void set_SYS_PLL3_CTRL_PLL_REG_EN() volatile
    {
        SYS_PLL3_CTRL |= 1u << 4u;
    }

    /**
     * Clear SYS_PLL3_CTRL's PLL_REG_EN bit.
     *
     * Enable Internal PLL Regulator
     */
    inline void clear_SYS_PLL3_CTRL_PLL_REG_EN() volatile
    {
        SYS_PLL3_CTRL &= ~(1u << 4u);
    }

    /**
     * Toggle SYS_PLL3_CTRL's PLL_REG_EN bit.
     *
     * Enable Internal PLL Regulator
     */
    inline void toggle_SYS_PLL3_CTRL_PLL_REG_EN() volatile
    {
        SYS_PLL3_CTRL ^= 1u << 4u;
    }

    /**
     * Get SYS_PLL3_CTRL's SYS_PLL3_DIV2 bit.
     *
     * SYS PLL3 DIV2 gate
     */
    inline bool get_SYS_PLL3_CTRL_SYS_PLL3_DIV2() volatile
    {
        return SYS_PLL3_CTRL & (1u << 3u);
    }

    /**
     * Set SYS_PLL3_CTRL's SYS_PLL3_DIV2 bit.
     *
     * SYS PLL3 DIV2 gate
     */
    inline void set_SYS_PLL3_CTRL_SYS_PLL3_DIV2() volatile
    {
        SYS_PLL3_CTRL |= 1u << 3u;
    }

    /**
     * Clear SYS_PLL3_CTRL's SYS_PLL3_DIV2 bit.
     *
     * SYS PLL3 DIV2 gate
     */
    inline void clear_SYS_PLL3_CTRL_SYS_PLL3_DIV2() volatile
    {
        SYS_PLL3_CTRL &= ~(1u << 3u);
    }

    /**
     * Toggle SYS_PLL3_CTRL's SYS_PLL3_DIV2 bit.
     *
     * SYS PLL3 DIV2 gate
     */
    inline void toggle_SYS_PLL3_CTRL_SYS_PLL3_DIV2() volatile
    {
        SYS_PLL3_CTRL ^= 1u << 3u;
    }

    /**
     * Get all of SYS_PLL3_CTRL's bit fields.
     *
     * (read-write) SYS_PLL3_CTRL_REGISTER
     */
    inline void get_SYS_PLL3_CTRL(bool &SYS_PLL3_CONTROL_MODE,
                                  bool &SYS_PLL3_GATE, bool &SYS_PLL3_STABLE,
                                  bool &SYS_PLL3_DIV2_CONTROL_MODE,
                                  bool &POWERUP, bool &BYPASS,
                                  bool &ENABLE_CLK, bool &HOLD_RING_OFF,
                                  bool &PLL_REG_EN,
                                  bool &SYS_PLL3_DIV2) volatile
    {
        uint32_t curr = SYS_PLL3_CTRL;

        SYS_PLL3_CONTROL_MODE = curr & (1u << 31u);
        SYS_PLL3_GATE = curr & (1u << 30u);
        SYS_PLL3_STABLE = curr & (1u << 29u);
        SYS_PLL3_DIV2_CONTROL_MODE = curr & (1u << 28u);
        POWERUP = curr & (1u << 21u);
        BYPASS = curr & (1u << 16u);
        ENABLE_CLK = curr & (1u << 13u);
        HOLD_RING_OFF = curr & (1u << 11u);
        PLL_REG_EN = curr & (1u << 4u);
        SYS_PLL3_DIV2 = curr & (1u << 3u);
    }

    /**
     * Set all of SYS_PLL3_CTRL's bit fields.
     *
     * (read-write) SYS_PLL3_CTRL_REGISTER
     */
    inline void set_SYS_PLL3_CTRL(bool SYS_PLL3_CONTROL_MODE,
                                  bool SYS_PLL3_GATE,
                                  bool SYS_PLL3_DIV2_CONTROL_MODE,
                                  bool POWERUP, bool BYPASS, bool ENABLE_CLK,
                                  bool HOLD_RING_OFF, bool PLL_REG_EN,
                                  bool SYS_PLL3_DIV2) volatile
    {
        uint32_t curr = SYS_PLL3_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (SYS_PLL3_CONTROL_MODE & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (SYS_PLL3_GATE & 0b1u) << 30u;
        curr &= ~(0b1u << 28u);
        curr |= (SYS_PLL3_DIV2_CONTROL_MODE & 0b1u) << 28u;
        curr &= ~(0b1u << 21u);
        curr |= (POWERUP & 0b1u) << 21u;
        curr &= ~(0b1u << 16u);
        curr |= (BYPASS & 0b1u) << 16u;
        curr &= ~(0b1u << 13u);
        curr |= (ENABLE_CLK & 0b1u) << 13u;
        curr &= ~(0b1u << 11u);
        curr |= (HOLD_RING_OFF & 0b1u) << 11u;
        curr &= ~(0b1u << 4u);
        curr |= (PLL_REG_EN & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SYS_PLL3_DIV2 & 0b1u) << 3u;

        SYS_PLL3_CTRL = curr;
    }

    /**
     * Get SYS_PLL3_UPDATE's PFD3_CONTROL_MODE bit.
     *
     * pfd3_control_mode
     */
    inline bool get_SYS_PLL3_UPDATE_PFD3_CONTROL_MODE() volatile
    {
        return SYS_PLL3_UPDATE & (1u << 8u);
    }

    /**
     * Set SYS_PLL3_UPDATE's PFD3_CONTROL_MODE bit.
     *
     * pfd3_control_mode
     */
    inline void set_SYS_PLL3_UPDATE_PFD3_CONTROL_MODE() volatile
    {
        SYS_PLL3_UPDATE |= 1u << 8u;
    }

    /**
     * Clear SYS_PLL3_UPDATE's PFD3_CONTROL_MODE bit.
     *
     * pfd3_control_mode
     */
    inline void clear_SYS_PLL3_UPDATE_PFD3_CONTROL_MODE() volatile
    {
        SYS_PLL3_UPDATE &= ~(1u << 8u);
    }

    /**
     * Toggle SYS_PLL3_UPDATE's PFD3_CONTROL_MODE bit.
     *
     * pfd3_control_mode
     */
    inline void toggle_SYS_PLL3_UPDATE_PFD3_CONTROL_MODE() volatile
    {
        SYS_PLL3_UPDATE ^= 1u << 8u;
    }

    /**
     * Get SYS_PLL3_UPDATE's PDF2_CONTROL_MODE bit.
     *
     * pdf2_control_mode
     */
    inline bool get_SYS_PLL3_UPDATE_PDF2_CONTROL_MODE() volatile
    {
        return SYS_PLL3_UPDATE & (1u << 7u);
    }

    /**
     * Set SYS_PLL3_UPDATE's PDF2_CONTROL_MODE bit.
     *
     * pdf2_control_mode
     */
    inline void set_SYS_PLL3_UPDATE_PDF2_CONTROL_MODE() volatile
    {
        SYS_PLL3_UPDATE |= 1u << 7u;
    }

    /**
     * Clear SYS_PLL3_UPDATE's PDF2_CONTROL_MODE bit.
     *
     * pdf2_control_mode
     */
    inline void clear_SYS_PLL3_UPDATE_PDF2_CONTROL_MODE() volatile
    {
        SYS_PLL3_UPDATE &= ~(1u << 7u);
    }

    /**
     * Toggle SYS_PLL3_UPDATE's PDF2_CONTROL_MODE bit.
     *
     * pdf2_control_mode
     */
    inline void toggle_SYS_PLL3_UPDATE_PDF2_CONTROL_MODE() volatile
    {
        SYS_PLL3_UPDATE ^= 1u << 7u;
    }

    /**
     * Get SYS_PLL3_UPDATE's PFD1_CONTROL_MODE bit.
     *
     * pfd1_control_mode
     */
    inline bool get_SYS_PLL3_UPDATE_PFD1_CONTROL_MODE() volatile
    {
        return SYS_PLL3_UPDATE & (1u << 6u);
    }

    /**
     * Set SYS_PLL3_UPDATE's PFD1_CONTROL_MODE bit.
     *
     * pfd1_control_mode
     */
    inline void set_SYS_PLL3_UPDATE_PFD1_CONTROL_MODE() volatile
    {
        SYS_PLL3_UPDATE |= 1u << 6u;
    }

    /**
     * Clear SYS_PLL3_UPDATE's PFD1_CONTROL_MODE bit.
     *
     * pfd1_control_mode
     */
    inline void clear_SYS_PLL3_UPDATE_PFD1_CONTROL_MODE() volatile
    {
        SYS_PLL3_UPDATE &= ~(1u << 6u);
    }

    /**
     * Toggle SYS_PLL3_UPDATE's PFD1_CONTROL_MODE bit.
     *
     * pfd1_control_mode
     */
    inline void toggle_SYS_PLL3_UPDATE_PFD1_CONTROL_MODE() volatile
    {
        SYS_PLL3_UPDATE ^= 1u << 6u;
    }

    /**
     * Get SYS_PLL3_UPDATE's PFD0_CONTROL_MODE bit.
     *
     * pfd0_control_mode
     */
    inline bool get_SYS_PLL3_UPDATE_PFD0_CONTROL_MODE() volatile
    {
        return SYS_PLL3_UPDATE & (1u << 5u);
    }

    /**
     * Set SYS_PLL3_UPDATE's PFD0_CONTROL_MODE bit.
     *
     * pfd0_control_mode
     */
    inline void set_SYS_PLL3_UPDATE_PFD0_CONTROL_MODE() volatile
    {
        SYS_PLL3_UPDATE |= 1u << 5u;
    }

    /**
     * Clear SYS_PLL3_UPDATE's PFD0_CONTROL_MODE bit.
     *
     * pfd0_control_mode
     */
    inline void clear_SYS_PLL3_UPDATE_PFD0_CONTROL_MODE() volatile
    {
        SYS_PLL3_UPDATE &= ~(1u << 5u);
    }

    /**
     * Toggle SYS_PLL3_UPDATE's PFD0_CONTROL_MODE bit.
     *
     * pfd0_control_mode
     */
    inline void toggle_SYS_PLL3_UPDATE_PFD0_CONTROL_MODE() volatile
    {
        SYS_PLL3_UPDATE ^= 1u << 5u;
    }

    /**
     * Get SYS_PLL3_UPDATE's PFD3_UPDATE bit.
     *
     * PFD3_UPDATE
     */
    inline bool get_SYS_PLL3_UPDATE_PFD3_UPDATE() volatile
    {
        return SYS_PLL3_UPDATE & (1u << 4u);
    }

    /**
     * Set SYS_PLL3_UPDATE's PFD3_UPDATE bit.
     *
     * PFD3_UPDATE
     */
    inline void set_SYS_PLL3_UPDATE_PFD3_UPDATE() volatile
    {
        SYS_PLL3_UPDATE |= 1u << 4u;
    }

    /**
     * Clear SYS_PLL3_UPDATE's PFD3_UPDATE bit.
     *
     * PFD3_UPDATE
     */
    inline void clear_SYS_PLL3_UPDATE_PFD3_UPDATE() volatile
    {
        SYS_PLL3_UPDATE &= ~(1u << 4u);
    }

    /**
     * Toggle SYS_PLL3_UPDATE's PFD3_UPDATE bit.
     *
     * PFD3_UPDATE
     */
    inline void toggle_SYS_PLL3_UPDATE_PFD3_UPDATE() volatile
    {
        SYS_PLL3_UPDATE ^= 1u << 4u;
    }

    /**
     * Get SYS_PLL3_UPDATE's PFD2_UPDATE bit.
     *
     * PFD2_OVERRIDE
     */
    inline bool get_SYS_PLL3_UPDATE_PFD2_UPDATE() volatile
    {
        return SYS_PLL3_UPDATE & (1u << 3u);
    }

    /**
     * Set SYS_PLL3_UPDATE's PFD2_UPDATE bit.
     *
     * PFD2_OVERRIDE
     */
    inline void set_SYS_PLL3_UPDATE_PFD2_UPDATE() volatile
    {
        SYS_PLL3_UPDATE |= 1u << 3u;
    }

    /**
     * Clear SYS_PLL3_UPDATE's PFD2_UPDATE bit.
     *
     * PFD2_OVERRIDE
     */
    inline void clear_SYS_PLL3_UPDATE_PFD2_UPDATE() volatile
    {
        SYS_PLL3_UPDATE &= ~(1u << 3u);
    }

    /**
     * Toggle SYS_PLL3_UPDATE's PFD2_UPDATE bit.
     *
     * PFD2_OVERRIDE
     */
    inline void toggle_SYS_PLL3_UPDATE_PFD2_UPDATE() volatile
    {
        SYS_PLL3_UPDATE ^= 1u << 3u;
    }

    /**
     * Get SYS_PLL3_UPDATE's PFD1_UPDATE bit.
     *
     * PFD1_OVERRIDE
     */
    inline bool get_SYS_PLL3_UPDATE_PFD1_UPDATE() volatile
    {
        return SYS_PLL3_UPDATE & (1u << 2u);
    }

    /**
     * Set SYS_PLL3_UPDATE's PFD1_UPDATE bit.
     *
     * PFD1_OVERRIDE
     */
    inline void set_SYS_PLL3_UPDATE_PFD1_UPDATE() volatile
    {
        SYS_PLL3_UPDATE |= 1u << 2u;
    }

    /**
     * Clear SYS_PLL3_UPDATE's PFD1_UPDATE bit.
     *
     * PFD1_OVERRIDE
     */
    inline void clear_SYS_PLL3_UPDATE_PFD1_UPDATE() volatile
    {
        SYS_PLL3_UPDATE &= ~(1u << 2u);
    }

    /**
     * Toggle SYS_PLL3_UPDATE's PFD1_UPDATE bit.
     *
     * PFD1_OVERRIDE
     */
    inline void toggle_SYS_PLL3_UPDATE_PFD1_UPDATE() volatile
    {
        SYS_PLL3_UPDATE ^= 1u << 2u;
    }

    /**
     * Get SYS_PLL3_UPDATE's PFD0_UPDATE bit.
     *
     * PFD0_OVERRIDE
     */
    inline bool get_SYS_PLL3_UPDATE_PFD0_UPDATE() volatile
    {
        return SYS_PLL3_UPDATE & (1u << 1u);
    }

    /**
     * Set SYS_PLL3_UPDATE's PFD0_UPDATE bit.
     *
     * PFD0_OVERRIDE
     */
    inline void set_SYS_PLL3_UPDATE_PFD0_UPDATE() volatile
    {
        SYS_PLL3_UPDATE |= 1u << 1u;
    }

    /**
     * Clear SYS_PLL3_UPDATE's PFD0_UPDATE bit.
     *
     * PFD0_OVERRIDE
     */
    inline void clear_SYS_PLL3_UPDATE_PFD0_UPDATE() volatile
    {
        SYS_PLL3_UPDATE &= ~(1u << 1u);
    }

    /**
     * Toggle SYS_PLL3_UPDATE's PFD0_UPDATE bit.
     *
     * PFD0_OVERRIDE
     */
    inline void toggle_SYS_PLL3_UPDATE_PFD0_UPDATE() volatile
    {
        SYS_PLL3_UPDATE ^= 1u << 1u;
    }

    /**
     * Get all of SYS_PLL3_UPDATE's bit fields.
     *
     * (read-write) SYS_PLL3_UPDATE_REGISTER
     */
    inline void get_SYS_PLL3_UPDATE(bool &PFD3_CONTROL_MODE,
                                    bool &PDF2_CONTROL_MODE,
                                    bool &PFD1_CONTROL_MODE,
                                    bool &PFD0_CONTROL_MODE, bool &PFD3_UPDATE,
                                    bool &PFD2_UPDATE, bool &PFD1_UPDATE,
                                    bool &PFD0_UPDATE) volatile
    {
        uint32_t curr = SYS_PLL3_UPDATE;

        PFD3_CONTROL_MODE = curr & (1u << 8u);
        PDF2_CONTROL_MODE = curr & (1u << 7u);
        PFD1_CONTROL_MODE = curr & (1u << 6u);
        PFD0_CONTROL_MODE = curr & (1u << 5u);
        PFD3_UPDATE = curr & (1u << 4u);
        PFD2_UPDATE = curr & (1u << 3u);
        PFD1_UPDATE = curr & (1u << 2u);
        PFD0_UPDATE = curr & (1u << 1u);
    }

    /**
     * Set all of SYS_PLL3_UPDATE's bit fields.
     *
     * (read-write) SYS_PLL3_UPDATE_REGISTER
     */
    inline void set_SYS_PLL3_UPDATE(bool PFD3_CONTROL_MODE,
                                    bool PDF2_CONTROL_MODE,
                                    bool PFD1_CONTROL_MODE,
                                    bool PFD0_CONTROL_MODE, bool PFD3_UPDATE,
                                    bool PFD2_UPDATE, bool PFD1_UPDATE,
                                    bool PFD0_UPDATE) volatile
    {
        uint32_t curr = SYS_PLL3_UPDATE;

        curr &= ~(0b1u << 8u);
        curr |= (PFD3_CONTROL_MODE & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (PDF2_CONTROL_MODE & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (PFD1_CONTROL_MODE & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (PFD0_CONTROL_MODE & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (PFD3_UPDATE & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (PFD2_UPDATE & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PFD1_UPDATE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (PFD0_UPDATE & 0b1u) << 1u;

        SYS_PLL3_UPDATE = curr;
    }

    /**
     * Get SYS_PLL3_PFD's PFD3_DIV1_CLKGATE bit.
     *
     * PFD3_DIV1_CLKGATE
     */
    inline bool get_SYS_PLL3_PFD_PFD3_DIV1_CLKGATE() volatile
    {
        return SYS_PLL3_PFD & (1u << 31u);
    }

    /**
     * Set SYS_PLL3_PFD's PFD3_DIV1_CLKGATE bit.
     *
     * PFD3_DIV1_CLKGATE
     */
    inline void set_SYS_PLL3_PFD_PFD3_DIV1_CLKGATE() volatile
    {
        SYS_PLL3_PFD |= 1u << 31u;
    }

    /**
     * Clear SYS_PLL3_PFD's PFD3_DIV1_CLKGATE bit.
     *
     * PFD3_DIV1_CLKGATE
     */
    inline void clear_SYS_PLL3_PFD_PFD3_DIV1_CLKGATE() volatile
    {
        SYS_PLL3_PFD &= ~(1u << 31u);
    }

    /**
     * Toggle SYS_PLL3_PFD's PFD3_DIV1_CLKGATE bit.
     *
     * PFD3_DIV1_CLKGATE
     */
    inline void toggle_SYS_PLL3_PFD_PFD3_DIV1_CLKGATE() volatile
    {
        SYS_PLL3_PFD ^= 1u << 31u;
    }

    /**
     * Get SYS_PLL3_PFD's PFD3_STABLE bit.
     *
     * PFD3_STABLE
     */
    inline bool get_SYS_PLL3_PFD_PFD3_STABLE() volatile
    {
        return SYS_PLL3_PFD & (1u << 30u);
    }

    /**
     * Get SYS_PLL3_PFD's PFD3_FRAC field.
     *
     * PFD3_FRAC
     */
    inline uint8_t get_SYS_PLL3_PFD_PFD3_FRAC() volatile
    {
        return (SYS_PLL3_PFD >> 24u) & 0b111111u;
    }

    /**
     * Set SYS_PLL3_PFD's PFD3_FRAC field.
     *
     * PFD3_FRAC
     */
    inline void set_SYS_PLL3_PFD_PFD3_FRAC(uint8_t value) volatile
    {
        uint32_t curr = SYS_PLL3_PFD;

        curr &= ~(0b111111u << 24u);
        curr |= (value & 0b111111u) << 24u;

        SYS_PLL3_PFD = curr;
    }

    /**
     * Get SYS_PLL3_PFD's PFD2_DIV1_CLKGATE bit.
     *
     * PFD2_DIV1_CLKGATE
     */
    inline bool get_SYS_PLL3_PFD_PFD2_DIV1_CLKGATE() volatile
    {
        return SYS_PLL3_PFD & (1u << 23u);
    }

    /**
     * Set SYS_PLL3_PFD's PFD2_DIV1_CLKGATE bit.
     *
     * PFD2_DIV1_CLKGATE
     */
    inline void set_SYS_PLL3_PFD_PFD2_DIV1_CLKGATE() volatile
    {
        SYS_PLL3_PFD |= 1u << 23u;
    }

    /**
     * Clear SYS_PLL3_PFD's PFD2_DIV1_CLKGATE bit.
     *
     * PFD2_DIV1_CLKGATE
     */
    inline void clear_SYS_PLL3_PFD_PFD2_DIV1_CLKGATE() volatile
    {
        SYS_PLL3_PFD &= ~(1u << 23u);
    }

    /**
     * Toggle SYS_PLL3_PFD's PFD2_DIV1_CLKGATE bit.
     *
     * PFD2_DIV1_CLKGATE
     */
    inline void toggle_SYS_PLL3_PFD_PFD2_DIV1_CLKGATE() volatile
    {
        SYS_PLL3_PFD ^= 1u << 23u;
    }

    /**
     * Get SYS_PLL3_PFD's PFD2_STABLE bit.
     *
     * PFD2_STABLE
     */
    inline bool get_SYS_PLL3_PFD_PFD2_STABLE() volatile
    {
        return SYS_PLL3_PFD & (1u << 22u);
    }

    /**
     * Get SYS_PLL3_PFD's PFD2_FRAC field.
     *
     * PFD2_FRAC
     */
    inline uint8_t get_SYS_PLL3_PFD_PFD2_FRAC() volatile
    {
        return (SYS_PLL3_PFD >> 16u) & 0b111111u;
    }

    /**
     * Set SYS_PLL3_PFD's PFD2_FRAC field.
     *
     * PFD2_FRAC
     */
    inline void set_SYS_PLL3_PFD_PFD2_FRAC(uint8_t value) volatile
    {
        uint32_t curr = SYS_PLL3_PFD;

        curr &= ~(0b111111u << 16u);
        curr |= (value & 0b111111u) << 16u;

        SYS_PLL3_PFD = curr;
    }

    /**
     * Get SYS_PLL3_PFD's PFD1_DIV1_CLKGATE bit.
     *
     * PFD1_DIV1_CLKGATE
     */
    inline bool get_SYS_PLL3_PFD_PFD1_DIV1_CLKGATE() volatile
    {
        return SYS_PLL3_PFD & (1u << 15u);
    }

    /**
     * Set SYS_PLL3_PFD's PFD1_DIV1_CLKGATE bit.
     *
     * PFD1_DIV1_CLKGATE
     */
    inline void set_SYS_PLL3_PFD_PFD1_DIV1_CLKGATE() volatile
    {
        SYS_PLL3_PFD |= 1u << 15u;
    }

    /**
     * Clear SYS_PLL3_PFD's PFD1_DIV1_CLKGATE bit.
     *
     * PFD1_DIV1_CLKGATE
     */
    inline void clear_SYS_PLL3_PFD_PFD1_DIV1_CLKGATE() volatile
    {
        SYS_PLL3_PFD &= ~(1u << 15u);
    }

    /**
     * Toggle SYS_PLL3_PFD's PFD1_DIV1_CLKGATE bit.
     *
     * PFD1_DIV1_CLKGATE
     */
    inline void toggle_SYS_PLL3_PFD_PFD1_DIV1_CLKGATE() volatile
    {
        SYS_PLL3_PFD ^= 1u << 15u;
    }

    /**
     * Get SYS_PLL3_PFD's PFD1_STABLE bit.
     *
     * PFD1_STABLE
     */
    inline bool get_SYS_PLL3_PFD_PFD1_STABLE() volatile
    {
        return SYS_PLL3_PFD & (1u << 14u);
    }

    /**
     * Get SYS_PLL3_PFD's PFD1_FRAC field.
     *
     * PFD1_FRAC
     */
    inline uint8_t get_SYS_PLL3_PFD_PFD1_FRAC() volatile
    {
        return (SYS_PLL3_PFD >> 8u) & 0b111111u;
    }

    /**
     * Set SYS_PLL3_PFD's PFD1_FRAC field.
     *
     * PFD1_FRAC
     */
    inline void set_SYS_PLL3_PFD_PFD1_FRAC(uint8_t value) volatile
    {
        uint32_t curr = SYS_PLL3_PFD;

        curr &= ~(0b111111u << 8u);
        curr |= (value & 0b111111u) << 8u;

        SYS_PLL3_PFD = curr;
    }

    /**
     * Get SYS_PLL3_PFD's PFD0_DIV1_CLKGATE bit.
     *
     * PFD0_DIV1_CLKGATE
     */
    inline bool get_SYS_PLL3_PFD_PFD0_DIV1_CLKGATE() volatile
    {
        return SYS_PLL3_PFD & (1u << 7u);
    }

    /**
     * Set SYS_PLL3_PFD's PFD0_DIV1_CLKGATE bit.
     *
     * PFD0_DIV1_CLKGATE
     */
    inline void set_SYS_PLL3_PFD_PFD0_DIV1_CLKGATE() volatile
    {
        SYS_PLL3_PFD |= 1u << 7u;
    }

    /**
     * Clear SYS_PLL3_PFD's PFD0_DIV1_CLKGATE bit.
     *
     * PFD0_DIV1_CLKGATE
     */
    inline void clear_SYS_PLL3_PFD_PFD0_DIV1_CLKGATE() volatile
    {
        SYS_PLL3_PFD &= ~(1u << 7u);
    }

    /**
     * Toggle SYS_PLL3_PFD's PFD0_DIV1_CLKGATE bit.
     *
     * PFD0_DIV1_CLKGATE
     */
    inline void toggle_SYS_PLL3_PFD_PFD0_DIV1_CLKGATE() volatile
    {
        SYS_PLL3_PFD ^= 1u << 7u;
    }

    /**
     * Get SYS_PLL3_PFD's PFD0_STABLE bit.
     *
     * PFD0_STABLE
     */
    inline bool get_SYS_PLL3_PFD_PFD0_STABLE() volatile
    {
        return SYS_PLL3_PFD & (1u << 6u);
    }

    /**
     * Get SYS_PLL3_PFD's PFD0_FRAC field.
     *
     * PFD0_FRAC
     */
    inline uint8_t get_SYS_PLL3_PFD_PFD0_FRAC() volatile
    {
        return (SYS_PLL3_PFD >> 0u) & 0b111111u;
    }

    /**
     * Set SYS_PLL3_PFD's PFD0_FRAC field.
     *
     * PFD0_FRAC
     */
    inline void set_SYS_PLL3_PFD_PFD0_FRAC(uint8_t value) volatile
    {
        uint32_t curr = SYS_PLL3_PFD;

        curr &= ~(0b111111u << 0u);
        curr |= (value & 0b111111u) << 0u;

        SYS_PLL3_PFD = curr;
    }

    /**
     * Get all of SYS_PLL3_PFD's bit fields.
     *
     * (read-write) SYS_PLL3_PFD_REGISTER
     */
    inline void get_SYS_PLL3_PFD(bool &PFD3_DIV1_CLKGATE, bool &PFD3_STABLE,
                                 uint8_t &PFD3_FRAC, bool &PFD2_DIV1_CLKGATE,
                                 bool &PFD2_STABLE, uint8_t &PFD2_FRAC,
                                 bool &PFD1_DIV1_CLKGATE, bool &PFD1_STABLE,
                                 uint8_t &PFD1_FRAC, bool &PFD0_DIV1_CLKGATE,
                                 bool &PFD0_STABLE,
                                 uint8_t &PFD0_FRAC) volatile
    {
        uint32_t curr = SYS_PLL3_PFD;

        PFD3_DIV1_CLKGATE = curr & (1u << 31u);
        PFD3_STABLE = curr & (1u << 30u);
        PFD3_FRAC = (curr >> 24u) & 0b111111u;
        PFD2_DIV1_CLKGATE = curr & (1u << 23u);
        PFD2_STABLE = curr & (1u << 22u);
        PFD2_FRAC = (curr >> 16u) & 0b111111u;
        PFD1_DIV1_CLKGATE = curr & (1u << 15u);
        PFD1_STABLE = curr & (1u << 14u);
        PFD1_FRAC = (curr >> 8u) & 0b111111u;
        PFD0_DIV1_CLKGATE = curr & (1u << 7u);
        PFD0_STABLE = curr & (1u << 6u);
        PFD0_FRAC = (curr >> 0u) & 0b111111u;
    }

    /**
     * Set all of SYS_PLL3_PFD's bit fields.
     *
     * (read-write) SYS_PLL3_PFD_REGISTER
     */
    inline void set_SYS_PLL3_PFD(bool PFD3_DIV1_CLKGATE, uint8_t PFD3_FRAC,
                                 bool PFD2_DIV1_CLKGATE, uint8_t PFD2_FRAC,
                                 bool PFD1_DIV1_CLKGATE, uint8_t PFD1_FRAC,
                                 bool PFD0_DIV1_CLKGATE,
                                 uint8_t PFD0_FRAC) volatile
    {
        uint32_t curr = SYS_PLL3_PFD;

        curr &= ~(0b1u << 31u);
        curr |= (PFD3_DIV1_CLKGATE & 0b1u) << 31u;
        curr &= ~(0b111111u << 24u);
        curr |= (PFD3_FRAC & 0b111111u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (PFD2_DIV1_CLKGATE & 0b1u) << 23u;
        curr &= ~(0b111111u << 16u);
        curr |= (PFD2_FRAC & 0b111111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (PFD1_DIV1_CLKGATE & 0b1u) << 15u;
        curr &= ~(0b111111u << 8u);
        curr |= (PFD1_FRAC & 0b111111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (PFD0_DIV1_CLKGATE & 0b1u) << 7u;
        curr &= ~(0b111111u << 0u);
        curr |= (PFD0_FRAC & 0b111111u) << 0u;

        SYS_PLL3_PFD = curr;
    }

    /**
     * Get SYS_PLL2_CTRL's SYS_PLL2_CONTROL_MODE bit.
     *
     * SYS_PLL2_control_mode
     */
    inline bool get_SYS_PLL2_CTRL_SYS_PLL2_CONTROL_MODE() volatile
    {
        return SYS_PLL2_CTRL & (1u << 31u);
    }

    /**
     * Set SYS_PLL2_CTRL's SYS_PLL2_CONTROL_MODE bit.
     *
     * SYS_PLL2_control_mode
     */
    inline void set_SYS_PLL2_CTRL_SYS_PLL2_CONTROL_MODE() volatile
    {
        SYS_PLL2_CTRL |= 1u << 31u;
    }

    /**
     * Clear SYS_PLL2_CTRL's SYS_PLL2_CONTROL_MODE bit.
     *
     * SYS_PLL2_control_mode
     */
    inline void clear_SYS_PLL2_CTRL_SYS_PLL2_CONTROL_MODE() volatile
    {
        SYS_PLL2_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SYS_PLL2_CTRL's SYS_PLL2_CONTROL_MODE bit.
     *
     * SYS_PLL2_control_mode
     */
    inline void toggle_SYS_PLL2_CTRL_SYS_PLL2_CONTROL_MODE() volatile
    {
        SYS_PLL2_CTRL ^= 1u << 31u;
    }

    /**
     * Get SYS_PLL2_CTRL's SYS_PLL2_GATE bit.
     *
     * SYS_PLL2_GATE
     */
    inline bool get_SYS_PLL2_CTRL_SYS_PLL2_GATE() volatile
    {
        return SYS_PLL2_CTRL & (1u << 30u);
    }

    /**
     * Set SYS_PLL2_CTRL's SYS_PLL2_GATE bit.
     *
     * SYS_PLL2_GATE
     */
    inline void set_SYS_PLL2_CTRL_SYS_PLL2_GATE() volatile
    {
        SYS_PLL2_CTRL |= 1u << 30u;
    }

    /**
     * Clear SYS_PLL2_CTRL's SYS_PLL2_GATE bit.
     *
     * SYS_PLL2_GATE
     */
    inline void clear_SYS_PLL2_CTRL_SYS_PLL2_GATE() volatile
    {
        SYS_PLL2_CTRL &= ~(1u << 30u);
    }

    /**
     * Toggle SYS_PLL2_CTRL's SYS_PLL2_GATE bit.
     *
     * SYS_PLL2_GATE
     */
    inline void toggle_SYS_PLL2_CTRL_SYS_PLL2_GATE() volatile
    {
        SYS_PLL2_CTRL ^= 1u << 30u;
    }

    /**
     * Get SYS_PLL2_CTRL's SYS_PLL2_STABLE bit.
     *
     * SYS_PLL2_STABLE
     */
    inline bool get_SYS_PLL2_CTRL_SYS_PLL2_STABLE() volatile
    {
        return SYS_PLL2_CTRL & (1u << 29u);
    }

    /**
     * Get SYS_PLL2_CTRL's POWERUP bit.
     *
     * Powers up the PLL.
     */
    inline bool get_SYS_PLL2_CTRL_POWERUP() volatile
    {
        return SYS_PLL2_CTRL & (1u << 23u);
    }

    /**
     * Set SYS_PLL2_CTRL's POWERUP bit.
     *
     * Powers up the PLL.
     */
    inline void set_SYS_PLL2_CTRL_POWERUP() volatile
    {
        SYS_PLL2_CTRL |= 1u << 23u;
    }

    /**
     * Clear SYS_PLL2_CTRL's POWERUP bit.
     *
     * Powers up the PLL.
     */
    inline void clear_SYS_PLL2_CTRL_POWERUP() volatile
    {
        SYS_PLL2_CTRL &= ~(1u << 23u);
    }

    /**
     * Toggle SYS_PLL2_CTRL's POWERUP bit.
     *
     * Powers up the PLL.
     */
    inline void toggle_SYS_PLL2_CTRL_POWERUP() volatile
    {
        SYS_PLL2_CTRL ^= 1u << 23u;
    }

    /**
     * Get SYS_PLL2_CTRL's PLL_DDR_OVERRIDE bit.
     *
     * PLL_DDR_OVERRIDE
     */
    inline bool get_SYS_PLL2_CTRL_PLL_DDR_OVERRIDE() volatile
    {
        return SYS_PLL2_CTRL & (1u << 19u);
    }

    /**
     * Set SYS_PLL2_CTRL's PLL_DDR_OVERRIDE bit.
     *
     * PLL_DDR_OVERRIDE
     */
    inline void set_SYS_PLL2_CTRL_PLL_DDR_OVERRIDE() volatile
    {
        SYS_PLL2_CTRL |= 1u << 19u;
    }

    /**
     * Clear SYS_PLL2_CTRL's PLL_DDR_OVERRIDE bit.
     *
     * PLL_DDR_OVERRIDE
     */
    inline void clear_SYS_PLL2_CTRL_PLL_DDR_OVERRIDE() volatile
    {
        SYS_PLL2_CTRL &= ~(1u << 19u);
    }

    /**
     * Toggle SYS_PLL2_CTRL's PLL_DDR_OVERRIDE bit.
     *
     * PLL_DDR_OVERRIDE
     */
    inline void toggle_SYS_PLL2_CTRL_PLL_DDR_OVERRIDE() volatile
    {
        SYS_PLL2_CTRL ^= 1u << 19u;
    }

    /**
     * Get SYS_PLL2_CTRL's PFD_OFFSET_EN bit.
     *
     * PFD_OFFSET_EN
     */
    inline bool get_SYS_PLL2_CTRL_PFD_OFFSET_EN() volatile
    {
        return SYS_PLL2_CTRL & (1u << 18u);
    }

    /**
     * Set SYS_PLL2_CTRL's PFD_OFFSET_EN bit.
     *
     * PFD_OFFSET_EN
     */
    inline void set_SYS_PLL2_CTRL_PFD_OFFSET_EN() volatile
    {
        SYS_PLL2_CTRL |= 1u << 18u;
    }

    /**
     * Clear SYS_PLL2_CTRL's PFD_OFFSET_EN bit.
     *
     * PFD_OFFSET_EN
     */
    inline void clear_SYS_PLL2_CTRL_PFD_OFFSET_EN() volatile
    {
        SYS_PLL2_CTRL &= ~(1u << 18u);
    }

    /**
     * Toggle SYS_PLL2_CTRL's PFD_OFFSET_EN bit.
     *
     * PFD_OFFSET_EN
     */
    inline void toggle_SYS_PLL2_CTRL_PFD_OFFSET_EN() volatile
    {
        SYS_PLL2_CTRL ^= 1u << 18u;
    }

    /**
     * Get SYS_PLL2_CTRL's DITHER_ENABLE bit.
     *
     * DITHER_ENABLE
     */
    inline bool get_SYS_PLL2_CTRL_DITHER_ENABLE() volatile
    {
        return SYS_PLL2_CTRL & (1u << 17u);
    }

    /**
     * Set SYS_PLL2_CTRL's DITHER_ENABLE bit.
     *
     * DITHER_ENABLE
     */
    inline void set_SYS_PLL2_CTRL_DITHER_ENABLE() volatile
    {
        SYS_PLL2_CTRL |= 1u << 17u;
    }

    /**
     * Clear SYS_PLL2_CTRL's DITHER_ENABLE bit.
     *
     * DITHER_ENABLE
     */
    inline void clear_SYS_PLL2_CTRL_DITHER_ENABLE() volatile
    {
        SYS_PLL2_CTRL &= ~(1u << 17u);
    }

    /**
     * Toggle SYS_PLL2_CTRL's DITHER_ENABLE bit.
     *
     * DITHER_ENABLE
     */
    inline void toggle_SYS_PLL2_CTRL_DITHER_ENABLE() volatile
    {
        SYS_PLL2_CTRL ^= 1u << 17u;
    }

    /**
     * Get SYS_PLL2_CTRL's BYPASS bit.
     *
     * Bypass the pll.
     */
    inline bool get_SYS_PLL2_CTRL_BYPASS() volatile
    {
        return SYS_PLL2_CTRL & (1u << 16u);
    }

    /**
     * Set SYS_PLL2_CTRL's BYPASS bit.
     *
     * Bypass the pll.
     */
    inline void set_SYS_PLL2_CTRL_BYPASS() volatile
    {
        SYS_PLL2_CTRL |= 1u << 16u;
    }

    /**
     * Clear SYS_PLL2_CTRL's BYPASS bit.
     *
     * Bypass the pll.
     */
    inline void clear_SYS_PLL2_CTRL_BYPASS() volatile
    {
        SYS_PLL2_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle SYS_PLL2_CTRL's BYPASS bit.
     *
     * Bypass the pll.
     */
    inline void toggle_SYS_PLL2_CTRL_BYPASS() volatile
    {
        SYS_PLL2_CTRL ^= 1u << 16u;
    }

    /**
     * Get SYS_PLL2_CTRL's ENABLE_CLK bit.
     *
     * Enable the clock output.
     */
    inline bool get_SYS_PLL2_CTRL_ENABLE_CLK() volatile
    {
        return SYS_PLL2_CTRL & (1u << 13u);
    }

    /**
     * Set SYS_PLL2_CTRL's ENABLE_CLK bit.
     *
     * Enable the clock output.
     */
    inline void set_SYS_PLL2_CTRL_ENABLE_CLK() volatile
    {
        SYS_PLL2_CTRL |= 1u << 13u;
    }

    /**
     * Clear SYS_PLL2_CTRL's ENABLE_CLK bit.
     *
     * Enable the clock output.
     */
    inline void clear_SYS_PLL2_CTRL_ENABLE_CLK() volatile
    {
        SYS_PLL2_CTRL &= ~(1u << 13u);
    }

    /**
     * Toggle SYS_PLL2_CTRL's ENABLE_CLK bit.
     *
     * Enable the clock output.
     */
    inline void toggle_SYS_PLL2_CTRL_ENABLE_CLK() volatile
    {
        SYS_PLL2_CTRL ^= 1u << 13u;
    }

    /**
     * Get SYS_PLL2_CTRL's HOLD_RING_OFF bit.
     *
     * PLL Start up initialization
     */
    inline bool get_SYS_PLL2_CTRL_HOLD_RING_OFF() volatile
    {
        return SYS_PLL2_CTRL & (1u << 11u);
    }

    /**
     * Set SYS_PLL2_CTRL's HOLD_RING_OFF bit.
     *
     * PLL Start up initialization
     */
    inline void set_SYS_PLL2_CTRL_HOLD_RING_OFF() volatile
    {
        SYS_PLL2_CTRL |= 1u << 11u;
    }

    /**
     * Clear SYS_PLL2_CTRL's HOLD_RING_OFF bit.
     *
     * PLL Start up initialization
     */
    inline void clear_SYS_PLL2_CTRL_HOLD_RING_OFF() volatile
    {
        SYS_PLL2_CTRL &= ~(1u << 11u);
    }

    /**
     * Toggle SYS_PLL2_CTRL's HOLD_RING_OFF bit.
     *
     * PLL Start up initialization
     */
    inline void toggle_SYS_PLL2_CTRL_HOLD_RING_OFF() volatile
    {
        SYS_PLL2_CTRL ^= 1u << 11u;
    }

    /**
     * Get SYS_PLL2_CTRL's PLL_REG_EN bit.
     *
     * Enable Internal PLL Regulator
     */
    inline bool get_SYS_PLL2_CTRL_PLL_REG_EN() volatile
    {
        return SYS_PLL2_CTRL & (1u << 3u);
    }

    /**
     * Set SYS_PLL2_CTRL's PLL_REG_EN bit.
     *
     * Enable Internal PLL Regulator
     */
    inline void set_SYS_PLL2_CTRL_PLL_REG_EN() volatile
    {
        SYS_PLL2_CTRL |= 1u << 3u;
    }

    /**
     * Clear SYS_PLL2_CTRL's PLL_REG_EN bit.
     *
     * Enable Internal PLL Regulator
     */
    inline void clear_SYS_PLL2_CTRL_PLL_REG_EN() volatile
    {
        SYS_PLL2_CTRL &= ~(1u << 3u);
    }

    /**
     * Toggle SYS_PLL2_CTRL's PLL_REG_EN bit.
     *
     * Enable Internal PLL Regulator
     */
    inline void toggle_SYS_PLL2_CTRL_PLL_REG_EN() volatile
    {
        SYS_PLL2_CTRL ^= 1u << 3u;
    }

    /**
     * Get all of SYS_PLL2_CTRL's bit fields.
     *
     * (read-write) SYS_PLL2_CTRL_REGISTER
     */
    inline void get_SYS_PLL2_CTRL(bool &SYS_PLL2_CONTROL_MODE,
                                  bool &SYS_PLL2_GATE, bool &SYS_PLL2_STABLE,
                                  bool &POWERUP, bool &PLL_DDR_OVERRIDE,
                                  bool &PFD_OFFSET_EN, bool &DITHER_ENABLE,
                                  bool &BYPASS, bool &ENABLE_CLK,
                                  bool &HOLD_RING_OFF,
                                  bool &PLL_REG_EN) volatile
    {
        uint32_t curr = SYS_PLL2_CTRL;

        SYS_PLL2_CONTROL_MODE = curr & (1u << 31u);
        SYS_PLL2_GATE = curr & (1u << 30u);
        SYS_PLL2_STABLE = curr & (1u << 29u);
        POWERUP = curr & (1u << 23u);
        PLL_DDR_OVERRIDE = curr & (1u << 19u);
        PFD_OFFSET_EN = curr & (1u << 18u);
        DITHER_ENABLE = curr & (1u << 17u);
        BYPASS = curr & (1u << 16u);
        ENABLE_CLK = curr & (1u << 13u);
        HOLD_RING_OFF = curr & (1u << 11u);
        PLL_REG_EN = curr & (1u << 3u);
    }

    /**
     * Set all of SYS_PLL2_CTRL's bit fields.
     *
     * (read-write) SYS_PLL2_CTRL_REGISTER
     */
    inline void set_SYS_PLL2_CTRL(bool SYS_PLL2_CONTROL_MODE,
                                  bool SYS_PLL2_GATE, bool POWERUP,
                                  bool PLL_DDR_OVERRIDE, bool PFD_OFFSET_EN,
                                  bool DITHER_ENABLE, bool BYPASS,
                                  bool ENABLE_CLK, bool HOLD_RING_OFF,
                                  bool PLL_REG_EN) volatile
    {
        uint32_t curr = SYS_PLL2_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (SYS_PLL2_CONTROL_MODE & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (SYS_PLL2_GATE & 0b1u) << 30u;
        curr &= ~(0b1u << 23u);
        curr |= (POWERUP & 0b1u) << 23u;
        curr &= ~(0b1u << 19u);
        curr |= (PLL_DDR_OVERRIDE & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (PFD_OFFSET_EN & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (DITHER_ENABLE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (BYPASS & 0b1u) << 16u;
        curr &= ~(0b1u << 13u);
        curr |= (ENABLE_CLK & 0b1u) << 13u;
        curr &= ~(0b1u << 11u);
        curr |= (HOLD_RING_OFF & 0b1u) << 11u;
        curr &= ~(0b1u << 3u);
        curr |= (PLL_REG_EN & 0b1u) << 3u;

        SYS_PLL2_CTRL = curr;
    }

    /**
     * Get SYS_PLL2_UPDATE's PFD3_CONTROL_MODE bit.
     *
     * pfd3_control_mode
     */
    inline bool get_SYS_PLL2_UPDATE_PFD3_CONTROL_MODE() volatile
    {
        return SYS_PLL2_UPDATE & (1u << 8u);
    }

    /**
     * Set SYS_PLL2_UPDATE's PFD3_CONTROL_MODE bit.
     *
     * pfd3_control_mode
     */
    inline void set_SYS_PLL2_UPDATE_PFD3_CONTROL_MODE() volatile
    {
        SYS_PLL2_UPDATE |= 1u << 8u;
    }

    /**
     * Clear SYS_PLL2_UPDATE's PFD3_CONTROL_MODE bit.
     *
     * pfd3_control_mode
     */
    inline void clear_SYS_PLL2_UPDATE_PFD3_CONTROL_MODE() volatile
    {
        SYS_PLL2_UPDATE &= ~(1u << 8u);
    }

    /**
     * Toggle SYS_PLL2_UPDATE's PFD3_CONTROL_MODE bit.
     *
     * pfd3_control_mode
     */
    inline void toggle_SYS_PLL2_UPDATE_PFD3_CONTROL_MODE() volatile
    {
        SYS_PLL2_UPDATE ^= 1u << 8u;
    }

    /**
     * Get SYS_PLL2_UPDATE's PFD2_CONTROL_MODE bit.
     *
     * pfd2_control_mode
     */
    inline bool get_SYS_PLL2_UPDATE_PFD2_CONTROL_MODE() volatile
    {
        return SYS_PLL2_UPDATE & (1u << 7u);
    }

    /**
     * Set SYS_PLL2_UPDATE's PFD2_CONTROL_MODE bit.
     *
     * pfd2_control_mode
     */
    inline void set_SYS_PLL2_UPDATE_PFD2_CONTROL_MODE() volatile
    {
        SYS_PLL2_UPDATE |= 1u << 7u;
    }

    /**
     * Clear SYS_PLL2_UPDATE's PFD2_CONTROL_MODE bit.
     *
     * pfd2_control_mode
     */
    inline void clear_SYS_PLL2_UPDATE_PFD2_CONTROL_MODE() volatile
    {
        SYS_PLL2_UPDATE &= ~(1u << 7u);
    }

    /**
     * Toggle SYS_PLL2_UPDATE's PFD2_CONTROL_MODE bit.
     *
     * pfd2_control_mode
     */
    inline void toggle_SYS_PLL2_UPDATE_PFD2_CONTROL_MODE() volatile
    {
        SYS_PLL2_UPDATE ^= 1u << 7u;
    }

    /**
     * Get SYS_PLL2_UPDATE's PFD1_CONTROL_MODE bit.
     *
     * pfd1_control_mode
     */
    inline bool get_SYS_PLL2_UPDATE_PFD1_CONTROL_MODE() volatile
    {
        return SYS_PLL2_UPDATE & (1u << 6u);
    }

    /**
     * Set SYS_PLL2_UPDATE's PFD1_CONTROL_MODE bit.
     *
     * pfd1_control_mode
     */
    inline void set_SYS_PLL2_UPDATE_PFD1_CONTROL_MODE() volatile
    {
        SYS_PLL2_UPDATE |= 1u << 6u;
    }

    /**
     * Clear SYS_PLL2_UPDATE's PFD1_CONTROL_MODE bit.
     *
     * pfd1_control_mode
     */
    inline void clear_SYS_PLL2_UPDATE_PFD1_CONTROL_MODE() volatile
    {
        SYS_PLL2_UPDATE &= ~(1u << 6u);
    }

    /**
     * Toggle SYS_PLL2_UPDATE's PFD1_CONTROL_MODE bit.
     *
     * pfd1_control_mode
     */
    inline void toggle_SYS_PLL2_UPDATE_PFD1_CONTROL_MODE() volatile
    {
        SYS_PLL2_UPDATE ^= 1u << 6u;
    }

    /**
     * Get SYS_PLL2_UPDATE's PFD0_CONTROL_MODE bit.
     *
     * pfd0_control_mode
     */
    inline bool get_SYS_PLL2_UPDATE_PFD0_CONTROL_MODE() volatile
    {
        return SYS_PLL2_UPDATE & (1u << 5u);
    }

    /**
     * Set SYS_PLL2_UPDATE's PFD0_CONTROL_MODE bit.
     *
     * pfd0_control_mode
     */
    inline void set_SYS_PLL2_UPDATE_PFD0_CONTROL_MODE() volatile
    {
        SYS_PLL2_UPDATE |= 1u << 5u;
    }

    /**
     * Clear SYS_PLL2_UPDATE's PFD0_CONTROL_MODE bit.
     *
     * pfd0_control_mode
     */
    inline void clear_SYS_PLL2_UPDATE_PFD0_CONTROL_MODE() volatile
    {
        SYS_PLL2_UPDATE &= ~(1u << 5u);
    }

    /**
     * Toggle SYS_PLL2_UPDATE's PFD0_CONTROL_MODE bit.
     *
     * pfd0_control_mode
     */
    inline void toggle_SYS_PLL2_UPDATE_PFD0_CONTROL_MODE() volatile
    {
        SYS_PLL2_UPDATE ^= 1u << 5u;
    }

    /**
     * Get SYS_PLL2_UPDATE's PFD3_UPDATE bit.
     *
     * PFD3_UPDATE
     */
    inline bool get_SYS_PLL2_UPDATE_PFD3_UPDATE() volatile
    {
        return SYS_PLL2_UPDATE & (1u << 4u);
    }

    /**
     * Set SYS_PLL2_UPDATE's PFD3_UPDATE bit.
     *
     * PFD3_UPDATE
     */
    inline void set_SYS_PLL2_UPDATE_PFD3_UPDATE() volatile
    {
        SYS_PLL2_UPDATE |= 1u << 4u;
    }

    /**
     * Clear SYS_PLL2_UPDATE's PFD3_UPDATE bit.
     *
     * PFD3_UPDATE
     */
    inline void clear_SYS_PLL2_UPDATE_PFD3_UPDATE() volatile
    {
        SYS_PLL2_UPDATE &= ~(1u << 4u);
    }

    /**
     * Toggle SYS_PLL2_UPDATE's PFD3_UPDATE bit.
     *
     * PFD3_UPDATE
     */
    inline void toggle_SYS_PLL2_UPDATE_PFD3_UPDATE() volatile
    {
        SYS_PLL2_UPDATE ^= 1u << 4u;
    }

    /**
     * Get SYS_PLL2_UPDATE's PFD2_UPDATE bit.
     *
     * PFD2_UPDATE
     */
    inline bool get_SYS_PLL2_UPDATE_PFD2_UPDATE() volatile
    {
        return SYS_PLL2_UPDATE & (1u << 3u);
    }

    /**
     * Set SYS_PLL2_UPDATE's PFD2_UPDATE bit.
     *
     * PFD2_UPDATE
     */
    inline void set_SYS_PLL2_UPDATE_PFD2_UPDATE() volatile
    {
        SYS_PLL2_UPDATE |= 1u << 3u;
    }

    /**
     * Clear SYS_PLL2_UPDATE's PFD2_UPDATE bit.
     *
     * PFD2_UPDATE
     */
    inline void clear_SYS_PLL2_UPDATE_PFD2_UPDATE() volatile
    {
        SYS_PLL2_UPDATE &= ~(1u << 3u);
    }

    /**
     * Toggle SYS_PLL2_UPDATE's PFD2_UPDATE bit.
     *
     * PFD2_UPDATE
     */
    inline void toggle_SYS_PLL2_UPDATE_PFD2_UPDATE() volatile
    {
        SYS_PLL2_UPDATE ^= 1u << 3u;
    }

    /**
     * Get SYS_PLL2_UPDATE's PFD1_UPDATE bit.
     *
     * PFD1_UPDATE
     */
    inline bool get_SYS_PLL2_UPDATE_PFD1_UPDATE() volatile
    {
        return SYS_PLL2_UPDATE & (1u << 2u);
    }

    /**
     * Set SYS_PLL2_UPDATE's PFD1_UPDATE bit.
     *
     * PFD1_UPDATE
     */
    inline void set_SYS_PLL2_UPDATE_PFD1_UPDATE() volatile
    {
        SYS_PLL2_UPDATE |= 1u << 2u;
    }

    /**
     * Clear SYS_PLL2_UPDATE's PFD1_UPDATE bit.
     *
     * PFD1_UPDATE
     */
    inline void clear_SYS_PLL2_UPDATE_PFD1_UPDATE() volatile
    {
        SYS_PLL2_UPDATE &= ~(1u << 2u);
    }

    /**
     * Toggle SYS_PLL2_UPDATE's PFD1_UPDATE bit.
     *
     * PFD1_UPDATE
     */
    inline void toggle_SYS_PLL2_UPDATE_PFD1_UPDATE() volatile
    {
        SYS_PLL2_UPDATE ^= 1u << 2u;
    }

    /**
     * Get SYS_PLL2_UPDATE's PFD0_UPDATE bit.
     *
     * PFD0_UPDATE
     */
    inline bool get_SYS_PLL2_UPDATE_PFD0_UPDATE() volatile
    {
        return SYS_PLL2_UPDATE & (1u << 1u);
    }

    /**
     * Set SYS_PLL2_UPDATE's PFD0_UPDATE bit.
     *
     * PFD0_UPDATE
     */
    inline void set_SYS_PLL2_UPDATE_PFD0_UPDATE() volatile
    {
        SYS_PLL2_UPDATE |= 1u << 1u;
    }

    /**
     * Clear SYS_PLL2_UPDATE's PFD0_UPDATE bit.
     *
     * PFD0_UPDATE
     */
    inline void clear_SYS_PLL2_UPDATE_PFD0_UPDATE() volatile
    {
        SYS_PLL2_UPDATE &= ~(1u << 1u);
    }

    /**
     * Toggle SYS_PLL2_UPDATE's PFD0_UPDATE bit.
     *
     * PFD0_UPDATE
     */
    inline void toggle_SYS_PLL2_UPDATE_PFD0_UPDATE() volatile
    {
        SYS_PLL2_UPDATE ^= 1u << 1u;
    }

    /**
     * Get all of SYS_PLL2_UPDATE's bit fields.
     *
     * (read-write) SYS_PLL2_UPDATE_REGISTER
     */
    inline void get_SYS_PLL2_UPDATE(bool &PFD3_CONTROL_MODE,
                                    bool &PFD2_CONTROL_MODE,
                                    bool &PFD1_CONTROL_MODE,
                                    bool &PFD0_CONTROL_MODE, bool &PFD3_UPDATE,
                                    bool &PFD2_UPDATE, bool &PFD1_UPDATE,
                                    bool &PFD0_UPDATE) volatile
    {
        uint32_t curr = SYS_PLL2_UPDATE;

        PFD3_CONTROL_MODE = curr & (1u << 8u);
        PFD2_CONTROL_MODE = curr & (1u << 7u);
        PFD1_CONTROL_MODE = curr & (1u << 6u);
        PFD0_CONTROL_MODE = curr & (1u << 5u);
        PFD3_UPDATE = curr & (1u << 4u);
        PFD2_UPDATE = curr & (1u << 3u);
        PFD1_UPDATE = curr & (1u << 2u);
        PFD0_UPDATE = curr & (1u << 1u);
    }

    /**
     * Set all of SYS_PLL2_UPDATE's bit fields.
     *
     * (read-write) SYS_PLL2_UPDATE_REGISTER
     */
    inline void set_SYS_PLL2_UPDATE(bool PFD3_CONTROL_MODE,
                                    bool PFD2_CONTROL_MODE,
                                    bool PFD1_CONTROL_MODE,
                                    bool PFD0_CONTROL_MODE, bool PFD3_UPDATE,
                                    bool PFD2_UPDATE, bool PFD1_UPDATE,
                                    bool PFD0_UPDATE) volatile
    {
        uint32_t curr = SYS_PLL2_UPDATE;

        curr &= ~(0b1u << 8u);
        curr |= (PFD3_CONTROL_MODE & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (PFD2_CONTROL_MODE & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (PFD1_CONTROL_MODE & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (PFD0_CONTROL_MODE & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (PFD3_UPDATE & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (PFD2_UPDATE & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (PFD1_UPDATE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (PFD0_UPDATE & 0b1u) << 1u;

        SYS_PLL2_UPDATE = curr;
    }

    /**
     * Get SYS_PLL2_SS's STOP field.
     *
     * STOP
     */
    inline uint16_t get_SYS_PLL2_SS_STOP() volatile
    {
        return (SYS_PLL2_SS >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set SYS_PLL2_SS's STOP field.
     *
     * STOP
     */
    inline void set_SYS_PLL2_SS_STOP(uint16_t value) volatile
    {
        uint32_t curr = SYS_PLL2_SS;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        SYS_PLL2_SS = curr;
    }

    /**
     * Get SYS_PLL2_SS's ENABLE bit.
     *
     * ENABLE
     */
    inline bool get_SYS_PLL2_SS_ENABLE() volatile
    {
        return SYS_PLL2_SS & (1u << 15u);
    }

    /**
     * Set SYS_PLL2_SS's ENABLE bit.
     *
     * ENABLE
     */
    inline void set_SYS_PLL2_SS_ENABLE() volatile
    {
        SYS_PLL2_SS |= 1u << 15u;
    }

    /**
     * Clear SYS_PLL2_SS's ENABLE bit.
     *
     * ENABLE
     */
    inline void clear_SYS_PLL2_SS_ENABLE() volatile
    {
        SYS_PLL2_SS &= ~(1u << 15u);
    }

    /**
     * Toggle SYS_PLL2_SS's ENABLE bit.
     *
     * ENABLE
     */
    inline void toggle_SYS_PLL2_SS_ENABLE() volatile
    {
        SYS_PLL2_SS ^= 1u << 15u;
    }

    /**
     * Get SYS_PLL2_SS's STEP field.
     *
     * STEP
     */
    inline uint16_t get_SYS_PLL2_SS_STEP() volatile
    {
        return (SYS_PLL2_SS >> 0u) & 0b111111111111111u;
    }

    /**
     * Set SYS_PLL2_SS's STEP field.
     *
     * STEP
     */
    inline void set_SYS_PLL2_SS_STEP(uint16_t value) volatile
    {
        uint32_t curr = SYS_PLL2_SS;

        curr &= ~(0b111111111111111u << 0u);
        curr |= (value & 0b111111111111111u) << 0u;

        SYS_PLL2_SS = curr;
    }

    /**
     * Get all of SYS_PLL2_SS's bit fields.
     *
     * (read-write) SYS_PLL2_SS_REGISTER
     */
    inline void get_SYS_PLL2_SS(uint16_t &STOP, bool &ENABLE,
                                uint16_t &STEP) volatile
    {
        uint32_t curr = SYS_PLL2_SS;

        STOP = (curr >> 16u) & 0b1111111111111111u;
        ENABLE = curr & (1u << 15u);
        STEP = (curr >> 0u) & 0b111111111111111u;
    }

    /**
     * Set all of SYS_PLL2_SS's bit fields.
     *
     * (read-write) SYS_PLL2_SS_REGISTER
     */
    inline void set_SYS_PLL2_SS(uint16_t STOP, bool ENABLE,
                                uint16_t STEP) volatile
    {
        uint32_t curr = SYS_PLL2_SS;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STOP & 0b1111111111111111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (ENABLE & 0b1u) << 15u;
        curr &= ~(0b111111111111111u << 0u);
        curr |= (STEP & 0b111111111111111u) << 0u;

        SYS_PLL2_SS = curr;
    }

    /**
     * Get SYS_PLL2_PFD's PFD3_DIV1_CLKGATE bit.
     *
     * PFD3_DIV1_CLKGATE
     */
    inline bool get_SYS_PLL2_PFD_PFD3_DIV1_CLKGATE() volatile
    {
        return SYS_PLL2_PFD & (1u << 31u);
    }

    /**
     * Set SYS_PLL2_PFD's PFD3_DIV1_CLKGATE bit.
     *
     * PFD3_DIV1_CLKGATE
     */
    inline void set_SYS_PLL2_PFD_PFD3_DIV1_CLKGATE() volatile
    {
        SYS_PLL2_PFD |= 1u << 31u;
    }

    /**
     * Clear SYS_PLL2_PFD's PFD3_DIV1_CLKGATE bit.
     *
     * PFD3_DIV1_CLKGATE
     */
    inline void clear_SYS_PLL2_PFD_PFD3_DIV1_CLKGATE() volatile
    {
        SYS_PLL2_PFD &= ~(1u << 31u);
    }

    /**
     * Toggle SYS_PLL2_PFD's PFD3_DIV1_CLKGATE bit.
     *
     * PFD3_DIV1_CLKGATE
     */
    inline void toggle_SYS_PLL2_PFD_PFD3_DIV1_CLKGATE() volatile
    {
        SYS_PLL2_PFD ^= 1u << 31u;
    }

    /**
     * Get SYS_PLL2_PFD's PFD3_STABLE bit.
     *
     * PFD3_STABLE
     */
    inline bool get_SYS_PLL2_PFD_PFD3_STABLE() volatile
    {
        return SYS_PLL2_PFD & (1u << 30u);
    }

    /**
     * Get SYS_PLL2_PFD's PFD3_FRAC field.
     *
     * PFD3_FRAC
     */
    inline uint8_t get_SYS_PLL2_PFD_PFD3_FRAC() volatile
    {
        return (SYS_PLL2_PFD >> 24u) & 0b111111u;
    }

    /**
     * Set SYS_PLL2_PFD's PFD3_FRAC field.
     *
     * PFD3_FRAC
     */
    inline void set_SYS_PLL2_PFD_PFD3_FRAC(uint8_t value) volatile
    {
        uint32_t curr = SYS_PLL2_PFD;

        curr &= ~(0b111111u << 24u);
        curr |= (value & 0b111111u) << 24u;

        SYS_PLL2_PFD = curr;
    }

    /**
     * Get SYS_PLL2_PFD's PFD2_DIV1_CLKGATE bit.
     *
     * PFD2_DIV1_CLKGATE
     */
    inline bool get_SYS_PLL2_PFD_PFD2_DIV1_CLKGATE() volatile
    {
        return SYS_PLL2_PFD & (1u << 23u);
    }

    /**
     * Set SYS_PLL2_PFD's PFD2_DIV1_CLKGATE bit.
     *
     * PFD2_DIV1_CLKGATE
     */
    inline void set_SYS_PLL2_PFD_PFD2_DIV1_CLKGATE() volatile
    {
        SYS_PLL2_PFD |= 1u << 23u;
    }

    /**
     * Clear SYS_PLL2_PFD's PFD2_DIV1_CLKGATE bit.
     *
     * PFD2_DIV1_CLKGATE
     */
    inline void clear_SYS_PLL2_PFD_PFD2_DIV1_CLKGATE() volatile
    {
        SYS_PLL2_PFD &= ~(1u << 23u);
    }

    /**
     * Toggle SYS_PLL2_PFD's PFD2_DIV1_CLKGATE bit.
     *
     * PFD2_DIV1_CLKGATE
     */
    inline void toggle_SYS_PLL2_PFD_PFD2_DIV1_CLKGATE() volatile
    {
        SYS_PLL2_PFD ^= 1u << 23u;
    }

    /**
     * Get SYS_PLL2_PFD's PFD2_STABLE bit.
     *
     * PFD2_STABLE
     */
    inline bool get_SYS_PLL2_PFD_PFD2_STABLE() volatile
    {
        return SYS_PLL2_PFD & (1u << 22u);
    }

    /**
     * Get SYS_PLL2_PFD's PFD2_FRAC field.
     *
     * PFD2_FRAC
     */
    inline uint8_t get_SYS_PLL2_PFD_PFD2_FRAC() volatile
    {
        return (SYS_PLL2_PFD >> 16u) & 0b111111u;
    }

    /**
     * Set SYS_PLL2_PFD's PFD2_FRAC field.
     *
     * PFD2_FRAC
     */
    inline void set_SYS_PLL2_PFD_PFD2_FRAC(uint8_t value) volatile
    {
        uint32_t curr = SYS_PLL2_PFD;

        curr &= ~(0b111111u << 16u);
        curr |= (value & 0b111111u) << 16u;

        SYS_PLL2_PFD = curr;
    }

    /**
     * Get SYS_PLL2_PFD's PFD1_DIV1_CLKGATE bit.
     *
     * PFD1_DIV1_CLKGATE
     */
    inline bool get_SYS_PLL2_PFD_PFD1_DIV1_CLKGATE() volatile
    {
        return SYS_PLL2_PFD & (1u << 15u);
    }

    /**
     * Set SYS_PLL2_PFD's PFD1_DIV1_CLKGATE bit.
     *
     * PFD1_DIV1_CLKGATE
     */
    inline void set_SYS_PLL2_PFD_PFD1_DIV1_CLKGATE() volatile
    {
        SYS_PLL2_PFD |= 1u << 15u;
    }

    /**
     * Clear SYS_PLL2_PFD's PFD1_DIV1_CLKGATE bit.
     *
     * PFD1_DIV1_CLKGATE
     */
    inline void clear_SYS_PLL2_PFD_PFD1_DIV1_CLKGATE() volatile
    {
        SYS_PLL2_PFD &= ~(1u << 15u);
    }

    /**
     * Toggle SYS_PLL2_PFD's PFD1_DIV1_CLKGATE bit.
     *
     * PFD1_DIV1_CLKGATE
     */
    inline void toggle_SYS_PLL2_PFD_PFD1_DIV1_CLKGATE() volatile
    {
        SYS_PLL2_PFD ^= 1u << 15u;
    }

    /**
     * Get SYS_PLL2_PFD's PFD1_STABLE bit.
     *
     * PFD1_STABLE
     */
    inline bool get_SYS_PLL2_PFD_PFD1_STABLE() volatile
    {
        return SYS_PLL2_PFD & (1u << 14u);
    }

    /**
     * Get SYS_PLL2_PFD's PFD1_FRAC field.
     *
     * PFD1_FRAC
     */
    inline uint8_t get_SYS_PLL2_PFD_PFD1_FRAC() volatile
    {
        return (SYS_PLL2_PFD >> 8u) & 0b111111u;
    }

    /**
     * Set SYS_PLL2_PFD's PFD1_FRAC field.
     *
     * PFD1_FRAC
     */
    inline void set_SYS_PLL2_PFD_PFD1_FRAC(uint8_t value) volatile
    {
        uint32_t curr = SYS_PLL2_PFD;

        curr &= ~(0b111111u << 8u);
        curr |= (value & 0b111111u) << 8u;

        SYS_PLL2_PFD = curr;
    }

    /**
     * Get SYS_PLL2_PFD's PFD0_DIV1_CLKGATE bit.
     *
     * PFD0_DIV1_CLKGATE
     */
    inline bool get_SYS_PLL2_PFD_PFD0_DIV1_CLKGATE() volatile
    {
        return SYS_PLL2_PFD & (1u << 7u);
    }

    /**
     * Set SYS_PLL2_PFD's PFD0_DIV1_CLKGATE bit.
     *
     * PFD0_DIV1_CLKGATE
     */
    inline void set_SYS_PLL2_PFD_PFD0_DIV1_CLKGATE() volatile
    {
        SYS_PLL2_PFD |= 1u << 7u;
    }

    /**
     * Clear SYS_PLL2_PFD's PFD0_DIV1_CLKGATE bit.
     *
     * PFD0_DIV1_CLKGATE
     */
    inline void clear_SYS_PLL2_PFD_PFD0_DIV1_CLKGATE() volatile
    {
        SYS_PLL2_PFD &= ~(1u << 7u);
    }

    /**
     * Toggle SYS_PLL2_PFD's PFD0_DIV1_CLKGATE bit.
     *
     * PFD0_DIV1_CLKGATE
     */
    inline void toggle_SYS_PLL2_PFD_PFD0_DIV1_CLKGATE() volatile
    {
        SYS_PLL2_PFD ^= 1u << 7u;
    }

    /**
     * Get SYS_PLL2_PFD's PFD0_STABLE bit.
     *
     * PFD0_STABLE
     */
    inline bool get_SYS_PLL2_PFD_PFD0_STABLE() volatile
    {
        return SYS_PLL2_PFD & (1u << 6u);
    }

    /**
     * Get SYS_PLL2_PFD's PFD0_FRAC field.
     *
     * PFD0_FRAC
     */
    inline uint8_t get_SYS_PLL2_PFD_PFD0_FRAC() volatile
    {
        return (SYS_PLL2_PFD >> 0u) & 0b111111u;
    }

    /**
     * Set SYS_PLL2_PFD's PFD0_FRAC field.
     *
     * PFD0_FRAC
     */
    inline void set_SYS_PLL2_PFD_PFD0_FRAC(uint8_t value) volatile
    {
        uint32_t curr = SYS_PLL2_PFD;

        curr &= ~(0b111111u << 0u);
        curr |= (value & 0b111111u) << 0u;

        SYS_PLL2_PFD = curr;
    }

    /**
     * Get all of SYS_PLL2_PFD's bit fields.
     *
     * (read-write) SYS_PLL2_PFD_REGISTER
     */
    inline void get_SYS_PLL2_PFD(bool &PFD3_DIV1_CLKGATE, bool &PFD3_STABLE,
                                 uint8_t &PFD3_FRAC, bool &PFD2_DIV1_CLKGATE,
                                 bool &PFD2_STABLE, uint8_t &PFD2_FRAC,
                                 bool &PFD1_DIV1_CLKGATE, bool &PFD1_STABLE,
                                 uint8_t &PFD1_FRAC, bool &PFD0_DIV1_CLKGATE,
                                 bool &PFD0_STABLE,
                                 uint8_t &PFD0_FRAC) volatile
    {
        uint32_t curr = SYS_PLL2_PFD;

        PFD3_DIV1_CLKGATE = curr & (1u << 31u);
        PFD3_STABLE = curr & (1u << 30u);
        PFD3_FRAC = (curr >> 24u) & 0b111111u;
        PFD2_DIV1_CLKGATE = curr & (1u << 23u);
        PFD2_STABLE = curr & (1u << 22u);
        PFD2_FRAC = (curr >> 16u) & 0b111111u;
        PFD1_DIV1_CLKGATE = curr & (1u << 15u);
        PFD1_STABLE = curr & (1u << 14u);
        PFD1_FRAC = (curr >> 8u) & 0b111111u;
        PFD0_DIV1_CLKGATE = curr & (1u << 7u);
        PFD0_STABLE = curr & (1u << 6u);
        PFD0_FRAC = (curr >> 0u) & 0b111111u;
    }

    /**
     * Set all of SYS_PLL2_PFD's bit fields.
     *
     * (read-write) SYS_PLL2_PFD_REGISTER
     */
    inline void set_SYS_PLL2_PFD(bool PFD3_DIV1_CLKGATE, uint8_t PFD3_FRAC,
                                 bool PFD2_DIV1_CLKGATE, uint8_t PFD2_FRAC,
                                 bool PFD1_DIV1_CLKGATE, uint8_t PFD1_FRAC,
                                 bool PFD0_DIV1_CLKGATE,
                                 uint8_t PFD0_FRAC) volatile
    {
        uint32_t curr = SYS_PLL2_PFD;

        curr &= ~(0b1u << 31u);
        curr |= (PFD3_DIV1_CLKGATE & 0b1u) << 31u;
        curr &= ~(0b111111u << 24u);
        curr |= (PFD3_FRAC & 0b111111u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (PFD2_DIV1_CLKGATE & 0b1u) << 23u;
        curr &= ~(0b111111u << 16u);
        curr |= (PFD2_FRAC & 0b111111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (PFD1_DIV1_CLKGATE & 0b1u) << 15u;
        curr &= ~(0b111111u << 8u);
        curr |= (PFD1_FRAC & 0b111111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (PFD0_DIV1_CLKGATE & 0b1u) << 7u;
        curr &= ~(0b111111u << 0u);
        curr |= (PFD0_FRAC & 0b111111u) << 0u;

        SYS_PLL2_PFD = curr;
    }

    /**
     * Get SYS_PLL2_MFD's MFD field.
     *
     * Denominator
     */
    inline uint32_t get_SYS_PLL2_MFD_MFD() volatile
    {
        return (SYS_PLL2_MFD >> 0u) & 0b111111111111111111111111111111u;
    }

    /**
     * Set SYS_PLL2_MFD's MFD field.
     *
     * Denominator
     */
    inline void set_SYS_PLL2_MFD_MFD(uint32_t value) volatile
    {
        uint32_t curr = SYS_PLL2_MFD;

        curr &= ~(0b111111111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111111111u) << 0u;

        SYS_PLL2_MFD = curr;
    }

    /**
     * Get SYS_PLL1_SS's STOP field.
     *
     * STOP
     */
    inline uint16_t get_SYS_PLL1_SS_STOP() volatile
    {
        return (SYS_PLL1_SS >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set SYS_PLL1_SS's STOP field.
     *
     * STOP
     */
    inline void set_SYS_PLL1_SS_STOP(uint16_t value) volatile
    {
        uint32_t curr = SYS_PLL1_SS;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        SYS_PLL1_SS = curr;
    }

    /**
     * Get SYS_PLL1_SS's ENABLE bit.
     *
     * ENABLE
     */
    inline bool get_SYS_PLL1_SS_ENABLE() volatile
    {
        return SYS_PLL1_SS & (1u << 15u);
    }

    /**
     * Set SYS_PLL1_SS's ENABLE bit.
     *
     * ENABLE
     */
    inline void set_SYS_PLL1_SS_ENABLE() volatile
    {
        SYS_PLL1_SS |= 1u << 15u;
    }

    /**
     * Clear SYS_PLL1_SS's ENABLE bit.
     *
     * ENABLE
     */
    inline void clear_SYS_PLL1_SS_ENABLE() volatile
    {
        SYS_PLL1_SS &= ~(1u << 15u);
    }

    /**
     * Toggle SYS_PLL1_SS's ENABLE bit.
     *
     * ENABLE
     */
    inline void toggle_SYS_PLL1_SS_ENABLE() volatile
    {
        SYS_PLL1_SS ^= 1u << 15u;
    }

    /**
     * Get SYS_PLL1_SS's STEP field.
     *
     * STEP
     */
    inline uint16_t get_SYS_PLL1_SS_STEP() volatile
    {
        return (SYS_PLL1_SS >> 0u) & 0b111111111111111u;
    }

    /**
     * Set SYS_PLL1_SS's STEP field.
     *
     * STEP
     */
    inline void set_SYS_PLL1_SS_STEP(uint16_t value) volatile
    {
        uint32_t curr = SYS_PLL1_SS;

        curr &= ~(0b111111111111111u << 0u);
        curr |= (value & 0b111111111111111u) << 0u;

        SYS_PLL1_SS = curr;
    }

    /**
     * Get all of SYS_PLL1_SS's bit fields.
     *
     * (read-write) SYS_PLL1_SS_REGISTER
     */
    inline void get_SYS_PLL1_SS(uint16_t &STOP, bool &ENABLE,
                                uint16_t &STEP) volatile
    {
        uint32_t curr = SYS_PLL1_SS;

        STOP = (curr >> 16u) & 0b1111111111111111u;
        ENABLE = curr & (1u << 15u);
        STEP = (curr >> 0u) & 0b111111111111111u;
    }

    /**
     * Set all of SYS_PLL1_SS's bit fields.
     *
     * (read-write) SYS_PLL1_SS_REGISTER
     */
    inline void set_SYS_PLL1_SS(uint16_t STOP, bool ENABLE,
                                uint16_t STEP) volatile
    {
        uint32_t curr = SYS_PLL1_SS;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STOP & 0b1111111111111111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (ENABLE & 0b1u) << 15u;
        curr &= ~(0b111111111111111u << 0u);
        curr |= (STEP & 0b111111111111111u) << 0u;

        SYS_PLL1_SS = curr;
    }

    /**
     * Get SYS_PLL1_CTRL's SYS_PLL1_CONTROL_MODE bit.
     *
     * SYS_PLL1_CONTROL_MODE
     */
    inline bool get_SYS_PLL1_CTRL_SYS_PLL1_CONTROL_MODE() volatile
    {
        return SYS_PLL1_CTRL & (1u << 31u);
    }

    /**
     * Set SYS_PLL1_CTRL's SYS_PLL1_CONTROL_MODE bit.
     *
     * SYS_PLL1_CONTROL_MODE
     */
    inline void set_SYS_PLL1_CTRL_SYS_PLL1_CONTROL_MODE() volatile
    {
        SYS_PLL1_CTRL |= 1u << 31u;
    }

    /**
     * Clear SYS_PLL1_CTRL's SYS_PLL1_CONTROL_MODE bit.
     *
     * SYS_PLL1_CONTROL_MODE
     */
    inline void clear_SYS_PLL1_CTRL_SYS_PLL1_CONTROL_MODE() volatile
    {
        SYS_PLL1_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SYS_PLL1_CTRL's SYS_PLL1_CONTROL_MODE bit.
     *
     * SYS_PLL1_CONTROL_MODE
     */
    inline void toggle_SYS_PLL1_CTRL_SYS_PLL1_CONTROL_MODE() volatile
    {
        SYS_PLL1_CTRL ^= 1u << 31u;
    }

    /**
     * Get SYS_PLL1_CTRL's SYS_PLL1_AI_BUSY bit.
     *
     * SYS_PLL1_AI_BUSY
     */
    inline bool get_SYS_PLL1_CTRL_SYS_PLL1_AI_BUSY() volatile
    {
        return SYS_PLL1_CTRL & (1u << 30u);
    }

    /**
     * Get SYS_PLL1_CTRL's SYS_PLL1_STABLE bit.
     *
     * SYS_PLL1_STABLE
     */
    inline bool get_SYS_PLL1_CTRL_SYS_PLL1_STABLE() volatile
    {
        return SYS_PLL1_CTRL & (1u << 29u);
    }

    /**
     * Get SYS_PLL1_CTRL's SYS_PLL1_DIV2_CONTROL_MODE bit.
     *
     * SYS_PLL1_DIV2_CONTROL_MODE
     */
    inline bool get_SYS_PLL1_CTRL_SYS_PLL1_DIV2_CONTROL_MODE() volatile
    {
        return SYS_PLL1_CTRL & (1u << 28u);
    }

    /**
     * Set SYS_PLL1_CTRL's SYS_PLL1_DIV2_CONTROL_MODE bit.
     *
     * SYS_PLL1_DIV2_CONTROL_MODE
     */
    inline void set_SYS_PLL1_CTRL_SYS_PLL1_DIV2_CONTROL_MODE() volatile
    {
        SYS_PLL1_CTRL |= 1u << 28u;
    }

    /**
     * Clear SYS_PLL1_CTRL's SYS_PLL1_DIV2_CONTROL_MODE bit.
     *
     * SYS_PLL1_DIV2_CONTROL_MODE
     */
    inline void clear_SYS_PLL1_CTRL_SYS_PLL1_DIV2_CONTROL_MODE() volatile
    {
        SYS_PLL1_CTRL &= ~(1u << 28u);
    }

    /**
     * Toggle SYS_PLL1_CTRL's SYS_PLL1_DIV2_CONTROL_MODE bit.
     *
     * SYS_PLL1_DIV2_CONTROL_MODE
     */
    inline void toggle_SYS_PLL1_CTRL_SYS_PLL1_DIV2_CONTROL_MODE() volatile
    {
        SYS_PLL1_CTRL ^= 1u << 28u;
    }

    /**
     * Get SYS_PLL1_CTRL's SYS_PLL1_DIV5_CONTROL_MODE bit.
     *
     * SYS_PLL1_DIV5_CONTROL_MODE
     */
    inline bool get_SYS_PLL1_CTRL_SYS_PLL1_DIV5_CONTROL_MODE() volatile
    {
        return SYS_PLL1_CTRL & (1u << 27u);
    }

    /**
     * Set SYS_PLL1_CTRL's SYS_PLL1_DIV5_CONTROL_MODE bit.
     *
     * SYS_PLL1_DIV5_CONTROL_MODE
     */
    inline void set_SYS_PLL1_CTRL_SYS_PLL1_DIV5_CONTROL_MODE() volatile
    {
        SYS_PLL1_CTRL |= 1u << 27u;
    }

    /**
     * Clear SYS_PLL1_CTRL's SYS_PLL1_DIV5_CONTROL_MODE bit.
     *
     * SYS_PLL1_DIV5_CONTROL_MODE
     */
    inline void clear_SYS_PLL1_CTRL_SYS_PLL1_DIV5_CONTROL_MODE() volatile
    {
        SYS_PLL1_CTRL &= ~(1u << 27u);
    }

    /**
     * Toggle SYS_PLL1_CTRL's SYS_PLL1_DIV5_CONTROL_MODE bit.
     *
     * SYS_PLL1_DIV5_CONTROL_MODE
     */
    inline void toggle_SYS_PLL1_CTRL_SYS_PLL1_DIV5_CONTROL_MODE() volatile
    {
        SYS_PLL1_CTRL ^= 1u << 27u;
    }

    /**
     * Get SYS_PLL1_CTRL's SYS_PLL1_DIV5 bit.
     *
     * SYS_PLL1_DIV5
     */
    inline bool get_SYS_PLL1_CTRL_SYS_PLL1_DIV5() volatile
    {
        return SYS_PLL1_CTRL & (1u << 26u);
    }

    /**
     * Set SYS_PLL1_CTRL's SYS_PLL1_DIV5 bit.
     *
     * SYS_PLL1_DIV5
     */
    inline void set_SYS_PLL1_CTRL_SYS_PLL1_DIV5() volatile
    {
        SYS_PLL1_CTRL |= 1u << 26u;
    }

    /**
     * Clear SYS_PLL1_CTRL's SYS_PLL1_DIV5 bit.
     *
     * SYS_PLL1_DIV5
     */
    inline void clear_SYS_PLL1_CTRL_SYS_PLL1_DIV5() volatile
    {
        SYS_PLL1_CTRL &= ~(1u << 26u);
    }

    /**
     * Toggle SYS_PLL1_CTRL's SYS_PLL1_DIV5 bit.
     *
     * SYS_PLL1_DIV5
     */
    inline void toggle_SYS_PLL1_CTRL_SYS_PLL1_DIV5() volatile
    {
        SYS_PLL1_CTRL ^= 1u << 26u;
    }

    /**
     * Get SYS_PLL1_CTRL's SYS_PLL1_DIV2 bit.
     *
     * SYS_PLL1_DIV2
     */
    inline bool get_SYS_PLL1_CTRL_SYS_PLL1_DIV2() volatile
    {
        return SYS_PLL1_CTRL & (1u << 25u);
    }

    /**
     * Set SYS_PLL1_CTRL's SYS_PLL1_DIV2 bit.
     *
     * SYS_PLL1_DIV2
     */
    inline void set_SYS_PLL1_CTRL_SYS_PLL1_DIV2() volatile
    {
        SYS_PLL1_CTRL |= 1u << 25u;
    }

    /**
     * Clear SYS_PLL1_CTRL's SYS_PLL1_DIV2 bit.
     *
     * SYS_PLL1_DIV2
     */
    inline void clear_SYS_PLL1_CTRL_SYS_PLL1_DIV2() volatile
    {
        SYS_PLL1_CTRL &= ~(1u << 25u);
    }

    /**
     * Toggle SYS_PLL1_CTRL's SYS_PLL1_DIV2 bit.
     *
     * SYS_PLL1_DIV2
     */
    inline void toggle_SYS_PLL1_CTRL_SYS_PLL1_DIV2() volatile
    {
        SYS_PLL1_CTRL ^= 1u << 25u;
    }

    /**
     * Get SYS_PLL1_CTRL's SYS_PLL1_GATE bit.
     *
     * SYS_PLL1_GATE
     */
    inline bool get_SYS_PLL1_CTRL_SYS_PLL1_GATE() volatile
    {
        return SYS_PLL1_CTRL & (1u << 14u);
    }

    /**
     * Set SYS_PLL1_CTRL's SYS_PLL1_GATE bit.
     *
     * SYS_PLL1_GATE
     */
    inline void set_SYS_PLL1_CTRL_SYS_PLL1_GATE() volatile
    {
        SYS_PLL1_CTRL |= 1u << 14u;
    }

    /**
     * Clear SYS_PLL1_CTRL's SYS_PLL1_GATE bit.
     *
     * SYS_PLL1_GATE
     */
    inline void clear_SYS_PLL1_CTRL_SYS_PLL1_GATE() volatile
    {
        SYS_PLL1_CTRL &= ~(1u << 14u);
    }

    /**
     * Toggle SYS_PLL1_CTRL's SYS_PLL1_GATE bit.
     *
     * SYS_PLL1_GATE
     */
    inline void toggle_SYS_PLL1_CTRL_SYS_PLL1_GATE() volatile
    {
        SYS_PLL1_CTRL ^= 1u << 14u;
    }

    /**
     * Get SYS_PLL1_CTRL's ENABLE_CLK bit.
     *
     * ENABLE_CLK
     */
    inline bool get_SYS_PLL1_CTRL_ENABLE_CLK() volatile
    {
        return SYS_PLL1_CTRL & (1u << 13u);
    }

    /**
     * Set SYS_PLL1_CTRL's ENABLE_CLK bit.
     *
     * ENABLE_CLK
     */
    inline void set_SYS_PLL1_CTRL_ENABLE_CLK() volatile
    {
        SYS_PLL1_CTRL |= 1u << 13u;
    }

    /**
     * Clear SYS_PLL1_CTRL's ENABLE_CLK bit.
     *
     * ENABLE_CLK
     */
    inline void clear_SYS_PLL1_CTRL_ENABLE_CLK() volatile
    {
        SYS_PLL1_CTRL &= ~(1u << 13u);
    }

    /**
     * Toggle SYS_PLL1_CTRL's ENABLE_CLK bit.
     *
     * ENABLE_CLK
     */
    inline void toggle_SYS_PLL1_CTRL_ENABLE_CLK() volatile
    {
        SYS_PLL1_CTRL ^= 1u << 13u;
    }

    /**
     * Get all of SYS_PLL1_CTRL's bit fields.
     *
     * (read-write) SYS_PLL1_CTRL_REGISTER
     */
    inline void get_SYS_PLL1_CTRL(
        bool &SYS_PLL1_CONTROL_MODE, bool &SYS_PLL1_AI_BUSY,
        bool &SYS_PLL1_STABLE, bool &SYS_PLL1_DIV2_CONTROL_MODE,
        bool &SYS_PLL1_DIV5_CONTROL_MODE, bool &SYS_PLL1_DIV5,
        bool &SYS_PLL1_DIV2, bool &SYS_PLL1_GATE, bool &ENABLE_CLK) volatile
    {
        uint32_t curr = SYS_PLL1_CTRL;

        SYS_PLL1_CONTROL_MODE = curr & (1u << 31u);
        SYS_PLL1_AI_BUSY = curr & (1u << 30u);
        SYS_PLL1_STABLE = curr & (1u << 29u);
        SYS_PLL1_DIV2_CONTROL_MODE = curr & (1u << 28u);
        SYS_PLL1_DIV5_CONTROL_MODE = curr & (1u << 27u);
        SYS_PLL1_DIV5 = curr & (1u << 26u);
        SYS_PLL1_DIV2 = curr & (1u << 25u);
        SYS_PLL1_GATE = curr & (1u << 14u);
        ENABLE_CLK = curr & (1u << 13u);
    }

    /**
     * Set all of SYS_PLL1_CTRL's bit fields.
     *
     * (read-write) SYS_PLL1_CTRL_REGISTER
     */
    inline void set_SYS_PLL1_CTRL(bool SYS_PLL1_CONTROL_MODE,
                                  bool SYS_PLL1_DIV2_CONTROL_MODE,
                                  bool SYS_PLL1_DIV5_CONTROL_MODE,
                                  bool SYS_PLL1_DIV5, bool SYS_PLL1_DIV2,
                                  bool SYS_PLL1_GATE, bool ENABLE_CLK) volatile
    {
        uint32_t curr = SYS_PLL1_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (SYS_PLL1_CONTROL_MODE & 0b1u) << 31u;
        curr &= ~(0b1u << 28u);
        curr |= (SYS_PLL1_DIV2_CONTROL_MODE & 0b1u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (SYS_PLL1_DIV5_CONTROL_MODE & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (SYS_PLL1_DIV5 & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (SYS_PLL1_DIV2 & 0b1u) << 25u;
        curr &= ~(0b1u << 14u);
        curr |= (SYS_PLL1_GATE & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (ENABLE_CLK & 0b1u) << 13u;

        SYS_PLL1_CTRL = curr;
    }

    /**
     * Get SYS_PLL1_DENOMINATOR's DENOM field.
     *
     * DENOM
     */
    inline uint32_t get_SYS_PLL1_DENOMINATOR_DENOM() volatile
    {
        return (SYS_PLL1_DENOMINATOR >> 0u) &
               0b111111111111111111111111111111u;
    }

    /**
     * Set SYS_PLL1_DENOMINATOR's DENOM field.
     *
     * DENOM
     */
    inline void set_SYS_PLL1_DENOMINATOR_DENOM(uint32_t value) volatile
    {
        uint32_t curr = SYS_PLL1_DENOMINATOR;

        curr &= ~(0b111111111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111111111u) << 0u;

        SYS_PLL1_DENOMINATOR = curr;
    }

    /**
     * Get SYS_PLL1_NUMERATOR's NUM field.
     *
     * NUM
     */
    inline uint32_t get_SYS_PLL1_NUMERATOR_NUM() volatile
    {
        return (SYS_PLL1_NUMERATOR >> 0u) & 0b111111111111111111111111111111u;
    }

    /**
     * Set SYS_PLL1_NUMERATOR's NUM field.
     *
     * NUM
     */
    inline void set_SYS_PLL1_NUMERATOR_NUM(uint32_t value) volatile
    {
        uint32_t curr = SYS_PLL1_NUMERATOR;

        curr &= ~(0b111111111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111111111u) << 0u;

        SYS_PLL1_NUMERATOR = curr;
    }

    /**
     * Get SYS_PLL1_DIV_SELECT's DIV_SELECT field.
     *
     * DIV_SELECT
     */
    inline uint8_t get_SYS_PLL1_DIV_SELECT_DIV_SELECT() volatile
    {
        return (SYS_PLL1_DIV_SELECT >> 0u) & 0b1111111u;
    }

    /**
     * Set SYS_PLL1_DIV_SELECT's DIV_SELECT field.
     *
     * DIV_SELECT
     */
    inline void set_SYS_PLL1_DIV_SELECT_DIV_SELECT(uint8_t value) volatile
    {
        uint32_t curr = SYS_PLL1_DIV_SELECT;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        SYS_PLL1_DIV_SELECT = curr;
    }

    /**
     * Get PLL_AUDIO_CTRL's PLL_AUDIO_CONTROL_MODE bit.
     *
     * pll_audio_control_mode
     */
    inline bool get_PLL_AUDIO_CTRL_PLL_AUDIO_CONTROL_MODE() volatile
    {
        return PLL_AUDIO_CTRL & (1u << 31u);
    }

    /**
     * Set PLL_AUDIO_CTRL's PLL_AUDIO_CONTROL_MODE bit.
     *
     * pll_audio_control_mode
     */
    inline void set_PLL_AUDIO_CTRL_PLL_AUDIO_CONTROL_MODE() volatile
    {
        PLL_AUDIO_CTRL |= 1u << 31u;
    }

    /**
     * Clear PLL_AUDIO_CTRL's PLL_AUDIO_CONTROL_MODE bit.
     *
     * pll_audio_control_mode
     */
    inline void clear_PLL_AUDIO_CTRL_PLL_AUDIO_CONTROL_MODE() volatile
    {
        PLL_AUDIO_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle PLL_AUDIO_CTRL's PLL_AUDIO_CONTROL_MODE bit.
     *
     * pll_audio_control_mode
     */
    inline void toggle_PLL_AUDIO_CTRL_PLL_AUDIO_CONTROL_MODE() volatile
    {
        PLL_AUDIO_CTRL ^= 1u << 31u;
    }

    /**
     * Get PLL_AUDIO_CTRL's PLL_AUDIO_AI_BUSY bit.
     *
     * pll_audio_ai_busy
     */
    inline bool get_PLL_AUDIO_CTRL_PLL_AUDIO_AI_BUSY() volatile
    {
        return PLL_AUDIO_CTRL & (1u << 30u);
    }

    /**
     * Get PLL_AUDIO_CTRL's PLL_AUDIO_STABLE bit.
     *
     * PLL_AUDIO_STABLE
     */
    inline bool get_PLL_AUDIO_CTRL_PLL_AUDIO_STABLE() volatile
    {
        return PLL_AUDIO_CTRL & (1u << 29u);
    }

    /**
     * Get PLL_AUDIO_CTRL's PLL_AUDIO_GATE bit.
     *
     * PLL_AUDIO_GATE
     */
    inline bool get_PLL_AUDIO_CTRL_PLL_AUDIO_GATE() volatile
    {
        return PLL_AUDIO_CTRL & (1u << 14u);
    }

    /**
     * Set PLL_AUDIO_CTRL's PLL_AUDIO_GATE bit.
     *
     * PLL_AUDIO_GATE
     */
    inline void set_PLL_AUDIO_CTRL_PLL_AUDIO_GATE() volatile
    {
        PLL_AUDIO_CTRL |= 1u << 14u;
    }

    /**
     * Clear PLL_AUDIO_CTRL's PLL_AUDIO_GATE bit.
     *
     * PLL_AUDIO_GATE
     */
    inline void clear_PLL_AUDIO_CTRL_PLL_AUDIO_GATE() volatile
    {
        PLL_AUDIO_CTRL &= ~(1u << 14u);
    }

    /**
     * Toggle PLL_AUDIO_CTRL's PLL_AUDIO_GATE bit.
     *
     * PLL_AUDIO_GATE
     */
    inline void toggle_PLL_AUDIO_CTRL_PLL_AUDIO_GATE() volatile
    {
        PLL_AUDIO_CTRL ^= 1u << 14u;
    }

    /**
     * Get PLL_AUDIO_CTRL's ENABLE_CLK bit.
     *
     * ENABLE_CLK
     */
    inline bool get_PLL_AUDIO_CTRL_ENABLE_CLK() volatile
    {
        return PLL_AUDIO_CTRL & (1u << 13u);
    }

    /**
     * Set PLL_AUDIO_CTRL's ENABLE_CLK bit.
     *
     * ENABLE_CLK
     */
    inline void set_PLL_AUDIO_CTRL_ENABLE_CLK() volatile
    {
        PLL_AUDIO_CTRL |= 1u << 13u;
    }

    /**
     * Clear PLL_AUDIO_CTRL's ENABLE_CLK bit.
     *
     * ENABLE_CLK
     */
    inline void clear_PLL_AUDIO_CTRL_ENABLE_CLK() volatile
    {
        PLL_AUDIO_CTRL &= ~(1u << 13u);
    }

    /**
     * Toggle PLL_AUDIO_CTRL's ENABLE_CLK bit.
     *
     * ENABLE_CLK
     */
    inline void toggle_PLL_AUDIO_CTRL_ENABLE_CLK() volatile
    {
        PLL_AUDIO_CTRL ^= 1u << 13u;
    }

    /**
     * Get all of PLL_AUDIO_CTRL's bit fields.
     *
     * (read-write) PLL_AUDIO_CTRL_REGISTER
     */
    inline void get_PLL_AUDIO_CTRL(bool &PLL_AUDIO_CONTROL_MODE,
                                   bool &PLL_AUDIO_AI_BUSY,
                                   bool &PLL_AUDIO_STABLE,
                                   bool &PLL_AUDIO_GATE,
                                   bool &ENABLE_CLK) volatile
    {
        uint32_t curr = PLL_AUDIO_CTRL;

        PLL_AUDIO_CONTROL_MODE = curr & (1u << 31u);
        PLL_AUDIO_AI_BUSY = curr & (1u << 30u);
        PLL_AUDIO_STABLE = curr & (1u << 29u);
        PLL_AUDIO_GATE = curr & (1u << 14u);
        ENABLE_CLK = curr & (1u << 13u);
    }

    /**
     * Set all of PLL_AUDIO_CTRL's bit fields.
     *
     * (read-write) PLL_AUDIO_CTRL_REGISTER
     */
    inline void set_PLL_AUDIO_CTRL(bool PLL_AUDIO_CONTROL_MODE,
                                   bool PLL_AUDIO_GATE,
                                   bool ENABLE_CLK) volatile
    {
        uint32_t curr = PLL_AUDIO_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (PLL_AUDIO_CONTROL_MODE & 0b1u) << 31u;
        curr &= ~(0b1u << 14u);
        curr |= (PLL_AUDIO_GATE & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (ENABLE_CLK & 0b1u) << 13u;

        PLL_AUDIO_CTRL = curr;
    }

    /**
     * Get PLL_AUDIO_SS's STOP field.
     *
     * STOP
     */
    inline uint16_t get_PLL_AUDIO_SS_STOP() volatile
    {
        return (PLL_AUDIO_SS >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set PLL_AUDIO_SS's STOP field.
     *
     * STOP
     */
    inline void set_PLL_AUDIO_SS_STOP(uint16_t value) volatile
    {
        uint32_t curr = PLL_AUDIO_SS;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        PLL_AUDIO_SS = curr;
    }

    /**
     * Get PLL_AUDIO_SS's ENABLE bit.
     *
     * ENABLE
     */
    inline bool get_PLL_AUDIO_SS_ENABLE() volatile
    {
        return PLL_AUDIO_SS & (1u << 15u);
    }

    /**
     * Set PLL_AUDIO_SS's ENABLE bit.
     *
     * ENABLE
     */
    inline void set_PLL_AUDIO_SS_ENABLE() volatile
    {
        PLL_AUDIO_SS |= 1u << 15u;
    }

    /**
     * Clear PLL_AUDIO_SS's ENABLE bit.
     *
     * ENABLE
     */
    inline void clear_PLL_AUDIO_SS_ENABLE() volatile
    {
        PLL_AUDIO_SS &= ~(1u << 15u);
    }

    /**
     * Toggle PLL_AUDIO_SS's ENABLE bit.
     *
     * ENABLE
     */
    inline void toggle_PLL_AUDIO_SS_ENABLE() volatile
    {
        PLL_AUDIO_SS ^= 1u << 15u;
    }

    /**
     * Get PLL_AUDIO_SS's STEP field.
     *
     * STEP
     */
    inline uint16_t get_PLL_AUDIO_SS_STEP() volatile
    {
        return (PLL_AUDIO_SS >> 0u) & 0b111111111111111u;
    }

    /**
     * Set PLL_AUDIO_SS's STEP field.
     *
     * STEP
     */
    inline void set_PLL_AUDIO_SS_STEP(uint16_t value) volatile
    {
        uint32_t curr = PLL_AUDIO_SS;

        curr &= ~(0b111111111111111u << 0u);
        curr |= (value & 0b111111111111111u) << 0u;

        PLL_AUDIO_SS = curr;
    }

    /**
     * Get all of PLL_AUDIO_SS's bit fields.
     *
     * (read-write) PLL_AUDIO_SS_REGISTER
     */
    inline void get_PLL_AUDIO_SS(uint16_t &STOP, bool &ENABLE,
                                 uint16_t &STEP) volatile
    {
        uint32_t curr = PLL_AUDIO_SS;

        STOP = (curr >> 16u) & 0b1111111111111111u;
        ENABLE = curr & (1u << 15u);
        STEP = (curr >> 0u) & 0b111111111111111u;
    }

    /**
     * Set all of PLL_AUDIO_SS's bit fields.
     *
     * (read-write) PLL_AUDIO_SS_REGISTER
     */
    inline void set_PLL_AUDIO_SS(uint16_t STOP, bool ENABLE,
                                 uint16_t STEP) volatile
    {
        uint32_t curr = PLL_AUDIO_SS;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STOP & 0b1111111111111111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (ENABLE & 0b1u) << 15u;
        curr &= ~(0b111111111111111u << 0u);
        curr |= (STEP & 0b111111111111111u) << 0u;

        PLL_AUDIO_SS = curr;
    }

    /**
     * Get PLL_AUDIO_DENOMINATOR's DENOM field.
     *
     * DENOM
     */
    inline uint32_t get_PLL_AUDIO_DENOMINATOR_DENOM() volatile
    {
        return (PLL_AUDIO_DENOMINATOR >> 0u) &
               0b111111111111111111111111111111u;
    }

    /**
     * Set PLL_AUDIO_DENOMINATOR's DENOM field.
     *
     * DENOM
     */
    inline void set_PLL_AUDIO_DENOMINATOR_DENOM(uint32_t value) volatile
    {
        uint32_t curr = PLL_AUDIO_DENOMINATOR;

        curr &= ~(0b111111111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111111111u) << 0u;

        PLL_AUDIO_DENOMINATOR = curr;
    }

    /**
     * Get PLL_AUDIO_NUMERATOR's NUM field.
     *
     * NUM
     */
    inline uint32_t get_PLL_AUDIO_NUMERATOR_NUM() volatile
    {
        return (PLL_AUDIO_NUMERATOR >> 0u) & 0b111111111111111111111111111111u;
    }

    /**
     * Set PLL_AUDIO_NUMERATOR's NUM field.
     *
     * NUM
     */
    inline void set_PLL_AUDIO_NUMERATOR_NUM(uint32_t value) volatile
    {
        uint32_t curr = PLL_AUDIO_NUMERATOR;

        curr &= ~(0b111111111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111111111u) << 0u;

        PLL_AUDIO_NUMERATOR = curr;
    }

    /**
     * Get PLL_AUDIO_DIV_SELECT's PLL_AUDIO_DIV_SELECT field.
     *
     * PLL_AUDIO_DIV_SELECT
     */
    inline uint8_t get_PLL_AUDIO_DIV_SELECT_PLL_AUDIO_DIV_SELECT() volatile
    {
        return (PLL_AUDIO_DIV_SELECT >> 0u) & 0b1111111u;
    }

    /**
     * Set PLL_AUDIO_DIV_SELECT's PLL_AUDIO_DIV_SELECT field.
     *
     * PLL_AUDIO_DIV_SELECT
     */
    inline void set_PLL_AUDIO_DIV_SELECT_PLL_AUDIO_DIV_SELECT(
        uint8_t value) volatile
    {
        uint32_t curr = PLL_AUDIO_DIV_SELECT;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        PLL_AUDIO_DIV_SELECT = curr;
    }

    /**
     * Get PLL_VIDEO_CTRL's PLL_VIDEO_CONTROL_MODE bit.
     *
     * pll_video_control_mode
     */
    inline bool get_PLL_VIDEO_CTRL_PLL_VIDEO_CONTROL_MODE() volatile
    {
        return PLL_VIDEO_CTRL & (1u << 31u);
    }

    /**
     * Set PLL_VIDEO_CTRL's PLL_VIDEO_CONTROL_MODE bit.
     *
     * pll_video_control_mode
     */
    inline void set_PLL_VIDEO_CTRL_PLL_VIDEO_CONTROL_MODE() volatile
    {
        PLL_VIDEO_CTRL |= 1u << 31u;
    }

    /**
     * Clear PLL_VIDEO_CTRL's PLL_VIDEO_CONTROL_MODE bit.
     *
     * pll_video_control_mode
     */
    inline void clear_PLL_VIDEO_CTRL_PLL_VIDEO_CONTROL_MODE() volatile
    {
        PLL_VIDEO_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle PLL_VIDEO_CTRL's PLL_VIDEO_CONTROL_MODE bit.
     *
     * pll_video_control_mode
     */
    inline void toggle_PLL_VIDEO_CTRL_PLL_VIDEO_CONTROL_MODE() volatile
    {
        PLL_VIDEO_CTRL ^= 1u << 31u;
    }

    /**
     * Get PLL_VIDEO_CTRL's PLL_VIDEO_AI_BUSY bit.
     *
     * pll_video_ai_busy
     */
    inline bool get_PLL_VIDEO_CTRL_PLL_VIDEO_AI_BUSY() volatile
    {
        return PLL_VIDEO_CTRL & (1u << 30u);
    }

    /**
     * Get PLL_VIDEO_CTRL's PLL_VIDEO_STABLE bit.
     *
     * PLL_VIDEO_STABLE
     */
    inline bool get_PLL_VIDEO_CTRL_PLL_VIDEO_STABLE() volatile
    {
        return PLL_VIDEO_CTRL & (1u << 29u);
    }

    /**
     * Get PLL_VIDEO_CTRL's PLL_VIDEO_COUNTER_CLR bit.
     *
     * pll_video_counter_clr
     */
    inline bool get_PLL_VIDEO_CTRL_PLL_VIDEO_COUNTER_CLR() volatile
    {
        return PLL_VIDEO_CTRL & (1u << 24u);
    }

    /**
     * Set PLL_VIDEO_CTRL's PLL_VIDEO_COUNTER_CLR bit.
     *
     * pll_video_counter_clr
     */
    inline void set_PLL_VIDEO_CTRL_PLL_VIDEO_COUNTER_CLR() volatile
    {
        PLL_VIDEO_CTRL |= 1u << 24u;
    }

    /**
     * Clear PLL_VIDEO_CTRL's PLL_VIDEO_COUNTER_CLR bit.
     *
     * pll_video_counter_clr
     */
    inline void clear_PLL_VIDEO_CTRL_PLL_VIDEO_COUNTER_CLR() volatile
    {
        PLL_VIDEO_CTRL &= ~(1u << 24u);
    }

    /**
     * Toggle PLL_VIDEO_CTRL's PLL_VIDEO_COUNTER_CLR bit.
     *
     * pll_video_counter_clr
     */
    inline void toggle_PLL_VIDEO_CTRL_PLL_VIDEO_COUNTER_CLR() volatile
    {
        PLL_VIDEO_CTRL ^= 1u << 24u;
    }

    /**
     * Get PLL_VIDEO_CTRL's PLL_VIDEO_GATE bit.
     *
     * PLL_VIDEO_GATE
     */
    inline bool get_PLL_VIDEO_CTRL_PLL_VIDEO_GATE() volatile
    {
        return PLL_VIDEO_CTRL & (1u << 14u);
    }

    /**
     * Set PLL_VIDEO_CTRL's PLL_VIDEO_GATE bit.
     *
     * PLL_VIDEO_GATE
     */
    inline void set_PLL_VIDEO_CTRL_PLL_VIDEO_GATE() volatile
    {
        PLL_VIDEO_CTRL |= 1u << 14u;
    }

    /**
     * Clear PLL_VIDEO_CTRL's PLL_VIDEO_GATE bit.
     *
     * PLL_VIDEO_GATE
     */
    inline void clear_PLL_VIDEO_CTRL_PLL_VIDEO_GATE() volatile
    {
        PLL_VIDEO_CTRL &= ~(1u << 14u);
    }

    /**
     * Toggle PLL_VIDEO_CTRL's PLL_VIDEO_GATE bit.
     *
     * PLL_VIDEO_GATE
     */
    inline void toggle_PLL_VIDEO_CTRL_PLL_VIDEO_GATE() volatile
    {
        PLL_VIDEO_CTRL ^= 1u << 14u;
    }

    /**
     * Get PLL_VIDEO_CTRL's ENABLE_CLK bit.
     *
     * ENABLE_CLK
     */
    inline bool get_PLL_VIDEO_CTRL_ENABLE_CLK() volatile
    {
        return PLL_VIDEO_CTRL & (1u << 13u);
    }

    /**
     * Set PLL_VIDEO_CTRL's ENABLE_CLK bit.
     *
     * ENABLE_CLK
     */
    inline void set_PLL_VIDEO_CTRL_ENABLE_CLK() volatile
    {
        PLL_VIDEO_CTRL |= 1u << 13u;
    }

    /**
     * Clear PLL_VIDEO_CTRL's ENABLE_CLK bit.
     *
     * ENABLE_CLK
     */
    inline void clear_PLL_VIDEO_CTRL_ENABLE_CLK() volatile
    {
        PLL_VIDEO_CTRL &= ~(1u << 13u);
    }

    /**
     * Toggle PLL_VIDEO_CTRL's ENABLE_CLK bit.
     *
     * ENABLE_CLK
     */
    inline void toggle_PLL_VIDEO_CTRL_ENABLE_CLK() volatile
    {
        PLL_VIDEO_CTRL ^= 1u << 13u;
    }

    /**
     * Get all of PLL_VIDEO_CTRL's bit fields.
     *
     * (read-write) PLL_VIDEO_CTRL_REGISTER
     */
    inline void get_PLL_VIDEO_CTRL(bool &PLL_VIDEO_CONTROL_MODE,
                                   bool &PLL_VIDEO_AI_BUSY,
                                   bool &PLL_VIDEO_STABLE,
                                   bool &PLL_VIDEO_COUNTER_CLR,
                                   bool &PLL_VIDEO_GATE,
                                   bool &ENABLE_CLK) volatile
    {
        uint32_t curr = PLL_VIDEO_CTRL;

        PLL_VIDEO_CONTROL_MODE = curr & (1u << 31u);
        PLL_VIDEO_AI_BUSY = curr & (1u << 30u);
        PLL_VIDEO_STABLE = curr & (1u << 29u);
        PLL_VIDEO_COUNTER_CLR = curr & (1u << 24u);
        PLL_VIDEO_GATE = curr & (1u << 14u);
        ENABLE_CLK = curr & (1u << 13u);
    }

    /**
     * Set all of PLL_VIDEO_CTRL's bit fields.
     *
     * (read-write) PLL_VIDEO_CTRL_REGISTER
     */
    inline void set_PLL_VIDEO_CTRL(bool PLL_VIDEO_CONTROL_MODE,
                                   bool PLL_VIDEO_COUNTER_CLR,
                                   bool PLL_VIDEO_GATE,
                                   bool ENABLE_CLK) volatile
    {
        uint32_t curr = PLL_VIDEO_CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (PLL_VIDEO_CONTROL_MODE & 0b1u) << 31u;
        curr &= ~(0b1u << 24u);
        curr |= (PLL_VIDEO_COUNTER_CLR & 0b1u) << 24u;
        curr &= ~(0b1u << 14u);
        curr |= (PLL_VIDEO_GATE & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (ENABLE_CLK & 0b1u) << 13u;

        PLL_VIDEO_CTRL = curr;
    }

    /**
     * Get PLL_VIDEO_SS's STOP field.
     *
     * STOP
     */
    inline uint16_t get_PLL_VIDEO_SS_STOP() volatile
    {
        return (PLL_VIDEO_SS >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set PLL_VIDEO_SS's STOP field.
     *
     * STOP
     */
    inline void set_PLL_VIDEO_SS_STOP(uint16_t value) volatile
    {
        uint32_t curr = PLL_VIDEO_SS;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        PLL_VIDEO_SS = curr;
    }

    /**
     * Get PLL_VIDEO_SS's ENABLE bit.
     *
     * ENABLE
     */
    inline bool get_PLL_VIDEO_SS_ENABLE() volatile
    {
        return PLL_VIDEO_SS & (1u << 15u);
    }

    /**
     * Set PLL_VIDEO_SS's ENABLE bit.
     *
     * ENABLE
     */
    inline void set_PLL_VIDEO_SS_ENABLE() volatile
    {
        PLL_VIDEO_SS |= 1u << 15u;
    }

    /**
     * Clear PLL_VIDEO_SS's ENABLE bit.
     *
     * ENABLE
     */
    inline void clear_PLL_VIDEO_SS_ENABLE() volatile
    {
        PLL_VIDEO_SS &= ~(1u << 15u);
    }

    /**
     * Toggle PLL_VIDEO_SS's ENABLE bit.
     *
     * ENABLE
     */
    inline void toggle_PLL_VIDEO_SS_ENABLE() volatile
    {
        PLL_VIDEO_SS ^= 1u << 15u;
    }

    /**
     * Get PLL_VIDEO_SS's STEP field.
     *
     * STEP
     */
    inline uint16_t get_PLL_VIDEO_SS_STEP() volatile
    {
        return (PLL_VIDEO_SS >> 0u) & 0b111111111111111u;
    }

    /**
     * Set PLL_VIDEO_SS's STEP field.
     *
     * STEP
     */
    inline void set_PLL_VIDEO_SS_STEP(uint16_t value) volatile
    {
        uint32_t curr = PLL_VIDEO_SS;

        curr &= ~(0b111111111111111u << 0u);
        curr |= (value & 0b111111111111111u) << 0u;

        PLL_VIDEO_SS = curr;
    }

    /**
     * Get all of PLL_VIDEO_SS's bit fields.
     *
     * (read-write) PLL_VIDEO_SS_REGISTER
     */
    inline void get_PLL_VIDEO_SS(uint16_t &STOP, bool &ENABLE,
                                 uint16_t &STEP) volatile
    {
        uint32_t curr = PLL_VIDEO_SS;

        STOP = (curr >> 16u) & 0b1111111111111111u;
        ENABLE = curr & (1u << 15u);
        STEP = (curr >> 0u) & 0b111111111111111u;
    }

    /**
     * Set all of PLL_VIDEO_SS's bit fields.
     *
     * (read-write) PLL_VIDEO_SS_REGISTER
     */
    inline void set_PLL_VIDEO_SS(uint16_t STOP, bool ENABLE,
                                 uint16_t STEP) volatile
    {
        uint32_t curr = PLL_VIDEO_SS;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (STOP & 0b1111111111111111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (ENABLE & 0b1u) << 15u;
        curr &= ~(0b111111111111111u << 0u);
        curr |= (STEP & 0b111111111111111u) << 0u;

        PLL_VIDEO_SS = curr;
    }

    /**
     * Get PLL_VIDEO_DENOMINATOR's DENOM field.
     *
     * DENOM
     */
    inline uint32_t get_PLL_VIDEO_DENOMINATOR_DENOM() volatile
    {
        return (PLL_VIDEO_DENOMINATOR >> 0u) &
               0b111111111111111111111111111111u;
    }

    /**
     * Set PLL_VIDEO_DENOMINATOR's DENOM field.
     *
     * DENOM
     */
    inline void set_PLL_VIDEO_DENOMINATOR_DENOM(uint32_t value) volatile
    {
        uint32_t curr = PLL_VIDEO_DENOMINATOR;

        curr &= ~(0b111111111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111111111u) << 0u;

        PLL_VIDEO_DENOMINATOR = curr;
    }

    /**
     * Get PLL_VIDEO_NUMERATOR's NUM field.
     *
     * NUM
     */
    inline uint32_t get_PLL_VIDEO_NUMERATOR_NUM() volatile
    {
        return (PLL_VIDEO_NUMERATOR >> 0u) & 0b111111111111111111111111111111u;
    }

    /**
     * Set PLL_VIDEO_NUMERATOR's NUM field.
     *
     * NUM
     */
    inline void set_PLL_VIDEO_NUMERATOR_NUM(uint32_t value) volatile
    {
        uint32_t curr = PLL_VIDEO_NUMERATOR;

        curr &= ~(0b111111111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111111111u) << 0u;

        PLL_VIDEO_NUMERATOR = curr;
    }

    /**
     * Get PLL_VIDEO_DIV_SELECT's DIV_SELECT field.
     *
     * DIV_SELECT
     */
    inline uint8_t get_PLL_VIDEO_DIV_SELECT_DIV_SELECT() volatile
    {
        return (PLL_VIDEO_DIV_SELECT >> 0u) & 0b1111111u;
    }

    /**
     * Set PLL_VIDEO_DIV_SELECT's DIV_SELECT field.
     *
     * DIV_SELECT
     */
    inline void set_PLL_VIDEO_DIV_SELECT_DIV_SELECT(uint8_t value) volatile
    {
        uint32_t curr = PLL_VIDEO_DIV_SELECT;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        PLL_VIDEO_DIV_SELECT = curr;
    }
};

static_assert(sizeof(anadig_pll) == anadig_pll::size);

static volatile anadig_pll *const ANADIG_PLL =
    reinterpret_cast<anadig_pll *>(0x40C84000);

}; // namespace MIMXRT1176::CM7
