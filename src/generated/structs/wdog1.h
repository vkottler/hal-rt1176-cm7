/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/WDOG1_WCR_WT.h"
#include "../enums/WDOG1_WICR_WICT.h"
#include "../enums/WDOG1_WSR_WSR.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * WDOG
 */
struct [[gnu::packed]] wdog1
{
    /* Constant attributes. */
    static constexpr std::size_t size = 10; /*!< wdog1's size in bytes. */

    /* Fields. */
    uint16_t WCR;  /*!< (read-write) Watchdog Control Register */
    uint16_t WSR;  /*!< (read-write) Watchdog Service Register */
    uint16_t WRSR; /*!< (read-write) Watchdog Reset Status Register */
    uint16_t WICR; /*!< (read-write) Watchdog Interrupt Control Register */
    uint16_t WMCR; /*!< (read-write) Watchdog Miscellaneous Control Register */

    /* Methods. */

    /**
     * Get WCR's WT field.
     *
     * WT
     */
    inline WDOG1_WCR_WT get_WCR_WT() volatile
    {
        return WDOG1_WCR_WT((WCR >> 8u) & 0b11111111u);
    }

    /**
     * Set WCR's WT field.
     *
     * WT
     */
    inline void set_WCR_WT(WDOG1_WCR_WT value) volatile
    {
        uint16_t curr = WCR;

        curr &= ~(0b11111111u << 8u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 8u;

        WCR = curr;
    }

    /**
     * Get WCR's WDW bit.
     *
     * WDW
     */
    inline bool get_WCR_WDW() volatile
    {
        return WCR & (1u << 7u);
    }

    /**
     * Set WCR's WDW bit.
     *
     * WDW
     */
    inline void set_WCR_WDW() volatile
    {
        WCR |= 1u << 7u;
    }

    /**
     * Clear WCR's WDW bit.
     *
     * WDW
     */
    inline void clear_WCR_WDW() volatile
    {
        WCR &= ~(1u << 7u);
    }

    /**
     * Toggle WCR's WDW bit.
     *
     * WDW
     */
    inline void toggle_WCR_WDW() volatile
    {
        WCR ^= 1u << 7u;
    }

    /**
     * Get WCR's SRE bit.
     *
     * Software Reset Extension, an optional way to generate software reset
     */
    inline bool get_WCR_SRE() volatile
    {
        return WCR & (1u << 6u);
    }

    /**
     * Set WCR's SRE bit.
     *
     * Software Reset Extension, an optional way to generate software reset
     */
    inline void set_WCR_SRE() volatile
    {
        WCR |= 1u << 6u;
    }

    /**
     * Clear WCR's SRE bit.
     *
     * Software Reset Extension, an optional way to generate software reset
     */
    inline void clear_WCR_SRE() volatile
    {
        WCR &= ~(1u << 6u);
    }

    /**
     * Toggle WCR's SRE bit.
     *
     * Software Reset Extension, an optional way to generate software reset
     */
    inline void toggle_WCR_SRE() volatile
    {
        WCR ^= 1u << 6u;
    }

    /**
     * Get WCR's WDA bit.
     *
     * WDA
     */
    inline bool get_WCR_WDA() volatile
    {
        return WCR & (1u << 5u);
    }

    /**
     * Set WCR's WDA bit.
     *
     * WDA
     */
    inline void set_WCR_WDA() volatile
    {
        WCR |= 1u << 5u;
    }

    /**
     * Clear WCR's WDA bit.
     *
     * WDA
     */
    inline void clear_WCR_WDA() volatile
    {
        WCR &= ~(1u << 5u);
    }

    /**
     * Toggle WCR's WDA bit.
     *
     * WDA
     */
    inline void toggle_WCR_WDA() volatile
    {
        WCR ^= 1u << 5u;
    }

    /**
     * Get WCR's SRS bit.
     *
     * SRS
     */
    inline bool get_WCR_SRS() volatile
    {
        return WCR & (1u << 4u);
    }

    /**
     * Set WCR's SRS bit.
     *
     * SRS
     */
    inline void set_WCR_SRS() volatile
    {
        WCR |= 1u << 4u;
    }

    /**
     * Clear WCR's SRS bit.
     *
     * SRS
     */
    inline void clear_WCR_SRS() volatile
    {
        WCR &= ~(1u << 4u);
    }

    /**
     * Toggle WCR's SRS bit.
     *
     * SRS
     */
    inline void toggle_WCR_SRS() volatile
    {
        WCR ^= 1u << 4u;
    }

    /**
     * Get WCR's WDT bit.
     *
     * WDT
     */
    inline bool get_WCR_WDT() volatile
    {
        return WCR & (1u << 3u);
    }

    /**
     * Set WCR's WDT bit.
     *
     * WDT
     */
    inline void set_WCR_WDT() volatile
    {
        WCR |= 1u << 3u;
    }

    /**
     * Clear WCR's WDT bit.
     *
     * WDT
     */
    inline void clear_WCR_WDT() volatile
    {
        WCR &= ~(1u << 3u);
    }

    /**
     * Toggle WCR's WDT bit.
     *
     * WDT
     */
    inline void toggle_WCR_WDT() volatile
    {
        WCR ^= 1u << 3u;
    }

    /**
     * Get WCR's WDE bit.
     *
     * WDE
     */
    inline bool get_WCR_WDE() volatile
    {
        return WCR & (1u << 2u);
    }

    /**
     * Set WCR's WDE bit.
     *
     * WDE
     */
    inline void set_WCR_WDE() volatile
    {
        WCR |= 1u << 2u;
    }

    /**
     * Clear WCR's WDE bit.
     *
     * WDE
     */
    inline void clear_WCR_WDE() volatile
    {
        WCR &= ~(1u << 2u);
    }

    /**
     * Toggle WCR's WDE bit.
     *
     * WDE
     */
    inline void toggle_WCR_WDE() volatile
    {
        WCR ^= 1u << 2u;
    }

    /**
     * Get WCR's WDBG bit.
     *
     * WDBG
     */
    inline bool get_WCR_WDBG() volatile
    {
        return WCR & (1u << 1u);
    }

    /**
     * Set WCR's WDBG bit.
     *
     * WDBG
     */
    inline void set_WCR_WDBG() volatile
    {
        WCR |= 1u << 1u;
    }

    /**
     * Clear WCR's WDBG bit.
     *
     * WDBG
     */
    inline void clear_WCR_WDBG() volatile
    {
        WCR &= ~(1u << 1u);
    }

    /**
     * Toggle WCR's WDBG bit.
     *
     * WDBG
     */
    inline void toggle_WCR_WDBG() volatile
    {
        WCR ^= 1u << 1u;
    }

    /**
     * Get WCR's WDZST bit.
     *
     * WDZST
     */
    inline bool get_WCR_WDZST() volatile
    {
        return WCR & (1u << 0u);
    }

    /**
     * Set WCR's WDZST bit.
     *
     * WDZST
     */
    inline void set_WCR_WDZST() volatile
    {
        WCR |= 1u << 0u;
    }

    /**
     * Clear WCR's WDZST bit.
     *
     * WDZST
     */
    inline void clear_WCR_WDZST() volatile
    {
        WCR &= ~(1u << 0u);
    }

    /**
     * Toggle WCR's WDZST bit.
     *
     * WDZST
     */
    inline void toggle_WCR_WDZST() volatile
    {
        WCR ^= 1u << 0u;
    }

    /**
     * Get all of WCR's bit fields.
     *
     * (read-write) Watchdog Control Register
     */
    inline void get_WCR(WDOG1_WCR_WT &WT, bool &WDW, bool &SRE, bool &WDA,
                        bool &SRS, bool &WDT, bool &WDE, bool &WDBG,
                        bool &WDZST) volatile
    {
        uint16_t curr = WCR;

        WT = WDOG1_WCR_WT((curr >> 8u) & 0b11111111u);
        WDW = curr & (1u << 7u);
        SRE = curr & (1u << 6u);
        WDA = curr & (1u << 5u);
        SRS = curr & (1u << 4u);
        WDT = curr & (1u << 3u);
        WDE = curr & (1u << 2u);
        WDBG = curr & (1u << 1u);
        WDZST = curr & (1u << 0u);
    }

    /**
     * Set all of WCR's bit fields.
     *
     * (read-write) Watchdog Control Register
     */
    inline void set_WCR(WDOG1_WCR_WT WT, bool WDW, bool SRE, bool WDA,
                        bool SRS, bool WDT, bool WDE, bool WDBG,
                        bool WDZST) volatile
    {
        uint16_t curr = WCR;

        curr &= ~(0b11111111u << 8u);
        curr |= (std::to_underlying(WT) & 0b11111111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (WDW & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (SRE & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (WDA & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (SRS & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (WDT & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (WDE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (WDBG & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (WDZST & 0b1u) << 0u;

        WCR = curr;
    }

    /**
     * Get WSR's WSR field.
     *
     * WSR
     */
    inline WDOG1_WSR_WSR get_WSR_WSR() volatile
    {
        return WDOG1_WSR_WSR((WSR >> 0u) & 0b1111111111111111u);
    }

    /**
     * Set WSR's WSR field.
     *
     * WSR
     */
    inline void set_WSR_WSR(WDOG1_WSR_WSR value) volatile
    {
        uint16_t curr = WSR;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111111111111111u) << 0u;

        WSR = curr;
    }

    /**
     * Get WRSR's POR bit.
     *
     * POR
     */
    inline bool get_WRSR_POR() volatile
    {
        return WRSR & (1u << 4u);
    }

    /**
     * Get WRSR's TOUT bit.
     *
     * TOUT
     */
    inline bool get_WRSR_TOUT() volatile
    {
        return WRSR & (1u << 1u);
    }

    /**
     * Get WRSR's SFTW bit.
     *
     * SFTW
     */
    inline bool get_WRSR_SFTW() volatile
    {
        return WRSR & (1u << 0u);
    }

    /**
     * Get all of WRSR's bit fields.
     *
     * (read-write) Watchdog Reset Status Register
     */
    inline void get_WRSR(bool &POR, bool &TOUT, bool &SFTW) volatile
    {
        uint16_t curr = WRSR;

        POR = curr & (1u << 4u);
        TOUT = curr & (1u << 1u);
        SFTW = curr & (1u << 0u);
    }

    /**
     * Get WICR's WIE bit.
     *
     * WIE
     */
    inline bool get_WICR_WIE() volatile
    {
        return WICR & (1u << 15u);
    }

    /**
     * Set WICR's WIE bit.
     *
     * WIE
     */
    inline void set_WICR_WIE() volatile
    {
        WICR |= 1u << 15u;
    }

    /**
     * Clear WICR's WIE bit.
     *
     * WIE
     */
    inline void clear_WICR_WIE() volatile
    {
        WICR &= ~(1u << 15u);
    }

    /**
     * Toggle WICR's WIE bit.
     *
     * WIE
     */
    inline void toggle_WICR_WIE() volatile
    {
        WICR ^= 1u << 15u;
    }

    /**
     * Get WICR's WTIS bit.
     *
     * WTIS
     */
    inline bool get_WICR_WTIS() volatile
    {
        return WICR & (1u << 14u);
    }

    /**
     * Set WICR's WTIS bit.
     *
     * WTIS
     */
    inline void set_WICR_WTIS() volatile
    {
        WICR |= 1u << 14u;
    }

    /**
     * Clear WICR's WTIS bit.
     *
     * WTIS
     */
    inline void clear_WICR_WTIS() volatile
    {
        WICR &= ~(1u << 14u);
    }

    /**
     * Toggle WICR's WTIS bit.
     *
     * WTIS
     */
    inline void toggle_WICR_WTIS() volatile
    {
        WICR ^= 1u << 14u;
    }

    /**
     * Get WICR's WICT field.
     *
     * WICT
     */
    inline WDOG1_WICR_WICT get_WICR_WICT() volatile
    {
        return WDOG1_WICR_WICT((WICR >> 0u) & 0b11111111u);
    }

    /**
     * Set WICR's WICT field.
     *
     * WICT
     */
    inline void set_WICR_WICT(WDOG1_WICR_WICT value) volatile
    {
        uint16_t curr = WICR;

        curr &= ~(0b11111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 0u;

        WICR = curr;
    }

    /**
     * Get all of WICR's bit fields.
     *
     * (read-write) Watchdog Interrupt Control Register
     */
    inline void get_WICR(bool &WIE, bool &WTIS, WDOG1_WICR_WICT &WICT) volatile
    {
        uint16_t curr = WICR;

        WIE = curr & (1u << 15u);
        WTIS = curr & (1u << 14u);
        WICT = WDOG1_WICR_WICT((curr >> 0u) & 0b11111111u);
    }

    /**
     * Set all of WICR's bit fields.
     *
     * (read-write) Watchdog Interrupt Control Register
     */
    inline void set_WICR(bool WIE, bool WTIS, WDOG1_WICR_WICT WICT) volatile
    {
        uint16_t curr = WICR;

        curr &= ~(0b1u << 15u);
        curr |= (WIE & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (WTIS & 0b1u) << 14u;
        curr &= ~(0b11111111u << 0u);
        curr |= (std::to_underlying(WICT) & 0b11111111u) << 0u;

        WICR = curr;
    }

    /**
     * Get WMCR's PDE bit.
     *
     * PDE
     */
    inline bool get_WMCR_PDE() volatile
    {
        return WMCR & (1u << 0u);
    }

    /**
     * Set WMCR's PDE bit.
     *
     * PDE
     */
    inline void set_WMCR_PDE() volatile
    {
        WMCR |= 1u << 0u;
    }

    /**
     * Clear WMCR's PDE bit.
     *
     * PDE
     */
    inline void clear_WMCR_PDE() volatile
    {
        WMCR &= ~(1u << 0u);
    }

    /**
     * Toggle WMCR's PDE bit.
     *
     * PDE
     */
    inline void toggle_WMCR_PDE() volatile
    {
        WMCR ^= 1u << 0u;
    }
};

static_assert(sizeof(wdog1) == wdog1::size);

static volatile wdog1 *const WDOG1 = reinterpret_cast<wdog1 *>(0x40030000);

static volatile wdog1 *const WDOG2 = reinterpret_cast<wdog1 *>(0x40034000);

}; // namespace MIMXRT1176::CM7
