/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/AOI1_BFCRT010_PT0_AC.h"
#include "../enums/AOI1_BFCRT010_PT0_BC.h"
#include "../enums/AOI1_BFCRT010_PT0_CC.h"
#include "../enums/AOI1_BFCRT010_PT0_DC.h"
#include "../enums/AOI1_BFCRT010_PT1_AC.h"
#include "../enums/AOI1_BFCRT010_PT1_BC.h"
#include "../enums/AOI1_BFCRT010_PT1_CC.h"
#include "../enums/AOI1_BFCRT010_PT1_DC.h"
#include "../enums/AOI1_BFCRT011_PT0_AC.h"
#include "../enums/AOI1_BFCRT011_PT0_BC.h"
#include "../enums/AOI1_BFCRT011_PT0_CC.h"
#include "../enums/AOI1_BFCRT011_PT0_DC.h"
#include "../enums/AOI1_BFCRT011_PT1_AC.h"
#include "../enums/AOI1_BFCRT011_PT1_BC.h"
#include "../enums/AOI1_BFCRT011_PT1_CC.h"
#include "../enums/AOI1_BFCRT011_PT1_DC.h"
#include "../enums/AOI1_BFCRT012_PT0_AC.h"
#include "../enums/AOI1_BFCRT012_PT0_BC.h"
#include "../enums/AOI1_BFCRT012_PT0_CC.h"
#include "../enums/AOI1_BFCRT012_PT0_DC.h"
#include "../enums/AOI1_BFCRT012_PT1_AC.h"
#include "../enums/AOI1_BFCRT012_PT1_BC.h"
#include "../enums/AOI1_BFCRT012_PT1_CC.h"
#include "../enums/AOI1_BFCRT012_PT1_DC.h"
#include "../enums/AOI1_BFCRT013_PT0_AC.h"
#include "../enums/AOI1_BFCRT013_PT0_BC.h"
#include "../enums/AOI1_BFCRT013_PT0_CC.h"
#include "../enums/AOI1_BFCRT013_PT0_DC.h"
#include "../enums/AOI1_BFCRT013_PT1_AC.h"
#include "../enums/AOI1_BFCRT013_PT1_BC.h"
#include "../enums/AOI1_BFCRT013_PT1_CC.h"
#include "../enums/AOI1_BFCRT013_PT1_DC.h"
#include "../enums/AOI1_BFCRT230_PT2_AC.h"
#include "../enums/AOI1_BFCRT230_PT2_BC.h"
#include "../enums/AOI1_BFCRT230_PT2_CC.h"
#include "../enums/AOI1_BFCRT230_PT2_DC.h"
#include "../enums/AOI1_BFCRT230_PT3_AC.h"
#include "../enums/AOI1_BFCRT230_PT3_BC.h"
#include "../enums/AOI1_BFCRT230_PT3_CC.h"
#include "../enums/AOI1_BFCRT230_PT3_DC.h"
#include "../enums/AOI1_BFCRT231_PT2_AC.h"
#include "../enums/AOI1_BFCRT231_PT2_BC.h"
#include "../enums/AOI1_BFCRT231_PT2_CC.h"
#include "../enums/AOI1_BFCRT231_PT2_DC.h"
#include "../enums/AOI1_BFCRT231_PT3_AC.h"
#include "../enums/AOI1_BFCRT231_PT3_BC.h"
#include "../enums/AOI1_BFCRT231_PT3_CC.h"
#include "../enums/AOI1_BFCRT231_PT3_DC.h"
#include "../enums/AOI1_BFCRT232_PT2_AC.h"
#include "../enums/AOI1_BFCRT232_PT2_BC.h"
#include "../enums/AOI1_BFCRT232_PT2_CC.h"
#include "../enums/AOI1_BFCRT232_PT2_DC.h"
#include "../enums/AOI1_BFCRT232_PT3_AC.h"
#include "../enums/AOI1_BFCRT232_PT3_BC.h"
#include "../enums/AOI1_BFCRT232_PT3_CC.h"
#include "../enums/AOI1_BFCRT232_PT3_DC.h"
#include "../enums/AOI1_BFCRT233_PT2_AC.h"
#include "../enums/AOI1_BFCRT233_PT2_BC.h"
#include "../enums/AOI1_BFCRT233_PT2_CC.h"
#include "../enums/AOI1_BFCRT233_PT2_DC.h"
#include "../enums/AOI1_BFCRT233_PT3_AC.h"
#include "../enums/AOI1_BFCRT233_PT3_BC.h"
#include "../enums/AOI1_BFCRT233_PT3_CC.h"
#include "../enums/AOI1_BFCRT233_PT3_DC.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * AOI
 */
struct [[gnu::packed]] aoi1
{
    /* Constant attributes. */
    static constexpr std::size_t size = 16; /*!< aoi1's size in bytes. */

    /* Fields. */
    uint16_t BFCRT010; /*!< (read-write) Boolean Function Term 0 and 1
                          Configuration Register for EVENTn */
    uint16_t BFCRT230; /*!< (read-write) Boolean Function Term 2 and 3
                          Configuration Register for EVENTn */
    uint16_t BFCRT011; /*!< (read-write) Boolean Function Term 0 and 1
                          Configuration Register for EVENTn */
    uint16_t BFCRT231; /*!< (read-write) Boolean Function Term 2 and 3
                          Configuration Register for EVENTn */
    uint16_t BFCRT012; /*!< (read-write) Boolean Function Term 0 and 1
                          Configuration Register for EVENTn */
    uint16_t BFCRT232; /*!< (read-write) Boolean Function Term 2 and 3
                          Configuration Register for EVENTn */
    uint16_t BFCRT013; /*!< (read-write) Boolean Function Term 0 and 1
                          Configuration Register for EVENTn */
    uint16_t BFCRT233; /*!< (read-write) Boolean Function Term 2 and 3
                          Configuration Register for EVENTn */

    /* Methods. */

    /**
     * Get BFCRT010's PT0_AC field.
     *
     * Product term 0, A input configuration
     */
    inline AOI1_BFCRT010_PT0_AC get_BFCRT010_PT0_AC() volatile
    {
        return AOI1_BFCRT010_PT0_AC((BFCRT010 >> 14u) & 0b11u);
    }

    /**
     * Set BFCRT010's PT0_AC field.
     *
     * Product term 0, A input configuration
     */
    inline void set_BFCRT010_PT0_AC(AOI1_BFCRT010_PT0_AC value) volatile
    {
        uint16_t curr = BFCRT010;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        BFCRT010 = curr;
    }

    /**
     * Get BFCRT010's PT0_BC field.
     *
     * Product term 0, B input configuration
     */
    inline AOI1_BFCRT010_PT0_BC get_BFCRT010_PT0_BC() volatile
    {
        return AOI1_BFCRT010_PT0_BC((BFCRT010 >> 12u) & 0b11u);
    }

    /**
     * Set BFCRT010's PT0_BC field.
     *
     * Product term 0, B input configuration
     */
    inline void set_BFCRT010_PT0_BC(AOI1_BFCRT010_PT0_BC value) volatile
    {
        uint16_t curr = BFCRT010;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        BFCRT010 = curr;
    }

    /**
     * Get BFCRT010's PT0_CC field.
     *
     * Product term 0, C input configuration
     */
    inline AOI1_BFCRT010_PT0_CC get_BFCRT010_PT0_CC() volatile
    {
        return AOI1_BFCRT010_PT0_CC((BFCRT010 >> 10u) & 0b11u);
    }

    /**
     * Set BFCRT010's PT0_CC field.
     *
     * Product term 0, C input configuration
     */
    inline void set_BFCRT010_PT0_CC(AOI1_BFCRT010_PT0_CC value) volatile
    {
        uint16_t curr = BFCRT010;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        BFCRT010 = curr;
    }

    /**
     * Get BFCRT010's PT0_DC field.
     *
     * Product term 0, D input configuration
     */
    inline AOI1_BFCRT010_PT0_DC get_BFCRT010_PT0_DC() volatile
    {
        return AOI1_BFCRT010_PT0_DC((BFCRT010 >> 8u) & 0b11u);
    }

    /**
     * Set BFCRT010's PT0_DC field.
     *
     * Product term 0, D input configuration
     */
    inline void set_BFCRT010_PT0_DC(AOI1_BFCRT010_PT0_DC value) volatile
    {
        uint16_t curr = BFCRT010;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        BFCRT010 = curr;
    }

    /**
     * Get BFCRT010's PT1_AC field.
     *
     * Product term 1, A input configuration
     */
    inline AOI1_BFCRT010_PT1_AC get_BFCRT010_PT1_AC() volatile
    {
        return AOI1_BFCRT010_PT1_AC((BFCRT010 >> 6u) & 0b11u);
    }

    /**
     * Set BFCRT010's PT1_AC field.
     *
     * Product term 1, A input configuration
     */
    inline void set_BFCRT010_PT1_AC(AOI1_BFCRT010_PT1_AC value) volatile
    {
        uint16_t curr = BFCRT010;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        BFCRT010 = curr;
    }

    /**
     * Get BFCRT010's PT1_BC field.
     *
     * Product term 1, B input configuration
     */
    inline AOI1_BFCRT010_PT1_BC get_BFCRT010_PT1_BC() volatile
    {
        return AOI1_BFCRT010_PT1_BC((BFCRT010 >> 4u) & 0b11u);
    }

    /**
     * Set BFCRT010's PT1_BC field.
     *
     * Product term 1, B input configuration
     */
    inline void set_BFCRT010_PT1_BC(AOI1_BFCRT010_PT1_BC value) volatile
    {
        uint16_t curr = BFCRT010;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        BFCRT010 = curr;
    }

    /**
     * Get BFCRT010's PT1_CC field.
     *
     * Product term 1, C input configuration
     */
    inline AOI1_BFCRT010_PT1_CC get_BFCRT010_PT1_CC() volatile
    {
        return AOI1_BFCRT010_PT1_CC((BFCRT010 >> 2u) & 0b11u);
    }

    /**
     * Set BFCRT010's PT1_CC field.
     *
     * Product term 1, C input configuration
     */
    inline void set_BFCRT010_PT1_CC(AOI1_BFCRT010_PT1_CC value) volatile
    {
        uint16_t curr = BFCRT010;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        BFCRT010 = curr;
    }

    /**
     * Get BFCRT010's PT1_DC field.
     *
     * Product term 1, D input configuration
     */
    inline AOI1_BFCRT010_PT1_DC get_BFCRT010_PT1_DC() volatile
    {
        return AOI1_BFCRT010_PT1_DC((BFCRT010 >> 0u) & 0b11u);
    }

    /**
     * Set BFCRT010's PT1_DC field.
     *
     * Product term 1, D input configuration
     */
    inline void set_BFCRT010_PT1_DC(AOI1_BFCRT010_PT1_DC value) volatile
    {
        uint16_t curr = BFCRT010;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        BFCRT010 = curr;
    }

    /**
     * Get all of BFCRT010's bit fields.
     *
     * (read-write) Boolean Function Term 0 and 1 Configuration Register for
     * EVENTn
     */
    inline void get_BFCRT010(
        AOI1_BFCRT010_PT0_AC &PT0_AC, AOI1_BFCRT010_PT0_BC &PT0_BC,
        AOI1_BFCRT010_PT0_CC &PT0_CC, AOI1_BFCRT010_PT0_DC &PT0_DC,
        AOI1_BFCRT010_PT1_AC &PT1_AC, AOI1_BFCRT010_PT1_BC &PT1_BC,
        AOI1_BFCRT010_PT1_CC &PT1_CC, AOI1_BFCRT010_PT1_DC &PT1_DC) volatile
    {
        uint16_t curr = BFCRT010;

        PT0_AC = AOI1_BFCRT010_PT0_AC((curr >> 14u) & 0b11u);
        PT0_BC = AOI1_BFCRT010_PT0_BC((curr >> 12u) & 0b11u);
        PT0_CC = AOI1_BFCRT010_PT0_CC((curr >> 10u) & 0b11u);
        PT0_DC = AOI1_BFCRT010_PT0_DC((curr >> 8u) & 0b11u);
        PT1_AC = AOI1_BFCRT010_PT1_AC((curr >> 6u) & 0b11u);
        PT1_BC = AOI1_BFCRT010_PT1_BC((curr >> 4u) & 0b11u);
        PT1_CC = AOI1_BFCRT010_PT1_CC((curr >> 2u) & 0b11u);
        PT1_DC = AOI1_BFCRT010_PT1_DC((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of BFCRT010's bit fields.
     *
     * (read-write) Boolean Function Term 0 and 1 Configuration Register for
     * EVENTn
     */
    inline void set_BFCRT010(
        AOI1_BFCRT010_PT0_AC PT0_AC, AOI1_BFCRT010_PT0_BC PT0_BC,
        AOI1_BFCRT010_PT0_CC PT0_CC, AOI1_BFCRT010_PT0_DC PT0_DC,
        AOI1_BFCRT010_PT1_AC PT1_AC, AOI1_BFCRT010_PT1_BC PT1_BC,
        AOI1_BFCRT010_PT1_CC PT1_CC, AOI1_BFCRT010_PT1_DC PT1_DC) volatile
    {
        uint16_t curr = BFCRT010;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(PT0_AC) & 0b11u) << 14u;
        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(PT0_BC) & 0b11u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(PT0_CC) & 0b11u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(PT0_DC) & 0b11u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(PT1_AC) & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(PT1_BC) & 0b11u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(PT1_CC) & 0b11u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(PT1_DC) & 0b11u) << 0u;

        BFCRT010 = curr;
    }

    /**
     * Get BFCRT230's PT2_AC field.
     *
     * Product term 2, A input configuration
     */
    inline AOI1_BFCRT230_PT2_AC get_BFCRT230_PT2_AC() volatile
    {
        return AOI1_BFCRT230_PT2_AC((BFCRT230 >> 14u) & 0b11u);
    }

    /**
     * Set BFCRT230's PT2_AC field.
     *
     * Product term 2, A input configuration
     */
    inline void set_BFCRT230_PT2_AC(AOI1_BFCRT230_PT2_AC value) volatile
    {
        uint16_t curr = BFCRT230;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        BFCRT230 = curr;
    }

    /**
     * Get BFCRT230's PT2_BC field.
     *
     * Product term 2, B input configuration
     */
    inline AOI1_BFCRT230_PT2_BC get_BFCRT230_PT2_BC() volatile
    {
        return AOI1_BFCRT230_PT2_BC((BFCRT230 >> 12u) & 0b11u);
    }

    /**
     * Set BFCRT230's PT2_BC field.
     *
     * Product term 2, B input configuration
     */
    inline void set_BFCRT230_PT2_BC(AOI1_BFCRT230_PT2_BC value) volatile
    {
        uint16_t curr = BFCRT230;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        BFCRT230 = curr;
    }

    /**
     * Get BFCRT230's PT2_CC field.
     *
     * Product term 2, C input configuration
     */
    inline AOI1_BFCRT230_PT2_CC get_BFCRT230_PT2_CC() volatile
    {
        return AOI1_BFCRT230_PT2_CC((BFCRT230 >> 10u) & 0b11u);
    }

    /**
     * Set BFCRT230's PT2_CC field.
     *
     * Product term 2, C input configuration
     */
    inline void set_BFCRT230_PT2_CC(AOI1_BFCRT230_PT2_CC value) volatile
    {
        uint16_t curr = BFCRT230;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        BFCRT230 = curr;
    }

    /**
     * Get BFCRT230's PT2_DC field.
     *
     * Product term 2, D input configuration
     */
    inline AOI1_BFCRT230_PT2_DC get_BFCRT230_PT2_DC() volatile
    {
        return AOI1_BFCRT230_PT2_DC((BFCRT230 >> 8u) & 0b11u);
    }

    /**
     * Set BFCRT230's PT2_DC field.
     *
     * Product term 2, D input configuration
     */
    inline void set_BFCRT230_PT2_DC(AOI1_BFCRT230_PT2_DC value) volatile
    {
        uint16_t curr = BFCRT230;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        BFCRT230 = curr;
    }

    /**
     * Get BFCRT230's PT3_AC field.
     *
     * Product term 3, A input configuration
     */
    inline AOI1_BFCRT230_PT3_AC get_BFCRT230_PT3_AC() volatile
    {
        return AOI1_BFCRT230_PT3_AC((BFCRT230 >> 6u) & 0b11u);
    }

    /**
     * Set BFCRT230's PT3_AC field.
     *
     * Product term 3, A input configuration
     */
    inline void set_BFCRT230_PT3_AC(AOI1_BFCRT230_PT3_AC value) volatile
    {
        uint16_t curr = BFCRT230;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        BFCRT230 = curr;
    }

    /**
     * Get BFCRT230's PT3_BC field.
     *
     * Product term 3, B input configuration
     */
    inline AOI1_BFCRT230_PT3_BC get_BFCRT230_PT3_BC() volatile
    {
        return AOI1_BFCRT230_PT3_BC((BFCRT230 >> 4u) & 0b11u);
    }

    /**
     * Set BFCRT230's PT3_BC field.
     *
     * Product term 3, B input configuration
     */
    inline void set_BFCRT230_PT3_BC(AOI1_BFCRT230_PT3_BC value) volatile
    {
        uint16_t curr = BFCRT230;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        BFCRT230 = curr;
    }

    /**
     * Get BFCRT230's PT3_CC field.
     *
     * Product term 3, C input configuration
     */
    inline AOI1_BFCRT230_PT3_CC get_BFCRT230_PT3_CC() volatile
    {
        return AOI1_BFCRT230_PT3_CC((BFCRT230 >> 2u) & 0b11u);
    }

    /**
     * Set BFCRT230's PT3_CC field.
     *
     * Product term 3, C input configuration
     */
    inline void set_BFCRT230_PT3_CC(AOI1_BFCRT230_PT3_CC value) volatile
    {
        uint16_t curr = BFCRT230;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        BFCRT230 = curr;
    }

    /**
     * Get BFCRT230's PT3_DC field.
     *
     * Product term 3, D input configuration
     */
    inline AOI1_BFCRT230_PT3_DC get_BFCRT230_PT3_DC() volatile
    {
        return AOI1_BFCRT230_PT3_DC((BFCRT230 >> 0u) & 0b11u);
    }

    /**
     * Set BFCRT230's PT3_DC field.
     *
     * Product term 3, D input configuration
     */
    inline void set_BFCRT230_PT3_DC(AOI1_BFCRT230_PT3_DC value) volatile
    {
        uint16_t curr = BFCRT230;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        BFCRT230 = curr;
    }

    /**
     * Get all of BFCRT230's bit fields.
     *
     * (read-write) Boolean Function Term 2 and 3 Configuration Register for
     * EVENTn
     */
    inline void get_BFCRT230(
        AOI1_BFCRT230_PT2_AC &PT2_AC, AOI1_BFCRT230_PT2_BC &PT2_BC,
        AOI1_BFCRT230_PT2_CC &PT2_CC, AOI1_BFCRT230_PT2_DC &PT2_DC,
        AOI1_BFCRT230_PT3_AC &PT3_AC, AOI1_BFCRT230_PT3_BC &PT3_BC,
        AOI1_BFCRT230_PT3_CC &PT3_CC, AOI1_BFCRT230_PT3_DC &PT3_DC) volatile
    {
        uint16_t curr = BFCRT230;

        PT2_AC = AOI1_BFCRT230_PT2_AC((curr >> 14u) & 0b11u);
        PT2_BC = AOI1_BFCRT230_PT2_BC((curr >> 12u) & 0b11u);
        PT2_CC = AOI1_BFCRT230_PT2_CC((curr >> 10u) & 0b11u);
        PT2_DC = AOI1_BFCRT230_PT2_DC((curr >> 8u) & 0b11u);
        PT3_AC = AOI1_BFCRT230_PT3_AC((curr >> 6u) & 0b11u);
        PT3_BC = AOI1_BFCRT230_PT3_BC((curr >> 4u) & 0b11u);
        PT3_CC = AOI1_BFCRT230_PT3_CC((curr >> 2u) & 0b11u);
        PT3_DC = AOI1_BFCRT230_PT3_DC((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of BFCRT230's bit fields.
     *
     * (read-write) Boolean Function Term 2 and 3 Configuration Register for
     * EVENTn
     */
    inline void set_BFCRT230(
        AOI1_BFCRT230_PT2_AC PT2_AC, AOI1_BFCRT230_PT2_BC PT2_BC,
        AOI1_BFCRT230_PT2_CC PT2_CC, AOI1_BFCRT230_PT2_DC PT2_DC,
        AOI1_BFCRT230_PT3_AC PT3_AC, AOI1_BFCRT230_PT3_BC PT3_BC,
        AOI1_BFCRT230_PT3_CC PT3_CC, AOI1_BFCRT230_PT3_DC PT3_DC) volatile
    {
        uint16_t curr = BFCRT230;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(PT2_AC) & 0b11u) << 14u;
        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(PT2_BC) & 0b11u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(PT2_CC) & 0b11u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(PT2_DC) & 0b11u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(PT3_AC) & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(PT3_BC) & 0b11u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(PT3_CC) & 0b11u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(PT3_DC) & 0b11u) << 0u;

        BFCRT230 = curr;
    }

    /**
     * Get BFCRT011's PT0_AC field.
     *
     * Product term 0, A input configuration
     */
    inline AOI1_BFCRT011_PT0_AC get_BFCRT011_PT0_AC() volatile
    {
        return AOI1_BFCRT011_PT0_AC((BFCRT011 >> 14u) & 0b11u);
    }

    /**
     * Set BFCRT011's PT0_AC field.
     *
     * Product term 0, A input configuration
     */
    inline void set_BFCRT011_PT0_AC(AOI1_BFCRT011_PT0_AC value) volatile
    {
        uint16_t curr = BFCRT011;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        BFCRT011 = curr;
    }

    /**
     * Get BFCRT011's PT0_BC field.
     *
     * Product term 0, B input configuration
     */
    inline AOI1_BFCRT011_PT0_BC get_BFCRT011_PT0_BC() volatile
    {
        return AOI1_BFCRT011_PT0_BC((BFCRT011 >> 12u) & 0b11u);
    }

    /**
     * Set BFCRT011's PT0_BC field.
     *
     * Product term 0, B input configuration
     */
    inline void set_BFCRT011_PT0_BC(AOI1_BFCRT011_PT0_BC value) volatile
    {
        uint16_t curr = BFCRT011;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        BFCRT011 = curr;
    }

    /**
     * Get BFCRT011's PT0_CC field.
     *
     * Product term 0, C input configuration
     */
    inline AOI1_BFCRT011_PT0_CC get_BFCRT011_PT0_CC() volatile
    {
        return AOI1_BFCRT011_PT0_CC((BFCRT011 >> 10u) & 0b11u);
    }

    /**
     * Set BFCRT011's PT0_CC field.
     *
     * Product term 0, C input configuration
     */
    inline void set_BFCRT011_PT0_CC(AOI1_BFCRT011_PT0_CC value) volatile
    {
        uint16_t curr = BFCRT011;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        BFCRT011 = curr;
    }

    /**
     * Get BFCRT011's PT0_DC field.
     *
     * Product term 0, D input configuration
     */
    inline AOI1_BFCRT011_PT0_DC get_BFCRT011_PT0_DC() volatile
    {
        return AOI1_BFCRT011_PT0_DC((BFCRT011 >> 8u) & 0b11u);
    }

    /**
     * Set BFCRT011's PT0_DC field.
     *
     * Product term 0, D input configuration
     */
    inline void set_BFCRT011_PT0_DC(AOI1_BFCRT011_PT0_DC value) volatile
    {
        uint16_t curr = BFCRT011;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        BFCRT011 = curr;
    }

    /**
     * Get BFCRT011's PT1_AC field.
     *
     * Product term 1, A input configuration
     */
    inline AOI1_BFCRT011_PT1_AC get_BFCRT011_PT1_AC() volatile
    {
        return AOI1_BFCRT011_PT1_AC((BFCRT011 >> 6u) & 0b11u);
    }

    /**
     * Set BFCRT011's PT1_AC field.
     *
     * Product term 1, A input configuration
     */
    inline void set_BFCRT011_PT1_AC(AOI1_BFCRT011_PT1_AC value) volatile
    {
        uint16_t curr = BFCRT011;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        BFCRT011 = curr;
    }

    /**
     * Get BFCRT011's PT1_BC field.
     *
     * Product term 1, B input configuration
     */
    inline AOI1_BFCRT011_PT1_BC get_BFCRT011_PT1_BC() volatile
    {
        return AOI1_BFCRT011_PT1_BC((BFCRT011 >> 4u) & 0b11u);
    }

    /**
     * Set BFCRT011's PT1_BC field.
     *
     * Product term 1, B input configuration
     */
    inline void set_BFCRT011_PT1_BC(AOI1_BFCRT011_PT1_BC value) volatile
    {
        uint16_t curr = BFCRT011;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        BFCRT011 = curr;
    }

    /**
     * Get BFCRT011's PT1_CC field.
     *
     * Product term 1, C input configuration
     */
    inline AOI1_BFCRT011_PT1_CC get_BFCRT011_PT1_CC() volatile
    {
        return AOI1_BFCRT011_PT1_CC((BFCRT011 >> 2u) & 0b11u);
    }

    /**
     * Set BFCRT011's PT1_CC field.
     *
     * Product term 1, C input configuration
     */
    inline void set_BFCRT011_PT1_CC(AOI1_BFCRT011_PT1_CC value) volatile
    {
        uint16_t curr = BFCRT011;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        BFCRT011 = curr;
    }

    /**
     * Get BFCRT011's PT1_DC field.
     *
     * Product term 1, D input configuration
     */
    inline AOI1_BFCRT011_PT1_DC get_BFCRT011_PT1_DC() volatile
    {
        return AOI1_BFCRT011_PT1_DC((BFCRT011 >> 0u) & 0b11u);
    }

    /**
     * Set BFCRT011's PT1_DC field.
     *
     * Product term 1, D input configuration
     */
    inline void set_BFCRT011_PT1_DC(AOI1_BFCRT011_PT1_DC value) volatile
    {
        uint16_t curr = BFCRT011;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        BFCRT011 = curr;
    }

    /**
     * Get all of BFCRT011's bit fields.
     *
     * (read-write) Boolean Function Term 0 and 1 Configuration Register for
     * EVENTn
     */
    inline void get_BFCRT011(
        AOI1_BFCRT011_PT0_AC &PT0_AC, AOI1_BFCRT011_PT0_BC &PT0_BC,
        AOI1_BFCRT011_PT0_CC &PT0_CC, AOI1_BFCRT011_PT0_DC &PT0_DC,
        AOI1_BFCRT011_PT1_AC &PT1_AC, AOI1_BFCRT011_PT1_BC &PT1_BC,
        AOI1_BFCRT011_PT1_CC &PT1_CC, AOI1_BFCRT011_PT1_DC &PT1_DC) volatile
    {
        uint16_t curr = BFCRT011;

        PT0_AC = AOI1_BFCRT011_PT0_AC((curr >> 14u) & 0b11u);
        PT0_BC = AOI1_BFCRT011_PT0_BC((curr >> 12u) & 0b11u);
        PT0_CC = AOI1_BFCRT011_PT0_CC((curr >> 10u) & 0b11u);
        PT0_DC = AOI1_BFCRT011_PT0_DC((curr >> 8u) & 0b11u);
        PT1_AC = AOI1_BFCRT011_PT1_AC((curr >> 6u) & 0b11u);
        PT1_BC = AOI1_BFCRT011_PT1_BC((curr >> 4u) & 0b11u);
        PT1_CC = AOI1_BFCRT011_PT1_CC((curr >> 2u) & 0b11u);
        PT1_DC = AOI1_BFCRT011_PT1_DC((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of BFCRT011's bit fields.
     *
     * (read-write) Boolean Function Term 0 and 1 Configuration Register for
     * EVENTn
     */
    inline void set_BFCRT011(
        AOI1_BFCRT011_PT0_AC PT0_AC, AOI1_BFCRT011_PT0_BC PT0_BC,
        AOI1_BFCRT011_PT0_CC PT0_CC, AOI1_BFCRT011_PT0_DC PT0_DC,
        AOI1_BFCRT011_PT1_AC PT1_AC, AOI1_BFCRT011_PT1_BC PT1_BC,
        AOI1_BFCRT011_PT1_CC PT1_CC, AOI1_BFCRT011_PT1_DC PT1_DC) volatile
    {
        uint16_t curr = BFCRT011;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(PT0_AC) & 0b11u) << 14u;
        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(PT0_BC) & 0b11u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(PT0_CC) & 0b11u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(PT0_DC) & 0b11u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(PT1_AC) & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(PT1_BC) & 0b11u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(PT1_CC) & 0b11u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(PT1_DC) & 0b11u) << 0u;

        BFCRT011 = curr;
    }

    /**
     * Get BFCRT231's PT2_AC field.
     *
     * Product term 2, A input configuration
     */
    inline AOI1_BFCRT231_PT2_AC get_BFCRT231_PT2_AC() volatile
    {
        return AOI1_BFCRT231_PT2_AC((BFCRT231 >> 14u) & 0b11u);
    }

    /**
     * Set BFCRT231's PT2_AC field.
     *
     * Product term 2, A input configuration
     */
    inline void set_BFCRT231_PT2_AC(AOI1_BFCRT231_PT2_AC value) volatile
    {
        uint16_t curr = BFCRT231;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        BFCRT231 = curr;
    }

    /**
     * Get BFCRT231's PT2_BC field.
     *
     * Product term 2, B input configuration
     */
    inline AOI1_BFCRT231_PT2_BC get_BFCRT231_PT2_BC() volatile
    {
        return AOI1_BFCRT231_PT2_BC((BFCRT231 >> 12u) & 0b11u);
    }

    /**
     * Set BFCRT231's PT2_BC field.
     *
     * Product term 2, B input configuration
     */
    inline void set_BFCRT231_PT2_BC(AOI1_BFCRT231_PT2_BC value) volatile
    {
        uint16_t curr = BFCRT231;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        BFCRT231 = curr;
    }

    /**
     * Get BFCRT231's PT2_CC field.
     *
     * Product term 2, C input configuration
     */
    inline AOI1_BFCRT231_PT2_CC get_BFCRT231_PT2_CC() volatile
    {
        return AOI1_BFCRT231_PT2_CC((BFCRT231 >> 10u) & 0b11u);
    }

    /**
     * Set BFCRT231's PT2_CC field.
     *
     * Product term 2, C input configuration
     */
    inline void set_BFCRT231_PT2_CC(AOI1_BFCRT231_PT2_CC value) volatile
    {
        uint16_t curr = BFCRT231;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        BFCRT231 = curr;
    }

    /**
     * Get BFCRT231's PT2_DC field.
     *
     * Product term 2, D input configuration
     */
    inline AOI1_BFCRT231_PT2_DC get_BFCRT231_PT2_DC() volatile
    {
        return AOI1_BFCRT231_PT2_DC((BFCRT231 >> 8u) & 0b11u);
    }

    /**
     * Set BFCRT231's PT2_DC field.
     *
     * Product term 2, D input configuration
     */
    inline void set_BFCRT231_PT2_DC(AOI1_BFCRT231_PT2_DC value) volatile
    {
        uint16_t curr = BFCRT231;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        BFCRT231 = curr;
    }

    /**
     * Get BFCRT231's PT3_AC field.
     *
     * Product term 3, A input configuration
     */
    inline AOI1_BFCRT231_PT3_AC get_BFCRT231_PT3_AC() volatile
    {
        return AOI1_BFCRT231_PT3_AC((BFCRT231 >> 6u) & 0b11u);
    }

    /**
     * Set BFCRT231's PT3_AC field.
     *
     * Product term 3, A input configuration
     */
    inline void set_BFCRT231_PT3_AC(AOI1_BFCRT231_PT3_AC value) volatile
    {
        uint16_t curr = BFCRT231;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        BFCRT231 = curr;
    }

    /**
     * Get BFCRT231's PT3_BC field.
     *
     * Product term 3, B input configuration
     */
    inline AOI1_BFCRT231_PT3_BC get_BFCRT231_PT3_BC() volatile
    {
        return AOI1_BFCRT231_PT3_BC((BFCRT231 >> 4u) & 0b11u);
    }

    /**
     * Set BFCRT231's PT3_BC field.
     *
     * Product term 3, B input configuration
     */
    inline void set_BFCRT231_PT3_BC(AOI1_BFCRT231_PT3_BC value) volatile
    {
        uint16_t curr = BFCRT231;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        BFCRT231 = curr;
    }

    /**
     * Get BFCRT231's PT3_CC field.
     *
     * Product term 3, C input configuration
     */
    inline AOI1_BFCRT231_PT3_CC get_BFCRT231_PT3_CC() volatile
    {
        return AOI1_BFCRT231_PT3_CC((BFCRT231 >> 2u) & 0b11u);
    }

    /**
     * Set BFCRT231's PT3_CC field.
     *
     * Product term 3, C input configuration
     */
    inline void set_BFCRT231_PT3_CC(AOI1_BFCRT231_PT3_CC value) volatile
    {
        uint16_t curr = BFCRT231;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        BFCRT231 = curr;
    }

    /**
     * Get BFCRT231's PT3_DC field.
     *
     * Product term 3, D input configuration
     */
    inline AOI1_BFCRT231_PT3_DC get_BFCRT231_PT3_DC() volatile
    {
        return AOI1_BFCRT231_PT3_DC((BFCRT231 >> 0u) & 0b11u);
    }

    /**
     * Set BFCRT231's PT3_DC field.
     *
     * Product term 3, D input configuration
     */
    inline void set_BFCRT231_PT3_DC(AOI1_BFCRT231_PT3_DC value) volatile
    {
        uint16_t curr = BFCRT231;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        BFCRT231 = curr;
    }

    /**
     * Get all of BFCRT231's bit fields.
     *
     * (read-write) Boolean Function Term 2 and 3 Configuration Register for
     * EVENTn
     */
    inline void get_BFCRT231(
        AOI1_BFCRT231_PT2_AC &PT2_AC, AOI1_BFCRT231_PT2_BC &PT2_BC,
        AOI1_BFCRT231_PT2_CC &PT2_CC, AOI1_BFCRT231_PT2_DC &PT2_DC,
        AOI1_BFCRT231_PT3_AC &PT3_AC, AOI1_BFCRT231_PT3_BC &PT3_BC,
        AOI1_BFCRT231_PT3_CC &PT3_CC, AOI1_BFCRT231_PT3_DC &PT3_DC) volatile
    {
        uint16_t curr = BFCRT231;

        PT2_AC = AOI1_BFCRT231_PT2_AC((curr >> 14u) & 0b11u);
        PT2_BC = AOI1_BFCRT231_PT2_BC((curr >> 12u) & 0b11u);
        PT2_CC = AOI1_BFCRT231_PT2_CC((curr >> 10u) & 0b11u);
        PT2_DC = AOI1_BFCRT231_PT2_DC((curr >> 8u) & 0b11u);
        PT3_AC = AOI1_BFCRT231_PT3_AC((curr >> 6u) & 0b11u);
        PT3_BC = AOI1_BFCRT231_PT3_BC((curr >> 4u) & 0b11u);
        PT3_CC = AOI1_BFCRT231_PT3_CC((curr >> 2u) & 0b11u);
        PT3_DC = AOI1_BFCRT231_PT3_DC((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of BFCRT231's bit fields.
     *
     * (read-write) Boolean Function Term 2 and 3 Configuration Register for
     * EVENTn
     */
    inline void set_BFCRT231(
        AOI1_BFCRT231_PT2_AC PT2_AC, AOI1_BFCRT231_PT2_BC PT2_BC,
        AOI1_BFCRT231_PT2_CC PT2_CC, AOI1_BFCRT231_PT2_DC PT2_DC,
        AOI1_BFCRT231_PT3_AC PT3_AC, AOI1_BFCRT231_PT3_BC PT3_BC,
        AOI1_BFCRT231_PT3_CC PT3_CC, AOI1_BFCRT231_PT3_DC PT3_DC) volatile
    {
        uint16_t curr = BFCRT231;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(PT2_AC) & 0b11u) << 14u;
        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(PT2_BC) & 0b11u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(PT2_CC) & 0b11u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(PT2_DC) & 0b11u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(PT3_AC) & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(PT3_BC) & 0b11u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(PT3_CC) & 0b11u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(PT3_DC) & 0b11u) << 0u;

        BFCRT231 = curr;
    }

    /**
     * Get BFCRT012's PT0_AC field.
     *
     * Product term 0, A input configuration
     */
    inline AOI1_BFCRT012_PT0_AC get_BFCRT012_PT0_AC() volatile
    {
        return AOI1_BFCRT012_PT0_AC((BFCRT012 >> 14u) & 0b11u);
    }

    /**
     * Set BFCRT012's PT0_AC field.
     *
     * Product term 0, A input configuration
     */
    inline void set_BFCRT012_PT0_AC(AOI1_BFCRT012_PT0_AC value) volatile
    {
        uint16_t curr = BFCRT012;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        BFCRT012 = curr;
    }

    /**
     * Get BFCRT012's PT0_BC field.
     *
     * Product term 0, B input configuration
     */
    inline AOI1_BFCRT012_PT0_BC get_BFCRT012_PT0_BC() volatile
    {
        return AOI1_BFCRT012_PT0_BC((BFCRT012 >> 12u) & 0b11u);
    }

    /**
     * Set BFCRT012's PT0_BC field.
     *
     * Product term 0, B input configuration
     */
    inline void set_BFCRT012_PT0_BC(AOI1_BFCRT012_PT0_BC value) volatile
    {
        uint16_t curr = BFCRT012;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        BFCRT012 = curr;
    }

    /**
     * Get BFCRT012's PT0_CC field.
     *
     * Product term 0, C input configuration
     */
    inline AOI1_BFCRT012_PT0_CC get_BFCRT012_PT0_CC() volatile
    {
        return AOI1_BFCRT012_PT0_CC((BFCRT012 >> 10u) & 0b11u);
    }

    /**
     * Set BFCRT012's PT0_CC field.
     *
     * Product term 0, C input configuration
     */
    inline void set_BFCRT012_PT0_CC(AOI1_BFCRT012_PT0_CC value) volatile
    {
        uint16_t curr = BFCRT012;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        BFCRT012 = curr;
    }

    /**
     * Get BFCRT012's PT0_DC field.
     *
     * Product term 0, D input configuration
     */
    inline AOI1_BFCRT012_PT0_DC get_BFCRT012_PT0_DC() volatile
    {
        return AOI1_BFCRT012_PT0_DC((BFCRT012 >> 8u) & 0b11u);
    }

    /**
     * Set BFCRT012's PT0_DC field.
     *
     * Product term 0, D input configuration
     */
    inline void set_BFCRT012_PT0_DC(AOI1_BFCRT012_PT0_DC value) volatile
    {
        uint16_t curr = BFCRT012;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        BFCRT012 = curr;
    }

    /**
     * Get BFCRT012's PT1_AC field.
     *
     * Product term 1, A input configuration
     */
    inline AOI1_BFCRT012_PT1_AC get_BFCRT012_PT1_AC() volatile
    {
        return AOI1_BFCRT012_PT1_AC((BFCRT012 >> 6u) & 0b11u);
    }

    /**
     * Set BFCRT012's PT1_AC field.
     *
     * Product term 1, A input configuration
     */
    inline void set_BFCRT012_PT1_AC(AOI1_BFCRT012_PT1_AC value) volatile
    {
        uint16_t curr = BFCRT012;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        BFCRT012 = curr;
    }

    /**
     * Get BFCRT012's PT1_BC field.
     *
     * Product term 1, B input configuration
     */
    inline AOI1_BFCRT012_PT1_BC get_BFCRT012_PT1_BC() volatile
    {
        return AOI1_BFCRT012_PT1_BC((BFCRT012 >> 4u) & 0b11u);
    }

    /**
     * Set BFCRT012's PT1_BC field.
     *
     * Product term 1, B input configuration
     */
    inline void set_BFCRT012_PT1_BC(AOI1_BFCRT012_PT1_BC value) volatile
    {
        uint16_t curr = BFCRT012;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        BFCRT012 = curr;
    }

    /**
     * Get BFCRT012's PT1_CC field.
     *
     * Product term 1, C input configuration
     */
    inline AOI1_BFCRT012_PT1_CC get_BFCRT012_PT1_CC() volatile
    {
        return AOI1_BFCRT012_PT1_CC((BFCRT012 >> 2u) & 0b11u);
    }

    /**
     * Set BFCRT012's PT1_CC field.
     *
     * Product term 1, C input configuration
     */
    inline void set_BFCRT012_PT1_CC(AOI1_BFCRT012_PT1_CC value) volatile
    {
        uint16_t curr = BFCRT012;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        BFCRT012 = curr;
    }

    /**
     * Get BFCRT012's PT1_DC field.
     *
     * Product term 1, D input configuration
     */
    inline AOI1_BFCRT012_PT1_DC get_BFCRT012_PT1_DC() volatile
    {
        return AOI1_BFCRT012_PT1_DC((BFCRT012 >> 0u) & 0b11u);
    }

    /**
     * Set BFCRT012's PT1_DC field.
     *
     * Product term 1, D input configuration
     */
    inline void set_BFCRT012_PT1_DC(AOI1_BFCRT012_PT1_DC value) volatile
    {
        uint16_t curr = BFCRT012;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        BFCRT012 = curr;
    }

    /**
     * Get all of BFCRT012's bit fields.
     *
     * (read-write) Boolean Function Term 0 and 1 Configuration Register for
     * EVENTn
     */
    inline void get_BFCRT012(
        AOI1_BFCRT012_PT0_AC &PT0_AC, AOI1_BFCRT012_PT0_BC &PT0_BC,
        AOI1_BFCRT012_PT0_CC &PT0_CC, AOI1_BFCRT012_PT0_DC &PT0_DC,
        AOI1_BFCRT012_PT1_AC &PT1_AC, AOI1_BFCRT012_PT1_BC &PT1_BC,
        AOI1_BFCRT012_PT1_CC &PT1_CC, AOI1_BFCRT012_PT1_DC &PT1_DC) volatile
    {
        uint16_t curr = BFCRT012;

        PT0_AC = AOI1_BFCRT012_PT0_AC((curr >> 14u) & 0b11u);
        PT0_BC = AOI1_BFCRT012_PT0_BC((curr >> 12u) & 0b11u);
        PT0_CC = AOI1_BFCRT012_PT0_CC((curr >> 10u) & 0b11u);
        PT0_DC = AOI1_BFCRT012_PT0_DC((curr >> 8u) & 0b11u);
        PT1_AC = AOI1_BFCRT012_PT1_AC((curr >> 6u) & 0b11u);
        PT1_BC = AOI1_BFCRT012_PT1_BC((curr >> 4u) & 0b11u);
        PT1_CC = AOI1_BFCRT012_PT1_CC((curr >> 2u) & 0b11u);
        PT1_DC = AOI1_BFCRT012_PT1_DC((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of BFCRT012's bit fields.
     *
     * (read-write) Boolean Function Term 0 and 1 Configuration Register for
     * EVENTn
     */
    inline void set_BFCRT012(
        AOI1_BFCRT012_PT0_AC PT0_AC, AOI1_BFCRT012_PT0_BC PT0_BC,
        AOI1_BFCRT012_PT0_CC PT0_CC, AOI1_BFCRT012_PT0_DC PT0_DC,
        AOI1_BFCRT012_PT1_AC PT1_AC, AOI1_BFCRT012_PT1_BC PT1_BC,
        AOI1_BFCRT012_PT1_CC PT1_CC, AOI1_BFCRT012_PT1_DC PT1_DC) volatile
    {
        uint16_t curr = BFCRT012;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(PT0_AC) & 0b11u) << 14u;
        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(PT0_BC) & 0b11u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(PT0_CC) & 0b11u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(PT0_DC) & 0b11u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(PT1_AC) & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(PT1_BC) & 0b11u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(PT1_CC) & 0b11u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(PT1_DC) & 0b11u) << 0u;

        BFCRT012 = curr;
    }

    /**
     * Get BFCRT232's PT2_AC field.
     *
     * Product term 2, A input configuration
     */
    inline AOI1_BFCRT232_PT2_AC get_BFCRT232_PT2_AC() volatile
    {
        return AOI1_BFCRT232_PT2_AC((BFCRT232 >> 14u) & 0b11u);
    }

    /**
     * Set BFCRT232's PT2_AC field.
     *
     * Product term 2, A input configuration
     */
    inline void set_BFCRT232_PT2_AC(AOI1_BFCRT232_PT2_AC value) volatile
    {
        uint16_t curr = BFCRT232;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        BFCRT232 = curr;
    }

    /**
     * Get BFCRT232's PT2_BC field.
     *
     * Product term 2, B input configuration
     */
    inline AOI1_BFCRT232_PT2_BC get_BFCRT232_PT2_BC() volatile
    {
        return AOI1_BFCRT232_PT2_BC((BFCRT232 >> 12u) & 0b11u);
    }

    /**
     * Set BFCRT232's PT2_BC field.
     *
     * Product term 2, B input configuration
     */
    inline void set_BFCRT232_PT2_BC(AOI1_BFCRT232_PT2_BC value) volatile
    {
        uint16_t curr = BFCRT232;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        BFCRT232 = curr;
    }

    /**
     * Get BFCRT232's PT2_CC field.
     *
     * Product term 2, C input configuration
     */
    inline AOI1_BFCRT232_PT2_CC get_BFCRT232_PT2_CC() volatile
    {
        return AOI1_BFCRT232_PT2_CC((BFCRT232 >> 10u) & 0b11u);
    }

    /**
     * Set BFCRT232's PT2_CC field.
     *
     * Product term 2, C input configuration
     */
    inline void set_BFCRT232_PT2_CC(AOI1_BFCRT232_PT2_CC value) volatile
    {
        uint16_t curr = BFCRT232;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        BFCRT232 = curr;
    }

    /**
     * Get BFCRT232's PT2_DC field.
     *
     * Product term 2, D input configuration
     */
    inline AOI1_BFCRT232_PT2_DC get_BFCRT232_PT2_DC() volatile
    {
        return AOI1_BFCRT232_PT2_DC((BFCRT232 >> 8u) & 0b11u);
    }

    /**
     * Set BFCRT232's PT2_DC field.
     *
     * Product term 2, D input configuration
     */
    inline void set_BFCRT232_PT2_DC(AOI1_BFCRT232_PT2_DC value) volatile
    {
        uint16_t curr = BFCRT232;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        BFCRT232 = curr;
    }

    /**
     * Get BFCRT232's PT3_AC field.
     *
     * Product term 3, A input configuration
     */
    inline AOI1_BFCRT232_PT3_AC get_BFCRT232_PT3_AC() volatile
    {
        return AOI1_BFCRT232_PT3_AC((BFCRT232 >> 6u) & 0b11u);
    }

    /**
     * Set BFCRT232's PT3_AC field.
     *
     * Product term 3, A input configuration
     */
    inline void set_BFCRT232_PT3_AC(AOI1_BFCRT232_PT3_AC value) volatile
    {
        uint16_t curr = BFCRT232;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        BFCRT232 = curr;
    }

    /**
     * Get BFCRT232's PT3_BC field.
     *
     * Product term 3, B input configuration
     */
    inline AOI1_BFCRT232_PT3_BC get_BFCRT232_PT3_BC() volatile
    {
        return AOI1_BFCRT232_PT3_BC((BFCRT232 >> 4u) & 0b11u);
    }

    /**
     * Set BFCRT232's PT3_BC field.
     *
     * Product term 3, B input configuration
     */
    inline void set_BFCRT232_PT3_BC(AOI1_BFCRT232_PT3_BC value) volatile
    {
        uint16_t curr = BFCRT232;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        BFCRT232 = curr;
    }

    /**
     * Get BFCRT232's PT3_CC field.
     *
     * Product term 3, C input configuration
     */
    inline AOI1_BFCRT232_PT3_CC get_BFCRT232_PT3_CC() volatile
    {
        return AOI1_BFCRT232_PT3_CC((BFCRT232 >> 2u) & 0b11u);
    }

    /**
     * Set BFCRT232's PT3_CC field.
     *
     * Product term 3, C input configuration
     */
    inline void set_BFCRT232_PT3_CC(AOI1_BFCRT232_PT3_CC value) volatile
    {
        uint16_t curr = BFCRT232;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        BFCRT232 = curr;
    }

    /**
     * Get BFCRT232's PT3_DC field.
     *
     * Product term 3, D input configuration
     */
    inline AOI1_BFCRT232_PT3_DC get_BFCRT232_PT3_DC() volatile
    {
        return AOI1_BFCRT232_PT3_DC((BFCRT232 >> 0u) & 0b11u);
    }

    /**
     * Set BFCRT232's PT3_DC field.
     *
     * Product term 3, D input configuration
     */
    inline void set_BFCRT232_PT3_DC(AOI1_BFCRT232_PT3_DC value) volatile
    {
        uint16_t curr = BFCRT232;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        BFCRT232 = curr;
    }

    /**
     * Get all of BFCRT232's bit fields.
     *
     * (read-write) Boolean Function Term 2 and 3 Configuration Register for
     * EVENTn
     */
    inline void get_BFCRT232(
        AOI1_BFCRT232_PT2_AC &PT2_AC, AOI1_BFCRT232_PT2_BC &PT2_BC,
        AOI1_BFCRT232_PT2_CC &PT2_CC, AOI1_BFCRT232_PT2_DC &PT2_DC,
        AOI1_BFCRT232_PT3_AC &PT3_AC, AOI1_BFCRT232_PT3_BC &PT3_BC,
        AOI1_BFCRT232_PT3_CC &PT3_CC, AOI1_BFCRT232_PT3_DC &PT3_DC) volatile
    {
        uint16_t curr = BFCRT232;

        PT2_AC = AOI1_BFCRT232_PT2_AC((curr >> 14u) & 0b11u);
        PT2_BC = AOI1_BFCRT232_PT2_BC((curr >> 12u) & 0b11u);
        PT2_CC = AOI1_BFCRT232_PT2_CC((curr >> 10u) & 0b11u);
        PT2_DC = AOI1_BFCRT232_PT2_DC((curr >> 8u) & 0b11u);
        PT3_AC = AOI1_BFCRT232_PT3_AC((curr >> 6u) & 0b11u);
        PT3_BC = AOI1_BFCRT232_PT3_BC((curr >> 4u) & 0b11u);
        PT3_CC = AOI1_BFCRT232_PT3_CC((curr >> 2u) & 0b11u);
        PT3_DC = AOI1_BFCRT232_PT3_DC((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of BFCRT232's bit fields.
     *
     * (read-write) Boolean Function Term 2 and 3 Configuration Register for
     * EVENTn
     */
    inline void set_BFCRT232(
        AOI1_BFCRT232_PT2_AC PT2_AC, AOI1_BFCRT232_PT2_BC PT2_BC,
        AOI1_BFCRT232_PT2_CC PT2_CC, AOI1_BFCRT232_PT2_DC PT2_DC,
        AOI1_BFCRT232_PT3_AC PT3_AC, AOI1_BFCRT232_PT3_BC PT3_BC,
        AOI1_BFCRT232_PT3_CC PT3_CC, AOI1_BFCRT232_PT3_DC PT3_DC) volatile
    {
        uint16_t curr = BFCRT232;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(PT2_AC) & 0b11u) << 14u;
        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(PT2_BC) & 0b11u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(PT2_CC) & 0b11u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(PT2_DC) & 0b11u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(PT3_AC) & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(PT3_BC) & 0b11u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(PT3_CC) & 0b11u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(PT3_DC) & 0b11u) << 0u;

        BFCRT232 = curr;
    }

    /**
     * Get BFCRT013's PT0_AC field.
     *
     * Product term 0, A input configuration
     */
    inline AOI1_BFCRT013_PT0_AC get_BFCRT013_PT0_AC() volatile
    {
        return AOI1_BFCRT013_PT0_AC((BFCRT013 >> 14u) & 0b11u);
    }

    /**
     * Set BFCRT013's PT0_AC field.
     *
     * Product term 0, A input configuration
     */
    inline void set_BFCRT013_PT0_AC(AOI1_BFCRT013_PT0_AC value) volatile
    {
        uint16_t curr = BFCRT013;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        BFCRT013 = curr;
    }

    /**
     * Get BFCRT013's PT0_BC field.
     *
     * Product term 0, B input configuration
     */
    inline AOI1_BFCRT013_PT0_BC get_BFCRT013_PT0_BC() volatile
    {
        return AOI1_BFCRT013_PT0_BC((BFCRT013 >> 12u) & 0b11u);
    }

    /**
     * Set BFCRT013's PT0_BC field.
     *
     * Product term 0, B input configuration
     */
    inline void set_BFCRT013_PT0_BC(AOI1_BFCRT013_PT0_BC value) volatile
    {
        uint16_t curr = BFCRT013;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        BFCRT013 = curr;
    }

    /**
     * Get BFCRT013's PT0_CC field.
     *
     * Product term 0, C input configuration
     */
    inline AOI1_BFCRT013_PT0_CC get_BFCRT013_PT0_CC() volatile
    {
        return AOI1_BFCRT013_PT0_CC((BFCRT013 >> 10u) & 0b11u);
    }

    /**
     * Set BFCRT013's PT0_CC field.
     *
     * Product term 0, C input configuration
     */
    inline void set_BFCRT013_PT0_CC(AOI1_BFCRT013_PT0_CC value) volatile
    {
        uint16_t curr = BFCRT013;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        BFCRT013 = curr;
    }

    /**
     * Get BFCRT013's PT0_DC field.
     *
     * Product term 0, D input configuration
     */
    inline AOI1_BFCRT013_PT0_DC get_BFCRT013_PT0_DC() volatile
    {
        return AOI1_BFCRT013_PT0_DC((BFCRT013 >> 8u) & 0b11u);
    }

    /**
     * Set BFCRT013's PT0_DC field.
     *
     * Product term 0, D input configuration
     */
    inline void set_BFCRT013_PT0_DC(AOI1_BFCRT013_PT0_DC value) volatile
    {
        uint16_t curr = BFCRT013;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        BFCRT013 = curr;
    }

    /**
     * Get BFCRT013's PT1_AC field.
     *
     * Product term 1, A input configuration
     */
    inline AOI1_BFCRT013_PT1_AC get_BFCRT013_PT1_AC() volatile
    {
        return AOI1_BFCRT013_PT1_AC((BFCRT013 >> 6u) & 0b11u);
    }

    /**
     * Set BFCRT013's PT1_AC field.
     *
     * Product term 1, A input configuration
     */
    inline void set_BFCRT013_PT1_AC(AOI1_BFCRT013_PT1_AC value) volatile
    {
        uint16_t curr = BFCRT013;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        BFCRT013 = curr;
    }

    /**
     * Get BFCRT013's PT1_BC field.
     *
     * Product term 1, B input configuration
     */
    inline AOI1_BFCRT013_PT1_BC get_BFCRT013_PT1_BC() volatile
    {
        return AOI1_BFCRT013_PT1_BC((BFCRT013 >> 4u) & 0b11u);
    }

    /**
     * Set BFCRT013's PT1_BC field.
     *
     * Product term 1, B input configuration
     */
    inline void set_BFCRT013_PT1_BC(AOI1_BFCRT013_PT1_BC value) volatile
    {
        uint16_t curr = BFCRT013;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        BFCRT013 = curr;
    }

    /**
     * Get BFCRT013's PT1_CC field.
     *
     * Product term 1, C input configuration
     */
    inline AOI1_BFCRT013_PT1_CC get_BFCRT013_PT1_CC() volatile
    {
        return AOI1_BFCRT013_PT1_CC((BFCRT013 >> 2u) & 0b11u);
    }

    /**
     * Set BFCRT013's PT1_CC field.
     *
     * Product term 1, C input configuration
     */
    inline void set_BFCRT013_PT1_CC(AOI1_BFCRT013_PT1_CC value) volatile
    {
        uint16_t curr = BFCRT013;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        BFCRT013 = curr;
    }

    /**
     * Get BFCRT013's PT1_DC field.
     *
     * Product term 1, D input configuration
     */
    inline AOI1_BFCRT013_PT1_DC get_BFCRT013_PT1_DC() volatile
    {
        return AOI1_BFCRT013_PT1_DC((BFCRT013 >> 0u) & 0b11u);
    }

    /**
     * Set BFCRT013's PT1_DC field.
     *
     * Product term 1, D input configuration
     */
    inline void set_BFCRT013_PT1_DC(AOI1_BFCRT013_PT1_DC value) volatile
    {
        uint16_t curr = BFCRT013;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        BFCRT013 = curr;
    }

    /**
     * Get all of BFCRT013's bit fields.
     *
     * (read-write) Boolean Function Term 0 and 1 Configuration Register for
     * EVENTn
     */
    inline void get_BFCRT013(
        AOI1_BFCRT013_PT0_AC &PT0_AC, AOI1_BFCRT013_PT0_BC &PT0_BC,
        AOI1_BFCRT013_PT0_CC &PT0_CC, AOI1_BFCRT013_PT0_DC &PT0_DC,
        AOI1_BFCRT013_PT1_AC &PT1_AC, AOI1_BFCRT013_PT1_BC &PT1_BC,
        AOI1_BFCRT013_PT1_CC &PT1_CC, AOI1_BFCRT013_PT1_DC &PT1_DC) volatile
    {
        uint16_t curr = BFCRT013;

        PT0_AC = AOI1_BFCRT013_PT0_AC((curr >> 14u) & 0b11u);
        PT0_BC = AOI1_BFCRT013_PT0_BC((curr >> 12u) & 0b11u);
        PT0_CC = AOI1_BFCRT013_PT0_CC((curr >> 10u) & 0b11u);
        PT0_DC = AOI1_BFCRT013_PT0_DC((curr >> 8u) & 0b11u);
        PT1_AC = AOI1_BFCRT013_PT1_AC((curr >> 6u) & 0b11u);
        PT1_BC = AOI1_BFCRT013_PT1_BC((curr >> 4u) & 0b11u);
        PT1_CC = AOI1_BFCRT013_PT1_CC((curr >> 2u) & 0b11u);
        PT1_DC = AOI1_BFCRT013_PT1_DC((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of BFCRT013's bit fields.
     *
     * (read-write) Boolean Function Term 0 and 1 Configuration Register for
     * EVENTn
     */
    inline void set_BFCRT013(
        AOI1_BFCRT013_PT0_AC PT0_AC, AOI1_BFCRT013_PT0_BC PT0_BC,
        AOI1_BFCRT013_PT0_CC PT0_CC, AOI1_BFCRT013_PT0_DC PT0_DC,
        AOI1_BFCRT013_PT1_AC PT1_AC, AOI1_BFCRT013_PT1_BC PT1_BC,
        AOI1_BFCRT013_PT1_CC PT1_CC, AOI1_BFCRT013_PT1_DC PT1_DC) volatile
    {
        uint16_t curr = BFCRT013;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(PT0_AC) & 0b11u) << 14u;
        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(PT0_BC) & 0b11u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(PT0_CC) & 0b11u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(PT0_DC) & 0b11u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(PT1_AC) & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(PT1_BC) & 0b11u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(PT1_CC) & 0b11u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(PT1_DC) & 0b11u) << 0u;

        BFCRT013 = curr;
    }

    /**
     * Get BFCRT233's PT2_AC field.
     *
     * Product term 2, A input configuration
     */
    inline AOI1_BFCRT233_PT2_AC get_BFCRT233_PT2_AC() volatile
    {
        return AOI1_BFCRT233_PT2_AC((BFCRT233 >> 14u) & 0b11u);
    }

    /**
     * Set BFCRT233's PT2_AC field.
     *
     * Product term 2, A input configuration
     */
    inline void set_BFCRT233_PT2_AC(AOI1_BFCRT233_PT2_AC value) volatile
    {
        uint16_t curr = BFCRT233;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        BFCRT233 = curr;
    }

    /**
     * Get BFCRT233's PT2_BC field.
     *
     * Product term 2, B input configuration
     */
    inline AOI1_BFCRT233_PT2_BC get_BFCRT233_PT2_BC() volatile
    {
        return AOI1_BFCRT233_PT2_BC((BFCRT233 >> 12u) & 0b11u);
    }

    /**
     * Set BFCRT233's PT2_BC field.
     *
     * Product term 2, B input configuration
     */
    inline void set_BFCRT233_PT2_BC(AOI1_BFCRT233_PT2_BC value) volatile
    {
        uint16_t curr = BFCRT233;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        BFCRT233 = curr;
    }

    /**
     * Get BFCRT233's PT2_CC field.
     *
     * Product term 2, C input configuration
     */
    inline AOI1_BFCRT233_PT2_CC get_BFCRT233_PT2_CC() volatile
    {
        return AOI1_BFCRT233_PT2_CC((BFCRT233 >> 10u) & 0b11u);
    }

    /**
     * Set BFCRT233's PT2_CC field.
     *
     * Product term 2, C input configuration
     */
    inline void set_BFCRT233_PT2_CC(AOI1_BFCRT233_PT2_CC value) volatile
    {
        uint16_t curr = BFCRT233;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        BFCRT233 = curr;
    }

    /**
     * Get BFCRT233's PT2_DC field.
     *
     * Product term 2, D input configuration
     */
    inline AOI1_BFCRT233_PT2_DC get_BFCRT233_PT2_DC() volatile
    {
        return AOI1_BFCRT233_PT2_DC((BFCRT233 >> 8u) & 0b11u);
    }

    /**
     * Set BFCRT233's PT2_DC field.
     *
     * Product term 2, D input configuration
     */
    inline void set_BFCRT233_PT2_DC(AOI1_BFCRT233_PT2_DC value) volatile
    {
        uint16_t curr = BFCRT233;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        BFCRT233 = curr;
    }

    /**
     * Get BFCRT233's PT3_AC field.
     *
     * Product term 3, A input configuration
     */
    inline AOI1_BFCRT233_PT3_AC get_BFCRT233_PT3_AC() volatile
    {
        return AOI1_BFCRT233_PT3_AC((BFCRT233 >> 6u) & 0b11u);
    }

    /**
     * Set BFCRT233's PT3_AC field.
     *
     * Product term 3, A input configuration
     */
    inline void set_BFCRT233_PT3_AC(AOI1_BFCRT233_PT3_AC value) volatile
    {
        uint16_t curr = BFCRT233;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        BFCRT233 = curr;
    }

    /**
     * Get BFCRT233's PT3_BC field.
     *
     * Product term 3, B input configuration
     */
    inline AOI1_BFCRT233_PT3_BC get_BFCRT233_PT3_BC() volatile
    {
        return AOI1_BFCRT233_PT3_BC((BFCRT233 >> 4u) & 0b11u);
    }

    /**
     * Set BFCRT233's PT3_BC field.
     *
     * Product term 3, B input configuration
     */
    inline void set_BFCRT233_PT3_BC(AOI1_BFCRT233_PT3_BC value) volatile
    {
        uint16_t curr = BFCRT233;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        BFCRT233 = curr;
    }

    /**
     * Get BFCRT233's PT3_CC field.
     *
     * Product term 3, C input configuration
     */
    inline AOI1_BFCRT233_PT3_CC get_BFCRT233_PT3_CC() volatile
    {
        return AOI1_BFCRT233_PT3_CC((BFCRT233 >> 2u) & 0b11u);
    }

    /**
     * Set BFCRT233's PT3_CC field.
     *
     * Product term 3, C input configuration
     */
    inline void set_BFCRT233_PT3_CC(AOI1_BFCRT233_PT3_CC value) volatile
    {
        uint16_t curr = BFCRT233;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        BFCRT233 = curr;
    }

    /**
     * Get BFCRT233's PT3_DC field.
     *
     * Product term 3, D input configuration
     */
    inline AOI1_BFCRT233_PT3_DC get_BFCRT233_PT3_DC() volatile
    {
        return AOI1_BFCRT233_PT3_DC((BFCRT233 >> 0u) & 0b11u);
    }

    /**
     * Set BFCRT233's PT3_DC field.
     *
     * Product term 3, D input configuration
     */
    inline void set_BFCRT233_PT3_DC(AOI1_BFCRT233_PT3_DC value) volatile
    {
        uint16_t curr = BFCRT233;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        BFCRT233 = curr;
    }

    /**
     * Get all of BFCRT233's bit fields.
     *
     * (read-write) Boolean Function Term 2 and 3 Configuration Register for
     * EVENTn
     */
    inline void get_BFCRT233(
        AOI1_BFCRT233_PT2_AC &PT2_AC, AOI1_BFCRT233_PT2_BC &PT2_BC,
        AOI1_BFCRT233_PT2_CC &PT2_CC, AOI1_BFCRT233_PT2_DC &PT2_DC,
        AOI1_BFCRT233_PT3_AC &PT3_AC, AOI1_BFCRT233_PT3_BC &PT3_BC,
        AOI1_BFCRT233_PT3_CC &PT3_CC, AOI1_BFCRT233_PT3_DC &PT3_DC) volatile
    {
        uint16_t curr = BFCRT233;

        PT2_AC = AOI1_BFCRT233_PT2_AC((curr >> 14u) & 0b11u);
        PT2_BC = AOI1_BFCRT233_PT2_BC((curr >> 12u) & 0b11u);
        PT2_CC = AOI1_BFCRT233_PT2_CC((curr >> 10u) & 0b11u);
        PT2_DC = AOI1_BFCRT233_PT2_DC((curr >> 8u) & 0b11u);
        PT3_AC = AOI1_BFCRT233_PT3_AC((curr >> 6u) & 0b11u);
        PT3_BC = AOI1_BFCRT233_PT3_BC((curr >> 4u) & 0b11u);
        PT3_CC = AOI1_BFCRT233_PT3_CC((curr >> 2u) & 0b11u);
        PT3_DC = AOI1_BFCRT233_PT3_DC((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of BFCRT233's bit fields.
     *
     * (read-write) Boolean Function Term 2 and 3 Configuration Register for
     * EVENTn
     */
    inline void set_BFCRT233(
        AOI1_BFCRT233_PT2_AC PT2_AC, AOI1_BFCRT233_PT2_BC PT2_BC,
        AOI1_BFCRT233_PT2_CC PT2_CC, AOI1_BFCRT233_PT2_DC PT2_DC,
        AOI1_BFCRT233_PT3_AC PT3_AC, AOI1_BFCRT233_PT3_BC PT3_BC,
        AOI1_BFCRT233_PT3_CC PT3_CC, AOI1_BFCRT233_PT3_DC PT3_DC) volatile
    {
        uint16_t curr = BFCRT233;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(PT2_AC) & 0b11u) << 14u;
        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(PT2_BC) & 0b11u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(PT2_CC) & 0b11u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(PT2_DC) & 0b11u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(PT3_AC) & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(PT3_BC) & 0b11u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(PT3_CC) & 0b11u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(PT3_DC) & 0b11u) << 0u;

        BFCRT233 = curr;
    }
};

static_assert(sizeof(aoi1) == aoi1::size);

static volatile aoi1 *const AOI1 = reinterpret_cast<aoi1 *>(0x400B8000);

static volatile aoi1 *const AOI2 = reinterpret_cast<aoi1 *>(0x400BC000);

}; // namespace MIMXRT1176::CM7
