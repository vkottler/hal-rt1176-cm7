/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/CCM_GPR_SHARED_AUTHEN_WHITE_LIST.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * General Purpose Registers
 */
struct [[gnu::packed]] GPR_SHARED_instance
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        32; /*!< GPR_SHARED_instance's size in bytes. */

    /* Fields. */
    uint32_t GPR_SHARED;        /*!< (read-write) General Purpose Register */
    uint32_t GPR_SHARED_SET;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_SHARED_CLR;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_SHARED_TOG;    /*!< (read-write) General Purpose Register */
    uint32_t GPR_SHARED_AUTHEN; /*!< (read-write) GPR access control */
    uint32_t GPR_SHARED_AUTHEN_SET; /*!< (read-write) GPR access control */
    uint32_t GPR_SHARED_AUTHEN_CLR; /*!< (read-write) GPR access control */
    uint32_t GPR_SHARED_AUTHEN_TOG; /*!< (read-write) GPR access control */

    /* Methods. */

    /**
     * Get GPR_SHARED's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_SHARED_GPR()
    {
        return (GPR_SHARED >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_SHARED's GPR field.
     *
     * GP register
     */
    inline void set_GPR_SHARED_GPR(uint32_t value)
    {
        uint32_t curr = GPR_SHARED;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_SHARED = curr;
    }

    /**
     * Get GPR_SHARED_SET's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_SHARED_SET_GPR()
    {
        return (GPR_SHARED_SET >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_SHARED_SET's GPR field.
     *
     * GP register
     */
    inline void set_GPR_SHARED_SET_GPR(uint32_t value)
    {
        uint32_t curr = GPR_SHARED_SET;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_SHARED_SET = curr;
    }

    /**
     * Get GPR_SHARED_CLR's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_SHARED_CLR_GPR()
    {
        return (GPR_SHARED_CLR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_SHARED_CLR's GPR field.
     *
     * GP register
     */
    inline void set_GPR_SHARED_CLR_GPR(uint32_t value)
    {
        uint32_t curr = GPR_SHARED_CLR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_SHARED_CLR = curr;
    }

    /**
     * Get GPR_SHARED_TOG's GPR field.
     *
     * GP register
     */
    inline uint32_t get_GPR_SHARED_TOG_GPR()
    {
        return (GPR_SHARED_TOG >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR_SHARED_TOG's GPR field.
     *
     * GP register
     */
    inline void set_GPR_SHARED_TOG_GPR(uint32_t value)
    {
        uint32_t curr = GPR_SHARED_TOG;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR_SHARED_TOG = curr;
    }

    /**
     * Get GPR_SHARED_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_SHARED_AUTHEN_LOCK_MODE()
    {
        return GPR_SHARED_AUTHEN & (1u << 20u);
    }

    /**
     * Set GPR_SHARED_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_SHARED_AUTHEN_LOCK_MODE()
    {
        GPR_SHARED_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_SHARED_AUTHEN_LOCK_MODE()
    {
        GPR_SHARED_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_SHARED_AUTHEN_LOCK_MODE()
    {
        GPR_SHARED_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get GPR_SHARED_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_GPR_SHARED_AUTHEN_DOMAIN_MODE()
    {
        return GPR_SHARED_AUTHEN & (1u << 16u);
    }

    /**
     * Set GPR_SHARED_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_GPR_SHARED_AUTHEN_DOMAIN_MODE()
    {
        GPR_SHARED_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_GPR_SHARED_AUTHEN_DOMAIN_MODE()
    {
        GPR_SHARED_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_GPR_SHARED_AUTHEN_DOMAIN_MODE()
    {
        GPR_SHARED_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get GPR_SHARED_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_SHARED_AUTHEN_LOCK_LIST()
    {
        return GPR_SHARED_AUTHEN & (1u << 12u);
    }

    /**
     * Set GPR_SHARED_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_SHARED_AUTHEN_LOCK_LIST()
    {
        GPR_SHARED_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_SHARED_AUTHEN_LOCK_LIST()
    {
        GPR_SHARED_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_SHARED_AUTHEN_LOCK_LIST()
    {
        GPR_SHARED_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get GPR_SHARED_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline CCM_GPR_SHARED_AUTHEN_WHITE_LIST get_GPR_SHARED_AUTHEN_WHITE_LIST()
    {
        return CCM_GPR_SHARED_AUTHEN_WHITE_LIST((GPR_SHARED_AUTHEN >> 8u) &
                                                0b1111u);
    }

    /**
     * Set GPR_SHARED_AUTHEN's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_SHARED_AUTHEN_WHITE_LIST(
        CCM_GPR_SHARED_AUTHEN_WHITE_LIST value)
    {
        uint32_t curr = GPR_SHARED_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(value) & 0b1111u) << 8u;

        GPR_SHARED_AUTHEN = curr;
    }

    /**
     * Get GPR_SHARED_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_SHARED_AUTHEN_LOCK_TZ()
    {
        return GPR_SHARED_AUTHEN & (1u << 4u);
    }

    /**
     * Set GPR_SHARED_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_SHARED_AUTHEN_LOCK_TZ()
    {
        GPR_SHARED_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_SHARED_AUTHEN_LOCK_TZ()
    {
        GPR_SHARED_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_SHARED_AUTHEN_LOCK_TZ()
    {
        GPR_SHARED_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get GPR_SHARED_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_SHARED_AUTHEN_TZ_NS()
    {
        return GPR_SHARED_AUTHEN & (1u << 1u);
    }

    /**
     * Set GPR_SHARED_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_SHARED_AUTHEN_TZ_NS()
    {
        GPR_SHARED_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_SHARED_AUTHEN_TZ_NS()
    {
        GPR_SHARED_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_SHARED_AUTHEN_TZ_NS()
    {
        GPR_SHARED_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get GPR_SHARED_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_SHARED_AUTHEN_TZ_USER()
    {
        return GPR_SHARED_AUTHEN & (1u << 0u);
    }

    /**
     * Set GPR_SHARED_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_SHARED_AUTHEN_TZ_USER()
    {
        GPR_SHARED_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_SHARED_AUTHEN_TZ_USER()
    {
        GPR_SHARED_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_SHARED_AUTHEN_TZ_USER()
    {
        GPR_SHARED_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of GPR_SHARED_AUTHEN's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_SHARED_AUTHEN(
        bool &LOCK_MODE, bool &DOMAIN_MODE, bool &LOCK_LIST,
        CCM_GPR_SHARED_AUTHEN_WHITE_LIST &WHITE_LIST, bool &LOCK_TZ,
        bool &TZ_NS, bool &TZ_USER)
    {
        uint32_t curr = GPR_SHARED_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = CCM_GPR_SHARED_AUTHEN_WHITE_LIST((curr >> 8u) & 0b1111u);
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_SHARED_AUTHEN's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_SHARED_AUTHEN(
        bool LOCK_MODE, bool DOMAIN_MODE, bool LOCK_LIST,
        CCM_GPR_SHARED_AUTHEN_WHITE_LIST WHITE_LIST, bool LOCK_TZ, bool TZ_NS,
        bool TZ_USER)
    {
        uint32_t curr = GPR_SHARED_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(WHITE_LIST) & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_SHARED_AUTHEN = curr;
    }

    /**
     * Get GPR_SHARED_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_SHARED_AUTHEN_SET_LOCK_MODE()
    {
        return GPR_SHARED_AUTHEN_SET & (1u << 20u);
    }

    /**
     * Set GPR_SHARED_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_SHARED_AUTHEN_SET_LOCK_MODE()
    {
        GPR_SHARED_AUTHEN_SET |= 1u << 20u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_SHARED_AUTHEN_SET_LOCK_MODE()
    {
        GPR_SHARED_AUTHEN_SET &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_SHARED_AUTHEN_SET_LOCK_MODE()
    {
        GPR_SHARED_AUTHEN_SET ^= 1u << 20u;
    }

    /**
     * Get GPR_SHARED_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_GPR_SHARED_AUTHEN_SET_DOMAIN_MODE()
    {
        return GPR_SHARED_AUTHEN_SET & (1u << 16u);
    }

    /**
     * Set GPR_SHARED_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_GPR_SHARED_AUTHEN_SET_DOMAIN_MODE()
    {
        GPR_SHARED_AUTHEN_SET |= 1u << 16u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_GPR_SHARED_AUTHEN_SET_DOMAIN_MODE()
    {
        GPR_SHARED_AUTHEN_SET &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_GPR_SHARED_AUTHEN_SET_DOMAIN_MODE()
    {
        GPR_SHARED_AUTHEN_SET ^= 1u << 16u;
    }

    /**
     * Get GPR_SHARED_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_SHARED_AUTHEN_SET_LOCK_LIST()
    {
        return GPR_SHARED_AUTHEN_SET & (1u << 12u);
    }

    /**
     * Set GPR_SHARED_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_SHARED_AUTHEN_SET_LOCK_LIST()
    {
        GPR_SHARED_AUTHEN_SET |= 1u << 12u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_SHARED_AUTHEN_SET_LOCK_LIST()
    {
        GPR_SHARED_AUTHEN_SET &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_SHARED_AUTHEN_SET_LOCK_LIST()
    {
        GPR_SHARED_AUTHEN_SET ^= 1u << 12u;
    }

    /**
     * Get GPR_SHARED_AUTHEN_SET's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_SHARED_AUTHEN_SET_WHITE_LIST()
    {
        return (GPR_SHARED_AUTHEN_SET >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_SHARED_AUTHEN_SET's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_SHARED_AUTHEN_SET_WHITE_LIST(uint8_t value)
    {
        uint32_t curr = GPR_SHARED_AUTHEN_SET;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_SHARED_AUTHEN_SET = curr;
    }

    /**
     * Get GPR_SHARED_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_SHARED_AUTHEN_SET_LOCK_TZ()
    {
        return GPR_SHARED_AUTHEN_SET & (1u << 4u);
    }

    /**
     * Set GPR_SHARED_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_SHARED_AUTHEN_SET_LOCK_TZ()
    {
        GPR_SHARED_AUTHEN_SET |= 1u << 4u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_SHARED_AUTHEN_SET_LOCK_TZ()
    {
        GPR_SHARED_AUTHEN_SET &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_SHARED_AUTHEN_SET_LOCK_TZ()
    {
        GPR_SHARED_AUTHEN_SET ^= 1u << 4u;
    }

    /**
     * Get GPR_SHARED_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_SHARED_AUTHEN_SET_TZ_NS()
    {
        return GPR_SHARED_AUTHEN_SET & (1u << 1u);
    }

    /**
     * Set GPR_SHARED_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_SHARED_AUTHEN_SET_TZ_NS()
    {
        GPR_SHARED_AUTHEN_SET |= 1u << 1u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_SHARED_AUTHEN_SET_TZ_NS()
    {
        GPR_SHARED_AUTHEN_SET &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_SHARED_AUTHEN_SET_TZ_NS()
    {
        GPR_SHARED_AUTHEN_SET ^= 1u << 1u;
    }

    /**
     * Get GPR_SHARED_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_SHARED_AUTHEN_SET_TZ_USER()
    {
        return GPR_SHARED_AUTHEN_SET & (1u << 0u);
    }

    /**
     * Set GPR_SHARED_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_SHARED_AUTHEN_SET_TZ_USER()
    {
        GPR_SHARED_AUTHEN_SET |= 1u << 0u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_SHARED_AUTHEN_SET_TZ_USER()
    {
        GPR_SHARED_AUTHEN_SET &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_SHARED_AUTHEN_SET_TZ_USER()
    {
        GPR_SHARED_AUTHEN_SET ^= 1u << 0u;
    }

    /**
     * Get all of GPR_SHARED_AUTHEN_SET's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_SHARED_AUTHEN_SET(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                          bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                          bool &LOCK_TZ, bool &TZ_NS,
                                          bool &TZ_USER)
    {
        uint32_t curr = GPR_SHARED_AUTHEN_SET;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_SHARED_AUTHEN_SET's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_SHARED_AUTHEN_SET(bool LOCK_MODE, bool DOMAIN_MODE,
                                          bool LOCK_LIST, uint8_t WHITE_LIST,
                                          bool LOCK_TZ, bool TZ_NS,
                                          bool TZ_USER)
    {
        uint32_t curr = GPR_SHARED_AUTHEN_SET;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_SHARED_AUTHEN_SET = curr;
    }

    /**
     * Get GPR_SHARED_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_SHARED_AUTHEN_CLR_LOCK_MODE()
    {
        return GPR_SHARED_AUTHEN_CLR & (1u << 20u);
    }

    /**
     * Set GPR_SHARED_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_SHARED_AUTHEN_CLR_LOCK_MODE()
    {
        GPR_SHARED_AUTHEN_CLR |= 1u << 20u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_SHARED_AUTHEN_CLR_LOCK_MODE()
    {
        GPR_SHARED_AUTHEN_CLR &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_SHARED_AUTHEN_CLR_LOCK_MODE()
    {
        GPR_SHARED_AUTHEN_CLR ^= 1u << 20u;
    }

    /**
     * Get GPR_SHARED_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_GPR_SHARED_AUTHEN_CLR_DOMAIN_MODE()
    {
        return GPR_SHARED_AUTHEN_CLR & (1u << 16u);
    }

    /**
     * Set GPR_SHARED_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_GPR_SHARED_AUTHEN_CLR_DOMAIN_MODE()
    {
        GPR_SHARED_AUTHEN_CLR |= 1u << 16u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_GPR_SHARED_AUTHEN_CLR_DOMAIN_MODE()
    {
        GPR_SHARED_AUTHEN_CLR &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_GPR_SHARED_AUTHEN_CLR_DOMAIN_MODE()
    {
        GPR_SHARED_AUTHEN_CLR ^= 1u << 16u;
    }

    /**
     * Get GPR_SHARED_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_SHARED_AUTHEN_CLR_LOCK_LIST()
    {
        return GPR_SHARED_AUTHEN_CLR & (1u << 12u);
    }

    /**
     * Set GPR_SHARED_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_SHARED_AUTHEN_CLR_LOCK_LIST()
    {
        GPR_SHARED_AUTHEN_CLR |= 1u << 12u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_SHARED_AUTHEN_CLR_LOCK_LIST()
    {
        GPR_SHARED_AUTHEN_CLR &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_SHARED_AUTHEN_CLR_LOCK_LIST()
    {
        GPR_SHARED_AUTHEN_CLR ^= 1u << 12u;
    }

    /**
     * Get GPR_SHARED_AUTHEN_CLR's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_SHARED_AUTHEN_CLR_WHITE_LIST()
    {
        return (GPR_SHARED_AUTHEN_CLR >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_SHARED_AUTHEN_CLR's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_SHARED_AUTHEN_CLR_WHITE_LIST(uint8_t value)
    {
        uint32_t curr = GPR_SHARED_AUTHEN_CLR;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_SHARED_AUTHEN_CLR = curr;
    }

    /**
     * Get GPR_SHARED_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_SHARED_AUTHEN_CLR_LOCK_TZ()
    {
        return GPR_SHARED_AUTHEN_CLR & (1u << 4u);
    }

    /**
     * Set GPR_SHARED_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_SHARED_AUTHEN_CLR_LOCK_TZ()
    {
        GPR_SHARED_AUTHEN_CLR |= 1u << 4u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_SHARED_AUTHEN_CLR_LOCK_TZ()
    {
        GPR_SHARED_AUTHEN_CLR &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_SHARED_AUTHEN_CLR_LOCK_TZ()
    {
        GPR_SHARED_AUTHEN_CLR ^= 1u << 4u;
    }

    /**
     * Get GPR_SHARED_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_SHARED_AUTHEN_CLR_TZ_NS()
    {
        return GPR_SHARED_AUTHEN_CLR & (1u << 1u);
    }

    /**
     * Set GPR_SHARED_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_SHARED_AUTHEN_CLR_TZ_NS()
    {
        GPR_SHARED_AUTHEN_CLR |= 1u << 1u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_SHARED_AUTHEN_CLR_TZ_NS()
    {
        GPR_SHARED_AUTHEN_CLR &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_SHARED_AUTHEN_CLR_TZ_NS()
    {
        GPR_SHARED_AUTHEN_CLR ^= 1u << 1u;
    }

    /**
     * Get GPR_SHARED_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_SHARED_AUTHEN_CLR_TZ_USER()
    {
        return GPR_SHARED_AUTHEN_CLR & (1u << 0u);
    }

    /**
     * Set GPR_SHARED_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_SHARED_AUTHEN_CLR_TZ_USER()
    {
        GPR_SHARED_AUTHEN_CLR |= 1u << 0u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_SHARED_AUTHEN_CLR_TZ_USER()
    {
        GPR_SHARED_AUTHEN_CLR &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_SHARED_AUTHEN_CLR_TZ_USER()
    {
        GPR_SHARED_AUTHEN_CLR ^= 1u << 0u;
    }

    /**
     * Get all of GPR_SHARED_AUTHEN_CLR's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_SHARED_AUTHEN_CLR(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                          bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                          bool &LOCK_TZ, bool &TZ_NS,
                                          bool &TZ_USER)
    {
        uint32_t curr = GPR_SHARED_AUTHEN_CLR;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_SHARED_AUTHEN_CLR's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_SHARED_AUTHEN_CLR(bool LOCK_MODE, bool DOMAIN_MODE,
                                          bool LOCK_LIST, uint8_t WHITE_LIST,
                                          bool LOCK_TZ, bool TZ_NS,
                                          bool TZ_USER)
    {
        uint32_t curr = GPR_SHARED_AUTHEN_CLR;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_SHARED_AUTHEN_CLR = curr;
    }

    /**
     * Get GPR_SHARED_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_GPR_SHARED_AUTHEN_TOG_LOCK_MODE()
    {
        return GPR_SHARED_AUTHEN_TOG & (1u << 20u);
    }

    /**
     * Set GPR_SHARED_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_GPR_SHARED_AUTHEN_TOG_LOCK_MODE()
    {
        GPR_SHARED_AUTHEN_TOG |= 1u << 20u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_GPR_SHARED_AUTHEN_TOG_LOCK_MODE()
    {
        GPR_SHARED_AUTHEN_TOG &= ~(1u << 20u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_GPR_SHARED_AUTHEN_TOG_LOCK_MODE()
    {
        GPR_SHARED_AUTHEN_TOG ^= 1u << 20u;
    }

    /**
     * Get GPR_SHARED_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_GPR_SHARED_AUTHEN_TOG_DOMAIN_MODE()
    {
        return GPR_SHARED_AUTHEN_TOG & (1u << 16u);
    }

    /**
     * Set GPR_SHARED_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_GPR_SHARED_AUTHEN_TOG_DOMAIN_MODE()
    {
        GPR_SHARED_AUTHEN_TOG |= 1u << 16u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_GPR_SHARED_AUTHEN_TOG_DOMAIN_MODE()
    {
        GPR_SHARED_AUTHEN_TOG &= ~(1u << 16u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_GPR_SHARED_AUTHEN_TOG_DOMAIN_MODE()
    {
        GPR_SHARED_AUTHEN_TOG ^= 1u << 16u;
    }

    /**
     * Get GPR_SHARED_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline bool get_GPR_SHARED_AUTHEN_TOG_LOCK_LIST()
    {
        return GPR_SHARED_AUTHEN_TOG & (1u << 12u);
    }

    /**
     * Set GPR_SHARED_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void set_GPR_SHARED_AUTHEN_TOG_LOCK_LIST()
    {
        GPR_SHARED_AUTHEN_TOG |= 1u << 12u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void clear_GPR_SHARED_AUTHEN_TOG_LOCK_LIST()
    {
        GPR_SHARED_AUTHEN_TOG &= ~(1u << 12u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock Whitelist
     */
    inline void toggle_GPR_SHARED_AUTHEN_TOG_LOCK_LIST()
    {
        GPR_SHARED_AUTHEN_TOG ^= 1u << 12u;
    }

    /**
     * Get GPR_SHARED_AUTHEN_TOG's WHITE_LIST field.
     *
     * Whitelist
     */
    inline uint8_t get_GPR_SHARED_AUTHEN_TOG_WHITE_LIST()
    {
        return (GPR_SHARED_AUTHEN_TOG >> 8u) & 0b1111u;
    }

    /**
     * Set GPR_SHARED_AUTHEN_TOG's WHITE_LIST field.
     *
     * Whitelist
     */
    inline void set_GPR_SHARED_AUTHEN_TOG_WHITE_LIST(uint8_t value)
    {
        uint32_t curr = GPR_SHARED_AUTHEN_TOG;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        GPR_SHARED_AUTHEN_TOG = curr;
    }

    /**
     * Get GPR_SHARED_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_GPR_SHARED_AUTHEN_TOG_LOCK_TZ()
    {
        return GPR_SHARED_AUTHEN_TOG & (1u << 4u);
    }

    /**
     * Set GPR_SHARED_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_GPR_SHARED_AUTHEN_TOG_LOCK_TZ()
    {
        GPR_SHARED_AUTHEN_TOG |= 1u << 4u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_GPR_SHARED_AUTHEN_TOG_LOCK_TZ()
    {
        GPR_SHARED_AUTHEN_TOG &= ~(1u << 4u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_GPR_SHARED_AUTHEN_TOG_LOCK_TZ()
    {
        GPR_SHARED_AUTHEN_TOG ^= 1u << 4u;
    }

    /**
     * Get GPR_SHARED_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_GPR_SHARED_AUTHEN_TOG_TZ_NS()
    {
        return GPR_SHARED_AUTHEN_TOG & (1u << 1u);
    }

    /**
     * Set GPR_SHARED_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_GPR_SHARED_AUTHEN_TOG_TZ_NS()
    {
        GPR_SHARED_AUTHEN_TOG |= 1u << 1u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_GPR_SHARED_AUTHEN_TOG_TZ_NS()
    {
        GPR_SHARED_AUTHEN_TOG &= ~(1u << 1u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_GPR_SHARED_AUTHEN_TOG_TZ_NS()
    {
        GPR_SHARED_AUTHEN_TOG ^= 1u << 1u;
    }

    /**
     * Get GPR_SHARED_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline bool get_GPR_SHARED_AUTHEN_TOG_TZ_USER()
    {
        return GPR_SHARED_AUTHEN_TOG & (1u << 0u);
    }

    /**
     * Set GPR_SHARED_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void set_GPR_SHARED_AUTHEN_TOG_TZ_USER()
    {
        GPR_SHARED_AUTHEN_TOG |= 1u << 0u;
    }

    /**
     * Clear GPR_SHARED_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void clear_GPR_SHARED_AUTHEN_TOG_TZ_USER()
    {
        GPR_SHARED_AUTHEN_TOG &= ~(1u << 0u);
    }

    /**
     * Toggle GPR_SHARED_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_GPR_SHARED_AUTHEN_TOG_TZ_USER()
    {
        GPR_SHARED_AUTHEN_TOG ^= 1u << 0u;
    }

    /**
     * Get all of GPR_SHARED_AUTHEN_TOG's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void get_GPR_SHARED_AUTHEN_TOG(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                          bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                          bool &LOCK_TZ, bool &TZ_NS,
                                          bool &TZ_USER)
    {
        uint32_t curr = GPR_SHARED_AUTHEN_TOG;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of GPR_SHARED_AUTHEN_TOG's bit fields.
     *
     * (read-write) GPR access control
     */
    inline void set_GPR_SHARED_AUTHEN_TOG(bool LOCK_MODE, bool DOMAIN_MODE,
                                          bool LOCK_LIST, uint8_t WHITE_LIST,
                                          bool LOCK_TZ, bool TZ_NS,
                                          bool TZ_USER)
    {
        uint32_t curr = GPR_SHARED_AUTHEN_TOG;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        GPR_SHARED_AUTHEN_TOG = curr;
    }
};

static_assert(sizeof(GPR_SHARED_instance) == GPR_SHARED_instance::size);

}; // namespace MIMXRT1176::CM7
