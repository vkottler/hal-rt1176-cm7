/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/XBARA1_CTRL0_EDGE0.h"
#include "../enums/XBARA1_CTRL0_EDGE1.h"
#include "../enums/XBARA1_CTRL1_EDGE2.h"
#include "../enums/XBARA1_CTRL1_EDGE3.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * Crossbar Switch
 */
struct [[gnu::packed]] xbara1
{
    /* Constant attributes. */
    static constexpr std::size_t size = 180; /*!< xbara1's size in bytes. */

    /* Fields. */
    uint16_t SEL0;  /*!< (read-write) Crossbar A Select Register 0 */
    uint16_t SEL1;  /*!< (read-write) Crossbar A Select Register 1 */
    uint16_t SEL2;  /*!< (read-write) Crossbar A Select Register 2 */
    uint16_t SEL3;  /*!< (read-write) Crossbar A Select Register 3 */
    uint16_t SEL4;  /*!< (read-write) Crossbar A Select Register 4 */
    uint16_t SEL5;  /*!< (read-write) Crossbar A Select Register 5 */
    uint16_t SEL6;  /*!< (read-write) Crossbar A Select Register 6 */
    uint16_t SEL7;  /*!< (read-write) Crossbar A Select Register 7 */
    uint16_t SEL8;  /*!< (read-write) Crossbar A Select Register 8 */
    uint16_t SEL9;  /*!< (read-write) Crossbar A Select Register 9 */
    uint16_t SEL10; /*!< (read-write) Crossbar A Select Register 10 */
    uint16_t SEL11; /*!< (read-write) Crossbar A Select Register 11 */
    uint16_t SEL12; /*!< (read-write) Crossbar A Select Register 12 */
    uint16_t SEL13; /*!< (read-write) Crossbar A Select Register 13 */
    uint16_t SEL14; /*!< (read-write) Crossbar A Select Register 14 */
    uint16_t SEL15; /*!< (read-write) Crossbar A Select Register 15 */
    uint16_t SEL16; /*!< (read-write) Crossbar A Select Register 16 */
    uint16_t SEL17; /*!< (read-write) Crossbar A Select Register 17 */
    uint16_t SEL18; /*!< (read-write) Crossbar A Select Register 18 */
    uint16_t SEL19; /*!< (read-write) Crossbar A Select Register 19 */
    uint16_t SEL20; /*!< (read-write) Crossbar A Select Register 20 */
    uint16_t SEL21; /*!< (read-write) Crossbar A Select Register 21 */
    uint16_t SEL22; /*!< (read-write) Crossbar A Select Register 22 */
    uint16_t SEL23; /*!< (read-write) Crossbar A Select Register 23 */
    uint16_t SEL24; /*!< (read-write) Crossbar A Select Register 24 */
    uint16_t SEL25; /*!< (read-write) Crossbar A Select Register 25 */
    uint16_t SEL26; /*!< (read-write) Crossbar A Select Register 26 */
    uint16_t SEL27; /*!< (read-write) Crossbar A Select Register 27 */
    uint16_t SEL28; /*!< (read-write) Crossbar A Select Register 28 */
    uint16_t SEL29; /*!< (read-write) Crossbar A Select Register 29 */
    uint16_t SEL30; /*!< (read-write) Crossbar A Select Register 30 */
    uint16_t SEL31; /*!< (read-write) Crossbar A Select Register 31 */
    uint16_t SEL32; /*!< (read-write) Crossbar A Select Register 32 */
    uint16_t SEL33; /*!< (read-write) Crossbar A Select Register 33 */
    uint16_t SEL34; /*!< (read-write) Crossbar A Select Register 34 */
    uint16_t SEL35; /*!< (read-write) Crossbar A Select Register 35 */
    uint16_t SEL36; /*!< (read-write) Crossbar A Select Register 36 */
    uint16_t SEL37; /*!< (read-write) Crossbar A Select Register 37 */
    uint16_t SEL38; /*!< (read-write) Crossbar A Select Register 38 */
    uint16_t SEL39; /*!< (read-write) Crossbar A Select Register 39 */
    uint16_t SEL40; /*!< (read-write) Crossbar A Select Register 40 */
    uint16_t SEL41; /*!< (read-write) Crossbar A Select Register 41 */
    uint16_t SEL42; /*!< (read-write) Crossbar A Select Register 42 */
    uint16_t SEL43; /*!< (read-write) Crossbar A Select Register 43 */
    uint16_t SEL44; /*!< (read-write) Crossbar A Select Register 44 */
    uint16_t SEL45; /*!< (read-write) Crossbar A Select Register 45 */
    uint16_t SEL46; /*!< (read-write) Crossbar A Select Register 46 */
    uint16_t SEL47; /*!< (read-write) Crossbar A Select Register 47 */
    uint16_t SEL48; /*!< (read-write) Crossbar A Select Register 48 */
    uint16_t SEL49; /*!< (read-write) Crossbar A Select Register 49 */
    uint16_t SEL50; /*!< (read-write) Crossbar A Select Register 50 */
    uint16_t SEL51; /*!< (read-write) Crossbar A Select Register 51 */
    uint16_t SEL52; /*!< (read-write) Crossbar A Select Register 52 */
    uint16_t SEL53; /*!< (read-write) Crossbar A Select Register 53 */
    uint16_t SEL54; /*!< (read-write) Crossbar A Select Register 54 */
    uint16_t SEL55; /*!< (read-write) Crossbar A Select Register 55 */
    uint16_t SEL56; /*!< (read-write) Crossbar A Select Register 56 */
    uint16_t SEL57; /*!< (read-write) Crossbar A Select Register 57 */
    uint16_t SEL58; /*!< (read-write) Crossbar A Select Register 58 */
    uint16_t SEL59; /*!< (read-write) Crossbar A Select Register 59 */
    uint16_t SEL60; /*!< (read-write) Crossbar A Select Register 60 */
    uint16_t SEL61; /*!< (read-write) Crossbar A Select Register 61 */
    uint16_t SEL62; /*!< (read-write) Crossbar A Select Register 62 */
    uint16_t SEL63; /*!< (read-write) Crossbar A Select Register 63 */
    uint16_t SEL64; /*!< (read-write) Crossbar A Select Register 64 */
    uint16_t SEL65; /*!< (read-write) Crossbar A Select Register 65 */
    uint16_t SEL66; /*!< (read-write) Crossbar A Select Register 66 */
    uint16_t SEL67; /*!< (read-write) Crossbar A Select Register 67 */
    uint16_t SEL68; /*!< (read-write) Crossbar A Select Register 68 */
    uint16_t SEL69; /*!< (read-write) Crossbar A Select Register 69 */
    uint16_t SEL70; /*!< (read-write) Crossbar A Select Register 70 */
    uint16_t SEL71; /*!< (read-write) Crossbar A Select Register 71 */
    uint16_t SEL72; /*!< (read-write) Crossbar A Select Register 72 */
    uint16_t SEL73; /*!< (read-write) Crossbar A Select Register 73 */
    uint16_t SEL74; /*!< (read-write) Crossbar A Select Register 74 */
    uint16_t SEL75; /*!< (read-write) Crossbar A Select Register 75 */
    uint16_t SEL76; /*!< (read-write) Crossbar A Select Register 76 */
    uint16_t SEL77; /*!< (read-write) Crossbar A Select Register 77 */
    uint16_t SEL78; /*!< (read-write) Crossbar A Select Register 78 */
    uint16_t SEL79; /*!< (read-write) Crossbar A Select Register 79 */
    uint16_t SEL80; /*!< (read-write) Crossbar A Select Register 80 */
    uint16_t SEL81; /*!< (read-write) Crossbar A Select Register 81 */
    uint16_t SEL82; /*!< (read-write) Crossbar A Select Register 82 */
    uint16_t SEL83; /*!< (read-write) Crossbar A Select Register 83 */
    uint16_t SEL84; /*!< (read-write) Crossbar A Select Register 84 */
    uint16_t SEL85; /*!< (read-write) Crossbar A Select Register 85 */
    uint16_t SEL86; /*!< (read-write) Crossbar A Select Register 86 */
    uint16_t SEL87; /*!< (read-write) Crossbar A Select Register 87 */
    uint16_t CTRL0; /*!< (read-write) Crossbar A Control Register 0 */
    uint16_t CTRL1; /*!< (read-write) Crossbar A Control Register 1 */

    /* Methods. */

    /**
     * Get SEL0's SEL1 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT1 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL0_SEL1() volatile
    {
        return (SEL0 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL0's SEL1 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT1 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL0_SEL1(uint8_t value) volatile
    {
        uint16_t curr = SEL0;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL0 = curr;
    }

    /**
     * Get SEL0's SEL0 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT0 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL0_SEL0() volatile
    {
        return (SEL0 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL0's SEL0 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT0 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL0_SEL0(uint8_t value) volatile
    {
        uint16_t curr = SEL0;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL0 = curr;
    }

    /**
     * Get all of SEL0's bit fields.
     *
     * (read-write) Crossbar A Select Register 0
     */
    inline void get_SEL0(uint8_t &SEL1, uint8_t &SEL0) volatile
    {
        uint16_t curr = SEL0;

        SEL1 = (curr >> 8u) & 0b11111111u;
        SEL0 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL0's bit fields.
     *
     * (read-write) Crossbar A Select Register 0
     */
    inline void set_SEL0(uint8_t SEL1, uint8_t SEL0) volatile
    {
        uint16_t curr = SEL0;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL1 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL0 & 0b11111111u) << 0u;

        SEL0 = curr;
    }

    /**
     * Get SEL1's SEL3 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT3 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL1_SEL3() volatile
    {
        return (SEL1 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL1's SEL3 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT3 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL1_SEL3(uint8_t value) volatile
    {
        uint16_t curr = SEL1;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL1 = curr;
    }

    /**
     * Get SEL1's SEL2 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT2 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL1_SEL2() volatile
    {
        return (SEL1 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL1's SEL2 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT2 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL1_SEL2(uint8_t value) volatile
    {
        uint16_t curr = SEL1;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL1 = curr;
    }

    /**
     * Get all of SEL1's bit fields.
     *
     * (read-write) Crossbar A Select Register 1
     */
    inline void get_SEL1(uint8_t &SEL3, uint8_t &SEL2) volatile
    {
        uint16_t curr = SEL1;

        SEL3 = (curr >> 8u) & 0b11111111u;
        SEL2 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL1's bit fields.
     *
     * (read-write) Crossbar A Select Register 1
     */
    inline void set_SEL1(uint8_t SEL3, uint8_t SEL2) volatile
    {
        uint16_t curr = SEL1;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL3 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL2 & 0b11111111u) << 0u;

        SEL1 = curr;
    }

    /**
     * Get SEL2's SEL5 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT5 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL2_SEL5() volatile
    {
        return (SEL2 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL2's SEL5 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT5 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL2_SEL5(uint8_t value) volatile
    {
        uint16_t curr = SEL2;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL2 = curr;
    }

    /**
     * Get SEL2's SEL4 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT4 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL2_SEL4() volatile
    {
        return (SEL2 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL2's SEL4 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT4 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL2_SEL4(uint8_t value) volatile
    {
        uint16_t curr = SEL2;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL2 = curr;
    }

    /**
     * Get all of SEL2's bit fields.
     *
     * (read-write) Crossbar A Select Register 2
     */
    inline void get_SEL2(uint8_t &SEL5, uint8_t &SEL4) volatile
    {
        uint16_t curr = SEL2;

        SEL5 = (curr >> 8u) & 0b11111111u;
        SEL4 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL2's bit fields.
     *
     * (read-write) Crossbar A Select Register 2
     */
    inline void set_SEL2(uint8_t SEL5, uint8_t SEL4) volatile
    {
        uint16_t curr = SEL2;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL5 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL4 & 0b11111111u) << 0u;

        SEL2 = curr;
    }

    /**
     * Get SEL3's SEL7 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT7 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL3_SEL7() volatile
    {
        return (SEL3 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL3's SEL7 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT7 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL3_SEL7(uint8_t value) volatile
    {
        uint16_t curr = SEL3;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL3 = curr;
    }

    /**
     * Get SEL3's SEL6 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT6 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL3_SEL6() volatile
    {
        return (SEL3 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL3's SEL6 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT6 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL3_SEL6(uint8_t value) volatile
    {
        uint16_t curr = SEL3;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL3 = curr;
    }

    /**
     * Get all of SEL3's bit fields.
     *
     * (read-write) Crossbar A Select Register 3
     */
    inline void get_SEL3(uint8_t &SEL7, uint8_t &SEL6) volatile
    {
        uint16_t curr = SEL3;

        SEL7 = (curr >> 8u) & 0b11111111u;
        SEL6 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL3's bit fields.
     *
     * (read-write) Crossbar A Select Register 3
     */
    inline void set_SEL3(uint8_t SEL7, uint8_t SEL6) volatile
    {
        uint16_t curr = SEL3;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL7 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL6 & 0b11111111u) << 0u;

        SEL3 = curr;
    }

    /**
     * Get SEL4's SEL9 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT9 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL4_SEL9() volatile
    {
        return (SEL4 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL4's SEL9 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT9 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL4_SEL9(uint8_t value) volatile
    {
        uint16_t curr = SEL4;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL4 = curr;
    }

    /**
     * Get SEL4's SEL8 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT8 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL4_SEL8() volatile
    {
        return (SEL4 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL4's SEL8 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT8 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL4_SEL8(uint8_t value) volatile
    {
        uint16_t curr = SEL4;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL4 = curr;
    }

    /**
     * Get all of SEL4's bit fields.
     *
     * (read-write) Crossbar A Select Register 4
     */
    inline void get_SEL4(uint8_t &SEL9, uint8_t &SEL8) volatile
    {
        uint16_t curr = SEL4;

        SEL9 = (curr >> 8u) & 0b11111111u;
        SEL8 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL4's bit fields.
     *
     * (read-write) Crossbar A Select Register 4
     */
    inline void set_SEL4(uint8_t SEL9, uint8_t SEL8) volatile
    {
        uint16_t curr = SEL4;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL9 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL8 & 0b11111111u) << 0u;

        SEL4 = curr;
    }

    /**
     * Get SEL5's SEL11 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT11 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL5_SEL11() volatile
    {
        return (SEL5 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL5's SEL11 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT11 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL5_SEL11(uint8_t value) volatile
    {
        uint16_t curr = SEL5;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL5 = curr;
    }

    /**
     * Get SEL5's SEL10 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT10 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL5_SEL10() volatile
    {
        return (SEL5 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL5's SEL10 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT10 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL5_SEL10(uint8_t value) volatile
    {
        uint16_t curr = SEL5;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL5 = curr;
    }

    /**
     * Get all of SEL5's bit fields.
     *
     * (read-write) Crossbar A Select Register 5
     */
    inline void get_SEL5(uint8_t &SEL11, uint8_t &SEL10) volatile
    {
        uint16_t curr = SEL5;

        SEL11 = (curr >> 8u) & 0b11111111u;
        SEL10 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL5's bit fields.
     *
     * (read-write) Crossbar A Select Register 5
     */
    inline void set_SEL5(uint8_t SEL11, uint8_t SEL10) volatile
    {
        uint16_t curr = SEL5;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL11 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL10 & 0b11111111u) << 0u;

        SEL5 = curr;
    }

    /**
     * Get SEL6's SEL13 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT13 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL6_SEL13() volatile
    {
        return (SEL6 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL6's SEL13 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT13 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL6_SEL13(uint8_t value) volatile
    {
        uint16_t curr = SEL6;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL6 = curr;
    }

    /**
     * Get SEL6's SEL12 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT12 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL6_SEL12() volatile
    {
        return (SEL6 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL6's SEL12 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT12 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL6_SEL12(uint8_t value) volatile
    {
        uint16_t curr = SEL6;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL6 = curr;
    }

    /**
     * Get all of SEL6's bit fields.
     *
     * (read-write) Crossbar A Select Register 6
     */
    inline void get_SEL6(uint8_t &SEL13, uint8_t &SEL12) volatile
    {
        uint16_t curr = SEL6;

        SEL13 = (curr >> 8u) & 0b11111111u;
        SEL12 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL6's bit fields.
     *
     * (read-write) Crossbar A Select Register 6
     */
    inline void set_SEL6(uint8_t SEL13, uint8_t SEL12) volatile
    {
        uint16_t curr = SEL6;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL13 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL12 & 0b11111111u) << 0u;

        SEL6 = curr;
    }

    /**
     * Get SEL7's SEL15 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT15 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL7_SEL15() volatile
    {
        return (SEL7 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL7's SEL15 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT15 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL7_SEL15(uint8_t value) volatile
    {
        uint16_t curr = SEL7;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL7 = curr;
    }

    /**
     * Get SEL7's SEL14 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT14 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL7_SEL14() volatile
    {
        return (SEL7 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL7's SEL14 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT14 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL7_SEL14(uint8_t value) volatile
    {
        uint16_t curr = SEL7;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL7 = curr;
    }

    /**
     * Get all of SEL7's bit fields.
     *
     * (read-write) Crossbar A Select Register 7
     */
    inline void get_SEL7(uint8_t &SEL15, uint8_t &SEL14) volatile
    {
        uint16_t curr = SEL7;

        SEL15 = (curr >> 8u) & 0b11111111u;
        SEL14 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL7's bit fields.
     *
     * (read-write) Crossbar A Select Register 7
     */
    inline void set_SEL7(uint8_t SEL15, uint8_t SEL14) volatile
    {
        uint16_t curr = SEL7;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL15 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL14 & 0b11111111u) << 0u;

        SEL7 = curr;
    }

    /**
     * Get SEL8's SEL17 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT17 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL8_SEL17() volatile
    {
        return (SEL8 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL8's SEL17 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT17 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL8_SEL17(uint8_t value) volatile
    {
        uint16_t curr = SEL8;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL8 = curr;
    }

    /**
     * Get SEL8's SEL16 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT16 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL8_SEL16() volatile
    {
        return (SEL8 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL8's SEL16 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT16 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL8_SEL16(uint8_t value) volatile
    {
        uint16_t curr = SEL8;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL8 = curr;
    }

    /**
     * Get all of SEL8's bit fields.
     *
     * (read-write) Crossbar A Select Register 8
     */
    inline void get_SEL8(uint8_t &SEL17, uint8_t &SEL16) volatile
    {
        uint16_t curr = SEL8;

        SEL17 = (curr >> 8u) & 0b11111111u;
        SEL16 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL8's bit fields.
     *
     * (read-write) Crossbar A Select Register 8
     */
    inline void set_SEL8(uint8_t SEL17, uint8_t SEL16) volatile
    {
        uint16_t curr = SEL8;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL17 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL16 & 0b11111111u) << 0u;

        SEL8 = curr;
    }

    /**
     * Get SEL9's SEL19 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT19 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL9_SEL19() volatile
    {
        return (SEL9 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL9's SEL19 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT19 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL9_SEL19(uint8_t value) volatile
    {
        uint16_t curr = SEL9;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL9 = curr;
    }

    /**
     * Get SEL9's SEL18 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT18 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL9_SEL18() volatile
    {
        return (SEL9 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL9's SEL18 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT18 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL9_SEL18(uint8_t value) volatile
    {
        uint16_t curr = SEL9;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL9 = curr;
    }

    /**
     * Get all of SEL9's bit fields.
     *
     * (read-write) Crossbar A Select Register 9
     */
    inline void get_SEL9(uint8_t &SEL19, uint8_t &SEL18) volatile
    {
        uint16_t curr = SEL9;

        SEL19 = (curr >> 8u) & 0b11111111u;
        SEL18 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL9's bit fields.
     *
     * (read-write) Crossbar A Select Register 9
     */
    inline void set_SEL9(uint8_t SEL19, uint8_t SEL18) volatile
    {
        uint16_t curr = SEL9;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL19 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL18 & 0b11111111u) << 0u;

        SEL9 = curr;
    }

    /**
     * Get SEL10's SEL21 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT21 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL10_SEL21() volatile
    {
        return (SEL10 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL10's SEL21 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT21 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL10_SEL21(uint8_t value) volatile
    {
        uint16_t curr = SEL10;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL10 = curr;
    }

    /**
     * Get SEL10's SEL20 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT20 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL10_SEL20() volatile
    {
        return (SEL10 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL10's SEL20 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT20 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL10_SEL20(uint8_t value) volatile
    {
        uint16_t curr = SEL10;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL10 = curr;
    }

    /**
     * Get all of SEL10's bit fields.
     *
     * (read-write) Crossbar A Select Register 10
     */
    inline void get_SEL10(uint8_t &SEL21, uint8_t &SEL20) volatile
    {
        uint16_t curr = SEL10;

        SEL21 = (curr >> 8u) & 0b11111111u;
        SEL20 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL10's bit fields.
     *
     * (read-write) Crossbar A Select Register 10
     */
    inline void set_SEL10(uint8_t SEL21, uint8_t SEL20) volatile
    {
        uint16_t curr = SEL10;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL21 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL20 & 0b11111111u) << 0u;

        SEL10 = curr;
    }

    /**
     * Get SEL11's SEL23 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT23 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL11_SEL23() volatile
    {
        return (SEL11 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL11's SEL23 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT23 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL11_SEL23(uint8_t value) volatile
    {
        uint16_t curr = SEL11;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL11 = curr;
    }

    /**
     * Get SEL11's SEL22 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT22 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL11_SEL22() volatile
    {
        return (SEL11 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL11's SEL22 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT22 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL11_SEL22(uint8_t value) volatile
    {
        uint16_t curr = SEL11;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL11 = curr;
    }

    /**
     * Get all of SEL11's bit fields.
     *
     * (read-write) Crossbar A Select Register 11
     */
    inline void get_SEL11(uint8_t &SEL23, uint8_t &SEL22) volatile
    {
        uint16_t curr = SEL11;

        SEL23 = (curr >> 8u) & 0b11111111u;
        SEL22 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL11's bit fields.
     *
     * (read-write) Crossbar A Select Register 11
     */
    inline void set_SEL11(uint8_t SEL23, uint8_t SEL22) volatile
    {
        uint16_t curr = SEL11;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL23 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL22 & 0b11111111u) << 0u;

        SEL11 = curr;
    }

    /**
     * Get SEL12's SEL25 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT25 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL12_SEL25() volatile
    {
        return (SEL12 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL12's SEL25 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT25 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL12_SEL25(uint8_t value) volatile
    {
        uint16_t curr = SEL12;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL12 = curr;
    }

    /**
     * Get SEL12's SEL24 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT24 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL12_SEL24() volatile
    {
        return (SEL12 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL12's SEL24 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT24 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL12_SEL24(uint8_t value) volatile
    {
        uint16_t curr = SEL12;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL12 = curr;
    }

    /**
     * Get all of SEL12's bit fields.
     *
     * (read-write) Crossbar A Select Register 12
     */
    inline void get_SEL12(uint8_t &SEL25, uint8_t &SEL24) volatile
    {
        uint16_t curr = SEL12;

        SEL25 = (curr >> 8u) & 0b11111111u;
        SEL24 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL12's bit fields.
     *
     * (read-write) Crossbar A Select Register 12
     */
    inline void set_SEL12(uint8_t SEL25, uint8_t SEL24) volatile
    {
        uint16_t curr = SEL12;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL25 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL24 & 0b11111111u) << 0u;

        SEL12 = curr;
    }

    /**
     * Get SEL13's SEL27 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT27 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL13_SEL27() volatile
    {
        return (SEL13 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL13's SEL27 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT27 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL13_SEL27(uint8_t value) volatile
    {
        uint16_t curr = SEL13;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL13 = curr;
    }

    /**
     * Get SEL13's SEL26 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT26 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL13_SEL26() volatile
    {
        return (SEL13 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL13's SEL26 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT26 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL13_SEL26(uint8_t value) volatile
    {
        uint16_t curr = SEL13;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL13 = curr;
    }

    /**
     * Get all of SEL13's bit fields.
     *
     * (read-write) Crossbar A Select Register 13
     */
    inline void get_SEL13(uint8_t &SEL27, uint8_t &SEL26) volatile
    {
        uint16_t curr = SEL13;

        SEL27 = (curr >> 8u) & 0b11111111u;
        SEL26 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL13's bit fields.
     *
     * (read-write) Crossbar A Select Register 13
     */
    inline void set_SEL13(uint8_t SEL27, uint8_t SEL26) volatile
    {
        uint16_t curr = SEL13;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL27 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL26 & 0b11111111u) << 0u;

        SEL13 = curr;
    }

    /**
     * Get SEL14's SEL29 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT29 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL14_SEL29() volatile
    {
        return (SEL14 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL14's SEL29 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT29 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL14_SEL29(uint8_t value) volatile
    {
        uint16_t curr = SEL14;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL14 = curr;
    }

    /**
     * Get SEL14's SEL28 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT28 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL14_SEL28() volatile
    {
        return (SEL14 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL14's SEL28 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT28 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL14_SEL28(uint8_t value) volatile
    {
        uint16_t curr = SEL14;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL14 = curr;
    }

    /**
     * Get all of SEL14's bit fields.
     *
     * (read-write) Crossbar A Select Register 14
     */
    inline void get_SEL14(uint8_t &SEL29, uint8_t &SEL28) volatile
    {
        uint16_t curr = SEL14;

        SEL29 = (curr >> 8u) & 0b11111111u;
        SEL28 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL14's bit fields.
     *
     * (read-write) Crossbar A Select Register 14
     */
    inline void set_SEL14(uint8_t SEL29, uint8_t SEL28) volatile
    {
        uint16_t curr = SEL14;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL29 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL28 & 0b11111111u) << 0u;

        SEL14 = curr;
    }

    /**
     * Get SEL15's SEL31 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT31 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL15_SEL31() volatile
    {
        return (SEL15 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL15's SEL31 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT31 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL15_SEL31(uint8_t value) volatile
    {
        uint16_t curr = SEL15;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL15 = curr;
    }

    /**
     * Get SEL15's SEL30 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT30 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL15_SEL30() volatile
    {
        return (SEL15 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL15's SEL30 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT30 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL15_SEL30(uint8_t value) volatile
    {
        uint16_t curr = SEL15;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL15 = curr;
    }

    /**
     * Get all of SEL15's bit fields.
     *
     * (read-write) Crossbar A Select Register 15
     */
    inline void get_SEL15(uint8_t &SEL31, uint8_t &SEL30) volatile
    {
        uint16_t curr = SEL15;

        SEL31 = (curr >> 8u) & 0b11111111u;
        SEL30 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL15's bit fields.
     *
     * (read-write) Crossbar A Select Register 15
     */
    inline void set_SEL15(uint8_t SEL31, uint8_t SEL30) volatile
    {
        uint16_t curr = SEL15;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL31 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL30 & 0b11111111u) << 0u;

        SEL15 = curr;
    }

    /**
     * Get SEL16's SEL33 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT33 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL16_SEL33() volatile
    {
        return (SEL16 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL16's SEL33 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT33 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL16_SEL33(uint8_t value) volatile
    {
        uint16_t curr = SEL16;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL16 = curr;
    }

    /**
     * Get SEL16's SEL32 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT32 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL16_SEL32() volatile
    {
        return (SEL16 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL16's SEL32 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT32 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL16_SEL32(uint8_t value) volatile
    {
        uint16_t curr = SEL16;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL16 = curr;
    }

    /**
     * Get all of SEL16's bit fields.
     *
     * (read-write) Crossbar A Select Register 16
     */
    inline void get_SEL16(uint8_t &SEL33, uint8_t &SEL32) volatile
    {
        uint16_t curr = SEL16;

        SEL33 = (curr >> 8u) & 0b11111111u;
        SEL32 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL16's bit fields.
     *
     * (read-write) Crossbar A Select Register 16
     */
    inline void set_SEL16(uint8_t SEL33, uint8_t SEL32) volatile
    {
        uint16_t curr = SEL16;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL33 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL32 & 0b11111111u) << 0u;

        SEL16 = curr;
    }

    /**
     * Get SEL17's SEL35 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT35 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL17_SEL35() volatile
    {
        return (SEL17 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL17's SEL35 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT35 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL17_SEL35(uint8_t value) volatile
    {
        uint16_t curr = SEL17;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL17 = curr;
    }

    /**
     * Get SEL17's SEL34 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT34 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL17_SEL34() volatile
    {
        return (SEL17 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL17's SEL34 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT34 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL17_SEL34(uint8_t value) volatile
    {
        uint16_t curr = SEL17;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL17 = curr;
    }

    /**
     * Get all of SEL17's bit fields.
     *
     * (read-write) Crossbar A Select Register 17
     */
    inline void get_SEL17(uint8_t &SEL35, uint8_t &SEL34) volatile
    {
        uint16_t curr = SEL17;

        SEL35 = (curr >> 8u) & 0b11111111u;
        SEL34 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL17's bit fields.
     *
     * (read-write) Crossbar A Select Register 17
     */
    inline void set_SEL17(uint8_t SEL35, uint8_t SEL34) volatile
    {
        uint16_t curr = SEL17;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL35 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL34 & 0b11111111u) << 0u;

        SEL17 = curr;
    }

    /**
     * Get SEL18's SEL37 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT37 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL18_SEL37() volatile
    {
        return (SEL18 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL18's SEL37 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT37 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL18_SEL37(uint8_t value) volatile
    {
        uint16_t curr = SEL18;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL18 = curr;
    }

    /**
     * Get SEL18's SEL36 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT36 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL18_SEL36() volatile
    {
        return (SEL18 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL18's SEL36 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT36 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL18_SEL36(uint8_t value) volatile
    {
        uint16_t curr = SEL18;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL18 = curr;
    }

    /**
     * Get all of SEL18's bit fields.
     *
     * (read-write) Crossbar A Select Register 18
     */
    inline void get_SEL18(uint8_t &SEL37, uint8_t &SEL36) volatile
    {
        uint16_t curr = SEL18;

        SEL37 = (curr >> 8u) & 0b11111111u;
        SEL36 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL18's bit fields.
     *
     * (read-write) Crossbar A Select Register 18
     */
    inline void set_SEL18(uint8_t SEL37, uint8_t SEL36) volatile
    {
        uint16_t curr = SEL18;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL37 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL36 & 0b11111111u) << 0u;

        SEL18 = curr;
    }

    /**
     * Get SEL19's SEL39 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT39 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL19_SEL39() volatile
    {
        return (SEL19 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL19's SEL39 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT39 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL19_SEL39(uint8_t value) volatile
    {
        uint16_t curr = SEL19;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL19 = curr;
    }

    /**
     * Get SEL19's SEL38 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT38 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL19_SEL38() volatile
    {
        return (SEL19 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL19's SEL38 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT38 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL19_SEL38(uint8_t value) volatile
    {
        uint16_t curr = SEL19;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL19 = curr;
    }

    /**
     * Get all of SEL19's bit fields.
     *
     * (read-write) Crossbar A Select Register 19
     */
    inline void get_SEL19(uint8_t &SEL39, uint8_t &SEL38) volatile
    {
        uint16_t curr = SEL19;

        SEL39 = (curr >> 8u) & 0b11111111u;
        SEL38 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL19's bit fields.
     *
     * (read-write) Crossbar A Select Register 19
     */
    inline void set_SEL19(uint8_t SEL39, uint8_t SEL38) volatile
    {
        uint16_t curr = SEL19;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL39 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL38 & 0b11111111u) << 0u;

        SEL19 = curr;
    }

    /**
     * Get SEL20's SEL41 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT41 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL20_SEL41() volatile
    {
        return (SEL20 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL20's SEL41 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT41 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL20_SEL41(uint8_t value) volatile
    {
        uint16_t curr = SEL20;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL20 = curr;
    }

    /**
     * Get SEL20's SEL40 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT40 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL20_SEL40() volatile
    {
        return (SEL20 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL20's SEL40 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT40 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL20_SEL40(uint8_t value) volatile
    {
        uint16_t curr = SEL20;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL20 = curr;
    }

    /**
     * Get all of SEL20's bit fields.
     *
     * (read-write) Crossbar A Select Register 20
     */
    inline void get_SEL20(uint8_t &SEL41, uint8_t &SEL40) volatile
    {
        uint16_t curr = SEL20;

        SEL41 = (curr >> 8u) & 0b11111111u;
        SEL40 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL20's bit fields.
     *
     * (read-write) Crossbar A Select Register 20
     */
    inline void set_SEL20(uint8_t SEL41, uint8_t SEL40) volatile
    {
        uint16_t curr = SEL20;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL41 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL40 & 0b11111111u) << 0u;

        SEL20 = curr;
    }

    /**
     * Get SEL21's SEL43 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT43 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL21_SEL43() volatile
    {
        return (SEL21 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL21's SEL43 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT43 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL21_SEL43(uint8_t value) volatile
    {
        uint16_t curr = SEL21;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL21 = curr;
    }

    /**
     * Get SEL21's SEL42 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT42 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL21_SEL42() volatile
    {
        return (SEL21 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL21's SEL42 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT42 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL21_SEL42(uint8_t value) volatile
    {
        uint16_t curr = SEL21;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL21 = curr;
    }

    /**
     * Get all of SEL21's bit fields.
     *
     * (read-write) Crossbar A Select Register 21
     */
    inline void get_SEL21(uint8_t &SEL43, uint8_t &SEL42) volatile
    {
        uint16_t curr = SEL21;

        SEL43 = (curr >> 8u) & 0b11111111u;
        SEL42 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL21's bit fields.
     *
     * (read-write) Crossbar A Select Register 21
     */
    inline void set_SEL21(uint8_t SEL43, uint8_t SEL42) volatile
    {
        uint16_t curr = SEL21;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL43 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL42 & 0b11111111u) << 0u;

        SEL21 = curr;
    }

    /**
     * Get SEL22's SEL45 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT45 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL22_SEL45() volatile
    {
        return (SEL22 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL22's SEL45 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT45 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL22_SEL45(uint8_t value) volatile
    {
        uint16_t curr = SEL22;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL22 = curr;
    }

    /**
     * Get SEL22's SEL44 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT44 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL22_SEL44() volatile
    {
        return (SEL22 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL22's SEL44 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT44 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL22_SEL44(uint8_t value) volatile
    {
        uint16_t curr = SEL22;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL22 = curr;
    }

    /**
     * Get all of SEL22's bit fields.
     *
     * (read-write) Crossbar A Select Register 22
     */
    inline void get_SEL22(uint8_t &SEL45, uint8_t &SEL44) volatile
    {
        uint16_t curr = SEL22;

        SEL45 = (curr >> 8u) & 0b11111111u;
        SEL44 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL22's bit fields.
     *
     * (read-write) Crossbar A Select Register 22
     */
    inline void set_SEL22(uint8_t SEL45, uint8_t SEL44) volatile
    {
        uint16_t curr = SEL22;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL45 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL44 & 0b11111111u) << 0u;

        SEL22 = curr;
    }

    /**
     * Get SEL23's SEL47 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT47 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL23_SEL47() volatile
    {
        return (SEL23 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL23's SEL47 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT47 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL23_SEL47(uint8_t value) volatile
    {
        uint16_t curr = SEL23;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL23 = curr;
    }

    /**
     * Get SEL23's SEL46 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT46 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL23_SEL46() volatile
    {
        return (SEL23 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL23's SEL46 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT46 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL23_SEL46(uint8_t value) volatile
    {
        uint16_t curr = SEL23;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL23 = curr;
    }

    /**
     * Get all of SEL23's bit fields.
     *
     * (read-write) Crossbar A Select Register 23
     */
    inline void get_SEL23(uint8_t &SEL47, uint8_t &SEL46) volatile
    {
        uint16_t curr = SEL23;

        SEL47 = (curr >> 8u) & 0b11111111u;
        SEL46 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL23's bit fields.
     *
     * (read-write) Crossbar A Select Register 23
     */
    inline void set_SEL23(uint8_t SEL47, uint8_t SEL46) volatile
    {
        uint16_t curr = SEL23;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL47 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL46 & 0b11111111u) << 0u;

        SEL23 = curr;
    }

    /**
     * Get SEL24's SEL49 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT49 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL24_SEL49() volatile
    {
        return (SEL24 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL24's SEL49 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT49 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL24_SEL49(uint8_t value) volatile
    {
        uint16_t curr = SEL24;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL24 = curr;
    }

    /**
     * Get SEL24's SEL48 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT48 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL24_SEL48() volatile
    {
        return (SEL24 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL24's SEL48 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT48 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL24_SEL48(uint8_t value) volatile
    {
        uint16_t curr = SEL24;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL24 = curr;
    }

    /**
     * Get all of SEL24's bit fields.
     *
     * (read-write) Crossbar A Select Register 24
     */
    inline void get_SEL24(uint8_t &SEL49, uint8_t &SEL48) volatile
    {
        uint16_t curr = SEL24;

        SEL49 = (curr >> 8u) & 0b11111111u;
        SEL48 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL24's bit fields.
     *
     * (read-write) Crossbar A Select Register 24
     */
    inline void set_SEL24(uint8_t SEL49, uint8_t SEL48) volatile
    {
        uint16_t curr = SEL24;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL49 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL48 & 0b11111111u) << 0u;

        SEL24 = curr;
    }

    /**
     * Get SEL25's SEL51 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT51 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL25_SEL51() volatile
    {
        return (SEL25 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL25's SEL51 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT51 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL25_SEL51(uint8_t value) volatile
    {
        uint16_t curr = SEL25;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL25 = curr;
    }

    /**
     * Get SEL25's SEL50 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT50 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL25_SEL50() volatile
    {
        return (SEL25 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL25's SEL50 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT50 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL25_SEL50(uint8_t value) volatile
    {
        uint16_t curr = SEL25;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL25 = curr;
    }

    /**
     * Get all of SEL25's bit fields.
     *
     * (read-write) Crossbar A Select Register 25
     */
    inline void get_SEL25(uint8_t &SEL51, uint8_t &SEL50) volatile
    {
        uint16_t curr = SEL25;

        SEL51 = (curr >> 8u) & 0b11111111u;
        SEL50 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL25's bit fields.
     *
     * (read-write) Crossbar A Select Register 25
     */
    inline void set_SEL25(uint8_t SEL51, uint8_t SEL50) volatile
    {
        uint16_t curr = SEL25;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL51 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL50 & 0b11111111u) << 0u;

        SEL25 = curr;
    }

    /**
     * Get SEL26's SEL53 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT53 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL26_SEL53() volatile
    {
        return (SEL26 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL26's SEL53 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT53 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL26_SEL53(uint8_t value) volatile
    {
        uint16_t curr = SEL26;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL26 = curr;
    }

    /**
     * Get SEL26's SEL52 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT52 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL26_SEL52() volatile
    {
        return (SEL26 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL26's SEL52 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT52 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL26_SEL52(uint8_t value) volatile
    {
        uint16_t curr = SEL26;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL26 = curr;
    }

    /**
     * Get all of SEL26's bit fields.
     *
     * (read-write) Crossbar A Select Register 26
     */
    inline void get_SEL26(uint8_t &SEL53, uint8_t &SEL52) volatile
    {
        uint16_t curr = SEL26;

        SEL53 = (curr >> 8u) & 0b11111111u;
        SEL52 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL26's bit fields.
     *
     * (read-write) Crossbar A Select Register 26
     */
    inline void set_SEL26(uint8_t SEL53, uint8_t SEL52) volatile
    {
        uint16_t curr = SEL26;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL53 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL52 & 0b11111111u) << 0u;

        SEL26 = curr;
    }

    /**
     * Get SEL27's SEL55 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT55 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL27_SEL55() volatile
    {
        return (SEL27 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL27's SEL55 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT55 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL27_SEL55(uint8_t value) volatile
    {
        uint16_t curr = SEL27;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL27 = curr;
    }

    /**
     * Get SEL27's SEL54 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT54 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL27_SEL54() volatile
    {
        return (SEL27 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL27's SEL54 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT54 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL27_SEL54(uint8_t value) volatile
    {
        uint16_t curr = SEL27;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL27 = curr;
    }

    /**
     * Get all of SEL27's bit fields.
     *
     * (read-write) Crossbar A Select Register 27
     */
    inline void get_SEL27(uint8_t &SEL55, uint8_t &SEL54) volatile
    {
        uint16_t curr = SEL27;

        SEL55 = (curr >> 8u) & 0b11111111u;
        SEL54 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL27's bit fields.
     *
     * (read-write) Crossbar A Select Register 27
     */
    inline void set_SEL27(uint8_t SEL55, uint8_t SEL54) volatile
    {
        uint16_t curr = SEL27;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL55 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL54 & 0b11111111u) << 0u;

        SEL27 = curr;
    }

    /**
     * Get SEL28's SEL57 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT57 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL28_SEL57() volatile
    {
        return (SEL28 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL28's SEL57 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT57 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL28_SEL57(uint8_t value) volatile
    {
        uint16_t curr = SEL28;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL28 = curr;
    }

    /**
     * Get SEL28's SEL56 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT56 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL28_SEL56() volatile
    {
        return (SEL28 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL28's SEL56 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT56 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL28_SEL56(uint8_t value) volatile
    {
        uint16_t curr = SEL28;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL28 = curr;
    }

    /**
     * Get all of SEL28's bit fields.
     *
     * (read-write) Crossbar A Select Register 28
     */
    inline void get_SEL28(uint8_t &SEL57, uint8_t &SEL56) volatile
    {
        uint16_t curr = SEL28;

        SEL57 = (curr >> 8u) & 0b11111111u;
        SEL56 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL28's bit fields.
     *
     * (read-write) Crossbar A Select Register 28
     */
    inline void set_SEL28(uint8_t SEL57, uint8_t SEL56) volatile
    {
        uint16_t curr = SEL28;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL57 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL56 & 0b11111111u) << 0u;

        SEL28 = curr;
    }

    /**
     * Get SEL29's SEL59 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT59 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL29_SEL59() volatile
    {
        return (SEL29 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL29's SEL59 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT59 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL29_SEL59(uint8_t value) volatile
    {
        uint16_t curr = SEL29;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL29 = curr;
    }

    /**
     * Get SEL29's SEL58 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT58 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL29_SEL58() volatile
    {
        return (SEL29 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL29's SEL58 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT58 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL29_SEL58(uint8_t value) volatile
    {
        uint16_t curr = SEL29;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL29 = curr;
    }

    /**
     * Get all of SEL29's bit fields.
     *
     * (read-write) Crossbar A Select Register 29
     */
    inline void get_SEL29(uint8_t &SEL59, uint8_t &SEL58) volatile
    {
        uint16_t curr = SEL29;

        SEL59 = (curr >> 8u) & 0b11111111u;
        SEL58 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL29's bit fields.
     *
     * (read-write) Crossbar A Select Register 29
     */
    inline void set_SEL29(uint8_t SEL59, uint8_t SEL58) volatile
    {
        uint16_t curr = SEL29;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL59 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL58 & 0b11111111u) << 0u;

        SEL29 = curr;
    }

    /**
     * Get SEL30's SEL61 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT61 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL30_SEL61() volatile
    {
        return (SEL30 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL30's SEL61 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT61 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL30_SEL61(uint8_t value) volatile
    {
        uint16_t curr = SEL30;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL30 = curr;
    }

    /**
     * Get SEL30's SEL60 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT60 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL30_SEL60() volatile
    {
        return (SEL30 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL30's SEL60 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT60 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL30_SEL60(uint8_t value) volatile
    {
        uint16_t curr = SEL30;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL30 = curr;
    }

    /**
     * Get all of SEL30's bit fields.
     *
     * (read-write) Crossbar A Select Register 30
     */
    inline void get_SEL30(uint8_t &SEL61, uint8_t &SEL60) volatile
    {
        uint16_t curr = SEL30;

        SEL61 = (curr >> 8u) & 0b11111111u;
        SEL60 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL30's bit fields.
     *
     * (read-write) Crossbar A Select Register 30
     */
    inline void set_SEL30(uint8_t SEL61, uint8_t SEL60) volatile
    {
        uint16_t curr = SEL30;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL61 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL60 & 0b11111111u) << 0u;

        SEL30 = curr;
    }

    /**
     * Get SEL31's SEL63 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT63 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL31_SEL63() volatile
    {
        return (SEL31 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL31's SEL63 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT63 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL31_SEL63(uint8_t value) volatile
    {
        uint16_t curr = SEL31;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL31 = curr;
    }

    /**
     * Get SEL31's SEL62 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT62 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL31_SEL62() volatile
    {
        return (SEL31 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL31's SEL62 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT62 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL31_SEL62(uint8_t value) volatile
    {
        uint16_t curr = SEL31;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL31 = curr;
    }

    /**
     * Get all of SEL31's bit fields.
     *
     * (read-write) Crossbar A Select Register 31
     */
    inline void get_SEL31(uint8_t &SEL63, uint8_t &SEL62) volatile
    {
        uint16_t curr = SEL31;

        SEL63 = (curr >> 8u) & 0b11111111u;
        SEL62 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL31's bit fields.
     *
     * (read-write) Crossbar A Select Register 31
     */
    inline void set_SEL31(uint8_t SEL63, uint8_t SEL62) volatile
    {
        uint16_t curr = SEL31;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL63 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL62 & 0b11111111u) << 0u;

        SEL31 = curr;
    }

    /**
     * Get SEL32's SEL65 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT65 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL32_SEL65() volatile
    {
        return (SEL32 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL32's SEL65 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT65 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL32_SEL65(uint8_t value) volatile
    {
        uint16_t curr = SEL32;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL32 = curr;
    }

    /**
     * Get SEL32's SEL64 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT64 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL32_SEL64() volatile
    {
        return (SEL32 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL32's SEL64 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT64 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL32_SEL64(uint8_t value) volatile
    {
        uint16_t curr = SEL32;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL32 = curr;
    }

    /**
     * Get all of SEL32's bit fields.
     *
     * (read-write) Crossbar A Select Register 32
     */
    inline void get_SEL32(uint8_t &SEL65, uint8_t &SEL64) volatile
    {
        uint16_t curr = SEL32;

        SEL65 = (curr >> 8u) & 0b11111111u;
        SEL64 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL32's bit fields.
     *
     * (read-write) Crossbar A Select Register 32
     */
    inline void set_SEL32(uint8_t SEL65, uint8_t SEL64) volatile
    {
        uint16_t curr = SEL32;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL65 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL64 & 0b11111111u) << 0u;

        SEL32 = curr;
    }

    /**
     * Get SEL33's SEL67 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT67 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL33_SEL67() volatile
    {
        return (SEL33 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL33's SEL67 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT67 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL33_SEL67(uint8_t value) volatile
    {
        uint16_t curr = SEL33;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL33 = curr;
    }

    /**
     * Get SEL33's SEL66 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT66 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL33_SEL66() volatile
    {
        return (SEL33 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL33's SEL66 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT66 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL33_SEL66(uint8_t value) volatile
    {
        uint16_t curr = SEL33;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL33 = curr;
    }

    /**
     * Get all of SEL33's bit fields.
     *
     * (read-write) Crossbar A Select Register 33
     */
    inline void get_SEL33(uint8_t &SEL67, uint8_t &SEL66) volatile
    {
        uint16_t curr = SEL33;

        SEL67 = (curr >> 8u) & 0b11111111u;
        SEL66 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL33's bit fields.
     *
     * (read-write) Crossbar A Select Register 33
     */
    inline void set_SEL33(uint8_t SEL67, uint8_t SEL66) volatile
    {
        uint16_t curr = SEL33;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL67 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL66 & 0b11111111u) << 0u;

        SEL33 = curr;
    }

    /**
     * Get SEL34's SEL69 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT69 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL34_SEL69() volatile
    {
        return (SEL34 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL34's SEL69 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT69 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL34_SEL69(uint8_t value) volatile
    {
        uint16_t curr = SEL34;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL34 = curr;
    }

    /**
     * Get SEL34's SEL68 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT68 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL34_SEL68() volatile
    {
        return (SEL34 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL34's SEL68 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT68 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL34_SEL68(uint8_t value) volatile
    {
        uint16_t curr = SEL34;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL34 = curr;
    }

    /**
     * Get all of SEL34's bit fields.
     *
     * (read-write) Crossbar A Select Register 34
     */
    inline void get_SEL34(uint8_t &SEL69, uint8_t &SEL68) volatile
    {
        uint16_t curr = SEL34;

        SEL69 = (curr >> 8u) & 0b11111111u;
        SEL68 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL34's bit fields.
     *
     * (read-write) Crossbar A Select Register 34
     */
    inline void set_SEL34(uint8_t SEL69, uint8_t SEL68) volatile
    {
        uint16_t curr = SEL34;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL69 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL68 & 0b11111111u) << 0u;

        SEL34 = curr;
    }

    /**
     * Get SEL35's SEL71 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT71 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL35_SEL71() volatile
    {
        return (SEL35 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL35's SEL71 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT71 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL35_SEL71(uint8_t value) volatile
    {
        uint16_t curr = SEL35;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL35 = curr;
    }

    /**
     * Get SEL35's SEL70 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT70 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL35_SEL70() volatile
    {
        return (SEL35 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL35's SEL70 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT70 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL35_SEL70(uint8_t value) volatile
    {
        uint16_t curr = SEL35;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL35 = curr;
    }

    /**
     * Get all of SEL35's bit fields.
     *
     * (read-write) Crossbar A Select Register 35
     */
    inline void get_SEL35(uint8_t &SEL71, uint8_t &SEL70) volatile
    {
        uint16_t curr = SEL35;

        SEL71 = (curr >> 8u) & 0b11111111u;
        SEL70 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL35's bit fields.
     *
     * (read-write) Crossbar A Select Register 35
     */
    inline void set_SEL35(uint8_t SEL71, uint8_t SEL70) volatile
    {
        uint16_t curr = SEL35;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL71 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL70 & 0b11111111u) << 0u;

        SEL35 = curr;
    }

    /**
     * Get SEL36's SEL73 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT73 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL36_SEL73() volatile
    {
        return (SEL36 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL36's SEL73 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT73 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL36_SEL73(uint8_t value) volatile
    {
        uint16_t curr = SEL36;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL36 = curr;
    }

    /**
     * Get SEL36's SEL72 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT72 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL36_SEL72() volatile
    {
        return (SEL36 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL36's SEL72 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT72 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL36_SEL72(uint8_t value) volatile
    {
        uint16_t curr = SEL36;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL36 = curr;
    }

    /**
     * Get all of SEL36's bit fields.
     *
     * (read-write) Crossbar A Select Register 36
     */
    inline void get_SEL36(uint8_t &SEL73, uint8_t &SEL72) volatile
    {
        uint16_t curr = SEL36;

        SEL73 = (curr >> 8u) & 0b11111111u;
        SEL72 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL36's bit fields.
     *
     * (read-write) Crossbar A Select Register 36
     */
    inline void set_SEL36(uint8_t SEL73, uint8_t SEL72) volatile
    {
        uint16_t curr = SEL36;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL73 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL72 & 0b11111111u) << 0u;

        SEL36 = curr;
    }

    /**
     * Get SEL37's SEL75 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT75 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL37_SEL75() volatile
    {
        return (SEL37 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL37's SEL75 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT75 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL37_SEL75(uint8_t value) volatile
    {
        uint16_t curr = SEL37;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL37 = curr;
    }

    /**
     * Get SEL37's SEL74 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT74 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL37_SEL74() volatile
    {
        return (SEL37 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL37's SEL74 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT74 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL37_SEL74(uint8_t value) volatile
    {
        uint16_t curr = SEL37;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL37 = curr;
    }

    /**
     * Get all of SEL37's bit fields.
     *
     * (read-write) Crossbar A Select Register 37
     */
    inline void get_SEL37(uint8_t &SEL75, uint8_t &SEL74) volatile
    {
        uint16_t curr = SEL37;

        SEL75 = (curr >> 8u) & 0b11111111u;
        SEL74 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL37's bit fields.
     *
     * (read-write) Crossbar A Select Register 37
     */
    inline void set_SEL37(uint8_t SEL75, uint8_t SEL74) volatile
    {
        uint16_t curr = SEL37;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL75 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL74 & 0b11111111u) << 0u;

        SEL37 = curr;
    }

    /**
     * Get SEL38's SEL77 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT77 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL38_SEL77() volatile
    {
        return (SEL38 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL38's SEL77 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT77 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL38_SEL77(uint8_t value) volatile
    {
        uint16_t curr = SEL38;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL38 = curr;
    }

    /**
     * Get SEL38's SEL76 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT76 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL38_SEL76() volatile
    {
        return (SEL38 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL38's SEL76 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT76 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL38_SEL76(uint8_t value) volatile
    {
        uint16_t curr = SEL38;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL38 = curr;
    }

    /**
     * Get all of SEL38's bit fields.
     *
     * (read-write) Crossbar A Select Register 38
     */
    inline void get_SEL38(uint8_t &SEL77, uint8_t &SEL76) volatile
    {
        uint16_t curr = SEL38;

        SEL77 = (curr >> 8u) & 0b11111111u;
        SEL76 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL38's bit fields.
     *
     * (read-write) Crossbar A Select Register 38
     */
    inline void set_SEL38(uint8_t SEL77, uint8_t SEL76) volatile
    {
        uint16_t curr = SEL38;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL77 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL76 & 0b11111111u) << 0u;

        SEL38 = curr;
    }

    /**
     * Get SEL39's SEL79 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT79 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL39_SEL79() volatile
    {
        return (SEL39 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL39's SEL79 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT79 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL39_SEL79(uint8_t value) volatile
    {
        uint16_t curr = SEL39;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL39 = curr;
    }

    /**
     * Get SEL39's SEL78 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT78 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL39_SEL78() volatile
    {
        return (SEL39 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL39's SEL78 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT78 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL39_SEL78(uint8_t value) volatile
    {
        uint16_t curr = SEL39;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL39 = curr;
    }

    /**
     * Get all of SEL39's bit fields.
     *
     * (read-write) Crossbar A Select Register 39
     */
    inline void get_SEL39(uint8_t &SEL79, uint8_t &SEL78) volatile
    {
        uint16_t curr = SEL39;

        SEL79 = (curr >> 8u) & 0b11111111u;
        SEL78 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL39's bit fields.
     *
     * (read-write) Crossbar A Select Register 39
     */
    inline void set_SEL39(uint8_t SEL79, uint8_t SEL78) volatile
    {
        uint16_t curr = SEL39;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL79 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL78 & 0b11111111u) << 0u;

        SEL39 = curr;
    }

    /**
     * Get SEL40's SEL81 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT81 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL40_SEL81() volatile
    {
        return (SEL40 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL40's SEL81 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT81 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL40_SEL81(uint8_t value) volatile
    {
        uint16_t curr = SEL40;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL40 = curr;
    }

    /**
     * Get SEL40's SEL80 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT80 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL40_SEL80() volatile
    {
        return (SEL40 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL40's SEL80 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT80 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL40_SEL80(uint8_t value) volatile
    {
        uint16_t curr = SEL40;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL40 = curr;
    }

    /**
     * Get all of SEL40's bit fields.
     *
     * (read-write) Crossbar A Select Register 40
     */
    inline void get_SEL40(uint8_t &SEL81, uint8_t &SEL80) volatile
    {
        uint16_t curr = SEL40;

        SEL81 = (curr >> 8u) & 0b11111111u;
        SEL80 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL40's bit fields.
     *
     * (read-write) Crossbar A Select Register 40
     */
    inline void set_SEL40(uint8_t SEL81, uint8_t SEL80) volatile
    {
        uint16_t curr = SEL40;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL81 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL80 & 0b11111111u) << 0u;

        SEL40 = curr;
    }

    /**
     * Get SEL41's SEL83 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT83 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL41_SEL83() volatile
    {
        return (SEL41 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL41's SEL83 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT83 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL41_SEL83(uint8_t value) volatile
    {
        uint16_t curr = SEL41;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL41 = curr;
    }

    /**
     * Get SEL41's SEL82 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT82 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL41_SEL82() volatile
    {
        return (SEL41 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL41's SEL82 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT82 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL41_SEL82(uint8_t value) volatile
    {
        uint16_t curr = SEL41;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL41 = curr;
    }

    /**
     * Get all of SEL41's bit fields.
     *
     * (read-write) Crossbar A Select Register 41
     */
    inline void get_SEL41(uint8_t &SEL83, uint8_t &SEL82) volatile
    {
        uint16_t curr = SEL41;

        SEL83 = (curr >> 8u) & 0b11111111u;
        SEL82 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL41's bit fields.
     *
     * (read-write) Crossbar A Select Register 41
     */
    inline void set_SEL41(uint8_t SEL83, uint8_t SEL82) volatile
    {
        uint16_t curr = SEL41;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL83 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL82 & 0b11111111u) << 0u;

        SEL41 = curr;
    }

    /**
     * Get SEL42's SEL85 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT85 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL42_SEL85() volatile
    {
        return (SEL42 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL42's SEL85 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT85 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL42_SEL85(uint8_t value) volatile
    {
        uint16_t curr = SEL42;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL42 = curr;
    }

    /**
     * Get SEL42's SEL84 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT84 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL42_SEL84() volatile
    {
        return (SEL42 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL42's SEL84 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT84 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL42_SEL84(uint8_t value) volatile
    {
        uint16_t curr = SEL42;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL42 = curr;
    }

    /**
     * Get all of SEL42's bit fields.
     *
     * (read-write) Crossbar A Select Register 42
     */
    inline void get_SEL42(uint8_t &SEL85, uint8_t &SEL84) volatile
    {
        uint16_t curr = SEL42;

        SEL85 = (curr >> 8u) & 0b11111111u;
        SEL84 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL42's bit fields.
     *
     * (read-write) Crossbar A Select Register 42
     */
    inline void set_SEL42(uint8_t SEL85, uint8_t SEL84) volatile
    {
        uint16_t curr = SEL42;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL85 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL84 & 0b11111111u) << 0u;

        SEL42 = curr;
    }

    /**
     * Get SEL43's SEL87 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT87 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL43_SEL87() volatile
    {
        return (SEL43 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL43's SEL87 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT87 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL43_SEL87(uint8_t value) volatile
    {
        uint16_t curr = SEL43;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL43 = curr;
    }

    /**
     * Get SEL43's SEL86 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT86 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL43_SEL86() volatile
    {
        return (SEL43 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL43's SEL86 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT86 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL43_SEL86(uint8_t value) volatile
    {
        uint16_t curr = SEL43;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL43 = curr;
    }

    /**
     * Get all of SEL43's bit fields.
     *
     * (read-write) Crossbar A Select Register 43
     */
    inline void get_SEL43(uint8_t &SEL87, uint8_t &SEL86) volatile
    {
        uint16_t curr = SEL43;

        SEL87 = (curr >> 8u) & 0b11111111u;
        SEL86 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL43's bit fields.
     *
     * (read-write) Crossbar A Select Register 43
     */
    inline void set_SEL43(uint8_t SEL87, uint8_t SEL86) volatile
    {
        uint16_t curr = SEL43;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL87 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL86 & 0b11111111u) << 0u;

        SEL43 = curr;
    }

    /**
     * Get SEL44's SEL89 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT89 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL44_SEL89() volatile
    {
        return (SEL44 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL44's SEL89 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT89 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL44_SEL89(uint8_t value) volatile
    {
        uint16_t curr = SEL44;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL44 = curr;
    }

    /**
     * Get SEL44's SEL88 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT88 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL44_SEL88() volatile
    {
        return (SEL44 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL44's SEL88 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT88 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL44_SEL88(uint8_t value) volatile
    {
        uint16_t curr = SEL44;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL44 = curr;
    }

    /**
     * Get all of SEL44's bit fields.
     *
     * (read-write) Crossbar A Select Register 44
     */
    inline void get_SEL44(uint8_t &SEL89, uint8_t &SEL88) volatile
    {
        uint16_t curr = SEL44;

        SEL89 = (curr >> 8u) & 0b11111111u;
        SEL88 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL44's bit fields.
     *
     * (read-write) Crossbar A Select Register 44
     */
    inline void set_SEL44(uint8_t SEL89, uint8_t SEL88) volatile
    {
        uint16_t curr = SEL44;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL89 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL88 & 0b11111111u) << 0u;

        SEL44 = curr;
    }

    /**
     * Get SEL45's SEL91 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT91 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL45_SEL91() volatile
    {
        return (SEL45 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL45's SEL91 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT91 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL45_SEL91(uint8_t value) volatile
    {
        uint16_t curr = SEL45;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL45 = curr;
    }

    /**
     * Get SEL45's SEL90 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT90 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL45_SEL90() volatile
    {
        return (SEL45 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL45's SEL90 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT90 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL45_SEL90(uint8_t value) volatile
    {
        uint16_t curr = SEL45;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL45 = curr;
    }

    /**
     * Get all of SEL45's bit fields.
     *
     * (read-write) Crossbar A Select Register 45
     */
    inline void get_SEL45(uint8_t &SEL91, uint8_t &SEL90) volatile
    {
        uint16_t curr = SEL45;

        SEL91 = (curr >> 8u) & 0b11111111u;
        SEL90 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL45's bit fields.
     *
     * (read-write) Crossbar A Select Register 45
     */
    inline void set_SEL45(uint8_t SEL91, uint8_t SEL90) volatile
    {
        uint16_t curr = SEL45;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL91 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL90 & 0b11111111u) << 0u;

        SEL45 = curr;
    }

    /**
     * Get SEL46's SEL93 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT93 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL46_SEL93() volatile
    {
        return (SEL46 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL46's SEL93 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT93 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL46_SEL93(uint8_t value) volatile
    {
        uint16_t curr = SEL46;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL46 = curr;
    }

    /**
     * Get SEL46's SEL92 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT92 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL46_SEL92() volatile
    {
        return (SEL46 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL46's SEL92 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT92 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL46_SEL92(uint8_t value) volatile
    {
        uint16_t curr = SEL46;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL46 = curr;
    }

    /**
     * Get all of SEL46's bit fields.
     *
     * (read-write) Crossbar A Select Register 46
     */
    inline void get_SEL46(uint8_t &SEL93, uint8_t &SEL92) volatile
    {
        uint16_t curr = SEL46;

        SEL93 = (curr >> 8u) & 0b11111111u;
        SEL92 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL46's bit fields.
     *
     * (read-write) Crossbar A Select Register 46
     */
    inline void set_SEL46(uint8_t SEL93, uint8_t SEL92) volatile
    {
        uint16_t curr = SEL46;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL93 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL92 & 0b11111111u) << 0u;

        SEL46 = curr;
    }

    /**
     * Get SEL47's SEL95 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT95 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL47_SEL95() volatile
    {
        return (SEL47 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL47's SEL95 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT95 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL47_SEL95(uint8_t value) volatile
    {
        uint16_t curr = SEL47;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL47 = curr;
    }

    /**
     * Get SEL47's SEL94 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT94 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL47_SEL94() volatile
    {
        return (SEL47 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL47's SEL94 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT94 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL47_SEL94(uint8_t value) volatile
    {
        uint16_t curr = SEL47;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL47 = curr;
    }

    /**
     * Get all of SEL47's bit fields.
     *
     * (read-write) Crossbar A Select Register 47
     */
    inline void get_SEL47(uint8_t &SEL95, uint8_t &SEL94) volatile
    {
        uint16_t curr = SEL47;

        SEL95 = (curr >> 8u) & 0b11111111u;
        SEL94 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL47's bit fields.
     *
     * (read-write) Crossbar A Select Register 47
     */
    inline void set_SEL47(uint8_t SEL95, uint8_t SEL94) volatile
    {
        uint16_t curr = SEL47;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL95 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL94 & 0b11111111u) << 0u;

        SEL47 = curr;
    }

    /**
     * Get SEL48's SEL97 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT97 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL48_SEL97() volatile
    {
        return (SEL48 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL48's SEL97 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT97 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL48_SEL97(uint8_t value) volatile
    {
        uint16_t curr = SEL48;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL48 = curr;
    }

    /**
     * Get SEL48's SEL96 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT96 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL48_SEL96() volatile
    {
        return (SEL48 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL48's SEL96 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT96 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL48_SEL96(uint8_t value) volatile
    {
        uint16_t curr = SEL48;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL48 = curr;
    }

    /**
     * Get all of SEL48's bit fields.
     *
     * (read-write) Crossbar A Select Register 48
     */
    inline void get_SEL48(uint8_t &SEL97, uint8_t &SEL96) volatile
    {
        uint16_t curr = SEL48;

        SEL97 = (curr >> 8u) & 0b11111111u;
        SEL96 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL48's bit fields.
     *
     * (read-write) Crossbar A Select Register 48
     */
    inline void set_SEL48(uint8_t SEL97, uint8_t SEL96) volatile
    {
        uint16_t curr = SEL48;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL97 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL96 & 0b11111111u) << 0u;

        SEL48 = curr;
    }

    /**
     * Get SEL49's SEL99 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT99 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL49_SEL99() volatile
    {
        return (SEL49 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL49's SEL99 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT99 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL49_SEL99(uint8_t value) volatile
    {
        uint16_t curr = SEL49;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL49 = curr;
    }

    /**
     * Get SEL49's SEL98 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT98 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL49_SEL98() volatile
    {
        return (SEL49 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL49's SEL98 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT98 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL49_SEL98(uint8_t value) volatile
    {
        uint16_t curr = SEL49;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL49 = curr;
    }

    /**
     * Get all of SEL49's bit fields.
     *
     * (read-write) Crossbar A Select Register 49
     */
    inline void get_SEL49(uint8_t &SEL99, uint8_t &SEL98) volatile
    {
        uint16_t curr = SEL49;

        SEL99 = (curr >> 8u) & 0b11111111u;
        SEL98 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL49's bit fields.
     *
     * (read-write) Crossbar A Select Register 49
     */
    inline void set_SEL49(uint8_t SEL99, uint8_t SEL98) volatile
    {
        uint16_t curr = SEL49;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL99 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL98 & 0b11111111u) << 0u;

        SEL49 = curr;
    }

    /**
     * Get SEL50's SEL101 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT101 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL50_SEL101() volatile
    {
        return (SEL50 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL50's SEL101 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT101 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL50_SEL101(uint8_t value) volatile
    {
        uint16_t curr = SEL50;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL50 = curr;
    }

    /**
     * Get SEL50's SEL100 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT100 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL50_SEL100() volatile
    {
        return (SEL50 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL50's SEL100 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT100 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL50_SEL100(uint8_t value) volatile
    {
        uint16_t curr = SEL50;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL50 = curr;
    }

    /**
     * Get all of SEL50's bit fields.
     *
     * (read-write) Crossbar A Select Register 50
     */
    inline void get_SEL50(uint8_t &SEL101, uint8_t &SEL100) volatile
    {
        uint16_t curr = SEL50;

        SEL101 = (curr >> 8u) & 0b11111111u;
        SEL100 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL50's bit fields.
     *
     * (read-write) Crossbar A Select Register 50
     */
    inline void set_SEL50(uint8_t SEL101, uint8_t SEL100) volatile
    {
        uint16_t curr = SEL50;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL101 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL100 & 0b11111111u) << 0u;

        SEL50 = curr;
    }

    /**
     * Get SEL51's SEL103 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT103 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL51_SEL103() volatile
    {
        return (SEL51 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL51's SEL103 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT103 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL51_SEL103(uint8_t value) volatile
    {
        uint16_t curr = SEL51;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL51 = curr;
    }

    /**
     * Get SEL51's SEL102 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT102 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL51_SEL102() volatile
    {
        return (SEL51 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL51's SEL102 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT102 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL51_SEL102(uint8_t value) volatile
    {
        uint16_t curr = SEL51;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL51 = curr;
    }

    /**
     * Get all of SEL51's bit fields.
     *
     * (read-write) Crossbar A Select Register 51
     */
    inline void get_SEL51(uint8_t &SEL103, uint8_t &SEL102) volatile
    {
        uint16_t curr = SEL51;

        SEL103 = (curr >> 8u) & 0b11111111u;
        SEL102 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL51's bit fields.
     *
     * (read-write) Crossbar A Select Register 51
     */
    inline void set_SEL51(uint8_t SEL103, uint8_t SEL102) volatile
    {
        uint16_t curr = SEL51;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL103 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL102 & 0b11111111u) << 0u;

        SEL51 = curr;
    }

    /**
     * Get SEL52's SEL105 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT105 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL52_SEL105() volatile
    {
        return (SEL52 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL52's SEL105 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT105 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL52_SEL105(uint8_t value) volatile
    {
        uint16_t curr = SEL52;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL52 = curr;
    }

    /**
     * Get SEL52's SEL104 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT104 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL52_SEL104() volatile
    {
        return (SEL52 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL52's SEL104 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT104 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL52_SEL104(uint8_t value) volatile
    {
        uint16_t curr = SEL52;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL52 = curr;
    }

    /**
     * Get all of SEL52's bit fields.
     *
     * (read-write) Crossbar A Select Register 52
     */
    inline void get_SEL52(uint8_t &SEL105, uint8_t &SEL104) volatile
    {
        uint16_t curr = SEL52;

        SEL105 = (curr >> 8u) & 0b11111111u;
        SEL104 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL52's bit fields.
     *
     * (read-write) Crossbar A Select Register 52
     */
    inline void set_SEL52(uint8_t SEL105, uint8_t SEL104) volatile
    {
        uint16_t curr = SEL52;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL105 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL104 & 0b11111111u) << 0u;

        SEL52 = curr;
    }

    /**
     * Get SEL53's SEL107 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT107 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL53_SEL107() volatile
    {
        return (SEL53 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL53's SEL107 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT107 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL53_SEL107(uint8_t value) volatile
    {
        uint16_t curr = SEL53;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL53 = curr;
    }

    /**
     * Get SEL53's SEL106 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT106 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL53_SEL106() volatile
    {
        return (SEL53 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL53's SEL106 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT106 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL53_SEL106(uint8_t value) volatile
    {
        uint16_t curr = SEL53;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL53 = curr;
    }

    /**
     * Get all of SEL53's bit fields.
     *
     * (read-write) Crossbar A Select Register 53
     */
    inline void get_SEL53(uint8_t &SEL107, uint8_t &SEL106) volatile
    {
        uint16_t curr = SEL53;

        SEL107 = (curr >> 8u) & 0b11111111u;
        SEL106 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL53's bit fields.
     *
     * (read-write) Crossbar A Select Register 53
     */
    inline void set_SEL53(uint8_t SEL107, uint8_t SEL106) volatile
    {
        uint16_t curr = SEL53;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL107 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL106 & 0b11111111u) << 0u;

        SEL53 = curr;
    }

    /**
     * Get SEL54's SEL109 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT109 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL54_SEL109() volatile
    {
        return (SEL54 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL54's SEL109 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT109 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL54_SEL109(uint8_t value) volatile
    {
        uint16_t curr = SEL54;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL54 = curr;
    }

    /**
     * Get SEL54's SEL108 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT108 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL54_SEL108() volatile
    {
        return (SEL54 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL54's SEL108 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT108 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL54_SEL108(uint8_t value) volatile
    {
        uint16_t curr = SEL54;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL54 = curr;
    }

    /**
     * Get all of SEL54's bit fields.
     *
     * (read-write) Crossbar A Select Register 54
     */
    inline void get_SEL54(uint8_t &SEL109, uint8_t &SEL108) volatile
    {
        uint16_t curr = SEL54;

        SEL109 = (curr >> 8u) & 0b11111111u;
        SEL108 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL54's bit fields.
     *
     * (read-write) Crossbar A Select Register 54
     */
    inline void set_SEL54(uint8_t SEL109, uint8_t SEL108) volatile
    {
        uint16_t curr = SEL54;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL109 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL108 & 0b11111111u) << 0u;

        SEL54 = curr;
    }

    /**
     * Get SEL55's SEL111 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT111 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL55_SEL111() volatile
    {
        return (SEL55 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL55's SEL111 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT111 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL55_SEL111(uint8_t value) volatile
    {
        uint16_t curr = SEL55;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL55 = curr;
    }

    /**
     * Get SEL55's SEL110 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT110 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL55_SEL110() volatile
    {
        return (SEL55 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL55's SEL110 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT110 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL55_SEL110(uint8_t value) volatile
    {
        uint16_t curr = SEL55;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL55 = curr;
    }

    /**
     * Get all of SEL55's bit fields.
     *
     * (read-write) Crossbar A Select Register 55
     */
    inline void get_SEL55(uint8_t &SEL111, uint8_t &SEL110) volatile
    {
        uint16_t curr = SEL55;

        SEL111 = (curr >> 8u) & 0b11111111u;
        SEL110 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL55's bit fields.
     *
     * (read-write) Crossbar A Select Register 55
     */
    inline void set_SEL55(uint8_t SEL111, uint8_t SEL110) volatile
    {
        uint16_t curr = SEL55;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL111 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL110 & 0b11111111u) << 0u;

        SEL55 = curr;
    }

    /**
     * Get SEL56's SEL113 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT113 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL56_SEL113() volatile
    {
        return (SEL56 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL56's SEL113 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT113 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL56_SEL113(uint8_t value) volatile
    {
        uint16_t curr = SEL56;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL56 = curr;
    }

    /**
     * Get SEL56's SEL112 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT112 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL56_SEL112() volatile
    {
        return (SEL56 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL56's SEL112 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT112 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL56_SEL112(uint8_t value) volatile
    {
        uint16_t curr = SEL56;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL56 = curr;
    }

    /**
     * Get all of SEL56's bit fields.
     *
     * (read-write) Crossbar A Select Register 56
     */
    inline void get_SEL56(uint8_t &SEL113, uint8_t &SEL112) volatile
    {
        uint16_t curr = SEL56;

        SEL113 = (curr >> 8u) & 0b11111111u;
        SEL112 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL56's bit fields.
     *
     * (read-write) Crossbar A Select Register 56
     */
    inline void set_SEL56(uint8_t SEL113, uint8_t SEL112) volatile
    {
        uint16_t curr = SEL56;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL113 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL112 & 0b11111111u) << 0u;

        SEL56 = curr;
    }

    /**
     * Get SEL57's SEL115 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT115 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL57_SEL115() volatile
    {
        return (SEL57 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL57's SEL115 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT115 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL57_SEL115(uint8_t value) volatile
    {
        uint16_t curr = SEL57;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL57 = curr;
    }

    /**
     * Get SEL57's SEL114 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT114 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL57_SEL114() volatile
    {
        return (SEL57 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL57's SEL114 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT114 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL57_SEL114(uint8_t value) volatile
    {
        uint16_t curr = SEL57;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL57 = curr;
    }

    /**
     * Get all of SEL57's bit fields.
     *
     * (read-write) Crossbar A Select Register 57
     */
    inline void get_SEL57(uint8_t &SEL115, uint8_t &SEL114) volatile
    {
        uint16_t curr = SEL57;

        SEL115 = (curr >> 8u) & 0b11111111u;
        SEL114 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL57's bit fields.
     *
     * (read-write) Crossbar A Select Register 57
     */
    inline void set_SEL57(uint8_t SEL115, uint8_t SEL114) volatile
    {
        uint16_t curr = SEL57;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL115 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL114 & 0b11111111u) << 0u;

        SEL57 = curr;
    }

    /**
     * Get SEL58's SEL117 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT117 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL58_SEL117() volatile
    {
        return (SEL58 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL58's SEL117 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT117 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL58_SEL117(uint8_t value) volatile
    {
        uint16_t curr = SEL58;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL58 = curr;
    }

    /**
     * Get SEL58's SEL116 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT116 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL58_SEL116() volatile
    {
        return (SEL58 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL58's SEL116 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT116 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL58_SEL116(uint8_t value) volatile
    {
        uint16_t curr = SEL58;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL58 = curr;
    }

    /**
     * Get all of SEL58's bit fields.
     *
     * (read-write) Crossbar A Select Register 58
     */
    inline void get_SEL58(uint8_t &SEL117, uint8_t &SEL116) volatile
    {
        uint16_t curr = SEL58;

        SEL117 = (curr >> 8u) & 0b11111111u;
        SEL116 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL58's bit fields.
     *
     * (read-write) Crossbar A Select Register 58
     */
    inline void set_SEL58(uint8_t SEL117, uint8_t SEL116) volatile
    {
        uint16_t curr = SEL58;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL117 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL116 & 0b11111111u) << 0u;

        SEL58 = curr;
    }

    /**
     * Get SEL59's SEL119 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT119 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL59_SEL119() volatile
    {
        return (SEL59 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL59's SEL119 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT119 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL59_SEL119(uint8_t value) volatile
    {
        uint16_t curr = SEL59;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL59 = curr;
    }

    /**
     * Get SEL59's SEL118 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT118 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL59_SEL118() volatile
    {
        return (SEL59 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL59's SEL118 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT118 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL59_SEL118(uint8_t value) volatile
    {
        uint16_t curr = SEL59;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL59 = curr;
    }

    /**
     * Get all of SEL59's bit fields.
     *
     * (read-write) Crossbar A Select Register 59
     */
    inline void get_SEL59(uint8_t &SEL119, uint8_t &SEL118) volatile
    {
        uint16_t curr = SEL59;

        SEL119 = (curr >> 8u) & 0b11111111u;
        SEL118 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL59's bit fields.
     *
     * (read-write) Crossbar A Select Register 59
     */
    inline void set_SEL59(uint8_t SEL119, uint8_t SEL118) volatile
    {
        uint16_t curr = SEL59;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL119 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL118 & 0b11111111u) << 0u;

        SEL59 = curr;
    }

    /**
     * Get SEL60's SEL121 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT121 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL60_SEL121() volatile
    {
        return (SEL60 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL60's SEL121 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT121 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL60_SEL121(uint8_t value) volatile
    {
        uint16_t curr = SEL60;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL60 = curr;
    }

    /**
     * Get SEL60's SEL120 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT120 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL60_SEL120() volatile
    {
        return (SEL60 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL60's SEL120 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT120 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL60_SEL120(uint8_t value) volatile
    {
        uint16_t curr = SEL60;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL60 = curr;
    }

    /**
     * Get all of SEL60's bit fields.
     *
     * (read-write) Crossbar A Select Register 60
     */
    inline void get_SEL60(uint8_t &SEL121, uint8_t &SEL120) volatile
    {
        uint16_t curr = SEL60;

        SEL121 = (curr >> 8u) & 0b11111111u;
        SEL120 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL60's bit fields.
     *
     * (read-write) Crossbar A Select Register 60
     */
    inline void set_SEL60(uint8_t SEL121, uint8_t SEL120) volatile
    {
        uint16_t curr = SEL60;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL121 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL120 & 0b11111111u) << 0u;

        SEL60 = curr;
    }

    /**
     * Get SEL61's SEL123 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT123 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL61_SEL123() volatile
    {
        return (SEL61 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL61's SEL123 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT123 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL61_SEL123(uint8_t value) volatile
    {
        uint16_t curr = SEL61;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL61 = curr;
    }

    /**
     * Get SEL61's SEL122 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT122 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL61_SEL122() volatile
    {
        return (SEL61 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL61's SEL122 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT122 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL61_SEL122(uint8_t value) volatile
    {
        uint16_t curr = SEL61;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL61 = curr;
    }

    /**
     * Get all of SEL61's bit fields.
     *
     * (read-write) Crossbar A Select Register 61
     */
    inline void get_SEL61(uint8_t &SEL123, uint8_t &SEL122) volatile
    {
        uint16_t curr = SEL61;

        SEL123 = (curr >> 8u) & 0b11111111u;
        SEL122 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL61's bit fields.
     *
     * (read-write) Crossbar A Select Register 61
     */
    inline void set_SEL61(uint8_t SEL123, uint8_t SEL122) volatile
    {
        uint16_t curr = SEL61;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL123 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL122 & 0b11111111u) << 0u;

        SEL61 = curr;
    }

    /**
     * Get SEL62's SEL125 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT125 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL62_SEL125() volatile
    {
        return (SEL62 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL62's SEL125 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT125 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL62_SEL125(uint8_t value) volatile
    {
        uint16_t curr = SEL62;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL62 = curr;
    }

    /**
     * Get SEL62's SEL124 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT124 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL62_SEL124() volatile
    {
        return (SEL62 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL62's SEL124 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT124 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL62_SEL124(uint8_t value) volatile
    {
        uint16_t curr = SEL62;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL62 = curr;
    }

    /**
     * Get all of SEL62's bit fields.
     *
     * (read-write) Crossbar A Select Register 62
     */
    inline void get_SEL62(uint8_t &SEL125, uint8_t &SEL124) volatile
    {
        uint16_t curr = SEL62;

        SEL125 = (curr >> 8u) & 0b11111111u;
        SEL124 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL62's bit fields.
     *
     * (read-write) Crossbar A Select Register 62
     */
    inline void set_SEL62(uint8_t SEL125, uint8_t SEL124) volatile
    {
        uint16_t curr = SEL62;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL125 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL124 & 0b11111111u) << 0u;

        SEL62 = curr;
    }

    /**
     * Get SEL63's SEL127 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT127 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL63_SEL127() volatile
    {
        return (SEL63 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL63's SEL127 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT127 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL63_SEL127(uint8_t value) volatile
    {
        uint16_t curr = SEL63;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL63 = curr;
    }

    /**
     * Get SEL63's SEL126 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT126 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL63_SEL126() volatile
    {
        return (SEL63 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL63's SEL126 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT126 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL63_SEL126(uint8_t value) volatile
    {
        uint16_t curr = SEL63;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL63 = curr;
    }

    /**
     * Get all of SEL63's bit fields.
     *
     * (read-write) Crossbar A Select Register 63
     */
    inline void get_SEL63(uint8_t &SEL127, uint8_t &SEL126) volatile
    {
        uint16_t curr = SEL63;

        SEL127 = (curr >> 8u) & 0b11111111u;
        SEL126 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL63's bit fields.
     *
     * (read-write) Crossbar A Select Register 63
     */
    inline void set_SEL63(uint8_t SEL127, uint8_t SEL126) volatile
    {
        uint16_t curr = SEL63;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL127 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL126 & 0b11111111u) << 0u;

        SEL63 = curr;
    }

    /**
     * Get SEL64's SEL129 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT129 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL64_SEL129() volatile
    {
        return (SEL64 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL64's SEL129 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT129 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL64_SEL129(uint8_t value) volatile
    {
        uint16_t curr = SEL64;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL64 = curr;
    }

    /**
     * Get SEL64's SEL128 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT128 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL64_SEL128() volatile
    {
        return (SEL64 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL64's SEL128 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT128 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL64_SEL128(uint8_t value) volatile
    {
        uint16_t curr = SEL64;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL64 = curr;
    }

    /**
     * Get all of SEL64's bit fields.
     *
     * (read-write) Crossbar A Select Register 64
     */
    inline void get_SEL64(uint8_t &SEL129, uint8_t &SEL128) volatile
    {
        uint16_t curr = SEL64;

        SEL129 = (curr >> 8u) & 0b11111111u;
        SEL128 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL64's bit fields.
     *
     * (read-write) Crossbar A Select Register 64
     */
    inline void set_SEL64(uint8_t SEL129, uint8_t SEL128) volatile
    {
        uint16_t curr = SEL64;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL129 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL128 & 0b11111111u) << 0u;

        SEL64 = curr;
    }

    /**
     * Get SEL65's SEL131 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT131 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL65_SEL131() volatile
    {
        return (SEL65 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL65's SEL131 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT131 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL65_SEL131(uint8_t value) volatile
    {
        uint16_t curr = SEL65;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL65 = curr;
    }

    /**
     * Get SEL65's SEL130 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT130 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL65_SEL130() volatile
    {
        return (SEL65 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL65's SEL130 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT130 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL65_SEL130(uint8_t value) volatile
    {
        uint16_t curr = SEL65;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL65 = curr;
    }

    /**
     * Get all of SEL65's bit fields.
     *
     * (read-write) Crossbar A Select Register 65
     */
    inline void get_SEL65(uint8_t &SEL131, uint8_t &SEL130) volatile
    {
        uint16_t curr = SEL65;

        SEL131 = (curr >> 8u) & 0b11111111u;
        SEL130 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL65's bit fields.
     *
     * (read-write) Crossbar A Select Register 65
     */
    inline void set_SEL65(uint8_t SEL131, uint8_t SEL130) volatile
    {
        uint16_t curr = SEL65;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL131 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL130 & 0b11111111u) << 0u;

        SEL65 = curr;
    }

    /**
     * Get SEL66's SEL133 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT133 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL66_SEL133() volatile
    {
        return (SEL66 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL66's SEL133 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT133 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL66_SEL133(uint8_t value) volatile
    {
        uint16_t curr = SEL66;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL66 = curr;
    }

    /**
     * Get SEL66's SEL132 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT132 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL66_SEL132() volatile
    {
        return (SEL66 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL66's SEL132 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT132 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL66_SEL132(uint8_t value) volatile
    {
        uint16_t curr = SEL66;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL66 = curr;
    }

    /**
     * Get all of SEL66's bit fields.
     *
     * (read-write) Crossbar A Select Register 66
     */
    inline void get_SEL66(uint8_t &SEL133, uint8_t &SEL132) volatile
    {
        uint16_t curr = SEL66;

        SEL133 = (curr >> 8u) & 0b11111111u;
        SEL132 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL66's bit fields.
     *
     * (read-write) Crossbar A Select Register 66
     */
    inline void set_SEL66(uint8_t SEL133, uint8_t SEL132) volatile
    {
        uint16_t curr = SEL66;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL133 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL132 & 0b11111111u) << 0u;

        SEL66 = curr;
    }

    /**
     * Get SEL67's SEL135 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT135 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL67_SEL135() volatile
    {
        return (SEL67 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL67's SEL135 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT135 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL67_SEL135(uint8_t value) volatile
    {
        uint16_t curr = SEL67;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL67 = curr;
    }

    /**
     * Get SEL67's SEL134 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT134 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL67_SEL134() volatile
    {
        return (SEL67 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL67's SEL134 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT134 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL67_SEL134(uint8_t value) volatile
    {
        uint16_t curr = SEL67;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL67 = curr;
    }

    /**
     * Get all of SEL67's bit fields.
     *
     * (read-write) Crossbar A Select Register 67
     */
    inline void get_SEL67(uint8_t &SEL135, uint8_t &SEL134) volatile
    {
        uint16_t curr = SEL67;

        SEL135 = (curr >> 8u) & 0b11111111u;
        SEL134 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL67's bit fields.
     *
     * (read-write) Crossbar A Select Register 67
     */
    inline void set_SEL67(uint8_t SEL135, uint8_t SEL134) volatile
    {
        uint16_t curr = SEL67;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL135 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL134 & 0b11111111u) << 0u;

        SEL67 = curr;
    }

    /**
     * Get SEL68's SEL137 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT137 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL68_SEL137() volatile
    {
        return (SEL68 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL68's SEL137 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT137 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL68_SEL137(uint8_t value) volatile
    {
        uint16_t curr = SEL68;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL68 = curr;
    }

    /**
     * Get SEL68's SEL136 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT136 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL68_SEL136() volatile
    {
        return (SEL68 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL68's SEL136 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT136 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL68_SEL136(uint8_t value) volatile
    {
        uint16_t curr = SEL68;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL68 = curr;
    }

    /**
     * Get all of SEL68's bit fields.
     *
     * (read-write) Crossbar A Select Register 68
     */
    inline void get_SEL68(uint8_t &SEL137, uint8_t &SEL136) volatile
    {
        uint16_t curr = SEL68;

        SEL137 = (curr >> 8u) & 0b11111111u;
        SEL136 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL68's bit fields.
     *
     * (read-write) Crossbar A Select Register 68
     */
    inline void set_SEL68(uint8_t SEL137, uint8_t SEL136) volatile
    {
        uint16_t curr = SEL68;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL137 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL136 & 0b11111111u) << 0u;

        SEL68 = curr;
    }

    /**
     * Get SEL69's SEL139 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT139 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL69_SEL139() volatile
    {
        return (SEL69 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL69's SEL139 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT139 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL69_SEL139(uint8_t value) volatile
    {
        uint16_t curr = SEL69;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL69 = curr;
    }

    /**
     * Get SEL69's SEL138 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT138 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL69_SEL138() volatile
    {
        return (SEL69 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL69's SEL138 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT138 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL69_SEL138(uint8_t value) volatile
    {
        uint16_t curr = SEL69;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL69 = curr;
    }

    /**
     * Get all of SEL69's bit fields.
     *
     * (read-write) Crossbar A Select Register 69
     */
    inline void get_SEL69(uint8_t &SEL139, uint8_t &SEL138) volatile
    {
        uint16_t curr = SEL69;

        SEL139 = (curr >> 8u) & 0b11111111u;
        SEL138 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL69's bit fields.
     *
     * (read-write) Crossbar A Select Register 69
     */
    inline void set_SEL69(uint8_t SEL139, uint8_t SEL138) volatile
    {
        uint16_t curr = SEL69;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL139 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL138 & 0b11111111u) << 0u;

        SEL69 = curr;
    }

    /**
     * Get SEL70's SEL141 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT141 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL70_SEL141() volatile
    {
        return (SEL70 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL70's SEL141 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT141 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL70_SEL141(uint8_t value) volatile
    {
        uint16_t curr = SEL70;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL70 = curr;
    }

    /**
     * Get SEL70's SEL140 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT140 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL70_SEL140() volatile
    {
        return (SEL70 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL70's SEL140 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT140 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL70_SEL140(uint8_t value) volatile
    {
        uint16_t curr = SEL70;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL70 = curr;
    }

    /**
     * Get all of SEL70's bit fields.
     *
     * (read-write) Crossbar A Select Register 70
     */
    inline void get_SEL70(uint8_t &SEL141, uint8_t &SEL140) volatile
    {
        uint16_t curr = SEL70;

        SEL141 = (curr >> 8u) & 0b11111111u;
        SEL140 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL70's bit fields.
     *
     * (read-write) Crossbar A Select Register 70
     */
    inline void set_SEL70(uint8_t SEL141, uint8_t SEL140) volatile
    {
        uint16_t curr = SEL70;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL141 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL140 & 0b11111111u) << 0u;

        SEL70 = curr;
    }

    /**
     * Get SEL71's SEL143 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT143 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL71_SEL143() volatile
    {
        return (SEL71 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL71's SEL143 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT143 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL71_SEL143(uint8_t value) volatile
    {
        uint16_t curr = SEL71;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL71 = curr;
    }

    /**
     * Get SEL71's SEL142 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT142 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL71_SEL142() volatile
    {
        return (SEL71 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL71's SEL142 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT142 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL71_SEL142(uint8_t value) volatile
    {
        uint16_t curr = SEL71;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL71 = curr;
    }

    /**
     * Get all of SEL71's bit fields.
     *
     * (read-write) Crossbar A Select Register 71
     */
    inline void get_SEL71(uint8_t &SEL143, uint8_t &SEL142) volatile
    {
        uint16_t curr = SEL71;

        SEL143 = (curr >> 8u) & 0b11111111u;
        SEL142 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL71's bit fields.
     *
     * (read-write) Crossbar A Select Register 71
     */
    inline void set_SEL71(uint8_t SEL143, uint8_t SEL142) volatile
    {
        uint16_t curr = SEL71;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL143 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL142 & 0b11111111u) << 0u;

        SEL71 = curr;
    }

    /**
     * Get SEL72's SEL145 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT145 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL72_SEL145() volatile
    {
        return (SEL72 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL72's SEL145 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT145 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL72_SEL145(uint8_t value) volatile
    {
        uint16_t curr = SEL72;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL72 = curr;
    }

    /**
     * Get SEL72's SEL144 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT144 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL72_SEL144() volatile
    {
        return (SEL72 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL72's SEL144 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT144 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL72_SEL144(uint8_t value) volatile
    {
        uint16_t curr = SEL72;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL72 = curr;
    }

    /**
     * Get all of SEL72's bit fields.
     *
     * (read-write) Crossbar A Select Register 72
     */
    inline void get_SEL72(uint8_t &SEL145, uint8_t &SEL144) volatile
    {
        uint16_t curr = SEL72;

        SEL145 = (curr >> 8u) & 0b11111111u;
        SEL144 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL72's bit fields.
     *
     * (read-write) Crossbar A Select Register 72
     */
    inline void set_SEL72(uint8_t SEL145, uint8_t SEL144) volatile
    {
        uint16_t curr = SEL72;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL145 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL144 & 0b11111111u) << 0u;

        SEL72 = curr;
    }

    /**
     * Get SEL73's SEL147 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT147 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL73_SEL147() volatile
    {
        return (SEL73 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL73's SEL147 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT147 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL73_SEL147(uint8_t value) volatile
    {
        uint16_t curr = SEL73;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL73 = curr;
    }

    /**
     * Get SEL73's SEL146 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT146 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL73_SEL146() volatile
    {
        return (SEL73 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL73's SEL146 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT146 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL73_SEL146(uint8_t value) volatile
    {
        uint16_t curr = SEL73;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL73 = curr;
    }

    /**
     * Get all of SEL73's bit fields.
     *
     * (read-write) Crossbar A Select Register 73
     */
    inline void get_SEL73(uint8_t &SEL147, uint8_t &SEL146) volatile
    {
        uint16_t curr = SEL73;

        SEL147 = (curr >> 8u) & 0b11111111u;
        SEL146 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL73's bit fields.
     *
     * (read-write) Crossbar A Select Register 73
     */
    inline void set_SEL73(uint8_t SEL147, uint8_t SEL146) volatile
    {
        uint16_t curr = SEL73;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL147 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL146 & 0b11111111u) << 0u;

        SEL73 = curr;
    }

    /**
     * Get SEL74's SEL149 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT149 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL74_SEL149() volatile
    {
        return (SEL74 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL74's SEL149 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT149 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL74_SEL149(uint8_t value) volatile
    {
        uint16_t curr = SEL74;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL74 = curr;
    }

    /**
     * Get SEL74's SEL148 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT148 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL74_SEL148() volatile
    {
        return (SEL74 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL74's SEL148 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT148 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL74_SEL148(uint8_t value) volatile
    {
        uint16_t curr = SEL74;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL74 = curr;
    }

    /**
     * Get all of SEL74's bit fields.
     *
     * (read-write) Crossbar A Select Register 74
     */
    inline void get_SEL74(uint8_t &SEL149, uint8_t &SEL148) volatile
    {
        uint16_t curr = SEL74;

        SEL149 = (curr >> 8u) & 0b11111111u;
        SEL148 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL74's bit fields.
     *
     * (read-write) Crossbar A Select Register 74
     */
    inline void set_SEL74(uint8_t SEL149, uint8_t SEL148) volatile
    {
        uint16_t curr = SEL74;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL149 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL148 & 0b11111111u) << 0u;

        SEL74 = curr;
    }

    /**
     * Get SEL75's SEL151 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT151 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL75_SEL151() volatile
    {
        return (SEL75 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL75's SEL151 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT151 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL75_SEL151(uint8_t value) volatile
    {
        uint16_t curr = SEL75;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL75 = curr;
    }

    /**
     * Get SEL75's SEL150 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT150 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL75_SEL150() volatile
    {
        return (SEL75 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL75's SEL150 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT150 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL75_SEL150(uint8_t value) volatile
    {
        uint16_t curr = SEL75;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL75 = curr;
    }

    /**
     * Get all of SEL75's bit fields.
     *
     * (read-write) Crossbar A Select Register 75
     */
    inline void get_SEL75(uint8_t &SEL151, uint8_t &SEL150) volatile
    {
        uint16_t curr = SEL75;

        SEL151 = (curr >> 8u) & 0b11111111u;
        SEL150 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL75's bit fields.
     *
     * (read-write) Crossbar A Select Register 75
     */
    inline void set_SEL75(uint8_t SEL151, uint8_t SEL150) volatile
    {
        uint16_t curr = SEL75;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL151 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL150 & 0b11111111u) << 0u;

        SEL75 = curr;
    }

    /**
     * Get SEL76's SEL153 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT153 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL76_SEL153() volatile
    {
        return (SEL76 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL76's SEL153 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT153 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL76_SEL153(uint8_t value) volatile
    {
        uint16_t curr = SEL76;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL76 = curr;
    }

    /**
     * Get SEL76's SEL152 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT152 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL76_SEL152() volatile
    {
        return (SEL76 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL76's SEL152 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT152 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL76_SEL152(uint8_t value) volatile
    {
        uint16_t curr = SEL76;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL76 = curr;
    }

    /**
     * Get all of SEL76's bit fields.
     *
     * (read-write) Crossbar A Select Register 76
     */
    inline void get_SEL76(uint8_t &SEL153, uint8_t &SEL152) volatile
    {
        uint16_t curr = SEL76;

        SEL153 = (curr >> 8u) & 0b11111111u;
        SEL152 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL76's bit fields.
     *
     * (read-write) Crossbar A Select Register 76
     */
    inline void set_SEL76(uint8_t SEL153, uint8_t SEL152) volatile
    {
        uint16_t curr = SEL76;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL153 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL152 & 0b11111111u) << 0u;

        SEL76 = curr;
    }

    /**
     * Get SEL77's SEL155 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT155 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL77_SEL155() volatile
    {
        return (SEL77 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL77's SEL155 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT155 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL77_SEL155(uint8_t value) volatile
    {
        uint16_t curr = SEL77;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL77 = curr;
    }

    /**
     * Get SEL77's SEL154 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT154 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL77_SEL154() volatile
    {
        return (SEL77 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL77's SEL154 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT154 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL77_SEL154(uint8_t value) volatile
    {
        uint16_t curr = SEL77;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL77 = curr;
    }

    /**
     * Get all of SEL77's bit fields.
     *
     * (read-write) Crossbar A Select Register 77
     */
    inline void get_SEL77(uint8_t &SEL155, uint8_t &SEL154) volatile
    {
        uint16_t curr = SEL77;

        SEL155 = (curr >> 8u) & 0b11111111u;
        SEL154 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL77's bit fields.
     *
     * (read-write) Crossbar A Select Register 77
     */
    inline void set_SEL77(uint8_t SEL155, uint8_t SEL154) volatile
    {
        uint16_t curr = SEL77;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL155 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL154 & 0b11111111u) << 0u;

        SEL77 = curr;
    }

    /**
     * Get SEL78's SEL157 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT157 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL78_SEL157() volatile
    {
        return (SEL78 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL78's SEL157 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT157 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL78_SEL157(uint8_t value) volatile
    {
        uint16_t curr = SEL78;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL78 = curr;
    }

    /**
     * Get SEL78's SEL156 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT156 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL78_SEL156() volatile
    {
        return (SEL78 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL78's SEL156 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT156 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL78_SEL156(uint8_t value) volatile
    {
        uint16_t curr = SEL78;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL78 = curr;
    }

    /**
     * Get all of SEL78's bit fields.
     *
     * (read-write) Crossbar A Select Register 78
     */
    inline void get_SEL78(uint8_t &SEL157, uint8_t &SEL156) volatile
    {
        uint16_t curr = SEL78;

        SEL157 = (curr >> 8u) & 0b11111111u;
        SEL156 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL78's bit fields.
     *
     * (read-write) Crossbar A Select Register 78
     */
    inline void set_SEL78(uint8_t SEL157, uint8_t SEL156) volatile
    {
        uint16_t curr = SEL78;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL157 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL156 & 0b11111111u) << 0u;

        SEL78 = curr;
    }

    /**
     * Get SEL79's SEL159 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT159 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL79_SEL159() volatile
    {
        return (SEL79 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL79's SEL159 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT159 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL79_SEL159(uint8_t value) volatile
    {
        uint16_t curr = SEL79;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL79 = curr;
    }

    /**
     * Get SEL79's SEL158 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT158 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL79_SEL158() volatile
    {
        return (SEL79 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL79's SEL158 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT158 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL79_SEL158(uint8_t value) volatile
    {
        uint16_t curr = SEL79;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL79 = curr;
    }

    /**
     * Get all of SEL79's bit fields.
     *
     * (read-write) Crossbar A Select Register 79
     */
    inline void get_SEL79(uint8_t &SEL159, uint8_t &SEL158) volatile
    {
        uint16_t curr = SEL79;

        SEL159 = (curr >> 8u) & 0b11111111u;
        SEL158 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL79's bit fields.
     *
     * (read-write) Crossbar A Select Register 79
     */
    inline void set_SEL79(uint8_t SEL159, uint8_t SEL158) volatile
    {
        uint16_t curr = SEL79;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL159 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL158 & 0b11111111u) << 0u;

        SEL79 = curr;
    }

    /**
     * Get SEL80's SEL161 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT161 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL80_SEL161() volatile
    {
        return (SEL80 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL80's SEL161 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT161 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL80_SEL161(uint8_t value) volatile
    {
        uint16_t curr = SEL80;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL80 = curr;
    }

    /**
     * Get SEL80's SEL160 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT160 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL80_SEL160() volatile
    {
        return (SEL80 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL80's SEL160 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT160 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL80_SEL160(uint8_t value) volatile
    {
        uint16_t curr = SEL80;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL80 = curr;
    }

    /**
     * Get all of SEL80's bit fields.
     *
     * (read-write) Crossbar A Select Register 80
     */
    inline void get_SEL80(uint8_t &SEL161, uint8_t &SEL160) volatile
    {
        uint16_t curr = SEL80;

        SEL161 = (curr >> 8u) & 0b11111111u;
        SEL160 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL80's bit fields.
     *
     * (read-write) Crossbar A Select Register 80
     */
    inline void set_SEL80(uint8_t SEL161, uint8_t SEL160) volatile
    {
        uint16_t curr = SEL80;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL161 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL160 & 0b11111111u) << 0u;

        SEL80 = curr;
    }

    /**
     * Get SEL81's SEL163 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT163 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL81_SEL163() volatile
    {
        return (SEL81 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL81's SEL163 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT163 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL81_SEL163(uint8_t value) volatile
    {
        uint16_t curr = SEL81;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL81 = curr;
    }

    /**
     * Get SEL81's SEL162 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT162 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL81_SEL162() volatile
    {
        return (SEL81 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL81's SEL162 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT162 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL81_SEL162(uint8_t value) volatile
    {
        uint16_t curr = SEL81;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL81 = curr;
    }

    /**
     * Get all of SEL81's bit fields.
     *
     * (read-write) Crossbar A Select Register 81
     */
    inline void get_SEL81(uint8_t &SEL163, uint8_t &SEL162) volatile
    {
        uint16_t curr = SEL81;

        SEL163 = (curr >> 8u) & 0b11111111u;
        SEL162 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL81's bit fields.
     *
     * (read-write) Crossbar A Select Register 81
     */
    inline void set_SEL81(uint8_t SEL163, uint8_t SEL162) volatile
    {
        uint16_t curr = SEL81;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL163 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL162 & 0b11111111u) << 0u;

        SEL81 = curr;
    }

    /**
     * Get SEL82's SEL165 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT165 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL82_SEL165() volatile
    {
        return (SEL82 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL82's SEL165 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT165 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL82_SEL165(uint8_t value) volatile
    {
        uint16_t curr = SEL82;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL82 = curr;
    }

    /**
     * Get SEL82's SEL164 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT164 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL82_SEL164() volatile
    {
        return (SEL82 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL82's SEL164 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT164 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL82_SEL164(uint8_t value) volatile
    {
        uint16_t curr = SEL82;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL82 = curr;
    }

    /**
     * Get all of SEL82's bit fields.
     *
     * (read-write) Crossbar A Select Register 82
     */
    inline void get_SEL82(uint8_t &SEL165, uint8_t &SEL164) volatile
    {
        uint16_t curr = SEL82;

        SEL165 = (curr >> 8u) & 0b11111111u;
        SEL164 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL82's bit fields.
     *
     * (read-write) Crossbar A Select Register 82
     */
    inline void set_SEL82(uint8_t SEL165, uint8_t SEL164) volatile
    {
        uint16_t curr = SEL82;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL165 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL164 & 0b11111111u) << 0u;

        SEL82 = curr;
    }

    /**
     * Get SEL83's SEL167 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT167 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL83_SEL167() volatile
    {
        return (SEL83 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL83's SEL167 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT167 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL83_SEL167(uint8_t value) volatile
    {
        uint16_t curr = SEL83;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL83 = curr;
    }

    /**
     * Get SEL83's SEL166 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT166 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL83_SEL166() volatile
    {
        return (SEL83 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL83's SEL166 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT166 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL83_SEL166(uint8_t value) volatile
    {
        uint16_t curr = SEL83;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL83 = curr;
    }

    /**
     * Get all of SEL83's bit fields.
     *
     * (read-write) Crossbar A Select Register 83
     */
    inline void get_SEL83(uint8_t &SEL167, uint8_t &SEL166) volatile
    {
        uint16_t curr = SEL83;

        SEL167 = (curr >> 8u) & 0b11111111u;
        SEL166 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL83's bit fields.
     *
     * (read-write) Crossbar A Select Register 83
     */
    inline void set_SEL83(uint8_t SEL167, uint8_t SEL166) volatile
    {
        uint16_t curr = SEL83;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL167 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL166 & 0b11111111u) << 0u;

        SEL83 = curr;
    }

    /**
     * Get SEL84's SEL169 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT169 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL84_SEL169() volatile
    {
        return (SEL84 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL84's SEL169 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT169 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL84_SEL169(uint8_t value) volatile
    {
        uint16_t curr = SEL84;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL84 = curr;
    }

    /**
     * Get SEL84's SEL168 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT168 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL84_SEL168() volatile
    {
        return (SEL84 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL84's SEL168 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT168 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL84_SEL168(uint8_t value) volatile
    {
        uint16_t curr = SEL84;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL84 = curr;
    }

    /**
     * Get all of SEL84's bit fields.
     *
     * (read-write) Crossbar A Select Register 84
     */
    inline void get_SEL84(uint8_t &SEL169, uint8_t &SEL168) volatile
    {
        uint16_t curr = SEL84;

        SEL169 = (curr >> 8u) & 0b11111111u;
        SEL168 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL84's bit fields.
     *
     * (read-write) Crossbar A Select Register 84
     */
    inline void set_SEL84(uint8_t SEL169, uint8_t SEL168) volatile
    {
        uint16_t curr = SEL84;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL169 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL168 & 0b11111111u) << 0u;

        SEL84 = curr;
    }

    /**
     * Get SEL85's SEL171 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT171 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL85_SEL171() volatile
    {
        return (SEL85 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL85's SEL171 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT171 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL85_SEL171(uint8_t value) volatile
    {
        uint16_t curr = SEL85;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL85 = curr;
    }

    /**
     * Get SEL85's SEL170 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT170 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL85_SEL170() volatile
    {
        return (SEL85 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL85's SEL170 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT170 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL85_SEL170(uint8_t value) volatile
    {
        uint16_t curr = SEL85;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL85 = curr;
    }

    /**
     * Get all of SEL85's bit fields.
     *
     * (read-write) Crossbar A Select Register 85
     */
    inline void get_SEL85(uint8_t &SEL171, uint8_t &SEL170) volatile
    {
        uint16_t curr = SEL85;

        SEL171 = (curr >> 8u) & 0b11111111u;
        SEL170 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL85's bit fields.
     *
     * (read-write) Crossbar A Select Register 85
     */
    inline void set_SEL85(uint8_t SEL171, uint8_t SEL170) volatile
    {
        uint16_t curr = SEL85;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL171 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL170 & 0b11111111u) << 0u;

        SEL85 = curr;
    }

    /**
     * Get SEL86's SEL173 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT173 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL86_SEL173() volatile
    {
        return (SEL86 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL86's SEL173 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT173 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL86_SEL173(uint8_t value) volatile
    {
        uint16_t curr = SEL86;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL86 = curr;
    }

    /**
     * Get SEL86's SEL172 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT172 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL86_SEL172() volatile
    {
        return (SEL86 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL86's SEL172 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT172 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL86_SEL172(uint8_t value) volatile
    {
        uint16_t curr = SEL86;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL86 = curr;
    }

    /**
     * Get all of SEL86's bit fields.
     *
     * (read-write) Crossbar A Select Register 86
     */
    inline void get_SEL86(uint8_t &SEL173, uint8_t &SEL172) volatile
    {
        uint16_t curr = SEL86;

        SEL173 = (curr >> 8u) & 0b11111111u;
        SEL172 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL86's bit fields.
     *
     * (read-write) Crossbar A Select Register 86
     */
    inline void set_SEL86(uint8_t SEL173, uint8_t SEL172) volatile
    {
        uint16_t curr = SEL86;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL173 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL172 & 0b11111111u) << 0u;

        SEL86 = curr;
    }

    /**
     * Get SEL87's SEL175 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT175 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL87_SEL175() volatile
    {
        return (SEL87 >> 8u) & 0b11111111u;
    }

    /**
     * Set SEL87's SEL175 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT175 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL87_SEL175(uint8_t value) volatile
    {
        uint16_t curr = SEL87;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SEL87 = curr;
    }

    /**
     * Get SEL87's SEL174 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT174 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL87_SEL174() volatile
    {
        return (SEL87 >> 0u) & 0b11111111u;
    }

    /**
     * Set SEL87's SEL174 field.
     *
     * Input (XBARA_INn) to be muxed to XBARA_OUT174 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL87_SEL174(uint8_t value) volatile
    {
        uint16_t curr = SEL87;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SEL87 = curr;
    }

    /**
     * Get all of SEL87's bit fields.
     *
     * (read-write) Crossbar A Select Register 87
     */
    inline void get_SEL87(uint8_t &SEL175, uint8_t &SEL174) volatile
    {
        uint16_t curr = SEL87;

        SEL175 = (curr >> 8u) & 0b11111111u;
        SEL174 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SEL87's bit fields.
     *
     * (read-write) Crossbar A Select Register 87
     */
    inline void set_SEL87(uint8_t SEL175, uint8_t SEL174) volatile
    {
        uint16_t curr = SEL87;

        curr &= ~(0b11111111u << 8u);
        curr |= (SEL175 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SEL174 & 0b11111111u) << 0u;

        SEL87 = curr;
    }

    /**
     * Get CTRL0's STS1 bit.
     *
     * Edge detection status for XBAR_OUT1
     */
    inline bool get_CTRL0_STS1() volatile
    {
        return CTRL0 & (1u << 12u);
    }

    /**
     * Set CTRL0's STS1 bit.
     *
     * Edge detection status for XBAR_OUT1
     */
    inline void set_CTRL0_STS1() volatile
    {
        CTRL0 |= 1u << 12u;
    }

    /**
     * Clear CTRL0's STS1 bit.
     *
     * Edge detection status for XBAR_OUT1
     */
    inline void clear_CTRL0_STS1() volatile
    {
        CTRL0 &= ~(1u << 12u);
    }

    /**
     * Toggle CTRL0's STS1 bit.
     *
     * Edge detection status for XBAR_OUT1
     */
    inline void toggle_CTRL0_STS1() volatile
    {
        CTRL0 ^= 1u << 12u;
    }

    /**
     * Get CTRL0's EDGE1 field.
     *
     * Active edge for edge detection on XBAR_OUT1
     */
    inline XBARA1_CTRL0_EDGE1 get_CTRL0_EDGE1() volatile
    {
        return XBARA1_CTRL0_EDGE1((CTRL0 >> 10u) & 0b11u);
    }

    /**
     * Set CTRL0's EDGE1 field.
     *
     * Active edge for edge detection on XBAR_OUT1
     */
    inline void set_CTRL0_EDGE1(XBARA1_CTRL0_EDGE1 value) volatile
    {
        uint16_t curr = CTRL0;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        CTRL0 = curr;
    }

    /**
     * Get CTRL0's IEN1 bit.
     *
     * Interrupt Enable for XBAR_OUT1
     */
    inline bool get_CTRL0_IEN1() volatile
    {
        return CTRL0 & (1u << 9u);
    }

    /**
     * Set CTRL0's IEN1 bit.
     *
     * Interrupt Enable for XBAR_OUT1
     */
    inline void set_CTRL0_IEN1() volatile
    {
        CTRL0 |= 1u << 9u;
    }

    /**
     * Clear CTRL0's IEN1 bit.
     *
     * Interrupt Enable for XBAR_OUT1
     */
    inline void clear_CTRL0_IEN1() volatile
    {
        CTRL0 &= ~(1u << 9u);
    }

    /**
     * Toggle CTRL0's IEN1 bit.
     *
     * Interrupt Enable for XBAR_OUT1
     */
    inline void toggle_CTRL0_IEN1() volatile
    {
        CTRL0 ^= 1u << 9u;
    }

    /**
     * Get CTRL0's DEN1 bit.
     *
     * DMA Enable for XBAR_OUT1
     */
    inline bool get_CTRL0_DEN1() volatile
    {
        return CTRL0 & (1u << 8u);
    }

    /**
     * Set CTRL0's DEN1 bit.
     *
     * DMA Enable for XBAR_OUT1
     */
    inline void set_CTRL0_DEN1() volatile
    {
        CTRL0 |= 1u << 8u;
    }

    /**
     * Clear CTRL0's DEN1 bit.
     *
     * DMA Enable for XBAR_OUT1
     */
    inline void clear_CTRL0_DEN1() volatile
    {
        CTRL0 &= ~(1u << 8u);
    }

    /**
     * Toggle CTRL0's DEN1 bit.
     *
     * DMA Enable for XBAR_OUT1
     */
    inline void toggle_CTRL0_DEN1() volatile
    {
        CTRL0 ^= 1u << 8u;
    }

    /**
     * Get CTRL0's STS0 bit.
     *
     * Edge detection status for XBAR_OUT0
     */
    inline bool get_CTRL0_STS0() volatile
    {
        return CTRL0 & (1u << 4u);
    }

    /**
     * Set CTRL0's STS0 bit.
     *
     * Edge detection status for XBAR_OUT0
     */
    inline void set_CTRL0_STS0() volatile
    {
        CTRL0 |= 1u << 4u;
    }

    /**
     * Clear CTRL0's STS0 bit.
     *
     * Edge detection status for XBAR_OUT0
     */
    inline void clear_CTRL0_STS0() volatile
    {
        CTRL0 &= ~(1u << 4u);
    }

    /**
     * Toggle CTRL0's STS0 bit.
     *
     * Edge detection status for XBAR_OUT0
     */
    inline void toggle_CTRL0_STS0() volatile
    {
        CTRL0 ^= 1u << 4u;
    }

    /**
     * Get CTRL0's EDGE0 field.
     *
     * Active edge for edge detection on XBAR_OUT0
     */
    inline XBARA1_CTRL0_EDGE0 get_CTRL0_EDGE0() volatile
    {
        return XBARA1_CTRL0_EDGE0((CTRL0 >> 2u) & 0b11u);
    }

    /**
     * Set CTRL0's EDGE0 field.
     *
     * Active edge for edge detection on XBAR_OUT0
     */
    inline void set_CTRL0_EDGE0(XBARA1_CTRL0_EDGE0 value) volatile
    {
        uint16_t curr = CTRL0;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        CTRL0 = curr;
    }

    /**
     * Get CTRL0's IEN0 bit.
     *
     * Interrupt Enable for XBAR_OUT0
     */
    inline bool get_CTRL0_IEN0() volatile
    {
        return CTRL0 & (1u << 1u);
    }

    /**
     * Set CTRL0's IEN0 bit.
     *
     * Interrupt Enable for XBAR_OUT0
     */
    inline void set_CTRL0_IEN0() volatile
    {
        CTRL0 |= 1u << 1u;
    }

    /**
     * Clear CTRL0's IEN0 bit.
     *
     * Interrupt Enable for XBAR_OUT0
     */
    inline void clear_CTRL0_IEN0() volatile
    {
        CTRL0 &= ~(1u << 1u);
    }

    /**
     * Toggle CTRL0's IEN0 bit.
     *
     * Interrupt Enable for XBAR_OUT0
     */
    inline void toggle_CTRL0_IEN0() volatile
    {
        CTRL0 ^= 1u << 1u;
    }

    /**
     * Get CTRL0's DEN0 bit.
     *
     * DMA Enable for XBAR_OUT0
     */
    inline bool get_CTRL0_DEN0() volatile
    {
        return CTRL0 & (1u << 0u);
    }

    /**
     * Set CTRL0's DEN0 bit.
     *
     * DMA Enable for XBAR_OUT0
     */
    inline void set_CTRL0_DEN0() volatile
    {
        CTRL0 |= 1u << 0u;
    }

    /**
     * Clear CTRL0's DEN0 bit.
     *
     * DMA Enable for XBAR_OUT0
     */
    inline void clear_CTRL0_DEN0() volatile
    {
        CTRL0 &= ~(1u << 0u);
    }

    /**
     * Toggle CTRL0's DEN0 bit.
     *
     * DMA Enable for XBAR_OUT0
     */
    inline void toggle_CTRL0_DEN0() volatile
    {
        CTRL0 ^= 1u << 0u;
    }

    /**
     * Get all of CTRL0's bit fields.
     *
     * (read-write) Crossbar A Control Register 0
     */
    inline void get_CTRL0(bool &STS1, XBARA1_CTRL0_EDGE1 &EDGE1, bool &IEN1,
                          bool &DEN1, bool &STS0, XBARA1_CTRL0_EDGE0 &EDGE0,
                          bool &IEN0, bool &DEN0) volatile
    {
        uint16_t curr = CTRL0;

        STS1 = curr & (1u << 12u);
        EDGE1 = XBARA1_CTRL0_EDGE1((curr >> 10u) & 0b11u);
        IEN1 = curr & (1u << 9u);
        DEN1 = curr & (1u << 8u);
        STS0 = curr & (1u << 4u);
        EDGE0 = XBARA1_CTRL0_EDGE0((curr >> 2u) & 0b11u);
        IEN0 = curr & (1u << 1u);
        DEN0 = curr & (1u << 0u);
    }

    /**
     * Set all of CTRL0's bit fields.
     *
     * (read-write) Crossbar A Control Register 0
     */
    inline void set_CTRL0(bool STS1, XBARA1_CTRL0_EDGE1 EDGE1, bool IEN1,
                          bool DEN1, bool STS0, XBARA1_CTRL0_EDGE0 EDGE0,
                          bool IEN0, bool DEN0) volatile
    {
        uint16_t curr = CTRL0;

        curr &= ~(0b1u << 12u);
        curr |= (STS1 & 0b1u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(EDGE1) & 0b11u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (IEN1 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (DEN1 & 0b1u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (STS0 & 0b1u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(EDGE0) & 0b11u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (IEN0 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (DEN0 & 0b1u) << 0u;

        CTRL0 = curr;
    }

    /**
     * Get CTRL1's STS3 bit.
     *
     * Edge detection status for XBAR_OUT3
     */
    inline bool get_CTRL1_STS3() volatile
    {
        return CTRL1 & (1u << 12u);
    }

    /**
     * Set CTRL1's STS3 bit.
     *
     * Edge detection status for XBAR_OUT3
     */
    inline void set_CTRL1_STS3() volatile
    {
        CTRL1 |= 1u << 12u;
    }

    /**
     * Clear CTRL1's STS3 bit.
     *
     * Edge detection status for XBAR_OUT3
     */
    inline void clear_CTRL1_STS3() volatile
    {
        CTRL1 &= ~(1u << 12u);
    }

    /**
     * Toggle CTRL1's STS3 bit.
     *
     * Edge detection status for XBAR_OUT3
     */
    inline void toggle_CTRL1_STS3() volatile
    {
        CTRL1 ^= 1u << 12u;
    }

    /**
     * Get CTRL1's EDGE3 field.
     *
     * Active edge for edge detection on XBAR_OUT3
     */
    inline XBARA1_CTRL1_EDGE3 get_CTRL1_EDGE3() volatile
    {
        return XBARA1_CTRL1_EDGE3((CTRL1 >> 10u) & 0b11u);
    }

    /**
     * Set CTRL1's EDGE3 field.
     *
     * Active edge for edge detection on XBAR_OUT3
     */
    inline void set_CTRL1_EDGE3(XBARA1_CTRL1_EDGE3 value) volatile
    {
        uint16_t curr = CTRL1;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        CTRL1 = curr;
    }

    /**
     * Get CTRL1's IEN3 bit.
     *
     * Interrupt Enable for XBAR_OUT3
     */
    inline bool get_CTRL1_IEN3() volatile
    {
        return CTRL1 & (1u << 9u);
    }

    /**
     * Set CTRL1's IEN3 bit.
     *
     * Interrupt Enable for XBAR_OUT3
     */
    inline void set_CTRL1_IEN3() volatile
    {
        CTRL1 |= 1u << 9u;
    }

    /**
     * Clear CTRL1's IEN3 bit.
     *
     * Interrupt Enable for XBAR_OUT3
     */
    inline void clear_CTRL1_IEN3() volatile
    {
        CTRL1 &= ~(1u << 9u);
    }

    /**
     * Toggle CTRL1's IEN3 bit.
     *
     * Interrupt Enable for XBAR_OUT3
     */
    inline void toggle_CTRL1_IEN3() volatile
    {
        CTRL1 ^= 1u << 9u;
    }

    /**
     * Get CTRL1's DEN3 bit.
     *
     * DMA Enable for XBAR_OUT3
     */
    inline bool get_CTRL1_DEN3() volatile
    {
        return CTRL1 & (1u << 8u);
    }

    /**
     * Set CTRL1's DEN3 bit.
     *
     * DMA Enable for XBAR_OUT3
     */
    inline void set_CTRL1_DEN3() volatile
    {
        CTRL1 |= 1u << 8u;
    }

    /**
     * Clear CTRL1's DEN3 bit.
     *
     * DMA Enable for XBAR_OUT3
     */
    inline void clear_CTRL1_DEN3() volatile
    {
        CTRL1 &= ~(1u << 8u);
    }

    /**
     * Toggle CTRL1's DEN3 bit.
     *
     * DMA Enable for XBAR_OUT3
     */
    inline void toggle_CTRL1_DEN3() volatile
    {
        CTRL1 ^= 1u << 8u;
    }

    /**
     * Get CTRL1's STS2 bit.
     *
     * Edge detection status for XBAR_OUT2
     */
    inline bool get_CTRL1_STS2() volatile
    {
        return CTRL1 & (1u << 4u);
    }

    /**
     * Set CTRL1's STS2 bit.
     *
     * Edge detection status for XBAR_OUT2
     */
    inline void set_CTRL1_STS2() volatile
    {
        CTRL1 |= 1u << 4u;
    }

    /**
     * Clear CTRL1's STS2 bit.
     *
     * Edge detection status for XBAR_OUT2
     */
    inline void clear_CTRL1_STS2() volatile
    {
        CTRL1 &= ~(1u << 4u);
    }

    /**
     * Toggle CTRL1's STS2 bit.
     *
     * Edge detection status for XBAR_OUT2
     */
    inline void toggle_CTRL1_STS2() volatile
    {
        CTRL1 ^= 1u << 4u;
    }

    /**
     * Get CTRL1's EDGE2 field.
     *
     * Active edge for edge detection on XBAR_OUT2
     */
    inline XBARA1_CTRL1_EDGE2 get_CTRL1_EDGE2() volatile
    {
        return XBARA1_CTRL1_EDGE2((CTRL1 >> 2u) & 0b11u);
    }

    /**
     * Set CTRL1's EDGE2 field.
     *
     * Active edge for edge detection on XBAR_OUT2
     */
    inline void set_CTRL1_EDGE2(XBARA1_CTRL1_EDGE2 value) volatile
    {
        uint16_t curr = CTRL1;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        CTRL1 = curr;
    }

    /**
     * Get CTRL1's IEN2 bit.
     *
     * Interrupt Enable for XBAR_OUT2
     */
    inline bool get_CTRL1_IEN2() volatile
    {
        return CTRL1 & (1u << 1u);
    }

    /**
     * Set CTRL1's IEN2 bit.
     *
     * Interrupt Enable for XBAR_OUT2
     */
    inline void set_CTRL1_IEN2() volatile
    {
        CTRL1 |= 1u << 1u;
    }

    /**
     * Clear CTRL1's IEN2 bit.
     *
     * Interrupt Enable for XBAR_OUT2
     */
    inline void clear_CTRL1_IEN2() volatile
    {
        CTRL1 &= ~(1u << 1u);
    }

    /**
     * Toggle CTRL1's IEN2 bit.
     *
     * Interrupt Enable for XBAR_OUT2
     */
    inline void toggle_CTRL1_IEN2() volatile
    {
        CTRL1 ^= 1u << 1u;
    }

    /**
     * Get CTRL1's DEN2 bit.
     *
     * DMA Enable for XBAR_OUT2
     */
    inline bool get_CTRL1_DEN2() volatile
    {
        return CTRL1 & (1u << 0u);
    }

    /**
     * Set CTRL1's DEN2 bit.
     *
     * DMA Enable for XBAR_OUT2
     */
    inline void set_CTRL1_DEN2() volatile
    {
        CTRL1 |= 1u << 0u;
    }

    /**
     * Clear CTRL1's DEN2 bit.
     *
     * DMA Enable for XBAR_OUT2
     */
    inline void clear_CTRL1_DEN2() volatile
    {
        CTRL1 &= ~(1u << 0u);
    }

    /**
     * Toggle CTRL1's DEN2 bit.
     *
     * DMA Enable for XBAR_OUT2
     */
    inline void toggle_CTRL1_DEN2() volatile
    {
        CTRL1 ^= 1u << 0u;
    }

    /**
     * Get all of CTRL1's bit fields.
     *
     * (read-write) Crossbar A Control Register 1
     */
    inline void get_CTRL1(bool &STS3, XBARA1_CTRL1_EDGE3 &EDGE3, bool &IEN3,
                          bool &DEN3, bool &STS2, XBARA1_CTRL1_EDGE2 &EDGE2,
                          bool &IEN2, bool &DEN2) volatile
    {
        uint16_t curr = CTRL1;

        STS3 = curr & (1u << 12u);
        EDGE3 = XBARA1_CTRL1_EDGE3((curr >> 10u) & 0b11u);
        IEN3 = curr & (1u << 9u);
        DEN3 = curr & (1u << 8u);
        STS2 = curr & (1u << 4u);
        EDGE2 = XBARA1_CTRL1_EDGE2((curr >> 2u) & 0b11u);
        IEN2 = curr & (1u << 1u);
        DEN2 = curr & (1u << 0u);
    }

    /**
     * Set all of CTRL1's bit fields.
     *
     * (read-write) Crossbar A Control Register 1
     */
    inline void set_CTRL1(bool STS3, XBARA1_CTRL1_EDGE3 EDGE3, bool IEN3,
                          bool DEN3, bool STS2, XBARA1_CTRL1_EDGE2 EDGE2,
                          bool IEN2, bool DEN2) volatile
    {
        uint16_t curr = CTRL1;

        curr &= ~(0b1u << 12u);
        curr |= (STS3 & 0b1u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(EDGE3) & 0b11u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (IEN3 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (DEN3 & 0b1u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (STS2 & 0b1u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(EDGE2) & 0b11u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (IEN2 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (DEN2 & 0b1u) << 0u;

        CTRL1 = curr;
    }
};

static_assert(sizeof(xbara1) == xbara1::size);

static volatile xbara1 *const XBARA1 = reinterpret_cast<xbara1 *>(0x4003C000);

}; // namespace MIMXRT1176::CM7
