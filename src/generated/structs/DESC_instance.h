/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/SSARC_HP_SRAM2__SIZE.h"
#include "../enums/SSARC_HP_SRAM2__TYPE.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * no description available
 */
struct [[gnu::packed]] DESC_instance
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        12; /*!< DESC_instance's size in bytes. */

    /* Fields. */
    uint32_t SRAM0_; /*!< (read-write) Description Address Register */
    uint32_t SRAM1_; /*!< (read-write) Description Data Register */
    uint32_t SRAM2_; /*!< (read-write) Description Control Register */

    /* Methods. */

    /**
     * Get SRAM0_'s ADDR field.
     *
     * Address field
     */
    inline uint32_t get_SRAM0__ADDR()
    {
        return (SRAM0_ >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set SRAM0_'s ADDR field.
     *
     * Address field
     */
    inline void set_SRAM0__ADDR(uint32_t value)
    {
        uint32_t curr = SRAM0_;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        SRAM0_ = curr;
    }

    /**
     * Get SRAM1_'s DATA field.
     *
     * Data field
     */
    inline uint32_t get_SRAM1__DATA()
    {
        return (SRAM1_ >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set SRAM1_'s DATA field.
     *
     * Data field
     */
    inline void set_SRAM1__DATA(uint32_t value)
    {
        uint32_t curr = SRAM1_;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        SRAM1_ = curr;
    }

    /**
     * Get SRAM2_'s SIZE field.
     *
     * Size field
     */
    inline SSARC_HP_SRAM2__SIZE get_SRAM2__SIZE()
    {
        return SSARC_HP_SRAM2__SIZE((SRAM2_ >> 6u) & 0b11u);
    }

    /**
     * Set SRAM2_'s SIZE field.
     *
     * Size field
     */
    inline void set_SRAM2__SIZE(SSARC_HP_SRAM2__SIZE value)
    {
        uint32_t curr = SRAM2_;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        SRAM2_ = curr;
    }

    /**
     * Get SRAM2_'s RT_EN bit.
     *
     * Restore Enable
     */
    inline bool get_SRAM2__RT_EN()
    {
        return SRAM2_ & (1u << 5u);
    }

    /**
     * Set SRAM2_'s RT_EN bit.
     *
     * Restore Enable
     */
    inline void set_SRAM2__RT_EN()
    {
        SRAM2_ |= 1u << 5u;
    }

    /**
     * Clear SRAM2_'s RT_EN bit.
     *
     * Restore Enable
     */
    inline void clear_SRAM2__RT_EN()
    {
        SRAM2_ &= ~(1u << 5u);
    }

    /**
     * Toggle SRAM2_'s RT_EN bit.
     *
     * Restore Enable
     */
    inline void toggle_SRAM2__RT_EN()
    {
        SRAM2_ ^= 1u << 5u;
    }

    /**
     * Get SRAM2_'s SV_EN bit.
     *
     * Save Enable
     */
    inline bool get_SRAM2__SV_EN()
    {
        return SRAM2_ & (1u << 4u);
    }

    /**
     * Set SRAM2_'s SV_EN bit.
     *
     * Save Enable
     */
    inline void set_SRAM2__SV_EN()
    {
        SRAM2_ |= 1u << 4u;
    }

    /**
     * Clear SRAM2_'s SV_EN bit.
     *
     * Save Enable
     */
    inline void clear_SRAM2__SV_EN()
    {
        SRAM2_ &= ~(1u << 4u);
    }

    /**
     * Toggle SRAM2_'s SV_EN bit.
     *
     * Save Enable
     */
    inline void toggle_SRAM2__SV_EN()
    {
        SRAM2_ ^= 1u << 4u;
    }

    /**
     * Get SRAM2_'s TYPE field.
     *
     * Type field
     */
    inline SSARC_HP_SRAM2__TYPE get_SRAM2__TYPE()
    {
        return SSARC_HP_SRAM2__TYPE((SRAM2_ >> 0u) & 0b111u);
    }

    /**
     * Set SRAM2_'s TYPE field.
     *
     * Type field
     */
    inline void set_SRAM2__TYPE(SSARC_HP_SRAM2__TYPE value)
    {
        uint32_t curr = SRAM2_;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        SRAM2_ = curr;
    }

    /**
     * Get all of SRAM2_'s bit fields.
     *
     * (read-write) Description Control Register
     */
    inline void get_SRAM2_(SSARC_HP_SRAM2__SIZE &SIZE, bool &RT_EN,
                           bool &SV_EN, SSARC_HP_SRAM2__TYPE &TYPE)
    {
        uint32_t curr = SRAM2_;

        SIZE = SSARC_HP_SRAM2__SIZE((curr >> 6u) & 0b11u);
        RT_EN = curr & (1u << 5u);
        SV_EN = curr & (1u << 4u);
        TYPE = SSARC_HP_SRAM2__TYPE((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of SRAM2_'s bit fields.
     *
     * (read-write) Description Control Register
     */
    inline void set_SRAM2_(SSARC_HP_SRAM2__SIZE SIZE, bool RT_EN, bool SV_EN,
                           SSARC_HP_SRAM2__TYPE TYPE)
    {
        uint32_t curr = SRAM2_;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(SIZE) & 0b11u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (RT_EN & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (SV_EN & 0b1u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(TYPE) & 0b111u) << 0u;

        SRAM2_ = curr;
    }
};

static_assert(sizeof(DESC_instance) == DESC_instance::size);

}; // namespace MIMXRT1176::CM7
