/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/ANADIG_PMU_PMU_BIAS_CTRL2_WB_ADJ_1P8.h"
#include "../enums/ANADIG_PMU_PMU_BIAS_CTRL2_WB_PWR_SW_EN_1P8.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * MX6RT_ANADIG_REGISTER
 */
struct [[gnu::packed]] anadig_pmu
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        2004; /*!< anadig_pmu's size in bytes. */

    /* Fields. */
    static constexpr std::size_t reserved_padding0_length = 320;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t PMU_LDO_PLL; /*!< (read-write) PMU_LDO_PLL_REGISTER */
    static constexpr std::size_t reserved_padding1_length = 19;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    uint32_t PMU_BIAS_CTRL; /*!< (read-write) PMU_BIAS_CTRL_REGISTER */
    static constexpr std::size_t reserved_padding2_length = 3;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    uint32_t PMU_BIAS_CTRL2; /*!< (read-write) PMU_BIAS_CTRL2_REGISTER */
    static constexpr std::size_t reserved_padding3_length = 3;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    uint32_t PMU_REF_CTRL; /*!< (read-write) PMU_REF_CTRL_REGISTER */
    static constexpr std::size_t reserved_padding4_length = 3;
    const uint32_t reserved_padding4[reserved_padding4_length] = {};
    uint32_t PMU_POWER_DETECT_CTRL; /*!< (read-write)
                                       PMU_POWER_DETECT_CTRL_REGISTER */
    static constexpr std::size_t reserved_padding5_length = 31;
    const uint32_t reserved_padding5[reserved_padding5_length] = {};
    uint32_t LDO_PLL_ENABLE_SP; /*!< (read-write) LDO_PLL_ENABLE_SP_REGISTER */
    static constexpr std::size_t reserved_padding6_length = 3;
    const uint32_t reserved_padding6[reserved_padding6_length] = {};
    uint32_t LDO_LPSR_ANA_ENABLE_SP; /*!< (read-write)
                                        LDO_LPSR_ANA_ENABLE_SP_REGISTER */
    static constexpr std::size_t reserved_padding7_length = 3;
    const uint32_t reserved_padding7[reserved_padding7_length] = {};
    uint32_t LDO_LPSR_ANA_LP_MODE_SP; /*!< (read-write)
                                         LDO_LPSR_ANA_LP_MODE_SP_REGISTER */
    static constexpr std::size_t reserved_padding8_length = 3;
    const uint32_t reserved_padding8[reserved_padding8_length] = {};
    uint32_t
        LDO_LPSR_ANA_TRACKING_EN_SP; /*!< (read-write)
                                        LDO_LPSR_ANA_TRACKING_EN_SP_REGISTER */
    static constexpr std::size_t reserved_padding9_length = 3;
    const uint32_t reserved_padding9[reserved_padding9_length] = {};
    uint32_t
        LDO_LPSR_ANA_BYPASS_EN_SP; /*!< (read-write)
                                      LDO_LPSR_ANA_BYPASS_EN_SP_REGISTER */
    static constexpr std::size_t reserved_padding10_length = 3;
    const uint32_t reserved_padding10[reserved_padding10_length] = {};
    uint32_t LDO_LPSR_ANA_STBY_EN_SP; /*!< (read-write)
                                         LDO_LPSR_ANA_STBY_EN_SP_REGISTER */
    static constexpr std::size_t reserved_padding11_length = 3;
    const uint32_t reserved_padding11[reserved_padding11_length] = {};
    uint32_t LDO_LPSR_DIG_ENABLE_SP; /*!< (read-write)
                                        LDO_LPSR_DIG_ENABLE_SP_REGISTER */
    static constexpr std::size_t reserved_padding12_length = 3;
    const uint32_t reserved_padding12[reserved_padding12_length] = {};
    uint32_t LDO_LPSR_DIG_TRG_SP0; /*!< (read-write)
                                      LDO_LPSR_DIG_TRG_SP0_REGISTER */
    static constexpr std::size_t reserved_padding13_length = 3;
    const uint32_t reserved_padding13[reserved_padding13_length] = {};
    uint32_t LDO_LPSR_DIG_TRG_SP1; /*!< (read-write)
                                      LDO_LPSR_DIG_TRG_SP1_REGISTER */
    static constexpr std::size_t reserved_padding14_length = 3;
    const uint32_t reserved_padding14[reserved_padding14_length] = {};
    uint32_t LDO_LPSR_DIG_TRG_SP2; /*!< (read-write)
                                      LDO_LPSR_DIG_TRG_SP2_REGISTER */
    static constexpr std::size_t reserved_padding15_length = 3;
    const uint32_t reserved_padding15[reserved_padding15_length] = {};
    uint32_t LDO_LPSR_DIG_TRG_SP3; /*!< (read-write)
                                      LDO_LPSR_DIG_TRG_SP3_REGISTER */
    static constexpr std::size_t reserved_padding16_length = 3;
    const uint32_t reserved_padding16[reserved_padding16_length] = {};
    uint32_t LDO_LPSR_DIG_LP_MODE_SP; /*!< (read-write)
                                         LDO_LPSR_DIG_LP_MODE_SP_REGISTER */
    static constexpr std::size_t reserved_padding17_length = 3;
    const uint32_t reserved_padding17[reserved_padding17_length] = {};
    uint32_t
        LDO_LPSR_DIG_TRACKING_EN_SP; /*!< (read-write)
                                        LDO_LPSR_DIG_TRACKING_EN_SP_REGISTER */
    static constexpr std::size_t reserved_padding18_length = 3;
    const uint32_t reserved_padding18[reserved_padding18_length] = {};
    uint32_t
        LDO_LPSR_DIG_BYPASS_EN_SP; /*!< (read-write)
                                      LDO_LPSR_DIG_BYPASS_EN_SP_REGISTER */
    static constexpr std::size_t reserved_padding19_length = 3;
    const uint32_t reserved_padding19[reserved_padding19_length] = {};
    uint32_t LDO_LPSR_DIG_STBY_EN_SP; /*!< (read-write)
                                         LDO_LPSR_DIG_STBY_EN_SP_REGISTER */
    static constexpr std::size_t reserved_padding20_length = 3;
    const uint32_t reserved_padding20[reserved_padding20_length] = {};
    uint32_t BANDGAP_ENABLE_SP; /*!< (read-write) BANDGAP_ENABLE_SP_REGISTER */
    static constexpr std::size_t reserved_padding21_length = 3;
    const uint32_t reserved_padding21[reserved_padding21_length] = {};
    uint32_t FBB_M7_ENABLE_SP; /*!< (read-write) FBB_M7_ENABLE_SP_REGISTER */
    static constexpr std::size_t reserved_padding22_length = 3;
    const uint32_t reserved_padding22[reserved_padding22_length] = {};
    uint32_t RBB_SOC_ENABLE_SP; /*!< (read-write) RBB_SOC_ENABLE_SP_REGISTER */
    static constexpr std::size_t reserved_padding23_length = 3;
    const uint32_t reserved_padding23[reserved_padding23_length] = {};
    uint32_t
        RBB_LPSR_ENABLE_SP; /*!< (read-write) RBB_LPSR_ENABLE_SP_REGISTER */
    static constexpr std::size_t reserved_padding24_length = 3;
    const uint32_t reserved_padding24[reserved_padding24_length] = {};
    uint32_t
        BANDGAP_STBY_EN_SP; /*!< (read-write) BANDGAP_STBY_EN_SP_REGISTER */
    static constexpr std::size_t reserved_padding25_length = 3;
    const uint32_t reserved_padding25[reserved_padding25_length] = {};
    uint32_t
        PLL_LDO_STBY_EN_SP; /*!< (read-write) PLL_LDO_STBY_EN_SP_REGISTER */
    static constexpr std::size_t reserved_padding26_length = 3;
    const uint32_t reserved_padding26[reserved_padding26_length] = {};
    uint32_t FBB_M7_STBY_EN_SP; /*!< (read-write) FBB_M7_STBY_EN_SP_REGISTER */
    static constexpr std::size_t reserved_padding27_length = 3;
    const uint32_t reserved_padding27[reserved_padding27_length] = {};
    uint32_t
        RBB_SOC_STBY_EN_SP; /*!< (read-write) RBB_SOC_STBY_EN_SP_REGISTER */
    static constexpr std::size_t reserved_padding28_length = 3;
    const uint32_t reserved_padding28[reserved_padding28_length] = {};
    uint32_t
        RBB_LPSR_STBY_EN_SP; /*!< (read-write) RBB_LPSR_STBY_EN_SP_REGISTER */
    static constexpr std::size_t reserved_padding29_length = 3;
    const uint32_t reserved_padding29[reserved_padding29_length] = {};
    uint32_t FBB_M7_CONFIGURE; /*!< (read-write) FBB_M7_CONFIGURE_REGISTER */
    static constexpr std::size_t reserved_padding30_length = 3;
    const uint32_t reserved_padding30[reserved_padding30_length] = {};
    uint32_t
        RBB_LPSR_CONFIGURE; /*!< (read-write) RBB_LPSR_CONFIGURE_REGISTER */
    static constexpr std::size_t reserved_padding31_length = 3;
    const uint32_t reserved_padding31[reserved_padding31_length] = {};
    uint32_t RBB_SOC_CONFIGURE; /*!< (read-write) RBB_SOC_CONFIGURE_REGISTER */
    static constexpr std::size_t reserved_padding32_length = 3;
    const uint32_t reserved_padding32[reserved_padding32_length] = {};
    uint32_t REFTOP_OTP_TRIM_VALUE; /*!< (read-write)
                                       REFTOP_OTP_TRIM_VALUE_REGISTER */
    static constexpr std::size_t reserved_padding33_length = 7;
    const uint32_t reserved_padding33[reserved_padding33_length] = {};
    uint32_t
        LPSR_1P8_LDO_OTP_TRIM_VALUE; /*!< (read-write)
                                        LPSR_1P8_LDO_OTP_TRIM_VALUE_REGISTER */

    /* Methods. */

    /**
     * Get PMU_LDO_PLL's LDO_PLL_AI_BUSY bit.
     *
     * ldo_pll_busy
     */
    inline bool get_PMU_LDO_PLL_LDO_PLL_AI_BUSY() volatile
    {
        return PMU_LDO_PLL & (1u << 30u);
    }

    /**
     * Get PMU_LDO_PLL's LDO_PLL_AI_TOGGLE bit.
     *
     * ldo_pll_ai_toggle
     */
    inline bool get_PMU_LDO_PLL_LDO_PLL_AI_TOGGLE() volatile
    {
        return PMU_LDO_PLL & (1u << 16u);
    }

    /**
     * Set PMU_LDO_PLL's LDO_PLL_AI_TOGGLE bit.
     *
     * ldo_pll_ai_toggle
     */
    inline void set_PMU_LDO_PLL_LDO_PLL_AI_TOGGLE() volatile
    {
        PMU_LDO_PLL |= 1u << 16u;
    }

    /**
     * Clear PMU_LDO_PLL's LDO_PLL_AI_TOGGLE bit.
     *
     * ldo_pll_ai_toggle
     */
    inline void clear_PMU_LDO_PLL_LDO_PLL_AI_TOGGLE() volatile
    {
        PMU_LDO_PLL &= ~(1u << 16u);
    }

    /**
     * Toggle PMU_LDO_PLL's LDO_PLL_AI_TOGGLE bit.
     *
     * ldo_pll_ai_toggle
     */
    inline void toggle_PMU_LDO_PLL_LDO_PLL_AI_TOGGLE() volatile
    {
        PMU_LDO_PLL ^= 1u << 16u;
    }

    /**
     * Get PMU_LDO_PLL's LDO_PLL_CONTROL_MODE bit.
     *
     * LDO_PLL_CONTROL_MODE
     */
    inline bool get_PMU_LDO_PLL_LDO_PLL_CONTROL_MODE() volatile
    {
        return PMU_LDO_PLL & (1u << 1u);
    }

    /**
     * Set PMU_LDO_PLL's LDO_PLL_CONTROL_MODE bit.
     *
     * LDO_PLL_CONTROL_MODE
     */
    inline void set_PMU_LDO_PLL_LDO_PLL_CONTROL_MODE() volatile
    {
        PMU_LDO_PLL |= 1u << 1u;
    }

    /**
     * Clear PMU_LDO_PLL's LDO_PLL_CONTROL_MODE bit.
     *
     * LDO_PLL_CONTROL_MODE
     */
    inline void clear_PMU_LDO_PLL_LDO_PLL_CONTROL_MODE() volatile
    {
        PMU_LDO_PLL &= ~(1u << 1u);
    }

    /**
     * Toggle PMU_LDO_PLL's LDO_PLL_CONTROL_MODE bit.
     *
     * LDO_PLL_CONTROL_MODE
     */
    inline void toggle_PMU_LDO_PLL_LDO_PLL_CONTROL_MODE() volatile
    {
        PMU_LDO_PLL ^= 1u << 1u;
    }

    /**
     * Get PMU_LDO_PLL's LDO_PLL_ENABLE bit.
     *
     * LDO_PLL_ENABLE
     */
    inline bool get_PMU_LDO_PLL_LDO_PLL_ENABLE() volatile
    {
        return PMU_LDO_PLL & (1u << 0u);
    }

    /**
     * Set PMU_LDO_PLL's LDO_PLL_ENABLE bit.
     *
     * LDO_PLL_ENABLE
     */
    inline void set_PMU_LDO_PLL_LDO_PLL_ENABLE() volatile
    {
        PMU_LDO_PLL |= 1u << 0u;
    }

    /**
     * Clear PMU_LDO_PLL's LDO_PLL_ENABLE bit.
     *
     * LDO_PLL_ENABLE
     */
    inline void clear_PMU_LDO_PLL_LDO_PLL_ENABLE() volatile
    {
        PMU_LDO_PLL &= ~(1u << 0u);
    }

    /**
     * Toggle PMU_LDO_PLL's LDO_PLL_ENABLE bit.
     *
     * LDO_PLL_ENABLE
     */
    inline void toggle_PMU_LDO_PLL_LDO_PLL_ENABLE() volatile
    {
        PMU_LDO_PLL ^= 1u << 0u;
    }

    /**
     * Get all of PMU_LDO_PLL's bit fields.
     *
     * (read-write) PMU_LDO_PLL_REGISTER
     */
    inline void get_PMU_LDO_PLL(bool &LDO_PLL_AI_BUSY, bool &LDO_PLL_AI_TOGGLE,
                                bool &LDO_PLL_CONTROL_MODE,
                                bool &LDO_PLL_ENABLE) volatile
    {
        uint32_t curr = PMU_LDO_PLL;

        LDO_PLL_AI_BUSY = curr & (1u << 30u);
        LDO_PLL_AI_TOGGLE = curr & (1u << 16u);
        LDO_PLL_CONTROL_MODE = curr & (1u << 1u);
        LDO_PLL_ENABLE = curr & (1u << 0u);
    }

    /**
     * Set all of PMU_LDO_PLL's bit fields.
     *
     * (read-write) PMU_LDO_PLL_REGISTER
     */
    inline void set_PMU_LDO_PLL(bool LDO_PLL_AI_TOGGLE,
                                bool LDO_PLL_CONTROL_MODE,
                                bool LDO_PLL_ENABLE) volatile
    {
        uint32_t curr = PMU_LDO_PLL;

        curr &= ~(0b1u << 16u);
        curr |= (LDO_PLL_AI_TOGGLE & 0b1u) << 16u;
        curr &= ~(0b1u << 1u);
        curr |= (LDO_PLL_CONTROL_MODE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (LDO_PLL_ENABLE & 0b1u) << 0u;

        PMU_LDO_PLL = curr;
    }

    /**
     * Get PMU_BIAS_CTRL's WB_VDD_SEL_1P8 bit.
     *
     * wb_vdd_sel_1p8
     */
    inline bool get_PMU_BIAS_CTRL_WB_VDD_SEL_1P8() volatile
    {
        return PMU_BIAS_CTRL & (1u << 14u);
    }

    /**
     * Set PMU_BIAS_CTRL's WB_VDD_SEL_1P8 bit.
     *
     * wb_vdd_sel_1p8
     */
    inline void set_PMU_BIAS_CTRL_WB_VDD_SEL_1P8() volatile
    {
        PMU_BIAS_CTRL |= 1u << 14u;
    }

    /**
     * Clear PMU_BIAS_CTRL's WB_VDD_SEL_1P8 bit.
     *
     * wb_vdd_sel_1p8
     */
    inline void clear_PMU_BIAS_CTRL_WB_VDD_SEL_1P8() volatile
    {
        PMU_BIAS_CTRL &= ~(1u << 14u);
    }

    /**
     * Toggle PMU_BIAS_CTRL's WB_VDD_SEL_1P8 bit.
     *
     * wb_vdd_sel_1p8
     */
    inline void toggle_PMU_BIAS_CTRL_WB_VDD_SEL_1P8() volatile
    {
        PMU_BIAS_CTRL ^= 1u << 14u;
    }

    /**
     * Get PMU_BIAS_CTRL's WB_CFG_1P8 field.
     *
     * wb_cfg_1p8
     */
    inline uint16_t get_PMU_BIAS_CTRL_WB_CFG_1P8() volatile
    {
        return (PMU_BIAS_CTRL >> 0u) & 0b1111111111111u;
    }

    /**
     * Set PMU_BIAS_CTRL's WB_CFG_1P8 field.
     *
     * wb_cfg_1p8
     */
    inline void set_PMU_BIAS_CTRL_WB_CFG_1P8(uint16_t value) volatile
    {
        uint32_t curr = PMU_BIAS_CTRL;

        curr &= ~(0b1111111111111u << 0u);
        curr |= (value & 0b1111111111111u) << 0u;

        PMU_BIAS_CTRL = curr;
    }

    /**
     * Get all of PMU_BIAS_CTRL's bit fields.
     *
     * (read-write) PMU_BIAS_CTRL_REGISTER
     */
    inline void get_PMU_BIAS_CTRL(bool &WB_VDD_SEL_1P8,
                                  uint16_t &WB_CFG_1P8) volatile
    {
        uint32_t curr = PMU_BIAS_CTRL;

        WB_VDD_SEL_1P8 = curr & (1u << 14u);
        WB_CFG_1P8 = (curr >> 0u) & 0b1111111111111u;
    }

    /**
     * Set all of PMU_BIAS_CTRL's bit fields.
     *
     * (read-write) PMU_BIAS_CTRL_REGISTER
     */
    inline void set_PMU_BIAS_CTRL(bool WB_VDD_SEL_1P8,
                                  uint16_t WB_CFG_1P8) volatile
    {
        uint32_t curr = PMU_BIAS_CTRL;

        curr &= ~(0b1u << 14u);
        curr |= (WB_VDD_SEL_1P8 & 0b1u) << 14u;
        curr &= ~(0b1111111111111u << 0u);
        curr |= (WB_CFG_1P8 & 0b1111111111111u) << 0u;

        PMU_BIAS_CTRL = curr;
    }

    /**
     * Get PMU_BIAS_CTRL2's WB_OK bit.
     *
     * Digital Output pin.
     */
    inline bool get_PMU_BIAS_CTRL2_WB_OK() volatile
    {
        return PMU_BIAS_CTRL2 & (1u << 26u);
    }

    /**
     * Get PMU_BIAS_CTRL2's WB_TST_DIG_OUT bit.
     *
     * Digital output
     */
    inline bool get_PMU_BIAS_CTRL2_WB_TST_DIG_OUT() volatile
    {
        return PMU_BIAS_CTRL2 & (1u << 25u);
    }

    /**
     * Get PMU_BIAS_CTRL2's WB_EN bit.
     *
     * wb_en
     */
    inline bool get_PMU_BIAS_CTRL2_WB_EN() volatile
    {
        return PMU_BIAS_CTRL2 & (1u << 24u);
    }

    /**
     * Set PMU_BIAS_CTRL2's WB_EN bit.
     *
     * wb_en
     */
    inline void set_PMU_BIAS_CTRL2_WB_EN() volatile
    {
        PMU_BIAS_CTRL2 |= 1u << 24u;
    }

    /**
     * Clear PMU_BIAS_CTRL2's WB_EN bit.
     *
     * wb_en
     */
    inline void clear_PMU_BIAS_CTRL2_WB_EN() volatile
    {
        PMU_BIAS_CTRL2 &= ~(1u << 24u);
    }

    /**
     * Toggle PMU_BIAS_CTRL2's WB_EN bit.
     *
     * wb_en
     */
    inline void toggle_PMU_BIAS_CTRL2_WB_EN() volatile
    {
        PMU_BIAS_CTRL2 ^= 1u << 24u;
    }

    /**
     * Get PMU_BIAS_CTRL2's RBB_LPSR_CONTROL_MODE bit.
     *
     * RBB_LPSR_CONTROL_MODE
     */
    inline bool get_PMU_BIAS_CTRL2_RBB_LPSR_CONTROL_MODE() volatile
    {
        return PMU_BIAS_CTRL2 & (1u << 23u);
    }

    /**
     * Set PMU_BIAS_CTRL2's RBB_LPSR_CONTROL_MODE bit.
     *
     * RBB_LPSR_CONTROL_MODE
     */
    inline void set_PMU_BIAS_CTRL2_RBB_LPSR_CONTROL_MODE() volatile
    {
        PMU_BIAS_CTRL2 |= 1u << 23u;
    }

    /**
     * Clear PMU_BIAS_CTRL2's RBB_LPSR_CONTROL_MODE bit.
     *
     * RBB_LPSR_CONTROL_MODE
     */
    inline void clear_PMU_BIAS_CTRL2_RBB_LPSR_CONTROL_MODE() volatile
    {
        PMU_BIAS_CTRL2 &= ~(1u << 23u);
    }

    /**
     * Toggle PMU_BIAS_CTRL2's RBB_LPSR_CONTROL_MODE bit.
     *
     * RBB_LPSR_CONTROL_MODE
     */
    inline void toggle_PMU_BIAS_CTRL2_RBB_LPSR_CONTROL_MODE() volatile
    {
        PMU_BIAS_CTRL2 ^= 1u << 23u;
    }

    /**
     * Get PMU_BIAS_CTRL2's RBB_SOC_CONTROL_MODE bit.
     *
     * RBB_SOC_CONTROL_MODE
     */
    inline bool get_PMU_BIAS_CTRL2_RBB_SOC_CONTROL_MODE() volatile
    {
        return PMU_BIAS_CTRL2 & (1u << 22u);
    }

    /**
     * Set PMU_BIAS_CTRL2's RBB_SOC_CONTROL_MODE bit.
     *
     * RBB_SOC_CONTROL_MODE
     */
    inline void set_PMU_BIAS_CTRL2_RBB_SOC_CONTROL_MODE() volatile
    {
        PMU_BIAS_CTRL2 |= 1u << 22u;
    }

    /**
     * Clear PMU_BIAS_CTRL2's RBB_SOC_CONTROL_MODE bit.
     *
     * RBB_SOC_CONTROL_MODE
     */
    inline void clear_PMU_BIAS_CTRL2_RBB_SOC_CONTROL_MODE() volatile
    {
        PMU_BIAS_CTRL2 &= ~(1u << 22u);
    }

    /**
     * Toggle PMU_BIAS_CTRL2's RBB_SOC_CONTROL_MODE bit.
     *
     * RBB_SOC_CONTROL_MODE
     */
    inline void toggle_PMU_BIAS_CTRL2_RBB_SOC_CONTROL_MODE() volatile
    {
        PMU_BIAS_CTRL2 ^= 1u << 22u;
    }

    /**
     * Get PMU_BIAS_CTRL2's FBB_M7_CONTROL_MODE bit.
     *
     * FBB_M7_CONTROL_MODE
     */
    inline bool get_PMU_BIAS_CTRL2_FBB_M7_CONTROL_MODE() volatile
    {
        return PMU_BIAS_CTRL2 & (1u << 21u);
    }

    /**
     * Set PMU_BIAS_CTRL2's FBB_M7_CONTROL_MODE bit.
     *
     * FBB_M7_CONTROL_MODE
     */
    inline void set_PMU_BIAS_CTRL2_FBB_M7_CONTROL_MODE() volatile
    {
        PMU_BIAS_CTRL2 |= 1u << 21u;
    }

    /**
     * Clear PMU_BIAS_CTRL2's FBB_M7_CONTROL_MODE bit.
     *
     * FBB_M7_CONTROL_MODE
     */
    inline void clear_PMU_BIAS_CTRL2_FBB_M7_CONTROL_MODE() volatile
    {
        PMU_BIAS_CTRL2 &= ~(1u << 21u);
    }

    /**
     * Toggle PMU_BIAS_CTRL2's FBB_M7_CONTROL_MODE bit.
     *
     * FBB_M7_CONTROL_MODE
     */
    inline void toggle_PMU_BIAS_CTRL2_FBB_M7_CONTROL_MODE() volatile
    {
        PMU_BIAS_CTRL2 ^= 1u << 21u;
    }

    /**
     * Get PMU_BIAS_CTRL2's WB_ADJ_1P8 field.
     *
     * wb_adj_1p8
     */
    inline ANADIG_PMU_PMU_BIAS_CTRL2_WB_ADJ_1P8
    get_PMU_BIAS_CTRL2_WB_ADJ_1P8() volatile
    {
        return ANADIG_PMU_PMU_BIAS_CTRL2_WB_ADJ_1P8((PMU_BIAS_CTRL2 >> 13u) &
                                                    0b11111111u);
    }

    /**
     * Set PMU_BIAS_CTRL2's WB_ADJ_1P8 field.
     *
     * wb_adj_1p8
     */
    inline void set_PMU_BIAS_CTRL2_WB_ADJ_1P8(
        ANADIG_PMU_PMU_BIAS_CTRL2_WB_ADJ_1P8 value) volatile
    {
        uint32_t curr = PMU_BIAS_CTRL2;

        curr &= ~(0b11111111u << 13u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 13u;

        PMU_BIAS_CTRL2 = curr;
    }

    /**
     * Get PMU_BIAS_CTRL2's WB_PWR_SW_EN_1P8 field.
     *
     * MODSEL_wb_tst_md_1p8
     */
    inline ANADIG_PMU_PMU_BIAS_CTRL2_WB_PWR_SW_EN_1P8
    get_PMU_BIAS_CTRL2_WB_PWR_SW_EN_1P8() volatile
    {
        return ANADIG_PMU_PMU_BIAS_CTRL2_WB_PWR_SW_EN_1P8(
            (PMU_BIAS_CTRL2 >> 10u) & 0b111u);
    }

    /**
     * Set PMU_BIAS_CTRL2's WB_PWR_SW_EN_1P8 field.
     *
     * MODSEL_wb_tst_md_1p8
     */
    inline void set_PMU_BIAS_CTRL2_WB_PWR_SW_EN_1P8(
        ANADIG_PMU_PMU_BIAS_CTRL2_WB_PWR_SW_EN_1P8 value) volatile
    {
        uint32_t curr = PMU_BIAS_CTRL2;

        curr &= ~(0b111u << 10u);
        curr |= (std::to_underlying(value) & 0b111u) << 10u;

        PMU_BIAS_CTRL2 = curr;
    }

    /**
     * Get PMU_BIAS_CTRL2's WB_TST_MD field.
     *
     * TMOD_wb_tst_md_1p8
     */
    inline uint16_t get_PMU_BIAS_CTRL2_WB_TST_MD() volatile
    {
        return (PMU_BIAS_CTRL2 >> 1u) & 0b111111111u;
    }

    /**
     * Set PMU_BIAS_CTRL2's WB_TST_MD field.
     *
     * TMOD_wb_tst_md_1p8
     */
    inline void set_PMU_BIAS_CTRL2_WB_TST_MD(uint16_t value) volatile
    {
        uint32_t curr = PMU_BIAS_CTRL2;

        curr &= ~(0b111111111u << 1u);
        curr |= (value & 0b111111111u) << 1u;

        PMU_BIAS_CTRL2 = curr;
    }

    /**
     * Get all of PMU_BIAS_CTRL2's bit fields.
     *
     * (read-write) PMU_BIAS_CTRL2_REGISTER
     */
    inline void get_PMU_BIAS_CTRL2(
        bool &WB_OK, bool &WB_TST_DIG_OUT, bool &WB_EN,
        bool &RBB_LPSR_CONTROL_MODE, bool &RBB_SOC_CONTROL_MODE,
        bool &FBB_M7_CONTROL_MODE,
        ANADIG_PMU_PMU_BIAS_CTRL2_WB_ADJ_1P8 &WB_ADJ_1P8,
        ANADIG_PMU_PMU_BIAS_CTRL2_WB_PWR_SW_EN_1P8 &WB_PWR_SW_EN_1P8,
        uint16_t &WB_TST_MD) volatile
    {
        uint32_t curr = PMU_BIAS_CTRL2;

        WB_OK = curr & (1u << 26u);
        WB_TST_DIG_OUT = curr & (1u << 25u);
        WB_EN = curr & (1u << 24u);
        RBB_LPSR_CONTROL_MODE = curr & (1u << 23u);
        RBB_SOC_CONTROL_MODE = curr & (1u << 22u);
        FBB_M7_CONTROL_MODE = curr & (1u << 21u);
        WB_ADJ_1P8 =
            ANADIG_PMU_PMU_BIAS_CTRL2_WB_ADJ_1P8((curr >> 13u) & 0b11111111u);
        WB_PWR_SW_EN_1P8 =
            ANADIG_PMU_PMU_BIAS_CTRL2_WB_PWR_SW_EN_1P8((curr >> 10u) & 0b111u);
        WB_TST_MD = (curr >> 1u) & 0b111111111u;
    }

    /**
     * Set all of PMU_BIAS_CTRL2's bit fields.
     *
     * (read-write) PMU_BIAS_CTRL2_REGISTER
     */
    inline void set_PMU_BIAS_CTRL2(
        bool WB_EN, bool RBB_LPSR_CONTROL_MODE, bool RBB_SOC_CONTROL_MODE,
        bool FBB_M7_CONTROL_MODE,
        ANADIG_PMU_PMU_BIAS_CTRL2_WB_ADJ_1P8 WB_ADJ_1P8,
        ANADIG_PMU_PMU_BIAS_CTRL2_WB_PWR_SW_EN_1P8 WB_PWR_SW_EN_1P8,
        uint16_t WB_TST_MD) volatile
    {
        uint32_t curr = PMU_BIAS_CTRL2;

        curr &= ~(0b1u << 24u);
        curr |= (WB_EN & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (RBB_LPSR_CONTROL_MODE & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (RBB_SOC_CONTROL_MODE & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (FBB_M7_CONTROL_MODE & 0b1u) << 21u;
        curr &= ~(0b11111111u << 13u);
        curr |= (std::to_underlying(WB_ADJ_1P8) & 0b11111111u) << 13u;
        curr &= ~(0b111u << 10u);
        curr |= (std::to_underlying(WB_PWR_SW_EN_1P8) & 0b111u) << 10u;
        curr &= ~(0b111111111u << 1u);
        curr |= (WB_TST_MD & 0b111111111u) << 1u;

        PMU_BIAS_CTRL2 = curr;
    }

    /**
     * Get PMU_REF_CTRL's EN_PLL_VOL_REF_BUFFER bit.
     *
     * en_pll_vol_ref_buffer
     */
    inline bool get_PMU_REF_CTRL_EN_PLL_VOL_REF_BUFFER() volatile
    {
        return PMU_REF_CTRL & (1u << 4u);
    }

    /**
     * Set PMU_REF_CTRL's EN_PLL_VOL_REF_BUFFER bit.
     *
     * en_pll_vol_ref_buffer
     */
    inline void set_PMU_REF_CTRL_EN_PLL_VOL_REF_BUFFER() volatile
    {
        PMU_REF_CTRL |= 1u << 4u;
    }

    /**
     * Clear PMU_REF_CTRL's EN_PLL_VOL_REF_BUFFER bit.
     *
     * en_pll_vol_ref_buffer
     */
    inline void clear_PMU_REF_CTRL_EN_PLL_VOL_REF_BUFFER() volatile
    {
        PMU_REF_CTRL &= ~(1u << 4u);
    }

    /**
     * Toggle PMU_REF_CTRL's EN_PLL_VOL_REF_BUFFER bit.
     *
     * en_pll_vol_ref_buffer
     */
    inline void toggle_PMU_REF_CTRL_EN_PLL_VOL_REF_BUFFER() volatile
    {
        PMU_REF_CTRL ^= 1u << 4u;
    }

    /**
     * Get PMU_REF_CTRL's REF_CONTROL_MODE bit.
     *
     * REF_CONTROL_MODE
     */
    inline bool get_PMU_REF_CTRL_REF_CONTROL_MODE() volatile
    {
        return PMU_REF_CTRL & (1u << 3u);
    }

    /**
     * Set PMU_REF_CTRL's REF_CONTROL_MODE bit.
     *
     * REF_CONTROL_MODE
     */
    inline void set_PMU_REF_CTRL_REF_CONTROL_MODE() volatile
    {
        PMU_REF_CTRL |= 1u << 3u;
    }

    /**
     * Clear PMU_REF_CTRL's REF_CONTROL_MODE bit.
     *
     * REF_CONTROL_MODE
     */
    inline void clear_PMU_REF_CTRL_REF_CONTROL_MODE() volatile
    {
        PMU_REF_CTRL &= ~(1u << 3u);
    }

    /**
     * Toggle PMU_REF_CTRL's REF_CONTROL_MODE bit.
     *
     * REF_CONTROL_MODE
     */
    inline void toggle_PMU_REF_CTRL_REF_CONTROL_MODE() volatile
    {
        PMU_REF_CTRL ^= 1u << 3u;
    }

    /**
     * Get PMU_REF_CTRL's REF_ENABLE bit.
     *
     * REF_ENABLE
     */
    inline bool get_PMU_REF_CTRL_REF_ENABLE() volatile
    {
        return PMU_REF_CTRL & (1u << 2u);
    }

    /**
     * Set PMU_REF_CTRL's REF_ENABLE bit.
     *
     * REF_ENABLE
     */
    inline void set_PMU_REF_CTRL_REF_ENABLE() volatile
    {
        PMU_REF_CTRL |= 1u << 2u;
    }

    /**
     * Clear PMU_REF_CTRL's REF_ENABLE bit.
     *
     * REF_ENABLE
     */
    inline void clear_PMU_REF_CTRL_REF_ENABLE() volatile
    {
        PMU_REF_CTRL &= ~(1u << 2u);
    }

    /**
     * Toggle PMU_REF_CTRL's REF_ENABLE bit.
     *
     * REF_ENABLE
     */
    inline void toggle_PMU_REF_CTRL_REF_ENABLE() volatile
    {
        PMU_REF_CTRL ^= 1u << 2u;
    }

    /**
     * Get PMU_REF_CTRL's REF_AI_BUSY bit.
     *
     * ref_ai_busy
     */
    inline bool get_PMU_REF_CTRL_REF_AI_BUSY() volatile
    {
        return PMU_REF_CTRL & (1u << 1u);
    }

    /**
     * Get PMU_REF_CTRL's REF_AI_TOGGLE bit.
     *
     * ref_ai_toggle
     */
    inline bool get_PMU_REF_CTRL_REF_AI_TOGGLE() volatile
    {
        return PMU_REF_CTRL & (1u << 0u);
    }

    /**
     * Set PMU_REF_CTRL's REF_AI_TOGGLE bit.
     *
     * ref_ai_toggle
     */
    inline void set_PMU_REF_CTRL_REF_AI_TOGGLE() volatile
    {
        PMU_REF_CTRL |= 1u << 0u;
    }

    /**
     * Clear PMU_REF_CTRL's REF_AI_TOGGLE bit.
     *
     * ref_ai_toggle
     */
    inline void clear_PMU_REF_CTRL_REF_AI_TOGGLE() volatile
    {
        PMU_REF_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle PMU_REF_CTRL's REF_AI_TOGGLE bit.
     *
     * ref_ai_toggle
     */
    inline void toggle_PMU_REF_CTRL_REF_AI_TOGGLE() volatile
    {
        PMU_REF_CTRL ^= 1u << 0u;
    }

    /**
     * Get all of PMU_REF_CTRL's bit fields.
     *
     * (read-write) PMU_REF_CTRL_REGISTER
     */
    inline void get_PMU_REF_CTRL(bool &EN_PLL_VOL_REF_BUFFER,
                                 bool &REF_CONTROL_MODE, bool &REF_ENABLE,
                                 bool &REF_AI_BUSY,
                                 bool &REF_AI_TOGGLE) volatile
    {
        uint32_t curr = PMU_REF_CTRL;

        EN_PLL_VOL_REF_BUFFER = curr & (1u << 4u);
        REF_CONTROL_MODE = curr & (1u << 3u);
        REF_ENABLE = curr & (1u << 2u);
        REF_AI_BUSY = curr & (1u << 1u);
        REF_AI_TOGGLE = curr & (1u << 0u);
    }

    /**
     * Set all of PMU_REF_CTRL's bit fields.
     *
     * (read-write) PMU_REF_CTRL_REGISTER
     */
    inline void set_PMU_REF_CTRL(bool EN_PLL_VOL_REF_BUFFER,
                                 bool REF_CONTROL_MODE, bool REF_ENABLE,
                                 bool REF_AI_TOGGLE) volatile
    {
        uint32_t curr = PMU_REF_CTRL;

        curr &= ~(0b1u << 4u);
        curr |= (EN_PLL_VOL_REF_BUFFER & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (REF_CONTROL_MODE & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (REF_ENABLE & 0b1u) << 2u;
        curr &= ~(0b1u << 0u);
        curr |= (REF_AI_TOGGLE & 0b1u) << 0u;

        PMU_REF_CTRL = curr;
    }

    /**
     * Get PMU_POWER_DETECT_CTRL's CKGB_LPSR1P0 bit.
     *
     * ckgb_lpsr1p0
     */
    inline bool get_PMU_POWER_DETECT_CTRL_CKGB_LPSR1P0() volatile
    {
        return PMU_POWER_DETECT_CTRL & (1u << 8u);
    }

    /**
     * Set PMU_POWER_DETECT_CTRL's CKGB_LPSR1P0 bit.
     *
     * ckgb_lpsr1p0
     */
    inline void set_PMU_POWER_DETECT_CTRL_CKGB_LPSR1P0() volatile
    {
        PMU_POWER_DETECT_CTRL |= 1u << 8u;
    }

    /**
     * Clear PMU_POWER_DETECT_CTRL's CKGB_LPSR1P0 bit.
     *
     * ckgb_lpsr1p0
     */
    inline void clear_PMU_POWER_DETECT_CTRL_CKGB_LPSR1P0() volatile
    {
        PMU_POWER_DETECT_CTRL &= ~(1u << 8u);
    }

    /**
     * Toggle PMU_POWER_DETECT_CTRL's CKGB_LPSR1P0 bit.
     *
     * ckgb_lpsr1p0
     */
    inline void toggle_PMU_POWER_DETECT_CTRL_CKGB_LPSR1P0() volatile
    {
        PMU_POWER_DETECT_CTRL ^= 1u << 8u;
    }

    /**
     * Get LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline bool get_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        return LDO_PLL_ENABLE_SP & (1u << 15u);
    }

    /**
     * Set LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline void set_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        LDO_PLL_ENABLE_SP |= 1u << 15u;
    }

    /**
     * Clear LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline void clear_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        LDO_PLL_ENABLE_SP &= ~(1u << 15u);
    }

    /**
     * Toggle LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline void toggle_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        LDO_PLL_ENABLE_SP ^= 1u << 15u;
    }

    /**
     * Get LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline bool get_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        return LDO_PLL_ENABLE_SP & (1u << 14u);
    }

    /**
     * Set LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline void set_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        LDO_PLL_ENABLE_SP |= 1u << 14u;
    }

    /**
     * Clear LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline void clear_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        LDO_PLL_ENABLE_SP &= ~(1u << 14u);
    }

    /**
     * Toggle LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline void toggle_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        LDO_PLL_ENABLE_SP ^= 1u << 14u;
    }

    /**
     * Get LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline bool get_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        return LDO_PLL_ENABLE_SP & (1u << 13u);
    }

    /**
     * Set LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline void set_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        LDO_PLL_ENABLE_SP |= 1u << 13u;
    }

    /**
     * Clear LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline void clear_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        LDO_PLL_ENABLE_SP &= ~(1u << 13u);
    }

    /**
     * Toggle LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline void toggle_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        LDO_PLL_ENABLE_SP ^= 1u << 13u;
    }

    /**
     * Get LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline bool get_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        return LDO_PLL_ENABLE_SP & (1u << 12u);
    }

    /**
     * Set LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline void set_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        LDO_PLL_ENABLE_SP |= 1u << 12u;
    }

    /**
     * Clear LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline void clear_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        LDO_PLL_ENABLE_SP &= ~(1u << 12u);
    }

    /**
     * Toggle LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline void toggle_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        LDO_PLL_ENABLE_SP ^= 1u << 12u;
    }

    /**
     * Get LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline bool get_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        return LDO_PLL_ENABLE_SP & (1u << 11u);
    }

    /**
     * Set LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline void set_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        LDO_PLL_ENABLE_SP |= 1u << 11u;
    }

    /**
     * Clear LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline void clear_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        LDO_PLL_ENABLE_SP &= ~(1u << 11u);
    }

    /**
     * Toggle LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline void toggle_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        LDO_PLL_ENABLE_SP ^= 1u << 11u;
    }

    /**
     * Get LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline bool get_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        return LDO_PLL_ENABLE_SP & (1u << 10u);
    }

    /**
     * Set LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline void set_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        LDO_PLL_ENABLE_SP |= 1u << 10u;
    }

    /**
     * Clear LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline void clear_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        LDO_PLL_ENABLE_SP &= ~(1u << 10u);
    }

    /**
     * Toggle LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline void toggle_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        LDO_PLL_ENABLE_SP ^= 1u << 10u;
    }

    /**
     * Get LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline bool get_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        return LDO_PLL_ENABLE_SP & (1u << 9u);
    }

    /**
     * Set LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline void set_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        LDO_PLL_ENABLE_SP |= 1u << 9u;
    }

    /**
     * Clear LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline void clear_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        LDO_PLL_ENABLE_SP &= ~(1u << 9u);
    }

    /**
     * Toggle LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline void toggle_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        LDO_PLL_ENABLE_SP ^= 1u << 9u;
    }

    /**
     * Get LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline bool get_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        return LDO_PLL_ENABLE_SP & (1u << 8u);
    }

    /**
     * Set LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline void set_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        LDO_PLL_ENABLE_SP |= 1u << 8u;
    }

    /**
     * Clear LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline void clear_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        LDO_PLL_ENABLE_SP &= ~(1u << 8u);
    }

    /**
     * Toggle LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline void toggle_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        LDO_PLL_ENABLE_SP ^= 1u << 8u;
    }

    /**
     * Get LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline bool get_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        return LDO_PLL_ENABLE_SP & (1u << 7u);
    }

    /**
     * Set LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline void set_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        LDO_PLL_ENABLE_SP |= 1u << 7u;
    }

    /**
     * Clear LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline void clear_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        LDO_PLL_ENABLE_SP &= ~(1u << 7u);
    }

    /**
     * Toggle LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline void toggle_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        LDO_PLL_ENABLE_SP ^= 1u << 7u;
    }

    /**
     * Get LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline bool get_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        return LDO_PLL_ENABLE_SP & (1u << 6u);
    }

    /**
     * Set LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline void set_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        LDO_PLL_ENABLE_SP |= 1u << 6u;
    }

    /**
     * Clear LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline void clear_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        LDO_PLL_ENABLE_SP &= ~(1u << 6u);
    }

    /**
     * Toggle LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline void toggle_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        LDO_PLL_ENABLE_SP ^= 1u << 6u;
    }

    /**
     * Get LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline bool get_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        return LDO_PLL_ENABLE_SP & (1u << 5u);
    }

    /**
     * Set LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void set_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        LDO_PLL_ENABLE_SP |= 1u << 5u;
    }

    /**
     * Clear LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void clear_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        LDO_PLL_ENABLE_SP &= ~(1u << 5u);
    }

    /**
     * Toggle LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void toggle_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        LDO_PLL_ENABLE_SP ^= 1u << 5u;
    }

    /**
     * Get LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline bool get_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        return LDO_PLL_ENABLE_SP & (1u << 4u);
    }

    /**
     * Set LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline void set_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        LDO_PLL_ENABLE_SP |= 1u << 4u;
    }

    /**
     * Clear LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline void clear_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        LDO_PLL_ENABLE_SP &= ~(1u << 4u);
    }

    /**
     * Toggle LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline void toggle_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        LDO_PLL_ENABLE_SP ^= 1u << 4u;
    }

    /**
     * Get LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline bool get_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        return LDO_PLL_ENABLE_SP & (1u << 3u);
    }

    /**
     * Set LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline void set_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        LDO_PLL_ENABLE_SP |= 1u << 3u;
    }

    /**
     * Clear LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline void clear_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        LDO_PLL_ENABLE_SP &= ~(1u << 3u);
    }

    /**
     * Toggle LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline void toggle_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        LDO_PLL_ENABLE_SP ^= 1u << 3u;
    }

    /**
     * Get LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline bool get_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        return LDO_PLL_ENABLE_SP & (1u << 2u);
    }

    /**
     * Set LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline void set_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        LDO_PLL_ENABLE_SP |= 1u << 2u;
    }

    /**
     * Clear LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline void clear_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        LDO_PLL_ENABLE_SP &= ~(1u << 2u);
    }

    /**
     * Toggle LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline void toggle_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        LDO_PLL_ENABLE_SP ^= 1u << 2u;
    }

    /**
     * Get LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline bool get_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        return LDO_PLL_ENABLE_SP & (1u << 1u);
    }

    /**
     * Set LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline void set_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        LDO_PLL_ENABLE_SP |= 1u << 1u;
    }

    /**
     * Clear LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline void clear_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        LDO_PLL_ENABLE_SP &= ~(1u << 1u);
    }

    /**
     * Toggle LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline void toggle_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        LDO_PLL_ENABLE_SP ^= 1u << 1u;
    }

    /**
     * Get LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline bool get_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        return LDO_PLL_ENABLE_SP & (1u << 0u);
    }

    /**
     * Set LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline void set_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        LDO_PLL_ENABLE_SP |= 1u << 0u;
    }

    /**
     * Clear LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline void clear_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        LDO_PLL_ENABLE_SP &= ~(1u << 0u);
    }

    /**
     * Toggle LDO_PLL_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline void toggle_LDO_PLL_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        LDO_PLL_ENABLE_SP ^= 1u << 0u;
    }

    /**
     * Get all of LDO_PLL_ENABLE_SP's bit fields.
     *
     * (read-write) LDO_PLL_ENABLE_SP_REGISTER
     */
    inline void get_LDO_PLL_ENABLE_SP(
        bool &ON_OFF_SETPOINT15, bool &ON_OFF_SETPOINT14,
        bool &ON_OFF_SETPOINT13, bool &ON_OFF_SETPOINT12,
        bool &ON_OFF_SETPOINT11, bool &ON_OFF_SETPOINT10,
        bool &ON_OFF_SETPOINT9, bool &ON_OFF_SETPOINT8, bool &ON_OFF_SETPOINT7,
        bool &ON_OFF_SETPOINT6, bool &ON_OFF_SETPOINT5, bool &ON_OFF_SETPOINT4,
        bool &ON_OFF_SETPOINT3, bool &ON_OFF_SETPOINT2, bool &ON_OFF_SETPOINT1,
        bool &ON_OFF_SETPOINT0) volatile
    {
        uint32_t curr = LDO_PLL_ENABLE_SP;

        ON_OFF_SETPOINT15 = curr & (1u << 15u);
        ON_OFF_SETPOINT14 = curr & (1u << 14u);
        ON_OFF_SETPOINT13 = curr & (1u << 13u);
        ON_OFF_SETPOINT12 = curr & (1u << 12u);
        ON_OFF_SETPOINT11 = curr & (1u << 11u);
        ON_OFF_SETPOINT10 = curr & (1u << 10u);
        ON_OFF_SETPOINT9 = curr & (1u << 9u);
        ON_OFF_SETPOINT8 = curr & (1u << 8u);
        ON_OFF_SETPOINT7 = curr & (1u << 7u);
        ON_OFF_SETPOINT6 = curr & (1u << 6u);
        ON_OFF_SETPOINT5 = curr & (1u << 5u);
        ON_OFF_SETPOINT4 = curr & (1u << 4u);
        ON_OFF_SETPOINT3 = curr & (1u << 3u);
        ON_OFF_SETPOINT2 = curr & (1u << 2u);
        ON_OFF_SETPOINT1 = curr & (1u << 1u);
        ON_OFF_SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of LDO_PLL_ENABLE_SP's bit fields.
     *
     * (read-write) LDO_PLL_ENABLE_SP_REGISTER
     */
    inline void set_LDO_PLL_ENABLE_SP(
        bool ON_OFF_SETPOINT15, bool ON_OFF_SETPOINT14, bool ON_OFF_SETPOINT13,
        bool ON_OFF_SETPOINT12, bool ON_OFF_SETPOINT11, bool ON_OFF_SETPOINT10,
        bool ON_OFF_SETPOINT9, bool ON_OFF_SETPOINT8, bool ON_OFF_SETPOINT7,
        bool ON_OFF_SETPOINT6, bool ON_OFF_SETPOINT5, bool ON_OFF_SETPOINT4,
        bool ON_OFF_SETPOINT3, bool ON_OFF_SETPOINT2, bool ON_OFF_SETPOINT1,
        bool ON_OFF_SETPOINT0) volatile
    {
        uint32_t curr = LDO_PLL_ENABLE_SP;

        curr &= ~(0b1u << 15u);
        curr |= (ON_OFF_SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (ON_OFF_SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (ON_OFF_SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (ON_OFF_SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (ON_OFF_SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (ON_OFF_SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (ON_OFF_SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (ON_OFF_SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (ON_OFF_SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (ON_OFF_SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (ON_OFF_SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ON_OFF_SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (ON_OFF_SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (ON_OFF_SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (ON_OFF_SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ON_OFF_SETPOINT0 & 0b1u) << 0u;

        LDO_PLL_ENABLE_SP = curr;
    }

    /**
     * Get LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline bool get_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        return LDO_LPSR_ANA_ENABLE_SP & (1u << 15u);
    }

    /**
     * Set LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline void set_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP |= 1u << 15u;
    }

    /**
     * Clear LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline void clear_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP &= ~(1u << 15u);
    }

    /**
     * Toggle LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline void toggle_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP ^= 1u << 15u;
    }

    /**
     * Get LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline bool get_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        return LDO_LPSR_ANA_ENABLE_SP & (1u << 14u);
    }

    /**
     * Set LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline void set_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP |= 1u << 14u;
    }

    /**
     * Clear LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline void clear_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP &= ~(1u << 14u);
    }

    /**
     * Toggle LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline void toggle_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP ^= 1u << 14u;
    }

    /**
     * Get LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline bool get_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        return LDO_LPSR_ANA_ENABLE_SP & (1u << 13u);
    }

    /**
     * Set LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline void set_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP |= 1u << 13u;
    }

    /**
     * Clear LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline void clear_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP &= ~(1u << 13u);
    }

    /**
     * Toggle LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline void toggle_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP ^= 1u << 13u;
    }

    /**
     * Get LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline bool get_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        return LDO_LPSR_ANA_ENABLE_SP & (1u << 12u);
    }

    /**
     * Set LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline void set_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP |= 1u << 12u;
    }

    /**
     * Clear LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline void clear_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP &= ~(1u << 12u);
    }

    /**
     * Toggle LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline void toggle_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP ^= 1u << 12u;
    }

    /**
     * Get LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline bool get_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        return LDO_LPSR_ANA_ENABLE_SP & (1u << 11u);
    }

    /**
     * Set LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline void set_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP |= 1u << 11u;
    }

    /**
     * Clear LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline void clear_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP &= ~(1u << 11u);
    }

    /**
     * Toggle LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline void toggle_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP ^= 1u << 11u;
    }

    /**
     * Get LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline bool get_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        return LDO_LPSR_ANA_ENABLE_SP & (1u << 10u);
    }

    /**
     * Set LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline void set_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP |= 1u << 10u;
    }

    /**
     * Clear LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline void clear_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP &= ~(1u << 10u);
    }

    /**
     * Toggle LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline void toggle_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP ^= 1u << 10u;
    }

    /**
     * Get LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline bool get_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        return LDO_LPSR_ANA_ENABLE_SP & (1u << 9u);
    }

    /**
     * Set LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline void set_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP |= 1u << 9u;
    }

    /**
     * Clear LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline void clear_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP &= ~(1u << 9u);
    }

    /**
     * Toggle LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline void toggle_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP ^= 1u << 9u;
    }

    /**
     * Get LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline bool get_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        return LDO_LPSR_ANA_ENABLE_SP & (1u << 8u);
    }

    /**
     * Set LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline void set_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP |= 1u << 8u;
    }

    /**
     * Clear LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline void clear_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP &= ~(1u << 8u);
    }

    /**
     * Toggle LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline void toggle_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP ^= 1u << 8u;
    }

    /**
     * Get LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline bool get_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        return LDO_LPSR_ANA_ENABLE_SP & (1u << 7u);
    }

    /**
     * Set LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline void set_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP |= 1u << 7u;
    }

    /**
     * Clear LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline void clear_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP &= ~(1u << 7u);
    }

    /**
     * Toggle LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline void toggle_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP ^= 1u << 7u;
    }

    /**
     * Get LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline bool get_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        return LDO_LPSR_ANA_ENABLE_SP & (1u << 6u);
    }

    /**
     * Set LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline void set_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP |= 1u << 6u;
    }

    /**
     * Clear LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline void clear_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP &= ~(1u << 6u);
    }

    /**
     * Toggle LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline void toggle_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP ^= 1u << 6u;
    }

    /**
     * Get LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline bool get_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        return LDO_LPSR_ANA_ENABLE_SP & (1u << 5u);
    }

    /**
     * Set LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void set_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP |= 1u << 5u;
    }

    /**
     * Clear LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void clear_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP &= ~(1u << 5u);
    }

    /**
     * Toggle LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void toggle_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP ^= 1u << 5u;
    }

    /**
     * Get LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline bool get_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        return LDO_LPSR_ANA_ENABLE_SP & (1u << 4u);
    }

    /**
     * Set LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline void set_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP |= 1u << 4u;
    }

    /**
     * Clear LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline void clear_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP &= ~(1u << 4u);
    }

    /**
     * Toggle LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline void toggle_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP ^= 1u << 4u;
    }

    /**
     * Get LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline bool get_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        return LDO_LPSR_ANA_ENABLE_SP & (1u << 3u);
    }

    /**
     * Set LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline void set_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP |= 1u << 3u;
    }

    /**
     * Clear LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline void clear_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP &= ~(1u << 3u);
    }

    /**
     * Toggle LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline void toggle_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP ^= 1u << 3u;
    }

    /**
     * Get LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline bool get_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        return LDO_LPSR_ANA_ENABLE_SP & (1u << 2u);
    }

    /**
     * Set LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline void set_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP |= 1u << 2u;
    }

    /**
     * Clear LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline void clear_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP &= ~(1u << 2u);
    }

    /**
     * Toggle LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline void toggle_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP ^= 1u << 2u;
    }

    /**
     * Get LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline bool get_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        return LDO_LPSR_ANA_ENABLE_SP & (1u << 1u);
    }

    /**
     * Set LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline void set_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP |= 1u << 1u;
    }

    /**
     * Clear LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline void clear_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP &= ~(1u << 1u);
    }

    /**
     * Toggle LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline void toggle_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP ^= 1u << 1u;
    }

    /**
     * Get LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline bool get_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        return LDO_LPSR_ANA_ENABLE_SP & (1u << 0u);
    }

    /**
     * Set LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline void set_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP |= 1u << 0u;
    }

    /**
     * Clear LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline void clear_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP &= ~(1u << 0u);
    }

    /**
     * Toggle LDO_LPSR_ANA_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline void toggle_LDO_LPSR_ANA_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        LDO_LPSR_ANA_ENABLE_SP ^= 1u << 0u;
    }

    /**
     * Get all of LDO_LPSR_ANA_ENABLE_SP's bit fields.
     *
     * (read-write) LDO_LPSR_ANA_ENABLE_SP_REGISTER
     */
    inline void get_LDO_LPSR_ANA_ENABLE_SP(
        bool &ON_OFF_SETPOINT15, bool &ON_OFF_SETPOINT14,
        bool &ON_OFF_SETPOINT13, bool &ON_OFF_SETPOINT12,
        bool &ON_OFF_SETPOINT11, bool &ON_OFF_SETPOINT10,
        bool &ON_OFF_SETPOINT9, bool &ON_OFF_SETPOINT8, bool &ON_OFF_SETPOINT7,
        bool &ON_OFF_SETPOINT6, bool &ON_OFF_SETPOINT5, bool &ON_OFF_SETPOINT4,
        bool &ON_OFF_SETPOINT3, bool &ON_OFF_SETPOINT2, bool &ON_OFF_SETPOINT1,
        bool &ON_OFF_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_ANA_ENABLE_SP;

        ON_OFF_SETPOINT15 = curr & (1u << 15u);
        ON_OFF_SETPOINT14 = curr & (1u << 14u);
        ON_OFF_SETPOINT13 = curr & (1u << 13u);
        ON_OFF_SETPOINT12 = curr & (1u << 12u);
        ON_OFF_SETPOINT11 = curr & (1u << 11u);
        ON_OFF_SETPOINT10 = curr & (1u << 10u);
        ON_OFF_SETPOINT9 = curr & (1u << 9u);
        ON_OFF_SETPOINT8 = curr & (1u << 8u);
        ON_OFF_SETPOINT7 = curr & (1u << 7u);
        ON_OFF_SETPOINT6 = curr & (1u << 6u);
        ON_OFF_SETPOINT5 = curr & (1u << 5u);
        ON_OFF_SETPOINT4 = curr & (1u << 4u);
        ON_OFF_SETPOINT3 = curr & (1u << 3u);
        ON_OFF_SETPOINT2 = curr & (1u << 2u);
        ON_OFF_SETPOINT1 = curr & (1u << 1u);
        ON_OFF_SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of LDO_LPSR_ANA_ENABLE_SP's bit fields.
     *
     * (read-write) LDO_LPSR_ANA_ENABLE_SP_REGISTER
     */
    inline void set_LDO_LPSR_ANA_ENABLE_SP(
        bool ON_OFF_SETPOINT15, bool ON_OFF_SETPOINT14, bool ON_OFF_SETPOINT13,
        bool ON_OFF_SETPOINT12, bool ON_OFF_SETPOINT11, bool ON_OFF_SETPOINT10,
        bool ON_OFF_SETPOINT9, bool ON_OFF_SETPOINT8, bool ON_OFF_SETPOINT7,
        bool ON_OFF_SETPOINT6, bool ON_OFF_SETPOINT5, bool ON_OFF_SETPOINT4,
        bool ON_OFF_SETPOINT3, bool ON_OFF_SETPOINT2, bool ON_OFF_SETPOINT1,
        bool ON_OFF_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_ANA_ENABLE_SP;

        curr &= ~(0b1u << 15u);
        curr |= (ON_OFF_SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (ON_OFF_SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (ON_OFF_SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (ON_OFF_SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (ON_OFF_SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (ON_OFF_SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (ON_OFF_SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (ON_OFF_SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (ON_OFF_SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (ON_OFF_SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (ON_OFF_SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ON_OFF_SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (ON_OFF_SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (ON_OFF_SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (ON_OFF_SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ON_OFF_SETPOINT0 & 0b1u) << 0u;

        LDO_LPSR_ANA_ENABLE_SP = curr;
    }

    /**
     * Get LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT15 bit.
     *
     * LP_MODE_SETPOINT15
     */
    inline bool get_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT15() volatile
    {
        return LDO_LPSR_ANA_LP_MODE_SP & (1u << 15u);
    }

    /**
     * Set LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT15 bit.
     *
     * LP_MODE_SETPOINT15
     */
    inline void set_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT15() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP |= 1u << 15u;
    }

    /**
     * Clear LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT15 bit.
     *
     * LP_MODE_SETPOINT15
     */
    inline void clear_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT15() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP &= ~(1u << 15u);
    }

    /**
     * Toggle LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT15 bit.
     *
     * LP_MODE_SETPOINT15
     */
    inline void toggle_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT15() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP ^= 1u << 15u;
    }

    /**
     * Get LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT14 bit.
     *
     * LP_MODE_SETPOINT14
     */
    inline bool get_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT14() volatile
    {
        return LDO_LPSR_ANA_LP_MODE_SP & (1u << 14u);
    }

    /**
     * Set LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT14 bit.
     *
     * LP_MODE_SETPOINT14
     */
    inline void set_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT14() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP |= 1u << 14u;
    }

    /**
     * Clear LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT14 bit.
     *
     * LP_MODE_SETPOINT14
     */
    inline void clear_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT14() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP &= ~(1u << 14u);
    }

    /**
     * Toggle LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT14 bit.
     *
     * LP_MODE_SETPOINT14
     */
    inline void toggle_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT14() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP ^= 1u << 14u;
    }

    /**
     * Get LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT13 bit.
     *
     * LP_MODE_SETPOINT13
     */
    inline bool get_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT13() volatile
    {
        return LDO_LPSR_ANA_LP_MODE_SP & (1u << 13u);
    }

    /**
     * Set LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT13 bit.
     *
     * LP_MODE_SETPOINT13
     */
    inline void set_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT13() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP |= 1u << 13u;
    }

    /**
     * Clear LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT13 bit.
     *
     * LP_MODE_SETPOINT13
     */
    inline void clear_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT13() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP &= ~(1u << 13u);
    }

    /**
     * Toggle LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT13 bit.
     *
     * LP_MODE_SETPOINT13
     */
    inline void toggle_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT13() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP ^= 1u << 13u;
    }

    /**
     * Get LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT12 bit.
     *
     * LP_MODE_SETPOINT12
     */
    inline bool get_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT12() volatile
    {
        return LDO_LPSR_ANA_LP_MODE_SP & (1u << 12u);
    }

    /**
     * Set LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT12 bit.
     *
     * LP_MODE_SETPOINT12
     */
    inline void set_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT12() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP |= 1u << 12u;
    }

    /**
     * Clear LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT12 bit.
     *
     * LP_MODE_SETPOINT12
     */
    inline void clear_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT12() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP &= ~(1u << 12u);
    }

    /**
     * Toggle LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT12 bit.
     *
     * LP_MODE_SETPOINT12
     */
    inline void toggle_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT12() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP ^= 1u << 12u;
    }

    /**
     * Get LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT11 bit.
     *
     * LP_MODE_SETPOINT11
     */
    inline bool get_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT11() volatile
    {
        return LDO_LPSR_ANA_LP_MODE_SP & (1u << 11u);
    }

    /**
     * Set LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT11 bit.
     *
     * LP_MODE_SETPOINT11
     */
    inline void set_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT11() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP |= 1u << 11u;
    }

    /**
     * Clear LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT11 bit.
     *
     * LP_MODE_SETPOINT11
     */
    inline void clear_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT11() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP &= ~(1u << 11u);
    }

    /**
     * Toggle LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT11 bit.
     *
     * LP_MODE_SETPOINT11
     */
    inline void toggle_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT11() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP ^= 1u << 11u;
    }

    /**
     * Get LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT10 bit.
     *
     * LP_MODE_SETPOINT10
     */
    inline bool get_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT10() volatile
    {
        return LDO_LPSR_ANA_LP_MODE_SP & (1u << 10u);
    }

    /**
     * Set LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT10 bit.
     *
     * LP_MODE_SETPOINT10
     */
    inline void set_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT10() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP |= 1u << 10u;
    }

    /**
     * Clear LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT10 bit.
     *
     * LP_MODE_SETPOINT10
     */
    inline void clear_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT10() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP &= ~(1u << 10u);
    }

    /**
     * Toggle LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT10 bit.
     *
     * LP_MODE_SETPOINT10
     */
    inline void toggle_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT10() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP ^= 1u << 10u;
    }

    /**
     * Get LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT9 bit.
     *
     * LP_MODE_SETPOINT9
     */
    inline bool get_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT9() volatile
    {
        return LDO_LPSR_ANA_LP_MODE_SP & (1u << 9u);
    }

    /**
     * Set LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT9 bit.
     *
     * LP_MODE_SETPOINT9
     */
    inline void set_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT9() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP |= 1u << 9u;
    }

    /**
     * Clear LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT9 bit.
     *
     * LP_MODE_SETPOINT9
     */
    inline void clear_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT9() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP &= ~(1u << 9u);
    }

    /**
     * Toggle LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT9 bit.
     *
     * LP_MODE_SETPOINT9
     */
    inline void toggle_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT9() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP ^= 1u << 9u;
    }

    /**
     * Get LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT8 bit.
     *
     * LP_MODE_SETPOINT8
     */
    inline bool get_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT8() volatile
    {
        return LDO_LPSR_ANA_LP_MODE_SP & (1u << 8u);
    }

    /**
     * Set LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT8 bit.
     *
     * LP_MODE_SETPOINT8
     */
    inline void set_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT8() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP |= 1u << 8u;
    }

    /**
     * Clear LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT8 bit.
     *
     * LP_MODE_SETPOINT8
     */
    inline void clear_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT8() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP &= ~(1u << 8u);
    }

    /**
     * Toggle LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT8 bit.
     *
     * LP_MODE_SETPOINT8
     */
    inline void toggle_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT8() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP ^= 1u << 8u;
    }

    /**
     * Get LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT7 bit.
     *
     * LP_MODE_SETPOINT7
     */
    inline bool get_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT7() volatile
    {
        return LDO_LPSR_ANA_LP_MODE_SP & (1u << 7u);
    }

    /**
     * Set LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT7 bit.
     *
     * LP_MODE_SETPOINT7
     */
    inline void set_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT7() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP |= 1u << 7u;
    }

    /**
     * Clear LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT7 bit.
     *
     * LP_MODE_SETPOINT7
     */
    inline void clear_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT7() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP &= ~(1u << 7u);
    }

    /**
     * Toggle LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT7 bit.
     *
     * LP_MODE_SETPOINT7
     */
    inline void toggle_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT7() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP ^= 1u << 7u;
    }

    /**
     * Get LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT6 bit.
     *
     * LP_MODE_SETPOINT6
     */
    inline bool get_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT6() volatile
    {
        return LDO_LPSR_ANA_LP_MODE_SP & (1u << 6u);
    }

    /**
     * Set LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT6 bit.
     *
     * LP_MODE_SETPOINT6
     */
    inline void set_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT6() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP |= 1u << 6u;
    }

    /**
     * Clear LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT6 bit.
     *
     * LP_MODE_SETPOINT6
     */
    inline void clear_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT6() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP &= ~(1u << 6u);
    }

    /**
     * Toggle LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT6 bit.
     *
     * LP_MODE_SETPOINT6
     */
    inline void toggle_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT6() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP ^= 1u << 6u;
    }

    /**
     * Get LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT5 bit.
     *
     * LP_MODE_SETPOINT5
     */
    inline bool get_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT5() volatile
    {
        return LDO_LPSR_ANA_LP_MODE_SP & (1u << 5u);
    }

    /**
     * Set LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT5 bit.
     *
     * LP_MODE_SETPOINT5
     */
    inline void set_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT5() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP |= 1u << 5u;
    }

    /**
     * Clear LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT5 bit.
     *
     * LP_MODE_SETPOINT5
     */
    inline void clear_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT5() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP &= ~(1u << 5u);
    }

    /**
     * Toggle LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT5 bit.
     *
     * LP_MODE_SETPOINT5
     */
    inline void toggle_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT5() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP ^= 1u << 5u;
    }

    /**
     * Get LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT4 bit.
     *
     * LP_MODE_SETPOINT4
     */
    inline bool get_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT4() volatile
    {
        return LDO_LPSR_ANA_LP_MODE_SP & (1u << 4u);
    }

    /**
     * Set LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT4 bit.
     *
     * LP_MODE_SETPOINT4
     */
    inline void set_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT4() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP |= 1u << 4u;
    }

    /**
     * Clear LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT4 bit.
     *
     * LP_MODE_SETPOINT4
     */
    inline void clear_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT4() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP &= ~(1u << 4u);
    }

    /**
     * Toggle LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT4 bit.
     *
     * LP_MODE_SETPOINT4
     */
    inline void toggle_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT4() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP ^= 1u << 4u;
    }

    /**
     * Get LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT3 bit.
     *
     * LP_MODE_SETPOINT3
     */
    inline bool get_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT3() volatile
    {
        return LDO_LPSR_ANA_LP_MODE_SP & (1u << 3u);
    }

    /**
     * Set LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT3 bit.
     *
     * LP_MODE_SETPOINT3
     */
    inline void set_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT3() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP |= 1u << 3u;
    }

    /**
     * Clear LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT3 bit.
     *
     * LP_MODE_SETPOINT3
     */
    inline void clear_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT3() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP &= ~(1u << 3u);
    }

    /**
     * Toggle LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT3 bit.
     *
     * LP_MODE_SETPOINT3
     */
    inline void toggle_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT3() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP ^= 1u << 3u;
    }

    /**
     * Get LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT2 bit.
     *
     * LP_MODE_SETPOINT2
     */
    inline bool get_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT2() volatile
    {
        return LDO_LPSR_ANA_LP_MODE_SP & (1u << 2u);
    }

    /**
     * Set LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT2 bit.
     *
     * LP_MODE_SETPOINT2
     */
    inline void set_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT2() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP |= 1u << 2u;
    }

    /**
     * Clear LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT2 bit.
     *
     * LP_MODE_SETPOINT2
     */
    inline void clear_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT2() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP &= ~(1u << 2u);
    }

    /**
     * Toggle LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPONIT2 bit.
     *
     * LP_MODE_SETPOINT2
     */
    inline void toggle_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPONIT2() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP ^= 1u << 2u;
    }

    /**
     * Get LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPOINT1 bit.
     *
     * LP_MODE_SETPOINT1
     */
    inline bool get_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPOINT1() volatile
    {
        return LDO_LPSR_ANA_LP_MODE_SP & (1u << 1u);
    }

    /**
     * Set LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPOINT1 bit.
     *
     * LP_MODE_SETPOINT1
     */
    inline void set_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPOINT1() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP |= 1u << 1u;
    }

    /**
     * Clear LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPOINT1 bit.
     *
     * LP_MODE_SETPOINT1
     */
    inline void clear_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPOINT1() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP &= ~(1u << 1u);
    }

    /**
     * Toggle LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPOINT1 bit.
     *
     * LP_MODE_SETPOINT1
     */
    inline void toggle_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPOINT1() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP ^= 1u << 1u;
    }

    /**
     * Get LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPOINT0 bit.
     *
     * LP_MODE_SETPOINT0
     */
    inline bool get_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPOINT0() volatile
    {
        return LDO_LPSR_ANA_LP_MODE_SP & (1u << 0u);
    }

    /**
     * Set LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPOINT0 bit.
     *
     * LP_MODE_SETPOINT0
     */
    inline void set_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPOINT0() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP |= 1u << 0u;
    }

    /**
     * Clear LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPOINT0 bit.
     *
     * LP_MODE_SETPOINT0
     */
    inline void clear_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPOINT0() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP &= ~(1u << 0u);
    }

    /**
     * Toggle LDO_LPSR_ANA_LP_MODE_SP's LP_MODE_SETPOINT0 bit.
     *
     * LP_MODE_SETPOINT0
     */
    inline void toggle_LDO_LPSR_ANA_LP_MODE_SP_LP_MODE_SETPOINT0() volatile
    {
        LDO_LPSR_ANA_LP_MODE_SP ^= 1u << 0u;
    }

    /**
     * Get all of LDO_LPSR_ANA_LP_MODE_SP's bit fields.
     *
     * (read-write) LDO_LPSR_ANA_LP_MODE_SP_REGISTER
     */
    inline void get_LDO_LPSR_ANA_LP_MODE_SP(
        bool &LP_MODE_SETPONIT15, bool &LP_MODE_SETPONIT14,
        bool &LP_MODE_SETPONIT13, bool &LP_MODE_SETPONIT12,
        bool &LP_MODE_SETPONIT11, bool &LP_MODE_SETPONIT10,
        bool &LP_MODE_SETPONIT9, bool &LP_MODE_SETPONIT8,
        bool &LP_MODE_SETPONIT7, bool &LP_MODE_SETPONIT6,
        bool &LP_MODE_SETPONIT5, bool &LP_MODE_SETPONIT4,
        bool &LP_MODE_SETPONIT3, bool &LP_MODE_SETPONIT2,
        bool &LP_MODE_SETPOINT1, bool &LP_MODE_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_ANA_LP_MODE_SP;

        LP_MODE_SETPONIT15 = curr & (1u << 15u);
        LP_MODE_SETPONIT14 = curr & (1u << 14u);
        LP_MODE_SETPONIT13 = curr & (1u << 13u);
        LP_MODE_SETPONIT12 = curr & (1u << 12u);
        LP_MODE_SETPONIT11 = curr & (1u << 11u);
        LP_MODE_SETPONIT10 = curr & (1u << 10u);
        LP_MODE_SETPONIT9 = curr & (1u << 9u);
        LP_MODE_SETPONIT8 = curr & (1u << 8u);
        LP_MODE_SETPONIT7 = curr & (1u << 7u);
        LP_MODE_SETPONIT6 = curr & (1u << 6u);
        LP_MODE_SETPONIT5 = curr & (1u << 5u);
        LP_MODE_SETPONIT4 = curr & (1u << 4u);
        LP_MODE_SETPONIT3 = curr & (1u << 3u);
        LP_MODE_SETPONIT2 = curr & (1u << 2u);
        LP_MODE_SETPOINT1 = curr & (1u << 1u);
        LP_MODE_SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of LDO_LPSR_ANA_LP_MODE_SP's bit fields.
     *
     * (read-write) LDO_LPSR_ANA_LP_MODE_SP_REGISTER
     */
    inline void set_LDO_LPSR_ANA_LP_MODE_SP(
        bool LP_MODE_SETPONIT15, bool LP_MODE_SETPONIT14,
        bool LP_MODE_SETPONIT13, bool LP_MODE_SETPONIT12,
        bool LP_MODE_SETPONIT11, bool LP_MODE_SETPONIT10,
        bool LP_MODE_SETPONIT9, bool LP_MODE_SETPONIT8, bool LP_MODE_SETPONIT7,
        bool LP_MODE_SETPONIT6, bool LP_MODE_SETPONIT5, bool LP_MODE_SETPONIT4,
        bool LP_MODE_SETPONIT3, bool LP_MODE_SETPONIT2, bool LP_MODE_SETPOINT1,
        bool LP_MODE_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_ANA_LP_MODE_SP;

        curr &= ~(0b1u << 15u);
        curr |= (LP_MODE_SETPONIT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (LP_MODE_SETPONIT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (LP_MODE_SETPONIT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (LP_MODE_SETPONIT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (LP_MODE_SETPONIT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (LP_MODE_SETPONIT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (LP_MODE_SETPONIT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (LP_MODE_SETPONIT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (LP_MODE_SETPONIT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (LP_MODE_SETPONIT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (LP_MODE_SETPONIT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (LP_MODE_SETPONIT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (LP_MODE_SETPONIT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (LP_MODE_SETPONIT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (LP_MODE_SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (LP_MODE_SETPOINT0 & 0b1u) << 0u;

        LDO_LPSR_ANA_LP_MODE_SP = curr;
    }

    /**
     * Get LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT15 bit.
     *
     * TRACKING_EN_SETPOINT15
     */
    inline bool
    get_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT15() volatile
    {
        return LDO_LPSR_ANA_TRACKING_EN_SP & (1u << 15u);
    }

    /**
     * Set LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT15 bit.
     *
     * TRACKING_EN_SETPOINT15
     */
    inline void
    set_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT15() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP |= 1u << 15u;
    }

    /**
     * Clear LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT15 bit.
     *
     * TRACKING_EN_SETPOINT15
     */
    inline void
    clear_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT15() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP &= ~(1u << 15u);
    }

    /**
     * Toggle LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT15 bit.
     *
     * TRACKING_EN_SETPOINT15
     */
    inline void
    toggle_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT15() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP ^= 1u << 15u;
    }

    /**
     * Get LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT14 bit.
     *
     * TRACKING_EN_SETPOINT14
     */
    inline bool
    get_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT14() volatile
    {
        return LDO_LPSR_ANA_TRACKING_EN_SP & (1u << 14u);
    }

    /**
     * Set LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT14 bit.
     *
     * TRACKING_EN_SETPOINT14
     */
    inline void
    set_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT14() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP |= 1u << 14u;
    }

    /**
     * Clear LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT14 bit.
     *
     * TRACKING_EN_SETPOINT14
     */
    inline void
    clear_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT14() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP &= ~(1u << 14u);
    }

    /**
     * Toggle LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT14 bit.
     *
     * TRACKING_EN_SETPOINT14
     */
    inline void
    toggle_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT14() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP ^= 1u << 14u;
    }

    /**
     * Get LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT13 bit.
     *
     * TRACKING_EN_SETPOINT13
     */
    inline bool
    get_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT13() volatile
    {
        return LDO_LPSR_ANA_TRACKING_EN_SP & (1u << 13u);
    }

    /**
     * Set LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT13 bit.
     *
     * TRACKING_EN_SETPOINT13
     */
    inline void
    set_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT13() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP |= 1u << 13u;
    }

    /**
     * Clear LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT13 bit.
     *
     * TRACKING_EN_SETPOINT13
     */
    inline void
    clear_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT13() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP &= ~(1u << 13u);
    }

    /**
     * Toggle LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT13 bit.
     *
     * TRACKING_EN_SETPOINT13
     */
    inline void
    toggle_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT13() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP ^= 1u << 13u;
    }

    /**
     * Get LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT12 bit.
     *
     * TRACKING_EN_SETPOINT12
     */
    inline bool
    get_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT12() volatile
    {
        return LDO_LPSR_ANA_TRACKING_EN_SP & (1u << 12u);
    }

    /**
     * Set LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT12 bit.
     *
     * TRACKING_EN_SETPOINT12
     */
    inline void
    set_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT12() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP |= 1u << 12u;
    }

    /**
     * Clear LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT12 bit.
     *
     * TRACKING_EN_SETPOINT12
     */
    inline void
    clear_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT12() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP &= ~(1u << 12u);
    }

    /**
     * Toggle LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT12 bit.
     *
     * TRACKING_EN_SETPOINT12
     */
    inline void
    toggle_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT12() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP ^= 1u << 12u;
    }

    /**
     * Get LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT11 bit.
     *
     * TRACKING_EN_SETPOINT11
     */
    inline bool
    get_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT11() volatile
    {
        return LDO_LPSR_ANA_TRACKING_EN_SP & (1u << 11u);
    }

    /**
     * Set LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT11 bit.
     *
     * TRACKING_EN_SETPOINT11
     */
    inline void
    set_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT11() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP |= 1u << 11u;
    }

    /**
     * Clear LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT11 bit.
     *
     * TRACKING_EN_SETPOINT11
     */
    inline void
    clear_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT11() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP &= ~(1u << 11u);
    }

    /**
     * Toggle LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT11 bit.
     *
     * TRACKING_EN_SETPOINT11
     */
    inline void
    toggle_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT11() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP ^= 1u << 11u;
    }

    /**
     * Get LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT10 bit.
     *
     * TRACKING_EN_SETPOINT10
     */
    inline bool
    get_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT10() volatile
    {
        return LDO_LPSR_ANA_TRACKING_EN_SP & (1u << 10u);
    }

    /**
     * Set LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT10 bit.
     *
     * TRACKING_EN_SETPOINT10
     */
    inline void
    set_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT10() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP |= 1u << 10u;
    }

    /**
     * Clear LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT10 bit.
     *
     * TRACKING_EN_SETPOINT10
     */
    inline void
    clear_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT10() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP &= ~(1u << 10u);
    }

    /**
     * Toggle LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT10 bit.
     *
     * TRACKING_EN_SETPOINT10
     */
    inline void
    toggle_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT10() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP ^= 1u << 10u;
    }

    /**
     * Get LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT9 bit.
     *
     * TRACKING_EN_SETPOINT9
     */
    inline bool
    get_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT9() volatile
    {
        return LDO_LPSR_ANA_TRACKING_EN_SP & (1u << 9u);
    }

    /**
     * Set LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT9 bit.
     *
     * TRACKING_EN_SETPOINT9
     */
    inline void
    set_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT9() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP |= 1u << 9u;
    }

    /**
     * Clear LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT9 bit.
     *
     * TRACKING_EN_SETPOINT9
     */
    inline void
    clear_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT9() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP &= ~(1u << 9u);
    }

    /**
     * Toggle LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT9 bit.
     *
     * TRACKING_EN_SETPOINT9
     */
    inline void
    toggle_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT9() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP ^= 1u << 9u;
    }

    /**
     * Get LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT8 bit.
     *
     * TRACKING_EN_SETPOINT8
     */
    inline bool
    get_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT8() volatile
    {
        return LDO_LPSR_ANA_TRACKING_EN_SP & (1u << 8u);
    }

    /**
     * Set LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT8 bit.
     *
     * TRACKING_EN_SETPOINT8
     */
    inline void
    set_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT8() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP |= 1u << 8u;
    }

    /**
     * Clear LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT8 bit.
     *
     * TRACKING_EN_SETPOINT8
     */
    inline void
    clear_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT8() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP &= ~(1u << 8u);
    }

    /**
     * Toggle LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT8 bit.
     *
     * TRACKING_EN_SETPOINT8
     */
    inline void
    toggle_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT8() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP ^= 1u << 8u;
    }

    /**
     * Get LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT7 bit.
     *
     * TRACKING_EN_SETPOINT7
     */
    inline bool
    get_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT7() volatile
    {
        return LDO_LPSR_ANA_TRACKING_EN_SP & (1u << 7u);
    }

    /**
     * Set LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT7 bit.
     *
     * TRACKING_EN_SETPOINT7
     */
    inline void
    set_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT7() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP |= 1u << 7u;
    }

    /**
     * Clear LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT7 bit.
     *
     * TRACKING_EN_SETPOINT7
     */
    inline void
    clear_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT7() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP &= ~(1u << 7u);
    }

    /**
     * Toggle LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT7 bit.
     *
     * TRACKING_EN_SETPOINT7
     */
    inline void
    toggle_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT7() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP ^= 1u << 7u;
    }

    /**
     * Get LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT6 bit.
     *
     * TRACKING_EN_SETPOINT6
     */
    inline bool
    get_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT6() volatile
    {
        return LDO_LPSR_ANA_TRACKING_EN_SP & (1u << 6u);
    }

    /**
     * Set LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT6 bit.
     *
     * TRACKING_EN_SETPOINT6
     */
    inline void
    set_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT6() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP |= 1u << 6u;
    }

    /**
     * Clear LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT6 bit.
     *
     * TRACKING_EN_SETPOINT6
     */
    inline void
    clear_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT6() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP &= ~(1u << 6u);
    }

    /**
     * Toggle LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT6 bit.
     *
     * TRACKING_EN_SETPOINT6
     */
    inline void
    toggle_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT6() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP ^= 1u << 6u;
    }

    /**
     * Get LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT5 bit.
     *
     * TRACKING_EN_SETPOINT5
     */
    inline bool
    get_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT5() volatile
    {
        return LDO_LPSR_ANA_TRACKING_EN_SP & (1u << 5u);
    }

    /**
     * Set LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT5 bit.
     *
     * TRACKING_EN_SETPOINT5
     */
    inline void
    set_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT5() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP |= 1u << 5u;
    }

    /**
     * Clear LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT5 bit.
     *
     * TRACKING_EN_SETPOINT5
     */
    inline void
    clear_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT5() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP &= ~(1u << 5u);
    }

    /**
     * Toggle LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT5 bit.
     *
     * TRACKING_EN_SETPOINT5
     */
    inline void
    toggle_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT5() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP ^= 1u << 5u;
    }

    /**
     * Get LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT4 bit.
     *
     * TRACKING_EN_SETPOINT4
     */
    inline bool
    get_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT4() volatile
    {
        return LDO_LPSR_ANA_TRACKING_EN_SP & (1u << 4u);
    }

    /**
     * Set LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT4 bit.
     *
     * TRACKING_EN_SETPOINT4
     */
    inline void
    set_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT4() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP |= 1u << 4u;
    }

    /**
     * Clear LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT4 bit.
     *
     * TRACKING_EN_SETPOINT4
     */
    inline void
    clear_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT4() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP &= ~(1u << 4u);
    }

    /**
     * Toggle LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT4 bit.
     *
     * TRACKING_EN_SETPOINT4
     */
    inline void
    toggle_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT4() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP ^= 1u << 4u;
    }

    /**
     * Get LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT3 bit.
     *
     * TRACKING_EN_SETPOINT3
     */
    inline bool
    get_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT3() volatile
    {
        return LDO_LPSR_ANA_TRACKING_EN_SP & (1u << 3u);
    }

    /**
     * Set LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT3 bit.
     *
     * TRACKING_EN_SETPOINT3
     */
    inline void
    set_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT3() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP |= 1u << 3u;
    }

    /**
     * Clear LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT3 bit.
     *
     * TRACKING_EN_SETPOINT3
     */
    inline void
    clear_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT3() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP &= ~(1u << 3u);
    }

    /**
     * Toggle LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT3 bit.
     *
     * TRACKING_EN_SETPOINT3
     */
    inline void
    toggle_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT3() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP ^= 1u << 3u;
    }

    /**
     * Get LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT2 bit.
     *
     * TRACKING_EN_SETPOINT2
     */
    inline bool
    get_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT2() volatile
    {
        return LDO_LPSR_ANA_TRACKING_EN_SP & (1u << 2u);
    }

    /**
     * Set LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT2 bit.
     *
     * TRACKING_EN_SETPOINT2
     */
    inline void
    set_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT2() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP |= 1u << 2u;
    }

    /**
     * Clear LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT2 bit.
     *
     * TRACKING_EN_SETPOINT2
     */
    inline void
    clear_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT2() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP &= ~(1u << 2u);
    }

    /**
     * Toggle LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT2 bit.
     *
     * TRACKING_EN_SETPOINT2
     */
    inline void
    toggle_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT2() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP ^= 1u << 2u;
    }

    /**
     * Get LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT1 bit.
     *
     * TRACKING_EN_SETPOINT1
     */
    inline bool
    get_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT1() volatile
    {
        return LDO_LPSR_ANA_TRACKING_EN_SP & (1u << 1u);
    }

    /**
     * Set LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT1 bit.
     *
     * TRACKING_EN_SETPOINT1
     */
    inline void
    set_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT1() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP |= 1u << 1u;
    }

    /**
     * Clear LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT1 bit.
     *
     * TRACKING_EN_SETPOINT1
     */
    inline void
    clear_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT1() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP &= ~(1u << 1u);
    }

    /**
     * Toggle LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT1 bit.
     *
     * TRACKING_EN_SETPOINT1
     */
    inline void
    toggle_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT1() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP ^= 1u << 1u;
    }

    /**
     * Get LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT0 bit.
     *
     * TRACKING_EN_SETPOINT0
     */
    inline bool
    get_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT0() volatile
    {
        return LDO_LPSR_ANA_TRACKING_EN_SP & (1u << 0u);
    }

    /**
     * Set LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT0 bit.
     *
     * TRACKING_EN_SETPOINT0
     */
    inline void
    set_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT0() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP |= 1u << 0u;
    }

    /**
     * Clear LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT0 bit.
     *
     * TRACKING_EN_SETPOINT0
     */
    inline void
    clear_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT0() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP &= ~(1u << 0u);
    }

    /**
     * Toggle LDO_LPSR_ANA_TRACKING_EN_SP's TRACKING_EN_SETPOINT0 bit.
     *
     * TRACKING_EN_SETPOINT0
     */
    inline void
    toggle_LDO_LPSR_ANA_TRACKING_EN_SP_TRACKING_EN_SETPOINT0() volatile
    {
        LDO_LPSR_ANA_TRACKING_EN_SP ^= 1u << 0u;
    }

    /**
     * Get all of LDO_LPSR_ANA_TRACKING_EN_SP's bit fields.
     *
     * (read-write) LDO_LPSR_ANA_TRACKING_EN_SP_REGISTER
     */
    inline void get_LDO_LPSR_ANA_TRACKING_EN_SP(
        bool &TRACKING_EN_SETPOINT15, bool &TRACKING_EN_SETPOINT14,
        bool &TRACKING_EN_SETPOINT13, bool &TRACKING_EN_SETPOINT12,
        bool &TRACKING_EN_SETPOINT11, bool &TRACKING_EN_SETPOINT10,
        bool &TRACKING_EN_SETPOINT9, bool &TRACKING_EN_SETPOINT8,
        bool &TRACKING_EN_SETPOINT7, bool &TRACKING_EN_SETPOINT6,
        bool &TRACKING_EN_SETPOINT5, bool &TRACKING_EN_SETPOINT4,
        bool &TRACKING_EN_SETPOINT3, bool &TRACKING_EN_SETPOINT2,
        bool &TRACKING_EN_SETPOINT1, bool &TRACKING_EN_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_ANA_TRACKING_EN_SP;

        TRACKING_EN_SETPOINT15 = curr & (1u << 15u);
        TRACKING_EN_SETPOINT14 = curr & (1u << 14u);
        TRACKING_EN_SETPOINT13 = curr & (1u << 13u);
        TRACKING_EN_SETPOINT12 = curr & (1u << 12u);
        TRACKING_EN_SETPOINT11 = curr & (1u << 11u);
        TRACKING_EN_SETPOINT10 = curr & (1u << 10u);
        TRACKING_EN_SETPOINT9 = curr & (1u << 9u);
        TRACKING_EN_SETPOINT8 = curr & (1u << 8u);
        TRACKING_EN_SETPOINT7 = curr & (1u << 7u);
        TRACKING_EN_SETPOINT6 = curr & (1u << 6u);
        TRACKING_EN_SETPOINT5 = curr & (1u << 5u);
        TRACKING_EN_SETPOINT4 = curr & (1u << 4u);
        TRACKING_EN_SETPOINT3 = curr & (1u << 3u);
        TRACKING_EN_SETPOINT2 = curr & (1u << 2u);
        TRACKING_EN_SETPOINT1 = curr & (1u << 1u);
        TRACKING_EN_SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of LDO_LPSR_ANA_TRACKING_EN_SP's bit fields.
     *
     * (read-write) LDO_LPSR_ANA_TRACKING_EN_SP_REGISTER
     */
    inline void set_LDO_LPSR_ANA_TRACKING_EN_SP(
        bool TRACKING_EN_SETPOINT15, bool TRACKING_EN_SETPOINT14,
        bool TRACKING_EN_SETPOINT13, bool TRACKING_EN_SETPOINT12,
        bool TRACKING_EN_SETPOINT11, bool TRACKING_EN_SETPOINT10,
        bool TRACKING_EN_SETPOINT9, bool TRACKING_EN_SETPOINT8,
        bool TRACKING_EN_SETPOINT7, bool TRACKING_EN_SETPOINT6,
        bool TRACKING_EN_SETPOINT5, bool TRACKING_EN_SETPOINT4,
        bool TRACKING_EN_SETPOINT3, bool TRACKING_EN_SETPOINT2,
        bool TRACKING_EN_SETPOINT1, bool TRACKING_EN_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_ANA_TRACKING_EN_SP;

        curr &= ~(0b1u << 15u);
        curr |= (TRACKING_EN_SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (TRACKING_EN_SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (TRACKING_EN_SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (TRACKING_EN_SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (TRACKING_EN_SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (TRACKING_EN_SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (TRACKING_EN_SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (TRACKING_EN_SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (TRACKING_EN_SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (TRACKING_EN_SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (TRACKING_EN_SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (TRACKING_EN_SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (TRACKING_EN_SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (TRACKING_EN_SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (TRACKING_EN_SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TRACKING_EN_SETPOINT0 & 0b1u) << 0u;

        LDO_LPSR_ANA_TRACKING_EN_SP = curr;
    }

    /**
     * Get LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT15 bit.
     *
     * BYPASS_EN_SETPOINT15
     */
    inline bool get_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT15() volatile
    {
        return LDO_LPSR_ANA_BYPASS_EN_SP & (1u << 15u);
    }

    /**
     * Set LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT15 bit.
     *
     * BYPASS_EN_SETPOINT15
     */
    inline void set_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT15() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP |= 1u << 15u;
    }

    /**
     * Clear LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT15 bit.
     *
     * BYPASS_EN_SETPOINT15
     */
    inline void clear_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT15() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP &= ~(1u << 15u);
    }

    /**
     * Toggle LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT15 bit.
     *
     * BYPASS_EN_SETPOINT15
     */
    inline void
    toggle_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT15() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP ^= 1u << 15u;
    }

    /**
     * Get LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT14 bit.
     *
     * BYPASS_EN_SETPOINT14
     */
    inline bool get_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT14() volatile
    {
        return LDO_LPSR_ANA_BYPASS_EN_SP & (1u << 14u);
    }

    /**
     * Set LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT14 bit.
     *
     * BYPASS_EN_SETPOINT14
     */
    inline void set_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT14() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP |= 1u << 14u;
    }

    /**
     * Clear LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT14 bit.
     *
     * BYPASS_EN_SETPOINT14
     */
    inline void clear_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT14() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP &= ~(1u << 14u);
    }

    /**
     * Toggle LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT14 bit.
     *
     * BYPASS_EN_SETPOINT14
     */
    inline void
    toggle_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT14() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP ^= 1u << 14u;
    }

    /**
     * Get LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT13 bit.
     *
     * BYPASS_EN_SETPOINT13
     */
    inline bool get_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT13() volatile
    {
        return LDO_LPSR_ANA_BYPASS_EN_SP & (1u << 13u);
    }

    /**
     * Set LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT13 bit.
     *
     * BYPASS_EN_SETPOINT13
     */
    inline void set_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT13() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP |= 1u << 13u;
    }

    /**
     * Clear LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT13 bit.
     *
     * BYPASS_EN_SETPOINT13
     */
    inline void clear_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT13() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP &= ~(1u << 13u);
    }

    /**
     * Toggle LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT13 bit.
     *
     * BYPASS_EN_SETPOINT13
     */
    inline void
    toggle_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT13() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP ^= 1u << 13u;
    }

    /**
     * Get LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT12 bit.
     *
     * BYPASS_EN_SETPOINT12
     */
    inline bool get_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT12() volatile
    {
        return LDO_LPSR_ANA_BYPASS_EN_SP & (1u << 12u);
    }

    /**
     * Set LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT12 bit.
     *
     * BYPASS_EN_SETPOINT12
     */
    inline void set_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT12() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP |= 1u << 12u;
    }

    /**
     * Clear LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT12 bit.
     *
     * BYPASS_EN_SETPOINT12
     */
    inline void clear_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT12() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP &= ~(1u << 12u);
    }

    /**
     * Toggle LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT12 bit.
     *
     * BYPASS_EN_SETPOINT12
     */
    inline void
    toggle_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT12() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP ^= 1u << 12u;
    }

    /**
     * Get LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT11 bit.
     *
     * BYPASS_EN_SETPOINT11
     */
    inline bool get_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT11() volatile
    {
        return LDO_LPSR_ANA_BYPASS_EN_SP & (1u << 11u);
    }

    /**
     * Set LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT11 bit.
     *
     * BYPASS_EN_SETPOINT11
     */
    inline void set_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT11() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP |= 1u << 11u;
    }

    /**
     * Clear LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT11 bit.
     *
     * BYPASS_EN_SETPOINT11
     */
    inline void clear_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT11() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP &= ~(1u << 11u);
    }

    /**
     * Toggle LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT11 bit.
     *
     * BYPASS_EN_SETPOINT11
     */
    inline void
    toggle_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT11() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP ^= 1u << 11u;
    }

    /**
     * Get LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT10 bit.
     *
     * BYPASS_EN_SETPOINT10
     */
    inline bool get_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT10() volatile
    {
        return LDO_LPSR_ANA_BYPASS_EN_SP & (1u << 10u);
    }

    /**
     * Set LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT10 bit.
     *
     * BYPASS_EN_SETPOINT10
     */
    inline void set_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT10() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP |= 1u << 10u;
    }

    /**
     * Clear LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT10 bit.
     *
     * BYPASS_EN_SETPOINT10
     */
    inline void clear_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT10() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP &= ~(1u << 10u);
    }

    /**
     * Toggle LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT10 bit.
     *
     * BYPASS_EN_SETPOINT10
     */
    inline void
    toggle_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT10() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP ^= 1u << 10u;
    }

    /**
     * Get LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT9 bit.
     *
     * BYPASS_EN_SETPOINT9
     */
    inline bool get_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT9() volatile
    {
        return LDO_LPSR_ANA_BYPASS_EN_SP & (1u << 9u);
    }

    /**
     * Set LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT9 bit.
     *
     * BYPASS_EN_SETPOINT9
     */
    inline void set_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT9() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP |= 1u << 9u;
    }

    /**
     * Clear LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT9 bit.
     *
     * BYPASS_EN_SETPOINT9
     */
    inline void clear_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT9() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP &= ~(1u << 9u);
    }

    /**
     * Toggle LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT9 bit.
     *
     * BYPASS_EN_SETPOINT9
     */
    inline void toggle_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT9() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP ^= 1u << 9u;
    }

    /**
     * Get LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT8 bit.
     *
     * BYPASS_EN_SETPOINT
     */
    inline bool get_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT8() volatile
    {
        return LDO_LPSR_ANA_BYPASS_EN_SP & (1u << 8u);
    }

    /**
     * Set LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT8 bit.
     *
     * BYPASS_EN_SETPOINT
     */
    inline void set_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT8() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP |= 1u << 8u;
    }

    /**
     * Clear LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT8 bit.
     *
     * BYPASS_EN_SETPOINT
     */
    inline void clear_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT8() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP &= ~(1u << 8u);
    }

    /**
     * Toggle LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT8 bit.
     *
     * BYPASS_EN_SETPOINT
     */
    inline void toggle_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT8() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP ^= 1u << 8u;
    }

    /**
     * Get LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT7 bit.
     *
     * BYPASS_EN_SETPOINT7
     */
    inline bool get_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT7() volatile
    {
        return LDO_LPSR_ANA_BYPASS_EN_SP & (1u << 7u);
    }

    /**
     * Set LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT7 bit.
     *
     * BYPASS_EN_SETPOINT7
     */
    inline void set_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT7() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP |= 1u << 7u;
    }

    /**
     * Clear LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT7 bit.
     *
     * BYPASS_EN_SETPOINT7
     */
    inline void clear_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT7() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP &= ~(1u << 7u);
    }

    /**
     * Toggle LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT7 bit.
     *
     * BYPASS_EN_SETPOINT7
     */
    inline void toggle_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT7() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP ^= 1u << 7u;
    }

    /**
     * Get LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT6 bit.
     *
     * BYPASS_EN_SETPOINT6
     */
    inline bool get_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT6() volatile
    {
        return LDO_LPSR_ANA_BYPASS_EN_SP & (1u << 6u);
    }

    /**
     * Set LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT6 bit.
     *
     * BYPASS_EN_SETPOINT6
     */
    inline void set_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT6() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP |= 1u << 6u;
    }

    /**
     * Clear LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT6 bit.
     *
     * BYPASS_EN_SETPOINT6
     */
    inline void clear_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT6() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP &= ~(1u << 6u);
    }

    /**
     * Toggle LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT6 bit.
     *
     * BYPASS_EN_SETPOINT6
     */
    inline void toggle_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT6() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP ^= 1u << 6u;
    }

    /**
     * Get LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT5 bit.
     *
     * BYPASS_EN_SETPOINT5
     */
    inline bool get_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT5() volatile
    {
        return LDO_LPSR_ANA_BYPASS_EN_SP & (1u << 5u);
    }

    /**
     * Set LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT5 bit.
     *
     * BYPASS_EN_SETPOINT5
     */
    inline void set_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT5() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP |= 1u << 5u;
    }

    /**
     * Clear LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT5 bit.
     *
     * BYPASS_EN_SETPOINT5
     */
    inline void clear_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT5() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP &= ~(1u << 5u);
    }

    /**
     * Toggle LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT5 bit.
     *
     * BYPASS_EN_SETPOINT5
     */
    inline void toggle_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT5() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP ^= 1u << 5u;
    }

    /**
     * Get LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT4 bit.
     *
     * BYPASS_EN_SETPOINT4
     */
    inline bool get_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT4() volatile
    {
        return LDO_LPSR_ANA_BYPASS_EN_SP & (1u << 4u);
    }

    /**
     * Set LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT4 bit.
     *
     * BYPASS_EN_SETPOINT4
     */
    inline void set_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT4() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP |= 1u << 4u;
    }

    /**
     * Clear LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT4 bit.
     *
     * BYPASS_EN_SETPOINT4
     */
    inline void clear_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT4() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP &= ~(1u << 4u);
    }

    /**
     * Toggle LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT4 bit.
     *
     * BYPASS_EN_SETPOINT4
     */
    inline void toggle_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT4() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP ^= 1u << 4u;
    }

    /**
     * Get LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT3 bit.
     *
     * BYPASS_EN_SETPOINT3
     */
    inline bool get_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT3() volatile
    {
        return LDO_LPSR_ANA_BYPASS_EN_SP & (1u << 3u);
    }

    /**
     * Set LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT3 bit.
     *
     * BYPASS_EN_SETPOINT3
     */
    inline void set_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT3() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP |= 1u << 3u;
    }

    /**
     * Clear LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT3 bit.
     *
     * BYPASS_EN_SETPOINT3
     */
    inline void clear_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT3() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP &= ~(1u << 3u);
    }

    /**
     * Toggle LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT3 bit.
     *
     * BYPASS_EN_SETPOINT3
     */
    inline void toggle_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT3() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP ^= 1u << 3u;
    }

    /**
     * Get LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT2 bit.
     *
     * BYPASS_EN_SETPOINT2
     */
    inline bool get_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT2() volatile
    {
        return LDO_LPSR_ANA_BYPASS_EN_SP & (1u << 2u);
    }

    /**
     * Set LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT2 bit.
     *
     * BYPASS_EN_SETPOINT2
     */
    inline void set_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT2() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP |= 1u << 2u;
    }

    /**
     * Clear LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT2 bit.
     *
     * BYPASS_EN_SETPOINT2
     */
    inline void clear_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT2() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP &= ~(1u << 2u);
    }

    /**
     * Toggle LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT2 bit.
     *
     * BYPASS_EN_SETPOINT2
     */
    inline void toggle_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT2() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP ^= 1u << 2u;
    }

    /**
     * Get LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT1 bit.
     *
     * BYPASS_EN_SETPOINT1
     */
    inline bool get_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT1() volatile
    {
        return LDO_LPSR_ANA_BYPASS_EN_SP & (1u << 1u);
    }

    /**
     * Set LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT1 bit.
     *
     * BYPASS_EN_SETPOINT1
     */
    inline void set_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT1() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP |= 1u << 1u;
    }

    /**
     * Clear LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT1 bit.
     *
     * BYPASS_EN_SETPOINT1
     */
    inline void clear_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT1() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP &= ~(1u << 1u);
    }

    /**
     * Toggle LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT1 bit.
     *
     * BYPASS_EN_SETPOINT1
     */
    inline void toggle_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT1() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP ^= 1u << 1u;
    }

    /**
     * Get LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT0 bit.
     *
     * BYPASS_EN_SETPOINT0
     */
    inline bool get_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT0() volatile
    {
        return LDO_LPSR_ANA_BYPASS_EN_SP & (1u << 0u);
    }

    /**
     * Set LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT0 bit.
     *
     * BYPASS_EN_SETPOINT0
     */
    inline void set_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT0() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP |= 1u << 0u;
    }

    /**
     * Clear LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT0 bit.
     *
     * BYPASS_EN_SETPOINT0
     */
    inline void clear_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT0() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP &= ~(1u << 0u);
    }

    /**
     * Toggle LDO_LPSR_ANA_BYPASS_EN_SP's BYPASS_EN_SETPOINT0 bit.
     *
     * BYPASS_EN_SETPOINT0
     */
    inline void toggle_LDO_LPSR_ANA_BYPASS_EN_SP_BYPASS_EN_SETPOINT0() volatile
    {
        LDO_LPSR_ANA_BYPASS_EN_SP ^= 1u << 0u;
    }

    /**
     * Get all of LDO_LPSR_ANA_BYPASS_EN_SP's bit fields.
     *
     * (read-write) LDO_LPSR_ANA_BYPASS_EN_SP_REGISTER
     */
    inline void get_LDO_LPSR_ANA_BYPASS_EN_SP(
        bool &BYPASS_EN_SETPOINT15, bool &BYPASS_EN_SETPOINT14,
        bool &BYPASS_EN_SETPOINT13, bool &BYPASS_EN_SETPOINT12,
        bool &BYPASS_EN_SETPOINT11, bool &BYPASS_EN_SETPOINT10,
        bool &BYPASS_EN_SETPOINT9, bool &BYPASS_EN_SETPOINT8,
        bool &BYPASS_EN_SETPOINT7, bool &BYPASS_EN_SETPOINT6,
        bool &BYPASS_EN_SETPOINT5, bool &BYPASS_EN_SETPOINT4,
        bool &BYPASS_EN_SETPOINT3, bool &BYPASS_EN_SETPOINT2,
        bool &BYPASS_EN_SETPOINT1, bool &BYPASS_EN_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_ANA_BYPASS_EN_SP;

        BYPASS_EN_SETPOINT15 = curr & (1u << 15u);
        BYPASS_EN_SETPOINT14 = curr & (1u << 14u);
        BYPASS_EN_SETPOINT13 = curr & (1u << 13u);
        BYPASS_EN_SETPOINT12 = curr & (1u << 12u);
        BYPASS_EN_SETPOINT11 = curr & (1u << 11u);
        BYPASS_EN_SETPOINT10 = curr & (1u << 10u);
        BYPASS_EN_SETPOINT9 = curr & (1u << 9u);
        BYPASS_EN_SETPOINT8 = curr & (1u << 8u);
        BYPASS_EN_SETPOINT7 = curr & (1u << 7u);
        BYPASS_EN_SETPOINT6 = curr & (1u << 6u);
        BYPASS_EN_SETPOINT5 = curr & (1u << 5u);
        BYPASS_EN_SETPOINT4 = curr & (1u << 4u);
        BYPASS_EN_SETPOINT3 = curr & (1u << 3u);
        BYPASS_EN_SETPOINT2 = curr & (1u << 2u);
        BYPASS_EN_SETPOINT1 = curr & (1u << 1u);
        BYPASS_EN_SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of LDO_LPSR_ANA_BYPASS_EN_SP's bit fields.
     *
     * (read-write) LDO_LPSR_ANA_BYPASS_EN_SP_REGISTER
     */
    inline void set_LDO_LPSR_ANA_BYPASS_EN_SP(
        bool BYPASS_EN_SETPOINT15, bool BYPASS_EN_SETPOINT14,
        bool BYPASS_EN_SETPOINT13, bool BYPASS_EN_SETPOINT12,
        bool BYPASS_EN_SETPOINT11, bool BYPASS_EN_SETPOINT10,
        bool BYPASS_EN_SETPOINT9, bool BYPASS_EN_SETPOINT8,
        bool BYPASS_EN_SETPOINT7, bool BYPASS_EN_SETPOINT6,
        bool BYPASS_EN_SETPOINT5, bool BYPASS_EN_SETPOINT4,
        bool BYPASS_EN_SETPOINT3, bool BYPASS_EN_SETPOINT2,
        bool BYPASS_EN_SETPOINT1, bool BYPASS_EN_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_ANA_BYPASS_EN_SP;

        curr &= ~(0b1u << 15u);
        curr |= (BYPASS_EN_SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (BYPASS_EN_SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (BYPASS_EN_SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (BYPASS_EN_SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (BYPASS_EN_SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (BYPASS_EN_SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (BYPASS_EN_SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (BYPASS_EN_SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (BYPASS_EN_SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (BYPASS_EN_SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (BYPASS_EN_SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (BYPASS_EN_SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (BYPASS_EN_SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (BYPASS_EN_SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (BYPASS_EN_SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (BYPASS_EN_SETPOINT0 & 0b1u) << 0u;

        LDO_LPSR_ANA_BYPASS_EN_SP = curr;
    }

    /**
     * Get LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * STBY_EN_SETPOINT15
     */
    inline bool get_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        return LDO_LPSR_ANA_STBY_EN_SP & (1u << 15u);
    }

    /**
     * Set LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * STBY_EN_SETPOINT15
     */
    inline void set_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP |= 1u << 15u;
    }

    /**
     * Clear LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * STBY_EN_SETPOINT15
     */
    inline void clear_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP &= ~(1u << 15u);
    }

    /**
     * Toggle LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * STBY_EN_SETPOINT15
     */
    inline void toggle_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP ^= 1u << 15u;
    }

    /**
     * Get LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * STBY_EN_SETPOINT14
     */
    inline bool get_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        return LDO_LPSR_ANA_STBY_EN_SP & (1u << 14u);
    }

    /**
     * Set LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * STBY_EN_SETPOINT14
     */
    inline void set_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP |= 1u << 14u;
    }

    /**
     * Clear LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * STBY_EN_SETPOINT14
     */
    inline void clear_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP &= ~(1u << 14u);
    }

    /**
     * Toggle LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * STBY_EN_SETPOINT14
     */
    inline void toggle_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP ^= 1u << 14u;
    }

    /**
     * Get LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * STBY_EN_SETPOINT13
     */
    inline bool get_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        return LDO_LPSR_ANA_STBY_EN_SP & (1u << 13u);
    }

    /**
     * Set LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * STBY_EN_SETPOINT13
     */
    inline void set_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP |= 1u << 13u;
    }

    /**
     * Clear LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * STBY_EN_SETPOINT13
     */
    inline void clear_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP &= ~(1u << 13u);
    }

    /**
     * Toggle LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * STBY_EN_SETPOINT13
     */
    inline void toggle_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP ^= 1u << 13u;
    }

    /**
     * Get LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * STBY_EN_SETPOINT12
     */
    inline bool get_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        return LDO_LPSR_ANA_STBY_EN_SP & (1u << 12u);
    }

    /**
     * Set LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * STBY_EN_SETPOINT12
     */
    inline void set_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP |= 1u << 12u;
    }

    /**
     * Clear LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * STBY_EN_SETPOINT12
     */
    inline void clear_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP &= ~(1u << 12u);
    }

    /**
     * Toggle LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * STBY_EN_SETPOINT12
     */
    inline void toggle_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP ^= 1u << 12u;
    }

    /**
     * Get LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * STBY_EN_SETPOINT11
     */
    inline bool get_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        return LDO_LPSR_ANA_STBY_EN_SP & (1u << 11u);
    }

    /**
     * Set LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * STBY_EN_SETPOINT11
     */
    inline void set_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP |= 1u << 11u;
    }

    /**
     * Clear LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * STBY_EN_SETPOINT11
     */
    inline void clear_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP &= ~(1u << 11u);
    }

    /**
     * Toggle LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * STBY_EN_SETPOINT11
     */
    inline void toggle_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP ^= 1u << 11u;
    }

    /**
     * Get LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * STBY_EN_SETPOINT10
     */
    inline bool get_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        return LDO_LPSR_ANA_STBY_EN_SP & (1u << 10u);
    }

    /**
     * Set LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * STBY_EN_SETPOINT10
     */
    inline void set_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP |= 1u << 10u;
    }

    /**
     * Clear LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * STBY_EN_SETPOINT10
     */
    inline void clear_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP &= ~(1u << 10u);
    }

    /**
     * Toggle LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * STBY_EN_SETPOINT10
     */
    inline void toggle_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP ^= 1u << 10u;
    }

    /**
     * Get LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * STBY_EN_SETPOINT9
     */
    inline bool get_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        return LDO_LPSR_ANA_STBY_EN_SP & (1u << 9u);
    }

    /**
     * Set LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * STBY_EN_SETPOINT9
     */
    inline void set_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP |= 1u << 9u;
    }

    /**
     * Clear LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * STBY_EN_SETPOINT9
     */
    inline void clear_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP &= ~(1u << 9u);
    }

    /**
     * Toggle LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * STBY_EN_SETPOINT9
     */
    inline void toggle_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP ^= 1u << 9u;
    }

    /**
     * Get LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * STBY_EN_SETPOINT8
     */
    inline bool get_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        return LDO_LPSR_ANA_STBY_EN_SP & (1u << 8u);
    }

    /**
     * Set LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * STBY_EN_SETPOINT8
     */
    inline void set_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP |= 1u << 8u;
    }

    /**
     * Clear LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * STBY_EN_SETPOINT8
     */
    inline void clear_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP &= ~(1u << 8u);
    }

    /**
     * Toggle LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * STBY_EN_SETPOINT8
     */
    inline void toggle_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP ^= 1u << 8u;
    }

    /**
     * Get LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * STBY_EN_SETPOINT7
     */
    inline bool get_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        return LDO_LPSR_ANA_STBY_EN_SP & (1u << 7u);
    }

    /**
     * Set LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * STBY_EN_SETPOINT7
     */
    inline void set_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP |= 1u << 7u;
    }

    /**
     * Clear LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * STBY_EN_SETPOINT7
     */
    inline void clear_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP &= ~(1u << 7u);
    }

    /**
     * Toggle LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * STBY_EN_SETPOINT7
     */
    inline void toggle_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP ^= 1u << 7u;
    }

    /**
     * Get LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * STBY_EN_SETPOINT6
     */
    inline bool get_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        return LDO_LPSR_ANA_STBY_EN_SP & (1u << 6u);
    }

    /**
     * Set LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * STBY_EN_SETPOINT6
     */
    inline void set_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP |= 1u << 6u;
    }

    /**
     * Clear LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * STBY_EN_SETPOINT6
     */
    inline void clear_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP &= ~(1u << 6u);
    }

    /**
     * Toggle LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * STBY_EN_SETPOINT6
     */
    inline void toggle_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP ^= 1u << 6u;
    }

    /**
     * Get LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * STBY_EN_SETPOINT5
     */
    inline bool get_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        return LDO_LPSR_ANA_STBY_EN_SP & (1u << 5u);
    }

    /**
     * Set LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * STBY_EN_SETPOINT5
     */
    inline void set_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP |= 1u << 5u;
    }

    /**
     * Clear LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * STBY_EN_SETPOINT5
     */
    inline void clear_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP &= ~(1u << 5u);
    }

    /**
     * Toggle LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * STBY_EN_SETPOINT5
     */
    inline void toggle_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP ^= 1u << 5u;
    }

    /**
     * Get LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * STBY_EN_SETPOINT4
     */
    inline bool get_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        return LDO_LPSR_ANA_STBY_EN_SP & (1u << 4u);
    }

    /**
     * Set LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * STBY_EN_SETPOINT4
     */
    inline void set_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP |= 1u << 4u;
    }

    /**
     * Clear LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * STBY_EN_SETPOINT4
     */
    inline void clear_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP &= ~(1u << 4u);
    }

    /**
     * Toggle LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * STBY_EN_SETPOINT4
     */
    inline void toggle_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP ^= 1u << 4u;
    }

    /**
     * Get LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * STBY_EN_SETPOINT3
     */
    inline bool get_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        return LDO_LPSR_ANA_STBY_EN_SP & (1u << 3u);
    }

    /**
     * Set LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * STBY_EN_SETPOINT3
     */
    inline void set_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP |= 1u << 3u;
    }

    /**
     * Clear LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * STBY_EN_SETPOINT3
     */
    inline void clear_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP &= ~(1u << 3u);
    }

    /**
     * Toggle LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * STBY_EN_SETPOINT3
     */
    inline void toggle_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP ^= 1u << 3u;
    }

    /**
     * Get LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * STBY_EN_SETPOINT2
     */
    inline bool get_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        return LDO_LPSR_ANA_STBY_EN_SP & (1u << 2u);
    }

    /**
     * Set LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * STBY_EN_SETPOINT2
     */
    inline void set_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP |= 1u << 2u;
    }

    /**
     * Clear LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * STBY_EN_SETPOINT2
     */
    inline void clear_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP &= ~(1u << 2u);
    }

    /**
     * Toggle LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * STBY_EN_SETPOINT2
     */
    inline void toggle_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP ^= 1u << 2u;
    }

    /**
     * Get LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * STBY_EN_SETPOINT1
     */
    inline bool get_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        return LDO_LPSR_ANA_STBY_EN_SP & (1u << 1u);
    }

    /**
     * Set LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * STBY_EN_SETPOINT1
     */
    inline void set_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP |= 1u << 1u;
    }

    /**
     * Clear LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * STBY_EN_SETPOINT1
     */
    inline void clear_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP &= ~(1u << 1u);
    }

    /**
     * Toggle LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * STBY_EN_SETPOINT1
     */
    inline void toggle_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP ^= 1u << 1u;
    }

    /**
     * Get LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * STBY_EN_SETPOINT0
     */
    inline bool get_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        return LDO_LPSR_ANA_STBY_EN_SP & (1u << 0u);
    }

    /**
     * Set LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * STBY_EN_SETPOINT0
     */
    inline void set_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP |= 1u << 0u;
    }

    /**
     * Clear LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * STBY_EN_SETPOINT0
     */
    inline void clear_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP &= ~(1u << 0u);
    }

    /**
     * Toggle LDO_LPSR_ANA_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * STBY_EN_SETPOINT0
     */
    inline void toggle_LDO_LPSR_ANA_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        LDO_LPSR_ANA_STBY_EN_SP ^= 1u << 0u;
    }

    /**
     * Get all of LDO_LPSR_ANA_STBY_EN_SP's bit fields.
     *
     * (read-write) LDO_LPSR_ANA_STBY_EN_SP_REGISTER
     */
    inline void get_LDO_LPSR_ANA_STBY_EN_SP(
        bool &STBY_EN_SETPOINT15, bool &STBY_EN_SETPOINT14,
        bool &STBY_EN_SETPOINT13, bool &STBY_EN_SETPOINT12,
        bool &STBY_EN_SETPOINT11, bool &STBY_EN_SETPOINT10,
        bool &STBY_EN_SETPOINT9, bool &STBY_EN_SETPOINT8,
        bool &STBY_EN_SETPOINT7, bool &STBY_EN_SETPOINT6,
        bool &STBY_EN_SETPOINT5, bool &STBY_EN_SETPOINT4,
        bool &STBY_EN_SETPOINT3, bool &STBY_EN_SETPOINT2,
        bool &STBY_EN_SETPOINT1, bool &STBY_EN_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_ANA_STBY_EN_SP;

        STBY_EN_SETPOINT15 = curr & (1u << 15u);
        STBY_EN_SETPOINT14 = curr & (1u << 14u);
        STBY_EN_SETPOINT13 = curr & (1u << 13u);
        STBY_EN_SETPOINT12 = curr & (1u << 12u);
        STBY_EN_SETPOINT11 = curr & (1u << 11u);
        STBY_EN_SETPOINT10 = curr & (1u << 10u);
        STBY_EN_SETPOINT9 = curr & (1u << 9u);
        STBY_EN_SETPOINT8 = curr & (1u << 8u);
        STBY_EN_SETPOINT7 = curr & (1u << 7u);
        STBY_EN_SETPOINT6 = curr & (1u << 6u);
        STBY_EN_SETPOINT5 = curr & (1u << 5u);
        STBY_EN_SETPOINT4 = curr & (1u << 4u);
        STBY_EN_SETPOINT3 = curr & (1u << 3u);
        STBY_EN_SETPOINT2 = curr & (1u << 2u);
        STBY_EN_SETPOINT1 = curr & (1u << 1u);
        STBY_EN_SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of LDO_LPSR_ANA_STBY_EN_SP's bit fields.
     *
     * (read-write) LDO_LPSR_ANA_STBY_EN_SP_REGISTER
     */
    inline void set_LDO_LPSR_ANA_STBY_EN_SP(
        bool STBY_EN_SETPOINT15, bool STBY_EN_SETPOINT14,
        bool STBY_EN_SETPOINT13, bool STBY_EN_SETPOINT12,
        bool STBY_EN_SETPOINT11, bool STBY_EN_SETPOINT10,
        bool STBY_EN_SETPOINT9, bool STBY_EN_SETPOINT8, bool STBY_EN_SETPOINT7,
        bool STBY_EN_SETPOINT6, bool STBY_EN_SETPOINT5, bool STBY_EN_SETPOINT4,
        bool STBY_EN_SETPOINT3, bool STBY_EN_SETPOINT2, bool STBY_EN_SETPOINT1,
        bool STBY_EN_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_ANA_STBY_EN_SP;

        curr &= ~(0b1u << 15u);
        curr |= (STBY_EN_SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (STBY_EN_SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (STBY_EN_SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (STBY_EN_SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (STBY_EN_SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (STBY_EN_SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (STBY_EN_SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (STBY_EN_SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (STBY_EN_SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (STBY_EN_SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (STBY_EN_SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (STBY_EN_SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (STBY_EN_SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (STBY_EN_SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (STBY_EN_SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (STBY_EN_SETPOINT0 & 0b1u) << 0u;

        LDO_LPSR_ANA_STBY_EN_SP = curr;
    }

    /**
     * Get LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline bool get_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        return LDO_LPSR_DIG_ENABLE_SP & (1u << 15u);
    }

    /**
     * Set LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline void set_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP |= 1u << 15u;
    }

    /**
     * Clear LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline void clear_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP &= ~(1u << 15u);
    }

    /**
     * Toggle LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline void toggle_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP ^= 1u << 15u;
    }

    /**
     * Get LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline bool get_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        return LDO_LPSR_DIG_ENABLE_SP & (1u << 14u);
    }

    /**
     * Set LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline void set_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP |= 1u << 14u;
    }

    /**
     * Clear LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline void clear_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP &= ~(1u << 14u);
    }

    /**
     * Toggle LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline void toggle_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP ^= 1u << 14u;
    }

    /**
     * Get LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline bool get_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        return LDO_LPSR_DIG_ENABLE_SP & (1u << 13u);
    }

    /**
     * Set LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline void set_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP |= 1u << 13u;
    }

    /**
     * Clear LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline void clear_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP &= ~(1u << 13u);
    }

    /**
     * Toggle LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline void toggle_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP ^= 1u << 13u;
    }

    /**
     * Get LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline bool get_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        return LDO_LPSR_DIG_ENABLE_SP & (1u << 12u);
    }

    /**
     * Set LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline void set_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP |= 1u << 12u;
    }

    /**
     * Clear LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline void clear_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP &= ~(1u << 12u);
    }

    /**
     * Toggle LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline void toggle_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP ^= 1u << 12u;
    }

    /**
     * Get LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline bool get_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        return LDO_LPSR_DIG_ENABLE_SP & (1u << 11u);
    }

    /**
     * Set LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline void set_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP |= 1u << 11u;
    }

    /**
     * Clear LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline void clear_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP &= ~(1u << 11u);
    }

    /**
     * Toggle LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline void toggle_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP ^= 1u << 11u;
    }

    /**
     * Get LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline bool get_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        return LDO_LPSR_DIG_ENABLE_SP & (1u << 10u);
    }

    /**
     * Set LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline void set_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP |= 1u << 10u;
    }

    /**
     * Clear LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline void clear_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP &= ~(1u << 10u);
    }

    /**
     * Toggle LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline void toggle_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP ^= 1u << 10u;
    }

    /**
     * Get LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline bool get_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        return LDO_LPSR_DIG_ENABLE_SP & (1u << 9u);
    }

    /**
     * Set LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline void set_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP |= 1u << 9u;
    }

    /**
     * Clear LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline void clear_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP &= ~(1u << 9u);
    }

    /**
     * Toggle LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline void toggle_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP ^= 1u << 9u;
    }

    /**
     * Get LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline bool get_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        return LDO_LPSR_DIG_ENABLE_SP & (1u << 8u);
    }

    /**
     * Set LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline void set_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP |= 1u << 8u;
    }

    /**
     * Clear LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline void clear_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP &= ~(1u << 8u);
    }

    /**
     * Toggle LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline void toggle_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP ^= 1u << 8u;
    }

    /**
     * Get LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline bool get_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        return LDO_LPSR_DIG_ENABLE_SP & (1u << 7u);
    }

    /**
     * Set LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline void set_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP |= 1u << 7u;
    }

    /**
     * Clear LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline void clear_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP &= ~(1u << 7u);
    }

    /**
     * Toggle LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline void toggle_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP ^= 1u << 7u;
    }

    /**
     * Get LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline bool get_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        return LDO_LPSR_DIG_ENABLE_SP & (1u << 6u);
    }

    /**
     * Set LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline void set_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP |= 1u << 6u;
    }

    /**
     * Clear LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline void clear_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP &= ~(1u << 6u);
    }

    /**
     * Toggle LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline void toggle_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP ^= 1u << 6u;
    }

    /**
     * Get LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline bool get_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        return LDO_LPSR_DIG_ENABLE_SP & (1u << 5u);
    }

    /**
     * Set LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void set_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP |= 1u << 5u;
    }

    /**
     * Clear LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void clear_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP &= ~(1u << 5u);
    }

    /**
     * Toggle LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void toggle_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP ^= 1u << 5u;
    }

    /**
     * Get LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline bool get_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        return LDO_LPSR_DIG_ENABLE_SP & (1u << 4u);
    }

    /**
     * Set LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline void set_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP |= 1u << 4u;
    }

    /**
     * Clear LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline void clear_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP &= ~(1u << 4u);
    }

    /**
     * Toggle LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline void toggle_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP ^= 1u << 4u;
    }

    /**
     * Get LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline bool get_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        return LDO_LPSR_DIG_ENABLE_SP & (1u << 3u);
    }

    /**
     * Set LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline void set_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP |= 1u << 3u;
    }

    /**
     * Clear LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline void clear_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP &= ~(1u << 3u);
    }

    /**
     * Toggle LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline void toggle_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP ^= 1u << 3u;
    }

    /**
     * Get LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline bool get_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        return LDO_LPSR_DIG_ENABLE_SP & (1u << 2u);
    }

    /**
     * Set LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline void set_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP |= 1u << 2u;
    }

    /**
     * Clear LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline void clear_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP &= ~(1u << 2u);
    }

    /**
     * Toggle LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline void toggle_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP ^= 1u << 2u;
    }

    /**
     * Get LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline bool get_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        return LDO_LPSR_DIG_ENABLE_SP & (1u << 1u);
    }

    /**
     * Set LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline void set_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP |= 1u << 1u;
    }

    /**
     * Clear LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline void clear_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP &= ~(1u << 1u);
    }

    /**
     * Toggle LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline void toggle_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP ^= 1u << 1u;
    }

    /**
     * Get LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline bool get_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        return LDO_LPSR_DIG_ENABLE_SP & (1u << 0u);
    }

    /**
     * Set LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline void set_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP |= 1u << 0u;
    }

    /**
     * Clear LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline void clear_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP &= ~(1u << 0u);
    }

    /**
     * Toggle LDO_LPSR_DIG_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline void toggle_LDO_LPSR_DIG_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        LDO_LPSR_DIG_ENABLE_SP ^= 1u << 0u;
    }

    /**
     * Get all of LDO_LPSR_DIG_ENABLE_SP's bit fields.
     *
     * (read-write) LDO_LPSR_DIG_ENABLE_SP_REGISTER
     */
    inline void get_LDO_LPSR_DIG_ENABLE_SP(
        bool &ON_OFF_SETPOINT15, bool &ON_OFF_SETPOINT14,
        bool &ON_OFF_SETPOINT13, bool &ON_OFF_SETPOINT12,
        bool &ON_OFF_SETPOINT11, bool &ON_OFF_SETPOINT10,
        bool &ON_OFF_SETPOINT9, bool &ON_OFF_SETPOINT8, bool &ON_OFF_SETPOINT7,
        bool &ON_OFF_SETPOINT6, bool &ON_OFF_SETPOINT5, bool &ON_OFF_SETPOINT4,
        bool &ON_OFF_SETPOINT3, bool &ON_OFF_SETPOINT2, bool &ON_OFF_SETPOINT1,
        bool &ON_OFF_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_ENABLE_SP;

        ON_OFF_SETPOINT15 = curr & (1u << 15u);
        ON_OFF_SETPOINT14 = curr & (1u << 14u);
        ON_OFF_SETPOINT13 = curr & (1u << 13u);
        ON_OFF_SETPOINT12 = curr & (1u << 12u);
        ON_OFF_SETPOINT11 = curr & (1u << 11u);
        ON_OFF_SETPOINT10 = curr & (1u << 10u);
        ON_OFF_SETPOINT9 = curr & (1u << 9u);
        ON_OFF_SETPOINT8 = curr & (1u << 8u);
        ON_OFF_SETPOINT7 = curr & (1u << 7u);
        ON_OFF_SETPOINT6 = curr & (1u << 6u);
        ON_OFF_SETPOINT5 = curr & (1u << 5u);
        ON_OFF_SETPOINT4 = curr & (1u << 4u);
        ON_OFF_SETPOINT3 = curr & (1u << 3u);
        ON_OFF_SETPOINT2 = curr & (1u << 2u);
        ON_OFF_SETPOINT1 = curr & (1u << 1u);
        ON_OFF_SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of LDO_LPSR_DIG_ENABLE_SP's bit fields.
     *
     * (read-write) LDO_LPSR_DIG_ENABLE_SP_REGISTER
     */
    inline void set_LDO_LPSR_DIG_ENABLE_SP(
        bool ON_OFF_SETPOINT15, bool ON_OFF_SETPOINT14, bool ON_OFF_SETPOINT13,
        bool ON_OFF_SETPOINT12, bool ON_OFF_SETPOINT11, bool ON_OFF_SETPOINT10,
        bool ON_OFF_SETPOINT9, bool ON_OFF_SETPOINT8, bool ON_OFF_SETPOINT7,
        bool ON_OFF_SETPOINT6, bool ON_OFF_SETPOINT5, bool ON_OFF_SETPOINT4,
        bool ON_OFF_SETPOINT3, bool ON_OFF_SETPOINT2, bool ON_OFF_SETPOINT1,
        bool ON_OFF_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_ENABLE_SP;

        curr &= ~(0b1u << 15u);
        curr |= (ON_OFF_SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (ON_OFF_SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (ON_OFF_SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (ON_OFF_SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (ON_OFF_SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (ON_OFF_SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (ON_OFF_SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (ON_OFF_SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (ON_OFF_SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (ON_OFF_SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (ON_OFF_SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ON_OFF_SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (ON_OFF_SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (ON_OFF_SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (ON_OFF_SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ON_OFF_SETPOINT0 & 0b1u) << 0u;

        LDO_LPSR_DIG_ENABLE_SP = curr;
    }

    /**
     * Get LDO_LPSR_DIG_TRG_SP0's VOLTAGE_SETPOINT3 field.
     *
     * VOLTAGE_SETPOINT3
     */
    inline uint8_t get_LDO_LPSR_DIG_TRG_SP0_VOLTAGE_SETPOINT3() volatile
    {
        return (LDO_LPSR_DIG_TRG_SP0 >> 24u) & 0b11111111u;
    }

    /**
     * Set LDO_LPSR_DIG_TRG_SP0's VOLTAGE_SETPOINT3 field.
     *
     * VOLTAGE_SETPOINT3
     */
    inline void set_LDO_LPSR_DIG_TRG_SP0_VOLTAGE_SETPOINT3(
        uint8_t value) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP0;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        LDO_LPSR_DIG_TRG_SP0 = curr;
    }

    /**
     * Get LDO_LPSR_DIG_TRG_SP0's VOLTAGE_SETPOINT2 field.
     *
     * VOLTAGE_SETPOINT2
     */
    inline uint8_t get_LDO_LPSR_DIG_TRG_SP0_VOLTAGE_SETPOINT2() volatile
    {
        return (LDO_LPSR_DIG_TRG_SP0 >> 16u) & 0b11111111u;
    }

    /**
     * Set LDO_LPSR_DIG_TRG_SP0's VOLTAGE_SETPOINT2 field.
     *
     * VOLTAGE_SETPOINT2
     */
    inline void set_LDO_LPSR_DIG_TRG_SP0_VOLTAGE_SETPOINT2(
        uint8_t value) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP0;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        LDO_LPSR_DIG_TRG_SP0 = curr;
    }

    /**
     * Get LDO_LPSR_DIG_TRG_SP0's VOLTAGE_SETPOINT1 field.
     *
     * VOLTAGE_SETPOINT1
     */
    inline uint8_t get_LDO_LPSR_DIG_TRG_SP0_VOLTAGE_SETPOINT1() volatile
    {
        return (LDO_LPSR_DIG_TRG_SP0 >> 8u) & 0b11111111u;
    }

    /**
     * Set LDO_LPSR_DIG_TRG_SP0's VOLTAGE_SETPOINT1 field.
     *
     * VOLTAGE_SETPOINT1
     */
    inline void set_LDO_LPSR_DIG_TRG_SP0_VOLTAGE_SETPOINT1(
        uint8_t value) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP0;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        LDO_LPSR_DIG_TRG_SP0 = curr;
    }

    /**
     * Get LDO_LPSR_DIG_TRG_SP0's VOLTAGE_SETPOINT0 field.
     *
     * VOLTAGE_SETPOINT0
     */
    inline uint8_t get_LDO_LPSR_DIG_TRG_SP0_VOLTAGE_SETPOINT0() volatile
    {
        return (LDO_LPSR_DIG_TRG_SP0 >> 0u) & 0b11111111u;
    }

    /**
     * Set LDO_LPSR_DIG_TRG_SP0's VOLTAGE_SETPOINT0 field.
     *
     * VOLTAGE_SETPOINT0
     */
    inline void set_LDO_LPSR_DIG_TRG_SP0_VOLTAGE_SETPOINT0(
        uint8_t value) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP0;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        LDO_LPSR_DIG_TRG_SP0 = curr;
    }

    /**
     * Get all of LDO_LPSR_DIG_TRG_SP0's bit fields.
     *
     * (read-write) LDO_LPSR_DIG_TRG_SP0_REGISTER
     */
    inline void get_LDO_LPSR_DIG_TRG_SP0(uint8_t &VOLTAGE_SETPOINT3,
                                         uint8_t &VOLTAGE_SETPOINT2,
                                         uint8_t &VOLTAGE_SETPOINT1,
                                         uint8_t &VOLTAGE_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP0;

        VOLTAGE_SETPOINT3 = (curr >> 24u) & 0b11111111u;
        VOLTAGE_SETPOINT2 = (curr >> 16u) & 0b11111111u;
        VOLTAGE_SETPOINT1 = (curr >> 8u) & 0b11111111u;
        VOLTAGE_SETPOINT0 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of LDO_LPSR_DIG_TRG_SP0's bit fields.
     *
     * (read-write) LDO_LPSR_DIG_TRG_SP0_REGISTER
     */
    inline void set_LDO_LPSR_DIG_TRG_SP0(uint8_t VOLTAGE_SETPOINT3,
                                         uint8_t VOLTAGE_SETPOINT2,
                                         uint8_t VOLTAGE_SETPOINT1,
                                         uint8_t VOLTAGE_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP0;

        curr &= ~(0b11111111u << 24u);
        curr |= (VOLTAGE_SETPOINT3 & 0b11111111u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (VOLTAGE_SETPOINT2 & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (VOLTAGE_SETPOINT1 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (VOLTAGE_SETPOINT0 & 0b11111111u) << 0u;

        LDO_LPSR_DIG_TRG_SP0 = curr;
    }

    /**
     * Get LDO_LPSR_DIG_TRG_SP1's VOLTAGE_SETPOINT7 field.
     *
     * VOLTAGE_SETPOINT7
     */
    inline uint8_t get_LDO_LPSR_DIG_TRG_SP1_VOLTAGE_SETPOINT7() volatile
    {
        return (LDO_LPSR_DIG_TRG_SP1 >> 24u) & 0b11111111u;
    }

    /**
     * Set LDO_LPSR_DIG_TRG_SP1's VOLTAGE_SETPOINT7 field.
     *
     * VOLTAGE_SETPOINT7
     */
    inline void set_LDO_LPSR_DIG_TRG_SP1_VOLTAGE_SETPOINT7(
        uint8_t value) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP1;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        LDO_LPSR_DIG_TRG_SP1 = curr;
    }

    /**
     * Get LDO_LPSR_DIG_TRG_SP1's VOLTAGE_SETPOINT6 field.
     *
     * VOLTAGE_SETPOINT6
     */
    inline uint8_t get_LDO_LPSR_DIG_TRG_SP1_VOLTAGE_SETPOINT6() volatile
    {
        return (LDO_LPSR_DIG_TRG_SP1 >> 16u) & 0b11111111u;
    }

    /**
     * Set LDO_LPSR_DIG_TRG_SP1's VOLTAGE_SETPOINT6 field.
     *
     * VOLTAGE_SETPOINT6
     */
    inline void set_LDO_LPSR_DIG_TRG_SP1_VOLTAGE_SETPOINT6(
        uint8_t value) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP1;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        LDO_LPSR_DIG_TRG_SP1 = curr;
    }

    /**
     * Get LDO_LPSR_DIG_TRG_SP1's VOLTAGE_SETPOINT5 field.
     *
     * VOLTAGE_SETPOINT5
     */
    inline uint8_t get_LDO_LPSR_DIG_TRG_SP1_VOLTAGE_SETPOINT5() volatile
    {
        return (LDO_LPSR_DIG_TRG_SP1 >> 8u) & 0b11111111u;
    }

    /**
     * Set LDO_LPSR_DIG_TRG_SP1's VOLTAGE_SETPOINT5 field.
     *
     * VOLTAGE_SETPOINT5
     */
    inline void set_LDO_LPSR_DIG_TRG_SP1_VOLTAGE_SETPOINT5(
        uint8_t value) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP1;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        LDO_LPSR_DIG_TRG_SP1 = curr;
    }

    /**
     * Get LDO_LPSR_DIG_TRG_SP1's VOLTAGE_SETPOINT4 field.
     *
     * VOLTAGE_SETPOINT4
     */
    inline uint8_t get_LDO_LPSR_DIG_TRG_SP1_VOLTAGE_SETPOINT4() volatile
    {
        return (LDO_LPSR_DIG_TRG_SP1 >> 0u) & 0b11111111u;
    }

    /**
     * Set LDO_LPSR_DIG_TRG_SP1's VOLTAGE_SETPOINT4 field.
     *
     * VOLTAGE_SETPOINT4
     */
    inline void set_LDO_LPSR_DIG_TRG_SP1_VOLTAGE_SETPOINT4(
        uint8_t value) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP1;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        LDO_LPSR_DIG_TRG_SP1 = curr;
    }

    /**
     * Get all of LDO_LPSR_DIG_TRG_SP1's bit fields.
     *
     * (read-write) LDO_LPSR_DIG_TRG_SP1_REGISTER
     */
    inline void get_LDO_LPSR_DIG_TRG_SP1(uint8_t &VOLTAGE_SETPOINT7,
                                         uint8_t &VOLTAGE_SETPOINT6,
                                         uint8_t &VOLTAGE_SETPOINT5,
                                         uint8_t &VOLTAGE_SETPOINT4) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP1;

        VOLTAGE_SETPOINT7 = (curr >> 24u) & 0b11111111u;
        VOLTAGE_SETPOINT6 = (curr >> 16u) & 0b11111111u;
        VOLTAGE_SETPOINT5 = (curr >> 8u) & 0b11111111u;
        VOLTAGE_SETPOINT4 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of LDO_LPSR_DIG_TRG_SP1's bit fields.
     *
     * (read-write) LDO_LPSR_DIG_TRG_SP1_REGISTER
     */
    inline void set_LDO_LPSR_DIG_TRG_SP1(uint8_t VOLTAGE_SETPOINT7,
                                         uint8_t VOLTAGE_SETPOINT6,
                                         uint8_t VOLTAGE_SETPOINT5,
                                         uint8_t VOLTAGE_SETPOINT4) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP1;

        curr &= ~(0b11111111u << 24u);
        curr |= (VOLTAGE_SETPOINT7 & 0b11111111u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (VOLTAGE_SETPOINT6 & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (VOLTAGE_SETPOINT5 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (VOLTAGE_SETPOINT4 & 0b11111111u) << 0u;

        LDO_LPSR_DIG_TRG_SP1 = curr;
    }

    /**
     * Get LDO_LPSR_DIG_TRG_SP2's VOLTAGE_SETPOINT11 field.
     *
     * VOLTAGE_SETPOINT11
     */
    inline uint8_t get_LDO_LPSR_DIG_TRG_SP2_VOLTAGE_SETPOINT11() volatile
    {
        return (LDO_LPSR_DIG_TRG_SP2 >> 24u) & 0b11111111u;
    }

    /**
     * Set LDO_LPSR_DIG_TRG_SP2's VOLTAGE_SETPOINT11 field.
     *
     * VOLTAGE_SETPOINT11
     */
    inline void set_LDO_LPSR_DIG_TRG_SP2_VOLTAGE_SETPOINT11(
        uint8_t value) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP2;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        LDO_LPSR_DIG_TRG_SP2 = curr;
    }

    /**
     * Get LDO_LPSR_DIG_TRG_SP2's VOLTAGE_SETPOINT10 field.
     *
     * VOLTAGE_SETPOINT10
     */
    inline uint8_t get_LDO_LPSR_DIG_TRG_SP2_VOLTAGE_SETPOINT10() volatile
    {
        return (LDO_LPSR_DIG_TRG_SP2 >> 16u) & 0b11111111u;
    }

    /**
     * Set LDO_LPSR_DIG_TRG_SP2's VOLTAGE_SETPOINT10 field.
     *
     * VOLTAGE_SETPOINT10
     */
    inline void set_LDO_LPSR_DIG_TRG_SP2_VOLTAGE_SETPOINT10(
        uint8_t value) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP2;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        LDO_LPSR_DIG_TRG_SP2 = curr;
    }

    /**
     * Get LDO_LPSR_DIG_TRG_SP2's VOLTAGE_SETPOINT9 field.
     *
     * VOLTAGE_SETPOINT9
     */
    inline uint8_t get_LDO_LPSR_DIG_TRG_SP2_VOLTAGE_SETPOINT9() volatile
    {
        return (LDO_LPSR_DIG_TRG_SP2 >> 8u) & 0b11111111u;
    }

    /**
     * Set LDO_LPSR_DIG_TRG_SP2's VOLTAGE_SETPOINT9 field.
     *
     * VOLTAGE_SETPOINT9
     */
    inline void set_LDO_LPSR_DIG_TRG_SP2_VOLTAGE_SETPOINT9(
        uint8_t value) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP2;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        LDO_LPSR_DIG_TRG_SP2 = curr;
    }

    /**
     * Get LDO_LPSR_DIG_TRG_SP2's VOLTAGE_SETPOINT8 field.
     *
     * VOLTAGE_SETPOINT8
     */
    inline uint8_t get_LDO_LPSR_DIG_TRG_SP2_VOLTAGE_SETPOINT8() volatile
    {
        return (LDO_LPSR_DIG_TRG_SP2 >> 0u) & 0b11111111u;
    }

    /**
     * Set LDO_LPSR_DIG_TRG_SP2's VOLTAGE_SETPOINT8 field.
     *
     * VOLTAGE_SETPOINT8
     */
    inline void set_LDO_LPSR_DIG_TRG_SP2_VOLTAGE_SETPOINT8(
        uint8_t value) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP2;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        LDO_LPSR_DIG_TRG_SP2 = curr;
    }

    /**
     * Get all of LDO_LPSR_DIG_TRG_SP2's bit fields.
     *
     * (read-write) LDO_LPSR_DIG_TRG_SP2_REGISTER
     */
    inline void get_LDO_LPSR_DIG_TRG_SP2(uint8_t &VOLTAGE_SETPOINT11,
                                         uint8_t &VOLTAGE_SETPOINT10,
                                         uint8_t &VOLTAGE_SETPOINT9,
                                         uint8_t &VOLTAGE_SETPOINT8) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP2;

        VOLTAGE_SETPOINT11 = (curr >> 24u) & 0b11111111u;
        VOLTAGE_SETPOINT10 = (curr >> 16u) & 0b11111111u;
        VOLTAGE_SETPOINT9 = (curr >> 8u) & 0b11111111u;
        VOLTAGE_SETPOINT8 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of LDO_LPSR_DIG_TRG_SP2's bit fields.
     *
     * (read-write) LDO_LPSR_DIG_TRG_SP2_REGISTER
     */
    inline void set_LDO_LPSR_DIG_TRG_SP2(uint8_t VOLTAGE_SETPOINT11,
                                         uint8_t VOLTAGE_SETPOINT10,
                                         uint8_t VOLTAGE_SETPOINT9,
                                         uint8_t VOLTAGE_SETPOINT8) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP2;

        curr &= ~(0b11111111u << 24u);
        curr |= (VOLTAGE_SETPOINT11 & 0b11111111u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (VOLTAGE_SETPOINT10 & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (VOLTAGE_SETPOINT9 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (VOLTAGE_SETPOINT8 & 0b11111111u) << 0u;

        LDO_LPSR_DIG_TRG_SP2 = curr;
    }

    /**
     * Get LDO_LPSR_DIG_TRG_SP3's VOLTAGE_SETPOINT15 field.
     *
     * VOLTAGE_SETPOINT15
     */
    inline uint8_t get_LDO_LPSR_DIG_TRG_SP3_VOLTAGE_SETPOINT15() volatile
    {
        return (LDO_LPSR_DIG_TRG_SP3 >> 24u) & 0b11111111u;
    }

    /**
     * Set LDO_LPSR_DIG_TRG_SP3's VOLTAGE_SETPOINT15 field.
     *
     * VOLTAGE_SETPOINT15
     */
    inline void set_LDO_LPSR_DIG_TRG_SP3_VOLTAGE_SETPOINT15(
        uint8_t value) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP3;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        LDO_LPSR_DIG_TRG_SP3 = curr;
    }

    /**
     * Get LDO_LPSR_DIG_TRG_SP3's VOLTAGE_SETPOINT14 field.
     *
     * VOLTAGE_SETPOINT14
     */
    inline uint8_t get_LDO_LPSR_DIG_TRG_SP3_VOLTAGE_SETPOINT14() volatile
    {
        return (LDO_LPSR_DIG_TRG_SP3 >> 16u) & 0b11111111u;
    }

    /**
     * Set LDO_LPSR_DIG_TRG_SP3's VOLTAGE_SETPOINT14 field.
     *
     * VOLTAGE_SETPOINT14
     */
    inline void set_LDO_LPSR_DIG_TRG_SP3_VOLTAGE_SETPOINT14(
        uint8_t value) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP3;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        LDO_LPSR_DIG_TRG_SP3 = curr;
    }

    /**
     * Get LDO_LPSR_DIG_TRG_SP3's VOLTAGE_SETPOINT13 field.
     *
     * VOLTAGE_SETPOINT13
     */
    inline uint8_t get_LDO_LPSR_DIG_TRG_SP3_VOLTAGE_SETPOINT13() volatile
    {
        return (LDO_LPSR_DIG_TRG_SP3 >> 8u) & 0b11111111u;
    }

    /**
     * Set LDO_LPSR_DIG_TRG_SP3's VOLTAGE_SETPOINT13 field.
     *
     * VOLTAGE_SETPOINT13
     */
    inline void set_LDO_LPSR_DIG_TRG_SP3_VOLTAGE_SETPOINT13(
        uint8_t value) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP3;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        LDO_LPSR_DIG_TRG_SP3 = curr;
    }

    /**
     * Get LDO_LPSR_DIG_TRG_SP3's VOLTAGE_SETPOINT12 field.
     *
     * VOLTAGE_SETPOINT12
     */
    inline uint8_t get_LDO_LPSR_DIG_TRG_SP3_VOLTAGE_SETPOINT12() volatile
    {
        return (LDO_LPSR_DIG_TRG_SP3 >> 0u) & 0b11111111u;
    }

    /**
     * Set LDO_LPSR_DIG_TRG_SP3's VOLTAGE_SETPOINT12 field.
     *
     * VOLTAGE_SETPOINT12
     */
    inline void set_LDO_LPSR_DIG_TRG_SP3_VOLTAGE_SETPOINT12(
        uint8_t value) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP3;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        LDO_LPSR_DIG_TRG_SP3 = curr;
    }

    /**
     * Get all of LDO_LPSR_DIG_TRG_SP3's bit fields.
     *
     * (read-write) LDO_LPSR_DIG_TRG_SP3_REGISTER
     */
    inline void get_LDO_LPSR_DIG_TRG_SP3(uint8_t &VOLTAGE_SETPOINT15,
                                         uint8_t &VOLTAGE_SETPOINT14,
                                         uint8_t &VOLTAGE_SETPOINT13,
                                         uint8_t &VOLTAGE_SETPOINT12) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP3;

        VOLTAGE_SETPOINT15 = (curr >> 24u) & 0b11111111u;
        VOLTAGE_SETPOINT14 = (curr >> 16u) & 0b11111111u;
        VOLTAGE_SETPOINT13 = (curr >> 8u) & 0b11111111u;
        VOLTAGE_SETPOINT12 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of LDO_LPSR_DIG_TRG_SP3's bit fields.
     *
     * (read-write) LDO_LPSR_DIG_TRG_SP3_REGISTER
     */
    inline void set_LDO_LPSR_DIG_TRG_SP3(uint8_t VOLTAGE_SETPOINT15,
                                         uint8_t VOLTAGE_SETPOINT14,
                                         uint8_t VOLTAGE_SETPOINT13,
                                         uint8_t VOLTAGE_SETPOINT12) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRG_SP3;

        curr &= ~(0b11111111u << 24u);
        curr |= (VOLTAGE_SETPOINT15 & 0b11111111u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (VOLTAGE_SETPOINT14 & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (VOLTAGE_SETPOINT13 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (VOLTAGE_SETPOINT12 & 0b11111111u) << 0u;

        LDO_LPSR_DIG_TRG_SP3 = curr;
    }

    /**
     * Get LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT15 bit.
     *
     * LP_MODE_SETPOINT15
     */
    inline bool get_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT15() volatile
    {
        return LDO_LPSR_DIG_LP_MODE_SP & (1u << 15u);
    }

    /**
     * Set LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT15 bit.
     *
     * LP_MODE_SETPOINT15
     */
    inline void set_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT15() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP |= 1u << 15u;
    }

    /**
     * Clear LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT15 bit.
     *
     * LP_MODE_SETPOINT15
     */
    inline void clear_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT15() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP &= ~(1u << 15u);
    }

    /**
     * Toggle LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT15 bit.
     *
     * LP_MODE_SETPOINT15
     */
    inline void toggle_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT15() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP ^= 1u << 15u;
    }

    /**
     * Get LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT14 bit.
     *
     * LP_MODE_SETPOINT14
     */
    inline bool get_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT14() volatile
    {
        return LDO_LPSR_DIG_LP_MODE_SP & (1u << 14u);
    }

    /**
     * Set LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT14 bit.
     *
     * LP_MODE_SETPOINT14
     */
    inline void set_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT14() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP |= 1u << 14u;
    }

    /**
     * Clear LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT14 bit.
     *
     * LP_MODE_SETPOINT14
     */
    inline void clear_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT14() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP &= ~(1u << 14u);
    }

    /**
     * Toggle LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT14 bit.
     *
     * LP_MODE_SETPOINT14
     */
    inline void toggle_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT14() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP ^= 1u << 14u;
    }

    /**
     * Get LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT13 bit.
     *
     * LP_MODE_SETPOINT13
     */
    inline bool get_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT13() volatile
    {
        return LDO_LPSR_DIG_LP_MODE_SP & (1u << 13u);
    }

    /**
     * Set LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT13 bit.
     *
     * LP_MODE_SETPOINT13
     */
    inline void set_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT13() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP |= 1u << 13u;
    }

    /**
     * Clear LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT13 bit.
     *
     * LP_MODE_SETPOINT13
     */
    inline void clear_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT13() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP &= ~(1u << 13u);
    }

    /**
     * Toggle LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT13 bit.
     *
     * LP_MODE_SETPOINT13
     */
    inline void toggle_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT13() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP ^= 1u << 13u;
    }

    /**
     * Get LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT12 bit.
     *
     * LP_MODE_SETPOINT12
     */
    inline bool get_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT12() volatile
    {
        return LDO_LPSR_DIG_LP_MODE_SP & (1u << 12u);
    }

    /**
     * Set LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT12 bit.
     *
     * LP_MODE_SETPOINT12
     */
    inline void set_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT12() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP |= 1u << 12u;
    }

    /**
     * Clear LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT12 bit.
     *
     * LP_MODE_SETPOINT12
     */
    inline void clear_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT12() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP &= ~(1u << 12u);
    }

    /**
     * Toggle LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT12 bit.
     *
     * LP_MODE_SETPOINT12
     */
    inline void toggle_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT12() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP ^= 1u << 12u;
    }

    /**
     * Get LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT11 bit.
     *
     * LP_MODE_SETPOINT11
     */
    inline bool get_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT11() volatile
    {
        return LDO_LPSR_DIG_LP_MODE_SP & (1u << 11u);
    }

    /**
     * Set LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT11 bit.
     *
     * LP_MODE_SETPOINT11
     */
    inline void set_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT11() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP |= 1u << 11u;
    }

    /**
     * Clear LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT11 bit.
     *
     * LP_MODE_SETPOINT11
     */
    inline void clear_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT11() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP &= ~(1u << 11u);
    }

    /**
     * Toggle LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT11 bit.
     *
     * LP_MODE_SETPOINT11
     */
    inline void toggle_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT11() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP ^= 1u << 11u;
    }

    /**
     * Get LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT10 bit.
     *
     * LP_MODE_SETPOINT10
     */
    inline bool get_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT10() volatile
    {
        return LDO_LPSR_DIG_LP_MODE_SP & (1u << 10u);
    }

    /**
     * Set LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT10 bit.
     *
     * LP_MODE_SETPOINT10
     */
    inline void set_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT10() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP |= 1u << 10u;
    }

    /**
     * Clear LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT10 bit.
     *
     * LP_MODE_SETPOINT10
     */
    inline void clear_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT10() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP &= ~(1u << 10u);
    }

    /**
     * Toggle LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT10 bit.
     *
     * LP_MODE_SETPOINT10
     */
    inline void toggle_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT10() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP ^= 1u << 10u;
    }

    /**
     * Get LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT9 bit.
     *
     * LP_MODE_SETPOINT9
     */
    inline bool get_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT9() volatile
    {
        return LDO_LPSR_DIG_LP_MODE_SP & (1u << 9u);
    }

    /**
     * Set LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT9 bit.
     *
     * LP_MODE_SETPOINT9
     */
    inline void set_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT9() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP |= 1u << 9u;
    }

    /**
     * Clear LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT9 bit.
     *
     * LP_MODE_SETPOINT9
     */
    inline void clear_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT9() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP &= ~(1u << 9u);
    }

    /**
     * Toggle LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT9 bit.
     *
     * LP_MODE_SETPOINT9
     */
    inline void toggle_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT9() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP ^= 1u << 9u;
    }

    /**
     * Get LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT8 bit.
     *
     * LP_MODE_SETPOINT8
     */
    inline bool get_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT8() volatile
    {
        return LDO_LPSR_DIG_LP_MODE_SP & (1u << 8u);
    }

    /**
     * Set LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT8 bit.
     *
     * LP_MODE_SETPOINT8
     */
    inline void set_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT8() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP |= 1u << 8u;
    }

    /**
     * Clear LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT8 bit.
     *
     * LP_MODE_SETPOINT8
     */
    inline void clear_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT8() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP &= ~(1u << 8u);
    }

    /**
     * Toggle LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT8 bit.
     *
     * LP_MODE_SETPOINT8
     */
    inline void toggle_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT8() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP ^= 1u << 8u;
    }

    /**
     * Get LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT7 bit.
     *
     * LP_MODE_SETPOINT7
     */
    inline bool get_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT7() volatile
    {
        return LDO_LPSR_DIG_LP_MODE_SP & (1u << 7u);
    }

    /**
     * Set LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT7 bit.
     *
     * LP_MODE_SETPOINT7
     */
    inline void set_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT7() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP |= 1u << 7u;
    }

    /**
     * Clear LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT7 bit.
     *
     * LP_MODE_SETPOINT7
     */
    inline void clear_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT7() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP &= ~(1u << 7u);
    }

    /**
     * Toggle LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT7 bit.
     *
     * LP_MODE_SETPOINT7
     */
    inline void toggle_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT7() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP ^= 1u << 7u;
    }

    /**
     * Get LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT6 bit.
     *
     * LP_MODE_SETPOINT6
     */
    inline bool get_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT6() volatile
    {
        return LDO_LPSR_DIG_LP_MODE_SP & (1u << 6u);
    }

    /**
     * Set LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT6 bit.
     *
     * LP_MODE_SETPOINT6
     */
    inline void set_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT6() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP |= 1u << 6u;
    }

    /**
     * Clear LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT6 bit.
     *
     * LP_MODE_SETPOINT6
     */
    inline void clear_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT6() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP &= ~(1u << 6u);
    }

    /**
     * Toggle LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT6 bit.
     *
     * LP_MODE_SETPOINT6
     */
    inline void toggle_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT6() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP ^= 1u << 6u;
    }

    /**
     * Get LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT5 bit.
     *
     * LP_MODE_SETPOINT5
     */
    inline bool get_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT5() volatile
    {
        return LDO_LPSR_DIG_LP_MODE_SP & (1u << 5u);
    }

    /**
     * Set LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT5 bit.
     *
     * LP_MODE_SETPOINT5
     */
    inline void set_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT5() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP |= 1u << 5u;
    }

    /**
     * Clear LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT5 bit.
     *
     * LP_MODE_SETPOINT5
     */
    inline void clear_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT5() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP &= ~(1u << 5u);
    }

    /**
     * Toggle LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT5 bit.
     *
     * LP_MODE_SETPOINT5
     */
    inline void toggle_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT5() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP ^= 1u << 5u;
    }

    /**
     * Get LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT4 bit.
     *
     * LP_MODE_SETPOINT4
     */
    inline bool get_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT4() volatile
    {
        return LDO_LPSR_DIG_LP_MODE_SP & (1u << 4u);
    }

    /**
     * Set LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT4 bit.
     *
     * LP_MODE_SETPOINT4
     */
    inline void set_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT4() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP |= 1u << 4u;
    }

    /**
     * Clear LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT4 bit.
     *
     * LP_MODE_SETPOINT4
     */
    inline void clear_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT4() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP &= ~(1u << 4u);
    }

    /**
     * Toggle LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT4 bit.
     *
     * LP_MODE_SETPOINT4
     */
    inline void toggle_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT4() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP ^= 1u << 4u;
    }

    /**
     * Get LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT3 bit.
     *
     * LP_MODE_SETPOINT3
     */
    inline bool get_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT3() volatile
    {
        return LDO_LPSR_DIG_LP_MODE_SP & (1u << 3u);
    }

    /**
     * Set LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT3 bit.
     *
     * LP_MODE_SETPOINT3
     */
    inline void set_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT3() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP |= 1u << 3u;
    }

    /**
     * Clear LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT3 bit.
     *
     * LP_MODE_SETPOINT3
     */
    inline void clear_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT3() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP &= ~(1u << 3u);
    }

    /**
     * Toggle LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT3 bit.
     *
     * LP_MODE_SETPOINT3
     */
    inline void toggle_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT3() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP ^= 1u << 3u;
    }

    /**
     * Get LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT2 bit.
     *
     * LP_MODE_SETPOINT2
     */
    inline bool get_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT2() volatile
    {
        return LDO_LPSR_DIG_LP_MODE_SP & (1u << 2u);
    }

    /**
     * Set LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT2 bit.
     *
     * LP_MODE_SETPOINT2
     */
    inline void set_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT2() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP |= 1u << 2u;
    }

    /**
     * Clear LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT2 bit.
     *
     * LP_MODE_SETPOINT2
     */
    inline void clear_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT2() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP &= ~(1u << 2u);
    }

    /**
     * Toggle LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT2 bit.
     *
     * LP_MODE_SETPOINT2
     */
    inline void toggle_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT2() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP ^= 1u << 2u;
    }

    /**
     * Get LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT1 bit.
     *
     * LP_MODE_SETPOINT1
     */
    inline bool get_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT1() volatile
    {
        return LDO_LPSR_DIG_LP_MODE_SP & (1u << 1u);
    }

    /**
     * Set LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT1 bit.
     *
     * LP_MODE_SETPOINT1
     */
    inline void set_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT1() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP |= 1u << 1u;
    }

    /**
     * Clear LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT1 bit.
     *
     * LP_MODE_SETPOINT1
     */
    inline void clear_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT1() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP &= ~(1u << 1u);
    }

    /**
     * Toggle LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT1 bit.
     *
     * LP_MODE_SETPOINT1
     */
    inline void toggle_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT1() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP ^= 1u << 1u;
    }

    /**
     * Get LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT0 bit.
     *
     * LP_MODE_SETPOINT0
     */
    inline bool get_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT0() volatile
    {
        return LDO_LPSR_DIG_LP_MODE_SP & (1u << 0u);
    }

    /**
     * Set LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT0 bit.
     *
     * LP_MODE_SETPOINT0
     */
    inline void set_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT0() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP |= 1u << 0u;
    }

    /**
     * Clear LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT0 bit.
     *
     * LP_MODE_SETPOINT0
     */
    inline void clear_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT0() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP &= ~(1u << 0u);
    }

    /**
     * Toggle LDO_LPSR_DIG_LP_MODE_SP's LP_MODE_SETPOINT0 bit.
     *
     * LP_MODE_SETPOINT0
     */
    inline void toggle_LDO_LPSR_DIG_LP_MODE_SP_LP_MODE_SETPOINT0() volatile
    {
        LDO_LPSR_DIG_LP_MODE_SP ^= 1u << 0u;
    }

    /**
     * Get all of LDO_LPSR_DIG_LP_MODE_SP's bit fields.
     *
     * (read-write) LDO_LPSR_DIG_LP_MODE_SP_REGISTER
     */
    inline void get_LDO_LPSR_DIG_LP_MODE_SP(
        bool &LP_MODE_SETPOINT15, bool &LP_MODE_SETPOINT14,
        bool &LP_MODE_SETPOINT13, bool &LP_MODE_SETPOINT12,
        bool &LP_MODE_SETPOINT11, bool &LP_MODE_SETPOINT10,
        bool &LP_MODE_SETPOINT9, bool &LP_MODE_SETPOINT8,
        bool &LP_MODE_SETPOINT7, bool &LP_MODE_SETPOINT6,
        bool &LP_MODE_SETPOINT5, bool &LP_MODE_SETPOINT4,
        bool &LP_MODE_SETPOINT3, bool &LP_MODE_SETPOINT2,
        bool &LP_MODE_SETPOINT1, bool &LP_MODE_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_LP_MODE_SP;

        LP_MODE_SETPOINT15 = curr & (1u << 15u);
        LP_MODE_SETPOINT14 = curr & (1u << 14u);
        LP_MODE_SETPOINT13 = curr & (1u << 13u);
        LP_MODE_SETPOINT12 = curr & (1u << 12u);
        LP_MODE_SETPOINT11 = curr & (1u << 11u);
        LP_MODE_SETPOINT10 = curr & (1u << 10u);
        LP_MODE_SETPOINT9 = curr & (1u << 9u);
        LP_MODE_SETPOINT8 = curr & (1u << 8u);
        LP_MODE_SETPOINT7 = curr & (1u << 7u);
        LP_MODE_SETPOINT6 = curr & (1u << 6u);
        LP_MODE_SETPOINT5 = curr & (1u << 5u);
        LP_MODE_SETPOINT4 = curr & (1u << 4u);
        LP_MODE_SETPOINT3 = curr & (1u << 3u);
        LP_MODE_SETPOINT2 = curr & (1u << 2u);
        LP_MODE_SETPOINT1 = curr & (1u << 1u);
        LP_MODE_SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of LDO_LPSR_DIG_LP_MODE_SP's bit fields.
     *
     * (read-write) LDO_LPSR_DIG_LP_MODE_SP_REGISTER
     */
    inline void set_LDO_LPSR_DIG_LP_MODE_SP(
        bool LP_MODE_SETPOINT15, bool LP_MODE_SETPOINT14,
        bool LP_MODE_SETPOINT13, bool LP_MODE_SETPOINT12,
        bool LP_MODE_SETPOINT11, bool LP_MODE_SETPOINT10,
        bool LP_MODE_SETPOINT9, bool LP_MODE_SETPOINT8, bool LP_MODE_SETPOINT7,
        bool LP_MODE_SETPOINT6, bool LP_MODE_SETPOINT5, bool LP_MODE_SETPOINT4,
        bool LP_MODE_SETPOINT3, bool LP_MODE_SETPOINT2, bool LP_MODE_SETPOINT1,
        bool LP_MODE_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_LP_MODE_SP;

        curr &= ~(0b1u << 15u);
        curr |= (LP_MODE_SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (LP_MODE_SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (LP_MODE_SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (LP_MODE_SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (LP_MODE_SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (LP_MODE_SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (LP_MODE_SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (LP_MODE_SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (LP_MODE_SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (LP_MODE_SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (LP_MODE_SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (LP_MODE_SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (LP_MODE_SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (LP_MODE_SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (LP_MODE_SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (LP_MODE_SETPOINT0 & 0b1u) << 0u;

        LDO_LPSR_DIG_LP_MODE_SP = curr;
    }

    /**
     * Get LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT15 bit.
     *
     * TRACKING_EN_SETPOINT15
     */
    inline bool
    get_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT15() volatile
    {
        return LDO_LPSR_DIG_TRACKING_EN_SP & (1u << 15u);
    }

    /**
     * Set LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT15 bit.
     *
     * TRACKING_EN_SETPOINT15
     */
    inline void
    set_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT15() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP |= 1u << 15u;
    }

    /**
     * Clear LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT15 bit.
     *
     * TRACKING_EN_SETPOINT15
     */
    inline void
    clear_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT15() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP &= ~(1u << 15u);
    }

    /**
     * Toggle LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT15 bit.
     *
     * TRACKING_EN_SETPOINT15
     */
    inline void
    toggle_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT15() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP ^= 1u << 15u;
    }

    /**
     * Get LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT14 bit.
     *
     * TRACKING_EN_SETPOINT14
     */
    inline bool
    get_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT14() volatile
    {
        return LDO_LPSR_DIG_TRACKING_EN_SP & (1u << 14u);
    }

    /**
     * Set LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT14 bit.
     *
     * TRACKING_EN_SETPOINT14
     */
    inline void
    set_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT14() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP |= 1u << 14u;
    }

    /**
     * Clear LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT14 bit.
     *
     * TRACKING_EN_SETPOINT14
     */
    inline void
    clear_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT14() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP &= ~(1u << 14u);
    }

    /**
     * Toggle LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT14 bit.
     *
     * TRACKING_EN_SETPOINT14
     */
    inline void
    toggle_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT14() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP ^= 1u << 14u;
    }

    /**
     * Get LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT13 bit.
     *
     * TRACKING_EN_SETPOINT13
     */
    inline bool
    get_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT13() volatile
    {
        return LDO_LPSR_DIG_TRACKING_EN_SP & (1u << 13u);
    }

    /**
     * Set LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT13 bit.
     *
     * TRACKING_EN_SETPOINT13
     */
    inline void
    set_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT13() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP |= 1u << 13u;
    }

    /**
     * Clear LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT13 bit.
     *
     * TRACKING_EN_SETPOINT13
     */
    inline void
    clear_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT13() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP &= ~(1u << 13u);
    }

    /**
     * Toggle LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT13 bit.
     *
     * TRACKING_EN_SETPOINT13
     */
    inline void
    toggle_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT13() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP ^= 1u << 13u;
    }

    /**
     * Get LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT12 bit.
     *
     * TRACKING_EN_SETPOINT12
     */
    inline bool
    get_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT12() volatile
    {
        return LDO_LPSR_DIG_TRACKING_EN_SP & (1u << 12u);
    }

    /**
     * Set LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT12 bit.
     *
     * TRACKING_EN_SETPOINT12
     */
    inline void
    set_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT12() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP |= 1u << 12u;
    }

    /**
     * Clear LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT12 bit.
     *
     * TRACKING_EN_SETPOINT12
     */
    inline void
    clear_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT12() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP &= ~(1u << 12u);
    }

    /**
     * Toggle LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT12 bit.
     *
     * TRACKING_EN_SETPOINT12
     */
    inline void
    toggle_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT12() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP ^= 1u << 12u;
    }

    /**
     * Get LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT11 bit.
     *
     * TRACKING_EN_SETPOINT11
     */
    inline bool
    get_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT11() volatile
    {
        return LDO_LPSR_DIG_TRACKING_EN_SP & (1u << 11u);
    }

    /**
     * Set LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT11 bit.
     *
     * TRACKING_EN_SETPOINT11
     */
    inline void
    set_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT11() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP |= 1u << 11u;
    }

    /**
     * Clear LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT11 bit.
     *
     * TRACKING_EN_SETPOINT11
     */
    inline void
    clear_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT11() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP &= ~(1u << 11u);
    }

    /**
     * Toggle LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT11 bit.
     *
     * TRACKING_EN_SETPOINT11
     */
    inline void
    toggle_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT11() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP ^= 1u << 11u;
    }

    /**
     * Get LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT10 bit.
     *
     * TRACKING_EN_SETPOINT10
     */
    inline bool
    get_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT10() volatile
    {
        return LDO_LPSR_DIG_TRACKING_EN_SP & (1u << 10u);
    }

    /**
     * Set LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT10 bit.
     *
     * TRACKING_EN_SETPOINT10
     */
    inline void
    set_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT10() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP |= 1u << 10u;
    }

    /**
     * Clear LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT10 bit.
     *
     * TRACKING_EN_SETPOINT10
     */
    inline void
    clear_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT10() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP &= ~(1u << 10u);
    }

    /**
     * Toggle LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT10 bit.
     *
     * TRACKING_EN_SETPOINT10
     */
    inline void
    toggle_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT10() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP ^= 1u << 10u;
    }

    /**
     * Get LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT9 bit.
     *
     * TRACKING_EN_SETPOINT9
     */
    inline bool
    get_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT9() volatile
    {
        return LDO_LPSR_DIG_TRACKING_EN_SP & (1u << 9u);
    }

    /**
     * Set LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT9 bit.
     *
     * TRACKING_EN_SETPOINT9
     */
    inline void
    set_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT9() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP |= 1u << 9u;
    }

    /**
     * Clear LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT9 bit.
     *
     * TRACKING_EN_SETPOINT9
     */
    inline void
    clear_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT9() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP &= ~(1u << 9u);
    }

    /**
     * Toggle LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT9 bit.
     *
     * TRACKING_EN_SETPOINT9
     */
    inline void
    toggle_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT9() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP ^= 1u << 9u;
    }

    /**
     * Get LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT8 bit.
     *
     * TRACKING_EN_SETPOINT8
     */
    inline bool
    get_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT8() volatile
    {
        return LDO_LPSR_DIG_TRACKING_EN_SP & (1u << 8u);
    }

    /**
     * Set LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT8 bit.
     *
     * TRACKING_EN_SETPOINT8
     */
    inline void
    set_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT8() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP |= 1u << 8u;
    }

    /**
     * Clear LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT8 bit.
     *
     * TRACKING_EN_SETPOINT8
     */
    inline void
    clear_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT8() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP &= ~(1u << 8u);
    }

    /**
     * Toggle LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT8 bit.
     *
     * TRACKING_EN_SETPOINT8
     */
    inline void
    toggle_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT8() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP ^= 1u << 8u;
    }

    /**
     * Get LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT7 bit.
     *
     * TRACKING_EN_SETPOINT7
     */
    inline bool
    get_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT7() volatile
    {
        return LDO_LPSR_DIG_TRACKING_EN_SP & (1u << 7u);
    }

    /**
     * Set LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT7 bit.
     *
     * TRACKING_EN_SETPOINT7
     */
    inline void
    set_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT7() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP |= 1u << 7u;
    }

    /**
     * Clear LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT7 bit.
     *
     * TRACKING_EN_SETPOINT7
     */
    inline void
    clear_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT7() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP &= ~(1u << 7u);
    }

    /**
     * Toggle LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT7 bit.
     *
     * TRACKING_EN_SETPOINT7
     */
    inline void
    toggle_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT7() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP ^= 1u << 7u;
    }

    /**
     * Get LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT6 bit.
     *
     * TRACKING_EN_SETPOINT6
     */
    inline bool
    get_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT6() volatile
    {
        return LDO_LPSR_DIG_TRACKING_EN_SP & (1u << 6u);
    }

    /**
     * Set LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT6 bit.
     *
     * TRACKING_EN_SETPOINT6
     */
    inline void
    set_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT6() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP |= 1u << 6u;
    }

    /**
     * Clear LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT6 bit.
     *
     * TRACKING_EN_SETPOINT6
     */
    inline void
    clear_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT6() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP &= ~(1u << 6u);
    }

    /**
     * Toggle LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT6 bit.
     *
     * TRACKING_EN_SETPOINT6
     */
    inline void
    toggle_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT6() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP ^= 1u << 6u;
    }

    /**
     * Get LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT5 bit.
     *
     * TRACKING_EN_SETPOINT5
     */
    inline bool
    get_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT5() volatile
    {
        return LDO_LPSR_DIG_TRACKING_EN_SP & (1u << 5u);
    }

    /**
     * Set LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT5 bit.
     *
     * TRACKING_EN_SETPOINT5
     */
    inline void
    set_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT5() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP |= 1u << 5u;
    }

    /**
     * Clear LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT5 bit.
     *
     * TRACKING_EN_SETPOINT5
     */
    inline void
    clear_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT5() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP &= ~(1u << 5u);
    }

    /**
     * Toggle LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT5 bit.
     *
     * TRACKING_EN_SETPOINT5
     */
    inline void
    toggle_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT5() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP ^= 1u << 5u;
    }

    /**
     * Get LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT4 bit.
     *
     * TRACKING_EN_SETPOINT4
     */
    inline bool
    get_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT4() volatile
    {
        return LDO_LPSR_DIG_TRACKING_EN_SP & (1u << 4u);
    }

    /**
     * Set LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT4 bit.
     *
     * TRACKING_EN_SETPOINT4
     */
    inline void
    set_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT4() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP |= 1u << 4u;
    }

    /**
     * Clear LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT4 bit.
     *
     * TRACKING_EN_SETPOINT4
     */
    inline void
    clear_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT4() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP &= ~(1u << 4u);
    }

    /**
     * Toggle LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT4 bit.
     *
     * TRACKING_EN_SETPOINT4
     */
    inline void
    toggle_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT4() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP ^= 1u << 4u;
    }

    /**
     * Get LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT3 bit.
     *
     * TRACKING_EN_SETPOINT3
     */
    inline bool
    get_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT3() volatile
    {
        return LDO_LPSR_DIG_TRACKING_EN_SP & (1u << 3u);
    }

    /**
     * Set LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT3 bit.
     *
     * TRACKING_EN_SETPOINT3
     */
    inline void
    set_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT3() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP |= 1u << 3u;
    }

    /**
     * Clear LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT3 bit.
     *
     * TRACKING_EN_SETPOINT3
     */
    inline void
    clear_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT3() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP &= ~(1u << 3u);
    }

    /**
     * Toggle LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT3 bit.
     *
     * TRACKING_EN_SETPOINT3
     */
    inline void
    toggle_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT3() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP ^= 1u << 3u;
    }

    /**
     * Get LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT2 bit.
     *
     * TRACKING_EN_SETPOINT2
     */
    inline bool
    get_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT2() volatile
    {
        return LDO_LPSR_DIG_TRACKING_EN_SP & (1u << 2u);
    }

    /**
     * Set LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT2 bit.
     *
     * TRACKING_EN_SETPOINT2
     */
    inline void
    set_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT2() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP |= 1u << 2u;
    }

    /**
     * Clear LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT2 bit.
     *
     * TRACKING_EN_SETPOINT2
     */
    inline void
    clear_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT2() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP &= ~(1u << 2u);
    }

    /**
     * Toggle LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT2 bit.
     *
     * TRACKING_EN_SETPOINT2
     */
    inline void
    toggle_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT2() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP ^= 1u << 2u;
    }

    /**
     * Get LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT1 bit.
     *
     * TRACKING_EN_SETPOINT1
     */
    inline bool
    get_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT1() volatile
    {
        return LDO_LPSR_DIG_TRACKING_EN_SP & (1u << 1u);
    }

    /**
     * Set LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT1 bit.
     *
     * TRACKING_EN_SETPOINT1
     */
    inline void
    set_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT1() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP |= 1u << 1u;
    }

    /**
     * Clear LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT1 bit.
     *
     * TRACKING_EN_SETPOINT1
     */
    inline void
    clear_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT1() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP &= ~(1u << 1u);
    }

    /**
     * Toggle LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT1 bit.
     *
     * TRACKING_EN_SETPOINT1
     */
    inline void
    toggle_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT1() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP ^= 1u << 1u;
    }

    /**
     * Get LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT0 bit.
     *
     * TRACKING_EN_SETPOINT0
     */
    inline bool
    get_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT0() volatile
    {
        return LDO_LPSR_DIG_TRACKING_EN_SP & (1u << 0u);
    }

    /**
     * Set LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT0 bit.
     *
     * TRACKING_EN_SETPOINT0
     */
    inline void
    set_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT0() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP |= 1u << 0u;
    }

    /**
     * Clear LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT0 bit.
     *
     * TRACKING_EN_SETPOINT0
     */
    inline void
    clear_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT0() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP &= ~(1u << 0u);
    }

    /**
     * Toggle LDO_LPSR_DIG_TRACKING_EN_SP's TRACKING_EN_SETPOINT0 bit.
     *
     * TRACKING_EN_SETPOINT0
     */
    inline void
    toggle_LDO_LPSR_DIG_TRACKING_EN_SP_TRACKING_EN_SETPOINT0() volatile
    {
        LDO_LPSR_DIG_TRACKING_EN_SP ^= 1u << 0u;
    }

    /**
     * Get all of LDO_LPSR_DIG_TRACKING_EN_SP's bit fields.
     *
     * (read-write) LDO_LPSR_DIG_TRACKING_EN_SP_REGISTER
     */
    inline void get_LDO_LPSR_DIG_TRACKING_EN_SP(
        bool &TRACKING_EN_SETPOINT15, bool &TRACKING_EN_SETPOINT14,
        bool &TRACKING_EN_SETPOINT13, bool &TRACKING_EN_SETPOINT12,
        bool &TRACKING_EN_SETPOINT11, bool &TRACKING_EN_SETPOINT10,
        bool &TRACKING_EN_SETPOINT9, bool &TRACKING_EN_SETPOINT8,
        bool &TRACKING_EN_SETPOINT7, bool &TRACKING_EN_SETPOINT6,
        bool &TRACKING_EN_SETPOINT5, bool &TRACKING_EN_SETPOINT4,
        bool &TRACKING_EN_SETPOINT3, bool &TRACKING_EN_SETPOINT2,
        bool &TRACKING_EN_SETPOINT1, bool &TRACKING_EN_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRACKING_EN_SP;

        TRACKING_EN_SETPOINT15 = curr & (1u << 15u);
        TRACKING_EN_SETPOINT14 = curr & (1u << 14u);
        TRACKING_EN_SETPOINT13 = curr & (1u << 13u);
        TRACKING_EN_SETPOINT12 = curr & (1u << 12u);
        TRACKING_EN_SETPOINT11 = curr & (1u << 11u);
        TRACKING_EN_SETPOINT10 = curr & (1u << 10u);
        TRACKING_EN_SETPOINT9 = curr & (1u << 9u);
        TRACKING_EN_SETPOINT8 = curr & (1u << 8u);
        TRACKING_EN_SETPOINT7 = curr & (1u << 7u);
        TRACKING_EN_SETPOINT6 = curr & (1u << 6u);
        TRACKING_EN_SETPOINT5 = curr & (1u << 5u);
        TRACKING_EN_SETPOINT4 = curr & (1u << 4u);
        TRACKING_EN_SETPOINT3 = curr & (1u << 3u);
        TRACKING_EN_SETPOINT2 = curr & (1u << 2u);
        TRACKING_EN_SETPOINT1 = curr & (1u << 1u);
        TRACKING_EN_SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of LDO_LPSR_DIG_TRACKING_EN_SP's bit fields.
     *
     * (read-write) LDO_LPSR_DIG_TRACKING_EN_SP_REGISTER
     */
    inline void set_LDO_LPSR_DIG_TRACKING_EN_SP(
        bool TRACKING_EN_SETPOINT15, bool TRACKING_EN_SETPOINT14,
        bool TRACKING_EN_SETPOINT13, bool TRACKING_EN_SETPOINT12,
        bool TRACKING_EN_SETPOINT11, bool TRACKING_EN_SETPOINT10,
        bool TRACKING_EN_SETPOINT9, bool TRACKING_EN_SETPOINT8,
        bool TRACKING_EN_SETPOINT7, bool TRACKING_EN_SETPOINT6,
        bool TRACKING_EN_SETPOINT5, bool TRACKING_EN_SETPOINT4,
        bool TRACKING_EN_SETPOINT3, bool TRACKING_EN_SETPOINT2,
        bool TRACKING_EN_SETPOINT1, bool TRACKING_EN_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_TRACKING_EN_SP;

        curr &= ~(0b1u << 15u);
        curr |= (TRACKING_EN_SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (TRACKING_EN_SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (TRACKING_EN_SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (TRACKING_EN_SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (TRACKING_EN_SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (TRACKING_EN_SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (TRACKING_EN_SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (TRACKING_EN_SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (TRACKING_EN_SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (TRACKING_EN_SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (TRACKING_EN_SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (TRACKING_EN_SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (TRACKING_EN_SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (TRACKING_EN_SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (TRACKING_EN_SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TRACKING_EN_SETPOINT0 & 0b1u) << 0u;

        LDO_LPSR_DIG_TRACKING_EN_SP = curr;
    }

    /**
     * Get LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT15 bit.
     *
     * BYPASS_EN_SETPOINT15
     */
    inline bool get_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT15() volatile
    {
        return LDO_LPSR_DIG_BYPASS_EN_SP & (1u << 15u);
    }

    /**
     * Set LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT15 bit.
     *
     * BYPASS_EN_SETPOINT15
     */
    inline void set_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT15() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP |= 1u << 15u;
    }

    /**
     * Clear LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT15 bit.
     *
     * BYPASS_EN_SETPOINT15
     */
    inline void clear_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT15() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP &= ~(1u << 15u);
    }

    /**
     * Toggle LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT15 bit.
     *
     * BYPASS_EN_SETPOINT15
     */
    inline void
    toggle_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT15() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP ^= 1u << 15u;
    }

    /**
     * Get LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT14 bit.
     *
     * BYPASS_EN_SETPOINT14
     */
    inline bool get_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT14() volatile
    {
        return LDO_LPSR_DIG_BYPASS_EN_SP & (1u << 14u);
    }

    /**
     * Set LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT14 bit.
     *
     * BYPASS_EN_SETPOINT14
     */
    inline void set_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT14() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP |= 1u << 14u;
    }

    /**
     * Clear LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT14 bit.
     *
     * BYPASS_EN_SETPOINT14
     */
    inline void clear_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT14() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP &= ~(1u << 14u);
    }

    /**
     * Toggle LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT14 bit.
     *
     * BYPASS_EN_SETPOINT14
     */
    inline void
    toggle_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT14() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP ^= 1u << 14u;
    }

    /**
     * Get LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT13 bit.
     *
     * BYPASS_EN_SETPOINT13
     */
    inline bool get_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT13() volatile
    {
        return LDO_LPSR_DIG_BYPASS_EN_SP & (1u << 13u);
    }

    /**
     * Set LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT13 bit.
     *
     * BYPASS_EN_SETPOINT13
     */
    inline void set_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT13() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP |= 1u << 13u;
    }

    /**
     * Clear LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT13 bit.
     *
     * BYPASS_EN_SETPOINT13
     */
    inline void clear_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT13() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP &= ~(1u << 13u);
    }

    /**
     * Toggle LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT13 bit.
     *
     * BYPASS_EN_SETPOINT13
     */
    inline void
    toggle_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT13() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP ^= 1u << 13u;
    }

    /**
     * Get LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT12 bit.
     *
     * BYPASS_EN_SETPOINT12
     */
    inline bool get_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT12() volatile
    {
        return LDO_LPSR_DIG_BYPASS_EN_SP & (1u << 12u);
    }

    /**
     * Set LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT12 bit.
     *
     * BYPASS_EN_SETPOINT12
     */
    inline void set_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT12() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP |= 1u << 12u;
    }

    /**
     * Clear LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT12 bit.
     *
     * BYPASS_EN_SETPOINT12
     */
    inline void clear_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT12() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP &= ~(1u << 12u);
    }

    /**
     * Toggle LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT12 bit.
     *
     * BYPASS_EN_SETPOINT12
     */
    inline void
    toggle_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT12() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP ^= 1u << 12u;
    }

    /**
     * Get LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT11 bit.
     *
     * BYPASS_EN_SETPOINT11
     */
    inline bool get_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT11() volatile
    {
        return LDO_LPSR_DIG_BYPASS_EN_SP & (1u << 11u);
    }

    /**
     * Set LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT11 bit.
     *
     * BYPASS_EN_SETPOINT11
     */
    inline void set_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT11() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP |= 1u << 11u;
    }

    /**
     * Clear LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT11 bit.
     *
     * BYPASS_EN_SETPOINT11
     */
    inline void clear_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT11() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP &= ~(1u << 11u);
    }

    /**
     * Toggle LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT11 bit.
     *
     * BYPASS_EN_SETPOINT11
     */
    inline void
    toggle_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT11() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP ^= 1u << 11u;
    }

    /**
     * Get LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT10 bit.
     *
     * BYPASS_EN_SETPOINT10
     */
    inline bool get_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT10() volatile
    {
        return LDO_LPSR_DIG_BYPASS_EN_SP & (1u << 10u);
    }

    /**
     * Set LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT10 bit.
     *
     * BYPASS_EN_SETPOINT10
     */
    inline void set_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT10() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP |= 1u << 10u;
    }

    /**
     * Clear LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT10 bit.
     *
     * BYPASS_EN_SETPOINT10
     */
    inline void clear_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT10() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP &= ~(1u << 10u);
    }

    /**
     * Toggle LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT10 bit.
     *
     * BYPASS_EN_SETPOINT10
     */
    inline void
    toggle_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT10() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP ^= 1u << 10u;
    }

    /**
     * Get LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT9 bit.
     *
     * BYPASS_EN_SETPOINT9
     */
    inline bool get_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT9() volatile
    {
        return LDO_LPSR_DIG_BYPASS_EN_SP & (1u << 9u);
    }

    /**
     * Set LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT9 bit.
     *
     * BYPASS_EN_SETPOINT9
     */
    inline void set_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT9() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP |= 1u << 9u;
    }

    /**
     * Clear LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT9 bit.
     *
     * BYPASS_EN_SETPOINT9
     */
    inline void clear_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT9() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP &= ~(1u << 9u);
    }

    /**
     * Toggle LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT9 bit.
     *
     * BYPASS_EN_SETPOINT9
     */
    inline void toggle_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT9() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP ^= 1u << 9u;
    }

    /**
     * Get LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT8 bit.
     *
     * BYPASS_EN_SETPOINT8
     */
    inline bool get_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT8() volatile
    {
        return LDO_LPSR_DIG_BYPASS_EN_SP & (1u << 8u);
    }

    /**
     * Set LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT8 bit.
     *
     * BYPASS_EN_SETPOINT8
     */
    inline void set_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT8() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP |= 1u << 8u;
    }

    /**
     * Clear LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT8 bit.
     *
     * BYPASS_EN_SETPOINT8
     */
    inline void clear_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT8() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP &= ~(1u << 8u);
    }

    /**
     * Toggle LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT8 bit.
     *
     * BYPASS_EN_SETPOINT8
     */
    inline void toggle_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT8() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP ^= 1u << 8u;
    }

    /**
     * Get LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT7 bit.
     *
     * BYPASS_EN_SETPOINT7
     */
    inline bool get_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT7() volatile
    {
        return LDO_LPSR_DIG_BYPASS_EN_SP & (1u << 7u);
    }

    /**
     * Set LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT7 bit.
     *
     * BYPASS_EN_SETPOINT7
     */
    inline void set_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT7() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP |= 1u << 7u;
    }

    /**
     * Clear LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT7 bit.
     *
     * BYPASS_EN_SETPOINT7
     */
    inline void clear_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT7() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP &= ~(1u << 7u);
    }

    /**
     * Toggle LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT7 bit.
     *
     * BYPASS_EN_SETPOINT7
     */
    inline void toggle_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT7() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP ^= 1u << 7u;
    }

    /**
     * Get LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT6 bit.
     *
     * BYPASS_EN_SETPOINT6
     */
    inline bool get_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT6() volatile
    {
        return LDO_LPSR_DIG_BYPASS_EN_SP & (1u << 6u);
    }

    /**
     * Set LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT6 bit.
     *
     * BYPASS_EN_SETPOINT6
     */
    inline void set_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT6() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP |= 1u << 6u;
    }

    /**
     * Clear LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT6 bit.
     *
     * BYPASS_EN_SETPOINT6
     */
    inline void clear_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT6() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP &= ~(1u << 6u);
    }

    /**
     * Toggle LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT6 bit.
     *
     * BYPASS_EN_SETPOINT6
     */
    inline void toggle_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT6() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP ^= 1u << 6u;
    }

    /**
     * Get LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT5 bit.
     *
     * BYPASS_EN_SETPOINT5
     */
    inline bool get_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT5() volatile
    {
        return LDO_LPSR_DIG_BYPASS_EN_SP & (1u << 5u);
    }

    /**
     * Set LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT5 bit.
     *
     * BYPASS_EN_SETPOINT5
     */
    inline void set_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT5() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP |= 1u << 5u;
    }

    /**
     * Clear LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT5 bit.
     *
     * BYPASS_EN_SETPOINT5
     */
    inline void clear_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT5() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP &= ~(1u << 5u);
    }

    /**
     * Toggle LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT5 bit.
     *
     * BYPASS_EN_SETPOINT5
     */
    inline void toggle_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT5() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP ^= 1u << 5u;
    }

    /**
     * Get LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT4 bit.
     *
     * BYPASS_EN_SETPOINT4
     */
    inline bool get_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT4() volatile
    {
        return LDO_LPSR_DIG_BYPASS_EN_SP & (1u << 4u);
    }

    /**
     * Set LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT4 bit.
     *
     * BYPASS_EN_SETPOINT4
     */
    inline void set_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT4() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP |= 1u << 4u;
    }

    /**
     * Clear LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT4 bit.
     *
     * BYPASS_EN_SETPOINT4
     */
    inline void clear_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT4() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP &= ~(1u << 4u);
    }

    /**
     * Toggle LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT4 bit.
     *
     * BYPASS_EN_SETPOINT4
     */
    inline void toggle_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT4() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP ^= 1u << 4u;
    }

    /**
     * Get LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT3 bit.
     *
     * BYPASS_EN_SETPOINT3
     */
    inline bool get_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT3() volatile
    {
        return LDO_LPSR_DIG_BYPASS_EN_SP & (1u << 3u);
    }

    /**
     * Set LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT3 bit.
     *
     * BYPASS_EN_SETPOINT3
     */
    inline void set_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT3() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP |= 1u << 3u;
    }

    /**
     * Clear LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT3 bit.
     *
     * BYPASS_EN_SETPOINT3
     */
    inline void clear_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT3() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP &= ~(1u << 3u);
    }

    /**
     * Toggle LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT3 bit.
     *
     * BYPASS_EN_SETPOINT3
     */
    inline void toggle_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT3() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP ^= 1u << 3u;
    }

    /**
     * Get LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT2 bit.
     *
     * BYPASS_EN_SETPOINT2
     */
    inline bool get_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT2() volatile
    {
        return LDO_LPSR_DIG_BYPASS_EN_SP & (1u << 2u);
    }

    /**
     * Set LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT2 bit.
     *
     * BYPASS_EN_SETPOINT2
     */
    inline void set_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT2() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP |= 1u << 2u;
    }

    /**
     * Clear LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT2 bit.
     *
     * BYPASS_EN_SETPOINT2
     */
    inline void clear_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT2() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP &= ~(1u << 2u);
    }

    /**
     * Toggle LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT2 bit.
     *
     * BYPASS_EN_SETPOINT2
     */
    inline void toggle_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT2() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP ^= 1u << 2u;
    }

    /**
     * Get LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT1 bit.
     *
     * BYPASS_EN_SETPOINT1
     */
    inline bool get_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT1() volatile
    {
        return LDO_LPSR_DIG_BYPASS_EN_SP & (1u << 1u);
    }

    /**
     * Set LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT1 bit.
     *
     * BYPASS_EN_SETPOINT1
     */
    inline void set_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT1() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP |= 1u << 1u;
    }

    /**
     * Clear LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT1 bit.
     *
     * BYPASS_EN_SETPOINT1
     */
    inline void clear_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT1() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP &= ~(1u << 1u);
    }

    /**
     * Toggle LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT1 bit.
     *
     * BYPASS_EN_SETPOINT1
     */
    inline void toggle_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT1() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP ^= 1u << 1u;
    }

    /**
     * Get LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT0 bit.
     *
     * BYPASS_EN_SETPOINT0
     */
    inline bool get_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT0() volatile
    {
        return LDO_LPSR_DIG_BYPASS_EN_SP & (1u << 0u);
    }

    /**
     * Set LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT0 bit.
     *
     * BYPASS_EN_SETPOINT0
     */
    inline void set_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT0() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP |= 1u << 0u;
    }

    /**
     * Clear LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT0 bit.
     *
     * BYPASS_EN_SETPOINT0
     */
    inline void clear_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT0() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP &= ~(1u << 0u);
    }

    /**
     * Toggle LDO_LPSR_DIG_BYPASS_EN_SP's BYPASS_EN_SETPOINT0 bit.
     *
     * BYPASS_EN_SETPOINT0
     */
    inline void toggle_LDO_LPSR_DIG_BYPASS_EN_SP_BYPASS_EN_SETPOINT0() volatile
    {
        LDO_LPSR_DIG_BYPASS_EN_SP ^= 1u << 0u;
    }

    /**
     * Get all of LDO_LPSR_DIG_BYPASS_EN_SP's bit fields.
     *
     * (read-write) LDO_LPSR_DIG_BYPASS_EN_SP_REGISTER
     */
    inline void get_LDO_LPSR_DIG_BYPASS_EN_SP(
        bool &BYPASS_EN_SETPOINT15, bool &BYPASS_EN_SETPOINT14,
        bool &BYPASS_EN_SETPOINT13, bool &BYPASS_EN_SETPOINT12,
        bool &BYPASS_EN_SETPOINT11, bool &BYPASS_EN_SETPOINT10,
        bool &BYPASS_EN_SETPOINT9, bool &BYPASS_EN_SETPOINT8,
        bool &BYPASS_EN_SETPOINT7, bool &BYPASS_EN_SETPOINT6,
        bool &BYPASS_EN_SETPOINT5, bool &BYPASS_EN_SETPOINT4,
        bool &BYPASS_EN_SETPOINT3, bool &BYPASS_EN_SETPOINT2,
        bool &BYPASS_EN_SETPOINT1, bool &BYPASS_EN_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_BYPASS_EN_SP;

        BYPASS_EN_SETPOINT15 = curr & (1u << 15u);
        BYPASS_EN_SETPOINT14 = curr & (1u << 14u);
        BYPASS_EN_SETPOINT13 = curr & (1u << 13u);
        BYPASS_EN_SETPOINT12 = curr & (1u << 12u);
        BYPASS_EN_SETPOINT11 = curr & (1u << 11u);
        BYPASS_EN_SETPOINT10 = curr & (1u << 10u);
        BYPASS_EN_SETPOINT9 = curr & (1u << 9u);
        BYPASS_EN_SETPOINT8 = curr & (1u << 8u);
        BYPASS_EN_SETPOINT7 = curr & (1u << 7u);
        BYPASS_EN_SETPOINT6 = curr & (1u << 6u);
        BYPASS_EN_SETPOINT5 = curr & (1u << 5u);
        BYPASS_EN_SETPOINT4 = curr & (1u << 4u);
        BYPASS_EN_SETPOINT3 = curr & (1u << 3u);
        BYPASS_EN_SETPOINT2 = curr & (1u << 2u);
        BYPASS_EN_SETPOINT1 = curr & (1u << 1u);
        BYPASS_EN_SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of LDO_LPSR_DIG_BYPASS_EN_SP's bit fields.
     *
     * (read-write) LDO_LPSR_DIG_BYPASS_EN_SP_REGISTER
     */
    inline void set_LDO_LPSR_DIG_BYPASS_EN_SP(
        bool BYPASS_EN_SETPOINT15, bool BYPASS_EN_SETPOINT14,
        bool BYPASS_EN_SETPOINT13, bool BYPASS_EN_SETPOINT12,
        bool BYPASS_EN_SETPOINT11, bool BYPASS_EN_SETPOINT10,
        bool BYPASS_EN_SETPOINT9, bool BYPASS_EN_SETPOINT8,
        bool BYPASS_EN_SETPOINT7, bool BYPASS_EN_SETPOINT6,
        bool BYPASS_EN_SETPOINT5, bool BYPASS_EN_SETPOINT4,
        bool BYPASS_EN_SETPOINT3, bool BYPASS_EN_SETPOINT2,
        bool BYPASS_EN_SETPOINT1, bool BYPASS_EN_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_BYPASS_EN_SP;

        curr &= ~(0b1u << 15u);
        curr |= (BYPASS_EN_SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (BYPASS_EN_SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (BYPASS_EN_SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (BYPASS_EN_SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (BYPASS_EN_SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (BYPASS_EN_SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (BYPASS_EN_SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (BYPASS_EN_SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (BYPASS_EN_SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (BYPASS_EN_SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (BYPASS_EN_SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (BYPASS_EN_SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (BYPASS_EN_SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (BYPASS_EN_SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (BYPASS_EN_SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (BYPASS_EN_SETPOINT0 & 0b1u) << 0u;

        LDO_LPSR_DIG_BYPASS_EN_SP = curr;
    }

    /**
     * Get LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * STBY_EN_SETPOINT15
     */
    inline bool get_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        return LDO_LPSR_DIG_STBY_EN_SP & (1u << 15u);
    }

    /**
     * Set LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * STBY_EN_SETPOINT15
     */
    inline void set_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP |= 1u << 15u;
    }

    /**
     * Clear LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * STBY_EN_SETPOINT15
     */
    inline void clear_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP &= ~(1u << 15u);
    }

    /**
     * Toggle LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * STBY_EN_SETPOINT15
     */
    inline void toggle_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP ^= 1u << 15u;
    }

    /**
     * Get LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * STBY_EN_SETPOINT14
     */
    inline bool get_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        return LDO_LPSR_DIG_STBY_EN_SP & (1u << 14u);
    }

    /**
     * Set LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * STBY_EN_SETPOINT14
     */
    inline void set_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP |= 1u << 14u;
    }

    /**
     * Clear LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * STBY_EN_SETPOINT14
     */
    inline void clear_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP &= ~(1u << 14u);
    }

    /**
     * Toggle LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * STBY_EN_SETPOINT14
     */
    inline void toggle_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP ^= 1u << 14u;
    }

    /**
     * Get LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * STBY_EN_SETPOINT13
     */
    inline bool get_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        return LDO_LPSR_DIG_STBY_EN_SP & (1u << 13u);
    }

    /**
     * Set LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * STBY_EN_SETPOINT13
     */
    inline void set_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP |= 1u << 13u;
    }

    /**
     * Clear LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * STBY_EN_SETPOINT13
     */
    inline void clear_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP &= ~(1u << 13u);
    }

    /**
     * Toggle LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * STBY_EN_SETPOINT13
     */
    inline void toggle_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP ^= 1u << 13u;
    }

    /**
     * Get LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * STBY_EN_SETPOINT12
     */
    inline bool get_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        return LDO_LPSR_DIG_STBY_EN_SP & (1u << 12u);
    }

    /**
     * Set LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * STBY_EN_SETPOINT12
     */
    inline void set_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP |= 1u << 12u;
    }

    /**
     * Clear LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * STBY_EN_SETPOINT12
     */
    inline void clear_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP &= ~(1u << 12u);
    }

    /**
     * Toggle LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * STBY_EN_SETPOINT12
     */
    inline void toggle_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP ^= 1u << 12u;
    }

    /**
     * Get LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * STBY_EN_SETPOINT11
     */
    inline bool get_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        return LDO_LPSR_DIG_STBY_EN_SP & (1u << 11u);
    }

    /**
     * Set LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * STBY_EN_SETPOINT11
     */
    inline void set_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP |= 1u << 11u;
    }

    /**
     * Clear LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * STBY_EN_SETPOINT11
     */
    inline void clear_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP &= ~(1u << 11u);
    }

    /**
     * Toggle LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * STBY_EN_SETPOINT11
     */
    inline void toggle_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP ^= 1u << 11u;
    }

    /**
     * Get LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * STBY_EN_SETPOINT10
     */
    inline bool get_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        return LDO_LPSR_DIG_STBY_EN_SP & (1u << 10u);
    }

    /**
     * Set LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * STBY_EN_SETPOINT10
     */
    inline void set_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP |= 1u << 10u;
    }

    /**
     * Clear LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * STBY_EN_SETPOINT10
     */
    inline void clear_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP &= ~(1u << 10u);
    }

    /**
     * Toggle LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * STBY_EN_SETPOINT10
     */
    inline void toggle_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP ^= 1u << 10u;
    }

    /**
     * Get LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * STBY_EN_SETPOINT9
     */
    inline bool get_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        return LDO_LPSR_DIG_STBY_EN_SP & (1u << 9u);
    }

    /**
     * Set LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * STBY_EN_SETPOINT9
     */
    inline void set_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP |= 1u << 9u;
    }

    /**
     * Clear LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * STBY_EN_SETPOINT9
     */
    inline void clear_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP &= ~(1u << 9u);
    }

    /**
     * Toggle LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * STBY_EN_SETPOINT9
     */
    inline void toggle_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP ^= 1u << 9u;
    }

    /**
     * Get LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * STBY_EN_SETPOINT8
     */
    inline bool get_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        return LDO_LPSR_DIG_STBY_EN_SP & (1u << 8u);
    }

    /**
     * Set LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * STBY_EN_SETPOINT8
     */
    inline void set_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP |= 1u << 8u;
    }

    /**
     * Clear LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * STBY_EN_SETPOINT8
     */
    inline void clear_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP &= ~(1u << 8u);
    }

    /**
     * Toggle LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * STBY_EN_SETPOINT8
     */
    inline void toggle_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP ^= 1u << 8u;
    }

    /**
     * Get LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * STBY_EN_SETPOINT7
     */
    inline bool get_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        return LDO_LPSR_DIG_STBY_EN_SP & (1u << 7u);
    }

    /**
     * Set LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * STBY_EN_SETPOINT7
     */
    inline void set_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP |= 1u << 7u;
    }

    /**
     * Clear LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * STBY_EN_SETPOINT7
     */
    inline void clear_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP &= ~(1u << 7u);
    }

    /**
     * Toggle LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * STBY_EN_SETPOINT7
     */
    inline void toggle_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP ^= 1u << 7u;
    }

    /**
     * Get LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * STBY_EN_SETPOINT6
     */
    inline bool get_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        return LDO_LPSR_DIG_STBY_EN_SP & (1u << 6u);
    }

    /**
     * Set LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * STBY_EN_SETPOINT6
     */
    inline void set_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP |= 1u << 6u;
    }

    /**
     * Clear LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * STBY_EN_SETPOINT6
     */
    inline void clear_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP &= ~(1u << 6u);
    }

    /**
     * Toggle LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * STBY_EN_SETPOINT6
     */
    inline void toggle_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP ^= 1u << 6u;
    }

    /**
     * Get LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * STBY_EN_SETPOINT5
     */
    inline bool get_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        return LDO_LPSR_DIG_STBY_EN_SP & (1u << 5u);
    }

    /**
     * Set LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * STBY_EN_SETPOINT5
     */
    inline void set_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP |= 1u << 5u;
    }

    /**
     * Clear LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * STBY_EN_SETPOINT5
     */
    inline void clear_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP &= ~(1u << 5u);
    }

    /**
     * Toggle LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * STBY_EN_SETPOINT5
     */
    inline void toggle_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP ^= 1u << 5u;
    }

    /**
     * Get LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * STBY_EN_SETPOINT4
     */
    inline bool get_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        return LDO_LPSR_DIG_STBY_EN_SP & (1u << 4u);
    }

    /**
     * Set LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * STBY_EN_SETPOINT4
     */
    inline void set_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP |= 1u << 4u;
    }

    /**
     * Clear LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * STBY_EN_SETPOINT4
     */
    inline void clear_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP &= ~(1u << 4u);
    }

    /**
     * Toggle LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * STBY_EN_SETPOINT4
     */
    inline void toggle_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP ^= 1u << 4u;
    }

    /**
     * Get LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * STBY_EN_SETPOINT3
     */
    inline bool get_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        return LDO_LPSR_DIG_STBY_EN_SP & (1u << 3u);
    }

    /**
     * Set LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * STBY_EN_SETPOINT3
     */
    inline void set_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP |= 1u << 3u;
    }

    /**
     * Clear LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * STBY_EN_SETPOINT3
     */
    inline void clear_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP &= ~(1u << 3u);
    }

    /**
     * Toggle LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * STBY_EN_SETPOINT3
     */
    inline void toggle_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP ^= 1u << 3u;
    }

    /**
     * Get LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * STBY_EN_SETPOINT2
     */
    inline bool get_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        return LDO_LPSR_DIG_STBY_EN_SP & (1u << 2u);
    }

    /**
     * Set LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * STBY_EN_SETPOINT2
     */
    inline void set_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP |= 1u << 2u;
    }

    /**
     * Clear LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * STBY_EN_SETPOINT2
     */
    inline void clear_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP &= ~(1u << 2u);
    }

    /**
     * Toggle LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * STBY_EN_SETPOINT2
     */
    inline void toggle_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP ^= 1u << 2u;
    }

    /**
     * Get LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * STBY_EN_SETPOINT1
     */
    inline bool get_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        return LDO_LPSR_DIG_STBY_EN_SP & (1u << 1u);
    }

    /**
     * Set LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * STBY_EN_SETPOINT1
     */
    inline void set_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP |= 1u << 1u;
    }

    /**
     * Clear LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * STBY_EN_SETPOINT1
     */
    inline void clear_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP &= ~(1u << 1u);
    }

    /**
     * Toggle LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * STBY_EN_SETPOINT1
     */
    inline void toggle_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP ^= 1u << 1u;
    }

    /**
     * Get LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * STBY_EN_SETPOINT0
     */
    inline bool get_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        return LDO_LPSR_DIG_STBY_EN_SP & (1u << 0u);
    }

    /**
     * Set LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * STBY_EN_SETPOINT0
     */
    inline void set_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP |= 1u << 0u;
    }

    /**
     * Clear LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * STBY_EN_SETPOINT0
     */
    inline void clear_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP &= ~(1u << 0u);
    }

    /**
     * Toggle LDO_LPSR_DIG_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * STBY_EN_SETPOINT0
     */
    inline void toggle_LDO_LPSR_DIG_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        LDO_LPSR_DIG_STBY_EN_SP ^= 1u << 0u;
    }

    /**
     * Get all of LDO_LPSR_DIG_STBY_EN_SP's bit fields.
     *
     * (read-write) LDO_LPSR_DIG_STBY_EN_SP_REGISTER
     */
    inline void get_LDO_LPSR_DIG_STBY_EN_SP(
        bool &STBY_EN_SETPOINT15, bool &STBY_EN_SETPOINT14,
        bool &STBY_EN_SETPOINT13, bool &STBY_EN_SETPOINT12,
        bool &STBY_EN_SETPOINT11, bool &STBY_EN_SETPOINT10,
        bool &STBY_EN_SETPOINT9, bool &STBY_EN_SETPOINT8,
        bool &STBY_EN_SETPOINT7, bool &STBY_EN_SETPOINT6,
        bool &STBY_EN_SETPOINT5, bool &STBY_EN_SETPOINT4,
        bool &STBY_EN_SETPOINT3, bool &STBY_EN_SETPOINT2,
        bool &STBY_EN_SETPOINT1, bool &STBY_EN_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_STBY_EN_SP;

        STBY_EN_SETPOINT15 = curr & (1u << 15u);
        STBY_EN_SETPOINT14 = curr & (1u << 14u);
        STBY_EN_SETPOINT13 = curr & (1u << 13u);
        STBY_EN_SETPOINT12 = curr & (1u << 12u);
        STBY_EN_SETPOINT11 = curr & (1u << 11u);
        STBY_EN_SETPOINT10 = curr & (1u << 10u);
        STBY_EN_SETPOINT9 = curr & (1u << 9u);
        STBY_EN_SETPOINT8 = curr & (1u << 8u);
        STBY_EN_SETPOINT7 = curr & (1u << 7u);
        STBY_EN_SETPOINT6 = curr & (1u << 6u);
        STBY_EN_SETPOINT5 = curr & (1u << 5u);
        STBY_EN_SETPOINT4 = curr & (1u << 4u);
        STBY_EN_SETPOINT3 = curr & (1u << 3u);
        STBY_EN_SETPOINT2 = curr & (1u << 2u);
        STBY_EN_SETPOINT1 = curr & (1u << 1u);
        STBY_EN_SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of LDO_LPSR_DIG_STBY_EN_SP's bit fields.
     *
     * (read-write) LDO_LPSR_DIG_STBY_EN_SP_REGISTER
     */
    inline void set_LDO_LPSR_DIG_STBY_EN_SP(
        bool STBY_EN_SETPOINT15, bool STBY_EN_SETPOINT14,
        bool STBY_EN_SETPOINT13, bool STBY_EN_SETPOINT12,
        bool STBY_EN_SETPOINT11, bool STBY_EN_SETPOINT10,
        bool STBY_EN_SETPOINT9, bool STBY_EN_SETPOINT8, bool STBY_EN_SETPOINT7,
        bool STBY_EN_SETPOINT6, bool STBY_EN_SETPOINT5, bool STBY_EN_SETPOINT4,
        bool STBY_EN_SETPOINT3, bool STBY_EN_SETPOINT2, bool STBY_EN_SETPOINT1,
        bool STBY_EN_SETPOINT0) volatile
    {
        uint32_t curr = LDO_LPSR_DIG_STBY_EN_SP;

        curr &= ~(0b1u << 15u);
        curr |= (STBY_EN_SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (STBY_EN_SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (STBY_EN_SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (STBY_EN_SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (STBY_EN_SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (STBY_EN_SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (STBY_EN_SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (STBY_EN_SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (STBY_EN_SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (STBY_EN_SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (STBY_EN_SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (STBY_EN_SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (STBY_EN_SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (STBY_EN_SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (STBY_EN_SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (STBY_EN_SETPOINT0 & 0b1u) << 0u;

        LDO_LPSR_DIG_STBY_EN_SP = curr;
    }

    /**
     * Get BANDGAP_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline bool get_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        return BANDGAP_ENABLE_SP & (1u << 15u);
    }

    /**
     * Set BANDGAP_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline void set_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        BANDGAP_ENABLE_SP |= 1u << 15u;
    }

    /**
     * Clear BANDGAP_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline void clear_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        BANDGAP_ENABLE_SP &= ~(1u << 15u);
    }

    /**
     * Toggle BANDGAP_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline void toggle_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        BANDGAP_ENABLE_SP ^= 1u << 15u;
    }

    /**
     * Get BANDGAP_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline bool get_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        return BANDGAP_ENABLE_SP & (1u << 14u);
    }

    /**
     * Set BANDGAP_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline void set_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        BANDGAP_ENABLE_SP |= 1u << 14u;
    }

    /**
     * Clear BANDGAP_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline void clear_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        BANDGAP_ENABLE_SP &= ~(1u << 14u);
    }

    /**
     * Toggle BANDGAP_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline void toggle_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        BANDGAP_ENABLE_SP ^= 1u << 14u;
    }

    /**
     * Get BANDGAP_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline bool get_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        return BANDGAP_ENABLE_SP & (1u << 13u);
    }

    /**
     * Set BANDGAP_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline void set_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        BANDGAP_ENABLE_SP |= 1u << 13u;
    }

    /**
     * Clear BANDGAP_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline void clear_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        BANDGAP_ENABLE_SP &= ~(1u << 13u);
    }

    /**
     * Toggle BANDGAP_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline void toggle_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        BANDGAP_ENABLE_SP ^= 1u << 13u;
    }

    /**
     * Get BANDGAP_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline bool get_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        return BANDGAP_ENABLE_SP & (1u << 12u);
    }

    /**
     * Set BANDGAP_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline void set_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        BANDGAP_ENABLE_SP |= 1u << 12u;
    }

    /**
     * Clear BANDGAP_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline void clear_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        BANDGAP_ENABLE_SP &= ~(1u << 12u);
    }

    /**
     * Toggle BANDGAP_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline void toggle_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        BANDGAP_ENABLE_SP ^= 1u << 12u;
    }

    /**
     * Get BANDGAP_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline bool get_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        return BANDGAP_ENABLE_SP & (1u << 11u);
    }

    /**
     * Set BANDGAP_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline void set_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        BANDGAP_ENABLE_SP |= 1u << 11u;
    }

    /**
     * Clear BANDGAP_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline void clear_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        BANDGAP_ENABLE_SP &= ~(1u << 11u);
    }

    /**
     * Toggle BANDGAP_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline void toggle_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        BANDGAP_ENABLE_SP ^= 1u << 11u;
    }

    /**
     * Get BANDGAP_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline bool get_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        return BANDGAP_ENABLE_SP & (1u << 10u);
    }

    /**
     * Set BANDGAP_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline void set_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        BANDGAP_ENABLE_SP |= 1u << 10u;
    }

    /**
     * Clear BANDGAP_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline void clear_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        BANDGAP_ENABLE_SP &= ~(1u << 10u);
    }

    /**
     * Toggle BANDGAP_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline void toggle_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        BANDGAP_ENABLE_SP ^= 1u << 10u;
    }

    /**
     * Get BANDGAP_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline bool get_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        return BANDGAP_ENABLE_SP & (1u << 9u);
    }

    /**
     * Set BANDGAP_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline void set_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        BANDGAP_ENABLE_SP |= 1u << 9u;
    }

    /**
     * Clear BANDGAP_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline void clear_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        BANDGAP_ENABLE_SP &= ~(1u << 9u);
    }

    /**
     * Toggle BANDGAP_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline void toggle_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        BANDGAP_ENABLE_SP ^= 1u << 9u;
    }

    /**
     * Get BANDGAP_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline bool get_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        return BANDGAP_ENABLE_SP & (1u << 8u);
    }

    /**
     * Set BANDGAP_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline void set_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        BANDGAP_ENABLE_SP |= 1u << 8u;
    }

    /**
     * Clear BANDGAP_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline void clear_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        BANDGAP_ENABLE_SP &= ~(1u << 8u);
    }

    /**
     * Toggle BANDGAP_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline void toggle_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        BANDGAP_ENABLE_SP ^= 1u << 8u;
    }

    /**
     * Get BANDGAP_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline bool get_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        return BANDGAP_ENABLE_SP & (1u << 7u);
    }

    /**
     * Set BANDGAP_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline void set_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        BANDGAP_ENABLE_SP |= 1u << 7u;
    }

    /**
     * Clear BANDGAP_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline void clear_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        BANDGAP_ENABLE_SP &= ~(1u << 7u);
    }

    /**
     * Toggle BANDGAP_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline void toggle_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        BANDGAP_ENABLE_SP ^= 1u << 7u;
    }

    /**
     * Get BANDGAP_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline bool get_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        return BANDGAP_ENABLE_SP & (1u << 6u);
    }

    /**
     * Set BANDGAP_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void set_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        BANDGAP_ENABLE_SP |= 1u << 6u;
    }

    /**
     * Clear BANDGAP_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void clear_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        BANDGAP_ENABLE_SP &= ~(1u << 6u);
    }

    /**
     * Toggle BANDGAP_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void toggle_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        BANDGAP_ENABLE_SP ^= 1u << 6u;
    }

    /**
     * Get BANDGAP_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline bool get_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        return BANDGAP_ENABLE_SP & (1u << 5u);
    }

    /**
     * Set BANDGAP_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void set_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        BANDGAP_ENABLE_SP |= 1u << 5u;
    }

    /**
     * Clear BANDGAP_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void clear_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        BANDGAP_ENABLE_SP &= ~(1u << 5u);
    }

    /**
     * Toggle BANDGAP_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void toggle_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        BANDGAP_ENABLE_SP ^= 1u << 5u;
    }

    /**
     * Get BANDGAP_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline bool get_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        return BANDGAP_ENABLE_SP & (1u << 4u);
    }

    /**
     * Set BANDGAP_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline void set_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        BANDGAP_ENABLE_SP |= 1u << 4u;
    }

    /**
     * Clear BANDGAP_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline void clear_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        BANDGAP_ENABLE_SP &= ~(1u << 4u);
    }

    /**
     * Toggle BANDGAP_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline void toggle_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        BANDGAP_ENABLE_SP ^= 1u << 4u;
    }

    /**
     * Get BANDGAP_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline bool get_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        return BANDGAP_ENABLE_SP & (1u << 3u);
    }

    /**
     * Set BANDGAP_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline void set_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        BANDGAP_ENABLE_SP |= 1u << 3u;
    }

    /**
     * Clear BANDGAP_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline void clear_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        BANDGAP_ENABLE_SP &= ~(1u << 3u);
    }

    /**
     * Toggle BANDGAP_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline void toggle_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        BANDGAP_ENABLE_SP ^= 1u << 3u;
    }

    /**
     * Get BANDGAP_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline bool get_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        return BANDGAP_ENABLE_SP & (1u << 2u);
    }

    /**
     * Set BANDGAP_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline void set_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        BANDGAP_ENABLE_SP |= 1u << 2u;
    }

    /**
     * Clear BANDGAP_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline void clear_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        BANDGAP_ENABLE_SP &= ~(1u << 2u);
    }

    /**
     * Toggle BANDGAP_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline void toggle_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        BANDGAP_ENABLE_SP ^= 1u << 2u;
    }

    /**
     * Get BANDGAP_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline bool get_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        return BANDGAP_ENABLE_SP & (1u << 1u);
    }

    /**
     * Set BANDGAP_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline void set_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        BANDGAP_ENABLE_SP |= 1u << 1u;
    }

    /**
     * Clear BANDGAP_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline void clear_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        BANDGAP_ENABLE_SP &= ~(1u << 1u);
    }

    /**
     * Toggle BANDGAP_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline void toggle_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        BANDGAP_ENABLE_SP ^= 1u << 1u;
    }

    /**
     * Get BANDGAP_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline bool get_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        return BANDGAP_ENABLE_SP & (1u << 0u);
    }

    /**
     * Set BANDGAP_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline void set_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        BANDGAP_ENABLE_SP |= 1u << 0u;
    }

    /**
     * Clear BANDGAP_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline void clear_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        BANDGAP_ENABLE_SP &= ~(1u << 0u);
    }

    /**
     * Toggle BANDGAP_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline void toggle_BANDGAP_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        BANDGAP_ENABLE_SP ^= 1u << 0u;
    }

    /**
     * Get all of BANDGAP_ENABLE_SP's bit fields.
     *
     * (read-write) BANDGAP_ENABLE_SP_REGISTER
     */
    inline void get_BANDGAP_ENABLE_SP(
        bool &ON_OFF_SETPOINT15, bool &ON_OFF_SETPOINT14,
        bool &ON_OFF_SETPOINT13, bool &ON_OFF_SETPOINT12,
        bool &ON_OFF_SETPOINT11, bool &ON_OFF_SETPOINT10,
        bool &ON_OFF_SETPOINT9, bool &ON_OFF_SETPOINT8, bool &ON_OFF_SETPOINT7,
        bool &ON_OFF_SETPOINT6, bool &ON_OFF_SETPOINT5, bool &ON_OFF_SETPOINT4,
        bool &ON_OFF_SETPOINT3, bool &ON_OFF_SETPOINT2, bool &ON_OFF_SETPOINT1,
        bool &ON_OFF_SETPOINT0) volatile
    {
        uint32_t curr = BANDGAP_ENABLE_SP;

        ON_OFF_SETPOINT15 = curr & (1u << 15u);
        ON_OFF_SETPOINT14 = curr & (1u << 14u);
        ON_OFF_SETPOINT13 = curr & (1u << 13u);
        ON_OFF_SETPOINT12 = curr & (1u << 12u);
        ON_OFF_SETPOINT11 = curr & (1u << 11u);
        ON_OFF_SETPOINT10 = curr & (1u << 10u);
        ON_OFF_SETPOINT9 = curr & (1u << 9u);
        ON_OFF_SETPOINT8 = curr & (1u << 8u);
        ON_OFF_SETPOINT7 = curr & (1u << 7u);
        ON_OFF_SETPOINT6 = curr & (1u << 6u);
        ON_OFF_SETPOINT5 = curr & (1u << 5u);
        ON_OFF_SETPOINT4 = curr & (1u << 4u);
        ON_OFF_SETPOINT3 = curr & (1u << 3u);
        ON_OFF_SETPOINT2 = curr & (1u << 2u);
        ON_OFF_SETPOINT1 = curr & (1u << 1u);
        ON_OFF_SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of BANDGAP_ENABLE_SP's bit fields.
     *
     * (read-write) BANDGAP_ENABLE_SP_REGISTER
     */
    inline void set_BANDGAP_ENABLE_SP(
        bool ON_OFF_SETPOINT15, bool ON_OFF_SETPOINT14, bool ON_OFF_SETPOINT13,
        bool ON_OFF_SETPOINT12, bool ON_OFF_SETPOINT11, bool ON_OFF_SETPOINT10,
        bool ON_OFF_SETPOINT9, bool ON_OFF_SETPOINT8, bool ON_OFF_SETPOINT7,
        bool ON_OFF_SETPOINT6, bool ON_OFF_SETPOINT5, bool ON_OFF_SETPOINT4,
        bool ON_OFF_SETPOINT3, bool ON_OFF_SETPOINT2, bool ON_OFF_SETPOINT1,
        bool ON_OFF_SETPOINT0) volatile
    {
        uint32_t curr = BANDGAP_ENABLE_SP;

        curr &= ~(0b1u << 15u);
        curr |= (ON_OFF_SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (ON_OFF_SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (ON_OFF_SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (ON_OFF_SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (ON_OFF_SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (ON_OFF_SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (ON_OFF_SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (ON_OFF_SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (ON_OFF_SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (ON_OFF_SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (ON_OFF_SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ON_OFF_SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (ON_OFF_SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (ON_OFF_SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (ON_OFF_SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ON_OFF_SETPOINT0 & 0b1u) << 0u;

        BANDGAP_ENABLE_SP = curr;
    }

    /**
     * Get FBB_M7_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline bool get_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        return FBB_M7_ENABLE_SP & (1u << 15u);
    }

    /**
     * Set FBB_M7_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline void set_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        FBB_M7_ENABLE_SP |= 1u << 15u;
    }

    /**
     * Clear FBB_M7_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline void clear_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        FBB_M7_ENABLE_SP &= ~(1u << 15u);
    }

    /**
     * Toggle FBB_M7_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline void toggle_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        FBB_M7_ENABLE_SP ^= 1u << 15u;
    }

    /**
     * Get FBB_M7_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline bool get_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        return FBB_M7_ENABLE_SP & (1u << 14u);
    }

    /**
     * Set FBB_M7_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline void set_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        FBB_M7_ENABLE_SP |= 1u << 14u;
    }

    /**
     * Clear FBB_M7_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline void clear_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        FBB_M7_ENABLE_SP &= ~(1u << 14u);
    }

    /**
     * Toggle FBB_M7_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline void toggle_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        FBB_M7_ENABLE_SP ^= 1u << 14u;
    }

    /**
     * Get FBB_M7_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline bool get_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        return FBB_M7_ENABLE_SP & (1u << 13u);
    }

    /**
     * Set FBB_M7_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline void set_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        FBB_M7_ENABLE_SP |= 1u << 13u;
    }

    /**
     * Clear FBB_M7_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline void clear_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        FBB_M7_ENABLE_SP &= ~(1u << 13u);
    }

    /**
     * Toggle FBB_M7_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline void toggle_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        FBB_M7_ENABLE_SP ^= 1u << 13u;
    }

    /**
     * Get FBB_M7_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline bool get_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        return FBB_M7_ENABLE_SP & (1u << 12u);
    }

    /**
     * Set FBB_M7_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline void set_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        FBB_M7_ENABLE_SP |= 1u << 12u;
    }

    /**
     * Clear FBB_M7_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline void clear_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        FBB_M7_ENABLE_SP &= ~(1u << 12u);
    }

    /**
     * Toggle FBB_M7_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline void toggle_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        FBB_M7_ENABLE_SP ^= 1u << 12u;
    }

    /**
     * Get FBB_M7_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline bool get_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        return FBB_M7_ENABLE_SP & (1u << 11u);
    }

    /**
     * Set FBB_M7_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline void set_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        FBB_M7_ENABLE_SP |= 1u << 11u;
    }

    /**
     * Clear FBB_M7_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline void clear_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        FBB_M7_ENABLE_SP &= ~(1u << 11u);
    }

    /**
     * Toggle FBB_M7_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline void toggle_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        FBB_M7_ENABLE_SP ^= 1u << 11u;
    }

    /**
     * Get FBB_M7_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline bool get_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        return FBB_M7_ENABLE_SP & (1u << 10u);
    }

    /**
     * Set FBB_M7_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline void set_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        FBB_M7_ENABLE_SP |= 1u << 10u;
    }

    /**
     * Clear FBB_M7_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline void clear_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        FBB_M7_ENABLE_SP &= ~(1u << 10u);
    }

    /**
     * Toggle FBB_M7_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline void toggle_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        FBB_M7_ENABLE_SP ^= 1u << 10u;
    }

    /**
     * Get FBB_M7_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline bool get_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        return FBB_M7_ENABLE_SP & (1u << 9u);
    }

    /**
     * Set FBB_M7_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline void set_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        FBB_M7_ENABLE_SP |= 1u << 9u;
    }

    /**
     * Clear FBB_M7_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline void clear_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        FBB_M7_ENABLE_SP &= ~(1u << 9u);
    }

    /**
     * Toggle FBB_M7_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline void toggle_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        FBB_M7_ENABLE_SP ^= 1u << 9u;
    }

    /**
     * Get FBB_M7_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline bool get_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        return FBB_M7_ENABLE_SP & (1u << 8u);
    }

    /**
     * Set FBB_M7_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline void set_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        FBB_M7_ENABLE_SP |= 1u << 8u;
    }

    /**
     * Clear FBB_M7_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline void clear_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        FBB_M7_ENABLE_SP &= ~(1u << 8u);
    }

    /**
     * Toggle FBB_M7_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline void toggle_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        FBB_M7_ENABLE_SP ^= 1u << 8u;
    }

    /**
     * Get FBB_M7_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline bool get_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        return FBB_M7_ENABLE_SP & (1u << 7u);
    }

    /**
     * Set FBB_M7_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline void set_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        FBB_M7_ENABLE_SP |= 1u << 7u;
    }

    /**
     * Clear FBB_M7_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline void clear_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        FBB_M7_ENABLE_SP &= ~(1u << 7u);
    }

    /**
     * Toggle FBB_M7_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline void toggle_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        FBB_M7_ENABLE_SP ^= 1u << 7u;
    }

    /**
     * Get FBB_M7_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline bool get_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        return FBB_M7_ENABLE_SP & (1u << 6u);
    }

    /**
     * Set FBB_M7_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline void set_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        FBB_M7_ENABLE_SP |= 1u << 6u;
    }

    /**
     * Clear FBB_M7_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline void clear_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        FBB_M7_ENABLE_SP &= ~(1u << 6u);
    }

    /**
     * Toggle FBB_M7_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline void toggle_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        FBB_M7_ENABLE_SP ^= 1u << 6u;
    }

    /**
     * Get FBB_M7_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline bool get_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        return FBB_M7_ENABLE_SP & (1u << 5u);
    }

    /**
     * Set FBB_M7_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void set_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        FBB_M7_ENABLE_SP |= 1u << 5u;
    }

    /**
     * Clear FBB_M7_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void clear_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        FBB_M7_ENABLE_SP &= ~(1u << 5u);
    }

    /**
     * Toggle FBB_M7_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void toggle_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        FBB_M7_ENABLE_SP ^= 1u << 5u;
    }

    /**
     * Get FBB_M7_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline bool get_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        return FBB_M7_ENABLE_SP & (1u << 4u);
    }

    /**
     * Set FBB_M7_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline void set_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        FBB_M7_ENABLE_SP |= 1u << 4u;
    }

    /**
     * Clear FBB_M7_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline void clear_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        FBB_M7_ENABLE_SP &= ~(1u << 4u);
    }

    /**
     * Toggle FBB_M7_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline void toggle_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        FBB_M7_ENABLE_SP ^= 1u << 4u;
    }

    /**
     * Get FBB_M7_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline bool get_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        return FBB_M7_ENABLE_SP & (1u << 3u);
    }

    /**
     * Set FBB_M7_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline void set_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        FBB_M7_ENABLE_SP |= 1u << 3u;
    }

    /**
     * Clear FBB_M7_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline void clear_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        FBB_M7_ENABLE_SP &= ~(1u << 3u);
    }

    /**
     * Toggle FBB_M7_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline void toggle_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        FBB_M7_ENABLE_SP ^= 1u << 3u;
    }

    /**
     * Get FBB_M7_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline bool get_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        return FBB_M7_ENABLE_SP & (1u << 2u);
    }

    /**
     * Set FBB_M7_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline void set_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        FBB_M7_ENABLE_SP |= 1u << 2u;
    }

    /**
     * Clear FBB_M7_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline void clear_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        FBB_M7_ENABLE_SP &= ~(1u << 2u);
    }

    /**
     * Toggle FBB_M7_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline void toggle_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        FBB_M7_ENABLE_SP ^= 1u << 2u;
    }

    /**
     * Get FBB_M7_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline bool get_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        return FBB_M7_ENABLE_SP & (1u << 1u);
    }

    /**
     * Set FBB_M7_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline void set_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        FBB_M7_ENABLE_SP |= 1u << 1u;
    }

    /**
     * Clear FBB_M7_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline void clear_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        FBB_M7_ENABLE_SP &= ~(1u << 1u);
    }

    /**
     * Toggle FBB_M7_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline void toggle_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        FBB_M7_ENABLE_SP ^= 1u << 1u;
    }

    /**
     * Get FBB_M7_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline bool get_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        return FBB_M7_ENABLE_SP & (1u << 0u);
    }

    /**
     * Set FBB_M7_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline void set_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        FBB_M7_ENABLE_SP |= 1u << 0u;
    }

    /**
     * Clear FBB_M7_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline void clear_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        FBB_M7_ENABLE_SP &= ~(1u << 0u);
    }

    /**
     * Toggle FBB_M7_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline void toggle_FBB_M7_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        FBB_M7_ENABLE_SP ^= 1u << 0u;
    }

    /**
     * Get all of FBB_M7_ENABLE_SP's bit fields.
     *
     * (read-write) FBB_M7_ENABLE_SP_REGISTER
     */
    inline void get_FBB_M7_ENABLE_SP(
        bool &ON_OFF_SETPOINT15, bool &ON_OFF_SETPOINT14,
        bool &ON_OFF_SETPOINT13, bool &ON_OFF_SETPOINT12,
        bool &ON_OFF_SETPOINT11, bool &ON_OFF_SETPOINT10,
        bool &ON_OFF_SETPOINT9, bool &ON_OFF_SETPOINT8, bool &ON_OFF_SETPOINT7,
        bool &ON_OFF_SETPOINT6, bool &ON_OFF_SETPOINT5, bool &ON_OFF_SETPOINT4,
        bool &ON_OFF_SETPOINT3, bool &ON_OFF_SETPOINT2, bool &ON_OFF_SETPOINT1,
        bool &ON_OFF_SETPOINT0) volatile
    {
        uint32_t curr = FBB_M7_ENABLE_SP;

        ON_OFF_SETPOINT15 = curr & (1u << 15u);
        ON_OFF_SETPOINT14 = curr & (1u << 14u);
        ON_OFF_SETPOINT13 = curr & (1u << 13u);
        ON_OFF_SETPOINT12 = curr & (1u << 12u);
        ON_OFF_SETPOINT11 = curr & (1u << 11u);
        ON_OFF_SETPOINT10 = curr & (1u << 10u);
        ON_OFF_SETPOINT9 = curr & (1u << 9u);
        ON_OFF_SETPOINT8 = curr & (1u << 8u);
        ON_OFF_SETPOINT7 = curr & (1u << 7u);
        ON_OFF_SETPOINT6 = curr & (1u << 6u);
        ON_OFF_SETPOINT5 = curr & (1u << 5u);
        ON_OFF_SETPOINT4 = curr & (1u << 4u);
        ON_OFF_SETPOINT3 = curr & (1u << 3u);
        ON_OFF_SETPOINT2 = curr & (1u << 2u);
        ON_OFF_SETPOINT1 = curr & (1u << 1u);
        ON_OFF_SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of FBB_M7_ENABLE_SP's bit fields.
     *
     * (read-write) FBB_M7_ENABLE_SP_REGISTER
     */
    inline void set_FBB_M7_ENABLE_SP(
        bool ON_OFF_SETPOINT15, bool ON_OFF_SETPOINT14, bool ON_OFF_SETPOINT13,
        bool ON_OFF_SETPOINT12, bool ON_OFF_SETPOINT11, bool ON_OFF_SETPOINT10,
        bool ON_OFF_SETPOINT9, bool ON_OFF_SETPOINT8, bool ON_OFF_SETPOINT7,
        bool ON_OFF_SETPOINT6, bool ON_OFF_SETPOINT5, bool ON_OFF_SETPOINT4,
        bool ON_OFF_SETPOINT3, bool ON_OFF_SETPOINT2, bool ON_OFF_SETPOINT1,
        bool ON_OFF_SETPOINT0) volatile
    {
        uint32_t curr = FBB_M7_ENABLE_SP;

        curr &= ~(0b1u << 15u);
        curr |= (ON_OFF_SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (ON_OFF_SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (ON_OFF_SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (ON_OFF_SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (ON_OFF_SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (ON_OFF_SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (ON_OFF_SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (ON_OFF_SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (ON_OFF_SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (ON_OFF_SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (ON_OFF_SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ON_OFF_SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (ON_OFF_SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (ON_OFF_SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (ON_OFF_SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ON_OFF_SETPOINT0 & 0b1u) << 0u;

        FBB_M7_ENABLE_SP = curr;
    }

    /**
     * Get RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline bool get_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        return RBB_SOC_ENABLE_SP & (1u << 15u);
    }

    /**
     * Set RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline void set_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        RBB_SOC_ENABLE_SP |= 1u << 15u;
    }

    /**
     * Clear RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline void clear_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        RBB_SOC_ENABLE_SP &= ~(1u << 15u);
    }

    /**
     * Toggle RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline void toggle_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        RBB_SOC_ENABLE_SP ^= 1u << 15u;
    }

    /**
     * Get RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline bool get_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        return RBB_SOC_ENABLE_SP & (1u << 14u);
    }

    /**
     * Set RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline void set_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        RBB_SOC_ENABLE_SP |= 1u << 14u;
    }

    /**
     * Clear RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline void clear_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        RBB_SOC_ENABLE_SP &= ~(1u << 14u);
    }

    /**
     * Toggle RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline void toggle_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        RBB_SOC_ENABLE_SP ^= 1u << 14u;
    }

    /**
     * Get RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline bool get_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        return RBB_SOC_ENABLE_SP & (1u << 13u);
    }

    /**
     * Set RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline void set_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        RBB_SOC_ENABLE_SP |= 1u << 13u;
    }

    /**
     * Clear RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline void clear_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        RBB_SOC_ENABLE_SP &= ~(1u << 13u);
    }

    /**
     * Toggle RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline void toggle_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        RBB_SOC_ENABLE_SP ^= 1u << 13u;
    }

    /**
     * Get RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline bool get_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        return RBB_SOC_ENABLE_SP & (1u << 12u);
    }

    /**
     * Set RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline void set_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        RBB_SOC_ENABLE_SP |= 1u << 12u;
    }

    /**
     * Clear RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline void clear_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        RBB_SOC_ENABLE_SP &= ~(1u << 12u);
    }

    /**
     * Toggle RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline void toggle_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        RBB_SOC_ENABLE_SP ^= 1u << 12u;
    }

    /**
     * Get RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline bool get_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        return RBB_SOC_ENABLE_SP & (1u << 11u);
    }

    /**
     * Set RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline void set_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        RBB_SOC_ENABLE_SP |= 1u << 11u;
    }

    /**
     * Clear RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline void clear_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        RBB_SOC_ENABLE_SP &= ~(1u << 11u);
    }

    /**
     * Toggle RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline void toggle_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        RBB_SOC_ENABLE_SP ^= 1u << 11u;
    }

    /**
     * Get RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline bool get_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        return RBB_SOC_ENABLE_SP & (1u << 10u);
    }

    /**
     * Set RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline void set_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        RBB_SOC_ENABLE_SP |= 1u << 10u;
    }

    /**
     * Clear RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline void clear_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        RBB_SOC_ENABLE_SP &= ~(1u << 10u);
    }

    /**
     * Toggle RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline void toggle_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        RBB_SOC_ENABLE_SP ^= 1u << 10u;
    }

    /**
     * Get RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline bool get_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        return RBB_SOC_ENABLE_SP & (1u << 9u);
    }

    /**
     * Set RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline void set_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        RBB_SOC_ENABLE_SP |= 1u << 9u;
    }

    /**
     * Clear RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline void clear_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        RBB_SOC_ENABLE_SP &= ~(1u << 9u);
    }

    /**
     * Toggle RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline void toggle_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        RBB_SOC_ENABLE_SP ^= 1u << 9u;
    }

    /**
     * Get RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline bool get_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        return RBB_SOC_ENABLE_SP & (1u << 8u);
    }

    /**
     * Set RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline void set_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        RBB_SOC_ENABLE_SP |= 1u << 8u;
    }

    /**
     * Clear RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline void clear_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        RBB_SOC_ENABLE_SP &= ~(1u << 8u);
    }

    /**
     * Toggle RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline void toggle_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        RBB_SOC_ENABLE_SP ^= 1u << 8u;
    }

    /**
     * Get RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline bool get_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        return RBB_SOC_ENABLE_SP & (1u << 7u);
    }

    /**
     * Set RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline void set_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        RBB_SOC_ENABLE_SP |= 1u << 7u;
    }

    /**
     * Clear RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline void clear_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        RBB_SOC_ENABLE_SP &= ~(1u << 7u);
    }

    /**
     * Toggle RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline void toggle_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        RBB_SOC_ENABLE_SP ^= 1u << 7u;
    }

    /**
     * Get RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline bool get_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        return RBB_SOC_ENABLE_SP & (1u << 6u);
    }

    /**
     * Set RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline void set_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        RBB_SOC_ENABLE_SP |= 1u << 6u;
    }

    /**
     * Clear RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline void clear_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        RBB_SOC_ENABLE_SP &= ~(1u << 6u);
    }

    /**
     * Toggle RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline void toggle_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        RBB_SOC_ENABLE_SP ^= 1u << 6u;
    }

    /**
     * Get RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline bool get_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        return RBB_SOC_ENABLE_SP & (1u << 5u);
    }

    /**
     * Set RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void set_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        RBB_SOC_ENABLE_SP |= 1u << 5u;
    }

    /**
     * Clear RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void clear_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        RBB_SOC_ENABLE_SP &= ~(1u << 5u);
    }

    /**
     * Toggle RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void toggle_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        RBB_SOC_ENABLE_SP ^= 1u << 5u;
    }

    /**
     * Get RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline bool get_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        return RBB_SOC_ENABLE_SP & (1u << 4u);
    }

    /**
     * Set RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline void set_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        RBB_SOC_ENABLE_SP |= 1u << 4u;
    }

    /**
     * Clear RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline void clear_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        RBB_SOC_ENABLE_SP &= ~(1u << 4u);
    }

    /**
     * Toggle RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline void toggle_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        RBB_SOC_ENABLE_SP ^= 1u << 4u;
    }

    /**
     * Get RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline bool get_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        return RBB_SOC_ENABLE_SP & (1u << 3u);
    }

    /**
     * Set RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline void set_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        RBB_SOC_ENABLE_SP |= 1u << 3u;
    }

    /**
     * Clear RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline void clear_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        RBB_SOC_ENABLE_SP &= ~(1u << 3u);
    }

    /**
     * Toggle RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline void toggle_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        RBB_SOC_ENABLE_SP ^= 1u << 3u;
    }

    /**
     * Get RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline bool get_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        return RBB_SOC_ENABLE_SP & (1u << 2u);
    }

    /**
     * Set RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline void set_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        RBB_SOC_ENABLE_SP |= 1u << 2u;
    }

    /**
     * Clear RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline void clear_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        RBB_SOC_ENABLE_SP &= ~(1u << 2u);
    }

    /**
     * Toggle RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline void toggle_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        RBB_SOC_ENABLE_SP ^= 1u << 2u;
    }

    /**
     * Get RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline bool get_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        return RBB_SOC_ENABLE_SP & (1u << 1u);
    }

    /**
     * Set RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline void set_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        RBB_SOC_ENABLE_SP |= 1u << 1u;
    }

    /**
     * Clear RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline void clear_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        RBB_SOC_ENABLE_SP &= ~(1u << 1u);
    }

    /**
     * Toggle RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline void toggle_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        RBB_SOC_ENABLE_SP ^= 1u << 1u;
    }

    /**
     * Get RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline bool get_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        return RBB_SOC_ENABLE_SP & (1u << 0u);
    }

    /**
     * Set RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline void set_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        RBB_SOC_ENABLE_SP |= 1u << 0u;
    }

    /**
     * Clear RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline void clear_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        RBB_SOC_ENABLE_SP &= ~(1u << 0u);
    }

    /**
     * Toggle RBB_SOC_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline void toggle_RBB_SOC_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        RBB_SOC_ENABLE_SP ^= 1u << 0u;
    }

    /**
     * Get all of RBB_SOC_ENABLE_SP's bit fields.
     *
     * (read-write) RBB_SOC_ENABLE_SP_REGISTER
     */
    inline void get_RBB_SOC_ENABLE_SP(
        bool &ON_OFF_SETPOINT15, bool &ON_OFF_SETPOINT14,
        bool &ON_OFF_SETPOINT13, bool &ON_OFF_SETPOINT12,
        bool &ON_OFF_SETPOINT11, bool &ON_OFF_SETPOINT10,
        bool &ON_OFF_SETPOINT9, bool &ON_OFF_SETPOINT8, bool &ON_OFF_SETPOINT7,
        bool &ON_OFF_SETPOINT6, bool &ON_OFF_SETPOINT5, bool &ON_OFF_SETPOINT4,
        bool &ON_OFF_SETPOINT3, bool &ON_OFF_SETPOINT2, bool &ON_OFF_SETPOINT1,
        bool &ON_OFF_SETPOINT0) volatile
    {
        uint32_t curr = RBB_SOC_ENABLE_SP;

        ON_OFF_SETPOINT15 = curr & (1u << 15u);
        ON_OFF_SETPOINT14 = curr & (1u << 14u);
        ON_OFF_SETPOINT13 = curr & (1u << 13u);
        ON_OFF_SETPOINT12 = curr & (1u << 12u);
        ON_OFF_SETPOINT11 = curr & (1u << 11u);
        ON_OFF_SETPOINT10 = curr & (1u << 10u);
        ON_OFF_SETPOINT9 = curr & (1u << 9u);
        ON_OFF_SETPOINT8 = curr & (1u << 8u);
        ON_OFF_SETPOINT7 = curr & (1u << 7u);
        ON_OFF_SETPOINT6 = curr & (1u << 6u);
        ON_OFF_SETPOINT5 = curr & (1u << 5u);
        ON_OFF_SETPOINT4 = curr & (1u << 4u);
        ON_OFF_SETPOINT3 = curr & (1u << 3u);
        ON_OFF_SETPOINT2 = curr & (1u << 2u);
        ON_OFF_SETPOINT1 = curr & (1u << 1u);
        ON_OFF_SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of RBB_SOC_ENABLE_SP's bit fields.
     *
     * (read-write) RBB_SOC_ENABLE_SP_REGISTER
     */
    inline void set_RBB_SOC_ENABLE_SP(
        bool ON_OFF_SETPOINT15, bool ON_OFF_SETPOINT14, bool ON_OFF_SETPOINT13,
        bool ON_OFF_SETPOINT12, bool ON_OFF_SETPOINT11, bool ON_OFF_SETPOINT10,
        bool ON_OFF_SETPOINT9, bool ON_OFF_SETPOINT8, bool ON_OFF_SETPOINT7,
        bool ON_OFF_SETPOINT6, bool ON_OFF_SETPOINT5, bool ON_OFF_SETPOINT4,
        bool ON_OFF_SETPOINT3, bool ON_OFF_SETPOINT2, bool ON_OFF_SETPOINT1,
        bool ON_OFF_SETPOINT0) volatile
    {
        uint32_t curr = RBB_SOC_ENABLE_SP;

        curr &= ~(0b1u << 15u);
        curr |= (ON_OFF_SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (ON_OFF_SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (ON_OFF_SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (ON_OFF_SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (ON_OFF_SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (ON_OFF_SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (ON_OFF_SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (ON_OFF_SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (ON_OFF_SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (ON_OFF_SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (ON_OFF_SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ON_OFF_SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (ON_OFF_SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (ON_OFF_SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (ON_OFF_SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ON_OFF_SETPOINT0 & 0b1u) << 0u;

        RBB_SOC_ENABLE_SP = curr;
    }

    /**
     * Get RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline bool get_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        return RBB_LPSR_ENABLE_SP & (1u << 15u);
    }

    /**
     * Set RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline void set_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        RBB_LPSR_ENABLE_SP |= 1u << 15u;
    }

    /**
     * Clear RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline void clear_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        RBB_LPSR_ENABLE_SP &= ~(1u << 15u);
    }

    /**
     * Toggle RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT15 bit.
     *
     * ON_OFF_SETPOINT15
     */
    inline void toggle_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT15() volatile
    {
        RBB_LPSR_ENABLE_SP ^= 1u << 15u;
    }

    /**
     * Get RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline bool get_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        return RBB_LPSR_ENABLE_SP & (1u << 14u);
    }

    /**
     * Set RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline void set_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        RBB_LPSR_ENABLE_SP |= 1u << 14u;
    }

    /**
     * Clear RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline void clear_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        RBB_LPSR_ENABLE_SP &= ~(1u << 14u);
    }

    /**
     * Toggle RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT14 bit.
     *
     * ON_OFF_SETPOINT14
     */
    inline void toggle_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT14() volatile
    {
        RBB_LPSR_ENABLE_SP ^= 1u << 14u;
    }

    /**
     * Get RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline bool get_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        return RBB_LPSR_ENABLE_SP & (1u << 13u);
    }

    /**
     * Set RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline void set_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        RBB_LPSR_ENABLE_SP |= 1u << 13u;
    }

    /**
     * Clear RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline void clear_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        RBB_LPSR_ENABLE_SP &= ~(1u << 13u);
    }

    /**
     * Toggle RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT13 bit.
     *
     * ON_OFF_SETPOINT13
     */
    inline void toggle_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT13() volatile
    {
        RBB_LPSR_ENABLE_SP ^= 1u << 13u;
    }

    /**
     * Get RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline bool get_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        return RBB_LPSR_ENABLE_SP & (1u << 12u);
    }

    /**
     * Set RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline void set_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        RBB_LPSR_ENABLE_SP |= 1u << 12u;
    }

    /**
     * Clear RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline void clear_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        RBB_LPSR_ENABLE_SP &= ~(1u << 12u);
    }

    /**
     * Toggle RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT12 bit.
     *
     * ON_OFF_SETPOINT12
     */
    inline void toggle_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT12() volatile
    {
        RBB_LPSR_ENABLE_SP ^= 1u << 12u;
    }

    /**
     * Get RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline bool get_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        return RBB_LPSR_ENABLE_SP & (1u << 11u);
    }

    /**
     * Set RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline void set_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        RBB_LPSR_ENABLE_SP |= 1u << 11u;
    }

    /**
     * Clear RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline void clear_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        RBB_LPSR_ENABLE_SP &= ~(1u << 11u);
    }

    /**
     * Toggle RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT11 bit.
     *
     * ON_OFF_SETPOINT11
     */
    inline void toggle_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT11() volatile
    {
        RBB_LPSR_ENABLE_SP ^= 1u << 11u;
    }

    /**
     * Get RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline bool get_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        return RBB_LPSR_ENABLE_SP & (1u << 10u);
    }

    /**
     * Set RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline void set_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        RBB_LPSR_ENABLE_SP |= 1u << 10u;
    }

    /**
     * Clear RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline void clear_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        RBB_LPSR_ENABLE_SP &= ~(1u << 10u);
    }

    /**
     * Toggle RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT10 bit.
     *
     * ON_OFF_SETPOINT10
     */
    inline void toggle_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT10() volatile
    {
        RBB_LPSR_ENABLE_SP ^= 1u << 10u;
    }

    /**
     * Get RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline bool get_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        return RBB_LPSR_ENABLE_SP & (1u << 9u);
    }

    /**
     * Set RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline void set_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        RBB_LPSR_ENABLE_SP |= 1u << 9u;
    }

    /**
     * Clear RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline void clear_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        RBB_LPSR_ENABLE_SP &= ~(1u << 9u);
    }

    /**
     * Toggle RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT9 bit.
     *
     * ON_OFF_SETPOINT9
     */
    inline void toggle_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT9() volatile
    {
        RBB_LPSR_ENABLE_SP ^= 1u << 9u;
    }

    /**
     * Get RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline bool get_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        return RBB_LPSR_ENABLE_SP & (1u << 8u);
    }

    /**
     * Set RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline void set_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        RBB_LPSR_ENABLE_SP |= 1u << 8u;
    }

    /**
     * Clear RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline void clear_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        RBB_LPSR_ENABLE_SP &= ~(1u << 8u);
    }

    /**
     * Toggle RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT8 bit.
     *
     * ON_OFF_SETPOINT8
     */
    inline void toggle_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT8() volatile
    {
        RBB_LPSR_ENABLE_SP ^= 1u << 8u;
    }

    /**
     * Get RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline bool get_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        return RBB_LPSR_ENABLE_SP & (1u << 7u);
    }

    /**
     * Set RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline void set_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        RBB_LPSR_ENABLE_SP |= 1u << 7u;
    }

    /**
     * Clear RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline void clear_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        RBB_LPSR_ENABLE_SP &= ~(1u << 7u);
    }

    /**
     * Toggle RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT7 bit.
     *
     * ON_OFF_SETPOINT7
     */
    inline void toggle_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT7() volatile
    {
        RBB_LPSR_ENABLE_SP ^= 1u << 7u;
    }

    /**
     * Get RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline bool get_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        return RBB_LPSR_ENABLE_SP & (1u << 6u);
    }

    /**
     * Set RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline void set_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        RBB_LPSR_ENABLE_SP |= 1u << 6u;
    }

    /**
     * Clear RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline void clear_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        RBB_LPSR_ENABLE_SP &= ~(1u << 6u);
    }

    /**
     * Toggle RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT6 bit.
     *
     * ON_OFF_SETPOINT6
     */
    inline void toggle_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT6() volatile
    {
        RBB_LPSR_ENABLE_SP ^= 1u << 6u;
    }

    /**
     * Get RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline bool get_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        return RBB_LPSR_ENABLE_SP & (1u << 5u);
    }

    /**
     * Set RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void set_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        RBB_LPSR_ENABLE_SP |= 1u << 5u;
    }

    /**
     * Clear RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void clear_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        RBB_LPSR_ENABLE_SP &= ~(1u << 5u);
    }

    /**
     * Toggle RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT5 bit.
     *
     * ON_OFF_SETPOINT5
     */
    inline void toggle_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT5() volatile
    {
        RBB_LPSR_ENABLE_SP ^= 1u << 5u;
    }

    /**
     * Get RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline bool get_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        return RBB_LPSR_ENABLE_SP & (1u << 4u);
    }

    /**
     * Set RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline void set_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        RBB_LPSR_ENABLE_SP |= 1u << 4u;
    }

    /**
     * Clear RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline void clear_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        RBB_LPSR_ENABLE_SP &= ~(1u << 4u);
    }

    /**
     * Toggle RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT4 bit.
     *
     * ON_OFF_SETPOINT4
     */
    inline void toggle_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT4() volatile
    {
        RBB_LPSR_ENABLE_SP ^= 1u << 4u;
    }

    /**
     * Get RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline bool get_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        return RBB_LPSR_ENABLE_SP & (1u << 3u);
    }

    /**
     * Set RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline void set_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        RBB_LPSR_ENABLE_SP |= 1u << 3u;
    }

    /**
     * Clear RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline void clear_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        RBB_LPSR_ENABLE_SP &= ~(1u << 3u);
    }

    /**
     * Toggle RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT3 bit.
     *
     * ON_OFF_SETPOINT3
     */
    inline void toggle_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT3() volatile
    {
        RBB_LPSR_ENABLE_SP ^= 1u << 3u;
    }

    /**
     * Get RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline bool get_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        return RBB_LPSR_ENABLE_SP & (1u << 2u);
    }

    /**
     * Set RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline void set_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        RBB_LPSR_ENABLE_SP |= 1u << 2u;
    }

    /**
     * Clear RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline void clear_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        RBB_LPSR_ENABLE_SP &= ~(1u << 2u);
    }

    /**
     * Toggle RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT2 bit.
     *
     * ON_OFF_SETPOINT2
     */
    inline void toggle_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT2() volatile
    {
        RBB_LPSR_ENABLE_SP ^= 1u << 2u;
    }

    /**
     * Get RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline bool get_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        return RBB_LPSR_ENABLE_SP & (1u << 1u);
    }

    /**
     * Set RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline void set_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        RBB_LPSR_ENABLE_SP |= 1u << 1u;
    }

    /**
     * Clear RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline void clear_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        RBB_LPSR_ENABLE_SP &= ~(1u << 1u);
    }

    /**
     * Toggle RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT1 bit.
     *
     * ON_OFF_SETPOINT1
     */
    inline void toggle_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT1() volatile
    {
        RBB_LPSR_ENABLE_SP ^= 1u << 1u;
    }

    /**
     * Get RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline bool get_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        return RBB_LPSR_ENABLE_SP & (1u << 0u);
    }

    /**
     * Set RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline void set_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        RBB_LPSR_ENABLE_SP |= 1u << 0u;
    }

    /**
     * Clear RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline void clear_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        RBB_LPSR_ENABLE_SP &= ~(1u << 0u);
    }

    /**
     * Toggle RBB_LPSR_ENABLE_SP's ON_OFF_SETPOINT0 bit.
     *
     * ON_OFF_SETPOINT0
     */
    inline void toggle_RBB_LPSR_ENABLE_SP_ON_OFF_SETPOINT0() volatile
    {
        RBB_LPSR_ENABLE_SP ^= 1u << 0u;
    }

    /**
     * Get all of RBB_LPSR_ENABLE_SP's bit fields.
     *
     * (read-write) RBB_LPSR_ENABLE_SP_REGISTER
     */
    inline void get_RBB_LPSR_ENABLE_SP(
        bool &ON_OFF_SETPOINT15, bool &ON_OFF_SETPOINT14,
        bool &ON_OFF_SETPOINT13, bool &ON_OFF_SETPOINT12,
        bool &ON_OFF_SETPOINT11, bool &ON_OFF_SETPOINT10,
        bool &ON_OFF_SETPOINT9, bool &ON_OFF_SETPOINT8, bool &ON_OFF_SETPOINT7,
        bool &ON_OFF_SETPOINT6, bool &ON_OFF_SETPOINT5, bool &ON_OFF_SETPOINT4,
        bool &ON_OFF_SETPOINT3, bool &ON_OFF_SETPOINT2, bool &ON_OFF_SETPOINT1,
        bool &ON_OFF_SETPOINT0) volatile
    {
        uint32_t curr = RBB_LPSR_ENABLE_SP;

        ON_OFF_SETPOINT15 = curr & (1u << 15u);
        ON_OFF_SETPOINT14 = curr & (1u << 14u);
        ON_OFF_SETPOINT13 = curr & (1u << 13u);
        ON_OFF_SETPOINT12 = curr & (1u << 12u);
        ON_OFF_SETPOINT11 = curr & (1u << 11u);
        ON_OFF_SETPOINT10 = curr & (1u << 10u);
        ON_OFF_SETPOINT9 = curr & (1u << 9u);
        ON_OFF_SETPOINT8 = curr & (1u << 8u);
        ON_OFF_SETPOINT7 = curr & (1u << 7u);
        ON_OFF_SETPOINT6 = curr & (1u << 6u);
        ON_OFF_SETPOINT5 = curr & (1u << 5u);
        ON_OFF_SETPOINT4 = curr & (1u << 4u);
        ON_OFF_SETPOINT3 = curr & (1u << 3u);
        ON_OFF_SETPOINT2 = curr & (1u << 2u);
        ON_OFF_SETPOINT1 = curr & (1u << 1u);
        ON_OFF_SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of RBB_LPSR_ENABLE_SP's bit fields.
     *
     * (read-write) RBB_LPSR_ENABLE_SP_REGISTER
     */
    inline void set_RBB_LPSR_ENABLE_SP(
        bool ON_OFF_SETPOINT15, bool ON_OFF_SETPOINT14, bool ON_OFF_SETPOINT13,
        bool ON_OFF_SETPOINT12, bool ON_OFF_SETPOINT11, bool ON_OFF_SETPOINT10,
        bool ON_OFF_SETPOINT9, bool ON_OFF_SETPOINT8, bool ON_OFF_SETPOINT7,
        bool ON_OFF_SETPOINT6, bool ON_OFF_SETPOINT5, bool ON_OFF_SETPOINT4,
        bool ON_OFF_SETPOINT3, bool ON_OFF_SETPOINT2, bool ON_OFF_SETPOINT1,
        bool ON_OFF_SETPOINT0) volatile
    {
        uint32_t curr = RBB_LPSR_ENABLE_SP;

        curr &= ~(0b1u << 15u);
        curr |= (ON_OFF_SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (ON_OFF_SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (ON_OFF_SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (ON_OFF_SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (ON_OFF_SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (ON_OFF_SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (ON_OFF_SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (ON_OFF_SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (ON_OFF_SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (ON_OFF_SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (ON_OFF_SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ON_OFF_SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (ON_OFF_SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (ON_OFF_SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (ON_OFF_SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ON_OFF_SETPOINT0 & 0b1u) << 0u;

        RBB_LPSR_ENABLE_SP = curr;
    }

    /**
     * Get BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline bool get_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        return BANDGAP_STBY_EN_SP & (1u << 15u);
    }

    /**
     * Set BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void set_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        BANDGAP_STBY_EN_SP |= 1u << 15u;
    }

    /**
     * Clear BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void clear_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        BANDGAP_STBY_EN_SP &= ~(1u << 15u);
    }

    /**
     * Toggle BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void toggle_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        BANDGAP_STBY_EN_SP ^= 1u << 15u;
    }

    /**
     * Get BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline bool get_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        return BANDGAP_STBY_EN_SP & (1u << 14u);
    }

    /**
     * Set BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void set_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        BANDGAP_STBY_EN_SP |= 1u << 14u;
    }

    /**
     * Clear BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void clear_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        BANDGAP_STBY_EN_SP &= ~(1u << 14u);
    }

    /**
     * Toggle BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void toggle_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        BANDGAP_STBY_EN_SP ^= 1u << 14u;
    }

    /**
     * Get BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline bool get_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        return BANDGAP_STBY_EN_SP & (1u << 13u);
    }

    /**
     * Set BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void set_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        BANDGAP_STBY_EN_SP |= 1u << 13u;
    }

    /**
     * Clear BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void clear_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        BANDGAP_STBY_EN_SP &= ~(1u << 13u);
    }

    /**
     * Toggle BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void toggle_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        BANDGAP_STBY_EN_SP ^= 1u << 13u;
    }

    /**
     * Get BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline bool get_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        return BANDGAP_STBY_EN_SP & (1u << 12u);
    }

    /**
     * Set BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void set_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        BANDGAP_STBY_EN_SP |= 1u << 12u;
    }

    /**
     * Clear BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void clear_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        BANDGAP_STBY_EN_SP &= ~(1u << 12u);
    }

    /**
     * Toggle BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void toggle_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        BANDGAP_STBY_EN_SP ^= 1u << 12u;
    }

    /**
     * Get BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline bool get_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        return BANDGAP_STBY_EN_SP & (1u << 11u);
    }

    /**
     * Set BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void set_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        BANDGAP_STBY_EN_SP |= 1u << 11u;
    }

    /**
     * Clear BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void clear_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        BANDGAP_STBY_EN_SP &= ~(1u << 11u);
    }

    /**
     * Toggle BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void toggle_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        BANDGAP_STBY_EN_SP ^= 1u << 11u;
    }

    /**
     * Get BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline bool get_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        return BANDGAP_STBY_EN_SP & (1u << 10u);
    }

    /**
     * Set BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void set_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        BANDGAP_STBY_EN_SP |= 1u << 10u;
    }

    /**
     * Clear BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void clear_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        BANDGAP_STBY_EN_SP &= ~(1u << 10u);
    }

    /**
     * Toggle BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void toggle_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        BANDGAP_STBY_EN_SP ^= 1u << 10u;
    }

    /**
     * Get BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline bool get_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        return BANDGAP_STBY_EN_SP & (1u << 9u);
    }

    /**
     * Set BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void set_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        BANDGAP_STBY_EN_SP |= 1u << 9u;
    }

    /**
     * Clear BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void clear_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        BANDGAP_STBY_EN_SP &= ~(1u << 9u);
    }

    /**
     * Toggle BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void toggle_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        BANDGAP_STBY_EN_SP ^= 1u << 9u;
    }

    /**
     * Get BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline bool get_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        return BANDGAP_STBY_EN_SP & (1u << 8u);
    }

    /**
     * Set BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void set_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        BANDGAP_STBY_EN_SP |= 1u << 8u;
    }

    /**
     * Clear BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void clear_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        BANDGAP_STBY_EN_SP &= ~(1u << 8u);
    }

    /**
     * Toggle BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void toggle_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        BANDGAP_STBY_EN_SP ^= 1u << 8u;
    }

    /**
     * Get BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline bool get_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        return BANDGAP_STBY_EN_SP & (1u << 7u);
    }

    /**
     * Set BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void set_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        BANDGAP_STBY_EN_SP |= 1u << 7u;
    }

    /**
     * Clear BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void clear_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        BANDGAP_STBY_EN_SP &= ~(1u << 7u);
    }

    /**
     * Toggle BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void toggle_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        BANDGAP_STBY_EN_SP ^= 1u << 7u;
    }

    /**
     * Get BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline bool get_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        return BANDGAP_STBY_EN_SP & (1u << 6u);
    }

    /**
     * Set BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void set_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        BANDGAP_STBY_EN_SP |= 1u << 6u;
    }

    /**
     * Clear BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void clear_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        BANDGAP_STBY_EN_SP &= ~(1u << 6u);
    }

    /**
     * Toggle BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void toggle_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        BANDGAP_STBY_EN_SP ^= 1u << 6u;
    }

    /**
     * Get BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline bool get_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        return BANDGAP_STBY_EN_SP & (1u << 5u);
    }

    /**
     * Set BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void set_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        BANDGAP_STBY_EN_SP |= 1u << 5u;
    }

    /**
     * Clear BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void clear_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        BANDGAP_STBY_EN_SP &= ~(1u << 5u);
    }

    /**
     * Toggle BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void toggle_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        BANDGAP_STBY_EN_SP ^= 1u << 5u;
    }

    /**
     * Get BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline bool get_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        return BANDGAP_STBY_EN_SP & (1u << 4u);
    }

    /**
     * Set BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void set_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        BANDGAP_STBY_EN_SP |= 1u << 4u;
    }

    /**
     * Clear BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void clear_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        BANDGAP_STBY_EN_SP &= ~(1u << 4u);
    }

    /**
     * Toggle BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void toggle_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        BANDGAP_STBY_EN_SP ^= 1u << 4u;
    }

    /**
     * Get BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline bool get_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        return BANDGAP_STBY_EN_SP & (1u << 3u);
    }

    /**
     * Set BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void set_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        BANDGAP_STBY_EN_SP |= 1u << 3u;
    }

    /**
     * Clear BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void clear_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        BANDGAP_STBY_EN_SP &= ~(1u << 3u);
    }

    /**
     * Toggle BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void toggle_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        BANDGAP_STBY_EN_SP ^= 1u << 3u;
    }

    /**
     * Get BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline bool get_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        return BANDGAP_STBY_EN_SP & (1u << 2u);
    }

    /**
     * Set BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void set_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        BANDGAP_STBY_EN_SP |= 1u << 2u;
    }

    /**
     * Clear BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void clear_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        BANDGAP_STBY_EN_SP &= ~(1u << 2u);
    }

    /**
     * Toggle BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void toggle_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        BANDGAP_STBY_EN_SP ^= 1u << 2u;
    }

    /**
     * Get BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline bool get_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        return BANDGAP_STBY_EN_SP & (1u << 1u);
    }

    /**
     * Set BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void set_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        BANDGAP_STBY_EN_SP |= 1u << 1u;
    }

    /**
     * Clear BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void clear_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        BANDGAP_STBY_EN_SP &= ~(1u << 1u);
    }

    /**
     * Toggle BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void toggle_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        BANDGAP_STBY_EN_SP ^= 1u << 1u;
    }

    /**
     * Get BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline bool get_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        return BANDGAP_STBY_EN_SP & (1u << 0u);
    }

    /**
     * Set BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void set_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        BANDGAP_STBY_EN_SP |= 1u << 0u;
    }

    /**
     * Clear BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void clear_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        BANDGAP_STBY_EN_SP &= ~(1u << 0u);
    }

    /**
     * Toggle BANDGAP_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * STBY_EN_SETPOINT
     */
    inline void toggle_BANDGAP_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        BANDGAP_STBY_EN_SP ^= 1u << 0u;
    }

    /**
     * Get all of BANDGAP_STBY_EN_SP's bit fields.
     *
     * (read-write) BANDGAP_STBY_EN_SP_REGISTER
     */
    inline void get_BANDGAP_STBY_EN_SP(
        bool &STBY_EN_SETPOINT15, bool &STBY_EN_SETPOINT14,
        bool &STBY_EN_SETPOINT13, bool &STBY_EN_SETPOINT12,
        bool &STBY_EN_SETPOINT11, bool &STBY_EN_SETPOINT10,
        bool &STBY_EN_SETPOINT9, bool &STBY_EN_SETPOINT8,
        bool &STBY_EN_SETPOINT7, bool &STBY_EN_SETPOINT6,
        bool &STBY_EN_SETPOINT5, bool &STBY_EN_SETPOINT4,
        bool &STBY_EN_SETPOINT3, bool &STBY_EN_SETPOINT2,
        bool &STBY_EN_SETPOINT1, bool &STBY_EN_SETPOINT0) volatile
    {
        uint32_t curr = BANDGAP_STBY_EN_SP;

        STBY_EN_SETPOINT15 = curr & (1u << 15u);
        STBY_EN_SETPOINT14 = curr & (1u << 14u);
        STBY_EN_SETPOINT13 = curr & (1u << 13u);
        STBY_EN_SETPOINT12 = curr & (1u << 12u);
        STBY_EN_SETPOINT11 = curr & (1u << 11u);
        STBY_EN_SETPOINT10 = curr & (1u << 10u);
        STBY_EN_SETPOINT9 = curr & (1u << 9u);
        STBY_EN_SETPOINT8 = curr & (1u << 8u);
        STBY_EN_SETPOINT7 = curr & (1u << 7u);
        STBY_EN_SETPOINT6 = curr & (1u << 6u);
        STBY_EN_SETPOINT5 = curr & (1u << 5u);
        STBY_EN_SETPOINT4 = curr & (1u << 4u);
        STBY_EN_SETPOINT3 = curr & (1u << 3u);
        STBY_EN_SETPOINT2 = curr & (1u << 2u);
        STBY_EN_SETPOINT1 = curr & (1u << 1u);
        STBY_EN_SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of BANDGAP_STBY_EN_SP's bit fields.
     *
     * (read-write) BANDGAP_STBY_EN_SP_REGISTER
     */
    inline void set_BANDGAP_STBY_EN_SP(
        bool STBY_EN_SETPOINT15, bool STBY_EN_SETPOINT14,
        bool STBY_EN_SETPOINT13, bool STBY_EN_SETPOINT12,
        bool STBY_EN_SETPOINT11, bool STBY_EN_SETPOINT10,
        bool STBY_EN_SETPOINT9, bool STBY_EN_SETPOINT8, bool STBY_EN_SETPOINT7,
        bool STBY_EN_SETPOINT6, bool STBY_EN_SETPOINT5, bool STBY_EN_SETPOINT4,
        bool STBY_EN_SETPOINT3, bool STBY_EN_SETPOINT2, bool STBY_EN_SETPOINT1,
        bool STBY_EN_SETPOINT0) volatile
    {
        uint32_t curr = BANDGAP_STBY_EN_SP;

        curr &= ~(0b1u << 15u);
        curr |= (STBY_EN_SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (STBY_EN_SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (STBY_EN_SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (STBY_EN_SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (STBY_EN_SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (STBY_EN_SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (STBY_EN_SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (STBY_EN_SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (STBY_EN_SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (STBY_EN_SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (STBY_EN_SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (STBY_EN_SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (STBY_EN_SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (STBY_EN_SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (STBY_EN_SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (STBY_EN_SETPOINT0 & 0b1u) << 0u;

        BANDGAP_STBY_EN_SP = curr;
    }

    /**
     * Get PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * Standby mode
     */
    inline bool get_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        return PLL_LDO_STBY_EN_SP & (1u << 15u);
    }

    /**
     * Set PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * Standby mode
     */
    inline void set_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        PLL_LDO_STBY_EN_SP |= 1u << 15u;
    }

    /**
     * Clear PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * Standby mode
     */
    inline void clear_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        PLL_LDO_STBY_EN_SP &= ~(1u << 15u);
    }

    /**
     * Toggle PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * Standby mode
     */
    inline void toggle_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        PLL_LDO_STBY_EN_SP ^= 1u << 15u;
    }

    /**
     * Get PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * Standby mode
     */
    inline bool get_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        return PLL_LDO_STBY_EN_SP & (1u << 14u);
    }

    /**
     * Set PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * Standby mode
     */
    inline void set_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        PLL_LDO_STBY_EN_SP |= 1u << 14u;
    }

    /**
     * Clear PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * Standby mode
     */
    inline void clear_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        PLL_LDO_STBY_EN_SP &= ~(1u << 14u);
    }

    /**
     * Toggle PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * Standby mode
     */
    inline void toggle_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        PLL_LDO_STBY_EN_SP ^= 1u << 14u;
    }

    /**
     * Get PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * Standby mode
     */
    inline bool get_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        return PLL_LDO_STBY_EN_SP & (1u << 13u);
    }

    /**
     * Set PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * Standby mode
     */
    inline void set_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        PLL_LDO_STBY_EN_SP |= 1u << 13u;
    }

    /**
     * Clear PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * Standby mode
     */
    inline void clear_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        PLL_LDO_STBY_EN_SP &= ~(1u << 13u);
    }

    /**
     * Toggle PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * Standby mode
     */
    inline void toggle_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        PLL_LDO_STBY_EN_SP ^= 1u << 13u;
    }

    /**
     * Get PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * Standby mode
     */
    inline bool get_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        return PLL_LDO_STBY_EN_SP & (1u << 12u);
    }

    /**
     * Set PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * Standby mode
     */
    inline void set_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        PLL_LDO_STBY_EN_SP |= 1u << 12u;
    }

    /**
     * Clear PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * Standby mode
     */
    inline void clear_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        PLL_LDO_STBY_EN_SP &= ~(1u << 12u);
    }

    /**
     * Toggle PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * Standby mode
     */
    inline void toggle_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        PLL_LDO_STBY_EN_SP ^= 1u << 12u;
    }

    /**
     * Get PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * Standby mode
     */
    inline bool get_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        return PLL_LDO_STBY_EN_SP & (1u << 11u);
    }

    /**
     * Set PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * Standby mode
     */
    inline void set_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        PLL_LDO_STBY_EN_SP |= 1u << 11u;
    }

    /**
     * Clear PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * Standby mode
     */
    inline void clear_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        PLL_LDO_STBY_EN_SP &= ~(1u << 11u);
    }

    /**
     * Toggle PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * Standby mode
     */
    inline void toggle_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        PLL_LDO_STBY_EN_SP ^= 1u << 11u;
    }

    /**
     * Get PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * Standby mode
     */
    inline bool get_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        return PLL_LDO_STBY_EN_SP & (1u << 10u);
    }

    /**
     * Set PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * Standby mode
     */
    inline void set_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        PLL_LDO_STBY_EN_SP |= 1u << 10u;
    }

    /**
     * Clear PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * Standby mode
     */
    inline void clear_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        PLL_LDO_STBY_EN_SP &= ~(1u << 10u);
    }

    /**
     * Toggle PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * Standby mode
     */
    inline void toggle_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        PLL_LDO_STBY_EN_SP ^= 1u << 10u;
    }

    /**
     * Get PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * Standby mode
     */
    inline bool get_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        return PLL_LDO_STBY_EN_SP & (1u << 9u);
    }

    /**
     * Set PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * Standby mode
     */
    inline void set_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        PLL_LDO_STBY_EN_SP |= 1u << 9u;
    }

    /**
     * Clear PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * Standby mode
     */
    inline void clear_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        PLL_LDO_STBY_EN_SP &= ~(1u << 9u);
    }

    /**
     * Toggle PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * Standby mode
     */
    inline void toggle_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        PLL_LDO_STBY_EN_SP ^= 1u << 9u;
    }

    /**
     * Get PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * Standby mode
     */
    inline bool get_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        return PLL_LDO_STBY_EN_SP & (1u << 8u);
    }

    /**
     * Set PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * Standby mode
     */
    inline void set_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        PLL_LDO_STBY_EN_SP |= 1u << 8u;
    }

    /**
     * Clear PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * Standby mode
     */
    inline void clear_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        PLL_LDO_STBY_EN_SP &= ~(1u << 8u);
    }

    /**
     * Toggle PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * Standby mode
     */
    inline void toggle_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        PLL_LDO_STBY_EN_SP ^= 1u << 8u;
    }

    /**
     * Get PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * Standby mode
     */
    inline bool get_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        return PLL_LDO_STBY_EN_SP & (1u << 7u);
    }

    /**
     * Set PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * Standby mode
     */
    inline void set_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        PLL_LDO_STBY_EN_SP |= 1u << 7u;
    }

    /**
     * Clear PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * Standby mode
     */
    inline void clear_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        PLL_LDO_STBY_EN_SP &= ~(1u << 7u);
    }

    /**
     * Toggle PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * Standby mode
     */
    inline void toggle_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        PLL_LDO_STBY_EN_SP ^= 1u << 7u;
    }

    /**
     * Get PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * Standby mode
     */
    inline bool get_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        return PLL_LDO_STBY_EN_SP & (1u << 6u);
    }

    /**
     * Set PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * Standby mode
     */
    inline void set_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        PLL_LDO_STBY_EN_SP |= 1u << 6u;
    }

    /**
     * Clear PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * Standby mode
     */
    inline void clear_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        PLL_LDO_STBY_EN_SP &= ~(1u << 6u);
    }

    /**
     * Toggle PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * Standby mode
     */
    inline void toggle_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        PLL_LDO_STBY_EN_SP ^= 1u << 6u;
    }

    /**
     * Get PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * Standby mode
     */
    inline bool get_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        return PLL_LDO_STBY_EN_SP & (1u << 5u);
    }

    /**
     * Set PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * Standby mode
     */
    inline void set_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        PLL_LDO_STBY_EN_SP |= 1u << 5u;
    }

    /**
     * Clear PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * Standby mode
     */
    inline void clear_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        PLL_LDO_STBY_EN_SP &= ~(1u << 5u);
    }

    /**
     * Toggle PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * Standby mode
     */
    inline void toggle_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        PLL_LDO_STBY_EN_SP ^= 1u << 5u;
    }

    /**
     * Get PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * Standby mode
     */
    inline bool get_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        return PLL_LDO_STBY_EN_SP & (1u << 4u);
    }

    /**
     * Set PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * Standby mode
     */
    inline void set_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        PLL_LDO_STBY_EN_SP |= 1u << 4u;
    }

    /**
     * Clear PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * Standby mode
     */
    inline void clear_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        PLL_LDO_STBY_EN_SP &= ~(1u << 4u);
    }

    /**
     * Toggle PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * Standby mode
     */
    inline void toggle_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        PLL_LDO_STBY_EN_SP ^= 1u << 4u;
    }

    /**
     * Get PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * Standby mode
     */
    inline bool get_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        return PLL_LDO_STBY_EN_SP & (1u << 3u);
    }

    /**
     * Set PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * Standby mode
     */
    inline void set_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        PLL_LDO_STBY_EN_SP |= 1u << 3u;
    }

    /**
     * Clear PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * Standby mode
     */
    inline void clear_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        PLL_LDO_STBY_EN_SP &= ~(1u << 3u);
    }

    /**
     * Toggle PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * Standby mode
     */
    inline void toggle_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        PLL_LDO_STBY_EN_SP ^= 1u << 3u;
    }

    /**
     * Get PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * Standby mode
     */
    inline bool get_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        return PLL_LDO_STBY_EN_SP & (1u << 2u);
    }

    /**
     * Set PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * Standby mode
     */
    inline void set_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        PLL_LDO_STBY_EN_SP |= 1u << 2u;
    }

    /**
     * Clear PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * Standby mode
     */
    inline void clear_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        PLL_LDO_STBY_EN_SP &= ~(1u << 2u);
    }

    /**
     * Toggle PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * Standby mode
     */
    inline void toggle_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        PLL_LDO_STBY_EN_SP ^= 1u << 2u;
    }

    /**
     * Get PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * Standby mode
     */
    inline bool get_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        return PLL_LDO_STBY_EN_SP & (1u << 1u);
    }

    /**
     * Set PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * Standby mode
     */
    inline void set_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        PLL_LDO_STBY_EN_SP |= 1u << 1u;
    }

    /**
     * Clear PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * Standby mode
     */
    inline void clear_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        PLL_LDO_STBY_EN_SP &= ~(1u << 1u);
    }

    /**
     * Toggle PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * Standby mode
     */
    inline void toggle_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        PLL_LDO_STBY_EN_SP ^= 1u << 1u;
    }

    /**
     * Get PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * Standby mode
     */
    inline bool get_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        return PLL_LDO_STBY_EN_SP & (1u << 0u);
    }

    /**
     * Set PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * Standby mode
     */
    inline void set_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        PLL_LDO_STBY_EN_SP |= 1u << 0u;
    }

    /**
     * Clear PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * Standby mode
     */
    inline void clear_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        PLL_LDO_STBY_EN_SP &= ~(1u << 0u);
    }

    /**
     * Toggle PLL_LDO_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * Standby mode
     */
    inline void toggle_PLL_LDO_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        PLL_LDO_STBY_EN_SP ^= 1u << 0u;
    }

    /**
     * Get all of PLL_LDO_STBY_EN_SP's bit fields.
     *
     * (read-write) PLL_LDO_STBY_EN_SP_REGISTER
     */
    inline void get_PLL_LDO_STBY_EN_SP(
        bool &STBY_EN_SETPOINT15, bool &STBY_EN_SETPOINT14,
        bool &STBY_EN_SETPOINT13, bool &STBY_EN_SETPOINT12,
        bool &STBY_EN_SETPOINT11, bool &STBY_EN_SETPOINT10,
        bool &STBY_EN_SETPOINT9, bool &STBY_EN_SETPOINT8,
        bool &STBY_EN_SETPOINT7, bool &STBY_EN_SETPOINT6,
        bool &STBY_EN_SETPOINT5, bool &STBY_EN_SETPOINT4,
        bool &STBY_EN_SETPOINT3, bool &STBY_EN_SETPOINT2,
        bool &STBY_EN_SETPOINT1, bool &STBY_EN_SETPOINT0) volatile
    {
        uint32_t curr = PLL_LDO_STBY_EN_SP;

        STBY_EN_SETPOINT15 = curr & (1u << 15u);
        STBY_EN_SETPOINT14 = curr & (1u << 14u);
        STBY_EN_SETPOINT13 = curr & (1u << 13u);
        STBY_EN_SETPOINT12 = curr & (1u << 12u);
        STBY_EN_SETPOINT11 = curr & (1u << 11u);
        STBY_EN_SETPOINT10 = curr & (1u << 10u);
        STBY_EN_SETPOINT9 = curr & (1u << 9u);
        STBY_EN_SETPOINT8 = curr & (1u << 8u);
        STBY_EN_SETPOINT7 = curr & (1u << 7u);
        STBY_EN_SETPOINT6 = curr & (1u << 6u);
        STBY_EN_SETPOINT5 = curr & (1u << 5u);
        STBY_EN_SETPOINT4 = curr & (1u << 4u);
        STBY_EN_SETPOINT3 = curr & (1u << 3u);
        STBY_EN_SETPOINT2 = curr & (1u << 2u);
        STBY_EN_SETPOINT1 = curr & (1u << 1u);
        STBY_EN_SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of PLL_LDO_STBY_EN_SP's bit fields.
     *
     * (read-write) PLL_LDO_STBY_EN_SP_REGISTER
     */
    inline void set_PLL_LDO_STBY_EN_SP(
        bool STBY_EN_SETPOINT15, bool STBY_EN_SETPOINT14,
        bool STBY_EN_SETPOINT13, bool STBY_EN_SETPOINT12,
        bool STBY_EN_SETPOINT11, bool STBY_EN_SETPOINT10,
        bool STBY_EN_SETPOINT9, bool STBY_EN_SETPOINT8, bool STBY_EN_SETPOINT7,
        bool STBY_EN_SETPOINT6, bool STBY_EN_SETPOINT5, bool STBY_EN_SETPOINT4,
        bool STBY_EN_SETPOINT3, bool STBY_EN_SETPOINT2, bool STBY_EN_SETPOINT1,
        bool STBY_EN_SETPOINT0) volatile
    {
        uint32_t curr = PLL_LDO_STBY_EN_SP;

        curr &= ~(0b1u << 15u);
        curr |= (STBY_EN_SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (STBY_EN_SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (STBY_EN_SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (STBY_EN_SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (STBY_EN_SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (STBY_EN_SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (STBY_EN_SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (STBY_EN_SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (STBY_EN_SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (STBY_EN_SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (STBY_EN_SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (STBY_EN_SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (STBY_EN_SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (STBY_EN_SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (STBY_EN_SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (STBY_EN_SETPOINT0 & 0b1u) << 0u;

        PLL_LDO_STBY_EN_SP = curr;
    }

    /**
     * Get FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * Standby mode
     */
    inline bool get_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        return FBB_M7_STBY_EN_SP & (1u << 15u);
    }

    /**
     * Set FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * Standby mode
     */
    inline void set_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        FBB_M7_STBY_EN_SP |= 1u << 15u;
    }

    /**
     * Clear FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * Standby mode
     */
    inline void clear_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        FBB_M7_STBY_EN_SP &= ~(1u << 15u);
    }

    /**
     * Toggle FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * Standby mode
     */
    inline void toggle_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        FBB_M7_STBY_EN_SP ^= 1u << 15u;
    }

    /**
     * Get FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * Standby mode
     */
    inline bool get_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        return FBB_M7_STBY_EN_SP & (1u << 14u);
    }

    /**
     * Set FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * Standby mode
     */
    inline void set_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        FBB_M7_STBY_EN_SP |= 1u << 14u;
    }

    /**
     * Clear FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * Standby mode
     */
    inline void clear_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        FBB_M7_STBY_EN_SP &= ~(1u << 14u);
    }

    /**
     * Toggle FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * Standby mode
     */
    inline void toggle_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        FBB_M7_STBY_EN_SP ^= 1u << 14u;
    }

    /**
     * Get FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * Standby mode
     */
    inline bool get_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        return FBB_M7_STBY_EN_SP & (1u << 13u);
    }

    /**
     * Set FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * Standby mode
     */
    inline void set_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        FBB_M7_STBY_EN_SP |= 1u << 13u;
    }

    /**
     * Clear FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * Standby mode
     */
    inline void clear_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        FBB_M7_STBY_EN_SP &= ~(1u << 13u);
    }

    /**
     * Toggle FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * Standby mode
     */
    inline void toggle_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        FBB_M7_STBY_EN_SP ^= 1u << 13u;
    }

    /**
     * Get FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * Standby mode
     */
    inline bool get_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        return FBB_M7_STBY_EN_SP & (1u << 12u);
    }

    /**
     * Set FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * Standby mode
     */
    inline void set_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        FBB_M7_STBY_EN_SP |= 1u << 12u;
    }

    /**
     * Clear FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * Standby mode
     */
    inline void clear_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        FBB_M7_STBY_EN_SP &= ~(1u << 12u);
    }

    /**
     * Toggle FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * Standby mode
     */
    inline void toggle_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        FBB_M7_STBY_EN_SP ^= 1u << 12u;
    }

    /**
     * Get FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * Standby mode
     */
    inline bool get_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        return FBB_M7_STBY_EN_SP & (1u << 11u);
    }

    /**
     * Set FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * Standby mode
     */
    inline void set_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        FBB_M7_STBY_EN_SP |= 1u << 11u;
    }

    /**
     * Clear FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * Standby mode
     */
    inline void clear_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        FBB_M7_STBY_EN_SP &= ~(1u << 11u);
    }

    /**
     * Toggle FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * Standby mode
     */
    inline void toggle_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        FBB_M7_STBY_EN_SP ^= 1u << 11u;
    }

    /**
     * Get FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * Standby mode
     */
    inline bool get_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        return FBB_M7_STBY_EN_SP & (1u << 10u);
    }

    /**
     * Set FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * Standby mode
     */
    inline void set_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        FBB_M7_STBY_EN_SP |= 1u << 10u;
    }

    /**
     * Clear FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * Standby mode
     */
    inline void clear_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        FBB_M7_STBY_EN_SP &= ~(1u << 10u);
    }

    /**
     * Toggle FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * Standby mode
     */
    inline void toggle_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        FBB_M7_STBY_EN_SP ^= 1u << 10u;
    }

    /**
     * Get FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * Standby mode
     */
    inline bool get_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        return FBB_M7_STBY_EN_SP & (1u << 9u);
    }

    /**
     * Set FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * Standby mode
     */
    inline void set_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        FBB_M7_STBY_EN_SP |= 1u << 9u;
    }

    /**
     * Clear FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * Standby mode
     */
    inline void clear_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        FBB_M7_STBY_EN_SP &= ~(1u << 9u);
    }

    /**
     * Toggle FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * Standby mode
     */
    inline void toggle_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        FBB_M7_STBY_EN_SP ^= 1u << 9u;
    }

    /**
     * Get FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * Standby mode
     */
    inline bool get_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        return FBB_M7_STBY_EN_SP & (1u << 8u);
    }

    /**
     * Set FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * Standby mode
     */
    inline void set_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        FBB_M7_STBY_EN_SP |= 1u << 8u;
    }

    /**
     * Clear FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * Standby mode
     */
    inline void clear_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        FBB_M7_STBY_EN_SP &= ~(1u << 8u);
    }

    /**
     * Toggle FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * Standby mode
     */
    inline void toggle_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        FBB_M7_STBY_EN_SP ^= 1u << 8u;
    }

    /**
     * Get FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * Standby mode
     */
    inline bool get_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        return FBB_M7_STBY_EN_SP & (1u << 7u);
    }

    /**
     * Set FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * Standby mode
     */
    inline void set_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        FBB_M7_STBY_EN_SP |= 1u << 7u;
    }

    /**
     * Clear FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * Standby mode
     */
    inline void clear_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        FBB_M7_STBY_EN_SP &= ~(1u << 7u);
    }

    /**
     * Toggle FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * Standby mode
     */
    inline void toggle_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        FBB_M7_STBY_EN_SP ^= 1u << 7u;
    }

    /**
     * Get FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * Standby mode
     */
    inline bool get_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        return FBB_M7_STBY_EN_SP & (1u << 6u);
    }

    /**
     * Set FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * Standby mode
     */
    inline void set_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        FBB_M7_STBY_EN_SP |= 1u << 6u;
    }

    /**
     * Clear FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * Standby mode
     */
    inline void clear_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        FBB_M7_STBY_EN_SP &= ~(1u << 6u);
    }

    /**
     * Toggle FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * Standby mode
     */
    inline void toggle_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        FBB_M7_STBY_EN_SP ^= 1u << 6u;
    }

    /**
     * Get FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * Standby mode
     */
    inline bool get_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        return FBB_M7_STBY_EN_SP & (1u << 5u);
    }

    /**
     * Set FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * Standby mode
     */
    inline void set_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        FBB_M7_STBY_EN_SP |= 1u << 5u;
    }

    /**
     * Clear FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * Standby mode
     */
    inline void clear_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        FBB_M7_STBY_EN_SP &= ~(1u << 5u);
    }

    /**
     * Toggle FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * Standby mode
     */
    inline void toggle_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        FBB_M7_STBY_EN_SP ^= 1u << 5u;
    }

    /**
     * Get FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * Standby mode
     */
    inline bool get_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        return FBB_M7_STBY_EN_SP & (1u << 4u);
    }

    /**
     * Set FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * Standby mode
     */
    inline void set_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        FBB_M7_STBY_EN_SP |= 1u << 4u;
    }

    /**
     * Clear FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * Standby mode
     */
    inline void clear_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        FBB_M7_STBY_EN_SP &= ~(1u << 4u);
    }

    /**
     * Toggle FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * Standby mode
     */
    inline void toggle_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        FBB_M7_STBY_EN_SP ^= 1u << 4u;
    }

    /**
     * Get FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * Standby mode
     */
    inline bool get_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        return FBB_M7_STBY_EN_SP & (1u << 3u);
    }

    /**
     * Set FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * Standby mode
     */
    inline void set_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        FBB_M7_STBY_EN_SP |= 1u << 3u;
    }

    /**
     * Clear FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * Standby mode
     */
    inline void clear_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        FBB_M7_STBY_EN_SP &= ~(1u << 3u);
    }

    /**
     * Toggle FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * Standby mode
     */
    inline void toggle_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        FBB_M7_STBY_EN_SP ^= 1u << 3u;
    }

    /**
     * Get FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * Standby mode
     */
    inline bool get_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        return FBB_M7_STBY_EN_SP & (1u << 2u);
    }

    /**
     * Set FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * Standby mode
     */
    inline void set_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        FBB_M7_STBY_EN_SP |= 1u << 2u;
    }

    /**
     * Clear FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * Standby mode
     */
    inline void clear_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        FBB_M7_STBY_EN_SP &= ~(1u << 2u);
    }

    /**
     * Toggle FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * Standby mode
     */
    inline void toggle_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        FBB_M7_STBY_EN_SP ^= 1u << 2u;
    }

    /**
     * Get FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * Standby mode
     */
    inline bool get_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        return FBB_M7_STBY_EN_SP & (1u << 1u);
    }

    /**
     * Set FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * Standby mode
     */
    inline void set_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        FBB_M7_STBY_EN_SP |= 1u << 1u;
    }

    /**
     * Clear FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * Standby mode
     */
    inline void clear_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        FBB_M7_STBY_EN_SP &= ~(1u << 1u);
    }

    /**
     * Toggle FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * Standby mode
     */
    inline void toggle_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        FBB_M7_STBY_EN_SP ^= 1u << 1u;
    }

    /**
     * Get FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * Standby mode
     */
    inline bool get_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        return FBB_M7_STBY_EN_SP & (1u << 0u);
    }

    /**
     * Set FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * Standby mode
     */
    inline void set_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        FBB_M7_STBY_EN_SP |= 1u << 0u;
    }

    /**
     * Clear FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * Standby mode
     */
    inline void clear_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        FBB_M7_STBY_EN_SP &= ~(1u << 0u);
    }

    /**
     * Toggle FBB_M7_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * Standby mode
     */
    inline void toggle_FBB_M7_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        FBB_M7_STBY_EN_SP ^= 1u << 0u;
    }

    /**
     * Get all of FBB_M7_STBY_EN_SP's bit fields.
     *
     * (read-write) FBB_M7_STBY_EN_SP_REGISTER
     */
    inline void get_FBB_M7_STBY_EN_SP(
        bool &STBY_EN_SETPOINT15, bool &STBY_EN_SETPOINT14,
        bool &STBY_EN_SETPOINT13, bool &STBY_EN_SETPOINT12,
        bool &STBY_EN_SETPOINT11, bool &STBY_EN_SETPOINT10,
        bool &STBY_EN_SETPOINT9, bool &STBY_EN_SETPOINT8,
        bool &STBY_EN_SETPOINT7, bool &STBY_EN_SETPOINT6,
        bool &STBY_EN_SETPOINT5, bool &STBY_EN_SETPOINT4,
        bool &STBY_EN_SETPOINT3, bool &STBY_EN_SETPOINT2,
        bool &STBY_EN_SETPOINT1, bool &STBY_EN_SETPOINT0) volatile
    {
        uint32_t curr = FBB_M7_STBY_EN_SP;

        STBY_EN_SETPOINT15 = curr & (1u << 15u);
        STBY_EN_SETPOINT14 = curr & (1u << 14u);
        STBY_EN_SETPOINT13 = curr & (1u << 13u);
        STBY_EN_SETPOINT12 = curr & (1u << 12u);
        STBY_EN_SETPOINT11 = curr & (1u << 11u);
        STBY_EN_SETPOINT10 = curr & (1u << 10u);
        STBY_EN_SETPOINT9 = curr & (1u << 9u);
        STBY_EN_SETPOINT8 = curr & (1u << 8u);
        STBY_EN_SETPOINT7 = curr & (1u << 7u);
        STBY_EN_SETPOINT6 = curr & (1u << 6u);
        STBY_EN_SETPOINT5 = curr & (1u << 5u);
        STBY_EN_SETPOINT4 = curr & (1u << 4u);
        STBY_EN_SETPOINT3 = curr & (1u << 3u);
        STBY_EN_SETPOINT2 = curr & (1u << 2u);
        STBY_EN_SETPOINT1 = curr & (1u << 1u);
        STBY_EN_SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of FBB_M7_STBY_EN_SP's bit fields.
     *
     * (read-write) FBB_M7_STBY_EN_SP_REGISTER
     */
    inline void set_FBB_M7_STBY_EN_SP(
        bool STBY_EN_SETPOINT15, bool STBY_EN_SETPOINT14,
        bool STBY_EN_SETPOINT13, bool STBY_EN_SETPOINT12,
        bool STBY_EN_SETPOINT11, bool STBY_EN_SETPOINT10,
        bool STBY_EN_SETPOINT9, bool STBY_EN_SETPOINT8, bool STBY_EN_SETPOINT7,
        bool STBY_EN_SETPOINT6, bool STBY_EN_SETPOINT5, bool STBY_EN_SETPOINT4,
        bool STBY_EN_SETPOINT3, bool STBY_EN_SETPOINT2, bool STBY_EN_SETPOINT1,
        bool STBY_EN_SETPOINT0) volatile
    {
        uint32_t curr = FBB_M7_STBY_EN_SP;

        curr &= ~(0b1u << 15u);
        curr |= (STBY_EN_SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (STBY_EN_SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (STBY_EN_SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (STBY_EN_SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (STBY_EN_SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (STBY_EN_SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (STBY_EN_SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (STBY_EN_SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (STBY_EN_SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (STBY_EN_SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (STBY_EN_SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (STBY_EN_SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (STBY_EN_SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (STBY_EN_SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (STBY_EN_SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (STBY_EN_SETPOINT0 & 0b1u) << 0u;

        FBB_M7_STBY_EN_SP = curr;
    }

    /**
     * Get RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        return RBB_SOC_STBY_EN_SP & (1u << 15u);
    }

    /**
     * Set RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * Standby mode
     */
    inline void set_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        RBB_SOC_STBY_EN_SP |= 1u << 15u;
    }

    /**
     * Clear RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        RBB_SOC_STBY_EN_SP &= ~(1u << 15u);
    }

    /**
     * Toggle RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        RBB_SOC_STBY_EN_SP ^= 1u << 15u;
    }

    /**
     * Get RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        return RBB_SOC_STBY_EN_SP & (1u << 14u);
    }

    /**
     * Set RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * Standby mode
     */
    inline void set_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        RBB_SOC_STBY_EN_SP |= 1u << 14u;
    }

    /**
     * Clear RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        RBB_SOC_STBY_EN_SP &= ~(1u << 14u);
    }

    /**
     * Toggle RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        RBB_SOC_STBY_EN_SP ^= 1u << 14u;
    }

    /**
     * Get RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        return RBB_SOC_STBY_EN_SP & (1u << 13u);
    }

    /**
     * Set RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * Standby mode
     */
    inline void set_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        RBB_SOC_STBY_EN_SP |= 1u << 13u;
    }

    /**
     * Clear RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        RBB_SOC_STBY_EN_SP &= ~(1u << 13u);
    }

    /**
     * Toggle RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        RBB_SOC_STBY_EN_SP ^= 1u << 13u;
    }

    /**
     * Get RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        return RBB_SOC_STBY_EN_SP & (1u << 12u);
    }

    /**
     * Set RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * Standby mode
     */
    inline void set_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        RBB_SOC_STBY_EN_SP |= 1u << 12u;
    }

    /**
     * Clear RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        RBB_SOC_STBY_EN_SP &= ~(1u << 12u);
    }

    /**
     * Toggle RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        RBB_SOC_STBY_EN_SP ^= 1u << 12u;
    }

    /**
     * Get RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        return RBB_SOC_STBY_EN_SP & (1u << 11u);
    }

    /**
     * Set RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * Standby mode
     */
    inline void set_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        RBB_SOC_STBY_EN_SP |= 1u << 11u;
    }

    /**
     * Clear RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        RBB_SOC_STBY_EN_SP &= ~(1u << 11u);
    }

    /**
     * Toggle RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        RBB_SOC_STBY_EN_SP ^= 1u << 11u;
    }

    /**
     * Get RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        return RBB_SOC_STBY_EN_SP & (1u << 10u);
    }

    /**
     * Set RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * Standby mode
     */
    inline void set_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        RBB_SOC_STBY_EN_SP |= 1u << 10u;
    }

    /**
     * Clear RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        RBB_SOC_STBY_EN_SP &= ~(1u << 10u);
    }

    /**
     * Toggle RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        RBB_SOC_STBY_EN_SP ^= 1u << 10u;
    }

    /**
     * Get RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        return RBB_SOC_STBY_EN_SP & (1u << 9u);
    }

    /**
     * Set RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * Standby mode
     */
    inline void set_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        RBB_SOC_STBY_EN_SP |= 1u << 9u;
    }

    /**
     * Clear RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        RBB_SOC_STBY_EN_SP &= ~(1u << 9u);
    }

    /**
     * Toggle RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        RBB_SOC_STBY_EN_SP ^= 1u << 9u;
    }

    /**
     * Get RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        return RBB_SOC_STBY_EN_SP & (1u << 8u);
    }

    /**
     * Set RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * Standby mode
     */
    inline void set_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        RBB_SOC_STBY_EN_SP |= 1u << 8u;
    }

    /**
     * Clear RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        RBB_SOC_STBY_EN_SP &= ~(1u << 8u);
    }

    /**
     * Toggle RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        RBB_SOC_STBY_EN_SP ^= 1u << 8u;
    }

    /**
     * Get RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        return RBB_SOC_STBY_EN_SP & (1u << 7u);
    }

    /**
     * Set RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * Standby mode
     */
    inline void set_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        RBB_SOC_STBY_EN_SP |= 1u << 7u;
    }

    /**
     * Clear RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        RBB_SOC_STBY_EN_SP &= ~(1u << 7u);
    }

    /**
     * Toggle RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        RBB_SOC_STBY_EN_SP ^= 1u << 7u;
    }

    /**
     * Get RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        return RBB_SOC_STBY_EN_SP & (1u << 6u);
    }

    /**
     * Set RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * Standby mode
     */
    inline void set_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        RBB_SOC_STBY_EN_SP |= 1u << 6u;
    }

    /**
     * Clear RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        RBB_SOC_STBY_EN_SP &= ~(1u << 6u);
    }

    /**
     * Toggle RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        RBB_SOC_STBY_EN_SP ^= 1u << 6u;
    }

    /**
     * Get RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        return RBB_SOC_STBY_EN_SP & (1u << 5u);
    }

    /**
     * Set RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * Standby mode
     */
    inline void set_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        RBB_SOC_STBY_EN_SP |= 1u << 5u;
    }

    /**
     * Clear RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        RBB_SOC_STBY_EN_SP &= ~(1u << 5u);
    }

    /**
     * Toggle RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        RBB_SOC_STBY_EN_SP ^= 1u << 5u;
    }

    /**
     * Get RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        return RBB_SOC_STBY_EN_SP & (1u << 4u);
    }

    /**
     * Set RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * Standby mode
     */
    inline void set_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        RBB_SOC_STBY_EN_SP |= 1u << 4u;
    }

    /**
     * Clear RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        RBB_SOC_STBY_EN_SP &= ~(1u << 4u);
    }

    /**
     * Toggle RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        RBB_SOC_STBY_EN_SP ^= 1u << 4u;
    }

    /**
     * Get RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        return RBB_SOC_STBY_EN_SP & (1u << 3u);
    }

    /**
     * Set RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * Standby mode
     */
    inline void set_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        RBB_SOC_STBY_EN_SP |= 1u << 3u;
    }

    /**
     * Clear RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        RBB_SOC_STBY_EN_SP &= ~(1u << 3u);
    }

    /**
     * Toggle RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        RBB_SOC_STBY_EN_SP ^= 1u << 3u;
    }

    /**
     * Get RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        return RBB_SOC_STBY_EN_SP & (1u << 2u);
    }

    /**
     * Set RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * Standby mode
     */
    inline void set_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        RBB_SOC_STBY_EN_SP |= 1u << 2u;
    }

    /**
     * Clear RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        RBB_SOC_STBY_EN_SP &= ~(1u << 2u);
    }

    /**
     * Toggle RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        RBB_SOC_STBY_EN_SP ^= 1u << 2u;
    }

    /**
     * Get RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        return RBB_SOC_STBY_EN_SP & (1u << 1u);
    }

    /**
     * Set RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * Standby mode
     */
    inline void set_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        RBB_SOC_STBY_EN_SP |= 1u << 1u;
    }

    /**
     * Clear RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        RBB_SOC_STBY_EN_SP &= ~(1u << 1u);
    }

    /**
     * Toggle RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        RBB_SOC_STBY_EN_SP ^= 1u << 1u;
    }

    /**
     * Get RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        return RBB_SOC_STBY_EN_SP & (1u << 0u);
    }

    /**
     * Set RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * Standby mode
     */
    inline void set_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        RBB_SOC_STBY_EN_SP |= 1u << 0u;
    }

    /**
     * Clear RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        RBB_SOC_STBY_EN_SP &= ~(1u << 0u);
    }

    /**
     * Toggle RBB_SOC_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_SOC_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        RBB_SOC_STBY_EN_SP ^= 1u << 0u;
    }

    /**
     * Get all of RBB_SOC_STBY_EN_SP's bit fields.
     *
     * (read-write) RBB_SOC_STBY_EN_SP_REGISTER
     */
    inline void get_RBB_SOC_STBY_EN_SP(
        bool &STBY_EN_SETPOINT15, bool &STBY_EN_SETPOINT14,
        bool &STBY_EN_SETPOINT13, bool &STBY_EN_SETPOINT12,
        bool &STBY_EN_SETPOINT11, bool &STBY_EN_SETPOINT10,
        bool &STBY_EN_SETPOINT9, bool &STBY_EN_SETPOINT8,
        bool &STBY_EN_SETPOINT7, bool &STBY_EN_SETPOINT6,
        bool &STBY_EN_SETPOINT5, bool &STBY_EN_SETPOINT4,
        bool &STBY_EN_SETPOINT3, bool &STBY_EN_SETPOINT2,
        bool &STBY_EN_SETPOINT1, bool &STBY_EN_SETPOINT0) volatile
    {
        uint32_t curr = RBB_SOC_STBY_EN_SP;

        STBY_EN_SETPOINT15 = curr & (1u << 15u);
        STBY_EN_SETPOINT14 = curr & (1u << 14u);
        STBY_EN_SETPOINT13 = curr & (1u << 13u);
        STBY_EN_SETPOINT12 = curr & (1u << 12u);
        STBY_EN_SETPOINT11 = curr & (1u << 11u);
        STBY_EN_SETPOINT10 = curr & (1u << 10u);
        STBY_EN_SETPOINT9 = curr & (1u << 9u);
        STBY_EN_SETPOINT8 = curr & (1u << 8u);
        STBY_EN_SETPOINT7 = curr & (1u << 7u);
        STBY_EN_SETPOINT6 = curr & (1u << 6u);
        STBY_EN_SETPOINT5 = curr & (1u << 5u);
        STBY_EN_SETPOINT4 = curr & (1u << 4u);
        STBY_EN_SETPOINT3 = curr & (1u << 3u);
        STBY_EN_SETPOINT2 = curr & (1u << 2u);
        STBY_EN_SETPOINT1 = curr & (1u << 1u);
        STBY_EN_SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of RBB_SOC_STBY_EN_SP's bit fields.
     *
     * (read-write) RBB_SOC_STBY_EN_SP_REGISTER
     */
    inline void set_RBB_SOC_STBY_EN_SP(
        bool STBY_EN_SETPOINT15, bool STBY_EN_SETPOINT14,
        bool STBY_EN_SETPOINT13, bool STBY_EN_SETPOINT12,
        bool STBY_EN_SETPOINT11, bool STBY_EN_SETPOINT10,
        bool STBY_EN_SETPOINT9, bool STBY_EN_SETPOINT8, bool STBY_EN_SETPOINT7,
        bool STBY_EN_SETPOINT6, bool STBY_EN_SETPOINT5, bool STBY_EN_SETPOINT4,
        bool STBY_EN_SETPOINT3, bool STBY_EN_SETPOINT2, bool STBY_EN_SETPOINT1,
        bool STBY_EN_SETPOINT0) volatile
    {
        uint32_t curr = RBB_SOC_STBY_EN_SP;

        curr &= ~(0b1u << 15u);
        curr |= (STBY_EN_SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (STBY_EN_SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (STBY_EN_SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (STBY_EN_SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (STBY_EN_SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (STBY_EN_SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (STBY_EN_SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (STBY_EN_SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (STBY_EN_SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (STBY_EN_SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (STBY_EN_SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (STBY_EN_SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (STBY_EN_SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (STBY_EN_SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (STBY_EN_SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (STBY_EN_SETPOINT0 & 0b1u) << 0u;

        RBB_SOC_STBY_EN_SP = curr;
    }

    /**
     * Get RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        return RBB_LPSR_STBY_EN_SP & (1u << 15u);
    }

    /**
     * Set RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * Standby mode
     */
    inline void set_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        RBB_LPSR_STBY_EN_SP |= 1u << 15u;
    }

    /**
     * Clear RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        RBB_LPSR_STBY_EN_SP &= ~(1u << 15u);
    }

    /**
     * Toggle RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT15 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT15() volatile
    {
        RBB_LPSR_STBY_EN_SP ^= 1u << 15u;
    }

    /**
     * Get RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        return RBB_LPSR_STBY_EN_SP & (1u << 14u);
    }

    /**
     * Set RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * Standby mode
     */
    inline void set_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        RBB_LPSR_STBY_EN_SP |= 1u << 14u;
    }

    /**
     * Clear RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        RBB_LPSR_STBY_EN_SP &= ~(1u << 14u);
    }

    /**
     * Toggle RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT14 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT14() volatile
    {
        RBB_LPSR_STBY_EN_SP ^= 1u << 14u;
    }

    /**
     * Get RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        return RBB_LPSR_STBY_EN_SP & (1u << 13u);
    }

    /**
     * Set RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * Standby mode
     */
    inline void set_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        RBB_LPSR_STBY_EN_SP |= 1u << 13u;
    }

    /**
     * Clear RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        RBB_LPSR_STBY_EN_SP &= ~(1u << 13u);
    }

    /**
     * Toggle RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT13 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT13() volatile
    {
        RBB_LPSR_STBY_EN_SP ^= 1u << 13u;
    }

    /**
     * Get RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        return RBB_LPSR_STBY_EN_SP & (1u << 12u);
    }

    /**
     * Set RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * Standby mode
     */
    inline void set_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        RBB_LPSR_STBY_EN_SP |= 1u << 12u;
    }

    /**
     * Clear RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        RBB_LPSR_STBY_EN_SP &= ~(1u << 12u);
    }

    /**
     * Toggle RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT12 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT12() volatile
    {
        RBB_LPSR_STBY_EN_SP ^= 1u << 12u;
    }

    /**
     * Get RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        return RBB_LPSR_STBY_EN_SP & (1u << 11u);
    }

    /**
     * Set RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * Standby mode
     */
    inline void set_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        RBB_LPSR_STBY_EN_SP |= 1u << 11u;
    }

    /**
     * Clear RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        RBB_LPSR_STBY_EN_SP &= ~(1u << 11u);
    }

    /**
     * Toggle RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT11 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT11() volatile
    {
        RBB_LPSR_STBY_EN_SP ^= 1u << 11u;
    }

    /**
     * Get RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        return RBB_LPSR_STBY_EN_SP & (1u << 10u);
    }

    /**
     * Set RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * Standby mode
     */
    inline void set_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        RBB_LPSR_STBY_EN_SP |= 1u << 10u;
    }

    /**
     * Clear RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        RBB_LPSR_STBY_EN_SP &= ~(1u << 10u);
    }

    /**
     * Toggle RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT10 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT10() volatile
    {
        RBB_LPSR_STBY_EN_SP ^= 1u << 10u;
    }

    /**
     * Get RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        return RBB_LPSR_STBY_EN_SP & (1u << 9u);
    }

    /**
     * Set RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * Standby mode
     */
    inline void set_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        RBB_LPSR_STBY_EN_SP |= 1u << 9u;
    }

    /**
     * Clear RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        RBB_LPSR_STBY_EN_SP &= ~(1u << 9u);
    }

    /**
     * Toggle RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT9 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT9() volatile
    {
        RBB_LPSR_STBY_EN_SP ^= 1u << 9u;
    }

    /**
     * Get RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        return RBB_LPSR_STBY_EN_SP & (1u << 8u);
    }

    /**
     * Set RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * Standby mode
     */
    inline void set_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        RBB_LPSR_STBY_EN_SP |= 1u << 8u;
    }

    /**
     * Clear RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        RBB_LPSR_STBY_EN_SP &= ~(1u << 8u);
    }

    /**
     * Toggle RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT8 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT8() volatile
    {
        RBB_LPSR_STBY_EN_SP ^= 1u << 8u;
    }

    /**
     * Get RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        return RBB_LPSR_STBY_EN_SP & (1u << 7u);
    }

    /**
     * Set RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * Standby mode
     */
    inline void set_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        RBB_LPSR_STBY_EN_SP |= 1u << 7u;
    }

    /**
     * Clear RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        RBB_LPSR_STBY_EN_SP &= ~(1u << 7u);
    }

    /**
     * Toggle RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT7 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT7() volatile
    {
        RBB_LPSR_STBY_EN_SP ^= 1u << 7u;
    }

    /**
     * Get RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        return RBB_LPSR_STBY_EN_SP & (1u << 6u);
    }

    /**
     * Set RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * Standby mode
     */
    inline void set_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        RBB_LPSR_STBY_EN_SP |= 1u << 6u;
    }

    /**
     * Clear RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        RBB_LPSR_STBY_EN_SP &= ~(1u << 6u);
    }

    /**
     * Toggle RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT6 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT6() volatile
    {
        RBB_LPSR_STBY_EN_SP ^= 1u << 6u;
    }

    /**
     * Get RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        return RBB_LPSR_STBY_EN_SP & (1u << 5u);
    }

    /**
     * Set RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * Standby mode
     */
    inline void set_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        RBB_LPSR_STBY_EN_SP |= 1u << 5u;
    }

    /**
     * Clear RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        RBB_LPSR_STBY_EN_SP &= ~(1u << 5u);
    }

    /**
     * Toggle RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT5 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT5() volatile
    {
        RBB_LPSR_STBY_EN_SP ^= 1u << 5u;
    }

    /**
     * Get RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        return RBB_LPSR_STBY_EN_SP & (1u << 4u);
    }

    /**
     * Set RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * Standby mode
     */
    inline void set_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        RBB_LPSR_STBY_EN_SP |= 1u << 4u;
    }

    /**
     * Clear RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        RBB_LPSR_STBY_EN_SP &= ~(1u << 4u);
    }

    /**
     * Toggle RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT4 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT4() volatile
    {
        RBB_LPSR_STBY_EN_SP ^= 1u << 4u;
    }

    /**
     * Get RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        return RBB_LPSR_STBY_EN_SP & (1u << 3u);
    }

    /**
     * Set RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * Standby mode
     */
    inline void set_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        RBB_LPSR_STBY_EN_SP |= 1u << 3u;
    }

    /**
     * Clear RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        RBB_LPSR_STBY_EN_SP &= ~(1u << 3u);
    }

    /**
     * Toggle RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT3 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT3() volatile
    {
        RBB_LPSR_STBY_EN_SP ^= 1u << 3u;
    }

    /**
     * Get RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        return RBB_LPSR_STBY_EN_SP & (1u << 2u);
    }

    /**
     * Set RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * Standby mode
     */
    inline void set_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        RBB_LPSR_STBY_EN_SP |= 1u << 2u;
    }

    /**
     * Clear RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        RBB_LPSR_STBY_EN_SP &= ~(1u << 2u);
    }

    /**
     * Toggle RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT2 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT2() volatile
    {
        RBB_LPSR_STBY_EN_SP ^= 1u << 2u;
    }

    /**
     * Get RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        return RBB_LPSR_STBY_EN_SP & (1u << 1u);
    }

    /**
     * Set RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * Standby mode
     */
    inline void set_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        RBB_LPSR_STBY_EN_SP |= 1u << 1u;
    }

    /**
     * Clear RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        RBB_LPSR_STBY_EN_SP &= ~(1u << 1u);
    }

    /**
     * Toggle RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT1 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT1() volatile
    {
        RBB_LPSR_STBY_EN_SP ^= 1u << 1u;
    }

    /**
     * Get RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * Standby mode
     */
    inline bool get_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        return RBB_LPSR_STBY_EN_SP & (1u << 0u);
    }

    /**
     * Set RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * Standby mode
     */
    inline void set_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        RBB_LPSR_STBY_EN_SP |= 1u << 0u;
    }

    /**
     * Clear RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * Standby mode
     */
    inline void clear_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        RBB_LPSR_STBY_EN_SP &= ~(1u << 0u);
    }

    /**
     * Toggle RBB_LPSR_STBY_EN_SP's STBY_EN_SETPOINT0 bit.
     *
     * Standby mode
     */
    inline void toggle_RBB_LPSR_STBY_EN_SP_STBY_EN_SETPOINT0() volatile
    {
        RBB_LPSR_STBY_EN_SP ^= 1u << 0u;
    }

    /**
     * Get all of RBB_LPSR_STBY_EN_SP's bit fields.
     *
     * (read-write) RBB_LPSR_STBY_EN_SP_REGISTER
     */
    inline void get_RBB_LPSR_STBY_EN_SP(
        bool &STBY_EN_SETPOINT15, bool &STBY_EN_SETPOINT14,
        bool &STBY_EN_SETPOINT13, bool &STBY_EN_SETPOINT12,
        bool &STBY_EN_SETPOINT11, bool &STBY_EN_SETPOINT10,
        bool &STBY_EN_SETPOINT9, bool &STBY_EN_SETPOINT8,
        bool &STBY_EN_SETPOINT7, bool &STBY_EN_SETPOINT6,
        bool &STBY_EN_SETPOINT5, bool &STBY_EN_SETPOINT4,
        bool &STBY_EN_SETPOINT3, bool &STBY_EN_SETPOINT2,
        bool &STBY_EN_SETPOINT1, bool &STBY_EN_SETPOINT0) volatile
    {
        uint32_t curr = RBB_LPSR_STBY_EN_SP;

        STBY_EN_SETPOINT15 = curr & (1u << 15u);
        STBY_EN_SETPOINT14 = curr & (1u << 14u);
        STBY_EN_SETPOINT13 = curr & (1u << 13u);
        STBY_EN_SETPOINT12 = curr & (1u << 12u);
        STBY_EN_SETPOINT11 = curr & (1u << 11u);
        STBY_EN_SETPOINT10 = curr & (1u << 10u);
        STBY_EN_SETPOINT9 = curr & (1u << 9u);
        STBY_EN_SETPOINT8 = curr & (1u << 8u);
        STBY_EN_SETPOINT7 = curr & (1u << 7u);
        STBY_EN_SETPOINT6 = curr & (1u << 6u);
        STBY_EN_SETPOINT5 = curr & (1u << 5u);
        STBY_EN_SETPOINT4 = curr & (1u << 4u);
        STBY_EN_SETPOINT3 = curr & (1u << 3u);
        STBY_EN_SETPOINT2 = curr & (1u << 2u);
        STBY_EN_SETPOINT1 = curr & (1u << 1u);
        STBY_EN_SETPOINT0 = curr & (1u << 0u);
    }

    /**
     * Set all of RBB_LPSR_STBY_EN_SP's bit fields.
     *
     * (read-write) RBB_LPSR_STBY_EN_SP_REGISTER
     */
    inline void set_RBB_LPSR_STBY_EN_SP(
        bool STBY_EN_SETPOINT15, bool STBY_EN_SETPOINT14,
        bool STBY_EN_SETPOINT13, bool STBY_EN_SETPOINT12,
        bool STBY_EN_SETPOINT11, bool STBY_EN_SETPOINT10,
        bool STBY_EN_SETPOINT9, bool STBY_EN_SETPOINT8, bool STBY_EN_SETPOINT7,
        bool STBY_EN_SETPOINT6, bool STBY_EN_SETPOINT5, bool STBY_EN_SETPOINT4,
        bool STBY_EN_SETPOINT3, bool STBY_EN_SETPOINT2, bool STBY_EN_SETPOINT1,
        bool STBY_EN_SETPOINT0) volatile
    {
        uint32_t curr = RBB_LPSR_STBY_EN_SP;

        curr &= ~(0b1u << 15u);
        curr |= (STBY_EN_SETPOINT15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (STBY_EN_SETPOINT14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (STBY_EN_SETPOINT13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (STBY_EN_SETPOINT12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (STBY_EN_SETPOINT11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (STBY_EN_SETPOINT10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (STBY_EN_SETPOINT9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (STBY_EN_SETPOINT8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (STBY_EN_SETPOINT7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (STBY_EN_SETPOINT6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (STBY_EN_SETPOINT5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (STBY_EN_SETPOINT4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (STBY_EN_SETPOINT3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (STBY_EN_SETPOINT2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (STBY_EN_SETPOINT1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (STBY_EN_SETPOINT0 & 0b1u) << 0u;

        RBB_LPSR_STBY_EN_SP = curr;
    }

    /**
     * Get FBB_M7_CONFIGURE's REGULATOR_STRENGTH field.
     *
     * regulator_strength
     */
    inline uint8_t get_FBB_M7_CONFIGURE_REGULATOR_STRENGTH() volatile
    {
        return (FBB_M7_CONFIGURE >> 11u) & 0b111u;
    }

    /**
     * Set FBB_M7_CONFIGURE's REGULATOR_STRENGTH field.
     *
     * regulator_strength
     */
    inline void set_FBB_M7_CONFIGURE_REGULATOR_STRENGTH(uint8_t value) volatile
    {
        uint32_t curr = FBB_M7_CONFIGURE;

        curr &= ~(0b111u << 11u);
        curr |= (value & 0b111u) << 11u;

        FBB_M7_CONFIGURE = curr;
    }

    /**
     * Get FBB_M7_CONFIGURE's OSCILLATOR_BITS field.
     *
     * oscillator_bits
     */
    inline uint8_t get_FBB_M7_CONFIGURE_OSCILLATOR_BITS() volatile
    {
        return (FBB_M7_CONFIGURE >> 8u) & 0b111u;
    }

    /**
     * Set FBB_M7_CONFIGURE's OSCILLATOR_BITS field.
     *
     * oscillator_bits
     */
    inline void set_FBB_M7_CONFIGURE_OSCILLATOR_BITS(uint8_t value) volatile
    {
        uint32_t curr = FBB_M7_CONFIGURE;

        curr &= ~(0b111u << 8u);
        curr |= (value & 0b111u) << 8u;

        FBB_M7_CONFIGURE = curr;
    }

    /**
     * Get FBB_M7_CONFIGURE's WB_CFG_NW field.
     *
     * wb_cfg_nw
     */
    inline uint8_t get_FBB_M7_CONFIGURE_WB_CFG_NW() volatile
    {
        return (FBB_M7_CONFIGURE >> 4u) & 0b1111u;
    }

    /**
     * Set FBB_M7_CONFIGURE's WB_CFG_NW field.
     *
     * wb_cfg_nw
     */
    inline void set_FBB_M7_CONFIGURE_WB_CFG_NW(uint8_t value) volatile
    {
        uint32_t curr = FBB_M7_CONFIGURE;

        curr &= ~(0b1111u << 4u);
        curr |= (value & 0b1111u) << 4u;

        FBB_M7_CONFIGURE = curr;
    }

    /**
     * Get FBB_M7_CONFIGURE's WB_CFG_PW field.
     *
     * wb_cfg_pw
     */
    inline uint8_t get_FBB_M7_CONFIGURE_WB_CFG_PW() volatile
    {
        return (FBB_M7_CONFIGURE >> 0u) & 0b1111u;
    }

    /**
     * Set FBB_M7_CONFIGURE's WB_CFG_PW field.
     *
     * wb_cfg_pw
     */
    inline void set_FBB_M7_CONFIGURE_WB_CFG_PW(uint8_t value) volatile
    {
        uint32_t curr = FBB_M7_CONFIGURE;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        FBB_M7_CONFIGURE = curr;
    }

    /**
     * Get all of FBB_M7_CONFIGURE's bit fields.
     *
     * (read-write) FBB_M7_CONFIGURE_REGISTER
     */
    inline void get_FBB_M7_CONFIGURE(uint8_t &REGULATOR_STRENGTH,
                                     uint8_t &OSCILLATOR_BITS,
                                     uint8_t &WB_CFG_NW,
                                     uint8_t &WB_CFG_PW) volatile
    {
        uint32_t curr = FBB_M7_CONFIGURE;

        REGULATOR_STRENGTH = (curr >> 11u) & 0b111u;
        OSCILLATOR_BITS = (curr >> 8u) & 0b111u;
        WB_CFG_NW = (curr >> 4u) & 0b1111u;
        WB_CFG_PW = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of FBB_M7_CONFIGURE's bit fields.
     *
     * (read-write) FBB_M7_CONFIGURE_REGISTER
     */
    inline void set_FBB_M7_CONFIGURE(uint8_t REGULATOR_STRENGTH,
                                     uint8_t OSCILLATOR_BITS,
                                     uint8_t WB_CFG_NW,
                                     uint8_t WB_CFG_PW) volatile
    {
        uint32_t curr = FBB_M7_CONFIGURE;

        curr &= ~(0b111u << 11u);
        curr |= (REGULATOR_STRENGTH & 0b111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (OSCILLATOR_BITS & 0b111u) << 8u;
        curr &= ~(0b1111u << 4u);
        curr |= (WB_CFG_NW & 0b1111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (WB_CFG_PW & 0b1111u) << 0u;

        FBB_M7_CONFIGURE = curr;
    }

    /**
     * Get RBB_LPSR_CONFIGURE's REGULATOR_STRENGTH field.
     *
     * regulator_strength
     */
    inline uint8_t get_RBB_LPSR_CONFIGURE_REGULATOR_STRENGTH() volatile
    {
        return (RBB_LPSR_CONFIGURE >> 11u) & 0b111u;
    }

    /**
     * Set RBB_LPSR_CONFIGURE's REGULATOR_STRENGTH field.
     *
     * regulator_strength
     */
    inline void set_RBB_LPSR_CONFIGURE_REGULATOR_STRENGTH(
        uint8_t value) volatile
    {
        uint32_t curr = RBB_LPSR_CONFIGURE;

        curr &= ~(0b111u << 11u);
        curr |= (value & 0b111u) << 11u;

        RBB_LPSR_CONFIGURE = curr;
    }

    /**
     * Get RBB_LPSR_CONFIGURE's OSCILLATOR_BITS field.
     *
     * oscillator_bits
     */
    inline uint8_t get_RBB_LPSR_CONFIGURE_OSCILLATOR_BITS() volatile
    {
        return (RBB_LPSR_CONFIGURE >> 8u) & 0b111u;
    }

    /**
     * Set RBB_LPSR_CONFIGURE's OSCILLATOR_BITS field.
     *
     * oscillator_bits
     */
    inline void set_RBB_LPSR_CONFIGURE_OSCILLATOR_BITS(uint8_t value) volatile
    {
        uint32_t curr = RBB_LPSR_CONFIGURE;

        curr &= ~(0b111u << 8u);
        curr |= (value & 0b111u) << 8u;

        RBB_LPSR_CONFIGURE = curr;
    }

    /**
     * Get RBB_LPSR_CONFIGURE's WB_CFG_NW field.
     *
     * wb_cfg_nw
     */
    inline uint8_t get_RBB_LPSR_CONFIGURE_WB_CFG_NW() volatile
    {
        return (RBB_LPSR_CONFIGURE >> 4u) & 0b1111u;
    }

    /**
     * Set RBB_LPSR_CONFIGURE's WB_CFG_NW field.
     *
     * wb_cfg_nw
     */
    inline void set_RBB_LPSR_CONFIGURE_WB_CFG_NW(uint8_t value) volatile
    {
        uint32_t curr = RBB_LPSR_CONFIGURE;

        curr &= ~(0b1111u << 4u);
        curr |= (value & 0b1111u) << 4u;

        RBB_LPSR_CONFIGURE = curr;
    }

    /**
     * Get RBB_LPSR_CONFIGURE's WB_CFG_PW field.
     *
     * wb_cfg_pw
     */
    inline uint8_t get_RBB_LPSR_CONFIGURE_WB_CFG_PW() volatile
    {
        return (RBB_LPSR_CONFIGURE >> 0u) & 0b1111u;
    }

    /**
     * Set RBB_LPSR_CONFIGURE's WB_CFG_PW field.
     *
     * wb_cfg_pw
     */
    inline void set_RBB_LPSR_CONFIGURE_WB_CFG_PW(uint8_t value) volatile
    {
        uint32_t curr = RBB_LPSR_CONFIGURE;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        RBB_LPSR_CONFIGURE = curr;
    }

    /**
     * Get all of RBB_LPSR_CONFIGURE's bit fields.
     *
     * (read-write) RBB_LPSR_CONFIGURE_REGISTER
     */
    inline void get_RBB_LPSR_CONFIGURE(uint8_t &REGULATOR_STRENGTH,
                                       uint8_t &OSCILLATOR_BITS,
                                       uint8_t &WB_CFG_NW,
                                       uint8_t &WB_CFG_PW) volatile
    {
        uint32_t curr = RBB_LPSR_CONFIGURE;

        REGULATOR_STRENGTH = (curr >> 11u) & 0b111u;
        OSCILLATOR_BITS = (curr >> 8u) & 0b111u;
        WB_CFG_NW = (curr >> 4u) & 0b1111u;
        WB_CFG_PW = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of RBB_LPSR_CONFIGURE's bit fields.
     *
     * (read-write) RBB_LPSR_CONFIGURE_REGISTER
     */
    inline void set_RBB_LPSR_CONFIGURE(uint8_t REGULATOR_STRENGTH,
                                       uint8_t OSCILLATOR_BITS,
                                       uint8_t WB_CFG_NW,
                                       uint8_t WB_CFG_PW) volatile
    {
        uint32_t curr = RBB_LPSR_CONFIGURE;

        curr &= ~(0b111u << 11u);
        curr |= (REGULATOR_STRENGTH & 0b111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (OSCILLATOR_BITS & 0b111u) << 8u;
        curr &= ~(0b1111u << 4u);
        curr |= (WB_CFG_NW & 0b1111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (WB_CFG_PW & 0b1111u) << 0u;

        RBB_LPSR_CONFIGURE = curr;
    }

    /**
     * Get RBB_SOC_CONFIGURE's REGULATOR_STRENGTH field.
     *
     * regulator_strength
     */
    inline uint8_t get_RBB_SOC_CONFIGURE_REGULATOR_STRENGTH() volatile
    {
        return (RBB_SOC_CONFIGURE >> 11u) & 0b111u;
    }

    /**
     * Set RBB_SOC_CONFIGURE's REGULATOR_STRENGTH field.
     *
     * regulator_strength
     */
    inline void set_RBB_SOC_CONFIGURE_REGULATOR_STRENGTH(
        uint8_t value) volatile
    {
        uint32_t curr = RBB_SOC_CONFIGURE;

        curr &= ~(0b111u << 11u);
        curr |= (value & 0b111u) << 11u;

        RBB_SOC_CONFIGURE = curr;
    }

    /**
     * Get RBB_SOC_CONFIGURE's OSCILLATOR_BITS field.
     *
     * oscillator_bits
     */
    inline uint8_t get_RBB_SOC_CONFIGURE_OSCILLATOR_BITS() volatile
    {
        return (RBB_SOC_CONFIGURE >> 8u) & 0b111u;
    }

    /**
     * Set RBB_SOC_CONFIGURE's OSCILLATOR_BITS field.
     *
     * oscillator_bits
     */
    inline void set_RBB_SOC_CONFIGURE_OSCILLATOR_BITS(uint8_t value) volatile
    {
        uint32_t curr = RBB_SOC_CONFIGURE;

        curr &= ~(0b111u << 8u);
        curr |= (value & 0b111u) << 8u;

        RBB_SOC_CONFIGURE = curr;
    }

    /**
     * Get RBB_SOC_CONFIGURE's WB_CFG_NW field.
     *
     * wb_cfg_nw
     */
    inline uint8_t get_RBB_SOC_CONFIGURE_WB_CFG_NW() volatile
    {
        return (RBB_SOC_CONFIGURE >> 4u) & 0b1111u;
    }

    /**
     * Set RBB_SOC_CONFIGURE's WB_CFG_NW field.
     *
     * wb_cfg_nw
     */
    inline void set_RBB_SOC_CONFIGURE_WB_CFG_NW(uint8_t value) volatile
    {
        uint32_t curr = RBB_SOC_CONFIGURE;

        curr &= ~(0b1111u << 4u);
        curr |= (value & 0b1111u) << 4u;

        RBB_SOC_CONFIGURE = curr;
    }

    /**
     * Get RBB_SOC_CONFIGURE's WB_CFG_PW field.
     *
     * wb_cfg_pw
     */
    inline uint8_t get_RBB_SOC_CONFIGURE_WB_CFG_PW() volatile
    {
        return (RBB_SOC_CONFIGURE >> 0u) & 0b1111u;
    }

    /**
     * Set RBB_SOC_CONFIGURE's WB_CFG_PW field.
     *
     * wb_cfg_pw
     */
    inline void set_RBB_SOC_CONFIGURE_WB_CFG_PW(uint8_t value) volatile
    {
        uint32_t curr = RBB_SOC_CONFIGURE;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        RBB_SOC_CONFIGURE = curr;
    }

    /**
     * Get all of RBB_SOC_CONFIGURE's bit fields.
     *
     * (read-write) RBB_SOC_CONFIGURE_REGISTER
     */
    inline void get_RBB_SOC_CONFIGURE(uint8_t &REGULATOR_STRENGTH,
                                      uint8_t &OSCILLATOR_BITS,
                                      uint8_t &WB_CFG_NW,
                                      uint8_t &WB_CFG_PW) volatile
    {
        uint32_t curr = RBB_SOC_CONFIGURE;

        REGULATOR_STRENGTH = (curr >> 11u) & 0b111u;
        OSCILLATOR_BITS = (curr >> 8u) & 0b111u;
        WB_CFG_NW = (curr >> 4u) & 0b1111u;
        WB_CFG_PW = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of RBB_SOC_CONFIGURE's bit fields.
     *
     * (read-write) RBB_SOC_CONFIGURE_REGISTER
     */
    inline void set_RBB_SOC_CONFIGURE(uint8_t REGULATOR_STRENGTH,
                                      uint8_t OSCILLATOR_BITS,
                                      uint8_t WB_CFG_NW,
                                      uint8_t WB_CFG_PW) volatile
    {
        uint32_t curr = RBB_SOC_CONFIGURE;

        curr &= ~(0b111u << 11u);
        curr |= (REGULATOR_STRENGTH & 0b111u) << 11u;
        curr &= ~(0b111u << 8u);
        curr |= (OSCILLATOR_BITS & 0b111u) << 8u;
        curr &= ~(0b1111u << 4u);
        curr |= (WB_CFG_NW & 0b1111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (WB_CFG_PW & 0b1111u) << 0u;

        RBB_SOC_CONFIGURE = curr;
    }

    /**
     * Get REFTOP_OTP_TRIM_VALUE's REFTOP_TRIM_EN bit.
     *
     * REFTOP_TRIM_EN
     */
    inline bool get_REFTOP_OTP_TRIM_VALUE_REFTOP_TRIM_EN() volatile
    {
        return REFTOP_OTP_TRIM_VALUE & (1u << 6u);
    }

    /**
     * Get REFTOP_OTP_TRIM_VALUE's REFTOP_VBGADJ field.
     *
     * REFTOP_VBGADJ
     */
    inline uint8_t get_REFTOP_OTP_TRIM_VALUE_REFTOP_VBGADJ() volatile
    {
        return (REFTOP_OTP_TRIM_VALUE >> 3u) & 0b111u;
    }

    /**
     * Get REFTOP_OTP_TRIM_VALUE's REFTOP_IBZTCADJ field.
     *
     * REFTOP_IBZTCADJ
     */
    inline uint8_t get_REFTOP_OTP_TRIM_VALUE_REFTOP_IBZTCADJ() volatile
    {
        return (REFTOP_OTP_TRIM_VALUE >> 0u) & 0b111u;
    }

    /**
     * Get all of REFTOP_OTP_TRIM_VALUE's bit fields.
     *
     * (read-write) REFTOP_OTP_TRIM_VALUE_REGISTER
     */
    inline void get_REFTOP_OTP_TRIM_VALUE(bool &REFTOP_TRIM_EN,
                                          uint8_t &REFTOP_VBGADJ,
                                          uint8_t &REFTOP_IBZTCADJ) volatile
    {
        uint32_t curr = REFTOP_OTP_TRIM_VALUE;

        REFTOP_TRIM_EN = curr & (1u << 6u);
        REFTOP_VBGADJ = (curr >> 3u) & 0b111u;
        REFTOP_IBZTCADJ = (curr >> 0u) & 0b111u;
    }

    /**
     * Get LPSR_1P8_LDO_OTP_TRIM_VALUE's LPSR_LDO_1P8_TRIM_EN bit.
     *
     * LPSR_LDO_1P8_TRIM_EN
     */
    inline bool get_LPSR_1P8_LDO_OTP_TRIM_VALUE_LPSR_LDO_1P8_TRIM_EN() volatile
    {
        return LPSR_1P8_LDO_OTP_TRIM_VALUE & (1u << 2u);
    }

    /**
     * Get LPSR_1P8_LDO_OTP_TRIM_VALUE's LPSR_LDO_1P8_TRIM field.
     *
     * LPSR_LDO_1P8_TRIM
     */
    inline uint8_t get_LPSR_1P8_LDO_OTP_TRIM_VALUE_LPSR_LDO_1P8_TRIM() volatile
    {
        return (LPSR_1P8_LDO_OTP_TRIM_VALUE >> 0u) & 0b11u;
    }

    /**
     * Get all of LPSR_1P8_LDO_OTP_TRIM_VALUE's bit fields.
     *
     * (read-write) LPSR_1P8_LDO_OTP_TRIM_VALUE_REGISTER
     */
    inline void get_LPSR_1P8_LDO_OTP_TRIM_VALUE(
        bool &LPSR_LDO_1P8_TRIM_EN, uint8_t &LPSR_LDO_1P8_TRIM) volatile
    {
        uint32_t curr = LPSR_1P8_LDO_OTP_TRIM_VALUE;

        LPSR_LDO_1P8_TRIM_EN = curr & (1u << 2u);
        LPSR_LDO_1P8_TRIM = (curr >> 0u) & 0b11u;
    }
};

static_assert(sizeof(anadig_pmu) == anadig_pmu::size);

static volatile anadig_pmu *const ANADIG_PMU =
    reinterpret_cast<anadig_pmu *>(0x40C84000);

}; // namespace MIMXRT1176::CM7
