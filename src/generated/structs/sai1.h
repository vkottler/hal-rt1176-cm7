/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/SAI1_RCR2_MSEL.h"
#include "../enums/SAI1_RCR4_FCOMB.h"
#include "../enums/SAI1_RCR4_FPACK.h"
#include "../enums/SAI1_RMR_RWM.h"
#include "../enums/SAI1_TCR2_MSEL.h"
#include "../enums/SAI1_TCR4_FCOMB.h"
#include "../enums/SAI1_TCR4_FPACK.h"
#include "../enums/SAI1_TMR_TWM.h"
#include "../enums/SAI1_VERID_FEATURE.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * SAI
 */
struct [[gnu::packed]] sai1
{
    /* Constant attributes. */
    static constexpr std::size_t size = 228; /*!< sai1's size in bytes. */

    /* Fields. */
    uint32_t VERID; /*!< (read-write) Version ID */
    uint32_t PARAM; /*!< (read-write) Parameter */
    uint32_t TCSR;  /*!< (read-write) Transmit Control */
    uint32_t TCR1;  /*!< (read-write) Transmit Configuration 1 */
    uint32_t TCR2;  /*!< (read-write) Transmit Configuration 2 */
    uint32_t TCR3;  /*!< (read-write) Transmit Configuration 3 */
    uint32_t TCR4;  /*!< (read-write) Transmit Configuration 4 */
    uint32_t TCR5;  /*!< (read-write) Transmit Configuration 5 */
    static constexpr std::size_t TDR_length = 4;
    uint32_t TDR[TDR_length]; /*!< (read-write) Transmit Data */
    static constexpr std::size_t reserved_padding0_length = 4;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    static constexpr std::size_t TFR_length = 4;
    uint32_t TFR[TFR_length]; /*!< (read-write) Transmit FIFO */
    static constexpr std::size_t reserved_padding1_length = 4;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    uint32_t TMR; /*!< (read-write) Transmit Mask */
    static constexpr std::size_t reserved_padding2_length = 9;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    uint32_t RCSR; /*!< (read-write) Receive Control */
    uint32_t RCR1; /*!< (read-write) Receive Configuration 1 */
    uint32_t RCR2; /*!< (read-write) Receive Configuration 2 */
    uint32_t RCR3; /*!< (read-write) Receive Configuration 3 */
    uint32_t RCR4; /*!< (read-write) Receive Configuration 4 */
    uint32_t RCR5; /*!< (read-write) Receive Configuration 5 */
    static constexpr std::size_t RDR_length = 4;
    uint32_t RDR[RDR_length]; /*!< (read-write) Receive Data */
    static constexpr std::size_t reserved_padding3_length = 4;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    static constexpr std::size_t RFR_length = 4;
    uint32_t RFR[RFR_length]; /*!< (read-write) Receive FIFO */
    static constexpr std::size_t reserved_padding4_length = 4;
    const uint32_t reserved_padding4[reserved_padding4_length] = {};
    uint32_t RMR; /*!< (read-write) Receive Mask */

    /* Methods. */

    /**
     * Get VERID's MAJOR field.
     *
     * Major Version Number
     */
    inline uint8_t get_VERID_MAJOR() volatile
    {
        return (VERID >> 24u) & 0b11111111u;
    }

    /**
     * Get VERID's MINOR field.
     *
     * Minor Version Number
     */
    inline uint8_t get_VERID_MINOR() volatile
    {
        return (VERID >> 16u) & 0b11111111u;
    }

    /**
     * Get VERID's FEATURE field.
     *
     * Feature Specification Number
     */
    inline SAI1_VERID_FEATURE get_VERID_FEATURE() volatile
    {
        return SAI1_VERID_FEATURE((VERID >> 0u) & 0b1111111111111111u);
    }

    /**
     * Get all of VERID's bit fields.
     *
     * (read-write) Version ID
     */
    inline void get_VERID(uint8_t &MAJOR, uint8_t &MINOR,
                          SAI1_VERID_FEATURE &FEATURE) volatile
    {
        uint32_t curr = VERID;

        MAJOR = (curr >> 24u) & 0b11111111u;
        MINOR = (curr >> 16u) & 0b11111111u;
        FEATURE = SAI1_VERID_FEATURE((curr >> 0u) & 0b1111111111111111u);
    }

    /**
     * Get PARAM's FRAME field.
     *
     * Frame Size
     */
    inline uint8_t get_PARAM_FRAME() volatile
    {
        return (PARAM >> 16u) & 0b1111u;
    }

    /**
     * Get PARAM's FIFO field.
     *
     * FIFO Size
     */
    inline uint8_t get_PARAM_FIFO() volatile
    {
        return (PARAM >> 8u) & 0b1111u;
    }

    /**
     * Get PARAM's DATALINE field.
     *
     * Number of Datalines
     */
    inline uint8_t get_PARAM_DATALINE() volatile
    {
        return (PARAM >> 0u) & 0b1111u;
    }

    /**
     * Get all of PARAM's bit fields.
     *
     * (read-write) Parameter
     */
    inline void get_PARAM(uint8_t &FRAME, uint8_t &FIFO,
                          uint8_t &DATALINE) volatile
    {
        uint32_t curr = PARAM;

        FRAME = (curr >> 16u) & 0b1111u;
        FIFO = (curr >> 8u) & 0b1111u;
        DATALINE = (curr >> 0u) & 0b1111u;
    }

    /**
     * Get TCSR's TE bit.
     *
     * Transmitter Enable
     */
    inline bool get_TCSR_TE() volatile
    {
        return TCSR & (1u << 31u);
    }

    /**
     * Set TCSR's TE bit.
     *
     * Transmitter Enable
     */
    inline void set_TCSR_TE() volatile
    {
        TCSR |= 1u << 31u;
    }

    /**
     * Clear TCSR's TE bit.
     *
     * Transmitter Enable
     */
    inline void clear_TCSR_TE() volatile
    {
        TCSR &= ~(1u << 31u);
    }

    /**
     * Toggle TCSR's TE bit.
     *
     * Transmitter Enable
     */
    inline void toggle_TCSR_TE() volatile
    {
        TCSR ^= 1u << 31u;
    }

    /**
     * Get TCSR's STOPE bit.
     *
     * Stop Enable
     */
    inline bool get_TCSR_STOPE() volatile
    {
        return TCSR & (1u << 30u);
    }

    /**
     * Set TCSR's STOPE bit.
     *
     * Stop Enable
     */
    inline void set_TCSR_STOPE() volatile
    {
        TCSR |= 1u << 30u;
    }

    /**
     * Clear TCSR's STOPE bit.
     *
     * Stop Enable
     */
    inline void clear_TCSR_STOPE() volatile
    {
        TCSR &= ~(1u << 30u);
    }

    /**
     * Toggle TCSR's STOPE bit.
     *
     * Stop Enable
     */
    inline void toggle_TCSR_STOPE() volatile
    {
        TCSR ^= 1u << 30u;
    }

    /**
     * Get TCSR's DBGE bit.
     *
     * Debug Enable
     */
    inline bool get_TCSR_DBGE() volatile
    {
        return TCSR & (1u << 29u);
    }

    /**
     * Set TCSR's DBGE bit.
     *
     * Debug Enable
     */
    inline void set_TCSR_DBGE() volatile
    {
        TCSR |= 1u << 29u;
    }

    /**
     * Clear TCSR's DBGE bit.
     *
     * Debug Enable
     */
    inline void clear_TCSR_DBGE() volatile
    {
        TCSR &= ~(1u << 29u);
    }

    /**
     * Toggle TCSR's DBGE bit.
     *
     * Debug Enable
     */
    inline void toggle_TCSR_DBGE() volatile
    {
        TCSR ^= 1u << 29u;
    }

    /**
     * Get TCSR's BCE bit.
     *
     * Bit Clock Enable
     */
    inline bool get_TCSR_BCE() volatile
    {
        return TCSR & (1u << 28u);
    }

    /**
     * Set TCSR's BCE bit.
     *
     * Bit Clock Enable
     */
    inline void set_TCSR_BCE() volatile
    {
        TCSR |= 1u << 28u;
    }

    /**
     * Clear TCSR's BCE bit.
     *
     * Bit Clock Enable
     */
    inline void clear_TCSR_BCE() volatile
    {
        TCSR &= ~(1u << 28u);
    }

    /**
     * Toggle TCSR's BCE bit.
     *
     * Bit Clock Enable
     */
    inline void toggle_TCSR_BCE() volatile
    {
        TCSR ^= 1u << 28u;
    }

    /**
     * Get TCSR's FR bit.
     *
     * FIFO Reset
     */
    inline bool get_TCSR_FR() volatile
    {
        return TCSR & (1u << 25u);
    }

    /**
     * Set TCSR's FR bit.
     *
     * FIFO Reset
     */
    inline void set_TCSR_FR() volatile
    {
        TCSR |= 1u << 25u;
    }

    /**
     * Clear TCSR's FR bit.
     *
     * FIFO Reset
     */
    inline void clear_TCSR_FR() volatile
    {
        TCSR &= ~(1u << 25u);
    }

    /**
     * Toggle TCSR's FR bit.
     *
     * FIFO Reset
     */
    inline void toggle_TCSR_FR() volatile
    {
        TCSR ^= 1u << 25u;
    }

    /**
     * Get TCSR's SR bit.
     *
     * Software Reset
     */
    inline bool get_TCSR_SR() volatile
    {
        return TCSR & (1u << 24u);
    }

    /**
     * Set TCSR's SR bit.
     *
     * Software Reset
     */
    inline void set_TCSR_SR() volatile
    {
        TCSR |= 1u << 24u;
    }

    /**
     * Clear TCSR's SR bit.
     *
     * Software Reset
     */
    inline void clear_TCSR_SR() volatile
    {
        TCSR &= ~(1u << 24u);
    }

    /**
     * Toggle TCSR's SR bit.
     *
     * Software Reset
     */
    inline void toggle_TCSR_SR() volatile
    {
        TCSR ^= 1u << 24u;
    }

    /**
     * Get TCSR's WSF bit.
     *
     * Word Start Flag
     */
    inline bool get_TCSR_WSF() volatile
    {
        return TCSR & (1u << 20u);
    }

    /**
     * Set TCSR's WSF bit.
     *
     * Word Start Flag
     */
    inline void set_TCSR_WSF() volatile
    {
        TCSR |= 1u << 20u;
    }

    /**
     * Clear TCSR's WSF bit.
     *
     * Word Start Flag
     */
    inline void clear_TCSR_WSF() volatile
    {
        TCSR &= ~(1u << 20u);
    }

    /**
     * Toggle TCSR's WSF bit.
     *
     * Word Start Flag
     */
    inline void toggle_TCSR_WSF() volatile
    {
        TCSR ^= 1u << 20u;
    }

    /**
     * Get TCSR's SEF bit.
     *
     * Sync Error Flag
     */
    inline bool get_TCSR_SEF() volatile
    {
        return TCSR & (1u << 19u);
    }

    /**
     * Set TCSR's SEF bit.
     *
     * Sync Error Flag
     */
    inline void set_TCSR_SEF() volatile
    {
        TCSR |= 1u << 19u;
    }

    /**
     * Clear TCSR's SEF bit.
     *
     * Sync Error Flag
     */
    inline void clear_TCSR_SEF() volatile
    {
        TCSR &= ~(1u << 19u);
    }

    /**
     * Toggle TCSR's SEF bit.
     *
     * Sync Error Flag
     */
    inline void toggle_TCSR_SEF() volatile
    {
        TCSR ^= 1u << 19u;
    }

    /**
     * Get TCSR's FEF bit.
     *
     * FIFO Error Flag
     */
    inline bool get_TCSR_FEF() volatile
    {
        return TCSR & (1u << 18u);
    }

    /**
     * Set TCSR's FEF bit.
     *
     * FIFO Error Flag
     */
    inline void set_TCSR_FEF() volatile
    {
        TCSR |= 1u << 18u;
    }

    /**
     * Clear TCSR's FEF bit.
     *
     * FIFO Error Flag
     */
    inline void clear_TCSR_FEF() volatile
    {
        TCSR &= ~(1u << 18u);
    }

    /**
     * Toggle TCSR's FEF bit.
     *
     * FIFO Error Flag
     */
    inline void toggle_TCSR_FEF() volatile
    {
        TCSR ^= 1u << 18u;
    }

    /**
     * Get TCSR's FWF bit.
     *
     * FIFO Warning Flag
     */
    inline bool get_TCSR_FWF() volatile
    {
        return TCSR & (1u << 17u);
    }

    /**
     * Get TCSR's FRF bit.
     *
     * FIFO Request Flag
     */
    inline bool get_TCSR_FRF() volatile
    {
        return TCSR & (1u << 16u);
    }

    /**
     * Get TCSR's WSIE bit.
     *
     * Word Start Interrupt Enable
     */
    inline bool get_TCSR_WSIE() volatile
    {
        return TCSR & (1u << 12u);
    }

    /**
     * Set TCSR's WSIE bit.
     *
     * Word Start Interrupt Enable
     */
    inline void set_TCSR_WSIE() volatile
    {
        TCSR |= 1u << 12u;
    }

    /**
     * Clear TCSR's WSIE bit.
     *
     * Word Start Interrupt Enable
     */
    inline void clear_TCSR_WSIE() volatile
    {
        TCSR &= ~(1u << 12u);
    }

    /**
     * Toggle TCSR's WSIE bit.
     *
     * Word Start Interrupt Enable
     */
    inline void toggle_TCSR_WSIE() volatile
    {
        TCSR ^= 1u << 12u;
    }

    /**
     * Get TCSR's SEIE bit.
     *
     * Sync Error Interrupt Enable
     */
    inline bool get_TCSR_SEIE() volatile
    {
        return TCSR & (1u << 11u);
    }

    /**
     * Set TCSR's SEIE bit.
     *
     * Sync Error Interrupt Enable
     */
    inline void set_TCSR_SEIE() volatile
    {
        TCSR |= 1u << 11u;
    }

    /**
     * Clear TCSR's SEIE bit.
     *
     * Sync Error Interrupt Enable
     */
    inline void clear_TCSR_SEIE() volatile
    {
        TCSR &= ~(1u << 11u);
    }

    /**
     * Toggle TCSR's SEIE bit.
     *
     * Sync Error Interrupt Enable
     */
    inline void toggle_TCSR_SEIE() volatile
    {
        TCSR ^= 1u << 11u;
    }

    /**
     * Get TCSR's FEIE bit.
     *
     * FIFO Error Interrupt Enable
     */
    inline bool get_TCSR_FEIE() volatile
    {
        return TCSR & (1u << 10u);
    }

    /**
     * Set TCSR's FEIE bit.
     *
     * FIFO Error Interrupt Enable
     */
    inline void set_TCSR_FEIE() volatile
    {
        TCSR |= 1u << 10u;
    }

    /**
     * Clear TCSR's FEIE bit.
     *
     * FIFO Error Interrupt Enable
     */
    inline void clear_TCSR_FEIE() volatile
    {
        TCSR &= ~(1u << 10u);
    }

    /**
     * Toggle TCSR's FEIE bit.
     *
     * FIFO Error Interrupt Enable
     */
    inline void toggle_TCSR_FEIE() volatile
    {
        TCSR ^= 1u << 10u;
    }

    /**
     * Get TCSR's FWIE bit.
     *
     * FIFO Warning Interrupt Enable
     */
    inline bool get_TCSR_FWIE() volatile
    {
        return TCSR & (1u << 9u);
    }

    /**
     * Set TCSR's FWIE bit.
     *
     * FIFO Warning Interrupt Enable
     */
    inline void set_TCSR_FWIE() volatile
    {
        TCSR |= 1u << 9u;
    }

    /**
     * Clear TCSR's FWIE bit.
     *
     * FIFO Warning Interrupt Enable
     */
    inline void clear_TCSR_FWIE() volatile
    {
        TCSR &= ~(1u << 9u);
    }

    /**
     * Toggle TCSR's FWIE bit.
     *
     * FIFO Warning Interrupt Enable
     */
    inline void toggle_TCSR_FWIE() volatile
    {
        TCSR ^= 1u << 9u;
    }

    /**
     * Get TCSR's FRIE bit.
     *
     * FIFO Request Interrupt Enable
     */
    inline bool get_TCSR_FRIE() volatile
    {
        return TCSR & (1u << 8u);
    }

    /**
     * Set TCSR's FRIE bit.
     *
     * FIFO Request Interrupt Enable
     */
    inline void set_TCSR_FRIE() volatile
    {
        TCSR |= 1u << 8u;
    }

    /**
     * Clear TCSR's FRIE bit.
     *
     * FIFO Request Interrupt Enable
     */
    inline void clear_TCSR_FRIE() volatile
    {
        TCSR &= ~(1u << 8u);
    }

    /**
     * Toggle TCSR's FRIE bit.
     *
     * FIFO Request Interrupt Enable
     */
    inline void toggle_TCSR_FRIE() volatile
    {
        TCSR ^= 1u << 8u;
    }

    /**
     * Get TCSR's FWDE bit.
     *
     * FIFO Warning DMA Enable
     */
    inline bool get_TCSR_FWDE() volatile
    {
        return TCSR & (1u << 1u);
    }

    /**
     * Set TCSR's FWDE bit.
     *
     * FIFO Warning DMA Enable
     */
    inline void set_TCSR_FWDE() volatile
    {
        TCSR |= 1u << 1u;
    }

    /**
     * Clear TCSR's FWDE bit.
     *
     * FIFO Warning DMA Enable
     */
    inline void clear_TCSR_FWDE() volatile
    {
        TCSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCSR's FWDE bit.
     *
     * FIFO Warning DMA Enable
     */
    inline void toggle_TCSR_FWDE() volatile
    {
        TCSR ^= 1u << 1u;
    }

    /**
     * Get TCSR's FRDE bit.
     *
     * FIFO Request DMA Enable
     */
    inline bool get_TCSR_FRDE() volatile
    {
        return TCSR & (1u << 0u);
    }

    /**
     * Set TCSR's FRDE bit.
     *
     * FIFO Request DMA Enable
     */
    inline void set_TCSR_FRDE() volatile
    {
        TCSR |= 1u << 0u;
    }

    /**
     * Clear TCSR's FRDE bit.
     *
     * FIFO Request DMA Enable
     */
    inline void clear_TCSR_FRDE() volatile
    {
        TCSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCSR's FRDE bit.
     *
     * FIFO Request DMA Enable
     */
    inline void toggle_TCSR_FRDE() volatile
    {
        TCSR ^= 1u << 0u;
    }

    /**
     * Get all of TCSR's bit fields.
     *
     * (read-write) Transmit Control
     */
    inline void get_TCSR(bool &TE, bool &STOPE, bool &DBGE, bool &BCE,
                         bool &FR, bool &SR, bool &WSF, bool &SEF, bool &FEF,
                         bool &FWF, bool &FRF, bool &WSIE, bool &SEIE,
                         bool &FEIE, bool &FWIE, bool &FRIE, bool &FWDE,
                         bool &FRDE) volatile
    {
        uint32_t curr = TCSR;

        TE = curr & (1u << 31u);
        STOPE = curr & (1u << 30u);
        DBGE = curr & (1u << 29u);
        BCE = curr & (1u << 28u);
        FR = curr & (1u << 25u);
        SR = curr & (1u << 24u);
        WSF = curr & (1u << 20u);
        SEF = curr & (1u << 19u);
        FEF = curr & (1u << 18u);
        FWF = curr & (1u << 17u);
        FRF = curr & (1u << 16u);
        WSIE = curr & (1u << 12u);
        SEIE = curr & (1u << 11u);
        FEIE = curr & (1u << 10u);
        FWIE = curr & (1u << 9u);
        FRIE = curr & (1u << 8u);
        FWDE = curr & (1u << 1u);
        FRDE = curr & (1u << 0u);
    }

    /**
     * Set all of TCSR's bit fields.
     *
     * (read-write) Transmit Control
     */
    inline void set_TCSR(bool TE, bool STOPE, bool DBGE, bool BCE, bool FR,
                         bool SR, bool WSF, bool SEF, bool FEF, bool WSIE,
                         bool SEIE, bool FEIE, bool FWIE, bool FRIE, bool FWDE,
                         bool FRDE) volatile
    {
        uint32_t curr = TCSR;

        curr &= ~(0b1u << 31u);
        curr |= (TE & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (STOPE & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (DBGE & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (BCE & 0b1u) << 28u;
        curr &= ~(0b1u << 25u);
        curr |= (FR & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (SR & 0b1u) << 24u;
        curr &= ~(0b1u << 20u);
        curr |= (WSF & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (SEF & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (FEF & 0b1u) << 18u;
        curr &= ~(0b1u << 12u);
        curr |= (WSIE & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (SEIE & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (FEIE & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (FWIE & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (FRIE & 0b1u) << 8u;
        curr &= ~(0b1u << 1u);
        curr |= (FWDE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (FRDE & 0b1u) << 0u;

        TCSR = curr;
    }

    /**
     * Get TCR1's TFW field.
     *
     * Transmit FIFO Watermark
     */
    inline uint8_t get_TCR1_TFW() volatile
    {
        return (TCR1 >> 0u) & 0b11111u;
    }

    /**
     * Set TCR1's TFW field.
     *
     * Transmit FIFO Watermark
     */
    inline void set_TCR1_TFW(uint8_t value) volatile
    {
        uint32_t curr = TCR1;

        curr &= ~(0b11111u << 0u);
        curr |= (value & 0b11111u) << 0u;

        TCR1 = curr;
    }

    /**
     * Get TCR2's SYNC bit.
     *
     * Synchronous Mode
     */
    inline bool get_TCR2_SYNC() volatile
    {
        return TCR2 & (1u << 30u);
    }

    /**
     * Set TCR2's SYNC bit.
     *
     * Synchronous Mode
     */
    inline void set_TCR2_SYNC() volatile
    {
        TCR2 |= 1u << 30u;
    }

    /**
     * Clear TCR2's SYNC bit.
     *
     * Synchronous Mode
     */
    inline void clear_TCR2_SYNC() volatile
    {
        TCR2 &= ~(1u << 30u);
    }

    /**
     * Toggle TCR2's SYNC bit.
     *
     * Synchronous Mode
     */
    inline void toggle_TCR2_SYNC() volatile
    {
        TCR2 ^= 1u << 30u;
    }

    /**
     * Get TCR2's BCS bit.
     *
     * Bit Clock Swap
     */
    inline bool get_TCR2_BCS() volatile
    {
        return TCR2 & (1u << 29u);
    }

    /**
     * Set TCR2's BCS bit.
     *
     * Bit Clock Swap
     */
    inline void set_TCR2_BCS() volatile
    {
        TCR2 |= 1u << 29u;
    }

    /**
     * Clear TCR2's BCS bit.
     *
     * Bit Clock Swap
     */
    inline void clear_TCR2_BCS() volatile
    {
        TCR2 &= ~(1u << 29u);
    }

    /**
     * Toggle TCR2's BCS bit.
     *
     * Bit Clock Swap
     */
    inline void toggle_TCR2_BCS() volatile
    {
        TCR2 ^= 1u << 29u;
    }

    /**
     * Get TCR2's BCI bit.
     *
     * Bit Clock Input
     */
    inline bool get_TCR2_BCI() volatile
    {
        return TCR2 & (1u << 28u);
    }

    /**
     * Set TCR2's BCI bit.
     *
     * Bit Clock Input
     */
    inline void set_TCR2_BCI() volatile
    {
        TCR2 |= 1u << 28u;
    }

    /**
     * Clear TCR2's BCI bit.
     *
     * Bit Clock Input
     */
    inline void clear_TCR2_BCI() volatile
    {
        TCR2 &= ~(1u << 28u);
    }

    /**
     * Toggle TCR2's BCI bit.
     *
     * Bit Clock Input
     */
    inline void toggle_TCR2_BCI() volatile
    {
        TCR2 ^= 1u << 28u;
    }

    /**
     * Get TCR2's MSEL field.
     *
     * MCLK Select
     */
    inline SAI1_TCR2_MSEL get_TCR2_MSEL() volatile
    {
        return SAI1_TCR2_MSEL((TCR2 >> 26u) & 0b11u);
    }

    /**
     * Set TCR2's MSEL field.
     *
     * MCLK Select
     */
    inline void set_TCR2_MSEL(SAI1_TCR2_MSEL value) volatile
    {
        uint32_t curr = TCR2;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        TCR2 = curr;
    }

    /**
     * Get TCR2's BCP bit.
     *
     * Bit Clock Polarity
     */
    inline bool get_TCR2_BCP() volatile
    {
        return TCR2 & (1u << 25u);
    }

    /**
     * Set TCR2's BCP bit.
     *
     * Bit Clock Polarity
     */
    inline void set_TCR2_BCP() volatile
    {
        TCR2 |= 1u << 25u;
    }

    /**
     * Clear TCR2's BCP bit.
     *
     * Bit Clock Polarity
     */
    inline void clear_TCR2_BCP() volatile
    {
        TCR2 &= ~(1u << 25u);
    }

    /**
     * Toggle TCR2's BCP bit.
     *
     * Bit Clock Polarity
     */
    inline void toggle_TCR2_BCP() volatile
    {
        TCR2 ^= 1u << 25u;
    }

    /**
     * Get TCR2's BCD bit.
     *
     * Bit Clock Direction
     */
    inline bool get_TCR2_BCD() volatile
    {
        return TCR2 & (1u << 24u);
    }

    /**
     * Set TCR2's BCD bit.
     *
     * Bit Clock Direction
     */
    inline void set_TCR2_BCD() volatile
    {
        TCR2 |= 1u << 24u;
    }

    /**
     * Clear TCR2's BCD bit.
     *
     * Bit Clock Direction
     */
    inline void clear_TCR2_BCD() volatile
    {
        TCR2 &= ~(1u << 24u);
    }

    /**
     * Toggle TCR2's BCD bit.
     *
     * Bit Clock Direction
     */
    inline void toggle_TCR2_BCD() volatile
    {
        TCR2 ^= 1u << 24u;
    }

    /**
     * Get TCR2's BYP bit.
     *
     * Bit Clock Bypass
     */
    inline bool get_TCR2_BYP() volatile
    {
        return TCR2 & (1u << 23u);
    }

    /**
     * Set TCR2's BYP bit.
     *
     * Bit Clock Bypass
     */
    inline void set_TCR2_BYP() volatile
    {
        TCR2 |= 1u << 23u;
    }

    /**
     * Clear TCR2's BYP bit.
     *
     * Bit Clock Bypass
     */
    inline void clear_TCR2_BYP() volatile
    {
        TCR2 &= ~(1u << 23u);
    }

    /**
     * Toggle TCR2's BYP bit.
     *
     * Bit Clock Bypass
     */
    inline void toggle_TCR2_BYP() volatile
    {
        TCR2 ^= 1u << 23u;
    }

    /**
     * Get TCR2's DIV field.
     *
     * Bit Clock Divide
     */
    inline uint8_t get_TCR2_DIV() volatile
    {
        return (TCR2 >> 0u) & 0b11111111u;
    }

    /**
     * Set TCR2's DIV field.
     *
     * Bit Clock Divide
     */
    inline void set_TCR2_DIV(uint8_t value) volatile
    {
        uint32_t curr = TCR2;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        TCR2 = curr;
    }

    /**
     * Get all of TCR2's bit fields.
     *
     * (read-write) Transmit Configuration 2
     */
    inline void get_TCR2(bool &SYNC, bool &BCS, bool &BCI,
                         SAI1_TCR2_MSEL &MSEL, bool &BCP, bool &BCD, bool &BYP,
                         uint8_t &DIV) volatile
    {
        uint32_t curr = TCR2;

        SYNC = curr & (1u << 30u);
        BCS = curr & (1u << 29u);
        BCI = curr & (1u << 28u);
        MSEL = SAI1_TCR2_MSEL((curr >> 26u) & 0b11u);
        BCP = curr & (1u << 25u);
        BCD = curr & (1u << 24u);
        BYP = curr & (1u << 23u);
        DIV = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of TCR2's bit fields.
     *
     * (read-write) Transmit Configuration 2
     */
    inline void set_TCR2(bool SYNC, bool BCS, bool BCI, SAI1_TCR2_MSEL MSEL,
                         bool BCP, bool BCD, bool BYP, uint8_t DIV) volatile
    {
        uint32_t curr = TCR2;

        curr &= ~(0b1u << 30u);
        curr |= (SYNC & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (BCS & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (BCI & 0b1u) << 28u;
        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(MSEL) & 0b11u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (BCP & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (BCD & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (BYP & 0b1u) << 23u;
        curr &= ~(0b11111111u << 0u);
        curr |= (DIV & 0b11111111u) << 0u;

        TCR2 = curr;
    }

    /**
     * Get TCR3's CFR field.
     *
     * Channel FIFO Reset
     */
    inline uint8_t get_TCR3_CFR() volatile
    {
        return (TCR3 >> 24u) & 0b1111u;
    }

    /**
     * Set TCR3's CFR field.
     *
     * Channel FIFO Reset
     */
    inline void set_TCR3_CFR(uint8_t value) volatile
    {
        uint32_t curr = TCR3;

        curr &= ~(0b1111u << 24u);
        curr |= (value & 0b1111u) << 24u;

        TCR3 = curr;
    }

    /**
     * Get TCR3's TCE field.
     *
     * Transmit Channel Enable
     */
    inline uint8_t get_TCR3_TCE() volatile
    {
        return (TCR3 >> 16u) & 0b1111u;
    }

    /**
     * Set TCR3's TCE field.
     *
     * Transmit Channel Enable
     */
    inline void set_TCR3_TCE(uint8_t value) volatile
    {
        uint32_t curr = TCR3;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        TCR3 = curr;
    }

    /**
     * Get TCR3's WDFL field.
     *
     * Word Flag Configuration
     */
    inline uint8_t get_TCR3_WDFL() volatile
    {
        return (TCR3 >> 0u) & 0b11111u;
    }

    /**
     * Set TCR3's WDFL field.
     *
     * Word Flag Configuration
     */
    inline void set_TCR3_WDFL(uint8_t value) volatile
    {
        uint32_t curr = TCR3;

        curr &= ~(0b11111u << 0u);
        curr |= (value & 0b11111u) << 0u;

        TCR3 = curr;
    }

    /**
     * Get all of TCR3's bit fields.
     *
     * (read-write) Transmit Configuration 3
     */
    inline void get_TCR3(uint8_t &CFR, uint8_t &TCE, uint8_t &WDFL) volatile
    {
        uint32_t curr = TCR3;

        CFR = (curr >> 24u) & 0b1111u;
        TCE = (curr >> 16u) & 0b1111u;
        WDFL = (curr >> 0u) & 0b11111u;
    }

    /**
     * Set all of TCR3's bit fields.
     *
     * (read-write) Transmit Configuration 3
     */
    inline void set_TCR3(uint8_t CFR, uint8_t TCE, uint8_t WDFL) volatile
    {
        uint32_t curr = TCR3;

        curr &= ~(0b1111u << 24u);
        curr |= (CFR & 0b1111u) << 24u;
        curr &= ~(0b1111u << 16u);
        curr |= (TCE & 0b1111u) << 16u;
        curr &= ~(0b11111u << 0u);
        curr |= (WDFL & 0b11111u) << 0u;

        TCR3 = curr;
    }

    /**
     * Get TCR4's FCONT bit.
     *
     * FIFO Continue on Error
     */
    inline bool get_TCR4_FCONT() volatile
    {
        return TCR4 & (1u << 28u);
    }

    /**
     * Set TCR4's FCONT bit.
     *
     * FIFO Continue on Error
     */
    inline void set_TCR4_FCONT() volatile
    {
        TCR4 |= 1u << 28u;
    }

    /**
     * Clear TCR4's FCONT bit.
     *
     * FIFO Continue on Error
     */
    inline void clear_TCR4_FCONT() volatile
    {
        TCR4 &= ~(1u << 28u);
    }

    /**
     * Toggle TCR4's FCONT bit.
     *
     * FIFO Continue on Error
     */
    inline void toggle_TCR4_FCONT() volatile
    {
        TCR4 ^= 1u << 28u;
    }

    /**
     * Get TCR4's FCOMB field.
     *
     * FIFO Combine Mode
     */
    inline SAI1_TCR4_FCOMB get_TCR4_FCOMB() volatile
    {
        return SAI1_TCR4_FCOMB((TCR4 >> 26u) & 0b11u);
    }

    /**
     * Set TCR4's FCOMB field.
     *
     * FIFO Combine Mode
     */
    inline void set_TCR4_FCOMB(SAI1_TCR4_FCOMB value) volatile
    {
        uint32_t curr = TCR4;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        TCR4 = curr;
    }

    /**
     * Get TCR4's FPACK field.
     *
     * FIFO Packing Mode
     */
    inline SAI1_TCR4_FPACK get_TCR4_FPACK() volatile
    {
        return SAI1_TCR4_FPACK((TCR4 >> 24u) & 0b11u);
    }

    /**
     * Set TCR4's FPACK field.
     *
     * FIFO Packing Mode
     */
    inline void set_TCR4_FPACK(SAI1_TCR4_FPACK value) volatile
    {
        uint32_t curr = TCR4;

        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(value) & 0b11u) << 24u;

        TCR4 = curr;
    }

    /**
     * Get TCR4's FRSZ field.
     *
     * Frame size
     */
    inline uint8_t get_TCR4_FRSZ() volatile
    {
        return (TCR4 >> 16u) & 0b11111u;
    }

    /**
     * Set TCR4's FRSZ field.
     *
     * Frame size
     */
    inline void set_TCR4_FRSZ(uint8_t value) volatile
    {
        uint32_t curr = TCR4;

        curr &= ~(0b11111u << 16u);
        curr |= (value & 0b11111u) << 16u;

        TCR4 = curr;
    }

    /**
     * Get TCR4's SYWD field.
     *
     * Sync Width
     */
    inline uint8_t get_TCR4_SYWD() volatile
    {
        return (TCR4 >> 8u) & 0b11111u;
    }

    /**
     * Set TCR4's SYWD field.
     *
     * Sync Width
     */
    inline void set_TCR4_SYWD(uint8_t value) volatile
    {
        uint32_t curr = TCR4;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCR4 = curr;
    }

    /**
     * Get TCR4's CHMOD bit.
     *
     * Channel Mode
     */
    inline bool get_TCR4_CHMOD() volatile
    {
        return TCR4 & (1u << 5u);
    }

    /**
     * Set TCR4's CHMOD bit.
     *
     * Channel Mode
     */
    inline void set_TCR4_CHMOD() volatile
    {
        TCR4 |= 1u << 5u;
    }

    /**
     * Clear TCR4's CHMOD bit.
     *
     * Channel Mode
     */
    inline void clear_TCR4_CHMOD() volatile
    {
        TCR4 &= ~(1u << 5u);
    }

    /**
     * Toggle TCR4's CHMOD bit.
     *
     * Channel Mode
     */
    inline void toggle_TCR4_CHMOD() volatile
    {
        TCR4 ^= 1u << 5u;
    }

    /**
     * Get TCR4's MF bit.
     *
     * MSB First
     */
    inline bool get_TCR4_MF() volatile
    {
        return TCR4 & (1u << 4u);
    }

    /**
     * Set TCR4's MF bit.
     *
     * MSB First
     */
    inline void set_TCR4_MF() volatile
    {
        TCR4 |= 1u << 4u;
    }

    /**
     * Clear TCR4's MF bit.
     *
     * MSB First
     */
    inline void clear_TCR4_MF() volatile
    {
        TCR4 &= ~(1u << 4u);
    }

    /**
     * Toggle TCR4's MF bit.
     *
     * MSB First
     */
    inline void toggle_TCR4_MF() volatile
    {
        TCR4 ^= 1u << 4u;
    }

    /**
     * Get TCR4's FSE bit.
     *
     * Frame Sync Early
     */
    inline bool get_TCR4_FSE() volatile
    {
        return TCR4 & (1u << 3u);
    }

    /**
     * Set TCR4's FSE bit.
     *
     * Frame Sync Early
     */
    inline void set_TCR4_FSE() volatile
    {
        TCR4 |= 1u << 3u;
    }

    /**
     * Clear TCR4's FSE bit.
     *
     * Frame Sync Early
     */
    inline void clear_TCR4_FSE() volatile
    {
        TCR4 &= ~(1u << 3u);
    }

    /**
     * Toggle TCR4's FSE bit.
     *
     * Frame Sync Early
     */
    inline void toggle_TCR4_FSE() volatile
    {
        TCR4 ^= 1u << 3u;
    }

    /**
     * Get TCR4's ONDEM bit.
     *
     * On Demand Mode
     */
    inline bool get_TCR4_ONDEM() volatile
    {
        return TCR4 & (1u << 2u);
    }

    /**
     * Set TCR4's ONDEM bit.
     *
     * On Demand Mode
     */
    inline void set_TCR4_ONDEM() volatile
    {
        TCR4 |= 1u << 2u;
    }

    /**
     * Clear TCR4's ONDEM bit.
     *
     * On Demand Mode
     */
    inline void clear_TCR4_ONDEM() volatile
    {
        TCR4 &= ~(1u << 2u);
    }

    /**
     * Toggle TCR4's ONDEM bit.
     *
     * On Demand Mode
     */
    inline void toggle_TCR4_ONDEM() volatile
    {
        TCR4 ^= 1u << 2u;
    }

    /**
     * Get TCR4's FSP bit.
     *
     * Frame Sync Polarity
     */
    inline bool get_TCR4_FSP() volatile
    {
        return TCR4 & (1u << 1u);
    }

    /**
     * Set TCR4's FSP bit.
     *
     * Frame Sync Polarity
     */
    inline void set_TCR4_FSP() volatile
    {
        TCR4 |= 1u << 1u;
    }

    /**
     * Clear TCR4's FSP bit.
     *
     * Frame Sync Polarity
     */
    inline void clear_TCR4_FSP() volatile
    {
        TCR4 &= ~(1u << 1u);
    }

    /**
     * Toggle TCR4's FSP bit.
     *
     * Frame Sync Polarity
     */
    inline void toggle_TCR4_FSP() volatile
    {
        TCR4 ^= 1u << 1u;
    }

    /**
     * Get TCR4's FSD bit.
     *
     * Frame Sync Direction
     */
    inline bool get_TCR4_FSD() volatile
    {
        return TCR4 & (1u << 0u);
    }

    /**
     * Set TCR4's FSD bit.
     *
     * Frame Sync Direction
     */
    inline void set_TCR4_FSD() volatile
    {
        TCR4 |= 1u << 0u;
    }

    /**
     * Clear TCR4's FSD bit.
     *
     * Frame Sync Direction
     */
    inline void clear_TCR4_FSD() volatile
    {
        TCR4 &= ~(1u << 0u);
    }

    /**
     * Toggle TCR4's FSD bit.
     *
     * Frame Sync Direction
     */
    inline void toggle_TCR4_FSD() volatile
    {
        TCR4 ^= 1u << 0u;
    }

    /**
     * Get all of TCR4's bit fields.
     *
     * (read-write) Transmit Configuration 4
     */
    inline void get_TCR4(bool &FCONT, SAI1_TCR4_FCOMB &FCOMB,
                         SAI1_TCR4_FPACK &FPACK, uint8_t &FRSZ, uint8_t &SYWD,
                         bool &CHMOD, bool &MF, bool &FSE, bool &ONDEM,
                         bool &FSP, bool &FSD) volatile
    {
        uint32_t curr = TCR4;

        FCONT = curr & (1u << 28u);
        FCOMB = SAI1_TCR4_FCOMB((curr >> 26u) & 0b11u);
        FPACK = SAI1_TCR4_FPACK((curr >> 24u) & 0b11u);
        FRSZ = (curr >> 16u) & 0b11111u;
        SYWD = (curr >> 8u) & 0b11111u;
        CHMOD = curr & (1u << 5u);
        MF = curr & (1u << 4u);
        FSE = curr & (1u << 3u);
        ONDEM = curr & (1u << 2u);
        FSP = curr & (1u << 1u);
        FSD = curr & (1u << 0u);
    }

    /**
     * Set all of TCR4's bit fields.
     *
     * (read-write) Transmit Configuration 4
     */
    inline void set_TCR4(bool FCONT, SAI1_TCR4_FCOMB FCOMB,
                         SAI1_TCR4_FPACK FPACK, uint8_t FRSZ, uint8_t SYWD,
                         bool CHMOD, bool MF, bool FSE, bool ONDEM, bool FSP,
                         bool FSD) volatile
    {
        uint32_t curr = TCR4;

        curr &= ~(0b1u << 28u);
        curr |= (FCONT & 0b1u) << 28u;
        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(FCOMB) & 0b11u) << 26u;
        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(FPACK) & 0b11u) << 24u;
        curr &= ~(0b11111u << 16u);
        curr |= (FRSZ & 0b11111u) << 16u;
        curr &= ~(0b11111u << 8u);
        curr |= (SYWD & 0b11111u) << 8u;
        curr &= ~(0b1u << 5u);
        curr |= (CHMOD & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (MF & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (FSE & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (ONDEM & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (FSP & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (FSD & 0b1u) << 0u;

        TCR4 = curr;
    }

    /**
     * Get TCR5's WNW field.
     *
     * Word N Width
     */
    inline uint8_t get_TCR5_WNW() volatile
    {
        return (TCR5 >> 24u) & 0b11111u;
    }

    /**
     * Set TCR5's WNW field.
     *
     * Word N Width
     */
    inline void set_TCR5_WNW(uint8_t value) volatile
    {
        uint32_t curr = TCR5;

        curr &= ~(0b11111u << 24u);
        curr |= (value & 0b11111u) << 24u;

        TCR5 = curr;
    }

    /**
     * Get TCR5's W0W field.
     *
     * Word 0 Width
     */
    inline uint8_t get_TCR5_W0W() volatile
    {
        return (TCR5 >> 16u) & 0b11111u;
    }

    /**
     * Set TCR5's W0W field.
     *
     * Word 0 Width
     */
    inline void set_TCR5_W0W(uint8_t value) volatile
    {
        uint32_t curr = TCR5;

        curr &= ~(0b11111u << 16u);
        curr |= (value & 0b11111u) << 16u;

        TCR5 = curr;
    }

    /**
     * Get TCR5's FBT field.
     *
     * First Bit Shifted
     */
    inline uint8_t get_TCR5_FBT() volatile
    {
        return (TCR5 >> 8u) & 0b11111u;
    }

    /**
     * Set TCR5's FBT field.
     *
     * First Bit Shifted
     */
    inline void set_TCR5_FBT(uint8_t value) volatile
    {
        uint32_t curr = TCR5;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        TCR5 = curr;
    }

    /**
     * Get all of TCR5's bit fields.
     *
     * (read-write) Transmit Configuration 5
     */
    inline void get_TCR5(uint8_t &WNW, uint8_t &W0W, uint8_t &FBT) volatile
    {
        uint32_t curr = TCR5;

        WNW = (curr >> 24u) & 0b11111u;
        W0W = (curr >> 16u) & 0b11111u;
        FBT = (curr >> 8u) & 0b11111u;
    }

    /**
     * Set all of TCR5's bit fields.
     *
     * (read-write) Transmit Configuration 5
     */
    inline void set_TCR5(uint8_t WNW, uint8_t W0W, uint8_t FBT) volatile
    {
        uint32_t curr = TCR5;

        curr &= ~(0b11111u << 24u);
        curr |= (WNW & 0b11111u) << 24u;
        curr &= ~(0b11111u << 16u);
        curr |= (W0W & 0b11111u) << 16u;
        curr &= ~(0b11111u << 8u);
        curr |= (FBT & 0b11111u) << 8u;

        TCR5 = curr;
    }

    /**
     * Get TDR's TDR field.
     *
     * Transmit Data Register
     */
    inline uint32_t get_TDR_TDR(std::size_t index) volatile
    {
        return (TDR[index] >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TDR's TDR field.
     *
     * Transmit Data Register
     */
    inline void set_TDR_TDR(std::size_t index, uint32_t value) volatile
    {
        uint32_t curr = TDR[index];

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TDR[index] = curr;
    }

    /**
     * Get TFR's WCP bit.
     *
     * Write Channel Pointer
     */
    inline bool get_TFR_WCP(std::size_t index) volatile
    {
        return TFR[index] & (1u << 31u);
    }

    /**
     * Get TFR's WFP field.
     *
     * Write FIFO Pointer
     */
    inline uint8_t get_TFR_WFP(std::size_t index) volatile
    {
        return (TFR[index] >> 16u) & 0b111111u;
    }

    /**
     * Get TFR's RFP field.
     *
     * Read FIFO Pointer
     */
    inline uint8_t get_TFR_RFP(std::size_t index) volatile
    {
        return (TFR[index] >> 0u) & 0b111111u;
    }

    /**
     * Get all of TFR's bit fields.
     *
     * (read-write) Transmit FIFO
     */
    inline void get_TFR(std::size_t index, bool &WCP, uint8_t &WFP,
                        uint8_t &RFP) volatile
    {
        uint32_t curr = TFR[index];

        WCP = curr & (1u << 31u);
        WFP = (curr >> 16u) & 0b111111u;
        RFP = (curr >> 0u) & 0b111111u;
    }

    /**
     * Get TMR's TWM field.
     *
     * Transmit Word Mask
     */
    inline SAI1_TMR_TWM get_TMR_TWM() volatile
    {
        return SAI1_TMR_TWM((TMR >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set TMR's TWM field.
     *
     * Transmit Word Mask
     */
    inline void set_TMR_TWM(SAI1_TMR_TWM value) volatile
    {
        uint32_t curr = TMR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |=
            (std::to_underlying(value) & 0b11111111111111111111111111111111u)
            << 0u;

        TMR = curr;
    }

    /**
     * Get RCSR's RE bit.
     *
     * Receiver Enable
     */
    inline bool get_RCSR_RE() volatile
    {
        return RCSR & (1u << 31u);
    }

    /**
     * Set RCSR's RE bit.
     *
     * Receiver Enable
     */
    inline void set_RCSR_RE() volatile
    {
        RCSR |= 1u << 31u;
    }

    /**
     * Clear RCSR's RE bit.
     *
     * Receiver Enable
     */
    inline void clear_RCSR_RE() volatile
    {
        RCSR &= ~(1u << 31u);
    }

    /**
     * Toggle RCSR's RE bit.
     *
     * Receiver Enable
     */
    inline void toggle_RCSR_RE() volatile
    {
        RCSR ^= 1u << 31u;
    }

    /**
     * Get RCSR's STOPE bit.
     *
     * Stop Enable
     */
    inline bool get_RCSR_STOPE() volatile
    {
        return RCSR & (1u << 30u);
    }

    /**
     * Set RCSR's STOPE bit.
     *
     * Stop Enable
     */
    inline void set_RCSR_STOPE() volatile
    {
        RCSR |= 1u << 30u;
    }

    /**
     * Clear RCSR's STOPE bit.
     *
     * Stop Enable
     */
    inline void clear_RCSR_STOPE() volatile
    {
        RCSR &= ~(1u << 30u);
    }

    /**
     * Toggle RCSR's STOPE bit.
     *
     * Stop Enable
     */
    inline void toggle_RCSR_STOPE() volatile
    {
        RCSR ^= 1u << 30u;
    }

    /**
     * Get RCSR's DBGE bit.
     *
     * Debug Enable
     */
    inline bool get_RCSR_DBGE() volatile
    {
        return RCSR & (1u << 29u);
    }

    /**
     * Set RCSR's DBGE bit.
     *
     * Debug Enable
     */
    inline void set_RCSR_DBGE() volatile
    {
        RCSR |= 1u << 29u;
    }

    /**
     * Clear RCSR's DBGE bit.
     *
     * Debug Enable
     */
    inline void clear_RCSR_DBGE() volatile
    {
        RCSR &= ~(1u << 29u);
    }

    /**
     * Toggle RCSR's DBGE bit.
     *
     * Debug Enable
     */
    inline void toggle_RCSR_DBGE() volatile
    {
        RCSR ^= 1u << 29u;
    }

    /**
     * Get RCSR's BCE bit.
     *
     * Bit Clock Enable
     */
    inline bool get_RCSR_BCE() volatile
    {
        return RCSR & (1u << 28u);
    }

    /**
     * Set RCSR's BCE bit.
     *
     * Bit Clock Enable
     */
    inline void set_RCSR_BCE() volatile
    {
        RCSR |= 1u << 28u;
    }

    /**
     * Clear RCSR's BCE bit.
     *
     * Bit Clock Enable
     */
    inline void clear_RCSR_BCE() volatile
    {
        RCSR &= ~(1u << 28u);
    }

    /**
     * Toggle RCSR's BCE bit.
     *
     * Bit Clock Enable
     */
    inline void toggle_RCSR_BCE() volatile
    {
        RCSR ^= 1u << 28u;
    }

    /**
     * Get RCSR's FR bit.
     *
     * FIFO Reset
     */
    inline bool get_RCSR_FR() volatile
    {
        return RCSR & (1u << 25u);
    }

    /**
     * Set RCSR's FR bit.
     *
     * FIFO Reset
     */
    inline void set_RCSR_FR() volatile
    {
        RCSR |= 1u << 25u;
    }

    /**
     * Clear RCSR's FR bit.
     *
     * FIFO Reset
     */
    inline void clear_RCSR_FR() volatile
    {
        RCSR &= ~(1u << 25u);
    }

    /**
     * Toggle RCSR's FR bit.
     *
     * FIFO Reset
     */
    inline void toggle_RCSR_FR() volatile
    {
        RCSR ^= 1u << 25u;
    }

    /**
     * Get RCSR's SR bit.
     *
     * Software Reset
     */
    inline bool get_RCSR_SR() volatile
    {
        return RCSR & (1u << 24u);
    }

    /**
     * Set RCSR's SR bit.
     *
     * Software Reset
     */
    inline void set_RCSR_SR() volatile
    {
        RCSR |= 1u << 24u;
    }

    /**
     * Clear RCSR's SR bit.
     *
     * Software Reset
     */
    inline void clear_RCSR_SR() volatile
    {
        RCSR &= ~(1u << 24u);
    }

    /**
     * Toggle RCSR's SR bit.
     *
     * Software Reset
     */
    inline void toggle_RCSR_SR() volatile
    {
        RCSR ^= 1u << 24u;
    }

    /**
     * Get RCSR's WSF bit.
     *
     * Word Start Flag
     */
    inline bool get_RCSR_WSF() volatile
    {
        return RCSR & (1u << 20u);
    }

    /**
     * Set RCSR's WSF bit.
     *
     * Word Start Flag
     */
    inline void set_RCSR_WSF() volatile
    {
        RCSR |= 1u << 20u;
    }

    /**
     * Clear RCSR's WSF bit.
     *
     * Word Start Flag
     */
    inline void clear_RCSR_WSF() volatile
    {
        RCSR &= ~(1u << 20u);
    }

    /**
     * Toggle RCSR's WSF bit.
     *
     * Word Start Flag
     */
    inline void toggle_RCSR_WSF() volatile
    {
        RCSR ^= 1u << 20u;
    }

    /**
     * Get RCSR's SEF bit.
     *
     * Sync Error Flag
     */
    inline bool get_RCSR_SEF() volatile
    {
        return RCSR & (1u << 19u);
    }

    /**
     * Set RCSR's SEF bit.
     *
     * Sync Error Flag
     */
    inline void set_RCSR_SEF() volatile
    {
        RCSR |= 1u << 19u;
    }

    /**
     * Clear RCSR's SEF bit.
     *
     * Sync Error Flag
     */
    inline void clear_RCSR_SEF() volatile
    {
        RCSR &= ~(1u << 19u);
    }

    /**
     * Toggle RCSR's SEF bit.
     *
     * Sync Error Flag
     */
    inline void toggle_RCSR_SEF() volatile
    {
        RCSR ^= 1u << 19u;
    }

    /**
     * Get RCSR's FEF bit.
     *
     * FIFO Error Flag
     */
    inline bool get_RCSR_FEF() volatile
    {
        return RCSR & (1u << 18u);
    }

    /**
     * Set RCSR's FEF bit.
     *
     * FIFO Error Flag
     */
    inline void set_RCSR_FEF() volatile
    {
        RCSR |= 1u << 18u;
    }

    /**
     * Clear RCSR's FEF bit.
     *
     * FIFO Error Flag
     */
    inline void clear_RCSR_FEF() volatile
    {
        RCSR &= ~(1u << 18u);
    }

    /**
     * Toggle RCSR's FEF bit.
     *
     * FIFO Error Flag
     */
    inline void toggle_RCSR_FEF() volatile
    {
        RCSR ^= 1u << 18u;
    }

    /**
     * Get RCSR's FWF bit.
     *
     * FIFO Warning Flag
     */
    inline bool get_RCSR_FWF() volatile
    {
        return RCSR & (1u << 17u);
    }

    /**
     * Get RCSR's FRF bit.
     *
     * FIFO Request Flag
     */
    inline bool get_RCSR_FRF() volatile
    {
        return RCSR & (1u << 16u);
    }

    /**
     * Get RCSR's WSIE bit.
     *
     * Word Start Interrupt Enable
     */
    inline bool get_RCSR_WSIE() volatile
    {
        return RCSR & (1u << 12u);
    }

    /**
     * Set RCSR's WSIE bit.
     *
     * Word Start Interrupt Enable
     */
    inline void set_RCSR_WSIE() volatile
    {
        RCSR |= 1u << 12u;
    }

    /**
     * Clear RCSR's WSIE bit.
     *
     * Word Start Interrupt Enable
     */
    inline void clear_RCSR_WSIE() volatile
    {
        RCSR &= ~(1u << 12u);
    }

    /**
     * Toggle RCSR's WSIE bit.
     *
     * Word Start Interrupt Enable
     */
    inline void toggle_RCSR_WSIE() volatile
    {
        RCSR ^= 1u << 12u;
    }

    /**
     * Get RCSR's SEIE bit.
     *
     * Sync Error Interrupt Enable
     */
    inline bool get_RCSR_SEIE() volatile
    {
        return RCSR & (1u << 11u);
    }

    /**
     * Set RCSR's SEIE bit.
     *
     * Sync Error Interrupt Enable
     */
    inline void set_RCSR_SEIE() volatile
    {
        RCSR |= 1u << 11u;
    }

    /**
     * Clear RCSR's SEIE bit.
     *
     * Sync Error Interrupt Enable
     */
    inline void clear_RCSR_SEIE() volatile
    {
        RCSR &= ~(1u << 11u);
    }

    /**
     * Toggle RCSR's SEIE bit.
     *
     * Sync Error Interrupt Enable
     */
    inline void toggle_RCSR_SEIE() volatile
    {
        RCSR ^= 1u << 11u;
    }

    /**
     * Get RCSR's FEIE bit.
     *
     * FIFO Error Interrupt Enable
     */
    inline bool get_RCSR_FEIE() volatile
    {
        return RCSR & (1u << 10u);
    }

    /**
     * Set RCSR's FEIE bit.
     *
     * FIFO Error Interrupt Enable
     */
    inline void set_RCSR_FEIE() volatile
    {
        RCSR |= 1u << 10u;
    }

    /**
     * Clear RCSR's FEIE bit.
     *
     * FIFO Error Interrupt Enable
     */
    inline void clear_RCSR_FEIE() volatile
    {
        RCSR &= ~(1u << 10u);
    }

    /**
     * Toggle RCSR's FEIE bit.
     *
     * FIFO Error Interrupt Enable
     */
    inline void toggle_RCSR_FEIE() volatile
    {
        RCSR ^= 1u << 10u;
    }

    /**
     * Get RCSR's FWIE bit.
     *
     * FIFO Warning Interrupt Enable
     */
    inline bool get_RCSR_FWIE() volatile
    {
        return RCSR & (1u << 9u);
    }

    /**
     * Set RCSR's FWIE bit.
     *
     * FIFO Warning Interrupt Enable
     */
    inline void set_RCSR_FWIE() volatile
    {
        RCSR |= 1u << 9u;
    }

    /**
     * Clear RCSR's FWIE bit.
     *
     * FIFO Warning Interrupt Enable
     */
    inline void clear_RCSR_FWIE() volatile
    {
        RCSR &= ~(1u << 9u);
    }

    /**
     * Toggle RCSR's FWIE bit.
     *
     * FIFO Warning Interrupt Enable
     */
    inline void toggle_RCSR_FWIE() volatile
    {
        RCSR ^= 1u << 9u;
    }

    /**
     * Get RCSR's FRIE bit.
     *
     * FIFO Request Interrupt Enable
     */
    inline bool get_RCSR_FRIE() volatile
    {
        return RCSR & (1u << 8u);
    }

    /**
     * Set RCSR's FRIE bit.
     *
     * FIFO Request Interrupt Enable
     */
    inline void set_RCSR_FRIE() volatile
    {
        RCSR |= 1u << 8u;
    }

    /**
     * Clear RCSR's FRIE bit.
     *
     * FIFO Request Interrupt Enable
     */
    inline void clear_RCSR_FRIE() volatile
    {
        RCSR &= ~(1u << 8u);
    }

    /**
     * Toggle RCSR's FRIE bit.
     *
     * FIFO Request Interrupt Enable
     */
    inline void toggle_RCSR_FRIE() volatile
    {
        RCSR ^= 1u << 8u;
    }

    /**
     * Get RCSR's FWDE bit.
     *
     * FIFO Warning DMA Enable
     */
    inline bool get_RCSR_FWDE() volatile
    {
        return RCSR & (1u << 1u);
    }

    /**
     * Set RCSR's FWDE bit.
     *
     * FIFO Warning DMA Enable
     */
    inline void set_RCSR_FWDE() volatile
    {
        RCSR |= 1u << 1u;
    }

    /**
     * Clear RCSR's FWDE bit.
     *
     * FIFO Warning DMA Enable
     */
    inline void clear_RCSR_FWDE() volatile
    {
        RCSR &= ~(1u << 1u);
    }

    /**
     * Toggle RCSR's FWDE bit.
     *
     * FIFO Warning DMA Enable
     */
    inline void toggle_RCSR_FWDE() volatile
    {
        RCSR ^= 1u << 1u;
    }

    /**
     * Get RCSR's FRDE bit.
     *
     * FIFO Request DMA Enable
     */
    inline bool get_RCSR_FRDE() volatile
    {
        return RCSR & (1u << 0u);
    }

    /**
     * Set RCSR's FRDE bit.
     *
     * FIFO Request DMA Enable
     */
    inline void set_RCSR_FRDE() volatile
    {
        RCSR |= 1u << 0u;
    }

    /**
     * Clear RCSR's FRDE bit.
     *
     * FIFO Request DMA Enable
     */
    inline void clear_RCSR_FRDE() volatile
    {
        RCSR &= ~(1u << 0u);
    }

    /**
     * Toggle RCSR's FRDE bit.
     *
     * FIFO Request DMA Enable
     */
    inline void toggle_RCSR_FRDE() volatile
    {
        RCSR ^= 1u << 0u;
    }

    /**
     * Get all of RCSR's bit fields.
     *
     * (read-write) Receive Control
     */
    inline void get_RCSR(bool &RE, bool &STOPE, bool &DBGE, bool &BCE,
                         bool &FR, bool &SR, bool &WSF, bool &SEF, bool &FEF,
                         bool &FWF, bool &FRF, bool &WSIE, bool &SEIE,
                         bool &FEIE, bool &FWIE, bool &FRIE, bool &FWDE,
                         bool &FRDE) volatile
    {
        uint32_t curr = RCSR;

        RE = curr & (1u << 31u);
        STOPE = curr & (1u << 30u);
        DBGE = curr & (1u << 29u);
        BCE = curr & (1u << 28u);
        FR = curr & (1u << 25u);
        SR = curr & (1u << 24u);
        WSF = curr & (1u << 20u);
        SEF = curr & (1u << 19u);
        FEF = curr & (1u << 18u);
        FWF = curr & (1u << 17u);
        FRF = curr & (1u << 16u);
        WSIE = curr & (1u << 12u);
        SEIE = curr & (1u << 11u);
        FEIE = curr & (1u << 10u);
        FWIE = curr & (1u << 9u);
        FRIE = curr & (1u << 8u);
        FWDE = curr & (1u << 1u);
        FRDE = curr & (1u << 0u);
    }

    /**
     * Set all of RCSR's bit fields.
     *
     * (read-write) Receive Control
     */
    inline void set_RCSR(bool RE, bool STOPE, bool DBGE, bool BCE, bool FR,
                         bool SR, bool WSF, bool SEF, bool FEF, bool WSIE,
                         bool SEIE, bool FEIE, bool FWIE, bool FRIE, bool FWDE,
                         bool FRDE) volatile
    {
        uint32_t curr = RCSR;

        curr &= ~(0b1u << 31u);
        curr |= (RE & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (STOPE & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (DBGE & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (BCE & 0b1u) << 28u;
        curr &= ~(0b1u << 25u);
        curr |= (FR & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (SR & 0b1u) << 24u;
        curr &= ~(0b1u << 20u);
        curr |= (WSF & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (SEF & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (FEF & 0b1u) << 18u;
        curr &= ~(0b1u << 12u);
        curr |= (WSIE & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (SEIE & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (FEIE & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (FWIE & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (FRIE & 0b1u) << 8u;
        curr &= ~(0b1u << 1u);
        curr |= (FWDE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (FRDE & 0b1u) << 0u;

        RCSR = curr;
    }

    /**
     * Get RCR1's RFW field.
     *
     * Receive FIFO Watermark
     */
    inline uint8_t get_RCR1_RFW() volatile
    {
        return (RCR1 >> 0u) & 0b11111u;
    }

    /**
     * Set RCR1's RFW field.
     *
     * Receive FIFO Watermark
     */
    inline void set_RCR1_RFW(uint8_t value) volatile
    {
        uint32_t curr = RCR1;

        curr &= ~(0b11111u << 0u);
        curr |= (value & 0b11111u) << 0u;

        RCR1 = curr;
    }

    /**
     * Get RCR2's SYNC bit.
     *
     * Synchronous Mode
     */
    inline bool get_RCR2_SYNC() volatile
    {
        return RCR2 & (1u << 30u);
    }

    /**
     * Set RCR2's SYNC bit.
     *
     * Synchronous Mode
     */
    inline void set_RCR2_SYNC() volatile
    {
        RCR2 |= 1u << 30u;
    }

    /**
     * Clear RCR2's SYNC bit.
     *
     * Synchronous Mode
     */
    inline void clear_RCR2_SYNC() volatile
    {
        RCR2 &= ~(1u << 30u);
    }

    /**
     * Toggle RCR2's SYNC bit.
     *
     * Synchronous Mode
     */
    inline void toggle_RCR2_SYNC() volatile
    {
        RCR2 ^= 1u << 30u;
    }

    /**
     * Get RCR2's BCS bit.
     *
     * Bit Clock Swap
     */
    inline bool get_RCR2_BCS() volatile
    {
        return RCR2 & (1u << 29u);
    }

    /**
     * Set RCR2's BCS bit.
     *
     * Bit Clock Swap
     */
    inline void set_RCR2_BCS() volatile
    {
        RCR2 |= 1u << 29u;
    }

    /**
     * Clear RCR2's BCS bit.
     *
     * Bit Clock Swap
     */
    inline void clear_RCR2_BCS() volatile
    {
        RCR2 &= ~(1u << 29u);
    }

    /**
     * Toggle RCR2's BCS bit.
     *
     * Bit Clock Swap
     */
    inline void toggle_RCR2_BCS() volatile
    {
        RCR2 ^= 1u << 29u;
    }

    /**
     * Get RCR2's BCI bit.
     *
     * Bit Clock Input
     */
    inline bool get_RCR2_BCI() volatile
    {
        return RCR2 & (1u << 28u);
    }

    /**
     * Set RCR2's BCI bit.
     *
     * Bit Clock Input
     */
    inline void set_RCR2_BCI() volatile
    {
        RCR2 |= 1u << 28u;
    }

    /**
     * Clear RCR2's BCI bit.
     *
     * Bit Clock Input
     */
    inline void clear_RCR2_BCI() volatile
    {
        RCR2 &= ~(1u << 28u);
    }

    /**
     * Toggle RCR2's BCI bit.
     *
     * Bit Clock Input
     */
    inline void toggle_RCR2_BCI() volatile
    {
        RCR2 ^= 1u << 28u;
    }

    /**
     * Get RCR2's MSEL field.
     *
     * MCLK Select
     */
    inline SAI1_RCR2_MSEL get_RCR2_MSEL() volatile
    {
        return SAI1_RCR2_MSEL((RCR2 >> 26u) & 0b11u);
    }

    /**
     * Set RCR2's MSEL field.
     *
     * MCLK Select
     */
    inline void set_RCR2_MSEL(SAI1_RCR2_MSEL value) volatile
    {
        uint32_t curr = RCR2;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        RCR2 = curr;
    }

    /**
     * Get RCR2's BCP bit.
     *
     * Bit Clock Polarity
     */
    inline bool get_RCR2_BCP() volatile
    {
        return RCR2 & (1u << 25u);
    }

    /**
     * Set RCR2's BCP bit.
     *
     * Bit Clock Polarity
     */
    inline void set_RCR2_BCP() volatile
    {
        RCR2 |= 1u << 25u;
    }

    /**
     * Clear RCR2's BCP bit.
     *
     * Bit Clock Polarity
     */
    inline void clear_RCR2_BCP() volatile
    {
        RCR2 &= ~(1u << 25u);
    }

    /**
     * Toggle RCR2's BCP bit.
     *
     * Bit Clock Polarity
     */
    inline void toggle_RCR2_BCP() volatile
    {
        RCR2 ^= 1u << 25u;
    }

    /**
     * Get RCR2's BCD bit.
     *
     * Bit Clock Direction
     */
    inline bool get_RCR2_BCD() volatile
    {
        return RCR2 & (1u << 24u);
    }

    /**
     * Set RCR2's BCD bit.
     *
     * Bit Clock Direction
     */
    inline void set_RCR2_BCD() volatile
    {
        RCR2 |= 1u << 24u;
    }

    /**
     * Clear RCR2's BCD bit.
     *
     * Bit Clock Direction
     */
    inline void clear_RCR2_BCD() volatile
    {
        RCR2 &= ~(1u << 24u);
    }

    /**
     * Toggle RCR2's BCD bit.
     *
     * Bit Clock Direction
     */
    inline void toggle_RCR2_BCD() volatile
    {
        RCR2 ^= 1u << 24u;
    }

    /**
     * Get RCR2's BYP bit.
     *
     * Bit Clock Bypass
     */
    inline bool get_RCR2_BYP() volatile
    {
        return RCR2 & (1u << 23u);
    }

    /**
     * Set RCR2's BYP bit.
     *
     * Bit Clock Bypass
     */
    inline void set_RCR2_BYP() volatile
    {
        RCR2 |= 1u << 23u;
    }

    /**
     * Clear RCR2's BYP bit.
     *
     * Bit Clock Bypass
     */
    inline void clear_RCR2_BYP() volatile
    {
        RCR2 &= ~(1u << 23u);
    }

    /**
     * Toggle RCR2's BYP bit.
     *
     * Bit Clock Bypass
     */
    inline void toggle_RCR2_BYP() volatile
    {
        RCR2 ^= 1u << 23u;
    }

    /**
     * Get RCR2's DIV field.
     *
     * Bit Clock Divide
     */
    inline uint8_t get_RCR2_DIV() volatile
    {
        return (RCR2 >> 0u) & 0b11111111u;
    }

    /**
     * Set RCR2's DIV field.
     *
     * Bit Clock Divide
     */
    inline void set_RCR2_DIV(uint8_t value) volatile
    {
        uint32_t curr = RCR2;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        RCR2 = curr;
    }

    /**
     * Get all of RCR2's bit fields.
     *
     * (read-write) Receive Configuration 2
     */
    inline void get_RCR2(bool &SYNC, bool &BCS, bool &BCI,
                         SAI1_RCR2_MSEL &MSEL, bool &BCP, bool &BCD, bool &BYP,
                         uint8_t &DIV) volatile
    {
        uint32_t curr = RCR2;

        SYNC = curr & (1u << 30u);
        BCS = curr & (1u << 29u);
        BCI = curr & (1u << 28u);
        MSEL = SAI1_RCR2_MSEL((curr >> 26u) & 0b11u);
        BCP = curr & (1u << 25u);
        BCD = curr & (1u << 24u);
        BYP = curr & (1u << 23u);
        DIV = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of RCR2's bit fields.
     *
     * (read-write) Receive Configuration 2
     */
    inline void set_RCR2(bool SYNC, bool BCS, bool BCI, SAI1_RCR2_MSEL MSEL,
                         bool BCP, bool BCD, bool BYP, uint8_t DIV) volatile
    {
        uint32_t curr = RCR2;

        curr &= ~(0b1u << 30u);
        curr |= (SYNC & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (BCS & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (BCI & 0b1u) << 28u;
        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(MSEL) & 0b11u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (BCP & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (BCD & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (BYP & 0b1u) << 23u;
        curr &= ~(0b11111111u << 0u);
        curr |= (DIV & 0b11111111u) << 0u;

        RCR2 = curr;
    }

    /**
     * Get RCR3's CFR field.
     *
     * Channel FIFO Reset
     */
    inline uint8_t get_RCR3_CFR() volatile
    {
        return (RCR3 >> 24u) & 0b1111u;
    }

    /**
     * Set RCR3's CFR field.
     *
     * Channel FIFO Reset
     */
    inline void set_RCR3_CFR(uint8_t value) volatile
    {
        uint32_t curr = RCR3;

        curr &= ~(0b1111u << 24u);
        curr |= (value & 0b1111u) << 24u;

        RCR3 = curr;
    }

    /**
     * Get RCR3's RCE field.
     *
     * Receive Channel Enable
     */
    inline uint8_t get_RCR3_RCE() volatile
    {
        return (RCR3 >> 16u) & 0b1111u;
    }

    /**
     * Set RCR3's RCE field.
     *
     * Receive Channel Enable
     */
    inline void set_RCR3_RCE(uint8_t value) volatile
    {
        uint32_t curr = RCR3;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        RCR3 = curr;
    }

    /**
     * Get RCR3's WDFL field.
     *
     * Word Flag Configuration
     */
    inline uint8_t get_RCR3_WDFL() volatile
    {
        return (RCR3 >> 0u) & 0b11111u;
    }

    /**
     * Set RCR3's WDFL field.
     *
     * Word Flag Configuration
     */
    inline void set_RCR3_WDFL(uint8_t value) volatile
    {
        uint32_t curr = RCR3;

        curr &= ~(0b11111u << 0u);
        curr |= (value & 0b11111u) << 0u;

        RCR3 = curr;
    }

    /**
     * Get all of RCR3's bit fields.
     *
     * (read-write) Receive Configuration 3
     */
    inline void get_RCR3(uint8_t &CFR, uint8_t &RCE, uint8_t &WDFL) volatile
    {
        uint32_t curr = RCR3;

        CFR = (curr >> 24u) & 0b1111u;
        RCE = (curr >> 16u) & 0b1111u;
        WDFL = (curr >> 0u) & 0b11111u;
    }

    /**
     * Set all of RCR3's bit fields.
     *
     * (read-write) Receive Configuration 3
     */
    inline void set_RCR3(uint8_t CFR, uint8_t RCE, uint8_t WDFL) volatile
    {
        uint32_t curr = RCR3;

        curr &= ~(0b1111u << 24u);
        curr |= (CFR & 0b1111u) << 24u;
        curr &= ~(0b1111u << 16u);
        curr |= (RCE & 0b1111u) << 16u;
        curr &= ~(0b11111u << 0u);
        curr |= (WDFL & 0b11111u) << 0u;

        RCR3 = curr;
    }

    /**
     * Get RCR4's FCONT bit.
     *
     * FIFO Continue on Error
     */
    inline bool get_RCR4_FCONT() volatile
    {
        return RCR4 & (1u << 28u);
    }

    /**
     * Set RCR4's FCONT bit.
     *
     * FIFO Continue on Error
     */
    inline void set_RCR4_FCONT() volatile
    {
        RCR4 |= 1u << 28u;
    }

    /**
     * Clear RCR4's FCONT bit.
     *
     * FIFO Continue on Error
     */
    inline void clear_RCR4_FCONT() volatile
    {
        RCR4 &= ~(1u << 28u);
    }

    /**
     * Toggle RCR4's FCONT bit.
     *
     * FIFO Continue on Error
     */
    inline void toggle_RCR4_FCONT() volatile
    {
        RCR4 ^= 1u << 28u;
    }

    /**
     * Get RCR4's FCOMB field.
     *
     * FIFO Combine Mode
     */
    inline SAI1_RCR4_FCOMB get_RCR4_FCOMB() volatile
    {
        return SAI1_RCR4_FCOMB((RCR4 >> 26u) & 0b11u);
    }

    /**
     * Set RCR4's FCOMB field.
     *
     * FIFO Combine Mode
     */
    inline void set_RCR4_FCOMB(SAI1_RCR4_FCOMB value) volatile
    {
        uint32_t curr = RCR4;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        RCR4 = curr;
    }

    /**
     * Get RCR4's FPACK field.
     *
     * FIFO Packing Mode
     */
    inline SAI1_RCR4_FPACK get_RCR4_FPACK() volatile
    {
        return SAI1_RCR4_FPACK((RCR4 >> 24u) & 0b11u);
    }

    /**
     * Set RCR4's FPACK field.
     *
     * FIFO Packing Mode
     */
    inline void set_RCR4_FPACK(SAI1_RCR4_FPACK value) volatile
    {
        uint32_t curr = RCR4;

        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(value) & 0b11u) << 24u;

        RCR4 = curr;
    }

    /**
     * Get RCR4's FRSZ field.
     *
     * Frame Size
     */
    inline uint8_t get_RCR4_FRSZ() volatile
    {
        return (RCR4 >> 16u) & 0b11111u;
    }

    /**
     * Set RCR4's FRSZ field.
     *
     * Frame Size
     */
    inline void set_RCR4_FRSZ(uint8_t value) volatile
    {
        uint32_t curr = RCR4;

        curr &= ~(0b11111u << 16u);
        curr |= (value & 0b11111u) << 16u;

        RCR4 = curr;
    }

    /**
     * Get RCR4's SYWD field.
     *
     * Sync Width
     */
    inline uint8_t get_RCR4_SYWD() volatile
    {
        return (RCR4 >> 8u) & 0b11111u;
    }

    /**
     * Set RCR4's SYWD field.
     *
     * Sync Width
     */
    inline void set_RCR4_SYWD(uint8_t value) volatile
    {
        uint32_t curr = RCR4;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        RCR4 = curr;
    }

    /**
     * Get RCR4's MF bit.
     *
     * MSB First
     */
    inline bool get_RCR4_MF() volatile
    {
        return RCR4 & (1u << 4u);
    }

    /**
     * Set RCR4's MF bit.
     *
     * MSB First
     */
    inline void set_RCR4_MF() volatile
    {
        RCR4 |= 1u << 4u;
    }

    /**
     * Clear RCR4's MF bit.
     *
     * MSB First
     */
    inline void clear_RCR4_MF() volatile
    {
        RCR4 &= ~(1u << 4u);
    }

    /**
     * Toggle RCR4's MF bit.
     *
     * MSB First
     */
    inline void toggle_RCR4_MF() volatile
    {
        RCR4 ^= 1u << 4u;
    }

    /**
     * Get RCR4's FSE bit.
     *
     * Frame Sync Early
     */
    inline bool get_RCR4_FSE() volatile
    {
        return RCR4 & (1u << 3u);
    }

    /**
     * Set RCR4's FSE bit.
     *
     * Frame Sync Early
     */
    inline void set_RCR4_FSE() volatile
    {
        RCR4 |= 1u << 3u;
    }

    /**
     * Clear RCR4's FSE bit.
     *
     * Frame Sync Early
     */
    inline void clear_RCR4_FSE() volatile
    {
        RCR4 &= ~(1u << 3u);
    }

    /**
     * Toggle RCR4's FSE bit.
     *
     * Frame Sync Early
     */
    inline void toggle_RCR4_FSE() volatile
    {
        RCR4 ^= 1u << 3u;
    }

    /**
     * Get RCR4's ONDEM bit.
     *
     * On Demand Mode
     */
    inline bool get_RCR4_ONDEM() volatile
    {
        return RCR4 & (1u << 2u);
    }

    /**
     * Set RCR4's ONDEM bit.
     *
     * On Demand Mode
     */
    inline void set_RCR4_ONDEM() volatile
    {
        RCR4 |= 1u << 2u;
    }

    /**
     * Clear RCR4's ONDEM bit.
     *
     * On Demand Mode
     */
    inline void clear_RCR4_ONDEM() volatile
    {
        RCR4 &= ~(1u << 2u);
    }

    /**
     * Toggle RCR4's ONDEM bit.
     *
     * On Demand Mode
     */
    inline void toggle_RCR4_ONDEM() volatile
    {
        RCR4 ^= 1u << 2u;
    }

    /**
     * Get RCR4's FSP bit.
     *
     * Frame Sync Polarity
     */
    inline bool get_RCR4_FSP() volatile
    {
        return RCR4 & (1u << 1u);
    }

    /**
     * Set RCR4's FSP bit.
     *
     * Frame Sync Polarity
     */
    inline void set_RCR4_FSP() volatile
    {
        RCR4 |= 1u << 1u;
    }

    /**
     * Clear RCR4's FSP bit.
     *
     * Frame Sync Polarity
     */
    inline void clear_RCR4_FSP() volatile
    {
        RCR4 &= ~(1u << 1u);
    }

    /**
     * Toggle RCR4's FSP bit.
     *
     * Frame Sync Polarity
     */
    inline void toggle_RCR4_FSP() volatile
    {
        RCR4 ^= 1u << 1u;
    }

    /**
     * Get RCR4's FSD bit.
     *
     * Frame Sync Direction
     */
    inline bool get_RCR4_FSD() volatile
    {
        return RCR4 & (1u << 0u);
    }

    /**
     * Set RCR4's FSD bit.
     *
     * Frame Sync Direction
     */
    inline void set_RCR4_FSD() volatile
    {
        RCR4 |= 1u << 0u;
    }

    /**
     * Clear RCR4's FSD bit.
     *
     * Frame Sync Direction
     */
    inline void clear_RCR4_FSD() volatile
    {
        RCR4 &= ~(1u << 0u);
    }

    /**
     * Toggle RCR4's FSD bit.
     *
     * Frame Sync Direction
     */
    inline void toggle_RCR4_FSD() volatile
    {
        RCR4 ^= 1u << 0u;
    }

    /**
     * Get all of RCR4's bit fields.
     *
     * (read-write) Receive Configuration 4
     */
    inline void get_RCR4(bool &FCONT, SAI1_RCR4_FCOMB &FCOMB,
                         SAI1_RCR4_FPACK &FPACK, uint8_t &FRSZ, uint8_t &SYWD,
                         bool &MF, bool &FSE, bool &ONDEM, bool &FSP,
                         bool &FSD) volatile
    {
        uint32_t curr = RCR4;

        FCONT = curr & (1u << 28u);
        FCOMB = SAI1_RCR4_FCOMB((curr >> 26u) & 0b11u);
        FPACK = SAI1_RCR4_FPACK((curr >> 24u) & 0b11u);
        FRSZ = (curr >> 16u) & 0b11111u;
        SYWD = (curr >> 8u) & 0b11111u;
        MF = curr & (1u << 4u);
        FSE = curr & (1u << 3u);
        ONDEM = curr & (1u << 2u);
        FSP = curr & (1u << 1u);
        FSD = curr & (1u << 0u);
    }

    /**
     * Set all of RCR4's bit fields.
     *
     * (read-write) Receive Configuration 4
     */
    inline void set_RCR4(bool FCONT, SAI1_RCR4_FCOMB FCOMB,
                         SAI1_RCR4_FPACK FPACK, uint8_t FRSZ, uint8_t SYWD,
                         bool MF, bool FSE, bool ONDEM, bool FSP,
                         bool FSD) volatile
    {
        uint32_t curr = RCR4;

        curr &= ~(0b1u << 28u);
        curr |= (FCONT & 0b1u) << 28u;
        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(FCOMB) & 0b11u) << 26u;
        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(FPACK) & 0b11u) << 24u;
        curr &= ~(0b11111u << 16u);
        curr |= (FRSZ & 0b11111u) << 16u;
        curr &= ~(0b11111u << 8u);
        curr |= (SYWD & 0b11111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (MF & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (FSE & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (ONDEM & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (FSP & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (FSD & 0b1u) << 0u;

        RCR4 = curr;
    }

    /**
     * Get RCR5's WNW field.
     *
     * Word N Width
     */
    inline uint8_t get_RCR5_WNW() volatile
    {
        return (RCR5 >> 24u) & 0b11111u;
    }

    /**
     * Set RCR5's WNW field.
     *
     * Word N Width
     */
    inline void set_RCR5_WNW(uint8_t value) volatile
    {
        uint32_t curr = RCR5;

        curr &= ~(0b11111u << 24u);
        curr |= (value & 0b11111u) << 24u;

        RCR5 = curr;
    }

    /**
     * Get RCR5's W0W field.
     *
     * Word 0 Width
     */
    inline uint8_t get_RCR5_W0W() volatile
    {
        return (RCR5 >> 16u) & 0b11111u;
    }

    /**
     * Set RCR5's W0W field.
     *
     * Word 0 Width
     */
    inline void set_RCR5_W0W(uint8_t value) volatile
    {
        uint32_t curr = RCR5;

        curr &= ~(0b11111u << 16u);
        curr |= (value & 0b11111u) << 16u;

        RCR5 = curr;
    }

    /**
     * Get RCR5's FBT field.
     *
     * First Bit Shifted
     */
    inline uint8_t get_RCR5_FBT() volatile
    {
        return (RCR5 >> 8u) & 0b11111u;
    }

    /**
     * Set RCR5's FBT field.
     *
     * First Bit Shifted
     */
    inline void set_RCR5_FBT(uint8_t value) volatile
    {
        uint32_t curr = RCR5;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        RCR5 = curr;
    }

    /**
     * Get all of RCR5's bit fields.
     *
     * (read-write) Receive Configuration 5
     */
    inline void get_RCR5(uint8_t &WNW, uint8_t &W0W, uint8_t &FBT) volatile
    {
        uint32_t curr = RCR5;

        WNW = (curr >> 24u) & 0b11111u;
        W0W = (curr >> 16u) & 0b11111u;
        FBT = (curr >> 8u) & 0b11111u;
    }

    /**
     * Set all of RCR5's bit fields.
     *
     * (read-write) Receive Configuration 5
     */
    inline void set_RCR5(uint8_t WNW, uint8_t W0W, uint8_t FBT) volatile
    {
        uint32_t curr = RCR5;

        curr &= ~(0b11111u << 24u);
        curr |= (WNW & 0b11111u) << 24u;
        curr &= ~(0b11111u << 16u);
        curr |= (W0W & 0b11111u) << 16u;
        curr &= ~(0b11111u << 8u);
        curr |= (FBT & 0b11111u) << 8u;

        RCR5 = curr;
    }

    /**
     * Get RDR's RDR field.
     *
     * Receive Data Register
     */
    inline uint32_t get_RDR_RDR(std::size_t index) volatile
    {
        return (RDR[index] >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get RFR's WFP field.
     *
     * Write FIFO Pointer
     */
    inline uint8_t get_RFR_WFP(std::size_t index) volatile
    {
        return (RFR[index] >> 16u) & 0b111111u;
    }

    /**
     * Get RFR's RCP bit.
     *
     * Receive Channel Pointer
     */
    inline bool get_RFR_RCP(std::size_t index) volatile
    {
        return RFR[index] & (1u << 15u);
    }

    /**
     * Get RFR's RFP field.
     *
     * Read FIFO Pointer
     */
    inline uint8_t get_RFR_RFP(std::size_t index) volatile
    {
        return (RFR[index] >> 0u) & 0b111111u;
    }

    /**
     * Get all of RFR's bit fields.
     *
     * (read-write) Receive FIFO
     */
    inline void get_RFR(std::size_t index, uint8_t &WFP, bool &RCP,
                        uint8_t &RFP) volatile
    {
        uint32_t curr = RFR[index];

        WFP = (curr >> 16u) & 0b111111u;
        RCP = curr & (1u << 15u);
        RFP = (curr >> 0u) & 0b111111u;
    }

    /**
     * Get RMR's RWM field.
     *
     * Receive Word Mask
     */
    inline SAI1_RMR_RWM get_RMR_RWM() volatile
    {
        return SAI1_RMR_RWM((RMR >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set RMR's RWM field.
     *
     * Receive Word Mask
     */
    inline void set_RMR_RWM(SAI1_RMR_RWM value) volatile
    {
        uint32_t curr = RMR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |=
            (std::to_underlying(value) & 0b11111111111111111111111111111111u)
            << 0u;

        RMR = curr;
    }
};

static_assert(sizeof(sai1) == sai1::size);

static volatile sai1 *const SAI1 = reinterpret_cast<sai1 *>(0x40404000);

}; // namespace MIMXRT1176::CM7
