/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/MIPI_CSI2RX_CFG_NUM_LANES_CFG_NUM_LANES.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * no description available
 */
struct [[gnu::packed]] mipi_csi2rx
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        412; /*!< mipi_csi2rx's size in bytes. */

    /* Fields. */
    static constexpr std::size_t reserved_padding0_length = 64;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t CFG_NUM_LANES; /*!< (read-write) Lane Configuration Register */
    uint32_t
        CFG_DISABLE_DATA_LANES; /*!< (read-write) Disable Data Lane Register */
    uint32_t BIT_ERR;    /*!< (read-write) ECC and CRC Error Status Register */
    uint32_t IRQ_STATUS; /*!< (read-write) IRQ Status Register */
    uint32_t IRQ_MASK;   /*!< (read-write) IRQ Mask Setting Register */
    uint32_t ULPS_STATUS; /*!< (read-write) Ultra Low Power State (ULPS) Status
                             Register */
    uint32_t PPI_ERRSOT_HS; /*!< (read-write) ERRSot HS Status Register */
    uint32_t
        PPI_ERRSOTSYNC_HS;   /*!< (read-write) ErrSotSync HS Status Register */
    uint32_t PPI_ERRESC;     /*!< (read-write) ErrEsc Status Register */
    uint32_t PPI_ERRSYNCESC; /*!< (read-write) ErrSyncEsc Status Register */
    uint32_t PPI_ERRCONTROL; /*!< (read-write) ErrControl Status Register */
    uint32_t
        CFG_DISABLE_PAYLOAD_0; /*!< (read-write) Disable Payload 0 Register */
    uint32_t
        CFG_DISABLE_PAYLOAD_1; /*!< (read-write) Disable Payload 1 Register */
    static constexpr std::size_t reserved_padding1_length = 19;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    uint32_t
        CFG_IGNORE_VC;   /*!< (read-write) Ignore Virtual Channel Register */
    uint32_t CFG_VID_VC; /*!< (read-write) Virtual Channel value Register */
    uint32_t CFG_VID_P_FIFO_SEND_LEVEL; /*!< (read-write) FIFO Send Level
                                           Configuration Register */
    uint32_t CFG_VID_VSYNC; /*!< (read-write) VSYNC Configuration Register */
    uint32_t CFG_VID_HSYNC_FP; /*!< (read-write) Start of HSYNC Delay control
                                  Register */
    uint32_t CFG_VID_HSYNC; /*!< (read-write) HSYNC Configuration Register */
    uint32_t CFG_VID_HSYNC_BP; /*!< (read-write) End of HSYNC Delay Control
                                  Register */

    /* Methods. */

    /**
     * Get CFG_NUM_LANES's CFG_NUM_LANES field.
     *
     * This field is used to set the number of active lanes for receiving data.
     */
    inline MIPI_CSI2RX_CFG_NUM_LANES_CFG_NUM_LANES
    get_CFG_NUM_LANES_CFG_NUM_LANES() volatile
    {
        return MIPI_CSI2RX_CFG_NUM_LANES_CFG_NUM_LANES((CFG_NUM_LANES >> 0u) &
                                                       0b11u);
    }

    /**
     * Set CFG_NUM_LANES's CFG_NUM_LANES field.
     *
     * This field is used to set the number of active lanes for receiving data.
     */
    inline void set_CFG_NUM_LANES_CFG_NUM_LANES(
        MIPI_CSI2RX_CFG_NUM_LANES_CFG_NUM_LANES value) volatile
    {
        uint32_t curr = CFG_NUM_LANES;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        CFG_NUM_LANES = curr;
    }

    /**
     * Get CFG_DISABLE_DATA_LANES's CFG_DISABLE_DATA_LANES field.
     *
     * This field is used to disable data lanes.
     */
    inline uint8_t get_CFG_DISABLE_DATA_LANES_CFG_DISABLE_DATA_LANES() volatile
    {
        return (CFG_DISABLE_DATA_LANES >> 0u) & 0b1111u;
    }

    /**
     * Set CFG_DISABLE_DATA_LANES's CFG_DISABLE_DATA_LANES field.
     *
     * This field is used to disable data lanes.
     */
    inline void set_CFG_DISABLE_DATA_LANES_CFG_DISABLE_DATA_LANES(
        uint8_t value) volatile
    {
        uint32_t curr = CFG_DISABLE_DATA_LANES;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        CFG_DISABLE_DATA_LANES = curr;
    }

    /**
     * Get BIT_ERR's BIT_ERR field.
     *
     * This field shows the error status of ECC and CRC
     */
    inline uint16_t get_BIT_ERR_BIT_ERR() volatile
    {
        return (BIT_ERR >> 0u) & 0b1111111111u;
    }

    /**
     * Get IRQ_STATUS's IRQ_STATUS field.
     *
     * This field shows the IRQ status
     */
    inline uint16_t get_IRQ_STATUS_IRQ_STATUS() volatile
    {
        return (IRQ_STATUS >> 0u) & 0b111111111u;
    }

    /**
     * Get IRQ_MASK's IRQ_MASK field.
     *
     * This field shows the IRQ Mask setting
     */
    inline uint16_t get_IRQ_MASK_IRQ_MASK() volatile
    {
        return (IRQ_MASK >> 0u) & 0b111111111u;
    }

    /**
     * Set IRQ_MASK's IRQ_MASK field.
     *
     * This field shows the IRQ Mask setting
     */
    inline void set_IRQ_MASK_IRQ_MASK(uint16_t value) volatile
    {
        uint32_t curr = IRQ_MASK;

        curr &= ~(0b111111111u << 0u);
        curr |= (value & 0b111111111u) << 0u;

        IRQ_MASK = curr;
    }

    /**
     * Get ULPS_STATUS's STATUS field.
     *
     * This field shows the status of Rx D-PHY ULPS state
     */
    inline uint16_t get_ULPS_STATUS_STATUS() volatile
    {
        return (ULPS_STATUS >> 0u) & 0b1111111111u;
    }

    /**
     * Get PPI_ERRSOT_HS's STATUS field.
     *
     * This field indicates PPI ErrSotHS captured status from D-PHY
     */
    inline uint8_t get_PPI_ERRSOT_HS_STATUS() volatile
    {
        return (PPI_ERRSOT_HS >> 0u) & 0b1111u;
    }

    /**
     * Get PPI_ERRSOTSYNC_HS's STATUS field.
     *
     * This field indicates PPI ErrSotSync_HS captured status from D-PHY
     */
    inline uint8_t get_PPI_ERRSOTSYNC_HS_STATUS() volatile
    {
        return (PPI_ERRSOTSYNC_HS >> 0u) & 0b1111u;
    }

    /**
     * Get PPI_ERRESC's STATUS field.
     *
     * This field indicates PPI ErrEsc captured status from D-PHY
     */
    inline uint8_t get_PPI_ERRESC_STATUS() volatile
    {
        return (PPI_ERRESC >> 0u) & 0b1111u;
    }

    /**
     * Get PPI_ERRSYNCESC's STATUS field.
     *
     * This field indicates PPI ErrSyncEsc captured status from D-PHY
     */
    inline uint8_t get_PPI_ERRSYNCESC_STATUS() volatile
    {
        return (PPI_ERRSYNCESC >> 0u) & 0b1111u;
    }

    /**
     * Get PPI_ERRCONTROL's STATUS field.
     *
     * This field indicates PPI ErrControl captured status from D-PHY
     */
    inline uint8_t get_PPI_ERRCONTROL_STATUS() volatile
    {
        return (PPI_ERRCONTROL >> 0u) & 0b1111u;
    }

    /**
     * Get CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_RGB888 bit.
     *
     * RGB888
     */
    inline bool get_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_RGB888() volatile
    {
        return CFG_DISABLE_PAYLOAD_0 & (1u << 20u);
    }

    /**
     * Set CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_RGB888 bit.
     *
     * RGB888
     */
    inline void set_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_RGB888() volatile
    {
        CFG_DISABLE_PAYLOAD_0 |= 1u << 20u;
    }

    /**
     * Clear CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_RGB888 bit.
     *
     * RGB888
     */
    inline void clear_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_RGB888() volatile
    {
        CFG_DISABLE_PAYLOAD_0 &= ~(1u << 20u);
    }

    /**
     * Toggle CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_RGB888 bit.
     *
     * RGB888
     */
    inline void toggle_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_RGB888() volatile
    {
        CFG_DISABLE_PAYLOAD_0 ^= 1u << 20u;
    }

    /**
     * Get CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_RGB666 bit.
     *
     * RGB666
     */
    inline bool get_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_RGB666() volatile
    {
        return CFG_DISABLE_PAYLOAD_0 & (1u << 19u);
    }

    /**
     * Set CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_RGB666 bit.
     *
     * RGB666
     */
    inline void set_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_RGB666() volatile
    {
        CFG_DISABLE_PAYLOAD_0 |= 1u << 19u;
    }

    /**
     * Clear CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_RGB666 bit.
     *
     * RGB666
     */
    inline void clear_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_RGB666() volatile
    {
        CFG_DISABLE_PAYLOAD_0 &= ~(1u << 19u);
    }

    /**
     * Toggle CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_RGB666 bit.
     *
     * RGB666
     */
    inline void toggle_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_RGB666() volatile
    {
        CFG_DISABLE_PAYLOAD_0 ^= 1u << 19u;
    }

    /**
     * Get CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_RGB565 bit.
     *
     * RGB565
     */
    inline bool get_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_RGB565() volatile
    {
        return CFG_DISABLE_PAYLOAD_0 & (1u << 18u);
    }

    /**
     * Set CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_RGB565 bit.
     *
     * RGB565
     */
    inline void set_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_RGB565() volatile
    {
        CFG_DISABLE_PAYLOAD_0 |= 1u << 18u;
    }

    /**
     * Clear CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_RGB565 bit.
     *
     * RGB565
     */
    inline void clear_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_RGB565() volatile
    {
        CFG_DISABLE_PAYLOAD_0 &= ~(1u << 18u);
    }

    /**
     * Toggle CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_RGB565 bit.
     *
     * RGB565
     */
    inline void toggle_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_RGB565() volatile
    {
        CFG_DISABLE_PAYLOAD_0 ^= 1u << 18u;
    }

    /**
     * Get CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_RGB555 bit.
     *
     * RGB555
     */
    inline bool get_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_RGB555() volatile
    {
        return CFG_DISABLE_PAYLOAD_0 & (1u << 17u);
    }

    /**
     * Set CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_RGB555 bit.
     *
     * RGB555
     */
    inline void set_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_RGB555() volatile
    {
        CFG_DISABLE_PAYLOAD_0 |= 1u << 17u;
    }

    /**
     * Clear CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_RGB555 bit.
     *
     * RGB555
     */
    inline void clear_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_RGB555() volatile
    {
        CFG_DISABLE_PAYLOAD_0 &= ~(1u << 17u);
    }

    /**
     * Toggle CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_RGB555 bit.
     *
     * RGB555
     */
    inline void toggle_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_RGB555() volatile
    {
        CFG_DISABLE_PAYLOAD_0 ^= 1u << 17u;
    }

    /**
     * Get CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_RGB444 bit.
     *
     * RGB444
     */
    inline bool get_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_RGB444() volatile
    {
        return CFG_DISABLE_PAYLOAD_0 & (1u << 16u);
    }

    /**
     * Set CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_RGB444 bit.
     *
     * RGB444
     */
    inline void set_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_RGB444() volatile
    {
        CFG_DISABLE_PAYLOAD_0 |= 1u << 16u;
    }

    /**
     * Clear CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_RGB444 bit.
     *
     * RGB444
     */
    inline void clear_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_RGB444() volatile
    {
        CFG_DISABLE_PAYLOAD_0 &= ~(1u << 16u);
    }

    /**
     * Toggle CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_RGB444 bit.
     *
     * RGB444
     */
    inline void toggle_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_RGB444() volatile
    {
        CFG_DISABLE_PAYLOAD_0 ^= 1u << 16u;
    }

    /**
     * Get CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_YUV422_8BIT bit.
     *
     * YUV422 8 bit
     */
    inline bool get_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_YUV422_8BIT() volatile
    {
        return CFG_DISABLE_PAYLOAD_0 & (1u << 14u);
    }

    /**
     * Set CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_YUV422_8BIT bit.
     *
     * YUV422 8 bit
     */
    inline void set_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_YUV422_8BIT() volatile
    {
        CFG_DISABLE_PAYLOAD_0 |= 1u << 14u;
    }

    /**
     * Clear CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_YUV422_8BIT bit.
     *
     * YUV422 8 bit
     */
    inline void clear_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_YUV422_8BIT() volatile
    {
        CFG_DISABLE_PAYLOAD_0 &= ~(1u << 14u);
    }

    /**
     * Toggle CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_YUV422_8BIT bit.
     *
     * YUV422 8 bit
     */
    inline void toggle_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_YUV422_8BIT() volatile
    {
        CFG_DISABLE_PAYLOAD_0 ^= 1u << 14u;
    }

    /**
     * Get CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_YUV420 bit.
     *
     * Legacy YUV 420 8 bit
     */
    inline bool get_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_YUV420() volatile
    {
        return CFG_DISABLE_PAYLOAD_0 & (1u << 10u);
    }

    /**
     * Set CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_YUV420 bit.
     *
     * Legacy YUV 420 8 bit
     */
    inline void set_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_YUV420() volatile
    {
        CFG_DISABLE_PAYLOAD_0 |= 1u << 10u;
    }

    /**
     * Clear CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_YUV420 bit.
     *
     * Legacy YUV 420 8 bit
     */
    inline void clear_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_YUV420() volatile
    {
        CFG_DISABLE_PAYLOAD_0 &= ~(1u << 10u);
    }

    /**
     * Toggle CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_YUV420 bit.
     *
     * Legacy YUV 420 8 bit
     */
    inline void toggle_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_YUV420() volatile
    {
        CFG_DISABLE_PAYLOAD_0 ^= 1u << 10u;
    }

    /**
     * Get CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_EMBEDDED bit.
     *
     * Embedded
     */
    inline bool get_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_EMBEDDED() volatile
    {
        return CFG_DISABLE_PAYLOAD_0 & (1u << 2u);
    }

    /**
     * Set CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_EMBEDDED bit.
     *
     * Embedded
     */
    inline void set_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_EMBEDDED() volatile
    {
        CFG_DISABLE_PAYLOAD_0 |= 1u << 2u;
    }

    /**
     * Clear CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_EMBEDDED bit.
     *
     * Embedded
     */
    inline void clear_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_EMBEDDED() volatile
    {
        CFG_DISABLE_PAYLOAD_0 &= ~(1u << 2u);
    }

    /**
     * Toggle CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_EMBEDDED bit.
     *
     * Embedded
     */
    inline void toggle_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_EMBEDDED() volatile
    {
        CFG_DISABLE_PAYLOAD_0 ^= 1u << 2u;
    }

    /**
     * Get CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_BLANK bit.
     *
     * Blank
     */
    inline bool get_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_BLANK() volatile
    {
        return CFG_DISABLE_PAYLOAD_0 & (1u << 1u);
    }

    /**
     * Set CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_BLANK bit.
     *
     * Blank
     */
    inline void set_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_BLANK() volatile
    {
        CFG_DISABLE_PAYLOAD_0 |= 1u << 1u;
    }

    /**
     * Clear CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_BLANK bit.
     *
     * Blank
     */
    inline void clear_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_BLANK() volatile
    {
        CFG_DISABLE_PAYLOAD_0 &= ~(1u << 1u);
    }

    /**
     * Toggle CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_BLANK bit.
     *
     * Blank
     */
    inline void toggle_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_BLANK() volatile
    {
        CFG_DISABLE_PAYLOAD_0 ^= 1u << 1u;
    }

    /**
     * Get CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_NULL bit.
     *
     * Null
     */
    inline bool get_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_NULL() volatile
    {
        return CFG_DISABLE_PAYLOAD_0 & (1u << 0u);
    }

    /**
     * Set CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_NULL bit.
     *
     * Null
     */
    inline void set_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_NULL() volatile
    {
        CFG_DISABLE_PAYLOAD_0 |= 1u << 0u;
    }

    /**
     * Clear CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_NULL bit.
     *
     * Null
     */
    inline void clear_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_NULL() volatile
    {
        CFG_DISABLE_PAYLOAD_0 &= ~(1u << 0u);
    }

    /**
     * Toggle CFG_DISABLE_PAYLOAD_0's DIS_PAYLOAD_NULL bit.
     *
     * Null
     */
    inline void toggle_CFG_DISABLE_PAYLOAD_0_DIS_PAYLOAD_NULL() volatile
    {
        CFG_DISABLE_PAYLOAD_0 ^= 1u << 0u;
    }

    /**
     * Get all of CFG_DISABLE_PAYLOAD_0's bit fields.
     *
     * (read-write) Disable Payload 0 Register
     */
    inline void get_CFG_DISABLE_PAYLOAD_0(
        bool &DIS_PAYLOAD_RGB888, bool &DIS_PAYLOAD_RGB666,
        bool &DIS_PAYLOAD_RGB565, bool &DIS_PAYLOAD_RGB555,
        bool &DIS_PAYLOAD_RGB444, bool &DIS_PAYLOAD_YUV422_8BIT,
        bool &DIS_PAYLOAD_YUV420, bool &DIS_PAYLOAD_EMBEDDED,
        bool &DIS_PAYLOAD_BLANK, bool &DIS_PAYLOAD_NULL) volatile
    {
        uint32_t curr = CFG_DISABLE_PAYLOAD_0;

        DIS_PAYLOAD_RGB888 = curr & (1u << 20u);
        DIS_PAYLOAD_RGB666 = curr & (1u << 19u);
        DIS_PAYLOAD_RGB565 = curr & (1u << 18u);
        DIS_PAYLOAD_RGB555 = curr & (1u << 17u);
        DIS_PAYLOAD_RGB444 = curr & (1u << 16u);
        DIS_PAYLOAD_YUV422_8BIT = curr & (1u << 14u);
        DIS_PAYLOAD_YUV420 = curr & (1u << 10u);
        DIS_PAYLOAD_EMBEDDED = curr & (1u << 2u);
        DIS_PAYLOAD_BLANK = curr & (1u << 1u);
        DIS_PAYLOAD_NULL = curr & (1u << 0u);
    }

    /**
     * Set all of CFG_DISABLE_PAYLOAD_0's bit fields.
     *
     * (read-write) Disable Payload 0 Register
     */
    inline void set_CFG_DISABLE_PAYLOAD_0(
        bool DIS_PAYLOAD_RGB888, bool DIS_PAYLOAD_RGB666,
        bool DIS_PAYLOAD_RGB565, bool DIS_PAYLOAD_RGB555,
        bool DIS_PAYLOAD_RGB444, bool DIS_PAYLOAD_YUV422_8BIT,
        bool DIS_PAYLOAD_YUV420, bool DIS_PAYLOAD_EMBEDDED,
        bool DIS_PAYLOAD_BLANK, bool DIS_PAYLOAD_NULL) volatile
    {
        uint32_t curr = CFG_DISABLE_PAYLOAD_0;

        curr &= ~(0b1u << 20u);
        curr |= (DIS_PAYLOAD_RGB888 & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (DIS_PAYLOAD_RGB666 & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (DIS_PAYLOAD_RGB565 & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (DIS_PAYLOAD_RGB555 & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DIS_PAYLOAD_RGB444 & 0b1u) << 16u;
        curr &= ~(0b1u << 14u);
        curr |= (DIS_PAYLOAD_YUV422_8BIT & 0b1u) << 14u;
        curr &= ~(0b1u << 10u);
        curr |= (DIS_PAYLOAD_YUV420 & 0b1u) << 10u;
        curr &= ~(0b1u << 2u);
        curr |= (DIS_PAYLOAD_EMBEDDED & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DIS_PAYLOAD_BLANK & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (DIS_PAYLOAD_NULL & 0b1u) << 0u;

        CFG_DISABLE_PAYLOAD_0 = curr;
    }

    /**
     * Get CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UNSUPPORTED bit.
     *
     * Unsupported Data Types
     */
    inline bool get_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UNSUPPORTED() volatile
    {
        return CFG_DISABLE_PAYLOAD_1 & (1u << 16u);
    }

    /**
     * Set CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UNSUPPORTED bit.
     *
     * Unsupported Data Types
     */
    inline void set_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UNSUPPORTED() volatile
    {
        CFG_DISABLE_PAYLOAD_1 |= 1u << 16u;
    }

    /**
     * Clear CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UNSUPPORTED bit.
     *
     * Unsupported Data Types
     */
    inline void clear_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UNSUPPORTED() volatile
    {
        CFG_DISABLE_PAYLOAD_1 &= ~(1u << 16u);
    }

    /**
     * Toggle CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UNSUPPORTED bit.
     *
     * Unsupported Data Types
     */
    inline void toggle_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UNSUPPORTED() volatile
    {
        CFG_DISABLE_PAYLOAD_1 ^= 1u << 16u;
    }

    /**
     * Get CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_37 bit.
     *
     * User defined type 0x37
     */
    inline bool get_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_37() volatile
    {
        return CFG_DISABLE_PAYLOAD_1 & (1u << 7u);
    }

    /**
     * Set CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_37 bit.
     *
     * User defined type 0x37
     */
    inline void set_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_37() volatile
    {
        CFG_DISABLE_PAYLOAD_1 |= 1u << 7u;
    }

    /**
     * Clear CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_37 bit.
     *
     * User defined type 0x37
     */
    inline void clear_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_37() volatile
    {
        CFG_DISABLE_PAYLOAD_1 &= ~(1u << 7u);
    }

    /**
     * Toggle CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_37 bit.
     *
     * User defined type 0x37
     */
    inline void toggle_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_37() volatile
    {
        CFG_DISABLE_PAYLOAD_1 ^= 1u << 7u;
    }

    /**
     * Get CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_36 bit.
     *
     * User defined type 0x36
     */
    inline bool get_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_36() volatile
    {
        return CFG_DISABLE_PAYLOAD_1 & (1u << 6u);
    }

    /**
     * Set CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_36 bit.
     *
     * User defined type 0x36
     */
    inline void set_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_36() volatile
    {
        CFG_DISABLE_PAYLOAD_1 |= 1u << 6u;
    }

    /**
     * Clear CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_36 bit.
     *
     * User defined type 0x36
     */
    inline void clear_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_36() volatile
    {
        CFG_DISABLE_PAYLOAD_1 &= ~(1u << 6u);
    }

    /**
     * Toggle CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_36 bit.
     *
     * User defined type 0x36
     */
    inline void toggle_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_36() volatile
    {
        CFG_DISABLE_PAYLOAD_1 ^= 1u << 6u;
    }

    /**
     * Get CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_35 bit.
     *
     * User defined type 0x35
     */
    inline bool get_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_35() volatile
    {
        return CFG_DISABLE_PAYLOAD_1 & (1u << 5u);
    }

    /**
     * Set CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_35 bit.
     *
     * User defined type 0x35
     */
    inline void set_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_35() volatile
    {
        CFG_DISABLE_PAYLOAD_1 |= 1u << 5u;
    }

    /**
     * Clear CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_35 bit.
     *
     * User defined type 0x35
     */
    inline void clear_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_35() volatile
    {
        CFG_DISABLE_PAYLOAD_1 &= ~(1u << 5u);
    }

    /**
     * Toggle CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_35 bit.
     *
     * User defined type 0x35
     */
    inline void toggle_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_35() volatile
    {
        CFG_DISABLE_PAYLOAD_1 ^= 1u << 5u;
    }

    /**
     * Get CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_34 bit.
     *
     * User defined type 0x35
     */
    inline bool get_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_34() volatile
    {
        return CFG_DISABLE_PAYLOAD_1 & (1u << 4u);
    }

    /**
     * Set CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_34 bit.
     *
     * User defined type 0x35
     */
    inline void set_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_34() volatile
    {
        CFG_DISABLE_PAYLOAD_1 |= 1u << 4u;
    }

    /**
     * Clear CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_34 bit.
     *
     * User defined type 0x35
     */
    inline void clear_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_34() volatile
    {
        CFG_DISABLE_PAYLOAD_1 &= ~(1u << 4u);
    }

    /**
     * Toggle CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_34 bit.
     *
     * User defined type 0x35
     */
    inline void toggle_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_34() volatile
    {
        CFG_DISABLE_PAYLOAD_1 ^= 1u << 4u;
    }

    /**
     * Get CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_33 bit.
     *
     * User defined type 0x34
     */
    inline bool get_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_33() volatile
    {
        return CFG_DISABLE_PAYLOAD_1 & (1u << 3u);
    }

    /**
     * Set CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_33 bit.
     *
     * User defined type 0x34
     */
    inline void set_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_33() volatile
    {
        CFG_DISABLE_PAYLOAD_1 |= 1u << 3u;
    }

    /**
     * Clear CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_33 bit.
     *
     * User defined type 0x34
     */
    inline void clear_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_33() volatile
    {
        CFG_DISABLE_PAYLOAD_1 &= ~(1u << 3u);
    }

    /**
     * Toggle CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_33 bit.
     *
     * User defined type 0x34
     */
    inline void toggle_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_33() volatile
    {
        CFG_DISABLE_PAYLOAD_1 ^= 1u << 3u;
    }

    /**
     * Get CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_32 bit.
     *
     * User defined type 0x33
     */
    inline bool get_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_32() volatile
    {
        return CFG_DISABLE_PAYLOAD_1 & (1u << 2u);
    }

    /**
     * Set CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_32 bit.
     *
     * User defined type 0x33
     */
    inline void set_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_32() volatile
    {
        CFG_DISABLE_PAYLOAD_1 |= 1u << 2u;
    }

    /**
     * Clear CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_32 bit.
     *
     * User defined type 0x33
     */
    inline void clear_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_32() volatile
    {
        CFG_DISABLE_PAYLOAD_1 &= ~(1u << 2u);
    }

    /**
     * Toggle CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_32 bit.
     *
     * User defined type 0x33
     */
    inline void toggle_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_32() volatile
    {
        CFG_DISABLE_PAYLOAD_1 ^= 1u << 2u;
    }

    /**
     * Get CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_31 bit.
     *
     * User defined type 0x32
     */
    inline bool get_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_31() volatile
    {
        return CFG_DISABLE_PAYLOAD_1 & (1u << 1u);
    }

    /**
     * Set CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_31 bit.
     *
     * User defined type 0x32
     */
    inline void set_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_31() volatile
    {
        CFG_DISABLE_PAYLOAD_1 |= 1u << 1u;
    }

    /**
     * Clear CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_31 bit.
     *
     * User defined type 0x32
     */
    inline void clear_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_31() volatile
    {
        CFG_DISABLE_PAYLOAD_1 &= ~(1u << 1u);
    }

    /**
     * Toggle CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_31 bit.
     *
     * User defined type 0x32
     */
    inline void toggle_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_31() volatile
    {
        CFG_DISABLE_PAYLOAD_1 ^= 1u << 1u;
    }

    /**
     * Get CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_30 bit.
     *
     * User defined type 0x31
     */
    inline bool get_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_30() volatile
    {
        return CFG_DISABLE_PAYLOAD_1 & (1u << 0u);
    }

    /**
     * Set CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_30 bit.
     *
     * User defined type 0x31
     */
    inline void set_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_30() volatile
    {
        CFG_DISABLE_PAYLOAD_1 |= 1u << 0u;
    }

    /**
     * Clear CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_30 bit.
     *
     * User defined type 0x31
     */
    inline void clear_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_30() volatile
    {
        CFG_DISABLE_PAYLOAD_1 &= ~(1u << 0u);
    }

    /**
     * Toggle CFG_DISABLE_PAYLOAD_1's DIS_PAYLOAD_UDEF_30 bit.
     *
     * User defined type 0x31
     */
    inline void toggle_CFG_DISABLE_PAYLOAD_1_DIS_PAYLOAD_UDEF_30() volatile
    {
        CFG_DISABLE_PAYLOAD_1 ^= 1u << 0u;
    }

    /**
     * Get all of CFG_DISABLE_PAYLOAD_1's bit fields.
     *
     * (read-write) Disable Payload 1 Register
     */
    inline void get_CFG_DISABLE_PAYLOAD_1(
        bool &DIS_PAYLOAD_UNSUPPORTED, bool &DIS_PAYLOAD_UDEF_37,
        bool &DIS_PAYLOAD_UDEF_36, bool &DIS_PAYLOAD_UDEF_35,
        bool &DIS_PAYLOAD_UDEF_34, bool &DIS_PAYLOAD_UDEF_33,
        bool &DIS_PAYLOAD_UDEF_32, bool &DIS_PAYLOAD_UDEF_31,
        bool &DIS_PAYLOAD_UDEF_30) volatile
    {
        uint32_t curr = CFG_DISABLE_PAYLOAD_1;

        DIS_PAYLOAD_UNSUPPORTED = curr & (1u << 16u);
        DIS_PAYLOAD_UDEF_37 = curr & (1u << 7u);
        DIS_PAYLOAD_UDEF_36 = curr & (1u << 6u);
        DIS_PAYLOAD_UDEF_35 = curr & (1u << 5u);
        DIS_PAYLOAD_UDEF_34 = curr & (1u << 4u);
        DIS_PAYLOAD_UDEF_33 = curr & (1u << 3u);
        DIS_PAYLOAD_UDEF_32 = curr & (1u << 2u);
        DIS_PAYLOAD_UDEF_31 = curr & (1u << 1u);
        DIS_PAYLOAD_UDEF_30 = curr & (1u << 0u);
    }

    /**
     * Set all of CFG_DISABLE_PAYLOAD_1's bit fields.
     *
     * (read-write) Disable Payload 1 Register
     */
    inline void set_CFG_DISABLE_PAYLOAD_1(
        bool DIS_PAYLOAD_UNSUPPORTED, bool DIS_PAYLOAD_UDEF_37,
        bool DIS_PAYLOAD_UDEF_36, bool DIS_PAYLOAD_UDEF_35,
        bool DIS_PAYLOAD_UDEF_34, bool DIS_PAYLOAD_UDEF_33,
        bool DIS_PAYLOAD_UDEF_32, bool DIS_PAYLOAD_UDEF_31,
        bool DIS_PAYLOAD_UDEF_30) volatile
    {
        uint32_t curr = CFG_DISABLE_PAYLOAD_1;

        curr &= ~(0b1u << 16u);
        curr |= (DIS_PAYLOAD_UNSUPPORTED & 0b1u) << 16u;
        curr &= ~(0b1u << 7u);
        curr |= (DIS_PAYLOAD_UDEF_37 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (DIS_PAYLOAD_UDEF_36 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (DIS_PAYLOAD_UDEF_35 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (DIS_PAYLOAD_UDEF_34 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DIS_PAYLOAD_UDEF_33 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (DIS_PAYLOAD_UDEF_32 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DIS_PAYLOAD_UDEF_31 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (DIS_PAYLOAD_UDEF_30 & 0b1u) << 0u;

        CFG_DISABLE_PAYLOAD_1 = curr;
    }

    /**
     * Get CFG_IGNORE_VC's IGNORE_VC bit.
     *
     * When set, this input causes the interface to ignore the Virtual Channel
     * (VC) field in received packets
     */
    inline bool get_CFG_IGNORE_VC_IGNORE_VC() volatile
    {
        return CFG_IGNORE_VC & (1u << 0u);
    }

    /**
     * Set CFG_IGNORE_VC's IGNORE_VC bit.
     *
     * When set, this input causes the interface to ignore the Virtual Channel
     * (VC) field in received packets
     */
    inline void set_CFG_IGNORE_VC_IGNORE_VC() volatile
    {
        CFG_IGNORE_VC |= 1u << 0u;
    }

    /**
     * Clear CFG_IGNORE_VC's IGNORE_VC bit.
     *
     * When set, this input causes the interface to ignore the Virtual Channel
     * (VC) field in received packets
     */
    inline void clear_CFG_IGNORE_VC_IGNORE_VC() volatile
    {
        CFG_IGNORE_VC &= ~(1u << 0u);
    }

    /**
     * Toggle CFG_IGNORE_VC's IGNORE_VC bit.
     *
     * When set, this input causes the interface to ignore the Virtual Channel
     * (VC) field in received packets
     */
    inline void toggle_CFG_IGNORE_VC_IGNORE_VC() volatile
    {
        CFG_IGNORE_VC ^= 1u << 0u;
    }

    /**
     * Get CFG_VID_VC's VID_VC field.
     *
     * This bit field sets the Virtual Channel value the interface must match
     * in an incoming packet for it to accept the packet
     */
    inline uint8_t get_CFG_VID_VC_VID_VC() volatile
    {
        return (CFG_VID_VC >> 0u) & 0b11u;
    }

    /**
     * Set CFG_VID_VC's VID_VC field.
     *
     * This bit field sets the Virtual Channel value the interface must match
     * in an incoming packet for it to accept the packet
     */
    inline void set_CFG_VID_VC_VID_VC(uint8_t value) volatile
    {
        uint32_t curr = CFG_VID_VC;

        curr &= ~(0b11u << 0u);
        curr |= (value & 0b11u) << 0u;

        CFG_VID_VC = curr;
    }

    /**
     * Get CFG_VID_P_FIFO_SEND_LEVEL's SEND_LEVEL field.
     *
     * FIFO Send Level field
     */
    inline uint16_t get_CFG_VID_P_FIFO_SEND_LEVEL_SEND_LEVEL() volatile
    {
        return (CFG_VID_P_FIFO_SEND_LEVEL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set CFG_VID_P_FIFO_SEND_LEVEL's SEND_LEVEL field.
     *
     * FIFO Send Level field
     */
    inline void set_CFG_VID_P_FIFO_SEND_LEVEL_SEND_LEVEL(
        uint16_t value) volatile
    {
        uint32_t curr = CFG_VID_P_FIFO_SEND_LEVEL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        CFG_VID_P_FIFO_SEND_LEVEL = curr;
    }

    /**
     * Get CFG_VID_VSYNC's WIDTH field.
     *
     * Width of VSYNC
     */
    inline uint8_t get_CFG_VID_VSYNC_WIDTH() volatile
    {
        return (CFG_VID_VSYNC >> 0u) & 0b11111111u;
    }

    /**
     * Set CFG_VID_VSYNC's WIDTH field.
     *
     * Width of VSYNC
     */
    inline void set_CFG_VID_VSYNC_WIDTH(uint8_t value) volatile
    {
        uint32_t curr = CFG_VID_VSYNC;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        CFG_VID_VSYNC = curr;
    }

    /**
     * Get CFG_VID_HSYNC_FP's DELAY_CTL field.
     *
     * Delay control for beginning of HSYNC pulse
     */
    inline uint8_t get_CFG_VID_HSYNC_FP_DELAY_CTL() volatile
    {
        return (CFG_VID_HSYNC_FP >> 0u) & 0b11111111u;
    }

    /**
     * Set CFG_VID_HSYNC_FP's DELAY_CTL field.
     *
     * Delay control for beginning of HSYNC pulse
     */
    inline void set_CFG_VID_HSYNC_FP_DELAY_CTL(uint8_t value) volatile
    {
        uint32_t curr = CFG_VID_HSYNC_FP;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        CFG_VID_HSYNC_FP = curr;
    }

    /**
     * Get CFG_VID_HSYNC's WIDTH field.
     *
     * Width of HSYNC
     */
    inline uint8_t get_CFG_VID_HSYNC_WIDTH() volatile
    {
        return (CFG_VID_HSYNC >> 0u) & 0b11111111u;
    }

    /**
     * Set CFG_VID_HSYNC's WIDTH field.
     *
     * Width of HSYNC
     */
    inline void set_CFG_VID_HSYNC_WIDTH(uint8_t value) volatile
    {
        uint32_t curr = CFG_VID_HSYNC;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        CFG_VID_HSYNC = curr;
    }

    /**
     * Get CFG_VID_HSYNC_BP's DELAY_CTL field.
     *
     * Delay Control for end of HSYNC pulse
     */
    inline uint8_t get_CFG_VID_HSYNC_BP_DELAY_CTL() volatile
    {
        return (CFG_VID_HSYNC_BP >> 0u) & 0b11111111u;
    }

    /**
     * Set CFG_VID_HSYNC_BP's DELAY_CTL field.
     *
     * Delay Control for end of HSYNC pulse
     */
    inline void set_CFG_VID_HSYNC_BP_DELAY_CTL(uint8_t value) volatile
    {
        uint32_t curr = CFG_VID_HSYNC_BP;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        CFG_VID_HSYNC_BP = curr;
    }
};

static_assert(sizeof(mipi_csi2rx) == mipi_csi2rx::size);

static volatile mipi_csi2rx *const MIPI_CSI2RX =
    reinterpret_cast<mipi_csi2rx *>(0x40810000);

}; // namespace MIMXRT1176::CM7
