/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/TMPSNS_CTRL0_V_SEL.h"
#include "../enums/TMPSNS_CTRL1_FREQ.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * Temperature Sensor Memory Map
 */
struct [[gnu::packed]] tmpsns
{
    /* Constant attributes. */
    static constexpr std::size_t size = 84; /*!< tmpsns's size in bytes. */

    /* Fields. */
    uint32_t CTRL0; /*!< (read-write) Temperature Sensor Control Register 0 */
    uint32_t
        CTRL0_SET; /*!< (read-write) Temperature Sensor Control Register 0 */
    uint32_t
        CTRL0_CLR; /*!< (read-write) Temperature Sensor Control Register 0 */
    uint32_t
        CTRL0_TOG;  /*!< (read-write) Temperature Sensor Control Register 0 */
    uint32_t CTRL1; /*!< (read-write) Temperature Sensor Control Register 1 */
    uint32_t
        CTRL1_SET; /*!< (read-write) Temperature Sensor Control Register 1 */
    uint32_t
        CTRL1_CLR; /*!< (read-write) Temperature Sensor Control Register 1 */
    uint32_t
        CTRL1_TOG;   /*!< (read-write) Temperature Sensor Control Register 1 */
    uint32_t RANGE0; /*!< (read-write) Temperature Sensor Range Register 0 */
    uint32_t
        RANGE0_SET; /*!< (read-write) Temperature Sensor Range Register 0 */
    uint32_t
        RANGE0_CLR; /*!< (read-write) Temperature Sensor Range Register 0 */
    uint32_t
        RANGE0_TOG;  /*!< (read-write) Temperature Sensor Range Register 0 */
    uint32_t RANGE1; /*!< (read-write) Temperature Sensor Range Register 1 */
    uint32_t
        RANGE1_SET; /*!< (read-write) Temperature Sensor Range Register 1 */
    uint32_t
        RANGE1_CLR; /*!< (read-write) Temperature Sensor Range Register 1 */
    uint32_t
        RANGE1_TOG; /*!< (read-write) Temperature Sensor Range Register 1 */
    static constexpr std::size_t reserved_padding0_length = 4;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t STATUS0; /*!< (read-write) Temperature Sensor Status Register 0 */

    /* Methods. */

    /**
     * Get CTRL0's IBIAS_TRIM field.
     *
     * Current bias trim value
     */
    inline uint8_t get_CTRL0_IBIAS_TRIM() volatile
    {
        return (CTRL0 >> 12u) & 0b1111u;
    }

    /**
     * Set CTRL0's IBIAS_TRIM field.
     *
     * Current bias trim value
     */
    inline void set_CTRL0_IBIAS_TRIM(uint8_t value) volatile
    {
        uint32_t curr = CTRL0;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        CTRL0 = curr;
    }

    /**
     * Get CTRL0's V_SEL field.
     *
     * Voltage Select
     */
    inline TMPSNS_CTRL0_V_SEL get_CTRL0_V_SEL() volatile
    {
        return TMPSNS_CTRL0_V_SEL((CTRL0 >> 8u) & 0b11u);
    }

    /**
     * Set CTRL0's V_SEL field.
     *
     * Voltage Select
     */
    inline void set_CTRL0_V_SEL(TMPSNS_CTRL0_V_SEL value) volatile
    {
        uint32_t curr = CTRL0;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        CTRL0 = curr;
    }

    /**
     * Get CTRL0's SLOPE_CAL field.
     *
     * Ramp slope calibration control
     */
    inline uint8_t get_CTRL0_SLOPE_CAL() volatile
    {
        return (CTRL0 >> 0u) & 0b111111u;
    }

    /**
     * Set CTRL0's SLOPE_CAL field.
     *
     * Ramp slope calibration control
     */
    inline void set_CTRL0_SLOPE_CAL(uint8_t value) volatile
    {
        uint32_t curr = CTRL0;

        curr &= ~(0b111111u << 0u);
        curr |= (value & 0b111111u) << 0u;

        CTRL0 = curr;
    }

    /**
     * Get all of CTRL0's bit fields.
     *
     * (read-write) Temperature Sensor Control Register 0
     */
    inline void get_CTRL0(uint8_t &IBIAS_TRIM, TMPSNS_CTRL0_V_SEL &V_SEL,
                          uint8_t &SLOPE_CAL) volatile
    {
        uint32_t curr = CTRL0;

        IBIAS_TRIM = (curr >> 12u) & 0b1111u;
        V_SEL = TMPSNS_CTRL0_V_SEL((curr >> 8u) & 0b11u);
        SLOPE_CAL = (curr >> 0u) & 0b111111u;
    }

    /**
     * Set all of CTRL0's bit fields.
     *
     * (read-write) Temperature Sensor Control Register 0
     */
    inline void set_CTRL0(uint8_t IBIAS_TRIM, TMPSNS_CTRL0_V_SEL V_SEL,
                          uint8_t SLOPE_CAL) volatile
    {
        uint32_t curr = CTRL0;

        curr &= ~(0b1111u << 12u);
        curr |= (IBIAS_TRIM & 0b1111u) << 12u;
        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(V_SEL) & 0b11u) << 8u;
        curr &= ~(0b111111u << 0u);
        curr |= (SLOPE_CAL & 0b111111u) << 0u;

        CTRL0 = curr;
    }

    /**
     * Get CTRL0_SET's IBIAS_TRIM field.
     *
     * Current bias trim value
     */
    inline uint8_t get_CTRL0_SET_IBIAS_TRIM() volatile
    {
        return (CTRL0_SET >> 12u) & 0b1111u;
    }

    /**
     * Set CTRL0_SET's IBIAS_TRIM field.
     *
     * Current bias trim value
     */
    inline void set_CTRL0_SET_IBIAS_TRIM(uint8_t value) volatile
    {
        uint32_t curr = CTRL0_SET;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        CTRL0_SET = curr;
    }

    /**
     * Get CTRL0_SET's V_SEL field.
     *
     * Voltage Select
     */
    inline uint8_t get_CTRL0_SET_V_SEL() volatile
    {
        return (CTRL0_SET >> 8u) & 0b11u;
    }

    /**
     * Set CTRL0_SET's V_SEL field.
     *
     * Voltage Select
     */
    inline void set_CTRL0_SET_V_SEL(uint8_t value) volatile
    {
        uint32_t curr = CTRL0_SET;

        curr &= ~(0b11u << 8u);
        curr |= (value & 0b11u) << 8u;

        CTRL0_SET = curr;
    }

    /**
     * Get CTRL0_SET's SLOPE_CAL field.
     *
     * Ramp slope calibration control
     */
    inline uint8_t get_CTRL0_SET_SLOPE_CAL() volatile
    {
        return (CTRL0_SET >> 0u) & 0b111111u;
    }

    /**
     * Set CTRL0_SET's SLOPE_CAL field.
     *
     * Ramp slope calibration control
     */
    inline void set_CTRL0_SET_SLOPE_CAL(uint8_t value) volatile
    {
        uint32_t curr = CTRL0_SET;

        curr &= ~(0b111111u << 0u);
        curr |= (value & 0b111111u) << 0u;

        CTRL0_SET = curr;
    }

    /**
     * Get all of CTRL0_SET's bit fields.
     *
     * (read-write) Temperature Sensor Control Register 0
     */
    inline void get_CTRL0_SET(uint8_t &IBIAS_TRIM, uint8_t &V_SEL,
                              uint8_t &SLOPE_CAL) volatile
    {
        uint32_t curr = CTRL0_SET;

        IBIAS_TRIM = (curr >> 12u) & 0b1111u;
        V_SEL = (curr >> 8u) & 0b11u;
        SLOPE_CAL = (curr >> 0u) & 0b111111u;
    }

    /**
     * Set all of CTRL0_SET's bit fields.
     *
     * (read-write) Temperature Sensor Control Register 0
     */
    inline void set_CTRL0_SET(uint8_t IBIAS_TRIM, uint8_t V_SEL,
                              uint8_t SLOPE_CAL) volatile
    {
        uint32_t curr = CTRL0_SET;

        curr &= ~(0b1111u << 12u);
        curr |= (IBIAS_TRIM & 0b1111u) << 12u;
        curr &= ~(0b11u << 8u);
        curr |= (V_SEL & 0b11u) << 8u;
        curr &= ~(0b111111u << 0u);
        curr |= (SLOPE_CAL & 0b111111u) << 0u;

        CTRL0_SET = curr;
    }

    /**
     * Get CTRL0_CLR's IBIAS_TRIM field.
     *
     * Current bias trim value
     */
    inline uint8_t get_CTRL0_CLR_IBIAS_TRIM() volatile
    {
        return (CTRL0_CLR >> 12u) & 0b1111u;
    }

    /**
     * Set CTRL0_CLR's IBIAS_TRIM field.
     *
     * Current bias trim value
     */
    inline void set_CTRL0_CLR_IBIAS_TRIM(uint8_t value) volatile
    {
        uint32_t curr = CTRL0_CLR;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        CTRL0_CLR = curr;
    }

    /**
     * Get CTRL0_CLR's V_SEL field.
     *
     * Voltage Select
     */
    inline uint8_t get_CTRL0_CLR_V_SEL() volatile
    {
        return (CTRL0_CLR >> 8u) & 0b11u;
    }

    /**
     * Set CTRL0_CLR's V_SEL field.
     *
     * Voltage Select
     */
    inline void set_CTRL0_CLR_V_SEL(uint8_t value) volatile
    {
        uint32_t curr = CTRL0_CLR;

        curr &= ~(0b11u << 8u);
        curr |= (value & 0b11u) << 8u;

        CTRL0_CLR = curr;
    }

    /**
     * Get CTRL0_CLR's SLOPE_CAL field.
     *
     * Ramp slope calibration control
     */
    inline uint8_t get_CTRL0_CLR_SLOPE_CAL() volatile
    {
        return (CTRL0_CLR >> 0u) & 0b111111u;
    }

    /**
     * Set CTRL0_CLR's SLOPE_CAL field.
     *
     * Ramp slope calibration control
     */
    inline void set_CTRL0_CLR_SLOPE_CAL(uint8_t value) volatile
    {
        uint32_t curr = CTRL0_CLR;

        curr &= ~(0b111111u << 0u);
        curr |= (value & 0b111111u) << 0u;

        CTRL0_CLR = curr;
    }

    /**
     * Get all of CTRL0_CLR's bit fields.
     *
     * (read-write) Temperature Sensor Control Register 0
     */
    inline void get_CTRL0_CLR(uint8_t &IBIAS_TRIM, uint8_t &V_SEL,
                              uint8_t &SLOPE_CAL) volatile
    {
        uint32_t curr = CTRL0_CLR;

        IBIAS_TRIM = (curr >> 12u) & 0b1111u;
        V_SEL = (curr >> 8u) & 0b11u;
        SLOPE_CAL = (curr >> 0u) & 0b111111u;
    }

    /**
     * Set all of CTRL0_CLR's bit fields.
     *
     * (read-write) Temperature Sensor Control Register 0
     */
    inline void set_CTRL0_CLR(uint8_t IBIAS_TRIM, uint8_t V_SEL,
                              uint8_t SLOPE_CAL) volatile
    {
        uint32_t curr = CTRL0_CLR;

        curr &= ~(0b1111u << 12u);
        curr |= (IBIAS_TRIM & 0b1111u) << 12u;
        curr &= ~(0b11u << 8u);
        curr |= (V_SEL & 0b11u) << 8u;
        curr &= ~(0b111111u << 0u);
        curr |= (SLOPE_CAL & 0b111111u) << 0u;

        CTRL0_CLR = curr;
    }

    /**
     * Get CTRL0_TOG's IBIAS_TRIM field.
     *
     * Current bias trim value
     */
    inline uint8_t get_CTRL0_TOG_IBIAS_TRIM() volatile
    {
        return (CTRL0_TOG >> 12u) & 0b1111u;
    }

    /**
     * Set CTRL0_TOG's IBIAS_TRIM field.
     *
     * Current bias trim value
     */
    inline void set_CTRL0_TOG_IBIAS_TRIM(uint8_t value) volatile
    {
        uint32_t curr = CTRL0_TOG;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        CTRL0_TOG = curr;
    }

    /**
     * Get CTRL0_TOG's V_SEL field.
     *
     * Voltage Select
     */
    inline uint8_t get_CTRL0_TOG_V_SEL() volatile
    {
        return (CTRL0_TOG >> 8u) & 0b11u;
    }

    /**
     * Set CTRL0_TOG's V_SEL field.
     *
     * Voltage Select
     */
    inline void set_CTRL0_TOG_V_SEL(uint8_t value) volatile
    {
        uint32_t curr = CTRL0_TOG;

        curr &= ~(0b11u << 8u);
        curr |= (value & 0b11u) << 8u;

        CTRL0_TOG = curr;
    }

    /**
     * Get CTRL0_TOG's SLOPE_CAL field.
     *
     * Ramp slope calibration control
     */
    inline uint8_t get_CTRL0_TOG_SLOPE_CAL() volatile
    {
        return (CTRL0_TOG >> 0u) & 0b111111u;
    }

    /**
     * Set CTRL0_TOG's SLOPE_CAL field.
     *
     * Ramp slope calibration control
     */
    inline void set_CTRL0_TOG_SLOPE_CAL(uint8_t value) volatile
    {
        uint32_t curr = CTRL0_TOG;

        curr &= ~(0b111111u << 0u);
        curr |= (value & 0b111111u) << 0u;

        CTRL0_TOG = curr;
    }

    /**
     * Get all of CTRL0_TOG's bit fields.
     *
     * (read-write) Temperature Sensor Control Register 0
     */
    inline void get_CTRL0_TOG(uint8_t &IBIAS_TRIM, uint8_t &V_SEL,
                              uint8_t &SLOPE_CAL) volatile
    {
        uint32_t curr = CTRL0_TOG;

        IBIAS_TRIM = (curr >> 12u) & 0b1111u;
        V_SEL = (curr >> 8u) & 0b11u;
        SLOPE_CAL = (curr >> 0u) & 0b111111u;
    }

    /**
     * Set all of CTRL0_TOG's bit fields.
     *
     * (read-write) Temperature Sensor Control Register 0
     */
    inline void set_CTRL0_TOG(uint8_t IBIAS_TRIM, uint8_t V_SEL,
                              uint8_t SLOPE_CAL) volatile
    {
        uint32_t curr = CTRL0_TOG;

        curr &= ~(0b1111u << 12u);
        curr |= (IBIAS_TRIM & 0b1111u) << 12u;
        curr &= ~(0b11u << 8u);
        curr |= (V_SEL & 0b11u) << 8u;
        curr &= ~(0b111111u << 0u);
        curr |= (SLOPE_CAL & 0b111111u) << 0u;

        CTRL0_TOG = curr;
    }

    /**
     * Get CTRL1's PWD_FULL bit.
     *
     * Temperature Sensor Full Power Down
     */
    inline bool get_CTRL1_PWD_FULL() volatile
    {
        return CTRL1 & (1u << 31u);
    }

    /**
     * Set CTRL1's PWD_FULL bit.
     *
     * Temperature Sensor Full Power Down
     */
    inline void set_CTRL1_PWD_FULL() volatile
    {
        CTRL1 |= 1u << 31u;
    }

    /**
     * Clear CTRL1's PWD_FULL bit.
     *
     * Temperature Sensor Full Power Down
     */
    inline void clear_CTRL1_PWD_FULL() volatile
    {
        CTRL1 &= ~(1u << 31u);
    }

    /**
     * Toggle CTRL1's PWD_FULL bit.
     *
     * Temperature Sensor Full Power Down
     */
    inline void toggle_CTRL1_PWD_FULL() volatile
    {
        CTRL1 ^= 1u << 31u;
    }

    /**
     * Get CTRL1's RFU field.
     *
     * Read/Writeable field. Reserved for future use
     */
    inline uint8_t get_CTRL1_RFU() volatile
    {
        return (CTRL1 >> 24u) & 0b1111111u;
    }

    /**
     * Set CTRL1's RFU field.
     *
     * Read/Writeable field. Reserved for future use
     */
    inline void set_CTRL1_RFU(uint8_t value) volatile
    {
        uint32_t curr = CTRL1;

        curr &= ~(0b1111111u << 24u);
        curr |= (value & 0b1111111u) << 24u;

        CTRL1 = curr;
    }

    /**
     * Get CTRL1's PWD bit.
     *
     * Temperature Sensor Power Down
     */
    inline bool get_CTRL1_PWD() volatile
    {
        return CTRL1 & (1u << 23u);
    }

    /**
     * Set CTRL1's PWD bit.
     *
     * Temperature Sensor Power Down
     */
    inline void set_CTRL1_PWD() volatile
    {
        CTRL1 |= 1u << 23u;
    }

    /**
     * Clear CTRL1's PWD bit.
     *
     * Temperature Sensor Power Down
     */
    inline void clear_CTRL1_PWD() volatile
    {
        CTRL1 &= ~(1u << 23u);
    }

    /**
     * Toggle CTRL1's PWD bit.
     *
     * Temperature Sensor Power Down
     */
    inline void toggle_CTRL1_PWD() volatile
    {
        CTRL1 ^= 1u << 23u;
    }

    /**
     * Get CTRL1's START bit.
     *
     * Start Temperature Measurement
     */
    inline bool get_CTRL1_START() volatile
    {
        return CTRL1 & (1u << 22u);
    }

    /**
     * Set CTRL1's START bit.
     *
     * Start Temperature Measurement
     */
    inline void set_CTRL1_START() volatile
    {
        CTRL1 |= 1u << 22u;
    }

    /**
     * Clear CTRL1's START bit.
     *
     * Start Temperature Measurement
     */
    inline void clear_CTRL1_START() volatile
    {
        CTRL1 &= ~(1u << 22u);
    }

    /**
     * Toggle CTRL1's START bit.
     *
     * Start Temperature Measurement
     */
    inline void toggle_CTRL1_START() volatile
    {
        CTRL1 ^= 1u << 22u;
    }

    /**
     * Get CTRL1's PANIC_TEMP_IE bit.
     *
     * Panic temperature interrupt enable
     */
    inline bool get_CTRL1_PANIC_TEMP_IE() volatile
    {
        return CTRL1 & (1u << 19u);
    }

    /**
     * Set CTRL1's PANIC_TEMP_IE bit.
     *
     * Panic temperature interrupt enable
     */
    inline void set_CTRL1_PANIC_TEMP_IE() volatile
    {
        CTRL1 |= 1u << 19u;
    }

    /**
     * Clear CTRL1's PANIC_TEMP_IE bit.
     *
     * Panic temperature interrupt enable
     */
    inline void clear_CTRL1_PANIC_TEMP_IE() volatile
    {
        CTRL1 &= ~(1u << 19u);
    }

    /**
     * Toggle CTRL1's PANIC_TEMP_IE bit.
     *
     * Panic temperature interrupt enable
     */
    inline void toggle_CTRL1_PANIC_TEMP_IE() volatile
    {
        CTRL1 ^= 1u << 19u;
    }

    /**
     * Get CTRL1's HIGH_TEMP_IE bit.
     *
     * High temperature interrupt enable
     */
    inline bool get_CTRL1_HIGH_TEMP_IE() volatile
    {
        return CTRL1 & (1u << 18u);
    }

    /**
     * Set CTRL1's HIGH_TEMP_IE bit.
     *
     * High temperature interrupt enable
     */
    inline void set_CTRL1_HIGH_TEMP_IE() volatile
    {
        CTRL1 |= 1u << 18u;
    }

    /**
     * Clear CTRL1's HIGH_TEMP_IE bit.
     *
     * High temperature interrupt enable
     */
    inline void clear_CTRL1_HIGH_TEMP_IE() volatile
    {
        CTRL1 &= ~(1u << 18u);
    }

    /**
     * Toggle CTRL1's HIGH_TEMP_IE bit.
     *
     * High temperature interrupt enable
     */
    inline void toggle_CTRL1_HIGH_TEMP_IE() volatile
    {
        CTRL1 ^= 1u << 18u;
    }

    /**
     * Get CTRL1's LOW_TEMP_IE bit.
     *
     * Low temperature interrupt enable
     */
    inline bool get_CTRL1_LOW_TEMP_IE() volatile
    {
        return CTRL1 & (1u << 17u);
    }

    /**
     * Set CTRL1's LOW_TEMP_IE bit.
     *
     * Low temperature interrupt enable
     */
    inline void set_CTRL1_LOW_TEMP_IE() volatile
    {
        CTRL1 |= 1u << 17u;
    }

    /**
     * Clear CTRL1's LOW_TEMP_IE bit.
     *
     * Low temperature interrupt enable
     */
    inline void clear_CTRL1_LOW_TEMP_IE() volatile
    {
        CTRL1 &= ~(1u << 17u);
    }

    /**
     * Toggle CTRL1's LOW_TEMP_IE bit.
     *
     * Low temperature interrupt enable
     */
    inline void toggle_CTRL1_LOW_TEMP_IE() volatile
    {
        CTRL1 ^= 1u << 17u;
    }

    /**
     * Get CTRL1's FINISH_IE bit.
     *
     * Measurement finished interrupt enable
     */
    inline bool get_CTRL1_FINISH_IE() volatile
    {
        return CTRL1 & (1u << 16u);
    }

    /**
     * Set CTRL1's FINISH_IE bit.
     *
     * Measurement finished interrupt enable
     */
    inline void set_CTRL1_FINISH_IE() volatile
    {
        CTRL1 |= 1u << 16u;
    }

    /**
     * Clear CTRL1's FINISH_IE bit.
     *
     * Measurement finished interrupt enable
     */
    inline void clear_CTRL1_FINISH_IE() volatile
    {
        CTRL1 &= ~(1u << 16u);
    }

    /**
     * Toggle CTRL1's FINISH_IE bit.
     *
     * Measurement finished interrupt enable
     */
    inline void toggle_CTRL1_FINISH_IE() volatile
    {
        CTRL1 ^= 1u << 16u;
    }

    /**
     * Get CTRL1's FREQ field.
     *
     * Temperature Measurement Frequency
     */
    inline TMPSNS_CTRL1_FREQ get_CTRL1_FREQ() volatile
    {
        return TMPSNS_CTRL1_FREQ((CTRL1 >> 0u) & 0b1111111111111111u);
    }

    /**
     * Set CTRL1's FREQ field.
     *
     * Temperature Measurement Frequency
     */
    inline void set_CTRL1_FREQ(TMPSNS_CTRL1_FREQ value) volatile
    {
        uint32_t curr = CTRL1;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111111111111111u) << 0u;

        CTRL1 = curr;
    }

    /**
     * Get all of CTRL1's bit fields.
     *
     * (read-write) Temperature Sensor Control Register 1
     */
    inline void get_CTRL1(bool &PWD_FULL, uint8_t &RFU, bool &PWD, bool &START,
                          bool &PANIC_TEMP_IE, bool &HIGH_TEMP_IE,
                          bool &LOW_TEMP_IE, bool &FINISH_IE,
                          TMPSNS_CTRL1_FREQ &FREQ) volatile
    {
        uint32_t curr = CTRL1;

        PWD_FULL = curr & (1u << 31u);
        RFU = (curr >> 24u) & 0b1111111u;
        PWD = curr & (1u << 23u);
        START = curr & (1u << 22u);
        PANIC_TEMP_IE = curr & (1u << 19u);
        HIGH_TEMP_IE = curr & (1u << 18u);
        LOW_TEMP_IE = curr & (1u << 17u);
        FINISH_IE = curr & (1u << 16u);
        FREQ = TMPSNS_CTRL1_FREQ((curr >> 0u) & 0b1111111111111111u);
    }

    /**
     * Set all of CTRL1's bit fields.
     *
     * (read-write) Temperature Sensor Control Register 1
     */
    inline void set_CTRL1(bool PWD_FULL, uint8_t RFU, bool PWD, bool START,
                          bool PANIC_TEMP_IE, bool HIGH_TEMP_IE,
                          bool LOW_TEMP_IE, bool FINISH_IE,
                          TMPSNS_CTRL1_FREQ FREQ) volatile
    {
        uint32_t curr = CTRL1;

        curr &= ~(0b1u << 31u);
        curr |= (PWD_FULL & 0b1u) << 31u;
        curr &= ~(0b1111111u << 24u);
        curr |= (RFU & 0b1111111u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (PWD & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (START & 0b1u) << 22u;
        curr &= ~(0b1u << 19u);
        curr |= (PANIC_TEMP_IE & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (HIGH_TEMP_IE & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (LOW_TEMP_IE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (FINISH_IE & 0b1u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (std::to_underlying(FREQ) & 0b1111111111111111u) << 0u;

        CTRL1 = curr;
    }

    /**
     * Get CTRL1_SET's PWD_FULL bit.
     *
     * Temperature Sensor Full Power Down
     */
    inline bool get_CTRL1_SET_PWD_FULL() volatile
    {
        return CTRL1_SET & (1u << 31u);
    }

    /**
     * Set CTRL1_SET's PWD_FULL bit.
     *
     * Temperature Sensor Full Power Down
     */
    inline void set_CTRL1_SET_PWD_FULL() volatile
    {
        CTRL1_SET |= 1u << 31u;
    }

    /**
     * Clear CTRL1_SET's PWD_FULL bit.
     *
     * Temperature Sensor Full Power Down
     */
    inline void clear_CTRL1_SET_PWD_FULL() volatile
    {
        CTRL1_SET &= ~(1u << 31u);
    }

    /**
     * Toggle CTRL1_SET's PWD_FULL bit.
     *
     * Temperature Sensor Full Power Down
     */
    inline void toggle_CTRL1_SET_PWD_FULL() volatile
    {
        CTRL1_SET ^= 1u << 31u;
    }

    /**
     * Get CTRL1_SET's RFU field.
     *
     * Read/Writeable field. Reserved for future use
     */
    inline uint8_t get_CTRL1_SET_RFU() volatile
    {
        return (CTRL1_SET >> 24u) & 0b1111111u;
    }

    /**
     * Set CTRL1_SET's RFU field.
     *
     * Read/Writeable field. Reserved for future use
     */
    inline void set_CTRL1_SET_RFU(uint8_t value) volatile
    {
        uint32_t curr = CTRL1_SET;

        curr &= ~(0b1111111u << 24u);
        curr |= (value & 0b1111111u) << 24u;

        CTRL1_SET = curr;
    }

    /**
     * Get CTRL1_SET's PWD bit.
     *
     * Temperature Sensor Power Down
     */
    inline bool get_CTRL1_SET_PWD() volatile
    {
        return CTRL1_SET & (1u << 23u);
    }

    /**
     * Set CTRL1_SET's PWD bit.
     *
     * Temperature Sensor Power Down
     */
    inline void set_CTRL1_SET_PWD() volatile
    {
        CTRL1_SET |= 1u << 23u;
    }

    /**
     * Clear CTRL1_SET's PWD bit.
     *
     * Temperature Sensor Power Down
     */
    inline void clear_CTRL1_SET_PWD() volatile
    {
        CTRL1_SET &= ~(1u << 23u);
    }

    /**
     * Toggle CTRL1_SET's PWD bit.
     *
     * Temperature Sensor Power Down
     */
    inline void toggle_CTRL1_SET_PWD() volatile
    {
        CTRL1_SET ^= 1u << 23u;
    }

    /**
     * Get CTRL1_SET's START bit.
     *
     * Start Temperature Measurement
     */
    inline bool get_CTRL1_SET_START() volatile
    {
        return CTRL1_SET & (1u << 22u);
    }

    /**
     * Set CTRL1_SET's START bit.
     *
     * Start Temperature Measurement
     */
    inline void set_CTRL1_SET_START() volatile
    {
        CTRL1_SET |= 1u << 22u;
    }

    /**
     * Clear CTRL1_SET's START bit.
     *
     * Start Temperature Measurement
     */
    inline void clear_CTRL1_SET_START() volatile
    {
        CTRL1_SET &= ~(1u << 22u);
    }

    /**
     * Toggle CTRL1_SET's START bit.
     *
     * Start Temperature Measurement
     */
    inline void toggle_CTRL1_SET_START() volatile
    {
        CTRL1_SET ^= 1u << 22u;
    }

    /**
     * Get CTRL1_SET's PANIC_TEMP_IE bit.
     *
     * Panic temperature interrupt enable
     */
    inline bool get_CTRL1_SET_PANIC_TEMP_IE() volatile
    {
        return CTRL1_SET & (1u << 19u);
    }

    /**
     * Set CTRL1_SET's PANIC_TEMP_IE bit.
     *
     * Panic temperature interrupt enable
     */
    inline void set_CTRL1_SET_PANIC_TEMP_IE() volatile
    {
        CTRL1_SET |= 1u << 19u;
    }

    /**
     * Clear CTRL1_SET's PANIC_TEMP_IE bit.
     *
     * Panic temperature interrupt enable
     */
    inline void clear_CTRL1_SET_PANIC_TEMP_IE() volatile
    {
        CTRL1_SET &= ~(1u << 19u);
    }

    /**
     * Toggle CTRL1_SET's PANIC_TEMP_IE bit.
     *
     * Panic temperature interrupt enable
     */
    inline void toggle_CTRL1_SET_PANIC_TEMP_IE() volatile
    {
        CTRL1_SET ^= 1u << 19u;
    }

    /**
     * Get CTRL1_SET's HIGH_TEMP_IE bit.
     *
     * High temperature interrupt enable
     */
    inline bool get_CTRL1_SET_HIGH_TEMP_IE() volatile
    {
        return CTRL1_SET & (1u << 18u);
    }

    /**
     * Set CTRL1_SET's HIGH_TEMP_IE bit.
     *
     * High temperature interrupt enable
     */
    inline void set_CTRL1_SET_HIGH_TEMP_IE() volatile
    {
        CTRL1_SET |= 1u << 18u;
    }

    /**
     * Clear CTRL1_SET's HIGH_TEMP_IE bit.
     *
     * High temperature interrupt enable
     */
    inline void clear_CTRL1_SET_HIGH_TEMP_IE() volatile
    {
        CTRL1_SET &= ~(1u << 18u);
    }

    /**
     * Toggle CTRL1_SET's HIGH_TEMP_IE bit.
     *
     * High temperature interrupt enable
     */
    inline void toggle_CTRL1_SET_HIGH_TEMP_IE() volatile
    {
        CTRL1_SET ^= 1u << 18u;
    }

    /**
     * Get CTRL1_SET's LOW_TEMP_IE bit.
     *
     * Low temperature interrupt enable
     */
    inline bool get_CTRL1_SET_LOW_TEMP_IE() volatile
    {
        return CTRL1_SET & (1u << 17u);
    }

    /**
     * Set CTRL1_SET's LOW_TEMP_IE bit.
     *
     * Low temperature interrupt enable
     */
    inline void set_CTRL1_SET_LOW_TEMP_IE() volatile
    {
        CTRL1_SET |= 1u << 17u;
    }

    /**
     * Clear CTRL1_SET's LOW_TEMP_IE bit.
     *
     * Low temperature interrupt enable
     */
    inline void clear_CTRL1_SET_LOW_TEMP_IE() volatile
    {
        CTRL1_SET &= ~(1u << 17u);
    }

    /**
     * Toggle CTRL1_SET's LOW_TEMP_IE bit.
     *
     * Low temperature interrupt enable
     */
    inline void toggle_CTRL1_SET_LOW_TEMP_IE() volatile
    {
        CTRL1_SET ^= 1u << 17u;
    }

    /**
     * Get CTRL1_SET's FINISH_IE bit.
     *
     * Measurement finished interrupt enable
     */
    inline bool get_CTRL1_SET_FINISH_IE() volatile
    {
        return CTRL1_SET & (1u << 16u);
    }

    /**
     * Set CTRL1_SET's FINISH_IE bit.
     *
     * Measurement finished interrupt enable
     */
    inline void set_CTRL1_SET_FINISH_IE() volatile
    {
        CTRL1_SET |= 1u << 16u;
    }

    /**
     * Clear CTRL1_SET's FINISH_IE bit.
     *
     * Measurement finished interrupt enable
     */
    inline void clear_CTRL1_SET_FINISH_IE() volatile
    {
        CTRL1_SET &= ~(1u << 16u);
    }

    /**
     * Toggle CTRL1_SET's FINISH_IE bit.
     *
     * Measurement finished interrupt enable
     */
    inline void toggle_CTRL1_SET_FINISH_IE() volatile
    {
        CTRL1_SET ^= 1u << 16u;
    }

    /**
     * Get CTRL1_SET's FREQ field.
     *
     * Temperature Measurement Frequency
     */
    inline uint16_t get_CTRL1_SET_FREQ() volatile
    {
        return (CTRL1_SET >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set CTRL1_SET's FREQ field.
     *
     * Temperature Measurement Frequency
     */
    inline void set_CTRL1_SET_FREQ(uint16_t value) volatile
    {
        uint32_t curr = CTRL1_SET;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        CTRL1_SET = curr;
    }

    /**
     * Get all of CTRL1_SET's bit fields.
     *
     * (read-write) Temperature Sensor Control Register 1
     */
    inline void get_CTRL1_SET(bool &PWD_FULL, uint8_t &RFU, bool &PWD,
                              bool &START, bool &PANIC_TEMP_IE,
                              bool &HIGH_TEMP_IE, bool &LOW_TEMP_IE,
                              bool &FINISH_IE, uint16_t &FREQ) volatile
    {
        uint32_t curr = CTRL1_SET;

        PWD_FULL = curr & (1u << 31u);
        RFU = (curr >> 24u) & 0b1111111u;
        PWD = curr & (1u << 23u);
        START = curr & (1u << 22u);
        PANIC_TEMP_IE = curr & (1u << 19u);
        HIGH_TEMP_IE = curr & (1u << 18u);
        LOW_TEMP_IE = curr & (1u << 17u);
        FINISH_IE = curr & (1u << 16u);
        FREQ = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of CTRL1_SET's bit fields.
     *
     * (read-write) Temperature Sensor Control Register 1
     */
    inline void set_CTRL1_SET(bool PWD_FULL, uint8_t RFU, bool PWD, bool START,
                              bool PANIC_TEMP_IE, bool HIGH_TEMP_IE,
                              bool LOW_TEMP_IE, bool FINISH_IE,
                              uint16_t FREQ) volatile
    {
        uint32_t curr = CTRL1_SET;

        curr &= ~(0b1u << 31u);
        curr |= (PWD_FULL & 0b1u) << 31u;
        curr &= ~(0b1111111u << 24u);
        curr |= (RFU & 0b1111111u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (PWD & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (START & 0b1u) << 22u;
        curr &= ~(0b1u << 19u);
        curr |= (PANIC_TEMP_IE & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (HIGH_TEMP_IE & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (LOW_TEMP_IE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (FINISH_IE & 0b1u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (FREQ & 0b1111111111111111u) << 0u;

        CTRL1_SET = curr;
    }

    /**
     * Get CTRL1_CLR's PWD_FULL bit.
     *
     * Temperature Sensor Full Power Down
     */
    inline bool get_CTRL1_CLR_PWD_FULL() volatile
    {
        return CTRL1_CLR & (1u << 31u);
    }

    /**
     * Set CTRL1_CLR's PWD_FULL bit.
     *
     * Temperature Sensor Full Power Down
     */
    inline void set_CTRL1_CLR_PWD_FULL() volatile
    {
        CTRL1_CLR |= 1u << 31u;
    }

    /**
     * Clear CTRL1_CLR's PWD_FULL bit.
     *
     * Temperature Sensor Full Power Down
     */
    inline void clear_CTRL1_CLR_PWD_FULL() volatile
    {
        CTRL1_CLR &= ~(1u << 31u);
    }

    /**
     * Toggle CTRL1_CLR's PWD_FULL bit.
     *
     * Temperature Sensor Full Power Down
     */
    inline void toggle_CTRL1_CLR_PWD_FULL() volatile
    {
        CTRL1_CLR ^= 1u << 31u;
    }

    /**
     * Get CTRL1_CLR's RFU field.
     *
     * Read/Writeable field. Reserved for future use
     */
    inline uint8_t get_CTRL1_CLR_RFU() volatile
    {
        return (CTRL1_CLR >> 24u) & 0b1111111u;
    }

    /**
     * Set CTRL1_CLR's RFU field.
     *
     * Read/Writeable field. Reserved for future use
     */
    inline void set_CTRL1_CLR_RFU(uint8_t value) volatile
    {
        uint32_t curr = CTRL1_CLR;

        curr &= ~(0b1111111u << 24u);
        curr |= (value & 0b1111111u) << 24u;

        CTRL1_CLR = curr;
    }

    /**
     * Get CTRL1_CLR's PWD bit.
     *
     * Temperature Sensor Power Down
     */
    inline bool get_CTRL1_CLR_PWD() volatile
    {
        return CTRL1_CLR & (1u << 23u);
    }

    /**
     * Set CTRL1_CLR's PWD bit.
     *
     * Temperature Sensor Power Down
     */
    inline void set_CTRL1_CLR_PWD() volatile
    {
        CTRL1_CLR |= 1u << 23u;
    }

    /**
     * Clear CTRL1_CLR's PWD bit.
     *
     * Temperature Sensor Power Down
     */
    inline void clear_CTRL1_CLR_PWD() volatile
    {
        CTRL1_CLR &= ~(1u << 23u);
    }

    /**
     * Toggle CTRL1_CLR's PWD bit.
     *
     * Temperature Sensor Power Down
     */
    inline void toggle_CTRL1_CLR_PWD() volatile
    {
        CTRL1_CLR ^= 1u << 23u;
    }

    /**
     * Get CTRL1_CLR's START bit.
     *
     * Start Temperature Measurement
     */
    inline bool get_CTRL1_CLR_START() volatile
    {
        return CTRL1_CLR & (1u << 22u);
    }

    /**
     * Set CTRL1_CLR's START bit.
     *
     * Start Temperature Measurement
     */
    inline void set_CTRL1_CLR_START() volatile
    {
        CTRL1_CLR |= 1u << 22u;
    }

    /**
     * Clear CTRL1_CLR's START bit.
     *
     * Start Temperature Measurement
     */
    inline void clear_CTRL1_CLR_START() volatile
    {
        CTRL1_CLR &= ~(1u << 22u);
    }

    /**
     * Toggle CTRL1_CLR's START bit.
     *
     * Start Temperature Measurement
     */
    inline void toggle_CTRL1_CLR_START() volatile
    {
        CTRL1_CLR ^= 1u << 22u;
    }

    /**
     * Get CTRL1_CLR's PANIC_TEMP_IE bit.
     *
     * Panic temperature interrupt enable
     */
    inline bool get_CTRL1_CLR_PANIC_TEMP_IE() volatile
    {
        return CTRL1_CLR & (1u << 19u);
    }

    /**
     * Set CTRL1_CLR's PANIC_TEMP_IE bit.
     *
     * Panic temperature interrupt enable
     */
    inline void set_CTRL1_CLR_PANIC_TEMP_IE() volatile
    {
        CTRL1_CLR |= 1u << 19u;
    }

    /**
     * Clear CTRL1_CLR's PANIC_TEMP_IE bit.
     *
     * Panic temperature interrupt enable
     */
    inline void clear_CTRL1_CLR_PANIC_TEMP_IE() volatile
    {
        CTRL1_CLR &= ~(1u << 19u);
    }

    /**
     * Toggle CTRL1_CLR's PANIC_TEMP_IE bit.
     *
     * Panic temperature interrupt enable
     */
    inline void toggle_CTRL1_CLR_PANIC_TEMP_IE() volatile
    {
        CTRL1_CLR ^= 1u << 19u;
    }

    /**
     * Get CTRL1_CLR's HIGH_TEMP_IE bit.
     *
     * High temperature interrupt enable
     */
    inline bool get_CTRL1_CLR_HIGH_TEMP_IE() volatile
    {
        return CTRL1_CLR & (1u << 18u);
    }

    /**
     * Set CTRL1_CLR's HIGH_TEMP_IE bit.
     *
     * High temperature interrupt enable
     */
    inline void set_CTRL1_CLR_HIGH_TEMP_IE() volatile
    {
        CTRL1_CLR |= 1u << 18u;
    }

    /**
     * Clear CTRL1_CLR's HIGH_TEMP_IE bit.
     *
     * High temperature interrupt enable
     */
    inline void clear_CTRL1_CLR_HIGH_TEMP_IE() volatile
    {
        CTRL1_CLR &= ~(1u << 18u);
    }

    /**
     * Toggle CTRL1_CLR's HIGH_TEMP_IE bit.
     *
     * High temperature interrupt enable
     */
    inline void toggle_CTRL1_CLR_HIGH_TEMP_IE() volatile
    {
        CTRL1_CLR ^= 1u << 18u;
    }

    /**
     * Get CTRL1_CLR's LOW_TEMP_IE bit.
     *
     * Low temperature interrupt enable
     */
    inline bool get_CTRL1_CLR_LOW_TEMP_IE() volatile
    {
        return CTRL1_CLR & (1u << 17u);
    }

    /**
     * Set CTRL1_CLR's LOW_TEMP_IE bit.
     *
     * Low temperature interrupt enable
     */
    inline void set_CTRL1_CLR_LOW_TEMP_IE() volatile
    {
        CTRL1_CLR |= 1u << 17u;
    }

    /**
     * Clear CTRL1_CLR's LOW_TEMP_IE bit.
     *
     * Low temperature interrupt enable
     */
    inline void clear_CTRL1_CLR_LOW_TEMP_IE() volatile
    {
        CTRL1_CLR &= ~(1u << 17u);
    }

    /**
     * Toggle CTRL1_CLR's LOW_TEMP_IE bit.
     *
     * Low temperature interrupt enable
     */
    inline void toggle_CTRL1_CLR_LOW_TEMP_IE() volatile
    {
        CTRL1_CLR ^= 1u << 17u;
    }

    /**
     * Get CTRL1_CLR's FINISH_IE bit.
     *
     * Measurement finished interrupt enable
     */
    inline bool get_CTRL1_CLR_FINISH_IE() volatile
    {
        return CTRL1_CLR & (1u << 16u);
    }

    /**
     * Set CTRL1_CLR's FINISH_IE bit.
     *
     * Measurement finished interrupt enable
     */
    inline void set_CTRL1_CLR_FINISH_IE() volatile
    {
        CTRL1_CLR |= 1u << 16u;
    }

    /**
     * Clear CTRL1_CLR's FINISH_IE bit.
     *
     * Measurement finished interrupt enable
     */
    inline void clear_CTRL1_CLR_FINISH_IE() volatile
    {
        CTRL1_CLR &= ~(1u << 16u);
    }

    /**
     * Toggle CTRL1_CLR's FINISH_IE bit.
     *
     * Measurement finished interrupt enable
     */
    inline void toggle_CTRL1_CLR_FINISH_IE() volatile
    {
        CTRL1_CLR ^= 1u << 16u;
    }

    /**
     * Get CTRL1_CLR's FREQ field.
     *
     * Temperature Measurement Frequency
     */
    inline uint16_t get_CTRL1_CLR_FREQ() volatile
    {
        return (CTRL1_CLR >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set CTRL1_CLR's FREQ field.
     *
     * Temperature Measurement Frequency
     */
    inline void set_CTRL1_CLR_FREQ(uint16_t value) volatile
    {
        uint32_t curr = CTRL1_CLR;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        CTRL1_CLR = curr;
    }

    /**
     * Get all of CTRL1_CLR's bit fields.
     *
     * (read-write) Temperature Sensor Control Register 1
     */
    inline void get_CTRL1_CLR(bool &PWD_FULL, uint8_t &RFU, bool &PWD,
                              bool &START, bool &PANIC_TEMP_IE,
                              bool &HIGH_TEMP_IE, bool &LOW_TEMP_IE,
                              bool &FINISH_IE, uint16_t &FREQ) volatile
    {
        uint32_t curr = CTRL1_CLR;

        PWD_FULL = curr & (1u << 31u);
        RFU = (curr >> 24u) & 0b1111111u;
        PWD = curr & (1u << 23u);
        START = curr & (1u << 22u);
        PANIC_TEMP_IE = curr & (1u << 19u);
        HIGH_TEMP_IE = curr & (1u << 18u);
        LOW_TEMP_IE = curr & (1u << 17u);
        FINISH_IE = curr & (1u << 16u);
        FREQ = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of CTRL1_CLR's bit fields.
     *
     * (read-write) Temperature Sensor Control Register 1
     */
    inline void set_CTRL1_CLR(bool PWD_FULL, uint8_t RFU, bool PWD, bool START,
                              bool PANIC_TEMP_IE, bool HIGH_TEMP_IE,
                              bool LOW_TEMP_IE, bool FINISH_IE,
                              uint16_t FREQ) volatile
    {
        uint32_t curr = CTRL1_CLR;

        curr &= ~(0b1u << 31u);
        curr |= (PWD_FULL & 0b1u) << 31u;
        curr &= ~(0b1111111u << 24u);
        curr |= (RFU & 0b1111111u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (PWD & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (START & 0b1u) << 22u;
        curr &= ~(0b1u << 19u);
        curr |= (PANIC_TEMP_IE & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (HIGH_TEMP_IE & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (LOW_TEMP_IE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (FINISH_IE & 0b1u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (FREQ & 0b1111111111111111u) << 0u;

        CTRL1_CLR = curr;
    }

    /**
     * Get CTRL1_TOG's PWD_FULL bit.
     *
     * Temperature Sensor Full Power Down
     */
    inline bool get_CTRL1_TOG_PWD_FULL() volatile
    {
        return CTRL1_TOG & (1u << 31u);
    }

    /**
     * Set CTRL1_TOG's PWD_FULL bit.
     *
     * Temperature Sensor Full Power Down
     */
    inline void set_CTRL1_TOG_PWD_FULL() volatile
    {
        CTRL1_TOG |= 1u << 31u;
    }

    /**
     * Clear CTRL1_TOG's PWD_FULL bit.
     *
     * Temperature Sensor Full Power Down
     */
    inline void clear_CTRL1_TOG_PWD_FULL() volatile
    {
        CTRL1_TOG &= ~(1u << 31u);
    }

    /**
     * Toggle CTRL1_TOG's PWD_FULL bit.
     *
     * Temperature Sensor Full Power Down
     */
    inline void toggle_CTRL1_TOG_PWD_FULL() volatile
    {
        CTRL1_TOG ^= 1u << 31u;
    }

    /**
     * Get CTRL1_TOG's RFU field.
     *
     * Read/Writeable field. Reserved for future use
     */
    inline uint8_t get_CTRL1_TOG_RFU() volatile
    {
        return (CTRL1_TOG >> 24u) & 0b1111111u;
    }

    /**
     * Set CTRL1_TOG's RFU field.
     *
     * Read/Writeable field. Reserved for future use
     */
    inline void set_CTRL1_TOG_RFU(uint8_t value) volatile
    {
        uint32_t curr = CTRL1_TOG;

        curr &= ~(0b1111111u << 24u);
        curr |= (value & 0b1111111u) << 24u;

        CTRL1_TOG = curr;
    }

    /**
     * Get CTRL1_TOG's PWD bit.
     *
     * Temperature Sensor Power Down
     */
    inline bool get_CTRL1_TOG_PWD() volatile
    {
        return CTRL1_TOG & (1u << 23u);
    }

    /**
     * Set CTRL1_TOG's PWD bit.
     *
     * Temperature Sensor Power Down
     */
    inline void set_CTRL1_TOG_PWD() volatile
    {
        CTRL1_TOG |= 1u << 23u;
    }

    /**
     * Clear CTRL1_TOG's PWD bit.
     *
     * Temperature Sensor Power Down
     */
    inline void clear_CTRL1_TOG_PWD() volatile
    {
        CTRL1_TOG &= ~(1u << 23u);
    }

    /**
     * Toggle CTRL1_TOG's PWD bit.
     *
     * Temperature Sensor Power Down
     */
    inline void toggle_CTRL1_TOG_PWD() volatile
    {
        CTRL1_TOG ^= 1u << 23u;
    }

    /**
     * Get CTRL1_TOG's START bit.
     *
     * Start Temperature Measurement
     */
    inline bool get_CTRL1_TOG_START() volatile
    {
        return CTRL1_TOG & (1u << 22u);
    }

    /**
     * Set CTRL1_TOG's START bit.
     *
     * Start Temperature Measurement
     */
    inline void set_CTRL1_TOG_START() volatile
    {
        CTRL1_TOG |= 1u << 22u;
    }

    /**
     * Clear CTRL1_TOG's START bit.
     *
     * Start Temperature Measurement
     */
    inline void clear_CTRL1_TOG_START() volatile
    {
        CTRL1_TOG &= ~(1u << 22u);
    }

    /**
     * Toggle CTRL1_TOG's START bit.
     *
     * Start Temperature Measurement
     */
    inline void toggle_CTRL1_TOG_START() volatile
    {
        CTRL1_TOG ^= 1u << 22u;
    }

    /**
     * Get CTRL1_TOG's PANIC_TEMP_IE bit.
     *
     * Panic temperature interrupt enable
     */
    inline bool get_CTRL1_TOG_PANIC_TEMP_IE() volatile
    {
        return CTRL1_TOG & (1u << 19u);
    }

    /**
     * Set CTRL1_TOG's PANIC_TEMP_IE bit.
     *
     * Panic temperature interrupt enable
     */
    inline void set_CTRL1_TOG_PANIC_TEMP_IE() volatile
    {
        CTRL1_TOG |= 1u << 19u;
    }

    /**
     * Clear CTRL1_TOG's PANIC_TEMP_IE bit.
     *
     * Panic temperature interrupt enable
     */
    inline void clear_CTRL1_TOG_PANIC_TEMP_IE() volatile
    {
        CTRL1_TOG &= ~(1u << 19u);
    }

    /**
     * Toggle CTRL1_TOG's PANIC_TEMP_IE bit.
     *
     * Panic temperature interrupt enable
     */
    inline void toggle_CTRL1_TOG_PANIC_TEMP_IE() volatile
    {
        CTRL1_TOG ^= 1u << 19u;
    }

    /**
     * Get CTRL1_TOG's HIGH_TEMP_IE bit.
     *
     * High temperature interrupt enable
     */
    inline bool get_CTRL1_TOG_HIGH_TEMP_IE() volatile
    {
        return CTRL1_TOG & (1u << 18u);
    }

    /**
     * Set CTRL1_TOG's HIGH_TEMP_IE bit.
     *
     * High temperature interrupt enable
     */
    inline void set_CTRL1_TOG_HIGH_TEMP_IE() volatile
    {
        CTRL1_TOG |= 1u << 18u;
    }

    /**
     * Clear CTRL1_TOG's HIGH_TEMP_IE bit.
     *
     * High temperature interrupt enable
     */
    inline void clear_CTRL1_TOG_HIGH_TEMP_IE() volatile
    {
        CTRL1_TOG &= ~(1u << 18u);
    }

    /**
     * Toggle CTRL1_TOG's HIGH_TEMP_IE bit.
     *
     * High temperature interrupt enable
     */
    inline void toggle_CTRL1_TOG_HIGH_TEMP_IE() volatile
    {
        CTRL1_TOG ^= 1u << 18u;
    }

    /**
     * Get CTRL1_TOG's LOW_TEMP_IE bit.
     *
     * Low temperature interrupt enable
     */
    inline bool get_CTRL1_TOG_LOW_TEMP_IE() volatile
    {
        return CTRL1_TOG & (1u << 17u);
    }

    /**
     * Set CTRL1_TOG's LOW_TEMP_IE bit.
     *
     * Low temperature interrupt enable
     */
    inline void set_CTRL1_TOG_LOW_TEMP_IE() volatile
    {
        CTRL1_TOG |= 1u << 17u;
    }

    /**
     * Clear CTRL1_TOG's LOW_TEMP_IE bit.
     *
     * Low temperature interrupt enable
     */
    inline void clear_CTRL1_TOG_LOW_TEMP_IE() volatile
    {
        CTRL1_TOG &= ~(1u << 17u);
    }

    /**
     * Toggle CTRL1_TOG's LOW_TEMP_IE bit.
     *
     * Low temperature interrupt enable
     */
    inline void toggle_CTRL1_TOG_LOW_TEMP_IE() volatile
    {
        CTRL1_TOG ^= 1u << 17u;
    }

    /**
     * Get CTRL1_TOG's FINISH_IE bit.
     *
     * Measurement finished interrupt enable
     */
    inline bool get_CTRL1_TOG_FINISH_IE() volatile
    {
        return CTRL1_TOG & (1u << 16u);
    }

    /**
     * Set CTRL1_TOG's FINISH_IE bit.
     *
     * Measurement finished interrupt enable
     */
    inline void set_CTRL1_TOG_FINISH_IE() volatile
    {
        CTRL1_TOG |= 1u << 16u;
    }

    /**
     * Clear CTRL1_TOG's FINISH_IE bit.
     *
     * Measurement finished interrupt enable
     */
    inline void clear_CTRL1_TOG_FINISH_IE() volatile
    {
        CTRL1_TOG &= ~(1u << 16u);
    }

    /**
     * Toggle CTRL1_TOG's FINISH_IE bit.
     *
     * Measurement finished interrupt enable
     */
    inline void toggle_CTRL1_TOG_FINISH_IE() volatile
    {
        CTRL1_TOG ^= 1u << 16u;
    }

    /**
     * Get CTRL1_TOG's FREQ field.
     *
     * Temperature Measurement Frequency
     */
    inline uint16_t get_CTRL1_TOG_FREQ() volatile
    {
        return (CTRL1_TOG >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set CTRL1_TOG's FREQ field.
     *
     * Temperature Measurement Frequency
     */
    inline void set_CTRL1_TOG_FREQ(uint16_t value) volatile
    {
        uint32_t curr = CTRL1_TOG;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        CTRL1_TOG = curr;
    }

    /**
     * Get all of CTRL1_TOG's bit fields.
     *
     * (read-write) Temperature Sensor Control Register 1
     */
    inline void get_CTRL1_TOG(bool &PWD_FULL, uint8_t &RFU, bool &PWD,
                              bool &START, bool &PANIC_TEMP_IE,
                              bool &HIGH_TEMP_IE, bool &LOW_TEMP_IE,
                              bool &FINISH_IE, uint16_t &FREQ) volatile
    {
        uint32_t curr = CTRL1_TOG;

        PWD_FULL = curr & (1u << 31u);
        RFU = (curr >> 24u) & 0b1111111u;
        PWD = curr & (1u << 23u);
        START = curr & (1u << 22u);
        PANIC_TEMP_IE = curr & (1u << 19u);
        HIGH_TEMP_IE = curr & (1u << 18u);
        LOW_TEMP_IE = curr & (1u << 17u);
        FINISH_IE = curr & (1u << 16u);
        FREQ = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of CTRL1_TOG's bit fields.
     *
     * (read-write) Temperature Sensor Control Register 1
     */
    inline void set_CTRL1_TOG(bool PWD_FULL, uint8_t RFU, bool PWD, bool START,
                              bool PANIC_TEMP_IE, bool HIGH_TEMP_IE,
                              bool LOW_TEMP_IE, bool FINISH_IE,
                              uint16_t FREQ) volatile
    {
        uint32_t curr = CTRL1_TOG;

        curr &= ~(0b1u << 31u);
        curr |= (PWD_FULL & 0b1u) << 31u;
        curr &= ~(0b1111111u << 24u);
        curr |= (RFU & 0b1111111u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (PWD & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (START & 0b1u) << 22u;
        curr &= ~(0b1u << 19u);
        curr |= (PANIC_TEMP_IE & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (HIGH_TEMP_IE & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (LOW_TEMP_IE & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (FINISH_IE & 0b1u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (FREQ & 0b1111111111111111u) << 0u;

        CTRL1_TOG = curr;
    }

    /**
     * Get RANGE0's HIGH_TEMP_VAL field.
     *
     * High temperature threshold value
     */
    inline uint16_t get_RANGE0_HIGH_TEMP_VAL() volatile
    {
        return (RANGE0 >> 16u) & 0b111111111111u;
    }

    /**
     * Set RANGE0's HIGH_TEMP_VAL field.
     *
     * High temperature threshold value
     */
    inline void set_RANGE0_HIGH_TEMP_VAL(uint16_t value) volatile
    {
        uint32_t curr = RANGE0;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        RANGE0 = curr;
    }

    /**
     * Get RANGE0's LOW_TEMP_VAL field.
     *
     * Low temperature threshold value
     */
    inline uint16_t get_RANGE0_LOW_TEMP_VAL() volatile
    {
        return (RANGE0 >> 0u) & 0b111111111111u;
    }

    /**
     * Set RANGE0's LOW_TEMP_VAL field.
     *
     * Low temperature threshold value
     */
    inline void set_RANGE0_LOW_TEMP_VAL(uint16_t value) volatile
    {
        uint32_t curr = RANGE0;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        RANGE0 = curr;
    }

    /**
     * Get all of RANGE0's bit fields.
     *
     * (read-write) Temperature Sensor Range Register 0
     */
    inline void get_RANGE0(uint16_t &HIGH_TEMP_VAL,
                           uint16_t &LOW_TEMP_VAL) volatile
    {
        uint32_t curr = RANGE0;

        HIGH_TEMP_VAL = (curr >> 16u) & 0b111111111111u;
        LOW_TEMP_VAL = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of RANGE0's bit fields.
     *
     * (read-write) Temperature Sensor Range Register 0
     */
    inline void set_RANGE0(uint16_t HIGH_TEMP_VAL,
                           uint16_t LOW_TEMP_VAL) volatile
    {
        uint32_t curr = RANGE0;

        curr &= ~(0b111111111111u << 16u);
        curr |= (HIGH_TEMP_VAL & 0b111111111111u) << 16u;
        curr &= ~(0b111111111111u << 0u);
        curr |= (LOW_TEMP_VAL & 0b111111111111u) << 0u;

        RANGE0 = curr;
    }

    /**
     * Get RANGE0_SET's HIGH_TEMP_VAL field.
     *
     * High temperature threshold value
     */
    inline uint16_t get_RANGE0_SET_HIGH_TEMP_VAL() volatile
    {
        return (RANGE0_SET >> 16u) & 0b111111111111u;
    }

    /**
     * Set RANGE0_SET's HIGH_TEMP_VAL field.
     *
     * High temperature threshold value
     */
    inline void set_RANGE0_SET_HIGH_TEMP_VAL(uint16_t value) volatile
    {
        uint32_t curr = RANGE0_SET;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        RANGE0_SET = curr;
    }

    /**
     * Get RANGE0_SET's LOW_TEMP_VAL field.
     *
     * Low temperature threshold value
     */
    inline uint16_t get_RANGE0_SET_LOW_TEMP_VAL() volatile
    {
        return (RANGE0_SET >> 0u) & 0b111111111111u;
    }

    /**
     * Set RANGE0_SET's LOW_TEMP_VAL field.
     *
     * Low temperature threshold value
     */
    inline void set_RANGE0_SET_LOW_TEMP_VAL(uint16_t value) volatile
    {
        uint32_t curr = RANGE0_SET;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        RANGE0_SET = curr;
    }

    /**
     * Get all of RANGE0_SET's bit fields.
     *
     * (read-write) Temperature Sensor Range Register 0
     */
    inline void get_RANGE0_SET(uint16_t &HIGH_TEMP_VAL,
                               uint16_t &LOW_TEMP_VAL) volatile
    {
        uint32_t curr = RANGE0_SET;

        HIGH_TEMP_VAL = (curr >> 16u) & 0b111111111111u;
        LOW_TEMP_VAL = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of RANGE0_SET's bit fields.
     *
     * (read-write) Temperature Sensor Range Register 0
     */
    inline void set_RANGE0_SET(uint16_t HIGH_TEMP_VAL,
                               uint16_t LOW_TEMP_VAL) volatile
    {
        uint32_t curr = RANGE0_SET;

        curr &= ~(0b111111111111u << 16u);
        curr |= (HIGH_TEMP_VAL & 0b111111111111u) << 16u;
        curr &= ~(0b111111111111u << 0u);
        curr |= (LOW_TEMP_VAL & 0b111111111111u) << 0u;

        RANGE0_SET = curr;
    }

    /**
     * Get RANGE0_CLR's HIGH_TEMP_VAL field.
     *
     * High temperature threshold value
     */
    inline uint16_t get_RANGE0_CLR_HIGH_TEMP_VAL() volatile
    {
        return (RANGE0_CLR >> 16u) & 0b111111111111u;
    }

    /**
     * Set RANGE0_CLR's HIGH_TEMP_VAL field.
     *
     * High temperature threshold value
     */
    inline void set_RANGE0_CLR_HIGH_TEMP_VAL(uint16_t value) volatile
    {
        uint32_t curr = RANGE0_CLR;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        RANGE0_CLR = curr;
    }

    /**
     * Get RANGE0_CLR's LOW_TEMP_VAL field.
     *
     * Low temperature threshold value
     */
    inline uint16_t get_RANGE0_CLR_LOW_TEMP_VAL() volatile
    {
        return (RANGE0_CLR >> 0u) & 0b111111111111u;
    }

    /**
     * Set RANGE0_CLR's LOW_TEMP_VAL field.
     *
     * Low temperature threshold value
     */
    inline void set_RANGE0_CLR_LOW_TEMP_VAL(uint16_t value) volatile
    {
        uint32_t curr = RANGE0_CLR;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        RANGE0_CLR = curr;
    }

    /**
     * Get all of RANGE0_CLR's bit fields.
     *
     * (read-write) Temperature Sensor Range Register 0
     */
    inline void get_RANGE0_CLR(uint16_t &HIGH_TEMP_VAL,
                               uint16_t &LOW_TEMP_VAL) volatile
    {
        uint32_t curr = RANGE0_CLR;

        HIGH_TEMP_VAL = (curr >> 16u) & 0b111111111111u;
        LOW_TEMP_VAL = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of RANGE0_CLR's bit fields.
     *
     * (read-write) Temperature Sensor Range Register 0
     */
    inline void set_RANGE0_CLR(uint16_t HIGH_TEMP_VAL,
                               uint16_t LOW_TEMP_VAL) volatile
    {
        uint32_t curr = RANGE0_CLR;

        curr &= ~(0b111111111111u << 16u);
        curr |= (HIGH_TEMP_VAL & 0b111111111111u) << 16u;
        curr &= ~(0b111111111111u << 0u);
        curr |= (LOW_TEMP_VAL & 0b111111111111u) << 0u;

        RANGE0_CLR = curr;
    }

    /**
     * Get RANGE0_TOG's HIGH_TEMP_VAL field.
     *
     * High temperature threshold value
     */
    inline uint16_t get_RANGE0_TOG_HIGH_TEMP_VAL() volatile
    {
        return (RANGE0_TOG >> 16u) & 0b111111111111u;
    }

    /**
     * Set RANGE0_TOG's HIGH_TEMP_VAL field.
     *
     * High temperature threshold value
     */
    inline void set_RANGE0_TOG_HIGH_TEMP_VAL(uint16_t value) volatile
    {
        uint32_t curr = RANGE0_TOG;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        RANGE0_TOG = curr;
    }

    /**
     * Get RANGE0_TOG's LOW_TEMP_VAL field.
     *
     * Low temperature threshold value
     */
    inline uint16_t get_RANGE0_TOG_LOW_TEMP_VAL() volatile
    {
        return (RANGE0_TOG >> 0u) & 0b111111111111u;
    }

    /**
     * Set RANGE0_TOG's LOW_TEMP_VAL field.
     *
     * Low temperature threshold value
     */
    inline void set_RANGE0_TOG_LOW_TEMP_VAL(uint16_t value) volatile
    {
        uint32_t curr = RANGE0_TOG;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        RANGE0_TOG = curr;
    }

    /**
     * Get all of RANGE0_TOG's bit fields.
     *
     * (read-write) Temperature Sensor Range Register 0
     */
    inline void get_RANGE0_TOG(uint16_t &HIGH_TEMP_VAL,
                               uint16_t &LOW_TEMP_VAL) volatile
    {
        uint32_t curr = RANGE0_TOG;

        HIGH_TEMP_VAL = (curr >> 16u) & 0b111111111111u;
        LOW_TEMP_VAL = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of RANGE0_TOG's bit fields.
     *
     * (read-write) Temperature Sensor Range Register 0
     */
    inline void set_RANGE0_TOG(uint16_t HIGH_TEMP_VAL,
                               uint16_t LOW_TEMP_VAL) volatile
    {
        uint32_t curr = RANGE0_TOG;

        curr &= ~(0b111111111111u << 16u);
        curr |= (HIGH_TEMP_VAL & 0b111111111111u) << 16u;
        curr &= ~(0b111111111111u << 0u);
        curr |= (LOW_TEMP_VAL & 0b111111111111u) << 0u;

        RANGE0_TOG = curr;
    }

    /**
     * Get RANGE1's PANIC_TEMP_VAL field.
     *
     * Panic temperature threshold value
     */
    inline uint16_t get_RANGE1_PANIC_TEMP_VAL() volatile
    {
        return (RANGE1 >> 0u) & 0b111111111111u;
    }

    /**
     * Set RANGE1's PANIC_TEMP_VAL field.
     *
     * Panic temperature threshold value
     */
    inline void set_RANGE1_PANIC_TEMP_VAL(uint16_t value) volatile
    {
        uint32_t curr = RANGE1;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        RANGE1 = curr;
    }

    /**
     * Get RANGE1_SET's PANIC_TEMP_VAL field.
     *
     * Panic temperature threshold value
     */
    inline uint16_t get_RANGE1_SET_PANIC_TEMP_VAL() volatile
    {
        return (RANGE1_SET >> 0u) & 0b111111111111u;
    }

    /**
     * Set RANGE1_SET's PANIC_TEMP_VAL field.
     *
     * Panic temperature threshold value
     */
    inline void set_RANGE1_SET_PANIC_TEMP_VAL(uint16_t value) volatile
    {
        uint32_t curr = RANGE1_SET;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        RANGE1_SET = curr;
    }

    /**
     * Get RANGE1_CLR's PANIC_TEMP_VAL field.
     *
     * Panic temperature threshold value
     */
    inline uint16_t get_RANGE1_CLR_PANIC_TEMP_VAL() volatile
    {
        return (RANGE1_CLR >> 0u) & 0b111111111111u;
    }

    /**
     * Set RANGE1_CLR's PANIC_TEMP_VAL field.
     *
     * Panic temperature threshold value
     */
    inline void set_RANGE1_CLR_PANIC_TEMP_VAL(uint16_t value) volatile
    {
        uint32_t curr = RANGE1_CLR;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        RANGE1_CLR = curr;
    }

    /**
     * Get RANGE1_TOG's PANIC_TEMP_VAL field.
     *
     * Panic temperature threshold value
     */
    inline uint16_t get_RANGE1_TOG_PANIC_TEMP_VAL() volatile
    {
        return (RANGE1_TOG >> 0u) & 0b111111111111u;
    }

    /**
     * Set RANGE1_TOG's PANIC_TEMP_VAL field.
     *
     * Panic temperature threshold value
     */
    inline void set_RANGE1_TOG_PANIC_TEMP_VAL(uint16_t value) volatile
    {
        uint32_t curr = RANGE1_TOG;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        RANGE1_TOG = curr;
    }

    /**
     * Get STATUS0's PANIC_TEMP bit.
     *
     * Panic temperature alarm bit
     */
    inline bool get_STATUS0_PANIC_TEMP() volatile
    {
        return STATUS0 & (1u << 19u);
    }

    /**
     * Set STATUS0's PANIC_TEMP bit.
     *
     * Panic temperature alarm bit
     */
    inline void set_STATUS0_PANIC_TEMP() volatile
    {
        STATUS0 |= 1u << 19u;
    }

    /**
     * Clear STATUS0's PANIC_TEMP bit.
     *
     * Panic temperature alarm bit
     */
    inline void clear_STATUS0_PANIC_TEMP() volatile
    {
        STATUS0 &= ~(1u << 19u);
    }

    /**
     * Toggle STATUS0's PANIC_TEMP bit.
     *
     * Panic temperature alarm bit
     */
    inline void toggle_STATUS0_PANIC_TEMP() volatile
    {
        STATUS0 ^= 1u << 19u;
    }

    /**
     * Get STATUS0's HIGH_TEMP bit.
     *
     * High temperature alarm bit
     */
    inline bool get_STATUS0_HIGH_TEMP() volatile
    {
        return STATUS0 & (1u << 18u);
    }

    /**
     * Set STATUS0's HIGH_TEMP bit.
     *
     * High temperature alarm bit
     */
    inline void set_STATUS0_HIGH_TEMP() volatile
    {
        STATUS0 |= 1u << 18u;
    }

    /**
     * Clear STATUS0's HIGH_TEMP bit.
     *
     * High temperature alarm bit
     */
    inline void clear_STATUS0_HIGH_TEMP() volatile
    {
        STATUS0 &= ~(1u << 18u);
    }

    /**
     * Toggle STATUS0's HIGH_TEMP bit.
     *
     * High temperature alarm bit
     */
    inline void toggle_STATUS0_HIGH_TEMP() volatile
    {
        STATUS0 ^= 1u << 18u;
    }

    /**
     * Get STATUS0's LOW_TEMP bit.
     *
     * Low temperature alarm bit
     */
    inline bool get_STATUS0_LOW_TEMP() volatile
    {
        return STATUS0 & (1u << 17u);
    }

    /**
     * Set STATUS0's LOW_TEMP bit.
     *
     * Low temperature alarm bit
     */
    inline void set_STATUS0_LOW_TEMP() volatile
    {
        STATUS0 |= 1u << 17u;
    }

    /**
     * Clear STATUS0's LOW_TEMP bit.
     *
     * Low temperature alarm bit
     */
    inline void clear_STATUS0_LOW_TEMP() volatile
    {
        STATUS0 &= ~(1u << 17u);
    }

    /**
     * Toggle STATUS0's LOW_TEMP bit.
     *
     * Low temperature alarm bit
     */
    inline void toggle_STATUS0_LOW_TEMP() volatile
    {
        STATUS0 ^= 1u << 17u;
    }

    /**
     * Get STATUS0's FINISH bit.
     *
     * Temperature measurement complete
     */
    inline bool get_STATUS0_FINISH() volatile
    {
        return STATUS0 & (1u << 16u);
    }

    /**
     * Set STATUS0's FINISH bit.
     *
     * Temperature measurement complete
     */
    inline void set_STATUS0_FINISH() volatile
    {
        STATUS0 |= 1u << 16u;
    }

    /**
     * Clear STATUS0's FINISH bit.
     *
     * Temperature measurement complete
     */
    inline void clear_STATUS0_FINISH() volatile
    {
        STATUS0 &= ~(1u << 16u);
    }

    /**
     * Toggle STATUS0's FINISH bit.
     *
     * Temperature measurement complete
     */
    inline void toggle_STATUS0_FINISH() volatile
    {
        STATUS0 ^= 1u << 16u;
    }

    /**
     * Get STATUS0's TEMP_VAL field.
     *
     * Measured temperature value
     */
    inline uint16_t get_STATUS0_TEMP_VAL() volatile
    {
        return (STATUS0 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of STATUS0's bit fields.
     *
     * (read-write) Temperature Sensor Status Register 0
     */
    inline void get_STATUS0(bool &PANIC_TEMP, bool &HIGH_TEMP, bool &LOW_TEMP,
                            bool &FINISH, uint16_t &TEMP_VAL) volatile
    {
        uint32_t curr = STATUS0;

        PANIC_TEMP = curr & (1u << 19u);
        HIGH_TEMP = curr & (1u << 18u);
        LOW_TEMP = curr & (1u << 17u);
        FINISH = curr & (1u << 16u);
        TEMP_VAL = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of STATUS0's bit fields.
     *
     * (read-write) Temperature Sensor Status Register 0
     */
    inline void set_STATUS0(bool PANIC_TEMP, bool HIGH_TEMP, bool LOW_TEMP,
                            bool FINISH) volatile
    {
        uint32_t curr = STATUS0;

        curr &= ~(0b1u << 19u);
        curr |= (PANIC_TEMP & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (HIGH_TEMP & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (LOW_TEMP & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (FINISH & 0b1u) << 16u;

        STATUS0 = curr;
    }
};

static_assert(sizeof(tmpsns) == tmpsns::size);

static volatile tmpsns *const TMPSNS = reinterpret_cast<tmpsns *>(0);

}; // namespace MIMXRT1176::CM7
