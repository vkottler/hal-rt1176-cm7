/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/ADC_ETC_CTRL_TRIG_ENABLE.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_1_0_CSEL0.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_1_0_CSEL1.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_1_0_HWTS0.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_1_0_HWTS1.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_1_0_IE0.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_1_0_IE1.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_3_2_CSEL2.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_3_2_CSEL3.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_3_2_HWTS2.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_3_2_HWTS3.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_3_2_IE2.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_3_2_IE3.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_5_4_CSEL4.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_5_4_CSEL5.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_5_4_HWTS4.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_5_4_HWTS5.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_5_4_IE4.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_5_4_IE5.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_7_6_CSEL6.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_7_6_CSEL7.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_7_6_HWTS6.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_7_6_HWTS7.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_7_6_IE6.h"
#include "../enums/ADC_ETC_TRIG0_CHAIN_7_6_IE7.h"
#include "../enums/ADC_ETC_TRIG0_CTRL_CHAINx_DONE.h"
#include "../enums/ADC_ETC_TRIG0_CTRL_TRIG_CHAIN.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_1_0_CSEL0.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_1_0_CSEL1.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_1_0_HWTS0.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_1_0_HWTS1.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_1_0_IE0.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_1_0_IE1.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_3_2_CSEL2.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_3_2_CSEL3.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_3_2_HWTS2.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_3_2_HWTS3.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_3_2_IE2.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_3_2_IE3.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_5_4_CSEL4.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_5_4_CSEL5.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_5_4_HWTS4.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_5_4_HWTS5.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_5_4_IE4.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_5_4_IE5.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_7_6_CSEL6.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_7_6_CSEL7.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_7_6_HWTS6.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_7_6_HWTS7.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_7_6_IE6.h"
#include "../enums/ADC_ETC_TRIG1_CHAIN_7_6_IE7.h"
#include "../enums/ADC_ETC_TRIG1_CTRL_CHAINx_DONE.h"
#include "../enums/ADC_ETC_TRIG1_CTRL_TRIG_CHAIN.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_1_0_CSEL0.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_1_0_CSEL1.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_1_0_HWTS0.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_1_0_HWTS1.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_1_0_IE0.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_1_0_IE1.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_3_2_CSEL2.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_3_2_CSEL3.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_3_2_HWTS2.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_3_2_HWTS3.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_3_2_IE2.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_3_2_IE3.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_5_4_CSEL4.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_5_4_CSEL5.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_5_4_HWTS4.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_5_4_HWTS5.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_5_4_IE4.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_5_4_IE5.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_7_6_CSEL6.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_7_6_CSEL7.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_7_6_HWTS6.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_7_6_HWTS7.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_7_6_IE6.h"
#include "../enums/ADC_ETC_TRIG2_CHAIN_7_6_IE7.h"
#include "../enums/ADC_ETC_TRIG2_CTRL_CHAINx_DONE.h"
#include "../enums/ADC_ETC_TRIG2_CTRL_TRIG_CHAIN.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_1_0_CSEL0.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_1_0_CSEL1.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_1_0_HWTS0.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_1_0_HWTS1.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_1_0_IE0.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_1_0_IE1.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_3_2_CSEL2.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_3_2_CSEL3.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_3_2_HWTS2.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_3_2_HWTS3.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_3_2_IE2.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_3_2_IE3.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_5_4_CSEL4.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_5_4_CSEL5.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_5_4_HWTS4.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_5_4_HWTS5.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_5_4_IE4.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_5_4_IE5.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_7_6_CSEL6.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_7_6_CSEL7.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_7_6_HWTS6.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_7_6_HWTS7.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_7_6_IE6.h"
#include "../enums/ADC_ETC_TRIG3_CHAIN_7_6_IE7.h"
#include "../enums/ADC_ETC_TRIG3_CTRL_CHAINx_DONE.h"
#include "../enums/ADC_ETC_TRIG3_CTRL_TRIG_CHAIN.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_1_0_CSEL0.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_1_0_CSEL1.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_1_0_HWTS0.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_1_0_HWTS1.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_1_0_IE0.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_1_0_IE1.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_3_2_CSEL2.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_3_2_CSEL3.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_3_2_HWTS2.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_3_2_HWTS3.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_3_2_IE2.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_3_2_IE3.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_5_4_CSEL4.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_5_4_CSEL5.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_5_4_HWTS4.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_5_4_HWTS5.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_5_4_IE4.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_5_4_IE5.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_7_6_CSEL6.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_7_6_CSEL7.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_7_6_HWTS6.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_7_6_HWTS7.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_7_6_IE6.h"
#include "../enums/ADC_ETC_TRIG4_CHAIN_7_6_IE7.h"
#include "../enums/ADC_ETC_TRIG4_CTRL_CHAINx_DONE.h"
#include "../enums/ADC_ETC_TRIG4_CTRL_TRIG_CHAIN.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_1_0_CSEL0.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_1_0_CSEL1.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_1_0_HWTS0.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_1_0_HWTS1.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_1_0_IE0.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_1_0_IE1.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_3_2_CSEL2.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_3_2_CSEL3.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_3_2_HWTS2.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_3_2_HWTS3.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_3_2_IE2.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_3_2_IE3.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_5_4_CSEL4.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_5_4_CSEL5.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_5_4_HWTS4.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_5_4_HWTS5.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_5_4_IE4.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_5_4_IE5.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_7_6_CSEL6.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_7_6_CSEL7.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_7_6_HWTS6.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_7_6_HWTS7.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_7_6_IE6.h"
#include "../enums/ADC_ETC_TRIG5_CHAIN_7_6_IE7.h"
#include "../enums/ADC_ETC_TRIG5_CTRL_CHAINx_DONE.h"
#include "../enums/ADC_ETC_TRIG5_CTRL_TRIG_CHAIN.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_1_0_CSEL0.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_1_0_CSEL1.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_1_0_HWTS0.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_1_0_HWTS1.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_1_0_IE0.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_1_0_IE1.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_3_2_CSEL2.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_3_2_CSEL3.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_3_2_HWTS2.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_3_2_HWTS3.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_3_2_IE2.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_3_2_IE3.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_5_4_CSEL4.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_5_4_CSEL5.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_5_4_HWTS4.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_5_4_HWTS5.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_5_4_IE4.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_5_4_IE5.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_7_6_CSEL6.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_7_6_CSEL7.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_7_6_HWTS6.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_7_6_HWTS7.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_7_6_IE6.h"
#include "../enums/ADC_ETC_TRIG6_CHAIN_7_6_IE7.h"
#include "../enums/ADC_ETC_TRIG6_CTRL_CHAINx_DONE.h"
#include "../enums/ADC_ETC_TRIG6_CTRL_TRIG_CHAIN.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_1_0_CSEL0.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_1_0_CSEL1.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_1_0_HWTS0.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_1_0_HWTS1.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_1_0_IE0.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_1_0_IE1.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_3_2_CSEL2.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_3_2_CSEL3.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_3_2_HWTS2.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_3_2_HWTS3.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_3_2_IE2.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_3_2_IE3.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_5_4_CSEL4.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_5_4_CSEL5.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_5_4_HWTS4.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_5_4_HWTS5.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_5_4_IE4.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_5_4_IE5.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_7_6_CSEL6.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_7_6_CSEL7.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_7_6_HWTS6.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_7_6_HWTS7.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_7_6_IE6.h"
#include "../enums/ADC_ETC_TRIG7_CHAIN_7_6_IE7.h"
#include "../enums/ADC_ETC_TRIG7_CTRL_CHAINx_DONE.h"
#include "../enums/ADC_ETC_TRIG7_CTRL_TRIG_CHAIN.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * ADC_ETC
 */
struct [[gnu::packed]] adc_etc
{
    /* Constant attributes. */
    static constexpr std::size_t size = 336; /*!< adc_etc's size in bytes. */

    /* Fields. */
    uint32_t CTRL;        /*!< (read-write) ADC_ETC Global Control Register */
    uint32_t DONE0_1_IRQ; /*!< (read-write) ETC DONE0 and DONE1 IRQ State
                             Register */
    uint32_t DONE2_3_ERR_IRQ; /*!< (read-write) ETC DONE_2, DONE_3 and DONE_ERR
                                 IRQ State Register */
    uint32_t DMA_CTRL;        /*!< (read-write) ETC DMA control Register */
    uint32_t TRIG0_CTRL;      /*!< (read-write) ETC_TRIG Control Register */
    uint32_t TRIG0_COUNTER;   /*!< (read-write) ETC_TRIG Counter Register */
    uint32_t TRIG0_CHAIN_1_0; /*!< (read-write) ETC_TRIG Chain 0/1 Register */
    uint32_t TRIG0_CHAIN_3_2; /*!< (read-write) ETC_TRIG Chain 2/3 Register */
    uint32_t TRIG0_CHAIN_5_4; /*!< (read-write) ETC_TRIG Chain 4/5 Register */
    uint32_t TRIG0_CHAIN_7_6; /*!< (read-write) ETC_TRIG Chain 6/7 Register */
    uint32_t TRIG0_RESULT_1_0; /*!< (read-write) ETC_TRIG Result Data 1/0
                                  Register */
    uint32_t TRIG0_RESULT_3_2; /*!< (read-write) ETC_TRIG Result Data 3/2
                                  Register */
    uint32_t TRIG0_RESULT_5_4; /*!< (read-write) ETC_TRIG Result Data 5/4
                                  Register */
    uint32_t TRIG0_RESULT_7_6; /*!< (read-write) ETC_TRIG Result Data 7/6
                                  Register */
    uint32_t TRIG1_CTRL;       /*!< (read-write) ETC_TRIG Control Register */
    uint32_t TRIG1_COUNTER;    /*!< (read-write) ETC_TRIG Counter Register */
    uint32_t TRIG1_CHAIN_1_0;  /*!< (read-write) ETC_TRIG Chain 0/1 Register */
    uint32_t TRIG1_CHAIN_3_2;  /*!< (read-write) ETC_TRIG Chain 2/3 Register */
    uint32_t TRIG1_CHAIN_5_4;  /*!< (read-write) ETC_TRIG Chain 4/5 Register */
    uint32_t TRIG1_CHAIN_7_6;  /*!< (read-write) ETC_TRIG Chain 6/7 Register */
    uint32_t TRIG1_RESULT_1_0; /*!< (read-write) ETC_TRIG Result Data 1/0
                                  Register */
    uint32_t TRIG1_RESULT_3_2; /*!< (read-write) ETC_TRIG Result Data 3/2
                                  Register */
    uint32_t TRIG1_RESULT_5_4; /*!< (read-write) ETC_TRIG Result Data 5/4
                                  Register */
    uint32_t TRIG1_RESULT_7_6; /*!< (read-write) ETC_TRIG Result Data 7/6
                                  Register */
    uint32_t TRIG2_CTRL;       /*!< (read-write) ETC_TRIG Control Register */
    uint32_t TRIG2_COUNTER;    /*!< (read-write) ETC_TRIG Counter Register */
    uint32_t TRIG2_CHAIN_1_0;  /*!< (read-write) ETC_TRIG Chain 0/1 Register */
    uint32_t TRIG2_CHAIN_3_2;  /*!< (read-write) ETC_TRIG Chain 2/3 Register */
    uint32_t TRIG2_CHAIN_5_4;  /*!< (read-write) ETC_TRIG Chain 4/5 Register */
    uint32_t TRIG2_CHAIN_7_6;  /*!< (read-write) ETC_TRIG Chain 6/7 Register */
    uint32_t TRIG2_RESULT_1_0; /*!< (read-write) ETC_TRIG Result Data 1/0
                                  Register */
    uint32_t TRIG2_RESULT_3_2; /*!< (read-write) ETC_TRIG Result Data 3/2
                                  Register */
    uint32_t TRIG2_RESULT_5_4; /*!< (read-write) ETC_TRIG Result Data 5/4
                                  Register */
    uint32_t TRIG2_RESULT_7_6; /*!< (read-write) ETC_TRIG Result Data 7/6
                                  Register */
    uint32_t TRIG3_CTRL;       /*!< (read-write) ETC_TRIG Control Register */
    uint32_t TRIG3_COUNTER;    /*!< (read-write) ETC_TRIG Counter Register */
    uint32_t TRIG3_CHAIN_1_0;  /*!< (read-write) ETC_TRIG Chain 0/1 Register */
    uint32_t TRIG3_CHAIN_3_2;  /*!< (read-write) ETC_TRIG Chain 2/3 Register */
    uint32_t TRIG3_CHAIN_5_4;  /*!< (read-write) ETC_TRIG Chain 4/5 Register */
    uint32_t TRIG3_CHAIN_7_6;  /*!< (read-write) ETC_TRIG Chain 6/7 Register */
    uint32_t TRIG3_RESULT_1_0; /*!< (read-write) ETC_TRIG Result Data 1/0
                                  Register */
    uint32_t TRIG3_RESULT_3_2; /*!< (read-write) ETC_TRIG Result Data 3/2
                                  Register */
    uint32_t TRIG3_RESULT_5_4; /*!< (read-write) ETC_TRIG Result Data 5/4
                                  Register */
    uint32_t TRIG3_RESULT_7_6; /*!< (read-write) ETC_TRIG Result Data 7/6
                                  Register */
    uint32_t TRIG4_CTRL;       /*!< (read-write) ETC_TRIG Control Register */
    uint32_t TRIG4_COUNTER;    /*!< (read-write) ETC_TRIG Counter Register */
    uint32_t TRIG4_CHAIN_1_0;  /*!< (read-write) ETC_TRIG Chain 0/1 Register */
    uint32_t TRIG4_CHAIN_3_2;  /*!< (read-write) ETC_TRIG Chain 2/3 Register */
    uint32_t TRIG4_CHAIN_5_4;  /*!< (read-write) ETC_TRIG Chain 4/5 Register */
    uint32_t TRIG4_CHAIN_7_6;  /*!< (read-write) ETC_TRIG Chain 6/7 Register */
    uint32_t TRIG4_RESULT_1_0; /*!< (read-write) ETC_TRIG Result Data 1/0
                                  Register */
    uint32_t TRIG4_RESULT_3_2; /*!< (read-write) ETC_TRIG Result Data 3/2
                                  Register */
    uint32_t TRIG4_RESULT_5_4; /*!< (read-write) ETC_TRIG Result Data 5/4
                                  Register */
    uint32_t TRIG4_RESULT_7_6; /*!< (read-write) ETC_TRIG Result Data 7/6
                                  Register */
    uint32_t TRIG5_CTRL;       /*!< (read-write) ETC_TRIG Control Register */
    uint32_t TRIG5_COUNTER;    /*!< (read-write) ETC_TRIG Counter Register */
    uint32_t TRIG5_CHAIN_1_0;  /*!< (read-write) ETC_TRIG Chain 0/1 Register */
    uint32_t TRIG5_CHAIN_3_2;  /*!< (read-write) ETC_TRIG Chain 2/3 Register */
    uint32_t TRIG5_CHAIN_5_4;  /*!< (read-write) ETC_TRIG Chain 4/5 Register */
    uint32_t TRIG5_CHAIN_7_6;  /*!< (read-write) ETC_TRIG Chain 6/7 Register */
    uint32_t TRIG5_RESULT_1_0; /*!< (read-write) ETC_TRIG Result Data 1/0
                                  Register */
    uint32_t TRIG5_RESULT_3_2; /*!< (read-write) ETC_TRIG Result Data 3/2
                                  Register */
    uint32_t TRIG5_RESULT_5_4; /*!< (read-write) ETC_TRIG Result Data 5/4
                                  Register */
    uint32_t TRIG5_RESULT_7_6; /*!< (read-write) ETC_TRIG Result Data 7/6
                                  Register */
    uint32_t TRIG6_CTRL;       /*!< (read-write) ETC_TRIG Control Register */
    uint32_t TRIG6_COUNTER;    /*!< (read-write) ETC_TRIG Counter Register */
    uint32_t TRIG6_CHAIN_1_0;  /*!< (read-write) ETC_TRIG Chain 0/1 Register */
    uint32_t TRIG6_CHAIN_3_2;  /*!< (read-write) ETC_TRIG Chain 2/3 Register */
    uint32_t TRIG6_CHAIN_5_4;  /*!< (read-write) ETC_TRIG Chain 4/5 Register */
    uint32_t TRIG6_CHAIN_7_6;  /*!< (read-write) ETC_TRIG Chain 6/7 Register */
    uint32_t TRIG6_RESULT_1_0; /*!< (read-write) ETC_TRIG Result Data 1/0
                                  Register */
    uint32_t TRIG6_RESULT_3_2; /*!< (read-write) ETC_TRIG Result Data 3/2
                                  Register */
    uint32_t TRIG6_RESULT_5_4; /*!< (read-write) ETC_TRIG Result Data 5/4
                                  Register */
    uint32_t TRIG6_RESULT_7_6; /*!< (read-write) ETC_TRIG Result Data 7/6
                                  Register */
    uint32_t TRIG7_CTRL;       /*!< (read-write) ETC_TRIG Control Register */
    uint32_t TRIG7_COUNTER;    /*!< (read-write) ETC_TRIG Counter Register */
    uint32_t TRIG7_CHAIN_1_0;  /*!< (read-write) ETC_TRIG Chain 0/1 Register */
    uint32_t TRIG7_CHAIN_3_2;  /*!< (read-write) ETC_TRIG Chain 2/3 Register */
    uint32_t TRIG7_CHAIN_5_4;  /*!< (read-write) ETC_TRIG Chain 4/5 Register */
    uint32_t TRIG7_CHAIN_7_6;  /*!< (read-write) ETC_TRIG Chain 6/7 Register */
    uint32_t TRIG7_RESULT_1_0; /*!< (read-write) ETC_TRIG Result Data 1/0
                                  Register */
    uint32_t TRIG7_RESULT_3_2; /*!< (read-write) ETC_TRIG Result Data 3/2
                                  Register */
    uint32_t TRIG7_RESULT_5_4; /*!< (read-write) ETC_TRIG Result Data 5/4
                                  Register */
    uint32_t TRIG7_RESULT_7_6; /*!< (read-write) ETC_TRIG Result Data 7/6
                                  Register */

    /* Methods. */

    /**
     * Get CTRL's SOFTRST bit.
     *
     * Software synchronous reset, active high.
     */
    inline bool get_CTRL_SOFTRST() volatile
    {
        return CTRL & (1u << 31u);
    }

    /**
     * Set CTRL's SOFTRST bit.
     *
     * Software synchronous reset, active high.
     */
    inline void set_CTRL_SOFTRST() volatile
    {
        CTRL |= 1u << 31u;
    }

    /**
     * Clear CTRL's SOFTRST bit.
     *
     * Software synchronous reset, active high.
     */
    inline void clear_CTRL_SOFTRST() volatile
    {
        CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle CTRL's SOFTRST bit.
     *
     * Software synchronous reset, active high.
     */
    inline void toggle_CTRL_SOFTRST() volatile
    {
        CTRL ^= 1u << 31u;
    }

    /**
     * Get CTRL's DMA_MODE_SEL bit.
     *
     * Select the trigger type of the DMA_REQ.
     */
    inline bool get_CTRL_DMA_MODE_SEL() volatile
    {
        return CTRL & (1u << 29u);
    }

    /**
     * Set CTRL's DMA_MODE_SEL bit.
     *
     * Select the trigger type of the DMA_REQ.
     */
    inline void set_CTRL_DMA_MODE_SEL() volatile
    {
        CTRL |= 1u << 29u;
    }

    /**
     * Clear CTRL's DMA_MODE_SEL bit.
     *
     * Select the trigger type of the DMA_REQ.
     */
    inline void clear_CTRL_DMA_MODE_SEL() volatile
    {
        CTRL &= ~(1u << 29u);
    }

    /**
     * Toggle CTRL's DMA_MODE_SEL bit.
     *
     * Select the trigger type of the DMA_REQ.
     */
    inline void toggle_CTRL_DMA_MODE_SEL() volatile
    {
        CTRL ^= 1u << 29u;
    }

    /**
     * Get CTRL's PRE_DIVIDER field.
     *
     * Pre-divider for trig delay and interval
     */
    inline uint8_t get_CTRL_PRE_DIVIDER() volatile
    {
        return (CTRL >> 16u) & 0b11111111u;
    }

    /**
     * Set CTRL's PRE_DIVIDER field.
     *
     * Pre-divider for trig delay and interval
     */
    inline void set_CTRL_PRE_DIVIDER(uint8_t value) volatile
    {
        uint32_t curr = CTRL;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CTRL = curr;
    }

    /**
     * Get CTRL's TRIG_ENABLE field.
     *
     * TRIG enable register.
     */
    inline ADC_ETC_CTRL_TRIG_ENABLE get_CTRL_TRIG_ENABLE() volatile
    {
        return ADC_ETC_CTRL_TRIG_ENABLE((CTRL >> 0u) & 0b11111111u);
    }

    /**
     * Set CTRL's TRIG_ENABLE field.
     *
     * TRIG enable register.
     */
    inline void set_CTRL_TRIG_ENABLE(ADC_ETC_CTRL_TRIG_ENABLE value) volatile
    {
        uint32_t curr = CTRL;

        curr &= ~(0b11111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 0u;

        CTRL = curr;
    }

    /**
     * Get all of CTRL's bit fields.
     *
     * (read-write) ADC_ETC Global Control Register
     */
    inline void get_CTRL(bool &SOFTRST, bool &DMA_MODE_SEL,
                         uint8_t &PRE_DIVIDER,
                         ADC_ETC_CTRL_TRIG_ENABLE &TRIG_ENABLE) volatile
    {
        uint32_t curr = CTRL;

        SOFTRST = curr & (1u << 31u);
        DMA_MODE_SEL = curr & (1u << 29u);
        PRE_DIVIDER = (curr >> 16u) & 0b11111111u;
        TRIG_ENABLE = ADC_ETC_CTRL_TRIG_ENABLE((curr >> 0u) & 0b11111111u);
    }

    /**
     * Set all of CTRL's bit fields.
     *
     * (read-write) ADC_ETC Global Control Register
     */
    inline void set_CTRL(bool SOFTRST, bool DMA_MODE_SEL, uint8_t PRE_DIVIDER,
                         ADC_ETC_CTRL_TRIG_ENABLE TRIG_ENABLE) volatile
    {
        uint32_t curr = CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (SOFTRST & 0b1u) << 31u;
        curr &= ~(0b1u << 29u);
        curr |= (DMA_MODE_SEL & 0b1u) << 29u;
        curr &= ~(0b11111111u << 16u);
        curr |= (PRE_DIVIDER & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 0u);
        curr |= (std::to_underlying(TRIG_ENABLE) & 0b11111111u) << 0u;

        CTRL = curr;
    }

    /**
     * Get DONE0_1_IRQ's TRIG7_DONE1 bit.
     *
     * TRIG7 done1 interrupt detection.
     */
    inline bool get_DONE0_1_IRQ_TRIG7_DONE1() volatile
    {
        return DONE0_1_IRQ & (1u << 23u);
    }

    /**
     * Set DONE0_1_IRQ's TRIG7_DONE1 bit.
     *
     * TRIG7 done1 interrupt detection.
     */
    inline void set_DONE0_1_IRQ_TRIG7_DONE1() volatile
    {
        DONE0_1_IRQ |= 1u << 23u;
    }

    /**
     * Clear DONE0_1_IRQ's TRIG7_DONE1 bit.
     *
     * TRIG7 done1 interrupt detection.
     */
    inline void clear_DONE0_1_IRQ_TRIG7_DONE1() volatile
    {
        DONE0_1_IRQ &= ~(1u << 23u);
    }

    /**
     * Toggle DONE0_1_IRQ's TRIG7_DONE1 bit.
     *
     * TRIG7 done1 interrupt detection.
     */
    inline void toggle_DONE0_1_IRQ_TRIG7_DONE1() volatile
    {
        DONE0_1_IRQ ^= 1u << 23u;
    }

    /**
     * Get DONE0_1_IRQ's TRIG6_DONE1 bit.
     *
     * TRIG6 done1 interrupt detection.
     */
    inline bool get_DONE0_1_IRQ_TRIG6_DONE1() volatile
    {
        return DONE0_1_IRQ & (1u << 22u);
    }

    /**
     * Set DONE0_1_IRQ's TRIG6_DONE1 bit.
     *
     * TRIG6 done1 interrupt detection.
     */
    inline void set_DONE0_1_IRQ_TRIG6_DONE1() volatile
    {
        DONE0_1_IRQ |= 1u << 22u;
    }

    /**
     * Clear DONE0_1_IRQ's TRIG6_DONE1 bit.
     *
     * TRIG6 done1 interrupt detection.
     */
    inline void clear_DONE0_1_IRQ_TRIG6_DONE1() volatile
    {
        DONE0_1_IRQ &= ~(1u << 22u);
    }

    /**
     * Toggle DONE0_1_IRQ's TRIG6_DONE1 bit.
     *
     * TRIG6 done1 interrupt detection.
     */
    inline void toggle_DONE0_1_IRQ_TRIG6_DONE1() volatile
    {
        DONE0_1_IRQ ^= 1u << 22u;
    }

    /**
     * Get DONE0_1_IRQ's TRIG5_DONE1 bit.
     *
     * TRIG5 done1 interrupt detection.
     */
    inline bool get_DONE0_1_IRQ_TRIG5_DONE1() volatile
    {
        return DONE0_1_IRQ & (1u << 21u);
    }

    /**
     * Set DONE0_1_IRQ's TRIG5_DONE1 bit.
     *
     * TRIG5 done1 interrupt detection.
     */
    inline void set_DONE0_1_IRQ_TRIG5_DONE1() volatile
    {
        DONE0_1_IRQ |= 1u << 21u;
    }

    /**
     * Clear DONE0_1_IRQ's TRIG5_DONE1 bit.
     *
     * TRIG5 done1 interrupt detection.
     */
    inline void clear_DONE0_1_IRQ_TRIG5_DONE1() volatile
    {
        DONE0_1_IRQ &= ~(1u << 21u);
    }

    /**
     * Toggle DONE0_1_IRQ's TRIG5_DONE1 bit.
     *
     * TRIG5 done1 interrupt detection.
     */
    inline void toggle_DONE0_1_IRQ_TRIG5_DONE1() volatile
    {
        DONE0_1_IRQ ^= 1u << 21u;
    }

    /**
     * Get DONE0_1_IRQ's TRIG4_DONE1 bit.
     *
     * TRIG4 done1 interrupt detection.
     */
    inline bool get_DONE0_1_IRQ_TRIG4_DONE1() volatile
    {
        return DONE0_1_IRQ & (1u << 20u);
    }

    /**
     * Set DONE0_1_IRQ's TRIG4_DONE1 bit.
     *
     * TRIG4 done1 interrupt detection.
     */
    inline void set_DONE0_1_IRQ_TRIG4_DONE1() volatile
    {
        DONE0_1_IRQ |= 1u << 20u;
    }

    /**
     * Clear DONE0_1_IRQ's TRIG4_DONE1 bit.
     *
     * TRIG4 done1 interrupt detection.
     */
    inline void clear_DONE0_1_IRQ_TRIG4_DONE1() volatile
    {
        DONE0_1_IRQ &= ~(1u << 20u);
    }

    /**
     * Toggle DONE0_1_IRQ's TRIG4_DONE1 bit.
     *
     * TRIG4 done1 interrupt detection.
     */
    inline void toggle_DONE0_1_IRQ_TRIG4_DONE1() volatile
    {
        DONE0_1_IRQ ^= 1u << 20u;
    }

    /**
     * Get DONE0_1_IRQ's TRIG3_DONE1 bit.
     *
     * TRIG3 done1 interrupt detection.
     */
    inline bool get_DONE0_1_IRQ_TRIG3_DONE1() volatile
    {
        return DONE0_1_IRQ & (1u << 19u);
    }

    /**
     * Set DONE0_1_IRQ's TRIG3_DONE1 bit.
     *
     * TRIG3 done1 interrupt detection.
     */
    inline void set_DONE0_1_IRQ_TRIG3_DONE1() volatile
    {
        DONE0_1_IRQ |= 1u << 19u;
    }

    /**
     * Clear DONE0_1_IRQ's TRIG3_DONE1 bit.
     *
     * TRIG3 done1 interrupt detection.
     */
    inline void clear_DONE0_1_IRQ_TRIG3_DONE1() volatile
    {
        DONE0_1_IRQ &= ~(1u << 19u);
    }

    /**
     * Toggle DONE0_1_IRQ's TRIG3_DONE1 bit.
     *
     * TRIG3 done1 interrupt detection.
     */
    inline void toggle_DONE0_1_IRQ_TRIG3_DONE1() volatile
    {
        DONE0_1_IRQ ^= 1u << 19u;
    }

    /**
     * Get DONE0_1_IRQ's TRIG2_DONE1 bit.
     *
     * TRIG2 done1 interrupt detection.
     */
    inline bool get_DONE0_1_IRQ_TRIG2_DONE1() volatile
    {
        return DONE0_1_IRQ & (1u << 18u);
    }

    /**
     * Set DONE0_1_IRQ's TRIG2_DONE1 bit.
     *
     * TRIG2 done1 interrupt detection.
     */
    inline void set_DONE0_1_IRQ_TRIG2_DONE1() volatile
    {
        DONE0_1_IRQ |= 1u << 18u;
    }

    /**
     * Clear DONE0_1_IRQ's TRIG2_DONE1 bit.
     *
     * TRIG2 done1 interrupt detection.
     */
    inline void clear_DONE0_1_IRQ_TRIG2_DONE1() volatile
    {
        DONE0_1_IRQ &= ~(1u << 18u);
    }

    /**
     * Toggle DONE0_1_IRQ's TRIG2_DONE1 bit.
     *
     * TRIG2 done1 interrupt detection.
     */
    inline void toggle_DONE0_1_IRQ_TRIG2_DONE1() volatile
    {
        DONE0_1_IRQ ^= 1u << 18u;
    }

    /**
     * Get DONE0_1_IRQ's TRIG1_DONE1 bit.
     *
     * TRIG1 done1 interrupt detection.
     */
    inline bool get_DONE0_1_IRQ_TRIG1_DONE1() volatile
    {
        return DONE0_1_IRQ & (1u << 17u);
    }

    /**
     * Set DONE0_1_IRQ's TRIG1_DONE1 bit.
     *
     * TRIG1 done1 interrupt detection.
     */
    inline void set_DONE0_1_IRQ_TRIG1_DONE1() volatile
    {
        DONE0_1_IRQ |= 1u << 17u;
    }

    /**
     * Clear DONE0_1_IRQ's TRIG1_DONE1 bit.
     *
     * TRIG1 done1 interrupt detection.
     */
    inline void clear_DONE0_1_IRQ_TRIG1_DONE1() volatile
    {
        DONE0_1_IRQ &= ~(1u << 17u);
    }

    /**
     * Toggle DONE0_1_IRQ's TRIG1_DONE1 bit.
     *
     * TRIG1 done1 interrupt detection.
     */
    inline void toggle_DONE0_1_IRQ_TRIG1_DONE1() volatile
    {
        DONE0_1_IRQ ^= 1u << 17u;
    }

    /**
     * Get DONE0_1_IRQ's TRIG0_DONE1 bit.
     *
     * TRIG0 done1 interrupt detection.
     */
    inline bool get_DONE0_1_IRQ_TRIG0_DONE1() volatile
    {
        return DONE0_1_IRQ & (1u << 16u);
    }

    /**
     * Set DONE0_1_IRQ's TRIG0_DONE1 bit.
     *
     * TRIG0 done1 interrupt detection.
     */
    inline void set_DONE0_1_IRQ_TRIG0_DONE1() volatile
    {
        DONE0_1_IRQ |= 1u << 16u;
    }

    /**
     * Clear DONE0_1_IRQ's TRIG0_DONE1 bit.
     *
     * TRIG0 done1 interrupt detection.
     */
    inline void clear_DONE0_1_IRQ_TRIG0_DONE1() volatile
    {
        DONE0_1_IRQ &= ~(1u << 16u);
    }

    /**
     * Toggle DONE0_1_IRQ's TRIG0_DONE1 bit.
     *
     * TRIG0 done1 interrupt detection.
     */
    inline void toggle_DONE0_1_IRQ_TRIG0_DONE1() volatile
    {
        DONE0_1_IRQ ^= 1u << 16u;
    }

    /**
     * Get DONE0_1_IRQ's TRIG7_DONE0 bit.
     *
     * TRIG7 done0 interrupt detection.
     */
    inline bool get_DONE0_1_IRQ_TRIG7_DONE0() volatile
    {
        return DONE0_1_IRQ & (1u << 7u);
    }

    /**
     * Set DONE0_1_IRQ's TRIG7_DONE0 bit.
     *
     * TRIG7 done0 interrupt detection.
     */
    inline void set_DONE0_1_IRQ_TRIG7_DONE0() volatile
    {
        DONE0_1_IRQ |= 1u << 7u;
    }

    /**
     * Clear DONE0_1_IRQ's TRIG7_DONE0 bit.
     *
     * TRIG7 done0 interrupt detection.
     */
    inline void clear_DONE0_1_IRQ_TRIG7_DONE0() volatile
    {
        DONE0_1_IRQ &= ~(1u << 7u);
    }

    /**
     * Toggle DONE0_1_IRQ's TRIG7_DONE0 bit.
     *
     * TRIG7 done0 interrupt detection.
     */
    inline void toggle_DONE0_1_IRQ_TRIG7_DONE0() volatile
    {
        DONE0_1_IRQ ^= 1u << 7u;
    }

    /**
     * Get DONE0_1_IRQ's TRIG6_DONE0 bit.
     *
     * TRIG6 done0 interrupt detection.
     */
    inline bool get_DONE0_1_IRQ_TRIG6_DONE0() volatile
    {
        return DONE0_1_IRQ & (1u << 6u);
    }

    /**
     * Set DONE0_1_IRQ's TRIG6_DONE0 bit.
     *
     * TRIG6 done0 interrupt detection.
     */
    inline void set_DONE0_1_IRQ_TRIG6_DONE0() volatile
    {
        DONE0_1_IRQ |= 1u << 6u;
    }

    /**
     * Clear DONE0_1_IRQ's TRIG6_DONE0 bit.
     *
     * TRIG6 done0 interrupt detection.
     */
    inline void clear_DONE0_1_IRQ_TRIG6_DONE0() volatile
    {
        DONE0_1_IRQ &= ~(1u << 6u);
    }

    /**
     * Toggle DONE0_1_IRQ's TRIG6_DONE0 bit.
     *
     * TRIG6 done0 interrupt detection.
     */
    inline void toggle_DONE0_1_IRQ_TRIG6_DONE0() volatile
    {
        DONE0_1_IRQ ^= 1u << 6u;
    }

    /**
     * Get DONE0_1_IRQ's TRIG5_DONE0 bit.
     *
     * TRIG5 done0 interrupt detection.
     */
    inline bool get_DONE0_1_IRQ_TRIG5_DONE0() volatile
    {
        return DONE0_1_IRQ & (1u << 5u);
    }

    /**
     * Set DONE0_1_IRQ's TRIG5_DONE0 bit.
     *
     * TRIG5 done0 interrupt detection.
     */
    inline void set_DONE0_1_IRQ_TRIG5_DONE0() volatile
    {
        DONE0_1_IRQ |= 1u << 5u;
    }

    /**
     * Clear DONE0_1_IRQ's TRIG5_DONE0 bit.
     *
     * TRIG5 done0 interrupt detection.
     */
    inline void clear_DONE0_1_IRQ_TRIG5_DONE0() volatile
    {
        DONE0_1_IRQ &= ~(1u << 5u);
    }

    /**
     * Toggle DONE0_1_IRQ's TRIG5_DONE0 bit.
     *
     * TRIG5 done0 interrupt detection.
     */
    inline void toggle_DONE0_1_IRQ_TRIG5_DONE0() volatile
    {
        DONE0_1_IRQ ^= 1u << 5u;
    }

    /**
     * Get DONE0_1_IRQ's TRIG4_DONE0 bit.
     *
     * TRIG4 done0 interrupt detection.
     */
    inline bool get_DONE0_1_IRQ_TRIG4_DONE0() volatile
    {
        return DONE0_1_IRQ & (1u << 4u);
    }

    /**
     * Set DONE0_1_IRQ's TRIG4_DONE0 bit.
     *
     * TRIG4 done0 interrupt detection.
     */
    inline void set_DONE0_1_IRQ_TRIG4_DONE0() volatile
    {
        DONE0_1_IRQ |= 1u << 4u;
    }

    /**
     * Clear DONE0_1_IRQ's TRIG4_DONE0 bit.
     *
     * TRIG4 done0 interrupt detection.
     */
    inline void clear_DONE0_1_IRQ_TRIG4_DONE0() volatile
    {
        DONE0_1_IRQ &= ~(1u << 4u);
    }

    /**
     * Toggle DONE0_1_IRQ's TRIG4_DONE0 bit.
     *
     * TRIG4 done0 interrupt detection.
     */
    inline void toggle_DONE0_1_IRQ_TRIG4_DONE0() volatile
    {
        DONE0_1_IRQ ^= 1u << 4u;
    }

    /**
     * Get DONE0_1_IRQ's TRIG3_DONE0 bit.
     *
     * TRIG3 done0 interrupt detection.
     */
    inline bool get_DONE0_1_IRQ_TRIG3_DONE0() volatile
    {
        return DONE0_1_IRQ & (1u << 3u);
    }

    /**
     * Set DONE0_1_IRQ's TRIG3_DONE0 bit.
     *
     * TRIG3 done0 interrupt detection.
     */
    inline void set_DONE0_1_IRQ_TRIG3_DONE0() volatile
    {
        DONE0_1_IRQ |= 1u << 3u;
    }

    /**
     * Clear DONE0_1_IRQ's TRIG3_DONE0 bit.
     *
     * TRIG3 done0 interrupt detection.
     */
    inline void clear_DONE0_1_IRQ_TRIG3_DONE0() volatile
    {
        DONE0_1_IRQ &= ~(1u << 3u);
    }

    /**
     * Toggle DONE0_1_IRQ's TRIG3_DONE0 bit.
     *
     * TRIG3 done0 interrupt detection.
     */
    inline void toggle_DONE0_1_IRQ_TRIG3_DONE0() volatile
    {
        DONE0_1_IRQ ^= 1u << 3u;
    }

    /**
     * Get DONE0_1_IRQ's TRIG2_DONE0 bit.
     *
     * TRIG2 done0 interrupt detection.
     */
    inline bool get_DONE0_1_IRQ_TRIG2_DONE0() volatile
    {
        return DONE0_1_IRQ & (1u << 2u);
    }

    /**
     * Set DONE0_1_IRQ's TRIG2_DONE0 bit.
     *
     * TRIG2 done0 interrupt detection.
     */
    inline void set_DONE0_1_IRQ_TRIG2_DONE0() volatile
    {
        DONE0_1_IRQ |= 1u << 2u;
    }

    /**
     * Clear DONE0_1_IRQ's TRIG2_DONE0 bit.
     *
     * TRIG2 done0 interrupt detection.
     */
    inline void clear_DONE0_1_IRQ_TRIG2_DONE0() volatile
    {
        DONE0_1_IRQ &= ~(1u << 2u);
    }

    /**
     * Toggle DONE0_1_IRQ's TRIG2_DONE0 bit.
     *
     * TRIG2 done0 interrupt detection.
     */
    inline void toggle_DONE0_1_IRQ_TRIG2_DONE0() volatile
    {
        DONE0_1_IRQ ^= 1u << 2u;
    }

    /**
     * Get DONE0_1_IRQ's TRIG1_DONE0 bit.
     *
     * TRIG1 done0 interrupt detection.
     */
    inline bool get_DONE0_1_IRQ_TRIG1_DONE0() volatile
    {
        return DONE0_1_IRQ & (1u << 1u);
    }

    /**
     * Set DONE0_1_IRQ's TRIG1_DONE0 bit.
     *
     * TRIG1 done0 interrupt detection.
     */
    inline void set_DONE0_1_IRQ_TRIG1_DONE0() volatile
    {
        DONE0_1_IRQ |= 1u << 1u;
    }

    /**
     * Clear DONE0_1_IRQ's TRIG1_DONE0 bit.
     *
     * TRIG1 done0 interrupt detection.
     */
    inline void clear_DONE0_1_IRQ_TRIG1_DONE0() volatile
    {
        DONE0_1_IRQ &= ~(1u << 1u);
    }

    /**
     * Toggle DONE0_1_IRQ's TRIG1_DONE0 bit.
     *
     * TRIG1 done0 interrupt detection.
     */
    inline void toggle_DONE0_1_IRQ_TRIG1_DONE0() volatile
    {
        DONE0_1_IRQ ^= 1u << 1u;
    }

    /**
     * Get DONE0_1_IRQ's TRIG0_DONE0 bit.
     *
     * TRIG0 done0 interrupt detection.
     */
    inline bool get_DONE0_1_IRQ_TRIG0_DONE0() volatile
    {
        return DONE0_1_IRQ & (1u << 0u);
    }

    /**
     * Set DONE0_1_IRQ's TRIG0_DONE0 bit.
     *
     * TRIG0 done0 interrupt detection.
     */
    inline void set_DONE0_1_IRQ_TRIG0_DONE0() volatile
    {
        DONE0_1_IRQ |= 1u << 0u;
    }

    /**
     * Clear DONE0_1_IRQ's TRIG0_DONE0 bit.
     *
     * TRIG0 done0 interrupt detection.
     */
    inline void clear_DONE0_1_IRQ_TRIG0_DONE0() volatile
    {
        DONE0_1_IRQ &= ~(1u << 0u);
    }

    /**
     * Toggle DONE0_1_IRQ's TRIG0_DONE0 bit.
     *
     * TRIG0 done0 interrupt detection.
     */
    inline void toggle_DONE0_1_IRQ_TRIG0_DONE0() volatile
    {
        DONE0_1_IRQ ^= 1u << 0u;
    }

    /**
     * Get all of DONE0_1_IRQ's bit fields.
     *
     * (read-write) ETC DONE0 and DONE1 IRQ State Register
     */
    inline void get_DONE0_1_IRQ(bool &TRIG7_DONE1, bool &TRIG6_DONE1,
                                bool &TRIG5_DONE1, bool &TRIG4_DONE1,
                                bool &TRIG3_DONE1, bool &TRIG2_DONE1,
                                bool &TRIG1_DONE1, bool &TRIG0_DONE1,
                                bool &TRIG7_DONE0, bool &TRIG6_DONE0,
                                bool &TRIG5_DONE0, bool &TRIG4_DONE0,
                                bool &TRIG3_DONE0, bool &TRIG2_DONE0,
                                bool &TRIG1_DONE0, bool &TRIG0_DONE0) volatile
    {
        uint32_t curr = DONE0_1_IRQ;

        TRIG7_DONE1 = curr & (1u << 23u);
        TRIG6_DONE1 = curr & (1u << 22u);
        TRIG5_DONE1 = curr & (1u << 21u);
        TRIG4_DONE1 = curr & (1u << 20u);
        TRIG3_DONE1 = curr & (1u << 19u);
        TRIG2_DONE1 = curr & (1u << 18u);
        TRIG1_DONE1 = curr & (1u << 17u);
        TRIG0_DONE1 = curr & (1u << 16u);
        TRIG7_DONE0 = curr & (1u << 7u);
        TRIG6_DONE0 = curr & (1u << 6u);
        TRIG5_DONE0 = curr & (1u << 5u);
        TRIG4_DONE0 = curr & (1u << 4u);
        TRIG3_DONE0 = curr & (1u << 3u);
        TRIG2_DONE0 = curr & (1u << 2u);
        TRIG1_DONE0 = curr & (1u << 1u);
        TRIG0_DONE0 = curr & (1u << 0u);
    }

    /**
     * Set all of DONE0_1_IRQ's bit fields.
     *
     * (read-write) ETC DONE0 and DONE1 IRQ State Register
     */
    inline void set_DONE0_1_IRQ(bool TRIG7_DONE1, bool TRIG6_DONE1,
                                bool TRIG5_DONE1, bool TRIG4_DONE1,
                                bool TRIG3_DONE1, bool TRIG2_DONE1,
                                bool TRIG1_DONE1, bool TRIG0_DONE1,
                                bool TRIG7_DONE0, bool TRIG6_DONE0,
                                bool TRIG5_DONE0, bool TRIG4_DONE0,
                                bool TRIG3_DONE0, bool TRIG2_DONE0,
                                bool TRIG1_DONE0, bool TRIG0_DONE0) volatile
    {
        uint32_t curr = DONE0_1_IRQ;

        curr &= ~(0b1u << 23u);
        curr |= (TRIG7_DONE1 & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (TRIG6_DONE1 & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (TRIG5_DONE1 & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (TRIG4_DONE1 & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (TRIG3_DONE1 & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (TRIG2_DONE1 & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (TRIG1_DONE1 & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (TRIG0_DONE1 & 0b1u) << 16u;
        curr &= ~(0b1u << 7u);
        curr |= (TRIG7_DONE0 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (TRIG6_DONE0 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (TRIG5_DONE0 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (TRIG4_DONE0 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (TRIG3_DONE0 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (TRIG2_DONE0 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (TRIG1_DONE0 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TRIG0_DONE0 & 0b1u) << 0u;

        DONE0_1_IRQ = curr;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG7_ERR bit.
     *
     * TRIG7 error interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG7_ERR() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 23u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG7_ERR bit.
     *
     * TRIG7 error interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG7_ERR() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 23u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG7_ERR bit.
     *
     * TRIG7 error interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG7_ERR() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 23u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG7_ERR bit.
     *
     * TRIG7 error interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG7_ERR() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 23u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG6_ERR bit.
     *
     * TRIG6 error interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG6_ERR() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 22u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG6_ERR bit.
     *
     * TRIG6 error interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG6_ERR() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 22u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG6_ERR bit.
     *
     * TRIG6 error interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG6_ERR() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 22u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG6_ERR bit.
     *
     * TRIG6 error interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG6_ERR() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 22u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG5_ERR bit.
     *
     * TRIG5 error interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG5_ERR() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 21u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG5_ERR bit.
     *
     * TRIG5 error interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG5_ERR() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 21u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG5_ERR bit.
     *
     * TRIG5 error interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG5_ERR() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 21u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG5_ERR bit.
     *
     * TRIG5 error interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG5_ERR() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 21u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG4_ERR bit.
     *
     * TRIG4 error interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG4_ERR() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 20u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG4_ERR bit.
     *
     * TRIG4 error interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG4_ERR() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 20u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG4_ERR bit.
     *
     * TRIG4 error interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG4_ERR() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 20u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG4_ERR bit.
     *
     * TRIG4 error interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG4_ERR() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 20u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG3_ERR bit.
     *
     * TRIG3 error interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG3_ERR() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 19u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG3_ERR bit.
     *
     * TRIG3 error interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG3_ERR() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 19u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG3_ERR bit.
     *
     * TRIG3 error interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG3_ERR() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 19u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG3_ERR bit.
     *
     * TRIG3 error interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG3_ERR() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 19u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG2_ERR bit.
     *
     * TRIG2 error interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG2_ERR() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 18u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG2_ERR bit.
     *
     * TRIG2 error interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG2_ERR() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 18u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG2_ERR bit.
     *
     * TRIG2 error interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG2_ERR() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 18u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG2_ERR bit.
     *
     * TRIG2 error interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG2_ERR() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 18u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG1_ERR bit.
     *
     * TRIG1 error interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG1_ERR() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 17u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG1_ERR bit.
     *
     * TRIG1 error interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG1_ERR() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 17u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG1_ERR bit.
     *
     * TRIG1 error interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG1_ERR() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 17u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG1_ERR bit.
     *
     * TRIG1 error interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG1_ERR() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 17u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG0_ERR bit.
     *
     * TRIG0 error interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG0_ERR() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 16u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG0_ERR bit.
     *
     * TRIG0 error interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG0_ERR() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 16u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG0_ERR bit.
     *
     * TRIG0 error interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG0_ERR() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 16u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG0_ERR bit.
     *
     * TRIG0 error interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG0_ERR() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 16u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG7_DONE3 bit.
     *
     * TRIG7 done3 interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG7_DONE3() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 15u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG7_DONE3 bit.
     *
     * TRIG7 done3 interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG7_DONE3() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 15u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG7_DONE3 bit.
     *
     * TRIG7 done3 interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG7_DONE3() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 15u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG7_DONE3 bit.
     *
     * TRIG7 done3 interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG7_DONE3() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 15u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG6_DONE3 bit.
     *
     * TRIG6 done3 interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG6_DONE3() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 14u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG6_DONE3 bit.
     *
     * TRIG6 done3 interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG6_DONE3() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 14u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG6_DONE3 bit.
     *
     * TRIG6 done3 interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG6_DONE3() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 14u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG6_DONE3 bit.
     *
     * TRIG6 done3 interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG6_DONE3() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 14u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG5_DONE3 bit.
     *
     * TRIG5 done3 interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG5_DONE3() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 13u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG5_DONE3 bit.
     *
     * TRIG5 done3 interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG5_DONE3() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 13u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG5_DONE3 bit.
     *
     * TRIG5 done3 interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG5_DONE3() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 13u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG5_DONE3 bit.
     *
     * TRIG5 done3 interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG5_DONE3() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 13u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG4_DONE3 bit.
     *
     * TRIG4 done3 interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG4_DONE3() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 12u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG4_DONE3 bit.
     *
     * TRIG4 done3 interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG4_DONE3() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 12u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG4_DONE3 bit.
     *
     * TRIG4 done3 interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG4_DONE3() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 12u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG4_DONE3 bit.
     *
     * TRIG4 done3 interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG4_DONE3() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 12u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG3_DONE3 bit.
     *
     * TRIG3 done3 interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG3_DONE3() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 11u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG3_DONE3 bit.
     *
     * TRIG3 done3 interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG3_DONE3() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 11u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG3_DONE3 bit.
     *
     * TRIG3 done3 interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG3_DONE3() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 11u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG3_DONE3 bit.
     *
     * TRIG3 done3 interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG3_DONE3() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 11u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG2_DONE3 bit.
     *
     * TRIG2 done3 interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG2_DONE3() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 10u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG2_DONE3 bit.
     *
     * TRIG2 done3 interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG2_DONE3() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 10u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG2_DONE3 bit.
     *
     * TRIG2 done3 interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG2_DONE3() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 10u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG2_DONE3 bit.
     *
     * TRIG2 done3 interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG2_DONE3() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 10u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG1_DONE3 bit.
     *
     * TRIG1 done3 interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG1_DONE3() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 9u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG1_DONE3 bit.
     *
     * TRIG1 done3 interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG1_DONE3() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 9u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG1_DONE3 bit.
     *
     * TRIG1 done3 interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG1_DONE3() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 9u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG1_DONE3 bit.
     *
     * TRIG1 done3 interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG1_DONE3() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 9u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG0_DONE3 bit.
     *
     * TRIG0 done3 interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG0_DONE3() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 8u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG0_DONE3 bit.
     *
     * TRIG0 done3 interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG0_DONE3() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 8u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG0_DONE3 bit.
     *
     * TRIG0 done3 interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG0_DONE3() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 8u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG0_DONE3 bit.
     *
     * TRIG0 done3 interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG0_DONE3() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 8u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG7_DONE2 bit.
     *
     * TRIG7 done2 interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG7_DONE2() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 7u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG7_DONE2 bit.
     *
     * TRIG7 done2 interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG7_DONE2() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 7u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG7_DONE2 bit.
     *
     * TRIG7 done2 interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG7_DONE2() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 7u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG7_DONE2 bit.
     *
     * TRIG7 done2 interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG7_DONE2() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 7u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG6_DONE2 bit.
     *
     * TRIG6 done2 interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG6_DONE2() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 6u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG6_DONE2 bit.
     *
     * TRIG6 done2 interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG6_DONE2() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 6u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG6_DONE2 bit.
     *
     * TRIG6 done2 interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG6_DONE2() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 6u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG6_DONE2 bit.
     *
     * TRIG6 done2 interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG6_DONE2() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 6u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG5_DONE2 bit.
     *
     * TRIG5 done2 interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG5_DONE2() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 5u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG5_DONE2 bit.
     *
     * TRIG5 done2 interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG5_DONE2() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 5u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG5_DONE2 bit.
     *
     * TRIG5 done2 interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG5_DONE2() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 5u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG5_DONE2 bit.
     *
     * TRIG5 done2 interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG5_DONE2() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 5u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG4_DONE2 bit.
     *
     * TRIG4 done2 interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG4_DONE2() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 4u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG4_DONE2 bit.
     *
     * TRIG4 done2 interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG4_DONE2() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 4u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG4_DONE2 bit.
     *
     * TRIG4 done2 interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG4_DONE2() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 4u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG4_DONE2 bit.
     *
     * TRIG4 done2 interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG4_DONE2() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 4u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG3_DONE2 bit.
     *
     * TRIG3 done2 interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG3_DONE2() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 3u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG3_DONE2 bit.
     *
     * TRIG3 done2 interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG3_DONE2() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 3u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG3_DONE2 bit.
     *
     * TRIG3 done2 interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG3_DONE2() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 3u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG3_DONE2 bit.
     *
     * TRIG3 done2 interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG3_DONE2() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 3u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG2_DONE2 bit.
     *
     * TRIG2 done2 interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG2_DONE2() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 2u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG2_DONE2 bit.
     *
     * TRIG2 done2 interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG2_DONE2() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 2u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG2_DONE2 bit.
     *
     * TRIG2 done2 interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG2_DONE2() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 2u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG2_DONE2 bit.
     *
     * TRIG2 done2 interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG2_DONE2() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 2u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG1_DONE2 bit.
     *
     * TRIG1 done2 interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG1_DONE2() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 1u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG1_DONE2 bit.
     *
     * TRIG1 done2 interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG1_DONE2() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 1u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG1_DONE2 bit.
     *
     * TRIG1 done2 interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG1_DONE2() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 1u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG1_DONE2 bit.
     *
     * TRIG1 done2 interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG1_DONE2() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 1u;
    }

    /**
     * Get DONE2_3_ERR_IRQ's TRIG0_DONE2 bit.
     *
     * TRIG0 done2 interrupt detection.
     */
    inline bool get_DONE2_3_ERR_IRQ_TRIG0_DONE2() volatile
    {
        return DONE2_3_ERR_IRQ & (1u << 0u);
    }

    /**
     * Set DONE2_3_ERR_IRQ's TRIG0_DONE2 bit.
     *
     * TRIG0 done2 interrupt detection.
     */
    inline void set_DONE2_3_ERR_IRQ_TRIG0_DONE2() volatile
    {
        DONE2_3_ERR_IRQ |= 1u << 0u;
    }

    /**
     * Clear DONE2_3_ERR_IRQ's TRIG0_DONE2 bit.
     *
     * TRIG0 done2 interrupt detection.
     */
    inline void clear_DONE2_3_ERR_IRQ_TRIG0_DONE2() volatile
    {
        DONE2_3_ERR_IRQ &= ~(1u << 0u);
    }

    /**
     * Toggle DONE2_3_ERR_IRQ's TRIG0_DONE2 bit.
     *
     * TRIG0 done2 interrupt detection.
     */
    inline void toggle_DONE2_3_ERR_IRQ_TRIG0_DONE2() volatile
    {
        DONE2_3_ERR_IRQ ^= 1u << 0u;
    }

    /**
     * Get all of DONE2_3_ERR_IRQ's bit fields.
     *
     * (read-write) ETC DONE_2, DONE_3 and DONE_ERR IRQ State Register
     */
    inline void get_DONE2_3_ERR_IRQ(
        bool &TRIG7_ERR, bool &TRIG6_ERR, bool &TRIG5_ERR, bool &TRIG4_ERR,
        bool &TRIG3_ERR, bool &TRIG2_ERR, bool &TRIG1_ERR, bool &TRIG0_ERR,
        bool &TRIG7_DONE3, bool &TRIG6_DONE3, bool &TRIG5_DONE3,
        bool &TRIG4_DONE3, bool &TRIG3_DONE3, bool &TRIG2_DONE3,
        bool &TRIG1_DONE3, bool &TRIG0_DONE3, bool &TRIG7_DONE2,
        bool &TRIG6_DONE2, bool &TRIG5_DONE2, bool &TRIG4_DONE2,
        bool &TRIG3_DONE2, bool &TRIG2_DONE2, bool &TRIG1_DONE2,
        bool &TRIG0_DONE2) volatile
    {
        uint32_t curr = DONE2_3_ERR_IRQ;

        TRIG7_ERR = curr & (1u << 23u);
        TRIG6_ERR = curr & (1u << 22u);
        TRIG5_ERR = curr & (1u << 21u);
        TRIG4_ERR = curr & (1u << 20u);
        TRIG3_ERR = curr & (1u << 19u);
        TRIG2_ERR = curr & (1u << 18u);
        TRIG1_ERR = curr & (1u << 17u);
        TRIG0_ERR = curr & (1u << 16u);
        TRIG7_DONE3 = curr & (1u << 15u);
        TRIG6_DONE3 = curr & (1u << 14u);
        TRIG5_DONE3 = curr & (1u << 13u);
        TRIG4_DONE3 = curr & (1u << 12u);
        TRIG3_DONE3 = curr & (1u << 11u);
        TRIG2_DONE3 = curr & (1u << 10u);
        TRIG1_DONE3 = curr & (1u << 9u);
        TRIG0_DONE3 = curr & (1u << 8u);
        TRIG7_DONE2 = curr & (1u << 7u);
        TRIG6_DONE2 = curr & (1u << 6u);
        TRIG5_DONE2 = curr & (1u << 5u);
        TRIG4_DONE2 = curr & (1u << 4u);
        TRIG3_DONE2 = curr & (1u << 3u);
        TRIG2_DONE2 = curr & (1u << 2u);
        TRIG1_DONE2 = curr & (1u << 1u);
        TRIG0_DONE2 = curr & (1u << 0u);
    }

    /**
     * Set all of DONE2_3_ERR_IRQ's bit fields.
     *
     * (read-write) ETC DONE_2, DONE_3 and DONE_ERR IRQ State Register
     */
    inline void set_DONE2_3_ERR_IRQ(
        bool TRIG7_ERR, bool TRIG6_ERR, bool TRIG5_ERR, bool TRIG4_ERR,
        bool TRIG3_ERR, bool TRIG2_ERR, bool TRIG1_ERR, bool TRIG0_ERR,
        bool TRIG7_DONE3, bool TRIG6_DONE3, bool TRIG5_DONE3, bool TRIG4_DONE3,
        bool TRIG3_DONE3, bool TRIG2_DONE3, bool TRIG1_DONE3, bool TRIG0_DONE3,
        bool TRIG7_DONE2, bool TRIG6_DONE2, bool TRIG5_DONE2, bool TRIG4_DONE2,
        bool TRIG3_DONE2, bool TRIG2_DONE2, bool TRIG1_DONE2,
        bool TRIG0_DONE2) volatile
    {
        uint32_t curr = DONE2_3_ERR_IRQ;

        curr &= ~(0b1u << 23u);
        curr |= (TRIG7_ERR & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (TRIG6_ERR & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (TRIG5_ERR & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (TRIG4_ERR & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (TRIG3_ERR & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (TRIG2_ERR & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (TRIG1_ERR & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (TRIG0_ERR & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (TRIG7_DONE3 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (TRIG6_DONE3 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (TRIG5_DONE3 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (TRIG4_DONE3 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (TRIG3_DONE3 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (TRIG2_DONE3 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (TRIG1_DONE3 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (TRIG0_DONE3 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (TRIG7_DONE2 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (TRIG6_DONE2 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (TRIG5_DONE2 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (TRIG4_DONE2 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (TRIG3_DONE2 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (TRIG2_DONE2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (TRIG1_DONE2 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TRIG0_DONE2 & 0b1u) << 0u;

        DONE2_3_ERR_IRQ = curr;
    }

    /**
     * Get DMA_CTRL's TRIG7_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline bool get_DMA_CTRL_TRIG7_REQ() volatile
    {
        return DMA_CTRL & (1u << 23u);
    }

    /**
     * Set DMA_CTRL's TRIG7_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void set_DMA_CTRL_TRIG7_REQ() volatile
    {
        DMA_CTRL |= 1u << 23u;
    }

    /**
     * Clear DMA_CTRL's TRIG7_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void clear_DMA_CTRL_TRIG7_REQ() volatile
    {
        DMA_CTRL &= ~(1u << 23u);
    }

    /**
     * Toggle DMA_CTRL's TRIG7_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void toggle_DMA_CTRL_TRIG7_REQ() volatile
    {
        DMA_CTRL ^= 1u << 23u;
    }

    /**
     * Get DMA_CTRL's TRIG6_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline bool get_DMA_CTRL_TRIG6_REQ() volatile
    {
        return DMA_CTRL & (1u << 22u);
    }

    /**
     * Set DMA_CTRL's TRIG6_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void set_DMA_CTRL_TRIG6_REQ() volatile
    {
        DMA_CTRL |= 1u << 22u;
    }

    /**
     * Clear DMA_CTRL's TRIG6_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void clear_DMA_CTRL_TRIG6_REQ() volatile
    {
        DMA_CTRL &= ~(1u << 22u);
    }

    /**
     * Toggle DMA_CTRL's TRIG6_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void toggle_DMA_CTRL_TRIG6_REQ() volatile
    {
        DMA_CTRL ^= 1u << 22u;
    }

    /**
     * Get DMA_CTRL's TRIG5_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline bool get_DMA_CTRL_TRIG5_REQ() volatile
    {
        return DMA_CTRL & (1u << 21u);
    }

    /**
     * Set DMA_CTRL's TRIG5_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void set_DMA_CTRL_TRIG5_REQ() volatile
    {
        DMA_CTRL |= 1u << 21u;
    }

    /**
     * Clear DMA_CTRL's TRIG5_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void clear_DMA_CTRL_TRIG5_REQ() volatile
    {
        DMA_CTRL &= ~(1u << 21u);
    }

    /**
     * Toggle DMA_CTRL's TRIG5_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void toggle_DMA_CTRL_TRIG5_REQ() volatile
    {
        DMA_CTRL ^= 1u << 21u;
    }

    /**
     * Get DMA_CTRL's TRIG4_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline bool get_DMA_CTRL_TRIG4_REQ() volatile
    {
        return DMA_CTRL & (1u << 20u);
    }

    /**
     * Set DMA_CTRL's TRIG4_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void set_DMA_CTRL_TRIG4_REQ() volatile
    {
        DMA_CTRL |= 1u << 20u;
    }

    /**
     * Clear DMA_CTRL's TRIG4_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void clear_DMA_CTRL_TRIG4_REQ() volatile
    {
        DMA_CTRL &= ~(1u << 20u);
    }

    /**
     * Toggle DMA_CTRL's TRIG4_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void toggle_DMA_CTRL_TRIG4_REQ() volatile
    {
        DMA_CTRL ^= 1u << 20u;
    }

    /**
     * Get DMA_CTRL's TRIG3_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline bool get_DMA_CTRL_TRIG3_REQ() volatile
    {
        return DMA_CTRL & (1u << 19u);
    }

    /**
     * Set DMA_CTRL's TRIG3_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void set_DMA_CTRL_TRIG3_REQ() volatile
    {
        DMA_CTRL |= 1u << 19u;
    }

    /**
     * Clear DMA_CTRL's TRIG3_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void clear_DMA_CTRL_TRIG3_REQ() volatile
    {
        DMA_CTRL &= ~(1u << 19u);
    }

    /**
     * Toggle DMA_CTRL's TRIG3_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void toggle_DMA_CTRL_TRIG3_REQ() volatile
    {
        DMA_CTRL ^= 1u << 19u;
    }

    /**
     * Get DMA_CTRL's TRIG2_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline bool get_DMA_CTRL_TRIG2_REQ() volatile
    {
        return DMA_CTRL & (1u << 18u);
    }

    /**
     * Set DMA_CTRL's TRIG2_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void set_DMA_CTRL_TRIG2_REQ() volatile
    {
        DMA_CTRL |= 1u << 18u;
    }

    /**
     * Clear DMA_CTRL's TRIG2_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void clear_DMA_CTRL_TRIG2_REQ() volatile
    {
        DMA_CTRL &= ~(1u << 18u);
    }

    /**
     * Toggle DMA_CTRL's TRIG2_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void toggle_DMA_CTRL_TRIG2_REQ() volatile
    {
        DMA_CTRL ^= 1u << 18u;
    }

    /**
     * Get DMA_CTRL's TRIG1_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline bool get_DMA_CTRL_TRIG1_REQ() volatile
    {
        return DMA_CTRL & (1u << 17u);
    }

    /**
     * Set DMA_CTRL's TRIG1_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void set_DMA_CTRL_TRIG1_REQ() volatile
    {
        DMA_CTRL |= 1u << 17u;
    }

    /**
     * Clear DMA_CTRL's TRIG1_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void clear_DMA_CTRL_TRIG1_REQ() volatile
    {
        DMA_CTRL &= ~(1u << 17u);
    }

    /**
     * Toggle DMA_CTRL's TRIG1_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void toggle_DMA_CTRL_TRIG1_REQ() volatile
    {
        DMA_CTRL ^= 1u << 17u;
    }

    /**
     * Get DMA_CTRL's TRIG0_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline bool get_DMA_CTRL_TRIG0_REQ() volatile
    {
        return DMA_CTRL & (1u << 16u);
    }

    /**
     * Set DMA_CTRL's TRIG0_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void set_DMA_CTRL_TRIG0_REQ() volatile
    {
        DMA_CTRL |= 1u << 16u;
    }

    /**
     * Clear DMA_CTRL's TRIG0_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void clear_DMA_CTRL_TRIG0_REQ() volatile
    {
        DMA_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle DMA_CTRL's TRIG0_REQ bit.
     *
     * Flag bit for DMA request
     */
    inline void toggle_DMA_CTRL_TRIG0_REQ() volatile
    {
        DMA_CTRL ^= 1u << 16u;
    }

    /**
     * Get DMA_CTRL's TRIG7_ENABLE bit.
     *
     * Enable DMA request when TRIG7 done.
     */
    inline bool get_DMA_CTRL_TRIG7_ENABLE() volatile
    {
        return DMA_CTRL & (1u << 7u);
    }

    /**
     * Set DMA_CTRL's TRIG7_ENABLE bit.
     *
     * Enable DMA request when TRIG7 done.
     */
    inline void set_DMA_CTRL_TRIG7_ENABLE() volatile
    {
        DMA_CTRL |= 1u << 7u;
    }

    /**
     * Clear DMA_CTRL's TRIG7_ENABLE bit.
     *
     * Enable DMA request when TRIG7 done.
     */
    inline void clear_DMA_CTRL_TRIG7_ENABLE() volatile
    {
        DMA_CTRL &= ~(1u << 7u);
    }

    /**
     * Toggle DMA_CTRL's TRIG7_ENABLE bit.
     *
     * Enable DMA request when TRIG7 done.
     */
    inline void toggle_DMA_CTRL_TRIG7_ENABLE() volatile
    {
        DMA_CTRL ^= 1u << 7u;
    }

    /**
     * Get DMA_CTRL's TRIG6_ENABLE bit.
     *
     * Enable DMA request when TRIG6 done.
     */
    inline bool get_DMA_CTRL_TRIG6_ENABLE() volatile
    {
        return DMA_CTRL & (1u << 6u);
    }

    /**
     * Set DMA_CTRL's TRIG6_ENABLE bit.
     *
     * Enable DMA request when TRIG6 done.
     */
    inline void set_DMA_CTRL_TRIG6_ENABLE() volatile
    {
        DMA_CTRL |= 1u << 6u;
    }

    /**
     * Clear DMA_CTRL's TRIG6_ENABLE bit.
     *
     * Enable DMA request when TRIG6 done.
     */
    inline void clear_DMA_CTRL_TRIG6_ENABLE() volatile
    {
        DMA_CTRL &= ~(1u << 6u);
    }

    /**
     * Toggle DMA_CTRL's TRIG6_ENABLE bit.
     *
     * Enable DMA request when TRIG6 done.
     */
    inline void toggle_DMA_CTRL_TRIG6_ENABLE() volatile
    {
        DMA_CTRL ^= 1u << 6u;
    }

    /**
     * Get DMA_CTRL's TRIG5_ENABLE bit.
     *
     * Enable DMA request when TRIG5 done.
     */
    inline bool get_DMA_CTRL_TRIG5_ENABLE() volatile
    {
        return DMA_CTRL & (1u << 5u);
    }

    /**
     * Set DMA_CTRL's TRIG5_ENABLE bit.
     *
     * Enable DMA request when TRIG5 done.
     */
    inline void set_DMA_CTRL_TRIG5_ENABLE() volatile
    {
        DMA_CTRL |= 1u << 5u;
    }

    /**
     * Clear DMA_CTRL's TRIG5_ENABLE bit.
     *
     * Enable DMA request when TRIG5 done.
     */
    inline void clear_DMA_CTRL_TRIG5_ENABLE() volatile
    {
        DMA_CTRL &= ~(1u << 5u);
    }

    /**
     * Toggle DMA_CTRL's TRIG5_ENABLE bit.
     *
     * Enable DMA request when TRIG5 done.
     */
    inline void toggle_DMA_CTRL_TRIG5_ENABLE() volatile
    {
        DMA_CTRL ^= 1u << 5u;
    }

    /**
     * Get DMA_CTRL's TRIG4_ENABLE bit.
     *
     * Enable DMA request when TRIG4 done.
     */
    inline bool get_DMA_CTRL_TRIG4_ENABLE() volatile
    {
        return DMA_CTRL & (1u << 4u);
    }

    /**
     * Set DMA_CTRL's TRIG4_ENABLE bit.
     *
     * Enable DMA request when TRIG4 done.
     */
    inline void set_DMA_CTRL_TRIG4_ENABLE() volatile
    {
        DMA_CTRL |= 1u << 4u;
    }

    /**
     * Clear DMA_CTRL's TRIG4_ENABLE bit.
     *
     * Enable DMA request when TRIG4 done.
     */
    inline void clear_DMA_CTRL_TRIG4_ENABLE() volatile
    {
        DMA_CTRL &= ~(1u << 4u);
    }

    /**
     * Toggle DMA_CTRL's TRIG4_ENABLE bit.
     *
     * Enable DMA request when TRIG4 done.
     */
    inline void toggle_DMA_CTRL_TRIG4_ENABLE() volatile
    {
        DMA_CTRL ^= 1u << 4u;
    }

    /**
     * Get DMA_CTRL's TRIG3_ENABLE bit.
     *
     * Enable DMA request when TRIG3 done.
     */
    inline bool get_DMA_CTRL_TRIG3_ENABLE() volatile
    {
        return DMA_CTRL & (1u << 3u);
    }

    /**
     * Set DMA_CTRL's TRIG3_ENABLE bit.
     *
     * Enable DMA request when TRIG3 done.
     */
    inline void set_DMA_CTRL_TRIG3_ENABLE() volatile
    {
        DMA_CTRL |= 1u << 3u;
    }

    /**
     * Clear DMA_CTRL's TRIG3_ENABLE bit.
     *
     * Enable DMA request when TRIG3 done.
     */
    inline void clear_DMA_CTRL_TRIG3_ENABLE() volatile
    {
        DMA_CTRL &= ~(1u << 3u);
    }

    /**
     * Toggle DMA_CTRL's TRIG3_ENABLE bit.
     *
     * Enable DMA request when TRIG3 done.
     */
    inline void toggle_DMA_CTRL_TRIG3_ENABLE() volatile
    {
        DMA_CTRL ^= 1u << 3u;
    }

    /**
     * Get DMA_CTRL's TRIG2_ENABLE bit.
     *
     * Enable DMA request when TRIG2 done.
     */
    inline bool get_DMA_CTRL_TRIG2_ENABLE() volatile
    {
        return DMA_CTRL & (1u << 2u);
    }

    /**
     * Set DMA_CTRL's TRIG2_ENABLE bit.
     *
     * Enable DMA request when TRIG2 done.
     */
    inline void set_DMA_CTRL_TRIG2_ENABLE() volatile
    {
        DMA_CTRL |= 1u << 2u;
    }

    /**
     * Clear DMA_CTRL's TRIG2_ENABLE bit.
     *
     * Enable DMA request when TRIG2 done.
     */
    inline void clear_DMA_CTRL_TRIG2_ENABLE() volatile
    {
        DMA_CTRL &= ~(1u << 2u);
    }

    /**
     * Toggle DMA_CTRL's TRIG2_ENABLE bit.
     *
     * Enable DMA request when TRIG2 done.
     */
    inline void toggle_DMA_CTRL_TRIG2_ENABLE() volatile
    {
        DMA_CTRL ^= 1u << 2u;
    }

    /**
     * Get DMA_CTRL's TRIG1_ENABLE bit.
     *
     * Enable DMA request when TRIG1 done.
     */
    inline bool get_DMA_CTRL_TRIG1_ENABLE() volatile
    {
        return DMA_CTRL & (1u << 1u);
    }

    /**
     * Set DMA_CTRL's TRIG1_ENABLE bit.
     *
     * Enable DMA request when TRIG1 done.
     */
    inline void set_DMA_CTRL_TRIG1_ENABLE() volatile
    {
        DMA_CTRL |= 1u << 1u;
    }

    /**
     * Clear DMA_CTRL's TRIG1_ENABLE bit.
     *
     * Enable DMA request when TRIG1 done.
     */
    inline void clear_DMA_CTRL_TRIG1_ENABLE() volatile
    {
        DMA_CTRL &= ~(1u << 1u);
    }

    /**
     * Toggle DMA_CTRL's TRIG1_ENABLE bit.
     *
     * Enable DMA request when TRIG1 done.
     */
    inline void toggle_DMA_CTRL_TRIG1_ENABLE() volatile
    {
        DMA_CTRL ^= 1u << 1u;
    }

    /**
     * Get DMA_CTRL's TRIG0_ENABLE bit.
     *
     * Enable DMA request when TRIG0 done.
     */
    inline bool get_DMA_CTRL_TRIG0_ENABLE() volatile
    {
        return DMA_CTRL & (1u << 0u);
    }

    /**
     * Set DMA_CTRL's TRIG0_ENABLE bit.
     *
     * Enable DMA request when TRIG0 done.
     */
    inline void set_DMA_CTRL_TRIG0_ENABLE() volatile
    {
        DMA_CTRL |= 1u << 0u;
    }

    /**
     * Clear DMA_CTRL's TRIG0_ENABLE bit.
     *
     * Enable DMA request when TRIG0 done.
     */
    inline void clear_DMA_CTRL_TRIG0_ENABLE() volatile
    {
        DMA_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle DMA_CTRL's TRIG0_ENABLE bit.
     *
     * Enable DMA request when TRIG0 done.
     */
    inline void toggle_DMA_CTRL_TRIG0_ENABLE() volatile
    {
        DMA_CTRL ^= 1u << 0u;
    }

    /**
     * Get all of DMA_CTRL's bit fields.
     *
     * (read-write) ETC DMA control Register
     */
    inline void get_DMA_CTRL(bool &TRIG7_REQ, bool &TRIG6_REQ, bool &TRIG5_REQ,
                             bool &TRIG4_REQ, bool &TRIG3_REQ, bool &TRIG2_REQ,
                             bool &TRIG1_REQ, bool &TRIG0_REQ,
                             bool &TRIG7_ENABLE, bool &TRIG6_ENABLE,
                             bool &TRIG5_ENABLE, bool &TRIG4_ENABLE,
                             bool &TRIG3_ENABLE, bool &TRIG2_ENABLE,
                             bool &TRIG1_ENABLE, bool &TRIG0_ENABLE) volatile
    {
        uint32_t curr = DMA_CTRL;

        TRIG7_REQ = curr & (1u << 23u);
        TRIG6_REQ = curr & (1u << 22u);
        TRIG5_REQ = curr & (1u << 21u);
        TRIG4_REQ = curr & (1u << 20u);
        TRIG3_REQ = curr & (1u << 19u);
        TRIG2_REQ = curr & (1u << 18u);
        TRIG1_REQ = curr & (1u << 17u);
        TRIG0_REQ = curr & (1u << 16u);
        TRIG7_ENABLE = curr & (1u << 7u);
        TRIG6_ENABLE = curr & (1u << 6u);
        TRIG5_ENABLE = curr & (1u << 5u);
        TRIG4_ENABLE = curr & (1u << 4u);
        TRIG3_ENABLE = curr & (1u << 3u);
        TRIG2_ENABLE = curr & (1u << 2u);
        TRIG1_ENABLE = curr & (1u << 1u);
        TRIG0_ENABLE = curr & (1u << 0u);
    }

    /**
     * Set all of DMA_CTRL's bit fields.
     *
     * (read-write) ETC DMA control Register
     */
    inline void set_DMA_CTRL(bool TRIG7_REQ, bool TRIG6_REQ, bool TRIG5_REQ,
                             bool TRIG4_REQ, bool TRIG3_REQ, bool TRIG2_REQ,
                             bool TRIG1_REQ, bool TRIG0_REQ, bool TRIG7_ENABLE,
                             bool TRIG6_ENABLE, bool TRIG5_ENABLE,
                             bool TRIG4_ENABLE, bool TRIG3_ENABLE,
                             bool TRIG2_ENABLE, bool TRIG1_ENABLE,
                             bool TRIG0_ENABLE) volatile
    {
        uint32_t curr = DMA_CTRL;

        curr &= ~(0b1u << 23u);
        curr |= (TRIG7_REQ & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (TRIG6_REQ & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (TRIG5_REQ & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (TRIG4_REQ & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (TRIG3_REQ & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (TRIG2_REQ & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (TRIG1_REQ & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (TRIG0_REQ & 0b1u) << 16u;
        curr &= ~(0b1u << 7u);
        curr |= (TRIG7_ENABLE & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (TRIG6_ENABLE & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (TRIG5_ENABLE & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (TRIG4_ENABLE & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (TRIG3_ENABLE & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (TRIG2_ENABLE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (TRIG1_ENABLE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TRIG0_ENABLE & 0b1u) << 0u;

        DMA_CTRL = curr;
    }

    /**
     * Get TRIG0_CTRL's CHAINx_DONE field.
     *
     * Segment x done detection
     */
    inline ADC_ETC_TRIG0_CTRL_CHAINx_DONE get_TRIG0_CTRL_CHAINx_DONE() volatile
    {
        return ADC_ETC_TRIG0_CTRL_CHAINx_DONE((TRIG0_CTRL >> 24u) &
                                              0b11111111u);
    }

    /**
     * Set TRIG0_CTRL's CHAINx_DONE field.
     *
     * Segment x done detection
     */
    inline void set_TRIG0_CTRL_CHAINx_DONE(
        ADC_ETC_TRIG0_CTRL_CHAINx_DONE value) volatile
    {
        uint32_t curr = TRIG0_CTRL;

        curr &= ~(0b11111111u << 24u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 24u;

        TRIG0_CTRL = curr;
    }

    /**
     * Get TRIG0_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline bool get_TRIG0_CTRL_SYNC_MODE() volatile
    {
        return TRIG0_CTRL & (1u << 16u);
    }

    /**
     * Set TRIG0_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void set_TRIG0_CTRL_SYNC_MODE() volatile
    {
        TRIG0_CTRL |= 1u << 16u;
    }

    /**
     * Clear TRIG0_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void clear_TRIG0_CTRL_SYNC_MODE() volatile
    {
        TRIG0_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle TRIG0_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void toggle_TRIG0_CTRL_SYNC_MODE() volatile
    {
        TRIG0_CTRL ^= 1u << 16u;
    }

    /**
     * Get TRIG0_CTRL's TRIG_PRIORITY field.
     *
     * External trigger priority, 7 is highest priority, while 0 is lowest
     */
    inline uint8_t get_TRIG0_CTRL_TRIG_PRIORITY() volatile
    {
        return (TRIG0_CTRL >> 12u) & 0b111u;
    }

    /**
     * Set TRIG0_CTRL's TRIG_PRIORITY field.
     *
     * External trigger priority, 7 is highest priority, while 0 is lowest
     */
    inline void set_TRIG0_CTRL_TRIG_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = TRIG0_CTRL;

        curr &= ~(0b111u << 12u);
        curr |= (value & 0b111u) << 12u;

        TRIG0_CTRL = curr;
    }

    /**
     * Get TRIG0_CTRL's TRIG_CHAIN field.
     *
     * The number of segments inside the trigger chain of TRIGa.
     */
    inline ADC_ETC_TRIG0_CTRL_TRIG_CHAIN get_TRIG0_CTRL_TRIG_CHAIN() volatile
    {
        return ADC_ETC_TRIG0_CTRL_TRIG_CHAIN((TRIG0_CTRL >> 8u) & 0b111u);
    }

    /**
     * Set TRIG0_CTRL's TRIG_CHAIN field.
     *
     * The number of segments inside the trigger chain of TRIGa.
     */
    inline void set_TRIG0_CTRL_TRIG_CHAIN(
        ADC_ETC_TRIG0_CTRL_TRIG_CHAIN value) volatile
    {
        uint32_t curr = TRIG0_CTRL;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TRIG0_CTRL = curr;
    }

    /**
     * Get TRIG0_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline bool get_TRIG0_CTRL_TRIG_MODE() volatile
    {
        return TRIG0_CTRL & (1u << 4u);
    }

    /**
     * Set TRIG0_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void set_TRIG0_CTRL_TRIG_MODE() volatile
    {
        TRIG0_CTRL |= 1u << 4u;
    }

    /**
     * Clear TRIG0_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void clear_TRIG0_CTRL_TRIG_MODE() volatile
    {
        TRIG0_CTRL &= ~(1u << 4u);
    }

    /**
     * Toggle TRIG0_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void toggle_TRIG0_CTRL_TRIG_MODE() volatile
    {
        TRIG0_CTRL ^= 1u << 4u;
    }

    /**
     * Get TRIG0_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline bool get_TRIG0_CTRL_SW_TRIG() volatile
    {
        return TRIG0_CTRL & (1u << 0u);
    }

    /**
     * Set TRIG0_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void set_TRIG0_CTRL_SW_TRIG() volatile
    {
        TRIG0_CTRL |= 1u << 0u;
    }

    /**
     * Clear TRIG0_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void clear_TRIG0_CTRL_SW_TRIG() volatile
    {
        TRIG0_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle TRIG0_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void toggle_TRIG0_CTRL_SW_TRIG() volatile
    {
        TRIG0_CTRL ^= 1u << 0u;
    }

    /**
     * Get all of TRIG0_CTRL's bit fields.
     *
     * (read-write) ETC_TRIG Control Register
     */
    inline void get_TRIG0_CTRL(ADC_ETC_TRIG0_CTRL_CHAINx_DONE &CHAINx_DONE,
                               bool &SYNC_MODE, uint8_t &TRIG_PRIORITY,
                               ADC_ETC_TRIG0_CTRL_TRIG_CHAIN &TRIG_CHAIN,
                               bool &TRIG_MODE, bool &SW_TRIG) volatile
    {
        uint32_t curr = TRIG0_CTRL;

        CHAINx_DONE =
            ADC_ETC_TRIG0_CTRL_CHAINx_DONE((curr >> 24u) & 0b11111111u);
        SYNC_MODE = curr & (1u << 16u);
        TRIG_PRIORITY = (curr >> 12u) & 0b111u;
        TRIG_CHAIN = ADC_ETC_TRIG0_CTRL_TRIG_CHAIN((curr >> 8u) & 0b111u);
        TRIG_MODE = curr & (1u << 4u);
        SW_TRIG = curr & (1u << 0u);
    }

    /**
     * Set all of TRIG0_CTRL's bit fields.
     *
     * (read-write) ETC_TRIG Control Register
     */
    inline void set_TRIG0_CTRL(ADC_ETC_TRIG0_CTRL_CHAINx_DONE CHAINx_DONE,
                               bool SYNC_MODE, uint8_t TRIG_PRIORITY,
                               ADC_ETC_TRIG0_CTRL_TRIG_CHAIN TRIG_CHAIN,
                               bool TRIG_MODE, bool SW_TRIG) volatile
    {
        uint32_t curr = TRIG0_CTRL;

        curr &= ~(0b11111111u << 24u);
        curr |= (std::to_underlying(CHAINx_DONE) & 0b11111111u) << 24u;
        curr &= ~(0b1u << 16u);
        curr |= (SYNC_MODE & 0b1u) << 16u;
        curr &= ~(0b111u << 12u);
        curr |= (TRIG_PRIORITY & 0b111u) << 12u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(TRIG_CHAIN) & 0b111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (TRIG_MODE & 0b1u) << 4u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG & 0b1u) << 0u;

        TRIG0_CTRL = curr;
    }

    /**
     * Get TRIG0_COUNTER's SAMPLE_INTERVAL field.
     *
     * TRIGGER sampling interval counter
     */
    inline uint16_t get_TRIG0_COUNTER_SAMPLE_INTERVAL() volatile
    {
        return (TRIG0_COUNTER >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set TRIG0_COUNTER's SAMPLE_INTERVAL field.
     *
     * TRIGGER sampling interval counter
     */
    inline void set_TRIG0_COUNTER_SAMPLE_INTERVAL(uint16_t value) volatile
    {
        uint32_t curr = TRIG0_COUNTER;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        TRIG0_COUNTER = curr;
    }

    /**
     * Get TRIG0_COUNTER's INIT_DELAY field.
     *
     * TRIGGER initial delay counter. Initial_delay =
     * (INIT_DELAY+1)*(PRE_DIVIDER+1)*ipg_clk
     */
    inline uint16_t get_TRIG0_COUNTER_INIT_DELAY() volatile
    {
        return (TRIG0_COUNTER >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TRIG0_COUNTER's INIT_DELAY field.
     *
     * TRIGGER initial delay counter. Initial_delay =
     * (INIT_DELAY+1)*(PRE_DIVIDER+1)*ipg_clk
     */
    inline void set_TRIG0_COUNTER_INIT_DELAY(uint16_t value) volatile
    {
        uint32_t curr = TRIG0_COUNTER;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TRIG0_COUNTER = curr;
    }

    /**
     * Get all of TRIG0_COUNTER's bit fields.
     *
     * (read-write) ETC_TRIG Counter Register
     */
    inline void get_TRIG0_COUNTER(uint16_t &SAMPLE_INTERVAL,
                                  uint16_t &INIT_DELAY) volatile
    {
        uint32_t curr = TRIG0_COUNTER;

        SAMPLE_INTERVAL = (curr >> 16u) & 0b1111111111111111u;
        INIT_DELAY = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of TRIG0_COUNTER's bit fields.
     *
     * (read-write) ETC_TRIG Counter Register
     */
    inline void set_TRIG0_COUNTER(uint16_t SAMPLE_INTERVAL,
                                  uint16_t INIT_DELAY) volatile
    {
        uint32_t curr = TRIG0_COUNTER;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (SAMPLE_INTERVAL & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (INIT_DELAY & 0b1111111111111111u) << 0u;

        TRIG0_COUNTER = curr;
    }

    /**
     * Get TRIG0_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline bool get_TRIG0_CHAIN_1_0_IE1_EN() volatile
    {
        return TRIG0_CHAIN_1_0 & (1u << 31u);
    }

    /**
     * Set TRIG0_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void set_TRIG0_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG0_CHAIN_1_0 |= 1u << 31u;
    }

    /**
     * Clear TRIG0_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void clear_TRIG0_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG0_CHAIN_1_0 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG0_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void toggle_TRIG0_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG0_CHAIN_1_0 ^= 1u << 31u;
    }

    /**
     * Get TRIG0_CHAIN_1_0's IE1 field.
     *
     * Segment 1 interrupt enable. (This bit field is meaningful only when
     * IE1_EN is set)
     */
    inline ADC_ETC_TRIG0_CHAIN_1_0_IE1 get_TRIG0_CHAIN_1_0_IE1() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_1_0_IE1((TRIG0_CHAIN_1_0 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG0_CHAIN_1_0's IE1 field.
     *
     * Segment 1 interrupt enable. (This bit field is meaningful only when
     * IE1_EN is set)
     */
    inline void set_TRIG0_CHAIN_1_0_IE1(
        ADC_ETC_TRIG0_CHAIN_1_0_IE1 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_1_0;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG0_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG0_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline bool get_TRIG0_CHAIN_1_0_B2B1() volatile
    {
        return TRIG0_CHAIN_1_0 & (1u << 28u);
    }

    /**
     * Set TRIG0_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void set_TRIG0_CHAIN_1_0_B2B1() volatile
    {
        TRIG0_CHAIN_1_0 |= 1u << 28u;
    }

    /**
     * Clear TRIG0_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void clear_TRIG0_CHAIN_1_0_B2B1() volatile
    {
        TRIG0_CHAIN_1_0 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG0_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void toggle_TRIG0_CHAIN_1_0_B2B1() volatile
    {
        TRIG0_CHAIN_1_0 ^= 1u << 28u;
    }

    /**
     * Get TRIG0_CHAIN_1_0's HWTS1 field.
     *
     * Segment 1 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG0_CHAIN_1_0_HWTS1 get_TRIG0_CHAIN_1_0_HWTS1() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_1_0_HWTS1((TRIG0_CHAIN_1_0 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG0_CHAIN_1_0's HWTS1 field.
     *
     * Segment 1 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG0_CHAIN_1_0_HWTS1(
        ADC_ETC_TRIG0_CHAIN_1_0_HWTS1 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_1_0;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG0_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG0_CHAIN_1_0's CSEL1 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG0_CHAIN_1_0_CSEL1 get_TRIG0_CHAIN_1_0_CSEL1() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_1_0_CSEL1((TRIG0_CHAIN_1_0 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG0_CHAIN_1_0's CSEL1 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG0_CHAIN_1_0_CSEL1(
        ADC_ETC_TRIG0_CHAIN_1_0_CSEL1 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_1_0;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG0_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG0_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline bool get_TRIG0_CHAIN_1_0_IE0_EN() volatile
    {
        return TRIG0_CHAIN_1_0 & (1u << 15u);
    }

    /**
     * Set TRIG0_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void set_TRIG0_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG0_CHAIN_1_0 |= 1u << 15u;
    }

    /**
     * Clear TRIG0_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void clear_TRIG0_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG0_CHAIN_1_0 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG0_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void toggle_TRIG0_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG0_CHAIN_1_0 ^= 1u << 15u;
    }

    /**
     * Get TRIG0_CHAIN_1_0's IE0 field.
     *
     * Segment 0 interrupt enable. (This bit field is meaningful only when
     * IE0_EN is set)
     */
    inline ADC_ETC_TRIG0_CHAIN_1_0_IE0 get_TRIG0_CHAIN_1_0_IE0() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_1_0_IE0((TRIG0_CHAIN_1_0 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG0_CHAIN_1_0's IE0 field.
     *
     * Segment 0 interrupt enable. (This bit field is meaningful only when
     * IE0_EN is set)
     */
    inline void set_TRIG0_CHAIN_1_0_IE0(
        ADC_ETC_TRIG0_CHAIN_1_0_IE0 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_1_0;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG0_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG0_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline bool get_TRIG0_CHAIN_1_0_B2B0() volatile
    {
        return TRIG0_CHAIN_1_0 & (1u << 12u);
    }

    /**
     * Set TRIG0_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void set_TRIG0_CHAIN_1_0_B2B0() volatile
    {
        TRIG0_CHAIN_1_0 |= 1u << 12u;
    }

    /**
     * Clear TRIG0_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void clear_TRIG0_CHAIN_1_0_B2B0() volatile
    {
        TRIG0_CHAIN_1_0 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG0_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void toggle_TRIG0_CHAIN_1_0_B2B0() volatile
    {
        TRIG0_CHAIN_1_0 ^= 1u << 12u;
    }

    /**
     * Get TRIG0_CHAIN_1_0's HWTS0 field.
     *
     * Segment 0 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG0_CHAIN_1_0_HWTS0 get_TRIG0_CHAIN_1_0_HWTS0() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_1_0_HWTS0((TRIG0_CHAIN_1_0 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG0_CHAIN_1_0's HWTS0 field.
     *
     * Segment 0 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG0_CHAIN_1_0_HWTS0(
        ADC_ETC_TRIG0_CHAIN_1_0_HWTS0 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_1_0;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG0_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG0_CHAIN_1_0's CSEL0 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG0_CHAIN_1_0_CSEL0 get_TRIG0_CHAIN_1_0_CSEL0() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_1_0_CSEL0((TRIG0_CHAIN_1_0 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG0_CHAIN_1_0's CSEL0 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG0_CHAIN_1_0_CSEL0(
        ADC_ETC_TRIG0_CHAIN_1_0_CSEL0 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_1_0;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG0_CHAIN_1_0 = curr;
    }

    /**
     * Get all of TRIG0_CHAIN_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Chain 0/1 Register
     */
    inline void get_TRIG0_CHAIN_1_0(
        bool &IE1_EN, ADC_ETC_TRIG0_CHAIN_1_0_IE1 &IE1, bool &B2B1,
        ADC_ETC_TRIG0_CHAIN_1_0_HWTS1 &HWTS1,
        ADC_ETC_TRIG0_CHAIN_1_0_CSEL1 &CSEL1, bool &IE0_EN,
        ADC_ETC_TRIG0_CHAIN_1_0_IE0 &IE0, bool &B2B0,
        ADC_ETC_TRIG0_CHAIN_1_0_HWTS0 &HWTS0,
        ADC_ETC_TRIG0_CHAIN_1_0_CSEL0 &CSEL0) volatile
    {
        uint32_t curr = TRIG0_CHAIN_1_0;

        IE1_EN = curr & (1u << 31u);
        IE1 = ADC_ETC_TRIG0_CHAIN_1_0_IE1((curr >> 29u) & 0b11u);
        B2B1 = curr & (1u << 28u);
        HWTS1 = ADC_ETC_TRIG0_CHAIN_1_0_HWTS1((curr >> 20u) & 0b11111111u);
        CSEL1 = ADC_ETC_TRIG0_CHAIN_1_0_CSEL1((curr >> 16u) & 0b1111u);
        IE0_EN = curr & (1u << 15u);
        IE0 = ADC_ETC_TRIG0_CHAIN_1_0_IE0((curr >> 13u) & 0b11u);
        B2B0 = curr & (1u << 12u);
        HWTS0 = ADC_ETC_TRIG0_CHAIN_1_0_HWTS0((curr >> 4u) & 0b11111111u);
        CSEL0 = ADC_ETC_TRIG0_CHAIN_1_0_CSEL0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG0_CHAIN_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Chain 0/1 Register
     */
    inline void set_TRIG0_CHAIN_1_0(
        bool IE1_EN, ADC_ETC_TRIG0_CHAIN_1_0_IE1 IE1, bool B2B1,
        ADC_ETC_TRIG0_CHAIN_1_0_HWTS1 HWTS1,
        ADC_ETC_TRIG0_CHAIN_1_0_CSEL1 CSEL1, bool IE0_EN,
        ADC_ETC_TRIG0_CHAIN_1_0_IE0 IE0, bool B2B0,
        ADC_ETC_TRIG0_CHAIN_1_0_HWTS0 HWTS0,
        ADC_ETC_TRIG0_CHAIN_1_0_CSEL0 CSEL0) volatile
    {
        uint32_t curr = TRIG0_CHAIN_1_0;

        curr &= ~(0b1u << 31u);
        curr |= (IE1_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE1) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B1 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS1) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL1) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE0_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE0) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B0 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS0) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL0) & 0b1111u) << 0u;

        TRIG0_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG0_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline bool get_TRIG0_CHAIN_3_2_IE3_EN() volatile
    {
        return TRIG0_CHAIN_3_2 & (1u << 31u);
    }

    /**
     * Set TRIG0_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void set_TRIG0_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG0_CHAIN_3_2 |= 1u << 31u;
    }

    /**
     * Clear TRIG0_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void clear_TRIG0_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG0_CHAIN_3_2 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG0_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void toggle_TRIG0_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG0_CHAIN_3_2 ^= 1u << 31u;
    }

    /**
     * Get TRIG0_CHAIN_3_2's IE3 field.
     *
     * Segment 3 interrupt enable. (This bit field is meaningful only when
     * IE3_EN is set)
     */
    inline ADC_ETC_TRIG0_CHAIN_3_2_IE3 get_TRIG0_CHAIN_3_2_IE3() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_3_2_IE3((TRIG0_CHAIN_3_2 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG0_CHAIN_3_2's IE3 field.
     *
     * Segment 3 interrupt enable. (This bit field is meaningful only when
     * IE3_EN is set)
     */
    inline void set_TRIG0_CHAIN_3_2_IE3(
        ADC_ETC_TRIG0_CHAIN_3_2_IE3 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_3_2;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG0_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG0_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline bool get_TRIG0_CHAIN_3_2_B2B3() volatile
    {
        return TRIG0_CHAIN_3_2 & (1u << 28u);
    }

    /**
     * Set TRIG0_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void set_TRIG0_CHAIN_3_2_B2B3() volatile
    {
        TRIG0_CHAIN_3_2 |= 1u << 28u;
    }

    /**
     * Clear TRIG0_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void clear_TRIG0_CHAIN_3_2_B2B3() volatile
    {
        TRIG0_CHAIN_3_2 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG0_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void toggle_TRIG0_CHAIN_3_2_B2B3() volatile
    {
        TRIG0_CHAIN_3_2 ^= 1u << 28u;
    }

    /**
     * Get TRIG0_CHAIN_3_2's HWTS3 field.
     *
     * Segment 3 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG0_CHAIN_3_2_HWTS3 get_TRIG0_CHAIN_3_2_HWTS3() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_3_2_HWTS3((TRIG0_CHAIN_3_2 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG0_CHAIN_3_2's HWTS3 field.
     *
     * Segment 3 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG0_CHAIN_3_2_HWTS3(
        ADC_ETC_TRIG0_CHAIN_3_2_HWTS3 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_3_2;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG0_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG0_CHAIN_3_2's CSEL3 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG0_CHAIN_3_2_CSEL3 get_TRIG0_CHAIN_3_2_CSEL3() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_3_2_CSEL3((TRIG0_CHAIN_3_2 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG0_CHAIN_3_2's CSEL3 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG0_CHAIN_3_2_CSEL3(
        ADC_ETC_TRIG0_CHAIN_3_2_CSEL3 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_3_2;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG0_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG0_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline bool get_TRIG0_CHAIN_3_2_IE2_EN() volatile
    {
        return TRIG0_CHAIN_3_2 & (1u << 15u);
    }

    /**
     * Set TRIG0_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void set_TRIG0_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG0_CHAIN_3_2 |= 1u << 15u;
    }

    /**
     * Clear TRIG0_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void clear_TRIG0_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG0_CHAIN_3_2 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG0_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void toggle_TRIG0_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG0_CHAIN_3_2 ^= 1u << 15u;
    }

    /**
     * Get TRIG0_CHAIN_3_2's IE2 field.
     *
     * Segment 2 interrupt enable. (This bit field is meaningful only when
     * IE2_EN is set)
     */
    inline ADC_ETC_TRIG0_CHAIN_3_2_IE2 get_TRIG0_CHAIN_3_2_IE2() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_3_2_IE2((TRIG0_CHAIN_3_2 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG0_CHAIN_3_2's IE2 field.
     *
     * Segment 2 interrupt enable. (This bit field is meaningful only when
     * IE2_EN is set)
     */
    inline void set_TRIG0_CHAIN_3_2_IE2(
        ADC_ETC_TRIG0_CHAIN_3_2_IE2 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_3_2;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG0_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG0_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline bool get_TRIG0_CHAIN_3_2_B2B2() volatile
    {
        return TRIG0_CHAIN_3_2 & (1u << 12u);
    }

    /**
     * Set TRIG0_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void set_TRIG0_CHAIN_3_2_B2B2() volatile
    {
        TRIG0_CHAIN_3_2 |= 1u << 12u;
    }

    /**
     * Clear TRIG0_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void clear_TRIG0_CHAIN_3_2_B2B2() volatile
    {
        TRIG0_CHAIN_3_2 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG0_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void toggle_TRIG0_CHAIN_3_2_B2B2() volatile
    {
        TRIG0_CHAIN_3_2 ^= 1u << 12u;
    }

    /**
     * Get TRIG0_CHAIN_3_2's HWTS2 field.
     *
     * Segment 2 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG0_CHAIN_3_2_HWTS2 get_TRIG0_CHAIN_3_2_HWTS2() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_3_2_HWTS2((TRIG0_CHAIN_3_2 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG0_CHAIN_3_2's HWTS2 field.
     *
     * Segment 2 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG0_CHAIN_3_2_HWTS2(
        ADC_ETC_TRIG0_CHAIN_3_2_HWTS2 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_3_2;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG0_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG0_CHAIN_3_2's CSEL2 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG0_CHAIN_3_2_CSEL2 get_TRIG0_CHAIN_3_2_CSEL2() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_3_2_CSEL2((TRIG0_CHAIN_3_2 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG0_CHAIN_3_2's CSEL2 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG0_CHAIN_3_2_CSEL2(
        ADC_ETC_TRIG0_CHAIN_3_2_CSEL2 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_3_2;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG0_CHAIN_3_2 = curr;
    }

    /**
     * Get all of TRIG0_CHAIN_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Chain 2/3 Register
     */
    inline void get_TRIG0_CHAIN_3_2(
        bool &IE3_EN, ADC_ETC_TRIG0_CHAIN_3_2_IE3 &IE3, bool &B2B3,
        ADC_ETC_TRIG0_CHAIN_3_2_HWTS3 &HWTS3,
        ADC_ETC_TRIG0_CHAIN_3_2_CSEL3 &CSEL3, bool &IE2_EN,
        ADC_ETC_TRIG0_CHAIN_3_2_IE2 &IE2, bool &B2B2,
        ADC_ETC_TRIG0_CHAIN_3_2_HWTS2 &HWTS2,
        ADC_ETC_TRIG0_CHAIN_3_2_CSEL2 &CSEL2) volatile
    {
        uint32_t curr = TRIG0_CHAIN_3_2;

        IE3_EN = curr & (1u << 31u);
        IE3 = ADC_ETC_TRIG0_CHAIN_3_2_IE3((curr >> 29u) & 0b11u);
        B2B3 = curr & (1u << 28u);
        HWTS3 = ADC_ETC_TRIG0_CHAIN_3_2_HWTS3((curr >> 20u) & 0b11111111u);
        CSEL3 = ADC_ETC_TRIG0_CHAIN_3_2_CSEL3((curr >> 16u) & 0b1111u);
        IE2_EN = curr & (1u << 15u);
        IE2 = ADC_ETC_TRIG0_CHAIN_3_2_IE2((curr >> 13u) & 0b11u);
        B2B2 = curr & (1u << 12u);
        HWTS2 = ADC_ETC_TRIG0_CHAIN_3_2_HWTS2((curr >> 4u) & 0b11111111u);
        CSEL2 = ADC_ETC_TRIG0_CHAIN_3_2_CSEL2((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG0_CHAIN_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Chain 2/3 Register
     */
    inline void set_TRIG0_CHAIN_3_2(
        bool IE3_EN, ADC_ETC_TRIG0_CHAIN_3_2_IE3 IE3, bool B2B3,
        ADC_ETC_TRIG0_CHAIN_3_2_HWTS3 HWTS3,
        ADC_ETC_TRIG0_CHAIN_3_2_CSEL3 CSEL3, bool IE2_EN,
        ADC_ETC_TRIG0_CHAIN_3_2_IE2 IE2, bool B2B2,
        ADC_ETC_TRIG0_CHAIN_3_2_HWTS2 HWTS2,
        ADC_ETC_TRIG0_CHAIN_3_2_CSEL2 CSEL2) volatile
    {
        uint32_t curr = TRIG0_CHAIN_3_2;

        curr &= ~(0b1u << 31u);
        curr |= (IE3_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE3) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B3 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS3) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL3) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE2_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE2) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B2 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS2) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL2) & 0b1111u) << 0u;

        TRIG0_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG0_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline bool get_TRIG0_CHAIN_5_4_IE5_EN() volatile
    {
        return TRIG0_CHAIN_5_4 & (1u << 31u);
    }

    /**
     * Set TRIG0_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void set_TRIG0_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG0_CHAIN_5_4 |= 1u << 31u;
    }

    /**
     * Clear TRIG0_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void clear_TRIG0_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG0_CHAIN_5_4 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG0_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void toggle_TRIG0_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG0_CHAIN_5_4 ^= 1u << 31u;
    }

    /**
     * Get TRIG0_CHAIN_5_4's IE5 field.
     *
     * Segment 5 interrupt enable. (This bit field is meaningful only when
     * IE5_EN is set)
     */
    inline ADC_ETC_TRIG0_CHAIN_5_4_IE5 get_TRIG0_CHAIN_5_4_IE5() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_5_4_IE5((TRIG0_CHAIN_5_4 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG0_CHAIN_5_4's IE5 field.
     *
     * Segment 5 interrupt enable. (This bit field is meaningful only when
     * IE5_EN is set)
     */
    inline void set_TRIG0_CHAIN_5_4_IE5(
        ADC_ETC_TRIG0_CHAIN_5_4_IE5 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_5_4;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG0_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG0_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline bool get_TRIG0_CHAIN_5_4_B2B5() volatile
    {
        return TRIG0_CHAIN_5_4 & (1u << 28u);
    }

    /**
     * Set TRIG0_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void set_TRIG0_CHAIN_5_4_B2B5() volatile
    {
        TRIG0_CHAIN_5_4 |= 1u << 28u;
    }

    /**
     * Clear TRIG0_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void clear_TRIG0_CHAIN_5_4_B2B5() volatile
    {
        TRIG0_CHAIN_5_4 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG0_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void toggle_TRIG0_CHAIN_5_4_B2B5() volatile
    {
        TRIG0_CHAIN_5_4 ^= 1u << 28u;
    }

    /**
     * Get TRIG0_CHAIN_5_4's HWTS5 field.
     *
     * Segment 5 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG0_CHAIN_5_4_HWTS5 get_TRIG0_CHAIN_5_4_HWTS5() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_5_4_HWTS5((TRIG0_CHAIN_5_4 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG0_CHAIN_5_4's HWTS5 field.
     *
     * Segment 5 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG0_CHAIN_5_4_HWTS5(
        ADC_ETC_TRIG0_CHAIN_5_4_HWTS5 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_5_4;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG0_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG0_CHAIN_5_4's CSEL5 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG0_CHAIN_5_4_CSEL5 get_TRIG0_CHAIN_5_4_CSEL5() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_5_4_CSEL5((TRIG0_CHAIN_5_4 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG0_CHAIN_5_4's CSEL5 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG0_CHAIN_5_4_CSEL5(
        ADC_ETC_TRIG0_CHAIN_5_4_CSEL5 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_5_4;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG0_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG0_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline bool get_TRIG0_CHAIN_5_4_IE4_EN() volatile
    {
        return TRIG0_CHAIN_5_4 & (1u << 15u);
    }

    /**
     * Set TRIG0_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void set_TRIG0_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG0_CHAIN_5_4 |= 1u << 15u;
    }

    /**
     * Clear TRIG0_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void clear_TRIG0_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG0_CHAIN_5_4 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG0_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void toggle_TRIG0_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG0_CHAIN_5_4 ^= 1u << 15u;
    }

    /**
     * Get TRIG0_CHAIN_5_4's IE4 field.
     *
     * Segment 4 interrupt enable. (This bit field is meaningful only when
     * IE4_EN is set)
     */
    inline ADC_ETC_TRIG0_CHAIN_5_4_IE4 get_TRIG0_CHAIN_5_4_IE4() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_5_4_IE4((TRIG0_CHAIN_5_4 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG0_CHAIN_5_4's IE4 field.
     *
     * Segment 4 interrupt enable. (This bit field is meaningful only when
     * IE4_EN is set)
     */
    inline void set_TRIG0_CHAIN_5_4_IE4(
        ADC_ETC_TRIG0_CHAIN_5_4_IE4 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_5_4;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG0_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG0_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline bool get_TRIG0_CHAIN_5_4_B2B4() volatile
    {
        return TRIG0_CHAIN_5_4 & (1u << 12u);
    }

    /**
     * Set TRIG0_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void set_TRIG0_CHAIN_5_4_B2B4() volatile
    {
        TRIG0_CHAIN_5_4 |= 1u << 12u;
    }

    /**
     * Clear TRIG0_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void clear_TRIG0_CHAIN_5_4_B2B4() volatile
    {
        TRIG0_CHAIN_5_4 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG0_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void toggle_TRIG0_CHAIN_5_4_B2B4() volatile
    {
        TRIG0_CHAIN_5_4 ^= 1u << 12u;
    }

    /**
     * Get TRIG0_CHAIN_5_4's HWTS4 field.
     *
     * Segment 4 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG0_CHAIN_5_4_HWTS4 get_TRIG0_CHAIN_5_4_HWTS4() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_5_4_HWTS4((TRIG0_CHAIN_5_4 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG0_CHAIN_5_4's HWTS4 field.
     *
     * Segment 4 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG0_CHAIN_5_4_HWTS4(
        ADC_ETC_TRIG0_CHAIN_5_4_HWTS4 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_5_4;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG0_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG0_CHAIN_5_4's CSEL4 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG0_CHAIN_5_4_CSEL4 get_TRIG0_CHAIN_5_4_CSEL4() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_5_4_CSEL4((TRIG0_CHAIN_5_4 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG0_CHAIN_5_4's CSEL4 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG0_CHAIN_5_4_CSEL4(
        ADC_ETC_TRIG0_CHAIN_5_4_CSEL4 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_5_4;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG0_CHAIN_5_4 = curr;
    }

    /**
     * Get all of TRIG0_CHAIN_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Chain 4/5 Register
     */
    inline void get_TRIG0_CHAIN_5_4(
        bool &IE5_EN, ADC_ETC_TRIG0_CHAIN_5_4_IE5 &IE5, bool &B2B5,
        ADC_ETC_TRIG0_CHAIN_5_4_HWTS5 &HWTS5,
        ADC_ETC_TRIG0_CHAIN_5_4_CSEL5 &CSEL5, bool &IE4_EN,
        ADC_ETC_TRIG0_CHAIN_5_4_IE4 &IE4, bool &B2B4,
        ADC_ETC_TRIG0_CHAIN_5_4_HWTS4 &HWTS4,
        ADC_ETC_TRIG0_CHAIN_5_4_CSEL4 &CSEL4) volatile
    {
        uint32_t curr = TRIG0_CHAIN_5_4;

        IE5_EN = curr & (1u << 31u);
        IE5 = ADC_ETC_TRIG0_CHAIN_5_4_IE5((curr >> 29u) & 0b11u);
        B2B5 = curr & (1u << 28u);
        HWTS5 = ADC_ETC_TRIG0_CHAIN_5_4_HWTS5((curr >> 20u) & 0b11111111u);
        CSEL5 = ADC_ETC_TRIG0_CHAIN_5_4_CSEL5((curr >> 16u) & 0b1111u);
        IE4_EN = curr & (1u << 15u);
        IE4 = ADC_ETC_TRIG0_CHAIN_5_4_IE4((curr >> 13u) & 0b11u);
        B2B4 = curr & (1u << 12u);
        HWTS4 = ADC_ETC_TRIG0_CHAIN_5_4_HWTS4((curr >> 4u) & 0b11111111u);
        CSEL4 = ADC_ETC_TRIG0_CHAIN_5_4_CSEL4((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG0_CHAIN_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Chain 4/5 Register
     */
    inline void set_TRIG0_CHAIN_5_4(
        bool IE5_EN, ADC_ETC_TRIG0_CHAIN_5_4_IE5 IE5, bool B2B5,
        ADC_ETC_TRIG0_CHAIN_5_4_HWTS5 HWTS5,
        ADC_ETC_TRIG0_CHAIN_5_4_CSEL5 CSEL5, bool IE4_EN,
        ADC_ETC_TRIG0_CHAIN_5_4_IE4 IE4, bool B2B4,
        ADC_ETC_TRIG0_CHAIN_5_4_HWTS4 HWTS4,
        ADC_ETC_TRIG0_CHAIN_5_4_CSEL4 CSEL4) volatile
    {
        uint32_t curr = TRIG0_CHAIN_5_4;

        curr &= ~(0b1u << 31u);
        curr |= (IE5_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE5) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B5 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS5) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL5) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE4_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE4) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B4 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS4) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL4) & 0b1111u) << 0u;

        TRIG0_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG0_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline bool get_TRIG0_CHAIN_7_6_IE7_EN() volatile
    {
        return TRIG0_CHAIN_7_6 & (1u << 31u);
    }

    /**
     * Set TRIG0_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void set_TRIG0_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG0_CHAIN_7_6 |= 1u << 31u;
    }

    /**
     * Clear TRIG0_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void clear_TRIG0_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG0_CHAIN_7_6 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG0_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void toggle_TRIG0_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG0_CHAIN_7_6 ^= 1u << 31u;
    }

    /**
     * Get TRIG0_CHAIN_7_6's IE7 field.
     *
     * Segment 7 interrupt enable. (This bit field is meaningful only when
     * IE7_EN is set)
     */
    inline ADC_ETC_TRIG0_CHAIN_7_6_IE7 get_TRIG0_CHAIN_7_6_IE7() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_7_6_IE7((TRIG0_CHAIN_7_6 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG0_CHAIN_7_6's IE7 field.
     *
     * Segment 7 interrupt enable. (This bit field is meaningful only when
     * IE7_EN is set)
     */
    inline void set_TRIG0_CHAIN_7_6_IE7(
        ADC_ETC_TRIG0_CHAIN_7_6_IE7 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_7_6;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG0_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG0_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline bool get_TRIG0_CHAIN_7_6_B2B7() volatile
    {
        return TRIG0_CHAIN_7_6 & (1u << 28u);
    }

    /**
     * Set TRIG0_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void set_TRIG0_CHAIN_7_6_B2B7() volatile
    {
        TRIG0_CHAIN_7_6 |= 1u << 28u;
    }

    /**
     * Clear TRIG0_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void clear_TRIG0_CHAIN_7_6_B2B7() volatile
    {
        TRIG0_CHAIN_7_6 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG0_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void toggle_TRIG0_CHAIN_7_6_B2B7() volatile
    {
        TRIG0_CHAIN_7_6 ^= 1u << 28u;
    }

    /**
     * Get TRIG0_CHAIN_7_6's HWTS7 field.
     *
     * Segment 7 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG0_CHAIN_7_6_HWTS7 get_TRIG0_CHAIN_7_6_HWTS7() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_7_6_HWTS7((TRIG0_CHAIN_7_6 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG0_CHAIN_7_6's HWTS7 field.
     *
     * Segment 7 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG0_CHAIN_7_6_HWTS7(
        ADC_ETC_TRIG0_CHAIN_7_6_HWTS7 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_7_6;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG0_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG0_CHAIN_7_6's CSEL7 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG0_CHAIN_7_6_CSEL7 get_TRIG0_CHAIN_7_6_CSEL7() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_7_6_CSEL7((TRIG0_CHAIN_7_6 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG0_CHAIN_7_6's CSEL7 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG0_CHAIN_7_6_CSEL7(
        ADC_ETC_TRIG0_CHAIN_7_6_CSEL7 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_7_6;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG0_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG0_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline bool get_TRIG0_CHAIN_7_6_IE6_EN() volatile
    {
        return TRIG0_CHAIN_7_6 & (1u << 15u);
    }

    /**
     * Set TRIG0_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void set_TRIG0_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG0_CHAIN_7_6 |= 1u << 15u;
    }

    /**
     * Clear TRIG0_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void clear_TRIG0_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG0_CHAIN_7_6 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG0_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void toggle_TRIG0_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG0_CHAIN_7_6 ^= 1u << 15u;
    }

    /**
     * Get TRIG0_CHAIN_7_6's IE6 field.
     *
     * Segment 6 interrupt enable. (This bit field is meaningful only when
     * IE6_EN is set)
     */
    inline ADC_ETC_TRIG0_CHAIN_7_6_IE6 get_TRIG0_CHAIN_7_6_IE6() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_7_6_IE6((TRIG0_CHAIN_7_6 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG0_CHAIN_7_6's IE6 field.
     *
     * Segment 6 interrupt enable. (This bit field is meaningful only when
     * IE6_EN is set)
     */
    inline void set_TRIG0_CHAIN_7_6_IE6(
        ADC_ETC_TRIG0_CHAIN_7_6_IE6 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_7_6;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG0_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG0_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline bool get_TRIG0_CHAIN_7_6_B2B6() volatile
    {
        return TRIG0_CHAIN_7_6 & (1u << 12u);
    }

    /**
     * Set TRIG0_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void set_TRIG0_CHAIN_7_6_B2B6() volatile
    {
        TRIG0_CHAIN_7_6 |= 1u << 12u;
    }

    /**
     * Clear TRIG0_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void clear_TRIG0_CHAIN_7_6_B2B6() volatile
    {
        TRIG0_CHAIN_7_6 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG0_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void toggle_TRIG0_CHAIN_7_6_B2B6() volatile
    {
        TRIG0_CHAIN_7_6 ^= 1u << 12u;
    }

    /**
     * Get TRIG0_CHAIN_7_6's HWTS6 field.
     *
     * Segment 6 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG0_CHAIN_7_6_HWTS6 get_TRIG0_CHAIN_7_6_HWTS6() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_7_6_HWTS6((TRIG0_CHAIN_7_6 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG0_CHAIN_7_6's HWTS6 field.
     *
     * Segment 6 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG0_CHAIN_7_6_HWTS6(
        ADC_ETC_TRIG0_CHAIN_7_6_HWTS6 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_7_6;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG0_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG0_CHAIN_7_6's CSEL6 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG0_CHAIN_7_6_CSEL6 get_TRIG0_CHAIN_7_6_CSEL6() volatile
    {
        return ADC_ETC_TRIG0_CHAIN_7_6_CSEL6((TRIG0_CHAIN_7_6 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG0_CHAIN_7_6's CSEL6 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG0_CHAIN_7_6_CSEL6(
        ADC_ETC_TRIG0_CHAIN_7_6_CSEL6 value) volatile
    {
        uint32_t curr = TRIG0_CHAIN_7_6;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG0_CHAIN_7_6 = curr;
    }

    /**
     * Get all of TRIG0_CHAIN_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Chain 6/7 Register
     */
    inline void get_TRIG0_CHAIN_7_6(
        bool &IE7_EN, ADC_ETC_TRIG0_CHAIN_7_6_IE7 &IE7, bool &B2B7,
        ADC_ETC_TRIG0_CHAIN_7_6_HWTS7 &HWTS7,
        ADC_ETC_TRIG0_CHAIN_7_6_CSEL7 &CSEL7, bool &IE6_EN,
        ADC_ETC_TRIG0_CHAIN_7_6_IE6 &IE6, bool &B2B6,
        ADC_ETC_TRIG0_CHAIN_7_6_HWTS6 &HWTS6,
        ADC_ETC_TRIG0_CHAIN_7_6_CSEL6 &CSEL6) volatile
    {
        uint32_t curr = TRIG0_CHAIN_7_6;

        IE7_EN = curr & (1u << 31u);
        IE7 = ADC_ETC_TRIG0_CHAIN_7_6_IE7((curr >> 29u) & 0b11u);
        B2B7 = curr & (1u << 28u);
        HWTS7 = ADC_ETC_TRIG0_CHAIN_7_6_HWTS7((curr >> 20u) & 0b11111111u);
        CSEL7 = ADC_ETC_TRIG0_CHAIN_7_6_CSEL7((curr >> 16u) & 0b1111u);
        IE6_EN = curr & (1u << 15u);
        IE6 = ADC_ETC_TRIG0_CHAIN_7_6_IE6((curr >> 13u) & 0b11u);
        B2B6 = curr & (1u << 12u);
        HWTS6 = ADC_ETC_TRIG0_CHAIN_7_6_HWTS6((curr >> 4u) & 0b11111111u);
        CSEL6 = ADC_ETC_TRIG0_CHAIN_7_6_CSEL6((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG0_CHAIN_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Chain 6/7 Register
     */
    inline void set_TRIG0_CHAIN_7_6(
        bool IE7_EN, ADC_ETC_TRIG0_CHAIN_7_6_IE7 IE7, bool B2B7,
        ADC_ETC_TRIG0_CHAIN_7_6_HWTS7 HWTS7,
        ADC_ETC_TRIG0_CHAIN_7_6_CSEL7 CSEL7, bool IE6_EN,
        ADC_ETC_TRIG0_CHAIN_7_6_IE6 IE6, bool B2B6,
        ADC_ETC_TRIG0_CHAIN_7_6_HWTS6 HWTS6,
        ADC_ETC_TRIG0_CHAIN_7_6_CSEL6 CSEL6) volatile
    {
        uint32_t curr = TRIG0_CHAIN_7_6;

        curr &= ~(0b1u << 31u);
        curr |= (IE7_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE7) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B7 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS7) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL7) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE6_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE6) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B6 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS6) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL6) & 0b1111u) << 0u;

        TRIG0_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG0_RESULT_1_0's DATA1 field.
     *
     * Result DATA1The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG0_RESULT_1_0_DATA1() volatile
    {
        return (TRIG0_RESULT_1_0 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG0_RESULT_1_0's DATA0 field.
     *
     * Result DATA0The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG0_RESULT_1_0_DATA0() volatile
    {
        return (TRIG0_RESULT_1_0 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG0_RESULT_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 1/0 Register
     */
    inline void get_TRIG0_RESULT_1_0(uint16_t &DATA1, uint16_t &DATA0) volatile
    {
        uint32_t curr = TRIG0_RESULT_1_0;

        DATA1 = (curr >> 16u) & 0b111111111111u;
        DATA0 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG0_RESULT_3_2's DATA3 field.
     *
     * Result DATA3The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG0_RESULT_3_2_DATA3() volatile
    {
        return (TRIG0_RESULT_3_2 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG0_RESULT_3_2's DATA2 field.
     *
     * Result DATA2The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG0_RESULT_3_2_DATA2() volatile
    {
        return (TRIG0_RESULT_3_2 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG0_RESULT_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 3/2 Register
     */
    inline void get_TRIG0_RESULT_3_2(uint16_t &DATA3, uint16_t &DATA2) volatile
    {
        uint32_t curr = TRIG0_RESULT_3_2;

        DATA3 = (curr >> 16u) & 0b111111111111u;
        DATA2 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG0_RESULT_5_4's DATA5 field.
     *
     * Result DATA5The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG0_RESULT_5_4_DATA5() volatile
    {
        return (TRIG0_RESULT_5_4 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG0_RESULT_5_4's DATA4 field.
     *
     * Result DATA4The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG0_RESULT_5_4_DATA4() volatile
    {
        return (TRIG0_RESULT_5_4 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG0_RESULT_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 5/4 Register
     */
    inline void get_TRIG0_RESULT_5_4(uint16_t &DATA5, uint16_t &DATA4) volatile
    {
        uint32_t curr = TRIG0_RESULT_5_4;

        DATA5 = (curr >> 16u) & 0b111111111111u;
        DATA4 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG0_RESULT_7_6's DATA7 field.
     *
     * Result DATA7The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG0_RESULT_7_6_DATA7() volatile
    {
        return (TRIG0_RESULT_7_6 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG0_RESULT_7_6's DATA6 field.
     *
     * Result DATA6The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG0_RESULT_7_6_DATA6() volatile
    {
        return (TRIG0_RESULT_7_6 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG0_RESULT_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 7/6 Register
     */
    inline void get_TRIG0_RESULT_7_6(uint16_t &DATA7, uint16_t &DATA6) volatile
    {
        uint32_t curr = TRIG0_RESULT_7_6;

        DATA7 = (curr >> 16u) & 0b111111111111u;
        DATA6 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG1_CTRL's CHAINx_DONE field.
     *
     * Segment x done detection
     */
    inline ADC_ETC_TRIG1_CTRL_CHAINx_DONE get_TRIG1_CTRL_CHAINx_DONE() volatile
    {
        return ADC_ETC_TRIG1_CTRL_CHAINx_DONE((TRIG1_CTRL >> 24u) &
                                              0b11111111u);
    }

    /**
     * Set TRIG1_CTRL's CHAINx_DONE field.
     *
     * Segment x done detection
     */
    inline void set_TRIG1_CTRL_CHAINx_DONE(
        ADC_ETC_TRIG1_CTRL_CHAINx_DONE value) volatile
    {
        uint32_t curr = TRIG1_CTRL;

        curr &= ~(0b11111111u << 24u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 24u;

        TRIG1_CTRL = curr;
    }

    /**
     * Get TRIG1_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline bool get_TRIG1_CTRL_SYNC_MODE() volatile
    {
        return TRIG1_CTRL & (1u << 16u);
    }

    /**
     * Set TRIG1_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void set_TRIG1_CTRL_SYNC_MODE() volatile
    {
        TRIG1_CTRL |= 1u << 16u;
    }

    /**
     * Clear TRIG1_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void clear_TRIG1_CTRL_SYNC_MODE() volatile
    {
        TRIG1_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle TRIG1_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void toggle_TRIG1_CTRL_SYNC_MODE() volatile
    {
        TRIG1_CTRL ^= 1u << 16u;
    }

    /**
     * Get TRIG1_CTRL's TRIG_PRIORITY field.
     *
     * External trigger priority, 7 is highest priority, while 0 is lowest
     */
    inline uint8_t get_TRIG1_CTRL_TRIG_PRIORITY() volatile
    {
        return (TRIG1_CTRL >> 12u) & 0b111u;
    }

    /**
     * Set TRIG1_CTRL's TRIG_PRIORITY field.
     *
     * External trigger priority, 7 is highest priority, while 0 is lowest
     */
    inline void set_TRIG1_CTRL_TRIG_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = TRIG1_CTRL;

        curr &= ~(0b111u << 12u);
        curr |= (value & 0b111u) << 12u;

        TRIG1_CTRL = curr;
    }

    /**
     * Get TRIG1_CTRL's TRIG_CHAIN field.
     *
     * The number of segments inside the trigger chain of TRIGa.
     */
    inline ADC_ETC_TRIG1_CTRL_TRIG_CHAIN get_TRIG1_CTRL_TRIG_CHAIN() volatile
    {
        return ADC_ETC_TRIG1_CTRL_TRIG_CHAIN((TRIG1_CTRL >> 8u) & 0b111u);
    }

    /**
     * Set TRIG1_CTRL's TRIG_CHAIN field.
     *
     * The number of segments inside the trigger chain of TRIGa.
     */
    inline void set_TRIG1_CTRL_TRIG_CHAIN(
        ADC_ETC_TRIG1_CTRL_TRIG_CHAIN value) volatile
    {
        uint32_t curr = TRIG1_CTRL;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TRIG1_CTRL = curr;
    }

    /**
     * Get TRIG1_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline bool get_TRIG1_CTRL_TRIG_MODE() volatile
    {
        return TRIG1_CTRL & (1u << 4u);
    }

    /**
     * Set TRIG1_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void set_TRIG1_CTRL_TRIG_MODE() volatile
    {
        TRIG1_CTRL |= 1u << 4u;
    }

    /**
     * Clear TRIG1_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void clear_TRIG1_CTRL_TRIG_MODE() volatile
    {
        TRIG1_CTRL &= ~(1u << 4u);
    }

    /**
     * Toggle TRIG1_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void toggle_TRIG1_CTRL_TRIG_MODE() volatile
    {
        TRIG1_CTRL ^= 1u << 4u;
    }

    /**
     * Get TRIG1_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline bool get_TRIG1_CTRL_SW_TRIG() volatile
    {
        return TRIG1_CTRL & (1u << 0u);
    }

    /**
     * Set TRIG1_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void set_TRIG1_CTRL_SW_TRIG() volatile
    {
        TRIG1_CTRL |= 1u << 0u;
    }

    /**
     * Clear TRIG1_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void clear_TRIG1_CTRL_SW_TRIG() volatile
    {
        TRIG1_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle TRIG1_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void toggle_TRIG1_CTRL_SW_TRIG() volatile
    {
        TRIG1_CTRL ^= 1u << 0u;
    }

    /**
     * Get all of TRIG1_CTRL's bit fields.
     *
     * (read-write) ETC_TRIG Control Register
     */
    inline void get_TRIG1_CTRL(ADC_ETC_TRIG1_CTRL_CHAINx_DONE &CHAINx_DONE,
                               bool &SYNC_MODE, uint8_t &TRIG_PRIORITY,
                               ADC_ETC_TRIG1_CTRL_TRIG_CHAIN &TRIG_CHAIN,
                               bool &TRIG_MODE, bool &SW_TRIG) volatile
    {
        uint32_t curr = TRIG1_CTRL;

        CHAINx_DONE =
            ADC_ETC_TRIG1_CTRL_CHAINx_DONE((curr >> 24u) & 0b11111111u);
        SYNC_MODE = curr & (1u << 16u);
        TRIG_PRIORITY = (curr >> 12u) & 0b111u;
        TRIG_CHAIN = ADC_ETC_TRIG1_CTRL_TRIG_CHAIN((curr >> 8u) & 0b111u);
        TRIG_MODE = curr & (1u << 4u);
        SW_TRIG = curr & (1u << 0u);
    }

    /**
     * Set all of TRIG1_CTRL's bit fields.
     *
     * (read-write) ETC_TRIG Control Register
     */
    inline void set_TRIG1_CTRL(ADC_ETC_TRIG1_CTRL_CHAINx_DONE CHAINx_DONE,
                               bool SYNC_MODE, uint8_t TRIG_PRIORITY,
                               ADC_ETC_TRIG1_CTRL_TRIG_CHAIN TRIG_CHAIN,
                               bool TRIG_MODE, bool SW_TRIG) volatile
    {
        uint32_t curr = TRIG1_CTRL;

        curr &= ~(0b11111111u << 24u);
        curr |= (std::to_underlying(CHAINx_DONE) & 0b11111111u) << 24u;
        curr &= ~(0b1u << 16u);
        curr |= (SYNC_MODE & 0b1u) << 16u;
        curr &= ~(0b111u << 12u);
        curr |= (TRIG_PRIORITY & 0b111u) << 12u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(TRIG_CHAIN) & 0b111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (TRIG_MODE & 0b1u) << 4u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG & 0b1u) << 0u;

        TRIG1_CTRL = curr;
    }

    /**
     * Get TRIG1_COUNTER's SAMPLE_INTERVAL field.
     *
     * TRIGGER sampling interval counter
     */
    inline uint16_t get_TRIG1_COUNTER_SAMPLE_INTERVAL() volatile
    {
        return (TRIG1_COUNTER >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set TRIG1_COUNTER's SAMPLE_INTERVAL field.
     *
     * TRIGGER sampling interval counter
     */
    inline void set_TRIG1_COUNTER_SAMPLE_INTERVAL(uint16_t value) volatile
    {
        uint32_t curr = TRIG1_COUNTER;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        TRIG1_COUNTER = curr;
    }

    /**
     * Get TRIG1_COUNTER's INIT_DELAY field.
     *
     * TRIGGER initial delay counter. Initial_delay =
     * (INIT_DELAY+1)*(PRE_DIVIDER+1)*ipg_clk
     */
    inline uint16_t get_TRIG1_COUNTER_INIT_DELAY() volatile
    {
        return (TRIG1_COUNTER >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TRIG1_COUNTER's INIT_DELAY field.
     *
     * TRIGGER initial delay counter. Initial_delay =
     * (INIT_DELAY+1)*(PRE_DIVIDER+1)*ipg_clk
     */
    inline void set_TRIG1_COUNTER_INIT_DELAY(uint16_t value) volatile
    {
        uint32_t curr = TRIG1_COUNTER;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TRIG1_COUNTER = curr;
    }

    /**
     * Get all of TRIG1_COUNTER's bit fields.
     *
     * (read-write) ETC_TRIG Counter Register
     */
    inline void get_TRIG1_COUNTER(uint16_t &SAMPLE_INTERVAL,
                                  uint16_t &INIT_DELAY) volatile
    {
        uint32_t curr = TRIG1_COUNTER;

        SAMPLE_INTERVAL = (curr >> 16u) & 0b1111111111111111u;
        INIT_DELAY = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of TRIG1_COUNTER's bit fields.
     *
     * (read-write) ETC_TRIG Counter Register
     */
    inline void set_TRIG1_COUNTER(uint16_t SAMPLE_INTERVAL,
                                  uint16_t INIT_DELAY) volatile
    {
        uint32_t curr = TRIG1_COUNTER;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (SAMPLE_INTERVAL & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (INIT_DELAY & 0b1111111111111111u) << 0u;

        TRIG1_COUNTER = curr;
    }

    /**
     * Get TRIG1_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline bool get_TRIG1_CHAIN_1_0_IE1_EN() volatile
    {
        return TRIG1_CHAIN_1_0 & (1u << 31u);
    }

    /**
     * Set TRIG1_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void set_TRIG1_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG1_CHAIN_1_0 |= 1u << 31u;
    }

    /**
     * Clear TRIG1_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void clear_TRIG1_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG1_CHAIN_1_0 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG1_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void toggle_TRIG1_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG1_CHAIN_1_0 ^= 1u << 31u;
    }

    /**
     * Get TRIG1_CHAIN_1_0's IE1 field.
     *
     * Segment 1 interrupt enable. (This bit field is meaningful only when
     * IE1_EN is set)
     */
    inline ADC_ETC_TRIG1_CHAIN_1_0_IE1 get_TRIG1_CHAIN_1_0_IE1() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_1_0_IE1((TRIG1_CHAIN_1_0 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG1_CHAIN_1_0's IE1 field.
     *
     * Segment 1 interrupt enable. (This bit field is meaningful only when
     * IE1_EN is set)
     */
    inline void set_TRIG1_CHAIN_1_0_IE1(
        ADC_ETC_TRIG1_CHAIN_1_0_IE1 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_1_0;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG1_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG1_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline bool get_TRIG1_CHAIN_1_0_B2B1() volatile
    {
        return TRIG1_CHAIN_1_0 & (1u << 28u);
    }

    /**
     * Set TRIG1_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void set_TRIG1_CHAIN_1_0_B2B1() volatile
    {
        TRIG1_CHAIN_1_0 |= 1u << 28u;
    }

    /**
     * Clear TRIG1_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void clear_TRIG1_CHAIN_1_0_B2B1() volatile
    {
        TRIG1_CHAIN_1_0 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG1_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void toggle_TRIG1_CHAIN_1_0_B2B1() volatile
    {
        TRIG1_CHAIN_1_0 ^= 1u << 28u;
    }

    /**
     * Get TRIG1_CHAIN_1_0's HWTS1 field.
     *
     * Segment 1 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG1_CHAIN_1_0_HWTS1 get_TRIG1_CHAIN_1_0_HWTS1() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_1_0_HWTS1((TRIG1_CHAIN_1_0 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG1_CHAIN_1_0's HWTS1 field.
     *
     * Segment 1 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG1_CHAIN_1_0_HWTS1(
        ADC_ETC_TRIG1_CHAIN_1_0_HWTS1 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_1_0;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG1_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG1_CHAIN_1_0's CSEL1 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG1_CHAIN_1_0_CSEL1 get_TRIG1_CHAIN_1_0_CSEL1() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_1_0_CSEL1((TRIG1_CHAIN_1_0 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG1_CHAIN_1_0's CSEL1 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG1_CHAIN_1_0_CSEL1(
        ADC_ETC_TRIG1_CHAIN_1_0_CSEL1 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_1_0;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG1_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG1_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline bool get_TRIG1_CHAIN_1_0_IE0_EN() volatile
    {
        return TRIG1_CHAIN_1_0 & (1u << 15u);
    }

    /**
     * Set TRIG1_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void set_TRIG1_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG1_CHAIN_1_0 |= 1u << 15u;
    }

    /**
     * Clear TRIG1_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void clear_TRIG1_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG1_CHAIN_1_0 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG1_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void toggle_TRIG1_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG1_CHAIN_1_0 ^= 1u << 15u;
    }

    /**
     * Get TRIG1_CHAIN_1_0's IE0 field.
     *
     * Segment 0 interrupt enable. (This bit field is meaningful only when
     * IE0_EN is set)
     */
    inline ADC_ETC_TRIG1_CHAIN_1_0_IE0 get_TRIG1_CHAIN_1_0_IE0() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_1_0_IE0((TRIG1_CHAIN_1_0 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG1_CHAIN_1_0's IE0 field.
     *
     * Segment 0 interrupt enable. (This bit field is meaningful only when
     * IE0_EN is set)
     */
    inline void set_TRIG1_CHAIN_1_0_IE0(
        ADC_ETC_TRIG1_CHAIN_1_0_IE0 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_1_0;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG1_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG1_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline bool get_TRIG1_CHAIN_1_0_B2B0() volatile
    {
        return TRIG1_CHAIN_1_0 & (1u << 12u);
    }

    /**
     * Set TRIG1_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void set_TRIG1_CHAIN_1_0_B2B0() volatile
    {
        TRIG1_CHAIN_1_0 |= 1u << 12u;
    }

    /**
     * Clear TRIG1_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void clear_TRIG1_CHAIN_1_0_B2B0() volatile
    {
        TRIG1_CHAIN_1_0 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG1_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void toggle_TRIG1_CHAIN_1_0_B2B0() volatile
    {
        TRIG1_CHAIN_1_0 ^= 1u << 12u;
    }

    /**
     * Get TRIG1_CHAIN_1_0's HWTS0 field.
     *
     * Segment 0 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG1_CHAIN_1_0_HWTS0 get_TRIG1_CHAIN_1_0_HWTS0() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_1_0_HWTS0((TRIG1_CHAIN_1_0 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG1_CHAIN_1_0's HWTS0 field.
     *
     * Segment 0 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG1_CHAIN_1_0_HWTS0(
        ADC_ETC_TRIG1_CHAIN_1_0_HWTS0 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_1_0;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG1_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG1_CHAIN_1_0's CSEL0 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG1_CHAIN_1_0_CSEL0 get_TRIG1_CHAIN_1_0_CSEL0() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_1_0_CSEL0((TRIG1_CHAIN_1_0 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG1_CHAIN_1_0's CSEL0 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG1_CHAIN_1_0_CSEL0(
        ADC_ETC_TRIG1_CHAIN_1_0_CSEL0 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_1_0;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG1_CHAIN_1_0 = curr;
    }

    /**
     * Get all of TRIG1_CHAIN_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Chain 0/1 Register
     */
    inline void get_TRIG1_CHAIN_1_0(
        bool &IE1_EN, ADC_ETC_TRIG1_CHAIN_1_0_IE1 &IE1, bool &B2B1,
        ADC_ETC_TRIG1_CHAIN_1_0_HWTS1 &HWTS1,
        ADC_ETC_TRIG1_CHAIN_1_0_CSEL1 &CSEL1, bool &IE0_EN,
        ADC_ETC_TRIG1_CHAIN_1_0_IE0 &IE0, bool &B2B0,
        ADC_ETC_TRIG1_CHAIN_1_0_HWTS0 &HWTS0,
        ADC_ETC_TRIG1_CHAIN_1_0_CSEL0 &CSEL0) volatile
    {
        uint32_t curr = TRIG1_CHAIN_1_0;

        IE1_EN = curr & (1u << 31u);
        IE1 = ADC_ETC_TRIG1_CHAIN_1_0_IE1((curr >> 29u) & 0b11u);
        B2B1 = curr & (1u << 28u);
        HWTS1 = ADC_ETC_TRIG1_CHAIN_1_0_HWTS1((curr >> 20u) & 0b11111111u);
        CSEL1 = ADC_ETC_TRIG1_CHAIN_1_0_CSEL1((curr >> 16u) & 0b1111u);
        IE0_EN = curr & (1u << 15u);
        IE0 = ADC_ETC_TRIG1_CHAIN_1_0_IE0((curr >> 13u) & 0b11u);
        B2B0 = curr & (1u << 12u);
        HWTS0 = ADC_ETC_TRIG1_CHAIN_1_0_HWTS0((curr >> 4u) & 0b11111111u);
        CSEL0 = ADC_ETC_TRIG1_CHAIN_1_0_CSEL0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG1_CHAIN_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Chain 0/1 Register
     */
    inline void set_TRIG1_CHAIN_1_0(
        bool IE1_EN, ADC_ETC_TRIG1_CHAIN_1_0_IE1 IE1, bool B2B1,
        ADC_ETC_TRIG1_CHAIN_1_0_HWTS1 HWTS1,
        ADC_ETC_TRIG1_CHAIN_1_0_CSEL1 CSEL1, bool IE0_EN,
        ADC_ETC_TRIG1_CHAIN_1_0_IE0 IE0, bool B2B0,
        ADC_ETC_TRIG1_CHAIN_1_0_HWTS0 HWTS0,
        ADC_ETC_TRIG1_CHAIN_1_0_CSEL0 CSEL0) volatile
    {
        uint32_t curr = TRIG1_CHAIN_1_0;

        curr &= ~(0b1u << 31u);
        curr |= (IE1_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE1) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B1 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS1) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL1) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE0_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE0) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B0 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS0) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL0) & 0b1111u) << 0u;

        TRIG1_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG1_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline bool get_TRIG1_CHAIN_3_2_IE3_EN() volatile
    {
        return TRIG1_CHAIN_3_2 & (1u << 31u);
    }

    /**
     * Set TRIG1_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void set_TRIG1_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG1_CHAIN_3_2 |= 1u << 31u;
    }

    /**
     * Clear TRIG1_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void clear_TRIG1_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG1_CHAIN_3_2 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG1_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void toggle_TRIG1_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG1_CHAIN_3_2 ^= 1u << 31u;
    }

    /**
     * Get TRIG1_CHAIN_3_2's IE3 field.
     *
     * Segment 3 interrupt enable. (This bit field is meaningful only when
     * IE3_EN is set)
     */
    inline ADC_ETC_TRIG1_CHAIN_3_2_IE3 get_TRIG1_CHAIN_3_2_IE3() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_3_2_IE3((TRIG1_CHAIN_3_2 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG1_CHAIN_3_2's IE3 field.
     *
     * Segment 3 interrupt enable. (This bit field is meaningful only when
     * IE3_EN is set)
     */
    inline void set_TRIG1_CHAIN_3_2_IE3(
        ADC_ETC_TRIG1_CHAIN_3_2_IE3 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_3_2;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG1_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG1_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline bool get_TRIG1_CHAIN_3_2_B2B3() volatile
    {
        return TRIG1_CHAIN_3_2 & (1u << 28u);
    }

    /**
     * Set TRIG1_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void set_TRIG1_CHAIN_3_2_B2B3() volatile
    {
        TRIG1_CHAIN_3_2 |= 1u << 28u;
    }

    /**
     * Clear TRIG1_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void clear_TRIG1_CHAIN_3_2_B2B3() volatile
    {
        TRIG1_CHAIN_3_2 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG1_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void toggle_TRIG1_CHAIN_3_2_B2B3() volatile
    {
        TRIG1_CHAIN_3_2 ^= 1u << 28u;
    }

    /**
     * Get TRIG1_CHAIN_3_2's HWTS3 field.
     *
     * Segment 3 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG1_CHAIN_3_2_HWTS3 get_TRIG1_CHAIN_3_2_HWTS3() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_3_2_HWTS3((TRIG1_CHAIN_3_2 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG1_CHAIN_3_2's HWTS3 field.
     *
     * Segment 3 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG1_CHAIN_3_2_HWTS3(
        ADC_ETC_TRIG1_CHAIN_3_2_HWTS3 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_3_2;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG1_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG1_CHAIN_3_2's CSEL3 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG1_CHAIN_3_2_CSEL3 get_TRIG1_CHAIN_3_2_CSEL3() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_3_2_CSEL3((TRIG1_CHAIN_3_2 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG1_CHAIN_3_2's CSEL3 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG1_CHAIN_3_2_CSEL3(
        ADC_ETC_TRIG1_CHAIN_3_2_CSEL3 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_3_2;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG1_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG1_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline bool get_TRIG1_CHAIN_3_2_IE2_EN() volatile
    {
        return TRIG1_CHAIN_3_2 & (1u << 15u);
    }

    /**
     * Set TRIG1_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void set_TRIG1_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG1_CHAIN_3_2 |= 1u << 15u;
    }

    /**
     * Clear TRIG1_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void clear_TRIG1_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG1_CHAIN_3_2 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG1_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void toggle_TRIG1_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG1_CHAIN_3_2 ^= 1u << 15u;
    }

    /**
     * Get TRIG1_CHAIN_3_2's IE2 field.
     *
     * Segment 2 interrupt enable. (This bit field is meaningful only when
     * IE2_EN is set)
     */
    inline ADC_ETC_TRIG1_CHAIN_3_2_IE2 get_TRIG1_CHAIN_3_2_IE2() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_3_2_IE2((TRIG1_CHAIN_3_2 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG1_CHAIN_3_2's IE2 field.
     *
     * Segment 2 interrupt enable. (This bit field is meaningful only when
     * IE2_EN is set)
     */
    inline void set_TRIG1_CHAIN_3_2_IE2(
        ADC_ETC_TRIG1_CHAIN_3_2_IE2 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_3_2;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG1_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG1_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline bool get_TRIG1_CHAIN_3_2_B2B2() volatile
    {
        return TRIG1_CHAIN_3_2 & (1u << 12u);
    }

    /**
     * Set TRIG1_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void set_TRIG1_CHAIN_3_2_B2B2() volatile
    {
        TRIG1_CHAIN_3_2 |= 1u << 12u;
    }

    /**
     * Clear TRIG1_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void clear_TRIG1_CHAIN_3_2_B2B2() volatile
    {
        TRIG1_CHAIN_3_2 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG1_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void toggle_TRIG1_CHAIN_3_2_B2B2() volatile
    {
        TRIG1_CHAIN_3_2 ^= 1u << 12u;
    }

    /**
     * Get TRIG1_CHAIN_3_2's HWTS2 field.
     *
     * Segment 2 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG1_CHAIN_3_2_HWTS2 get_TRIG1_CHAIN_3_2_HWTS2() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_3_2_HWTS2((TRIG1_CHAIN_3_2 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG1_CHAIN_3_2's HWTS2 field.
     *
     * Segment 2 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG1_CHAIN_3_2_HWTS2(
        ADC_ETC_TRIG1_CHAIN_3_2_HWTS2 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_3_2;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG1_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG1_CHAIN_3_2's CSEL2 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG1_CHAIN_3_2_CSEL2 get_TRIG1_CHAIN_3_2_CSEL2() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_3_2_CSEL2((TRIG1_CHAIN_3_2 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG1_CHAIN_3_2's CSEL2 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG1_CHAIN_3_2_CSEL2(
        ADC_ETC_TRIG1_CHAIN_3_2_CSEL2 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_3_2;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG1_CHAIN_3_2 = curr;
    }

    /**
     * Get all of TRIG1_CHAIN_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Chain 2/3 Register
     */
    inline void get_TRIG1_CHAIN_3_2(
        bool &IE3_EN, ADC_ETC_TRIG1_CHAIN_3_2_IE3 &IE3, bool &B2B3,
        ADC_ETC_TRIG1_CHAIN_3_2_HWTS3 &HWTS3,
        ADC_ETC_TRIG1_CHAIN_3_2_CSEL3 &CSEL3, bool &IE2_EN,
        ADC_ETC_TRIG1_CHAIN_3_2_IE2 &IE2, bool &B2B2,
        ADC_ETC_TRIG1_CHAIN_3_2_HWTS2 &HWTS2,
        ADC_ETC_TRIG1_CHAIN_3_2_CSEL2 &CSEL2) volatile
    {
        uint32_t curr = TRIG1_CHAIN_3_2;

        IE3_EN = curr & (1u << 31u);
        IE3 = ADC_ETC_TRIG1_CHAIN_3_2_IE3((curr >> 29u) & 0b11u);
        B2B3 = curr & (1u << 28u);
        HWTS3 = ADC_ETC_TRIG1_CHAIN_3_2_HWTS3((curr >> 20u) & 0b11111111u);
        CSEL3 = ADC_ETC_TRIG1_CHAIN_3_2_CSEL3((curr >> 16u) & 0b1111u);
        IE2_EN = curr & (1u << 15u);
        IE2 = ADC_ETC_TRIG1_CHAIN_3_2_IE2((curr >> 13u) & 0b11u);
        B2B2 = curr & (1u << 12u);
        HWTS2 = ADC_ETC_TRIG1_CHAIN_3_2_HWTS2((curr >> 4u) & 0b11111111u);
        CSEL2 = ADC_ETC_TRIG1_CHAIN_3_2_CSEL2((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG1_CHAIN_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Chain 2/3 Register
     */
    inline void set_TRIG1_CHAIN_3_2(
        bool IE3_EN, ADC_ETC_TRIG1_CHAIN_3_2_IE3 IE3, bool B2B3,
        ADC_ETC_TRIG1_CHAIN_3_2_HWTS3 HWTS3,
        ADC_ETC_TRIG1_CHAIN_3_2_CSEL3 CSEL3, bool IE2_EN,
        ADC_ETC_TRIG1_CHAIN_3_2_IE2 IE2, bool B2B2,
        ADC_ETC_TRIG1_CHAIN_3_2_HWTS2 HWTS2,
        ADC_ETC_TRIG1_CHAIN_3_2_CSEL2 CSEL2) volatile
    {
        uint32_t curr = TRIG1_CHAIN_3_2;

        curr &= ~(0b1u << 31u);
        curr |= (IE3_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE3) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B3 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS3) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL3) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE2_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE2) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B2 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS2) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL2) & 0b1111u) << 0u;

        TRIG1_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG1_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline bool get_TRIG1_CHAIN_5_4_IE5_EN() volatile
    {
        return TRIG1_CHAIN_5_4 & (1u << 31u);
    }

    /**
     * Set TRIG1_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void set_TRIG1_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG1_CHAIN_5_4 |= 1u << 31u;
    }

    /**
     * Clear TRIG1_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void clear_TRIG1_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG1_CHAIN_5_4 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG1_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void toggle_TRIG1_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG1_CHAIN_5_4 ^= 1u << 31u;
    }

    /**
     * Get TRIG1_CHAIN_5_4's IE5 field.
     *
     * Segment 5 interrupt enable. (This bit field is meaningful only when
     * IE5_EN is set)
     */
    inline ADC_ETC_TRIG1_CHAIN_5_4_IE5 get_TRIG1_CHAIN_5_4_IE5() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_5_4_IE5((TRIG1_CHAIN_5_4 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG1_CHAIN_5_4's IE5 field.
     *
     * Segment 5 interrupt enable. (This bit field is meaningful only when
     * IE5_EN is set)
     */
    inline void set_TRIG1_CHAIN_5_4_IE5(
        ADC_ETC_TRIG1_CHAIN_5_4_IE5 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_5_4;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG1_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG1_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline bool get_TRIG1_CHAIN_5_4_B2B5() volatile
    {
        return TRIG1_CHAIN_5_4 & (1u << 28u);
    }

    /**
     * Set TRIG1_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void set_TRIG1_CHAIN_5_4_B2B5() volatile
    {
        TRIG1_CHAIN_5_4 |= 1u << 28u;
    }

    /**
     * Clear TRIG1_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void clear_TRIG1_CHAIN_5_4_B2B5() volatile
    {
        TRIG1_CHAIN_5_4 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG1_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void toggle_TRIG1_CHAIN_5_4_B2B5() volatile
    {
        TRIG1_CHAIN_5_4 ^= 1u << 28u;
    }

    /**
     * Get TRIG1_CHAIN_5_4's HWTS5 field.
     *
     * Segment 5 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG1_CHAIN_5_4_HWTS5 get_TRIG1_CHAIN_5_4_HWTS5() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_5_4_HWTS5((TRIG1_CHAIN_5_4 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG1_CHAIN_5_4's HWTS5 field.
     *
     * Segment 5 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG1_CHAIN_5_4_HWTS5(
        ADC_ETC_TRIG1_CHAIN_5_4_HWTS5 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_5_4;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG1_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG1_CHAIN_5_4's CSEL5 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG1_CHAIN_5_4_CSEL5 get_TRIG1_CHAIN_5_4_CSEL5() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_5_4_CSEL5((TRIG1_CHAIN_5_4 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG1_CHAIN_5_4's CSEL5 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG1_CHAIN_5_4_CSEL5(
        ADC_ETC_TRIG1_CHAIN_5_4_CSEL5 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_5_4;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG1_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG1_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline bool get_TRIG1_CHAIN_5_4_IE4_EN() volatile
    {
        return TRIG1_CHAIN_5_4 & (1u << 15u);
    }

    /**
     * Set TRIG1_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void set_TRIG1_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG1_CHAIN_5_4 |= 1u << 15u;
    }

    /**
     * Clear TRIG1_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void clear_TRIG1_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG1_CHAIN_5_4 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG1_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void toggle_TRIG1_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG1_CHAIN_5_4 ^= 1u << 15u;
    }

    /**
     * Get TRIG1_CHAIN_5_4's IE4 field.
     *
     * Segment 4 interrupt enable. (This bit field is meaningful only when
     * IE4_EN is set)
     */
    inline ADC_ETC_TRIG1_CHAIN_5_4_IE4 get_TRIG1_CHAIN_5_4_IE4() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_5_4_IE4((TRIG1_CHAIN_5_4 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG1_CHAIN_5_4's IE4 field.
     *
     * Segment 4 interrupt enable. (This bit field is meaningful only when
     * IE4_EN is set)
     */
    inline void set_TRIG1_CHAIN_5_4_IE4(
        ADC_ETC_TRIG1_CHAIN_5_4_IE4 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_5_4;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG1_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG1_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline bool get_TRIG1_CHAIN_5_4_B2B4() volatile
    {
        return TRIG1_CHAIN_5_4 & (1u << 12u);
    }

    /**
     * Set TRIG1_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void set_TRIG1_CHAIN_5_4_B2B4() volatile
    {
        TRIG1_CHAIN_5_4 |= 1u << 12u;
    }

    /**
     * Clear TRIG1_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void clear_TRIG1_CHAIN_5_4_B2B4() volatile
    {
        TRIG1_CHAIN_5_4 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG1_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void toggle_TRIG1_CHAIN_5_4_B2B4() volatile
    {
        TRIG1_CHAIN_5_4 ^= 1u << 12u;
    }

    /**
     * Get TRIG1_CHAIN_5_4's HWTS4 field.
     *
     * Segment 4 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG1_CHAIN_5_4_HWTS4 get_TRIG1_CHAIN_5_4_HWTS4() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_5_4_HWTS4((TRIG1_CHAIN_5_4 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG1_CHAIN_5_4's HWTS4 field.
     *
     * Segment 4 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG1_CHAIN_5_4_HWTS4(
        ADC_ETC_TRIG1_CHAIN_5_4_HWTS4 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_5_4;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG1_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG1_CHAIN_5_4's CSEL4 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG1_CHAIN_5_4_CSEL4 get_TRIG1_CHAIN_5_4_CSEL4() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_5_4_CSEL4((TRIG1_CHAIN_5_4 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG1_CHAIN_5_4's CSEL4 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG1_CHAIN_5_4_CSEL4(
        ADC_ETC_TRIG1_CHAIN_5_4_CSEL4 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_5_4;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG1_CHAIN_5_4 = curr;
    }

    /**
     * Get all of TRIG1_CHAIN_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Chain 4/5 Register
     */
    inline void get_TRIG1_CHAIN_5_4(
        bool &IE5_EN, ADC_ETC_TRIG1_CHAIN_5_4_IE5 &IE5, bool &B2B5,
        ADC_ETC_TRIG1_CHAIN_5_4_HWTS5 &HWTS5,
        ADC_ETC_TRIG1_CHAIN_5_4_CSEL5 &CSEL5, bool &IE4_EN,
        ADC_ETC_TRIG1_CHAIN_5_4_IE4 &IE4, bool &B2B4,
        ADC_ETC_TRIG1_CHAIN_5_4_HWTS4 &HWTS4,
        ADC_ETC_TRIG1_CHAIN_5_4_CSEL4 &CSEL4) volatile
    {
        uint32_t curr = TRIG1_CHAIN_5_4;

        IE5_EN = curr & (1u << 31u);
        IE5 = ADC_ETC_TRIG1_CHAIN_5_4_IE5((curr >> 29u) & 0b11u);
        B2B5 = curr & (1u << 28u);
        HWTS5 = ADC_ETC_TRIG1_CHAIN_5_4_HWTS5((curr >> 20u) & 0b11111111u);
        CSEL5 = ADC_ETC_TRIG1_CHAIN_5_4_CSEL5((curr >> 16u) & 0b1111u);
        IE4_EN = curr & (1u << 15u);
        IE4 = ADC_ETC_TRIG1_CHAIN_5_4_IE4((curr >> 13u) & 0b11u);
        B2B4 = curr & (1u << 12u);
        HWTS4 = ADC_ETC_TRIG1_CHAIN_5_4_HWTS4((curr >> 4u) & 0b11111111u);
        CSEL4 = ADC_ETC_TRIG1_CHAIN_5_4_CSEL4((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG1_CHAIN_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Chain 4/5 Register
     */
    inline void set_TRIG1_CHAIN_5_4(
        bool IE5_EN, ADC_ETC_TRIG1_CHAIN_5_4_IE5 IE5, bool B2B5,
        ADC_ETC_TRIG1_CHAIN_5_4_HWTS5 HWTS5,
        ADC_ETC_TRIG1_CHAIN_5_4_CSEL5 CSEL5, bool IE4_EN,
        ADC_ETC_TRIG1_CHAIN_5_4_IE4 IE4, bool B2B4,
        ADC_ETC_TRIG1_CHAIN_5_4_HWTS4 HWTS4,
        ADC_ETC_TRIG1_CHAIN_5_4_CSEL4 CSEL4) volatile
    {
        uint32_t curr = TRIG1_CHAIN_5_4;

        curr &= ~(0b1u << 31u);
        curr |= (IE5_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE5) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B5 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS5) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL5) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE4_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE4) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B4 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS4) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL4) & 0b1111u) << 0u;

        TRIG1_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG1_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline bool get_TRIG1_CHAIN_7_6_IE7_EN() volatile
    {
        return TRIG1_CHAIN_7_6 & (1u << 31u);
    }

    /**
     * Set TRIG1_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void set_TRIG1_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG1_CHAIN_7_6 |= 1u << 31u;
    }

    /**
     * Clear TRIG1_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void clear_TRIG1_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG1_CHAIN_7_6 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG1_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void toggle_TRIG1_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG1_CHAIN_7_6 ^= 1u << 31u;
    }

    /**
     * Get TRIG1_CHAIN_7_6's IE7 field.
     *
     * Segment 7 interrupt enable. (This bit field is meaningful only when
     * IE7_EN is set)
     */
    inline ADC_ETC_TRIG1_CHAIN_7_6_IE7 get_TRIG1_CHAIN_7_6_IE7() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_7_6_IE7((TRIG1_CHAIN_7_6 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG1_CHAIN_7_6's IE7 field.
     *
     * Segment 7 interrupt enable. (This bit field is meaningful only when
     * IE7_EN is set)
     */
    inline void set_TRIG1_CHAIN_7_6_IE7(
        ADC_ETC_TRIG1_CHAIN_7_6_IE7 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_7_6;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG1_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG1_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline bool get_TRIG1_CHAIN_7_6_B2B7() volatile
    {
        return TRIG1_CHAIN_7_6 & (1u << 28u);
    }

    /**
     * Set TRIG1_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void set_TRIG1_CHAIN_7_6_B2B7() volatile
    {
        TRIG1_CHAIN_7_6 |= 1u << 28u;
    }

    /**
     * Clear TRIG1_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void clear_TRIG1_CHAIN_7_6_B2B7() volatile
    {
        TRIG1_CHAIN_7_6 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG1_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void toggle_TRIG1_CHAIN_7_6_B2B7() volatile
    {
        TRIG1_CHAIN_7_6 ^= 1u << 28u;
    }

    /**
     * Get TRIG1_CHAIN_7_6's HWTS7 field.
     *
     * Segment 7 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG1_CHAIN_7_6_HWTS7 get_TRIG1_CHAIN_7_6_HWTS7() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_7_6_HWTS7((TRIG1_CHAIN_7_6 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG1_CHAIN_7_6's HWTS7 field.
     *
     * Segment 7 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG1_CHAIN_7_6_HWTS7(
        ADC_ETC_TRIG1_CHAIN_7_6_HWTS7 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_7_6;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG1_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG1_CHAIN_7_6's CSEL7 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG1_CHAIN_7_6_CSEL7 get_TRIG1_CHAIN_7_6_CSEL7() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_7_6_CSEL7((TRIG1_CHAIN_7_6 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG1_CHAIN_7_6's CSEL7 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG1_CHAIN_7_6_CSEL7(
        ADC_ETC_TRIG1_CHAIN_7_6_CSEL7 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_7_6;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG1_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG1_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline bool get_TRIG1_CHAIN_7_6_IE6_EN() volatile
    {
        return TRIG1_CHAIN_7_6 & (1u << 15u);
    }

    /**
     * Set TRIG1_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void set_TRIG1_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG1_CHAIN_7_6 |= 1u << 15u;
    }

    /**
     * Clear TRIG1_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void clear_TRIG1_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG1_CHAIN_7_6 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG1_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void toggle_TRIG1_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG1_CHAIN_7_6 ^= 1u << 15u;
    }

    /**
     * Get TRIG1_CHAIN_7_6's IE6 field.
     *
     * Segment 6 interrupt enable. (This bit field is meaningful only when
     * IE6_EN is set)
     */
    inline ADC_ETC_TRIG1_CHAIN_7_6_IE6 get_TRIG1_CHAIN_7_6_IE6() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_7_6_IE6((TRIG1_CHAIN_7_6 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG1_CHAIN_7_6's IE6 field.
     *
     * Segment 6 interrupt enable. (This bit field is meaningful only when
     * IE6_EN is set)
     */
    inline void set_TRIG1_CHAIN_7_6_IE6(
        ADC_ETC_TRIG1_CHAIN_7_6_IE6 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_7_6;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG1_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG1_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline bool get_TRIG1_CHAIN_7_6_B2B6() volatile
    {
        return TRIG1_CHAIN_7_6 & (1u << 12u);
    }

    /**
     * Set TRIG1_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void set_TRIG1_CHAIN_7_6_B2B6() volatile
    {
        TRIG1_CHAIN_7_6 |= 1u << 12u;
    }

    /**
     * Clear TRIG1_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void clear_TRIG1_CHAIN_7_6_B2B6() volatile
    {
        TRIG1_CHAIN_7_6 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG1_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void toggle_TRIG1_CHAIN_7_6_B2B6() volatile
    {
        TRIG1_CHAIN_7_6 ^= 1u << 12u;
    }

    /**
     * Get TRIG1_CHAIN_7_6's HWTS6 field.
     *
     * Segment 6 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG1_CHAIN_7_6_HWTS6 get_TRIG1_CHAIN_7_6_HWTS6() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_7_6_HWTS6((TRIG1_CHAIN_7_6 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG1_CHAIN_7_6's HWTS6 field.
     *
     * Segment 6 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG1_CHAIN_7_6_HWTS6(
        ADC_ETC_TRIG1_CHAIN_7_6_HWTS6 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_7_6;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG1_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG1_CHAIN_7_6's CSEL6 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG1_CHAIN_7_6_CSEL6 get_TRIG1_CHAIN_7_6_CSEL6() volatile
    {
        return ADC_ETC_TRIG1_CHAIN_7_6_CSEL6((TRIG1_CHAIN_7_6 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG1_CHAIN_7_6's CSEL6 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG1_CHAIN_7_6_CSEL6(
        ADC_ETC_TRIG1_CHAIN_7_6_CSEL6 value) volatile
    {
        uint32_t curr = TRIG1_CHAIN_7_6;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG1_CHAIN_7_6 = curr;
    }

    /**
     * Get all of TRIG1_CHAIN_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Chain 6/7 Register
     */
    inline void get_TRIG1_CHAIN_7_6(
        bool &IE7_EN, ADC_ETC_TRIG1_CHAIN_7_6_IE7 &IE7, bool &B2B7,
        ADC_ETC_TRIG1_CHAIN_7_6_HWTS7 &HWTS7,
        ADC_ETC_TRIG1_CHAIN_7_6_CSEL7 &CSEL7, bool &IE6_EN,
        ADC_ETC_TRIG1_CHAIN_7_6_IE6 &IE6, bool &B2B6,
        ADC_ETC_TRIG1_CHAIN_7_6_HWTS6 &HWTS6,
        ADC_ETC_TRIG1_CHAIN_7_6_CSEL6 &CSEL6) volatile
    {
        uint32_t curr = TRIG1_CHAIN_7_6;

        IE7_EN = curr & (1u << 31u);
        IE7 = ADC_ETC_TRIG1_CHAIN_7_6_IE7((curr >> 29u) & 0b11u);
        B2B7 = curr & (1u << 28u);
        HWTS7 = ADC_ETC_TRIG1_CHAIN_7_6_HWTS7((curr >> 20u) & 0b11111111u);
        CSEL7 = ADC_ETC_TRIG1_CHAIN_7_6_CSEL7((curr >> 16u) & 0b1111u);
        IE6_EN = curr & (1u << 15u);
        IE6 = ADC_ETC_TRIG1_CHAIN_7_6_IE6((curr >> 13u) & 0b11u);
        B2B6 = curr & (1u << 12u);
        HWTS6 = ADC_ETC_TRIG1_CHAIN_7_6_HWTS6((curr >> 4u) & 0b11111111u);
        CSEL6 = ADC_ETC_TRIG1_CHAIN_7_6_CSEL6((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG1_CHAIN_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Chain 6/7 Register
     */
    inline void set_TRIG1_CHAIN_7_6(
        bool IE7_EN, ADC_ETC_TRIG1_CHAIN_7_6_IE7 IE7, bool B2B7,
        ADC_ETC_TRIG1_CHAIN_7_6_HWTS7 HWTS7,
        ADC_ETC_TRIG1_CHAIN_7_6_CSEL7 CSEL7, bool IE6_EN,
        ADC_ETC_TRIG1_CHAIN_7_6_IE6 IE6, bool B2B6,
        ADC_ETC_TRIG1_CHAIN_7_6_HWTS6 HWTS6,
        ADC_ETC_TRIG1_CHAIN_7_6_CSEL6 CSEL6) volatile
    {
        uint32_t curr = TRIG1_CHAIN_7_6;

        curr &= ~(0b1u << 31u);
        curr |= (IE7_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE7) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B7 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS7) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL7) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE6_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE6) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B6 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS6) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL6) & 0b1111u) << 0u;

        TRIG1_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG1_RESULT_1_0's DATA1 field.
     *
     * Result DATA1The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG1_RESULT_1_0_DATA1() volatile
    {
        return (TRIG1_RESULT_1_0 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG1_RESULT_1_0's DATA0 field.
     *
     * Result DATA0The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG1_RESULT_1_0_DATA0() volatile
    {
        return (TRIG1_RESULT_1_0 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG1_RESULT_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 1/0 Register
     */
    inline void get_TRIG1_RESULT_1_0(uint16_t &DATA1, uint16_t &DATA0) volatile
    {
        uint32_t curr = TRIG1_RESULT_1_0;

        DATA1 = (curr >> 16u) & 0b111111111111u;
        DATA0 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG1_RESULT_3_2's DATA3 field.
     *
     * Result DATA3The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG1_RESULT_3_2_DATA3() volatile
    {
        return (TRIG1_RESULT_3_2 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG1_RESULT_3_2's DATA2 field.
     *
     * Result DATA2The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG1_RESULT_3_2_DATA2() volatile
    {
        return (TRIG1_RESULT_3_2 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG1_RESULT_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 3/2 Register
     */
    inline void get_TRIG1_RESULT_3_2(uint16_t &DATA3, uint16_t &DATA2) volatile
    {
        uint32_t curr = TRIG1_RESULT_3_2;

        DATA3 = (curr >> 16u) & 0b111111111111u;
        DATA2 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG1_RESULT_5_4's DATA5 field.
     *
     * Result DATA5The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG1_RESULT_5_4_DATA5() volatile
    {
        return (TRIG1_RESULT_5_4 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG1_RESULT_5_4's DATA4 field.
     *
     * Result DATA4The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG1_RESULT_5_4_DATA4() volatile
    {
        return (TRIG1_RESULT_5_4 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG1_RESULT_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 5/4 Register
     */
    inline void get_TRIG1_RESULT_5_4(uint16_t &DATA5, uint16_t &DATA4) volatile
    {
        uint32_t curr = TRIG1_RESULT_5_4;

        DATA5 = (curr >> 16u) & 0b111111111111u;
        DATA4 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG1_RESULT_7_6's DATA7 field.
     *
     * Result DATA7The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG1_RESULT_7_6_DATA7() volatile
    {
        return (TRIG1_RESULT_7_6 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG1_RESULT_7_6's DATA6 field.
     *
     * Result DATA6The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG1_RESULT_7_6_DATA6() volatile
    {
        return (TRIG1_RESULT_7_6 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG1_RESULT_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 7/6 Register
     */
    inline void get_TRIG1_RESULT_7_6(uint16_t &DATA7, uint16_t &DATA6) volatile
    {
        uint32_t curr = TRIG1_RESULT_7_6;

        DATA7 = (curr >> 16u) & 0b111111111111u;
        DATA6 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG2_CTRL's CHAINx_DONE field.
     *
     * Segment x done detection
     */
    inline ADC_ETC_TRIG2_CTRL_CHAINx_DONE get_TRIG2_CTRL_CHAINx_DONE() volatile
    {
        return ADC_ETC_TRIG2_CTRL_CHAINx_DONE((TRIG2_CTRL >> 24u) &
                                              0b11111111u);
    }

    /**
     * Set TRIG2_CTRL's CHAINx_DONE field.
     *
     * Segment x done detection
     */
    inline void set_TRIG2_CTRL_CHAINx_DONE(
        ADC_ETC_TRIG2_CTRL_CHAINx_DONE value) volatile
    {
        uint32_t curr = TRIG2_CTRL;

        curr &= ~(0b11111111u << 24u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 24u;

        TRIG2_CTRL = curr;
    }

    /**
     * Get TRIG2_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline bool get_TRIG2_CTRL_SYNC_MODE() volatile
    {
        return TRIG2_CTRL & (1u << 16u);
    }

    /**
     * Set TRIG2_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void set_TRIG2_CTRL_SYNC_MODE() volatile
    {
        TRIG2_CTRL |= 1u << 16u;
    }

    /**
     * Clear TRIG2_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void clear_TRIG2_CTRL_SYNC_MODE() volatile
    {
        TRIG2_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle TRIG2_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void toggle_TRIG2_CTRL_SYNC_MODE() volatile
    {
        TRIG2_CTRL ^= 1u << 16u;
    }

    /**
     * Get TRIG2_CTRL's TRIG_PRIORITY field.
     *
     * External trigger priority, 7 is highest priority, while 0 is lowest
     */
    inline uint8_t get_TRIG2_CTRL_TRIG_PRIORITY() volatile
    {
        return (TRIG2_CTRL >> 12u) & 0b111u;
    }

    /**
     * Set TRIG2_CTRL's TRIG_PRIORITY field.
     *
     * External trigger priority, 7 is highest priority, while 0 is lowest
     */
    inline void set_TRIG2_CTRL_TRIG_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = TRIG2_CTRL;

        curr &= ~(0b111u << 12u);
        curr |= (value & 0b111u) << 12u;

        TRIG2_CTRL = curr;
    }

    /**
     * Get TRIG2_CTRL's TRIG_CHAIN field.
     *
     * The number of segments inside the trigger chain of TRIGa.
     */
    inline ADC_ETC_TRIG2_CTRL_TRIG_CHAIN get_TRIG2_CTRL_TRIG_CHAIN() volatile
    {
        return ADC_ETC_TRIG2_CTRL_TRIG_CHAIN((TRIG2_CTRL >> 8u) & 0b111u);
    }

    /**
     * Set TRIG2_CTRL's TRIG_CHAIN field.
     *
     * The number of segments inside the trigger chain of TRIGa.
     */
    inline void set_TRIG2_CTRL_TRIG_CHAIN(
        ADC_ETC_TRIG2_CTRL_TRIG_CHAIN value) volatile
    {
        uint32_t curr = TRIG2_CTRL;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TRIG2_CTRL = curr;
    }

    /**
     * Get TRIG2_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline bool get_TRIG2_CTRL_TRIG_MODE() volatile
    {
        return TRIG2_CTRL & (1u << 4u);
    }

    /**
     * Set TRIG2_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void set_TRIG2_CTRL_TRIG_MODE() volatile
    {
        TRIG2_CTRL |= 1u << 4u;
    }

    /**
     * Clear TRIG2_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void clear_TRIG2_CTRL_TRIG_MODE() volatile
    {
        TRIG2_CTRL &= ~(1u << 4u);
    }

    /**
     * Toggle TRIG2_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void toggle_TRIG2_CTRL_TRIG_MODE() volatile
    {
        TRIG2_CTRL ^= 1u << 4u;
    }

    /**
     * Get TRIG2_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline bool get_TRIG2_CTRL_SW_TRIG() volatile
    {
        return TRIG2_CTRL & (1u << 0u);
    }

    /**
     * Set TRIG2_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void set_TRIG2_CTRL_SW_TRIG() volatile
    {
        TRIG2_CTRL |= 1u << 0u;
    }

    /**
     * Clear TRIG2_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void clear_TRIG2_CTRL_SW_TRIG() volatile
    {
        TRIG2_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle TRIG2_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void toggle_TRIG2_CTRL_SW_TRIG() volatile
    {
        TRIG2_CTRL ^= 1u << 0u;
    }

    /**
     * Get all of TRIG2_CTRL's bit fields.
     *
     * (read-write) ETC_TRIG Control Register
     */
    inline void get_TRIG2_CTRL(ADC_ETC_TRIG2_CTRL_CHAINx_DONE &CHAINx_DONE,
                               bool &SYNC_MODE, uint8_t &TRIG_PRIORITY,
                               ADC_ETC_TRIG2_CTRL_TRIG_CHAIN &TRIG_CHAIN,
                               bool &TRIG_MODE, bool &SW_TRIG) volatile
    {
        uint32_t curr = TRIG2_CTRL;

        CHAINx_DONE =
            ADC_ETC_TRIG2_CTRL_CHAINx_DONE((curr >> 24u) & 0b11111111u);
        SYNC_MODE = curr & (1u << 16u);
        TRIG_PRIORITY = (curr >> 12u) & 0b111u;
        TRIG_CHAIN = ADC_ETC_TRIG2_CTRL_TRIG_CHAIN((curr >> 8u) & 0b111u);
        TRIG_MODE = curr & (1u << 4u);
        SW_TRIG = curr & (1u << 0u);
    }

    /**
     * Set all of TRIG2_CTRL's bit fields.
     *
     * (read-write) ETC_TRIG Control Register
     */
    inline void set_TRIG2_CTRL(ADC_ETC_TRIG2_CTRL_CHAINx_DONE CHAINx_DONE,
                               bool SYNC_MODE, uint8_t TRIG_PRIORITY,
                               ADC_ETC_TRIG2_CTRL_TRIG_CHAIN TRIG_CHAIN,
                               bool TRIG_MODE, bool SW_TRIG) volatile
    {
        uint32_t curr = TRIG2_CTRL;

        curr &= ~(0b11111111u << 24u);
        curr |= (std::to_underlying(CHAINx_DONE) & 0b11111111u) << 24u;
        curr &= ~(0b1u << 16u);
        curr |= (SYNC_MODE & 0b1u) << 16u;
        curr &= ~(0b111u << 12u);
        curr |= (TRIG_PRIORITY & 0b111u) << 12u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(TRIG_CHAIN) & 0b111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (TRIG_MODE & 0b1u) << 4u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG & 0b1u) << 0u;

        TRIG2_CTRL = curr;
    }

    /**
     * Get TRIG2_COUNTER's SAMPLE_INTERVAL field.
     *
     * TRIGGER sampling interval counter
     */
    inline uint16_t get_TRIG2_COUNTER_SAMPLE_INTERVAL() volatile
    {
        return (TRIG2_COUNTER >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set TRIG2_COUNTER's SAMPLE_INTERVAL field.
     *
     * TRIGGER sampling interval counter
     */
    inline void set_TRIG2_COUNTER_SAMPLE_INTERVAL(uint16_t value) volatile
    {
        uint32_t curr = TRIG2_COUNTER;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        TRIG2_COUNTER = curr;
    }

    /**
     * Get TRIG2_COUNTER's INIT_DELAY field.
     *
     * TRIGGER initial delay counter. Initial_delay =
     * (INIT_DELAY+1)*(PRE_DIVIDER+1)*ipg_clk
     */
    inline uint16_t get_TRIG2_COUNTER_INIT_DELAY() volatile
    {
        return (TRIG2_COUNTER >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TRIG2_COUNTER's INIT_DELAY field.
     *
     * TRIGGER initial delay counter. Initial_delay =
     * (INIT_DELAY+1)*(PRE_DIVIDER+1)*ipg_clk
     */
    inline void set_TRIG2_COUNTER_INIT_DELAY(uint16_t value) volatile
    {
        uint32_t curr = TRIG2_COUNTER;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TRIG2_COUNTER = curr;
    }

    /**
     * Get all of TRIG2_COUNTER's bit fields.
     *
     * (read-write) ETC_TRIG Counter Register
     */
    inline void get_TRIG2_COUNTER(uint16_t &SAMPLE_INTERVAL,
                                  uint16_t &INIT_DELAY) volatile
    {
        uint32_t curr = TRIG2_COUNTER;

        SAMPLE_INTERVAL = (curr >> 16u) & 0b1111111111111111u;
        INIT_DELAY = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of TRIG2_COUNTER's bit fields.
     *
     * (read-write) ETC_TRIG Counter Register
     */
    inline void set_TRIG2_COUNTER(uint16_t SAMPLE_INTERVAL,
                                  uint16_t INIT_DELAY) volatile
    {
        uint32_t curr = TRIG2_COUNTER;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (SAMPLE_INTERVAL & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (INIT_DELAY & 0b1111111111111111u) << 0u;

        TRIG2_COUNTER = curr;
    }

    /**
     * Get TRIG2_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline bool get_TRIG2_CHAIN_1_0_IE1_EN() volatile
    {
        return TRIG2_CHAIN_1_0 & (1u << 31u);
    }

    /**
     * Set TRIG2_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void set_TRIG2_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG2_CHAIN_1_0 |= 1u << 31u;
    }

    /**
     * Clear TRIG2_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void clear_TRIG2_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG2_CHAIN_1_0 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG2_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void toggle_TRIG2_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG2_CHAIN_1_0 ^= 1u << 31u;
    }

    /**
     * Get TRIG2_CHAIN_1_0's IE1 field.
     *
     * Segment 1 interrupt enable. (This bit field is meaningful only when
     * IE1_EN is set)
     */
    inline ADC_ETC_TRIG2_CHAIN_1_0_IE1 get_TRIG2_CHAIN_1_0_IE1() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_1_0_IE1((TRIG2_CHAIN_1_0 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG2_CHAIN_1_0's IE1 field.
     *
     * Segment 1 interrupt enable. (This bit field is meaningful only when
     * IE1_EN is set)
     */
    inline void set_TRIG2_CHAIN_1_0_IE1(
        ADC_ETC_TRIG2_CHAIN_1_0_IE1 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_1_0;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG2_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG2_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline bool get_TRIG2_CHAIN_1_0_B2B1() volatile
    {
        return TRIG2_CHAIN_1_0 & (1u << 28u);
    }

    /**
     * Set TRIG2_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void set_TRIG2_CHAIN_1_0_B2B1() volatile
    {
        TRIG2_CHAIN_1_0 |= 1u << 28u;
    }

    /**
     * Clear TRIG2_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void clear_TRIG2_CHAIN_1_0_B2B1() volatile
    {
        TRIG2_CHAIN_1_0 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG2_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void toggle_TRIG2_CHAIN_1_0_B2B1() volatile
    {
        TRIG2_CHAIN_1_0 ^= 1u << 28u;
    }

    /**
     * Get TRIG2_CHAIN_1_0's HWTS1 field.
     *
     * Segment 1 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG2_CHAIN_1_0_HWTS1 get_TRIG2_CHAIN_1_0_HWTS1() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_1_0_HWTS1((TRIG2_CHAIN_1_0 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG2_CHAIN_1_0's HWTS1 field.
     *
     * Segment 1 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG2_CHAIN_1_0_HWTS1(
        ADC_ETC_TRIG2_CHAIN_1_0_HWTS1 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_1_0;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG2_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG2_CHAIN_1_0's CSEL1 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG2_CHAIN_1_0_CSEL1 get_TRIG2_CHAIN_1_0_CSEL1() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_1_0_CSEL1((TRIG2_CHAIN_1_0 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG2_CHAIN_1_0's CSEL1 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG2_CHAIN_1_0_CSEL1(
        ADC_ETC_TRIG2_CHAIN_1_0_CSEL1 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_1_0;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG2_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG2_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline bool get_TRIG2_CHAIN_1_0_IE0_EN() volatile
    {
        return TRIG2_CHAIN_1_0 & (1u << 15u);
    }

    /**
     * Set TRIG2_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void set_TRIG2_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG2_CHAIN_1_0 |= 1u << 15u;
    }

    /**
     * Clear TRIG2_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void clear_TRIG2_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG2_CHAIN_1_0 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG2_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void toggle_TRIG2_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG2_CHAIN_1_0 ^= 1u << 15u;
    }

    /**
     * Get TRIG2_CHAIN_1_0's IE0 field.
     *
     * Segment 0 interrupt enable. (This bit field is meaningful only when
     * IE0_EN is set)
     */
    inline ADC_ETC_TRIG2_CHAIN_1_0_IE0 get_TRIG2_CHAIN_1_0_IE0() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_1_0_IE0((TRIG2_CHAIN_1_0 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG2_CHAIN_1_0's IE0 field.
     *
     * Segment 0 interrupt enable. (This bit field is meaningful only when
     * IE0_EN is set)
     */
    inline void set_TRIG2_CHAIN_1_0_IE0(
        ADC_ETC_TRIG2_CHAIN_1_0_IE0 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_1_0;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG2_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG2_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline bool get_TRIG2_CHAIN_1_0_B2B0() volatile
    {
        return TRIG2_CHAIN_1_0 & (1u << 12u);
    }

    /**
     * Set TRIG2_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void set_TRIG2_CHAIN_1_0_B2B0() volatile
    {
        TRIG2_CHAIN_1_0 |= 1u << 12u;
    }

    /**
     * Clear TRIG2_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void clear_TRIG2_CHAIN_1_0_B2B0() volatile
    {
        TRIG2_CHAIN_1_0 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG2_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void toggle_TRIG2_CHAIN_1_0_B2B0() volatile
    {
        TRIG2_CHAIN_1_0 ^= 1u << 12u;
    }

    /**
     * Get TRIG2_CHAIN_1_0's HWTS0 field.
     *
     * Segment 0 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG2_CHAIN_1_0_HWTS0 get_TRIG2_CHAIN_1_0_HWTS0() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_1_0_HWTS0((TRIG2_CHAIN_1_0 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG2_CHAIN_1_0's HWTS0 field.
     *
     * Segment 0 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG2_CHAIN_1_0_HWTS0(
        ADC_ETC_TRIG2_CHAIN_1_0_HWTS0 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_1_0;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG2_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG2_CHAIN_1_0's CSEL0 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG2_CHAIN_1_0_CSEL0 get_TRIG2_CHAIN_1_0_CSEL0() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_1_0_CSEL0((TRIG2_CHAIN_1_0 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG2_CHAIN_1_0's CSEL0 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG2_CHAIN_1_0_CSEL0(
        ADC_ETC_TRIG2_CHAIN_1_0_CSEL0 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_1_0;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG2_CHAIN_1_0 = curr;
    }

    /**
     * Get all of TRIG2_CHAIN_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Chain 0/1 Register
     */
    inline void get_TRIG2_CHAIN_1_0(
        bool &IE1_EN, ADC_ETC_TRIG2_CHAIN_1_0_IE1 &IE1, bool &B2B1,
        ADC_ETC_TRIG2_CHAIN_1_0_HWTS1 &HWTS1,
        ADC_ETC_TRIG2_CHAIN_1_0_CSEL1 &CSEL1, bool &IE0_EN,
        ADC_ETC_TRIG2_CHAIN_1_0_IE0 &IE0, bool &B2B0,
        ADC_ETC_TRIG2_CHAIN_1_0_HWTS0 &HWTS0,
        ADC_ETC_TRIG2_CHAIN_1_0_CSEL0 &CSEL0) volatile
    {
        uint32_t curr = TRIG2_CHAIN_1_0;

        IE1_EN = curr & (1u << 31u);
        IE1 = ADC_ETC_TRIG2_CHAIN_1_0_IE1((curr >> 29u) & 0b11u);
        B2B1 = curr & (1u << 28u);
        HWTS1 = ADC_ETC_TRIG2_CHAIN_1_0_HWTS1((curr >> 20u) & 0b11111111u);
        CSEL1 = ADC_ETC_TRIG2_CHAIN_1_0_CSEL1((curr >> 16u) & 0b1111u);
        IE0_EN = curr & (1u << 15u);
        IE0 = ADC_ETC_TRIG2_CHAIN_1_0_IE0((curr >> 13u) & 0b11u);
        B2B0 = curr & (1u << 12u);
        HWTS0 = ADC_ETC_TRIG2_CHAIN_1_0_HWTS0((curr >> 4u) & 0b11111111u);
        CSEL0 = ADC_ETC_TRIG2_CHAIN_1_0_CSEL0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG2_CHAIN_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Chain 0/1 Register
     */
    inline void set_TRIG2_CHAIN_1_0(
        bool IE1_EN, ADC_ETC_TRIG2_CHAIN_1_0_IE1 IE1, bool B2B1,
        ADC_ETC_TRIG2_CHAIN_1_0_HWTS1 HWTS1,
        ADC_ETC_TRIG2_CHAIN_1_0_CSEL1 CSEL1, bool IE0_EN,
        ADC_ETC_TRIG2_CHAIN_1_0_IE0 IE0, bool B2B0,
        ADC_ETC_TRIG2_CHAIN_1_0_HWTS0 HWTS0,
        ADC_ETC_TRIG2_CHAIN_1_0_CSEL0 CSEL0) volatile
    {
        uint32_t curr = TRIG2_CHAIN_1_0;

        curr &= ~(0b1u << 31u);
        curr |= (IE1_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE1) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B1 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS1) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL1) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE0_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE0) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B0 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS0) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL0) & 0b1111u) << 0u;

        TRIG2_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG2_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline bool get_TRIG2_CHAIN_3_2_IE3_EN() volatile
    {
        return TRIG2_CHAIN_3_2 & (1u << 31u);
    }

    /**
     * Set TRIG2_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void set_TRIG2_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG2_CHAIN_3_2 |= 1u << 31u;
    }

    /**
     * Clear TRIG2_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void clear_TRIG2_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG2_CHAIN_3_2 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG2_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void toggle_TRIG2_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG2_CHAIN_3_2 ^= 1u << 31u;
    }

    /**
     * Get TRIG2_CHAIN_3_2's IE3 field.
     *
     * Segment 3 interrupt enable. (This bit field is meaningful only when
     * IE3_EN is set)
     */
    inline ADC_ETC_TRIG2_CHAIN_3_2_IE3 get_TRIG2_CHAIN_3_2_IE3() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_3_2_IE3((TRIG2_CHAIN_3_2 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG2_CHAIN_3_2's IE3 field.
     *
     * Segment 3 interrupt enable. (This bit field is meaningful only when
     * IE3_EN is set)
     */
    inline void set_TRIG2_CHAIN_3_2_IE3(
        ADC_ETC_TRIG2_CHAIN_3_2_IE3 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_3_2;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG2_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG2_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline bool get_TRIG2_CHAIN_3_2_B2B3() volatile
    {
        return TRIG2_CHAIN_3_2 & (1u << 28u);
    }

    /**
     * Set TRIG2_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void set_TRIG2_CHAIN_3_2_B2B3() volatile
    {
        TRIG2_CHAIN_3_2 |= 1u << 28u;
    }

    /**
     * Clear TRIG2_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void clear_TRIG2_CHAIN_3_2_B2B3() volatile
    {
        TRIG2_CHAIN_3_2 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG2_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void toggle_TRIG2_CHAIN_3_2_B2B3() volatile
    {
        TRIG2_CHAIN_3_2 ^= 1u << 28u;
    }

    /**
     * Get TRIG2_CHAIN_3_2's HWTS3 field.
     *
     * Segment 3 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG2_CHAIN_3_2_HWTS3 get_TRIG2_CHAIN_3_2_HWTS3() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_3_2_HWTS3((TRIG2_CHAIN_3_2 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG2_CHAIN_3_2's HWTS3 field.
     *
     * Segment 3 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG2_CHAIN_3_2_HWTS3(
        ADC_ETC_TRIG2_CHAIN_3_2_HWTS3 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_3_2;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG2_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG2_CHAIN_3_2's CSEL3 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG2_CHAIN_3_2_CSEL3 get_TRIG2_CHAIN_3_2_CSEL3() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_3_2_CSEL3((TRIG2_CHAIN_3_2 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG2_CHAIN_3_2's CSEL3 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG2_CHAIN_3_2_CSEL3(
        ADC_ETC_TRIG2_CHAIN_3_2_CSEL3 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_3_2;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG2_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG2_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline bool get_TRIG2_CHAIN_3_2_IE2_EN() volatile
    {
        return TRIG2_CHAIN_3_2 & (1u << 15u);
    }

    /**
     * Set TRIG2_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void set_TRIG2_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG2_CHAIN_3_2 |= 1u << 15u;
    }

    /**
     * Clear TRIG2_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void clear_TRIG2_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG2_CHAIN_3_2 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG2_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void toggle_TRIG2_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG2_CHAIN_3_2 ^= 1u << 15u;
    }

    /**
     * Get TRIG2_CHAIN_3_2's IE2 field.
     *
     * Segment 2 interrupt enable. (This bit field is meaningful only when
     * IE2_EN is set)
     */
    inline ADC_ETC_TRIG2_CHAIN_3_2_IE2 get_TRIG2_CHAIN_3_2_IE2() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_3_2_IE2((TRIG2_CHAIN_3_2 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG2_CHAIN_3_2's IE2 field.
     *
     * Segment 2 interrupt enable. (This bit field is meaningful only when
     * IE2_EN is set)
     */
    inline void set_TRIG2_CHAIN_3_2_IE2(
        ADC_ETC_TRIG2_CHAIN_3_2_IE2 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_3_2;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG2_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG2_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline bool get_TRIG2_CHAIN_3_2_B2B2() volatile
    {
        return TRIG2_CHAIN_3_2 & (1u << 12u);
    }

    /**
     * Set TRIG2_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void set_TRIG2_CHAIN_3_2_B2B2() volatile
    {
        TRIG2_CHAIN_3_2 |= 1u << 12u;
    }

    /**
     * Clear TRIG2_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void clear_TRIG2_CHAIN_3_2_B2B2() volatile
    {
        TRIG2_CHAIN_3_2 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG2_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void toggle_TRIG2_CHAIN_3_2_B2B2() volatile
    {
        TRIG2_CHAIN_3_2 ^= 1u << 12u;
    }

    /**
     * Get TRIG2_CHAIN_3_2's HWTS2 field.
     *
     * Segment 2 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG2_CHAIN_3_2_HWTS2 get_TRIG2_CHAIN_3_2_HWTS2() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_3_2_HWTS2((TRIG2_CHAIN_3_2 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG2_CHAIN_3_2's HWTS2 field.
     *
     * Segment 2 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG2_CHAIN_3_2_HWTS2(
        ADC_ETC_TRIG2_CHAIN_3_2_HWTS2 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_3_2;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG2_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG2_CHAIN_3_2's CSEL2 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG2_CHAIN_3_2_CSEL2 get_TRIG2_CHAIN_3_2_CSEL2() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_3_2_CSEL2((TRIG2_CHAIN_3_2 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG2_CHAIN_3_2's CSEL2 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG2_CHAIN_3_2_CSEL2(
        ADC_ETC_TRIG2_CHAIN_3_2_CSEL2 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_3_2;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG2_CHAIN_3_2 = curr;
    }

    /**
     * Get all of TRIG2_CHAIN_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Chain 2/3 Register
     */
    inline void get_TRIG2_CHAIN_3_2(
        bool &IE3_EN, ADC_ETC_TRIG2_CHAIN_3_2_IE3 &IE3, bool &B2B3,
        ADC_ETC_TRIG2_CHAIN_3_2_HWTS3 &HWTS3,
        ADC_ETC_TRIG2_CHAIN_3_2_CSEL3 &CSEL3, bool &IE2_EN,
        ADC_ETC_TRIG2_CHAIN_3_2_IE2 &IE2, bool &B2B2,
        ADC_ETC_TRIG2_CHAIN_3_2_HWTS2 &HWTS2,
        ADC_ETC_TRIG2_CHAIN_3_2_CSEL2 &CSEL2) volatile
    {
        uint32_t curr = TRIG2_CHAIN_3_2;

        IE3_EN = curr & (1u << 31u);
        IE3 = ADC_ETC_TRIG2_CHAIN_3_2_IE3((curr >> 29u) & 0b11u);
        B2B3 = curr & (1u << 28u);
        HWTS3 = ADC_ETC_TRIG2_CHAIN_3_2_HWTS3((curr >> 20u) & 0b11111111u);
        CSEL3 = ADC_ETC_TRIG2_CHAIN_3_2_CSEL3((curr >> 16u) & 0b1111u);
        IE2_EN = curr & (1u << 15u);
        IE2 = ADC_ETC_TRIG2_CHAIN_3_2_IE2((curr >> 13u) & 0b11u);
        B2B2 = curr & (1u << 12u);
        HWTS2 = ADC_ETC_TRIG2_CHAIN_3_2_HWTS2((curr >> 4u) & 0b11111111u);
        CSEL2 = ADC_ETC_TRIG2_CHAIN_3_2_CSEL2((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG2_CHAIN_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Chain 2/3 Register
     */
    inline void set_TRIG2_CHAIN_3_2(
        bool IE3_EN, ADC_ETC_TRIG2_CHAIN_3_2_IE3 IE3, bool B2B3,
        ADC_ETC_TRIG2_CHAIN_3_2_HWTS3 HWTS3,
        ADC_ETC_TRIG2_CHAIN_3_2_CSEL3 CSEL3, bool IE2_EN,
        ADC_ETC_TRIG2_CHAIN_3_2_IE2 IE2, bool B2B2,
        ADC_ETC_TRIG2_CHAIN_3_2_HWTS2 HWTS2,
        ADC_ETC_TRIG2_CHAIN_3_2_CSEL2 CSEL2) volatile
    {
        uint32_t curr = TRIG2_CHAIN_3_2;

        curr &= ~(0b1u << 31u);
        curr |= (IE3_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE3) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B3 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS3) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL3) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE2_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE2) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B2 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS2) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL2) & 0b1111u) << 0u;

        TRIG2_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG2_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline bool get_TRIG2_CHAIN_5_4_IE5_EN() volatile
    {
        return TRIG2_CHAIN_5_4 & (1u << 31u);
    }

    /**
     * Set TRIG2_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void set_TRIG2_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG2_CHAIN_5_4 |= 1u << 31u;
    }

    /**
     * Clear TRIG2_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void clear_TRIG2_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG2_CHAIN_5_4 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG2_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void toggle_TRIG2_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG2_CHAIN_5_4 ^= 1u << 31u;
    }

    /**
     * Get TRIG2_CHAIN_5_4's IE5 field.
     *
     * Segment 5 interrupt enable. (This bit field is meaningful only when
     * IE5_EN is set)
     */
    inline ADC_ETC_TRIG2_CHAIN_5_4_IE5 get_TRIG2_CHAIN_5_4_IE5() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_5_4_IE5((TRIG2_CHAIN_5_4 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG2_CHAIN_5_4's IE5 field.
     *
     * Segment 5 interrupt enable. (This bit field is meaningful only when
     * IE5_EN is set)
     */
    inline void set_TRIG2_CHAIN_5_4_IE5(
        ADC_ETC_TRIG2_CHAIN_5_4_IE5 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_5_4;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG2_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG2_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline bool get_TRIG2_CHAIN_5_4_B2B5() volatile
    {
        return TRIG2_CHAIN_5_4 & (1u << 28u);
    }

    /**
     * Set TRIG2_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void set_TRIG2_CHAIN_5_4_B2B5() volatile
    {
        TRIG2_CHAIN_5_4 |= 1u << 28u;
    }

    /**
     * Clear TRIG2_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void clear_TRIG2_CHAIN_5_4_B2B5() volatile
    {
        TRIG2_CHAIN_5_4 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG2_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void toggle_TRIG2_CHAIN_5_4_B2B5() volatile
    {
        TRIG2_CHAIN_5_4 ^= 1u << 28u;
    }

    /**
     * Get TRIG2_CHAIN_5_4's HWTS5 field.
     *
     * Segment 5 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG2_CHAIN_5_4_HWTS5 get_TRIG2_CHAIN_5_4_HWTS5() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_5_4_HWTS5((TRIG2_CHAIN_5_4 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG2_CHAIN_5_4's HWTS5 field.
     *
     * Segment 5 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG2_CHAIN_5_4_HWTS5(
        ADC_ETC_TRIG2_CHAIN_5_4_HWTS5 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_5_4;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG2_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG2_CHAIN_5_4's CSEL5 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG2_CHAIN_5_4_CSEL5 get_TRIG2_CHAIN_5_4_CSEL5() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_5_4_CSEL5((TRIG2_CHAIN_5_4 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG2_CHAIN_5_4's CSEL5 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG2_CHAIN_5_4_CSEL5(
        ADC_ETC_TRIG2_CHAIN_5_4_CSEL5 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_5_4;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG2_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG2_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline bool get_TRIG2_CHAIN_5_4_IE4_EN() volatile
    {
        return TRIG2_CHAIN_5_4 & (1u << 15u);
    }

    /**
     * Set TRIG2_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void set_TRIG2_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG2_CHAIN_5_4 |= 1u << 15u;
    }

    /**
     * Clear TRIG2_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void clear_TRIG2_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG2_CHAIN_5_4 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG2_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void toggle_TRIG2_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG2_CHAIN_5_4 ^= 1u << 15u;
    }

    /**
     * Get TRIG2_CHAIN_5_4's IE4 field.
     *
     * Segment 4 interrupt enable. (This bit field is meaningful only when
     * IE4_EN is set)
     */
    inline ADC_ETC_TRIG2_CHAIN_5_4_IE4 get_TRIG2_CHAIN_5_4_IE4() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_5_4_IE4((TRIG2_CHAIN_5_4 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG2_CHAIN_5_4's IE4 field.
     *
     * Segment 4 interrupt enable. (This bit field is meaningful only when
     * IE4_EN is set)
     */
    inline void set_TRIG2_CHAIN_5_4_IE4(
        ADC_ETC_TRIG2_CHAIN_5_4_IE4 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_5_4;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG2_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG2_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline bool get_TRIG2_CHAIN_5_4_B2B4() volatile
    {
        return TRIG2_CHAIN_5_4 & (1u << 12u);
    }

    /**
     * Set TRIG2_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void set_TRIG2_CHAIN_5_4_B2B4() volatile
    {
        TRIG2_CHAIN_5_4 |= 1u << 12u;
    }

    /**
     * Clear TRIG2_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void clear_TRIG2_CHAIN_5_4_B2B4() volatile
    {
        TRIG2_CHAIN_5_4 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG2_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void toggle_TRIG2_CHAIN_5_4_B2B4() volatile
    {
        TRIG2_CHAIN_5_4 ^= 1u << 12u;
    }

    /**
     * Get TRIG2_CHAIN_5_4's HWTS4 field.
     *
     * Segment 4 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG2_CHAIN_5_4_HWTS4 get_TRIG2_CHAIN_5_4_HWTS4() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_5_4_HWTS4((TRIG2_CHAIN_5_4 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG2_CHAIN_5_4's HWTS4 field.
     *
     * Segment 4 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG2_CHAIN_5_4_HWTS4(
        ADC_ETC_TRIG2_CHAIN_5_4_HWTS4 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_5_4;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG2_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG2_CHAIN_5_4's CSEL4 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG2_CHAIN_5_4_CSEL4 get_TRIG2_CHAIN_5_4_CSEL4() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_5_4_CSEL4((TRIG2_CHAIN_5_4 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG2_CHAIN_5_4's CSEL4 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG2_CHAIN_5_4_CSEL4(
        ADC_ETC_TRIG2_CHAIN_5_4_CSEL4 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_5_4;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG2_CHAIN_5_4 = curr;
    }

    /**
     * Get all of TRIG2_CHAIN_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Chain 4/5 Register
     */
    inline void get_TRIG2_CHAIN_5_4(
        bool &IE5_EN, ADC_ETC_TRIG2_CHAIN_5_4_IE5 &IE5, bool &B2B5,
        ADC_ETC_TRIG2_CHAIN_5_4_HWTS5 &HWTS5,
        ADC_ETC_TRIG2_CHAIN_5_4_CSEL5 &CSEL5, bool &IE4_EN,
        ADC_ETC_TRIG2_CHAIN_5_4_IE4 &IE4, bool &B2B4,
        ADC_ETC_TRIG2_CHAIN_5_4_HWTS4 &HWTS4,
        ADC_ETC_TRIG2_CHAIN_5_4_CSEL4 &CSEL4) volatile
    {
        uint32_t curr = TRIG2_CHAIN_5_4;

        IE5_EN = curr & (1u << 31u);
        IE5 = ADC_ETC_TRIG2_CHAIN_5_4_IE5((curr >> 29u) & 0b11u);
        B2B5 = curr & (1u << 28u);
        HWTS5 = ADC_ETC_TRIG2_CHAIN_5_4_HWTS5((curr >> 20u) & 0b11111111u);
        CSEL5 = ADC_ETC_TRIG2_CHAIN_5_4_CSEL5((curr >> 16u) & 0b1111u);
        IE4_EN = curr & (1u << 15u);
        IE4 = ADC_ETC_TRIG2_CHAIN_5_4_IE4((curr >> 13u) & 0b11u);
        B2B4 = curr & (1u << 12u);
        HWTS4 = ADC_ETC_TRIG2_CHAIN_5_4_HWTS4((curr >> 4u) & 0b11111111u);
        CSEL4 = ADC_ETC_TRIG2_CHAIN_5_4_CSEL4((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG2_CHAIN_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Chain 4/5 Register
     */
    inline void set_TRIG2_CHAIN_5_4(
        bool IE5_EN, ADC_ETC_TRIG2_CHAIN_5_4_IE5 IE5, bool B2B5,
        ADC_ETC_TRIG2_CHAIN_5_4_HWTS5 HWTS5,
        ADC_ETC_TRIG2_CHAIN_5_4_CSEL5 CSEL5, bool IE4_EN,
        ADC_ETC_TRIG2_CHAIN_5_4_IE4 IE4, bool B2B4,
        ADC_ETC_TRIG2_CHAIN_5_4_HWTS4 HWTS4,
        ADC_ETC_TRIG2_CHAIN_5_4_CSEL4 CSEL4) volatile
    {
        uint32_t curr = TRIG2_CHAIN_5_4;

        curr &= ~(0b1u << 31u);
        curr |= (IE5_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE5) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B5 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS5) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL5) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE4_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE4) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B4 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS4) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL4) & 0b1111u) << 0u;

        TRIG2_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG2_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline bool get_TRIG2_CHAIN_7_6_IE7_EN() volatile
    {
        return TRIG2_CHAIN_7_6 & (1u << 31u);
    }

    /**
     * Set TRIG2_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void set_TRIG2_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG2_CHAIN_7_6 |= 1u << 31u;
    }

    /**
     * Clear TRIG2_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void clear_TRIG2_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG2_CHAIN_7_6 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG2_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void toggle_TRIG2_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG2_CHAIN_7_6 ^= 1u << 31u;
    }

    /**
     * Get TRIG2_CHAIN_7_6's IE7 field.
     *
     * Segment 7 interrupt enable. (This bit field is meaningful only when
     * IE7_EN is set)
     */
    inline ADC_ETC_TRIG2_CHAIN_7_6_IE7 get_TRIG2_CHAIN_7_6_IE7() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_7_6_IE7((TRIG2_CHAIN_7_6 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG2_CHAIN_7_6's IE7 field.
     *
     * Segment 7 interrupt enable. (This bit field is meaningful only when
     * IE7_EN is set)
     */
    inline void set_TRIG2_CHAIN_7_6_IE7(
        ADC_ETC_TRIG2_CHAIN_7_6_IE7 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_7_6;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG2_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG2_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline bool get_TRIG2_CHAIN_7_6_B2B7() volatile
    {
        return TRIG2_CHAIN_7_6 & (1u << 28u);
    }

    /**
     * Set TRIG2_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void set_TRIG2_CHAIN_7_6_B2B7() volatile
    {
        TRIG2_CHAIN_7_6 |= 1u << 28u;
    }

    /**
     * Clear TRIG2_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void clear_TRIG2_CHAIN_7_6_B2B7() volatile
    {
        TRIG2_CHAIN_7_6 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG2_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void toggle_TRIG2_CHAIN_7_6_B2B7() volatile
    {
        TRIG2_CHAIN_7_6 ^= 1u << 28u;
    }

    /**
     * Get TRIG2_CHAIN_7_6's HWTS7 field.
     *
     * Segment 7 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG2_CHAIN_7_6_HWTS7 get_TRIG2_CHAIN_7_6_HWTS7() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_7_6_HWTS7((TRIG2_CHAIN_7_6 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG2_CHAIN_7_6's HWTS7 field.
     *
     * Segment 7 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG2_CHAIN_7_6_HWTS7(
        ADC_ETC_TRIG2_CHAIN_7_6_HWTS7 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_7_6;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG2_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG2_CHAIN_7_6's CSEL7 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG2_CHAIN_7_6_CSEL7 get_TRIG2_CHAIN_7_6_CSEL7() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_7_6_CSEL7((TRIG2_CHAIN_7_6 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG2_CHAIN_7_6's CSEL7 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG2_CHAIN_7_6_CSEL7(
        ADC_ETC_TRIG2_CHAIN_7_6_CSEL7 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_7_6;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG2_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG2_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline bool get_TRIG2_CHAIN_7_6_IE6_EN() volatile
    {
        return TRIG2_CHAIN_7_6 & (1u << 15u);
    }

    /**
     * Set TRIG2_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void set_TRIG2_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG2_CHAIN_7_6 |= 1u << 15u;
    }

    /**
     * Clear TRIG2_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void clear_TRIG2_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG2_CHAIN_7_6 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG2_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void toggle_TRIG2_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG2_CHAIN_7_6 ^= 1u << 15u;
    }

    /**
     * Get TRIG2_CHAIN_7_6's IE6 field.
     *
     * Segment 6 interrupt enable. (This bit field is meaningful only when
     * IE6_EN is set)
     */
    inline ADC_ETC_TRIG2_CHAIN_7_6_IE6 get_TRIG2_CHAIN_7_6_IE6() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_7_6_IE6((TRIG2_CHAIN_7_6 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG2_CHAIN_7_6's IE6 field.
     *
     * Segment 6 interrupt enable. (This bit field is meaningful only when
     * IE6_EN is set)
     */
    inline void set_TRIG2_CHAIN_7_6_IE6(
        ADC_ETC_TRIG2_CHAIN_7_6_IE6 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_7_6;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG2_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG2_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline bool get_TRIG2_CHAIN_7_6_B2B6() volatile
    {
        return TRIG2_CHAIN_7_6 & (1u << 12u);
    }

    /**
     * Set TRIG2_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void set_TRIG2_CHAIN_7_6_B2B6() volatile
    {
        TRIG2_CHAIN_7_6 |= 1u << 12u;
    }

    /**
     * Clear TRIG2_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void clear_TRIG2_CHAIN_7_6_B2B6() volatile
    {
        TRIG2_CHAIN_7_6 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG2_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void toggle_TRIG2_CHAIN_7_6_B2B6() volatile
    {
        TRIG2_CHAIN_7_6 ^= 1u << 12u;
    }

    /**
     * Get TRIG2_CHAIN_7_6's HWTS6 field.
     *
     * Segment 6 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG2_CHAIN_7_6_HWTS6 get_TRIG2_CHAIN_7_6_HWTS6() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_7_6_HWTS6((TRIG2_CHAIN_7_6 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG2_CHAIN_7_6's HWTS6 field.
     *
     * Segment 6 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG2_CHAIN_7_6_HWTS6(
        ADC_ETC_TRIG2_CHAIN_7_6_HWTS6 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_7_6;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG2_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG2_CHAIN_7_6's CSEL6 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG2_CHAIN_7_6_CSEL6 get_TRIG2_CHAIN_7_6_CSEL6() volatile
    {
        return ADC_ETC_TRIG2_CHAIN_7_6_CSEL6((TRIG2_CHAIN_7_6 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG2_CHAIN_7_6's CSEL6 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG2_CHAIN_7_6_CSEL6(
        ADC_ETC_TRIG2_CHAIN_7_6_CSEL6 value) volatile
    {
        uint32_t curr = TRIG2_CHAIN_7_6;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG2_CHAIN_7_6 = curr;
    }

    /**
     * Get all of TRIG2_CHAIN_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Chain 6/7 Register
     */
    inline void get_TRIG2_CHAIN_7_6(
        bool &IE7_EN, ADC_ETC_TRIG2_CHAIN_7_6_IE7 &IE7, bool &B2B7,
        ADC_ETC_TRIG2_CHAIN_7_6_HWTS7 &HWTS7,
        ADC_ETC_TRIG2_CHAIN_7_6_CSEL7 &CSEL7, bool &IE6_EN,
        ADC_ETC_TRIG2_CHAIN_7_6_IE6 &IE6, bool &B2B6,
        ADC_ETC_TRIG2_CHAIN_7_6_HWTS6 &HWTS6,
        ADC_ETC_TRIG2_CHAIN_7_6_CSEL6 &CSEL6) volatile
    {
        uint32_t curr = TRIG2_CHAIN_7_6;

        IE7_EN = curr & (1u << 31u);
        IE7 = ADC_ETC_TRIG2_CHAIN_7_6_IE7((curr >> 29u) & 0b11u);
        B2B7 = curr & (1u << 28u);
        HWTS7 = ADC_ETC_TRIG2_CHAIN_7_6_HWTS7((curr >> 20u) & 0b11111111u);
        CSEL7 = ADC_ETC_TRIG2_CHAIN_7_6_CSEL7((curr >> 16u) & 0b1111u);
        IE6_EN = curr & (1u << 15u);
        IE6 = ADC_ETC_TRIG2_CHAIN_7_6_IE6((curr >> 13u) & 0b11u);
        B2B6 = curr & (1u << 12u);
        HWTS6 = ADC_ETC_TRIG2_CHAIN_7_6_HWTS6((curr >> 4u) & 0b11111111u);
        CSEL6 = ADC_ETC_TRIG2_CHAIN_7_6_CSEL6((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG2_CHAIN_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Chain 6/7 Register
     */
    inline void set_TRIG2_CHAIN_7_6(
        bool IE7_EN, ADC_ETC_TRIG2_CHAIN_7_6_IE7 IE7, bool B2B7,
        ADC_ETC_TRIG2_CHAIN_7_6_HWTS7 HWTS7,
        ADC_ETC_TRIG2_CHAIN_7_6_CSEL7 CSEL7, bool IE6_EN,
        ADC_ETC_TRIG2_CHAIN_7_6_IE6 IE6, bool B2B6,
        ADC_ETC_TRIG2_CHAIN_7_6_HWTS6 HWTS6,
        ADC_ETC_TRIG2_CHAIN_7_6_CSEL6 CSEL6) volatile
    {
        uint32_t curr = TRIG2_CHAIN_7_6;

        curr &= ~(0b1u << 31u);
        curr |= (IE7_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE7) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B7 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS7) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL7) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE6_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE6) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B6 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS6) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL6) & 0b1111u) << 0u;

        TRIG2_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG2_RESULT_1_0's DATA1 field.
     *
     * Result DATA1The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG2_RESULT_1_0_DATA1() volatile
    {
        return (TRIG2_RESULT_1_0 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG2_RESULT_1_0's DATA0 field.
     *
     * Result DATA0The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG2_RESULT_1_0_DATA0() volatile
    {
        return (TRIG2_RESULT_1_0 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG2_RESULT_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 1/0 Register
     */
    inline void get_TRIG2_RESULT_1_0(uint16_t &DATA1, uint16_t &DATA0) volatile
    {
        uint32_t curr = TRIG2_RESULT_1_0;

        DATA1 = (curr >> 16u) & 0b111111111111u;
        DATA0 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG2_RESULT_3_2's DATA3 field.
     *
     * Result DATA3The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG2_RESULT_3_2_DATA3() volatile
    {
        return (TRIG2_RESULT_3_2 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG2_RESULT_3_2's DATA2 field.
     *
     * Result DATA2The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG2_RESULT_3_2_DATA2() volatile
    {
        return (TRIG2_RESULT_3_2 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG2_RESULT_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 3/2 Register
     */
    inline void get_TRIG2_RESULT_3_2(uint16_t &DATA3, uint16_t &DATA2) volatile
    {
        uint32_t curr = TRIG2_RESULT_3_2;

        DATA3 = (curr >> 16u) & 0b111111111111u;
        DATA2 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG2_RESULT_5_4's DATA5 field.
     *
     * Result DATA5The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG2_RESULT_5_4_DATA5() volatile
    {
        return (TRIG2_RESULT_5_4 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG2_RESULT_5_4's DATA4 field.
     *
     * Result DATA4The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG2_RESULT_5_4_DATA4() volatile
    {
        return (TRIG2_RESULT_5_4 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG2_RESULT_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 5/4 Register
     */
    inline void get_TRIG2_RESULT_5_4(uint16_t &DATA5, uint16_t &DATA4) volatile
    {
        uint32_t curr = TRIG2_RESULT_5_4;

        DATA5 = (curr >> 16u) & 0b111111111111u;
        DATA4 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG2_RESULT_7_6's DATA7 field.
     *
     * Result DATA7The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG2_RESULT_7_6_DATA7() volatile
    {
        return (TRIG2_RESULT_7_6 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG2_RESULT_7_6's DATA6 field.
     *
     * Result DATA6The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG2_RESULT_7_6_DATA6() volatile
    {
        return (TRIG2_RESULT_7_6 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG2_RESULT_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 7/6 Register
     */
    inline void get_TRIG2_RESULT_7_6(uint16_t &DATA7, uint16_t &DATA6) volatile
    {
        uint32_t curr = TRIG2_RESULT_7_6;

        DATA7 = (curr >> 16u) & 0b111111111111u;
        DATA6 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG3_CTRL's CHAINx_DONE field.
     *
     * Segment x done detection
     */
    inline ADC_ETC_TRIG3_CTRL_CHAINx_DONE get_TRIG3_CTRL_CHAINx_DONE() volatile
    {
        return ADC_ETC_TRIG3_CTRL_CHAINx_DONE((TRIG3_CTRL >> 24u) &
                                              0b11111111u);
    }

    /**
     * Set TRIG3_CTRL's CHAINx_DONE field.
     *
     * Segment x done detection
     */
    inline void set_TRIG3_CTRL_CHAINx_DONE(
        ADC_ETC_TRIG3_CTRL_CHAINx_DONE value) volatile
    {
        uint32_t curr = TRIG3_CTRL;

        curr &= ~(0b11111111u << 24u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 24u;

        TRIG3_CTRL = curr;
    }

    /**
     * Get TRIG3_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline bool get_TRIG3_CTRL_SYNC_MODE() volatile
    {
        return TRIG3_CTRL & (1u << 16u);
    }

    /**
     * Set TRIG3_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void set_TRIG3_CTRL_SYNC_MODE() volatile
    {
        TRIG3_CTRL |= 1u << 16u;
    }

    /**
     * Clear TRIG3_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void clear_TRIG3_CTRL_SYNC_MODE() volatile
    {
        TRIG3_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle TRIG3_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void toggle_TRIG3_CTRL_SYNC_MODE() volatile
    {
        TRIG3_CTRL ^= 1u << 16u;
    }

    /**
     * Get TRIG3_CTRL's TRIG_PRIORITY field.
     *
     * External trigger priority, 7 is highest priority, while 0 is lowest
     */
    inline uint8_t get_TRIG3_CTRL_TRIG_PRIORITY() volatile
    {
        return (TRIG3_CTRL >> 12u) & 0b111u;
    }

    /**
     * Set TRIG3_CTRL's TRIG_PRIORITY field.
     *
     * External trigger priority, 7 is highest priority, while 0 is lowest
     */
    inline void set_TRIG3_CTRL_TRIG_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = TRIG3_CTRL;

        curr &= ~(0b111u << 12u);
        curr |= (value & 0b111u) << 12u;

        TRIG3_CTRL = curr;
    }

    /**
     * Get TRIG3_CTRL's TRIG_CHAIN field.
     *
     * The number of segments inside the trigger chain of TRIGa.
     */
    inline ADC_ETC_TRIG3_CTRL_TRIG_CHAIN get_TRIG3_CTRL_TRIG_CHAIN() volatile
    {
        return ADC_ETC_TRIG3_CTRL_TRIG_CHAIN((TRIG3_CTRL >> 8u) & 0b111u);
    }

    /**
     * Set TRIG3_CTRL's TRIG_CHAIN field.
     *
     * The number of segments inside the trigger chain of TRIGa.
     */
    inline void set_TRIG3_CTRL_TRIG_CHAIN(
        ADC_ETC_TRIG3_CTRL_TRIG_CHAIN value) volatile
    {
        uint32_t curr = TRIG3_CTRL;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TRIG3_CTRL = curr;
    }

    /**
     * Get TRIG3_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline bool get_TRIG3_CTRL_TRIG_MODE() volatile
    {
        return TRIG3_CTRL & (1u << 4u);
    }

    /**
     * Set TRIG3_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void set_TRIG3_CTRL_TRIG_MODE() volatile
    {
        TRIG3_CTRL |= 1u << 4u;
    }

    /**
     * Clear TRIG3_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void clear_TRIG3_CTRL_TRIG_MODE() volatile
    {
        TRIG3_CTRL &= ~(1u << 4u);
    }

    /**
     * Toggle TRIG3_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void toggle_TRIG3_CTRL_TRIG_MODE() volatile
    {
        TRIG3_CTRL ^= 1u << 4u;
    }

    /**
     * Get TRIG3_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline bool get_TRIG3_CTRL_SW_TRIG() volatile
    {
        return TRIG3_CTRL & (1u << 0u);
    }

    /**
     * Set TRIG3_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void set_TRIG3_CTRL_SW_TRIG() volatile
    {
        TRIG3_CTRL |= 1u << 0u;
    }

    /**
     * Clear TRIG3_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void clear_TRIG3_CTRL_SW_TRIG() volatile
    {
        TRIG3_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle TRIG3_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void toggle_TRIG3_CTRL_SW_TRIG() volatile
    {
        TRIG3_CTRL ^= 1u << 0u;
    }

    /**
     * Get all of TRIG3_CTRL's bit fields.
     *
     * (read-write) ETC_TRIG Control Register
     */
    inline void get_TRIG3_CTRL(ADC_ETC_TRIG3_CTRL_CHAINx_DONE &CHAINx_DONE,
                               bool &SYNC_MODE, uint8_t &TRIG_PRIORITY,
                               ADC_ETC_TRIG3_CTRL_TRIG_CHAIN &TRIG_CHAIN,
                               bool &TRIG_MODE, bool &SW_TRIG) volatile
    {
        uint32_t curr = TRIG3_CTRL;

        CHAINx_DONE =
            ADC_ETC_TRIG3_CTRL_CHAINx_DONE((curr >> 24u) & 0b11111111u);
        SYNC_MODE = curr & (1u << 16u);
        TRIG_PRIORITY = (curr >> 12u) & 0b111u;
        TRIG_CHAIN = ADC_ETC_TRIG3_CTRL_TRIG_CHAIN((curr >> 8u) & 0b111u);
        TRIG_MODE = curr & (1u << 4u);
        SW_TRIG = curr & (1u << 0u);
    }

    /**
     * Set all of TRIG3_CTRL's bit fields.
     *
     * (read-write) ETC_TRIG Control Register
     */
    inline void set_TRIG3_CTRL(ADC_ETC_TRIG3_CTRL_CHAINx_DONE CHAINx_DONE,
                               bool SYNC_MODE, uint8_t TRIG_PRIORITY,
                               ADC_ETC_TRIG3_CTRL_TRIG_CHAIN TRIG_CHAIN,
                               bool TRIG_MODE, bool SW_TRIG) volatile
    {
        uint32_t curr = TRIG3_CTRL;

        curr &= ~(0b11111111u << 24u);
        curr |= (std::to_underlying(CHAINx_DONE) & 0b11111111u) << 24u;
        curr &= ~(0b1u << 16u);
        curr |= (SYNC_MODE & 0b1u) << 16u;
        curr &= ~(0b111u << 12u);
        curr |= (TRIG_PRIORITY & 0b111u) << 12u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(TRIG_CHAIN) & 0b111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (TRIG_MODE & 0b1u) << 4u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG & 0b1u) << 0u;

        TRIG3_CTRL = curr;
    }

    /**
     * Get TRIG3_COUNTER's SAMPLE_INTERVAL field.
     *
     * TRIGGER sampling interval counter
     */
    inline uint16_t get_TRIG3_COUNTER_SAMPLE_INTERVAL() volatile
    {
        return (TRIG3_COUNTER >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set TRIG3_COUNTER's SAMPLE_INTERVAL field.
     *
     * TRIGGER sampling interval counter
     */
    inline void set_TRIG3_COUNTER_SAMPLE_INTERVAL(uint16_t value) volatile
    {
        uint32_t curr = TRIG3_COUNTER;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        TRIG3_COUNTER = curr;
    }

    /**
     * Get TRIG3_COUNTER's INIT_DELAY field.
     *
     * TRIGGER initial delay counter. Initial_delay =
     * (INIT_DELAY+1)*(PRE_DIVIDER+1)*ipg_clk
     */
    inline uint16_t get_TRIG3_COUNTER_INIT_DELAY() volatile
    {
        return (TRIG3_COUNTER >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TRIG3_COUNTER's INIT_DELAY field.
     *
     * TRIGGER initial delay counter. Initial_delay =
     * (INIT_DELAY+1)*(PRE_DIVIDER+1)*ipg_clk
     */
    inline void set_TRIG3_COUNTER_INIT_DELAY(uint16_t value) volatile
    {
        uint32_t curr = TRIG3_COUNTER;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TRIG3_COUNTER = curr;
    }

    /**
     * Get all of TRIG3_COUNTER's bit fields.
     *
     * (read-write) ETC_TRIG Counter Register
     */
    inline void get_TRIG3_COUNTER(uint16_t &SAMPLE_INTERVAL,
                                  uint16_t &INIT_DELAY) volatile
    {
        uint32_t curr = TRIG3_COUNTER;

        SAMPLE_INTERVAL = (curr >> 16u) & 0b1111111111111111u;
        INIT_DELAY = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of TRIG3_COUNTER's bit fields.
     *
     * (read-write) ETC_TRIG Counter Register
     */
    inline void set_TRIG3_COUNTER(uint16_t SAMPLE_INTERVAL,
                                  uint16_t INIT_DELAY) volatile
    {
        uint32_t curr = TRIG3_COUNTER;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (SAMPLE_INTERVAL & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (INIT_DELAY & 0b1111111111111111u) << 0u;

        TRIG3_COUNTER = curr;
    }

    /**
     * Get TRIG3_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline bool get_TRIG3_CHAIN_1_0_IE1_EN() volatile
    {
        return TRIG3_CHAIN_1_0 & (1u << 31u);
    }

    /**
     * Set TRIG3_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void set_TRIG3_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG3_CHAIN_1_0 |= 1u << 31u;
    }

    /**
     * Clear TRIG3_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void clear_TRIG3_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG3_CHAIN_1_0 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG3_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void toggle_TRIG3_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG3_CHAIN_1_0 ^= 1u << 31u;
    }

    /**
     * Get TRIG3_CHAIN_1_0's IE1 field.
     *
     * Segment 1 interrupt enable. (This bit field is meaningful only when
     * IE1_EN is set)
     */
    inline ADC_ETC_TRIG3_CHAIN_1_0_IE1 get_TRIG3_CHAIN_1_0_IE1() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_1_0_IE1((TRIG3_CHAIN_1_0 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG3_CHAIN_1_0's IE1 field.
     *
     * Segment 1 interrupt enable. (This bit field is meaningful only when
     * IE1_EN is set)
     */
    inline void set_TRIG3_CHAIN_1_0_IE1(
        ADC_ETC_TRIG3_CHAIN_1_0_IE1 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_1_0;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG3_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG3_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline bool get_TRIG3_CHAIN_1_0_B2B1() volatile
    {
        return TRIG3_CHAIN_1_0 & (1u << 28u);
    }

    /**
     * Set TRIG3_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void set_TRIG3_CHAIN_1_0_B2B1() volatile
    {
        TRIG3_CHAIN_1_0 |= 1u << 28u;
    }

    /**
     * Clear TRIG3_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void clear_TRIG3_CHAIN_1_0_B2B1() volatile
    {
        TRIG3_CHAIN_1_0 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG3_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void toggle_TRIG3_CHAIN_1_0_B2B1() volatile
    {
        TRIG3_CHAIN_1_0 ^= 1u << 28u;
    }

    /**
     * Get TRIG3_CHAIN_1_0's HWTS1 field.
     *
     * Segment 1 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG3_CHAIN_1_0_HWTS1 get_TRIG3_CHAIN_1_0_HWTS1() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_1_0_HWTS1((TRIG3_CHAIN_1_0 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG3_CHAIN_1_0's HWTS1 field.
     *
     * Segment 1 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG3_CHAIN_1_0_HWTS1(
        ADC_ETC_TRIG3_CHAIN_1_0_HWTS1 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_1_0;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG3_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG3_CHAIN_1_0's CSEL1 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG3_CHAIN_1_0_CSEL1 get_TRIG3_CHAIN_1_0_CSEL1() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_1_0_CSEL1((TRIG3_CHAIN_1_0 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG3_CHAIN_1_0's CSEL1 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG3_CHAIN_1_0_CSEL1(
        ADC_ETC_TRIG3_CHAIN_1_0_CSEL1 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_1_0;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG3_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG3_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline bool get_TRIG3_CHAIN_1_0_IE0_EN() volatile
    {
        return TRIG3_CHAIN_1_0 & (1u << 15u);
    }

    /**
     * Set TRIG3_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void set_TRIG3_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG3_CHAIN_1_0 |= 1u << 15u;
    }

    /**
     * Clear TRIG3_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void clear_TRIG3_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG3_CHAIN_1_0 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG3_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void toggle_TRIG3_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG3_CHAIN_1_0 ^= 1u << 15u;
    }

    /**
     * Get TRIG3_CHAIN_1_0's IE0 field.
     *
     * Segment 0 interrupt enable. (This bit field is meaningful only when
     * IE0_EN is set)
     */
    inline ADC_ETC_TRIG3_CHAIN_1_0_IE0 get_TRIG3_CHAIN_1_0_IE0() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_1_0_IE0((TRIG3_CHAIN_1_0 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG3_CHAIN_1_0's IE0 field.
     *
     * Segment 0 interrupt enable. (This bit field is meaningful only when
     * IE0_EN is set)
     */
    inline void set_TRIG3_CHAIN_1_0_IE0(
        ADC_ETC_TRIG3_CHAIN_1_0_IE0 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_1_0;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG3_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG3_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline bool get_TRIG3_CHAIN_1_0_B2B0() volatile
    {
        return TRIG3_CHAIN_1_0 & (1u << 12u);
    }

    /**
     * Set TRIG3_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void set_TRIG3_CHAIN_1_0_B2B0() volatile
    {
        TRIG3_CHAIN_1_0 |= 1u << 12u;
    }

    /**
     * Clear TRIG3_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void clear_TRIG3_CHAIN_1_0_B2B0() volatile
    {
        TRIG3_CHAIN_1_0 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG3_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void toggle_TRIG3_CHAIN_1_0_B2B0() volatile
    {
        TRIG3_CHAIN_1_0 ^= 1u << 12u;
    }

    /**
     * Get TRIG3_CHAIN_1_0's HWTS0 field.
     *
     * Segment 0 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG3_CHAIN_1_0_HWTS0 get_TRIG3_CHAIN_1_0_HWTS0() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_1_0_HWTS0((TRIG3_CHAIN_1_0 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG3_CHAIN_1_0's HWTS0 field.
     *
     * Segment 0 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG3_CHAIN_1_0_HWTS0(
        ADC_ETC_TRIG3_CHAIN_1_0_HWTS0 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_1_0;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG3_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG3_CHAIN_1_0's CSEL0 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG3_CHAIN_1_0_CSEL0 get_TRIG3_CHAIN_1_0_CSEL0() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_1_0_CSEL0((TRIG3_CHAIN_1_0 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG3_CHAIN_1_0's CSEL0 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG3_CHAIN_1_0_CSEL0(
        ADC_ETC_TRIG3_CHAIN_1_0_CSEL0 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_1_0;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG3_CHAIN_1_0 = curr;
    }

    /**
     * Get all of TRIG3_CHAIN_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Chain 0/1 Register
     */
    inline void get_TRIG3_CHAIN_1_0(
        bool &IE1_EN, ADC_ETC_TRIG3_CHAIN_1_0_IE1 &IE1, bool &B2B1,
        ADC_ETC_TRIG3_CHAIN_1_0_HWTS1 &HWTS1,
        ADC_ETC_TRIG3_CHAIN_1_0_CSEL1 &CSEL1, bool &IE0_EN,
        ADC_ETC_TRIG3_CHAIN_1_0_IE0 &IE0, bool &B2B0,
        ADC_ETC_TRIG3_CHAIN_1_0_HWTS0 &HWTS0,
        ADC_ETC_TRIG3_CHAIN_1_0_CSEL0 &CSEL0) volatile
    {
        uint32_t curr = TRIG3_CHAIN_1_0;

        IE1_EN = curr & (1u << 31u);
        IE1 = ADC_ETC_TRIG3_CHAIN_1_0_IE1((curr >> 29u) & 0b11u);
        B2B1 = curr & (1u << 28u);
        HWTS1 = ADC_ETC_TRIG3_CHAIN_1_0_HWTS1((curr >> 20u) & 0b11111111u);
        CSEL1 = ADC_ETC_TRIG3_CHAIN_1_0_CSEL1((curr >> 16u) & 0b1111u);
        IE0_EN = curr & (1u << 15u);
        IE0 = ADC_ETC_TRIG3_CHAIN_1_0_IE0((curr >> 13u) & 0b11u);
        B2B0 = curr & (1u << 12u);
        HWTS0 = ADC_ETC_TRIG3_CHAIN_1_0_HWTS0((curr >> 4u) & 0b11111111u);
        CSEL0 = ADC_ETC_TRIG3_CHAIN_1_0_CSEL0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG3_CHAIN_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Chain 0/1 Register
     */
    inline void set_TRIG3_CHAIN_1_0(
        bool IE1_EN, ADC_ETC_TRIG3_CHAIN_1_0_IE1 IE1, bool B2B1,
        ADC_ETC_TRIG3_CHAIN_1_0_HWTS1 HWTS1,
        ADC_ETC_TRIG3_CHAIN_1_0_CSEL1 CSEL1, bool IE0_EN,
        ADC_ETC_TRIG3_CHAIN_1_0_IE0 IE0, bool B2B0,
        ADC_ETC_TRIG3_CHAIN_1_0_HWTS0 HWTS0,
        ADC_ETC_TRIG3_CHAIN_1_0_CSEL0 CSEL0) volatile
    {
        uint32_t curr = TRIG3_CHAIN_1_0;

        curr &= ~(0b1u << 31u);
        curr |= (IE1_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE1) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B1 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS1) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL1) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE0_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE0) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B0 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS0) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL0) & 0b1111u) << 0u;

        TRIG3_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG3_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline bool get_TRIG3_CHAIN_3_2_IE3_EN() volatile
    {
        return TRIG3_CHAIN_3_2 & (1u << 31u);
    }

    /**
     * Set TRIG3_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void set_TRIG3_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG3_CHAIN_3_2 |= 1u << 31u;
    }

    /**
     * Clear TRIG3_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void clear_TRIG3_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG3_CHAIN_3_2 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG3_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void toggle_TRIG3_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG3_CHAIN_3_2 ^= 1u << 31u;
    }

    /**
     * Get TRIG3_CHAIN_3_2's IE3 field.
     *
     * Segment 3 interrupt enable. (This bit field is meaningful only when
     * IE3_EN is set)
     */
    inline ADC_ETC_TRIG3_CHAIN_3_2_IE3 get_TRIG3_CHAIN_3_2_IE3() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_3_2_IE3((TRIG3_CHAIN_3_2 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG3_CHAIN_3_2's IE3 field.
     *
     * Segment 3 interrupt enable. (This bit field is meaningful only when
     * IE3_EN is set)
     */
    inline void set_TRIG3_CHAIN_3_2_IE3(
        ADC_ETC_TRIG3_CHAIN_3_2_IE3 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_3_2;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG3_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG3_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline bool get_TRIG3_CHAIN_3_2_B2B3() volatile
    {
        return TRIG3_CHAIN_3_2 & (1u << 28u);
    }

    /**
     * Set TRIG3_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void set_TRIG3_CHAIN_3_2_B2B3() volatile
    {
        TRIG3_CHAIN_3_2 |= 1u << 28u;
    }

    /**
     * Clear TRIG3_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void clear_TRIG3_CHAIN_3_2_B2B3() volatile
    {
        TRIG3_CHAIN_3_2 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG3_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void toggle_TRIG3_CHAIN_3_2_B2B3() volatile
    {
        TRIG3_CHAIN_3_2 ^= 1u << 28u;
    }

    /**
     * Get TRIG3_CHAIN_3_2's HWTS3 field.
     *
     * Segment 3 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG3_CHAIN_3_2_HWTS3 get_TRIG3_CHAIN_3_2_HWTS3() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_3_2_HWTS3((TRIG3_CHAIN_3_2 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG3_CHAIN_3_2's HWTS3 field.
     *
     * Segment 3 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG3_CHAIN_3_2_HWTS3(
        ADC_ETC_TRIG3_CHAIN_3_2_HWTS3 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_3_2;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG3_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG3_CHAIN_3_2's CSEL3 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG3_CHAIN_3_2_CSEL3 get_TRIG3_CHAIN_3_2_CSEL3() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_3_2_CSEL3((TRIG3_CHAIN_3_2 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG3_CHAIN_3_2's CSEL3 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG3_CHAIN_3_2_CSEL3(
        ADC_ETC_TRIG3_CHAIN_3_2_CSEL3 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_3_2;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG3_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG3_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline bool get_TRIG3_CHAIN_3_2_IE2_EN() volatile
    {
        return TRIG3_CHAIN_3_2 & (1u << 15u);
    }

    /**
     * Set TRIG3_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void set_TRIG3_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG3_CHAIN_3_2 |= 1u << 15u;
    }

    /**
     * Clear TRIG3_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void clear_TRIG3_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG3_CHAIN_3_2 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG3_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void toggle_TRIG3_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG3_CHAIN_3_2 ^= 1u << 15u;
    }

    /**
     * Get TRIG3_CHAIN_3_2's IE2 field.
     *
     * Segment 2 interrupt enable. (This bit field is meaningful only when
     * IE2_EN is set)
     */
    inline ADC_ETC_TRIG3_CHAIN_3_2_IE2 get_TRIG3_CHAIN_3_2_IE2() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_3_2_IE2((TRIG3_CHAIN_3_2 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG3_CHAIN_3_2's IE2 field.
     *
     * Segment 2 interrupt enable. (This bit field is meaningful only when
     * IE2_EN is set)
     */
    inline void set_TRIG3_CHAIN_3_2_IE2(
        ADC_ETC_TRIG3_CHAIN_3_2_IE2 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_3_2;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG3_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG3_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline bool get_TRIG3_CHAIN_3_2_B2B2() volatile
    {
        return TRIG3_CHAIN_3_2 & (1u << 12u);
    }

    /**
     * Set TRIG3_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void set_TRIG3_CHAIN_3_2_B2B2() volatile
    {
        TRIG3_CHAIN_3_2 |= 1u << 12u;
    }

    /**
     * Clear TRIG3_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void clear_TRIG3_CHAIN_3_2_B2B2() volatile
    {
        TRIG3_CHAIN_3_2 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG3_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void toggle_TRIG3_CHAIN_3_2_B2B2() volatile
    {
        TRIG3_CHAIN_3_2 ^= 1u << 12u;
    }

    /**
     * Get TRIG3_CHAIN_3_2's HWTS2 field.
     *
     * Segment 2 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG3_CHAIN_3_2_HWTS2 get_TRIG3_CHAIN_3_2_HWTS2() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_3_2_HWTS2((TRIG3_CHAIN_3_2 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG3_CHAIN_3_2's HWTS2 field.
     *
     * Segment 2 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG3_CHAIN_3_2_HWTS2(
        ADC_ETC_TRIG3_CHAIN_3_2_HWTS2 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_3_2;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG3_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG3_CHAIN_3_2's CSEL2 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG3_CHAIN_3_2_CSEL2 get_TRIG3_CHAIN_3_2_CSEL2() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_3_2_CSEL2((TRIG3_CHAIN_3_2 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG3_CHAIN_3_2's CSEL2 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG3_CHAIN_3_2_CSEL2(
        ADC_ETC_TRIG3_CHAIN_3_2_CSEL2 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_3_2;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG3_CHAIN_3_2 = curr;
    }

    /**
     * Get all of TRIG3_CHAIN_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Chain 2/3 Register
     */
    inline void get_TRIG3_CHAIN_3_2(
        bool &IE3_EN, ADC_ETC_TRIG3_CHAIN_3_2_IE3 &IE3, bool &B2B3,
        ADC_ETC_TRIG3_CHAIN_3_2_HWTS3 &HWTS3,
        ADC_ETC_TRIG3_CHAIN_3_2_CSEL3 &CSEL3, bool &IE2_EN,
        ADC_ETC_TRIG3_CHAIN_3_2_IE2 &IE2, bool &B2B2,
        ADC_ETC_TRIG3_CHAIN_3_2_HWTS2 &HWTS2,
        ADC_ETC_TRIG3_CHAIN_3_2_CSEL2 &CSEL2) volatile
    {
        uint32_t curr = TRIG3_CHAIN_3_2;

        IE3_EN = curr & (1u << 31u);
        IE3 = ADC_ETC_TRIG3_CHAIN_3_2_IE3((curr >> 29u) & 0b11u);
        B2B3 = curr & (1u << 28u);
        HWTS3 = ADC_ETC_TRIG3_CHAIN_3_2_HWTS3((curr >> 20u) & 0b11111111u);
        CSEL3 = ADC_ETC_TRIG3_CHAIN_3_2_CSEL3((curr >> 16u) & 0b1111u);
        IE2_EN = curr & (1u << 15u);
        IE2 = ADC_ETC_TRIG3_CHAIN_3_2_IE2((curr >> 13u) & 0b11u);
        B2B2 = curr & (1u << 12u);
        HWTS2 = ADC_ETC_TRIG3_CHAIN_3_2_HWTS2((curr >> 4u) & 0b11111111u);
        CSEL2 = ADC_ETC_TRIG3_CHAIN_3_2_CSEL2((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG3_CHAIN_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Chain 2/3 Register
     */
    inline void set_TRIG3_CHAIN_3_2(
        bool IE3_EN, ADC_ETC_TRIG3_CHAIN_3_2_IE3 IE3, bool B2B3,
        ADC_ETC_TRIG3_CHAIN_3_2_HWTS3 HWTS3,
        ADC_ETC_TRIG3_CHAIN_3_2_CSEL3 CSEL3, bool IE2_EN,
        ADC_ETC_TRIG3_CHAIN_3_2_IE2 IE2, bool B2B2,
        ADC_ETC_TRIG3_CHAIN_3_2_HWTS2 HWTS2,
        ADC_ETC_TRIG3_CHAIN_3_2_CSEL2 CSEL2) volatile
    {
        uint32_t curr = TRIG3_CHAIN_3_2;

        curr &= ~(0b1u << 31u);
        curr |= (IE3_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE3) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B3 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS3) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL3) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE2_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE2) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B2 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS2) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL2) & 0b1111u) << 0u;

        TRIG3_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG3_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline bool get_TRIG3_CHAIN_5_4_IE5_EN() volatile
    {
        return TRIG3_CHAIN_5_4 & (1u << 31u);
    }

    /**
     * Set TRIG3_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void set_TRIG3_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG3_CHAIN_5_4 |= 1u << 31u;
    }

    /**
     * Clear TRIG3_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void clear_TRIG3_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG3_CHAIN_5_4 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG3_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void toggle_TRIG3_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG3_CHAIN_5_4 ^= 1u << 31u;
    }

    /**
     * Get TRIG3_CHAIN_5_4's IE5 field.
     *
     * Segment 5 interrupt enable. (This bit field is meaningful only when
     * IE5_EN is set)
     */
    inline ADC_ETC_TRIG3_CHAIN_5_4_IE5 get_TRIG3_CHAIN_5_4_IE5() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_5_4_IE5((TRIG3_CHAIN_5_4 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG3_CHAIN_5_4's IE5 field.
     *
     * Segment 5 interrupt enable. (This bit field is meaningful only when
     * IE5_EN is set)
     */
    inline void set_TRIG3_CHAIN_5_4_IE5(
        ADC_ETC_TRIG3_CHAIN_5_4_IE5 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_5_4;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG3_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG3_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline bool get_TRIG3_CHAIN_5_4_B2B5() volatile
    {
        return TRIG3_CHAIN_5_4 & (1u << 28u);
    }

    /**
     * Set TRIG3_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void set_TRIG3_CHAIN_5_4_B2B5() volatile
    {
        TRIG3_CHAIN_5_4 |= 1u << 28u;
    }

    /**
     * Clear TRIG3_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void clear_TRIG3_CHAIN_5_4_B2B5() volatile
    {
        TRIG3_CHAIN_5_4 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG3_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void toggle_TRIG3_CHAIN_5_4_B2B5() volatile
    {
        TRIG3_CHAIN_5_4 ^= 1u << 28u;
    }

    /**
     * Get TRIG3_CHAIN_5_4's HWTS5 field.
     *
     * Segment 5 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG3_CHAIN_5_4_HWTS5 get_TRIG3_CHAIN_5_4_HWTS5() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_5_4_HWTS5((TRIG3_CHAIN_5_4 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG3_CHAIN_5_4's HWTS5 field.
     *
     * Segment 5 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG3_CHAIN_5_4_HWTS5(
        ADC_ETC_TRIG3_CHAIN_5_4_HWTS5 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_5_4;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG3_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG3_CHAIN_5_4's CSEL5 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG3_CHAIN_5_4_CSEL5 get_TRIG3_CHAIN_5_4_CSEL5() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_5_4_CSEL5((TRIG3_CHAIN_5_4 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG3_CHAIN_5_4's CSEL5 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG3_CHAIN_5_4_CSEL5(
        ADC_ETC_TRIG3_CHAIN_5_4_CSEL5 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_5_4;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG3_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG3_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline bool get_TRIG3_CHAIN_5_4_IE4_EN() volatile
    {
        return TRIG3_CHAIN_5_4 & (1u << 15u);
    }

    /**
     * Set TRIG3_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void set_TRIG3_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG3_CHAIN_5_4 |= 1u << 15u;
    }

    /**
     * Clear TRIG3_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void clear_TRIG3_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG3_CHAIN_5_4 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG3_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void toggle_TRIG3_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG3_CHAIN_5_4 ^= 1u << 15u;
    }

    /**
     * Get TRIG3_CHAIN_5_4's IE4 field.
     *
     * Segment 4 interrupt enable. (This bit field is meaningful only when
     * IE4_EN is set)
     */
    inline ADC_ETC_TRIG3_CHAIN_5_4_IE4 get_TRIG3_CHAIN_5_4_IE4() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_5_4_IE4((TRIG3_CHAIN_5_4 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG3_CHAIN_5_4's IE4 field.
     *
     * Segment 4 interrupt enable. (This bit field is meaningful only when
     * IE4_EN is set)
     */
    inline void set_TRIG3_CHAIN_5_4_IE4(
        ADC_ETC_TRIG3_CHAIN_5_4_IE4 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_5_4;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG3_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG3_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline bool get_TRIG3_CHAIN_5_4_B2B4() volatile
    {
        return TRIG3_CHAIN_5_4 & (1u << 12u);
    }

    /**
     * Set TRIG3_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void set_TRIG3_CHAIN_5_4_B2B4() volatile
    {
        TRIG3_CHAIN_5_4 |= 1u << 12u;
    }

    /**
     * Clear TRIG3_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void clear_TRIG3_CHAIN_5_4_B2B4() volatile
    {
        TRIG3_CHAIN_5_4 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG3_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void toggle_TRIG3_CHAIN_5_4_B2B4() volatile
    {
        TRIG3_CHAIN_5_4 ^= 1u << 12u;
    }

    /**
     * Get TRIG3_CHAIN_5_4's HWTS4 field.
     *
     * Segment 4 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG3_CHAIN_5_4_HWTS4 get_TRIG3_CHAIN_5_4_HWTS4() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_5_4_HWTS4((TRIG3_CHAIN_5_4 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG3_CHAIN_5_4's HWTS4 field.
     *
     * Segment 4 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG3_CHAIN_5_4_HWTS4(
        ADC_ETC_TRIG3_CHAIN_5_4_HWTS4 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_5_4;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG3_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG3_CHAIN_5_4's CSEL4 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG3_CHAIN_5_4_CSEL4 get_TRIG3_CHAIN_5_4_CSEL4() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_5_4_CSEL4((TRIG3_CHAIN_5_4 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG3_CHAIN_5_4's CSEL4 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG3_CHAIN_5_4_CSEL4(
        ADC_ETC_TRIG3_CHAIN_5_4_CSEL4 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_5_4;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG3_CHAIN_5_4 = curr;
    }

    /**
     * Get all of TRIG3_CHAIN_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Chain 4/5 Register
     */
    inline void get_TRIG3_CHAIN_5_4(
        bool &IE5_EN, ADC_ETC_TRIG3_CHAIN_5_4_IE5 &IE5, bool &B2B5,
        ADC_ETC_TRIG3_CHAIN_5_4_HWTS5 &HWTS5,
        ADC_ETC_TRIG3_CHAIN_5_4_CSEL5 &CSEL5, bool &IE4_EN,
        ADC_ETC_TRIG3_CHAIN_5_4_IE4 &IE4, bool &B2B4,
        ADC_ETC_TRIG3_CHAIN_5_4_HWTS4 &HWTS4,
        ADC_ETC_TRIG3_CHAIN_5_4_CSEL4 &CSEL4) volatile
    {
        uint32_t curr = TRIG3_CHAIN_5_4;

        IE5_EN = curr & (1u << 31u);
        IE5 = ADC_ETC_TRIG3_CHAIN_5_4_IE5((curr >> 29u) & 0b11u);
        B2B5 = curr & (1u << 28u);
        HWTS5 = ADC_ETC_TRIG3_CHAIN_5_4_HWTS5((curr >> 20u) & 0b11111111u);
        CSEL5 = ADC_ETC_TRIG3_CHAIN_5_4_CSEL5((curr >> 16u) & 0b1111u);
        IE4_EN = curr & (1u << 15u);
        IE4 = ADC_ETC_TRIG3_CHAIN_5_4_IE4((curr >> 13u) & 0b11u);
        B2B4 = curr & (1u << 12u);
        HWTS4 = ADC_ETC_TRIG3_CHAIN_5_4_HWTS4((curr >> 4u) & 0b11111111u);
        CSEL4 = ADC_ETC_TRIG3_CHAIN_5_4_CSEL4((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG3_CHAIN_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Chain 4/5 Register
     */
    inline void set_TRIG3_CHAIN_5_4(
        bool IE5_EN, ADC_ETC_TRIG3_CHAIN_5_4_IE5 IE5, bool B2B5,
        ADC_ETC_TRIG3_CHAIN_5_4_HWTS5 HWTS5,
        ADC_ETC_TRIG3_CHAIN_5_4_CSEL5 CSEL5, bool IE4_EN,
        ADC_ETC_TRIG3_CHAIN_5_4_IE4 IE4, bool B2B4,
        ADC_ETC_TRIG3_CHAIN_5_4_HWTS4 HWTS4,
        ADC_ETC_TRIG3_CHAIN_5_4_CSEL4 CSEL4) volatile
    {
        uint32_t curr = TRIG3_CHAIN_5_4;

        curr &= ~(0b1u << 31u);
        curr |= (IE5_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE5) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B5 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS5) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL5) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE4_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE4) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B4 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS4) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL4) & 0b1111u) << 0u;

        TRIG3_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG3_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline bool get_TRIG3_CHAIN_7_6_IE7_EN() volatile
    {
        return TRIG3_CHAIN_7_6 & (1u << 31u);
    }

    /**
     * Set TRIG3_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void set_TRIG3_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG3_CHAIN_7_6 |= 1u << 31u;
    }

    /**
     * Clear TRIG3_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void clear_TRIG3_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG3_CHAIN_7_6 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG3_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void toggle_TRIG3_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG3_CHAIN_7_6 ^= 1u << 31u;
    }

    /**
     * Get TRIG3_CHAIN_7_6's IE7 field.
     *
     * Segment 7 interrupt enable. (This bit field is meaningful only when
     * IE7_EN is set)
     */
    inline ADC_ETC_TRIG3_CHAIN_7_6_IE7 get_TRIG3_CHAIN_7_6_IE7() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_7_6_IE7((TRIG3_CHAIN_7_6 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG3_CHAIN_7_6's IE7 field.
     *
     * Segment 7 interrupt enable. (This bit field is meaningful only when
     * IE7_EN is set)
     */
    inline void set_TRIG3_CHAIN_7_6_IE7(
        ADC_ETC_TRIG3_CHAIN_7_6_IE7 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_7_6;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG3_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG3_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline bool get_TRIG3_CHAIN_7_6_B2B7() volatile
    {
        return TRIG3_CHAIN_7_6 & (1u << 28u);
    }

    /**
     * Set TRIG3_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void set_TRIG3_CHAIN_7_6_B2B7() volatile
    {
        TRIG3_CHAIN_7_6 |= 1u << 28u;
    }

    /**
     * Clear TRIG3_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void clear_TRIG3_CHAIN_7_6_B2B7() volatile
    {
        TRIG3_CHAIN_7_6 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG3_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void toggle_TRIG3_CHAIN_7_6_B2B7() volatile
    {
        TRIG3_CHAIN_7_6 ^= 1u << 28u;
    }

    /**
     * Get TRIG3_CHAIN_7_6's HWTS7 field.
     *
     * Segment 7 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG3_CHAIN_7_6_HWTS7 get_TRIG3_CHAIN_7_6_HWTS7() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_7_6_HWTS7((TRIG3_CHAIN_7_6 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG3_CHAIN_7_6's HWTS7 field.
     *
     * Segment 7 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG3_CHAIN_7_6_HWTS7(
        ADC_ETC_TRIG3_CHAIN_7_6_HWTS7 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_7_6;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG3_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG3_CHAIN_7_6's CSEL7 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG3_CHAIN_7_6_CSEL7 get_TRIG3_CHAIN_7_6_CSEL7() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_7_6_CSEL7((TRIG3_CHAIN_7_6 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG3_CHAIN_7_6's CSEL7 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG3_CHAIN_7_6_CSEL7(
        ADC_ETC_TRIG3_CHAIN_7_6_CSEL7 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_7_6;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG3_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG3_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline bool get_TRIG3_CHAIN_7_6_IE6_EN() volatile
    {
        return TRIG3_CHAIN_7_6 & (1u << 15u);
    }

    /**
     * Set TRIG3_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void set_TRIG3_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG3_CHAIN_7_6 |= 1u << 15u;
    }

    /**
     * Clear TRIG3_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void clear_TRIG3_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG3_CHAIN_7_6 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG3_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void toggle_TRIG3_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG3_CHAIN_7_6 ^= 1u << 15u;
    }

    /**
     * Get TRIG3_CHAIN_7_6's IE6 field.
     *
     * Segment 6 interrupt enable. (This bit field is meaningful only when
     * IE6_EN is set)
     */
    inline ADC_ETC_TRIG3_CHAIN_7_6_IE6 get_TRIG3_CHAIN_7_6_IE6() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_7_6_IE6((TRIG3_CHAIN_7_6 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG3_CHAIN_7_6's IE6 field.
     *
     * Segment 6 interrupt enable. (This bit field is meaningful only when
     * IE6_EN is set)
     */
    inline void set_TRIG3_CHAIN_7_6_IE6(
        ADC_ETC_TRIG3_CHAIN_7_6_IE6 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_7_6;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG3_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG3_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline bool get_TRIG3_CHAIN_7_6_B2B6() volatile
    {
        return TRIG3_CHAIN_7_6 & (1u << 12u);
    }

    /**
     * Set TRIG3_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void set_TRIG3_CHAIN_7_6_B2B6() volatile
    {
        TRIG3_CHAIN_7_6 |= 1u << 12u;
    }

    /**
     * Clear TRIG3_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void clear_TRIG3_CHAIN_7_6_B2B6() volatile
    {
        TRIG3_CHAIN_7_6 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG3_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void toggle_TRIG3_CHAIN_7_6_B2B6() volatile
    {
        TRIG3_CHAIN_7_6 ^= 1u << 12u;
    }

    /**
     * Get TRIG3_CHAIN_7_6's HWTS6 field.
     *
     * Segment 6 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG3_CHAIN_7_6_HWTS6 get_TRIG3_CHAIN_7_6_HWTS6() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_7_6_HWTS6((TRIG3_CHAIN_7_6 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG3_CHAIN_7_6's HWTS6 field.
     *
     * Segment 6 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG3_CHAIN_7_6_HWTS6(
        ADC_ETC_TRIG3_CHAIN_7_6_HWTS6 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_7_6;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG3_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG3_CHAIN_7_6's CSEL6 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG3_CHAIN_7_6_CSEL6 get_TRIG3_CHAIN_7_6_CSEL6() volatile
    {
        return ADC_ETC_TRIG3_CHAIN_7_6_CSEL6((TRIG3_CHAIN_7_6 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG3_CHAIN_7_6's CSEL6 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG3_CHAIN_7_6_CSEL6(
        ADC_ETC_TRIG3_CHAIN_7_6_CSEL6 value) volatile
    {
        uint32_t curr = TRIG3_CHAIN_7_6;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG3_CHAIN_7_6 = curr;
    }

    /**
     * Get all of TRIG3_CHAIN_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Chain 6/7 Register
     */
    inline void get_TRIG3_CHAIN_7_6(
        bool &IE7_EN, ADC_ETC_TRIG3_CHAIN_7_6_IE7 &IE7, bool &B2B7,
        ADC_ETC_TRIG3_CHAIN_7_6_HWTS7 &HWTS7,
        ADC_ETC_TRIG3_CHAIN_7_6_CSEL7 &CSEL7, bool &IE6_EN,
        ADC_ETC_TRIG3_CHAIN_7_6_IE6 &IE6, bool &B2B6,
        ADC_ETC_TRIG3_CHAIN_7_6_HWTS6 &HWTS6,
        ADC_ETC_TRIG3_CHAIN_7_6_CSEL6 &CSEL6) volatile
    {
        uint32_t curr = TRIG3_CHAIN_7_6;

        IE7_EN = curr & (1u << 31u);
        IE7 = ADC_ETC_TRIG3_CHAIN_7_6_IE7((curr >> 29u) & 0b11u);
        B2B7 = curr & (1u << 28u);
        HWTS7 = ADC_ETC_TRIG3_CHAIN_7_6_HWTS7((curr >> 20u) & 0b11111111u);
        CSEL7 = ADC_ETC_TRIG3_CHAIN_7_6_CSEL7((curr >> 16u) & 0b1111u);
        IE6_EN = curr & (1u << 15u);
        IE6 = ADC_ETC_TRIG3_CHAIN_7_6_IE6((curr >> 13u) & 0b11u);
        B2B6 = curr & (1u << 12u);
        HWTS6 = ADC_ETC_TRIG3_CHAIN_7_6_HWTS6((curr >> 4u) & 0b11111111u);
        CSEL6 = ADC_ETC_TRIG3_CHAIN_7_6_CSEL6((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG3_CHAIN_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Chain 6/7 Register
     */
    inline void set_TRIG3_CHAIN_7_6(
        bool IE7_EN, ADC_ETC_TRIG3_CHAIN_7_6_IE7 IE7, bool B2B7,
        ADC_ETC_TRIG3_CHAIN_7_6_HWTS7 HWTS7,
        ADC_ETC_TRIG3_CHAIN_7_6_CSEL7 CSEL7, bool IE6_EN,
        ADC_ETC_TRIG3_CHAIN_7_6_IE6 IE6, bool B2B6,
        ADC_ETC_TRIG3_CHAIN_7_6_HWTS6 HWTS6,
        ADC_ETC_TRIG3_CHAIN_7_6_CSEL6 CSEL6) volatile
    {
        uint32_t curr = TRIG3_CHAIN_7_6;

        curr &= ~(0b1u << 31u);
        curr |= (IE7_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE7) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B7 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS7) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL7) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE6_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE6) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B6 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS6) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL6) & 0b1111u) << 0u;

        TRIG3_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG3_RESULT_1_0's DATA1 field.
     *
     * Result DATA1The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG3_RESULT_1_0_DATA1() volatile
    {
        return (TRIG3_RESULT_1_0 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG3_RESULT_1_0's DATA0 field.
     *
     * Result DATA0The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG3_RESULT_1_0_DATA0() volatile
    {
        return (TRIG3_RESULT_1_0 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG3_RESULT_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 1/0 Register
     */
    inline void get_TRIG3_RESULT_1_0(uint16_t &DATA1, uint16_t &DATA0) volatile
    {
        uint32_t curr = TRIG3_RESULT_1_0;

        DATA1 = (curr >> 16u) & 0b111111111111u;
        DATA0 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG3_RESULT_3_2's DATA3 field.
     *
     * Result DATA3The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG3_RESULT_3_2_DATA3() volatile
    {
        return (TRIG3_RESULT_3_2 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG3_RESULT_3_2's DATA2 field.
     *
     * Result DATA2The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG3_RESULT_3_2_DATA2() volatile
    {
        return (TRIG3_RESULT_3_2 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG3_RESULT_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 3/2 Register
     */
    inline void get_TRIG3_RESULT_3_2(uint16_t &DATA3, uint16_t &DATA2) volatile
    {
        uint32_t curr = TRIG3_RESULT_3_2;

        DATA3 = (curr >> 16u) & 0b111111111111u;
        DATA2 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG3_RESULT_5_4's DATA5 field.
     *
     * Result DATA5The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG3_RESULT_5_4_DATA5() volatile
    {
        return (TRIG3_RESULT_5_4 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG3_RESULT_5_4's DATA4 field.
     *
     * Result DATA4The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG3_RESULT_5_4_DATA4() volatile
    {
        return (TRIG3_RESULT_5_4 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG3_RESULT_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 5/4 Register
     */
    inline void get_TRIG3_RESULT_5_4(uint16_t &DATA5, uint16_t &DATA4) volatile
    {
        uint32_t curr = TRIG3_RESULT_5_4;

        DATA5 = (curr >> 16u) & 0b111111111111u;
        DATA4 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG3_RESULT_7_6's DATA7 field.
     *
     * Result DATA7The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG3_RESULT_7_6_DATA7() volatile
    {
        return (TRIG3_RESULT_7_6 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG3_RESULT_7_6's DATA6 field.
     *
     * Result DATA6The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG3_RESULT_7_6_DATA6() volatile
    {
        return (TRIG3_RESULT_7_6 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG3_RESULT_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 7/6 Register
     */
    inline void get_TRIG3_RESULT_7_6(uint16_t &DATA7, uint16_t &DATA6) volatile
    {
        uint32_t curr = TRIG3_RESULT_7_6;

        DATA7 = (curr >> 16u) & 0b111111111111u;
        DATA6 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG4_CTRL's CHAINx_DONE field.
     *
     * Segment x done detection
     */
    inline ADC_ETC_TRIG4_CTRL_CHAINx_DONE get_TRIG4_CTRL_CHAINx_DONE() volatile
    {
        return ADC_ETC_TRIG4_CTRL_CHAINx_DONE((TRIG4_CTRL >> 24u) &
                                              0b11111111u);
    }

    /**
     * Set TRIG4_CTRL's CHAINx_DONE field.
     *
     * Segment x done detection
     */
    inline void set_TRIG4_CTRL_CHAINx_DONE(
        ADC_ETC_TRIG4_CTRL_CHAINx_DONE value) volatile
    {
        uint32_t curr = TRIG4_CTRL;

        curr &= ~(0b11111111u << 24u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 24u;

        TRIG4_CTRL = curr;
    }

    /**
     * Get TRIG4_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline bool get_TRIG4_CTRL_SYNC_MODE() volatile
    {
        return TRIG4_CTRL & (1u << 16u);
    }

    /**
     * Set TRIG4_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void set_TRIG4_CTRL_SYNC_MODE() volatile
    {
        TRIG4_CTRL |= 1u << 16u;
    }

    /**
     * Clear TRIG4_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void clear_TRIG4_CTRL_SYNC_MODE() volatile
    {
        TRIG4_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle TRIG4_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void toggle_TRIG4_CTRL_SYNC_MODE() volatile
    {
        TRIG4_CTRL ^= 1u << 16u;
    }

    /**
     * Get TRIG4_CTRL's TRIG_PRIORITY field.
     *
     * External trigger priority, 7 is highest priority, while 0 is lowest
     */
    inline uint8_t get_TRIG4_CTRL_TRIG_PRIORITY() volatile
    {
        return (TRIG4_CTRL >> 12u) & 0b111u;
    }

    /**
     * Set TRIG4_CTRL's TRIG_PRIORITY field.
     *
     * External trigger priority, 7 is highest priority, while 0 is lowest
     */
    inline void set_TRIG4_CTRL_TRIG_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = TRIG4_CTRL;

        curr &= ~(0b111u << 12u);
        curr |= (value & 0b111u) << 12u;

        TRIG4_CTRL = curr;
    }

    /**
     * Get TRIG4_CTRL's TRIG_CHAIN field.
     *
     * The number of segments inside the trigger chain of TRIGa.
     */
    inline ADC_ETC_TRIG4_CTRL_TRIG_CHAIN get_TRIG4_CTRL_TRIG_CHAIN() volatile
    {
        return ADC_ETC_TRIG4_CTRL_TRIG_CHAIN((TRIG4_CTRL >> 8u) & 0b111u);
    }

    /**
     * Set TRIG4_CTRL's TRIG_CHAIN field.
     *
     * The number of segments inside the trigger chain of TRIGa.
     */
    inline void set_TRIG4_CTRL_TRIG_CHAIN(
        ADC_ETC_TRIG4_CTRL_TRIG_CHAIN value) volatile
    {
        uint32_t curr = TRIG4_CTRL;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TRIG4_CTRL = curr;
    }

    /**
     * Get TRIG4_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline bool get_TRIG4_CTRL_TRIG_MODE() volatile
    {
        return TRIG4_CTRL & (1u << 4u);
    }

    /**
     * Set TRIG4_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void set_TRIG4_CTRL_TRIG_MODE() volatile
    {
        TRIG4_CTRL |= 1u << 4u;
    }

    /**
     * Clear TRIG4_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void clear_TRIG4_CTRL_TRIG_MODE() volatile
    {
        TRIG4_CTRL &= ~(1u << 4u);
    }

    /**
     * Toggle TRIG4_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void toggle_TRIG4_CTRL_TRIG_MODE() volatile
    {
        TRIG4_CTRL ^= 1u << 4u;
    }

    /**
     * Get TRIG4_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline bool get_TRIG4_CTRL_SW_TRIG() volatile
    {
        return TRIG4_CTRL & (1u << 0u);
    }

    /**
     * Set TRIG4_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void set_TRIG4_CTRL_SW_TRIG() volatile
    {
        TRIG4_CTRL |= 1u << 0u;
    }

    /**
     * Clear TRIG4_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void clear_TRIG4_CTRL_SW_TRIG() volatile
    {
        TRIG4_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle TRIG4_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void toggle_TRIG4_CTRL_SW_TRIG() volatile
    {
        TRIG4_CTRL ^= 1u << 0u;
    }

    /**
     * Get all of TRIG4_CTRL's bit fields.
     *
     * (read-write) ETC_TRIG Control Register
     */
    inline void get_TRIG4_CTRL(ADC_ETC_TRIG4_CTRL_CHAINx_DONE &CHAINx_DONE,
                               bool &SYNC_MODE, uint8_t &TRIG_PRIORITY,
                               ADC_ETC_TRIG4_CTRL_TRIG_CHAIN &TRIG_CHAIN,
                               bool &TRIG_MODE, bool &SW_TRIG) volatile
    {
        uint32_t curr = TRIG4_CTRL;

        CHAINx_DONE =
            ADC_ETC_TRIG4_CTRL_CHAINx_DONE((curr >> 24u) & 0b11111111u);
        SYNC_MODE = curr & (1u << 16u);
        TRIG_PRIORITY = (curr >> 12u) & 0b111u;
        TRIG_CHAIN = ADC_ETC_TRIG4_CTRL_TRIG_CHAIN((curr >> 8u) & 0b111u);
        TRIG_MODE = curr & (1u << 4u);
        SW_TRIG = curr & (1u << 0u);
    }

    /**
     * Set all of TRIG4_CTRL's bit fields.
     *
     * (read-write) ETC_TRIG Control Register
     */
    inline void set_TRIG4_CTRL(ADC_ETC_TRIG4_CTRL_CHAINx_DONE CHAINx_DONE,
                               bool SYNC_MODE, uint8_t TRIG_PRIORITY,
                               ADC_ETC_TRIG4_CTRL_TRIG_CHAIN TRIG_CHAIN,
                               bool TRIG_MODE, bool SW_TRIG) volatile
    {
        uint32_t curr = TRIG4_CTRL;

        curr &= ~(0b11111111u << 24u);
        curr |= (std::to_underlying(CHAINx_DONE) & 0b11111111u) << 24u;
        curr &= ~(0b1u << 16u);
        curr |= (SYNC_MODE & 0b1u) << 16u;
        curr &= ~(0b111u << 12u);
        curr |= (TRIG_PRIORITY & 0b111u) << 12u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(TRIG_CHAIN) & 0b111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (TRIG_MODE & 0b1u) << 4u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG & 0b1u) << 0u;

        TRIG4_CTRL = curr;
    }

    /**
     * Get TRIG4_COUNTER's SAMPLE_INTERVAL field.
     *
     * TRIGGER sampling interval counter
     */
    inline uint16_t get_TRIG4_COUNTER_SAMPLE_INTERVAL() volatile
    {
        return (TRIG4_COUNTER >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set TRIG4_COUNTER's SAMPLE_INTERVAL field.
     *
     * TRIGGER sampling interval counter
     */
    inline void set_TRIG4_COUNTER_SAMPLE_INTERVAL(uint16_t value) volatile
    {
        uint32_t curr = TRIG4_COUNTER;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        TRIG4_COUNTER = curr;
    }

    /**
     * Get TRIG4_COUNTER's INIT_DELAY field.
     *
     * TRIGGER initial delay counter. Initial_delay =
     * (INIT_DELAY+1)*(PRE_DIVIDER+1)*ipg_clk
     */
    inline uint16_t get_TRIG4_COUNTER_INIT_DELAY() volatile
    {
        return (TRIG4_COUNTER >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TRIG4_COUNTER's INIT_DELAY field.
     *
     * TRIGGER initial delay counter. Initial_delay =
     * (INIT_DELAY+1)*(PRE_DIVIDER+1)*ipg_clk
     */
    inline void set_TRIG4_COUNTER_INIT_DELAY(uint16_t value) volatile
    {
        uint32_t curr = TRIG4_COUNTER;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TRIG4_COUNTER = curr;
    }

    /**
     * Get all of TRIG4_COUNTER's bit fields.
     *
     * (read-write) ETC_TRIG Counter Register
     */
    inline void get_TRIG4_COUNTER(uint16_t &SAMPLE_INTERVAL,
                                  uint16_t &INIT_DELAY) volatile
    {
        uint32_t curr = TRIG4_COUNTER;

        SAMPLE_INTERVAL = (curr >> 16u) & 0b1111111111111111u;
        INIT_DELAY = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of TRIG4_COUNTER's bit fields.
     *
     * (read-write) ETC_TRIG Counter Register
     */
    inline void set_TRIG4_COUNTER(uint16_t SAMPLE_INTERVAL,
                                  uint16_t INIT_DELAY) volatile
    {
        uint32_t curr = TRIG4_COUNTER;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (SAMPLE_INTERVAL & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (INIT_DELAY & 0b1111111111111111u) << 0u;

        TRIG4_COUNTER = curr;
    }

    /**
     * Get TRIG4_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline bool get_TRIG4_CHAIN_1_0_IE1_EN() volatile
    {
        return TRIG4_CHAIN_1_0 & (1u << 31u);
    }

    /**
     * Set TRIG4_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void set_TRIG4_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG4_CHAIN_1_0 |= 1u << 31u;
    }

    /**
     * Clear TRIG4_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void clear_TRIG4_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG4_CHAIN_1_0 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG4_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void toggle_TRIG4_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG4_CHAIN_1_0 ^= 1u << 31u;
    }

    /**
     * Get TRIG4_CHAIN_1_0's IE1 field.
     *
     * Segment 1 interrupt enable. (This bit field is meaningful only when
     * IE1_EN is set)
     */
    inline ADC_ETC_TRIG4_CHAIN_1_0_IE1 get_TRIG4_CHAIN_1_0_IE1() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_1_0_IE1((TRIG4_CHAIN_1_0 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG4_CHAIN_1_0's IE1 field.
     *
     * Segment 1 interrupt enable. (This bit field is meaningful only when
     * IE1_EN is set)
     */
    inline void set_TRIG4_CHAIN_1_0_IE1(
        ADC_ETC_TRIG4_CHAIN_1_0_IE1 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_1_0;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG4_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG4_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline bool get_TRIG4_CHAIN_1_0_B2B1() volatile
    {
        return TRIG4_CHAIN_1_0 & (1u << 28u);
    }

    /**
     * Set TRIG4_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void set_TRIG4_CHAIN_1_0_B2B1() volatile
    {
        TRIG4_CHAIN_1_0 |= 1u << 28u;
    }

    /**
     * Clear TRIG4_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void clear_TRIG4_CHAIN_1_0_B2B1() volatile
    {
        TRIG4_CHAIN_1_0 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG4_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void toggle_TRIG4_CHAIN_1_0_B2B1() volatile
    {
        TRIG4_CHAIN_1_0 ^= 1u << 28u;
    }

    /**
     * Get TRIG4_CHAIN_1_0's HWTS1 field.
     *
     * Segment 1 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG4_CHAIN_1_0_HWTS1 get_TRIG4_CHAIN_1_0_HWTS1() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_1_0_HWTS1((TRIG4_CHAIN_1_0 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG4_CHAIN_1_0's HWTS1 field.
     *
     * Segment 1 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG4_CHAIN_1_0_HWTS1(
        ADC_ETC_TRIG4_CHAIN_1_0_HWTS1 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_1_0;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG4_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG4_CHAIN_1_0's CSEL1 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG4_CHAIN_1_0_CSEL1 get_TRIG4_CHAIN_1_0_CSEL1() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_1_0_CSEL1((TRIG4_CHAIN_1_0 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG4_CHAIN_1_0's CSEL1 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG4_CHAIN_1_0_CSEL1(
        ADC_ETC_TRIG4_CHAIN_1_0_CSEL1 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_1_0;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG4_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG4_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline bool get_TRIG4_CHAIN_1_0_IE0_EN() volatile
    {
        return TRIG4_CHAIN_1_0 & (1u << 15u);
    }

    /**
     * Set TRIG4_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void set_TRIG4_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG4_CHAIN_1_0 |= 1u << 15u;
    }

    /**
     * Clear TRIG4_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void clear_TRIG4_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG4_CHAIN_1_0 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG4_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void toggle_TRIG4_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG4_CHAIN_1_0 ^= 1u << 15u;
    }

    /**
     * Get TRIG4_CHAIN_1_0's IE0 field.
     *
     * Segment 0 interrupt enable. (This bit field is meaningful only when
     * IE0_EN is set)
     */
    inline ADC_ETC_TRIG4_CHAIN_1_0_IE0 get_TRIG4_CHAIN_1_0_IE0() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_1_0_IE0((TRIG4_CHAIN_1_0 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG4_CHAIN_1_0's IE0 field.
     *
     * Segment 0 interrupt enable. (This bit field is meaningful only when
     * IE0_EN is set)
     */
    inline void set_TRIG4_CHAIN_1_0_IE0(
        ADC_ETC_TRIG4_CHAIN_1_0_IE0 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_1_0;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG4_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG4_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline bool get_TRIG4_CHAIN_1_0_B2B0() volatile
    {
        return TRIG4_CHAIN_1_0 & (1u << 12u);
    }

    /**
     * Set TRIG4_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void set_TRIG4_CHAIN_1_0_B2B0() volatile
    {
        TRIG4_CHAIN_1_0 |= 1u << 12u;
    }

    /**
     * Clear TRIG4_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void clear_TRIG4_CHAIN_1_0_B2B0() volatile
    {
        TRIG4_CHAIN_1_0 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG4_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void toggle_TRIG4_CHAIN_1_0_B2B0() volatile
    {
        TRIG4_CHAIN_1_0 ^= 1u << 12u;
    }

    /**
     * Get TRIG4_CHAIN_1_0's HWTS0 field.
     *
     * Segment 0 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG4_CHAIN_1_0_HWTS0 get_TRIG4_CHAIN_1_0_HWTS0() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_1_0_HWTS0((TRIG4_CHAIN_1_0 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG4_CHAIN_1_0's HWTS0 field.
     *
     * Segment 0 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG4_CHAIN_1_0_HWTS0(
        ADC_ETC_TRIG4_CHAIN_1_0_HWTS0 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_1_0;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG4_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG4_CHAIN_1_0's CSEL0 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG4_CHAIN_1_0_CSEL0 get_TRIG4_CHAIN_1_0_CSEL0() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_1_0_CSEL0((TRIG4_CHAIN_1_0 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG4_CHAIN_1_0's CSEL0 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG4_CHAIN_1_0_CSEL0(
        ADC_ETC_TRIG4_CHAIN_1_0_CSEL0 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_1_0;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG4_CHAIN_1_0 = curr;
    }

    /**
     * Get all of TRIG4_CHAIN_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Chain 0/1 Register
     */
    inline void get_TRIG4_CHAIN_1_0(
        bool &IE1_EN, ADC_ETC_TRIG4_CHAIN_1_0_IE1 &IE1, bool &B2B1,
        ADC_ETC_TRIG4_CHAIN_1_0_HWTS1 &HWTS1,
        ADC_ETC_TRIG4_CHAIN_1_0_CSEL1 &CSEL1, bool &IE0_EN,
        ADC_ETC_TRIG4_CHAIN_1_0_IE0 &IE0, bool &B2B0,
        ADC_ETC_TRIG4_CHAIN_1_0_HWTS0 &HWTS0,
        ADC_ETC_TRIG4_CHAIN_1_0_CSEL0 &CSEL0) volatile
    {
        uint32_t curr = TRIG4_CHAIN_1_0;

        IE1_EN = curr & (1u << 31u);
        IE1 = ADC_ETC_TRIG4_CHAIN_1_0_IE1((curr >> 29u) & 0b11u);
        B2B1 = curr & (1u << 28u);
        HWTS1 = ADC_ETC_TRIG4_CHAIN_1_0_HWTS1((curr >> 20u) & 0b11111111u);
        CSEL1 = ADC_ETC_TRIG4_CHAIN_1_0_CSEL1((curr >> 16u) & 0b1111u);
        IE0_EN = curr & (1u << 15u);
        IE0 = ADC_ETC_TRIG4_CHAIN_1_0_IE0((curr >> 13u) & 0b11u);
        B2B0 = curr & (1u << 12u);
        HWTS0 = ADC_ETC_TRIG4_CHAIN_1_0_HWTS0((curr >> 4u) & 0b11111111u);
        CSEL0 = ADC_ETC_TRIG4_CHAIN_1_0_CSEL0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG4_CHAIN_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Chain 0/1 Register
     */
    inline void set_TRIG4_CHAIN_1_0(
        bool IE1_EN, ADC_ETC_TRIG4_CHAIN_1_0_IE1 IE1, bool B2B1,
        ADC_ETC_TRIG4_CHAIN_1_0_HWTS1 HWTS1,
        ADC_ETC_TRIG4_CHAIN_1_0_CSEL1 CSEL1, bool IE0_EN,
        ADC_ETC_TRIG4_CHAIN_1_0_IE0 IE0, bool B2B0,
        ADC_ETC_TRIG4_CHAIN_1_0_HWTS0 HWTS0,
        ADC_ETC_TRIG4_CHAIN_1_0_CSEL0 CSEL0) volatile
    {
        uint32_t curr = TRIG4_CHAIN_1_0;

        curr &= ~(0b1u << 31u);
        curr |= (IE1_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE1) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B1 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS1) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL1) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE0_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE0) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B0 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS0) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL0) & 0b1111u) << 0u;

        TRIG4_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG4_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline bool get_TRIG4_CHAIN_3_2_IE3_EN() volatile
    {
        return TRIG4_CHAIN_3_2 & (1u << 31u);
    }

    /**
     * Set TRIG4_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void set_TRIG4_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG4_CHAIN_3_2 |= 1u << 31u;
    }

    /**
     * Clear TRIG4_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void clear_TRIG4_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG4_CHAIN_3_2 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG4_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void toggle_TRIG4_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG4_CHAIN_3_2 ^= 1u << 31u;
    }

    /**
     * Get TRIG4_CHAIN_3_2's IE3 field.
     *
     * Segment 3 interrupt enable. (This bit field is meaningful only when
     * IE3_EN is set)
     */
    inline ADC_ETC_TRIG4_CHAIN_3_2_IE3 get_TRIG4_CHAIN_3_2_IE3() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_3_2_IE3((TRIG4_CHAIN_3_2 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG4_CHAIN_3_2's IE3 field.
     *
     * Segment 3 interrupt enable. (This bit field is meaningful only when
     * IE3_EN is set)
     */
    inline void set_TRIG4_CHAIN_3_2_IE3(
        ADC_ETC_TRIG4_CHAIN_3_2_IE3 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_3_2;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG4_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG4_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline bool get_TRIG4_CHAIN_3_2_B2B3() volatile
    {
        return TRIG4_CHAIN_3_2 & (1u << 28u);
    }

    /**
     * Set TRIG4_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void set_TRIG4_CHAIN_3_2_B2B3() volatile
    {
        TRIG4_CHAIN_3_2 |= 1u << 28u;
    }

    /**
     * Clear TRIG4_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void clear_TRIG4_CHAIN_3_2_B2B3() volatile
    {
        TRIG4_CHAIN_3_2 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG4_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void toggle_TRIG4_CHAIN_3_2_B2B3() volatile
    {
        TRIG4_CHAIN_3_2 ^= 1u << 28u;
    }

    /**
     * Get TRIG4_CHAIN_3_2's HWTS3 field.
     *
     * Segment 3 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG4_CHAIN_3_2_HWTS3 get_TRIG4_CHAIN_3_2_HWTS3() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_3_2_HWTS3((TRIG4_CHAIN_3_2 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG4_CHAIN_3_2's HWTS3 field.
     *
     * Segment 3 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG4_CHAIN_3_2_HWTS3(
        ADC_ETC_TRIG4_CHAIN_3_2_HWTS3 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_3_2;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG4_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG4_CHAIN_3_2's CSEL3 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG4_CHAIN_3_2_CSEL3 get_TRIG4_CHAIN_3_2_CSEL3() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_3_2_CSEL3((TRIG4_CHAIN_3_2 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG4_CHAIN_3_2's CSEL3 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG4_CHAIN_3_2_CSEL3(
        ADC_ETC_TRIG4_CHAIN_3_2_CSEL3 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_3_2;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG4_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG4_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline bool get_TRIG4_CHAIN_3_2_IE2_EN() volatile
    {
        return TRIG4_CHAIN_3_2 & (1u << 15u);
    }

    /**
     * Set TRIG4_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void set_TRIG4_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG4_CHAIN_3_2 |= 1u << 15u;
    }

    /**
     * Clear TRIG4_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void clear_TRIG4_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG4_CHAIN_3_2 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG4_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void toggle_TRIG4_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG4_CHAIN_3_2 ^= 1u << 15u;
    }

    /**
     * Get TRIG4_CHAIN_3_2's IE2 field.
     *
     * Segment 2 interrupt enable. (This bit field is meaningful only when
     * IE2_EN is set)
     */
    inline ADC_ETC_TRIG4_CHAIN_3_2_IE2 get_TRIG4_CHAIN_3_2_IE2() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_3_2_IE2((TRIG4_CHAIN_3_2 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG4_CHAIN_3_2's IE2 field.
     *
     * Segment 2 interrupt enable. (This bit field is meaningful only when
     * IE2_EN is set)
     */
    inline void set_TRIG4_CHAIN_3_2_IE2(
        ADC_ETC_TRIG4_CHAIN_3_2_IE2 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_3_2;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG4_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG4_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline bool get_TRIG4_CHAIN_3_2_B2B2() volatile
    {
        return TRIG4_CHAIN_3_2 & (1u << 12u);
    }

    /**
     * Set TRIG4_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void set_TRIG4_CHAIN_3_2_B2B2() volatile
    {
        TRIG4_CHAIN_3_2 |= 1u << 12u;
    }

    /**
     * Clear TRIG4_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void clear_TRIG4_CHAIN_3_2_B2B2() volatile
    {
        TRIG4_CHAIN_3_2 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG4_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void toggle_TRIG4_CHAIN_3_2_B2B2() volatile
    {
        TRIG4_CHAIN_3_2 ^= 1u << 12u;
    }

    /**
     * Get TRIG4_CHAIN_3_2's HWTS2 field.
     *
     * Segment 2 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG4_CHAIN_3_2_HWTS2 get_TRIG4_CHAIN_3_2_HWTS2() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_3_2_HWTS2((TRIG4_CHAIN_3_2 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG4_CHAIN_3_2's HWTS2 field.
     *
     * Segment 2 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG4_CHAIN_3_2_HWTS2(
        ADC_ETC_TRIG4_CHAIN_3_2_HWTS2 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_3_2;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG4_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG4_CHAIN_3_2's CSEL2 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG4_CHAIN_3_2_CSEL2 get_TRIG4_CHAIN_3_2_CSEL2() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_3_2_CSEL2((TRIG4_CHAIN_3_2 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG4_CHAIN_3_2's CSEL2 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG4_CHAIN_3_2_CSEL2(
        ADC_ETC_TRIG4_CHAIN_3_2_CSEL2 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_3_2;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG4_CHAIN_3_2 = curr;
    }

    /**
     * Get all of TRIG4_CHAIN_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Chain 2/3 Register
     */
    inline void get_TRIG4_CHAIN_3_2(
        bool &IE3_EN, ADC_ETC_TRIG4_CHAIN_3_2_IE3 &IE3, bool &B2B3,
        ADC_ETC_TRIG4_CHAIN_3_2_HWTS3 &HWTS3,
        ADC_ETC_TRIG4_CHAIN_3_2_CSEL3 &CSEL3, bool &IE2_EN,
        ADC_ETC_TRIG4_CHAIN_3_2_IE2 &IE2, bool &B2B2,
        ADC_ETC_TRIG4_CHAIN_3_2_HWTS2 &HWTS2,
        ADC_ETC_TRIG4_CHAIN_3_2_CSEL2 &CSEL2) volatile
    {
        uint32_t curr = TRIG4_CHAIN_3_2;

        IE3_EN = curr & (1u << 31u);
        IE3 = ADC_ETC_TRIG4_CHAIN_3_2_IE3((curr >> 29u) & 0b11u);
        B2B3 = curr & (1u << 28u);
        HWTS3 = ADC_ETC_TRIG4_CHAIN_3_2_HWTS3((curr >> 20u) & 0b11111111u);
        CSEL3 = ADC_ETC_TRIG4_CHAIN_3_2_CSEL3((curr >> 16u) & 0b1111u);
        IE2_EN = curr & (1u << 15u);
        IE2 = ADC_ETC_TRIG4_CHAIN_3_2_IE2((curr >> 13u) & 0b11u);
        B2B2 = curr & (1u << 12u);
        HWTS2 = ADC_ETC_TRIG4_CHAIN_3_2_HWTS2((curr >> 4u) & 0b11111111u);
        CSEL2 = ADC_ETC_TRIG4_CHAIN_3_2_CSEL2((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG4_CHAIN_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Chain 2/3 Register
     */
    inline void set_TRIG4_CHAIN_3_2(
        bool IE3_EN, ADC_ETC_TRIG4_CHAIN_3_2_IE3 IE3, bool B2B3,
        ADC_ETC_TRIG4_CHAIN_3_2_HWTS3 HWTS3,
        ADC_ETC_TRIG4_CHAIN_3_2_CSEL3 CSEL3, bool IE2_EN,
        ADC_ETC_TRIG4_CHAIN_3_2_IE2 IE2, bool B2B2,
        ADC_ETC_TRIG4_CHAIN_3_2_HWTS2 HWTS2,
        ADC_ETC_TRIG4_CHAIN_3_2_CSEL2 CSEL2) volatile
    {
        uint32_t curr = TRIG4_CHAIN_3_2;

        curr &= ~(0b1u << 31u);
        curr |= (IE3_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE3) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B3 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS3) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL3) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE2_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE2) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B2 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS2) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL2) & 0b1111u) << 0u;

        TRIG4_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG4_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline bool get_TRIG4_CHAIN_5_4_IE5_EN() volatile
    {
        return TRIG4_CHAIN_5_4 & (1u << 31u);
    }

    /**
     * Set TRIG4_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void set_TRIG4_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG4_CHAIN_5_4 |= 1u << 31u;
    }

    /**
     * Clear TRIG4_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void clear_TRIG4_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG4_CHAIN_5_4 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG4_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void toggle_TRIG4_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG4_CHAIN_5_4 ^= 1u << 31u;
    }

    /**
     * Get TRIG4_CHAIN_5_4's IE5 field.
     *
     * Segment 5 interrupt enable. (This bit field is meaningful only when
     * IE5_EN is set)
     */
    inline ADC_ETC_TRIG4_CHAIN_5_4_IE5 get_TRIG4_CHAIN_5_4_IE5() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_5_4_IE5((TRIG4_CHAIN_5_4 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG4_CHAIN_5_4's IE5 field.
     *
     * Segment 5 interrupt enable. (This bit field is meaningful only when
     * IE5_EN is set)
     */
    inline void set_TRIG4_CHAIN_5_4_IE5(
        ADC_ETC_TRIG4_CHAIN_5_4_IE5 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_5_4;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG4_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG4_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline bool get_TRIG4_CHAIN_5_4_B2B5() volatile
    {
        return TRIG4_CHAIN_5_4 & (1u << 28u);
    }

    /**
     * Set TRIG4_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void set_TRIG4_CHAIN_5_4_B2B5() volatile
    {
        TRIG4_CHAIN_5_4 |= 1u << 28u;
    }

    /**
     * Clear TRIG4_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void clear_TRIG4_CHAIN_5_4_B2B5() volatile
    {
        TRIG4_CHAIN_5_4 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG4_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void toggle_TRIG4_CHAIN_5_4_B2B5() volatile
    {
        TRIG4_CHAIN_5_4 ^= 1u << 28u;
    }

    /**
     * Get TRIG4_CHAIN_5_4's HWTS5 field.
     *
     * Segment 5 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG4_CHAIN_5_4_HWTS5 get_TRIG4_CHAIN_5_4_HWTS5() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_5_4_HWTS5((TRIG4_CHAIN_5_4 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG4_CHAIN_5_4's HWTS5 field.
     *
     * Segment 5 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG4_CHAIN_5_4_HWTS5(
        ADC_ETC_TRIG4_CHAIN_5_4_HWTS5 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_5_4;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG4_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG4_CHAIN_5_4's CSEL5 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG4_CHAIN_5_4_CSEL5 get_TRIG4_CHAIN_5_4_CSEL5() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_5_4_CSEL5((TRIG4_CHAIN_5_4 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG4_CHAIN_5_4's CSEL5 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG4_CHAIN_5_4_CSEL5(
        ADC_ETC_TRIG4_CHAIN_5_4_CSEL5 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_5_4;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG4_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG4_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline bool get_TRIG4_CHAIN_5_4_IE4_EN() volatile
    {
        return TRIG4_CHAIN_5_4 & (1u << 15u);
    }

    /**
     * Set TRIG4_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void set_TRIG4_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG4_CHAIN_5_4 |= 1u << 15u;
    }

    /**
     * Clear TRIG4_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void clear_TRIG4_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG4_CHAIN_5_4 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG4_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void toggle_TRIG4_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG4_CHAIN_5_4 ^= 1u << 15u;
    }

    /**
     * Get TRIG4_CHAIN_5_4's IE4 field.
     *
     * Segment 4 interrupt enable. (This bit field is meaningful only when
     * IE4_EN is set)
     */
    inline ADC_ETC_TRIG4_CHAIN_5_4_IE4 get_TRIG4_CHAIN_5_4_IE4() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_5_4_IE4((TRIG4_CHAIN_5_4 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG4_CHAIN_5_4's IE4 field.
     *
     * Segment 4 interrupt enable. (This bit field is meaningful only when
     * IE4_EN is set)
     */
    inline void set_TRIG4_CHAIN_5_4_IE4(
        ADC_ETC_TRIG4_CHAIN_5_4_IE4 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_5_4;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG4_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG4_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline bool get_TRIG4_CHAIN_5_4_B2B4() volatile
    {
        return TRIG4_CHAIN_5_4 & (1u << 12u);
    }

    /**
     * Set TRIG4_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void set_TRIG4_CHAIN_5_4_B2B4() volatile
    {
        TRIG4_CHAIN_5_4 |= 1u << 12u;
    }

    /**
     * Clear TRIG4_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void clear_TRIG4_CHAIN_5_4_B2B4() volatile
    {
        TRIG4_CHAIN_5_4 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG4_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void toggle_TRIG4_CHAIN_5_4_B2B4() volatile
    {
        TRIG4_CHAIN_5_4 ^= 1u << 12u;
    }

    /**
     * Get TRIG4_CHAIN_5_4's HWTS4 field.
     *
     * Segment 4 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG4_CHAIN_5_4_HWTS4 get_TRIG4_CHAIN_5_4_HWTS4() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_5_4_HWTS4((TRIG4_CHAIN_5_4 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG4_CHAIN_5_4's HWTS4 field.
     *
     * Segment 4 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG4_CHAIN_5_4_HWTS4(
        ADC_ETC_TRIG4_CHAIN_5_4_HWTS4 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_5_4;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG4_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG4_CHAIN_5_4's CSEL4 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG4_CHAIN_5_4_CSEL4 get_TRIG4_CHAIN_5_4_CSEL4() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_5_4_CSEL4((TRIG4_CHAIN_5_4 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG4_CHAIN_5_4's CSEL4 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG4_CHAIN_5_4_CSEL4(
        ADC_ETC_TRIG4_CHAIN_5_4_CSEL4 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_5_4;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG4_CHAIN_5_4 = curr;
    }

    /**
     * Get all of TRIG4_CHAIN_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Chain 4/5 Register
     */
    inline void get_TRIG4_CHAIN_5_4(
        bool &IE5_EN, ADC_ETC_TRIG4_CHAIN_5_4_IE5 &IE5, bool &B2B5,
        ADC_ETC_TRIG4_CHAIN_5_4_HWTS5 &HWTS5,
        ADC_ETC_TRIG4_CHAIN_5_4_CSEL5 &CSEL5, bool &IE4_EN,
        ADC_ETC_TRIG4_CHAIN_5_4_IE4 &IE4, bool &B2B4,
        ADC_ETC_TRIG4_CHAIN_5_4_HWTS4 &HWTS4,
        ADC_ETC_TRIG4_CHAIN_5_4_CSEL4 &CSEL4) volatile
    {
        uint32_t curr = TRIG4_CHAIN_5_4;

        IE5_EN = curr & (1u << 31u);
        IE5 = ADC_ETC_TRIG4_CHAIN_5_4_IE5((curr >> 29u) & 0b11u);
        B2B5 = curr & (1u << 28u);
        HWTS5 = ADC_ETC_TRIG4_CHAIN_5_4_HWTS5((curr >> 20u) & 0b11111111u);
        CSEL5 = ADC_ETC_TRIG4_CHAIN_5_4_CSEL5((curr >> 16u) & 0b1111u);
        IE4_EN = curr & (1u << 15u);
        IE4 = ADC_ETC_TRIG4_CHAIN_5_4_IE4((curr >> 13u) & 0b11u);
        B2B4 = curr & (1u << 12u);
        HWTS4 = ADC_ETC_TRIG4_CHAIN_5_4_HWTS4((curr >> 4u) & 0b11111111u);
        CSEL4 = ADC_ETC_TRIG4_CHAIN_5_4_CSEL4((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG4_CHAIN_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Chain 4/5 Register
     */
    inline void set_TRIG4_CHAIN_5_4(
        bool IE5_EN, ADC_ETC_TRIG4_CHAIN_5_4_IE5 IE5, bool B2B5,
        ADC_ETC_TRIG4_CHAIN_5_4_HWTS5 HWTS5,
        ADC_ETC_TRIG4_CHAIN_5_4_CSEL5 CSEL5, bool IE4_EN,
        ADC_ETC_TRIG4_CHAIN_5_4_IE4 IE4, bool B2B4,
        ADC_ETC_TRIG4_CHAIN_5_4_HWTS4 HWTS4,
        ADC_ETC_TRIG4_CHAIN_5_4_CSEL4 CSEL4) volatile
    {
        uint32_t curr = TRIG4_CHAIN_5_4;

        curr &= ~(0b1u << 31u);
        curr |= (IE5_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE5) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B5 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS5) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL5) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE4_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE4) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B4 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS4) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL4) & 0b1111u) << 0u;

        TRIG4_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG4_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline bool get_TRIG4_CHAIN_7_6_IE7_EN() volatile
    {
        return TRIG4_CHAIN_7_6 & (1u << 31u);
    }

    /**
     * Set TRIG4_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void set_TRIG4_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG4_CHAIN_7_6 |= 1u << 31u;
    }

    /**
     * Clear TRIG4_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void clear_TRIG4_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG4_CHAIN_7_6 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG4_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void toggle_TRIG4_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG4_CHAIN_7_6 ^= 1u << 31u;
    }

    /**
     * Get TRIG4_CHAIN_7_6's IE7 field.
     *
     * Segment 7 interrupt enable. (This bit field is meaningful only when
     * IE7_EN is set)
     */
    inline ADC_ETC_TRIG4_CHAIN_7_6_IE7 get_TRIG4_CHAIN_7_6_IE7() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_7_6_IE7((TRIG4_CHAIN_7_6 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG4_CHAIN_7_6's IE7 field.
     *
     * Segment 7 interrupt enable. (This bit field is meaningful only when
     * IE7_EN is set)
     */
    inline void set_TRIG4_CHAIN_7_6_IE7(
        ADC_ETC_TRIG4_CHAIN_7_6_IE7 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_7_6;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG4_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG4_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline bool get_TRIG4_CHAIN_7_6_B2B7() volatile
    {
        return TRIG4_CHAIN_7_6 & (1u << 28u);
    }

    /**
     * Set TRIG4_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void set_TRIG4_CHAIN_7_6_B2B7() volatile
    {
        TRIG4_CHAIN_7_6 |= 1u << 28u;
    }

    /**
     * Clear TRIG4_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void clear_TRIG4_CHAIN_7_6_B2B7() volatile
    {
        TRIG4_CHAIN_7_6 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG4_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void toggle_TRIG4_CHAIN_7_6_B2B7() volatile
    {
        TRIG4_CHAIN_7_6 ^= 1u << 28u;
    }

    /**
     * Get TRIG4_CHAIN_7_6's HWTS7 field.
     *
     * Segment 7 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG4_CHAIN_7_6_HWTS7 get_TRIG4_CHAIN_7_6_HWTS7() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_7_6_HWTS7((TRIG4_CHAIN_7_6 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG4_CHAIN_7_6's HWTS7 field.
     *
     * Segment 7 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG4_CHAIN_7_6_HWTS7(
        ADC_ETC_TRIG4_CHAIN_7_6_HWTS7 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_7_6;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG4_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG4_CHAIN_7_6's CSEL7 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG4_CHAIN_7_6_CSEL7 get_TRIG4_CHAIN_7_6_CSEL7() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_7_6_CSEL7((TRIG4_CHAIN_7_6 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG4_CHAIN_7_6's CSEL7 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG4_CHAIN_7_6_CSEL7(
        ADC_ETC_TRIG4_CHAIN_7_6_CSEL7 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_7_6;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG4_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG4_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline bool get_TRIG4_CHAIN_7_6_IE6_EN() volatile
    {
        return TRIG4_CHAIN_7_6 & (1u << 15u);
    }

    /**
     * Set TRIG4_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void set_TRIG4_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG4_CHAIN_7_6 |= 1u << 15u;
    }

    /**
     * Clear TRIG4_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void clear_TRIG4_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG4_CHAIN_7_6 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG4_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void toggle_TRIG4_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG4_CHAIN_7_6 ^= 1u << 15u;
    }

    /**
     * Get TRIG4_CHAIN_7_6's IE6 field.
     *
     * Segment 6 interrupt enable. (This bit field is meaningful only when
     * IE6_EN is set)
     */
    inline ADC_ETC_TRIG4_CHAIN_7_6_IE6 get_TRIG4_CHAIN_7_6_IE6() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_7_6_IE6((TRIG4_CHAIN_7_6 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG4_CHAIN_7_6's IE6 field.
     *
     * Segment 6 interrupt enable. (This bit field is meaningful only when
     * IE6_EN is set)
     */
    inline void set_TRIG4_CHAIN_7_6_IE6(
        ADC_ETC_TRIG4_CHAIN_7_6_IE6 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_7_6;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG4_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG4_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline bool get_TRIG4_CHAIN_7_6_B2B6() volatile
    {
        return TRIG4_CHAIN_7_6 & (1u << 12u);
    }

    /**
     * Set TRIG4_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void set_TRIG4_CHAIN_7_6_B2B6() volatile
    {
        TRIG4_CHAIN_7_6 |= 1u << 12u;
    }

    /**
     * Clear TRIG4_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void clear_TRIG4_CHAIN_7_6_B2B6() volatile
    {
        TRIG4_CHAIN_7_6 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG4_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void toggle_TRIG4_CHAIN_7_6_B2B6() volatile
    {
        TRIG4_CHAIN_7_6 ^= 1u << 12u;
    }

    /**
     * Get TRIG4_CHAIN_7_6's HWTS6 field.
     *
     * Segment 6 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG4_CHAIN_7_6_HWTS6 get_TRIG4_CHAIN_7_6_HWTS6() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_7_6_HWTS6((TRIG4_CHAIN_7_6 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG4_CHAIN_7_6's HWTS6 field.
     *
     * Segment 6 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG4_CHAIN_7_6_HWTS6(
        ADC_ETC_TRIG4_CHAIN_7_6_HWTS6 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_7_6;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG4_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG4_CHAIN_7_6's CSEL6 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG4_CHAIN_7_6_CSEL6 get_TRIG4_CHAIN_7_6_CSEL6() volatile
    {
        return ADC_ETC_TRIG4_CHAIN_7_6_CSEL6((TRIG4_CHAIN_7_6 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG4_CHAIN_7_6's CSEL6 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG4_CHAIN_7_6_CSEL6(
        ADC_ETC_TRIG4_CHAIN_7_6_CSEL6 value) volatile
    {
        uint32_t curr = TRIG4_CHAIN_7_6;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG4_CHAIN_7_6 = curr;
    }

    /**
     * Get all of TRIG4_CHAIN_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Chain 6/7 Register
     */
    inline void get_TRIG4_CHAIN_7_6(
        bool &IE7_EN, ADC_ETC_TRIG4_CHAIN_7_6_IE7 &IE7, bool &B2B7,
        ADC_ETC_TRIG4_CHAIN_7_6_HWTS7 &HWTS7,
        ADC_ETC_TRIG4_CHAIN_7_6_CSEL7 &CSEL7, bool &IE6_EN,
        ADC_ETC_TRIG4_CHAIN_7_6_IE6 &IE6, bool &B2B6,
        ADC_ETC_TRIG4_CHAIN_7_6_HWTS6 &HWTS6,
        ADC_ETC_TRIG4_CHAIN_7_6_CSEL6 &CSEL6) volatile
    {
        uint32_t curr = TRIG4_CHAIN_7_6;

        IE7_EN = curr & (1u << 31u);
        IE7 = ADC_ETC_TRIG4_CHAIN_7_6_IE7((curr >> 29u) & 0b11u);
        B2B7 = curr & (1u << 28u);
        HWTS7 = ADC_ETC_TRIG4_CHAIN_7_6_HWTS7((curr >> 20u) & 0b11111111u);
        CSEL7 = ADC_ETC_TRIG4_CHAIN_7_6_CSEL7((curr >> 16u) & 0b1111u);
        IE6_EN = curr & (1u << 15u);
        IE6 = ADC_ETC_TRIG4_CHAIN_7_6_IE6((curr >> 13u) & 0b11u);
        B2B6 = curr & (1u << 12u);
        HWTS6 = ADC_ETC_TRIG4_CHAIN_7_6_HWTS6((curr >> 4u) & 0b11111111u);
        CSEL6 = ADC_ETC_TRIG4_CHAIN_7_6_CSEL6((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG4_CHAIN_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Chain 6/7 Register
     */
    inline void set_TRIG4_CHAIN_7_6(
        bool IE7_EN, ADC_ETC_TRIG4_CHAIN_7_6_IE7 IE7, bool B2B7,
        ADC_ETC_TRIG4_CHAIN_7_6_HWTS7 HWTS7,
        ADC_ETC_TRIG4_CHAIN_7_6_CSEL7 CSEL7, bool IE6_EN,
        ADC_ETC_TRIG4_CHAIN_7_6_IE6 IE6, bool B2B6,
        ADC_ETC_TRIG4_CHAIN_7_6_HWTS6 HWTS6,
        ADC_ETC_TRIG4_CHAIN_7_6_CSEL6 CSEL6) volatile
    {
        uint32_t curr = TRIG4_CHAIN_7_6;

        curr &= ~(0b1u << 31u);
        curr |= (IE7_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE7) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B7 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS7) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL7) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE6_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE6) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B6 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS6) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL6) & 0b1111u) << 0u;

        TRIG4_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG4_RESULT_1_0's DATA1 field.
     *
     * Result DATA1The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG4_RESULT_1_0_DATA1() volatile
    {
        return (TRIG4_RESULT_1_0 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG4_RESULT_1_0's DATA0 field.
     *
     * Result DATA0The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG4_RESULT_1_0_DATA0() volatile
    {
        return (TRIG4_RESULT_1_0 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG4_RESULT_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 1/0 Register
     */
    inline void get_TRIG4_RESULT_1_0(uint16_t &DATA1, uint16_t &DATA0) volatile
    {
        uint32_t curr = TRIG4_RESULT_1_0;

        DATA1 = (curr >> 16u) & 0b111111111111u;
        DATA0 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG4_RESULT_3_2's DATA3 field.
     *
     * Result DATA3The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG4_RESULT_3_2_DATA3() volatile
    {
        return (TRIG4_RESULT_3_2 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG4_RESULT_3_2's DATA2 field.
     *
     * Result DATA2The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG4_RESULT_3_2_DATA2() volatile
    {
        return (TRIG4_RESULT_3_2 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG4_RESULT_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 3/2 Register
     */
    inline void get_TRIG4_RESULT_3_2(uint16_t &DATA3, uint16_t &DATA2) volatile
    {
        uint32_t curr = TRIG4_RESULT_3_2;

        DATA3 = (curr >> 16u) & 0b111111111111u;
        DATA2 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG4_RESULT_5_4's DATA5 field.
     *
     * Result DATA5The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG4_RESULT_5_4_DATA5() volatile
    {
        return (TRIG4_RESULT_5_4 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG4_RESULT_5_4's DATA4 field.
     *
     * Result DATA4The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG4_RESULT_5_4_DATA4() volatile
    {
        return (TRIG4_RESULT_5_4 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG4_RESULT_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 5/4 Register
     */
    inline void get_TRIG4_RESULT_5_4(uint16_t &DATA5, uint16_t &DATA4) volatile
    {
        uint32_t curr = TRIG4_RESULT_5_4;

        DATA5 = (curr >> 16u) & 0b111111111111u;
        DATA4 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG4_RESULT_7_6's DATA7 field.
     *
     * Result DATA7The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG4_RESULT_7_6_DATA7() volatile
    {
        return (TRIG4_RESULT_7_6 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG4_RESULT_7_6's DATA6 field.
     *
     * Result DATA6The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG4_RESULT_7_6_DATA6() volatile
    {
        return (TRIG4_RESULT_7_6 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG4_RESULT_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 7/6 Register
     */
    inline void get_TRIG4_RESULT_7_6(uint16_t &DATA7, uint16_t &DATA6) volatile
    {
        uint32_t curr = TRIG4_RESULT_7_6;

        DATA7 = (curr >> 16u) & 0b111111111111u;
        DATA6 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG5_CTRL's CHAINx_DONE field.
     *
     * Segment x done detection
     */
    inline ADC_ETC_TRIG5_CTRL_CHAINx_DONE get_TRIG5_CTRL_CHAINx_DONE() volatile
    {
        return ADC_ETC_TRIG5_CTRL_CHAINx_DONE((TRIG5_CTRL >> 24u) &
                                              0b11111111u);
    }

    /**
     * Set TRIG5_CTRL's CHAINx_DONE field.
     *
     * Segment x done detection
     */
    inline void set_TRIG5_CTRL_CHAINx_DONE(
        ADC_ETC_TRIG5_CTRL_CHAINx_DONE value) volatile
    {
        uint32_t curr = TRIG5_CTRL;

        curr &= ~(0b11111111u << 24u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 24u;

        TRIG5_CTRL = curr;
    }

    /**
     * Get TRIG5_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline bool get_TRIG5_CTRL_SYNC_MODE() volatile
    {
        return TRIG5_CTRL & (1u << 16u);
    }

    /**
     * Set TRIG5_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void set_TRIG5_CTRL_SYNC_MODE() volatile
    {
        TRIG5_CTRL |= 1u << 16u;
    }

    /**
     * Clear TRIG5_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void clear_TRIG5_CTRL_SYNC_MODE() volatile
    {
        TRIG5_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle TRIG5_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void toggle_TRIG5_CTRL_SYNC_MODE() volatile
    {
        TRIG5_CTRL ^= 1u << 16u;
    }

    /**
     * Get TRIG5_CTRL's TRIG_PRIORITY field.
     *
     * External trigger priority, 7 is highest priority, while 0 is lowest
     */
    inline uint8_t get_TRIG5_CTRL_TRIG_PRIORITY() volatile
    {
        return (TRIG5_CTRL >> 12u) & 0b111u;
    }

    /**
     * Set TRIG5_CTRL's TRIG_PRIORITY field.
     *
     * External trigger priority, 7 is highest priority, while 0 is lowest
     */
    inline void set_TRIG5_CTRL_TRIG_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = TRIG5_CTRL;

        curr &= ~(0b111u << 12u);
        curr |= (value & 0b111u) << 12u;

        TRIG5_CTRL = curr;
    }

    /**
     * Get TRIG5_CTRL's TRIG_CHAIN field.
     *
     * The number of segments inside the trigger chain of TRIGa.
     */
    inline ADC_ETC_TRIG5_CTRL_TRIG_CHAIN get_TRIG5_CTRL_TRIG_CHAIN() volatile
    {
        return ADC_ETC_TRIG5_CTRL_TRIG_CHAIN((TRIG5_CTRL >> 8u) & 0b111u);
    }

    /**
     * Set TRIG5_CTRL's TRIG_CHAIN field.
     *
     * The number of segments inside the trigger chain of TRIGa.
     */
    inline void set_TRIG5_CTRL_TRIG_CHAIN(
        ADC_ETC_TRIG5_CTRL_TRIG_CHAIN value) volatile
    {
        uint32_t curr = TRIG5_CTRL;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TRIG5_CTRL = curr;
    }

    /**
     * Get TRIG5_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline bool get_TRIG5_CTRL_TRIG_MODE() volatile
    {
        return TRIG5_CTRL & (1u << 4u);
    }

    /**
     * Set TRIG5_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void set_TRIG5_CTRL_TRIG_MODE() volatile
    {
        TRIG5_CTRL |= 1u << 4u;
    }

    /**
     * Clear TRIG5_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void clear_TRIG5_CTRL_TRIG_MODE() volatile
    {
        TRIG5_CTRL &= ~(1u << 4u);
    }

    /**
     * Toggle TRIG5_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void toggle_TRIG5_CTRL_TRIG_MODE() volatile
    {
        TRIG5_CTRL ^= 1u << 4u;
    }

    /**
     * Get TRIG5_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline bool get_TRIG5_CTRL_SW_TRIG() volatile
    {
        return TRIG5_CTRL & (1u << 0u);
    }

    /**
     * Set TRIG5_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void set_TRIG5_CTRL_SW_TRIG() volatile
    {
        TRIG5_CTRL |= 1u << 0u;
    }

    /**
     * Clear TRIG5_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void clear_TRIG5_CTRL_SW_TRIG() volatile
    {
        TRIG5_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle TRIG5_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void toggle_TRIG5_CTRL_SW_TRIG() volatile
    {
        TRIG5_CTRL ^= 1u << 0u;
    }

    /**
     * Get all of TRIG5_CTRL's bit fields.
     *
     * (read-write) ETC_TRIG Control Register
     */
    inline void get_TRIG5_CTRL(ADC_ETC_TRIG5_CTRL_CHAINx_DONE &CHAINx_DONE,
                               bool &SYNC_MODE, uint8_t &TRIG_PRIORITY,
                               ADC_ETC_TRIG5_CTRL_TRIG_CHAIN &TRIG_CHAIN,
                               bool &TRIG_MODE, bool &SW_TRIG) volatile
    {
        uint32_t curr = TRIG5_CTRL;

        CHAINx_DONE =
            ADC_ETC_TRIG5_CTRL_CHAINx_DONE((curr >> 24u) & 0b11111111u);
        SYNC_MODE = curr & (1u << 16u);
        TRIG_PRIORITY = (curr >> 12u) & 0b111u;
        TRIG_CHAIN = ADC_ETC_TRIG5_CTRL_TRIG_CHAIN((curr >> 8u) & 0b111u);
        TRIG_MODE = curr & (1u << 4u);
        SW_TRIG = curr & (1u << 0u);
    }

    /**
     * Set all of TRIG5_CTRL's bit fields.
     *
     * (read-write) ETC_TRIG Control Register
     */
    inline void set_TRIG5_CTRL(ADC_ETC_TRIG5_CTRL_CHAINx_DONE CHAINx_DONE,
                               bool SYNC_MODE, uint8_t TRIG_PRIORITY,
                               ADC_ETC_TRIG5_CTRL_TRIG_CHAIN TRIG_CHAIN,
                               bool TRIG_MODE, bool SW_TRIG) volatile
    {
        uint32_t curr = TRIG5_CTRL;

        curr &= ~(0b11111111u << 24u);
        curr |= (std::to_underlying(CHAINx_DONE) & 0b11111111u) << 24u;
        curr &= ~(0b1u << 16u);
        curr |= (SYNC_MODE & 0b1u) << 16u;
        curr &= ~(0b111u << 12u);
        curr |= (TRIG_PRIORITY & 0b111u) << 12u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(TRIG_CHAIN) & 0b111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (TRIG_MODE & 0b1u) << 4u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG & 0b1u) << 0u;

        TRIG5_CTRL = curr;
    }

    /**
     * Get TRIG5_COUNTER's SAMPLE_INTERVAL field.
     *
     * TRIGGER sampling interval counter
     */
    inline uint16_t get_TRIG5_COUNTER_SAMPLE_INTERVAL() volatile
    {
        return (TRIG5_COUNTER >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set TRIG5_COUNTER's SAMPLE_INTERVAL field.
     *
     * TRIGGER sampling interval counter
     */
    inline void set_TRIG5_COUNTER_SAMPLE_INTERVAL(uint16_t value) volatile
    {
        uint32_t curr = TRIG5_COUNTER;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        TRIG5_COUNTER = curr;
    }

    /**
     * Get TRIG5_COUNTER's INIT_DELAY field.
     *
     * TRIGGER initial delay counter. Initial_delay =
     * (INIT_DELAY+1)*(PRE_DIVIDER+1)*ipg_clk
     */
    inline uint16_t get_TRIG5_COUNTER_INIT_DELAY() volatile
    {
        return (TRIG5_COUNTER >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TRIG5_COUNTER's INIT_DELAY field.
     *
     * TRIGGER initial delay counter. Initial_delay =
     * (INIT_DELAY+1)*(PRE_DIVIDER+1)*ipg_clk
     */
    inline void set_TRIG5_COUNTER_INIT_DELAY(uint16_t value) volatile
    {
        uint32_t curr = TRIG5_COUNTER;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TRIG5_COUNTER = curr;
    }

    /**
     * Get all of TRIG5_COUNTER's bit fields.
     *
     * (read-write) ETC_TRIG Counter Register
     */
    inline void get_TRIG5_COUNTER(uint16_t &SAMPLE_INTERVAL,
                                  uint16_t &INIT_DELAY) volatile
    {
        uint32_t curr = TRIG5_COUNTER;

        SAMPLE_INTERVAL = (curr >> 16u) & 0b1111111111111111u;
        INIT_DELAY = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of TRIG5_COUNTER's bit fields.
     *
     * (read-write) ETC_TRIG Counter Register
     */
    inline void set_TRIG5_COUNTER(uint16_t SAMPLE_INTERVAL,
                                  uint16_t INIT_DELAY) volatile
    {
        uint32_t curr = TRIG5_COUNTER;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (SAMPLE_INTERVAL & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (INIT_DELAY & 0b1111111111111111u) << 0u;

        TRIG5_COUNTER = curr;
    }

    /**
     * Get TRIG5_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline bool get_TRIG5_CHAIN_1_0_IE1_EN() volatile
    {
        return TRIG5_CHAIN_1_0 & (1u << 31u);
    }

    /**
     * Set TRIG5_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void set_TRIG5_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG5_CHAIN_1_0 |= 1u << 31u;
    }

    /**
     * Clear TRIG5_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void clear_TRIG5_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG5_CHAIN_1_0 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG5_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void toggle_TRIG5_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG5_CHAIN_1_0 ^= 1u << 31u;
    }

    /**
     * Get TRIG5_CHAIN_1_0's IE1 field.
     *
     * Segment 1 interrupt enable. (This bit field is meaningful only when
     * IE1_EN is set)
     */
    inline ADC_ETC_TRIG5_CHAIN_1_0_IE1 get_TRIG5_CHAIN_1_0_IE1() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_1_0_IE1((TRIG5_CHAIN_1_0 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG5_CHAIN_1_0's IE1 field.
     *
     * Segment 1 interrupt enable. (This bit field is meaningful only when
     * IE1_EN is set)
     */
    inline void set_TRIG5_CHAIN_1_0_IE1(
        ADC_ETC_TRIG5_CHAIN_1_0_IE1 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_1_0;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG5_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG5_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline bool get_TRIG5_CHAIN_1_0_B2B1() volatile
    {
        return TRIG5_CHAIN_1_0 & (1u << 28u);
    }

    /**
     * Set TRIG5_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void set_TRIG5_CHAIN_1_0_B2B1() volatile
    {
        TRIG5_CHAIN_1_0 |= 1u << 28u;
    }

    /**
     * Clear TRIG5_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void clear_TRIG5_CHAIN_1_0_B2B1() volatile
    {
        TRIG5_CHAIN_1_0 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG5_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void toggle_TRIG5_CHAIN_1_0_B2B1() volatile
    {
        TRIG5_CHAIN_1_0 ^= 1u << 28u;
    }

    /**
     * Get TRIG5_CHAIN_1_0's HWTS1 field.
     *
     * Segment 1 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG5_CHAIN_1_0_HWTS1 get_TRIG5_CHAIN_1_0_HWTS1() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_1_0_HWTS1((TRIG5_CHAIN_1_0 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG5_CHAIN_1_0's HWTS1 field.
     *
     * Segment 1 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG5_CHAIN_1_0_HWTS1(
        ADC_ETC_TRIG5_CHAIN_1_0_HWTS1 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_1_0;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG5_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG5_CHAIN_1_0's CSEL1 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG5_CHAIN_1_0_CSEL1 get_TRIG5_CHAIN_1_0_CSEL1() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_1_0_CSEL1((TRIG5_CHAIN_1_0 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG5_CHAIN_1_0's CSEL1 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG5_CHAIN_1_0_CSEL1(
        ADC_ETC_TRIG5_CHAIN_1_0_CSEL1 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_1_0;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG5_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG5_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline bool get_TRIG5_CHAIN_1_0_IE0_EN() volatile
    {
        return TRIG5_CHAIN_1_0 & (1u << 15u);
    }

    /**
     * Set TRIG5_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void set_TRIG5_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG5_CHAIN_1_0 |= 1u << 15u;
    }

    /**
     * Clear TRIG5_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void clear_TRIG5_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG5_CHAIN_1_0 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG5_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void toggle_TRIG5_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG5_CHAIN_1_0 ^= 1u << 15u;
    }

    /**
     * Get TRIG5_CHAIN_1_0's IE0 field.
     *
     * Segment 0 interrupt enable. (This bit field is meaningful only when
     * IE0_EN is set)
     */
    inline ADC_ETC_TRIG5_CHAIN_1_0_IE0 get_TRIG5_CHAIN_1_0_IE0() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_1_0_IE0((TRIG5_CHAIN_1_0 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG5_CHAIN_1_0's IE0 field.
     *
     * Segment 0 interrupt enable. (This bit field is meaningful only when
     * IE0_EN is set)
     */
    inline void set_TRIG5_CHAIN_1_0_IE0(
        ADC_ETC_TRIG5_CHAIN_1_0_IE0 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_1_0;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG5_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG5_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline bool get_TRIG5_CHAIN_1_0_B2B0() volatile
    {
        return TRIG5_CHAIN_1_0 & (1u << 12u);
    }

    /**
     * Set TRIG5_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void set_TRIG5_CHAIN_1_0_B2B0() volatile
    {
        TRIG5_CHAIN_1_0 |= 1u << 12u;
    }

    /**
     * Clear TRIG5_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void clear_TRIG5_CHAIN_1_0_B2B0() volatile
    {
        TRIG5_CHAIN_1_0 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG5_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void toggle_TRIG5_CHAIN_1_0_B2B0() volatile
    {
        TRIG5_CHAIN_1_0 ^= 1u << 12u;
    }

    /**
     * Get TRIG5_CHAIN_1_0's HWTS0 field.
     *
     * Segment 0 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG5_CHAIN_1_0_HWTS0 get_TRIG5_CHAIN_1_0_HWTS0() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_1_0_HWTS0((TRIG5_CHAIN_1_0 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG5_CHAIN_1_0's HWTS0 field.
     *
     * Segment 0 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG5_CHAIN_1_0_HWTS0(
        ADC_ETC_TRIG5_CHAIN_1_0_HWTS0 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_1_0;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG5_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG5_CHAIN_1_0's CSEL0 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG5_CHAIN_1_0_CSEL0 get_TRIG5_CHAIN_1_0_CSEL0() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_1_0_CSEL0((TRIG5_CHAIN_1_0 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG5_CHAIN_1_0's CSEL0 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG5_CHAIN_1_0_CSEL0(
        ADC_ETC_TRIG5_CHAIN_1_0_CSEL0 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_1_0;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG5_CHAIN_1_0 = curr;
    }

    /**
     * Get all of TRIG5_CHAIN_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Chain 0/1 Register
     */
    inline void get_TRIG5_CHAIN_1_0(
        bool &IE1_EN, ADC_ETC_TRIG5_CHAIN_1_0_IE1 &IE1, bool &B2B1,
        ADC_ETC_TRIG5_CHAIN_1_0_HWTS1 &HWTS1,
        ADC_ETC_TRIG5_CHAIN_1_0_CSEL1 &CSEL1, bool &IE0_EN,
        ADC_ETC_TRIG5_CHAIN_1_0_IE0 &IE0, bool &B2B0,
        ADC_ETC_TRIG5_CHAIN_1_0_HWTS0 &HWTS0,
        ADC_ETC_TRIG5_CHAIN_1_0_CSEL0 &CSEL0) volatile
    {
        uint32_t curr = TRIG5_CHAIN_1_0;

        IE1_EN = curr & (1u << 31u);
        IE1 = ADC_ETC_TRIG5_CHAIN_1_0_IE1((curr >> 29u) & 0b11u);
        B2B1 = curr & (1u << 28u);
        HWTS1 = ADC_ETC_TRIG5_CHAIN_1_0_HWTS1((curr >> 20u) & 0b11111111u);
        CSEL1 = ADC_ETC_TRIG5_CHAIN_1_0_CSEL1((curr >> 16u) & 0b1111u);
        IE0_EN = curr & (1u << 15u);
        IE0 = ADC_ETC_TRIG5_CHAIN_1_0_IE0((curr >> 13u) & 0b11u);
        B2B0 = curr & (1u << 12u);
        HWTS0 = ADC_ETC_TRIG5_CHAIN_1_0_HWTS0((curr >> 4u) & 0b11111111u);
        CSEL0 = ADC_ETC_TRIG5_CHAIN_1_0_CSEL0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG5_CHAIN_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Chain 0/1 Register
     */
    inline void set_TRIG5_CHAIN_1_0(
        bool IE1_EN, ADC_ETC_TRIG5_CHAIN_1_0_IE1 IE1, bool B2B1,
        ADC_ETC_TRIG5_CHAIN_1_0_HWTS1 HWTS1,
        ADC_ETC_TRIG5_CHAIN_1_0_CSEL1 CSEL1, bool IE0_EN,
        ADC_ETC_TRIG5_CHAIN_1_0_IE0 IE0, bool B2B0,
        ADC_ETC_TRIG5_CHAIN_1_0_HWTS0 HWTS0,
        ADC_ETC_TRIG5_CHAIN_1_0_CSEL0 CSEL0) volatile
    {
        uint32_t curr = TRIG5_CHAIN_1_0;

        curr &= ~(0b1u << 31u);
        curr |= (IE1_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE1) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B1 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS1) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL1) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE0_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE0) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B0 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS0) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL0) & 0b1111u) << 0u;

        TRIG5_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG5_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline bool get_TRIG5_CHAIN_3_2_IE3_EN() volatile
    {
        return TRIG5_CHAIN_3_2 & (1u << 31u);
    }

    /**
     * Set TRIG5_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void set_TRIG5_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG5_CHAIN_3_2 |= 1u << 31u;
    }

    /**
     * Clear TRIG5_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void clear_TRIG5_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG5_CHAIN_3_2 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG5_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void toggle_TRIG5_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG5_CHAIN_3_2 ^= 1u << 31u;
    }

    /**
     * Get TRIG5_CHAIN_3_2's IE3 field.
     *
     * Segment 3 interrupt enable. (This bit field is meaningful only when
     * IE3_EN is set)
     */
    inline ADC_ETC_TRIG5_CHAIN_3_2_IE3 get_TRIG5_CHAIN_3_2_IE3() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_3_2_IE3((TRIG5_CHAIN_3_2 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG5_CHAIN_3_2's IE3 field.
     *
     * Segment 3 interrupt enable. (This bit field is meaningful only when
     * IE3_EN is set)
     */
    inline void set_TRIG5_CHAIN_3_2_IE3(
        ADC_ETC_TRIG5_CHAIN_3_2_IE3 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_3_2;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG5_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG5_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline bool get_TRIG5_CHAIN_3_2_B2B3() volatile
    {
        return TRIG5_CHAIN_3_2 & (1u << 28u);
    }

    /**
     * Set TRIG5_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void set_TRIG5_CHAIN_3_2_B2B3() volatile
    {
        TRIG5_CHAIN_3_2 |= 1u << 28u;
    }

    /**
     * Clear TRIG5_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void clear_TRIG5_CHAIN_3_2_B2B3() volatile
    {
        TRIG5_CHAIN_3_2 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG5_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void toggle_TRIG5_CHAIN_3_2_B2B3() volatile
    {
        TRIG5_CHAIN_3_2 ^= 1u << 28u;
    }

    /**
     * Get TRIG5_CHAIN_3_2's HWTS3 field.
     *
     * Segment 3 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG5_CHAIN_3_2_HWTS3 get_TRIG5_CHAIN_3_2_HWTS3() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_3_2_HWTS3((TRIG5_CHAIN_3_2 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG5_CHAIN_3_2's HWTS3 field.
     *
     * Segment 3 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG5_CHAIN_3_2_HWTS3(
        ADC_ETC_TRIG5_CHAIN_3_2_HWTS3 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_3_2;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG5_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG5_CHAIN_3_2's CSEL3 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG5_CHAIN_3_2_CSEL3 get_TRIG5_CHAIN_3_2_CSEL3() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_3_2_CSEL3((TRIG5_CHAIN_3_2 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG5_CHAIN_3_2's CSEL3 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG5_CHAIN_3_2_CSEL3(
        ADC_ETC_TRIG5_CHAIN_3_2_CSEL3 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_3_2;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG5_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG5_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline bool get_TRIG5_CHAIN_3_2_IE2_EN() volatile
    {
        return TRIG5_CHAIN_3_2 & (1u << 15u);
    }

    /**
     * Set TRIG5_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void set_TRIG5_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG5_CHAIN_3_2 |= 1u << 15u;
    }

    /**
     * Clear TRIG5_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void clear_TRIG5_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG5_CHAIN_3_2 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG5_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void toggle_TRIG5_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG5_CHAIN_3_2 ^= 1u << 15u;
    }

    /**
     * Get TRIG5_CHAIN_3_2's IE2 field.
     *
     * Segment 2 interrupt enable. (This bit field is meaningful only when
     * IE2_EN is set)
     */
    inline ADC_ETC_TRIG5_CHAIN_3_2_IE2 get_TRIG5_CHAIN_3_2_IE2() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_3_2_IE2((TRIG5_CHAIN_3_2 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG5_CHAIN_3_2's IE2 field.
     *
     * Segment 2 interrupt enable. (This bit field is meaningful only when
     * IE2_EN is set)
     */
    inline void set_TRIG5_CHAIN_3_2_IE2(
        ADC_ETC_TRIG5_CHAIN_3_2_IE2 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_3_2;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG5_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG5_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline bool get_TRIG5_CHAIN_3_2_B2B2() volatile
    {
        return TRIG5_CHAIN_3_2 & (1u << 12u);
    }

    /**
     * Set TRIG5_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void set_TRIG5_CHAIN_3_2_B2B2() volatile
    {
        TRIG5_CHAIN_3_2 |= 1u << 12u;
    }

    /**
     * Clear TRIG5_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void clear_TRIG5_CHAIN_3_2_B2B2() volatile
    {
        TRIG5_CHAIN_3_2 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG5_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void toggle_TRIG5_CHAIN_3_2_B2B2() volatile
    {
        TRIG5_CHAIN_3_2 ^= 1u << 12u;
    }

    /**
     * Get TRIG5_CHAIN_3_2's HWTS2 field.
     *
     * Segment 2 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG5_CHAIN_3_2_HWTS2 get_TRIG5_CHAIN_3_2_HWTS2() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_3_2_HWTS2((TRIG5_CHAIN_3_2 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG5_CHAIN_3_2's HWTS2 field.
     *
     * Segment 2 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG5_CHAIN_3_2_HWTS2(
        ADC_ETC_TRIG5_CHAIN_3_2_HWTS2 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_3_2;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG5_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG5_CHAIN_3_2's CSEL2 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG5_CHAIN_3_2_CSEL2 get_TRIG5_CHAIN_3_2_CSEL2() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_3_2_CSEL2((TRIG5_CHAIN_3_2 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG5_CHAIN_3_2's CSEL2 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG5_CHAIN_3_2_CSEL2(
        ADC_ETC_TRIG5_CHAIN_3_2_CSEL2 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_3_2;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG5_CHAIN_3_2 = curr;
    }

    /**
     * Get all of TRIG5_CHAIN_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Chain 2/3 Register
     */
    inline void get_TRIG5_CHAIN_3_2(
        bool &IE3_EN, ADC_ETC_TRIG5_CHAIN_3_2_IE3 &IE3, bool &B2B3,
        ADC_ETC_TRIG5_CHAIN_3_2_HWTS3 &HWTS3,
        ADC_ETC_TRIG5_CHAIN_3_2_CSEL3 &CSEL3, bool &IE2_EN,
        ADC_ETC_TRIG5_CHAIN_3_2_IE2 &IE2, bool &B2B2,
        ADC_ETC_TRIG5_CHAIN_3_2_HWTS2 &HWTS2,
        ADC_ETC_TRIG5_CHAIN_3_2_CSEL2 &CSEL2) volatile
    {
        uint32_t curr = TRIG5_CHAIN_3_2;

        IE3_EN = curr & (1u << 31u);
        IE3 = ADC_ETC_TRIG5_CHAIN_3_2_IE3((curr >> 29u) & 0b11u);
        B2B3 = curr & (1u << 28u);
        HWTS3 = ADC_ETC_TRIG5_CHAIN_3_2_HWTS3((curr >> 20u) & 0b11111111u);
        CSEL3 = ADC_ETC_TRIG5_CHAIN_3_2_CSEL3((curr >> 16u) & 0b1111u);
        IE2_EN = curr & (1u << 15u);
        IE2 = ADC_ETC_TRIG5_CHAIN_3_2_IE2((curr >> 13u) & 0b11u);
        B2B2 = curr & (1u << 12u);
        HWTS2 = ADC_ETC_TRIG5_CHAIN_3_2_HWTS2((curr >> 4u) & 0b11111111u);
        CSEL2 = ADC_ETC_TRIG5_CHAIN_3_2_CSEL2((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG5_CHAIN_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Chain 2/3 Register
     */
    inline void set_TRIG5_CHAIN_3_2(
        bool IE3_EN, ADC_ETC_TRIG5_CHAIN_3_2_IE3 IE3, bool B2B3,
        ADC_ETC_TRIG5_CHAIN_3_2_HWTS3 HWTS3,
        ADC_ETC_TRIG5_CHAIN_3_2_CSEL3 CSEL3, bool IE2_EN,
        ADC_ETC_TRIG5_CHAIN_3_2_IE2 IE2, bool B2B2,
        ADC_ETC_TRIG5_CHAIN_3_2_HWTS2 HWTS2,
        ADC_ETC_TRIG5_CHAIN_3_2_CSEL2 CSEL2) volatile
    {
        uint32_t curr = TRIG5_CHAIN_3_2;

        curr &= ~(0b1u << 31u);
        curr |= (IE3_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE3) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B3 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS3) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL3) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE2_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE2) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B2 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS2) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL2) & 0b1111u) << 0u;

        TRIG5_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG5_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline bool get_TRIG5_CHAIN_5_4_IE5_EN() volatile
    {
        return TRIG5_CHAIN_5_4 & (1u << 31u);
    }

    /**
     * Set TRIG5_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void set_TRIG5_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG5_CHAIN_5_4 |= 1u << 31u;
    }

    /**
     * Clear TRIG5_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void clear_TRIG5_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG5_CHAIN_5_4 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG5_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void toggle_TRIG5_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG5_CHAIN_5_4 ^= 1u << 31u;
    }

    /**
     * Get TRIG5_CHAIN_5_4's IE5 field.
     *
     * Segment 5 interrupt enable. (This bit field is meaningful only when
     * IE5_EN is set)
     */
    inline ADC_ETC_TRIG5_CHAIN_5_4_IE5 get_TRIG5_CHAIN_5_4_IE5() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_5_4_IE5((TRIG5_CHAIN_5_4 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG5_CHAIN_5_4's IE5 field.
     *
     * Segment 5 interrupt enable. (This bit field is meaningful only when
     * IE5_EN is set)
     */
    inline void set_TRIG5_CHAIN_5_4_IE5(
        ADC_ETC_TRIG5_CHAIN_5_4_IE5 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_5_4;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG5_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG5_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline bool get_TRIG5_CHAIN_5_4_B2B5() volatile
    {
        return TRIG5_CHAIN_5_4 & (1u << 28u);
    }

    /**
     * Set TRIG5_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void set_TRIG5_CHAIN_5_4_B2B5() volatile
    {
        TRIG5_CHAIN_5_4 |= 1u << 28u;
    }

    /**
     * Clear TRIG5_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void clear_TRIG5_CHAIN_5_4_B2B5() volatile
    {
        TRIG5_CHAIN_5_4 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG5_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void toggle_TRIG5_CHAIN_5_4_B2B5() volatile
    {
        TRIG5_CHAIN_5_4 ^= 1u << 28u;
    }

    /**
     * Get TRIG5_CHAIN_5_4's HWTS5 field.
     *
     * Segment 5 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG5_CHAIN_5_4_HWTS5 get_TRIG5_CHAIN_5_4_HWTS5() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_5_4_HWTS5((TRIG5_CHAIN_5_4 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG5_CHAIN_5_4's HWTS5 field.
     *
     * Segment 5 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG5_CHAIN_5_4_HWTS5(
        ADC_ETC_TRIG5_CHAIN_5_4_HWTS5 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_5_4;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG5_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG5_CHAIN_5_4's CSEL5 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG5_CHAIN_5_4_CSEL5 get_TRIG5_CHAIN_5_4_CSEL5() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_5_4_CSEL5((TRIG5_CHAIN_5_4 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG5_CHAIN_5_4's CSEL5 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG5_CHAIN_5_4_CSEL5(
        ADC_ETC_TRIG5_CHAIN_5_4_CSEL5 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_5_4;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG5_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG5_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline bool get_TRIG5_CHAIN_5_4_IE4_EN() volatile
    {
        return TRIG5_CHAIN_5_4 & (1u << 15u);
    }

    /**
     * Set TRIG5_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void set_TRIG5_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG5_CHAIN_5_4 |= 1u << 15u;
    }

    /**
     * Clear TRIG5_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void clear_TRIG5_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG5_CHAIN_5_4 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG5_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void toggle_TRIG5_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG5_CHAIN_5_4 ^= 1u << 15u;
    }

    /**
     * Get TRIG5_CHAIN_5_4's IE4 field.
     *
     * Segment 4 interrupt enable. (This bit field is meaningful only when
     * IE4_EN is set)
     */
    inline ADC_ETC_TRIG5_CHAIN_5_4_IE4 get_TRIG5_CHAIN_5_4_IE4() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_5_4_IE4((TRIG5_CHAIN_5_4 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG5_CHAIN_5_4's IE4 field.
     *
     * Segment 4 interrupt enable. (This bit field is meaningful only when
     * IE4_EN is set)
     */
    inline void set_TRIG5_CHAIN_5_4_IE4(
        ADC_ETC_TRIG5_CHAIN_5_4_IE4 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_5_4;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG5_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG5_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline bool get_TRIG5_CHAIN_5_4_B2B4() volatile
    {
        return TRIG5_CHAIN_5_4 & (1u << 12u);
    }

    /**
     * Set TRIG5_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void set_TRIG5_CHAIN_5_4_B2B4() volatile
    {
        TRIG5_CHAIN_5_4 |= 1u << 12u;
    }

    /**
     * Clear TRIG5_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void clear_TRIG5_CHAIN_5_4_B2B4() volatile
    {
        TRIG5_CHAIN_5_4 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG5_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void toggle_TRIG5_CHAIN_5_4_B2B4() volatile
    {
        TRIG5_CHAIN_5_4 ^= 1u << 12u;
    }

    /**
     * Get TRIG5_CHAIN_5_4's HWTS4 field.
     *
     * Segment 4 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG5_CHAIN_5_4_HWTS4 get_TRIG5_CHAIN_5_4_HWTS4() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_5_4_HWTS4((TRIG5_CHAIN_5_4 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG5_CHAIN_5_4's HWTS4 field.
     *
     * Segment 4 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG5_CHAIN_5_4_HWTS4(
        ADC_ETC_TRIG5_CHAIN_5_4_HWTS4 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_5_4;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG5_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG5_CHAIN_5_4's CSEL4 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG5_CHAIN_5_4_CSEL4 get_TRIG5_CHAIN_5_4_CSEL4() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_5_4_CSEL4((TRIG5_CHAIN_5_4 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG5_CHAIN_5_4's CSEL4 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG5_CHAIN_5_4_CSEL4(
        ADC_ETC_TRIG5_CHAIN_5_4_CSEL4 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_5_4;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG5_CHAIN_5_4 = curr;
    }

    /**
     * Get all of TRIG5_CHAIN_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Chain 4/5 Register
     */
    inline void get_TRIG5_CHAIN_5_4(
        bool &IE5_EN, ADC_ETC_TRIG5_CHAIN_5_4_IE5 &IE5, bool &B2B5,
        ADC_ETC_TRIG5_CHAIN_5_4_HWTS5 &HWTS5,
        ADC_ETC_TRIG5_CHAIN_5_4_CSEL5 &CSEL5, bool &IE4_EN,
        ADC_ETC_TRIG5_CHAIN_5_4_IE4 &IE4, bool &B2B4,
        ADC_ETC_TRIG5_CHAIN_5_4_HWTS4 &HWTS4,
        ADC_ETC_TRIG5_CHAIN_5_4_CSEL4 &CSEL4) volatile
    {
        uint32_t curr = TRIG5_CHAIN_5_4;

        IE5_EN = curr & (1u << 31u);
        IE5 = ADC_ETC_TRIG5_CHAIN_5_4_IE5((curr >> 29u) & 0b11u);
        B2B5 = curr & (1u << 28u);
        HWTS5 = ADC_ETC_TRIG5_CHAIN_5_4_HWTS5((curr >> 20u) & 0b11111111u);
        CSEL5 = ADC_ETC_TRIG5_CHAIN_5_4_CSEL5((curr >> 16u) & 0b1111u);
        IE4_EN = curr & (1u << 15u);
        IE4 = ADC_ETC_TRIG5_CHAIN_5_4_IE4((curr >> 13u) & 0b11u);
        B2B4 = curr & (1u << 12u);
        HWTS4 = ADC_ETC_TRIG5_CHAIN_5_4_HWTS4((curr >> 4u) & 0b11111111u);
        CSEL4 = ADC_ETC_TRIG5_CHAIN_5_4_CSEL4((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG5_CHAIN_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Chain 4/5 Register
     */
    inline void set_TRIG5_CHAIN_5_4(
        bool IE5_EN, ADC_ETC_TRIG5_CHAIN_5_4_IE5 IE5, bool B2B5,
        ADC_ETC_TRIG5_CHAIN_5_4_HWTS5 HWTS5,
        ADC_ETC_TRIG5_CHAIN_5_4_CSEL5 CSEL5, bool IE4_EN,
        ADC_ETC_TRIG5_CHAIN_5_4_IE4 IE4, bool B2B4,
        ADC_ETC_TRIG5_CHAIN_5_4_HWTS4 HWTS4,
        ADC_ETC_TRIG5_CHAIN_5_4_CSEL4 CSEL4) volatile
    {
        uint32_t curr = TRIG5_CHAIN_5_4;

        curr &= ~(0b1u << 31u);
        curr |= (IE5_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE5) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B5 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS5) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL5) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE4_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE4) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B4 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS4) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL4) & 0b1111u) << 0u;

        TRIG5_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG5_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline bool get_TRIG5_CHAIN_7_6_IE7_EN() volatile
    {
        return TRIG5_CHAIN_7_6 & (1u << 31u);
    }

    /**
     * Set TRIG5_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void set_TRIG5_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG5_CHAIN_7_6 |= 1u << 31u;
    }

    /**
     * Clear TRIG5_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void clear_TRIG5_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG5_CHAIN_7_6 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG5_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void toggle_TRIG5_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG5_CHAIN_7_6 ^= 1u << 31u;
    }

    /**
     * Get TRIG5_CHAIN_7_6's IE7 field.
     *
     * Segment 7 interrupt enable. (This bit field is meaningful only when
     * IE7_EN is set)
     */
    inline ADC_ETC_TRIG5_CHAIN_7_6_IE7 get_TRIG5_CHAIN_7_6_IE7() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_7_6_IE7((TRIG5_CHAIN_7_6 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG5_CHAIN_7_6's IE7 field.
     *
     * Segment 7 interrupt enable. (This bit field is meaningful only when
     * IE7_EN is set)
     */
    inline void set_TRIG5_CHAIN_7_6_IE7(
        ADC_ETC_TRIG5_CHAIN_7_6_IE7 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_7_6;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG5_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG5_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline bool get_TRIG5_CHAIN_7_6_B2B7() volatile
    {
        return TRIG5_CHAIN_7_6 & (1u << 28u);
    }

    /**
     * Set TRIG5_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void set_TRIG5_CHAIN_7_6_B2B7() volatile
    {
        TRIG5_CHAIN_7_6 |= 1u << 28u;
    }

    /**
     * Clear TRIG5_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void clear_TRIG5_CHAIN_7_6_B2B7() volatile
    {
        TRIG5_CHAIN_7_6 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG5_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void toggle_TRIG5_CHAIN_7_6_B2B7() volatile
    {
        TRIG5_CHAIN_7_6 ^= 1u << 28u;
    }

    /**
     * Get TRIG5_CHAIN_7_6's HWTS7 field.
     *
     * Segment 7 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG5_CHAIN_7_6_HWTS7 get_TRIG5_CHAIN_7_6_HWTS7() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_7_6_HWTS7((TRIG5_CHAIN_7_6 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG5_CHAIN_7_6's HWTS7 field.
     *
     * Segment 7 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG5_CHAIN_7_6_HWTS7(
        ADC_ETC_TRIG5_CHAIN_7_6_HWTS7 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_7_6;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG5_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG5_CHAIN_7_6's CSEL7 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG5_CHAIN_7_6_CSEL7 get_TRIG5_CHAIN_7_6_CSEL7() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_7_6_CSEL7((TRIG5_CHAIN_7_6 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG5_CHAIN_7_6's CSEL7 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG5_CHAIN_7_6_CSEL7(
        ADC_ETC_TRIG5_CHAIN_7_6_CSEL7 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_7_6;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG5_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG5_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline bool get_TRIG5_CHAIN_7_6_IE6_EN() volatile
    {
        return TRIG5_CHAIN_7_6 & (1u << 15u);
    }

    /**
     * Set TRIG5_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void set_TRIG5_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG5_CHAIN_7_6 |= 1u << 15u;
    }

    /**
     * Clear TRIG5_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void clear_TRIG5_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG5_CHAIN_7_6 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG5_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void toggle_TRIG5_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG5_CHAIN_7_6 ^= 1u << 15u;
    }

    /**
     * Get TRIG5_CHAIN_7_6's IE6 field.
     *
     * Segment 6 interrupt enable. (This bit field is meaningful only when
     * IE6_EN is set)
     */
    inline ADC_ETC_TRIG5_CHAIN_7_6_IE6 get_TRIG5_CHAIN_7_6_IE6() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_7_6_IE6((TRIG5_CHAIN_7_6 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG5_CHAIN_7_6's IE6 field.
     *
     * Segment 6 interrupt enable. (This bit field is meaningful only when
     * IE6_EN is set)
     */
    inline void set_TRIG5_CHAIN_7_6_IE6(
        ADC_ETC_TRIG5_CHAIN_7_6_IE6 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_7_6;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG5_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG5_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline bool get_TRIG5_CHAIN_7_6_B2B6() volatile
    {
        return TRIG5_CHAIN_7_6 & (1u << 12u);
    }

    /**
     * Set TRIG5_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void set_TRIG5_CHAIN_7_6_B2B6() volatile
    {
        TRIG5_CHAIN_7_6 |= 1u << 12u;
    }

    /**
     * Clear TRIG5_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void clear_TRIG5_CHAIN_7_6_B2B6() volatile
    {
        TRIG5_CHAIN_7_6 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG5_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void toggle_TRIG5_CHAIN_7_6_B2B6() volatile
    {
        TRIG5_CHAIN_7_6 ^= 1u << 12u;
    }

    /**
     * Get TRIG5_CHAIN_7_6's HWTS6 field.
     *
     * Segment 6 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG5_CHAIN_7_6_HWTS6 get_TRIG5_CHAIN_7_6_HWTS6() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_7_6_HWTS6((TRIG5_CHAIN_7_6 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG5_CHAIN_7_6's HWTS6 field.
     *
     * Segment 6 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG5_CHAIN_7_6_HWTS6(
        ADC_ETC_TRIG5_CHAIN_7_6_HWTS6 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_7_6;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG5_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG5_CHAIN_7_6's CSEL6 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG5_CHAIN_7_6_CSEL6 get_TRIG5_CHAIN_7_6_CSEL6() volatile
    {
        return ADC_ETC_TRIG5_CHAIN_7_6_CSEL6((TRIG5_CHAIN_7_6 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG5_CHAIN_7_6's CSEL6 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG5_CHAIN_7_6_CSEL6(
        ADC_ETC_TRIG5_CHAIN_7_6_CSEL6 value) volatile
    {
        uint32_t curr = TRIG5_CHAIN_7_6;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG5_CHAIN_7_6 = curr;
    }

    /**
     * Get all of TRIG5_CHAIN_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Chain 6/7 Register
     */
    inline void get_TRIG5_CHAIN_7_6(
        bool &IE7_EN, ADC_ETC_TRIG5_CHAIN_7_6_IE7 &IE7, bool &B2B7,
        ADC_ETC_TRIG5_CHAIN_7_6_HWTS7 &HWTS7,
        ADC_ETC_TRIG5_CHAIN_7_6_CSEL7 &CSEL7, bool &IE6_EN,
        ADC_ETC_TRIG5_CHAIN_7_6_IE6 &IE6, bool &B2B6,
        ADC_ETC_TRIG5_CHAIN_7_6_HWTS6 &HWTS6,
        ADC_ETC_TRIG5_CHAIN_7_6_CSEL6 &CSEL6) volatile
    {
        uint32_t curr = TRIG5_CHAIN_7_6;

        IE7_EN = curr & (1u << 31u);
        IE7 = ADC_ETC_TRIG5_CHAIN_7_6_IE7((curr >> 29u) & 0b11u);
        B2B7 = curr & (1u << 28u);
        HWTS7 = ADC_ETC_TRIG5_CHAIN_7_6_HWTS7((curr >> 20u) & 0b11111111u);
        CSEL7 = ADC_ETC_TRIG5_CHAIN_7_6_CSEL7((curr >> 16u) & 0b1111u);
        IE6_EN = curr & (1u << 15u);
        IE6 = ADC_ETC_TRIG5_CHAIN_7_6_IE6((curr >> 13u) & 0b11u);
        B2B6 = curr & (1u << 12u);
        HWTS6 = ADC_ETC_TRIG5_CHAIN_7_6_HWTS6((curr >> 4u) & 0b11111111u);
        CSEL6 = ADC_ETC_TRIG5_CHAIN_7_6_CSEL6((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG5_CHAIN_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Chain 6/7 Register
     */
    inline void set_TRIG5_CHAIN_7_6(
        bool IE7_EN, ADC_ETC_TRIG5_CHAIN_7_6_IE7 IE7, bool B2B7,
        ADC_ETC_TRIG5_CHAIN_7_6_HWTS7 HWTS7,
        ADC_ETC_TRIG5_CHAIN_7_6_CSEL7 CSEL7, bool IE6_EN,
        ADC_ETC_TRIG5_CHAIN_7_6_IE6 IE6, bool B2B6,
        ADC_ETC_TRIG5_CHAIN_7_6_HWTS6 HWTS6,
        ADC_ETC_TRIG5_CHAIN_7_6_CSEL6 CSEL6) volatile
    {
        uint32_t curr = TRIG5_CHAIN_7_6;

        curr &= ~(0b1u << 31u);
        curr |= (IE7_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE7) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B7 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS7) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL7) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE6_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE6) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B6 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS6) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL6) & 0b1111u) << 0u;

        TRIG5_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG5_RESULT_1_0's DATA1 field.
     *
     * Result DATA1The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG5_RESULT_1_0_DATA1() volatile
    {
        return (TRIG5_RESULT_1_0 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG5_RESULT_1_0's DATA0 field.
     *
     * Result DATA0The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG5_RESULT_1_0_DATA0() volatile
    {
        return (TRIG5_RESULT_1_0 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG5_RESULT_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 1/0 Register
     */
    inline void get_TRIG5_RESULT_1_0(uint16_t &DATA1, uint16_t &DATA0) volatile
    {
        uint32_t curr = TRIG5_RESULT_1_0;

        DATA1 = (curr >> 16u) & 0b111111111111u;
        DATA0 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG5_RESULT_3_2's DATA3 field.
     *
     * Result DATA3The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG5_RESULT_3_2_DATA3() volatile
    {
        return (TRIG5_RESULT_3_2 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG5_RESULT_3_2's DATA2 field.
     *
     * Result DATA2The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG5_RESULT_3_2_DATA2() volatile
    {
        return (TRIG5_RESULT_3_2 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG5_RESULT_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 3/2 Register
     */
    inline void get_TRIG5_RESULT_3_2(uint16_t &DATA3, uint16_t &DATA2) volatile
    {
        uint32_t curr = TRIG5_RESULT_3_2;

        DATA3 = (curr >> 16u) & 0b111111111111u;
        DATA2 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG5_RESULT_5_4's DATA5 field.
     *
     * Result DATA5The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG5_RESULT_5_4_DATA5() volatile
    {
        return (TRIG5_RESULT_5_4 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG5_RESULT_5_4's DATA4 field.
     *
     * Result DATA4The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG5_RESULT_5_4_DATA4() volatile
    {
        return (TRIG5_RESULT_5_4 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG5_RESULT_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 5/4 Register
     */
    inline void get_TRIG5_RESULT_5_4(uint16_t &DATA5, uint16_t &DATA4) volatile
    {
        uint32_t curr = TRIG5_RESULT_5_4;

        DATA5 = (curr >> 16u) & 0b111111111111u;
        DATA4 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG5_RESULT_7_6's DATA7 field.
     *
     * Result DATA7The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG5_RESULT_7_6_DATA7() volatile
    {
        return (TRIG5_RESULT_7_6 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG5_RESULT_7_6's DATA6 field.
     *
     * Result DATA6The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG5_RESULT_7_6_DATA6() volatile
    {
        return (TRIG5_RESULT_7_6 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG5_RESULT_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 7/6 Register
     */
    inline void get_TRIG5_RESULT_7_6(uint16_t &DATA7, uint16_t &DATA6) volatile
    {
        uint32_t curr = TRIG5_RESULT_7_6;

        DATA7 = (curr >> 16u) & 0b111111111111u;
        DATA6 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG6_CTRL's CHAINx_DONE field.
     *
     * Segment x done detection
     */
    inline ADC_ETC_TRIG6_CTRL_CHAINx_DONE get_TRIG6_CTRL_CHAINx_DONE() volatile
    {
        return ADC_ETC_TRIG6_CTRL_CHAINx_DONE((TRIG6_CTRL >> 24u) &
                                              0b11111111u);
    }

    /**
     * Set TRIG6_CTRL's CHAINx_DONE field.
     *
     * Segment x done detection
     */
    inline void set_TRIG6_CTRL_CHAINx_DONE(
        ADC_ETC_TRIG6_CTRL_CHAINx_DONE value) volatile
    {
        uint32_t curr = TRIG6_CTRL;

        curr &= ~(0b11111111u << 24u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 24u;

        TRIG6_CTRL = curr;
    }

    /**
     * Get TRIG6_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline bool get_TRIG6_CTRL_SYNC_MODE() volatile
    {
        return TRIG6_CTRL & (1u << 16u);
    }

    /**
     * Set TRIG6_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void set_TRIG6_CTRL_SYNC_MODE() volatile
    {
        TRIG6_CTRL |= 1u << 16u;
    }

    /**
     * Clear TRIG6_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void clear_TRIG6_CTRL_SYNC_MODE() volatile
    {
        TRIG6_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle TRIG6_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void toggle_TRIG6_CTRL_SYNC_MODE() volatile
    {
        TRIG6_CTRL ^= 1u << 16u;
    }

    /**
     * Get TRIG6_CTRL's TRIG_PRIORITY field.
     *
     * External trigger priority, 7 is highest priority, while 0 is lowest
     */
    inline uint8_t get_TRIG6_CTRL_TRIG_PRIORITY() volatile
    {
        return (TRIG6_CTRL >> 12u) & 0b111u;
    }

    /**
     * Set TRIG6_CTRL's TRIG_PRIORITY field.
     *
     * External trigger priority, 7 is highest priority, while 0 is lowest
     */
    inline void set_TRIG6_CTRL_TRIG_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = TRIG6_CTRL;

        curr &= ~(0b111u << 12u);
        curr |= (value & 0b111u) << 12u;

        TRIG6_CTRL = curr;
    }

    /**
     * Get TRIG6_CTRL's TRIG_CHAIN field.
     *
     * The number of segments inside the trigger chain of TRIGa.
     */
    inline ADC_ETC_TRIG6_CTRL_TRIG_CHAIN get_TRIG6_CTRL_TRIG_CHAIN() volatile
    {
        return ADC_ETC_TRIG6_CTRL_TRIG_CHAIN((TRIG6_CTRL >> 8u) & 0b111u);
    }

    /**
     * Set TRIG6_CTRL's TRIG_CHAIN field.
     *
     * The number of segments inside the trigger chain of TRIGa.
     */
    inline void set_TRIG6_CTRL_TRIG_CHAIN(
        ADC_ETC_TRIG6_CTRL_TRIG_CHAIN value) volatile
    {
        uint32_t curr = TRIG6_CTRL;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TRIG6_CTRL = curr;
    }

    /**
     * Get TRIG6_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline bool get_TRIG6_CTRL_TRIG_MODE() volatile
    {
        return TRIG6_CTRL & (1u << 4u);
    }

    /**
     * Set TRIG6_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void set_TRIG6_CTRL_TRIG_MODE() volatile
    {
        TRIG6_CTRL |= 1u << 4u;
    }

    /**
     * Clear TRIG6_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void clear_TRIG6_CTRL_TRIG_MODE() volatile
    {
        TRIG6_CTRL &= ~(1u << 4u);
    }

    /**
     * Toggle TRIG6_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void toggle_TRIG6_CTRL_TRIG_MODE() volatile
    {
        TRIG6_CTRL ^= 1u << 4u;
    }

    /**
     * Get TRIG6_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline bool get_TRIG6_CTRL_SW_TRIG() volatile
    {
        return TRIG6_CTRL & (1u << 0u);
    }

    /**
     * Set TRIG6_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void set_TRIG6_CTRL_SW_TRIG() volatile
    {
        TRIG6_CTRL |= 1u << 0u;
    }

    /**
     * Clear TRIG6_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void clear_TRIG6_CTRL_SW_TRIG() volatile
    {
        TRIG6_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle TRIG6_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void toggle_TRIG6_CTRL_SW_TRIG() volatile
    {
        TRIG6_CTRL ^= 1u << 0u;
    }

    /**
     * Get all of TRIG6_CTRL's bit fields.
     *
     * (read-write) ETC_TRIG Control Register
     */
    inline void get_TRIG6_CTRL(ADC_ETC_TRIG6_CTRL_CHAINx_DONE &CHAINx_DONE,
                               bool &SYNC_MODE, uint8_t &TRIG_PRIORITY,
                               ADC_ETC_TRIG6_CTRL_TRIG_CHAIN &TRIG_CHAIN,
                               bool &TRIG_MODE, bool &SW_TRIG) volatile
    {
        uint32_t curr = TRIG6_CTRL;

        CHAINx_DONE =
            ADC_ETC_TRIG6_CTRL_CHAINx_DONE((curr >> 24u) & 0b11111111u);
        SYNC_MODE = curr & (1u << 16u);
        TRIG_PRIORITY = (curr >> 12u) & 0b111u;
        TRIG_CHAIN = ADC_ETC_TRIG6_CTRL_TRIG_CHAIN((curr >> 8u) & 0b111u);
        TRIG_MODE = curr & (1u << 4u);
        SW_TRIG = curr & (1u << 0u);
    }

    /**
     * Set all of TRIG6_CTRL's bit fields.
     *
     * (read-write) ETC_TRIG Control Register
     */
    inline void set_TRIG6_CTRL(ADC_ETC_TRIG6_CTRL_CHAINx_DONE CHAINx_DONE,
                               bool SYNC_MODE, uint8_t TRIG_PRIORITY,
                               ADC_ETC_TRIG6_CTRL_TRIG_CHAIN TRIG_CHAIN,
                               bool TRIG_MODE, bool SW_TRIG) volatile
    {
        uint32_t curr = TRIG6_CTRL;

        curr &= ~(0b11111111u << 24u);
        curr |= (std::to_underlying(CHAINx_DONE) & 0b11111111u) << 24u;
        curr &= ~(0b1u << 16u);
        curr |= (SYNC_MODE & 0b1u) << 16u;
        curr &= ~(0b111u << 12u);
        curr |= (TRIG_PRIORITY & 0b111u) << 12u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(TRIG_CHAIN) & 0b111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (TRIG_MODE & 0b1u) << 4u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG & 0b1u) << 0u;

        TRIG6_CTRL = curr;
    }

    /**
     * Get TRIG6_COUNTER's SAMPLE_INTERVAL field.
     *
     * TRIGGER sampling interval counter
     */
    inline uint16_t get_TRIG6_COUNTER_SAMPLE_INTERVAL() volatile
    {
        return (TRIG6_COUNTER >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set TRIG6_COUNTER's SAMPLE_INTERVAL field.
     *
     * TRIGGER sampling interval counter
     */
    inline void set_TRIG6_COUNTER_SAMPLE_INTERVAL(uint16_t value) volatile
    {
        uint32_t curr = TRIG6_COUNTER;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        TRIG6_COUNTER = curr;
    }

    /**
     * Get TRIG6_COUNTER's INIT_DELAY field.
     *
     * TRIGGER initial delay counter. Initial_delay =
     * (INIT_DELAY+1)*(PRE_DIVIDER+1)*ipg_clk
     */
    inline uint16_t get_TRIG6_COUNTER_INIT_DELAY() volatile
    {
        return (TRIG6_COUNTER >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TRIG6_COUNTER's INIT_DELAY field.
     *
     * TRIGGER initial delay counter. Initial_delay =
     * (INIT_DELAY+1)*(PRE_DIVIDER+1)*ipg_clk
     */
    inline void set_TRIG6_COUNTER_INIT_DELAY(uint16_t value) volatile
    {
        uint32_t curr = TRIG6_COUNTER;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TRIG6_COUNTER = curr;
    }

    /**
     * Get all of TRIG6_COUNTER's bit fields.
     *
     * (read-write) ETC_TRIG Counter Register
     */
    inline void get_TRIG6_COUNTER(uint16_t &SAMPLE_INTERVAL,
                                  uint16_t &INIT_DELAY) volatile
    {
        uint32_t curr = TRIG6_COUNTER;

        SAMPLE_INTERVAL = (curr >> 16u) & 0b1111111111111111u;
        INIT_DELAY = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of TRIG6_COUNTER's bit fields.
     *
     * (read-write) ETC_TRIG Counter Register
     */
    inline void set_TRIG6_COUNTER(uint16_t SAMPLE_INTERVAL,
                                  uint16_t INIT_DELAY) volatile
    {
        uint32_t curr = TRIG6_COUNTER;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (SAMPLE_INTERVAL & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (INIT_DELAY & 0b1111111111111111u) << 0u;

        TRIG6_COUNTER = curr;
    }

    /**
     * Get TRIG6_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline bool get_TRIG6_CHAIN_1_0_IE1_EN() volatile
    {
        return TRIG6_CHAIN_1_0 & (1u << 31u);
    }

    /**
     * Set TRIG6_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void set_TRIG6_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG6_CHAIN_1_0 |= 1u << 31u;
    }

    /**
     * Clear TRIG6_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void clear_TRIG6_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG6_CHAIN_1_0 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG6_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void toggle_TRIG6_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG6_CHAIN_1_0 ^= 1u << 31u;
    }

    /**
     * Get TRIG6_CHAIN_1_0's IE1 field.
     *
     * Segment 1 interrupt enable. (This bit field is meaningful only when
     * IE1_EN is set)
     */
    inline ADC_ETC_TRIG6_CHAIN_1_0_IE1 get_TRIG6_CHAIN_1_0_IE1() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_1_0_IE1((TRIG6_CHAIN_1_0 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG6_CHAIN_1_0's IE1 field.
     *
     * Segment 1 interrupt enable. (This bit field is meaningful only when
     * IE1_EN is set)
     */
    inline void set_TRIG6_CHAIN_1_0_IE1(
        ADC_ETC_TRIG6_CHAIN_1_0_IE1 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_1_0;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG6_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG6_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline bool get_TRIG6_CHAIN_1_0_B2B1() volatile
    {
        return TRIG6_CHAIN_1_0 & (1u << 28u);
    }

    /**
     * Set TRIG6_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void set_TRIG6_CHAIN_1_0_B2B1() volatile
    {
        TRIG6_CHAIN_1_0 |= 1u << 28u;
    }

    /**
     * Clear TRIG6_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void clear_TRIG6_CHAIN_1_0_B2B1() volatile
    {
        TRIG6_CHAIN_1_0 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG6_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void toggle_TRIG6_CHAIN_1_0_B2B1() volatile
    {
        TRIG6_CHAIN_1_0 ^= 1u << 28u;
    }

    /**
     * Get TRIG6_CHAIN_1_0's HWTS1 field.
     *
     * Segment 1 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG6_CHAIN_1_0_HWTS1 get_TRIG6_CHAIN_1_0_HWTS1() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_1_0_HWTS1((TRIG6_CHAIN_1_0 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG6_CHAIN_1_0's HWTS1 field.
     *
     * Segment 1 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG6_CHAIN_1_0_HWTS1(
        ADC_ETC_TRIG6_CHAIN_1_0_HWTS1 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_1_0;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG6_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG6_CHAIN_1_0's CSEL1 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG6_CHAIN_1_0_CSEL1 get_TRIG6_CHAIN_1_0_CSEL1() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_1_0_CSEL1((TRIG6_CHAIN_1_0 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG6_CHAIN_1_0's CSEL1 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG6_CHAIN_1_0_CSEL1(
        ADC_ETC_TRIG6_CHAIN_1_0_CSEL1 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_1_0;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG6_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG6_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline bool get_TRIG6_CHAIN_1_0_IE0_EN() volatile
    {
        return TRIG6_CHAIN_1_0 & (1u << 15u);
    }

    /**
     * Set TRIG6_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void set_TRIG6_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG6_CHAIN_1_0 |= 1u << 15u;
    }

    /**
     * Clear TRIG6_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void clear_TRIG6_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG6_CHAIN_1_0 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG6_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void toggle_TRIG6_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG6_CHAIN_1_0 ^= 1u << 15u;
    }

    /**
     * Get TRIG6_CHAIN_1_0's IE0 field.
     *
     * Segment 0 interrupt enable. (This bit field is meaningful only when
     * IE0_EN is set)
     */
    inline ADC_ETC_TRIG6_CHAIN_1_0_IE0 get_TRIG6_CHAIN_1_0_IE0() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_1_0_IE0((TRIG6_CHAIN_1_0 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG6_CHAIN_1_0's IE0 field.
     *
     * Segment 0 interrupt enable. (This bit field is meaningful only when
     * IE0_EN is set)
     */
    inline void set_TRIG6_CHAIN_1_0_IE0(
        ADC_ETC_TRIG6_CHAIN_1_0_IE0 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_1_0;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG6_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG6_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline bool get_TRIG6_CHAIN_1_0_B2B0() volatile
    {
        return TRIG6_CHAIN_1_0 & (1u << 12u);
    }

    /**
     * Set TRIG6_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void set_TRIG6_CHAIN_1_0_B2B0() volatile
    {
        TRIG6_CHAIN_1_0 |= 1u << 12u;
    }

    /**
     * Clear TRIG6_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void clear_TRIG6_CHAIN_1_0_B2B0() volatile
    {
        TRIG6_CHAIN_1_0 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG6_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void toggle_TRIG6_CHAIN_1_0_B2B0() volatile
    {
        TRIG6_CHAIN_1_0 ^= 1u << 12u;
    }

    /**
     * Get TRIG6_CHAIN_1_0's HWTS0 field.
     *
     * Segment 0 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG6_CHAIN_1_0_HWTS0 get_TRIG6_CHAIN_1_0_HWTS0() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_1_0_HWTS0((TRIG6_CHAIN_1_0 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG6_CHAIN_1_0's HWTS0 field.
     *
     * Segment 0 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG6_CHAIN_1_0_HWTS0(
        ADC_ETC_TRIG6_CHAIN_1_0_HWTS0 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_1_0;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG6_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG6_CHAIN_1_0's CSEL0 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG6_CHAIN_1_0_CSEL0 get_TRIG6_CHAIN_1_0_CSEL0() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_1_0_CSEL0((TRIG6_CHAIN_1_0 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG6_CHAIN_1_0's CSEL0 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG6_CHAIN_1_0_CSEL0(
        ADC_ETC_TRIG6_CHAIN_1_0_CSEL0 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_1_0;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG6_CHAIN_1_0 = curr;
    }

    /**
     * Get all of TRIG6_CHAIN_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Chain 0/1 Register
     */
    inline void get_TRIG6_CHAIN_1_0(
        bool &IE1_EN, ADC_ETC_TRIG6_CHAIN_1_0_IE1 &IE1, bool &B2B1,
        ADC_ETC_TRIG6_CHAIN_1_0_HWTS1 &HWTS1,
        ADC_ETC_TRIG6_CHAIN_1_0_CSEL1 &CSEL1, bool &IE0_EN,
        ADC_ETC_TRIG6_CHAIN_1_0_IE0 &IE0, bool &B2B0,
        ADC_ETC_TRIG6_CHAIN_1_0_HWTS0 &HWTS0,
        ADC_ETC_TRIG6_CHAIN_1_0_CSEL0 &CSEL0) volatile
    {
        uint32_t curr = TRIG6_CHAIN_1_0;

        IE1_EN = curr & (1u << 31u);
        IE1 = ADC_ETC_TRIG6_CHAIN_1_0_IE1((curr >> 29u) & 0b11u);
        B2B1 = curr & (1u << 28u);
        HWTS1 = ADC_ETC_TRIG6_CHAIN_1_0_HWTS1((curr >> 20u) & 0b11111111u);
        CSEL1 = ADC_ETC_TRIG6_CHAIN_1_0_CSEL1((curr >> 16u) & 0b1111u);
        IE0_EN = curr & (1u << 15u);
        IE0 = ADC_ETC_TRIG6_CHAIN_1_0_IE0((curr >> 13u) & 0b11u);
        B2B0 = curr & (1u << 12u);
        HWTS0 = ADC_ETC_TRIG6_CHAIN_1_0_HWTS0((curr >> 4u) & 0b11111111u);
        CSEL0 = ADC_ETC_TRIG6_CHAIN_1_0_CSEL0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG6_CHAIN_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Chain 0/1 Register
     */
    inline void set_TRIG6_CHAIN_1_0(
        bool IE1_EN, ADC_ETC_TRIG6_CHAIN_1_0_IE1 IE1, bool B2B1,
        ADC_ETC_TRIG6_CHAIN_1_0_HWTS1 HWTS1,
        ADC_ETC_TRIG6_CHAIN_1_0_CSEL1 CSEL1, bool IE0_EN,
        ADC_ETC_TRIG6_CHAIN_1_0_IE0 IE0, bool B2B0,
        ADC_ETC_TRIG6_CHAIN_1_0_HWTS0 HWTS0,
        ADC_ETC_TRIG6_CHAIN_1_0_CSEL0 CSEL0) volatile
    {
        uint32_t curr = TRIG6_CHAIN_1_0;

        curr &= ~(0b1u << 31u);
        curr |= (IE1_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE1) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B1 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS1) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL1) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE0_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE0) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B0 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS0) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL0) & 0b1111u) << 0u;

        TRIG6_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG6_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline bool get_TRIG6_CHAIN_3_2_IE3_EN() volatile
    {
        return TRIG6_CHAIN_3_2 & (1u << 31u);
    }

    /**
     * Set TRIG6_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void set_TRIG6_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG6_CHAIN_3_2 |= 1u << 31u;
    }

    /**
     * Clear TRIG6_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void clear_TRIG6_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG6_CHAIN_3_2 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG6_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void toggle_TRIG6_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG6_CHAIN_3_2 ^= 1u << 31u;
    }

    /**
     * Get TRIG6_CHAIN_3_2's IE3 field.
     *
     * Segment 3 interrupt enable. (This bit field is meaningful only when
     * IE3_EN is set)
     */
    inline ADC_ETC_TRIG6_CHAIN_3_2_IE3 get_TRIG6_CHAIN_3_2_IE3() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_3_2_IE3((TRIG6_CHAIN_3_2 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG6_CHAIN_3_2's IE3 field.
     *
     * Segment 3 interrupt enable. (This bit field is meaningful only when
     * IE3_EN is set)
     */
    inline void set_TRIG6_CHAIN_3_2_IE3(
        ADC_ETC_TRIG6_CHAIN_3_2_IE3 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_3_2;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG6_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG6_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline bool get_TRIG6_CHAIN_3_2_B2B3() volatile
    {
        return TRIG6_CHAIN_3_2 & (1u << 28u);
    }

    /**
     * Set TRIG6_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void set_TRIG6_CHAIN_3_2_B2B3() volatile
    {
        TRIG6_CHAIN_3_2 |= 1u << 28u;
    }

    /**
     * Clear TRIG6_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void clear_TRIG6_CHAIN_3_2_B2B3() volatile
    {
        TRIG6_CHAIN_3_2 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG6_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void toggle_TRIG6_CHAIN_3_2_B2B3() volatile
    {
        TRIG6_CHAIN_3_2 ^= 1u << 28u;
    }

    /**
     * Get TRIG6_CHAIN_3_2's HWTS3 field.
     *
     * Segment 3 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG6_CHAIN_3_2_HWTS3 get_TRIG6_CHAIN_3_2_HWTS3() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_3_2_HWTS3((TRIG6_CHAIN_3_2 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG6_CHAIN_3_2's HWTS3 field.
     *
     * Segment 3 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG6_CHAIN_3_2_HWTS3(
        ADC_ETC_TRIG6_CHAIN_3_2_HWTS3 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_3_2;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG6_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG6_CHAIN_3_2's CSEL3 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG6_CHAIN_3_2_CSEL3 get_TRIG6_CHAIN_3_2_CSEL3() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_3_2_CSEL3((TRIG6_CHAIN_3_2 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG6_CHAIN_3_2's CSEL3 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG6_CHAIN_3_2_CSEL3(
        ADC_ETC_TRIG6_CHAIN_3_2_CSEL3 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_3_2;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG6_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG6_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline bool get_TRIG6_CHAIN_3_2_IE2_EN() volatile
    {
        return TRIG6_CHAIN_3_2 & (1u << 15u);
    }

    /**
     * Set TRIG6_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void set_TRIG6_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG6_CHAIN_3_2 |= 1u << 15u;
    }

    /**
     * Clear TRIG6_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void clear_TRIG6_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG6_CHAIN_3_2 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG6_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void toggle_TRIG6_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG6_CHAIN_3_2 ^= 1u << 15u;
    }

    /**
     * Get TRIG6_CHAIN_3_2's IE2 field.
     *
     * Segment 2 interrupt enable. (This bit field is meaningful only when
     * IE2_EN is set)
     */
    inline ADC_ETC_TRIG6_CHAIN_3_2_IE2 get_TRIG6_CHAIN_3_2_IE2() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_3_2_IE2((TRIG6_CHAIN_3_2 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG6_CHAIN_3_2's IE2 field.
     *
     * Segment 2 interrupt enable. (This bit field is meaningful only when
     * IE2_EN is set)
     */
    inline void set_TRIG6_CHAIN_3_2_IE2(
        ADC_ETC_TRIG6_CHAIN_3_2_IE2 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_3_2;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG6_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG6_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline bool get_TRIG6_CHAIN_3_2_B2B2() volatile
    {
        return TRIG6_CHAIN_3_2 & (1u << 12u);
    }

    /**
     * Set TRIG6_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void set_TRIG6_CHAIN_3_2_B2B2() volatile
    {
        TRIG6_CHAIN_3_2 |= 1u << 12u;
    }

    /**
     * Clear TRIG6_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void clear_TRIG6_CHAIN_3_2_B2B2() volatile
    {
        TRIG6_CHAIN_3_2 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG6_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void toggle_TRIG6_CHAIN_3_2_B2B2() volatile
    {
        TRIG6_CHAIN_3_2 ^= 1u << 12u;
    }

    /**
     * Get TRIG6_CHAIN_3_2's HWTS2 field.
     *
     * Segment 2 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG6_CHAIN_3_2_HWTS2 get_TRIG6_CHAIN_3_2_HWTS2() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_3_2_HWTS2((TRIG6_CHAIN_3_2 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG6_CHAIN_3_2's HWTS2 field.
     *
     * Segment 2 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG6_CHAIN_3_2_HWTS2(
        ADC_ETC_TRIG6_CHAIN_3_2_HWTS2 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_3_2;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG6_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG6_CHAIN_3_2's CSEL2 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG6_CHAIN_3_2_CSEL2 get_TRIG6_CHAIN_3_2_CSEL2() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_3_2_CSEL2((TRIG6_CHAIN_3_2 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG6_CHAIN_3_2's CSEL2 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG6_CHAIN_3_2_CSEL2(
        ADC_ETC_TRIG6_CHAIN_3_2_CSEL2 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_3_2;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG6_CHAIN_3_2 = curr;
    }

    /**
     * Get all of TRIG6_CHAIN_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Chain 2/3 Register
     */
    inline void get_TRIG6_CHAIN_3_2(
        bool &IE3_EN, ADC_ETC_TRIG6_CHAIN_3_2_IE3 &IE3, bool &B2B3,
        ADC_ETC_TRIG6_CHAIN_3_2_HWTS3 &HWTS3,
        ADC_ETC_TRIG6_CHAIN_3_2_CSEL3 &CSEL3, bool &IE2_EN,
        ADC_ETC_TRIG6_CHAIN_3_2_IE2 &IE2, bool &B2B2,
        ADC_ETC_TRIG6_CHAIN_3_2_HWTS2 &HWTS2,
        ADC_ETC_TRIG6_CHAIN_3_2_CSEL2 &CSEL2) volatile
    {
        uint32_t curr = TRIG6_CHAIN_3_2;

        IE3_EN = curr & (1u << 31u);
        IE3 = ADC_ETC_TRIG6_CHAIN_3_2_IE3((curr >> 29u) & 0b11u);
        B2B3 = curr & (1u << 28u);
        HWTS3 = ADC_ETC_TRIG6_CHAIN_3_2_HWTS3((curr >> 20u) & 0b11111111u);
        CSEL3 = ADC_ETC_TRIG6_CHAIN_3_2_CSEL3((curr >> 16u) & 0b1111u);
        IE2_EN = curr & (1u << 15u);
        IE2 = ADC_ETC_TRIG6_CHAIN_3_2_IE2((curr >> 13u) & 0b11u);
        B2B2 = curr & (1u << 12u);
        HWTS2 = ADC_ETC_TRIG6_CHAIN_3_2_HWTS2((curr >> 4u) & 0b11111111u);
        CSEL2 = ADC_ETC_TRIG6_CHAIN_3_2_CSEL2((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG6_CHAIN_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Chain 2/3 Register
     */
    inline void set_TRIG6_CHAIN_3_2(
        bool IE3_EN, ADC_ETC_TRIG6_CHAIN_3_2_IE3 IE3, bool B2B3,
        ADC_ETC_TRIG6_CHAIN_3_2_HWTS3 HWTS3,
        ADC_ETC_TRIG6_CHAIN_3_2_CSEL3 CSEL3, bool IE2_EN,
        ADC_ETC_TRIG6_CHAIN_3_2_IE2 IE2, bool B2B2,
        ADC_ETC_TRIG6_CHAIN_3_2_HWTS2 HWTS2,
        ADC_ETC_TRIG6_CHAIN_3_2_CSEL2 CSEL2) volatile
    {
        uint32_t curr = TRIG6_CHAIN_3_2;

        curr &= ~(0b1u << 31u);
        curr |= (IE3_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE3) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B3 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS3) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL3) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE2_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE2) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B2 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS2) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL2) & 0b1111u) << 0u;

        TRIG6_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG6_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline bool get_TRIG6_CHAIN_5_4_IE5_EN() volatile
    {
        return TRIG6_CHAIN_5_4 & (1u << 31u);
    }

    /**
     * Set TRIG6_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void set_TRIG6_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG6_CHAIN_5_4 |= 1u << 31u;
    }

    /**
     * Clear TRIG6_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void clear_TRIG6_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG6_CHAIN_5_4 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG6_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void toggle_TRIG6_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG6_CHAIN_5_4 ^= 1u << 31u;
    }

    /**
     * Get TRIG6_CHAIN_5_4's IE5 field.
     *
     * Segment 5 interrupt enable. (This bit field is meaningful only when
     * IE5_EN is set)
     */
    inline ADC_ETC_TRIG6_CHAIN_5_4_IE5 get_TRIG6_CHAIN_5_4_IE5() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_5_4_IE5((TRIG6_CHAIN_5_4 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG6_CHAIN_5_4's IE5 field.
     *
     * Segment 5 interrupt enable. (This bit field is meaningful only when
     * IE5_EN is set)
     */
    inline void set_TRIG6_CHAIN_5_4_IE5(
        ADC_ETC_TRIG6_CHAIN_5_4_IE5 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_5_4;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG6_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG6_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline bool get_TRIG6_CHAIN_5_4_B2B5() volatile
    {
        return TRIG6_CHAIN_5_4 & (1u << 28u);
    }

    /**
     * Set TRIG6_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void set_TRIG6_CHAIN_5_4_B2B5() volatile
    {
        TRIG6_CHAIN_5_4 |= 1u << 28u;
    }

    /**
     * Clear TRIG6_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void clear_TRIG6_CHAIN_5_4_B2B5() volatile
    {
        TRIG6_CHAIN_5_4 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG6_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void toggle_TRIG6_CHAIN_5_4_B2B5() volatile
    {
        TRIG6_CHAIN_5_4 ^= 1u << 28u;
    }

    /**
     * Get TRIG6_CHAIN_5_4's HWTS5 field.
     *
     * Segment 5 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG6_CHAIN_5_4_HWTS5 get_TRIG6_CHAIN_5_4_HWTS5() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_5_4_HWTS5((TRIG6_CHAIN_5_4 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG6_CHAIN_5_4's HWTS5 field.
     *
     * Segment 5 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG6_CHAIN_5_4_HWTS5(
        ADC_ETC_TRIG6_CHAIN_5_4_HWTS5 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_5_4;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG6_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG6_CHAIN_5_4's CSEL5 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG6_CHAIN_5_4_CSEL5 get_TRIG6_CHAIN_5_4_CSEL5() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_5_4_CSEL5((TRIG6_CHAIN_5_4 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG6_CHAIN_5_4's CSEL5 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG6_CHAIN_5_4_CSEL5(
        ADC_ETC_TRIG6_CHAIN_5_4_CSEL5 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_5_4;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG6_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG6_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline bool get_TRIG6_CHAIN_5_4_IE4_EN() volatile
    {
        return TRIG6_CHAIN_5_4 & (1u << 15u);
    }

    /**
     * Set TRIG6_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void set_TRIG6_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG6_CHAIN_5_4 |= 1u << 15u;
    }

    /**
     * Clear TRIG6_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void clear_TRIG6_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG6_CHAIN_5_4 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG6_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void toggle_TRIG6_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG6_CHAIN_5_4 ^= 1u << 15u;
    }

    /**
     * Get TRIG6_CHAIN_5_4's IE4 field.
     *
     * Segment 4 interrupt enable. (This bit field is meaningful only when
     * IE4_EN is set)
     */
    inline ADC_ETC_TRIG6_CHAIN_5_4_IE4 get_TRIG6_CHAIN_5_4_IE4() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_5_4_IE4((TRIG6_CHAIN_5_4 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG6_CHAIN_5_4's IE4 field.
     *
     * Segment 4 interrupt enable. (This bit field is meaningful only when
     * IE4_EN is set)
     */
    inline void set_TRIG6_CHAIN_5_4_IE4(
        ADC_ETC_TRIG6_CHAIN_5_4_IE4 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_5_4;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG6_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG6_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline bool get_TRIG6_CHAIN_5_4_B2B4() volatile
    {
        return TRIG6_CHAIN_5_4 & (1u << 12u);
    }

    /**
     * Set TRIG6_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void set_TRIG6_CHAIN_5_4_B2B4() volatile
    {
        TRIG6_CHAIN_5_4 |= 1u << 12u;
    }

    /**
     * Clear TRIG6_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void clear_TRIG6_CHAIN_5_4_B2B4() volatile
    {
        TRIG6_CHAIN_5_4 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG6_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void toggle_TRIG6_CHAIN_5_4_B2B4() volatile
    {
        TRIG6_CHAIN_5_4 ^= 1u << 12u;
    }

    /**
     * Get TRIG6_CHAIN_5_4's HWTS4 field.
     *
     * Segment 4 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG6_CHAIN_5_4_HWTS4 get_TRIG6_CHAIN_5_4_HWTS4() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_5_4_HWTS4((TRIG6_CHAIN_5_4 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG6_CHAIN_5_4's HWTS4 field.
     *
     * Segment 4 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG6_CHAIN_5_4_HWTS4(
        ADC_ETC_TRIG6_CHAIN_5_4_HWTS4 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_5_4;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG6_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG6_CHAIN_5_4's CSEL4 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG6_CHAIN_5_4_CSEL4 get_TRIG6_CHAIN_5_4_CSEL4() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_5_4_CSEL4((TRIG6_CHAIN_5_4 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG6_CHAIN_5_4's CSEL4 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG6_CHAIN_5_4_CSEL4(
        ADC_ETC_TRIG6_CHAIN_5_4_CSEL4 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_5_4;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG6_CHAIN_5_4 = curr;
    }

    /**
     * Get all of TRIG6_CHAIN_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Chain 4/5 Register
     */
    inline void get_TRIG6_CHAIN_5_4(
        bool &IE5_EN, ADC_ETC_TRIG6_CHAIN_5_4_IE5 &IE5, bool &B2B5,
        ADC_ETC_TRIG6_CHAIN_5_4_HWTS5 &HWTS5,
        ADC_ETC_TRIG6_CHAIN_5_4_CSEL5 &CSEL5, bool &IE4_EN,
        ADC_ETC_TRIG6_CHAIN_5_4_IE4 &IE4, bool &B2B4,
        ADC_ETC_TRIG6_CHAIN_5_4_HWTS4 &HWTS4,
        ADC_ETC_TRIG6_CHAIN_5_4_CSEL4 &CSEL4) volatile
    {
        uint32_t curr = TRIG6_CHAIN_5_4;

        IE5_EN = curr & (1u << 31u);
        IE5 = ADC_ETC_TRIG6_CHAIN_5_4_IE5((curr >> 29u) & 0b11u);
        B2B5 = curr & (1u << 28u);
        HWTS5 = ADC_ETC_TRIG6_CHAIN_5_4_HWTS5((curr >> 20u) & 0b11111111u);
        CSEL5 = ADC_ETC_TRIG6_CHAIN_5_4_CSEL5((curr >> 16u) & 0b1111u);
        IE4_EN = curr & (1u << 15u);
        IE4 = ADC_ETC_TRIG6_CHAIN_5_4_IE4((curr >> 13u) & 0b11u);
        B2B4 = curr & (1u << 12u);
        HWTS4 = ADC_ETC_TRIG6_CHAIN_5_4_HWTS4((curr >> 4u) & 0b11111111u);
        CSEL4 = ADC_ETC_TRIG6_CHAIN_5_4_CSEL4((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG6_CHAIN_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Chain 4/5 Register
     */
    inline void set_TRIG6_CHAIN_5_4(
        bool IE5_EN, ADC_ETC_TRIG6_CHAIN_5_4_IE5 IE5, bool B2B5,
        ADC_ETC_TRIG6_CHAIN_5_4_HWTS5 HWTS5,
        ADC_ETC_TRIG6_CHAIN_5_4_CSEL5 CSEL5, bool IE4_EN,
        ADC_ETC_TRIG6_CHAIN_5_4_IE4 IE4, bool B2B4,
        ADC_ETC_TRIG6_CHAIN_5_4_HWTS4 HWTS4,
        ADC_ETC_TRIG6_CHAIN_5_4_CSEL4 CSEL4) volatile
    {
        uint32_t curr = TRIG6_CHAIN_5_4;

        curr &= ~(0b1u << 31u);
        curr |= (IE5_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE5) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B5 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS5) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL5) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE4_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE4) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B4 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS4) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL4) & 0b1111u) << 0u;

        TRIG6_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG6_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline bool get_TRIG6_CHAIN_7_6_IE7_EN() volatile
    {
        return TRIG6_CHAIN_7_6 & (1u << 31u);
    }

    /**
     * Set TRIG6_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void set_TRIG6_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG6_CHAIN_7_6 |= 1u << 31u;
    }

    /**
     * Clear TRIG6_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void clear_TRIG6_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG6_CHAIN_7_6 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG6_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void toggle_TRIG6_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG6_CHAIN_7_6 ^= 1u << 31u;
    }

    /**
     * Get TRIG6_CHAIN_7_6's IE7 field.
     *
     * Segment 7 interrupt enable. (This bit field is meaningful only when
     * IE7_EN is set)
     */
    inline ADC_ETC_TRIG6_CHAIN_7_6_IE7 get_TRIG6_CHAIN_7_6_IE7() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_7_6_IE7((TRIG6_CHAIN_7_6 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG6_CHAIN_7_6's IE7 field.
     *
     * Segment 7 interrupt enable. (This bit field is meaningful only when
     * IE7_EN is set)
     */
    inline void set_TRIG6_CHAIN_7_6_IE7(
        ADC_ETC_TRIG6_CHAIN_7_6_IE7 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_7_6;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG6_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG6_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline bool get_TRIG6_CHAIN_7_6_B2B7() volatile
    {
        return TRIG6_CHAIN_7_6 & (1u << 28u);
    }

    /**
     * Set TRIG6_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void set_TRIG6_CHAIN_7_6_B2B7() volatile
    {
        TRIG6_CHAIN_7_6 |= 1u << 28u;
    }

    /**
     * Clear TRIG6_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void clear_TRIG6_CHAIN_7_6_B2B7() volatile
    {
        TRIG6_CHAIN_7_6 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG6_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void toggle_TRIG6_CHAIN_7_6_B2B7() volatile
    {
        TRIG6_CHAIN_7_6 ^= 1u << 28u;
    }

    /**
     * Get TRIG6_CHAIN_7_6's HWTS7 field.
     *
     * Segment 7 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG6_CHAIN_7_6_HWTS7 get_TRIG6_CHAIN_7_6_HWTS7() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_7_6_HWTS7((TRIG6_CHAIN_7_6 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG6_CHAIN_7_6's HWTS7 field.
     *
     * Segment 7 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG6_CHAIN_7_6_HWTS7(
        ADC_ETC_TRIG6_CHAIN_7_6_HWTS7 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_7_6;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG6_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG6_CHAIN_7_6's CSEL7 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG6_CHAIN_7_6_CSEL7 get_TRIG6_CHAIN_7_6_CSEL7() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_7_6_CSEL7((TRIG6_CHAIN_7_6 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG6_CHAIN_7_6's CSEL7 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG6_CHAIN_7_6_CSEL7(
        ADC_ETC_TRIG6_CHAIN_7_6_CSEL7 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_7_6;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG6_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG6_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline bool get_TRIG6_CHAIN_7_6_IE6_EN() volatile
    {
        return TRIG6_CHAIN_7_6 & (1u << 15u);
    }

    /**
     * Set TRIG6_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void set_TRIG6_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG6_CHAIN_7_6 |= 1u << 15u;
    }

    /**
     * Clear TRIG6_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void clear_TRIG6_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG6_CHAIN_7_6 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG6_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void toggle_TRIG6_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG6_CHAIN_7_6 ^= 1u << 15u;
    }

    /**
     * Get TRIG6_CHAIN_7_6's IE6 field.
     *
     * Segment 6 interrupt enable. (This bit field is meaningful only when
     * IE6_EN is set)
     */
    inline ADC_ETC_TRIG6_CHAIN_7_6_IE6 get_TRIG6_CHAIN_7_6_IE6() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_7_6_IE6((TRIG6_CHAIN_7_6 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG6_CHAIN_7_6's IE6 field.
     *
     * Segment 6 interrupt enable. (This bit field is meaningful only when
     * IE6_EN is set)
     */
    inline void set_TRIG6_CHAIN_7_6_IE6(
        ADC_ETC_TRIG6_CHAIN_7_6_IE6 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_7_6;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG6_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG6_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline bool get_TRIG6_CHAIN_7_6_B2B6() volatile
    {
        return TRIG6_CHAIN_7_6 & (1u << 12u);
    }

    /**
     * Set TRIG6_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void set_TRIG6_CHAIN_7_6_B2B6() volatile
    {
        TRIG6_CHAIN_7_6 |= 1u << 12u;
    }

    /**
     * Clear TRIG6_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void clear_TRIG6_CHAIN_7_6_B2B6() volatile
    {
        TRIG6_CHAIN_7_6 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG6_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void toggle_TRIG6_CHAIN_7_6_B2B6() volatile
    {
        TRIG6_CHAIN_7_6 ^= 1u << 12u;
    }

    /**
     * Get TRIG6_CHAIN_7_6's HWTS6 field.
     *
     * Segment 6 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG6_CHAIN_7_6_HWTS6 get_TRIG6_CHAIN_7_6_HWTS6() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_7_6_HWTS6((TRIG6_CHAIN_7_6 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG6_CHAIN_7_6's HWTS6 field.
     *
     * Segment 6 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG6_CHAIN_7_6_HWTS6(
        ADC_ETC_TRIG6_CHAIN_7_6_HWTS6 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_7_6;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG6_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG6_CHAIN_7_6's CSEL6 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG6_CHAIN_7_6_CSEL6 get_TRIG6_CHAIN_7_6_CSEL6() volatile
    {
        return ADC_ETC_TRIG6_CHAIN_7_6_CSEL6((TRIG6_CHAIN_7_6 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG6_CHAIN_7_6's CSEL6 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG6_CHAIN_7_6_CSEL6(
        ADC_ETC_TRIG6_CHAIN_7_6_CSEL6 value) volatile
    {
        uint32_t curr = TRIG6_CHAIN_7_6;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG6_CHAIN_7_6 = curr;
    }

    /**
     * Get all of TRIG6_CHAIN_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Chain 6/7 Register
     */
    inline void get_TRIG6_CHAIN_7_6(
        bool &IE7_EN, ADC_ETC_TRIG6_CHAIN_7_6_IE7 &IE7, bool &B2B7,
        ADC_ETC_TRIG6_CHAIN_7_6_HWTS7 &HWTS7,
        ADC_ETC_TRIG6_CHAIN_7_6_CSEL7 &CSEL7, bool &IE6_EN,
        ADC_ETC_TRIG6_CHAIN_7_6_IE6 &IE6, bool &B2B6,
        ADC_ETC_TRIG6_CHAIN_7_6_HWTS6 &HWTS6,
        ADC_ETC_TRIG6_CHAIN_7_6_CSEL6 &CSEL6) volatile
    {
        uint32_t curr = TRIG6_CHAIN_7_6;

        IE7_EN = curr & (1u << 31u);
        IE7 = ADC_ETC_TRIG6_CHAIN_7_6_IE7((curr >> 29u) & 0b11u);
        B2B7 = curr & (1u << 28u);
        HWTS7 = ADC_ETC_TRIG6_CHAIN_7_6_HWTS7((curr >> 20u) & 0b11111111u);
        CSEL7 = ADC_ETC_TRIG6_CHAIN_7_6_CSEL7((curr >> 16u) & 0b1111u);
        IE6_EN = curr & (1u << 15u);
        IE6 = ADC_ETC_TRIG6_CHAIN_7_6_IE6((curr >> 13u) & 0b11u);
        B2B6 = curr & (1u << 12u);
        HWTS6 = ADC_ETC_TRIG6_CHAIN_7_6_HWTS6((curr >> 4u) & 0b11111111u);
        CSEL6 = ADC_ETC_TRIG6_CHAIN_7_6_CSEL6((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG6_CHAIN_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Chain 6/7 Register
     */
    inline void set_TRIG6_CHAIN_7_6(
        bool IE7_EN, ADC_ETC_TRIG6_CHAIN_7_6_IE7 IE7, bool B2B7,
        ADC_ETC_TRIG6_CHAIN_7_6_HWTS7 HWTS7,
        ADC_ETC_TRIG6_CHAIN_7_6_CSEL7 CSEL7, bool IE6_EN,
        ADC_ETC_TRIG6_CHAIN_7_6_IE6 IE6, bool B2B6,
        ADC_ETC_TRIG6_CHAIN_7_6_HWTS6 HWTS6,
        ADC_ETC_TRIG6_CHAIN_7_6_CSEL6 CSEL6) volatile
    {
        uint32_t curr = TRIG6_CHAIN_7_6;

        curr &= ~(0b1u << 31u);
        curr |= (IE7_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE7) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B7 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS7) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL7) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE6_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE6) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B6 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS6) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL6) & 0b1111u) << 0u;

        TRIG6_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG6_RESULT_1_0's DATA1 field.
     *
     * Result DATA1The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG6_RESULT_1_0_DATA1() volatile
    {
        return (TRIG6_RESULT_1_0 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG6_RESULT_1_0's DATA0 field.
     *
     * Result DATA0The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG6_RESULT_1_0_DATA0() volatile
    {
        return (TRIG6_RESULT_1_0 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG6_RESULT_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 1/0 Register
     */
    inline void get_TRIG6_RESULT_1_0(uint16_t &DATA1, uint16_t &DATA0) volatile
    {
        uint32_t curr = TRIG6_RESULT_1_0;

        DATA1 = (curr >> 16u) & 0b111111111111u;
        DATA0 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG6_RESULT_3_2's DATA3 field.
     *
     * Result DATA3The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG6_RESULT_3_2_DATA3() volatile
    {
        return (TRIG6_RESULT_3_2 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG6_RESULT_3_2's DATA2 field.
     *
     * Result DATA2The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG6_RESULT_3_2_DATA2() volatile
    {
        return (TRIG6_RESULT_3_2 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG6_RESULT_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 3/2 Register
     */
    inline void get_TRIG6_RESULT_3_2(uint16_t &DATA3, uint16_t &DATA2) volatile
    {
        uint32_t curr = TRIG6_RESULT_3_2;

        DATA3 = (curr >> 16u) & 0b111111111111u;
        DATA2 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG6_RESULT_5_4's DATA5 field.
     *
     * Result DATA5The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG6_RESULT_5_4_DATA5() volatile
    {
        return (TRIG6_RESULT_5_4 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG6_RESULT_5_4's DATA4 field.
     *
     * Result DATA4The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG6_RESULT_5_4_DATA4() volatile
    {
        return (TRIG6_RESULT_5_4 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG6_RESULT_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 5/4 Register
     */
    inline void get_TRIG6_RESULT_5_4(uint16_t &DATA5, uint16_t &DATA4) volatile
    {
        uint32_t curr = TRIG6_RESULT_5_4;

        DATA5 = (curr >> 16u) & 0b111111111111u;
        DATA4 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG6_RESULT_7_6's DATA7 field.
     *
     * Result DATA7The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG6_RESULT_7_6_DATA7() volatile
    {
        return (TRIG6_RESULT_7_6 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG6_RESULT_7_6's DATA6 field.
     *
     * Result DATA6The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG6_RESULT_7_6_DATA6() volatile
    {
        return (TRIG6_RESULT_7_6 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG6_RESULT_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 7/6 Register
     */
    inline void get_TRIG6_RESULT_7_6(uint16_t &DATA7, uint16_t &DATA6) volatile
    {
        uint32_t curr = TRIG6_RESULT_7_6;

        DATA7 = (curr >> 16u) & 0b111111111111u;
        DATA6 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG7_CTRL's CHAINx_DONE field.
     *
     * Segment x done detection
     */
    inline ADC_ETC_TRIG7_CTRL_CHAINx_DONE get_TRIG7_CTRL_CHAINx_DONE() volatile
    {
        return ADC_ETC_TRIG7_CTRL_CHAINx_DONE((TRIG7_CTRL >> 24u) &
                                              0b11111111u);
    }

    /**
     * Set TRIG7_CTRL's CHAINx_DONE field.
     *
     * Segment x done detection
     */
    inline void set_TRIG7_CTRL_CHAINx_DONE(
        ADC_ETC_TRIG7_CTRL_CHAINx_DONE value) volatile
    {
        uint32_t curr = TRIG7_CTRL;

        curr &= ~(0b11111111u << 24u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 24u;

        TRIG7_CTRL = curr;
    }

    /**
     * Get TRIG7_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline bool get_TRIG7_CTRL_SYNC_MODE() volatile
    {
        return TRIG7_CTRL & (1u << 16u);
    }

    /**
     * Set TRIG7_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void set_TRIG7_CTRL_SYNC_MODE() volatile
    {
        TRIG7_CTRL |= 1u << 16u;
    }

    /**
     * Clear TRIG7_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void clear_TRIG7_CTRL_SYNC_MODE() volatile
    {
        TRIG7_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle TRIG7_CTRL's SYNC_MODE bit.
     *
     * Trigger synchronization mode selection
     */
    inline void toggle_TRIG7_CTRL_SYNC_MODE() volatile
    {
        TRIG7_CTRL ^= 1u << 16u;
    }

    /**
     * Get TRIG7_CTRL's TRIG_PRIORITY field.
     *
     * External trigger priority, 7 is highest priority, while 0 is lowest
     */
    inline uint8_t get_TRIG7_CTRL_TRIG_PRIORITY() volatile
    {
        return (TRIG7_CTRL >> 12u) & 0b111u;
    }

    /**
     * Set TRIG7_CTRL's TRIG_PRIORITY field.
     *
     * External trigger priority, 7 is highest priority, while 0 is lowest
     */
    inline void set_TRIG7_CTRL_TRIG_PRIORITY(uint8_t value) volatile
    {
        uint32_t curr = TRIG7_CTRL;

        curr &= ~(0b111u << 12u);
        curr |= (value & 0b111u) << 12u;

        TRIG7_CTRL = curr;
    }

    /**
     * Get TRIG7_CTRL's TRIG_CHAIN field.
     *
     * The number of segments inside the trigger chain of TRIGa.
     */
    inline ADC_ETC_TRIG7_CTRL_TRIG_CHAIN get_TRIG7_CTRL_TRIG_CHAIN() volatile
    {
        return ADC_ETC_TRIG7_CTRL_TRIG_CHAIN((TRIG7_CTRL >> 8u) & 0b111u);
    }

    /**
     * Set TRIG7_CTRL's TRIG_CHAIN field.
     *
     * The number of segments inside the trigger chain of TRIGa.
     */
    inline void set_TRIG7_CTRL_TRIG_CHAIN(
        ADC_ETC_TRIG7_CTRL_TRIG_CHAIN value) volatile
    {
        uint32_t curr = TRIG7_CTRL;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        TRIG7_CTRL = curr;
    }

    /**
     * Get TRIG7_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline bool get_TRIG7_CTRL_TRIG_MODE() volatile
    {
        return TRIG7_CTRL & (1u << 4u);
    }

    /**
     * Set TRIG7_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void set_TRIG7_CTRL_TRIG_MODE() volatile
    {
        TRIG7_CTRL |= 1u << 4u;
    }

    /**
     * Clear TRIG7_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void clear_TRIG7_CTRL_TRIG_MODE() volatile
    {
        TRIG7_CTRL &= ~(1u << 4u);
    }

    /**
     * Toggle TRIG7_CTRL's TRIG_MODE bit.
     *
     * Trigger mode selection.
     */
    inline void toggle_TRIG7_CTRL_TRIG_MODE() volatile
    {
        TRIG7_CTRL ^= 1u << 4u;
    }

    /**
     * Get TRIG7_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline bool get_TRIG7_CTRL_SW_TRIG() volatile
    {
        return TRIG7_CTRL & (1u << 0u);
    }

    /**
     * Set TRIG7_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void set_TRIG7_CTRL_SW_TRIG() volatile
    {
        TRIG7_CTRL |= 1u << 0u;
    }

    /**
     * Clear TRIG7_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void clear_TRIG7_CTRL_SW_TRIG() volatile
    {
        TRIG7_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle TRIG7_CTRL's SW_TRIG bit.
     *
     * Software trigger. This field is self-clearing.
     */
    inline void toggle_TRIG7_CTRL_SW_TRIG() volatile
    {
        TRIG7_CTRL ^= 1u << 0u;
    }

    /**
     * Get all of TRIG7_CTRL's bit fields.
     *
     * (read-write) ETC_TRIG Control Register
     */
    inline void get_TRIG7_CTRL(ADC_ETC_TRIG7_CTRL_CHAINx_DONE &CHAINx_DONE,
                               bool &SYNC_MODE, uint8_t &TRIG_PRIORITY,
                               ADC_ETC_TRIG7_CTRL_TRIG_CHAIN &TRIG_CHAIN,
                               bool &TRIG_MODE, bool &SW_TRIG) volatile
    {
        uint32_t curr = TRIG7_CTRL;

        CHAINx_DONE =
            ADC_ETC_TRIG7_CTRL_CHAINx_DONE((curr >> 24u) & 0b11111111u);
        SYNC_MODE = curr & (1u << 16u);
        TRIG_PRIORITY = (curr >> 12u) & 0b111u;
        TRIG_CHAIN = ADC_ETC_TRIG7_CTRL_TRIG_CHAIN((curr >> 8u) & 0b111u);
        TRIG_MODE = curr & (1u << 4u);
        SW_TRIG = curr & (1u << 0u);
    }

    /**
     * Set all of TRIG7_CTRL's bit fields.
     *
     * (read-write) ETC_TRIG Control Register
     */
    inline void set_TRIG7_CTRL(ADC_ETC_TRIG7_CTRL_CHAINx_DONE CHAINx_DONE,
                               bool SYNC_MODE, uint8_t TRIG_PRIORITY,
                               ADC_ETC_TRIG7_CTRL_TRIG_CHAIN TRIG_CHAIN,
                               bool TRIG_MODE, bool SW_TRIG) volatile
    {
        uint32_t curr = TRIG7_CTRL;

        curr &= ~(0b11111111u << 24u);
        curr |= (std::to_underlying(CHAINx_DONE) & 0b11111111u) << 24u;
        curr &= ~(0b1u << 16u);
        curr |= (SYNC_MODE & 0b1u) << 16u;
        curr &= ~(0b111u << 12u);
        curr |= (TRIG_PRIORITY & 0b111u) << 12u;
        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(TRIG_CHAIN) & 0b111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (TRIG_MODE & 0b1u) << 4u;
        curr &= ~(0b1u << 0u);
        curr |= (SW_TRIG & 0b1u) << 0u;

        TRIG7_CTRL = curr;
    }

    /**
     * Get TRIG7_COUNTER's SAMPLE_INTERVAL field.
     *
     * TRIGGER sampling interval counter
     */
    inline uint16_t get_TRIG7_COUNTER_SAMPLE_INTERVAL() volatile
    {
        return (TRIG7_COUNTER >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set TRIG7_COUNTER's SAMPLE_INTERVAL field.
     *
     * TRIGGER sampling interval counter
     */
    inline void set_TRIG7_COUNTER_SAMPLE_INTERVAL(uint16_t value) volatile
    {
        uint32_t curr = TRIG7_COUNTER;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        TRIG7_COUNTER = curr;
    }

    /**
     * Get TRIG7_COUNTER's INIT_DELAY field.
     *
     * TRIGGER initial delay counter. Initial_delay =
     * (INIT_DELAY+1)*(PRE_DIVIDER+1)*ipg_clk
     */
    inline uint16_t get_TRIG7_COUNTER_INIT_DELAY() volatile
    {
        return (TRIG7_COUNTER >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TRIG7_COUNTER's INIT_DELAY field.
     *
     * TRIGGER initial delay counter. Initial_delay =
     * (INIT_DELAY+1)*(PRE_DIVIDER+1)*ipg_clk
     */
    inline void set_TRIG7_COUNTER_INIT_DELAY(uint16_t value) volatile
    {
        uint32_t curr = TRIG7_COUNTER;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TRIG7_COUNTER = curr;
    }

    /**
     * Get all of TRIG7_COUNTER's bit fields.
     *
     * (read-write) ETC_TRIG Counter Register
     */
    inline void get_TRIG7_COUNTER(uint16_t &SAMPLE_INTERVAL,
                                  uint16_t &INIT_DELAY) volatile
    {
        uint32_t curr = TRIG7_COUNTER;

        SAMPLE_INTERVAL = (curr >> 16u) & 0b1111111111111111u;
        INIT_DELAY = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of TRIG7_COUNTER's bit fields.
     *
     * (read-write) ETC_TRIG Counter Register
     */
    inline void set_TRIG7_COUNTER(uint16_t SAMPLE_INTERVAL,
                                  uint16_t INIT_DELAY) volatile
    {
        uint32_t curr = TRIG7_COUNTER;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (SAMPLE_INTERVAL & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (INIT_DELAY & 0b1111111111111111u) << 0u;

        TRIG7_COUNTER = curr;
    }

    /**
     * Get TRIG7_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline bool get_TRIG7_CHAIN_1_0_IE1_EN() volatile
    {
        return TRIG7_CHAIN_1_0 & (1u << 31u);
    }

    /**
     * Set TRIG7_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void set_TRIG7_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG7_CHAIN_1_0 |= 1u << 31u;
    }

    /**
     * Clear TRIG7_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void clear_TRIG7_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG7_CHAIN_1_0 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG7_CHAIN_1_0's IE1_EN bit.
     *
     * IRQ enable of segment 1.
     */
    inline void toggle_TRIG7_CHAIN_1_0_IE1_EN() volatile
    {
        TRIG7_CHAIN_1_0 ^= 1u << 31u;
    }

    /**
     * Get TRIG7_CHAIN_1_0's IE1 field.
     *
     * Segment 1 interrupt enable. (This bit field is meaningful only when
     * IE1_EN is set)
     */
    inline ADC_ETC_TRIG7_CHAIN_1_0_IE1 get_TRIG7_CHAIN_1_0_IE1() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_1_0_IE1((TRIG7_CHAIN_1_0 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG7_CHAIN_1_0's IE1 field.
     *
     * Segment 1 interrupt enable. (This bit field is meaningful only when
     * IE1_EN is set)
     */
    inline void set_TRIG7_CHAIN_1_0_IE1(
        ADC_ETC_TRIG7_CHAIN_1_0_IE1 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_1_0;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG7_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG7_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline bool get_TRIG7_CHAIN_1_0_B2B1() volatile
    {
        return TRIG7_CHAIN_1_0 & (1u << 28u);
    }

    /**
     * Set TRIG7_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void set_TRIG7_CHAIN_1_0_B2B1() volatile
    {
        TRIG7_CHAIN_1_0 |= 1u << 28u;
    }

    /**
     * Clear TRIG7_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void clear_TRIG7_CHAIN_1_0_B2B1() volatile
    {
        TRIG7_CHAIN_1_0 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG7_CHAIN_1_0's B2B1 bit.
     *
     * Segment 1 B2B
     */
    inline void toggle_TRIG7_CHAIN_1_0_B2B1() volatile
    {
        TRIG7_CHAIN_1_0 ^= 1u << 28u;
    }

    /**
     * Get TRIG7_CHAIN_1_0's HWTS1 field.
     *
     * Segment 1 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG7_CHAIN_1_0_HWTS1 get_TRIG7_CHAIN_1_0_HWTS1() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_1_0_HWTS1((TRIG7_CHAIN_1_0 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG7_CHAIN_1_0's HWTS1 field.
     *
     * Segment 1 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG7_CHAIN_1_0_HWTS1(
        ADC_ETC_TRIG7_CHAIN_1_0_HWTS1 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_1_0;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG7_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG7_CHAIN_1_0's CSEL1 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG7_CHAIN_1_0_CSEL1 get_TRIG7_CHAIN_1_0_CSEL1() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_1_0_CSEL1((TRIG7_CHAIN_1_0 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG7_CHAIN_1_0's CSEL1 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG7_CHAIN_1_0_CSEL1(
        ADC_ETC_TRIG7_CHAIN_1_0_CSEL1 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_1_0;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG7_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG7_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline bool get_TRIG7_CHAIN_1_0_IE0_EN() volatile
    {
        return TRIG7_CHAIN_1_0 & (1u << 15u);
    }

    /**
     * Set TRIG7_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void set_TRIG7_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG7_CHAIN_1_0 |= 1u << 15u;
    }

    /**
     * Clear TRIG7_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void clear_TRIG7_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG7_CHAIN_1_0 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG7_CHAIN_1_0's IE0_EN bit.
     *
     * IRQ enable of segment 0.
     */
    inline void toggle_TRIG7_CHAIN_1_0_IE0_EN() volatile
    {
        TRIG7_CHAIN_1_0 ^= 1u << 15u;
    }

    /**
     * Get TRIG7_CHAIN_1_0's IE0 field.
     *
     * Segment 0 interrupt enable. (This bit field is meaningful only when
     * IE0_EN is set)
     */
    inline ADC_ETC_TRIG7_CHAIN_1_0_IE0 get_TRIG7_CHAIN_1_0_IE0() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_1_0_IE0((TRIG7_CHAIN_1_0 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG7_CHAIN_1_0's IE0 field.
     *
     * Segment 0 interrupt enable. (This bit field is meaningful only when
     * IE0_EN is set)
     */
    inline void set_TRIG7_CHAIN_1_0_IE0(
        ADC_ETC_TRIG7_CHAIN_1_0_IE0 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_1_0;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG7_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG7_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline bool get_TRIG7_CHAIN_1_0_B2B0() volatile
    {
        return TRIG7_CHAIN_1_0 & (1u << 12u);
    }

    /**
     * Set TRIG7_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void set_TRIG7_CHAIN_1_0_B2B0() volatile
    {
        TRIG7_CHAIN_1_0 |= 1u << 12u;
    }

    /**
     * Clear TRIG7_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void clear_TRIG7_CHAIN_1_0_B2B0() volatile
    {
        TRIG7_CHAIN_1_0 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG7_CHAIN_1_0's B2B0 bit.
     *
     * Segment 0 B2B
     */
    inline void toggle_TRIG7_CHAIN_1_0_B2B0() volatile
    {
        TRIG7_CHAIN_1_0 ^= 1u << 12u;
    }

    /**
     * Get TRIG7_CHAIN_1_0's HWTS0 field.
     *
     * Segment 0 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG7_CHAIN_1_0_HWTS0 get_TRIG7_CHAIN_1_0_HWTS0() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_1_0_HWTS0((TRIG7_CHAIN_1_0 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG7_CHAIN_1_0's HWTS0 field.
     *
     * Segment 0 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG7_CHAIN_1_0_HWTS0(
        ADC_ETC_TRIG7_CHAIN_1_0_HWTS0 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_1_0;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG7_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG7_CHAIN_1_0's CSEL0 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG7_CHAIN_1_0_CSEL0 get_TRIG7_CHAIN_1_0_CSEL0() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_1_0_CSEL0((TRIG7_CHAIN_1_0 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG7_CHAIN_1_0's CSEL0 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG7_CHAIN_1_0_CSEL0(
        ADC_ETC_TRIG7_CHAIN_1_0_CSEL0 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_1_0;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG7_CHAIN_1_0 = curr;
    }

    /**
     * Get all of TRIG7_CHAIN_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Chain 0/1 Register
     */
    inline void get_TRIG7_CHAIN_1_0(
        bool &IE1_EN, ADC_ETC_TRIG7_CHAIN_1_0_IE1 &IE1, bool &B2B1,
        ADC_ETC_TRIG7_CHAIN_1_0_HWTS1 &HWTS1,
        ADC_ETC_TRIG7_CHAIN_1_0_CSEL1 &CSEL1, bool &IE0_EN,
        ADC_ETC_TRIG7_CHAIN_1_0_IE0 &IE0, bool &B2B0,
        ADC_ETC_TRIG7_CHAIN_1_0_HWTS0 &HWTS0,
        ADC_ETC_TRIG7_CHAIN_1_0_CSEL0 &CSEL0) volatile
    {
        uint32_t curr = TRIG7_CHAIN_1_0;

        IE1_EN = curr & (1u << 31u);
        IE1 = ADC_ETC_TRIG7_CHAIN_1_0_IE1((curr >> 29u) & 0b11u);
        B2B1 = curr & (1u << 28u);
        HWTS1 = ADC_ETC_TRIG7_CHAIN_1_0_HWTS1((curr >> 20u) & 0b11111111u);
        CSEL1 = ADC_ETC_TRIG7_CHAIN_1_0_CSEL1((curr >> 16u) & 0b1111u);
        IE0_EN = curr & (1u << 15u);
        IE0 = ADC_ETC_TRIG7_CHAIN_1_0_IE0((curr >> 13u) & 0b11u);
        B2B0 = curr & (1u << 12u);
        HWTS0 = ADC_ETC_TRIG7_CHAIN_1_0_HWTS0((curr >> 4u) & 0b11111111u);
        CSEL0 = ADC_ETC_TRIG7_CHAIN_1_0_CSEL0((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG7_CHAIN_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Chain 0/1 Register
     */
    inline void set_TRIG7_CHAIN_1_0(
        bool IE1_EN, ADC_ETC_TRIG7_CHAIN_1_0_IE1 IE1, bool B2B1,
        ADC_ETC_TRIG7_CHAIN_1_0_HWTS1 HWTS1,
        ADC_ETC_TRIG7_CHAIN_1_0_CSEL1 CSEL1, bool IE0_EN,
        ADC_ETC_TRIG7_CHAIN_1_0_IE0 IE0, bool B2B0,
        ADC_ETC_TRIG7_CHAIN_1_0_HWTS0 HWTS0,
        ADC_ETC_TRIG7_CHAIN_1_0_CSEL0 CSEL0) volatile
    {
        uint32_t curr = TRIG7_CHAIN_1_0;

        curr &= ~(0b1u << 31u);
        curr |= (IE1_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE1) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B1 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS1) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL1) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE0_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE0) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B0 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS0) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL0) & 0b1111u) << 0u;

        TRIG7_CHAIN_1_0 = curr;
    }

    /**
     * Get TRIG7_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline bool get_TRIG7_CHAIN_3_2_IE3_EN() volatile
    {
        return TRIG7_CHAIN_3_2 & (1u << 31u);
    }

    /**
     * Set TRIG7_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void set_TRIG7_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG7_CHAIN_3_2 |= 1u << 31u;
    }

    /**
     * Clear TRIG7_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void clear_TRIG7_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG7_CHAIN_3_2 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG7_CHAIN_3_2's IE3_EN bit.
     *
     * IRQ enable of segment 3.
     */
    inline void toggle_TRIG7_CHAIN_3_2_IE3_EN() volatile
    {
        TRIG7_CHAIN_3_2 ^= 1u << 31u;
    }

    /**
     * Get TRIG7_CHAIN_3_2's IE3 field.
     *
     * Segment 3 interrupt enable. (This bit field is meaningful only when
     * IE3_EN is set)
     */
    inline ADC_ETC_TRIG7_CHAIN_3_2_IE3 get_TRIG7_CHAIN_3_2_IE3() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_3_2_IE3((TRIG7_CHAIN_3_2 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG7_CHAIN_3_2's IE3 field.
     *
     * Segment 3 interrupt enable. (This bit field is meaningful only when
     * IE3_EN is set)
     */
    inline void set_TRIG7_CHAIN_3_2_IE3(
        ADC_ETC_TRIG7_CHAIN_3_2_IE3 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_3_2;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG7_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG7_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline bool get_TRIG7_CHAIN_3_2_B2B3() volatile
    {
        return TRIG7_CHAIN_3_2 & (1u << 28u);
    }

    /**
     * Set TRIG7_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void set_TRIG7_CHAIN_3_2_B2B3() volatile
    {
        TRIG7_CHAIN_3_2 |= 1u << 28u;
    }

    /**
     * Clear TRIG7_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void clear_TRIG7_CHAIN_3_2_B2B3() volatile
    {
        TRIG7_CHAIN_3_2 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG7_CHAIN_3_2's B2B3 bit.
     *
     * Segment 3 B2B
     */
    inline void toggle_TRIG7_CHAIN_3_2_B2B3() volatile
    {
        TRIG7_CHAIN_3_2 ^= 1u << 28u;
    }

    /**
     * Get TRIG7_CHAIN_3_2's HWTS3 field.
     *
     * Segment 3 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG7_CHAIN_3_2_HWTS3 get_TRIG7_CHAIN_3_2_HWTS3() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_3_2_HWTS3((TRIG7_CHAIN_3_2 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG7_CHAIN_3_2's HWTS3 field.
     *
     * Segment 3 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG7_CHAIN_3_2_HWTS3(
        ADC_ETC_TRIG7_CHAIN_3_2_HWTS3 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_3_2;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG7_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG7_CHAIN_3_2's CSEL3 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG7_CHAIN_3_2_CSEL3 get_TRIG7_CHAIN_3_2_CSEL3() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_3_2_CSEL3((TRIG7_CHAIN_3_2 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG7_CHAIN_3_2's CSEL3 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG7_CHAIN_3_2_CSEL3(
        ADC_ETC_TRIG7_CHAIN_3_2_CSEL3 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_3_2;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG7_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG7_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline bool get_TRIG7_CHAIN_3_2_IE2_EN() volatile
    {
        return TRIG7_CHAIN_3_2 & (1u << 15u);
    }

    /**
     * Set TRIG7_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void set_TRIG7_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG7_CHAIN_3_2 |= 1u << 15u;
    }

    /**
     * Clear TRIG7_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void clear_TRIG7_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG7_CHAIN_3_2 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG7_CHAIN_3_2's IE2_EN bit.
     *
     * IRQ enable of segment 2.
     */
    inline void toggle_TRIG7_CHAIN_3_2_IE2_EN() volatile
    {
        TRIG7_CHAIN_3_2 ^= 1u << 15u;
    }

    /**
     * Get TRIG7_CHAIN_3_2's IE2 field.
     *
     * Segment 2 interrupt enable. (This bit field is meaningful only when
     * IE2_EN is set)
     */
    inline ADC_ETC_TRIG7_CHAIN_3_2_IE2 get_TRIG7_CHAIN_3_2_IE2() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_3_2_IE2((TRIG7_CHAIN_3_2 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG7_CHAIN_3_2's IE2 field.
     *
     * Segment 2 interrupt enable. (This bit field is meaningful only when
     * IE2_EN is set)
     */
    inline void set_TRIG7_CHAIN_3_2_IE2(
        ADC_ETC_TRIG7_CHAIN_3_2_IE2 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_3_2;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG7_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG7_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline bool get_TRIG7_CHAIN_3_2_B2B2() volatile
    {
        return TRIG7_CHAIN_3_2 & (1u << 12u);
    }

    /**
     * Set TRIG7_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void set_TRIG7_CHAIN_3_2_B2B2() volatile
    {
        TRIG7_CHAIN_3_2 |= 1u << 12u;
    }

    /**
     * Clear TRIG7_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void clear_TRIG7_CHAIN_3_2_B2B2() volatile
    {
        TRIG7_CHAIN_3_2 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG7_CHAIN_3_2's B2B2 bit.
     *
     * Segment 2 B2B
     */
    inline void toggle_TRIG7_CHAIN_3_2_B2B2() volatile
    {
        TRIG7_CHAIN_3_2 ^= 1u << 12u;
    }

    /**
     * Get TRIG7_CHAIN_3_2's HWTS2 field.
     *
     * Segment 2 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG7_CHAIN_3_2_HWTS2 get_TRIG7_CHAIN_3_2_HWTS2() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_3_2_HWTS2((TRIG7_CHAIN_3_2 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG7_CHAIN_3_2's HWTS2 field.
     *
     * Segment 2 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG7_CHAIN_3_2_HWTS2(
        ADC_ETC_TRIG7_CHAIN_3_2_HWTS2 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_3_2;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG7_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG7_CHAIN_3_2's CSEL2 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG7_CHAIN_3_2_CSEL2 get_TRIG7_CHAIN_3_2_CSEL2() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_3_2_CSEL2((TRIG7_CHAIN_3_2 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG7_CHAIN_3_2's CSEL2 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG7_CHAIN_3_2_CSEL2(
        ADC_ETC_TRIG7_CHAIN_3_2_CSEL2 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_3_2;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG7_CHAIN_3_2 = curr;
    }

    /**
     * Get all of TRIG7_CHAIN_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Chain 2/3 Register
     */
    inline void get_TRIG7_CHAIN_3_2(
        bool &IE3_EN, ADC_ETC_TRIG7_CHAIN_3_2_IE3 &IE3, bool &B2B3,
        ADC_ETC_TRIG7_CHAIN_3_2_HWTS3 &HWTS3,
        ADC_ETC_TRIG7_CHAIN_3_2_CSEL3 &CSEL3, bool &IE2_EN,
        ADC_ETC_TRIG7_CHAIN_3_2_IE2 &IE2, bool &B2B2,
        ADC_ETC_TRIG7_CHAIN_3_2_HWTS2 &HWTS2,
        ADC_ETC_TRIG7_CHAIN_3_2_CSEL2 &CSEL2) volatile
    {
        uint32_t curr = TRIG7_CHAIN_3_2;

        IE3_EN = curr & (1u << 31u);
        IE3 = ADC_ETC_TRIG7_CHAIN_3_2_IE3((curr >> 29u) & 0b11u);
        B2B3 = curr & (1u << 28u);
        HWTS3 = ADC_ETC_TRIG7_CHAIN_3_2_HWTS3((curr >> 20u) & 0b11111111u);
        CSEL3 = ADC_ETC_TRIG7_CHAIN_3_2_CSEL3((curr >> 16u) & 0b1111u);
        IE2_EN = curr & (1u << 15u);
        IE2 = ADC_ETC_TRIG7_CHAIN_3_2_IE2((curr >> 13u) & 0b11u);
        B2B2 = curr & (1u << 12u);
        HWTS2 = ADC_ETC_TRIG7_CHAIN_3_2_HWTS2((curr >> 4u) & 0b11111111u);
        CSEL2 = ADC_ETC_TRIG7_CHAIN_3_2_CSEL2((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG7_CHAIN_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Chain 2/3 Register
     */
    inline void set_TRIG7_CHAIN_3_2(
        bool IE3_EN, ADC_ETC_TRIG7_CHAIN_3_2_IE3 IE3, bool B2B3,
        ADC_ETC_TRIG7_CHAIN_3_2_HWTS3 HWTS3,
        ADC_ETC_TRIG7_CHAIN_3_2_CSEL3 CSEL3, bool IE2_EN,
        ADC_ETC_TRIG7_CHAIN_3_2_IE2 IE2, bool B2B2,
        ADC_ETC_TRIG7_CHAIN_3_2_HWTS2 HWTS2,
        ADC_ETC_TRIG7_CHAIN_3_2_CSEL2 CSEL2) volatile
    {
        uint32_t curr = TRIG7_CHAIN_3_2;

        curr &= ~(0b1u << 31u);
        curr |= (IE3_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE3) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B3 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS3) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL3) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE2_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE2) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B2 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS2) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL2) & 0b1111u) << 0u;

        TRIG7_CHAIN_3_2 = curr;
    }

    /**
     * Get TRIG7_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline bool get_TRIG7_CHAIN_5_4_IE5_EN() volatile
    {
        return TRIG7_CHAIN_5_4 & (1u << 31u);
    }

    /**
     * Set TRIG7_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void set_TRIG7_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG7_CHAIN_5_4 |= 1u << 31u;
    }

    /**
     * Clear TRIG7_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void clear_TRIG7_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG7_CHAIN_5_4 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG7_CHAIN_5_4's IE5_EN bit.
     *
     * IRQ enable of segment 5.
     */
    inline void toggle_TRIG7_CHAIN_5_4_IE5_EN() volatile
    {
        TRIG7_CHAIN_5_4 ^= 1u << 31u;
    }

    /**
     * Get TRIG7_CHAIN_5_4's IE5 field.
     *
     * Segment 5 interrupt enable. (This bit field is meaningful only when
     * IE5_EN is set)
     */
    inline ADC_ETC_TRIG7_CHAIN_5_4_IE5 get_TRIG7_CHAIN_5_4_IE5() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_5_4_IE5((TRIG7_CHAIN_5_4 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG7_CHAIN_5_4's IE5 field.
     *
     * Segment 5 interrupt enable. (This bit field is meaningful only when
     * IE5_EN is set)
     */
    inline void set_TRIG7_CHAIN_5_4_IE5(
        ADC_ETC_TRIG7_CHAIN_5_4_IE5 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_5_4;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG7_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG7_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline bool get_TRIG7_CHAIN_5_4_B2B5() volatile
    {
        return TRIG7_CHAIN_5_4 & (1u << 28u);
    }

    /**
     * Set TRIG7_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void set_TRIG7_CHAIN_5_4_B2B5() volatile
    {
        TRIG7_CHAIN_5_4 |= 1u << 28u;
    }

    /**
     * Clear TRIG7_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void clear_TRIG7_CHAIN_5_4_B2B5() volatile
    {
        TRIG7_CHAIN_5_4 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG7_CHAIN_5_4's B2B5 bit.
     *
     * Segment 5 B2B
     */
    inline void toggle_TRIG7_CHAIN_5_4_B2B5() volatile
    {
        TRIG7_CHAIN_5_4 ^= 1u << 28u;
    }

    /**
     * Get TRIG7_CHAIN_5_4's HWTS5 field.
     *
     * Segment 5 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG7_CHAIN_5_4_HWTS5 get_TRIG7_CHAIN_5_4_HWTS5() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_5_4_HWTS5((TRIG7_CHAIN_5_4 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG7_CHAIN_5_4's HWTS5 field.
     *
     * Segment 5 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG7_CHAIN_5_4_HWTS5(
        ADC_ETC_TRIG7_CHAIN_5_4_HWTS5 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_5_4;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG7_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG7_CHAIN_5_4's CSEL5 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG7_CHAIN_5_4_CSEL5 get_TRIG7_CHAIN_5_4_CSEL5() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_5_4_CSEL5((TRIG7_CHAIN_5_4 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG7_CHAIN_5_4's CSEL5 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG7_CHAIN_5_4_CSEL5(
        ADC_ETC_TRIG7_CHAIN_5_4_CSEL5 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_5_4;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG7_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG7_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline bool get_TRIG7_CHAIN_5_4_IE4_EN() volatile
    {
        return TRIG7_CHAIN_5_4 & (1u << 15u);
    }

    /**
     * Set TRIG7_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void set_TRIG7_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG7_CHAIN_5_4 |= 1u << 15u;
    }

    /**
     * Clear TRIG7_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void clear_TRIG7_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG7_CHAIN_5_4 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG7_CHAIN_5_4's IE4_EN bit.
     *
     * IRQ enable of segment 4.
     */
    inline void toggle_TRIG7_CHAIN_5_4_IE4_EN() volatile
    {
        TRIG7_CHAIN_5_4 ^= 1u << 15u;
    }

    /**
     * Get TRIG7_CHAIN_5_4's IE4 field.
     *
     * Segment 4 interrupt enable. (This bit field is meaningful only when
     * IE4_EN is set)
     */
    inline ADC_ETC_TRIG7_CHAIN_5_4_IE4 get_TRIG7_CHAIN_5_4_IE4() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_5_4_IE4((TRIG7_CHAIN_5_4 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG7_CHAIN_5_4's IE4 field.
     *
     * Segment 4 interrupt enable. (This bit field is meaningful only when
     * IE4_EN is set)
     */
    inline void set_TRIG7_CHAIN_5_4_IE4(
        ADC_ETC_TRIG7_CHAIN_5_4_IE4 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_5_4;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG7_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG7_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline bool get_TRIG7_CHAIN_5_4_B2B4() volatile
    {
        return TRIG7_CHAIN_5_4 & (1u << 12u);
    }

    /**
     * Set TRIG7_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void set_TRIG7_CHAIN_5_4_B2B4() volatile
    {
        TRIG7_CHAIN_5_4 |= 1u << 12u;
    }

    /**
     * Clear TRIG7_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void clear_TRIG7_CHAIN_5_4_B2B4() volatile
    {
        TRIG7_CHAIN_5_4 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG7_CHAIN_5_4's B2B4 bit.
     *
     * Segment 4 B2B
     */
    inline void toggle_TRIG7_CHAIN_5_4_B2B4() volatile
    {
        TRIG7_CHAIN_5_4 ^= 1u << 12u;
    }

    /**
     * Get TRIG7_CHAIN_5_4's HWTS4 field.
     *
     * Segment 4 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG7_CHAIN_5_4_HWTS4 get_TRIG7_CHAIN_5_4_HWTS4() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_5_4_HWTS4((TRIG7_CHAIN_5_4 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG7_CHAIN_5_4's HWTS4 field.
     *
     * Segment 4 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG7_CHAIN_5_4_HWTS4(
        ADC_ETC_TRIG7_CHAIN_5_4_HWTS4 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_5_4;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG7_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG7_CHAIN_5_4's CSEL4 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG7_CHAIN_5_4_CSEL4 get_TRIG7_CHAIN_5_4_CSEL4() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_5_4_CSEL4((TRIG7_CHAIN_5_4 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG7_CHAIN_5_4's CSEL4 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG7_CHAIN_5_4_CSEL4(
        ADC_ETC_TRIG7_CHAIN_5_4_CSEL4 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_5_4;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG7_CHAIN_5_4 = curr;
    }

    /**
     * Get all of TRIG7_CHAIN_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Chain 4/5 Register
     */
    inline void get_TRIG7_CHAIN_5_4(
        bool &IE5_EN, ADC_ETC_TRIG7_CHAIN_5_4_IE5 &IE5, bool &B2B5,
        ADC_ETC_TRIG7_CHAIN_5_4_HWTS5 &HWTS5,
        ADC_ETC_TRIG7_CHAIN_5_4_CSEL5 &CSEL5, bool &IE4_EN,
        ADC_ETC_TRIG7_CHAIN_5_4_IE4 &IE4, bool &B2B4,
        ADC_ETC_TRIG7_CHAIN_5_4_HWTS4 &HWTS4,
        ADC_ETC_TRIG7_CHAIN_5_4_CSEL4 &CSEL4) volatile
    {
        uint32_t curr = TRIG7_CHAIN_5_4;

        IE5_EN = curr & (1u << 31u);
        IE5 = ADC_ETC_TRIG7_CHAIN_5_4_IE5((curr >> 29u) & 0b11u);
        B2B5 = curr & (1u << 28u);
        HWTS5 = ADC_ETC_TRIG7_CHAIN_5_4_HWTS5((curr >> 20u) & 0b11111111u);
        CSEL5 = ADC_ETC_TRIG7_CHAIN_5_4_CSEL5((curr >> 16u) & 0b1111u);
        IE4_EN = curr & (1u << 15u);
        IE4 = ADC_ETC_TRIG7_CHAIN_5_4_IE4((curr >> 13u) & 0b11u);
        B2B4 = curr & (1u << 12u);
        HWTS4 = ADC_ETC_TRIG7_CHAIN_5_4_HWTS4((curr >> 4u) & 0b11111111u);
        CSEL4 = ADC_ETC_TRIG7_CHAIN_5_4_CSEL4((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG7_CHAIN_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Chain 4/5 Register
     */
    inline void set_TRIG7_CHAIN_5_4(
        bool IE5_EN, ADC_ETC_TRIG7_CHAIN_5_4_IE5 IE5, bool B2B5,
        ADC_ETC_TRIG7_CHAIN_5_4_HWTS5 HWTS5,
        ADC_ETC_TRIG7_CHAIN_5_4_CSEL5 CSEL5, bool IE4_EN,
        ADC_ETC_TRIG7_CHAIN_5_4_IE4 IE4, bool B2B4,
        ADC_ETC_TRIG7_CHAIN_5_4_HWTS4 HWTS4,
        ADC_ETC_TRIG7_CHAIN_5_4_CSEL4 CSEL4) volatile
    {
        uint32_t curr = TRIG7_CHAIN_5_4;

        curr &= ~(0b1u << 31u);
        curr |= (IE5_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE5) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B5 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS5) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL5) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE4_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE4) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B4 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS4) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL4) & 0b1111u) << 0u;

        TRIG7_CHAIN_5_4 = curr;
    }

    /**
     * Get TRIG7_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline bool get_TRIG7_CHAIN_7_6_IE7_EN() volatile
    {
        return TRIG7_CHAIN_7_6 & (1u << 31u);
    }

    /**
     * Set TRIG7_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void set_TRIG7_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG7_CHAIN_7_6 |= 1u << 31u;
    }

    /**
     * Clear TRIG7_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void clear_TRIG7_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG7_CHAIN_7_6 &= ~(1u << 31u);
    }

    /**
     * Toggle TRIG7_CHAIN_7_6's IE7_EN bit.
     *
     * IRQ enable of segment 7.
     */
    inline void toggle_TRIG7_CHAIN_7_6_IE7_EN() volatile
    {
        TRIG7_CHAIN_7_6 ^= 1u << 31u;
    }

    /**
     * Get TRIG7_CHAIN_7_6's IE7 field.
     *
     * Segment 7 interrupt enable. (This bit field is meaningful only when
     * IE7_EN is set)
     */
    inline ADC_ETC_TRIG7_CHAIN_7_6_IE7 get_TRIG7_CHAIN_7_6_IE7() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_7_6_IE7((TRIG7_CHAIN_7_6 >> 29u) & 0b11u);
    }

    /**
     * Set TRIG7_CHAIN_7_6's IE7 field.
     *
     * Segment 7 interrupt enable. (This bit field is meaningful only when
     * IE7_EN is set)
     */
    inline void set_TRIG7_CHAIN_7_6_IE7(
        ADC_ETC_TRIG7_CHAIN_7_6_IE7 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_7_6;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TRIG7_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG7_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline bool get_TRIG7_CHAIN_7_6_B2B7() volatile
    {
        return TRIG7_CHAIN_7_6 & (1u << 28u);
    }

    /**
     * Set TRIG7_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void set_TRIG7_CHAIN_7_6_B2B7() volatile
    {
        TRIG7_CHAIN_7_6 |= 1u << 28u;
    }

    /**
     * Clear TRIG7_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void clear_TRIG7_CHAIN_7_6_B2B7() volatile
    {
        TRIG7_CHAIN_7_6 &= ~(1u << 28u);
    }

    /**
     * Toggle TRIG7_CHAIN_7_6's B2B7 bit.
     *
     * Segment 7 B2B
     */
    inline void toggle_TRIG7_CHAIN_7_6_B2B7() volatile
    {
        TRIG7_CHAIN_7_6 ^= 1u << 28u;
    }

    /**
     * Get TRIG7_CHAIN_7_6's HWTS7 field.
     *
     * Segment 7 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG7_CHAIN_7_6_HWTS7 get_TRIG7_CHAIN_7_6_HWTS7() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_7_6_HWTS7((TRIG7_CHAIN_7_6 >> 20u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG7_CHAIN_7_6's HWTS7 field.
     *
     * Segment 7 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG7_CHAIN_7_6_HWTS7(
        ADC_ETC_TRIG7_CHAIN_7_6_HWTS7 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_7_6;

        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 20u;

        TRIG7_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG7_CHAIN_7_6's CSEL7 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG7_CHAIN_7_6_CSEL7 get_TRIG7_CHAIN_7_6_CSEL7() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_7_6_CSEL7((TRIG7_CHAIN_7_6 >> 16u) &
                                             0b1111u);
    }

    /**
     * Set TRIG7_CHAIN_7_6's CSEL7 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG7_CHAIN_7_6_CSEL7(
        ADC_ETC_TRIG7_CHAIN_7_6_CSEL7 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_7_6;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        TRIG7_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG7_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline bool get_TRIG7_CHAIN_7_6_IE6_EN() volatile
    {
        return TRIG7_CHAIN_7_6 & (1u << 15u);
    }

    /**
     * Set TRIG7_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void set_TRIG7_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG7_CHAIN_7_6 |= 1u << 15u;
    }

    /**
     * Clear TRIG7_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void clear_TRIG7_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG7_CHAIN_7_6 &= ~(1u << 15u);
    }

    /**
     * Toggle TRIG7_CHAIN_7_6's IE6_EN bit.
     *
     * IRQ enable of segment 6.
     */
    inline void toggle_TRIG7_CHAIN_7_6_IE6_EN() volatile
    {
        TRIG7_CHAIN_7_6 ^= 1u << 15u;
    }

    /**
     * Get TRIG7_CHAIN_7_6's IE6 field.
     *
     * Segment 6 interrupt enable. (This bit field is meaningful only when
     * IE6_EN is set)
     */
    inline ADC_ETC_TRIG7_CHAIN_7_6_IE6 get_TRIG7_CHAIN_7_6_IE6() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_7_6_IE6((TRIG7_CHAIN_7_6 >> 13u) & 0b11u);
    }

    /**
     * Set TRIG7_CHAIN_7_6's IE6 field.
     *
     * Segment 6 interrupt enable. (This bit field is meaningful only when
     * IE6_EN is set)
     */
    inline void set_TRIG7_CHAIN_7_6_IE6(
        ADC_ETC_TRIG7_CHAIN_7_6_IE6 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_7_6;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TRIG7_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG7_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline bool get_TRIG7_CHAIN_7_6_B2B6() volatile
    {
        return TRIG7_CHAIN_7_6 & (1u << 12u);
    }

    /**
     * Set TRIG7_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void set_TRIG7_CHAIN_7_6_B2B6() volatile
    {
        TRIG7_CHAIN_7_6 |= 1u << 12u;
    }

    /**
     * Clear TRIG7_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void clear_TRIG7_CHAIN_7_6_B2B6() volatile
    {
        TRIG7_CHAIN_7_6 &= ~(1u << 12u);
    }

    /**
     * Toggle TRIG7_CHAIN_7_6's B2B6 bit.
     *
     * Segment 6 B2B
     */
    inline void toggle_TRIG7_CHAIN_7_6_B2B6() volatile
    {
        TRIG7_CHAIN_7_6 ^= 1u << 12u;
    }

    /**
     * Get TRIG7_CHAIN_7_6's HWTS6 field.
     *
     * Segment 6 HWTS ADC hardware trigger selection
     */
    inline ADC_ETC_TRIG7_CHAIN_7_6_HWTS6 get_TRIG7_CHAIN_7_6_HWTS6() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_7_6_HWTS6((TRIG7_CHAIN_7_6 >> 4u) &
                                             0b11111111u);
    }

    /**
     * Set TRIG7_CHAIN_7_6's HWTS6 field.
     *
     * Segment 6 HWTS ADC hardware trigger selection
     */
    inline void set_TRIG7_CHAIN_7_6_HWTS6(
        ADC_ETC_TRIG7_CHAIN_7_6_HWTS6 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_7_6;

        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 4u;

        TRIG7_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG7_CHAIN_7_6's CSEL6 field.
     *
     * ADC hardware trigger command selection
     */
    inline ADC_ETC_TRIG7_CHAIN_7_6_CSEL6 get_TRIG7_CHAIN_7_6_CSEL6() volatile
    {
        return ADC_ETC_TRIG7_CHAIN_7_6_CSEL6((TRIG7_CHAIN_7_6 >> 0u) &
                                             0b1111u);
    }

    /**
     * Set TRIG7_CHAIN_7_6's CSEL6 field.
     *
     * ADC hardware trigger command selection
     */
    inline void set_TRIG7_CHAIN_7_6_CSEL6(
        ADC_ETC_TRIG7_CHAIN_7_6_CSEL6 value) volatile
    {
        uint32_t curr = TRIG7_CHAIN_7_6;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TRIG7_CHAIN_7_6 = curr;
    }

    /**
     * Get all of TRIG7_CHAIN_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Chain 6/7 Register
     */
    inline void get_TRIG7_CHAIN_7_6(
        bool &IE7_EN, ADC_ETC_TRIG7_CHAIN_7_6_IE7 &IE7, bool &B2B7,
        ADC_ETC_TRIG7_CHAIN_7_6_HWTS7 &HWTS7,
        ADC_ETC_TRIG7_CHAIN_7_6_CSEL7 &CSEL7, bool &IE6_EN,
        ADC_ETC_TRIG7_CHAIN_7_6_IE6 &IE6, bool &B2B6,
        ADC_ETC_TRIG7_CHAIN_7_6_HWTS6 &HWTS6,
        ADC_ETC_TRIG7_CHAIN_7_6_CSEL6 &CSEL6) volatile
    {
        uint32_t curr = TRIG7_CHAIN_7_6;

        IE7_EN = curr & (1u << 31u);
        IE7 = ADC_ETC_TRIG7_CHAIN_7_6_IE7((curr >> 29u) & 0b11u);
        B2B7 = curr & (1u << 28u);
        HWTS7 = ADC_ETC_TRIG7_CHAIN_7_6_HWTS7((curr >> 20u) & 0b11111111u);
        CSEL7 = ADC_ETC_TRIG7_CHAIN_7_6_CSEL7((curr >> 16u) & 0b1111u);
        IE6_EN = curr & (1u << 15u);
        IE6 = ADC_ETC_TRIG7_CHAIN_7_6_IE6((curr >> 13u) & 0b11u);
        B2B6 = curr & (1u << 12u);
        HWTS6 = ADC_ETC_TRIG7_CHAIN_7_6_HWTS6((curr >> 4u) & 0b11111111u);
        CSEL6 = ADC_ETC_TRIG7_CHAIN_7_6_CSEL6((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of TRIG7_CHAIN_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Chain 6/7 Register
     */
    inline void set_TRIG7_CHAIN_7_6(
        bool IE7_EN, ADC_ETC_TRIG7_CHAIN_7_6_IE7 IE7, bool B2B7,
        ADC_ETC_TRIG7_CHAIN_7_6_HWTS7 HWTS7,
        ADC_ETC_TRIG7_CHAIN_7_6_CSEL7 CSEL7, bool IE6_EN,
        ADC_ETC_TRIG7_CHAIN_7_6_IE6 IE6, bool B2B6,
        ADC_ETC_TRIG7_CHAIN_7_6_HWTS6 HWTS6,
        ADC_ETC_TRIG7_CHAIN_7_6_CSEL6 CSEL6) volatile
    {
        uint32_t curr = TRIG7_CHAIN_7_6;

        curr &= ~(0b1u << 31u);
        curr |= (IE7_EN & 0b1u) << 31u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(IE7) & 0b11u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (B2B7 & 0b1u) << 28u;
        curr &= ~(0b11111111u << 20u);
        curr |= (std::to_underlying(HWTS7) & 0b11111111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(CSEL7) & 0b1111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (IE6_EN & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(IE6) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (B2B6 & 0b1u) << 12u;
        curr &= ~(0b11111111u << 4u);
        curr |= (std::to_underlying(HWTS6) & 0b11111111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CSEL6) & 0b1111u) << 0u;

        TRIG7_CHAIN_7_6 = curr;
    }

    /**
     * Get TRIG7_RESULT_1_0's DATA1 field.
     *
     * Result DATA1The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG7_RESULT_1_0_DATA1() volatile
    {
        return (TRIG7_RESULT_1_0 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG7_RESULT_1_0's DATA0 field.
     *
     * Result DATA0The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG7_RESULT_1_0_DATA0() volatile
    {
        return (TRIG7_RESULT_1_0 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG7_RESULT_1_0's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 1/0 Register
     */
    inline void get_TRIG7_RESULT_1_0(uint16_t &DATA1, uint16_t &DATA0) volatile
    {
        uint32_t curr = TRIG7_RESULT_1_0;

        DATA1 = (curr >> 16u) & 0b111111111111u;
        DATA0 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG7_RESULT_3_2's DATA3 field.
     *
     * Result DATA3The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG7_RESULT_3_2_DATA3() volatile
    {
        return (TRIG7_RESULT_3_2 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG7_RESULT_3_2's DATA2 field.
     *
     * Result DATA2The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG7_RESULT_3_2_DATA2() volatile
    {
        return (TRIG7_RESULT_3_2 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG7_RESULT_3_2's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 3/2 Register
     */
    inline void get_TRIG7_RESULT_3_2(uint16_t &DATA3, uint16_t &DATA2) volatile
    {
        uint32_t curr = TRIG7_RESULT_3_2;

        DATA3 = (curr >> 16u) & 0b111111111111u;
        DATA2 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG7_RESULT_5_4's DATA5 field.
     *
     * Result DATA5The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG7_RESULT_5_4_DATA5() volatile
    {
        return (TRIG7_RESULT_5_4 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG7_RESULT_5_4's DATA4 field.
     *
     * Result DATA4The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG7_RESULT_5_4_DATA4() volatile
    {
        return (TRIG7_RESULT_5_4 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG7_RESULT_5_4's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 5/4 Register
     */
    inline void get_TRIG7_RESULT_5_4(uint16_t &DATA5, uint16_t &DATA4) volatile
    {
        uint32_t curr = TRIG7_RESULT_5_4;

        DATA5 = (curr >> 16u) & 0b111111111111u;
        DATA4 = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Get TRIG7_RESULT_7_6's DATA7 field.
     *
     * Result DATA7The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG7_RESULT_7_6_DATA7() volatile
    {
        return (TRIG7_RESULT_7_6 >> 16u) & 0b111111111111u;
    }

    /**
     * Get TRIG7_RESULT_7_6's DATA6 field.
     *
     * Result DATA6The sign bit from ADC result FIFO is ignored by ETC_TRIG
     * result, so only 12-bit unsigned results is supported by ADC_ETC module
     */
    inline uint16_t get_TRIG7_RESULT_7_6_DATA6() volatile
    {
        return (TRIG7_RESULT_7_6 >> 0u) & 0b111111111111u;
    }

    /**
     * Get all of TRIG7_RESULT_7_6's bit fields.
     *
     * (read-write) ETC_TRIG Result Data 7/6 Register
     */
    inline void get_TRIG7_RESULT_7_6(uint16_t &DATA7, uint16_t &DATA6) volatile
    {
        uint32_t curr = TRIG7_RESULT_7_6;

        DATA7 = (curr >> 16u) & 0b111111111111u;
        DATA6 = (curr >> 0u) & 0b111111111111u;
    }
};

static_assert(sizeof(adc_etc) == adc_etc::size);

static volatile adc_etc *const ADC_ETC =
    reinterpret_cast<adc_etc *>(0x40048000);

}; // namespace MIMXRT1176::CM7
