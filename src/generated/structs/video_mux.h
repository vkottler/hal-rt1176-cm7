/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * VIDEO_MUX
 */
struct [[gnu::packed]] video_mux
{
    /* Constant attributes. */
    static constexpr std::size_t size = 128; /*!< video_mux's size in bytes. */

    /* Fields. */
    uint32_t VID_MUX_CTRL;     /*!< (read-write) Video mux Control Register */
    uint32_t VID_MUX_CTRL_SET; /*!< (read-write) Video mux Control Register */
    uint32_t VID_MUX_CTRL_CLR; /*!< (read-write) Video mux Control Register */
    uint32_t VID_MUX_CTRL_TOG; /*!< (read-write) Video mux Control Register */
    static constexpr std::size_t reserved_padding0_length = 4;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t
        PLM_CTRL; /*!< (read-write) Pixel Link Master(PLM) Control Register */
    uint32_t PLM_CTRL_SET;    /*!< (read-write) Pixel Link Master(PLM) Control
                                 Register */
    uint32_t PLM_CTRL_CLR;    /*!< (read-write) Pixel Link Master(PLM) Control
                                 Register */
    uint32_t PLM_CTRL_TOG;    /*!< (read-write) Pixel Link Master(PLM) Control
                                 Register */
    uint32_t YUV420_CTRL;     /*!< (read-write) YUV420 Control Register */
    uint32_t YUV420_CTRL_SET; /*!< (read-write) YUV420 Control Register */
    uint32_t YUV420_CTRL_CLR; /*!< (read-write) YUV420 Control Register */
    uint32_t YUV420_CTRL_TOG; /*!< (read-write) YUV420 Control Register */
    static constexpr std::size_t reserved_padding1_length = 4;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    uint32_t CFG_DT_DISABLE;     /*!< (read-write) Data Disable Register */
    uint32_t CFG_DT_DISABLE_SET; /*!< (read-write) Data Disable Register */
    uint32_t CFG_DT_DISABLE_CLR; /*!< (read-write) Data Disable Register */
    uint32_t CFG_DT_DISABLE_TOG; /*!< (read-write) Data Disable Register */
    static constexpr std::size_t reserved_padding2_length = 4;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    uint32_t MIPI_DSI_CTRL;     /*!< (read-write) MIPI DSI Control Register */
    uint32_t MIPI_DSI_CTRL_SET; /*!< (read-write) MIPI DSI Control Register */
    uint32_t MIPI_DSI_CTRL_CLR; /*!< (read-write) MIPI DSI Control Register */
    uint32_t MIPI_DSI_CTRL_TOG; /*!< (read-write) MIPI DSI Control Register */

    /* Methods. */

    /**
     * Get VID_MUX_CTRL's PARA_LCD_SEL bit.
     *
     * Parallel LCDIF video data input mux selector
     */
    inline bool get_VID_MUX_CTRL_PARA_LCD_SEL() volatile
    {
        return VID_MUX_CTRL & (1u << 3u);
    }

    /**
     * Set VID_MUX_CTRL's PARA_LCD_SEL bit.
     *
     * Parallel LCDIF video data input mux selector
     */
    inline void set_VID_MUX_CTRL_PARA_LCD_SEL() volatile
    {
        VID_MUX_CTRL |= 1u << 3u;
    }

    /**
     * Clear VID_MUX_CTRL's PARA_LCD_SEL bit.
     *
     * Parallel LCDIF video data input mux selector
     */
    inline void clear_VID_MUX_CTRL_PARA_LCD_SEL() volatile
    {
        VID_MUX_CTRL &= ~(1u << 3u);
    }

    /**
     * Toggle VID_MUX_CTRL's PARA_LCD_SEL bit.
     *
     * Parallel LCDIF video data input mux selector
     */
    inline void toggle_VID_MUX_CTRL_PARA_LCD_SEL() volatile
    {
        VID_MUX_CTRL ^= 1u << 3u;
    }

    /**
     * Get VID_MUX_CTRL's MIPI_DSI_SEL bit.
     *
     * MIPI DSI video data input mux selector
     */
    inline bool get_VID_MUX_CTRL_MIPI_DSI_SEL() volatile
    {
        return VID_MUX_CTRL & (1u << 2u);
    }

    /**
     * Set VID_MUX_CTRL's MIPI_DSI_SEL bit.
     *
     * MIPI DSI video data input mux selector
     */
    inline void set_VID_MUX_CTRL_MIPI_DSI_SEL() volatile
    {
        VID_MUX_CTRL |= 1u << 2u;
    }

    /**
     * Clear VID_MUX_CTRL's MIPI_DSI_SEL bit.
     *
     * MIPI DSI video data input mux selector
     */
    inline void clear_VID_MUX_CTRL_MIPI_DSI_SEL() volatile
    {
        VID_MUX_CTRL &= ~(1u << 2u);
    }

    /**
     * Toggle VID_MUX_CTRL's MIPI_DSI_SEL bit.
     *
     * MIPI DSI video data input mux selector
     */
    inline void toggle_VID_MUX_CTRL_MIPI_DSI_SEL() volatile
    {
        VID_MUX_CTRL ^= 1u << 2u;
    }

    /**
     * Get VID_MUX_CTRL's LCDIF2_SEL bit.
     *
     * LCDIF2 sensor data input mux selector
     */
    inline bool get_VID_MUX_CTRL_LCDIF2_SEL() volatile
    {
        return VID_MUX_CTRL & (1u << 1u);
    }

    /**
     * Set VID_MUX_CTRL's LCDIF2_SEL bit.
     *
     * LCDIF2 sensor data input mux selector
     */
    inline void set_VID_MUX_CTRL_LCDIF2_SEL() volatile
    {
        VID_MUX_CTRL |= 1u << 1u;
    }

    /**
     * Clear VID_MUX_CTRL's LCDIF2_SEL bit.
     *
     * LCDIF2 sensor data input mux selector
     */
    inline void clear_VID_MUX_CTRL_LCDIF2_SEL() volatile
    {
        VID_MUX_CTRL &= ~(1u << 1u);
    }

    /**
     * Toggle VID_MUX_CTRL's LCDIF2_SEL bit.
     *
     * LCDIF2 sensor data input mux selector
     */
    inline void toggle_VID_MUX_CTRL_LCDIF2_SEL() volatile
    {
        VID_MUX_CTRL ^= 1u << 1u;
    }

    /**
     * Get VID_MUX_CTRL's CSI_SEL bit.
     *
     * CSI sensor data input mux selector
     */
    inline bool get_VID_MUX_CTRL_CSI_SEL() volatile
    {
        return VID_MUX_CTRL & (1u << 0u);
    }

    /**
     * Set VID_MUX_CTRL's CSI_SEL bit.
     *
     * CSI sensor data input mux selector
     */
    inline void set_VID_MUX_CTRL_CSI_SEL() volatile
    {
        VID_MUX_CTRL |= 1u << 0u;
    }

    /**
     * Clear VID_MUX_CTRL's CSI_SEL bit.
     *
     * CSI sensor data input mux selector
     */
    inline void clear_VID_MUX_CTRL_CSI_SEL() volatile
    {
        VID_MUX_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle VID_MUX_CTRL's CSI_SEL bit.
     *
     * CSI sensor data input mux selector
     */
    inline void toggle_VID_MUX_CTRL_CSI_SEL() volatile
    {
        VID_MUX_CTRL ^= 1u << 0u;
    }

    /**
     * Get all of VID_MUX_CTRL's bit fields.
     *
     * (read-write) Video mux Control Register
     */
    inline void get_VID_MUX_CTRL(bool &PARA_LCD_SEL, bool &MIPI_DSI_SEL,
                                 bool &LCDIF2_SEL, bool &CSI_SEL) volatile
    {
        uint32_t curr = VID_MUX_CTRL;

        PARA_LCD_SEL = curr & (1u << 3u);
        MIPI_DSI_SEL = curr & (1u << 2u);
        LCDIF2_SEL = curr & (1u << 1u);
        CSI_SEL = curr & (1u << 0u);
    }

    /**
     * Set all of VID_MUX_CTRL's bit fields.
     *
     * (read-write) Video mux Control Register
     */
    inline void set_VID_MUX_CTRL(bool PARA_LCD_SEL, bool MIPI_DSI_SEL,
                                 bool LCDIF2_SEL, bool CSI_SEL) volatile
    {
        uint32_t curr = VID_MUX_CTRL;

        curr &= ~(0b1u << 3u);
        curr |= (PARA_LCD_SEL & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (MIPI_DSI_SEL & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (LCDIF2_SEL & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CSI_SEL & 0b1u) << 0u;

        VID_MUX_CTRL = curr;
    }

    /**
     * Get VID_MUX_CTRL_SET's PARA_LCD_SEL bit.
     *
     * Parallel LCDIF video data input mux selector
     */
    inline bool get_VID_MUX_CTRL_SET_PARA_LCD_SEL() volatile
    {
        return VID_MUX_CTRL_SET & (1u << 3u);
    }

    /**
     * Set VID_MUX_CTRL_SET's PARA_LCD_SEL bit.
     *
     * Parallel LCDIF video data input mux selector
     */
    inline void set_VID_MUX_CTRL_SET_PARA_LCD_SEL() volatile
    {
        VID_MUX_CTRL_SET |= 1u << 3u;
    }

    /**
     * Clear VID_MUX_CTRL_SET's PARA_LCD_SEL bit.
     *
     * Parallel LCDIF video data input mux selector
     */
    inline void clear_VID_MUX_CTRL_SET_PARA_LCD_SEL() volatile
    {
        VID_MUX_CTRL_SET &= ~(1u << 3u);
    }

    /**
     * Toggle VID_MUX_CTRL_SET's PARA_LCD_SEL bit.
     *
     * Parallel LCDIF video data input mux selector
     */
    inline void toggle_VID_MUX_CTRL_SET_PARA_LCD_SEL() volatile
    {
        VID_MUX_CTRL_SET ^= 1u << 3u;
    }

    /**
     * Get VID_MUX_CTRL_SET's MIPI_DSI_SEL bit.
     *
     * MIPI DSI video data input mux selector
     */
    inline bool get_VID_MUX_CTRL_SET_MIPI_DSI_SEL() volatile
    {
        return VID_MUX_CTRL_SET & (1u << 2u);
    }

    /**
     * Set VID_MUX_CTRL_SET's MIPI_DSI_SEL bit.
     *
     * MIPI DSI video data input mux selector
     */
    inline void set_VID_MUX_CTRL_SET_MIPI_DSI_SEL() volatile
    {
        VID_MUX_CTRL_SET |= 1u << 2u;
    }

    /**
     * Clear VID_MUX_CTRL_SET's MIPI_DSI_SEL bit.
     *
     * MIPI DSI video data input mux selector
     */
    inline void clear_VID_MUX_CTRL_SET_MIPI_DSI_SEL() volatile
    {
        VID_MUX_CTRL_SET &= ~(1u << 2u);
    }

    /**
     * Toggle VID_MUX_CTRL_SET's MIPI_DSI_SEL bit.
     *
     * MIPI DSI video data input mux selector
     */
    inline void toggle_VID_MUX_CTRL_SET_MIPI_DSI_SEL() volatile
    {
        VID_MUX_CTRL_SET ^= 1u << 2u;
    }

    /**
     * Get VID_MUX_CTRL_SET's LCDIF2_SEL bit.
     *
     * LCDIF2 sensor data input mux selector
     */
    inline bool get_VID_MUX_CTRL_SET_LCDIF2_SEL() volatile
    {
        return VID_MUX_CTRL_SET & (1u << 1u);
    }

    /**
     * Set VID_MUX_CTRL_SET's LCDIF2_SEL bit.
     *
     * LCDIF2 sensor data input mux selector
     */
    inline void set_VID_MUX_CTRL_SET_LCDIF2_SEL() volatile
    {
        VID_MUX_CTRL_SET |= 1u << 1u;
    }

    /**
     * Clear VID_MUX_CTRL_SET's LCDIF2_SEL bit.
     *
     * LCDIF2 sensor data input mux selector
     */
    inline void clear_VID_MUX_CTRL_SET_LCDIF2_SEL() volatile
    {
        VID_MUX_CTRL_SET &= ~(1u << 1u);
    }

    /**
     * Toggle VID_MUX_CTRL_SET's LCDIF2_SEL bit.
     *
     * LCDIF2 sensor data input mux selector
     */
    inline void toggle_VID_MUX_CTRL_SET_LCDIF2_SEL() volatile
    {
        VID_MUX_CTRL_SET ^= 1u << 1u;
    }

    /**
     * Get VID_MUX_CTRL_SET's CSI_SEL bit.
     *
     * CSI sensor data input mux selector
     */
    inline bool get_VID_MUX_CTRL_SET_CSI_SEL() volatile
    {
        return VID_MUX_CTRL_SET & (1u << 0u);
    }

    /**
     * Set VID_MUX_CTRL_SET's CSI_SEL bit.
     *
     * CSI sensor data input mux selector
     */
    inline void set_VID_MUX_CTRL_SET_CSI_SEL() volatile
    {
        VID_MUX_CTRL_SET |= 1u << 0u;
    }

    /**
     * Clear VID_MUX_CTRL_SET's CSI_SEL bit.
     *
     * CSI sensor data input mux selector
     */
    inline void clear_VID_MUX_CTRL_SET_CSI_SEL() volatile
    {
        VID_MUX_CTRL_SET &= ~(1u << 0u);
    }

    /**
     * Toggle VID_MUX_CTRL_SET's CSI_SEL bit.
     *
     * CSI sensor data input mux selector
     */
    inline void toggle_VID_MUX_CTRL_SET_CSI_SEL() volatile
    {
        VID_MUX_CTRL_SET ^= 1u << 0u;
    }

    /**
     * Get all of VID_MUX_CTRL_SET's bit fields.
     *
     * (read-write) Video mux Control Register
     */
    inline void get_VID_MUX_CTRL_SET(bool &PARA_LCD_SEL, bool &MIPI_DSI_SEL,
                                     bool &LCDIF2_SEL, bool &CSI_SEL) volatile
    {
        uint32_t curr = VID_MUX_CTRL_SET;

        PARA_LCD_SEL = curr & (1u << 3u);
        MIPI_DSI_SEL = curr & (1u << 2u);
        LCDIF2_SEL = curr & (1u << 1u);
        CSI_SEL = curr & (1u << 0u);
    }

    /**
     * Set all of VID_MUX_CTRL_SET's bit fields.
     *
     * (read-write) Video mux Control Register
     */
    inline void set_VID_MUX_CTRL_SET(bool PARA_LCD_SEL, bool MIPI_DSI_SEL,
                                     bool LCDIF2_SEL, bool CSI_SEL) volatile
    {
        uint32_t curr = VID_MUX_CTRL_SET;

        curr &= ~(0b1u << 3u);
        curr |= (PARA_LCD_SEL & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (MIPI_DSI_SEL & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (LCDIF2_SEL & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CSI_SEL & 0b1u) << 0u;

        VID_MUX_CTRL_SET = curr;
    }

    /**
     * Get VID_MUX_CTRL_CLR's PARA_LCD_SEL bit.
     *
     * Parallel LCDIF video data input mux selector
     */
    inline bool get_VID_MUX_CTRL_CLR_PARA_LCD_SEL() volatile
    {
        return VID_MUX_CTRL_CLR & (1u << 3u);
    }

    /**
     * Set VID_MUX_CTRL_CLR's PARA_LCD_SEL bit.
     *
     * Parallel LCDIF video data input mux selector
     */
    inline void set_VID_MUX_CTRL_CLR_PARA_LCD_SEL() volatile
    {
        VID_MUX_CTRL_CLR |= 1u << 3u;
    }

    /**
     * Clear VID_MUX_CTRL_CLR's PARA_LCD_SEL bit.
     *
     * Parallel LCDIF video data input mux selector
     */
    inline void clear_VID_MUX_CTRL_CLR_PARA_LCD_SEL() volatile
    {
        VID_MUX_CTRL_CLR &= ~(1u << 3u);
    }

    /**
     * Toggle VID_MUX_CTRL_CLR's PARA_LCD_SEL bit.
     *
     * Parallel LCDIF video data input mux selector
     */
    inline void toggle_VID_MUX_CTRL_CLR_PARA_LCD_SEL() volatile
    {
        VID_MUX_CTRL_CLR ^= 1u << 3u;
    }

    /**
     * Get VID_MUX_CTRL_CLR's MIPI_DSI_SEL bit.
     *
     * MIPI DSI video data input mux selector
     */
    inline bool get_VID_MUX_CTRL_CLR_MIPI_DSI_SEL() volatile
    {
        return VID_MUX_CTRL_CLR & (1u << 2u);
    }

    /**
     * Set VID_MUX_CTRL_CLR's MIPI_DSI_SEL bit.
     *
     * MIPI DSI video data input mux selector
     */
    inline void set_VID_MUX_CTRL_CLR_MIPI_DSI_SEL() volatile
    {
        VID_MUX_CTRL_CLR |= 1u << 2u;
    }

    /**
     * Clear VID_MUX_CTRL_CLR's MIPI_DSI_SEL bit.
     *
     * MIPI DSI video data input mux selector
     */
    inline void clear_VID_MUX_CTRL_CLR_MIPI_DSI_SEL() volatile
    {
        VID_MUX_CTRL_CLR &= ~(1u << 2u);
    }

    /**
     * Toggle VID_MUX_CTRL_CLR's MIPI_DSI_SEL bit.
     *
     * MIPI DSI video data input mux selector
     */
    inline void toggle_VID_MUX_CTRL_CLR_MIPI_DSI_SEL() volatile
    {
        VID_MUX_CTRL_CLR ^= 1u << 2u;
    }

    /**
     * Get VID_MUX_CTRL_CLR's LCDIF2_SEL bit.
     *
     * LCDIF2 sensor data input mux selector
     */
    inline bool get_VID_MUX_CTRL_CLR_LCDIF2_SEL() volatile
    {
        return VID_MUX_CTRL_CLR & (1u << 1u);
    }

    /**
     * Set VID_MUX_CTRL_CLR's LCDIF2_SEL bit.
     *
     * LCDIF2 sensor data input mux selector
     */
    inline void set_VID_MUX_CTRL_CLR_LCDIF2_SEL() volatile
    {
        VID_MUX_CTRL_CLR |= 1u << 1u;
    }

    /**
     * Clear VID_MUX_CTRL_CLR's LCDIF2_SEL bit.
     *
     * LCDIF2 sensor data input mux selector
     */
    inline void clear_VID_MUX_CTRL_CLR_LCDIF2_SEL() volatile
    {
        VID_MUX_CTRL_CLR &= ~(1u << 1u);
    }

    /**
     * Toggle VID_MUX_CTRL_CLR's LCDIF2_SEL bit.
     *
     * LCDIF2 sensor data input mux selector
     */
    inline void toggle_VID_MUX_CTRL_CLR_LCDIF2_SEL() volatile
    {
        VID_MUX_CTRL_CLR ^= 1u << 1u;
    }

    /**
     * Get VID_MUX_CTRL_CLR's CSI_SEL bit.
     *
     * CSI sensor data input mux selector
     */
    inline bool get_VID_MUX_CTRL_CLR_CSI_SEL() volatile
    {
        return VID_MUX_CTRL_CLR & (1u << 0u);
    }

    /**
     * Set VID_MUX_CTRL_CLR's CSI_SEL bit.
     *
     * CSI sensor data input mux selector
     */
    inline void set_VID_MUX_CTRL_CLR_CSI_SEL() volatile
    {
        VID_MUX_CTRL_CLR |= 1u << 0u;
    }

    /**
     * Clear VID_MUX_CTRL_CLR's CSI_SEL bit.
     *
     * CSI sensor data input mux selector
     */
    inline void clear_VID_MUX_CTRL_CLR_CSI_SEL() volatile
    {
        VID_MUX_CTRL_CLR &= ~(1u << 0u);
    }

    /**
     * Toggle VID_MUX_CTRL_CLR's CSI_SEL bit.
     *
     * CSI sensor data input mux selector
     */
    inline void toggle_VID_MUX_CTRL_CLR_CSI_SEL() volatile
    {
        VID_MUX_CTRL_CLR ^= 1u << 0u;
    }

    /**
     * Get all of VID_MUX_CTRL_CLR's bit fields.
     *
     * (read-write) Video mux Control Register
     */
    inline void get_VID_MUX_CTRL_CLR(bool &PARA_LCD_SEL, bool &MIPI_DSI_SEL,
                                     bool &LCDIF2_SEL, bool &CSI_SEL) volatile
    {
        uint32_t curr = VID_MUX_CTRL_CLR;

        PARA_LCD_SEL = curr & (1u << 3u);
        MIPI_DSI_SEL = curr & (1u << 2u);
        LCDIF2_SEL = curr & (1u << 1u);
        CSI_SEL = curr & (1u << 0u);
    }

    /**
     * Set all of VID_MUX_CTRL_CLR's bit fields.
     *
     * (read-write) Video mux Control Register
     */
    inline void set_VID_MUX_CTRL_CLR(bool PARA_LCD_SEL, bool MIPI_DSI_SEL,
                                     bool LCDIF2_SEL, bool CSI_SEL) volatile
    {
        uint32_t curr = VID_MUX_CTRL_CLR;

        curr &= ~(0b1u << 3u);
        curr |= (PARA_LCD_SEL & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (MIPI_DSI_SEL & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (LCDIF2_SEL & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CSI_SEL & 0b1u) << 0u;

        VID_MUX_CTRL_CLR = curr;
    }

    /**
     * Get VID_MUX_CTRL_TOG's PARA_LCD_SEL bit.
     *
     * Parallel LCDIF video data input mux selector
     */
    inline bool get_VID_MUX_CTRL_TOG_PARA_LCD_SEL() volatile
    {
        return VID_MUX_CTRL_TOG & (1u << 3u);
    }

    /**
     * Set VID_MUX_CTRL_TOG's PARA_LCD_SEL bit.
     *
     * Parallel LCDIF video data input mux selector
     */
    inline void set_VID_MUX_CTRL_TOG_PARA_LCD_SEL() volatile
    {
        VID_MUX_CTRL_TOG |= 1u << 3u;
    }

    /**
     * Clear VID_MUX_CTRL_TOG's PARA_LCD_SEL bit.
     *
     * Parallel LCDIF video data input mux selector
     */
    inline void clear_VID_MUX_CTRL_TOG_PARA_LCD_SEL() volatile
    {
        VID_MUX_CTRL_TOG &= ~(1u << 3u);
    }

    /**
     * Toggle VID_MUX_CTRL_TOG's PARA_LCD_SEL bit.
     *
     * Parallel LCDIF video data input mux selector
     */
    inline void toggle_VID_MUX_CTRL_TOG_PARA_LCD_SEL() volatile
    {
        VID_MUX_CTRL_TOG ^= 1u << 3u;
    }

    /**
     * Get VID_MUX_CTRL_TOG's MIPI_DSI_SEL bit.
     *
     * MIPI DSI video data input mux selector
     */
    inline bool get_VID_MUX_CTRL_TOG_MIPI_DSI_SEL() volatile
    {
        return VID_MUX_CTRL_TOG & (1u << 2u);
    }

    /**
     * Set VID_MUX_CTRL_TOG's MIPI_DSI_SEL bit.
     *
     * MIPI DSI video data input mux selector
     */
    inline void set_VID_MUX_CTRL_TOG_MIPI_DSI_SEL() volatile
    {
        VID_MUX_CTRL_TOG |= 1u << 2u;
    }

    /**
     * Clear VID_MUX_CTRL_TOG's MIPI_DSI_SEL bit.
     *
     * MIPI DSI video data input mux selector
     */
    inline void clear_VID_MUX_CTRL_TOG_MIPI_DSI_SEL() volatile
    {
        VID_MUX_CTRL_TOG &= ~(1u << 2u);
    }

    /**
     * Toggle VID_MUX_CTRL_TOG's MIPI_DSI_SEL bit.
     *
     * MIPI DSI video data input mux selector
     */
    inline void toggle_VID_MUX_CTRL_TOG_MIPI_DSI_SEL() volatile
    {
        VID_MUX_CTRL_TOG ^= 1u << 2u;
    }

    /**
     * Get VID_MUX_CTRL_TOG's LCDIF2_SEL bit.
     *
     * LCDIF2 sensor data input mux selector
     */
    inline bool get_VID_MUX_CTRL_TOG_LCDIF2_SEL() volatile
    {
        return VID_MUX_CTRL_TOG & (1u << 1u);
    }

    /**
     * Set VID_MUX_CTRL_TOG's LCDIF2_SEL bit.
     *
     * LCDIF2 sensor data input mux selector
     */
    inline void set_VID_MUX_CTRL_TOG_LCDIF2_SEL() volatile
    {
        VID_MUX_CTRL_TOG |= 1u << 1u;
    }

    /**
     * Clear VID_MUX_CTRL_TOG's LCDIF2_SEL bit.
     *
     * LCDIF2 sensor data input mux selector
     */
    inline void clear_VID_MUX_CTRL_TOG_LCDIF2_SEL() volatile
    {
        VID_MUX_CTRL_TOG &= ~(1u << 1u);
    }

    /**
     * Toggle VID_MUX_CTRL_TOG's LCDIF2_SEL bit.
     *
     * LCDIF2 sensor data input mux selector
     */
    inline void toggle_VID_MUX_CTRL_TOG_LCDIF2_SEL() volatile
    {
        VID_MUX_CTRL_TOG ^= 1u << 1u;
    }

    /**
     * Get VID_MUX_CTRL_TOG's CSI_SEL bit.
     *
     * CSI sensor data input mux selector
     */
    inline bool get_VID_MUX_CTRL_TOG_CSI_SEL() volatile
    {
        return VID_MUX_CTRL_TOG & (1u << 0u);
    }

    /**
     * Set VID_MUX_CTRL_TOG's CSI_SEL bit.
     *
     * CSI sensor data input mux selector
     */
    inline void set_VID_MUX_CTRL_TOG_CSI_SEL() volatile
    {
        VID_MUX_CTRL_TOG |= 1u << 0u;
    }

    /**
     * Clear VID_MUX_CTRL_TOG's CSI_SEL bit.
     *
     * CSI sensor data input mux selector
     */
    inline void clear_VID_MUX_CTRL_TOG_CSI_SEL() volatile
    {
        VID_MUX_CTRL_TOG &= ~(1u << 0u);
    }

    /**
     * Toggle VID_MUX_CTRL_TOG's CSI_SEL bit.
     *
     * CSI sensor data input mux selector
     */
    inline void toggle_VID_MUX_CTRL_TOG_CSI_SEL() volatile
    {
        VID_MUX_CTRL_TOG ^= 1u << 0u;
    }

    /**
     * Get all of VID_MUX_CTRL_TOG's bit fields.
     *
     * (read-write) Video mux Control Register
     */
    inline void get_VID_MUX_CTRL_TOG(bool &PARA_LCD_SEL, bool &MIPI_DSI_SEL,
                                     bool &LCDIF2_SEL, bool &CSI_SEL) volatile
    {
        uint32_t curr = VID_MUX_CTRL_TOG;

        PARA_LCD_SEL = curr & (1u << 3u);
        MIPI_DSI_SEL = curr & (1u << 2u);
        LCDIF2_SEL = curr & (1u << 1u);
        CSI_SEL = curr & (1u << 0u);
    }

    /**
     * Set all of VID_MUX_CTRL_TOG's bit fields.
     *
     * (read-write) Video mux Control Register
     */
    inline void set_VID_MUX_CTRL_TOG(bool PARA_LCD_SEL, bool MIPI_DSI_SEL,
                                     bool LCDIF2_SEL, bool CSI_SEL) volatile
    {
        uint32_t curr = VID_MUX_CTRL_TOG;

        curr &= ~(0b1u << 3u);
        curr |= (PARA_LCD_SEL & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (MIPI_DSI_SEL & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (LCDIF2_SEL & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CSI_SEL & 0b1u) << 0u;

        VID_MUX_CTRL_TOG = curr;
    }

    /**
     * Get PLM_CTRL's POLARITY bit.
     *
     * Polarity of HYSNC/VSYNC
     */
    inline bool get_PLM_CTRL_POLARITY() volatile
    {
        return PLM_CTRL & (1u << 4u);
    }

    /**
     * Set PLM_CTRL's POLARITY bit.
     *
     * Polarity of HYSNC/VSYNC
     */
    inline void set_PLM_CTRL_POLARITY() volatile
    {
        PLM_CTRL |= 1u << 4u;
    }

    /**
     * Clear PLM_CTRL's POLARITY bit.
     *
     * Polarity of HYSNC/VSYNC
     */
    inline void clear_PLM_CTRL_POLARITY() volatile
    {
        PLM_CTRL &= ~(1u << 4u);
    }

    /**
     * Toggle PLM_CTRL's POLARITY bit.
     *
     * Polarity of HYSNC/VSYNC
     */
    inline void toggle_PLM_CTRL_POLARITY() volatile
    {
        PLM_CTRL ^= 1u << 4u;
    }

    /**
     * Get PLM_CTRL's VALID_OVERRIDE bit.
     *
     * Valid override
     */
    inline bool get_PLM_CTRL_VALID_OVERRIDE() volatile
    {
        return PLM_CTRL & (1u << 3u);
    }

    /**
     * Set PLM_CTRL's VALID_OVERRIDE bit.
     *
     * Valid override
     */
    inline void set_PLM_CTRL_VALID_OVERRIDE() volatile
    {
        PLM_CTRL |= 1u << 3u;
    }

    /**
     * Clear PLM_CTRL's VALID_OVERRIDE bit.
     *
     * Valid override
     */
    inline void clear_PLM_CTRL_VALID_OVERRIDE() volatile
    {
        PLM_CTRL &= ~(1u << 3u);
    }

    /**
     * Toggle PLM_CTRL's VALID_OVERRIDE bit.
     *
     * Valid override
     */
    inline void toggle_PLM_CTRL_VALID_OVERRIDE() volatile
    {
        PLM_CTRL ^= 1u << 3u;
    }

    /**
     * Get PLM_CTRL's HSYNC_OVERRIDE bit.
     *
     * HSYNC override
     */
    inline bool get_PLM_CTRL_HSYNC_OVERRIDE() volatile
    {
        return PLM_CTRL & (1u << 2u);
    }

    /**
     * Set PLM_CTRL's HSYNC_OVERRIDE bit.
     *
     * HSYNC override
     */
    inline void set_PLM_CTRL_HSYNC_OVERRIDE() volatile
    {
        PLM_CTRL |= 1u << 2u;
    }

    /**
     * Clear PLM_CTRL's HSYNC_OVERRIDE bit.
     *
     * HSYNC override
     */
    inline void clear_PLM_CTRL_HSYNC_OVERRIDE() volatile
    {
        PLM_CTRL &= ~(1u << 2u);
    }

    /**
     * Toggle PLM_CTRL's HSYNC_OVERRIDE bit.
     *
     * HSYNC override
     */
    inline void toggle_PLM_CTRL_HSYNC_OVERRIDE() volatile
    {
        PLM_CTRL ^= 1u << 2u;
    }

    /**
     * Get PLM_CTRL's VSYNC_OVERRIDE bit.
     *
     * VSYNC override
     */
    inline bool get_PLM_CTRL_VSYNC_OVERRIDE() volatile
    {
        return PLM_CTRL & (1u << 1u);
    }

    /**
     * Set PLM_CTRL's VSYNC_OVERRIDE bit.
     *
     * VSYNC override
     */
    inline void set_PLM_CTRL_VSYNC_OVERRIDE() volatile
    {
        PLM_CTRL |= 1u << 1u;
    }

    /**
     * Clear PLM_CTRL's VSYNC_OVERRIDE bit.
     *
     * VSYNC override
     */
    inline void clear_PLM_CTRL_VSYNC_OVERRIDE() volatile
    {
        PLM_CTRL &= ~(1u << 1u);
    }

    /**
     * Toggle PLM_CTRL's VSYNC_OVERRIDE bit.
     *
     * VSYNC override
     */
    inline void toggle_PLM_CTRL_VSYNC_OVERRIDE() volatile
    {
        PLM_CTRL ^= 1u << 1u;
    }

    /**
     * Get PLM_CTRL's ENABLE bit.
     *
     * Enable the output of HYSNC and VSYNC
     */
    inline bool get_PLM_CTRL_ENABLE() volatile
    {
        return PLM_CTRL & (1u << 0u);
    }

    /**
     * Set PLM_CTRL's ENABLE bit.
     *
     * Enable the output of HYSNC and VSYNC
     */
    inline void set_PLM_CTRL_ENABLE() volatile
    {
        PLM_CTRL |= 1u << 0u;
    }

    /**
     * Clear PLM_CTRL's ENABLE bit.
     *
     * Enable the output of HYSNC and VSYNC
     */
    inline void clear_PLM_CTRL_ENABLE() volatile
    {
        PLM_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle PLM_CTRL's ENABLE bit.
     *
     * Enable the output of HYSNC and VSYNC
     */
    inline void toggle_PLM_CTRL_ENABLE() volatile
    {
        PLM_CTRL ^= 1u << 0u;
    }

    /**
     * Get all of PLM_CTRL's bit fields.
     *
     * (read-write) Pixel Link Master(PLM) Control Register
     */
    inline void get_PLM_CTRL(bool &POLARITY, bool &VALID_OVERRIDE,
                             bool &HSYNC_OVERRIDE, bool &VSYNC_OVERRIDE,
                             bool &ENABLE) volatile
    {
        uint32_t curr = PLM_CTRL;

        POLARITY = curr & (1u << 4u);
        VALID_OVERRIDE = curr & (1u << 3u);
        HSYNC_OVERRIDE = curr & (1u << 2u);
        VSYNC_OVERRIDE = curr & (1u << 1u);
        ENABLE = curr & (1u << 0u);
    }

    /**
     * Set all of PLM_CTRL's bit fields.
     *
     * (read-write) Pixel Link Master(PLM) Control Register
     */
    inline void set_PLM_CTRL(bool POLARITY, bool VALID_OVERRIDE,
                             bool HSYNC_OVERRIDE, bool VSYNC_OVERRIDE,
                             bool ENABLE) volatile
    {
        uint32_t curr = PLM_CTRL;

        curr &= ~(0b1u << 4u);
        curr |= (POLARITY & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (VALID_OVERRIDE & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (HSYNC_OVERRIDE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (VSYNC_OVERRIDE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ENABLE & 0b1u) << 0u;

        PLM_CTRL = curr;
    }

    /**
     * Get PLM_CTRL_SET's POLARITY bit.
     *
     * Polarity of HYSNC/VSYNC
     */
    inline bool get_PLM_CTRL_SET_POLARITY() volatile
    {
        return PLM_CTRL_SET & (1u << 4u);
    }

    /**
     * Set PLM_CTRL_SET's POLARITY bit.
     *
     * Polarity of HYSNC/VSYNC
     */
    inline void set_PLM_CTRL_SET_POLARITY() volatile
    {
        PLM_CTRL_SET |= 1u << 4u;
    }

    /**
     * Clear PLM_CTRL_SET's POLARITY bit.
     *
     * Polarity of HYSNC/VSYNC
     */
    inline void clear_PLM_CTRL_SET_POLARITY() volatile
    {
        PLM_CTRL_SET &= ~(1u << 4u);
    }

    /**
     * Toggle PLM_CTRL_SET's POLARITY bit.
     *
     * Polarity of HYSNC/VSYNC
     */
    inline void toggle_PLM_CTRL_SET_POLARITY() volatile
    {
        PLM_CTRL_SET ^= 1u << 4u;
    }

    /**
     * Get PLM_CTRL_SET's VALID_OVERRIDE bit.
     *
     * Valid override
     */
    inline bool get_PLM_CTRL_SET_VALID_OVERRIDE() volatile
    {
        return PLM_CTRL_SET & (1u << 3u);
    }

    /**
     * Set PLM_CTRL_SET's VALID_OVERRIDE bit.
     *
     * Valid override
     */
    inline void set_PLM_CTRL_SET_VALID_OVERRIDE() volatile
    {
        PLM_CTRL_SET |= 1u << 3u;
    }

    /**
     * Clear PLM_CTRL_SET's VALID_OVERRIDE bit.
     *
     * Valid override
     */
    inline void clear_PLM_CTRL_SET_VALID_OVERRIDE() volatile
    {
        PLM_CTRL_SET &= ~(1u << 3u);
    }

    /**
     * Toggle PLM_CTRL_SET's VALID_OVERRIDE bit.
     *
     * Valid override
     */
    inline void toggle_PLM_CTRL_SET_VALID_OVERRIDE() volatile
    {
        PLM_CTRL_SET ^= 1u << 3u;
    }

    /**
     * Get PLM_CTRL_SET's HSYNC_OVERRIDE bit.
     *
     * HSYNC override
     */
    inline bool get_PLM_CTRL_SET_HSYNC_OVERRIDE() volatile
    {
        return PLM_CTRL_SET & (1u << 2u);
    }

    /**
     * Set PLM_CTRL_SET's HSYNC_OVERRIDE bit.
     *
     * HSYNC override
     */
    inline void set_PLM_CTRL_SET_HSYNC_OVERRIDE() volatile
    {
        PLM_CTRL_SET |= 1u << 2u;
    }

    /**
     * Clear PLM_CTRL_SET's HSYNC_OVERRIDE bit.
     *
     * HSYNC override
     */
    inline void clear_PLM_CTRL_SET_HSYNC_OVERRIDE() volatile
    {
        PLM_CTRL_SET &= ~(1u << 2u);
    }

    /**
     * Toggle PLM_CTRL_SET's HSYNC_OVERRIDE bit.
     *
     * HSYNC override
     */
    inline void toggle_PLM_CTRL_SET_HSYNC_OVERRIDE() volatile
    {
        PLM_CTRL_SET ^= 1u << 2u;
    }

    /**
     * Get PLM_CTRL_SET's VSYNC_OVERRIDE bit.
     *
     * VSYNC override
     */
    inline bool get_PLM_CTRL_SET_VSYNC_OVERRIDE() volatile
    {
        return PLM_CTRL_SET & (1u << 1u);
    }

    /**
     * Set PLM_CTRL_SET's VSYNC_OVERRIDE bit.
     *
     * VSYNC override
     */
    inline void set_PLM_CTRL_SET_VSYNC_OVERRIDE() volatile
    {
        PLM_CTRL_SET |= 1u << 1u;
    }

    /**
     * Clear PLM_CTRL_SET's VSYNC_OVERRIDE bit.
     *
     * VSYNC override
     */
    inline void clear_PLM_CTRL_SET_VSYNC_OVERRIDE() volatile
    {
        PLM_CTRL_SET &= ~(1u << 1u);
    }

    /**
     * Toggle PLM_CTRL_SET's VSYNC_OVERRIDE bit.
     *
     * VSYNC override
     */
    inline void toggle_PLM_CTRL_SET_VSYNC_OVERRIDE() volatile
    {
        PLM_CTRL_SET ^= 1u << 1u;
    }

    /**
     * Get PLM_CTRL_SET's ENABLE bit.
     *
     * Enable the output of HYSNC and VSYNC
     */
    inline bool get_PLM_CTRL_SET_ENABLE() volatile
    {
        return PLM_CTRL_SET & (1u << 0u);
    }

    /**
     * Set PLM_CTRL_SET's ENABLE bit.
     *
     * Enable the output of HYSNC and VSYNC
     */
    inline void set_PLM_CTRL_SET_ENABLE() volatile
    {
        PLM_CTRL_SET |= 1u << 0u;
    }

    /**
     * Clear PLM_CTRL_SET's ENABLE bit.
     *
     * Enable the output of HYSNC and VSYNC
     */
    inline void clear_PLM_CTRL_SET_ENABLE() volatile
    {
        PLM_CTRL_SET &= ~(1u << 0u);
    }

    /**
     * Toggle PLM_CTRL_SET's ENABLE bit.
     *
     * Enable the output of HYSNC and VSYNC
     */
    inline void toggle_PLM_CTRL_SET_ENABLE() volatile
    {
        PLM_CTRL_SET ^= 1u << 0u;
    }

    /**
     * Get all of PLM_CTRL_SET's bit fields.
     *
     * (read-write) Pixel Link Master(PLM) Control Register
     */
    inline void get_PLM_CTRL_SET(bool &POLARITY, bool &VALID_OVERRIDE,
                                 bool &HSYNC_OVERRIDE, bool &VSYNC_OVERRIDE,
                                 bool &ENABLE) volatile
    {
        uint32_t curr = PLM_CTRL_SET;

        POLARITY = curr & (1u << 4u);
        VALID_OVERRIDE = curr & (1u << 3u);
        HSYNC_OVERRIDE = curr & (1u << 2u);
        VSYNC_OVERRIDE = curr & (1u << 1u);
        ENABLE = curr & (1u << 0u);
    }

    /**
     * Set all of PLM_CTRL_SET's bit fields.
     *
     * (read-write) Pixel Link Master(PLM) Control Register
     */
    inline void set_PLM_CTRL_SET(bool POLARITY, bool VALID_OVERRIDE,
                                 bool HSYNC_OVERRIDE, bool VSYNC_OVERRIDE,
                                 bool ENABLE) volatile
    {
        uint32_t curr = PLM_CTRL_SET;

        curr &= ~(0b1u << 4u);
        curr |= (POLARITY & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (VALID_OVERRIDE & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (HSYNC_OVERRIDE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (VSYNC_OVERRIDE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ENABLE & 0b1u) << 0u;

        PLM_CTRL_SET = curr;
    }

    /**
     * Get PLM_CTRL_CLR's POLARITY bit.
     *
     * Polarity of HYSNC/VSYNC
     */
    inline bool get_PLM_CTRL_CLR_POLARITY() volatile
    {
        return PLM_CTRL_CLR & (1u << 4u);
    }

    /**
     * Set PLM_CTRL_CLR's POLARITY bit.
     *
     * Polarity of HYSNC/VSYNC
     */
    inline void set_PLM_CTRL_CLR_POLARITY() volatile
    {
        PLM_CTRL_CLR |= 1u << 4u;
    }

    /**
     * Clear PLM_CTRL_CLR's POLARITY bit.
     *
     * Polarity of HYSNC/VSYNC
     */
    inline void clear_PLM_CTRL_CLR_POLARITY() volatile
    {
        PLM_CTRL_CLR &= ~(1u << 4u);
    }

    /**
     * Toggle PLM_CTRL_CLR's POLARITY bit.
     *
     * Polarity of HYSNC/VSYNC
     */
    inline void toggle_PLM_CTRL_CLR_POLARITY() volatile
    {
        PLM_CTRL_CLR ^= 1u << 4u;
    }

    /**
     * Get PLM_CTRL_CLR's VALID_OVERRIDE bit.
     *
     * Valid override
     */
    inline bool get_PLM_CTRL_CLR_VALID_OVERRIDE() volatile
    {
        return PLM_CTRL_CLR & (1u << 3u);
    }

    /**
     * Set PLM_CTRL_CLR's VALID_OVERRIDE bit.
     *
     * Valid override
     */
    inline void set_PLM_CTRL_CLR_VALID_OVERRIDE() volatile
    {
        PLM_CTRL_CLR |= 1u << 3u;
    }

    /**
     * Clear PLM_CTRL_CLR's VALID_OVERRIDE bit.
     *
     * Valid override
     */
    inline void clear_PLM_CTRL_CLR_VALID_OVERRIDE() volatile
    {
        PLM_CTRL_CLR &= ~(1u << 3u);
    }

    /**
     * Toggle PLM_CTRL_CLR's VALID_OVERRIDE bit.
     *
     * Valid override
     */
    inline void toggle_PLM_CTRL_CLR_VALID_OVERRIDE() volatile
    {
        PLM_CTRL_CLR ^= 1u << 3u;
    }

    /**
     * Get PLM_CTRL_CLR's HSYNC_OVERRIDE bit.
     *
     * HSYNC override
     */
    inline bool get_PLM_CTRL_CLR_HSYNC_OVERRIDE() volatile
    {
        return PLM_CTRL_CLR & (1u << 2u);
    }

    /**
     * Set PLM_CTRL_CLR's HSYNC_OVERRIDE bit.
     *
     * HSYNC override
     */
    inline void set_PLM_CTRL_CLR_HSYNC_OVERRIDE() volatile
    {
        PLM_CTRL_CLR |= 1u << 2u;
    }

    /**
     * Clear PLM_CTRL_CLR's HSYNC_OVERRIDE bit.
     *
     * HSYNC override
     */
    inline void clear_PLM_CTRL_CLR_HSYNC_OVERRIDE() volatile
    {
        PLM_CTRL_CLR &= ~(1u << 2u);
    }

    /**
     * Toggle PLM_CTRL_CLR's HSYNC_OVERRIDE bit.
     *
     * HSYNC override
     */
    inline void toggle_PLM_CTRL_CLR_HSYNC_OVERRIDE() volatile
    {
        PLM_CTRL_CLR ^= 1u << 2u;
    }

    /**
     * Get PLM_CTRL_CLR's VSYNC_OVERRIDE bit.
     *
     * VSYNC override
     */
    inline bool get_PLM_CTRL_CLR_VSYNC_OVERRIDE() volatile
    {
        return PLM_CTRL_CLR & (1u << 1u);
    }

    /**
     * Set PLM_CTRL_CLR's VSYNC_OVERRIDE bit.
     *
     * VSYNC override
     */
    inline void set_PLM_CTRL_CLR_VSYNC_OVERRIDE() volatile
    {
        PLM_CTRL_CLR |= 1u << 1u;
    }

    /**
     * Clear PLM_CTRL_CLR's VSYNC_OVERRIDE bit.
     *
     * VSYNC override
     */
    inline void clear_PLM_CTRL_CLR_VSYNC_OVERRIDE() volatile
    {
        PLM_CTRL_CLR &= ~(1u << 1u);
    }

    /**
     * Toggle PLM_CTRL_CLR's VSYNC_OVERRIDE bit.
     *
     * VSYNC override
     */
    inline void toggle_PLM_CTRL_CLR_VSYNC_OVERRIDE() volatile
    {
        PLM_CTRL_CLR ^= 1u << 1u;
    }

    /**
     * Get PLM_CTRL_CLR's ENABLE bit.
     *
     * Enable the output of HYSNC and VSYNC
     */
    inline bool get_PLM_CTRL_CLR_ENABLE() volatile
    {
        return PLM_CTRL_CLR & (1u << 0u);
    }

    /**
     * Set PLM_CTRL_CLR's ENABLE bit.
     *
     * Enable the output of HYSNC and VSYNC
     */
    inline void set_PLM_CTRL_CLR_ENABLE() volatile
    {
        PLM_CTRL_CLR |= 1u << 0u;
    }

    /**
     * Clear PLM_CTRL_CLR's ENABLE bit.
     *
     * Enable the output of HYSNC and VSYNC
     */
    inline void clear_PLM_CTRL_CLR_ENABLE() volatile
    {
        PLM_CTRL_CLR &= ~(1u << 0u);
    }

    /**
     * Toggle PLM_CTRL_CLR's ENABLE bit.
     *
     * Enable the output of HYSNC and VSYNC
     */
    inline void toggle_PLM_CTRL_CLR_ENABLE() volatile
    {
        PLM_CTRL_CLR ^= 1u << 0u;
    }

    /**
     * Get all of PLM_CTRL_CLR's bit fields.
     *
     * (read-write) Pixel Link Master(PLM) Control Register
     */
    inline void get_PLM_CTRL_CLR(bool &POLARITY, bool &VALID_OVERRIDE,
                                 bool &HSYNC_OVERRIDE, bool &VSYNC_OVERRIDE,
                                 bool &ENABLE) volatile
    {
        uint32_t curr = PLM_CTRL_CLR;

        POLARITY = curr & (1u << 4u);
        VALID_OVERRIDE = curr & (1u << 3u);
        HSYNC_OVERRIDE = curr & (1u << 2u);
        VSYNC_OVERRIDE = curr & (1u << 1u);
        ENABLE = curr & (1u << 0u);
    }

    /**
     * Set all of PLM_CTRL_CLR's bit fields.
     *
     * (read-write) Pixel Link Master(PLM) Control Register
     */
    inline void set_PLM_CTRL_CLR(bool POLARITY, bool VALID_OVERRIDE,
                                 bool HSYNC_OVERRIDE, bool VSYNC_OVERRIDE,
                                 bool ENABLE) volatile
    {
        uint32_t curr = PLM_CTRL_CLR;

        curr &= ~(0b1u << 4u);
        curr |= (POLARITY & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (VALID_OVERRIDE & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (HSYNC_OVERRIDE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (VSYNC_OVERRIDE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ENABLE & 0b1u) << 0u;

        PLM_CTRL_CLR = curr;
    }

    /**
     * Get PLM_CTRL_TOG's POLARITY bit.
     *
     * Polarity of HYSNC/VSYNC
     */
    inline bool get_PLM_CTRL_TOG_POLARITY() volatile
    {
        return PLM_CTRL_TOG & (1u << 4u);
    }

    /**
     * Set PLM_CTRL_TOG's POLARITY bit.
     *
     * Polarity of HYSNC/VSYNC
     */
    inline void set_PLM_CTRL_TOG_POLARITY() volatile
    {
        PLM_CTRL_TOG |= 1u << 4u;
    }

    /**
     * Clear PLM_CTRL_TOG's POLARITY bit.
     *
     * Polarity of HYSNC/VSYNC
     */
    inline void clear_PLM_CTRL_TOG_POLARITY() volatile
    {
        PLM_CTRL_TOG &= ~(1u << 4u);
    }

    /**
     * Toggle PLM_CTRL_TOG's POLARITY bit.
     *
     * Polarity of HYSNC/VSYNC
     */
    inline void toggle_PLM_CTRL_TOG_POLARITY() volatile
    {
        PLM_CTRL_TOG ^= 1u << 4u;
    }

    /**
     * Get PLM_CTRL_TOG's VALID_OVERRIDE bit.
     *
     * Valid override
     */
    inline bool get_PLM_CTRL_TOG_VALID_OVERRIDE() volatile
    {
        return PLM_CTRL_TOG & (1u << 3u);
    }

    /**
     * Set PLM_CTRL_TOG's VALID_OVERRIDE bit.
     *
     * Valid override
     */
    inline void set_PLM_CTRL_TOG_VALID_OVERRIDE() volatile
    {
        PLM_CTRL_TOG |= 1u << 3u;
    }

    /**
     * Clear PLM_CTRL_TOG's VALID_OVERRIDE bit.
     *
     * Valid override
     */
    inline void clear_PLM_CTRL_TOG_VALID_OVERRIDE() volatile
    {
        PLM_CTRL_TOG &= ~(1u << 3u);
    }

    /**
     * Toggle PLM_CTRL_TOG's VALID_OVERRIDE bit.
     *
     * Valid override
     */
    inline void toggle_PLM_CTRL_TOG_VALID_OVERRIDE() volatile
    {
        PLM_CTRL_TOG ^= 1u << 3u;
    }

    /**
     * Get PLM_CTRL_TOG's HSYNC_OVERRIDE bit.
     *
     * HSYNC override
     */
    inline bool get_PLM_CTRL_TOG_HSYNC_OVERRIDE() volatile
    {
        return PLM_CTRL_TOG & (1u << 2u);
    }

    /**
     * Set PLM_CTRL_TOG's HSYNC_OVERRIDE bit.
     *
     * HSYNC override
     */
    inline void set_PLM_CTRL_TOG_HSYNC_OVERRIDE() volatile
    {
        PLM_CTRL_TOG |= 1u << 2u;
    }

    /**
     * Clear PLM_CTRL_TOG's HSYNC_OVERRIDE bit.
     *
     * HSYNC override
     */
    inline void clear_PLM_CTRL_TOG_HSYNC_OVERRIDE() volatile
    {
        PLM_CTRL_TOG &= ~(1u << 2u);
    }

    /**
     * Toggle PLM_CTRL_TOG's HSYNC_OVERRIDE bit.
     *
     * HSYNC override
     */
    inline void toggle_PLM_CTRL_TOG_HSYNC_OVERRIDE() volatile
    {
        PLM_CTRL_TOG ^= 1u << 2u;
    }

    /**
     * Get PLM_CTRL_TOG's VSYNC_OVERRIDE bit.
     *
     * VSYNC override
     */
    inline bool get_PLM_CTRL_TOG_VSYNC_OVERRIDE() volatile
    {
        return PLM_CTRL_TOG & (1u << 1u);
    }

    /**
     * Set PLM_CTRL_TOG's VSYNC_OVERRIDE bit.
     *
     * VSYNC override
     */
    inline void set_PLM_CTRL_TOG_VSYNC_OVERRIDE() volatile
    {
        PLM_CTRL_TOG |= 1u << 1u;
    }

    /**
     * Clear PLM_CTRL_TOG's VSYNC_OVERRIDE bit.
     *
     * VSYNC override
     */
    inline void clear_PLM_CTRL_TOG_VSYNC_OVERRIDE() volatile
    {
        PLM_CTRL_TOG &= ~(1u << 1u);
    }

    /**
     * Toggle PLM_CTRL_TOG's VSYNC_OVERRIDE bit.
     *
     * VSYNC override
     */
    inline void toggle_PLM_CTRL_TOG_VSYNC_OVERRIDE() volatile
    {
        PLM_CTRL_TOG ^= 1u << 1u;
    }

    /**
     * Get PLM_CTRL_TOG's ENABLE bit.
     *
     * Enable the output of HYSNC and VSYNC
     */
    inline bool get_PLM_CTRL_TOG_ENABLE() volatile
    {
        return PLM_CTRL_TOG & (1u << 0u);
    }

    /**
     * Set PLM_CTRL_TOG's ENABLE bit.
     *
     * Enable the output of HYSNC and VSYNC
     */
    inline void set_PLM_CTRL_TOG_ENABLE() volatile
    {
        PLM_CTRL_TOG |= 1u << 0u;
    }

    /**
     * Clear PLM_CTRL_TOG's ENABLE bit.
     *
     * Enable the output of HYSNC and VSYNC
     */
    inline void clear_PLM_CTRL_TOG_ENABLE() volatile
    {
        PLM_CTRL_TOG &= ~(1u << 0u);
    }

    /**
     * Toggle PLM_CTRL_TOG's ENABLE bit.
     *
     * Enable the output of HYSNC and VSYNC
     */
    inline void toggle_PLM_CTRL_TOG_ENABLE() volatile
    {
        PLM_CTRL_TOG ^= 1u << 0u;
    }

    /**
     * Get all of PLM_CTRL_TOG's bit fields.
     *
     * (read-write) Pixel Link Master(PLM) Control Register
     */
    inline void get_PLM_CTRL_TOG(bool &POLARITY, bool &VALID_OVERRIDE,
                                 bool &HSYNC_OVERRIDE, bool &VSYNC_OVERRIDE,
                                 bool &ENABLE) volatile
    {
        uint32_t curr = PLM_CTRL_TOG;

        POLARITY = curr & (1u << 4u);
        VALID_OVERRIDE = curr & (1u << 3u);
        HSYNC_OVERRIDE = curr & (1u << 2u);
        VSYNC_OVERRIDE = curr & (1u << 1u);
        ENABLE = curr & (1u << 0u);
    }

    /**
     * Set all of PLM_CTRL_TOG's bit fields.
     *
     * (read-write) Pixel Link Master(PLM) Control Register
     */
    inline void set_PLM_CTRL_TOG(bool POLARITY, bool VALID_OVERRIDE,
                                 bool HSYNC_OVERRIDE, bool VSYNC_OVERRIDE,
                                 bool ENABLE) volatile
    {
        uint32_t curr = PLM_CTRL_TOG;

        curr &= ~(0b1u << 4u);
        curr |= (POLARITY & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (VALID_OVERRIDE & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (HSYNC_OVERRIDE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (VSYNC_OVERRIDE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ENABLE & 0b1u) << 0u;

        PLM_CTRL_TOG = curr;
    }

    /**
     * Get YUV420_CTRL's FST_LN_DATA_TYPE bit.
     *
     * Data type of First Line
     */
    inline bool get_YUV420_CTRL_FST_LN_DATA_TYPE() volatile
    {
        return YUV420_CTRL & (1u << 0u);
    }

    /**
     * Set YUV420_CTRL's FST_LN_DATA_TYPE bit.
     *
     * Data type of First Line
     */
    inline void set_YUV420_CTRL_FST_LN_DATA_TYPE() volatile
    {
        YUV420_CTRL |= 1u << 0u;
    }

    /**
     * Clear YUV420_CTRL's FST_LN_DATA_TYPE bit.
     *
     * Data type of First Line
     */
    inline void clear_YUV420_CTRL_FST_LN_DATA_TYPE() volatile
    {
        YUV420_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle YUV420_CTRL's FST_LN_DATA_TYPE bit.
     *
     * Data type of First Line
     */
    inline void toggle_YUV420_CTRL_FST_LN_DATA_TYPE() volatile
    {
        YUV420_CTRL ^= 1u << 0u;
    }

    /**
     * Get YUV420_CTRL_SET's FST_LN_DATA_TYPE bit.
     *
     * Data type of First Line
     */
    inline bool get_YUV420_CTRL_SET_FST_LN_DATA_TYPE() volatile
    {
        return YUV420_CTRL_SET & (1u << 0u);
    }

    /**
     * Set YUV420_CTRL_SET's FST_LN_DATA_TYPE bit.
     *
     * Data type of First Line
     */
    inline void set_YUV420_CTRL_SET_FST_LN_DATA_TYPE() volatile
    {
        YUV420_CTRL_SET |= 1u << 0u;
    }

    /**
     * Clear YUV420_CTRL_SET's FST_LN_DATA_TYPE bit.
     *
     * Data type of First Line
     */
    inline void clear_YUV420_CTRL_SET_FST_LN_DATA_TYPE() volatile
    {
        YUV420_CTRL_SET &= ~(1u << 0u);
    }

    /**
     * Toggle YUV420_CTRL_SET's FST_LN_DATA_TYPE bit.
     *
     * Data type of First Line
     */
    inline void toggle_YUV420_CTRL_SET_FST_LN_DATA_TYPE() volatile
    {
        YUV420_CTRL_SET ^= 1u << 0u;
    }

    /**
     * Get YUV420_CTRL_CLR's FST_LN_DATA_TYPE bit.
     *
     * Data type of First Line
     */
    inline bool get_YUV420_CTRL_CLR_FST_LN_DATA_TYPE() volatile
    {
        return YUV420_CTRL_CLR & (1u << 0u);
    }

    /**
     * Set YUV420_CTRL_CLR's FST_LN_DATA_TYPE bit.
     *
     * Data type of First Line
     */
    inline void set_YUV420_CTRL_CLR_FST_LN_DATA_TYPE() volatile
    {
        YUV420_CTRL_CLR |= 1u << 0u;
    }

    /**
     * Clear YUV420_CTRL_CLR's FST_LN_DATA_TYPE bit.
     *
     * Data type of First Line
     */
    inline void clear_YUV420_CTRL_CLR_FST_LN_DATA_TYPE() volatile
    {
        YUV420_CTRL_CLR &= ~(1u << 0u);
    }

    /**
     * Toggle YUV420_CTRL_CLR's FST_LN_DATA_TYPE bit.
     *
     * Data type of First Line
     */
    inline void toggle_YUV420_CTRL_CLR_FST_LN_DATA_TYPE() volatile
    {
        YUV420_CTRL_CLR ^= 1u << 0u;
    }

    /**
     * Get YUV420_CTRL_TOG's FST_LN_DATA_TYPE bit.
     *
     * Data type of First Line
     */
    inline bool get_YUV420_CTRL_TOG_FST_LN_DATA_TYPE() volatile
    {
        return YUV420_CTRL_TOG & (1u << 0u);
    }

    /**
     * Set YUV420_CTRL_TOG's FST_LN_DATA_TYPE bit.
     *
     * Data type of First Line
     */
    inline void set_YUV420_CTRL_TOG_FST_LN_DATA_TYPE() volatile
    {
        YUV420_CTRL_TOG |= 1u << 0u;
    }

    /**
     * Clear YUV420_CTRL_TOG's FST_LN_DATA_TYPE bit.
     *
     * Data type of First Line
     */
    inline void clear_YUV420_CTRL_TOG_FST_LN_DATA_TYPE() volatile
    {
        YUV420_CTRL_TOG &= ~(1u << 0u);
    }

    /**
     * Toggle YUV420_CTRL_TOG's FST_LN_DATA_TYPE bit.
     *
     * Data type of First Line
     */
    inline void toggle_YUV420_CTRL_TOG_FST_LN_DATA_TYPE() volatile
    {
        YUV420_CTRL_TOG ^= 1u << 0u;
    }

    /**
     * Get CFG_DT_DISABLE's CFG_DT_DISABLE field.
     *
     * Data Type Disable
     */
    inline uint32_t get_CFG_DT_DISABLE_CFG_DT_DISABLE() volatile
    {
        return (CFG_DT_DISABLE >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Set CFG_DT_DISABLE's CFG_DT_DISABLE field.
     *
     * Data Type Disable
     */
    inline void set_CFG_DT_DISABLE_CFG_DT_DISABLE(uint32_t value) volatile
    {
        uint32_t curr = CFG_DT_DISABLE;

        curr &= ~(0b111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111u) << 0u;

        CFG_DT_DISABLE = curr;
    }

    /**
     * Get CFG_DT_DISABLE_SET's CFG_DT_DISABLE field.
     *
     * Data Type Disable
     */
    inline uint32_t get_CFG_DT_DISABLE_SET_CFG_DT_DISABLE() volatile
    {
        return (CFG_DT_DISABLE_SET >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Set CFG_DT_DISABLE_SET's CFG_DT_DISABLE field.
     *
     * Data Type Disable
     */
    inline void set_CFG_DT_DISABLE_SET_CFG_DT_DISABLE(uint32_t value) volatile
    {
        uint32_t curr = CFG_DT_DISABLE_SET;

        curr &= ~(0b111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111u) << 0u;

        CFG_DT_DISABLE_SET = curr;
    }

    /**
     * Get CFG_DT_DISABLE_CLR's CFG_DT_DISABLE field.
     *
     * Data Type Disable
     */
    inline uint32_t get_CFG_DT_DISABLE_CLR_CFG_DT_DISABLE() volatile
    {
        return (CFG_DT_DISABLE_CLR >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Set CFG_DT_DISABLE_CLR's CFG_DT_DISABLE field.
     *
     * Data Type Disable
     */
    inline void set_CFG_DT_DISABLE_CLR_CFG_DT_DISABLE(uint32_t value) volatile
    {
        uint32_t curr = CFG_DT_DISABLE_CLR;

        curr &= ~(0b111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111u) << 0u;

        CFG_DT_DISABLE_CLR = curr;
    }

    /**
     * Get CFG_DT_DISABLE_TOG's CFG_DT_DISABLE field.
     *
     * Data Type Disable
     */
    inline uint32_t get_CFG_DT_DISABLE_TOG_CFG_DT_DISABLE() volatile
    {
        return (CFG_DT_DISABLE_TOG >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Set CFG_DT_DISABLE_TOG's CFG_DT_DISABLE field.
     *
     * Data Type Disable
     */
    inline void set_CFG_DT_DISABLE_TOG_CFG_DT_DISABLE(uint32_t value) volatile
    {
        uint32_t curr = CFG_DT_DISABLE_TOG;

        curr &= ~(0b111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111u) << 0u;

        CFG_DT_DISABLE_TOG = curr;
    }

    /**
     * Get MIPI_DSI_CTRL's DPI_CM bit.
     *
     * Color Mode control
     */
    inline bool get_MIPI_DSI_CTRL_DPI_CM() volatile
    {
        return MIPI_DSI_CTRL & (1u << 1u);
    }

    /**
     * Set MIPI_DSI_CTRL's DPI_CM bit.
     *
     * Color Mode control
     */
    inline void set_MIPI_DSI_CTRL_DPI_CM() volatile
    {
        MIPI_DSI_CTRL |= 1u << 1u;
    }

    /**
     * Clear MIPI_DSI_CTRL's DPI_CM bit.
     *
     * Color Mode control
     */
    inline void clear_MIPI_DSI_CTRL_DPI_CM() volatile
    {
        MIPI_DSI_CTRL &= ~(1u << 1u);
    }

    /**
     * Toggle MIPI_DSI_CTRL's DPI_CM bit.
     *
     * Color Mode control
     */
    inline void toggle_MIPI_DSI_CTRL_DPI_CM() volatile
    {
        MIPI_DSI_CTRL ^= 1u << 1u;
    }

    /**
     * Get MIPI_DSI_CTRL's DPI_SD bit.
     *
     * Shut Down - Control to shutdown display (type 4 only)
     */
    inline bool get_MIPI_DSI_CTRL_DPI_SD() volatile
    {
        return MIPI_DSI_CTRL & (1u << 0u);
    }

    /**
     * Set MIPI_DSI_CTRL's DPI_SD bit.
     *
     * Shut Down - Control to shutdown display (type 4 only)
     */
    inline void set_MIPI_DSI_CTRL_DPI_SD() volatile
    {
        MIPI_DSI_CTRL |= 1u << 0u;
    }

    /**
     * Clear MIPI_DSI_CTRL's DPI_SD bit.
     *
     * Shut Down - Control to shutdown display (type 4 only)
     */
    inline void clear_MIPI_DSI_CTRL_DPI_SD() volatile
    {
        MIPI_DSI_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle MIPI_DSI_CTRL's DPI_SD bit.
     *
     * Shut Down - Control to shutdown display (type 4 only)
     */
    inline void toggle_MIPI_DSI_CTRL_DPI_SD() volatile
    {
        MIPI_DSI_CTRL ^= 1u << 0u;
    }

    /**
     * Get all of MIPI_DSI_CTRL's bit fields.
     *
     * (read-write) MIPI DSI Control Register
     */
    inline void get_MIPI_DSI_CTRL(bool &DPI_CM, bool &DPI_SD) volatile
    {
        uint32_t curr = MIPI_DSI_CTRL;

        DPI_CM = curr & (1u << 1u);
        DPI_SD = curr & (1u << 0u);
    }

    /**
     * Set all of MIPI_DSI_CTRL's bit fields.
     *
     * (read-write) MIPI DSI Control Register
     */
    inline void set_MIPI_DSI_CTRL(bool DPI_CM, bool DPI_SD) volatile
    {
        uint32_t curr = MIPI_DSI_CTRL;

        curr &= ~(0b1u << 1u);
        curr |= (DPI_CM & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (DPI_SD & 0b1u) << 0u;

        MIPI_DSI_CTRL = curr;
    }

    /**
     * Get MIPI_DSI_CTRL_SET's DPI_CM bit.
     *
     * Color Mode control
     */
    inline bool get_MIPI_DSI_CTRL_SET_DPI_CM() volatile
    {
        return MIPI_DSI_CTRL_SET & (1u << 1u);
    }

    /**
     * Set MIPI_DSI_CTRL_SET's DPI_CM bit.
     *
     * Color Mode control
     */
    inline void set_MIPI_DSI_CTRL_SET_DPI_CM() volatile
    {
        MIPI_DSI_CTRL_SET |= 1u << 1u;
    }

    /**
     * Clear MIPI_DSI_CTRL_SET's DPI_CM bit.
     *
     * Color Mode control
     */
    inline void clear_MIPI_DSI_CTRL_SET_DPI_CM() volatile
    {
        MIPI_DSI_CTRL_SET &= ~(1u << 1u);
    }

    /**
     * Toggle MIPI_DSI_CTRL_SET's DPI_CM bit.
     *
     * Color Mode control
     */
    inline void toggle_MIPI_DSI_CTRL_SET_DPI_CM() volatile
    {
        MIPI_DSI_CTRL_SET ^= 1u << 1u;
    }

    /**
     * Get MIPI_DSI_CTRL_SET's DPI_SD bit.
     *
     * Shut Down - Control to shutdown display (type 4 only)
     */
    inline bool get_MIPI_DSI_CTRL_SET_DPI_SD() volatile
    {
        return MIPI_DSI_CTRL_SET & (1u << 0u);
    }

    /**
     * Set MIPI_DSI_CTRL_SET's DPI_SD bit.
     *
     * Shut Down - Control to shutdown display (type 4 only)
     */
    inline void set_MIPI_DSI_CTRL_SET_DPI_SD() volatile
    {
        MIPI_DSI_CTRL_SET |= 1u << 0u;
    }

    /**
     * Clear MIPI_DSI_CTRL_SET's DPI_SD bit.
     *
     * Shut Down - Control to shutdown display (type 4 only)
     */
    inline void clear_MIPI_DSI_CTRL_SET_DPI_SD() volatile
    {
        MIPI_DSI_CTRL_SET &= ~(1u << 0u);
    }

    /**
     * Toggle MIPI_DSI_CTRL_SET's DPI_SD bit.
     *
     * Shut Down - Control to shutdown display (type 4 only)
     */
    inline void toggle_MIPI_DSI_CTRL_SET_DPI_SD() volatile
    {
        MIPI_DSI_CTRL_SET ^= 1u << 0u;
    }

    /**
     * Get all of MIPI_DSI_CTRL_SET's bit fields.
     *
     * (read-write) MIPI DSI Control Register
     */
    inline void get_MIPI_DSI_CTRL_SET(bool &DPI_CM, bool &DPI_SD) volatile
    {
        uint32_t curr = MIPI_DSI_CTRL_SET;

        DPI_CM = curr & (1u << 1u);
        DPI_SD = curr & (1u << 0u);
    }

    /**
     * Set all of MIPI_DSI_CTRL_SET's bit fields.
     *
     * (read-write) MIPI DSI Control Register
     */
    inline void set_MIPI_DSI_CTRL_SET(bool DPI_CM, bool DPI_SD) volatile
    {
        uint32_t curr = MIPI_DSI_CTRL_SET;

        curr &= ~(0b1u << 1u);
        curr |= (DPI_CM & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (DPI_SD & 0b1u) << 0u;

        MIPI_DSI_CTRL_SET = curr;
    }

    /**
     * Get MIPI_DSI_CTRL_CLR's DPI_CM bit.
     *
     * Color Mode control
     */
    inline bool get_MIPI_DSI_CTRL_CLR_DPI_CM() volatile
    {
        return MIPI_DSI_CTRL_CLR & (1u << 1u);
    }

    /**
     * Set MIPI_DSI_CTRL_CLR's DPI_CM bit.
     *
     * Color Mode control
     */
    inline void set_MIPI_DSI_CTRL_CLR_DPI_CM() volatile
    {
        MIPI_DSI_CTRL_CLR |= 1u << 1u;
    }

    /**
     * Clear MIPI_DSI_CTRL_CLR's DPI_CM bit.
     *
     * Color Mode control
     */
    inline void clear_MIPI_DSI_CTRL_CLR_DPI_CM() volatile
    {
        MIPI_DSI_CTRL_CLR &= ~(1u << 1u);
    }

    /**
     * Toggle MIPI_DSI_CTRL_CLR's DPI_CM bit.
     *
     * Color Mode control
     */
    inline void toggle_MIPI_DSI_CTRL_CLR_DPI_CM() volatile
    {
        MIPI_DSI_CTRL_CLR ^= 1u << 1u;
    }

    /**
     * Get MIPI_DSI_CTRL_CLR's DPI_SD bit.
     *
     * Shut Down - Control to shutdown display (type 4 only)
     */
    inline bool get_MIPI_DSI_CTRL_CLR_DPI_SD() volatile
    {
        return MIPI_DSI_CTRL_CLR & (1u << 0u);
    }

    /**
     * Set MIPI_DSI_CTRL_CLR's DPI_SD bit.
     *
     * Shut Down - Control to shutdown display (type 4 only)
     */
    inline void set_MIPI_DSI_CTRL_CLR_DPI_SD() volatile
    {
        MIPI_DSI_CTRL_CLR |= 1u << 0u;
    }

    /**
     * Clear MIPI_DSI_CTRL_CLR's DPI_SD bit.
     *
     * Shut Down - Control to shutdown display (type 4 only)
     */
    inline void clear_MIPI_DSI_CTRL_CLR_DPI_SD() volatile
    {
        MIPI_DSI_CTRL_CLR &= ~(1u << 0u);
    }

    /**
     * Toggle MIPI_DSI_CTRL_CLR's DPI_SD bit.
     *
     * Shut Down - Control to shutdown display (type 4 only)
     */
    inline void toggle_MIPI_DSI_CTRL_CLR_DPI_SD() volatile
    {
        MIPI_DSI_CTRL_CLR ^= 1u << 0u;
    }

    /**
     * Get all of MIPI_DSI_CTRL_CLR's bit fields.
     *
     * (read-write) MIPI DSI Control Register
     */
    inline void get_MIPI_DSI_CTRL_CLR(bool &DPI_CM, bool &DPI_SD) volatile
    {
        uint32_t curr = MIPI_DSI_CTRL_CLR;

        DPI_CM = curr & (1u << 1u);
        DPI_SD = curr & (1u << 0u);
    }

    /**
     * Set all of MIPI_DSI_CTRL_CLR's bit fields.
     *
     * (read-write) MIPI DSI Control Register
     */
    inline void set_MIPI_DSI_CTRL_CLR(bool DPI_CM, bool DPI_SD) volatile
    {
        uint32_t curr = MIPI_DSI_CTRL_CLR;

        curr &= ~(0b1u << 1u);
        curr |= (DPI_CM & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (DPI_SD & 0b1u) << 0u;

        MIPI_DSI_CTRL_CLR = curr;
    }

    /**
     * Get MIPI_DSI_CTRL_TOG's DPI_CM bit.
     *
     * Color Mode control
     */
    inline bool get_MIPI_DSI_CTRL_TOG_DPI_CM() volatile
    {
        return MIPI_DSI_CTRL_TOG & (1u << 1u);
    }

    /**
     * Set MIPI_DSI_CTRL_TOG's DPI_CM bit.
     *
     * Color Mode control
     */
    inline void set_MIPI_DSI_CTRL_TOG_DPI_CM() volatile
    {
        MIPI_DSI_CTRL_TOG |= 1u << 1u;
    }

    /**
     * Clear MIPI_DSI_CTRL_TOG's DPI_CM bit.
     *
     * Color Mode control
     */
    inline void clear_MIPI_DSI_CTRL_TOG_DPI_CM() volatile
    {
        MIPI_DSI_CTRL_TOG &= ~(1u << 1u);
    }

    /**
     * Toggle MIPI_DSI_CTRL_TOG's DPI_CM bit.
     *
     * Color Mode control
     */
    inline void toggle_MIPI_DSI_CTRL_TOG_DPI_CM() volatile
    {
        MIPI_DSI_CTRL_TOG ^= 1u << 1u;
    }

    /**
     * Get MIPI_DSI_CTRL_TOG's DPI_SD bit.
     *
     * Shut Down - Control to shutdown display (type 4 only)
     */
    inline bool get_MIPI_DSI_CTRL_TOG_DPI_SD() volatile
    {
        return MIPI_DSI_CTRL_TOG & (1u << 0u);
    }

    /**
     * Set MIPI_DSI_CTRL_TOG's DPI_SD bit.
     *
     * Shut Down - Control to shutdown display (type 4 only)
     */
    inline void set_MIPI_DSI_CTRL_TOG_DPI_SD() volatile
    {
        MIPI_DSI_CTRL_TOG |= 1u << 0u;
    }

    /**
     * Clear MIPI_DSI_CTRL_TOG's DPI_SD bit.
     *
     * Shut Down - Control to shutdown display (type 4 only)
     */
    inline void clear_MIPI_DSI_CTRL_TOG_DPI_SD() volatile
    {
        MIPI_DSI_CTRL_TOG &= ~(1u << 0u);
    }

    /**
     * Toggle MIPI_DSI_CTRL_TOG's DPI_SD bit.
     *
     * Shut Down - Control to shutdown display (type 4 only)
     */
    inline void toggle_MIPI_DSI_CTRL_TOG_DPI_SD() volatile
    {
        MIPI_DSI_CTRL_TOG ^= 1u << 0u;
    }

    /**
     * Get all of MIPI_DSI_CTRL_TOG's bit fields.
     *
     * (read-write) MIPI DSI Control Register
     */
    inline void get_MIPI_DSI_CTRL_TOG(bool &DPI_CM, bool &DPI_SD) volatile
    {
        uint32_t curr = MIPI_DSI_CTRL_TOG;

        DPI_CM = curr & (1u << 1u);
        DPI_SD = curr & (1u << 0u);
    }

    /**
     * Set all of MIPI_DSI_CTRL_TOG's bit fields.
     *
     * (read-write) MIPI DSI Control Register
     */
    inline void set_MIPI_DSI_CTRL_TOG(bool DPI_CM, bool DPI_SD) volatile
    {
        uint32_t curr = MIPI_DSI_CTRL_TOG;

        curr &= ~(0b1u << 1u);
        curr |= (DPI_CM & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (DPI_SD & 0b1u) << 0u;

        MIPI_DSI_CTRL_TOG = curr;
    }
};

static_assert(sizeof(video_mux) == video_mux::size);

static volatile video_mux *const VIDEO_MUX =
    reinterpret_cast<video_mux *>(0x40818000);

}; // namespace MIMXRT1176::CM7
