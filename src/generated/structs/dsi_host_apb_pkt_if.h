/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * DSI HOST APB PKT Interface
 */
struct [[gnu::packed]] dsi_host_apb_pkt_if
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        48; /*!< dsi_host_apb_pkt_if's size in bytes. */

    /* Fields. */
    uint32_t TX_PAYLOAD;        /*!< (read-write) TX_PAYLOAD */
    uint32_t PKT_CONTROL;       /*!< (read-write) PKT_CONTROL */
    uint32_t SEND_PACKET;       /*!< (read-write) SEND_PACKET */
    uint32_t PKT_STATUS;        /*!< (read-write) PKT_STATUS */
    uint32_t PKT_FIFO_WR_LEVEL; /*!< (read-write) PKT_FIFO_WR_LEVEL */
    uint32_t PKT_FIFO_RD_LEVEL; /*!< (read-write) PKT_FIFO_RD_LEVEL */
    uint32_t PKT_RX_PAYLOAD;    /*!< (read-write) PKT_RX_PAYLOAD */
    uint32_t PKT_RX_PKT_HEADER; /*!< (read-write) PKT_RX_PKT_HEADER */
    uint32_t IRQ_STATUS;        /*!< (read-write) IRQ_STATUS */
    uint32_t IRQ_STATUS2;       /*!< (read-write) IRQ_STATUS2 */
    uint32_t IRQ_MASK;          /*!< (read-write) IRQ_MASK */
    uint32_t IRQ_MASK2;         /*!< (read-write) IRQ_MASK2 */

    /* Methods. */

    /**
     * Get TX_PAYLOAD's PAYLOAD field.
     *
     * Tx Payload data write register. Write to this register loads the payload
     * FIFO with 32 bit values.
     */
    inline uint32_t get_TX_PAYLOAD_PAYLOAD() volatile
    {
        return (TX_PAYLOAD >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TX_PAYLOAD's PAYLOAD field.
     *
     * Tx Payload data write register. Write to this register loads the payload
     * FIFO with 32 bit values.
     */
    inline void set_TX_PAYLOAD_PAYLOAD(uint32_t value) volatile
    {
        uint32_t curr = TX_PAYLOAD;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TX_PAYLOAD = curr;
    }

    /**
     * Get PKT_CONTROL's CTRL field.
     *
     * Tx packet control
     */
    inline uint32_t get_PKT_CONTROL_CTRL() volatile
    {
        return (PKT_CONTROL >> 0u) & 0b111111111111111111111111111u;
    }

    /**
     * Set PKT_CONTROL's CTRL field.
     *
     * Tx packet control
     */
    inline void set_PKT_CONTROL_CTRL(uint32_t value) volatile
    {
        uint32_t curr = PKT_CONTROL;

        curr &= ~(0b111111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111111u) << 0u;

        PKT_CONTROL = curr;
    }

    /**
     * Get SEND_PACKET's TX_SEND bit.
     *
     * Tx send packet, writing to this register causes the packet described in
     * dsi_host_pkt_control to be sent.
     */
    inline bool get_SEND_PACKET_TX_SEND() volatile
    {
        return SEND_PACKET & (1u << 0u);
    }

    /**
     * Set SEND_PACKET's TX_SEND bit.
     *
     * Tx send packet, writing to this register causes the packet described in
     * dsi_host_pkt_control to be sent.
     */
    inline void set_SEND_PACKET_TX_SEND() volatile
    {
        SEND_PACKET |= 1u << 0u;
    }

    /**
     * Clear SEND_PACKET's TX_SEND bit.
     *
     * Tx send packet, writing to this register causes the packet described in
     * dsi_host_pkt_control to be sent.
     */
    inline void clear_SEND_PACKET_TX_SEND() volatile
    {
        SEND_PACKET &= ~(1u << 0u);
    }

    /**
     * Toggle SEND_PACKET's TX_SEND bit.
     *
     * Tx send packet, writing to this register causes the packet described in
     * dsi_host_pkt_control to be sent.
     */
    inline void toggle_SEND_PACKET_TX_SEND() volatile
    {
        SEND_PACKET ^= 1u << 0u;
    }

    /**
     * Get PKT_STATUS's STATUS field.
     *
     * Status of APB to packet interface.
     */
    inline uint16_t get_PKT_STATUS_STATUS() volatile
    {
        return (PKT_STATUS >> 0u) & 0b111111111u;
    }

    /**
     * Get PKT_FIFO_WR_LEVEL's WR field.
     *
     * Write level of APB to pkt interface FIFO
     */
    inline uint16_t get_PKT_FIFO_WR_LEVEL_WR() volatile
    {
        return (PKT_FIFO_WR_LEVEL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get PKT_FIFO_RD_LEVEL's RD field.
     *
     * Read level of APB to pkt interface FIFO
     */
    inline uint16_t get_PKT_FIFO_RD_LEVEL_RD() volatile
    {
        return (PKT_FIFO_RD_LEVEL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get PKT_RX_PAYLOAD's PAYLOAD field.
     *
     * APB to pkt interface Rx payload read
     */
    inline uint32_t get_PKT_RX_PAYLOAD_PAYLOAD() volatile
    {
        return (PKT_RX_PAYLOAD >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get PKT_RX_PKT_HEADER's HEADER field.
     *
     * APB to pkt interface Rx packet header
     */
    inline uint32_t get_PKT_RX_PKT_HEADER_HEADER() volatile
    {
        return (PKT_RX_PKT_HEADER >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Get IRQ_STATUS's STATUS field.
     *
     * Status of APB to packet interface.
     */
    inline uint32_t get_IRQ_STATUS_STATUS() volatile
    {
        return (IRQ_STATUS >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get IRQ_STATUS2's STATUS2 field.
     *
     * Status of APB to packet interface part 2, read part 2 first then
     * dsi_host_irq_status. Reading dsi_host_irq_status will clear both status
     * and status2.
     */
    inline uint8_t get_IRQ_STATUS2_STATUS2() volatile
    {
        return (IRQ_STATUS2 >> 0u) & 0b111u;
    }

    /**
     * Get IRQ_MASK's MASK field.
     *
     * IRQ Mask
     */
    inline uint32_t get_IRQ_MASK_MASK() volatile
    {
        return (IRQ_MASK >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set IRQ_MASK's MASK field.
     *
     * IRQ Mask
     */
    inline void set_IRQ_MASK_MASK(uint32_t value) volatile
    {
        uint32_t curr = IRQ_MASK;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        IRQ_MASK = curr;
    }

    /**
     * Get IRQ_MASK2's MASK2 field.
     *
     * IRQ mask 2
     */
    inline uint8_t get_IRQ_MASK2_MASK2() volatile
    {
        return (IRQ_MASK2 >> 0u) & 0b111u;
    }

    /**
     * Set IRQ_MASK2's MASK2 field.
     *
     * IRQ mask 2
     */
    inline void set_IRQ_MASK2_MASK2(uint8_t value) volatile
    {
        uint32_t curr = IRQ_MASK2;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        IRQ_MASK2 = curr;
    }
};

static_assert(sizeof(dsi_host_apb_pkt_if) == dsi_host_apb_pkt_if::size);

static volatile dsi_host_apb_pkt_if *const DSI_HOST_APB_PKT_IF =
    reinterpret_cast<dsi_host_apb_pkt_if *>(0x4080C280);

}; // namespace MIMXRT1176::CM7
