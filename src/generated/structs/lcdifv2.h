/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/LCDIFV2_CTRLDESCL0_5_AB_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL0_5_BPP.h"
#include "../enums/LCDIFV2_CTRLDESCL0_5_PD_FACTOR_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL0_5_PD_GLOBAL_ALPHA_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL0_5_YUV_FORMAT.h"
#include "../enums/LCDIFV2_CTRLDESCL1_5_AB_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL1_5_BPP.h"
#include "../enums/LCDIFV2_CTRLDESCL1_5_PD_FACTOR_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL1_5_PD_GLOBAL_ALPHA_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL1_5_YUV_FORMAT.h"
#include "../enums/LCDIFV2_CTRLDESCL2_5_AB_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL2_5_BPP.h"
#include "../enums/LCDIFV2_CTRLDESCL2_5_PD_FACTOR_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL2_5_PD_GLOBAL_ALPHA_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL2_5_YUV_FORMAT.h"
#include "../enums/LCDIFV2_CTRLDESCL3_5_AB_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL3_5_BPP.h"
#include "../enums/LCDIFV2_CTRLDESCL3_5_PD_FACTOR_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL3_5_PD_GLOBAL_ALPHA_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL3_5_YUV_FORMAT.h"
#include "../enums/LCDIFV2_CTRLDESCL4_5_AB_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL4_5_BPP.h"
#include "../enums/LCDIFV2_CTRLDESCL4_5_PD_FACTOR_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL4_5_PD_GLOBAL_ALPHA_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL4_5_YUV_FORMAT.h"
#include "../enums/LCDIFV2_CTRLDESCL5_5_AB_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL5_5_BPP.h"
#include "../enums/LCDIFV2_CTRLDESCL5_5_PD_FACTOR_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL5_5_PD_GLOBAL_ALPHA_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL5_5_YUV_FORMAT.h"
#include "../enums/LCDIFV2_CTRLDESCL6_5_AB_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL6_5_BPP.h"
#include "../enums/LCDIFV2_CTRLDESCL6_5_PD_FACTOR_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL6_5_PD_GLOBAL_ALPHA_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL6_5_YUV_FORMAT.h"
#include "../enums/LCDIFV2_CTRLDESCL7_5_AB_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL7_5_BPP.h"
#include "../enums/LCDIFV2_CTRLDESCL7_5_PD_FACTOR_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL7_5_PD_GLOBAL_ALPHA_MODE.h"
#include "../enums/LCDIFV2_CTRLDESCL7_5_YUV_FORMAT.h"
#include "../enums/LCDIFV2_DISP_PARA_DISP_MODE.h"
#include "../enums/LCDIFV2_DISP_PARA_LINE_PATTERN.h"
#include "../enums/LCDIFV2_PDI_PARA_MODE.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * LCDIF_V2
 */
struct [[gnu::packed]] lcdifv2
{
    /* Constant attributes. */
    static constexpr std::size_t size = 1028; /*!< lcdifv2's size in bytes. */

    /* Fields. */
    uint32_t CTRL;      /*!< (read-write) LCDIFv2 display control Register */
    uint32_t CTRL_SET;  /*!< (read-write) LCDIFv2 display control Register */
    uint32_t CTRL_CLR;  /*!< (read-write) LCDIFv2 display control Register */
    uint32_t CTRL_TOG;  /*!< (read-write) LCDIFv2 display control Register */
    uint32_t DISP_PARA; /*!< (read-write) Display Parameter Register */
    uint32_t DISP_SIZE; /*!< (read-write) Display Size Register */
    uint32_t HSYN_PARA; /*!< (read-write) Horizontal Sync Parameter Register */
    uint32_t VSYN_PARA; /*!< (read-write) Vertical Sync Parameter Register */
    uint32_t INT_STATUS_D0; /*!< (read-write) Interrupt Status Register for
                               domain 0 */
    uint32_t INT_ENABLE_D0; /*!< (read-write) Interrupt Enable Register for
                               domain 0 */
    static constexpr std::size_t reserved_padding0_length = 2;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t INT_STATUS_D1; /*!< (read-write) Interrupt Status Register for
                               domain 1 */
    uint32_t INT_ENABLE_D1; /*!< (read-write) Interrupt Enable Register for
                               domain 1 */
    static constexpr std::size_t reserved_padding1_length = 2;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    uint32_t PDI_PARA; /*!< (read-write) Parallel Data Interface Parameter
                          Register */
    static constexpr std::size_t reserved_padding2_length = 111;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    uint32_t
        CTRLDESCL0_1; /*!< (read-write) Control Descriptor Layer 1 Register */
    uint32_t
        CTRLDESCL0_2; /*!< (read-write) Control Descriptor Layer 2 Register */
    uint32_t
        CTRLDESCL0_3; /*!< (read-write) Control Descriptor Layer 3 Register */
    uint32_t
        CTRLDESCL0_4; /*!< (read-write) Control Descriptor Layer 4 Register */
    uint32_t
        CTRLDESCL0_5; /*!< (read-write) Control Descriptor Layer 5 Register */
    uint32_t
        CTRLDESCL0_6; /*!< (read-write) Control Descriptor Layer 6 Register */
    uint32_t CSC0_COEF0; /*!< (read-write) Color Space Conversion Coefficient
                            Register 0 */
    uint32_t CSC0_COEF1; /*!< (read-write) Color Space Conversion Coefficient
                            Register 1 */
    uint32_t CSC0_COEF2; /*!< (read-write) Color Space Conversion Coefficient
                            Register 2 */
    static constexpr std::size_t reserved_padding3_length = 7;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    uint32_t
        CTRLDESCL1_1; /*!< (read-write) Control Descriptor Layer 1 Register */
    uint32_t
        CTRLDESCL1_2; /*!< (read-write) Control Descriptor Layer 2 Register */
    uint32_t
        CTRLDESCL1_3; /*!< (read-write) Control Descriptor Layer 3 Register */
    uint32_t
        CTRLDESCL1_4; /*!< (read-write) Control Descriptor Layer 4 Register */
    uint32_t
        CTRLDESCL1_5; /*!< (read-write) Control Descriptor Layer 5 Register */
    uint32_t
        CTRLDESCL1_6; /*!< (read-write) Control Descriptor Layer 6 Register */
    uint32_t CSC1_COEF0; /*!< (read-write) Color Space Conversion Coefficient
                            Register 0 */
    uint32_t CSC1_COEF1; /*!< (read-write) Color Space Conversion Coefficient
                            Register 1 */
    uint32_t CSC1_COEF2; /*!< (read-write) Color Space Conversion Coefficient
                            Register 2 */
    static constexpr std::size_t reserved_padding4_length = 7;
    const uint32_t reserved_padding4[reserved_padding4_length] = {};
    uint32_t
        CTRLDESCL2_1; /*!< (read-write) Control Descriptor Layer 1 Register */
    uint32_t
        CTRLDESCL2_2; /*!< (read-write) Control Descriptor Layer 2 Register */
    uint32_t
        CTRLDESCL2_3; /*!< (read-write) Control Descriptor Layer 3 Register */
    uint32_t
        CTRLDESCL2_4; /*!< (read-write) Control Descriptor Layer 4 Register */
    uint32_t
        CTRLDESCL2_5; /*!< (read-write) Control Descriptor Layer 5 Register */
    uint32_t
        CTRLDESCL2_6; /*!< (read-write) Control Descriptor Layer 6 Register */
    static constexpr std::size_t reserved_padding5_length = 10;
    const uint32_t reserved_padding5[reserved_padding5_length] = {};
    uint32_t
        CTRLDESCL3_1; /*!< (read-write) Control Descriptor Layer 1 Register */
    uint32_t
        CTRLDESCL3_2; /*!< (read-write) Control Descriptor Layer 2 Register */
    uint32_t
        CTRLDESCL3_3; /*!< (read-write) Control Descriptor Layer 3 Register */
    uint32_t
        CTRLDESCL3_4; /*!< (read-write) Control Descriptor Layer 4 Register */
    uint32_t
        CTRLDESCL3_5; /*!< (read-write) Control Descriptor Layer 5 Register */
    uint32_t
        CTRLDESCL3_6; /*!< (read-write) Control Descriptor Layer 6 Register */
    static constexpr std::size_t reserved_padding6_length = 10;
    const uint32_t reserved_padding6[reserved_padding6_length] = {};
    uint32_t
        CTRLDESCL4_1; /*!< (read-write) Control Descriptor Layer 1 Register */
    uint32_t
        CTRLDESCL4_2; /*!< (read-write) Control Descriptor Layer 2 Register */
    uint32_t
        CTRLDESCL4_3; /*!< (read-write) Control Descriptor Layer 3 Register */
    uint32_t
        CTRLDESCL4_4; /*!< (read-write) Control Descriptor Layer 4 Register */
    uint32_t
        CTRLDESCL4_5; /*!< (read-write) Control Descriptor Layer 5 Register */
    uint32_t
        CTRLDESCL4_6; /*!< (read-write) Control Descriptor Layer 6 Register */
    static constexpr std::size_t reserved_padding7_length = 10;
    const uint32_t reserved_padding7[reserved_padding7_length] = {};
    uint32_t
        CTRLDESCL5_1; /*!< (read-write) Control Descriptor Layer 1 Register */
    uint32_t
        CTRLDESCL5_2; /*!< (read-write) Control Descriptor Layer 2 Register */
    uint32_t
        CTRLDESCL5_3; /*!< (read-write) Control Descriptor Layer 3 Register */
    uint32_t
        CTRLDESCL5_4; /*!< (read-write) Control Descriptor Layer 4 Register */
    uint32_t
        CTRLDESCL5_5; /*!< (read-write) Control Descriptor Layer 5 Register */
    uint32_t
        CTRLDESCL5_6; /*!< (read-write) Control Descriptor Layer 6 Register */
    static constexpr std::size_t reserved_padding8_length = 10;
    const uint32_t reserved_padding8[reserved_padding8_length] = {};
    uint32_t
        CTRLDESCL6_1; /*!< (read-write) Control Descriptor Layer 1 Register */
    uint32_t
        CTRLDESCL6_2; /*!< (read-write) Control Descriptor Layer 2 Register */
    uint32_t
        CTRLDESCL6_3; /*!< (read-write) Control Descriptor Layer 3 Register */
    uint32_t
        CTRLDESCL6_4; /*!< (read-write) Control Descriptor Layer 4 Register */
    uint32_t
        CTRLDESCL6_5; /*!< (read-write) Control Descriptor Layer 5 Register */
    uint32_t
        CTRLDESCL6_6; /*!< (read-write) Control Descriptor Layer 6 Register */
    static constexpr std::size_t reserved_padding9_length = 10;
    const uint32_t reserved_padding9[reserved_padding9_length] = {};
    uint32_t
        CTRLDESCL7_1; /*!< (read-write) Control Descriptor Layer 1 Register */
    uint32_t
        CTRLDESCL7_2; /*!< (read-write) Control Descriptor Layer 2 Register */
    uint32_t
        CTRLDESCL7_3; /*!< (read-write) Control Descriptor Layer 3 Register */
    uint32_t
        CTRLDESCL7_4; /*!< (read-write) Control Descriptor Layer 4 Register */
    uint32_t
        CTRLDESCL7_5; /*!< (read-write) Control Descriptor Layer 5 Register */
    uint32_t
        CTRLDESCL7_6; /*!< (read-write) Control Descriptor Layer 6 Register */
    static constexpr std::size_t reserved_padding10_length = 10;
    const uint32_t reserved_padding10[reserved_padding10_length] = {};
    uint32_t CLUT_LOAD; /*!< (read-write) LCDIFv2 CLUT load Register */

    /* Methods. */

    /**
     * Get CTRL's SW_RESET bit.
     *
     * Software Reset
     */
    inline bool get_CTRL_SW_RESET() volatile
    {
        return CTRL & (1u << 31u);
    }

    /**
     * Set CTRL's SW_RESET bit.
     *
     * Software Reset
     */
    inline void set_CTRL_SW_RESET() volatile
    {
        CTRL |= 1u << 31u;
    }

    /**
     * Clear CTRL's SW_RESET bit.
     *
     * Software Reset
     */
    inline void clear_CTRL_SW_RESET() volatile
    {
        CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle CTRL's SW_RESET bit.
     *
     * Software Reset
     */
    inline void toggle_CTRL_SW_RESET() volatile
    {
        CTRL ^= 1u << 31u;
    }

    /**
     * Get CTRL's NEG bit.
     *
     * Indicates if value at the output (pixel data output) needs to be negated
     */
    inline bool get_CTRL_NEG() volatile
    {
        return CTRL & (1u << 4u);
    }

    /**
     * Set CTRL's NEG bit.
     *
     * Indicates if value at the output (pixel data output) needs to be negated
     */
    inline void set_CTRL_NEG() volatile
    {
        CTRL |= 1u << 4u;
    }

    /**
     * Clear CTRL's NEG bit.
     *
     * Indicates if value at the output (pixel data output) needs to be negated
     */
    inline void clear_CTRL_NEG() volatile
    {
        CTRL &= ~(1u << 4u);
    }

    /**
     * Toggle CTRL's NEG bit.
     *
     * Indicates if value at the output (pixel data output) needs to be negated
     */
    inline void toggle_CTRL_NEG() volatile
    {
        CTRL ^= 1u << 4u;
    }

    /**
     * Get CTRL's INV_PXCK bit.
     *
     * Polarity change of Pixel Clock
     */
    inline bool get_CTRL_INV_PXCK() volatile
    {
        return CTRL & (1u << 3u);
    }

    /**
     * Set CTRL's INV_PXCK bit.
     *
     * Polarity change of Pixel Clock
     */
    inline void set_CTRL_INV_PXCK() volatile
    {
        CTRL |= 1u << 3u;
    }

    /**
     * Clear CTRL's INV_PXCK bit.
     *
     * Polarity change of Pixel Clock
     */
    inline void clear_CTRL_INV_PXCK() volatile
    {
        CTRL &= ~(1u << 3u);
    }

    /**
     * Toggle CTRL's INV_PXCK bit.
     *
     * Polarity change of Pixel Clock
     */
    inline void toggle_CTRL_INV_PXCK() volatile
    {
        CTRL ^= 1u << 3u;
    }

    /**
     * Get CTRL's INV_DE bit.
     *
     * Invert Data Enable polarity
     */
    inline bool get_CTRL_INV_DE() volatile
    {
        return CTRL & (1u << 2u);
    }

    /**
     * Set CTRL's INV_DE bit.
     *
     * Invert Data Enable polarity
     */
    inline void set_CTRL_INV_DE() volatile
    {
        CTRL |= 1u << 2u;
    }

    /**
     * Clear CTRL's INV_DE bit.
     *
     * Invert Data Enable polarity
     */
    inline void clear_CTRL_INV_DE() volatile
    {
        CTRL &= ~(1u << 2u);
    }

    /**
     * Toggle CTRL's INV_DE bit.
     *
     * Invert Data Enable polarity
     */
    inline void toggle_CTRL_INV_DE() volatile
    {
        CTRL ^= 1u << 2u;
    }

    /**
     * Get CTRL's INV_VS bit.
     *
     * Invert Vertical synchronization signal
     */
    inline bool get_CTRL_INV_VS() volatile
    {
        return CTRL & (1u << 1u);
    }

    /**
     * Set CTRL's INV_VS bit.
     *
     * Invert Vertical synchronization signal
     */
    inline void set_CTRL_INV_VS() volatile
    {
        CTRL |= 1u << 1u;
    }

    /**
     * Clear CTRL's INV_VS bit.
     *
     * Invert Vertical synchronization signal
     */
    inline void clear_CTRL_INV_VS() volatile
    {
        CTRL &= ~(1u << 1u);
    }

    /**
     * Toggle CTRL's INV_VS bit.
     *
     * Invert Vertical synchronization signal
     */
    inline void toggle_CTRL_INV_VS() volatile
    {
        CTRL ^= 1u << 1u;
    }

    /**
     * Get CTRL's INV_HS bit.
     *
     * Invert Horizontal synchronization signal
     */
    inline bool get_CTRL_INV_HS() volatile
    {
        return CTRL & (1u << 0u);
    }

    /**
     * Set CTRL's INV_HS bit.
     *
     * Invert Horizontal synchronization signal
     */
    inline void set_CTRL_INV_HS() volatile
    {
        CTRL |= 1u << 0u;
    }

    /**
     * Clear CTRL's INV_HS bit.
     *
     * Invert Horizontal synchronization signal
     */
    inline void clear_CTRL_INV_HS() volatile
    {
        CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle CTRL's INV_HS bit.
     *
     * Invert Horizontal synchronization signal
     */
    inline void toggle_CTRL_INV_HS() volatile
    {
        CTRL ^= 1u << 0u;
    }

    /**
     * Get all of CTRL's bit fields.
     *
     * (read-write) LCDIFv2 display control Register
     */
    inline void get_CTRL(bool &SW_RESET, bool &NEG, bool &INV_PXCK,
                         bool &INV_DE, bool &INV_VS, bool &INV_HS) volatile
    {
        uint32_t curr = CTRL;

        SW_RESET = curr & (1u << 31u);
        NEG = curr & (1u << 4u);
        INV_PXCK = curr & (1u << 3u);
        INV_DE = curr & (1u << 2u);
        INV_VS = curr & (1u << 1u);
        INV_HS = curr & (1u << 0u);
    }

    /**
     * Set all of CTRL's bit fields.
     *
     * (read-write) LCDIFv2 display control Register
     */
    inline void set_CTRL(bool SW_RESET, bool NEG, bool INV_PXCK, bool INV_DE,
                         bool INV_VS, bool INV_HS) volatile
    {
        uint32_t curr = CTRL;

        curr &= ~(0b1u << 31u);
        curr |= (SW_RESET & 0b1u) << 31u;
        curr &= ~(0b1u << 4u);
        curr |= (NEG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (INV_PXCK & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INV_DE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INV_VS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (INV_HS & 0b1u) << 0u;

        CTRL = curr;
    }

    /**
     * Get CTRL_SET's SW_RESET bit.
     *
     * Software Reset
     */
    inline bool get_CTRL_SET_SW_RESET() volatile
    {
        return CTRL_SET & (1u << 31u);
    }

    /**
     * Set CTRL_SET's SW_RESET bit.
     *
     * Software Reset
     */
    inline void set_CTRL_SET_SW_RESET() volatile
    {
        CTRL_SET |= 1u << 31u;
    }

    /**
     * Clear CTRL_SET's SW_RESET bit.
     *
     * Software Reset
     */
    inline void clear_CTRL_SET_SW_RESET() volatile
    {
        CTRL_SET &= ~(1u << 31u);
    }

    /**
     * Toggle CTRL_SET's SW_RESET bit.
     *
     * Software Reset
     */
    inline void toggle_CTRL_SET_SW_RESET() volatile
    {
        CTRL_SET ^= 1u << 31u;
    }

    /**
     * Get CTRL_SET's NEG bit.
     *
     * Indicates if value at the output (pixel data output) needs to be negated
     */
    inline bool get_CTRL_SET_NEG() volatile
    {
        return CTRL_SET & (1u << 4u);
    }

    /**
     * Set CTRL_SET's NEG bit.
     *
     * Indicates if value at the output (pixel data output) needs to be negated
     */
    inline void set_CTRL_SET_NEG() volatile
    {
        CTRL_SET |= 1u << 4u;
    }

    /**
     * Clear CTRL_SET's NEG bit.
     *
     * Indicates if value at the output (pixel data output) needs to be negated
     */
    inline void clear_CTRL_SET_NEG() volatile
    {
        CTRL_SET &= ~(1u << 4u);
    }

    /**
     * Toggle CTRL_SET's NEG bit.
     *
     * Indicates if value at the output (pixel data output) needs to be negated
     */
    inline void toggle_CTRL_SET_NEG() volatile
    {
        CTRL_SET ^= 1u << 4u;
    }

    /**
     * Get CTRL_SET's INV_PXCK bit.
     *
     * Polarity change of Pixel Clock
     */
    inline bool get_CTRL_SET_INV_PXCK() volatile
    {
        return CTRL_SET & (1u << 3u);
    }

    /**
     * Set CTRL_SET's INV_PXCK bit.
     *
     * Polarity change of Pixel Clock
     */
    inline void set_CTRL_SET_INV_PXCK() volatile
    {
        CTRL_SET |= 1u << 3u;
    }

    /**
     * Clear CTRL_SET's INV_PXCK bit.
     *
     * Polarity change of Pixel Clock
     */
    inline void clear_CTRL_SET_INV_PXCK() volatile
    {
        CTRL_SET &= ~(1u << 3u);
    }

    /**
     * Toggle CTRL_SET's INV_PXCK bit.
     *
     * Polarity change of Pixel Clock
     */
    inline void toggle_CTRL_SET_INV_PXCK() volatile
    {
        CTRL_SET ^= 1u << 3u;
    }

    /**
     * Get CTRL_SET's INV_DE bit.
     *
     * Invert Data Enable polarity
     */
    inline bool get_CTRL_SET_INV_DE() volatile
    {
        return CTRL_SET & (1u << 2u);
    }

    /**
     * Set CTRL_SET's INV_DE bit.
     *
     * Invert Data Enable polarity
     */
    inline void set_CTRL_SET_INV_DE() volatile
    {
        CTRL_SET |= 1u << 2u;
    }

    /**
     * Clear CTRL_SET's INV_DE bit.
     *
     * Invert Data Enable polarity
     */
    inline void clear_CTRL_SET_INV_DE() volatile
    {
        CTRL_SET &= ~(1u << 2u);
    }

    /**
     * Toggle CTRL_SET's INV_DE bit.
     *
     * Invert Data Enable polarity
     */
    inline void toggle_CTRL_SET_INV_DE() volatile
    {
        CTRL_SET ^= 1u << 2u;
    }

    /**
     * Get CTRL_SET's INV_VS bit.
     *
     * Invert Vertical synchronization signal
     */
    inline bool get_CTRL_SET_INV_VS() volatile
    {
        return CTRL_SET & (1u << 1u);
    }

    /**
     * Set CTRL_SET's INV_VS bit.
     *
     * Invert Vertical synchronization signal
     */
    inline void set_CTRL_SET_INV_VS() volatile
    {
        CTRL_SET |= 1u << 1u;
    }

    /**
     * Clear CTRL_SET's INV_VS bit.
     *
     * Invert Vertical synchronization signal
     */
    inline void clear_CTRL_SET_INV_VS() volatile
    {
        CTRL_SET &= ~(1u << 1u);
    }

    /**
     * Toggle CTRL_SET's INV_VS bit.
     *
     * Invert Vertical synchronization signal
     */
    inline void toggle_CTRL_SET_INV_VS() volatile
    {
        CTRL_SET ^= 1u << 1u;
    }

    /**
     * Get CTRL_SET's INV_HS bit.
     *
     * Invert Horizontal synchronization signal
     */
    inline bool get_CTRL_SET_INV_HS() volatile
    {
        return CTRL_SET & (1u << 0u);
    }

    /**
     * Set CTRL_SET's INV_HS bit.
     *
     * Invert Horizontal synchronization signal
     */
    inline void set_CTRL_SET_INV_HS() volatile
    {
        CTRL_SET |= 1u << 0u;
    }

    /**
     * Clear CTRL_SET's INV_HS bit.
     *
     * Invert Horizontal synchronization signal
     */
    inline void clear_CTRL_SET_INV_HS() volatile
    {
        CTRL_SET &= ~(1u << 0u);
    }

    /**
     * Toggle CTRL_SET's INV_HS bit.
     *
     * Invert Horizontal synchronization signal
     */
    inline void toggle_CTRL_SET_INV_HS() volatile
    {
        CTRL_SET ^= 1u << 0u;
    }

    /**
     * Get all of CTRL_SET's bit fields.
     *
     * (read-write) LCDIFv2 display control Register
     */
    inline void get_CTRL_SET(bool &SW_RESET, bool &NEG, bool &INV_PXCK,
                             bool &INV_DE, bool &INV_VS, bool &INV_HS) volatile
    {
        uint32_t curr = CTRL_SET;

        SW_RESET = curr & (1u << 31u);
        NEG = curr & (1u << 4u);
        INV_PXCK = curr & (1u << 3u);
        INV_DE = curr & (1u << 2u);
        INV_VS = curr & (1u << 1u);
        INV_HS = curr & (1u << 0u);
    }

    /**
     * Set all of CTRL_SET's bit fields.
     *
     * (read-write) LCDIFv2 display control Register
     */
    inline void set_CTRL_SET(bool SW_RESET, bool NEG, bool INV_PXCK,
                             bool INV_DE, bool INV_VS, bool INV_HS) volatile
    {
        uint32_t curr = CTRL_SET;

        curr &= ~(0b1u << 31u);
        curr |= (SW_RESET & 0b1u) << 31u;
        curr &= ~(0b1u << 4u);
        curr |= (NEG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (INV_PXCK & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INV_DE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INV_VS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (INV_HS & 0b1u) << 0u;

        CTRL_SET = curr;
    }

    /**
     * Get CTRL_CLR's SW_RESET bit.
     *
     * Software Reset
     */
    inline bool get_CTRL_CLR_SW_RESET() volatile
    {
        return CTRL_CLR & (1u << 31u);
    }

    /**
     * Set CTRL_CLR's SW_RESET bit.
     *
     * Software Reset
     */
    inline void set_CTRL_CLR_SW_RESET() volatile
    {
        CTRL_CLR |= 1u << 31u;
    }

    /**
     * Clear CTRL_CLR's SW_RESET bit.
     *
     * Software Reset
     */
    inline void clear_CTRL_CLR_SW_RESET() volatile
    {
        CTRL_CLR &= ~(1u << 31u);
    }

    /**
     * Toggle CTRL_CLR's SW_RESET bit.
     *
     * Software Reset
     */
    inline void toggle_CTRL_CLR_SW_RESET() volatile
    {
        CTRL_CLR ^= 1u << 31u;
    }

    /**
     * Get CTRL_CLR's NEG bit.
     *
     * Indicates if value at the output (pixel data output) needs to be negated
     */
    inline bool get_CTRL_CLR_NEG() volatile
    {
        return CTRL_CLR & (1u << 4u);
    }

    /**
     * Set CTRL_CLR's NEG bit.
     *
     * Indicates if value at the output (pixel data output) needs to be negated
     */
    inline void set_CTRL_CLR_NEG() volatile
    {
        CTRL_CLR |= 1u << 4u;
    }

    /**
     * Clear CTRL_CLR's NEG bit.
     *
     * Indicates if value at the output (pixel data output) needs to be negated
     */
    inline void clear_CTRL_CLR_NEG() volatile
    {
        CTRL_CLR &= ~(1u << 4u);
    }

    /**
     * Toggle CTRL_CLR's NEG bit.
     *
     * Indicates if value at the output (pixel data output) needs to be negated
     */
    inline void toggle_CTRL_CLR_NEG() volatile
    {
        CTRL_CLR ^= 1u << 4u;
    }

    /**
     * Get CTRL_CLR's INV_PXCK bit.
     *
     * Polarity change of Pixel Clock
     */
    inline bool get_CTRL_CLR_INV_PXCK() volatile
    {
        return CTRL_CLR & (1u << 3u);
    }

    /**
     * Set CTRL_CLR's INV_PXCK bit.
     *
     * Polarity change of Pixel Clock
     */
    inline void set_CTRL_CLR_INV_PXCK() volatile
    {
        CTRL_CLR |= 1u << 3u;
    }

    /**
     * Clear CTRL_CLR's INV_PXCK bit.
     *
     * Polarity change of Pixel Clock
     */
    inline void clear_CTRL_CLR_INV_PXCK() volatile
    {
        CTRL_CLR &= ~(1u << 3u);
    }

    /**
     * Toggle CTRL_CLR's INV_PXCK bit.
     *
     * Polarity change of Pixel Clock
     */
    inline void toggle_CTRL_CLR_INV_PXCK() volatile
    {
        CTRL_CLR ^= 1u << 3u;
    }

    /**
     * Get CTRL_CLR's INV_DE bit.
     *
     * Invert Data Enable polarity
     */
    inline bool get_CTRL_CLR_INV_DE() volatile
    {
        return CTRL_CLR & (1u << 2u);
    }

    /**
     * Set CTRL_CLR's INV_DE bit.
     *
     * Invert Data Enable polarity
     */
    inline void set_CTRL_CLR_INV_DE() volatile
    {
        CTRL_CLR |= 1u << 2u;
    }

    /**
     * Clear CTRL_CLR's INV_DE bit.
     *
     * Invert Data Enable polarity
     */
    inline void clear_CTRL_CLR_INV_DE() volatile
    {
        CTRL_CLR &= ~(1u << 2u);
    }

    /**
     * Toggle CTRL_CLR's INV_DE bit.
     *
     * Invert Data Enable polarity
     */
    inline void toggle_CTRL_CLR_INV_DE() volatile
    {
        CTRL_CLR ^= 1u << 2u;
    }

    /**
     * Get CTRL_CLR's INV_VS bit.
     *
     * Invert Vertical synchronization signal
     */
    inline bool get_CTRL_CLR_INV_VS() volatile
    {
        return CTRL_CLR & (1u << 1u);
    }

    /**
     * Set CTRL_CLR's INV_VS bit.
     *
     * Invert Vertical synchronization signal
     */
    inline void set_CTRL_CLR_INV_VS() volatile
    {
        CTRL_CLR |= 1u << 1u;
    }

    /**
     * Clear CTRL_CLR's INV_VS bit.
     *
     * Invert Vertical synchronization signal
     */
    inline void clear_CTRL_CLR_INV_VS() volatile
    {
        CTRL_CLR &= ~(1u << 1u);
    }

    /**
     * Toggle CTRL_CLR's INV_VS bit.
     *
     * Invert Vertical synchronization signal
     */
    inline void toggle_CTRL_CLR_INV_VS() volatile
    {
        CTRL_CLR ^= 1u << 1u;
    }

    /**
     * Get CTRL_CLR's INV_HS bit.
     *
     * Invert Horizontal synchronization signal
     */
    inline bool get_CTRL_CLR_INV_HS() volatile
    {
        return CTRL_CLR & (1u << 0u);
    }

    /**
     * Set CTRL_CLR's INV_HS bit.
     *
     * Invert Horizontal synchronization signal
     */
    inline void set_CTRL_CLR_INV_HS() volatile
    {
        CTRL_CLR |= 1u << 0u;
    }

    /**
     * Clear CTRL_CLR's INV_HS bit.
     *
     * Invert Horizontal synchronization signal
     */
    inline void clear_CTRL_CLR_INV_HS() volatile
    {
        CTRL_CLR &= ~(1u << 0u);
    }

    /**
     * Toggle CTRL_CLR's INV_HS bit.
     *
     * Invert Horizontal synchronization signal
     */
    inline void toggle_CTRL_CLR_INV_HS() volatile
    {
        CTRL_CLR ^= 1u << 0u;
    }

    /**
     * Get all of CTRL_CLR's bit fields.
     *
     * (read-write) LCDIFv2 display control Register
     */
    inline void get_CTRL_CLR(bool &SW_RESET, bool &NEG, bool &INV_PXCK,
                             bool &INV_DE, bool &INV_VS, bool &INV_HS) volatile
    {
        uint32_t curr = CTRL_CLR;

        SW_RESET = curr & (1u << 31u);
        NEG = curr & (1u << 4u);
        INV_PXCK = curr & (1u << 3u);
        INV_DE = curr & (1u << 2u);
        INV_VS = curr & (1u << 1u);
        INV_HS = curr & (1u << 0u);
    }

    /**
     * Set all of CTRL_CLR's bit fields.
     *
     * (read-write) LCDIFv2 display control Register
     */
    inline void set_CTRL_CLR(bool SW_RESET, bool NEG, bool INV_PXCK,
                             bool INV_DE, bool INV_VS, bool INV_HS) volatile
    {
        uint32_t curr = CTRL_CLR;

        curr &= ~(0b1u << 31u);
        curr |= (SW_RESET & 0b1u) << 31u;
        curr &= ~(0b1u << 4u);
        curr |= (NEG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (INV_PXCK & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INV_DE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INV_VS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (INV_HS & 0b1u) << 0u;

        CTRL_CLR = curr;
    }

    /**
     * Get CTRL_TOG's SW_RESET bit.
     *
     * Software Reset
     */
    inline bool get_CTRL_TOG_SW_RESET() volatile
    {
        return CTRL_TOG & (1u << 31u);
    }

    /**
     * Set CTRL_TOG's SW_RESET bit.
     *
     * Software Reset
     */
    inline void set_CTRL_TOG_SW_RESET() volatile
    {
        CTRL_TOG |= 1u << 31u;
    }

    /**
     * Clear CTRL_TOG's SW_RESET bit.
     *
     * Software Reset
     */
    inline void clear_CTRL_TOG_SW_RESET() volatile
    {
        CTRL_TOG &= ~(1u << 31u);
    }

    /**
     * Toggle CTRL_TOG's SW_RESET bit.
     *
     * Software Reset
     */
    inline void toggle_CTRL_TOG_SW_RESET() volatile
    {
        CTRL_TOG ^= 1u << 31u;
    }

    /**
     * Get CTRL_TOG's NEG bit.
     *
     * Indicates if value at the output (pixel data output) needs to be negated
     */
    inline bool get_CTRL_TOG_NEG() volatile
    {
        return CTRL_TOG & (1u << 4u);
    }

    /**
     * Set CTRL_TOG's NEG bit.
     *
     * Indicates if value at the output (pixel data output) needs to be negated
     */
    inline void set_CTRL_TOG_NEG() volatile
    {
        CTRL_TOG |= 1u << 4u;
    }

    /**
     * Clear CTRL_TOG's NEG bit.
     *
     * Indicates if value at the output (pixel data output) needs to be negated
     */
    inline void clear_CTRL_TOG_NEG() volatile
    {
        CTRL_TOG &= ~(1u << 4u);
    }

    /**
     * Toggle CTRL_TOG's NEG bit.
     *
     * Indicates if value at the output (pixel data output) needs to be negated
     */
    inline void toggle_CTRL_TOG_NEG() volatile
    {
        CTRL_TOG ^= 1u << 4u;
    }

    /**
     * Get CTRL_TOG's INV_PXCK bit.
     *
     * Polarity change of Pixel Clock
     */
    inline bool get_CTRL_TOG_INV_PXCK() volatile
    {
        return CTRL_TOG & (1u << 3u);
    }

    /**
     * Set CTRL_TOG's INV_PXCK bit.
     *
     * Polarity change of Pixel Clock
     */
    inline void set_CTRL_TOG_INV_PXCK() volatile
    {
        CTRL_TOG |= 1u << 3u;
    }

    /**
     * Clear CTRL_TOG's INV_PXCK bit.
     *
     * Polarity change of Pixel Clock
     */
    inline void clear_CTRL_TOG_INV_PXCK() volatile
    {
        CTRL_TOG &= ~(1u << 3u);
    }

    /**
     * Toggle CTRL_TOG's INV_PXCK bit.
     *
     * Polarity change of Pixel Clock
     */
    inline void toggle_CTRL_TOG_INV_PXCK() volatile
    {
        CTRL_TOG ^= 1u << 3u;
    }

    /**
     * Get CTRL_TOG's INV_DE bit.
     *
     * Invert Data Enable polarity
     */
    inline bool get_CTRL_TOG_INV_DE() volatile
    {
        return CTRL_TOG & (1u << 2u);
    }

    /**
     * Set CTRL_TOG's INV_DE bit.
     *
     * Invert Data Enable polarity
     */
    inline void set_CTRL_TOG_INV_DE() volatile
    {
        CTRL_TOG |= 1u << 2u;
    }

    /**
     * Clear CTRL_TOG's INV_DE bit.
     *
     * Invert Data Enable polarity
     */
    inline void clear_CTRL_TOG_INV_DE() volatile
    {
        CTRL_TOG &= ~(1u << 2u);
    }

    /**
     * Toggle CTRL_TOG's INV_DE bit.
     *
     * Invert Data Enable polarity
     */
    inline void toggle_CTRL_TOG_INV_DE() volatile
    {
        CTRL_TOG ^= 1u << 2u;
    }

    /**
     * Get CTRL_TOG's INV_VS bit.
     *
     * Invert Vertical synchronization signal
     */
    inline bool get_CTRL_TOG_INV_VS() volatile
    {
        return CTRL_TOG & (1u << 1u);
    }

    /**
     * Set CTRL_TOG's INV_VS bit.
     *
     * Invert Vertical synchronization signal
     */
    inline void set_CTRL_TOG_INV_VS() volatile
    {
        CTRL_TOG |= 1u << 1u;
    }

    /**
     * Clear CTRL_TOG's INV_VS bit.
     *
     * Invert Vertical synchronization signal
     */
    inline void clear_CTRL_TOG_INV_VS() volatile
    {
        CTRL_TOG &= ~(1u << 1u);
    }

    /**
     * Toggle CTRL_TOG's INV_VS bit.
     *
     * Invert Vertical synchronization signal
     */
    inline void toggle_CTRL_TOG_INV_VS() volatile
    {
        CTRL_TOG ^= 1u << 1u;
    }

    /**
     * Get CTRL_TOG's INV_HS bit.
     *
     * Invert Horizontal synchronization signal
     */
    inline bool get_CTRL_TOG_INV_HS() volatile
    {
        return CTRL_TOG & (1u << 0u);
    }

    /**
     * Set CTRL_TOG's INV_HS bit.
     *
     * Invert Horizontal synchronization signal
     */
    inline void set_CTRL_TOG_INV_HS() volatile
    {
        CTRL_TOG |= 1u << 0u;
    }

    /**
     * Clear CTRL_TOG's INV_HS bit.
     *
     * Invert Horizontal synchronization signal
     */
    inline void clear_CTRL_TOG_INV_HS() volatile
    {
        CTRL_TOG &= ~(1u << 0u);
    }

    /**
     * Toggle CTRL_TOG's INV_HS bit.
     *
     * Invert Horizontal synchronization signal
     */
    inline void toggle_CTRL_TOG_INV_HS() volatile
    {
        CTRL_TOG ^= 1u << 0u;
    }

    /**
     * Get all of CTRL_TOG's bit fields.
     *
     * (read-write) LCDIFv2 display control Register
     */
    inline void get_CTRL_TOG(bool &SW_RESET, bool &NEG, bool &INV_PXCK,
                             bool &INV_DE, bool &INV_VS, bool &INV_HS) volatile
    {
        uint32_t curr = CTRL_TOG;

        SW_RESET = curr & (1u << 31u);
        NEG = curr & (1u << 4u);
        INV_PXCK = curr & (1u << 3u);
        INV_DE = curr & (1u << 2u);
        INV_VS = curr & (1u << 1u);
        INV_HS = curr & (1u << 0u);
    }

    /**
     * Set all of CTRL_TOG's bit fields.
     *
     * (read-write) LCDIFv2 display control Register
     */
    inline void set_CTRL_TOG(bool SW_RESET, bool NEG, bool INV_PXCK,
                             bool INV_DE, bool INV_VS, bool INV_HS) volatile
    {
        uint32_t curr = CTRL_TOG;

        curr &= ~(0b1u << 31u);
        curr |= (SW_RESET & 0b1u) << 31u;
        curr &= ~(0b1u << 4u);
        curr |= (NEG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (INV_PXCK & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INV_DE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INV_VS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (INV_HS & 0b1u) << 0u;

        CTRL_TOG = curr;
    }

    /**
     * Get DISP_PARA's DISP_ON bit.
     *
     * Display panel On/Off mode
     */
    inline bool get_DISP_PARA_DISP_ON() volatile
    {
        return DISP_PARA & (1u << 31u);
    }

    /**
     * Set DISP_PARA's DISP_ON bit.
     *
     * Display panel On/Off mode
     */
    inline void set_DISP_PARA_DISP_ON() volatile
    {
        DISP_PARA |= 1u << 31u;
    }

    /**
     * Clear DISP_PARA's DISP_ON bit.
     *
     * Display panel On/Off mode
     */
    inline void clear_DISP_PARA_DISP_ON() volatile
    {
        DISP_PARA &= ~(1u << 31u);
    }

    /**
     * Toggle DISP_PARA's DISP_ON bit.
     *
     * Display panel On/Off mode
     */
    inline void toggle_DISP_PARA_DISP_ON() volatile
    {
        DISP_PARA ^= 1u << 31u;
    }

    /**
     * Get DISP_PARA's LINE_PATTERN field.
     *
     * LCDIFv2 line output order
     */
    inline LCDIFV2_DISP_PARA_LINE_PATTERN get_DISP_PARA_LINE_PATTERN() volatile
    {
        return LCDIFV2_DISP_PARA_LINE_PATTERN((DISP_PARA >> 26u) & 0b111u);
    }

    /**
     * Set DISP_PARA's LINE_PATTERN field.
     *
     * LCDIFv2 line output order
     */
    inline void set_DISP_PARA_LINE_PATTERN(
        LCDIFV2_DISP_PARA_LINE_PATTERN value) volatile
    {
        uint32_t curr = DISP_PARA;

        curr &= ~(0b111u << 26u);
        curr |= (std::to_underlying(value) & 0b111u) << 26u;

        DISP_PARA = curr;
    }

    /**
     * Get DISP_PARA's DISP_MODE field.
     *
     * LCDIFv2 operating mode
     */
    inline LCDIFV2_DISP_PARA_DISP_MODE get_DISP_PARA_DISP_MODE() volatile
    {
        return LCDIFV2_DISP_PARA_DISP_MODE((DISP_PARA >> 24u) & 0b11u);
    }

    /**
     * Set DISP_PARA's DISP_MODE field.
     *
     * LCDIFv2 operating mode
     */
    inline void set_DISP_PARA_DISP_MODE(
        LCDIFV2_DISP_PARA_DISP_MODE value) volatile
    {
        uint32_t curr = DISP_PARA;

        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(value) & 0b11u) << 24u;

        DISP_PARA = curr;
    }

    /**
     * Get DISP_PARA's BGND_R field.
     *
     * Red component of the default color displayed in the sectors where no
     * layer is active
     */
    inline uint8_t get_DISP_PARA_BGND_R() volatile
    {
        return (DISP_PARA >> 16u) & 0b11111111u;
    }

    /**
     * Set DISP_PARA's BGND_R field.
     *
     * Red component of the default color displayed in the sectors where no
     * layer is active
     */
    inline void set_DISP_PARA_BGND_R(uint8_t value) volatile
    {
        uint32_t curr = DISP_PARA;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        DISP_PARA = curr;
    }

    /**
     * Get DISP_PARA's BGND_G field.
     *
     * Green component of the default color displayed in the sectors where no
     * layer is active
     */
    inline uint8_t get_DISP_PARA_BGND_G() volatile
    {
        return (DISP_PARA >> 8u) & 0b11111111u;
    }

    /**
     * Set DISP_PARA's BGND_G field.
     *
     * Green component of the default color displayed in the sectors where no
     * layer is active
     */
    inline void set_DISP_PARA_BGND_G(uint8_t value) volatile
    {
        uint32_t curr = DISP_PARA;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        DISP_PARA = curr;
    }

    /**
     * Get DISP_PARA's BGND_B field.
     *
     * Blue component of the default color displayed in the sectors where no
     * layer is active
     */
    inline uint8_t get_DISP_PARA_BGND_B() volatile
    {
        return (DISP_PARA >> 0u) & 0b11111111u;
    }

    /**
     * Set DISP_PARA's BGND_B field.
     *
     * Blue component of the default color displayed in the sectors where no
     * layer is active
     */
    inline void set_DISP_PARA_BGND_B(uint8_t value) volatile
    {
        uint32_t curr = DISP_PARA;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        DISP_PARA = curr;
    }

    /**
     * Get all of DISP_PARA's bit fields.
     *
     * (read-write) Display Parameter Register
     */
    inline void get_DISP_PARA(bool &DISP_ON,
                              LCDIFV2_DISP_PARA_LINE_PATTERN &LINE_PATTERN,
                              LCDIFV2_DISP_PARA_DISP_MODE &DISP_MODE,
                              uint8_t &BGND_R, uint8_t &BGND_G,
                              uint8_t &BGND_B) volatile
    {
        uint32_t curr = DISP_PARA;

        DISP_ON = curr & (1u << 31u);
        LINE_PATTERN = LCDIFV2_DISP_PARA_LINE_PATTERN((curr >> 26u) & 0b111u);
        DISP_MODE = LCDIFV2_DISP_PARA_DISP_MODE((curr >> 24u) & 0b11u);
        BGND_R = (curr >> 16u) & 0b11111111u;
        BGND_G = (curr >> 8u) & 0b11111111u;
        BGND_B = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of DISP_PARA's bit fields.
     *
     * (read-write) Display Parameter Register
     */
    inline void set_DISP_PARA(bool DISP_ON,
                              LCDIFV2_DISP_PARA_LINE_PATTERN LINE_PATTERN,
                              LCDIFV2_DISP_PARA_DISP_MODE DISP_MODE,
                              uint8_t BGND_R, uint8_t BGND_G,
                              uint8_t BGND_B) volatile
    {
        uint32_t curr = DISP_PARA;

        curr &= ~(0b1u << 31u);
        curr |= (DISP_ON & 0b1u) << 31u;
        curr &= ~(0b111u << 26u);
        curr |= (std::to_underlying(LINE_PATTERN) & 0b111u) << 26u;
        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(DISP_MODE) & 0b11u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (BGND_R & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (BGND_G & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (BGND_B & 0b11111111u) << 0u;

        DISP_PARA = curr;
    }

    /**
     * Get DISP_SIZE's DELTA_Y field.
     *
     * Sets the display size vertical resolution in pixels
     */
    inline uint16_t get_DISP_SIZE_DELTA_Y() volatile
    {
        return (DISP_SIZE >> 16u) & 0b111111111111u;
    }

    /**
     * Set DISP_SIZE's DELTA_Y field.
     *
     * Sets the display size vertical resolution in pixels
     */
    inline void set_DISP_SIZE_DELTA_Y(uint16_t value) volatile
    {
        uint32_t curr = DISP_SIZE;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        DISP_SIZE = curr;
    }

    /**
     * Get DISP_SIZE's DELTA_X field.
     *
     * Sets the display size horizontal resolution in pixels
     */
    inline uint16_t get_DISP_SIZE_DELTA_X() volatile
    {
        return (DISP_SIZE >> 0u) & 0b111111111111u;
    }

    /**
     * Set DISP_SIZE's DELTA_X field.
     *
     * Sets the display size horizontal resolution in pixels
     */
    inline void set_DISP_SIZE_DELTA_X(uint16_t value) volatile
    {
        uint32_t curr = DISP_SIZE;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        DISP_SIZE = curr;
    }

    /**
     * Get all of DISP_SIZE's bit fields.
     *
     * (read-write) Display Size Register
     */
    inline void get_DISP_SIZE(uint16_t &DELTA_Y, uint16_t &DELTA_X) volatile
    {
        uint32_t curr = DISP_SIZE;

        DELTA_Y = (curr >> 16u) & 0b111111111111u;
        DELTA_X = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of DISP_SIZE's bit fields.
     *
     * (read-write) Display Size Register
     */
    inline void set_DISP_SIZE(uint16_t DELTA_Y, uint16_t DELTA_X) volatile
    {
        uint32_t curr = DISP_SIZE;

        curr &= ~(0b111111111111u << 16u);
        curr |= (DELTA_Y & 0b111111111111u) << 16u;
        curr &= ~(0b111111111111u << 0u);
        curr |= (DELTA_X & 0b111111111111u) << 0u;

        DISP_SIZE = curr;
    }

    /**
     * Get HSYN_PARA's BP_H field.
     *
     * HSYNC back-porch pulse width (in pixel clock cycles). Pulse width has a
     * minimum value of 1
     */
    inline uint16_t get_HSYN_PARA_BP_H() volatile
    {
        return (HSYN_PARA >> 22u) & 0b111111111u;
    }

    /**
     * Set HSYN_PARA's BP_H field.
     *
     * HSYNC back-porch pulse width (in pixel clock cycles). Pulse width has a
     * minimum value of 1
     */
    inline void set_HSYN_PARA_BP_H(uint16_t value) volatile
    {
        uint32_t curr = HSYN_PARA;

        curr &= ~(0b111111111u << 22u);
        curr |= (value & 0b111111111u) << 22u;

        HSYN_PARA = curr;
    }

    /**
     * Get HSYN_PARA's PW_H field.
     *
     * HSYNC active pulse width (in pixel clock cycles). Pulse width has a
     * minimum value of 1
     */
    inline uint16_t get_HSYN_PARA_PW_H() volatile
    {
        return (HSYN_PARA >> 11u) & 0b111111111u;
    }

    /**
     * Set HSYN_PARA's PW_H field.
     *
     * HSYNC active pulse width (in pixel clock cycles). Pulse width has a
     * minimum value of 1
     */
    inline void set_HSYN_PARA_PW_H(uint16_t value) volatile
    {
        uint32_t curr = HSYN_PARA;

        curr &= ~(0b111111111u << 11u);
        curr |= (value & 0b111111111u) << 11u;

        HSYN_PARA = curr;
    }

    /**
     * Get HSYN_PARA's FP_H field.
     *
     * HSYNC front-porch pulse width (in pixel clock cycles). Pulse width has a
     * minimum value of 1
     */
    inline uint16_t get_HSYN_PARA_FP_H() volatile
    {
        return (HSYN_PARA >> 0u) & 0b111111111u;
    }

    /**
     * Set HSYN_PARA's FP_H field.
     *
     * HSYNC front-porch pulse width (in pixel clock cycles). Pulse width has a
     * minimum value of 1
     */
    inline void set_HSYN_PARA_FP_H(uint16_t value) volatile
    {
        uint32_t curr = HSYN_PARA;

        curr &= ~(0b111111111u << 0u);
        curr |= (value & 0b111111111u) << 0u;

        HSYN_PARA = curr;
    }

    /**
     * Get all of HSYN_PARA's bit fields.
     *
     * (read-write) Horizontal Sync Parameter Register
     */
    inline void get_HSYN_PARA(uint16_t &BP_H, uint16_t &PW_H,
                              uint16_t &FP_H) volatile
    {
        uint32_t curr = HSYN_PARA;

        BP_H = (curr >> 22u) & 0b111111111u;
        PW_H = (curr >> 11u) & 0b111111111u;
        FP_H = (curr >> 0u) & 0b111111111u;
    }

    /**
     * Set all of HSYN_PARA's bit fields.
     *
     * (read-write) Horizontal Sync Parameter Register
     */
    inline void set_HSYN_PARA(uint16_t BP_H, uint16_t PW_H,
                              uint16_t FP_H) volatile
    {
        uint32_t curr = HSYN_PARA;

        curr &= ~(0b111111111u << 22u);
        curr |= (BP_H & 0b111111111u) << 22u;
        curr &= ~(0b111111111u << 11u);
        curr |= (PW_H & 0b111111111u) << 11u;
        curr &= ~(0b111111111u << 0u);
        curr |= (FP_H & 0b111111111u) << 0u;

        HSYN_PARA = curr;
    }

    /**
     * Get VSYN_PARA's BP_V field.
     *
     * VSYNC back-porch pulse width (in horizontal line cycles). Pulse width
     * has a minimum value of 1
     */
    inline uint16_t get_VSYN_PARA_BP_V() volatile
    {
        return (VSYN_PARA >> 22u) & 0b111111111u;
    }

    /**
     * Set VSYN_PARA's BP_V field.
     *
     * VSYNC back-porch pulse width (in horizontal line cycles). Pulse width
     * has a minimum value of 1
     */
    inline void set_VSYN_PARA_BP_V(uint16_t value) volatile
    {
        uint32_t curr = VSYN_PARA;

        curr &= ~(0b111111111u << 22u);
        curr |= (value & 0b111111111u) << 22u;

        VSYN_PARA = curr;
    }

    /**
     * Get VSYN_PARA's PW_V field.
     *
     * VSYNC active pulse width (in horizontal line cycles). Pulse width has a
     * minimum value of 1
     */
    inline uint16_t get_VSYN_PARA_PW_V() volatile
    {
        return (VSYN_PARA >> 11u) & 0b111111111u;
    }

    /**
     * Set VSYN_PARA's PW_V field.
     *
     * VSYNC active pulse width (in horizontal line cycles). Pulse width has a
     * minimum value of 1
     */
    inline void set_VSYN_PARA_PW_V(uint16_t value) volatile
    {
        uint32_t curr = VSYN_PARA;

        curr &= ~(0b111111111u << 11u);
        curr |= (value & 0b111111111u) << 11u;

        VSYN_PARA = curr;
    }

    /**
     * Get VSYN_PARA's FP_V field.
     *
     * VSYNC front-porch pulse width (in horizontal line cycles). Pulse width
     * has a minimum value of 1
     */
    inline uint16_t get_VSYN_PARA_FP_V() volatile
    {
        return (VSYN_PARA >> 0u) & 0b111111111u;
    }

    /**
     * Set VSYN_PARA's FP_V field.
     *
     * VSYNC front-porch pulse width (in horizontal line cycles). Pulse width
     * has a minimum value of 1
     */
    inline void set_VSYN_PARA_FP_V(uint16_t value) volatile
    {
        uint32_t curr = VSYN_PARA;

        curr &= ~(0b111111111u << 0u);
        curr |= (value & 0b111111111u) << 0u;

        VSYN_PARA = curr;
    }

    /**
     * Get all of VSYN_PARA's bit fields.
     *
     * (read-write) Vertical Sync Parameter Register
     */
    inline void get_VSYN_PARA(uint16_t &BP_V, uint16_t &PW_V,
                              uint16_t &FP_V) volatile
    {
        uint32_t curr = VSYN_PARA;

        BP_V = (curr >> 22u) & 0b111111111u;
        PW_V = (curr >> 11u) & 0b111111111u;
        FP_V = (curr >> 0u) & 0b111111111u;
    }

    /**
     * Set all of VSYN_PARA's bit fields.
     *
     * (read-write) Vertical Sync Parameter Register
     */
    inline void set_VSYN_PARA(uint16_t BP_V, uint16_t PW_V,
                              uint16_t FP_V) volatile
    {
        uint32_t curr = VSYN_PARA;

        curr &= ~(0b111111111u << 22u);
        curr |= (BP_V & 0b111111111u) << 22u;
        curr &= ~(0b111111111u << 11u);
        curr |= (PW_V & 0b111111111u) << 11u;
        curr &= ~(0b111111111u << 0u);
        curr |= (FP_V & 0b111111111u) << 0u;

        VSYN_PARA = curr;
    }

    /**
     * Get INT_STATUS_D0's FIFO_EMPTY field.
     *
     * Interrupt flag to indicate that which FIFO in the pixel blending
     * underflowed
     */
    inline uint8_t get_INT_STATUS_D0_FIFO_EMPTY() volatile
    {
        return (INT_STATUS_D0 >> 24u) & 0b11111111u;
    }

    /**
     * Set INT_STATUS_D0's FIFO_EMPTY field.
     *
     * Interrupt flag to indicate that which FIFO in the pixel blending
     * underflowed
     */
    inline void set_INT_STATUS_D0_FIFO_EMPTY(uint8_t value) volatile
    {
        uint32_t curr = INT_STATUS_D0;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        INT_STATUS_D0 = curr;
    }

    /**
     * Get INT_STATUS_D0's DMA_DONE field.
     *
     * Interrupt flag to indicate that which PLANE has fetched the last pixel
     * from memory
     */
    inline uint8_t get_INT_STATUS_D0_DMA_DONE() volatile
    {
        return (INT_STATUS_D0 >> 16u) & 0b11111111u;
    }

    /**
     * Set INT_STATUS_D0's DMA_DONE field.
     *
     * Interrupt flag to indicate that which PLANE has fetched the last pixel
     * from memory
     */
    inline void set_INT_STATUS_D0_DMA_DONE(uint8_t value) volatile
    {
        uint32_t curr = INT_STATUS_D0;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        INT_STATUS_D0 = curr;
    }

    /**
     * Get INT_STATUS_D0's DMA_ERR field.
     *
     * Interrupt flag to indicate that which PLANE has Read Error on the AXI
     * interface
     */
    inline uint8_t get_INT_STATUS_D0_DMA_ERR() volatile
    {
        return (INT_STATUS_D0 >> 8u) & 0b11111111u;
    }

    /**
     * Set INT_STATUS_D0's DMA_ERR field.
     *
     * Interrupt flag to indicate that which PLANE has Read Error on the AXI
     * interface
     */
    inline void set_INT_STATUS_D0_DMA_ERR(uint8_t value) volatile
    {
        uint32_t curr = INT_STATUS_D0;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        INT_STATUS_D0 = curr;
    }

    /**
     * Get INT_STATUS_D0's VS_BLANK bit.
     *
     * Interrupt flag to indicate vertical blanking period
     */
    inline bool get_INT_STATUS_D0_VS_BLANK() volatile
    {
        return INT_STATUS_D0 & (1u << 2u);
    }

    /**
     * Set INT_STATUS_D0's VS_BLANK bit.
     *
     * Interrupt flag to indicate vertical blanking period
     */
    inline void set_INT_STATUS_D0_VS_BLANK() volatile
    {
        INT_STATUS_D0 |= 1u << 2u;
    }

    /**
     * Clear INT_STATUS_D0's VS_BLANK bit.
     *
     * Interrupt flag to indicate vertical blanking period
     */
    inline void clear_INT_STATUS_D0_VS_BLANK() volatile
    {
        INT_STATUS_D0 &= ~(1u << 2u);
    }

    /**
     * Toggle INT_STATUS_D0's VS_BLANK bit.
     *
     * Interrupt flag to indicate vertical blanking period
     */
    inline void toggle_INT_STATUS_D0_VS_BLANK() volatile
    {
        INT_STATUS_D0 ^= 1u << 2u;
    }

    /**
     * Get INT_STATUS_D0's UNDERRUN bit.
     *
     * Interrupt flag to indicate the output buffer underrun condition
     */
    inline bool get_INT_STATUS_D0_UNDERRUN() volatile
    {
        return INT_STATUS_D0 & (1u << 1u);
    }

    /**
     * Set INT_STATUS_D0's UNDERRUN bit.
     *
     * Interrupt flag to indicate the output buffer underrun condition
     */
    inline void set_INT_STATUS_D0_UNDERRUN() volatile
    {
        INT_STATUS_D0 |= 1u << 1u;
    }

    /**
     * Clear INT_STATUS_D0's UNDERRUN bit.
     *
     * Interrupt flag to indicate the output buffer underrun condition
     */
    inline void clear_INT_STATUS_D0_UNDERRUN() volatile
    {
        INT_STATUS_D0 &= ~(1u << 1u);
    }

    /**
     * Toggle INT_STATUS_D0's UNDERRUN bit.
     *
     * Interrupt flag to indicate the output buffer underrun condition
     */
    inline void toggle_INT_STATUS_D0_UNDERRUN() volatile
    {
        INT_STATUS_D0 ^= 1u << 1u;
    }

    /**
     * Get INT_STATUS_D0's VSYNC bit.
     *
     * Interrupt flag to indicate that the vertical synchronization phase(The
     * beginning of a frame)
     */
    inline bool get_INT_STATUS_D0_VSYNC() volatile
    {
        return INT_STATUS_D0 & (1u << 0u);
    }

    /**
     * Set INT_STATUS_D0's VSYNC bit.
     *
     * Interrupt flag to indicate that the vertical synchronization phase(The
     * beginning of a frame)
     */
    inline void set_INT_STATUS_D0_VSYNC() volatile
    {
        INT_STATUS_D0 |= 1u << 0u;
    }

    /**
     * Clear INT_STATUS_D0's VSYNC bit.
     *
     * Interrupt flag to indicate that the vertical synchronization phase(The
     * beginning of a frame)
     */
    inline void clear_INT_STATUS_D0_VSYNC() volatile
    {
        INT_STATUS_D0 &= ~(1u << 0u);
    }

    /**
     * Toggle INT_STATUS_D0's VSYNC bit.
     *
     * Interrupt flag to indicate that the vertical synchronization phase(The
     * beginning of a frame)
     */
    inline void toggle_INT_STATUS_D0_VSYNC() volatile
    {
        INT_STATUS_D0 ^= 1u << 0u;
    }

    /**
     * Get all of INT_STATUS_D0's bit fields.
     *
     * (read-write) Interrupt Status Register for domain 0
     */
    inline void get_INT_STATUS_D0(uint8_t &FIFO_EMPTY, uint8_t &DMA_DONE,
                                  uint8_t &DMA_ERR, bool &VS_BLANK,
                                  bool &UNDERRUN, bool &VSYNC) volatile
    {
        uint32_t curr = INT_STATUS_D0;

        FIFO_EMPTY = (curr >> 24u) & 0b11111111u;
        DMA_DONE = (curr >> 16u) & 0b11111111u;
        DMA_ERR = (curr >> 8u) & 0b11111111u;
        VS_BLANK = curr & (1u << 2u);
        UNDERRUN = curr & (1u << 1u);
        VSYNC = curr & (1u << 0u);
    }

    /**
     * Set all of INT_STATUS_D0's bit fields.
     *
     * (read-write) Interrupt Status Register for domain 0
     */
    inline void set_INT_STATUS_D0(uint8_t FIFO_EMPTY, uint8_t DMA_DONE,
                                  uint8_t DMA_ERR, bool VS_BLANK,
                                  bool UNDERRUN, bool VSYNC) volatile
    {
        uint32_t curr = INT_STATUS_D0;

        curr &= ~(0b11111111u << 24u);
        curr |= (FIFO_EMPTY & 0b11111111u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (DMA_DONE & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (DMA_ERR & 0b11111111u) << 8u;
        curr &= ~(0b1u << 2u);
        curr |= (VS_BLANK & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (UNDERRUN & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (VSYNC & 0b1u) << 0u;

        INT_STATUS_D0 = curr;
    }

    /**
     * Get INT_ENABLE_D0's FIFO_EMPTY_EN field.
     *
     * Enable Interrupt flag to indicate that which FIFO in the pixel blending
     * underflowed
     */
    inline uint8_t get_INT_ENABLE_D0_FIFO_EMPTY_EN() volatile
    {
        return (INT_ENABLE_D0 >> 24u) & 0b11111111u;
    }

    /**
     * Set INT_ENABLE_D0's FIFO_EMPTY_EN field.
     *
     * Enable Interrupt flag to indicate that which FIFO in the pixel blending
     * underflowed
     */
    inline void set_INT_ENABLE_D0_FIFO_EMPTY_EN(uint8_t value) volatile
    {
        uint32_t curr = INT_ENABLE_D0;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        INT_ENABLE_D0 = curr;
    }

    /**
     * Get INT_ENABLE_D0's DMA_DONE_EN field.
     *
     * Enable Interrupt flag to indicate that which PLANE has fetched the last
     * pixel from memory
     */
    inline uint8_t get_INT_ENABLE_D0_DMA_DONE_EN() volatile
    {
        return (INT_ENABLE_D0 >> 16u) & 0b11111111u;
    }

    /**
     * Set INT_ENABLE_D0's DMA_DONE_EN field.
     *
     * Enable Interrupt flag to indicate that which PLANE has fetched the last
     * pixel from memory
     */
    inline void set_INT_ENABLE_D0_DMA_DONE_EN(uint8_t value) volatile
    {
        uint32_t curr = INT_ENABLE_D0;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        INT_ENABLE_D0 = curr;
    }

    /**
     * Get INT_ENABLE_D0's DMA_ERR_EN field.
     *
     * Enable Interrupt flag to indicate that which PLANE has Read Error on the
     * AXI interface
     */
    inline uint8_t get_INT_ENABLE_D0_DMA_ERR_EN() volatile
    {
        return (INT_ENABLE_D0 >> 8u) & 0b11111111u;
    }

    /**
     * Set INT_ENABLE_D0's DMA_ERR_EN field.
     *
     * Enable Interrupt flag to indicate that which PLANE has Read Error on the
     * AXI interface
     */
    inline void set_INT_ENABLE_D0_DMA_ERR_EN(uint8_t value) volatile
    {
        uint32_t curr = INT_ENABLE_D0;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        INT_ENABLE_D0 = curr;
    }

    /**
     * Get INT_ENABLE_D0's VS_BLANK_EN bit.
     *
     * Enable Interrupt flag to indicate vertical blanking period
     */
    inline bool get_INT_ENABLE_D0_VS_BLANK_EN() volatile
    {
        return INT_ENABLE_D0 & (1u << 2u);
    }

    /**
     * Set INT_ENABLE_D0's VS_BLANK_EN bit.
     *
     * Enable Interrupt flag to indicate vertical blanking period
     */
    inline void set_INT_ENABLE_D0_VS_BLANK_EN() volatile
    {
        INT_ENABLE_D0 |= 1u << 2u;
    }

    /**
     * Clear INT_ENABLE_D0's VS_BLANK_EN bit.
     *
     * Enable Interrupt flag to indicate vertical blanking period
     */
    inline void clear_INT_ENABLE_D0_VS_BLANK_EN() volatile
    {
        INT_ENABLE_D0 &= ~(1u << 2u);
    }

    /**
     * Toggle INT_ENABLE_D0's VS_BLANK_EN bit.
     *
     * Enable Interrupt flag to indicate vertical blanking period
     */
    inline void toggle_INT_ENABLE_D0_VS_BLANK_EN() volatile
    {
        INT_ENABLE_D0 ^= 1u << 2u;
    }

    /**
     * Get INT_ENABLE_D0's UNDERRUN_EN bit.
     *
     * Enable Interrupt flag to indicate the output buffer underrun condition
     */
    inline bool get_INT_ENABLE_D0_UNDERRUN_EN() volatile
    {
        return INT_ENABLE_D0 & (1u << 1u);
    }

    /**
     * Set INT_ENABLE_D0's UNDERRUN_EN bit.
     *
     * Enable Interrupt flag to indicate the output buffer underrun condition
     */
    inline void set_INT_ENABLE_D0_UNDERRUN_EN() volatile
    {
        INT_ENABLE_D0 |= 1u << 1u;
    }

    /**
     * Clear INT_ENABLE_D0's UNDERRUN_EN bit.
     *
     * Enable Interrupt flag to indicate the output buffer underrun condition
     */
    inline void clear_INT_ENABLE_D0_UNDERRUN_EN() volatile
    {
        INT_ENABLE_D0 &= ~(1u << 1u);
    }

    /**
     * Toggle INT_ENABLE_D0's UNDERRUN_EN bit.
     *
     * Enable Interrupt flag to indicate the output buffer underrun condition
     */
    inline void toggle_INT_ENABLE_D0_UNDERRUN_EN() volatile
    {
        INT_ENABLE_D0 ^= 1u << 1u;
    }

    /**
     * Get INT_ENABLE_D0's VSYNC_EN bit.
     *
     * Enable Interrupt flag to indicate that the vertical synchronization
     * phase(The beginning of a frame)
     */
    inline bool get_INT_ENABLE_D0_VSYNC_EN() volatile
    {
        return INT_ENABLE_D0 & (1u << 0u);
    }

    /**
     * Set INT_ENABLE_D0's VSYNC_EN bit.
     *
     * Enable Interrupt flag to indicate that the vertical synchronization
     * phase(The beginning of a frame)
     */
    inline void set_INT_ENABLE_D0_VSYNC_EN() volatile
    {
        INT_ENABLE_D0 |= 1u << 0u;
    }

    /**
     * Clear INT_ENABLE_D0's VSYNC_EN bit.
     *
     * Enable Interrupt flag to indicate that the vertical synchronization
     * phase(The beginning of a frame)
     */
    inline void clear_INT_ENABLE_D0_VSYNC_EN() volatile
    {
        INT_ENABLE_D0 &= ~(1u << 0u);
    }

    /**
     * Toggle INT_ENABLE_D0's VSYNC_EN bit.
     *
     * Enable Interrupt flag to indicate that the vertical synchronization
     * phase(The beginning of a frame)
     */
    inline void toggle_INT_ENABLE_D0_VSYNC_EN() volatile
    {
        INT_ENABLE_D0 ^= 1u << 0u;
    }

    /**
     * Get all of INT_ENABLE_D0's bit fields.
     *
     * (read-write) Interrupt Enable Register for domain 0
     */
    inline void get_INT_ENABLE_D0(uint8_t &FIFO_EMPTY_EN, uint8_t &DMA_DONE_EN,
                                  uint8_t &DMA_ERR_EN, bool &VS_BLANK_EN,
                                  bool &UNDERRUN_EN, bool &VSYNC_EN) volatile
    {
        uint32_t curr = INT_ENABLE_D0;

        FIFO_EMPTY_EN = (curr >> 24u) & 0b11111111u;
        DMA_DONE_EN = (curr >> 16u) & 0b11111111u;
        DMA_ERR_EN = (curr >> 8u) & 0b11111111u;
        VS_BLANK_EN = curr & (1u << 2u);
        UNDERRUN_EN = curr & (1u << 1u);
        VSYNC_EN = curr & (1u << 0u);
    }

    /**
     * Set all of INT_ENABLE_D0's bit fields.
     *
     * (read-write) Interrupt Enable Register for domain 0
     */
    inline void set_INT_ENABLE_D0(uint8_t FIFO_EMPTY_EN, uint8_t DMA_DONE_EN,
                                  uint8_t DMA_ERR_EN, bool VS_BLANK_EN,
                                  bool UNDERRUN_EN, bool VSYNC_EN) volatile
    {
        uint32_t curr = INT_ENABLE_D0;

        curr &= ~(0b11111111u << 24u);
        curr |= (FIFO_EMPTY_EN & 0b11111111u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (DMA_DONE_EN & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (DMA_ERR_EN & 0b11111111u) << 8u;
        curr &= ~(0b1u << 2u);
        curr |= (VS_BLANK_EN & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (UNDERRUN_EN & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (VSYNC_EN & 0b1u) << 0u;

        INT_ENABLE_D0 = curr;
    }

    /**
     * Get INT_STATUS_D1's FIFO_EMPTY field.
     *
     * Interrupt flag to indicate that which FIFO in the pixel blending
     * underflowed
     */
    inline uint8_t get_INT_STATUS_D1_FIFO_EMPTY() volatile
    {
        return (INT_STATUS_D1 >> 24u) & 0b11111111u;
    }

    /**
     * Set INT_STATUS_D1's FIFO_EMPTY field.
     *
     * Interrupt flag to indicate that which FIFO in the pixel blending
     * underflowed
     */
    inline void set_INT_STATUS_D1_FIFO_EMPTY(uint8_t value) volatile
    {
        uint32_t curr = INT_STATUS_D1;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        INT_STATUS_D1 = curr;
    }

    /**
     * Get INT_STATUS_D1's DMA_DONE field.
     *
     * Interrupt flag to indicate that which PLANE has fetched the last pixel
     * from memory
     */
    inline uint8_t get_INT_STATUS_D1_DMA_DONE() volatile
    {
        return (INT_STATUS_D1 >> 16u) & 0b11111111u;
    }

    /**
     * Set INT_STATUS_D1's DMA_DONE field.
     *
     * Interrupt flag to indicate that which PLANE has fetched the last pixel
     * from memory
     */
    inline void set_INT_STATUS_D1_DMA_DONE(uint8_t value) volatile
    {
        uint32_t curr = INT_STATUS_D1;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        INT_STATUS_D1 = curr;
    }

    /**
     * Get INT_STATUS_D1's DMA_ERR field.
     *
     * Interrupt flag to indicate that which PLANE has Read Error on the AXI
     * interface
     */
    inline uint8_t get_INT_STATUS_D1_DMA_ERR() volatile
    {
        return (INT_STATUS_D1 >> 8u) & 0b11111111u;
    }

    /**
     * Set INT_STATUS_D1's DMA_ERR field.
     *
     * Interrupt flag to indicate that which PLANE has Read Error on the AXI
     * interface
     */
    inline void set_INT_STATUS_D1_DMA_ERR(uint8_t value) volatile
    {
        uint32_t curr = INT_STATUS_D1;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        INT_STATUS_D1 = curr;
    }

    /**
     * Get INT_STATUS_D1's VS_BLANK bit.
     *
     * Interrupt flag to indicate vertical blanking period
     */
    inline bool get_INT_STATUS_D1_VS_BLANK() volatile
    {
        return INT_STATUS_D1 & (1u << 2u);
    }

    /**
     * Set INT_STATUS_D1's VS_BLANK bit.
     *
     * Interrupt flag to indicate vertical blanking period
     */
    inline void set_INT_STATUS_D1_VS_BLANK() volatile
    {
        INT_STATUS_D1 |= 1u << 2u;
    }

    /**
     * Clear INT_STATUS_D1's VS_BLANK bit.
     *
     * Interrupt flag to indicate vertical blanking period
     */
    inline void clear_INT_STATUS_D1_VS_BLANK() volatile
    {
        INT_STATUS_D1 &= ~(1u << 2u);
    }

    /**
     * Toggle INT_STATUS_D1's VS_BLANK bit.
     *
     * Interrupt flag to indicate vertical blanking period
     */
    inline void toggle_INT_STATUS_D1_VS_BLANK() volatile
    {
        INT_STATUS_D1 ^= 1u << 2u;
    }

    /**
     * Get INT_STATUS_D1's UNDERRUN bit.
     *
     * Interrupt flag to indicate the output buffer underrun condition
     */
    inline bool get_INT_STATUS_D1_UNDERRUN() volatile
    {
        return INT_STATUS_D1 & (1u << 1u);
    }

    /**
     * Set INT_STATUS_D1's UNDERRUN bit.
     *
     * Interrupt flag to indicate the output buffer underrun condition
     */
    inline void set_INT_STATUS_D1_UNDERRUN() volatile
    {
        INT_STATUS_D1 |= 1u << 1u;
    }

    /**
     * Clear INT_STATUS_D1's UNDERRUN bit.
     *
     * Interrupt flag to indicate the output buffer underrun condition
     */
    inline void clear_INT_STATUS_D1_UNDERRUN() volatile
    {
        INT_STATUS_D1 &= ~(1u << 1u);
    }

    /**
     * Toggle INT_STATUS_D1's UNDERRUN bit.
     *
     * Interrupt flag to indicate the output buffer underrun condition
     */
    inline void toggle_INT_STATUS_D1_UNDERRUN() volatile
    {
        INT_STATUS_D1 ^= 1u << 1u;
    }

    /**
     * Get INT_STATUS_D1's VSYNC bit.
     *
     * Interrupt flag to indicate that the vertical synchronization phase(The
     * beginning of a frame)
     */
    inline bool get_INT_STATUS_D1_VSYNC() volatile
    {
        return INT_STATUS_D1 & (1u << 0u);
    }

    /**
     * Set INT_STATUS_D1's VSYNC bit.
     *
     * Interrupt flag to indicate that the vertical synchronization phase(The
     * beginning of a frame)
     */
    inline void set_INT_STATUS_D1_VSYNC() volatile
    {
        INT_STATUS_D1 |= 1u << 0u;
    }

    /**
     * Clear INT_STATUS_D1's VSYNC bit.
     *
     * Interrupt flag to indicate that the vertical synchronization phase(The
     * beginning of a frame)
     */
    inline void clear_INT_STATUS_D1_VSYNC() volatile
    {
        INT_STATUS_D1 &= ~(1u << 0u);
    }

    /**
     * Toggle INT_STATUS_D1's VSYNC bit.
     *
     * Interrupt flag to indicate that the vertical synchronization phase(The
     * beginning of a frame)
     */
    inline void toggle_INT_STATUS_D1_VSYNC() volatile
    {
        INT_STATUS_D1 ^= 1u << 0u;
    }

    /**
     * Get all of INT_STATUS_D1's bit fields.
     *
     * (read-write) Interrupt Status Register for domain 1
     */
    inline void get_INT_STATUS_D1(uint8_t &FIFO_EMPTY, uint8_t &DMA_DONE,
                                  uint8_t &DMA_ERR, bool &VS_BLANK,
                                  bool &UNDERRUN, bool &VSYNC) volatile
    {
        uint32_t curr = INT_STATUS_D1;

        FIFO_EMPTY = (curr >> 24u) & 0b11111111u;
        DMA_DONE = (curr >> 16u) & 0b11111111u;
        DMA_ERR = (curr >> 8u) & 0b11111111u;
        VS_BLANK = curr & (1u << 2u);
        UNDERRUN = curr & (1u << 1u);
        VSYNC = curr & (1u << 0u);
    }

    /**
     * Set all of INT_STATUS_D1's bit fields.
     *
     * (read-write) Interrupt Status Register for domain 1
     */
    inline void set_INT_STATUS_D1(uint8_t FIFO_EMPTY, uint8_t DMA_DONE,
                                  uint8_t DMA_ERR, bool VS_BLANK,
                                  bool UNDERRUN, bool VSYNC) volatile
    {
        uint32_t curr = INT_STATUS_D1;

        curr &= ~(0b11111111u << 24u);
        curr |= (FIFO_EMPTY & 0b11111111u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (DMA_DONE & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (DMA_ERR & 0b11111111u) << 8u;
        curr &= ~(0b1u << 2u);
        curr |= (VS_BLANK & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (UNDERRUN & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (VSYNC & 0b1u) << 0u;

        INT_STATUS_D1 = curr;
    }

    /**
     * Get INT_ENABLE_D1's FIFO_EMPTY_EN field.
     *
     * Enable Interrupt flag to indicate that which FIFO in the pixel blending
     * underflowed
     */
    inline uint8_t get_INT_ENABLE_D1_FIFO_EMPTY_EN() volatile
    {
        return (INT_ENABLE_D1 >> 24u) & 0b11111111u;
    }

    /**
     * Set INT_ENABLE_D1's FIFO_EMPTY_EN field.
     *
     * Enable Interrupt flag to indicate that which FIFO in the pixel blending
     * underflowed
     */
    inline void set_INT_ENABLE_D1_FIFO_EMPTY_EN(uint8_t value) volatile
    {
        uint32_t curr = INT_ENABLE_D1;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        INT_ENABLE_D1 = curr;
    }

    /**
     * Get INT_ENABLE_D1's DMA_DONE_EN field.
     *
     * Enable Interrupt flag to indicate that which PLANE has fetched the last
     * pixel from memory
     */
    inline uint8_t get_INT_ENABLE_D1_DMA_DONE_EN() volatile
    {
        return (INT_ENABLE_D1 >> 16u) & 0b11111111u;
    }

    /**
     * Set INT_ENABLE_D1's DMA_DONE_EN field.
     *
     * Enable Interrupt flag to indicate that which PLANE has fetched the last
     * pixel from memory
     */
    inline void set_INT_ENABLE_D1_DMA_DONE_EN(uint8_t value) volatile
    {
        uint32_t curr = INT_ENABLE_D1;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        INT_ENABLE_D1 = curr;
    }

    /**
     * Get INT_ENABLE_D1's DMA_ERR_EN field.
     *
     * Enable Interrupt flag to indicate that which PLANE has Read Error on the
     * AXI interface
     */
    inline uint8_t get_INT_ENABLE_D1_DMA_ERR_EN() volatile
    {
        return (INT_ENABLE_D1 >> 8u) & 0b11111111u;
    }

    /**
     * Set INT_ENABLE_D1's DMA_ERR_EN field.
     *
     * Enable Interrupt flag to indicate that which PLANE has Read Error on the
     * AXI interface
     */
    inline void set_INT_ENABLE_D1_DMA_ERR_EN(uint8_t value) volatile
    {
        uint32_t curr = INT_ENABLE_D1;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        INT_ENABLE_D1 = curr;
    }

    /**
     * Get INT_ENABLE_D1's VS_BLANK_EN bit.
     *
     * Enable Interrupt flag to indicate vertical blanking period
     */
    inline bool get_INT_ENABLE_D1_VS_BLANK_EN() volatile
    {
        return INT_ENABLE_D1 & (1u << 2u);
    }

    /**
     * Set INT_ENABLE_D1's VS_BLANK_EN bit.
     *
     * Enable Interrupt flag to indicate vertical blanking period
     */
    inline void set_INT_ENABLE_D1_VS_BLANK_EN() volatile
    {
        INT_ENABLE_D1 |= 1u << 2u;
    }

    /**
     * Clear INT_ENABLE_D1's VS_BLANK_EN bit.
     *
     * Enable Interrupt flag to indicate vertical blanking period
     */
    inline void clear_INT_ENABLE_D1_VS_BLANK_EN() volatile
    {
        INT_ENABLE_D1 &= ~(1u << 2u);
    }

    /**
     * Toggle INT_ENABLE_D1's VS_BLANK_EN bit.
     *
     * Enable Interrupt flag to indicate vertical blanking period
     */
    inline void toggle_INT_ENABLE_D1_VS_BLANK_EN() volatile
    {
        INT_ENABLE_D1 ^= 1u << 2u;
    }

    /**
     * Get INT_ENABLE_D1's UNDERRUN_EN bit.
     *
     * Enable Interrupt flag to indicate the output buffer underrun condition
     */
    inline bool get_INT_ENABLE_D1_UNDERRUN_EN() volatile
    {
        return INT_ENABLE_D1 & (1u << 1u);
    }

    /**
     * Set INT_ENABLE_D1's UNDERRUN_EN bit.
     *
     * Enable Interrupt flag to indicate the output buffer underrun condition
     */
    inline void set_INT_ENABLE_D1_UNDERRUN_EN() volatile
    {
        INT_ENABLE_D1 |= 1u << 1u;
    }

    /**
     * Clear INT_ENABLE_D1's UNDERRUN_EN bit.
     *
     * Enable Interrupt flag to indicate the output buffer underrun condition
     */
    inline void clear_INT_ENABLE_D1_UNDERRUN_EN() volatile
    {
        INT_ENABLE_D1 &= ~(1u << 1u);
    }

    /**
     * Toggle INT_ENABLE_D1's UNDERRUN_EN bit.
     *
     * Enable Interrupt flag to indicate the output buffer underrun condition
     */
    inline void toggle_INT_ENABLE_D1_UNDERRUN_EN() volatile
    {
        INT_ENABLE_D1 ^= 1u << 1u;
    }

    /**
     * Get INT_ENABLE_D1's VSYNC_EN bit.
     *
     * Enable Interrupt flag to indicate that the vertical synchronization
     * phase(The beginning of a frame)
     */
    inline bool get_INT_ENABLE_D1_VSYNC_EN() volatile
    {
        return INT_ENABLE_D1 & (1u << 0u);
    }

    /**
     * Set INT_ENABLE_D1's VSYNC_EN bit.
     *
     * Enable Interrupt flag to indicate that the vertical synchronization
     * phase(The beginning of a frame)
     */
    inline void set_INT_ENABLE_D1_VSYNC_EN() volatile
    {
        INT_ENABLE_D1 |= 1u << 0u;
    }

    /**
     * Clear INT_ENABLE_D1's VSYNC_EN bit.
     *
     * Enable Interrupt flag to indicate that the vertical synchronization
     * phase(The beginning of a frame)
     */
    inline void clear_INT_ENABLE_D1_VSYNC_EN() volatile
    {
        INT_ENABLE_D1 &= ~(1u << 0u);
    }

    /**
     * Toggle INT_ENABLE_D1's VSYNC_EN bit.
     *
     * Enable Interrupt flag to indicate that the vertical synchronization
     * phase(The beginning of a frame)
     */
    inline void toggle_INT_ENABLE_D1_VSYNC_EN() volatile
    {
        INT_ENABLE_D1 ^= 1u << 0u;
    }

    /**
     * Get all of INT_ENABLE_D1's bit fields.
     *
     * (read-write) Interrupt Enable Register for domain 1
     */
    inline void get_INT_ENABLE_D1(uint8_t &FIFO_EMPTY_EN, uint8_t &DMA_DONE_EN,
                                  uint8_t &DMA_ERR_EN, bool &VS_BLANK_EN,
                                  bool &UNDERRUN_EN, bool &VSYNC_EN) volatile
    {
        uint32_t curr = INT_ENABLE_D1;

        FIFO_EMPTY_EN = (curr >> 24u) & 0b11111111u;
        DMA_DONE_EN = (curr >> 16u) & 0b11111111u;
        DMA_ERR_EN = (curr >> 8u) & 0b11111111u;
        VS_BLANK_EN = curr & (1u << 2u);
        UNDERRUN_EN = curr & (1u << 1u);
        VSYNC_EN = curr & (1u << 0u);
    }

    /**
     * Set all of INT_ENABLE_D1's bit fields.
     *
     * (read-write) Interrupt Enable Register for domain 1
     */
    inline void set_INT_ENABLE_D1(uint8_t FIFO_EMPTY_EN, uint8_t DMA_DONE_EN,
                                  uint8_t DMA_ERR_EN, bool VS_BLANK_EN,
                                  bool UNDERRUN_EN, bool VSYNC_EN) volatile
    {
        uint32_t curr = INT_ENABLE_D1;

        curr &= ~(0b11111111u << 24u);
        curr |= (FIFO_EMPTY_EN & 0b11111111u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (DMA_DONE_EN & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (DMA_ERR_EN & 0b11111111u) << 8u;
        curr &= ~(0b1u << 2u);
        curr |= (VS_BLANK_EN & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (UNDERRUN_EN & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (VSYNC_EN & 0b1u) << 0u;

        INT_ENABLE_D1 = curr;
    }

    /**
     * Get PDI_PARA's PDI_EN bit.
     *
     * Enable PDI input data to LCDIFv2 display
     */
    inline bool get_PDI_PARA_PDI_EN() volatile
    {
        return PDI_PARA & (1u << 31u);
    }

    /**
     * Set PDI_PARA's PDI_EN bit.
     *
     * Enable PDI input data to LCDIFv2 display
     */
    inline void set_PDI_PARA_PDI_EN() volatile
    {
        PDI_PARA |= 1u << 31u;
    }

    /**
     * Clear PDI_PARA's PDI_EN bit.
     *
     * Enable PDI input data to LCDIFv2 display
     */
    inline void clear_PDI_PARA_PDI_EN() volatile
    {
        PDI_PARA &= ~(1u << 31u);
    }

    /**
     * Toggle PDI_PARA's PDI_EN bit.
     *
     * Enable PDI input data to LCDIFv2 display
     */
    inline void toggle_PDI_PARA_PDI_EN() volatile
    {
        PDI_PARA ^= 1u << 31u;
    }

    /**
     * Get PDI_PARA's PDI_SEL bit.
     *
     * PDI selected on LCDIFv2 plane number
     */
    inline bool get_PDI_PARA_PDI_SEL() volatile
    {
        return PDI_PARA & (1u << 30u);
    }

    /**
     * Set PDI_PARA's PDI_SEL bit.
     *
     * PDI selected on LCDIFv2 plane number
     */
    inline void set_PDI_PARA_PDI_SEL() volatile
    {
        PDI_PARA |= 1u << 30u;
    }

    /**
     * Clear PDI_PARA's PDI_SEL bit.
     *
     * PDI selected on LCDIFv2 plane number
     */
    inline void clear_PDI_PARA_PDI_SEL() volatile
    {
        PDI_PARA &= ~(1u << 30u);
    }

    /**
     * Toggle PDI_PARA's PDI_SEL bit.
     *
     * PDI selected on LCDIFv2 plane number
     */
    inline void toggle_PDI_PARA_PDI_SEL() volatile
    {
        PDI_PARA ^= 1u << 30u;
    }

    /**
     * Get PDI_PARA's MODE field.
     *
     * The PDI mode for input data format
     */
    inline LCDIFV2_PDI_PARA_MODE get_PDI_PARA_MODE() volatile
    {
        return LCDIFV2_PDI_PARA_MODE((PDI_PARA >> 4u) & 0b1111u);
    }

    /**
     * Set PDI_PARA's MODE field.
     *
     * The PDI mode for input data format
     */
    inline void set_PDI_PARA_MODE(LCDIFV2_PDI_PARA_MODE value) volatile
    {
        uint32_t curr = PDI_PARA;

        curr &= ~(0b1111u << 4u);
        curr |= (std::to_underlying(value) & 0b1111u) << 4u;

        PDI_PARA = curr;
    }

    /**
     * Get PDI_PARA's INV_PDI_PXCK bit.
     *
     * Polarity of PDI input Pixel Clock
     */
    inline bool get_PDI_PARA_INV_PDI_PXCK() volatile
    {
        return PDI_PARA & (1u << 3u);
    }

    /**
     * Set PDI_PARA's INV_PDI_PXCK bit.
     *
     * Polarity of PDI input Pixel Clock
     */
    inline void set_PDI_PARA_INV_PDI_PXCK() volatile
    {
        PDI_PARA |= 1u << 3u;
    }

    /**
     * Clear PDI_PARA's INV_PDI_PXCK bit.
     *
     * Polarity of PDI input Pixel Clock
     */
    inline void clear_PDI_PARA_INV_PDI_PXCK() volatile
    {
        PDI_PARA &= ~(1u << 3u);
    }

    /**
     * Toggle PDI_PARA's INV_PDI_PXCK bit.
     *
     * Polarity of PDI input Pixel Clock
     */
    inline void toggle_PDI_PARA_INV_PDI_PXCK() volatile
    {
        PDI_PARA ^= 1u << 3u;
    }

    /**
     * Get PDI_PARA's INV_PDI_DE bit.
     *
     * Polarity of PDI input Data Enable
     */
    inline bool get_PDI_PARA_INV_PDI_DE() volatile
    {
        return PDI_PARA & (1u << 2u);
    }

    /**
     * Set PDI_PARA's INV_PDI_DE bit.
     *
     * Polarity of PDI input Data Enable
     */
    inline void set_PDI_PARA_INV_PDI_DE() volatile
    {
        PDI_PARA |= 1u << 2u;
    }

    /**
     * Clear PDI_PARA's INV_PDI_DE bit.
     *
     * Polarity of PDI input Data Enable
     */
    inline void clear_PDI_PARA_INV_PDI_DE() volatile
    {
        PDI_PARA &= ~(1u << 2u);
    }

    /**
     * Toggle PDI_PARA's INV_PDI_DE bit.
     *
     * Polarity of PDI input Data Enable
     */
    inline void toggle_PDI_PARA_INV_PDI_DE() volatile
    {
        PDI_PARA ^= 1u << 2u;
    }

    /**
     * Get PDI_PARA's INV_PDI_VS bit.
     *
     * Polarity of PDI input VSYNC
     */
    inline bool get_PDI_PARA_INV_PDI_VS() volatile
    {
        return PDI_PARA & (1u << 1u);
    }

    /**
     * Set PDI_PARA's INV_PDI_VS bit.
     *
     * Polarity of PDI input VSYNC
     */
    inline void set_PDI_PARA_INV_PDI_VS() volatile
    {
        PDI_PARA |= 1u << 1u;
    }

    /**
     * Clear PDI_PARA's INV_PDI_VS bit.
     *
     * Polarity of PDI input VSYNC
     */
    inline void clear_PDI_PARA_INV_PDI_VS() volatile
    {
        PDI_PARA &= ~(1u << 1u);
    }

    /**
     * Toggle PDI_PARA's INV_PDI_VS bit.
     *
     * Polarity of PDI input VSYNC
     */
    inline void toggle_PDI_PARA_INV_PDI_VS() volatile
    {
        PDI_PARA ^= 1u << 1u;
    }

    /**
     * Get PDI_PARA's INV_PDI_HS bit.
     *
     * Polarity of PDI input HSYNC
     */
    inline bool get_PDI_PARA_INV_PDI_HS() volatile
    {
        return PDI_PARA & (1u << 0u);
    }

    /**
     * Set PDI_PARA's INV_PDI_HS bit.
     *
     * Polarity of PDI input HSYNC
     */
    inline void set_PDI_PARA_INV_PDI_HS() volatile
    {
        PDI_PARA |= 1u << 0u;
    }

    /**
     * Clear PDI_PARA's INV_PDI_HS bit.
     *
     * Polarity of PDI input HSYNC
     */
    inline void clear_PDI_PARA_INV_PDI_HS() volatile
    {
        PDI_PARA &= ~(1u << 0u);
    }

    /**
     * Toggle PDI_PARA's INV_PDI_HS bit.
     *
     * Polarity of PDI input HSYNC
     */
    inline void toggle_PDI_PARA_INV_PDI_HS() volatile
    {
        PDI_PARA ^= 1u << 0u;
    }

    /**
     * Get all of PDI_PARA's bit fields.
     *
     * (read-write) Parallel Data Interface Parameter Register
     */
    inline void get_PDI_PARA(bool &PDI_EN, bool &PDI_SEL,
                             LCDIFV2_PDI_PARA_MODE &MODE, bool &INV_PDI_PXCK,
                             bool &INV_PDI_DE, bool &INV_PDI_VS,
                             bool &INV_PDI_HS) volatile
    {
        uint32_t curr = PDI_PARA;

        PDI_EN = curr & (1u << 31u);
        PDI_SEL = curr & (1u << 30u);
        MODE = LCDIFV2_PDI_PARA_MODE((curr >> 4u) & 0b1111u);
        INV_PDI_PXCK = curr & (1u << 3u);
        INV_PDI_DE = curr & (1u << 2u);
        INV_PDI_VS = curr & (1u << 1u);
        INV_PDI_HS = curr & (1u << 0u);
    }

    /**
     * Set all of PDI_PARA's bit fields.
     *
     * (read-write) Parallel Data Interface Parameter Register
     */
    inline void set_PDI_PARA(bool PDI_EN, bool PDI_SEL,
                             LCDIFV2_PDI_PARA_MODE MODE, bool INV_PDI_PXCK,
                             bool INV_PDI_DE, bool INV_PDI_VS,
                             bool INV_PDI_HS) volatile
    {
        uint32_t curr = PDI_PARA;

        curr &= ~(0b1u << 31u);
        curr |= (PDI_EN & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (PDI_SEL & 0b1u) << 30u;
        curr &= ~(0b1111u << 4u);
        curr |= (std::to_underlying(MODE) & 0b1111u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (INV_PDI_PXCK & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INV_PDI_DE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INV_PDI_VS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (INV_PDI_HS & 0b1u) << 0u;

        PDI_PARA = curr;
    }

    /**
     * Get CTRLDESCL0_1's HEIGHT field.
     *
     * Height of the layer in pixels
     */
    inline uint16_t get_CTRLDESCL0_1_HEIGHT() volatile
    {
        return (CTRLDESCL0_1 >> 16u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL0_1's HEIGHT field.
     *
     * Height of the layer in pixels
     */
    inline void set_CTRLDESCL0_1_HEIGHT(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL0_1;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        CTRLDESCL0_1 = curr;
    }

    /**
     * Get CTRLDESCL0_1's WIDTH field.
     *
     * Width of the layer in pixels
     */
    inline uint16_t get_CTRLDESCL0_1_WIDTH() volatile
    {
        return (CTRLDESCL0_1 >> 0u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL0_1's WIDTH field.
     *
     * Width of the layer in pixels
     */
    inline void set_CTRLDESCL0_1_WIDTH(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL0_1;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        CTRLDESCL0_1 = curr;
    }

    /**
     * Get all of CTRLDESCL0_1's bit fields.
     *
     * (read-write) Control Descriptor Layer 1 Register
     */
    inline void get_CTRLDESCL0_1(uint16_t &HEIGHT, uint16_t &WIDTH) volatile
    {
        uint32_t curr = CTRLDESCL0_1;

        HEIGHT = (curr >> 16u) & 0b111111111111u;
        WIDTH = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of CTRLDESCL0_1's bit fields.
     *
     * (read-write) Control Descriptor Layer 1 Register
     */
    inline void set_CTRLDESCL0_1(uint16_t HEIGHT, uint16_t WIDTH) volatile
    {
        uint32_t curr = CTRLDESCL0_1;

        curr &= ~(0b111111111111u << 16u);
        curr |= (HEIGHT & 0b111111111111u) << 16u;
        curr &= ~(0b111111111111u << 0u);
        curr |= (WIDTH & 0b111111111111u) << 0u;

        CTRLDESCL0_1 = curr;
    }

    /**
     * Get CTRLDESCL0_2's POSY field.
     *
     * The vertical position of top row of the layer, where 0 is the top row of
     * the panel, only positive values are below the top row of the panel
     */
    inline uint16_t get_CTRLDESCL0_2_POSY() volatile
    {
        return (CTRLDESCL0_2 >> 16u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL0_2's POSY field.
     *
     * The vertical position of top row of the layer, where 0 is the top row of
     * the panel, only positive values are below the top row of the panel
     */
    inline void set_CTRLDESCL0_2_POSY(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL0_2;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        CTRLDESCL0_2 = curr;
    }

    /**
     * Get CTRLDESCL0_2's POSX field.
     *
     * The horizontal position of left-hand column of the layer, where 0 is the
     * left-hand column of the panel, only positive values are to the right the
     * left-hand column of the panel
     */
    inline uint16_t get_CTRLDESCL0_2_POSX() volatile
    {
        return (CTRLDESCL0_2 >> 0u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL0_2's POSX field.
     *
     * The horizontal position of left-hand column of the layer, where 0 is the
     * left-hand column of the panel, only positive values are to the right the
     * left-hand column of the panel
     */
    inline void set_CTRLDESCL0_2_POSX(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL0_2;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        CTRLDESCL0_2 = curr;
    }

    /**
     * Get all of CTRLDESCL0_2's bit fields.
     *
     * (read-write) Control Descriptor Layer 2 Register
     */
    inline void get_CTRLDESCL0_2(uint16_t &POSY, uint16_t &POSX) volatile
    {
        uint32_t curr = CTRLDESCL0_2;

        POSY = (curr >> 16u) & 0b111111111111u;
        POSX = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of CTRLDESCL0_2's bit fields.
     *
     * (read-write) Control Descriptor Layer 2 Register
     */
    inline void set_CTRLDESCL0_2(uint16_t POSY, uint16_t POSX) volatile
    {
        uint32_t curr = CTRLDESCL0_2;

        curr &= ~(0b111111111111u << 16u);
        curr |= (POSY & 0b111111111111u) << 16u;
        curr &= ~(0b111111111111u << 0u);
        curr |= (POSX & 0b111111111111u) << 0u;

        CTRLDESCL0_2 = curr;
    }

    /**
     * Get CTRLDESCL0_3's PITCH field.
     *
     * Number of bytes between 2 vertically adjacent pixels in system memory.
     * Byte granularity is supported, but SW should align to 64B boundry
     */
    inline uint16_t get_CTRLDESCL0_3_PITCH() volatile
    {
        return (CTRLDESCL0_3 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set CTRLDESCL0_3's PITCH field.
     *
     * Number of bytes between 2 vertically adjacent pixels in system memory.
     * Byte granularity is supported, but SW should align to 64B boundry
     */
    inline void set_CTRLDESCL0_3_PITCH(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL0_3;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        CTRLDESCL0_3 = curr;
    }

    /**
     * Get CTRLDESCL0_4's ADDR field.
     *
     * Address of layer data in the memory. The address programmed should be
     * 64-bit aligned
     */
    inline uint32_t get_CTRLDESCL0_4_ADDR() volatile
    {
        return (CTRLDESCL0_4 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set CTRLDESCL0_4's ADDR field.
     *
     * Address of layer data in the memory. The address programmed should be
     * 64-bit aligned
     */
    inline void set_CTRLDESCL0_4_ADDR(uint32_t value) volatile
    {
        uint32_t curr = CTRLDESCL0_4;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        CTRLDESCL0_4 = curr;
    }

    /**
     * Get CTRLDESCL0_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline bool get_CTRLDESCL0_5_EN() volatile
    {
        return CTRLDESCL0_5 & (1u << 31u);
    }

    /**
     * Set CTRLDESCL0_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void set_CTRLDESCL0_5_EN() volatile
    {
        CTRLDESCL0_5 |= 1u << 31u;
    }

    /**
     * Clear CTRLDESCL0_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void clear_CTRLDESCL0_5_EN() volatile
    {
        CTRLDESCL0_5 &= ~(1u << 31u);
    }

    /**
     * Toggle CTRLDESCL0_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void toggle_CTRLDESCL0_5_EN() volatile
    {
        CTRLDESCL0_5 ^= 1u << 31u;
    }

    /**
     * Get CTRLDESCL0_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline bool get_CTRLDESCL0_5_SHADOW_LOAD_EN() volatile
    {
        return CTRLDESCL0_5 & (1u << 30u);
    }

    /**
     * Set CTRLDESCL0_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void set_CTRLDESCL0_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL0_5 |= 1u << 30u;
    }

    /**
     * Clear CTRLDESCL0_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void clear_CTRLDESCL0_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL0_5 &= ~(1u << 30u);
    }

    /**
     * Toggle CTRLDESCL0_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void toggle_CTRLDESCL0_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL0_5 ^= 1u << 30u;
    }

    /**
     * Get CTRLDESCL0_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline bool get_CTRLDESCL0_5_SAFETY_EN() volatile
    {
        return CTRLDESCL0_5 & (1u << 28u);
    }

    /**
     * Set CTRLDESCL0_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void set_CTRLDESCL0_5_SAFETY_EN() volatile
    {
        CTRLDESCL0_5 |= 1u << 28u;
    }

    /**
     * Clear CTRLDESCL0_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void clear_CTRLDESCL0_5_SAFETY_EN() volatile
    {
        CTRLDESCL0_5 &= ~(1u << 28u);
    }

    /**
     * Toggle CTRLDESCL0_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void toggle_CTRLDESCL0_5_SAFETY_EN() volatile
    {
        CTRLDESCL0_5 ^= 1u << 28u;
    }

    /**
     * Get CTRLDESCL0_5's BPP field.
     *
     * Layer encoding format (bit per pixel)
     */
    inline LCDIFV2_CTRLDESCL0_5_BPP get_CTRLDESCL0_5_BPP() volatile
    {
        return LCDIFV2_CTRLDESCL0_5_BPP((CTRLDESCL0_5 >> 24u) & 0b1111u);
    }

    /**
     * Set CTRLDESCL0_5's BPP field.
     *
     * Layer encoding format (bit per pixel)
     */
    inline void set_CTRLDESCL0_5_BPP(LCDIFV2_CTRLDESCL0_5_BPP value) volatile
    {
        uint32_t curr = CTRLDESCL0_5;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        CTRLDESCL0_5 = curr;
    }

    /**
     * Get CTRLDESCL0_5's GLOBAL_ALPHA field.
     *
     * Global Alpha
     */
    inline uint8_t get_CTRLDESCL0_5_GLOBAL_ALPHA() volatile
    {
        return (CTRLDESCL0_5 >> 16u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL0_5's GLOBAL_ALPHA field.
     *
     * Global Alpha
     */
    inline void set_CTRLDESCL0_5_GLOBAL_ALPHA(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL0_5;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CTRLDESCL0_5 = curr;
    }

    /**
     * Get CTRLDESCL0_5's YUV_FORMAT field.
     *
     * The YUV422 input format selection
     */
    inline LCDIFV2_CTRLDESCL0_5_YUV_FORMAT
    get_CTRLDESCL0_5_YUV_FORMAT() volatile
    {
        return LCDIFV2_CTRLDESCL0_5_YUV_FORMAT((CTRLDESCL0_5 >> 14u) & 0b11u);
    }

    /**
     * Set CTRLDESCL0_5's YUV_FORMAT field.
     *
     * The YUV422 input format selection
     */
    inline void set_CTRLDESCL0_5_YUV_FORMAT(
        LCDIFV2_CTRLDESCL0_5_YUV_FORMAT value) volatile
    {
        uint32_t curr = CTRLDESCL0_5;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        CTRLDESCL0_5 = curr;
    }

    /**
     * Get CTRLDESCL0_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline bool get_CTRLDESCL0_5_PD_COLOR_MODE() volatile
    {
        return CTRLDESCL0_5 & (1u << 9u);
    }

    /**
     * Set CTRLDESCL0_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void set_CTRLDESCL0_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL0_5 |= 1u << 9u;
    }

    /**
     * Clear CTRLDESCL0_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void clear_CTRLDESCL0_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL0_5 &= ~(1u << 9u);
    }

    /**
     * Toggle CTRLDESCL0_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void toggle_CTRLDESCL0_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL0_5 ^= 1u << 9u;
    }

    /**
     * Get CTRLDESCL0_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline bool get_CTRLDESCL0_5_PD_ALPHA_MODE() volatile
    {
        return CTRLDESCL0_5 & (1u << 8u);
    }

    /**
     * Set CTRLDESCL0_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void set_CTRLDESCL0_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL0_5 |= 1u << 8u;
    }

    /**
     * Clear CTRLDESCL0_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void clear_CTRLDESCL0_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL0_5 &= ~(1u << 8u);
    }

    /**
     * Toggle CTRLDESCL0_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void toggle_CTRLDESCL0_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL0_5 ^= 1u << 8u;
    }

    /**
     * Get CTRLDESCL0_5's PD_GLOBAL_ALPHA_MODE field.
     *
     * PoterDuff global alpha mode
     */
    inline LCDIFV2_CTRLDESCL0_5_PD_GLOBAL_ALPHA_MODE
    get_CTRLDESCL0_5_PD_GLOBAL_ALPHA_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL0_5_PD_GLOBAL_ALPHA_MODE((CTRLDESCL0_5 >> 6u) &
                                                         0b11u);
    }

    /**
     * Set CTRLDESCL0_5's PD_GLOBAL_ALPHA_MODE field.
     *
     * PoterDuff global alpha mode
     */
    inline void set_CTRLDESCL0_5_PD_GLOBAL_ALPHA_MODE(
        LCDIFV2_CTRLDESCL0_5_PD_GLOBAL_ALPHA_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL0_5;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        CTRLDESCL0_5 = curr;
    }

    /**
     * Get CTRLDESCL0_5's PD_FACTOR_MODE field.
     *
     * PoterDuff factor mode
     */
    inline LCDIFV2_CTRLDESCL0_5_PD_FACTOR_MODE
    get_CTRLDESCL0_5_PD_FACTOR_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL0_5_PD_FACTOR_MODE((CTRLDESCL0_5 >> 4u) &
                                                   0b11u);
    }

    /**
     * Set CTRLDESCL0_5's PD_FACTOR_MODE field.
     *
     * PoterDuff factor mode
     */
    inline void set_CTRLDESCL0_5_PD_FACTOR_MODE(
        LCDIFV2_CTRLDESCL0_5_PD_FACTOR_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL0_5;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        CTRLDESCL0_5 = curr;
    }

    /**
     * Get CTRLDESCL0_5's AB_MODE field.
     *
     * Alpha Blending Mode
     */
    inline LCDIFV2_CTRLDESCL0_5_AB_MODE get_CTRLDESCL0_5_AB_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL0_5_AB_MODE((CTRLDESCL0_5 >> 0u) & 0b11u);
    }

    /**
     * Set CTRLDESCL0_5's AB_MODE field.
     *
     * Alpha Blending Mode
     */
    inline void set_CTRLDESCL0_5_AB_MODE(
        LCDIFV2_CTRLDESCL0_5_AB_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL0_5;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        CTRLDESCL0_5 = curr;
    }

    /**
     * Get all of CTRLDESCL0_5's bit fields.
     *
     * (read-write) Control Descriptor Layer 5 Register
     */
    inline void get_CTRLDESCL0_5(
        bool &EN, bool &SHADOW_LOAD_EN, bool &SAFETY_EN,
        LCDIFV2_CTRLDESCL0_5_BPP &BPP, uint8_t &GLOBAL_ALPHA,
        LCDIFV2_CTRLDESCL0_5_YUV_FORMAT &YUV_FORMAT, bool &PD_COLOR_MODE,
        bool &PD_ALPHA_MODE,
        LCDIFV2_CTRLDESCL0_5_PD_GLOBAL_ALPHA_MODE &PD_GLOBAL_ALPHA_MODE,
        LCDIFV2_CTRLDESCL0_5_PD_FACTOR_MODE &PD_FACTOR_MODE,
        LCDIFV2_CTRLDESCL0_5_AB_MODE &AB_MODE) volatile
    {
        uint32_t curr = CTRLDESCL0_5;

        EN = curr & (1u << 31u);
        SHADOW_LOAD_EN = curr & (1u << 30u);
        SAFETY_EN = curr & (1u << 28u);
        BPP = LCDIFV2_CTRLDESCL0_5_BPP((curr >> 24u) & 0b1111u);
        GLOBAL_ALPHA = (curr >> 16u) & 0b11111111u;
        YUV_FORMAT = LCDIFV2_CTRLDESCL0_5_YUV_FORMAT((curr >> 14u) & 0b11u);
        PD_COLOR_MODE = curr & (1u << 9u);
        PD_ALPHA_MODE = curr & (1u << 8u);
        PD_GLOBAL_ALPHA_MODE =
            LCDIFV2_CTRLDESCL0_5_PD_GLOBAL_ALPHA_MODE((curr >> 6u) & 0b11u);
        PD_FACTOR_MODE =
            LCDIFV2_CTRLDESCL0_5_PD_FACTOR_MODE((curr >> 4u) & 0b11u);
        AB_MODE = LCDIFV2_CTRLDESCL0_5_AB_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of CTRLDESCL0_5's bit fields.
     *
     * (read-write) Control Descriptor Layer 5 Register
     */
    inline void set_CTRLDESCL0_5(
        bool EN, bool SHADOW_LOAD_EN, bool SAFETY_EN,
        LCDIFV2_CTRLDESCL0_5_BPP BPP, uint8_t GLOBAL_ALPHA,
        LCDIFV2_CTRLDESCL0_5_YUV_FORMAT YUV_FORMAT, bool PD_COLOR_MODE,
        bool PD_ALPHA_MODE,
        LCDIFV2_CTRLDESCL0_5_PD_GLOBAL_ALPHA_MODE PD_GLOBAL_ALPHA_MODE,
        LCDIFV2_CTRLDESCL0_5_PD_FACTOR_MODE PD_FACTOR_MODE,
        LCDIFV2_CTRLDESCL0_5_AB_MODE AB_MODE) volatile
    {
        uint32_t curr = CTRLDESCL0_5;

        curr &= ~(0b1u << 31u);
        curr |= (EN & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (SHADOW_LOAD_EN & 0b1u) << 30u;
        curr &= ~(0b1u << 28u);
        curr |= (SAFETY_EN & 0b1u) << 28u;
        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(BPP) & 0b1111u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (GLOBAL_ALPHA & 0b11111111u) << 16u;
        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(YUV_FORMAT) & 0b11u) << 14u;
        curr &= ~(0b1u << 9u);
        curr |= (PD_COLOR_MODE & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (PD_ALPHA_MODE & 0b1u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(PD_GLOBAL_ALPHA_MODE) & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(PD_FACTOR_MODE) & 0b11u) << 4u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(AB_MODE) & 0b11u) << 0u;

        CTRLDESCL0_5 = curr;
    }

    /**
     * Get CTRLDESCL0_6's BCLR_R field.
     *
     * Background R component value
     */
    inline uint8_t get_CTRLDESCL0_6_BCLR_R() volatile
    {
        return (CTRLDESCL0_6 >> 16u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL0_6's BCLR_R field.
     *
     * Background R component value
     */
    inline void set_CTRLDESCL0_6_BCLR_R(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL0_6;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CTRLDESCL0_6 = curr;
    }

    /**
     * Get CTRLDESCL0_6's BCLR_G field.
     *
     * Background G component value
     */
    inline uint8_t get_CTRLDESCL0_6_BCLR_G() volatile
    {
        return (CTRLDESCL0_6 >> 8u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL0_6's BCLR_G field.
     *
     * Background G component value
     */
    inline void set_CTRLDESCL0_6_BCLR_G(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL0_6;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        CTRLDESCL0_6 = curr;
    }

    /**
     * Get CTRLDESCL0_6's BCLR_B field.
     *
     * Background B component value
     */
    inline uint8_t get_CTRLDESCL0_6_BCLR_B() volatile
    {
        return (CTRLDESCL0_6 >> 0u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL0_6's BCLR_B field.
     *
     * Background B component value
     */
    inline void set_CTRLDESCL0_6_BCLR_B(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL0_6;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        CTRLDESCL0_6 = curr;
    }

    /**
     * Get all of CTRLDESCL0_6's bit fields.
     *
     * (read-write) Control Descriptor Layer 6 Register
     */
    inline void get_CTRLDESCL0_6(uint8_t &BCLR_R, uint8_t &BCLR_G,
                                 uint8_t &BCLR_B) volatile
    {
        uint32_t curr = CTRLDESCL0_6;

        BCLR_R = (curr >> 16u) & 0b11111111u;
        BCLR_G = (curr >> 8u) & 0b11111111u;
        BCLR_B = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of CTRLDESCL0_6's bit fields.
     *
     * (read-write) Control Descriptor Layer 6 Register
     */
    inline void set_CTRLDESCL0_6(uint8_t BCLR_R, uint8_t BCLR_G,
                                 uint8_t BCLR_B) volatile
    {
        uint32_t curr = CTRLDESCL0_6;

        curr &= ~(0b11111111u << 16u);
        curr |= (BCLR_R & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (BCLR_G & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (BCLR_B & 0b11111111u) << 0u;

        CTRLDESCL0_6 = curr;
    }

    /**
     * Get CSC0_COEF0's YCBCR_MODE bit.
     *
     * This bit changes the behavior when performing U/V converting
     */
    inline bool get_CSC0_COEF0_YCBCR_MODE() volatile
    {
        return CSC0_COEF0 & (1u << 31u);
    }

    /**
     * Set CSC0_COEF0's YCBCR_MODE bit.
     *
     * This bit changes the behavior when performing U/V converting
     */
    inline void set_CSC0_COEF0_YCBCR_MODE() volatile
    {
        CSC0_COEF0 |= 1u << 31u;
    }

    /**
     * Clear CSC0_COEF0's YCBCR_MODE bit.
     *
     * This bit changes the behavior when performing U/V converting
     */
    inline void clear_CSC0_COEF0_YCBCR_MODE() volatile
    {
        CSC0_COEF0 &= ~(1u << 31u);
    }

    /**
     * Toggle CSC0_COEF0's YCBCR_MODE bit.
     *
     * This bit changes the behavior when performing U/V converting
     */
    inline void toggle_CSC0_COEF0_YCBCR_MODE() volatile
    {
        CSC0_COEF0 ^= 1u << 31u;
    }

    /**
     * Get CSC0_COEF0's ENABLE bit.
     *
     * Enable the CSC unit in the LCDIFv2 plane data path
     */
    inline bool get_CSC0_COEF0_ENABLE() volatile
    {
        return CSC0_COEF0 & (1u << 30u);
    }

    /**
     * Set CSC0_COEF0's ENABLE bit.
     *
     * Enable the CSC unit in the LCDIFv2 plane data path
     */
    inline void set_CSC0_COEF0_ENABLE() volatile
    {
        CSC0_COEF0 |= 1u << 30u;
    }

    /**
     * Clear CSC0_COEF0's ENABLE bit.
     *
     * Enable the CSC unit in the LCDIFv2 plane data path
     */
    inline void clear_CSC0_COEF0_ENABLE() volatile
    {
        CSC0_COEF0 &= ~(1u << 30u);
    }

    /**
     * Toggle CSC0_COEF0's ENABLE bit.
     *
     * Enable the CSC unit in the LCDIFv2 plane data path
     */
    inline void toggle_CSC0_COEF0_ENABLE() volatile
    {
        CSC0_COEF0 ^= 1u << 30u;
    }

    /**
     * Get CSC0_COEF0's C0 field.
     *
     * Two's compliment Y multiplier coefficient. YUV=0x100 (1.000) YCbCr=0x12A
     * (1.164)
     */
    inline uint16_t get_CSC0_COEF0_C0() volatile
    {
        return (CSC0_COEF0 >> 18u) & 0b11111111111u;
    }

    /**
     * Set CSC0_COEF0's C0 field.
     *
     * Two's compliment Y multiplier coefficient. YUV=0x100 (1.000) YCbCr=0x12A
     * (1.164)
     */
    inline void set_CSC0_COEF0_C0(uint16_t value) volatile
    {
        uint32_t curr = CSC0_COEF0;

        curr &= ~(0b11111111111u << 18u);
        curr |= (value & 0b11111111111u) << 18u;

        CSC0_COEF0 = curr;
    }

    /**
     * Get CSC0_COEF0's UV_OFFSET field.
     *
     * Two's compliment phase offset implicit for CbCr data. Generally used for
     * YCbCr to RGB conversion. YCbCr=0x180, YUV=0x000 (typically -128 or 0x180
     * to indicate normalized -0.5 to 0.5 range)
     */
    inline uint16_t get_CSC0_COEF0_UV_OFFSET() volatile
    {
        return (CSC0_COEF0 >> 9u) & 0b111111111u;
    }

    /**
     * Set CSC0_COEF0's UV_OFFSET field.
     *
     * Two's compliment phase offset implicit for CbCr data. Generally used for
     * YCbCr to RGB conversion. YCbCr=0x180, YUV=0x000 (typically -128 or 0x180
     * to indicate normalized -0.5 to 0.5 range)
     */
    inline void set_CSC0_COEF0_UV_OFFSET(uint16_t value) volatile
    {
        uint32_t curr = CSC0_COEF0;

        curr &= ~(0b111111111u << 9u);
        curr |= (value & 0b111111111u) << 9u;

        CSC0_COEF0 = curr;
    }

    /**
     * Get CSC0_COEF0's Y_OFFSET field.
     *
     * Two's compliment amplitude offset implicit in the Y data. For YUV, this
     * is typically 0 and for YCbCr, this is typically -16 (0x1F0)
     */
    inline uint16_t get_CSC0_COEF0_Y_OFFSET() volatile
    {
        return (CSC0_COEF0 >> 0u) & 0b111111111u;
    }

    /**
     * Set CSC0_COEF0's Y_OFFSET field.
     *
     * Two's compliment amplitude offset implicit in the Y data. For YUV, this
     * is typically 0 and for YCbCr, this is typically -16 (0x1F0)
     */
    inline void set_CSC0_COEF0_Y_OFFSET(uint16_t value) volatile
    {
        uint32_t curr = CSC0_COEF0;

        curr &= ~(0b111111111u << 0u);
        curr |= (value & 0b111111111u) << 0u;

        CSC0_COEF0 = curr;
    }

    /**
     * Get all of CSC0_COEF0's bit fields.
     *
     * (read-write) Color Space Conversion Coefficient Register 0
     */
    inline void get_CSC0_COEF0(bool &YCBCR_MODE, bool &ENABLE, uint16_t &C0,
                               uint16_t &UV_OFFSET,
                               uint16_t &Y_OFFSET) volatile
    {
        uint32_t curr = CSC0_COEF0;

        YCBCR_MODE = curr & (1u << 31u);
        ENABLE = curr & (1u << 30u);
        C0 = (curr >> 18u) & 0b11111111111u;
        UV_OFFSET = (curr >> 9u) & 0b111111111u;
        Y_OFFSET = (curr >> 0u) & 0b111111111u;
    }

    /**
     * Set all of CSC0_COEF0's bit fields.
     *
     * (read-write) Color Space Conversion Coefficient Register 0
     */
    inline void set_CSC0_COEF0(bool YCBCR_MODE, bool ENABLE, uint16_t C0,
                               uint16_t UV_OFFSET, uint16_t Y_OFFSET) volatile
    {
        uint32_t curr = CSC0_COEF0;

        curr &= ~(0b1u << 31u);
        curr |= (YCBCR_MODE & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (ENABLE & 0b1u) << 30u;
        curr &= ~(0b11111111111u << 18u);
        curr |= (C0 & 0b11111111111u) << 18u;
        curr &= ~(0b111111111u << 9u);
        curr |= (UV_OFFSET & 0b111111111u) << 9u;
        curr &= ~(0b111111111u << 0u);
        curr |= (Y_OFFSET & 0b111111111u) << 0u;

        CSC0_COEF0 = curr;
    }

    /**
     * Get CSC0_COEF1's C1 field.
     *
     * Two's compliment Red V/Cr multiplier coefficient. YUV=0x123 (1.140)
     * YCbCr=0x198 (1.596)
     */
    inline uint16_t get_CSC0_COEF1_C1() volatile
    {
        return (CSC0_COEF1 >> 16u) & 0b11111111111u;
    }

    /**
     * Set CSC0_COEF1's C1 field.
     *
     * Two's compliment Red V/Cr multiplier coefficient. YUV=0x123 (1.140)
     * YCbCr=0x198 (1.596)
     */
    inline void set_CSC0_COEF1_C1(uint16_t value) volatile
    {
        uint32_t curr = CSC0_COEF1;

        curr &= ~(0b11111111111u << 16u);
        curr |= (value & 0b11111111111u) << 16u;

        CSC0_COEF1 = curr;
    }

    /**
     * Get CSC0_COEF1's C4 field.
     *
     * Two's compliment Blue U/Cb multiplier coefficient. YUV=0x208 (2.032)
     * YCbCr=0x204 (2.017)
     */
    inline uint16_t get_CSC0_COEF1_C4() volatile
    {
        return (CSC0_COEF1 >> 0u) & 0b11111111111u;
    }

    /**
     * Set CSC0_COEF1's C4 field.
     *
     * Two's compliment Blue U/Cb multiplier coefficient. YUV=0x208 (2.032)
     * YCbCr=0x204 (2.017)
     */
    inline void set_CSC0_COEF1_C4(uint16_t value) volatile
    {
        uint32_t curr = CSC0_COEF1;

        curr &= ~(0b11111111111u << 0u);
        curr |= (value & 0b11111111111u) << 0u;

        CSC0_COEF1 = curr;
    }

    /**
     * Get all of CSC0_COEF1's bit fields.
     *
     * (read-write) Color Space Conversion Coefficient Register 1
     */
    inline void get_CSC0_COEF1(uint16_t &C1, uint16_t &C4) volatile
    {
        uint32_t curr = CSC0_COEF1;

        C1 = (curr >> 16u) & 0b11111111111u;
        C4 = (curr >> 0u) & 0b11111111111u;
    }

    /**
     * Set all of CSC0_COEF1's bit fields.
     *
     * (read-write) Color Space Conversion Coefficient Register 1
     */
    inline void set_CSC0_COEF1(uint16_t C1, uint16_t C4) volatile
    {
        uint32_t curr = CSC0_COEF1;

        curr &= ~(0b11111111111u << 16u);
        curr |= (C1 & 0b11111111111u) << 16u;
        curr &= ~(0b11111111111u << 0u);
        curr |= (C4 & 0b11111111111u) << 0u;

        CSC0_COEF1 = curr;
    }

    /**
     * Get CSC0_COEF2's C2 field.
     *
     * Two's compliment Green V/Cr multiplier coefficient. YUV=0x76B (-0.581)
     * YCbCr=0x730 (-0.813)
     */
    inline uint16_t get_CSC0_COEF2_C2() volatile
    {
        return (CSC0_COEF2 >> 16u) & 0b11111111111u;
    }

    /**
     * Set CSC0_COEF2's C2 field.
     *
     * Two's compliment Green V/Cr multiplier coefficient. YUV=0x76B (-0.581)
     * YCbCr=0x730 (-0.813)
     */
    inline void set_CSC0_COEF2_C2(uint16_t value) volatile
    {
        uint32_t curr = CSC0_COEF2;

        curr &= ~(0b11111111111u << 16u);
        curr |= (value & 0b11111111111u) << 16u;

        CSC0_COEF2 = curr;
    }

    /**
     * Get CSC0_COEF2's C3 field.
     *
     * Two's compliment Green U/Cb multiplier coefficient. YUV=0x79C (-0.394)
     * YCbCr=0x79C (-0.392)
     */
    inline uint16_t get_CSC0_COEF2_C3() volatile
    {
        return (CSC0_COEF2 >> 0u) & 0b11111111111u;
    }

    /**
     * Set CSC0_COEF2's C3 field.
     *
     * Two's compliment Green U/Cb multiplier coefficient. YUV=0x79C (-0.394)
     * YCbCr=0x79C (-0.392)
     */
    inline void set_CSC0_COEF2_C3(uint16_t value) volatile
    {
        uint32_t curr = CSC0_COEF2;

        curr &= ~(0b11111111111u << 0u);
        curr |= (value & 0b11111111111u) << 0u;

        CSC0_COEF2 = curr;
    }

    /**
     * Get all of CSC0_COEF2's bit fields.
     *
     * (read-write) Color Space Conversion Coefficient Register 2
     */
    inline void get_CSC0_COEF2(uint16_t &C2, uint16_t &C3) volatile
    {
        uint32_t curr = CSC0_COEF2;

        C2 = (curr >> 16u) & 0b11111111111u;
        C3 = (curr >> 0u) & 0b11111111111u;
    }

    /**
     * Set all of CSC0_COEF2's bit fields.
     *
     * (read-write) Color Space Conversion Coefficient Register 2
     */
    inline void set_CSC0_COEF2(uint16_t C2, uint16_t C3) volatile
    {
        uint32_t curr = CSC0_COEF2;

        curr &= ~(0b11111111111u << 16u);
        curr |= (C2 & 0b11111111111u) << 16u;
        curr &= ~(0b11111111111u << 0u);
        curr |= (C3 & 0b11111111111u) << 0u;

        CSC0_COEF2 = curr;
    }

    /**
     * Get CTRLDESCL1_1's HEIGHT field.
     *
     * Height of the layer in pixels
     */
    inline uint16_t get_CTRLDESCL1_1_HEIGHT() volatile
    {
        return (CTRLDESCL1_1 >> 16u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL1_1's HEIGHT field.
     *
     * Height of the layer in pixels
     */
    inline void set_CTRLDESCL1_1_HEIGHT(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL1_1;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        CTRLDESCL1_1 = curr;
    }

    /**
     * Get CTRLDESCL1_1's WIDTH field.
     *
     * Width of the layer in pixels
     */
    inline uint16_t get_CTRLDESCL1_1_WIDTH() volatile
    {
        return (CTRLDESCL1_1 >> 0u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL1_1's WIDTH field.
     *
     * Width of the layer in pixels
     */
    inline void set_CTRLDESCL1_1_WIDTH(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL1_1;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        CTRLDESCL1_1 = curr;
    }

    /**
     * Get all of CTRLDESCL1_1's bit fields.
     *
     * (read-write) Control Descriptor Layer 1 Register
     */
    inline void get_CTRLDESCL1_1(uint16_t &HEIGHT, uint16_t &WIDTH) volatile
    {
        uint32_t curr = CTRLDESCL1_1;

        HEIGHT = (curr >> 16u) & 0b111111111111u;
        WIDTH = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of CTRLDESCL1_1's bit fields.
     *
     * (read-write) Control Descriptor Layer 1 Register
     */
    inline void set_CTRLDESCL1_1(uint16_t HEIGHT, uint16_t WIDTH) volatile
    {
        uint32_t curr = CTRLDESCL1_1;

        curr &= ~(0b111111111111u << 16u);
        curr |= (HEIGHT & 0b111111111111u) << 16u;
        curr &= ~(0b111111111111u << 0u);
        curr |= (WIDTH & 0b111111111111u) << 0u;

        CTRLDESCL1_1 = curr;
    }

    /**
     * Get CTRLDESCL1_2's POSY field.
     *
     * The vertical position of top row of the layer, where 0 is the top row of
     * the panel, only positive values are below the top row of the panel
     */
    inline uint16_t get_CTRLDESCL1_2_POSY() volatile
    {
        return (CTRLDESCL1_2 >> 16u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL1_2's POSY field.
     *
     * The vertical position of top row of the layer, where 0 is the top row of
     * the panel, only positive values are below the top row of the panel
     */
    inline void set_CTRLDESCL1_2_POSY(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL1_2;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        CTRLDESCL1_2 = curr;
    }

    /**
     * Get CTRLDESCL1_2's POSX field.
     *
     * The horizontal position of left-hand column of the layer, where 0 is the
     * left-hand column of the panel, only positive values are to the right the
     * left-hand column of the panel
     */
    inline uint16_t get_CTRLDESCL1_2_POSX() volatile
    {
        return (CTRLDESCL1_2 >> 0u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL1_2's POSX field.
     *
     * The horizontal position of left-hand column of the layer, where 0 is the
     * left-hand column of the panel, only positive values are to the right the
     * left-hand column of the panel
     */
    inline void set_CTRLDESCL1_2_POSX(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL1_2;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        CTRLDESCL1_2 = curr;
    }

    /**
     * Get all of CTRLDESCL1_2's bit fields.
     *
     * (read-write) Control Descriptor Layer 2 Register
     */
    inline void get_CTRLDESCL1_2(uint16_t &POSY, uint16_t &POSX) volatile
    {
        uint32_t curr = CTRLDESCL1_2;

        POSY = (curr >> 16u) & 0b111111111111u;
        POSX = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of CTRLDESCL1_2's bit fields.
     *
     * (read-write) Control Descriptor Layer 2 Register
     */
    inline void set_CTRLDESCL1_2(uint16_t POSY, uint16_t POSX) volatile
    {
        uint32_t curr = CTRLDESCL1_2;

        curr &= ~(0b111111111111u << 16u);
        curr |= (POSY & 0b111111111111u) << 16u;
        curr &= ~(0b111111111111u << 0u);
        curr |= (POSX & 0b111111111111u) << 0u;

        CTRLDESCL1_2 = curr;
    }

    /**
     * Get CTRLDESCL1_3's PITCH field.
     *
     * Number of bytes between 2 vertically adjacent pixels in system memory.
     * Byte granularity is supported, but SW should align to 64B boundry
     */
    inline uint16_t get_CTRLDESCL1_3_PITCH() volatile
    {
        return (CTRLDESCL1_3 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set CTRLDESCL1_3's PITCH field.
     *
     * Number of bytes between 2 vertically adjacent pixels in system memory.
     * Byte granularity is supported, but SW should align to 64B boundry
     */
    inline void set_CTRLDESCL1_3_PITCH(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL1_3;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        CTRLDESCL1_3 = curr;
    }

    /**
     * Get CTRLDESCL1_4's ADDR field.
     *
     * Address of layer data in the memory. The address programmed should be
     * 64-bit aligned
     */
    inline uint32_t get_CTRLDESCL1_4_ADDR() volatile
    {
        return (CTRLDESCL1_4 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set CTRLDESCL1_4's ADDR field.
     *
     * Address of layer data in the memory. The address programmed should be
     * 64-bit aligned
     */
    inline void set_CTRLDESCL1_4_ADDR(uint32_t value) volatile
    {
        uint32_t curr = CTRLDESCL1_4;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        CTRLDESCL1_4 = curr;
    }

    /**
     * Get CTRLDESCL1_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline bool get_CTRLDESCL1_5_EN() volatile
    {
        return CTRLDESCL1_5 & (1u << 31u);
    }

    /**
     * Set CTRLDESCL1_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void set_CTRLDESCL1_5_EN() volatile
    {
        CTRLDESCL1_5 |= 1u << 31u;
    }

    /**
     * Clear CTRLDESCL1_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void clear_CTRLDESCL1_5_EN() volatile
    {
        CTRLDESCL1_5 &= ~(1u << 31u);
    }

    /**
     * Toggle CTRLDESCL1_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void toggle_CTRLDESCL1_5_EN() volatile
    {
        CTRLDESCL1_5 ^= 1u << 31u;
    }

    /**
     * Get CTRLDESCL1_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline bool get_CTRLDESCL1_5_SHADOW_LOAD_EN() volatile
    {
        return CTRLDESCL1_5 & (1u << 30u);
    }

    /**
     * Set CTRLDESCL1_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void set_CTRLDESCL1_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL1_5 |= 1u << 30u;
    }

    /**
     * Clear CTRLDESCL1_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void clear_CTRLDESCL1_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL1_5 &= ~(1u << 30u);
    }

    /**
     * Toggle CTRLDESCL1_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void toggle_CTRLDESCL1_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL1_5 ^= 1u << 30u;
    }

    /**
     * Get CTRLDESCL1_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline bool get_CTRLDESCL1_5_SAFETY_EN() volatile
    {
        return CTRLDESCL1_5 & (1u << 28u);
    }

    /**
     * Set CTRLDESCL1_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void set_CTRLDESCL1_5_SAFETY_EN() volatile
    {
        CTRLDESCL1_5 |= 1u << 28u;
    }

    /**
     * Clear CTRLDESCL1_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void clear_CTRLDESCL1_5_SAFETY_EN() volatile
    {
        CTRLDESCL1_5 &= ~(1u << 28u);
    }

    /**
     * Toggle CTRLDESCL1_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void toggle_CTRLDESCL1_5_SAFETY_EN() volatile
    {
        CTRLDESCL1_5 ^= 1u << 28u;
    }

    /**
     * Get CTRLDESCL1_5's BPP field.
     *
     * Layer encoding format (bit per pixel)
     */
    inline LCDIFV2_CTRLDESCL1_5_BPP get_CTRLDESCL1_5_BPP() volatile
    {
        return LCDIFV2_CTRLDESCL1_5_BPP((CTRLDESCL1_5 >> 24u) & 0b1111u);
    }

    /**
     * Set CTRLDESCL1_5's BPP field.
     *
     * Layer encoding format (bit per pixel)
     */
    inline void set_CTRLDESCL1_5_BPP(LCDIFV2_CTRLDESCL1_5_BPP value) volatile
    {
        uint32_t curr = CTRLDESCL1_5;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        CTRLDESCL1_5 = curr;
    }

    /**
     * Get CTRLDESCL1_5's GLOBAL_ALPHA field.
     *
     * Global Alpha
     */
    inline uint8_t get_CTRLDESCL1_5_GLOBAL_ALPHA() volatile
    {
        return (CTRLDESCL1_5 >> 16u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL1_5's GLOBAL_ALPHA field.
     *
     * Global Alpha
     */
    inline void set_CTRLDESCL1_5_GLOBAL_ALPHA(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL1_5;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CTRLDESCL1_5 = curr;
    }

    /**
     * Get CTRLDESCL1_5's YUV_FORMAT field.
     *
     * The YUV422 input format selection
     */
    inline LCDIFV2_CTRLDESCL1_5_YUV_FORMAT
    get_CTRLDESCL1_5_YUV_FORMAT() volatile
    {
        return LCDIFV2_CTRLDESCL1_5_YUV_FORMAT((CTRLDESCL1_5 >> 14u) & 0b11u);
    }

    /**
     * Set CTRLDESCL1_5's YUV_FORMAT field.
     *
     * The YUV422 input format selection
     */
    inline void set_CTRLDESCL1_5_YUV_FORMAT(
        LCDIFV2_CTRLDESCL1_5_YUV_FORMAT value) volatile
    {
        uint32_t curr = CTRLDESCL1_5;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        CTRLDESCL1_5 = curr;
    }

    /**
     * Get CTRLDESCL1_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline bool get_CTRLDESCL1_5_PD_COLOR_MODE() volatile
    {
        return CTRLDESCL1_5 & (1u << 9u);
    }

    /**
     * Set CTRLDESCL1_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void set_CTRLDESCL1_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL1_5 |= 1u << 9u;
    }

    /**
     * Clear CTRLDESCL1_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void clear_CTRLDESCL1_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL1_5 &= ~(1u << 9u);
    }

    /**
     * Toggle CTRLDESCL1_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void toggle_CTRLDESCL1_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL1_5 ^= 1u << 9u;
    }

    /**
     * Get CTRLDESCL1_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline bool get_CTRLDESCL1_5_PD_ALPHA_MODE() volatile
    {
        return CTRLDESCL1_5 & (1u << 8u);
    }

    /**
     * Set CTRLDESCL1_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void set_CTRLDESCL1_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL1_5 |= 1u << 8u;
    }

    /**
     * Clear CTRLDESCL1_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void clear_CTRLDESCL1_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL1_5 &= ~(1u << 8u);
    }

    /**
     * Toggle CTRLDESCL1_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void toggle_CTRLDESCL1_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL1_5 ^= 1u << 8u;
    }

    /**
     * Get CTRLDESCL1_5's PD_GLOBAL_ALPHA_MODE field.
     *
     * PoterDuff global alpha mode
     */
    inline LCDIFV2_CTRLDESCL1_5_PD_GLOBAL_ALPHA_MODE
    get_CTRLDESCL1_5_PD_GLOBAL_ALPHA_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL1_5_PD_GLOBAL_ALPHA_MODE((CTRLDESCL1_5 >> 6u) &
                                                         0b11u);
    }

    /**
     * Set CTRLDESCL1_5's PD_GLOBAL_ALPHA_MODE field.
     *
     * PoterDuff global alpha mode
     */
    inline void set_CTRLDESCL1_5_PD_GLOBAL_ALPHA_MODE(
        LCDIFV2_CTRLDESCL1_5_PD_GLOBAL_ALPHA_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL1_5;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        CTRLDESCL1_5 = curr;
    }

    /**
     * Get CTRLDESCL1_5's PD_FACTOR_MODE field.
     *
     * PoterDuff factor mode
     */
    inline LCDIFV2_CTRLDESCL1_5_PD_FACTOR_MODE
    get_CTRLDESCL1_5_PD_FACTOR_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL1_5_PD_FACTOR_MODE((CTRLDESCL1_5 >> 4u) &
                                                   0b11u);
    }

    /**
     * Set CTRLDESCL1_5's PD_FACTOR_MODE field.
     *
     * PoterDuff factor mode
     */
    inline void set_CTRLDESCL1_5_PD_FACTOR_MODE(
        LCDIFV2_CTRLDESCL1_5_PD_FACTOR_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL1_5;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        CTRLDESCL1_5 = curr;
    }

    /**
     * Get CTRLDESCL1_5's AB_MODE field.
     *
     * Alpha Blending Mode
     */
    inline LCDIFV2_CTRLDESCL1_5_AB_MODE get_CTRLDESCL1_5_AB_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL1_5_AB_MODE((CTRLDESCL1_5 >> 0u) & 0b11u);
    }

    /**
     * Set CTRLDESCL1_5's AB_MODE field.
     *
     * Alpha Blending Mode
     */
    inline void set_CTRLDESCL1_5_AB_MODE(
        LCDIFV2_CTRLDESCL1_5_AB_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL1_5;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        CTRLDESCL1_5 = curr;
    }

    /**
     * Get all of CTRLDESCL1_5's bit fields.
     *
     * (read-write) Control Descriptor Layer 5 Register
     */
    inline void get_CTRLDESCL1_5(
        bool &EN, bool &SHADOW_LOAD_EN, bool &SAFETY_EN,
        LCDIFV2_CTRLDESCL1_5_BPP &BPP, uint8_t &GLOBAL_ALPHA,
        LCDIFV2_CTRLDESCL1_5_YUV_FORMAT &YUV_FORMAT, bool &PD_COLOR_MODE,
        bool &PD_ALPHA_MODE,
        LCDIFV2_CTRLDESCL1_5_PD_GLOBAL_ALPHA_MODE &PD_GLOBAL_ALPHA_MODE,
        LCDIFV2_CTRLDESCL1_5_PD_FACTOR_MODE &PD_FACTOR_MODE,
        LCDIFV2_CTRLDESCL1_5_AB_MODE &AB_MODE) volatile
    {
        uint32_t curr = CTRLDESCL1_5;

        EN = curr & (1u << 31u);
        SHADOW_LOAD_EN = curr & (1u << 30u);
        SAFETY_EN = curr & (1u << 28u);
        BPP = LCDIFV2_CTRLDESCL1_5_BPP((curr >> 24u) & 0b1111u);
        GLOBAL_ALPHA = (curr >> 16u) & 0b11111111u;
        YUV_FORMAT = LCDIFV2_CTRLDESCL1_5_YUV_FORMAT((curr >> 14u) & 0b11u);
        PD_COLOR_MODE = curr & (1u << 9u);
        PD_ALPHA_MODE = curr & (1u << 8u);
        PD_GLOBAL_ALPHA_MODE =
            LCDIFV2_CTRLDESCL1_5_PD_GLOBAL_ALPHA_MODE((curr >> 6u) & 0b11u);
        PD_FACTOR_MODE =
            LCDIFV2_CTRLDESCL1_5_PD_FACTOR_MODE((curr >> 4u) & 0b11u);
        AB_MODE = LCDIFV2_CTRLDESCL1_5_AB_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of CTRLDESCL1_5's bit fields.
     *
     * (read-write) Control Descriptor Layer 5 Register
     */
    inline void set_CTRLDESCL1_5(
        bool EN, bool SHADOW_LOAD_EN, bool SAFETY_EN,
        LCDIFV2_CTRLDESCL1_5_BPP BPP, uint8_t GLOBAL_ALPHA,
        LCDIFV2_CTRLDESCL1_5_YUV_FORMAT YUV_FORMAT, bool PD_COLOR_MODE,
        bool PD_ALPHA_MODE,
        LCDIFV2_CTRLDESCL1_5_PD_GLOBAL_ALPHA_MODE PD_GLOBAL_ALPHA_MODE,
        LCDIFV2_CTRLDESCL1_5_PD_FACTOR_MODE PD_FACTOR_MODE,
        LCDIFV2_CTRLDESCL1_5_AB_MODE AB_MODE) volatile
    {
        uint32_t curr = CTRLDESCL1_5;

        curr &= ~(0b1u << 31u);
        curr |= (EN & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (SHADOW_LOAD_EN & 0b1u) << 30u;
        curr &= ~(0b1u << 28u);
        curr |= (SAFETY_EN & 0b1u) << 28u;
        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(BPP) & 0b1111u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (GLOBAL_ALPHA & 0b11111111u) << 16u;
        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(YUV_FORMAT) & 0b11u) << 14u;
        curr &= ~(0b1u << 9u);
        curr |= (PD_COLOR_MODE & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (PD_ALPHA_MODE & 0b1u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(PD_GLOBAL_ALPHA_MODE) & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(PD_FACTOR_MODE) & 0b11u) << 4u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(AB_MODE) & 0b11u) << 0u;

        CTRLDESCL1_5 = curr;
    }

    /**
     * Get CTRLDESCL1_6's BCLR_R field.
     *
     * Background R component value
     */
    inline uint8_t get_CTRLDESCL1_6_BCLR_R() volatile
    {
        return (CTRLDESCL1_6 >> 16u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL1_6's BCLR_R field.
     *
     * Background R component value
     */
    inline void set_CTRLDESCL1_6_BCLR_R(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL1_6;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CTRLDESCL1_6 = curr;
    }

    /**
     * Get CTRLDESCL1_6's BCLR_G field.
     *
     * Background G component value
     */
    inline uint8_t get_CTRLDESCL1_6_BCLR_G() volatile
    {
        return (CTRLDESCL1_6 >> 8u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL1_6's BCLR_G field.
     *
     * Background G component value
     */
    inline void set_CTRLDESCL1_6_BCLR_G(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL1_6;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        CTRLDESCL1_6 = curr;
    }

    /**
     * Get CTRLDESCL1_6's BCLR_B field.
     *
     * Background B component value
     */
    inline uint8_t get_CTRLDESCL1_6_BCLR_B() volatile
    {
        return (CTRLDESCL1_6 >> 0u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL1_6's BCLR_B field.
     *
     * Background B component value
     */
    inline void set_CTRLDESCL1_6_BCLR_B(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL1_6;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        CTRLDESCL1_6 = curr;
    }

    /**
     * Get all of CTRLDESCL1_6's bit fields.
     *
     * (read-write) Control Descriptor Layer 6 Register
     */
    inline void get_CTRLDESCL1_6(uint8_t &BCLR_R, uint8_t &BCLR_G,
                                 uint8_t &BCLR_B) volatile
    {
        uint32_t curr = CTRLDESCL1_6;

        BCLR_R = (curr >> 16u) & 0b11111111u;
        BCLR_G = (curr >> 8u) & 0b11111111u;
        BCLR_B = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of CTRLDESCL1_6's bit fields.
     *
     * (read-write) Control Descriptor Layer 6 Register
     */
    inline void set_CTRLDESCL1_6(uint8_t BCLR_R, uint8_t BCLR_G,
                                 uint8_t BCLR_B) volatile
    {
        uint32_t curr = CTRLDESCL1_6;

        curr &= ~(0b11111111u << 16u);
        curr |= (BCLR_R & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (BCLR_G & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (BCLR_B & 0b11111111u) << 0u;

        CTRLDESCL1_6 = curr;
    }

    /**
     * Get CSC1_COEF0's YCBCR_MODE bit.
     *
     * This bit changes the behavior when performing U/V converting
     */
    inline bool get_CSC1_COEF0_YCBCR_MODE() volatile
    {
        return CSC1_COEF0 & (1u << 31u);
    }

    /**
     * Set CSC1_COEF0's YCBCR_MODE bit.
     *
     * This bit changes the behavior when performing U/V converting
     */
    inline void set_CSC1_COEF0_YCBCR_MODE() volatile
    {
        CSC1_COEF0 |= 1u << 31u;
    }

    /**
     * Clear CSC1_COEF0's YCBCR_MODE bit.
     *
     * This bit changes the behavior when performing U/V converting
     */
    inline void clear_CSC1_COEF0_YCBCR_MODE() volatile
    {
        CSC1_COEF0 &= ~(1u << 31u);
    }

    /**
     * Toggle CSC1_COEF0's YCBCR_MODE bit.
     *
     * This bit changes the behavior when performing U/V converting
     */
    inline void toggle_CSC1_COEF0_YCBCR_MODE() volatile
    {
        CSC1_COEF0 ^= 1u << 31u;
    }

    /**
     * Get CSC1_COEF0's ENABLE bit.
     *
     * Enable the CSC unit in the LCDIFv2 plane data path
     */
    inline bool get_CSC1_COEF0_ENABLE() volatile
    {
        return CSC1_COEF0 & (1u << 30u);
    }

    /**
     * Set CSC1_COEF0's ENABLE bit.
     *
     * Enable the CSC unit in the LCDIFv2 plane data path
     */
    inline void set_CSC1_COEF0_ENABLE() volatile
    {
        CSC1_COEF0 |= 1u << 30u;
    }

    /**
     * Clear CSC1_COEF0's ENABLE bit.
     *
     * Enable the CSC unit in the LCDIFv2 plane data path
     */
    inline void clear_CSC1_COEF0_ENABLE() volatile
    {
        CSC1_COEF0 &= ~(1u << 30u);
    }

    /**
     * Toggle CSC1_COEF0's ENABLE bit.
     *
     * Enable the CSC unit in the LCDIFv2 plane data path
     */
    inline void toggle_CSC1_COEF0_ENABLE() volatile
    {
        CSC1_COEF0 ^= 1u << 30u;
    }

    /**
     * Get CSC1_COEF0's C0 field.
     *
     * Two's compliment Y multiplier coefficient. YUV=0x100 (1.000) YCbCr=0x12A
     * (1.164)
     */
    inline uint16_t get_CSC1_COEF0_C0() volatile
    {
        return (CSC1_COEF0 >> 18u) & 0b11111111111u;
    }

    /**
     * Set CSC1_COEF0's C0 field.
     *
     * Two's compliment Y multiplier coefficient. YUV=0x100 (1.000) YCbCr=0x12A
     * (1.164)
     */
    inline void set_CSC1_COEF0_C0(uint16_t value) volatile
    {
        uint32_t curr = CSC1_COEF0;

        curr &= ~(0b11111111111u << 18u);
        curr |= (value & 0b11111111111u) << 18u;

        CSC1_COEF0 = curr;
    }

    /**
     * Get CSC1_COEF0's UV_OFFSET field.
     *
     * Two's compliment phase offset implicit for CbCr data. Generally used for
     * YCbCr to RGB conversion. YCbCr=0x180, YUV=0x000 (typically -128 or 0x180
     * to indicate normalized -0.5 to 0.5 range)
     */
    inline uint16_t get_CSC1_COEF0_UV_OFFSET() volatile
    {
        return (CSC1_COEF0 >> 9u) & 0b111111111u;
    }

    /**
     * Set CSC1_COEF0's UV_OFFSET field.
     *
     * Two's compliment phase offset implicit for CbCr data. Generally used for
     * YCbCr to RGB conversion. YCbCr=0x180, YUV=0x000 (typically -128 or 0x180
     * to indicate normalized -0.5 to 0.5 range)
     */
    inline void set_CSC1_COEF0_UV_OFFSET(uint16_t value) volatile
    {
        uint32_t curr = CSC1_COEF0;

        curr &= ~(0b111111111u << 9u);
        curr |= (value & 0b111111111u) << 9u;

        CSC1_COEF0 = curr;
    }

    /**
     * Get CSC1_COEF0's Y_OFFSET field.
     *
     * Two's compliment amplitude offset implicit in the Y data. For YUV, this
     * is typically 0 and for YCbCr, this is typically -16 (0x1F0)
     */
    inline uint16_t get_CSC1_COEF0_Y_OFFSET() volatile
    {
        return (CSC1_COEF0 >> 0u) & 0b111111111u;
    }

    /**
     * Set CSC1_COEF0's Y_OFFSET field.
     *
     * Two's compliment amplitude offset implicit in the Y data. For YUV, this
     * is typically 0 and for YCbCr, this is typically -16 (0x1F0)
     */
    inline void set_CSC1_COEF0_Y_OFFSET(uint16_t value) volatile
    {
        uint32_t curr = CSC1_COEF0;

        curr &= ~(0b111111111u << 0u);
        curr |= (value & 0b111111111u) << 0u;

        CSC1_COEF0 = curr;
    }

    /**
     * Get all of CSC1_COEF0's bit fields.
     *
     * (read-write) Color Space Conversion Coefficient Register 0
     */
    inline void get_CSC1_COEF0(bool &YCBCR_MODE, bool &ENABLE, uint16_t &C0,
                               uint16_t &UV_OFFSET,
                               uint16_t &Y_OFFSET) volatile
    {
        uint32_t curr = CSC1_COEF0;

        YCBCR_MODE = curr & (1u << 31u);
        ENABLE = curr & (1u << 30u);
        C0 = (curr >> 18u) & 0b11111111111u;
        UV_OFFSET = (curr >> 9u) & 0b111111111u;
        Y_OFFSET = (curr >> 0u) & 0b111111111u;
    }

    /**
     * Set all of CSC1_COEF0's bit fields.
     *
     * (read-write) Color Space Conversion Coefficient Register 0
     */
    inline void set_CSC1_COEF0(bool YCBCR_MODE, bool ENABLE, uint16_t C0,
                               uint16_t UV_OFFSET, uint16_t Y_OFFSET) volatile
    {
        uint32_t curr = CSC1_COEF0;

        curr &= ~(0b1u << 31u);
        curr |= (YCBCR_MODE & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (ENABLE & 0b1u) << 30u;
        curr &= ~(0b11111111111u << 18u);
        curr |= (C0 & 0b11111111111u) << 18u;
        curr &= ~(0b111111111u << 9u);
        curr |= (UV_OFFSET & 0b111111111u) << 9u;
        curr &= ~(0b111111111u << 0u);
        curr |= (Y_OFFSET & 0b111111111u) << 0u;

        CSC1_COEF0 = curr;
    }

    /**
     * Get CSC1_COEF1's C1 field.
     *
     * Two's compliment Red V/Cr multiplier coefficient. YUV=0x123 (1.140)
     * YCbCr=0x198 (1.596)
     */
    inline uint16_t get_CSC1_COEF1_C1() volatile
    {
        return (CSC1_COEF1 >> 16u) & 0b11111111111u;
    }

    /**
     * Set CSC1_COEF1's C1 field.
     *
     * Two's compliment Red V/Cr multiplier coefficient. YUV=0x123 (1.140)
     * YCbCr=0x198 (1.596)
     */
    inline void set_CSC1_COEF1_C1(uint16_t value) volatile
    {
        uint32_t curr = CSC1_COEF1;

        curr &= ~(0b11111111111u << 16u);
        curr |= (value & 0b11111111111u) << 16u;

        CSC1_COEF1 = curr;
    }

    /**
     * Get CSC1_COEF1's C4 field.
     *
     * Two's compliment Blue U/Cb multiplier coefficient. YUV=0x208 (2.032)
     * YCbCr=0x204 (2.017)
     */
    inline uint16_t get_CSC1_COEF1_C4() volatile
    {
        return (CSC1_COEF1 >> 0u) & 0b11111111111u;
    }

    /**
     * Set CSC1_COEF1's C4 field.
     *
     * Two's compliment Blue U/Cb multiplier coefficient. YUV=0x208 (2.032)
     * YCbCr=0x204 (2.017)
     */
    inline void set_CSC1_COEF1_C4(uint16_t value) volatile
    {
        uint32_t curr = CSC1_COEF1;

        curr &= ~(0b11111111111u << 0u);
        curr |= (value & 0b11111111111u) << 0u;

        CSC1_COEF1 = curr;
    }

    /**
     * Get all of CSC1_COEF1's bit fields.
     *
     * (read-write) Color Space Conversion Coefficient Register 1
     */
    inline void get_CSC1_COEF1(uint16_t &C1, uint16_t &C4) volatile
    {
        uint32_t curr = CSC1_COEF1;

        C1 = (curr >> 16u) & 0b11111111111u;
        C4 = (curr >> 0u) & 0b11111111111u;
    }

    /**
     * Set all of CSC1_COEF1's bit fields.
     *
     * (read-write) Color Space Conversion Coefficient Register 1
     */
    inline void set_CSC1_COEF1(uint16_t C1, uint16_t C4) volatile
    {
        uint32_t curr = CSC1_COEF1;

        curr &= ~(0b11111111111u << 16u);
        curr |= (C1 & 0b11111111111u) << 16u;
        curr &= ~(0b11111111111u << 0u);
        curr |= (C4 & 0b11111111111u) << 0u;

        CSC1_COEF1 = curr;
    }

    /**
     * Get CSC1_COEF2's C2 field.
     *
     * Two's compliment Green V/Cr multiplier coefficient. YUV=0x76B (-0.581)
     * YCbCr=0x730 (-0.813)
     */
    inline uint16_t get_CSC1_COEF2_C2() volatile
    {
        return (CSC1_COEF2 >> 16u) & 0b11111111111u;
    }

    /**
     * Set CSC1_COEF2's C2 field.
     *
     * Two's compliment Green V/Cr multiplier coefficient. YUV=0x76B (-0.581)
     * YCbCr=0x730 (-0.813)
     */
    inline void set_CSC1_COEF2_C2(uint16_t value) volatile
    {
        uint32_t curr = CSC1_COEF2;

        curr &= ~(0b11111111111u << 16u);
        curr |= (value & 0b11111111111u) << 16u;

        CSC1_COEF2 = curr;
    }

    /**
     * Get CSC1_COEF2's C3 field.
     *
     * Two's compliment Green U/Cb multiplier coefficient. YUV=0x79C (-0.394)
     * YCbCr=0x79C (-0.392)
     */
    inline uint16_t get_CSC1_COEF2_C3() volatile
    {
        return (CSC1_COEF2 >> 0u) & 0b11111111111u;
    }

    /**
     * Set CSC1_COEF2's C3 field.
     *
     * Two's compliment Green U/Cb multiplier coefficient. YUV=0x79C (-0.394)
     * YCbCr=0x79C (-0.392)
     */
    inline void set_CSC1_COEF2_C3(uint16_t value) volatile
    {
        uint32_t curr = CSC1_COEF2;

        curr &= ~(0b11111111111u << 0u);
        curr |= (value & 0b11111111111u) << 0u;

        CSC1_COEF2 = curr;
    }

    /**
     * Get all of CSC1_COEF2's bit fields.
     *
     * (read-write) Color Space Conversion Coefficient Register 2
     */
    inline void get_CSC1_COEF2(uint16_t &C2, uint16_t &C3) volatile
    {
        uint32_t curr = CSC1_COEF2;

        C2 = (curr >> 16u) & 0b11111111111u;
        C3 = (curr >> 0u) & 0b11111111111u;
    }

    /**
     * Set all of CSC1_COEF2's bit fields.
     *
     * (read-write) Color Space Conversion Coefficient Register 2
     */
    inline void set_CSC1_COEF2(uint16_t C2, uint16_t C3) volatile
    {
        uint32_t curr = CSC1_COEF2;

        curr &= ~(0b11111111111u << 16u);
        curr |= (C2 & 0b11111111111u) << 16u;
        curr &= ~(0b11111111111u << 0u);
        curr |= (C3 & 0b11111111111u) << 0u;

        CSC1_COEF2 = curr;
    }

    /**
     * Get CTRLDESCL2_1's HEIGHT field.
     *
     * Height of the layer in pixels
     */
    inline uint16_t get_CTRLDESCL2_1_HEIGHT() volatile
    {
        return (CTRLDESCL2_1 >> 16u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL2_1's HEIGHT field.
     *
     * Height of the layer in pixels
     */
    inline void set_CTRLDESCL2_1_HEIGHT(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL2_1;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        CTRLDESCL2_1 = curr;
    }

    /**
     * Get CTRLDESCL2_1's WIDTH field.
     *
     * Width of the layer in pixels
     */
    inline uint16_t get_CTRLDESCL2_1_WIDTH() volatile
    {
        return (CTRLDESCL2_1 >> 0u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL2_1's WIDTH field.
     *
     * Width of the layer in pixels
     */
    inline void set_CTRLDESCL2_1_WIDTH(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL2_1;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        CTRLDESCL2_1 = curr;
    }

    /**
     * Get all of CTRLDESCL2_1's bit fields.
     *
     * (read-write) Control Descriptor Layer 1 Register
     */
    inline void get_CTRLDESCL2_1(uint16_t &HEIGHT, uint16_t &WIDTH) volatile
    {
        uint32_t curr = CTRLDESCL2_1;

        HEIGHT = (curr >> 16u) & 0b111111111111u;
        WIDTH = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of CTRLDESCL2_1's bit fields.
     *
     * (read-write) Control Descriptor Layer 1 Register
     */
    inline void set_CTRLDESCL2_1(uint16_t HEIGHT, uint16_t WIDTH) volatile
    {
        uint32_t curr = CTRLDESCL2_1;

        curr &= ~(0b111111111111u << 16u);
        curr |= (HEIGHT & 0b111111111111u) << 16u;
        curr &= ~(0b111111111111u << 0u);
        curr |= (WIDTH & 0b111111111111u) << 0u;

        CTRLDESCL2_1 = curr;
    }

    /**
     * Get CTRLDESCL2_2's POSY field.
     *
     * The vertical position of top row of the layer, where 0 is the top row of
     * the panel, only positive values are below the top row of the panel
     */
    inline uint16_t get_CTRLDESCL2_2_POSY() volatile
    {
        return (CTRLDESCL2_2 >> 16u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL2_2's POSY field.
     *
     * The vertical position of top row of the layer, where 0 is the top row of
     * the panel, only positive values are below the top row of the panel
     */
    inline void set_CTRLDESCL2_2_POSY(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL2_2;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        CTRLDESCL2_2 = curr;
    }

    /**
     * Get CTRLDESCL2_2's POSX field.
     *
     * The horizontal position of left-hand column of the layer, where 0 is the
     * left-hand column of the panel, only positive values are to the right the
     * left-hand column of the panel
     */
    inline uint16_t get_CTRLDESCL2_2_POSX() volatile
    {
        return (CTRLDESCL2_2 >> 0u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL2_2's POSX field.
     *
     * The horizontal position of left-hand column of the layer, where 0 is the
     * left-hand column of the panel, only positive values are to the right the
     * left-hand column of the panel
     */
    inline void set_CTRLDESCL2_2_POSX(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL2_2;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        CTRLDESCL2_2 = curr;
    }

    /**
     * Get all of CTRLDESCL2_2's bit fields.
     *
     * (read-write) Control Descriptor Layer 2 Register
     */
    inline void get_CTRLDESCL2_2(uint16_t &POSY, uint16_t &POSX) volatile
    {
        uint32_t curr = CTRLDESCL2_2;

        POSY = (curr >> 16u) & 0b111111111111u;
        POSX = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of CTRLDESCL2_2's bit fields.
     *
     * (read-write) Control Descriptor Layer 2 Register
     */
    inline void set_CTRLDESCL2_2(uint16_t POSY, uint16_t POSX) volatile
    {
        uint32_t curr = CTRLDESCL2_2;

        curr &= ~(0b111111111111u << 16u);
        curr |= (POSY & 0b111111111111u) << 16u;
        curr &= ~(0b111111111111u << 0u);
        curr |= (POSX & 0b111111111111u) << 0u;

        CTRLDESCL2_2 = curr;
    }

    /**
     * Get CTRLDESCL2_3's PITCH field.
     *
     * Number of bytes between 2 vertically adjacent pixels in system memory.
     * Byte granularity is supported, but SW should align to 64B boundry
     */
    inline uint16_t get_CTRLDESCL2_3_PITCH() volatile
    {
        return (CTRLDESCL2_3 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set CTRLDESCL2_3's PITCH field.
     *
     * Number of bytes between 2 vertically adjacent pixels in system memory.
     * Byte granularity is supported, but SW should align to 64B boundry
     */
    inline void set_CTRLDESCL2_3_PITCH(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL2_3;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        CTRLDESCL2_3 = curr;
    }

    /**
     * Get CTRLDESCL2_4's ADDR field.
     *
     * Address of layer data in the memory. The address programmed should be
     * 64-bit aligned
     */
    inline uint32_t get_CTRLDESCL2_4_ADDR() volatile
    {
        return (CTRLDESCL2_4 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set CTRLDESCL2_4's ADDR field.
     *
     * Address of layer data in the memory. The address programmed should be
     * 64-bit aligned
     */
    inline void set_CTRLDESCL2_4_ADDR(uint32_t value) volatile
    {
        uint32_t curr = CTRLDESCL2_4;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        CTRLDESCL2_4 = curr;
    }

    /**
     * Get CTRLDESCL2_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline bool get_CTRLDESCL2_5_EN() volatile
    {
        return CTRLDESCL2_5 & (1u << 31u);
    }

    /**
     * Set CTRLDESCL2_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void set_CTRLDESCL2_5_EN() volatile
    {
        CTRLDESCL2_5 |= 1u << 31u;
    }

    /**
     * Clear CTRLDESCL2_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void clear_CTRLDESCL2_5_EN() volatile
    {
        CTRLDESCL2_5 &= ~(1u << 31u);
    }

    /**
     * Toggle CTRLDESCL2_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void toggle_CTRLDESCL2_5_EN() volatile
    {
        CTRLDESCL2_5 ^= 1u << 31u;
    }

    /**
     * Get CTRLDESCL2_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline bool get_CTRLDESCL2_5_SHADOW_LOAD_EN() volatile
    {
        return CTRLDESCL2_5 & (1u << 30u);
    }

    /**
     * Set CTRLDESCL2_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void set_CTRLDESCL2_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL2_5 |= 1u << 30u;
    }

    /**
     * Clear CTRLDESCL2_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void clear_CTRLDESCL2_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL2_5 &= ~(1u << 30u);
    }

    /**
     * Toggle CTRLDESCL2_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void toggle_CTRLDESCL2_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL2_5 ^= 1u << 30u;
    }

    /**
     * Get CTRLDESCL2_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline bool get_CTRLDESCL2_5_SAFETY_EN() volatile
    {
        return CTRLDESCL2_5 & (1u << 28u);
    }

    /**
     * Set CTRLDESCL2_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void set_CTRLDESCL2_5_SAFETY_EN() volatile
    {
        CTRLDESCL2_5 |= 1u << 28u;
    }

    /**
     * Clear CTRLDESCL2_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void clear_CTRLDESCL2_5_SAFETY_EN() volatile
    {
        CTRLDESCL2_5 &= ~(1u << 28u);
    }

    /**
     * Toggle CTRLDESCL2_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void toggle_CTRLDESCL2_5_SAFETY_EN() volatile
    {
        CTRLDESCL2_5 ^= 1u << 28u;
    }

    /**
     * Get CTRLDESCL2_5's BPP field.
     *
     * Layer encoding format (bit per pixel)
     */
    inline LCDIFV2_CTRLDESCL2_5_BPP get_CTRLDESCL2_5_BPP() volatile
    {
        return LCDIFV2_CTRLDESCL2_5_BPP((CTRLDESCL2_5 >> 24u) & 0b1111u);
    }

    /**
     * Set CTRLDESCL2_5's BPP field.
     *
     * Layer encoding format (bit per pixel)
     */
    inline void set_CTRLDESCL2_5_BPP(LCDIFV2_CTRLDESCL2_5_BPP value) volatile
    {
        uint32_t curr = CTRLDESCL2_5;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        CTRLDESCL2_5 = curr;
    }

    /**
     * Get CTRLDESCL2_5's GLOBAL_ALPHA field.
     *
     * Global Alpha
     */
    inline uint8_t get_CTRLDESCL2_5_GLOBAL_ALPHA() volatile
    {
        return (CTRLDESCL2_5 >> 16u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL2_5's GLOBAL_ALPHA field.
     *
     * Global Alpha
     */
    inline void set_CTRLDESCL2_5_GLOBAL_ALPHA(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL2_5;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CTRLDESCL2_5 = curr;
    }

    /**
     * Get CTRLDESCL2_5's YUV_FORMAT field.
     *
     * The YUV422 input format selection
     */
    inline LCDIFV2_CTRLDESCL2_5_YUV_FORMAT
    get_CTRLDESCL2_5_YUV_FORMAT() volatile
    {
        return LCDIFV2_CTRLDESCL2_5_YUV_FORMAT((CTRLDESCL2_5 >> 14u) & 0b11u);
    }

    /**
     * Set CTRLDESCL2_5's YUV_FORMAT field.
     *
     * The YUV422 input format selection
     */
    inline void set_CTRLDESCL2_5_YUV_FORMAT(
        LCDIFV2_CTRLDESCL2_5_YUV_FORMAT value) volatile
    {
        uint32_t curr = CTRLDESCL2_5;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        CTRLDESCL2_5 = curr;
    }

    /**
     * Get CTRLDESCL2_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline bool get_CTRLDESCL2_5_PD_COLOR_MODE() volatile
    {
        return CTRLDESCL2_5 & (1u << 9u);
    }

    /**
     * Set CTRLDESCL2_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void set_CTRLDESCL2_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL2_5 |= 1u << 9u;
    }

    /**
     * Clear CTRLDESCL2_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void clear_CTRLDESCL2_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL2_5 &= ~(1u << 9u);
    }

    /**
     * Toggle CTRLDESCL2_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void toggle_CTRLDESCL2_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL2_5 ^= 1u << 9u;
    }

    /**
     * Get CTRLDESCL2_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline bool get_CTRLDESCL2_5_PD_ALPHA_MODE() volatile
    {
        return CTRLDESCL2_5 & (1u << 8u);
    }

    /**
     * Set CTRLDESCL2_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void set_CTRLDESCL2_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL2_5 |= 1u << 8u;
    }

    /**
     * Clear CTRLDESCL2_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void clear_CTRLDESCL2_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL2_5 &= ~(1u << 8u);
    }

    /**
     * Toggle CTRLDESCL2_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void toggle_CTRLDESCL2_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL2_5 ^= 1u << 8u;
    }

    /**
     * Get CTRLDESCL2_5's PD_GLOBAL_ALPHA_MODE field.
     *
     * PoterDuff global alpha mode
     */
    inline LCDIFV2_CTRLDESCL2_5_PD_GLOBAL_ALPHA_MODE
    get_CTRLDESCL2_5_PD_GLOBAL_ALPHA_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL2_5_PD_GLOBAL_ALPHA_MODE((CTRLDESCL2_5 >> 6u) &
                                                         0b11u);
    }

    /**
     * Set CTRLDESCL2_5's PD_GLOBAL_ALPHA_MODE field.
     *
     * PoterDuff global alpha mode
     */
    inline void set_CTRLDESCL2_5_PD_GLOBAL_ALPHA_MODE(
        LCDIFV2_CTRLDESCL2_5_PD_GLOBAL_ALPHA_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL2_5;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        CTRLDESCL2_5 = curr;
    }

    /**
     * Get CTRLDESCL2_5's PD_FACTOR_MODE field.
     *
     * PoterDuff factor mode
     */
    inline LCDIFV2_CTRLDESCL2_5_PD_FACTOR_MODE
    get_CTRLDESCL2_5_PD_FACTOR_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL2_5_PD_FACTOR_MODE((CTRLDESCL2_5 >> 4u) &
                                                   0b11u);
    }

    /**
     * Set CTRLDESCL2_5's PD_FACTOR_MODE field.
     *
     * PoterDuff factor mode
     */
    inline void set_CTRLDESCL2_5_PD_FACTOR_MODE(
        LCDIFV2_CTRLDESCL2_5_PD_FACTOR_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL2_5;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        CTRLDESCL2_5 = curr;
    }

    /**
     * Get CTRLDESCL2_5's AB_MODE field.
     *
     * Alpha Blending Mode
     */
    inline LCDIFV2_CTRLDESCL2_5_AB_MODE get_CTRLDESCL2_5_AB_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL2_5_AB_MODE((CTRLDESCL2_5 >> 0u) & 0b11u);
    }

    /**
     * Set CTRLDESCL2_5's AB_MODE field.
     *
     * Alpha Blending Mode
     */
    inline void set_CTRLDESCL2_5_AB_MODE(
        LCDIFV2_CTRLDESCL2_5_AB_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL2_5;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        CTRLDESCL2_5 = curr;
    }

    /**
     * Get all of CTRLDESCL2_5's bit fields.
     *
     * (read-write) Control Descriptor Layer 5 Register
     */
    inline void get_CTRLDESCL2_5(
        bool &EN, bool &SHADOW_LOAD_EN, bool &SAFETY_EN,
        LCDIFV2_CTRLDESCL2_5_BPP &BPP, uint8_t &GLOBAL_ALPHA,
        LCDIFV2_CTRLDESCL2_5_YUV_FORMAT &YUV_FORMAT, bool &PD_COLOR_MODE,
        bool &PD_ALPHA_MODE,
        LCDIFV2_CTRLDESCL2_5_PD_GLOBAL_ALPHA_MODE &PD_GLOBAL_ALPHA_MODE,
        LCDIFV2_CTRLDESCL2_5_PD_FACTOR_MODE &PD_FACTOR_MODE,
        LCDIFV2_CTRLDESCL2_5_AB_MODE &AB_MODE) volatile
    {
        uint32_t curr = CTRLDESCL2_5;

        EN = curr & (1u << 31u);
        SHADOW_LOAD_EN = curr & (1u << 30u);
        SAFETY_EN = curr & (1u << 28u);
        BPP = LCDIFV2_CTRLDESCL2_5_BPP((curr >> 24u) & 0b1111u);
        GLOBAL_ALPHA = (curr >> 16u) & 0b11111111u;
        YUV_FORMAT = LCDIFV2_CTRLDESCL2_5_YUV_FORMAT((curr >> 14u) & 0b11u);
        PD_COLOR_MODE = curr & (1u << 9u);
        PD_ALPHA_MODE = curr & (1u << 8u);
        PD_GLOBAL_ALPHA_MODE =
            LCDIFV2_CTRLDESCL2_5_PD_GLOBAL_ALPHA_MODE((curr >> 6u) & 0b11u);
        PD_FACTOR_MODE =
            LCDIFV2_CTRLDESCL2_5_PD_FACTOR_MODE((curr >> 4u) & 0b11u);
        AB_MODE = LCDIFV2_CTRLDESCL2_5_AB_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of CTRLDESCL2_5's bit fields.
     *
     * (read-write) Control Descriptor Layer 5 Register
     */
    inline void set_CTRLDESCL2_5(
        bool EN, bool SHADOW_LOAD_EN, bool SAFETY_EN,
        LCDIFV2_CTRLDESCL2_5_BPP BPP, uint8_t GLOBAL_ALPHA,
        LCDIFV2_CTRLDESCL2_5_YUV_FORMAT YUV_FORMAT, bool PD_COLOR_MODE,
        bool PD_ALPHA_MODE,
        LCDIFV2_CTRLDESCL2_5_PD_GLOBAL_ALPHA_MODE PD_GLOBAL_ALPHA_MODE,
        LCDIFV2_CTRLDESCL2_5_PD_FACTOR_MODE PD_FACTOR_MODE,
        LCDIFV2_CTRLDESCL2_5_AB_MODE AB_MODE) volatile
    {
        uint32_t curr = CTRLDESCL2_5;

        curr &= ~(0b1u << 31u);
        curr |= (EN & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (SHADOW_LOAD_EN & 0b1u) << 30u;
        curr &= ~(0b1u << 28u);
        curr |= (SAFETY_EN & 0b1u) << 28u;
        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(BPP) & 0b1111u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (GLOBAL_ALPHA & 0b11111111u) << 16u;
        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(YUV_FORMAT) & 0b11u) << 14u;
        curr &= ~(0b1u << 9u);
        curr |= (PD_COLOR_MODE & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (PD_ALPHA_MODE & 0b1u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(PD_GLOBAL_ALPHA_MODE) & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(PD_FACTOR_MODE) & 0b11u) << 4u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(AB_MODE) & 0b11u) << 0u;

        CTRLDESCL2_5 = curr;
    }

    /**
     * Get CTRLDESCL2_6's BCLR_R field.
     *
     * Background R component value
     */
    inline uint8_t get_CTRLDESCL2_6_BCLR_R() volatile
    {
        return (CTRLDESCL2_6 >> 16u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL2_6's BCLR_R field.
     *
     * Background R component value
     */
    inline void set_CTRLDESCL2_6_BCLR_R(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL2_6;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CTRLDESCL2_6 = curr;
    }

    /**
     * Get CTRLDESCL2_6's BCLR_G field.
     *
     * Background G component value
     */
    inline uint8_t get_CTRLDESCL2_6_BCLR_G() volatile
    {
        return (CTRLDESCL2_6 >> 8u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL2_6's BCLR_G field.
     *
     * Background G component value
     */
    inline void set_CTRLDESCL2_6_BCLR_G(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL2_6;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        CTRLDESCL2_6 = curr;
    }

    /**
     * Get CTRLDESCL2_6's BCLR_B field.
     *
     * Background B component value
     */
    inline uint8_t get_CTRLDESCL2_6_BCLR_B() volatile
    {
        return (CTRLDESCL2_6 >> 0u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL2_6's BCLR_B field.
     *
     * Background B component value
     */
    inline void set_CTRLDESCL2_6_BCLR_B(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL2_6;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        CTRLDESCL2_6 = curr;
    }

    /**
     * Get all of CTRLDESCL2_6's bit fields.
     *
     * (read-write) Control Descriptor Layer 6 Register
     */
    inline void get_CTRLDESCL2_6(uint8_t &BCLR_R, uint8_t &BCLR_G,
                                 uint8_t &BCLR_B) volatile
    {
        uint32_t curr = CTRLDESCL2_6;

        BCLR_R = (curr >> 16u) & 0b11111111u;
        BCLR_G = (curr >> 8u) & 0b11111111u;
        BCLR_B = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of CTRLDESCL2_6's bit fields.
     *
     * (read-write) Control Descriptor Layer 6 Register
     */
    inline void set_CTRLDESCL2_6(uint8_t BCLR_R, uint8_t BCLR_G,
                                 uint8_t BCLR_B) volatile
    {
        uint32_t curr = CTRLDESCL2_6;

        curr &= ~(0b11111111u << 16u);
        curr |= (BCLR_R & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (BCLR_G & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (BCLR_B & 0b11111111u) << 0u;

        CTRLDESCL2_6 = curr;
    }

    /**
     * Get CTRLDESCL3_1's HEIGHT field.
     *
     * Height of the layer in pixels
     */
    inline uint16_t get_CTRLDESCL3_1_HEIGHT() volatile
    {
        return (CTRLDESCL3_1 >> 16u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL3_1's HEIGHT field.
     *
     * Height of the layer in pixels
     */
    inline void set_CTRLDESCL3_1_HEIGHT(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL3_1;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        CTRLDESCL3_1 = curr;
    }

    /**
     * Get CTRLDESCL3_1's WIDTH field.
     *
     * Width of the layer in pixels
     */
    inline uint16_t get_CTRLDESCL3_1_WIDTH() volatile
    {
        return (CTRLDESCL3_1 >> 0u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL3_1's WIDTH field.
     *
     * Width of the layer in pixels
     */
    inline void set_CTRLDESCL3_1_WIDTH(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL3_1;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        CTRLDESCL3_1 = curr;
    }

    /**
     * Get all of CTRLDESCL3_1's bit fields.
     *
     * (read-write) Control Descriptor Layer 1 Register
     */
    inline void get_CTRLDESCL3_1(uint16_t &HEIGHT, uint16_t &WIDTH) volatile
    {
        uint32_t curr = CTRLDESCL3_1;

        HEIGHT = (curr >> 16u) & 0b111111111111u;
        WIDTH = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of CTRLDESCL3_1's bit fields.
     *
     * (read-write) Control Descriptor Layer 1 Register
     */
    inline void set_CTRLDESCL3_1(uint16_t HEIGHT, uint16_t WIDTH) volatile
    {
        uint32_t curr = CTRLDESCL3_1;

        curr &= ~(0b111111111111u << 16u);
        curr |= (HEIGHT & 0b111111111111u) << 16u;
        curr &= ~(0b111111111111u << 0u);
        curr |= (WIDTH & 0b111111111111u) << 0u;

        CTRLDESCL3_1 = curr;
    }

    /**
     * Get CTRLDESCL3_2's POSY field.
     *
     * The vertical position of top row of the layer, where 0 is the top row of
     * the panel, only positive values are below the top row of the panel
     */
    inline uint16_t get_CTRLDESCL3_2_POSY() volatile
    {
        return (CTRLDESCL3_2 >> 16u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL3_2's POSY field.
     *
     * The vertical position of top row of the layer, where 0 is the top row of
     * the panel, only positive values are below the top row of the panel
     */
    inline void set_CTRLDESCL3_2_POSY(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL3_2;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        CTRLDESCL3_2 = curr;
    }

    /**
     * Get CTRLDESCL3_2's POSX field.
     *
     * The horizontal position of left-hand column of the layer, where 0 is the
     * left-hand column of the panel, only positive values are to the right the
     * left-hand column of the panel
     */
    inline uint16_t get_CTRLDESCL3_2_POSX() volatile
    {
        return (CTRLDESCL3_2 >> 0u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL3_2's POSX field.
     *
     * The horizontal position of left-hand column of the layer, where 0 is the
     * left-hand column of the panel, only positive values are to the right the
     * left-hand column of the panel
     */
    inline void set_CTRLDESCL3_2_POSX(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL3_2;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        CTRLDESCL3_2 = curr;
    }

    /**
     * Get all of CTRLDESCL3_2's bit fields.
     *
     * (read-write) Control Descriptor Layer 2 Register
     */
    inline void get_CTRLDESCL3_2(uint16_t &POSY, uint16_t &POSX) volatile
    {
        uint32_t curr = CTRLDESCL3_2;

        POSY = (curr >> 16u) & 0b111111111111u;
        POSX = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of CTRLDESCL3_2's bit fields.
     *
     * (read-write) Control Descriptor Layer 2 Register
     */
    inline void set_CTRLDESCL3_2(uint16_t POSY, uint16_t POSX) volatile
    {
        uint32_t curr = CTRLDESCL3_2;

        curr &= ~(0b111111111111u << 16u);
        curr |= (POSY & 0b111111111111u) << 16u;
        curr &= ~(0b111111111111u << 0u);
        curr |= (POSX & 0b111111111111u) << 0u;

        CTRLDESCL3_2 = curr;
    }

    /**
     * Get CTRLDESCL3_3's PITCH field.
     *
     * Number of bytes between 2 vertically adjacent pixels in system memory.
     * Byte granularity is supported, but SW should align to 64B boundry
     */
    inline uint16_t get_CTRLDESCL3_3_PITCH() volatile
    {
        return (CTRLDESCL3_3 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set CTRLDESCL3_3's PITCH field.
     *
     * Number of bytes between 2 vertically adjacent pixels in system memory.
     * Byte granularity is supported, but SW should align to 64B boundry
     */
    inline void set_CTRLDESCL3_3_PITCH(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL3_3;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        CTRLDESCL3_3 = curr;
    }

    /**
     * Get CTRLDESCL3_4's ADDR field.
     *
     * Address of layer data in the memory. The address programmed should be
     * 64-bit aligned
     */
    inline uint32_t get_CTRLDESCL3_4_ADDR() volatile
    {
        return (CTRLDESCL3_4 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set CTRLDESCL3_4's ADDR field.
     *
     * Address of layer data in the memory. The address programmed should be
     * 64-bit aligned
     */
    inline void set_CTRLDESCL3_4_ADDR(uint32_t value) volatile
    {
        uint32_t curr = CTRLDESCL3_4;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        CTRLDESCL3_4 = curr;
    }

    /**
     * Get CTRLDESCL3_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline bool get_CTRLDESCL3_5_EN() volatile
    {
        return CTRLDESCL3_5 & (1u << 31u);
    }

    /**
     * Set CTRLDESCL3_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void set_CTRLDESCL3_5_EN() volatile
    {
        CTRLDESCL3_5 |= 1u << 31u;
    }

    /**
     * Clear CTRLDESCL3_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void clear_CTRLDESCL3_5_EN() volatile
    {
        CTRLDESCL3_5 &= ~(1u << 31u);
    }

    /**
     * Toggle CTRLDESCL3_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void toggle_CTRLDESCL3_5_EN() volatile
    {
        CTRLDESCL3_5 ^= 1u << 31u;
    }

    /**
     * Get CTRLDESCL3_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline bool get_CTRLDESCL3_5_SHADOW_LOAD_EN() volatile
    {
        return CTRLDESCL3_5 & (1u << 30u);
    }

    /**
     * Set CTRLDESCL3_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void set_CTRLDESCL3_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL3_5 |= 1u << 30u;
    }

    /**
     * Clear CTRLDESCL3_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void clear_CTRLDESCL3_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL3_5 &= ~(1u << 30u);
    }

    /**
     * Toggle CTRLDESCL3_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void toggle_CTRLDESCL3_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL3_5 ^= 1u << 30u;
    }

    /**
     * Get CTRLDESCL3_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline bool get_CTRLDESCL3_5_SAFETY_EN() volatile
    {
        return CTRLDESCL3_5 & (1u << 28u);
    }

    /**
     * Set CTRLDESCL3_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void set_CTRLDESCL3_5_SAFETY_EN() volatile
    {
        CTRLDESCL3_5 |= 1u << 28u;
    }

    /**
     * Clear CTRLDESCL3_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void clear_CTRLDESCL3_5_SAFETY_EN() volatile
    {
        CTRLDESCL3_5 &= ~(1u << 28u);
    }

    /**
     * Toggle CTRLDESCL3_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void toggle_CTRLDESCL3_5_SAFETY_EN() volatile
    {
        CTRLDESCL3_5 ^= 1u << 28u;
    }

    /**
     * Get CTRLDESCL3_5's BPP field.
     *
     * Layer encoding format (bit per pixel)
     */
    inline LCDIFV2_CTRLDESCL3_5_BPP get_CTRLDESCL3_5_BPP() volatile
    {
        return LCDIFV2_CTRLDESCL3_5_BPP((CTRLDESCL3_5 >> 24u) & 0b1111u);
    }

    /**
     * Set CTRLDESCL3_5's BPP field.
     *
     * Layer encoding format (bit per pixel)
     */
    inline void set_CTRLDESCL3_5_BPP(LCDIFV2_CTRLDESCL3_5_BPP value) volatile
    {
        uint32_t curr = CTRLDESCL3_5;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        CTRLDESCL3_5 = curr;
    }

    /**
     * Get CTRLDESCL3_5's GLOBAL_ALPHA field.
     *
     * Global Alpha
     */
    inline uint8_t get_CTRLDESCL3_5_GLOBAL_ALPHA() volatile
    {
        return (CTRLDESCL3_5 >> 16u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL3_5's GLOBAL_ALPHA field.
     *
     * Global Alpha
     */
    inline void set_CTRLDESCL3_5_GLOBAL_ALPHA(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL3_5;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CTRLDESCL3_5 = curr;
    }

    /**
     * Get CTRLDESCL3_5's YUV_FORMAT field.
     *
     * The YUV422 input format selection
     */
    inline LCDIFV2_CTRLDESCL3_5_YUV_FORMAT
    get_CTRLDESCL3_5_YUV_FORMAT() volatile
    {
        return LCDIFV2_CTRLDESCL3_5_YUV_FORMAT((CTRLDESCL3_5 >> 14u) & 0b11u);
    }

    /**
     * Set CTRLDESCL3_5's YUV_FORMAT field.
     *
     * The YUV422 input format selection
     */
    inline void set_CTRLDESCL3_5_YUV_FORMAT(
        LCDIFV2_CTRLDESCL3_5_YUV_FORMAT value) volatile
    {
        uint32_t curr = CTRLDESCL3_5;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        CTRLDESCL3_5 = curr;
    }

    /**
     * Get CTRLDESCL3_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline bool get_CTRLDESCL3_5_PD_COLOR_MODE() volatile
    {
        return CTRLDESCL3_5 & (1u << 9u);
    }

    /**
     * Set CTRLDESCL3_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void set_CTRLDESCL3_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL3_5 |= 1u << 9u;
    }

    /**
     * Clear CTRLDESCL3_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void clear_CTRLDESCL3_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL3_5 &= ~(1u << 9u);
    }

    /**
     * Toggle CTRLDESCL3_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void toggle_CTRLDESCL3_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL3_5 ^= 1u << 9u;
    }

    /**
     * Get CTRLDESCL3_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline bool get_CTRLDESCL3_5_PD_ALPHA_MODE() volatile
    {
        return CTRLDESCL3_5 & (1u << 8u);
    }

    /**
     * Set CTRLDESCL3_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void set_CTRLDESCL3_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL3_5 |= 1u << 8u;
    }

    /**
     * Clear CTRLDESCL3_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void clear_CTRLDESCL3_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL3_5 &= ~(1u << 8u);
    }

    /**
     * Toggle CTRLDESCL3_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void toggle_CTRLDESCL3_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL3_5 ^= 1u << 8u;
    }

    /**
     * Get CTRLDESCL3_5's PD_GLOBAL_ALPHA_MODE field.
     *
     * PoterDuff global alpha mode
     */
    inline LCDIFV2_CTRLDESCL3_5_PD_GLOBAL_ALPHA_MODE
    get_CTRLDESCL3_5_PD_GLOBAL_ALPHA_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL3_5_PD_GLOBAL_ALPHA_MODE((CTRLDESCL3_5 >> 6u) &
                                                         0b11u);
    }

    /**
     * Set CTRLDESCL3_5's PD_GLOBAL_ALPHA_MODE field.
     *
     * PoterDuff global alpha mode
     */
    inline void set_CTRLDESCL3_5_PD_GLOBAL_ALPHA_MODE(
        LCDIFV2_CTRLDESCL3_5_PD_GLOBAL_ALPHA_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL3_5;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        CTRLDESCL3_5 = curr;
    }

    /**
     * Get CTRLDESCL3_5's PD_FACTOR_MODE field.
     *
     * PoterDuff factor mode
     */
    inline LCDIFV2_CTRLDESCL3_5_PD_FACTOR_MODE
    get_CTRLDESCL3_5_PD_FACTOR_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL3_5_PD_FACTOR_MODE((CTRLDESCL3_5 >> 4u) &
                                                   0b11u);
    }

    /**
     * Set CTRLDESCL3_5's PD_FACTOR_MODE field.
     *
     * PoterDuff factor mode
     */
    inline void set_CTRLDESCL3_5_PD_FACTOR_MODE(
        LCDIFV2_CTRLDESCL3_5_PD_FACTOR_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL3_5;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        CTRLDESCL3_5 = curr;
    }

    /**
     * Get CTRLDESCL3_5's AB_MODE field.
     *
     * Alpha Blending Mode
     */
    inline LCDIFV2_CTRLDESCL3_5_AB_MODE get_CTRLDESCL3_5_AB_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL3_5_AB_MODE((CTRLDESCL3_5 >> 0u) & 0b11u);
    }

    /**
     * Set CTRLDESCL3_5's AB_MODE field.
     *
     * Alpha Blending Mode
     */
    inline void set_CTRLDESCL3_5_AB_MODE(
        LCDIFV2_CTRLDESCL3_5_AB_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL3_5;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        CTRLDESCL3_5 = curr;
    }

    /**
     * Get all of CTRLDESCL3_5's bit fields.
     *
     * (read-write) Control Descriptor Layer 5 Register
     */
    inline void get_CTRLDESCL3_5(
        bool &EN, bool &SHADOW_LOAD_EN, bool &SAFETY_EN,
        LCDIFV2_CTRLDESCL3_5_BPP &BPP, uint8_t &GLOBAL_ALPHA,
        LCDIFV2_CTRLDESCL3_5_YUV_FORMAT &YUV_FORMAT, bool &PD_COLOR_MODE,
        bool &PD_ALPHA_MODE,
        LCDIFV2_CTRLDESCL3_5_PD_GLOBAL_ALPHA_MODE &PD_GLOBAL_ALPHA_MODE,
        LCDIFV2_CTRLDESCL3_5_PD_FACTOR_MODE &PD_FACTOR_MODE,
        LCDIFV2_CTRLDESCL3_5_AB_MODE &AB_MODE) volatile
    {
        uint32_t curr = CTRLDESCL3_5;

        EN = curr & (1u << 31u);
        SHADOW_LOAD_EN = curr & (1u << 30u);
        SAFETY_EN = curr & (1u << 28u);
        BPP = LCDIFV2_CTRLDESCL3_5_BPP((curr >> 24u) & 0b1111u);
        GLOBAL_ALPHA = (curr >> 16u) & 0b11111111u;
        YUV_FORMAT = LCDIFV2_CTRLDESCL3_5_YUV_FORMAT((curr >> 14u) & 0b11u);
        PD_COLOR_MODE = curr & (1u << 9u);
        PD_ALPHA_MODE = curr & (1u << 8u);
        PD_GLOBAL_ALPHA_MODE =
            LCDIFV2_CTRLDESCL3_5_PD_GLOBAL_ALPHA_MODE((curr >> 6u) & 0b11u);
        PD_FACTOR_MODE =
            LCDIFV2_CTRLDESCL3_5_PD_FACTOR_MODE((curr >> 4u) & 0b11u);
        AB_MODE = LCDIFV2_CTRLDESCL3_5_AB_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of CTRLDESCL3_5's bit fields.
     *
     * (read-write) Control Descriptor Layer 5 Register
     */
    inline void set_CTRLDESCL3_5(
        bool EN, bool SHADOW_LOAD_EN, bool SAFETY_EN,
        LCDIFV2_CTRLDESCL3_5_BPP BPP, uint8_t GLOBAL_ALPHA,
        LCDIFV2_CTRLDESCL3_5_YUV_FORMAT YUV_FORMAT, bool PD_COLOR_MODE,
        bool PD_ALPHA_MODE,
        LCDIFV2_CTRLDESCL3_5_PD_GLOBAL_ALPHA_MODE PD_GLOBAL_ALPHA_MODE,
        LCDIFV2_CTRLDESCL3_5_PD_FACTOR_MODE PD_FACTOR_MODE,
        LCDIFV2_CTRLDESCL3_5_AB_MODE AB_MODE) volatile
    {
        uint32_t curr = CTRLDESCL3_5;

        curr &= ~(0b1u << 31u);
        curr |= (EN & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (SHADOW_LOAD_EN & 0b1u) << 30u;
        curr &= ~(0b1u << 28u);
        curr |= (SAFETY_EN & 0b1u) << 28u;
        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(BPP) & 0b1111u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (GLOBAL_ALPHA & 0b11111111u) << 16u;
        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(YUV_FORMAT) & 0b11u) << 14u;
        curr &= ~(0b1u << 9u);
        curr |= (PD_COLOR_MODE & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (PD_ALPHA_MODE & 0b1u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(PD_GLOBAL_ALPHA_MODE) & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(PD_FACTOR_MODE) & 0b11u) << 4u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(AB_MODE) & 0b11u) << 0u;

        CTRLDESCL3_5 = curr;
    }

    /**
     * Get CTRLDESCL3_6's BCLR_R field.
     *
     * Background R component value
     */
    inline uint8_t get_CTRLDESCL3_6_BCLR_R() volatile
    {
        return (CTRLDESCL3_6 >> 16u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL3_6's BCLR_R field.
     *
     * Background R component value
     */
    inline void set_CTRLDESCL3_6_BCLR_R(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL3_6;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CTRLDESCL3_6 = curr;
    }

    /**
     * Get CTRLDESCL3_6's BCLR_G field.
     *
     * Background G component value
     */
    inline uint8_t get_CTRLDESCL3_6_BCLR_G() volatile
    {
        return (CTRLDESCL3_6 >> 8u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL3_6's BCLR_G field.
     *
     * Background G component value
     */
    inline void set_CTRLDESCL3_6_BCLR_G(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL3_6;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        CTRLDESCL3_6 = curr;
    }

    /**
     * Get CTRLDESCL3_6's BCLR_B field.
     *
     * Background B component value
     */
    inline uint8_t get_CTRLDESCL3_6_BCLR_B() volatile
    {
        return (CTRLDESCL3_6 >> 0u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL3_6's BCLR_B field.
     *
     * Background B component value
     */
    inline void set_CTRLDESCL3_6_BCLR_B(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL3_6;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        CTRLDESCL3_6 = curr;
    }

    /**
     * Get all of CTRLDESCL3_6's bit fields.
     *
     * (read-write) Control Descriptor Layer 6 Register
     */
    inline void get_CTRLDESCL3_6(uint8_t &BCLR_R, uint8_t &BCLR_G,
                                 uint8_t &BCLR_B) volatile
    {
        uint32_t curr = CTRLDESCL3_6;

        BCLR_R = (curr >> 16u) & 0b11111111u;
        BCLR_G = (curr >> 8u) & 0b11111111u;
        BCLR_B = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of CTRLDESCL3_6's bit fields.
     *
     * (read-write) Control Descriptor Layer 6 Register
     */
    inline void set_CTRLDESCL3_6(uint8_t BCLR_R, uint8_t BCLR_G,
                                 uint8_t BCLR_B) volatile
    {
        uint32_t curr = CTRLDESCL3_6;

        curr &= ~(0b11111111u << 16u);
        curr |= (BCLR_R & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (BCLR_G & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (BCLR_B & 0b11111111u) << 0u;

        CTRLDESCL3_6 = curr;
    }

    /**
     * Get CTRLDESCL4_1's HEIGHT field.
     *
     * Height of the layer in pixels
     */
    inline uint16_t get_CTRLDESCL4_1_HEIGHT() volatile
    {
        return (CTRLDESCL4_1 >> 16u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL4_1's HEIGHT field.
     *
     * Height of the layer in pixels
     */
    inline void set_CTRLDESCL4_1_HEIGHT(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL4_1;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        CTRLDESCL4_1 = curr;
    }

    /**
     * Get CTRLDESCL4_1's WIDTH field.
     *
     * Width of the layer in pixels
     */
    inline uint16_t get_CTRLDESCL4_1_WIDTH() volatile
    {
        return (CTRLDESCL4_1 >> 0u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL4_1's WIDTH field.
     *
     * Width of the layer in pixels
     */
    inline void set_CTRLDESCL4_1_WIDTH(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL4_1;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        CTRLDESCL4_1 = curr;
    }

    /**
     * Get all of CTRLDESCL4_1's bit fields.
     *
     * (read-write) Control Descriptor Layer 1 Register
     */
    inline void get_CTRLDESCL4_1(uint16_t &HEIGHT, uint16_t &WIDTH) volatile
    {
        uint32_t curr = CTRLDESCL4_1;

        HEIGHT = (curr >> 16u) & 0b111111111111u;
        WIDTH = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of CTRLDESCL4_1's bit fields.
     *
     * (read-write) Control Descriptor Layer 1 Register
     */
    inline void set_CTRLDESCL4_1(uint16_t HEIGHT, uint16_t WIDTH) volatile
    {
        uint32_t curr = CTRLDESCL4_1;

        curr &= ~(0b111111111111u << 16u);
        curr |= (HEIGHT & 0b111111111111u) << 16u;
        curr &= ~(0b111111111111u << 0u);
        curr |= (WIDTH & 0b111111111111u) << 0u;

        CTRLDESCL4_1 = curr;
    }

    /**
     * Get CTRLDESCL4_2's POSY field.
     *
     * The vertical position of top row of the layer, where 0 is the top row of
     * the panel, only positive values are below the top row of the panel
     */
    inline uint16_t get_CTRLDESCL4_2_POSY() volatile
    {
        return (CTRLDESCL4_2 >> 16u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL4_2's POSY field.
     *
     * The vertical position of top row of the layer, where 0 is the top row of
     * the panel, only positive values are below the top row of the panel
     */
    inline void set_CTRLDESCL4_2_POSY(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL4_2;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        CTRLDESCL4_2 = curr;
    }

    /**
     * Get CTRLDESCL4_2's POSX field.
     *
     * The horizontal position of left-hand column of the layer, where 0 is the
     * left-hand column of the panel, only positive values are to the right the
     * left-hand column of the panel
     */
    inline uint16_t get_CTRLDESCL4_2_POSX() volatile
    {
        return (CTRLDESCL4_2 >> 0u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL4_2's POSX field.
     *
     * The horizontal position of left-hand column of the layer, where 0 is the
     * left-hand column of the panel, only positive values are to the right the
     * left-hand column of the panel
     */
    inline void set_CTRLDESCL4_2_POSX(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL4_2;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        CTRLDESCL4_2 = curr;
    }

    /**
     * Get all of CTRLDESCL4_2's bit fields.
     *
     * (read-write) Control Descriptor Layer 2 Register
     */
    inline void get_CTRLDESCL4_2(uint16_t &POSY, uint16_t &POSX) volatile
    {
        uint32_t curr = CTRLDESCL4_2;

        POSY = (curr >> 16u) & 0b111111111111u;
        POSX = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of CTRLDESCL4_2's bit fields.
     *
     * (read-write) Control Descriptor Layer 2 Register
     */
    inline void set_CTRLDESCL4_2(uint16_t POSY, uint16_t POSX) volatile
    {
        uint32_t curr = CTRLDESCL4_2;

        curr &= ~(0b111111111111u << 16u);
        curr |= (POSY & 0b111111111111u) << 16u;
        curr &= ~(0b111111111111u << 0u);
        curr |= (POSX & 0b111111111111u) << 0u;

        CTRLDESCL4_2 = curr;
    }

    /**
     * Get CTRLDESCL4_3's PITCH field.
     *
     * Number of bytes between 2 vertically adjacent pixels in system memory.
     * Byte granularity is supported, but SW should align to 64B boundry
     */
    inline uint16_t get_CTRLDESCL4_3_PITCH() volatile
    {
        return (CTRLDESCL4_3 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set CTRLDESCL4_3's PITCH field.
     *
     * Number of bytes between 2 vertically adjacent pixels in system memory.
     * Byte granularity is supported, but SW should align to 64B boundry
     */
    inline void set_CTRLDESCL4_3_PITCH(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL4_3;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        CTRLDESCL4_3 = curr;
    }

    /**
     * Get CTRLDESCL4_4's ADDR field.
     *
     * Address of layer data in the memory. The address programmed should be
     * 64-bit aligned
     */
    inline uint32_t get_CTRLDESCL4_4_ADDR() volatile
    {
        return (CTRLDESCL4_4 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set CTRLDESCL4_4's ADDR field.
     *
     * Address of layer data in the memory. The address programmed should be
     * 64-bit aligned
     */
    inline void set_CTRLDESCL4_4_ADDR(uint32_t value) volatile
    {
        uint32_t curr = CTRLDESCL4_4;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        CTRLDESCL4_4 = curr;
    }

    /**
     * Get CTRLDESCL4_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline bool get_CTRLDESCL4_5_EN() volatile
    {
        return CTRLDESCL4_5 & (1u << 31u);
    }

    /**
     * Set CTRLDESCL4_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void set_CTRLDESCL4_5_EN() volatile
    {
        CTRLDESCL4_5 |= 1u << 31u;
    }

    /**
     * Clear CTRLDESCL4_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void clear_CTRLDESCL4_5_EN() volatile
    {
        CTRLDESCL4_5 &= ~(1u << 31u);
    }

    /**
     * Toggle CTRLDESCL4_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void toggle_CTRLDESCL4_5_EN() volatile
    {
        CTRLDESCL4_5 ^= 1u << 31u;
    }

    /**
     * Get CTRLDESCL4_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline bool get_CTRLDESCL4_5_SHADOW_LOAD_EN() volatile
    {
        return CTRLDESCL4_5 & (1u << 30u);
    }

    /**
     * Set CTRLDESCL4_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void set_CTRLDESCL4_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL4_5 |= 1u << 30u;
    }

    /**
     * Clear CTRLDESCL4_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void clear_CTRLDESCL4_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL4_5 &= ~(1u << 30u);
    }

    /**
     * Toggle CTRLDESCL4_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void toggle_CTRLDESCL4_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL4_5 ^= 1u << 30u;
    }

    /**
     * Get CTRLDESCL4_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline bool get_CTRLDESCL4_5_SAFETY_EN() volatile
    {
        return CTRLDESCL4_5 & (1u << 28u);
    }

    /**
     * Set CTRLDESCL4_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void set_CTRLDESCL4_5_SAFETY_EN() volatile
    {
        CTRLDESCL4_5 |= 1u << 28u;
    }

    /**
     * Clear CTRLDESCL4_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void clear_CTRLDESCL4_5_SAFETY_EN() volatile
    {
        CTRLDESCL4_5 &= ~(1u << 28u);
    }

    /**
     * Toggle CTRLDESCL4_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void toggle_CTRLDESCL4_5_SAFETY_EN() volatile
    {
        CTRLDESCL4_5 ^= 1u << 28u;
    }

    /**
     * Get CTRLDESCL4_5's BPP field.
     *
     * Layer encoding format (bit per pixel)
     */
    inline LCDIFV2_CTRLDESCL4_5_BPP get_CTRLDESCL4_5_BPP() volatile
    {
        return LCDIFV2_CTRLDESCL4_5_BPP((CTRLDESCL4_5 >> 24u) & 0b1111u);
    }

    /**
     * Set CTRLDESCL4_5's BPP field.
     *
     * Layer encoding format (bit per pixel)
     */
    inline void set_CTRLDESCL4_5_BPP(LCDIFV2_CTRLDESCL4_5_BPP value) volatile
    {
        uint32_t curr = CTRLDESCL4_5;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        CTRLDESCL4_5 = curr;
    }

    /**
     * Get CTRLDESCL4_5's GLOBAL_ALPHA field.
     *
     * Global Alpha
     */
    inline uint8_t get_CTRLDESCL4_5_GLOBAL_ALPHA() volatile
    {
        return (CTRLDESCL4_5 >> 16u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL4_5's GLOBAL_ALPHA field.
     *
     * Global Alpha
     */
    inline void set_CTRLDESCL4_5_GLOBAL_ALPHA(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL4_5;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CTRLDESCL4_5 = curr;
    }

    /**
     * Get CTRLDESCL4_5's YUV_FORMAT field.
     *
     * The YUV422 input format selection
     */
    inline LCDIFV2_CTRLDESCL4_5_YUV_FORMAT
    get_CTRLDESCL4_5_YUV_FORMAT() volatile
    {
        return LCDIFV2_CTRLDESCL4_5_YUV_FORMAT((CTRLDESCL4_5 >> 14u) & 0b11u);
    }

    /**
     * Set CTRLDESCL4_5's YUV_FORMAT field.
     *
     * The YUV422 input format selection
     */
    inline void set_CTRLDESCL4_5_YUV_FORMAT(
        LCDIFV2_CTRLDESCL4_5_YUV_FORMAT value) volatile
    {
        uint32_t curr = CTRLDESCL4_5;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        CTRLDESCL4_5 = curr;
    }

    /**
     * Get CTRLDESCL4_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline bool get_CTRLDESCL4_5_PD_COLOR_MODE() volatile
    {
        return CTRLDESCL4_5 & (1u << 9u);
    }

    /**
     * Set CTRLDESCL4_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void set_CTRLDESCL4_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL4_5 |= 1u << 9u;
    }

    /**
     * Clear CTRLDESCL4_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void clear_CTRLDESCL4_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL4_5 &= ~(1u << 9u);
    }

    /**
     * Toggle CTRLDESCL4_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void toggle_CTRLDESCL4_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL4_5 ^= 1u << 9u;
    }

    /**
     * Get CTRLDESCL4_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline bool get_CTRLDESCL4_5_PD_ALPHA_MODE() volatile
    {
        return CTRLDESCL4_5 & (1u << 8u);
    }

    /**
     * Set CTRLDESCL4_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void set_CTRLDESCL4_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL4_5 |= 1u << 8u;
    }

    /**
     * Clear CTRLDESCL4_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void clear_CTRLDESCL4_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL4_5 &= ~(1u << 8u);
    }

    /**
     * Toggle CTRLDESCL4_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void toggle_CTRLDESCL4_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL4_5 ^= 1u << 8u;
    }

    /**
     * Get CTRLDESCL4_5's PD_GLOBAL_ALPHA_MODE field.
     *
     * PoterDuff global alpha mode
     */
    inline LCDIFV2_CTRLDESCL4_5_PD_GLOBAL_ALPHA_MODE
    get_CTRLDESCL4_5_PD_GLOBAL_ALPHA_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL4_5_PD_GLOBAL_ALPHA_MODE((CTRLDESCL4_5 >> 6u) &
                                                         0b11u);
    }

    /**
     * Set CTRLDESCL4_5's PD_GLOBAL_ALPHA_MODE field.
     *
     * PoterDuff global alpha mode
     */
    inline void set_CTRLDESCL4_5_PD_GLOBAL_ALPHA_MODE(
        LCDIFV2_CTRLDESCL4_5_PD_GLOBAL_ALPHA_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL4_5;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        CTRLDESCL4_5 = curr;
    }

    /**
     * Get CTRLDESCL4_5's PD_FACTOR_MODE field.
     *
     * PoterDuff factor mode
     */
    inline LCDIFV2_CTRLDESCL4_5_PD_FACTOR_MODE
    get_CTRLDESCL4_5_PD_FACTOR_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL4_5_PD_FACTOR_MODE((CTRLDESCL4_5 >> 4u) &
                                                   0b11u);
    }

    /**
     * Set CTRLDESCL4_5's PD_FACTOR_MODE field.
     *
     * PoterDuff factor mode
     */
    inline void set_CTRLDESCL4_5_PD_FACTOR_MODE(
        LCDIFV2_CTRLDESCL4_5_PD_FACTOR_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL4_5;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        CTRLDESCL4_5 = curr;
    }

    /**
     * Get CTRLDESCL4_5's AB_MODE field.
     *
     * Alpha Blending Mode
     */
    inline LCDIFV2_CTRLDESCL4_5_AB_MODE get_CTRLDESCL4_5_AB_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL4_5_AB_MODE((CTRLDESCL4_5 >> 0u) & 0b11u);
    }

    /**
     * Set CTRLDESCL4_5's AB_MODE field.
     *
     * Alpha Blending Mode
     */
    inline void set_CTRLDESCL4_5_AB_MODE(
        LCDIFV2_CTRLDESCL4_5_AB_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL4_5;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        CTRLDESCL4_5 = curr;
    }

    /**
     * Get all of CTRLDESCL4_5's bit fields.
     *
     * (read-write) Control Descriptor Layer 5 Register
     */
    inline void get_CTRLDESCL4_5(
        bool &EN, bool &SHADOW_LOAD_EN, bool &SAFETY_EN,
        LCDIFV2_CTRLDESCL4_5_BPP &BPP, uint8_t &GLOBAL_ALPHA,
        LCDIFV2_CTRLDESCL4_5_YUV_FORMAT &YUV_FORMAT, bool &PD_COLOR_MODE,
        bool &PD_ALPHA_MODE,
        LCDIFV2_CTRLDESCL4_5_PD_GLOBAL_ALPHA_MODE &PD_GLOBAL_ALPHA_MODE,
        LCDIFV2_CTRLDESCL4_5_PD_FACTOR_MODE &PD_FACTOR_MODE,
        LCDIFV2_CTRLDESCL4_5_AB_MODE &AB_MODE) volatile
    {
        uint32_t curr = CTRLDESCL4_5;

        EN = curr & (1u << 31u);
        SHADOW_LOAD_EN = curr & (1u << 30u);
        SAFETY_EN = curr & (1u << 28u);
        BPP = LCDIFV2_CTRLDESCL4_5_BPP((curr >> 24u) & 0b1111u);
        GLOBAL_ALPHA = (curr >> 16u) & 0b11111111u;
        YUV_FORMAT = LCDIFV2_CTRLDESCL4_5_YUV_FORMAT((curr >> 14u) & 0b11u);
        PD_COLOR_MODE = curr & (1u << 9u);
        PD_ALPHA_MODE = curr & (1u << 8u);
        PD_GLOBAL_ALPHA_MODE =
            LCDIFV2_CTRLDESCL4_5_PD_GLOBAL_ALPHA_MODE((curr >> 6u) & 0b11u);
        PD_FACTOR_MODE =
            LCDIFV2_CTRLDESCL4_5_PD_FACTOR_MODE((curr >> 4u) & 0b11u);
        AB_MODE = LCDIFV2_CTRLDESCL4_5_AB_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of CTRLDESCL4_5's bit fields.
     *
     * (read-write) Control Descriptor Layer 5 Register
     */
    inline void set_CTRLDESCL4_5(
        bool EN, bool SHADOW_LOAD_EN, bool SAFETY_EN,
        LCDIFV2_CTRLDESCL4_5_BPP BPP, uint8_t GLOBAL_ALPHA,
        LCDIFV2_CTRLDESCL4_5_YUV_FORMAT YUV_FORMAT, bool PD_COLOR_MODE,
        bool PD_ALPHA_MODE,
        LCDIFV2_CTRLDESCL4_5_PD_GLOBAL_ALPHA_MODE PD_GLOBAL_ALPHA_MODE,
        LCDIFV2_CTRLDESCL4_5_PD_FACTOR_MODE PD_FACTOR_MODE,
        LCDIFV2_CTRLDESCL4_5_AB_MODE AB_MODE) volatile
    {
        uint32_t curr = CTRLDESCL4_5;

        curr &= ~(0b1u << 31u);
        curr |= (EN & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (SHADOW_LOAD_EN & 0b1u) << 30u;
        curr &= ~(0b1u << 28u);
        curr |= (SAFETY_EN & 0b1u) << 28u;
        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(BPP) & 0b1111u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (GLOBAL_ALPHA & 0b11111111u) << 16u;
        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(YUV_FORMAT) & 0b11u) << 14u;
        curr &= ~(0b1u << 9u);
        curr |= (PD_COLOR_MODE & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (PD_ALPHA_MODE & 0b1u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(PD_GLOBAL_ALPHA_MODE) & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(PD_FACTOR_MODE) & 0b11u) << 4u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(AB_MODE) & 0b11u) << 0u;

        CTRLDESCL4_5 = curr;
    }

    /**
     * Get CTRLDESCL4_6's BCLR_R field.
     *
     * Background R component value
     */
    inline uint8_t get_CTRLDESCL4_6_BCLR_R() volatile
    {
        return (CTRLDESCL4_6 >> 16u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL4_6's BCLR_R field.
     *
     * Background R component value
     */
    inline void set_CTRLDESCL4_6_BCLR_R(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL4_6;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CTRLDESCL4_6 = curr;
    }

    /**
     * Get CTRLDESCL4_6's BCLR_G field.
     *
     * Background G component value
     */
    inline uint8_t get_CTRLDESCL4_6_BCLR_G() volatile
    {
        return (CTRLDESCL4_6 >> 8u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL4_6's BCLR_G field.
     *
     * Background G component value
     */
    inline void set_CTRLDESCL4_6_BCLR_G(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL4_6;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        CTRLDESCL4_6 = curr;
    }

    /**
     * Get CTRLDESCL4_6's BCLR_B field.
     *
     * Background B component value
     */
    inline uint8_t get_CTRLDESCL4_6_BCLR_B() volatile
    {
        return (CTRLDESCL4_6 >> 0u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL4_6's BCLR_B field.
     *
     * Background B component value
     */
    inline void set_CTRLDESCL4_6_BCLR_B(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL4_6;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        CTRLDESCL4_6 = curr;
    }

    /**
     * Get all of CTRLDESCL4_6's bit fields.
     *
     * (read-write) Control Descriptor Layer 6 Register
     */
    inline void get_CTRLDESCL4_6(uint8_t &BCLR_R, uint8_t &BCLR_G,
                                 uint8_t &BCLR_B) volatile
    {
        uint32_t curr = CTRLDESCL4_6;

        BCLR_R = (curr >> 16u) & 0b11111111u;
        BCLR_G = (curr >> 8u) & 0b11111111u;
        BCLR_B = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of CTRLDESCL4_6's bit fields.
     *
     * (read-write) Control Descriptor Layer 6 Register
     */
    inline void set_CTRLDESCL4_6(uint8_t BCLR_R, uint8_t BCLR_G,
                                 uint8_t BCLR_B) volatile
    {
        uint32_t curr = CTRLDESCL4_6;

        curr &= ~(0b11111111u << 16u);
        curr |= (BCLR_R & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (BCLR_G & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (BCLR_B & 0b11111111u) << 0u;

        CTRLDESCL4_6 = curr;
    }

    /**
     * Get CTRLDESCL5_1's HEIGHT field.
     *
     * Height of the layer in pixels
     */
    inline uint16_t get_CTRLDESCL5_1_HEIGHT() volatile
    {
        return (CTRLDESCL5_1 >> 16u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL5_1's HEIGHT field.
     *
     * Height of the layer in pixels
     */
    inline void set_CTRLDESCL5_1_HEIGHT(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL5_1;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        CTRLDESCL5_1 = curr;
    }

    /**
     * Get CTRLDESCL5_1's WIDTH field.
     *
     * Width of the layer in pixels
     */
    inline uint16_t get_CTRLDESCL5_1_WIDTH() volatile
    {
        return (CTRLDESCL5_1 >> 0u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL5_1's WIDTH field.
     *
     * Width of the layer in pixels
     */
    inline void set_CTRLDESCL5_1_WIDTH(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL5_1;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        CTRLDESCL5_1 = curr;
    }

    /**
     * Get all of CTRLDESCL5_1's bit fields.
     *
     * (read-write) Control Descriptor Layer 1 Register
     */
    inline void get_CTRLDESCL5_1(uint16_t &HEIGHT, uint16_t &WIDTH) volatile
    {
        uint32_t curr = CTRLDESCL5_1;

        HEIGHT = (curr >> 16u) & 0b111111111111u;
        WIDTH = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of CTRLDESCL5_1's bit fields.
     *
     * (read-write) Control Descriptor Layer 1 Register
     */
    inline void set_CTRLDESCL5_1(uint16_t HEIGHT, uint16_t WIDTH) volatile
    {
        uint32_t curr = CTRLDESCL5_1;

        curr &= ~(0b111111111111u << 16u);
        curr |= (HEIGHT & 0b111111111111u) << 16u;
        curr &= ~(0b111111111111u << 0u);
        curr |= (WIDTH & 0b111111111111u) << 0u;

        CTRLDESCL5_1 = curr;
    }

    /**
     * Get CTRLDESCL5_2's POSY field.
     *
     * The vertical position of top row of the layer, where 0 is the top row of
     * the panel, only positive values are below the top row of the panel
     */
    inline uint16_t get_CTRLDESCL5_2_POSY() volatile
    {
        return (CTRLDESCL5_2 >> 16u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL5_2's POSY field.
     *
     * The vertical position of top row of the layer, where 0 is the top row of
     * the panel, only positive values are below the top row of the panel
     */
    inline void set_CTRLDESCL5_2_POSY(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL5_2;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        CTRLDESCL5_2 = curr;
    }

    /**
     * Get CTRLDESCL5_2's POSX field.
     *
     * The horizontal position of left-hand column of the layer, where 0 is the
     * left-hand column of the panel, only positive values are to the right the
     * left-hand column of the panel
     */
    inline uint16_t get_CTRLDESCL5_2_POSX() volatile
    {
        return (CTRLDESCL5_2 >> 0u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL5_2's POSX field.
     *
     * The horizontal position of left-hand column of the layer, where 0 is the
     * left-hand column of the panel, only positive values are to the right the
     * left-hand column of the panel
     */
    inline void set_CTRLDESCL5_2_POSX(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL5_2;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        CTRLDESCL5_2 = curr;
    }

    /**
     * Get all of CTRLDESCL5_2's bit fields.
     *
     * (read-write) Control Descriptor Layer 2 Register
     */
    inline void get_CTRLDESCL5_2(uint16_t &POSY, uint16_t &POSX) volatile
    {
        uint32_t curr = CTRLDESCL5_2;

        POSY = (curr >> 16u) & 0b111111111111u;
        POSX = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of CTRLDESCL5_2's bit fields.
     *
     * (read-write) Control Descriptor Layer 2 Register
     */
    inline void set_CTRLDESCL5_2(uint16_t POSY, uint16_t POSX) volatile
    {
        uint32_t curr = CTRLDESCL5_2;

        curr &= ~(0b111111111111u << 16u);
        curr |= (POSY & 0b111111111111u) << 16u;
        curr &= ~(0b111111111111u << 0u);
        curr |= (POSX & 0b111111111111u) << 0u;

        CTRLDESCL5_2 = curr;
    }

    /**
     * Get CTRLDESCL5_3's PITCH field.
     *
     * Number of bytes between 2 vertically adjacent pixels in system memory.
     * Byte granularity is supported, but SW should align to 64B boundry
     */
    inline uint16_t get_CTRLDESCL5_3_PITCH() volatile
    {
        return (CTRLDESCL5_3 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set CTRLDESCL5_3's PITCH field.
     *
     * Number of bytes between 2 vertically adjacent pixels in system memory.
     * Byte granularity is supported, but SW should align to 64B boundry
     */
    inline void set_CTRLDESCL5_3_PITCH(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL5_3;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        CTRLDESCL5_3 = curr;
    }

    /**
     * Get CTRLDESCL5_4's ADDR field.
     *
     * Address of layer data in the memory. The address programmed should be
     * 64-bit aligned
     */
    inline uint32_t get_CTRLDESCL5_4_ADDR() volatile
    {
        return (CTRLDESCL5_4 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set CTRLDESCL5_4's ADDR field.
     *
     * Address of layer data in the memory. The address programmed should be
     * 64-bit aligned
     */
    inline void set_CTRLDESCL5_4_ADDR(uint32_t value) volatile
    {
        uint32_t curr = CTRLDESCL5_4;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        CTRLDESCL5_4 = curr;
    }

    /**
     * Get CTRLDESCL5_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline bool get_CTRLDESCL5_5_EN() volatile
    {
        return CTRLDESCL5_5 & (1u << 31u);
    }

    /**
     * Set CTRLDESCL5_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void set_CTRLDESCL5_5_EN() volatile
    {
        CTRLDESCL5_5 |= 1u << 31u;
    }

    /**
     * Clear CTRLDESCL5_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void clear_CTRLDESCL5_5_EN() volatile
    {
        CTRLDESCL5_5 &= ~(1u << 31u);
    }

    /**
     * Toggle CTRLDESCL5_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void toggle_CTRLDESCL5_5_EN() volatile
    {
        CTRLDESCL5_5 ^= 1u << 31u;
    }

    /**
     * Get CTRLDESCL5_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline bool get_CTRLDESCL5_5_SHADOW_LOAD_EN() volatile
    {
        return CTRLDESCL5_5 & (1u << 30u);
    }

    /**
     * Set CTRLDESCL5_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void set_CTRLDESCL5_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL5_5 |= 1u << 30u;
    }

    /**
     * Clear CTRLDESCL5_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void clear_CTRLDESCL5_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL5_5 &= ~(1u << 30u);
    }

    /**
     * Toggle CTRLDESCL5_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void toggle_CTRLDESCL5_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL5_5 ^= 1u << 30u;
    }

    /**
     * Get CTRLDESCL5_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline bool get_CTRLDESCL5_5_SAFETY_EN() volatile
    {
        return CTRLDESCL5_5 & (1u << 28u);
    }

    /**
     * Set CTRLDESCL5_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void set_CTRLDESCL5_5_SAFETY_EN() volatile
    {
        CTRLDESCL5_5 |= 1u << 28u;
    }

    /**
     * Clear CTRLDESCL5_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void clear_CTRLDESCL5_5_SAFETY_EN() volatile
    {
        CTRLDESCL5_5 &= ~(1u << 28u);
    }

    /**
     * Toggle CTRLDESCL5_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void toggle_CTRLDESCL5_5_SAFETY_EN() volatile
    {
        CTRLDESCL5_5 ^= 1u << 28u;
    }

    /**
     * Get CTRLDESCL5_5's BPP field.
     *
     * Layer encoding format (bit per pixel)
     */
    inline LCDIFV2_CTRLDESCL5_5_BPP get_CTRLDESCL5_5_BPP() volatile
    {
        return LCDIFV2_CTRLDESCL5_5_BPP((CTRLDESCL5_5 >> 24u) & 0b1111u);
    }

    /**
     * Set CTRLDESCL5_5's BPP field.
     *
     * Layer encoding format (bit per pixel)
     */
    inline void set_CTRLDESCL5_5_BPP(LCDIFV2_CTRLDESCL5_5_BPP value) volatile
    {
        uint32_t curr = CTRLDESCL5_5;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        CTRLDESCL5_5 = curr;
    }

    /**
     * Get CTRLDESCL5_5's GLOBAL_ALPHA field.
     *
     * Global Alpha
     */
    inline uint8_t get_CTRLDESCL5_5_GLOBAL_ALPHA() volatile
    {
        return (CTRLDESCL5_5 >> 16u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL5_5's GLOBAL_ALPHA field.
     *
     * Global Alpha
     */
    inline void set_CTRLDESCL5_5_GLOBAL_ALPHA(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL5_5;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CTRLDESCL5_5 = curr;
    }

    /**
     * Get CTRLDESCL5_5's YUV_FORMAT field.
     *
     * The YUV422 input format selection
     */
    inline LCDIFV2_CTRLDESCL5_5_YUV_FORMAT
    get_CTRLDESCL5_5_YUV_FORMAT() volatile
    {
        return LCDIFV2_CTRLDESCL5_5_YUV_FORMAT((CTRLDESCL5_5 >> 14u) & 0b11u);
    }

    /**
     * Set CTRLDESCL5_5's YUV_FORMAT field.
     *
     * The YUV422 input format selection
     */
    inline void set_CTRLDESCL5_5_YUV_FORMAT(
        LCDIFV2_CTRLDESCL5_5_YUV_FORMAT value) volatile
    {
        uint32_t curr = CTRLDESCL5_5;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        CTRLDESCL5_5 = curr;
    }

    /**
     * Get CTRLDESCL5_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline bool get_CTRLDESCL5_5_PD_COLOR_MODE() volatile
    {
        return CTRLDESCL5_5 & (1u << 9u);
    }

    /**
     * Set CTRLDESCL5_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void set_CTRLDESCL5_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL5_5 |= 1u << 9u;
    }

    /**
     * Clear CTRLDESCL5_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void clear_CTRLDESCL5_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL5_5 &= ~(1u << 9u);
    }

    /**
     * Toggle CTRLDESCL5_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void toggle_CTRLDESCL5_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL5_5 ^= 1u << 9u;
    }

    /**
     * Get CTRLDESCL5_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline bool get_CTRLDESCL5_5_PD_ALPHA_MODE() volatile
    {
        return CTRLDESCL5_5 & (1u << 8u);
    }

    /**
     * Set CTRLDESCL5_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void set_CTRLDESCL5_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL5_5 |= 1u << 8u;
    }

    /**
     * Clear CTRLDESCL5_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void clear_CTRLDESCL5_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL5_5 &= ~(1u << 8u);
    }

    /**
     * Toggle CTRLDESCL5_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void toggle_CTRLDESCL5_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL5_5 ^= 1u << 8u;
    }

    /**
     * Get CTRLDESCL5_5's PD_GLOBAL_ALPHA_MODE field.
     *
     * PoterDuff global alpha mode
     */
    inline LCDIFV2_CTRLDESCL5_5_PD_GLOBAL_ALPHA_MODE
    get_CTRLDESCL5_5_PD_GLOBAL_ALPHA_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL5_5_PD_GLOBAL_ALPHA_MODE((CTRLDESCL5_5 >> 6u) &
                                                         0b11u);
    }

    /**
     * Set CTRLDESCL5_5's PD_GLOBAL_ALPHA_MODE field.
     *
     * PoterDuff global alpha mode
     */
    inline void set_CTRLDESCL5_5_PD_GLOBAL_ALPHA_MODE(
        LCDIFV2_CTRLDESCL5_5_PD_GLOBAL_ALPHA_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL5_5;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        CTRLDESCL5_5 = curr;
    }

    /**
     * Get CTRLDESCL5_5's PD_FACTOR_MODE field.
     *
     * PoterDuff factor mode
     */
    inline LCDIFV2_CTRLDESCL5_5_PD_FACTOR_MODE
    get_CTRLDESCL5_5_PD_FACTOR_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL5_5_PD_FACTOR_MODE((CTRLDESCL5_5 >> 4u) &
                                                   0b11u);
    }

    /**
     * Set CTRLDESCL5_5's PD_FACTOR_MODE field.
     *
     * PoterDuff factor mode
     */
    inline void set_CTRLDESCL5_5_PD_FACTOR_MODE(
        LCDIFV2_CTRLDESCL5_5_PD_FACTOR_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL5_5;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        CTRLDESCL5_5 = curr;
    }

    /**
     * Get CTRLDESCL5_5's AB_MODE field.
     *
     * Alpha Blending Mode
     */
    inline LCDIFV2_CTRLDESCL5_5_AB_MODE get_CTRLDESCL5_5_AB_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL5_5_AB_MODE((CTRLDESCL5_5 >> 0u) & 0b11u);
    }

    /**
     * Set CTRLDESCL5_5's AB_MODE field.
     *
     * Alpha Blending Mode
     */
    inline void set_CTRLDESCL5_5_AB_MODE(
        LCDIFV2_CTRLDESCL5_5_AB_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL5_5;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        CTRLDESCL5_5 = curr;
    }

    /**
     * Get all of CTRLDESCL5_5's bit fields.
     *
     * (read-write) Control Descriptor Layer 5 Register
     */
    inline void get_CTRLDESCL5_5(
        bool &EN, bool &SHADOW_LOAD_EN, bool &SAFETY_EN,
        LCDIFV2_CTRLDESCL5_5_BPP &BPP, uint8_t &GLOBAL_ALPHA,
        LCDIFV2_CTRLDESCL5_5_YUV_FORMAT &YUV_FORMAT, bool &PD_COLOR_MODE,
        bool &PD_ALPHA_MODE,
        LCDIFV2_CTRLDESCL5_5_PD_GLOBAL_ALPHA_MODE &PD_GLOBAL_ALPHA_MODE,
        LCDIFV2_CTRLDESCL5_5_PD_FACTOR_MODE &PD_FACTOR_MODE,
        LCDIFV2_CTRLDESCL5_5_AB_MODE &AB_MODE) volatile
    {
        uint32_t curr = CTRLDESCL5_5;

        EN = curr & (1u << 31u);
        SHADOW_LOAD_EN = curr & (1u << 30u);
        SAFETY_EN = curr & (1u << 28u);
        BPP = LCDIFV2_CTRLDESCL5_5_BPP((curr >> 24u) & 0b1111u);
        GLOBAL_ALPHA = (curr >> 16u) & 0b11111111u;
        YUV_FORMAT = LCDIFV2_CTRLDESCL5_5_YUV_FORMAT((curr >> 14u) & 0b11u);
        PD_COLOR_MODE = curr & (1u << 9u);
        PD_ALPHA_MODE = curr & (1u << 8u);
        PD_GLOBAL_ALPHA_MODE =
            LCDIFV2_CTRLDESCL5_5_PD_GLOBAL_ALPHA_MODE((curr >> 6u) & 0b11u);
        PD_FACTOR_MODE =
            LCDIFV2_CTRLDESCL5_5_PD_FACTOR_MODE((curr >> 4u) & 0b11u);
        AB_MODE = LCDIFV2_CTRLDESCL5_5_AB_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of CTRLDESCL5_5's bit fields.
     *
     * (read-write) Control Descriptor Layer 5 Register
     */
    inline void set_CTRLDESCL5_5(
        bool EN, bool SHADOW_LOAD_EN, bool SAFETY_EN,
        LCDIFV2_CTRLDESCL5_5_BPP BPP, uint8_t GLOBAL_ALPHA,
        LCDIFV2_CTRLDESCL5_5_YUV_FORMAT YUV_FORMAT, bool PD_COLOR_MODE,
        bool PD_ALPHA_MODE,
        LCDIFV2_CTRLDESCL5_5_PD_GLOBAL_ALPHA_MODE PD_GLOBAL_ALPHA_MODE,
        LCDIFV2_CTRLDESCL5_5_PD_FACTOR_MODE PD_FACTOR_MODE,
        LCDIFV2_CTRLDESCL5_5_AB_MODE AB_MODE) volatile
    {
        uint32_t curr = CTRLDESCL5_5;

        curr &= ~(0b1u << 31u);
        curr |= (EN & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (SHADOW_LOAD_EN & 0b1u) << 30u;
        curr &= ~(0b1u << 28u);
        curr |= (SAFETY_EN & 0b1u) << 28u;
        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(BPP) & 0b1111u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (GLOBAL_ALPHA & 0b11111111u) << 16u;
        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(YUV_FORMAT) & 0b11u) << 14u;
        curr &= ~(0b1u << 9u);
        curr |= (PD_COLOR_MODE & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (PD_ALPHA_MODE & 0b1u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(PD_GLOBAL_ALPHA_MODE) & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(PD_FACTOR_MODE) & 0b11u) << 4u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(AB_MODE) & 0b11u) << 0u;

        CTRLDESCL5_5 = curr;
    }

    /**
     * Get CTRLDESCL5_6's BCLR_R field.
     *
     * Background R component value
     */
    inline uint8_t get_CTRLDESCL5_6_BCLR_R() volatile
    {
        return (CTRLDESCL5_6 >> 16u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL5_6's BCLR_R field.
     *
     * Background R component value
     */
    inline void set_CTRLDESCL5_6_BCLR_R(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL5_6;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CTRLDESCL5_6 = curr;
    }

    /**
     * Get CTRLDESCL5_6's BCLR_G field.
     *
     * Background G component value
     */
    inline uint8_t get_CTRLDESCL5_6_BCLR_G() volatile
    {
        return (CTRLDESCL5_6 >> 8u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL5_6's BCLR_G field.
     *
     * Background G component value
     */
    inline void set_CTRLDESCL5_6_BCLR_G(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL5_6;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        CTRLDESCL5_6 = curr;
    }

    /**
     * Get CTRLDESCL5_6's BCLR_B field.
     *
     * Background B component value
     */
    inline uint8_t get_CTRLDESCL5_6_BCLR_B() volatile
    {
        return (CTRLDESCL5_6 >> 0u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL5_6's BCLR_B field.
     *
     * Background B component value
     */
    inline void set_CTRLDESCL5_6_BCLR_B(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL5_6;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        CTRLDESCL5_6 = curr;
    }

    /**
     * Get all of CTRLDESCL5_6's bit fields.
     *
     * (read-write) Control Descriptor Layer 6 Register
     */
    inline void get_CTRLDESCL5_6(uint8_t &BCLR_R, uint8_t &BCLR_G,
                                 uint8_t &BCLR_B) volatile
    {
        uint32_t curr = CTRLDESCL5_6;

        BCLR_R = (curr >> 16u) & 0b11111111u;
        BCLR_G = (curr >> 8u) & 0b11111111u;
        BCLR_B = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of CTRLDESCL5_6's bit fields.
     *
     * (read-write) Control Descriptor Layer 6 Register
     */
    inline void set_CTRLDESCL5_6(uint8_t BCLR_R, uint8_t BCLR_G,
                                 uint8_t BCLR_B) volatile
    {
        uint32_t curr = CTRLDESCL5_6;

        curr &= ~(0b11111111u << 16u);
        curr |= (BCLR_R & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (BCLR_G & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (BCLR_B & 0b11111111u) << 0u;

        CTRLDESCL5_6 = curr;
    }

    /**
     * Get CTRLDESCL6_1's HEIGHT field.
     *
     * Height of the layer in pixels
     */
    inline uint16_t get_CTRLDESCL6_1_HEIGHT() volatile
    {
        return (CTRLDESCL6_1 >> 16u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL6_1's HEIGHT field.
     *
     * Height of the layer in pixels
     */
    inline void set_CTRLDESCL6_1_HEIGHT(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL6_1;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        CTRLDESCL6_1 = curr;
    }

    /**
     * Get CTRLDESCL6_1's WIDTH field.
     *
     * Width of the layer in pixels
     */
    inline uint16_t get_CTRLDESCL6_1_WIDTH() volatile
    {
        return (CTRLDESCL6_1 >> 0u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL6_1's WIDTH field.
     *
     * Width of the layer in pixels
     */
    inline void set_CTRLDESCL6_1_WIDTH(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL6_1;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        CTRLDESCL6_1 = curr;
    }

    /**
     * Get all of CTRLDESCL6_1's bit fields.
     *
     * (read-write) Control Descriptor Layer 1 Register
     */
    inline void get_CTRLDESCL6_1(uint16_t &HEIGHT, uint16_t &WIDTH) volatile
    {
        uint32_t curr = CTRLDESCL6_1;

        HEIGHT = (curr >> 16u) & 0b111111111111u;
        WIDTH = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of CTRLDESCL6_1's bit fields.
     *
     * (read-write) Control Descriptor Layer 1 Register
     */
    inline void set_CTRLDESCL6_1(uint16_t HEIGHT, uint16_t WIDTH) volatile
    {
        uint32_t curr = CTRLDESCL6_1;

        curr &= ~(0b111111111111u << 16u);
        curr |= (HEIGHT & 0b111111111111u) << 16u;
        curr &= ~(0b111111111111u << 0u);
        curr |= (WIDTH & 0b111111111111u) << 0u;

        CTRLDESCL6_1 = curr;
    }

    /**
     * Get CTRLDESCL6_2's POSY field.
     *
     * The vertical position of top row of the layer, where 0 is the top row of
     * the panel, only positive values are below the top row of the panel
     */
    inline uint16_t get_CTRLDESCL6_2_POSY() volatile
    {
        return (CTRLDESCL6_2 >> 16u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL6_2's POSY field.
     *
     * The vertical position of top row of the layer, where 0 is the top row of
     * the panel, only positive values are below the top row of the panel
     */
    inline void set_CTRLDESCL6_2_POSY(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL6_2;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        CTRLDESCL6_2 = curr;
    }

    /**
     * Get CTRLDESCL6_2's POSX field.
     *
     * The horizontal position of left-hand column of the layer, where 0 is the
     * left-hand column of the panel, only positive values are to the right the
     * left-hand column of the panel
     */
    inline uint16_t get_CTRLDESCL6_2_POSX() volatile
    {
        return (CTRLDESCL6_2 >> 0u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL6_2's POSX field.
     *
     * The horizontal position of left-hand column of the layer, where 0 is the
     * left-hand column of the panel, only positive values are to the right the
     * left-hand column of the panel
     */
    inline void set_CTRLDESCL6_2_POSX(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL6_2;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        CTRLDESCL6_2 = curr;
    }

    /**
     * Get all of CTRLDESCL6_2's bit fields.
     *
     * (read-write) Control Descriptor Layer 2 Register
     */
    inline void get_CTRLDESCL6_2(uint16_t &POSY, uint16_t &POSX) volatile
    {
        uint32_t curr = CTRLDESCL6_2;

        POSY = (curr >> 16u) & 0b111111111111u;
        POSX = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of CTRLDESCL6_2's bit fields.
     *
     * (read-write) Control Descriptor Layer 2 Register
     */
    inline void set_CTRLDESCL6_2(uint16_t POSY, uint16_t POSX) volatile
    {
        uint32_t curr = CTRLDESCL6_2;

        curr &= ~(0b111111111111u << 16u);
        curr |= (POSY & 0b111111111111u) << 16u;
        curr &= ~(0b111111111111u << 0u);
        curr |= (POSX & 0b111111111111u) << 0u;

        CTRLDESCL6_2 = curr;
    }

    /**
     * Get CTRLDESCL6_3's PITCH field.
     *
     * Number of bytes between 2 vertically adjacent pixels in system memory.
     * Byte granularity is supported, but SW should align to 64B boundry
     */
    inline uint16_t get_CTRLDESCL6_3_PITCH() volatile
    {
        return (CTRLDESCL6_3 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set CTRLDESCL6_3's PITCH field.
     *
     * Number of bytes between 2 vertically adjacent pixels in system memory.
     * Byte granularity is supported, but SW should align to 64B boundry
     */
    inline void set_CTRLDESCL6_3_PITCH(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL6_3;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        CTRLDESCL6_3 = curr;
    }

    /**
     * Get CTRLDESCL6_4's ADDR field.
     *
     * Address of layer data in the memory. The address programmed should be
     * 64-bit aligned
     */
    inline uint32_t get_CTRLDESCL6_4_ADDR() volatile
    {
        return (CTRLDESCL6_4 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set CTRLDESCL6_4's ADDR field.
     *
     * Address of layer data in the memory. The address programmed should be
     * 64-bit aligned
     */
    inline void set_CTRLDESCL6_4_ADDR(uint32_t value) volatile
    {
        uint32_t curr = CTRLDESCL6_4;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        CTRLDESCL6_4 = curr;
    }

    /**
     * Get CTRLDESCL6_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline bool get_CTRLDESCL6_5_EN() volatile
    {
        return CTRLDESCL6_5 & (1u << 31u);
    }

    /**
     * Set CTRLDESCL6_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void set_CTRLDESCL6_5_EN() volatile
    {
        CTRLDESCL6_5 |= 1u << 31u;
    }

    /**
     * Clear CTRLDESCL6_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void clear_CTRLDESCL6_5_EN() volatile
    {
        CTRLDESCL6_5 &= ~(1u << 31u);
    }

    /**
     * Toggle CTRLDESCL6_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void toggle_CTRLDESCL6_5_EN() volatile
    {
        CTRLDESCL6_5 ^= 1u << 31u;
    }

    /**
     * Get CTRLDESCL6_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline bool get_CTRLDESCL6_5_SHADOW_LOAD_EN() volatile
    {
        return CTRLDESCL6_5 & (1u << 30u);
    }

    /**
     * Set CTRLDESCL6_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void set_CTRLDESCL6_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL6_5 |= 1u << 30u;
    }

    /**
     * Clear CTRLDESCL6_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void clear_CTRLDESCL6_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL6_5 &= ~(1u << 30u);
    }

    /**
     * Toggle CTRLDESCL6_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void toggle_CTRLDESCL6_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL6_5 ^= 1u << 30u;
    }

    /**
     * Get CTRLDESCL6_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline bool get_CTRLDESCL6_5_SAFETY_EN() volatile
    {
        return CTRLDESCL6_5 & (1u << 28u);
    }

    /**
     * Set CTRLDESCL6_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void set_CTRLDESCL6_5_SAFETY_EN() volatile
    {
        CTRLDESCL6_5 |= 1u << 28u;
    }

    /**
     * Clear CTRLDESCL6_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void clear_CTRLDESCL6_5_SAFETY_EN() volatile
    {
        CTRLDESCL6_5 &= ~(1u << 28u);
    }

    /**
     * Toggle CTRLDESCL6_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void toggle_CTRLDESCL6_5_SAFETY_EN() volatile
    {
        CTRLDESCL6_5 ^= 1u << 28u;
    }

    /**
     * Get CTRLDESCL6_5's BPP field.
     *
     * Layer encoding format (bit per pixel)
     */
    inline LCDIFV2_CTRLDESCL6_5_BPP get_CTRLDESCL6_5_BPP() volatile
    {
        return LCDIFV2_CTRLDESCL6_5_BPP((CTRLDESCL6_5 >> 24u) & 0b1111u);
    }

    /**
     * Set CTRLDESCL6_5's BPP field.
     *
     * Layer encoding format (bit per pixel)
     */
    inline void set_CTRLDESCL6_5_BPP(LCDIFV2_CTRLDESCL6_5_BPP value) volatile
    {
        uint32_t curr = CTRLDESCL6_5;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        CTRLDESCL6_5 = curr;
    }

    /**
     * Get CTRLDESCL6_5's GLOBAL_ALPHA field.
     *
     * Global Alpha
     */
    inline uint8_t get_CTRLDESCL6_5_GLOBAL_ALPHA() volatile
    {
        return (CTRLDESCL6_5 >> 16u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL6_5's GLOBAL_ALPHA field.
     *
     * Global Alpha
     */
    inline void set_CTRLDESCL6_5_GLOBAL_ALPHA(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL6_5;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CTRLDESCL6_5 = curr;
    }

    /**
     * Get CTRLDESCL6_5's YUV_FORMAT field.
     *
     * The YUV422 input format selection
     */
    inline LCDIFV2_CTRLDESCL6_5_YUV_FORMAT
    get_CTRLDESCL6_5_YUV_FORMAT() volatile
    {
        return LCDIFV2_CTRLDESCL6_5_YUV_FORMAT((CTRLDESCL6_5 >> 14u) & 0b11u);
    }

    /**
     * Set CTRLDESCL6_5's YUV_FORMAT field.
     *
     * The YUV422 input format selection
     */
    inline void set_CTRLDESCL6_5_YUV_FORMAT(
        LCDIFV2_CTRLDESCL6_5_YUV_FORMAT value) volatile
    {
        uint32_t curr = CTRLDESCL6_5;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        CTRLDESCL6_5 = curr;
    }

    /**
     * Get CTRLDESCL6_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline bool get_CTRLDESCL6_5_PD_COLOR_MODE() volatile
    {
        return CTRLDESCL6_5 & (1u << 9u);
    }

    /**
     * Set CTRLDESCL6_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void set_CTRLDESCL6_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL6_5 |= 1u << 9u;
    }

    /**
     * Clear CTRLDESCL6_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void clear_CTRLDESCL6_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL6_5 &= ~(1u << 9u);
    }

    /**
     * Toggle CTRLDESCL6_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void toggle_CTRLDESCL6_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL6_5 ^= 1u << 9u;
    }

    /**
     * Get CTRLDESCL6_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline bool get_CTRLDESCL6_5_PD_ALPHA_MODE() volatile
    {
        return CTRLDESCL6_5 & (1u << 8u);
    }

    /**
     * Set CTRLDESCL6_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void set_CTRLDESCL6_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL6_5 |= 1u << 8u;
    }

    /**
     * Clear CTRLDESCL6_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void clear_CTRLDESCL6_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL6_5 &= ~(1u << 8u);
    }

    /**
     * Toggle CTRLDESCL6_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void toggle_CTRLDESCL6_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL6_5 ^= 1u << 8u;
    }

    /**
     * Get CTRLDESCL6_5's PD_GLOBAL_ALPHA_MODE field.
     *
     * PoterDuff global alpha mode
     */
    inline LCDIFV2_CTRLDESCL6_5_PD_GLOBAL_ALPHA_MODE
    get_CTRLDESCL6_5_PD_GLOBAL_ALPHA_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL6_5_PD_GLOBAL_ALPHA_MODE((CTRLDESCL6_5 >> 6u) &
                                                         0b11u);
    }

    /**
     * Set CTRLDESCL6_5's PD_GLOBAL_ALPHA_MODE field.
     *
     * PoterDuff global alpha mode
     */
    inline void set_CTRLDESCL6_5_PD_GLOBAL_ALPHA_MODE(
        LCDIFV2_CTRLDESCL6_5_PD_GLOBAL_ALPHA_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL6_5;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        CTRLDESCL6_5 = curr;
    }

    /**
     * Get CTRLDESCL6_5's PD_FACTOR_MODE field.
     *
     * PoterDuff factor mode
     */
    inline LCDIFV2_CTRLDESCL6_5_PD_FACTOR_MODE
    get_CTRLDESCL6_5_PD_FACTOR_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL6_5_PD_FACTOR_MODE((CTRLDESCL6_5 >> 4u) &
                                                   0b11u);
    }

    /**
     * Set CTRLDESCL6_5's PD_FACTOR_MODE field.
     *
     * PoterDuff factor mode
     */
    inline void set_CTRLDESCL6_5_PD_FACTOR_MODE(
        LCDIFV2_CTRLDESCL6_5_PD_FACTOR_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL6_5;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        CTRLDESCL6_5 = curr;
    }

    /**
     * Get CTRLDESCL6_5's AB_MODE field.
     *
     * Alpha Blending Mode
     */
    inline LCDIFV2_CTRLDESCL6_5_AB_MODE get_CTRLDESCL6_5_AB_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL6_5_AB_MODE((CTRLDESCL6_5 >> 0u) & 0b11u);
    }

    /**
     * Set CTRLDESCL6_5's AB_MODE field.
     *
     * Alpha Blending Mode
     */
    inline void set_CTRLDESCL6_5_AB_MODE(
        LCDIFV2_CTRLDESCL6_5_AB_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL6_5;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        CTRLDESCL6_5 = curr;
    }

    /**
     * Get all of CTRLDESCL6_5's bit fields.
     *
     * (read-write) Control Descriptor Layer 5 Register
     */
    inline void get_CTRLDESCL6_5(
        bool &EN, bool &SHADOW_LOAD_EN, bool &SAFETY_EN,
        LCDIFV2_CTRLDESCL6_5_BPP &BPP, uint8_t &GLOBAL_ALPHA,
        LCDIFV2_CTRLDESCL6_5_YUV_FORMAT &YUV_FORMAT, bool &PD_COLOR_MODE,
        bool &PD_ALPHA_MODE,
        LCDIFV2_CTRLDESCL6_5_PD_GLOBAL_ALPHA_MODE &PD_GLOBAL_ALPHA_MODE,
        LCDIFV2_CTRLDESCL6_5_PD_FACTOR_MODE &PD_FACTOR_MODE,
        LCDIFV2_CTRLDESCL6_5_AB_MODE &AB_MODE) volatile
    {
        uint32_t curr = CTRLDESCL6_5;

        EN = curr & (1u << 31u);
        SHADOW_LOAD_EN = curr & (1u << 30u);
        SAFETY_EN = curr & (1u << 28u);
        BPP = LCDIFV2_CTRLDESCL6_5_BPP((curr >> 24u) & 0b1111u);
        GLOBAL_ALPHA = (curr >> 16u) & 0b11111111u;
        YUV_FORMAT = LCDIFV2_CTRLDESCL6_5_YUV_FORMAT((curr >> 14u) & 0b11u);
        PD_COLOR_MODE = curr & (1u << 9u);
        PD_ALPHA_MODE = curr & (1u << 8u);
        PD_GLOBAL_ALPHA_MODE =
            LCDIFV2_CTRLDESCL6_5_PD_GLOBAL_ALPHA_MODE((curr >> 6u) & 0b11u);
        PD_FACTOR_MODE =
            LCDIFV2_CTRLDESCL6_5_PD_FACTOR_MODE((curr >> 4u) & 0b11u);
        AB_MODE = LCDIFV2_CTRLDESCL6_5_AB_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of CTRLDESCL6_5's bit fields.
     *
     * (read-write) Control Descriptor Layer 5 Register
     */
    inline void set_CTRLDESCL6_5(
        bool EN, bool SHADOW_LOAD_EN, bool SAFETY_EN,
        LCDIFV2_CTRLDESCL6_5_BPP BPP, uint8_t GLOBAL_ALPHA,
        LCDIFV2_CTRLDESCL6_5_YUV_FORMAT YUV_FORMAT, bool PD_COLOR_MODE,
        bool PD_ALPHA_MODE,
        LCDIFV2_CTRLDESCL6_5_PD_GLOBAL_ALPHA_MODE PD_GLOBAL_ALPHA_MODE,
        LCDIFV2_CTRLDESCL6_5_PD_FACTOR_MODE PD_FACTOR_MODE,
        LCDIFV2_CTRLDESCL6_5_AB_MODE AB_MODE) volatile
    {
        uint32_t curr = CTRLDESCL6_5;

        curr &= ~(0b1u << 31u);
        curr |= (EN & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (SHADOW_LOAD_EN & 0b1u) << 30u;
        curr &= ~(0b1u << 28u);
        curr |= (SAFETY_EN & 0b1u) << 28u;
        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(BPP) & 0b1111u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (GLOBAL_ALPHA & 0b11111111u) << 16u;
        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(YUV_FORMAT) & 0b11u) << 14u;
        curr &= ~(0b1u << 9u);
        curr |= (PD_COLOR_MODE & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (PD_ALPHA_MODE & 0b1u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(PD_GLOBAL_ALPHA_MODE) & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(PD_FACTOR_MODE) & 0b11u) << 4u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(AB_MODE) & 0b11u) << 0u;

        CTRLDESCL6_5 = curr;
    }

    /**
     * Get CTRLDESCL6_6's BCLR_R field.
     *
     * Background R component value
     */
    inline uint8_t get_CTRLDESCL6_6_BCLR_R() volatile
    {
        return (CTRLDESCL6_6 >> 16u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL6_6's BCLR_R field.
     *
     * Background R component value
     */
    inline void set_CTRLDESCL6_6_BCLR_R(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL6_6;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CTRLDESCL6_6 = curr;
    }

    /**
     * Get CTRLDESCL6_6's BCLR_G field.
     *
     * Background G component value
     */
    inline uint8_t get_CTRLDESCL6_6_BCLR_G() volatile
    {
        return (CTRLDESCL6_6 >> 8u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL6_6's BCLR_G field.
     *
     * Background G component value
     */
    inline void set_CTRLDESCL6_6_BCLR_G(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL6_6;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        CTRLDESCL6_6 = curr;
    }

    /**
     * Get CTRLDESCL6_6's BCLR_B field.
     *
     * Background B component value
     */
    inline uint8_t get_CTRLDESCL6_6_BCLR_B() volatile
    {
        return (CTRLDESCL6_6 >> 0u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL6_6's BCLR_B field.
     *
     * Background B component value
     */
    inline void set_CTRLDESCL6_6_BCLR_B(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL6_6;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        CTRLDESCL6_6 = curr;
    }

    /**
     * Get all of CTRLDESCL6_6's bit fields.
     *
     * (read-write) Control Descriptor Layer 6 Register
     */
    inline void get_CTRLDESCL6_6(uint8_t &BCLR_R, uint8_t &BCLR_G,
                                 uint8_t &BCLR_B) volatile
    {
        uint32_t curr = CTRLDESCL6_6;

        BCLR_R = (curr >> 16u) & 0b11111111u;
        BCLR_G = (curr >> 8u) & 0b11111111u;
        BCLR_B = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of CTRLDESCL6_6's bit fields.
     *
     * (read-write) Control Descriptor Layer 6 Register
     */
    inline void set_CTRLDESCL6_6(uint8_t BCLR_R, uint8_t BCLR_G,
                                 uint8_t BCLR_B) volatile
    {
        uint32_t curr = CTRLDESCL6_6;

        curr &= ~(0b11111111u << 16u);
        curr |= (BCLR_R & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (BCLR_G & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (BCLR_B & 0b11111111u) << 0u;

        CTRLDESCL6_6 = curr;
    }

    /**
     * Get CTRLDESCL7_1's HEIGHT field.
     *
     * Height of the layer in pixels
     */
    inline uint16_t get_CTRLDESCL7_1_HEIGHT() volatile
    {
        return (CTRLDESCL7_1 >> 16u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL7_1's HEIGHT field.
     *
     * Height of the layer in pixels
     */
    inline void set_CTRLDESCL7_1_HEIGHT(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL7_1;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        CTRLDESCL7_1 = curr;
    }

    /**
     * Get CTRLDESCL7_1's WIDTH field.
     *
     * Width of the layer in pixels
     */
    inline uint16_t get_CTRLDESCL7_1_WIDTH() volatile
    {
        return (CTRLDESCL7_1 >> 0u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL7_1's WIDTH field.
     *
     * Width of the layer in pixels
     */
    inline void set_CTRLDESCL7_1_WIDTH(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL7_1;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        CTRLDESCL7_1 = curr;
    }

    /**
     * Get all of CTRLDESCL7_1's bit fields.
     *
     * (read-write) Control Descriptor Layer 1 Register
     */
    inline void get_CTRLDESCL7_1(uint16_t &HEIGHT, uint16_t &WIDTH) volatile
    {
        uint32_t curr = CTRLDESCL7_1;

        HEIGHT = (curr >> 16u) & 0b111111111111u;
        WIDTH = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of CTRLDESCL7_1's bit fields.
     *
     * (read-write) Control Descriptor Layer 1 Register
     */
    inline void set_CTRLDESCL7_1(uint16_t HEIGHT, uint16_t WIDTH) volatile
    {
        uint32_t curr = CTRLDESCL7_1;

        curr &= ~(0b111111111111u << 16u);
        curr |= (HEIGHT & 0b111111111111u) << 16u;
        curr &= ~(0b111111111111u << 0u);
        curr |= (WIDTH & 0b111111111111u) << 0u;

        CTRLDESCL7_1 = curr;
    }

    /**
     * Get CTRLDESCL7_2's POSY field.
     *
     * The vertical position of top row of the layer, where 0 is the top row of
     * the panel, only positive values are below the top row of the panel
     */
    inline uint16_t get_CTRLDESCL7_2_POSY() volatile
    {
        return (CTRLDESCL7_2 >> 16u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL7_2's POSY field.
     *
     * The vertical position of top row of the layer, where 0 is the top row of
     * the panel, only positive values are below the top row of the panel
     */
    inline void set_CTRLDESCL7_2_POSY(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL7_2;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        CTRLDESCL7_2 = curr;
    }

    /**
     * Get CTRLDESCL7_2's POSX field.
     *
     * The horizontal position of left-hand column of the layer, where 0 is the
     * left-hand column of the panel, only positive values are to the right the
     * left-hand column of the panel
     */
    inline uint16_t get_CTRLDESCL7_2_POSX() volatile
    {
        return (CTRLDESCL7_2 >> 0u) & 0b111111111111u;
    }

    /**
     * Set CTRLDESCL7_2's POSX field.
     *
     * The horizontal position of left-hand column of the layer, where 0 is the
     * left-hand column of the panel, only positive values are to the right the
     * left-hand column of the panel
     */
    inline void set_CTRLDESCL7_2_POSX(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL7_2;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        CTRLDESCL7_2 = curr;
    }

    /**
     * Get all of CTRLDESCL7_2's bit fields.
     *
     * (read-write) Control Descriptor Layer 2 Register
     */
    inline void get_CTRLDESCL7_2(uint16_t &POSY, uint16_t &POSX) volatile
    {
        uint32_t curr = CTRLDESCL7_2;

        POSY = (curr >> 16u) & 0b111111111111u;
        POSX = (curr >> 0u) & 0b111111111111u;
    }

    /**
     * Set all of CTRLDESCL7_2's bit fields.
     *
     * (read-write) Control Descriptor Layer 2 Register
     */
    inline void set_CTRLDESCL7_2(uint16_t POSY, uint16_t POSX) volatile
    {
        uint32_t curr = CTRLDESCL7_2;

        curr &= ~(0b111111111111u << 16u);
        curr |= (POSY & 0b111111111111u) << 16u;
        curr &= ~(0b111111111111u << 0u);
        curr |= (POSX & 0b111111111111u) << 0u;

        CTRLDESCL7_2 = curr;
    }

    /**
     * Get CTRLDESCL7_3's PITCH field.
     *
     * Number of bytes between 2 vertically adjacent pixels in system memory.
     * Byte granularity is supported, but SW should align to 64B boundry
     */
    inline uint16_t get_CTRLDESCL7_3_PITCH() volatile
    {
        return (CTRLDESCL7_3 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set CTRLDESCL7_3's PITCH field.
     *
     * Number of bytes between 2 vertically adjacent pixels in system memory.
     * Byte granularity is supported, but SW should align to 64B boundry
     */
    inline void set_CTRLDESCL7_3_PITCH(uint16_t value) volatile
    {
        uint32_t curr = CTRLDESCL7_3;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        CTRLDESCL7_3 = curr;
    }

    /**
     * Get CTRLDESCL7_4's ADDR field.
     *
     * Address of layer data in the memory. The address programmed should be
     * 64-bit aligned
     */
    inline uint32_t get_CTRLDESCL7_4_ADDR() volatile
    {
        return (CTRLDESCL7_4 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set CTRLDESCL7_4's ADDR field.
     *
     * Address of layer data in the memory. The address programmed should be
     * 64-bit aligned
     */
    inline void set_CTRLDESCL7_4_ADDR(uint32_t value) volatile
    {
        uint32_t curr = CTRLDESCL7_4;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        CTRLDESCL7_4 = curr;
    }

    /**
     * Get CTRLDESCL7_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline bool get_CTRLDESCL7_5_EN() volatile
    {
        return CTRLDESCL7_5 & (1u << 31u);
    }

    /**
     * Set CTRLDESCL7_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void set_CTRLDESCL7_5_EN() volatile
    {
        CTRLDESCL7_5 |= 1u << 31u;
    }

    /**
     * Clear CTRLDESCL7_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void clear_CTRLDESCL7_5_EN() volatile
    {
        CTRLDESCL7_5 &= ~(1u << 31u);
    }

    /**
     * Toggle CTRLDESCL7_5's EN bit.
     *
     * Enable the layer for DMA
     */
    inline void toggle_CTRLDESCL7_5_EN() volatile
    {
        CTRLDESCL7_5 ^= 1u << 31u;
    }

    /**
     * Get CTRLDESCL7_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline bool get_CTRLDESCL7_5_SHADOW_LOAD_EN() volatile
    {
        return CTRLDESCL7_5 & (1u << 30u);
    }

    /**
     * Set CTRLDESCL7_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void set_CTRLDESCL7_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL7_5 |= 1u << 30u;
    }

    /**
     * Clear CTRLDESCL7_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void clear_CTRLDESCL7_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL7_5 &= ~(1u << 30u);
    }

    /**
     * Toggle CTRLDESCL7_5's SHADOW_LOAD_EN bit.
     *
     * Shadow Load Enable
     */
    inline void toggle_CTRLDESCL7_5_SHADOW_LOAD_EN() volatile
    {
        CTRLDESCL7_5 ^= 1u << 30u;
    }

    /**
     * Get CTRLDESCL7_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline bool get_CTRLDESCL7_5_SAFETY_EN() volatile
    {
        return CTRLDESCL7_5 & (1u << 28u);
    }

    /**
     * Set CTRLDESCL7_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void set_CTRLDESCL7_5_SAFETY_EN() volatile
    {
        CTRLDESCL7_5 |= 1u << 28u;
    }

    /**
     * Clear CTRLDESCL7_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void clear_CTRLDESCL7_5_SAFETY_EN() volatile
    {
        CTRLDESCL7_5 &= ~(1u << 28u);
    }

    /**
     * Toggle CTRLDESCL7_5's SAFETY_EN bit.
     *
     * Safety Mode Enable Bit
     */
    inline void toggle_CTRLDESCL7_5_SAFETY_EN() volatile
    {
        CTRLDESCL7_5 ^= 1u << 28u;
    }

    /**
     * Get CTRLDESCL7_5's BPP field.
     *
     * Layer encoding format (bit per pixel)
     */
    inline LCDIFV2_CTRLDESCL7_5_BPP get_CTRLDESCL7_5_BPP() volatile
    {
        return LCDIFV2_CTRLDESCL7_5_BPP((CTRLDESCL7_5 >> 24u) & 0b1111u);
    }

    /**
     * Set CTRLDESCL7_5's BPP field.
     *
     * Layer encoding format (bit per pixel)
     */
    inline void set_CTRLDESCL7_5_BPP(LCDIFV2_CTRLDESCL7_5_BPP value) volatile
    {
        uint32_t curr = CTRLDESCL7_5;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        CTRLDESCL7_5 = curr;
    }

    /**
     * Get CTRLDESCL7_5's GLOBAL_ALPHA field.
     *
     * Global Alpha
     */
    inline uint8_t get_CTRLDESCL7_5_GLOBAL_ALPHA() volatile
    {
        return (CTRLDESCL7_5 >> 16u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL7_5's GLOBAL_ALPHA field.
     *
     * Global Alpha
     */
    inline void set_CTRLDESCL7_5_GLOBAL_ALPHA(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL7_5;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CTRLDESCL7_5 = curr;
    }

    /**
     * Get CTRLDESCL7_5's YUV_FORMAT field.
     *
     * The YUV422 input format selection
     */
    inline LCDIFV2_CTRLDESCL7_5_YUV_FORMAT
    get_CTRLDESCL7_5_YUV_FORMAT() volatile
    {
        return LCDIFV2_CTRLDESCL7_5_YUV_FORMAT((CTRLDESCL7_5 >> 14u) & 0b11u);
    }

    /**
     * Set CTRLDESCL7_5's YUV_FORMAT field.
     *
     * The YUV422 input format selection
     */
    inline void set_CTRLDESCL7_5_YUV_FORMAT(
        LCDIFV2_CTRLDESCL7_5_YUV_FORMAT value) volatile
    {
        uint32_t curr = CTRLDESCL7_5;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        CTRLDESCL7_5 = curr;
    }

    /**
     * Get CTRLDESCL7_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline bool get_CTRLDESCL7_5_PD_COLOR_MODE() volatile
    {
        return CTRLDESCL7_5 & (1u << 9u);
    }

    /**
     * Set CTRLDESCL7_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void set_CTRLDESCL7_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL7_5 |= 1u << 9u;
    }

    /**
     * Clear CTRLDESCL7_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void clear_CTRLDESCL7_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL7_5 &= ~(1u << 9u);
    }

    /**
     * Toggle CTRLDESCL7_5's PD_COLOR_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void toggle_CTRLDESCL7_5_PD_COLOR_MODE() volatile
    {
        CTRLDESCL7_5 ^= 1u << 9u;
    }

    /**
     * Get CTRLDESCL7_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline bool get_CTRLDESCL7_5_PD_ALPHA_MODE() volatile
    {
        return CTRLDESCL7_5 & (1u << 8u);
    }

    /**
     * Set CTRLDESCL7_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void set_CTRLDESCL7_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL7_5 |= 1u << 8u;
    }

    /**
     * Clear CTRLDESCL7_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void clear_CTRLDESCL7_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL7_5 &= ~(1u << 8u);
    }

    /**
     * Toggle CTRLDESCL7_5's PD_ALPHA_MODE bit.
     *
     * PoterDuff alpha mode
     */
    inline void toggle_CTRLDESCL7_5_PD_ALPHA_MODE() volatile
    {
        CTRLDESCL7_5 ^= 1u << 8u;
    }

    /**
     * Get CTRLDESCL7_5's PD_GLOBAL_ALPHA_MODE field.
     *
     * PoterDuff global alpha mode
     */
    inline LCDIFV2_CTRLDESCL7_5_PD_GLOBAL_ALPHA_MODE
    get_CTRLDESCL7_5_PD_GLOBAL_ALPHA_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL7_5_PD_GLOBAL_ALPHA_MODE((CTRLDESCL7_5 >> 6u) &
                                                         0b11u);
    }

    /**
     * Set CTRLDESCL7_5's PD_GLOBAL_ALPHA_MODE field.
     *
     * PoterDuff global alpha mode
     */
    inline void set_CTRLDESCL7_5_PD_GLOBAL_ALPHA_MODE(
        LCDIFV2_CTRLDESCL7_5_PD_GLOBAL_ALPHA_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL7_5;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        CTRLDESCL7_5 = curr;
    }

    /**
     * Get CTRLDESCL7_5's PD_FACTOR_MODE field.
     *
     * PoterDuff factor mode
     */
    inline LCDIFV2_CTRLDESCL7_5_PD_FACTOR_MODE
    get_CTRLDESCL7_5_PD_FACTOR_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL7_5_PD_FACTOR_MODE((CTRLDESCL7_5 >> 4u) &
                                                   0b11u);
    }

    /**
     * Set CTRLDESCL7_5's PD_FACTOR_MODE field.
     *
     * PoterDuff factor mode
     */
    inline void set_CTRLDESCL7_5_PD_FACTOR_MODE(
        LCDIFV2_CTRLDESCL7_5_PD_FACTOR_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL7_5;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        CTRLDESCL7_5 = curr;
    }

    /**
     * Get CTRLDESCL7_5's AB_MODE field.
     *
     * Alpha Blending Mode
     */
    inline LCDIFV2_CTRLDESCL7_5_AB_MODE get_CTRLDESCL7_5_AB_MODE() volatile
    {
        return LCDIFV2_CTRLDESCL7_5_AB_MODE((CTRLDESCL7_5 >> 0u) & 0b11u);
    }

    /**
     * Set CTRLDESCL7_5's AB_MODE field.
     *
     * Alpha Blending Mode
     */
    inline void set_CTRLDESCL7_5_AB_MODE(
        LCDIFV2_CTRLDESCL7_5_AB_MODE value) volatile
    {
        uint32_t curr = CTRLDESCL7_5;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        CTRLDESCL7_5 = curr;
    }

    /**
     * Get all of CTRLDESCL7_5's bit fields.
     *
     * (read-write) Control Descriptor Layer 5 Register
     */
    inline void get_CTRLDESCL7_5(
        bool &EN, bool &SHADOW_LOAD_EN, bool &SAFETY_EN,
        LCDIFV2_CTRLDESCL7_5_BPP &BPP, uint8_t &GLOBAL_ALPHA,
        LCDIFV2_CTRLDESCL7_5_YUV_FORMAT &YUV_FORMAT, bool &PD_COLOR_MODE,
        bool &PD_ALPHA_MODE,
        LCDIFV2_CTRLDESCL7_5_PD_GLOBAL_ALPHA_MODE &PD_GLOBAL_ALPHA_MODE,
        LCDIFV2_CTRLDESCL7_5_PD_FACTOR_MODE &PD_FACTOR_MODE,
        LCDIFV2_CTRLDESCL7_5_AB_MODE &AB_MODE) volatile
    {
        uint32_t curr = CTRLDESCL7_5;

        EN = curr & (1u << 31u);
        SHADOW_LOAD_EN = curr & (1u << 30u);
        SAFETY_EN = curr & (1u << 28u);
        BPP = LCDIFV2_CTRLDESCL7_5_BPP((curr >> 24u) & 0b1111u);
        GLOBAL_ALPHA = (curr >> 16u) & 0b11111111u;
        YUV_FORMAT = LCDIFV2_CTRLDESCL7_5_YUV_FORMAT((curr >> 14u) & 0b11u);
        PD_COLOR_MODE = curr & (1u << 9u);
        PD_ALPHA_MODE = curr & (1u << 8u);
        PD_GLOBAL_ALPHA_MODE =
            LCDIFV2_CTRLDESCL7_5_PD_GLOBAL_ALPHA_MODE((curr >> 6u) & 0b11u);
        PD_FACTOR_MODE =
            LCDIFV2_CTRLDESCL7_5_PD_FACTOR_MODE((curr >> 4u) & 0b11u);
        AB_MODE = LCDIFV2_CTRLDESCL7_5_AB_MODE((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of CTRLDESCL7_5's bit fields.
     *
     * (read-write) Control Descriptor Layer 5 Register
     */
    inline void set_CTRLDESCL7_5(
        bool EN, bool SHADOW_LOAD_EN, bool SAFETY_EN,
        LCDIFV2_CTRLDESCL7_5_BPP BPP, uint8_t GLOBAL_ALPHA,
        LCDIFV2_CTRLDESCL7_5_YUV_FORMAT YUV_FORMAT, bool PD_COLOR_MODE,
        bool PD_ALPHA_MODE,
        LCDIFV2_CTRLDESCL7_5_PD_GLOBAL_ALPHA_MODE PD_GLOBAL_ALPHA_MODE,
        LCDIFV2_CTRLDESCL7_5_PD_FACTOR_MODE PD_FACTOR_MODE,
        LCDIFV2_CTRLDESCL7_5_AB_MODE AB_MODE) volatile
    {
        uint32_t curr = CTRLDESCL7_5;

        curr &= ~(0b1u << 31u);
        curr |= (EN & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (SHADOW_LOAD_EN & 0b1u) << 30u;
        curr &= ~(0b1u << 28u);
        curr |= (SAFETY_EN & 0b1u) << 28u;
        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(BPP) & 0b1111u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (GLOBAL_ALPHA & 0b11111111u) << 16u;
        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(YUV_FORMAT) & 0b11u) << 14u;
        curr &= ~(0b1u << 9u);
        curr |= (PD_COLOR_MODE & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (PD_ALPHA_MODE & 0b1u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(PD_GLOBAL_ALPHA_MODE) & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(PD_FACTOR_MODE) & 0b11u) << 4u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(AB_MODE) & 0b11u) << 0u;

        CTRLDESCL7_5 = curr;
    }

    /**
     * Get CTRLDESCL7_6's BCLR_R field.
     *
     * Background R component value
     */
    inline uint8_t get_CTRLDESCL7_6_BCLR_R() volatile
    {
        return (CTRLDESCL7_6 >> 16u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL7_6's BCLR_R field.
     *
     * Background R component value
     */
    inline void set_CTRLDESCL7_6_BCLR_R(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL7_6;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CTRLDESCL7_6 = curr;
    }

    /**
     * Get CTRLDESCL7_6's BCLR_G field.
     *
     * Background G component value
     */
    inline uint8_t get_CTRLDESCL7_6_BCLR_G() volatile
    {
        return (CTRLDESCL7_6 >> 8u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL7_6's BCLR_G field.
     *
     * Background G component value
     */
    inline void set_CTRLDESCL7_6_BCLR_G(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL7_6;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        CTRLDESCL7_6 = curr;
    }

    /**
     * Get CTRLDESCL7_6's BCLR_B field.
     *
     * Background B component value
     */
    inline uint8_t get_CTRLDESCL7_6_BCLR_B() volatile
    {
        return (CTRLDESCL7_6 >> 0u) & 0b11111111u;
    }

    /**
     * Set CTRLDESCL7_6's BCLR_B field.
     *
     * Background B component value
     */
    inline void set_CTRLDESCL7_6_BCLR_B(uint8_t value) volatile
    {
        uint32_t curr = CTRLDESCL7_6;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        CTRLDESCL7_6 = curr;
    }

    /**
     * Get all of CTRLDESCL7_6's bit fields.
     *
     * (read-write) Control Descriptor Layer 6 Register
     */
    inline void get_CTRLDESCL7_6(uint8_t &BCLR_R, uint8_t &BCLR_G,
                                 uint8_t &BCLR_B) volatile
    {
        uint32_t curr = CTRLDESCL7_6;

        BCLR_R = (curr >> 16u) & 0b11111111u;
        BCLR_G = (curr >> 8u) & 0b11111111u;
        BCLR_B = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of CTRLDESCL7_6's bit fields.
     *
     * (read-write) Control Descriptor Layer 6 Register
     */
    inline void set_CTRLDESCL7_6(uint8_t BCLR_R, uint8_t BCLR_G,
                                 uint8_t BCLR_B) volatile
    {
        uint32_t curr = CTRLDESCL7_6;

        curr &= ~(0b11111111u << 16u);
        curr |= (BCLR_R & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (BCLR_G & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (BCLR_B & 0b11111111u) << 0u;

        CTRLDESCL7_6 = curr;
    }

    /**
     * Get CLUT_LOAD's SEL_CLUT_NUM field.
     *
     * Selected CLUT Number
     */
    inline uint8_t get_CLUT_LOAD_SEL_CLUT_NUM() volatile
    {
        return (CLUT_LOAD >> 4u) & 0b111u;
    }

    /**
     * Set CLUT_LOAD's SEL_CLUT_NUM field.
     *
     * Selected CLUT Number
     */
    inline void set_CLUT_LOAD_SEL_CLUT_NUM(uint8_t value) volatile
    {
        uint32_t curr = CLUT_LOAD;

        curr &= ~(0b111u << 4u);
        curr |= (value & 0b111u) << 4u;

        CLUT_LOAD = curr;
    }

    /**
     * Get CLUT_LOAD's CLUT_UPDATE_EN bit.
     *
     * CLUT Update Enable
     */
    inline bool get_CLUT_LOAD_CLUT_UPDATE_EN() volatile
    {
        return CLUT_LOAD & (1u << 0u);
    }

    /**
     * Set CLUT_LOAD's CLUT_UPDATE_EN bit.
     *
     * CLUT Update Enable
     */
    inline void set_CLUT_LOAD_CLUT_UPDATE_EN() volatile
    {
        CLUT_LOAD |= 1u << 0u;
    }

    /**
     * Clear CLUT_LOAD's CLUT_UPDATE_EN bit.
     *
     * CLUT Update Enable
     */
    inline void clear_CLUT_LOAD_CLUT_UPDATE_EN() volatile
    {
        CLUT_LOAD &= ~(1u << 0u);
    }

    /**
     * Toggle CLUT_LOAD's CLUT_UPDATE_EN bit.
     *
     * CLUT Update Enable
     */
    inline void toggle_CLUT_LOAD_CLUT_UPDATE_EN() volatile
    {
        CLUT_LOAD ^= 1u << 0u;
    }

    /**
     * Get all of CLUT_LOAD's bit fields.
     *
     * (read-write) LCDIFv2 CLUT load Register
     */
    inline void get_CLUT_LOAD(uint8_t &SEL_CLUT_NUM,
                              bool &CLUT_UPDATE_EN) volatile
    {
        uint32_t curr = CLUT_LOAD;

        SEL_CLUT_NUM = (curr >> 4u) & 0b111u;
        CLUT_UPDATE_EN = curr & (1u << 0u);
    }

    /**
     * Set all of CLUT_LOAD's bit fields.
     *
     * (read-write) LCDIFv2 CLUT load Register
     */
    inline void set_CLUT_LOAD(uint8_t SEL_CLUT_NUM,
                              bool CLUT_UPDATE_EN) volatile
    {
        uint32_t curr = CLUT_LOAD;

        curr &= ~(0b111u << 4u);
        curr |= (SEL_CLUT_NUM & 0b111u) << 4u;
        curr &= ~(0b1u << 0u);
        curr |= (CLUT_UPDATE_EN & 0b1u) << 0u;

        CLUT_LOAD = curr;
    }
};

static_assert(sizeof(lcdifv2) == lcdifv2::size);

static volatile lcdifv2 *const LCDIFV2 =
    reinterpret_cast<lcdifv2 *>(0x40808000);

}; // namespace MIMXRT1176::CM7
