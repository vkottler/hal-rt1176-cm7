/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * no description available
 */
struct [[gnu::packed]] CTX_instance
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        32; /*!< CTX_instance's size in bytes. */

    /* Fields. */
    static constexpr std::size_t CTX_KEY_length = 4;
    uint32_t CTX_KEY[CTX_KEY_length]; /*!< (read-write) AES Key Word */
    static constexpr std::size_t CTX_CTR_length = 2;
    uint32_t CTX_CTR[CTX_CTR_length]; /*!< (read-write) AES Counter Word */
    uint32_t CTX_RGD_W0; /*!< (read-write) AES Region Descriptor Word0 */
    uint32_t CTX_RGD_W1; /*!< (read-write) AES Region Descriptor Word1 */

    /* Methods. */

    /**
     * Get CTX_KEY's KEY field.
     *
     * AES Key
     */
    inline uint32_t get_CTX_KEY_KEY(std::size_t index)
    {
        return (CTX_KEY[index] >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set CTX_KEY's KEY field.
     *
     * AES Key
     */
    inline void set_CTX_KEY_KEY(std::size_t index, uint32_t value)
    {
        uint32_t curr = CTX_KEY[index];

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        CTX_KEY[index] = curr;
    }

    /**
     * Get CTX_CTR's CTR field.
     *
     * AES Counter
     */
    inline uint32_t get_CTX_CTR_CTR(std::size_t index)
    {
        return (CTX_CTR[index] >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set CTX_CTR's CTR field.
     *
     * AES Counter
     */
    inline void set_CTX_CTR_CTR(std::size_t index, uint32_t value)
    {
        uint32_t curr = CTX_CTR[index];

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        CTX_CTR[index] = curr;
    }

    /**
     * Get CTX_RGD_W0's SRTADDR field.
     *
     * Start Address
     */
    inline uint32_t get_CTX_RGD_W0_SRTADDR()
    {
        return (CTX_RGD_W0 >> 10u) & 0b1111111111111111111111u;
    }

    /**
     * Set CTX_RGD_W0's SRTADDR field.
     *
     * Start Address
     */
    inline void set_CTX_RGD_W0_SRTADDR(uint32_t value)
    {
        uint32_t curr = CTX_RGD_W0;

        curr &= ~(0b1111111111111111111111u << 10u);
        curr |= (value & 0b1111111111111111111111u) << 10u;

        CTX_RGD_W0 = curr;
    }

    /**
     * Get CTX_RGD_W1's ENDADDR field.
     *
     * End Address
     */
    inline uint32_t get_CTX_RGD_W1_ENDADDR()
    {
        return (CTX_RGD_W1 >> 10u) & 0b1111111111111111111111u;
    }

    /**
     * Set CTX_RGD_W1's ENDADDR field.
     *
     * End Address
     */
    inline void set_CTX_RGD_W1_ENDADDR(uint32_t value)
    {
        uint32_t curr = CTX_RGD_W1;

        curr &= ~(0b1111111111111111111111u << 10u);
        curr |= (value & 0b1111111111111111111111u) << 10u;

        CTX_RGD_W1 = curr;
    }

    /**
     * Get CTX_RGD_W1's RO bit.
     *
     * Read-Only
     */
    inline bool get_CTX_RGD_W1_RO()
    {
        return CTX_RGD_W1 & (1u << 2u);
    }

    /**
     * Set CTX_RGD_W1's RO bit.
     *
     * Read-Only
     */
    inline void set_CTX_RGD_W1_RO()
    {
        CTX_RGD_W1 |= 1u << 2u;
    }

    /**
     * Clear CTX_RGD_W1's RO bit.
     *
     * Read-Only
     */
    inline void clear_CTX_RGD_W1_RO()
    {
        CTX_RGD_W1 &= ~(1u << 2u);
    }

    /**
     * Toggle CTX_RGD_W1's RO bit.
     *
     * Read-Only
     */
    inline void toggle_CTX_RGD_W1_RO()
    {
        CTX_RGD_W1 ^= 1u << 2u;
    }

    /**
     * Get CTX_RGD_W1's ADE bit.
     *
     * AES Decryption Enable.
     */
    inline bool get_CTX_RGD_W1_ADE()
    {
        return CTX_RGD_W1 & (1u << 1u);
    }

    /**
     * Set CTX_RGD_W1's ADE bit.
     *
     * AES Decryption Enable.
     */
    inline void set_CTX_RGD_W1_ADE()
    {
        CTX_RGD_W1 |= 1u << 1u;
    }

    /**
     * Clear CTX_RGD_W1's ADE bit.
     *
     * AES Decryption Enable.
     */
    inline void clear_CTX_RGD_W1_ADE()
    {
        CTX_RGD_W1 &= ~(1u << 1u);
    }

    /**
     * Toggle CTX_RGD_W1's ADE bit.
     *
     * AES Decryption Enable.
     */
    inline void toggle_CTX_RGD_W1_ADE()
    {
        CTX_RGD_W1 ^= 1u << 1u;
    }

    /**
     * Get CTX_RGD_W1's VLD bit.
     *
     * Valid
     */
    inline bool get_CTX_RGD_W1_VLD()
    {
        return CTX_RGD_W1 & (1u << 0u);
    }

    /**
     * Set CTX_RGD_W1's VLD bit.
     *
     * Valid
     */
    inline void set_CTX_RGD_W1_VLD()
    {
        CTX_RGD_W1 |= 1u << 0u;
    }

    /**
     * Clear CTX_RGD_W1's VLD bit.
     *
     * Valid
     */
    inline void clear_CTX_RGD_W1_VLD()
    {
        CTX_RGD_W1 &= ~(1u << 0u);
    }

    /**
     * Toggle CTX_RGD_W1's VLD bit.
     *
     * Valid
     */
    inline void toggle_CTX_RGD_W1_VLD()
    {
        CTX_RGD_W1 ^= 1u << 0u;
    }

    /**
     * Get all of CTX_RGD_W1's bit fields.
     *
     * (read-write) AES Region Descriptor Word1
     */
    inline void get_CTX_RGD_W1(uint32_t &ENDADDR, bool &RO, bool &ADE,
                               bool &VLD)
    {
        uint32_t curr = CTX_RGD_W1;

        ENDADDR = (curr >> 10u) & 0b1111111111111111111111u;
        RO = curr & (1u << 2u);
        ADE = curr & (1u << 1u);
        VLD = curr & (1u << 0u);
    }

    /**
     * Set all of CTX_RGD_W1's bit fields.
     *
     * (read-write) AES Region Descriptor Word1
     */
    inline void set_CTX_RGD_W1(uint32_t ENDADDR, bool RO, bool ADE, bool VLD)
    {
        uint32_t curr = CTX_RGD_W1;

        curr &= ~(0b1111111111111111111111u << 10u);
        curr |= (ENDADDR & 0b1111111111111111111111u) << 10u;
        curr &= ~(0b1u << 2u);
        curr |= (RO & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (ADE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (VLD & 0b1u) << 0u;

        CTX_RGD_W1 = curr;
    }
};

static_assert(sizeof(CTX_instance) == CTX_instance::size);

}; // namespace MIMXRT1176::CM7
