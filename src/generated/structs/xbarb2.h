/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * Crossbar Switch
 */
struct [[gnu::packed]] xbarb2
{
    /* Constant attributes. */
    static constexpr std::size_t size = 16; /*!< xbarb2's size in bytes. */

    /* Fields. */
    uint16_t SEL0; /*!< (read-write) Crossbar B Select Register 0 */
    uint16_t SEL1; /*!< (read-write) Crossbar B Select Register 1 */
    uint16_t SEL2; /*!< (read-write) Crossbar B Select Register 2 */
    uint16_t SEL3; /*!< (read-write) Crossbar B Select Register 3 */
    uint16_t SEL4; /*!< (read-write) Crossbar B Select Register 4 */
    uint16_t SEL5; /*!< (read-write) Crossbar B Select Register 5 */
    uint16_t SEL6; /*!< (read-write) Crossbar B Select Register 6 */
    uint16_t SEL7; /*!< (read-write) Crossbar B Select Register 7 */

    /* Methods. */

    /**
     * Get SEL0's SEL1 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT1 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL0_SEL1() volatile
    {
        return (SEL0 >> 8u) & 0b1111111u;
    }

    /**
     * Set SEL0's SEL1 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT1 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL0_SEL1(uint8_t value) volatile
    {
        uint16_t curr = SEL0;

        curr &= ~(0b1111111u << 8u);
        curr |= (value & 0b1111111u) << 8u;

        SEL0 = curr;
    }

    /**
     * Get SEL0's SEL0 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT0 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL0_SEL0() volatile
    {
        return (SEL0 >> 0u) & 0b1111111u;
    }

    /**
     * Set SEL0's SEL0 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT0 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL0_SEL0(uint8_t value) volatile
    {
        uint16_t curr = SEL0;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        SEL0 = curr;
    }

    /**
     * Get all of SEL0's bit fields.
     *
     * (read-write) Crossbar B Select Register 0
     */
    inline void get_SEL0(uint8_t &SEL1, uint8_t &SEL0) volatile
    {
        uint16_t curr = SEL0;

        SEL1 = (curr >> 8u) & 0b1111111u;
        SEL0 = (curr >> 0u) & 0b1111111u;
    }

    /**
     * Set all of SEL0's bit fields.
     *
     * (read-write) Crossbar B Select Register 0
     */
    inline void set_SEL0(uint8_t SEL1, uint8_t SEL0) volatile
    {
        uint16_t curr = SEL0;

        curr &= ~(0b1111111u << 8u);
        curr |= (SEL1 & 0b1111111u) << 8u;
        curr &= ~(0b1111111u << 0u);
        curr |= (SEL0 & 0b1111111u) << 0u;

        SEL0 = curr;
    }

    /**
     * Get SEL1's SEL3 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT3 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL1_SEL3() volatile
    {
        return (SEL1 >> 8u) & 0b1111111u;
    }

    /**
     * Set SEL1's SEL3 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT3 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL1_SEL3(uint8_t value) volatile
    {
        uint16_t curr = SEL1;

        curr &= ~(0b1111111u << 8u);
        curr |= (value & 0b1111111u) << 8u;

        SEL1 = curr;
    }

    /**
     * Get SEL1's SEL2 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT2 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL1_SEL2() volatile
    {
        return (SEL1 >> 0u) & 0b1111111u;
    }

    /**
     * Set SEL1's SEL2 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT2 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL1_SEL2(uint8_t value) volatile
    {
        uint16_t curr = SEL1;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        SEL1 = curr;
    }

    /**
     * Get all of SEL1's bit fields.
     *
     * (read-write) Crossbar B Select Register 1
     */
    inline void get_SEL1(uint8_t &SEL3, uint8_t &SEL2) volatile
    {
        uint16_t curr = SEL1;

        SEL3 = (curr >> 8u) & 0b1111111u;
        SEL2 = (curr >> 0u) & 0b1111111u;
    }

    /**
     * Set all of SEL1's bit fields.
     *
     * (read-write) Crossbar B Select Register 1
     */
    inline void set_SEL1(uint8_t SEL3, uint8_t SEL2) volatile
    {
        uint16_t curr = SEL1;

        curr &= ~(0b1111111u << 8u);
        curr |= (SEL3 & 0b1111111u) << 8u;
        curr &= ~(0b1111111u << 0u);
        curr |= (SEL2 & 0b1111111u) << 0u;

        SEL1 = curr;
    }

    /**
     * Get SEL2's SEL5 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT5 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL2_SEL5() volatile
    {
        return (SEL2 >> 8u) & 0b1111111u;
    }

    /**
     * Set SEL2's SEL5 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT5 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL2_SEL5(uint8_t value) volatile
    {
        uint16_t curr = SEL2;

        curr &= ~(0b1111111u << 8u);
        curr |= (value & 0b1111111u) << 8u;

        SEL2 = curr;
    }

    /**
     * Get SEL2's SEL4 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT4 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL2_SEL4() volatile
    {
        return (SEL2 >> 0u) & 0b1111111u;
    }

    /**
     * Set SEL2's SEL4 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT4 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL2_SEL4(uint8_t value) volatile
    {
        uint16_t curr = SEL2;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        SEL2 = curr;
    }

    /**
     * Get all of SEL2's bit fields.
     *
     * (read-write) Crossbar B Select Register 2
     */
    inline void get_SEL2(uint8_t &SEL5, uint8_t &SEL4) volatile
    {
        uint16_t curr = SEL2;

        SEL5 = (curr >> 8u) & 0b1111111u;
        SEL4 = (curr >> 0u) & 0b1111111u;
    }

    /**
     * Set all of SEL2's bit fields.
     *
     * (read-write) Crossbar B Select Register 2
     */
    inline void set_SEL2(uint8_t SEL5, uint8_t SEL4) volatile
    {
        uint16_t curr = SEL2;

        curr &= ~(0b1111111u << 8u);
        curr |= (SEL5 & 0b1111111u) << 8u;
        curr &= ~(0b1111111u << 0u);
        curr |= (SEL4 & 0b1111111u) << 0u;

        SEL2 = curr;
    }

    /**
     * Get SEL3's SEL7 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT7 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL3_SEL7() volatile
    {
        return (SEL3 >> 8u) & 0b1111111u;
    }

    /**
     * Set SEL3's SEL7 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT7 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL3_SEL7(uint8_t value) volatile
    {
        uint16_t curr = SEL3;

        curr &= ~(0b1111111u << 8u);
        curr |= (value & 0b1111111u) << 8u;

        SEL3 = curr;
    }

    /**
     * Get SEL3's SEL6 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT6 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL3_SEL6() volatile
    {
        return (SEL3 >> 0u) & 0b1111111u;
    }

    /**
     * Set SEL3's SEL6 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT6 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL3_SEL6(uint8_t value) volatile
    {
        uint16_t curr = SEL3;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        SEL3 = curr;
    }

    /**
     * Get all of SEL3's bit fields.
     *
     * (read-write) Crossbar B Select Register 3
     */
    inline void get_SEL3(uint8_t &SEL7, uint8_t &SEL6) volatile
    {
        uint16_t curr = SEL3;

        SEL7 = (curr >> 8u) & 0b1111111u;
        SEL6 = (curr >> 0u) & 0b1111111u;
    }

    /**
     * Set all of SEL3's bit fields.
     *
     * (read-write) Crossbar B Select Register 3
     */
    inline void set_SEL3(uint8_t SEL7, uint8_t SEL6) volatile
    {
        uint16_t curr = SEL3;

        curr &= ~(0b1111111u << 8u);
        curr |= (SEL7 & 0b1111111u) << 8u;
        curr &= ~(0b1111111u << 0u);
        curr |= (SEL6 & 0b1111111u) << 0u;

        SEL3 = curr;
    }

    /**
     * Get SEL4's SEL9 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT9 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL4_SEL9() volatile
    {
        return (SEL4 >> 8u) & 0b1111111u;
    }

    /**
     * Set SEL4's SEL9 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT9 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL4_SEL9(uint8_t value) volatile
    {
        uint16_t curr = SEL4;

        curr &= ~(0b1111111u << 8u);
        curr |= (value & 0b1111111u) << 8u;

        SEL4 = curr;
    }

    /**
     * Get SEL4's SEL8 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT8 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL4_SEL8() volatile
    {
        return (SEL4 >> 0u) & 0b1111111u;
    }

    /**
     * Set SEL4's SEL8 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT8 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL4_SEL8(uint8_t value) volatile
    {
        uint16_t curr = SEL4;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        SEL4 = curr;
    }

    /**
     * Get all of SEL4's bit fields.
     *
     * (read-write) Crossbar B Select Register 4
     */
    inline void get_SEL4(uint8_t &SEL9, uint8_t &SEL8) volatile
    {
        uint16_t curr = SEL4;

        SEL9 = (curr >> 8u) & 0b1111111u;
        SEL8 = (curr >> 0u) & 0b1111111u;
    }

    /**
     * Set all of SEL4's bit fields.
     *
     * (read-write) Crossbar B Select Register 4
     */
    inline void set_SEL4(uint8_t SEL9, uint8_t SEL8) volatile
    {
        uint16_t curr = SEL4;

        curr &= ~(0b1111111u << 8u);
        curr |= (SEL9 & 0b1111111u) << 8u;
        curr &= ~(0b1111111u << 0u);
        curr |= (SEL8 & 0b1111111u) << 0u;

        SEL4 = curr;
    }

    /**
     * Get SEL5's SEL11 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT11 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL5_SEL11() volatile
    {
        return (SEL5 >> 8u) & 0b1111111u;
    }

    /**
     * Set SEL5's SEL11 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT11 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL5_SEL11(uint8_t value) volatile
    {
        uint16_t curr = SEL5;

        curr &= ~(0b1111111u << 8u);
        curr |= (value & 0b1111111u) << 8u;

        SEL5 = curr;
    }

    /**
     * Get SEL5's SEL10 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT10 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL5_SEL10() volatile
    {
        return (SEL5 >> 0u) & 0b1111111u;
    }

    /**
     * Set SEL5's SEL10 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT10 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL5_SEL10(uint8_t value) volatile
    {
        uint16_t curr = SEL5;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        SEL5 = curr;
    }

    /**
     * Get all of SEL5's bit fields.
     *
     * (read-write) Crossbar B Select Register 5
     */
    inline void get_SEL5(uint8_t &SEL11, uint8_t &SEL10) volatile
    {
        uint16_t curr = SEL5;

        SEL11 = (curr >> 8u) & 0b1111111u;
        SEL10 = (curr >> 0u) & 0b1111111u;
    }

    /**
     * Set all of SEL5's bit fields.
     *
     * (read-write) Crossbar B Select Register 5
     */
    inline void set_SEL5(uint8_t SEL11, uint8_t SEL10) volatile
    {
        uint16_t curr = SEL5;

        curr &= ~(0b1111111u << 8u);
        curr |= (SEL11 & 0b1111111u) << 8u;
        curr &= ~(0b1111111u << 0u);
        curr |= (SEL10 & 0b1111111u) << 0u;

        SEL5 = curr;
    }

    /**
     * Get SEL6's SEL13 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT13 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL6_SEL13() volatile
    {
        return (SEL6 >> 8u) & 0b1111111u;
    }

    /**
     * Set SEL6's SEL13 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT13 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL6_SEL13(uint8_t value) volatile
    {
        uint16_t curr = SEL6;

        curr &= ~(0b1111111u << 8u);
        curr |= (value & 0b1111111u) << 8u;

        SEL6 = curr;
    }

    /**
     * Get SEL6's SEL12 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT12 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL6_SEL12() volatile
    {
        return (SEL6 >> 0u) & 0b1111111u;
    }

    /**
     * Set SEL6's SEL12 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT12 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL6_SEL12(uint8_t value) volatile
    {
        uint16_t curr = SEL6;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        SEL6 = curr;
    }

    /**
     * Get all of SEL6's bit fields.
     *
     * (read-write) Crossbar B Select Register 6
     */
    inline void get_SEL6(uint8_t &SEL13, uint8_t &SEL12) volatile
    {
        uint16_t curr = SEL6;

        SEL13 = (curr >> 8u) & 0b1111111u;
        SEL12 = (curr >> 0u) & 0b1111111u;
    }

    /**
     * Set all of SEL6's bit fields.
     *
     * (read-write) Crossbar B Select Register 6
     */
    inline void set_SEL6(uint8_t SEL13, uint8_t SEL12) volatile
    {
        uint16_t curr = SEL6;

        curr &= ~(0b1111111u << 8u);
        curr |= (SEL13 & 0b1111111u) << 8u;
        curr &= ~(0b1111111u << 0u);
        curr |= (SEL12 & 0b1111111u) << 0u;

        SEL6 = curr;
    }

    /**
     * Get SEL7's SEL15 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT15 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL7_SEL15() volatile
    {
        return (SEL7 >> 8u) & 0b1111111u;
    }

    /**
     * Set SEL7's SEL15 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT15 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL7_SEL15(uint8_t value) volatile
    {
        uint16_t curr = SEL7;

        curr &= ~(0b1111111u << 8u);
        curr |= (value & 0b1111111u) << 8u;

        SEL7 = curr;
    }

    /**
     * Get SEL7's SEL14 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT14 (refer to Functional
     * Description section for input/output assignment)
     */
    inline uint8_t get_SEL7_SEL14() volatile
    {
        return (SEL7 >> 0u) & 0b1111111u;
    }

    /**
     * Set SEL7's SEL14 field.
     *
     * Input (XBARB_INn) to be muxed to XBARB_OUT14 (refer to Functional
     * Description section for input/output assignment)
     */
    inline void set_SEL7_SEL14(uint8_t value) volatile
    {
        uint16_t curr = SEL7;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        SEL7 = curr;
    }

    /**
     * Get all of SEL7's bit fields.
     *
     * (read-write) Crossbar B Select Register 7
     */
    inline void get_SEL7(uint8_t &SEL15, uint8_t &SEL14) volatile
    {
        uint16_t curr = SEL7;

        SEL15 = (curr >> 8u) & 0b1111111u;
        SEL14 = (curr >> 0u) & 0b1111111u;
    }

    /**
     * Set all of SEL7's bit fields.
     *
     * (read-write) Crossbar B Select Register 7
     */
    inline void set_SEL7(uint8_t SEL15, uint8_t SEL14) volatile
    {
        uint16_t curr = SEL7;

        curr &= ~(0b1111111u << 8u);
        curr |= (SEL15 & 0b1111111u) << 8u;
        curr &= ~(0b1111111u << 0u);
        curr |= (SEL14 & 0b1111111u) << 0u;

        SEL7 = curr;
    }
};

static_assert(sizeof(xbarb2) == xbarb2::size);

static volatile xbarb2 *const XBARB2 = reinterpret_cast<xbarb2 *>(0x40040000);

static volatile xbarb2 *const XBARB3 = reinterpret_cast<xbarb2 *>(0x40044000);

}; // namespace MIMXRT1176::CM7
