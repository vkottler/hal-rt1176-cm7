/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/PWM1_SMCAPTCTRLA_EDGA0.h"
#include "../enums/PWM1_SMCAPTCTRLA_EDGA1.h"
#include "../enums/PWM1_SMCAPTCTRLB_EDGB0.h"
#include "../enums/PWM1_SMCAPTCTRLB_EDGB1.h"
#include "../enums/PWM1_SMCAPTCTRLX_EDGX0.h"
#include "../enums/PWM1_SMCAPTCTRLX_EDGX1.h"
#include "../enums/PWM1_SMCTRL2_CLK_SEL.h"
#include "../enums/PWM1_SMCTRL2_FORCE_SEL.h"
#include "../enums/PWM1_SMCTRL2_INIT_SEL.h"
#include "../enums/PWM1_SMCTRL_LDFQ.h"
#include "../enums/PWM1_SMCTRL_PRSC.h"
#include "../enums/PWM1_SMDMAEN_CAPTDE.h"
#include "../enums/PWM1_SMINTEN_CMPIE.h"
#include "../enums/PWM1_SMOCTRL_PWMAFS.h"
#include "../enums/PWM1_SMOCTRL_PWMBFS.h"
#include "../enums/PWM1_SMOCTRL_PWMXFS.h"
#include "../enums/PWM1_SMSTS_CMPF.h"
#include "../enums/PWM1_SMTCTRL_OUT_TRIG_EN.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * no description available
 */
struct [[gnu::packed]] SM_instance
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        88; /*!< SM_instance's size in bytes. */

    /* Fields. */
    uint16_t SMCNT;   /*!< (read-write) Counter Register */
    uint16_t SMINIT;  /*!< (read-write) Initial Count Register */
    uint16_t SMCTRL2; /*!< (read-write) Control 2 Register */
    uint16_t SMCTRL;  /*!< (read-write) Control Register */
    static constexpr std::size_t reserved_padding0_length = 2;
    const uint8_t reserved_padding0[reserved_padding0_length] = {};
    uint16_t SMVAL0;     /*!< (read-write) Value Register 0 */
    uint16_t SMFRACVAL1; /*!< (read-write) Fractional Value Register 1 */
    uint16_t SMVAL1;     /*!< (read-write) Value Register 1 */
    uint16_t SMFRACVAL2; /*!< (read-write) Fractional Value Register 2 */
    uint16_t SMVAL2;     /*!< (read-write) Value Register 2 */
    uint16_t SMFRACVAL3; /*!< (read-write) Fractional Value Register 3 */
    uint16_t SMVAL3;     /*!< (read-write) Value Register 3 */
    uint16_t SMFRACVAL4; /*!< (read-write) Fractional Value Register 4 */
    uint16_t SMVAL4;     /*!< (read-write) Value Register 4 */
    uint16_t SMFRACVAL5; /*!< (read-write) Fractional Value Register 5 */
    uint16_t SMVAL5;     /*!< (read-write) Value Register 5 */
    uint16_t SMFRCTRL;   /*!< (read-write) Fractional Control Register */
    uint16_t SMOCTRL;    /*!< (read-write) Output Control Register */
    uint16_t SMSTS;      /*!< (read-write) Status Register */
    uint16_t SMINTEN;    /*!< (read-write) Interrupt Enable Register */
    uint16_t SMDMAEN;    /*!< (read-write) DMA Enable Register */
    uint16_t SMTCTRL;    /*!< (read-write) Output Trigger Control Register */
    uint16_t SMDISMAP0;  /*!< (read-write) Fault Disable Mapping Register 0 */
    static constexpr std::size_t reserved_padding1_length = 2;
    const uint8_t reserved_padding1[reserved_padding1_length] = {};
    uint16_t SMDTCNT0;    /*!< (read-write) Deadtime Count Register 0 */
    uint16_t SMDTCNT1;    /*!< (read-write) Deadtime Count Register 1 */
    uint16_t SMCAPTCTRLA; /*!< (read-write) Capture Control A Register */
    uint16_t SMCAPTCOMPA; /*!< (read-write) Capture Compare A Register */
    uint16_t SMCAPTCTRLB; /*!< (read-write) Capture Control B Register */
    uint16_t SMCAPTCOMPB; /*!< (read-write) Capture Compare B Register */
    uint16_t SMCAPTCTRLX; /*!< (read-write) Capture Control X Register */
    uint16_t SMCAPTCOMPX; /*!< (read-write) Capture Compare X Register */
    uint16_t SMCVAL0;     /*!< (read-write) Capture Value 0 Register */
    uint16_t SMCVAL0CYC;  /*!< (read-write) Capture Value 0 Cycle Register */
    uint16_t SMCVAL1;     /*!< (read-write) Capture Value 1 Register */
    uint16_t SMCVAL1CYC;  /*!< (read-write) Capture Value 1 Cycle Register */
    uint16_t SMCVAL2;     /*!< (read-write) Capture Value 2 Register */
    uint16_t SMCVAL2CYC;  /*!< (read-write) Capture Value 2 Cycle Register */
    uint16_t SMCVAL3;     /*!< (read-write) Capture Value 3 Register */
    uint16_t SMCVAL3CYC;  /*!< (read-write) Capture Value 3 Cycle Register */
    uint16_t SMCVAL4;     /*!< (read-write) Capture Value 4 Register */
    uint16_t SMCVAL4CYC;  /*!< (read-write) Capture Value 4 Cycle Register */
    uint16_t SMCVAL5;     /*!< (read-write) Capture Value 5 Register */
    uint16_t SMCVAL5CYC;  /*!< (read-write) Capture Value 5 Cycle Register */

    /* Methods. */

    /**
     * Get SMCNT's CNT field.
     *
     * Counter Register Bits
     */
    inline uint16_t get_SMCNT_CNT()
    {
        return (SMCNT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get SMINIT's INIT field.
     *
     * Initial Count Register Bits
     */
    inline uint16_t get_SMINIT_INIT()
    {
        return (SMINIT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SMINIT's INIT field.
     *
     * Initial Count Register Bits
     */
    inline void set_SMINIT_INIT(uint16_t value)
    {
        uint16_t curr = SMINIT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SMINIT = curr;
    }

    /**
     * Get SMCTRL2's DBGEN bit.
     *
     * Debug Enable
     */
    inline bool get_SMCTRL2_DBGEN()
    {
        return SMCTRL2 & (1u << 15u);
    }

    /**
     * Set SMCTRL2's DBGEN bit.
     *
     * Debug Enable
     */
    inline void set_SMCTRL2_DBGEN()
    {
        SMCTRL2 |= 1u << 15u;
    }

    /**
     * Clear SMCTRL2's DBGEN bit.
     *
     * Debug Enable
     */
    inline void clear_SMCTRL2_DBGEN()
    {
        SMCTRL2 &= ~(1u << 15u);
    }

    /**
     * Toggle SMCTRL2's DBGEN bit.
     *
     * Debug Enable
     */
    inline void toggle_SMCTRL2_DBGEN()
    {
        SMCTRL2 ^= 1u << 15u;
    }

    /**
     * Get SMCTRL2's WAITEN bit.
     *
     * WAIT Enable
     */
    inline bool get_SMCTRL2_WAITEN()
    {
        return SMCTRL2 & (1u << 14u);
    }

    /**
     * Set SMCTRL2's WAITEN bit.
     *
     * WAIT Enable
     */
    inline void set_SMCTRL2_WAITEN()
    {
        SMCTRL2 |= 1u << 14u;
    }

    /**
     * Clear SMCTRL2's WAITEN bit.
     *
     * WAIT Enable
     */
    inline void clear_SMCTRL2_WAITEN()
    {
        SMCTRL2 &= ~(1u << 14u);
    }

    /**
     * Toggle SMCTRL2's WAITEN bit.
     *
     * WAIT Enable
     */
    inline void toggle_SMCTRL2_WAITEN()
    {
        SMCTRL2 ^= 1u << 14u;
    }

    /**
     * Get SMCTRL2's INDEP bit.
     *
     * Independent or Complementary Pair Operation
     */
    inline bool get_SMCTRL2_INDEP()
    {
        return SMCTRL2 & (1u << 13u);
    }

    /**
     * Set SMCTRL2's INDEP bit.
     *
     * Independent or Complementary Pair Operation
     */
    inline void set_SMCTRL2_INDEP()
    {
        SMCTRL2 |= 1u << 13u;
    }

    /**
     * Clear SMCTRL2's INDEP bit.
     *
     * Independent or Complementary Pair Operation
     */
    inline void clear_SMCTRL2_INDEP()
    {
        SMCTRL2 &= ~(1u << 13u);
    }

    /**
     * Toggle SMCTRL2's INDEP bit.
     *
     * Independent or Complementary Pair Operation
     */
    inline void toggle_SMCTRL2_INDEP()
    {
        SMCTRL2 ^= 1u << 13u;
    }

    /**
     * Get SMCTRL2's PWM23_INIT bit.
     *
     * PWM23 Initial Value
     */
    inline bool get_SMCTRL2_PWM23_INIT()
    {
        return SMCTRL2 & (1u << 12u);
    }

    /**
     * Set SMCTRL2's PWM23_INIT bit.
     *
     * PWM23 Initial Value
     */
    inline void set_SMCTRL2_PWM23_INIT()
    {
        SMCTRL2 |= 1u << 12u;
    }

    /**
     * Clear SMCTRL2's PWM23_INIT bit.
     *
     * PWM23 Initial Value
     */
    inline void clear_SMCTRL2_PWM23_INIT()
    {
        SMCTRL2 &= ~(1u << 12u);
    }

    /**
     * Toggle SMCTRL2's PWM23_INIT bit.
     *
     * PWM23 Initial Value
     */
    inline void toggle_SMCTRL2_PWM23_INIT()
    {
        SMCTRL2 ^= 1u << 12u;
    }

    /**
     * Get SMCTRL2's PWM45_INIT bit.
     *
     * PWM45 Initial Value
     */
    inline bool get_SMCTRL2_PWM45_INIT()
    {
        return SMCTRL2 & (1u << 11u);
    }

    /**
     * Set SMCTRL2's PWM45_INIT bit.
     *
     * PWM45 Initial Value
     */
    inline void set_SMCTRL2_PWM45_INIT()
    {
        SMCTRL2 |= 1u << 11u;
    }

    /**
     * Clear SMCTRL2's PWM45_INIT bit.
     *
     * PWM45 Initial Value
     */
    inline void clear_SMCTRL2_PWM45_INIT()
    {
        SMCTRL2 &= ~(1u << 11u);
    }

    /**
     * Toggle SMCTRL2's PWM45_INIT bit.
     *
     * PWM45 Initial Value
     */
    inline void toggle_SMCTRL2_PWM45_INIT()
    {
        SMCTRL2 ^= 1u << 11u;
    }

    /**
     * Get SMCTRL2's PWMX_INIT bit.
     *
     * PWM_X Initial Value
     */
    inline bool get_SMCTRL2_PWMX_INIT()
    {
        return SMCTRL2 & (1u << 10u);
    }

    /**
     * Set SMCTRL2's PWMX_INIT bit.
     *
     * PWM_X Initial Value
     */
    inline void set_SMCTRL2_PWMX_INIT()
    {
        SMCTRL2 |= 1u << 10u;
    }

    /**
     * Clear SMCTRL2's PWMX_INIT bit.
     *
     * PWM_X Initial Value
     */
    inline void clear_SMCTRL2_PWMX_INIT()
    {
        SMCTRL2 &= ~(1u << 10u);
    }

    /**
     * Toggle SMCTRL2's PWMX_INIT bit.
     *
     * PWM_X Initial Value
     */
    inline void toggle_SMCTRL2_PWMX_INIT()
    {
        SMCTRL2 ^= 1u << 10u;
    }

    /**
     * Get SMCTRL2's INIT_SEL field.
     *
     * Initialization Control Select
     */
    inline PWM1_SMCTRL2_INIT_SEL get_SMCTRL2_INIT_SEL()
    {
        return PWM1_SMCTRL2_INIT_SEL((SMCTRL2 >> 8u) & 0b11u);
    }

    /**
     * Set SMCTRL2's INIT_SEL field.
     *
     * Initialization Control Select
     */
    inline void set_SMCTRL2_INIT_SEL(PWM1_SMCTRL2_INIT_SEL value)
    {
        uint16_t curr = SMCTRL2;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        SMCTRL2 = curr;
    }

    /**
     * Get SMCTRL2's FRCEN bit.
     *
     * FRCEN
     */
    inline bool get_SMCTRL2_FRCEN()
    {
        return SMCTRL2 & (1u << 7u);
    }

    /**
     * Set SMCTRL2's FRCEN bit.
     *
     * FRCEN
     */
    inline void set_SMCTRL2_FRCEN()
    {
        SMCTRL2 |= 1u << 7u;
    }

    /**
     * Clear SMCTRL2's FRCEN bit.
     *
     * FRCEN
     */
    inline void clear_SMCTRL2_FRCEN()
    {
        SMCTRL2 &= ~(1u << 7u);
    }

    /**
     * Toggle SMCTRL2's FRCEN bit.
     *
     * FRCEN
     */
    inline void toggle_SMCTRL2_FRCEN()
    {
        SMCTRL2 ^= 1u << 7u;
    }

    /**
     * Get SMCTRL2's FORCE bit.
     *
     * Force Initialization
     */
    inline bool get_SMCTRL2_FORCE()
    {
        return SMCTRL2 & (1u << 6u);
    }

    /**
     * Set SMCTRL2's FORCE bit.
     *
     * Force Initialization
     */
    inline void set_SMCTRL2_FORCE()
    {
        SMCTRL2 |= 1u << 6u;
    }

    /**
     * Clear SMCTRL2's FORCE bit.
     *
     * Force Initialization
     */
    inline void clear_SMCTRL2_FORCE()
    {
        SMCTRL2 &= ~(1u << 6u);
    }

    /**
     * Toggle SMCTRL2's FORCE bit.
     *
     * Force Initialization
     */
    inline void toggle_SMCTRL2_FORCE()
    {
        SMCTRL2 ^= 1u << 6u;
    }

    /**
     * Get SMCTRL2's FORCE_SEL field.
     *
     * This read/write bit determines the source of the FORCE OUTPUT signal for
     * this submodule.
     */
    inline PWM1_SMCTRL2_FORCE_SEL get_SMCTRL2_FORCE_SEL()
    {
        return PWM1_SMCTRL2_FORCE_SEL((SMCTRL2 >> 3u) & 0b111u);
    }

    /**
     * Set SMCTRL2's FORCE_SEL field.
     *
     * This read/write bit determines the source of the FORCE OUTPUT signal for
     * this submodule.
     */
    inline void set_SMCTRL2_FORCE_SEL(PWM1_SMCTRL2_FORCE_SEL value)
    {
        uint16_t curr = SMCTRL2;

        curr &= ~(0b111u << 3u);
        curr |= (std::to_underlying(value) & 0b111u) << 3u;

        SMCTRL2 = curr;
    }

    /**
     * Get SMCTRL2's RELOAD_SEL bit.
     *
     * Reload Source Select
     */
    inline bool get_SMCTRL2_RELOAD_SEL()
    {
        return SMCTRL2 & (1u << 2u);
    }

    /**
     * Set SMCTRL2's RELOAD_SEL bit.
     *
     * Reload Source Select
     */
    inline void set_SMCTRL2_RELOAD_SEL()
    {
        SMCTRL2 |= 1u << 2u;
    }

    /**
     * Clear SMCTRL2's RELOAD_SEL bit.
     *
     * Reload Source Select
     */
    inline void clear_SMCTRL2_RELOAD_SEL()
    {
        SMCTRL2 &= ~(1u << 2u);
    }

    /**
     * Toggle SMCTRL2's RELOAD_SEL bit.
     *
     * Reload Source Select
     */
    inline void toggle_SMCTRL2_RELOAD_SEL()
    {
        SMCTRL2 ^= 1u << 2u;
    }

    /**
     * Get SMCTRL2's CLK_SEL field.
     *
     * Clock Source Select
     */
    inline PWM1_SMCTRL2_CLK_SEL get_SMCTRL2_CLK_SEL()
    {
        return PWM1_SMCTRL2_CLK_SEL((SMCTRL2 >> 0u) & 0b11u);
    }

    /**
     * Set SMCTRL2's CLK_SEL field.
     *
     * Clock Source Select
     */
    inline void set_SMCTRL2_CLK_SEL(PWM1_SMCTRL2_CLK_SEL value)
    {
        uint16_t curr = SMCTRL2;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        SMCTRL2 = curr;
    }

    /**
     * Get all of SMCTRL2's bit fields.
     *
     * (read-write) Control 2 Register
     */
    inline void get_SMCTRL2(bool &DBGEN, bool &WAITEN, bool &INDEP,
                            bool &PWM23_INIT, bool &PWM45_INIT,
                            bool &PWMX_INIT, PWM1_SMCTRL2_INIT_SEL &INIT_SEL,
                            bool &FRCEN, bool &FORCE,
                            PWM1_SMCTRL2_FORCE_SEL &FORCE_SEL,
                            bool &RELOAD_SEL, PWM1_SMCTRL2_CLK_SEL &CLK_SEL)
    {
        uint16_t curr = SMCTRL2;

        DBGEN = curr & (1u << 15u);
        WAITEN = curr & (1u << 14u);
        INDEP = curr & (1u << 13u);
        PWM23_INIT = curr & (1u << 12u);
        PWM45_INIT = curr & (1u << 11u);
        PWMX_INIT = curr & (1u << 10u);
        INIT_SEL = PWM1_SMCTRL2_INIT_SEL((curr >> 8u) & 0b11u);
        FRCEN = curr & (1u << 7u);
        FORCE = curr & (1u << 6u);
        FORCE_SEL = PWM1_SMCTRL2_FORCE_SEL((curr >> 3u) & 0b111u);
        RELOAD_SEL = curr & (1u << 2u);
        CLK_SEL = PWM1_SMCTRL2_CLK_SEL((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of SMCTRL2's bit fields.
     *
     * (read-write) Control 2 Register
     */
    inline void set_SMCTRL2(bool DBGEN, bool WAITEN, bool INDEP,
                            bool PWM23_INIT, bool PWM45_INIT, bool PWMX_INIT,
                            PWM1_SMCTRL2_INIT_SEL INIT_SEL, bool FRCEN,
                            bool FORCE, PWM1_SMCTRL2_FORCE_SEL FORCE_SEL,
                            bool RELOAD_SEL, PWM1_SMCTRL2_CLK_SEL CLK_SEL)
    {
        uint16_t curr = SMCTRL2;

        curr &= ~(0b1u << 15u);
        curr |= (DBGEN & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (WAITEN & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (INDEP & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (PWM23_INIT & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (PWM45_INIT & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (PWMX_INIT & 0b1u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(INIT_SEL) & 0b11u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (FRCEN & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (FORCE & 0b1u) << 6u;
        curr &= ~(0b111u << 3u);
        curr |= (std::to_underlying(FORCE_SEL) & 0b111u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (RELOAD_SEL & 0b1u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(CLK_SEL) & 0b11u) << 0u;

        SMCTRL2 = curr;
    }

    /**
     * Get SMCTRL's LDFQ field.
     *
     * Load Frequency
     */
    inline PWM1_SMCTRL_LDFQ get_SMCTRL_LDFQ()
    {
        return PWM1_SMCTRL_LDFQ((SMCTRL >> 12u) & 0b1111u);
    }

    /**
     * Set SMCTRL's LDFQ field.
     *
     * Load Frequency
     */
    inline void set_SMCTRL_LDFQ(PWM1_SMCTRL_LDFQ value)
    {
        uint16_t curr = SMCTRL;

        curr &= ~(0b1111u << 12u);
        curr |= (std::to_underlying(value) & 0b1111u) << 12u;

        SMCTRL = curr;
    }

    /**
     * Get SMCTRL's HALF bit.
     *
     * Half Cycle Reload
     */
    inline bool get_SMCTRL_HALF()
    {
        return SMCTRL & (1u << 11u);
    }

    /**
     * Set SMCTRL's HALF bit.
     *
     * Half Cycle Reload
     */
    inline void set_SMCTRL_HALF()
    {
        SMCTRL |= 1u << 11u;
    }

    /**
     * Clear SMCTRL's HALF bit.
     *
     * Half Cycle Reload
     */
    inline void clear_SMCTRL_HALF()
    {
        SMCTRL &= ~(1u << 11u);
    }

    /**
     * Toggle SMCTRL's HALF bit.
     *
     * Half Cycle Reload
     */
    inline void toggle_SMCTRL_HALF()
    {
        SMCTRL ^= 1u << 11u;
    }

    /**
     * Get SMCTRL's FULL bit.
     *
     * Full Cycle Reload
     */
    inline bool get_SMCTRL_FULL()
    {
        return SMCTRL & (1u << 10u);
    }

    /**
     * Set SMCTRL's FULL bit.
     *
     * Full Cycle Reload
     */
    inline void set_SMCTRL_FULL()
    {
        SMCTRL |= 1u << 10u;
    }

    /**
     * Clear SMCTRL's FULL bit.
     *
     * Full Cycle Reload
     */
    inline void clear_SMCTRL_FULL()
    {
        SMCTRL &= ~(1u << 10u);
    }

    /**
     * Toggle SMCTRL's FULL bit.
     *
     * Full Cycle Reload
     */
    inline void toggle_SMCTRL_FULL()
    {
        SMCTRL ^= 1u << 10u;
    }

    /**
     * Get SMCTRL's DT field.
     *
     * Deadtime
     */
    inline uint8_t get_SMCTRL_DT()
    {
        return (SMCTRL >> 8u) & 0b11u;
    }

    /**
     * Get SMCTRL's COMPMODE bit.
     *
     * Compare Mode
     */
    inline bool get_SMCTRL_COMPMODE()
    {
        return SMCTRL & (1u << 7u);
    }

    /**
     * Set SMCTRL's COMPMODE bit.
     *
     * Compare Mode
     */
    inline void set_SMCTRL_COMPMODE()
    {
        SMCTRL |= 1u << 7u;
    }

    /**
     * Clear SMCTRL's COMPMODE bit.
     *
     * Compare Mode
     */
    inline void clear_SMCTRL_COMPMODE()
    {
        SMCTRL &= ~(1u << 7u);
    }

    /**
     * Toggle SMCTRL's COMPMODE bit.
     *
     * Compare Mode
     */
    inline void toggle_SMCTRL_COMPMODE()
    {
        SMCTRL ^= 1u << 7u;
    }

    /**
     * Get SMCTRL's PRSC field.
     *
     * Prescaler
     */
    inline PWM1_SMCTRL_PRSC get_SMCTRL_PRSC()
    {
        return PWM1_SMCTRL_PRSC((SMCTRL >> 4u) & 0b111u);
    }

    /**
     * Set SMCTRL's PRSC field.
     *
     * Prescaler
     */
    inline void set_SMCTRL_PRSC(PWM1_SMCTRL_PRSC value)
    {
        uint16_t curr = SMCTRL;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        SMCTRL = curr;
    }

    /**
     * Get SMCTRL's SPLIT bit.
     *
     * Split the DBLPWM signal to PWMA and PWMB
     */
    inline bool get_SMCTRL_SPLIT()
    {
        return SMCTRL & (1u << 3u);
    }

    /**
     * Set SMCTRL's SPLIT bit.
     *
     * Split the DBLPWM signal to PWMA and PWMB
     */
    inline void set_SMCTRL_SPLIT()
    {
        SMCTRL |= 1u << 3u;
    }

    /**
     * Clear SMCTRL's SPLIT bit.
     *
     * Split the DBLPWM signal to PWMA and PWMB
     */
    inline void clear_SMCTRL_SPLIT()
    {
        SMCTRL &= ~(1u << 3u);
    }

    /**
     * Toggle SMCTRL's SPLIT bit.
     *
     * Split the DBLPWM signal to PWMA and PWMB
     */
    inline void toggle_SMCTRL_SPLIT()
    {
        SMCTRL ^= 1u << 3u;
    }

    /**
     * Get SMCTRL's LDMOD bit.
     *
     * Load Mode Select
     */
    inline bool get_SMCTRL_LDMOD()
    {
        return SMCTRL & (1u << 2u);
    }

    /**
     * Set SMCTRL's LDMOD bit.
     *
     * Load Mode Select
     */
    inline void set_SMCTRL_LDMOD()
    {
        SMCTRL |= 1u << 2u;
    }

    /**
     * Clear SMCTRL's LDMOD bit.
     *
     * Load Mode Select
     */
    inline void clear_SMCTRL_LDMOD()
    {
        SMCTRL &= ~(1u << 2u);
    }

    /**
     * Toggle SMCTRL's LDMOD bit.
     *
     * Load Mode Select
     */
    inline void toggle_SMCTRL_LDMOD()
    {
        SMCTRL ^= 1u << 2u;
    }

    /**
     * Get SMCTRL's DBLX bit.
     *
     * PWMX Double Switching Enable
     */
    inline bool get_SMCTRL_DBLX()
    {
        return SMCTRL & (1u << 1u);
    }

    /**
     * Set SMCTRL's DBLX bit.
     *
     * PWMX Double Switching Enable
     */
    inline void set_SMCTRL_DBLX()
    {
        SMCTRL |= 1u << 1u;
    }

    /**
     * Clear SMCTRL's DBLX bit.
     *
     * PWMX Double Switching Enable
     */
    inline void clear_SMCTRL_DBLX()
    {
        SMCTRL &= ~(1u << 1u);
    }

    /**
     * Toggle SMCTRL's DBLX bit.
     *
     * PWMX Double Switching Enable
     */
    inline void toggle_SMCTRL_DBLX()
    {
        SMCTRL ^= 1u << 1u;
    }

    /**
     * Get SMCTRL's DBLEN bit.
     *
     * Double Switching Enable
     */
    inline bool get_SMCTRL_DBLEN()
    {
        return SMCTRL & (1u << 0u);
    }

    /**
     * Set SMCTRL's DBLEN bit.
     *
     * Double Switching Enable
     */
    inline void set_SMCTRL_DBLEN()
    {
        SMCTRL |= 1u << 0u;
    }

    /**
     * Clear SMCTRL's DBLEN bit.
     *
     * Double Switching Enable
     */
    inline void clear_SMCTRL_DBLEN()
    {
        SMCTRL &= ~(1u << 0u);
    }

    /**
     * Toggle SMCTRL's DBLEN bit.
     *
     * Double Switching Enable
     */
    inline void toggle_SMCTRL_DBLEN()
    {
        SMCTRL ^= 1u << 0u;
    }

    /**
     * Get all of SMCTRL's bit fields.
     *
     * (read-write) Control Register
     */
    inline void get_SMCTRL(PWM1_SMCTRL_LDFQ &LDFQ, bool &HALF, bool &FULL,
                           uint8_t &DT, bool &COMPMODE, PWM1_SMCTRL_PRSC &PRSC,
                           bool &SPLIT, bool &LDMOD, bool &DBLX, bool &DBLEN)
    {
        uint16_t curr = SMCTRL;

        LDFQ = PWM1_SMCTRL_LDFQ((curr >> 12u) & 0b1111u);
        HALF = curr & (1u << 11u);
        FULL = curr & (1u << 10u);
        DT = (curr >> 8u) & 0b11u;
        COMPMODE = curr & (1u << 7u);
        PRSC = PWM1_SMCTRL_PRSC((curr >> 4u) & 0b111u);
        SPLIT = curr & (1u << 3u);
        LDMOD = curr & (1u << 2u);
        DBLX = curr & (1u << 1u);
        DBLEN = curr & (1u << 0u);
    }

    /**
     * Set all of SMCTRL's bit fields.
     *
     * (read-write) Control Register
     */
    inline void set_SMCTRL(PWM1_SMCTRL_LDFQ LDFQ, bool HALF, bool FULL,
                           bool COMPMODE, PWM1_SMCTRL_PRSC PRSC, bool SPLIT,
                           bool LDMOD, bool DBLX, bool DBLEN)
    {
        uint16_t curr = SMCTRL;

        curr &= ~(0b1111u << 12u);
        curr |= (std::to_underlying(LDFQ) & 0b1111u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (HALF & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (FULL & 0b1u) << 10u;
        curr &= ~(0b1u << 7u);
        curr |= (COMPMODE & 0b1u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(PRSC) & 0b111u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SPLIT & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (LDMOD & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DBLX & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (DBLEN & 0b1u) << 0u;

        SMCTRL = curr;
    }

    /**
     * Get SMVAL0's VAL0 field.
     *
     * Value Register 0
     */
    inline uint16_t get_SMVAL0_VAL0()
    {
        return (SMVAL0 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SMVAL0's VAL0 field.
     *
     * Value Register 0
     */
    inline void set_SMVAL0_VAL0(uint16_t value)
    {
        uint16_t curr = SMVAL0;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SMVAL0 = curr;
    }

    /**
     * Get SMFRACVAL1's FRACVAL1 field.
     *
     * Fractional Value 1 Register
     */
    inline uint8_t get_SMFRACVAL1_FRACVAL1()
    {
        return (SMFRACVAL1 >> 11u) & 0b11111u;
    }

    /**
     * Set SMFRACVAL1's FRACVAL1 field.
     *
     * Fractional Value 1 Register
     */
    inline void set_SMFRACVAL1_FRACVAL1(uint8_t value)
    {
        uint16_t curr = SMFRACVAL1;

        curr &= ~(0b11111u << 11u);
        curr |= (value & 0b11111u) << 11u;

        SMFRACVAL1 = curr;
    }

    /**
     * Get SMVAL1's VAL1 field.
     *
     * Value Register 1
     */
    inline uint16_t get_SMVAL1_VAL1()
    {
        return (SMVAL1 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SMVAL1's VAL1 field.
     *
     * Value Register 1
     */
    inline void set_SMVAL1_VAL1(uint16_t value)
    {
        uint16_t curr = SMVAL1;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SMVAL1 = curr;
    }

    /**
     * Get SMFRACVAL2's FRACVAL2 field.
     *
     * Fractional Value 2
     */
    inline uint8_t get_SMFRACVAL2_FRACVAL2()
    {
        return (SMFRACVAL2 >> 11u) & 0b11111u;
    }

    /**
     * Set SMFRACVAL2's FRACVAL2 field.
     *
     * Fractional Value 2
     */
    inline void set_SMFRACVAL2_FRACVAL2(uint8_t value)
    {
        uint16_t curr = SMFRACVAL2;

        curr &= ~(0b11111u << 11u);
        curr |= (value & 0b11111u) << 11u;

        SMFRACVAL2 = curr;
    }

    /**
     * Get SMVAL2's VAL2 field.
     *
     * Value Register 2
     */
    inline uint16_t get_SMVAL2_VAL2()
    {
        return (SMVAL2 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SMVAL2's VAL2 field.
     *
     * Value Register 2
     */
    inline void set_SMVAL2_VAL2(uint16_t value)
    {
        uint16_t curr = SMVAL2;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SMVAL2 = curr;
    }

    /**
     * Get SMFRACVAL3's FRACVAL3 field.
     *
     * Fractional Value 3
     */
    inline uint8_t get_SMFRACVAL3_FRACVAL3()
    {
        return (SMFRACVAL3 >> 11u) & 0b11111u;
    }

    /**
     * Set SMFRACVAL3's FRACVAL3 field.
     *
     * Fractional Value 3
     */
    inline void set_SMFRACVAL3_FRACVAL3(uint8_t value)
    {
        uint16_t curr = SMFRACVAL3;

        curr &= ~(0b11111u << 11u);
        curr |= (value & 0b11111u) << 11u;

        SMFRACVAL3 = curr;
    }

    /**
     * Get SMVAL3's VAL3 field.
     *
     * Value Register 3
     */
    inline uint16_t get_SMVAL3_VAL3()
    {
        return (SMVAL3 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SMVAL3's VAL3 field.
     *
     * Value Register 3
     */
    inline void set_SMVAL3_VAL3(uint16_t value)
    {
        uint16_t curr = SMVAL3;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SMVAL3 = curr;
    }

    /**
     * Get SMFRACVAL4's FRACVAL4 field.
     *
     * Fractional Value 4
     */
    inline uint8_t get_SMFRACVAL4_FRACVAL4()
    {
        return (SMFRACVAL4 >> 11u) & 0b11111u;
    }

    /**
     * Set SMFRACVAL4's FRACVAL4 field.
     *
     * Fractional Value 4
     */
    inline void set_SMFRACVAL4_FRACVAL4(uint8_t value)
    {
        uint16_t curr = SMFRACVAL4;

        curr &= ~(0b11111u << 11u);
        curr |= (value & 0b11111u) << 11u;

        SMFRACVAL4 = curr;
    }

    /**
     * Get SMVAL4's VAL4 field.
     *
     * Value Register 4
     */
    inline uint16_t get_SMVAL4_VAL4()
    {
        return (SMVAL4 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SMVAL4's VAL4 field.
     *
     * Value Register 4
     */
    inline void set_SMVAL4_VAL4(uint16_t value)
    {
        uint16_t curr = SMVAL4;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SMVAL4 = curr;
    }

    /**
     * Get SMFRACVAL5's FRACVAL5 field.
     *
     * Fractional Value 5
     */
    inline uint8_t get_SMFRACVAL5_FRACVAL5()
    {
        return (SMFRACVAL5 >> 11u) & 0b11111u;
    }

    /**
     * Set SMFRACVAL5's FRACVAL5 field.
     *
     * Fractional Value 5
     */
    inline void set_SMFRACVAL5_FRACVAL5(uint8_t value)
    {
        uint16_t curr = SMFRACVAL5;

        curr &= ~(0b11111u << 11u);
        curr |= (value & 0b11111u) << 11u;

        SMFRACVAL5 = curr;
    }

    /**
     * Get SMVAL5's VAL5 field.
     *
     * Value Register 5
     */
    inline uint16_t get_SMVAL5_VAL5()
    {
        return (SMVAL5 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SMVAL5's VAL5 field.
     *
     * Value Register 5
     */
    inline void set_SMVAL5_VAL5(uint16_t value)
    {
        uint16_t curr = SMVAL5;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SMVAL5 = curr;
    }

    /**
     * Get SMFRCTRL's TEST bit.
     *
     * Test Status Bit
     */
    inline bool get_SMFRCTRL_TEST()
    {
        return SMFRCTRL & (1u << 15u);
    }

    /**
     * Get SMFRCTRL's FRAC45_EN bit.
     *
     * Fractional Cycle Placement Enable for PWM_B
     */
    inline bool get_SMFRCTRL_FRAC45_EN()
    {
        return SMFRCTRL & (1u << 4u);
    }

    /**
     * Set SMFRCTRL's FRAC45_EN bit.
     *
     * Fractional Cycle Placement Enable for PWM_B
     */
    inline void set_SMFRCTRL_FRAC45_EN()
    {
        SMFRCTRL |= 1u << 4u;
    }

    /**
     * Clear SMFRCTRL's FRAC45_EN bit.
     *
     * Fractional Cycle Placement Enable for PWM_B
     */
    inline void clear_SMFRCTRL_FRAC45_EN()
    {
        SMFRCTRL &= ~(1u << 4u);
    }

    /**
     * Toggle SMFRCTRL's FRAC45_EN bit.
     *
     * Fractional Cycle Placement Enable for PWM_B
     */
    inline void toggle_SMFRCTRL_FRAC45_EN()
    {
        SMFRCTRL ^= 1u << 4u;
    }

    /**
     * Get SMFRCTRL's FRAC23_EN bit.
     *
     * Fractional Cycle Placement Enable for PWM_A
     */
    inline bool get_SMFRCTRL_FRAC23_EN()
    {
        return SMFRCTRL & (1u << 2u);
    }

    /**
     * Set SMFRCTRL's FRAC23_EN bit.
     *
     * Fractional Cycle Placement Enable for PWM_A
     */
    inline void set_SMFRCTRL_FRAC23_EN()
    {
        SMFRCTRL |= 1u << 2u;
    }

    /**
     * Clear SMFRCTRL's FRAC23_EN bit.
     *
     * Fractional Cycle Placement Enable for PWM_A
     */
    inline void clear_SMFRCTRL_FRAC23_EN()
    {
        SMFRCTRL &= ~(1u << 2u);
    }

    /**
     * Toggle SMFRCTRL's FRAC23_EN bit.
     *
     * Fractional Cycle Placement Enable for PWM_A
     */
    inline void toggle_SMFRCTRL_FRAC23_EN()
    {
        SMFRCTRL ^= 1u << 2u;
    }

    /**
     * Get SMFRCTRL's FRAC1_EN bit.
     *
     * Fractional Cycle PWM Period Enable
     */
    inline bool get_SMFRCTRL_FRAC1_EN()
    {
        return SMFRCTRL & (1u << 1u);
    }

    /**
     * Set SMFRCTRL's FRAC1_EN bit.
     *
     * Fractional Cycle PWM Period Enable
     */
    inline void set_SMFRCTRL_FRAC1_EN()
    {
        SMFRCTRL |= 1u << 1u;
    }

    /**
     * Clear SMFRCTRL's FRAC1_EN bit.
     *
     * Fractional Cycle PWM Period Enable
     */
    inline void clear_SMFRCTRL_FRAC1_EN()
    {
        SMFRCTRL &= ~(1u << 1u);
    }

    /**
     * Toggle SMFRCTRL's FRAC1_EN bit.
     *
     * Fractional Cycle PWM Period Enable
     */
    inline void toggle_SMFRCTRL_FRAC1_EN()
    {
        SMFRCTRL ^= 1u << 1u;
    }

    /**
     * Get all of SMFRCTRL's bit fields.
     *
     * (read-write) Fractional Control Register
     */
    inline void get_SMFRCTRL(bool &TEST, bool &FRAC45_EN, bool &FRAC23_EN,
                             bool &FRAC1_EN)
    {
        uint16_t curr = SMFRCTRL;

        TEST = curr & (1u << 15u);
        FRAC45_EN = curr & (1u << 4u);
        FRAC23_EN = curr & (1u << 2u);
        FRAC1_EN = curr & (1u << 1u);
    }

    /**
     * Set all of SMFRCTRL's bit fields.
     *
     * (read-write) Fractional Control Register
     */
    inline void set_SMFRCTRL(bool FRAC45_EN, bool FRAC23_EN, bool FRAC1_EN)
    {
        uint16_t curr = SMFRCTRL;

        curr &= ~(0b1u << 4u);
        curr |= (FRAC45_EN & 0b1u) << 4u;
        curr &= ~(0b1u << 2u);
        curr |= (FRAC23_EN & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (FRAC1_EN & 0b1u) << 1u;

        SMFRCTRL = curr;
    }

    /**
     * Get SMOCTRL's PWMA_IN bit.
     *
     * PWM_A Input
     */
    inline bool get_SMOCTRL_PWMA_IN()
    {
        return SMOCTRL & (1u << 15u);
    }

    /**
     * Get SMOCTRL's PWMB_IN bit.
     *
     * PWM_B Input
     */
    inline bool get_SMOCTRL_PWMB_IN()
    {
        return SMOCTRL & (1u << 14u);
    }

    /**
     * Get SMOCTRL's PWMX_IN bit.
     *
     * PWM_X Input
     */
    inline bool get_SMOCTRL_PWMX_IN()
    {
        return SMOCTRL & (1u << 13u);
    }

    /**
     * Get SMOCTRL's POLA bit.
     *
     * PWM_A Output Polarity
     */
    inline bool get_SMOCTRL_POLA()
    {
        return SMOCTRL & (1u << 10u);
    }

    /**
     * Set SMOCTRL's POLA bit.
     *
     * PWM_A Output Polarity
     */
    inline void set_SMOCTRL_POLA()
    {
        SMOCTRL |= 1u << 10u;
    }

    /**
     * Clear SMOCTRL's POLA bit.
     *
     * PWM_A Output Polarity
     */
    inline void clear_SMOCTRL_POLA()
    {
        SMOCTRL &= ~(1u << 10u);
    }

    /**
     * Toggle SMOCTRL's POLA bit.
     *
     * PWM_A Output Polarity
     */
    inline void toggle_SMOCTRL_POLA()
    {
        SMOCTRL ^= 1u << 10u;
    }

    /**
     * Get SMOCTRL's POLB bit.
     *
     * PWM_B Output Polarity
     */
    inline bool get_SMOCTRL_POLB()
    {
        return SMOCTRL & (1u << 9u);
    }

    /**
     * Set SMOCTRL's POLB bit.
     *
     * PWM_B Output Polarity
     */
    inline void set_SMOCTRL_POLB()
    {
        SMOCTRL |= 1u << 9u;
    }

    /**
     * Clear SMOCTRL's POLB bit.
     *
     * PWM_B Output Polarity
     */
    inline void clear_SMOCTRL_POLB()
    {
        SMOCTRL &= ~(1u << 9u);
    }

    /**
     * Toggle SMOCTRL's POLB bit.
     *
     * PWM_B Output Polarity
     */
    inline void toggle_SMOCTRL_POLB()
    {
        SMOCTRL ^= 1u << 9u;
    }

    /**
     * Get SMOCTRL's POLX bit.
     *
     * PWM_X Output Polarity
     */
    inline bool get_SMOCTRL_POLX()
    {
        return SMOCTRL & (1u << 8u);
    }

    /**
     * Set SMOCTRL's POLX bit.
     *
     * PWM_X Output Polarity
     */
    inline void set_SMOCTRL_POLX()
    {
        SMOCTRL |= 1u << 8u;
    }

    /**
     * Clear SMOCTRL's POLX bit.
     *
     * PWM_X Output Polarity
     */
    inline void clear_SMOCTRL_POLX()
    {
        SMOCTRL &= ~(1u << 8u);
    }

    /**
     * Toggle SMOCTRL's POLX bit.
     *
     * PWM_X Output Polarity
     */
    inline void toggle_SMOCTRL_POLX()
    {
        SMOCTRL ^= 1u << 8u;
    }

    /**
     * Get SMOCTRL's PWMAFS field.
     *
     * PWM_A Fault State
     */
    inline PWM1_SMOCTRL_PWMAFS get_SMOCTRL_PWMAFS()
    {
        return PWM1_SMOCTRL_PWMAFS((SMOCTRL >> 4u) & 0b11u);
    }

    /**
     * Set SMOCTRL's PWMAFS field.
     *
     * PWM_A Fault State
     */
    inline void set_SMOCTRL_PWMAFS(PWM1_SMOCTRL_PWMAFS value)
    {
        uint16_t curr = SMOCTRL;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        SMOCTRL = curr;
    }

    /**
     * Get SMOCTRL's PWMBFS field.
     *
     * PWM_B Fault State
     */
    inline PWM1_SMOCTRL_PWMBFS get_SMOCTRL_PWMBFS()
    {
        return PWM1_SMOCTRL_PWMBFS((SMOCTRL >> 2u) & 0b11u);
    }

    /**
     * Set SMOCTRL's PWMBFS field.
     *
     * PWM_B Fault State
     */
    inline void set_SMOCTRL_PWMBFS(PWM1_SMOCTRL_PWMBFS value)
    {
        uint16_t curr = SMOCTRL;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        SMOCTRL = curr;
    }

    /**
     * Get SMOCTRL's PWMXFS field.
     *
     * PWM_X Fault State
     */
    inline PWM1_SMOCTRL_PWMXFS get_SMOCTRL_PWMXFS()
    {
        return PWM1_SMOCTRL_PWMXFS((SMOCTRL >> 0u) & 0b11u);
    }

    /**
     * Set SMOCTRL's PWMXFS field.
     *
     * PWM_X Fault State
     */
    inline void set_SMOCTRL_PWMXFS(PWM1_SMOCTRL_PWMXFS value)
    {
        uint16_t curr = SMOCTRL;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        SMOCTRL = curr;
    }

    /**
     * Get all of SMOCTRL's bit fields.
     *
     * (read-write) Output Control Register
     */
    inline void get_SMOCTRL(bool &PWMA_IN, bool &PWMB_IN, bool &PWMX_IN,
                            bool &POLA, bool &POLB, bool &POLX,
                            PWM1_SMOCTRL_PWMAFS &PWMAFS,
                            PWM1_SMOCTRL_PWMBFS &PWMBFS,
                            PWM1_SMOCTRL_PWMXFS &PWMXFS)
    {
        uint16_t curr = SMOCTRL;

        PWMA_IN = curr & (1u << 15u);
        PWMB_IN = curr & (1u << 14u);
        PWMX_IN = curr & (1u << 13u);
        POLA = curr & (1u << 10u);
        POLB = curr & (1u << 9u);
        POLX = curr & (1u << 8u);
        PWMAFS = PWM1_SMOCTRL_PWMAFS((curr >> 4u) & 0b11u);
        PWMBFS = PWM1_SMOCTRL_PWMBFS((curr >> 2u) & 0b11u);
        PWMXFS = PWM1_SMOCTRL_PWMXFS((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of SMOCTRL's bit fields.
     *
     * (read-write) Output Control Register
     */
    inline void set_SMOCTRL(bool POLA, bool POLB, bool POLX,
                            PWM1_SMOCTRL_PWMAFS PWMAFS,
                            PWM1_SMOCTRL_PWMBFS PWMBFS,
                            PWM1_SMOCTRL_PWMXFS PWMXFS)
    {
        uint16_t curr = SMOCTRL;

        curr &= ~(0b1u << 10u);
        curr |= (POLA & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (POLB & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (POLX & 0b1u) << 8u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(PWMAFS) & 0b11u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(PWMBFS) & 0b11u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(PWMXFS) & 0b11u) << 0u;

        SMOCTRL = curr;
    }

    /**
     * Get SMSTS's RUF bit.
     *
     * Registers Updated Flag
     */
    inline bool get_SMSTS_RUF()
    {
        return SMSTS & (1u << 14u);
    }

    /**
     * Get SMSTS's REF bit.
     *
     * Reload Error Flag
     */
    inline bool get_SMSTS_REF()
    {
        return SMSTS & (1u << 13u);
    }

    /**
     * Set SMSTS's REF bit.
     *
     * Reload Error Flag
     */
    inline void set_SMSTS_REF()
    {
        SMSTS |= 1u << 13u;
    }

    /**
     * Clear SMSTS's REF bit.
     *
     * Reload Error Flag
     */
    inline void clear_SMSTS_REF()
    {
        SMSTS &= ~(1u << 13u);
    }

    /**
     * Toggle SMSTS's REF bit.
     *
     * Reload Error Flag
     */
    inline void toggle_SMSTS_REF()
    {
        SMSTS ^= 1u << 13u;
    }

    /**
     * Get SMSTS's RF bit.
     *
     * Reload Flag
     */
    inline bool get_SMSTS_RF()
    {
        return SMSTS & (1u << 12u);
    }

    /**
     * Set SMSTS's RF bit.
     *
     * Reload Flag
     */
    inline void set_SMSTS_RF()
    {
        SMSTS |= 1u << 12u;
    }

    /**
     * Clear SMSTS's RF bit.
     *
     * Reload Flag
     */
    inline void clear_SMSTS_RF()
    {
        SMSTS &= ~(1u << 12u);
    }

    /**
     * Toggle SMSTS's RF bit.
     *
     * Reload Flag
     */
    inline void toggle_SMSTS_RF()
    {
        SMSTS ^= 1u << 12u;
    }

    /**
     * Get SMSTS's CFA1 bit.
     *
     * Capture Flag A1
     */
    inline bool get_SMSTS_CFA1()
    {
        return SMSTS & (1u << 11u);
    }

    /**
     * Set SMSTS's CFA1 bit.
     *
     * Capture Flag A1
     */
    inline void set_SMSTS_CFA1()
    {
        SMSTS |= 1u << 11u;
    }

    /**
     * Clear SMSTS's CFA1 bit.
     *
     * Capture Flag A1
     */
    inline void clear_SMSTS_CFA1()
    {
        SMSTS &= ~(1u << 11u);
    }

    /**
     * Toggle SMSTS's CFA1 bit.
     *
     * Capture Flag A1
     */
    inline void toggle_SMSTS_CFA1()
    {
        SMSTS ^= 1u << 11u;
    }

    /**
     * Get SMSTS's CFA0 bit.
     *
     * Capture Flag A0
     */
    inline bool get_SMSTS_CFA0()
    {
        return SMSTS & (1u << 10u);
    }

    /**
     * Set SMSTS's CFA0 bit.
     *
     * Capture Flag A0
     */
    inline void set_SMSTS_CFA0()
    {
        SMSTS |= 1u << 10u;
    }

    /**
     * Clear SMSTS's CFA0 bit.
     *
     * Capture Flag A0
     */
    inline void clear_SMSTS_CFA0()
    {
        SMSTS &= ~(1u << 10u);
    }

    /**
     * Toggle SMSTS's CFA0 bit.
     *
     * Capture Flag A0
     */
    inline void toggle_SMSTS_CFA0()
    {
        SMSTS ^= 1u << 10u;
    }

    /**
     * Get SMSTS's CFB1 bit.
     *
     * Capture Flag B1
     */
    inline bool get_SMSTS_CFB1()
    {
        return SMSTS & (1u << 9u);
    }

    /**
     * Set SMSTS's CFB1 bit.
     *
     * Capture Flag B1
     */
    inline void set_SMSTS_CFB1()
    {
        SMSTS |= 1u << 9u;
    }

    /**
     * Clear SMSTS's CFB1 bit.
     *
     * Capture Flag B1
     */
    inline void clear_SMSTS_CFB1()
    {
        SMSTS &= ~(1u << 9u);
    }

    /**
     * Toggle SMSTS's CFB1 bit.
     *
     * Capture Flag B1
     */
    inline void toggle_SMSTS_CFB1()
    {
        SMSTS ^= 1u << 9u;
    }

    /**
     * Get SMSTS's CFB0 bit.
     *
     * Capture Flag B0
     */
    inline bool get_SMSTS_CFB0()
    {
        return SMSTS & (1u << 8u);
    }

    /**
     * Set SMSTS's CFB0 bit.
     *
     * Capture Flag B0
     */
    inline void set_SMSTS_CFB0()
    {
        SMSTS |= 1u << 8u;
    }

    /**
     * Clear SMSTS's CFB0 bit.
     *
     * Capture Flag B0
     */
    inline void clear_SMSTS_CFB0()
    {
        SMSTS &= ~(1u << 8u);
    }

    /**
     * Toggle SMSTS's CFB0 bit.
     *
     * Capture Flag B0
     */
    inline void toggle_SMSTS_CFB0()
    {
        SMSTS ^= 1u << 8u;
    }

    /**
     * Get SMSTS's CFX1 bit.
     *
     * Capture Flag X1
     */
    inline bool get_SMSTS_CFX1()
    {
        return SMSTS & (1u << 7u);
    }

    /**
     * Set SMSTS's CFX1 bit.
     *
     * Capture Flag X1
     */
    inline void set_SMSTS_CFX1()
    {
        SMSTS |= 1u << 7u;
    }

    /**
     * Clear SMSTS's CFX1 bit.
     *
     * Capture Flag X1
     */
    inline void clear_SMSTS_CFX1()
    {
        SMSTS &= ~(1u << 7u);
    }

    /**
     * Toggle SMSTS's CFX1 bit.
     *
     * Capture Flag X1
     */
    inline void toggle_SMSTS_CFX1()
    {
        SMSTS ^= 1u << 7u;
    }

    /**
     * Get SMSTS's CFX0 bit.
     *
     * Capture Flag X0
     */
    inline bool get_SMSTS_CFX0()
    {
        return SMSTS & (1u << 6u);
    }

    /**
     * Set SMSTS's CFX0 bit.
     *
     * Capture Flag X0
     */
    inline void set_SMSTS_CFX0()
    {
        SMSTS |= 1u << 6u;
    }

    /**
     * Clear SMSTS's CFX0 bit.
     *
     * Capture Flag X0
     */
    inline void clear_SMSTS_CFX0()
    {
        SMSTS &= ~(1u << 6u);
    }

    /**
     * Toggle SMSTS's CFX0 bit.
     *
     * Capture Flag X0
     */
    inline void toggle_SMSTS_CFX0()
    {
        SMSTS ^= 1u << 6u;
    }

    /**
     * Get SMSTS's CMPF field.
     *
     * Compare Flags
     */
    inline PWM1_SMSTS_CMPF get_SMSTS_CMPF()
    {
        return PWM1_SMSTS_CMPF((SMSTS >> 0u) & 0b111111u);
    }

    /**
     * Set SMSTS's CMPF field.
     *
     * Compare Flags
     */
    inline void set_SMSTS_CMPF(PWM1_SMSTS_CMPF value)
    {
        uint16_t curr = SMSTS;

        curr &= ~(0b111111u << 0u);
        curr |= (std::to_underlying(value) & 0b111111u) << 0u;

        SMSTS = curr;
    }

    /**
     * Get all of SMSTS's bit fields.
     *
     * (read-write) Status Register
     */
    inline void get_SMSTS(bool &RUF, bool &REF, bool &RF, bool &CFA1,
                          bool &CFA0, bool &CFB1, bool &CFB0, bool &CFX1,
                          bool &CFX0, PWM1_SMSTS_CMPF &CMPF)
    {
        uint16_t curr = SMSTS;

        RUF = curr & (1u << 14u);
        REF = curr & (1u << 13u);
        RF = curr & (1u << 12u);
        CFA1 = curr & (1u << 11u);
        CFA0 = curr & (1u << 10u);
        CFB1 = curr & (1u << 9u);
        CFB0 = curr & (1u << 8u);
        CFX1 = curr & (1u << 7u);
        CFX0 = curr & (1u << 6u);
        CMPF = PWM1_SMSTS_CMPF((curr >> 0u) & 0b111111u);
    }

    /**
     * Set all of SMSTS's bit fields.
     *
     * (read-write) Status Register
     */
    inline void set_SMSTS(bool REF, bool RF, bool CFA1, bool CFA0, bool CFB1,
                          bool CFB0, bool CFX1, bool CFX0,
                          PWM1_SMSTS_CMPF CMPF)
    {
        uint16_t curr = SMSTS;

        curr &= ~(0b1u << 13u);
        curr |= (REF & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (RF & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (CFA1 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (CFA0 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (CFB1 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (CFB0 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (CFX1 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CFX0 & 0b1u) << 6u;
        curr &= ~(0b111111u << 0u);
        curr |= (std::to_underlying(CMPF) & 0b111111u) << 0u;

        SMSTS = curr;
    }

    /**
     * Get SMINTEN's REIE bit.
     *
     * Reload Error Interrupt Enable
     */
    inline bool get_SMINTEN_REIE()
    {
        return SMINTEN & (1u << 13u);
    }

    /**
     * Set SMINTEN's REIE bit.
     *
     * Reload Error Interrupt Enable
     */
    inline void set_SMINTEN_REIE()
    {
        SMINTEN |= 1u << 13u;
    }

    /**
     * Clear SMINTEN's REIE bit.
     *
     * Reload Error Interrupt Enable
     */
    inline void clear_SMINTEN_REIE()
    {
        SMINTEN &= ~(1u << 13u);
    }

    /**
     * Toggle SMINTEN's REIE bit.
     *
     * Reload Error Interrupt Enable
     */
    inline void toggle_SMINTEN_REIE()
    {
        SMINTEN ^= 1u << 13u;
    }

    /**
     * Get SMINTEN's RIE bit.
     *
     * Reload Interrupt Enable
     */
    inline bool get_SMINTEN_RIE()
    {
        return SMINTEN & (1u << 12u);
    }

    /**
     * Set SMINTEN's RIE bit.
     *
     * Reload Interrupt Enable
     */
    inline void set_SMINTEN_RIE()
    {
        SMINTEN |= 1u << 12u;
    }

    /**
     * Clear SMINTEN's RIE bit.
     *
     * Reload Interrupt Enable
     */
    inline void clear_SMINTEN_RIE()
    {
        SMINTEN &= ~(1u << 12u);
    }

    /**
     * Toggle SMINTEN's RIE bit.
     *
     * Reload Interrupt Enable
     */
    inline void toggle_SMINTEN_RIE()
    {
        SMINTEN ^= 1u << 12u;
    }

    /**
     * Get SMINTEN's CA1IE bit.
     *
     * Capture A 1 Interrupt Enable
     */
    inline bool get_SMINTEN_CA1IE()
    {
        return SMINTEN & (1u << 11u);
    }

    /**
     * Set SMINTEN's CA1IE bit.
     *
     * Capture A 1 Interrupt Enable
     */
    inline void set_SMINTEN_CA1IE()
    {
        SMINTEN |= 1u << 11u;
    }

    /**
     * Clear SMINTEN's CA1IE bit.
     *
     * Capture A 1 Interrupt Enable
     */
    inline void clear_SMINTEN_CA1IE()
    {
        SMINTEN &= ~(1u << 11u);
    }

    /**
     * Toggle SMINTEN's CA1IE bit.
     *
     * Capture A 1 Interrupt Enable
     */
    inline void toggle_SMINTEN_CA1IE()
    {
        SMINTEN ^= 1u << 11u;
    }

    /**
     * Get SMINTEN's CA0IE bit.
     *
     * Capture A 0 Interrupt Enable
     */
    inline bool get_SMINTEN_CA0IE()
    {
        return SMINTEN & (1u << 10u);
    }

    /**
     * Set SMINTEN's CA0IE bit.
     *
     * Capture A 0 Interrupt Enable
     */
    inline void set_SMINTEN_CA0IE()
    {
        SMINTEN |= 1u << 10u;
    }

    /**
     * Clear SMINTEN's CA0IE bit.
     *
     * Capture A 0 Interrupt Enable
     */
    inline void clear_SMINTEN_CA0IE()
    {
        SMINTEN &= ~(1u << 10u);
    }

    /**
     * Toggle SMINTEN's CA0IE bit.
     *
     * Capture A 0 Interrupt Enable
     */
    inline void toggle_SMINTEN_CA0IE()
    {
        SMINTEN ^= 1u << 10u;
    }

    /**
     * Get SMINTEN's CB1IE bit.
     *
     * Capture B 1 Interrupt Enable
     */
    inline bool get_SMINTEN_CB1IE()
    {
        return SMINTEN & (1u << 9u);
    }

    /**
     * Set SMINTEN's CB1IE bit.
     *
     * Capture B 1 Interrupt Enable
     */
    inline void set_SMINTEN_CB1IE()
    {
        SMINTEN |= 1u << 9u;
    }

    /**
     * Clear SMINTEN's CB1IE bit.
     *
     * Capture B 1 Interrupt Enable
     */
    inline void clear_SMINTEN_CB1IE()
    {
        SMINTEN &= ~(1u << 9u);
    }

    /**
     * Toggle SMINTEN's CB1IE bit.
     *
     * Capture B 1 Interrupt Enable
     */
    inline void toggle_SMINTEN_CB1IE()
    {
        SMINTEN ^= 1u << 9u;
    }

    /**
     * Get SMINTEN's CB0IE bit.
     *
     * Capture B 0 Interrupt Enable
     */
    inline bool get_SMINTEN_CB0IE()
    {
        return SMINTEN & (1u << 8u);
    }

    /**
     * Set SMINTEN's CB0IE bit.
     *
     * Capture B 0 Interrupt Enable
     */
    inline void set_SMINTEN_CB0IE()
    {
        SMINTEN |= 1u << 8u;
    }

    /**
     * Clear SMINTEN's CB0IE bit.
     *
     * Capture B 0 Interrupt Enable
     */
    inline void clear_SMINTEN_CB0IE()
    {
        SMINTEN &= ~(1u << 8u);
    }

    /**
     * Toggle SMINTEN's CB0IE bit.
     *
     * Capture B 0 Interrupt Enable
     */
    inline void toggle_SMINTEN_CB0IE()
    {
        SMINTEN ^= 1u << 8u;
    }

    /**
     * Get SMINTEN's CX1IE bit.
     *
     * Capture X 1 Interrupt Enable
     */
    inline bool get_SMINTEN_CX1IE()
    {
        return SMINTEN & (1u << 7u);
    }

    /**
     * Set SMINTEN's CX1IE bit.
     *
     * Capture X 1 Interrupt Enable
     */
    inline void set_SMINTEN_CX1IE()
    {
        SMINTEN |= 1u << 7u;
    }

    /**
     * Clear SMINTEN's CX1IE bit.
     *
     * Capture X 1 Interrupt Enable
     */
    inline void clear_SMINTEN_CX1IE()
    {
        SMINTEN &= ~(1u << 7u);
    }

    /**
     * Toggle SMINTEN's CX1IE bit.
     *
     * Capture X 1 Interrupt Enable
     */
    inline void toggle_SMINTEN_CX1IE()
    {
        SMINTEN ^= 1u << 7u;
    }

    /**
     * Get SMINTEN's CX0IE bit.
     *
     * Capture X 0 Interrupt Enable
     */
    inline bool get_SMINTEN_CX0IE()
    {
        return SMINTEN & (1u << 6u);
    }

    /**
     * Set SMINTEN's CX0IE bit.
     *
     * Capture X 0 Interrupt Enable
     */
    inline void set_SMINTEN_CX0IE()
    {
        SMINTEN |= 1u << 6u;
    }

    /**
     * Clear SMINTEN's CX0IE bit.
     *
     * Capture X 0 Interrupt Enable
     */
    inline void clear_SMINTEN_CX0IE()
    {
        SMINTEN &= ~(1u << 6u);
    }

    /**
     * Toggle SMINTEN's CX0IE bit.
     *
     * Capture X 0 Interrupt Enable
     */
    inline void toggle_SMINTEN_CX0IE()
    {
        SMINTEN ^= 1u << 6u;
    }

    /**
     * Get SMINTEN's CMPIE field.
     *
     * Compare Interrupt Enables
     */
    inline PWM1_SMINTEN_CMPIE get_SMINTEN_CMPIE()
    {
        return PWM1_SMINTEN_CMPIE((SMINTEN >> 0u) & 0b111111u);
    }

    /**
     * Set SMINTEN's CMPIE field.
     *
     * Compare Interrupt Enables
     */
    inline void set_SMINTEN_CMPIE(PWM1_SMINTEN_CMPIE value)
    {
        uint16_t curr = SMINTEN;

        curr &= ~(0b111111u << 0u);
        curr |= (std::to_underlying(value) & 0b111111u) << 0u;

        SMINTEN = curr;
    }

    /**
     * Get all of SMINTEN's bit fields.
     *
     * (read-write) Interrupt Enable Register
     */
    inline void get_SMINTEN(bool &REIE, bool &RIE, bool &CA1IE, bool &CA0IE,
                            bool &CB1IE, bool &CB0IE, bool &CX1IE, bool &CX0IE,
                            PWM1_SMINTEN_CMPIE &CMPIE)
    {
        uint16_t curr = SMINTEN;

        REIE = curr & (1u << 13u);
        RIE = curr & (1u << 12u);
        CA1IE = curr & (1u << 11u);
        CA0IE = curr & (1u << 10u);
        CB1IE = curr & (1u << 9u);
        CB0IE = curr & (1u << 8u);
        CX1IE = curr & (1u << 7u);
        CX0IE = curr & (1u << 6u);
        CMPIE = PWM1_SMINTEN_CMPIE((curr >> 0u) & 0b111111u);
    }

    /**
     * Set all of SMINTEN's bit fields.
     *
     * (read-write) Interrupt Enable Register
     */
    inline void set_SMINTEN(bool REIE, bool RIE, bool CA1IE, bool CA0IE,
                            bool CB1IE, bool CB0IE, bool CX1IE, bool CX0IE,
                            PWM1_SMINTEN_CMPIE CMPIE)
    {
        uint16_t curr = SMINTEN;

        curr &= ~(0b1u << 13u);
        curr |= (REIE & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (RIE & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (CA1IE & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (CA0IE & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (CB1IE & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (CB0IE & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (CX1IE & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CX0IE & 0b1u) << 6u;
        curr &= ~(0b111111u << 0u);
        curr |= (std::to_underlying(CMPIE) & 0b111111u) << 0u;

        SMINTEN = curr;
    }

    /**
     * Get SMDMAEN's VALDE bit.
     *
     * Value Registers DMA Enable
     */
    inline bool get_SMDMAEN_VALDE()
    {
        return SMDMAEN & (1u << 9u);
    }

    /**
     * Set SMDMAEN's VALDE bit.
     *
     * Value Registers DMA Enable
     */
    inline void set_SMDMAEN_VALDE()
    {
        SMDMAEN |= 1u << 9u;
    }

    /**
     * Clear SMDMAEN's VALDE bit.
     *
     * Value Registers DMA Enable
     */
    inline void clear_SMDMAEN_VALDE()
    {
        SMDMAEN &= ~(1u << 9u);
    }

    /**
     * Toggle SMDMAEN's VALDE bit.
     *
     * Value Registers DMA Enable
     */
    inline void toggle_SMDMAEN_VALDE()
    {
        SMDMAEN ^= 1u << 9u;
    }

    /**
     * Get SMDMAEN's FAND bit.
     *
     * FIFO Watermark AND Control
     */
    inline bool get_SMDMAEN_FAND()
    {
        return SMDMAEN & (1u << 8u);
    }

    /**
     * Set SMDMAEN's FAND bit.
     *
     * FIFO Watermark AND Control
     */
    inline void set_SMDMAEN_FAND()
    {
        SMDMAEN |= 1u << 8u;
    }

    /**
     * Clear SMDMAEN's FAND bit.
     *
     * FIFO Watermark AND Control
     */
    inline void clear_SMDMAEN_FAND()
    {
        SMDMAEN &= ~(1u << 8u);
    }

    /**
     * Toggle SMDMAEN's FAND bit.
     *
     * FIFO Watermark AND Control
     */
    inline void toggle_SMDMAEN_FAND()
    {
        SMDMAEN ^= 1u << 8u;
    }

    /**
     * Get SMDMAEN's CAPTDE field.
     *
     * Capture DMA Enable Source Select
     */
    inline PWM1_SMDMAEN_CAPTDE get_SMDMAEN_CAPTDE()
    {
        return PWM1_SMDMAEN_CAPTDE((SMDMAEN >> 6u) & 0b11u);
    }

    /**
     * Set SMDMAEN's CAPTDE field.
     *
     * Capture DMA Enable Source Select
     */
    inline void set_SMDMAEN_CAPTDE(PWM1_SMDMAEN_CAPTDE value)
    {
        uint16_t curr = SMDMAEN;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        SMDMAEN = curr;
    }

    /**
     * Get SMDMAEN's CA1DE bit.
     *
     * Capture A1 FIFO DMA Enable
     */
    inline bool get_SMDMAEN_CA1DE()
    {
        return SMDMAEN & (1u << 5u);
    }

    /**
     * Set SMDMAEN's CA1DE bit.
     *
     * Capture A1 FIFO DMA Enable
     */
    inline void set_SMDMAEN_CA1DE()
    {
        SMDMAEN |= 1u << 5u;
    }

    /**
     * Clear SMDMAEN's CA1DE bit.
     *
     * Capture A1 FIFO DMA Enable
     */
    inline void clear_SMDMAEN_CA1DE()
    {
        SMDMAEN &= ~(1u << 5u);
    }

    /**
     * Toggle SMDMAEN's CA1DE bit.
     *
     * Capture A1 FIFO DMA Enable
     */
    inline void toggle_SMDMAEN_CA1DE()
    {
        SMDMAEN ^= 1u << 5u;
    }

    /**
     * Get SMDMAEN's CA0DE bit.
     *
     * Capture A0 FIFO DMA Enable
     */
    inline bool get_SMDMAEN_CA0DE()
    {
        return SMDMAEN & (1u << 4u);
    }

    /**
     * Set SMDMAEN's CA0DE bit.
     *
     * Capture A0 FIFO DMA Enable
     */
    inline void set_SMDMAEN_CA0DE()
    {
        SMDMAEN |= 1u << 4u;
    }

    /**
     * Clear SMDMAEN's CA0DE bit.
     *
     * Capture A0 FIFO DMA Enable
     */
    inline void clear_SMDMAEN_CA0DE()
    {
        SMDMAEN &= ~(1u << 4u);
    }

    /**
     * Toggle SMDMAEN's CA0DE bit.
     *
     * Capture A0 FIFO DMA Enable
     */
    inline void toggle_SMDMAEN_CA0DE()
    {
        SMDMAEN ^= 1u << 4u;
    }

    /**
     * Get SMDMAEN's CB1DE bit.
     *
     * Capture B1 FIFO DMA Enable
     */
    inline bool get_SMDMAEN_CB1DE()
    {
        return SMDMAEN & (1u << 3u);
    }

    /**
     * Set SMDMAEN's CB1DE bit.
     *
     * Capture B1 FIFO DMA Enable
     */
    inline void set_SMDMAEN_CB1DE()
    {
        SMDMAEN |= 1u << 3u;
    }

    /**
     * Clear SMDMAEN's CB1DE bit.
     *
     * Capture B1 FIFO DMA Enable
     */
    inline void clear_SMDMAEN_CB1DE()
    {
        SMDMAEN &= ~(1u << 3u);
    }

    /**
     * Toggle SMDMAEN's CB1DE bit.
     *
     * Capture B1 FIFO DMA Enable
     */
    inline void toggle_SMDMAEN_CB1DE()
    {
        SMDMAEN ^= 1u << 3u;
    }

    /**
     * Get SMDMAEN's CB0DE bit.
     *
     * Capture B0 FIFO DMA Enable
     */
    inline bool get_SMDMAEN_CB0DE()
    {
        return SMDMAEN & (1u << 2u);
    }

    /**
     * Set SMDMAEN's CB0DE bit.
     *
     * Capture B0 FIFO DMA Enable
     */
    inline void set_SMDMAEN_CB0DE()
    {
        SMDMAEN |= 1u << 2u;
    }

    /**
     * Clear SMDMAEN's CB0DE bit.
     *
     * Capture B0 FIFO DMA Enable
     */
    inline void clear_SMDMAEN_CB0DE()
    {
        SMDMAEN &= ~(1u << 2u);
    }

    /**
     * Toggle SMDMAEN's CB0DE bit.
     *
     * Capture B0 FIFO DMA Enable
     */
    inline void toggle_SMDMAEN_CB0DE()
    {
        SMDMAEN ^= 1u << 2u;
    }

    /**
     * Get SMDMAEN's CX1DE bit.
     *
     * Capture X1 FIFO DMA Enable
     */
    inline bool get_SMDMAEN_CX1DE()
    {
        return SMDMAEN & (1u << 1u);
    }

    /**
     * Set SMDMAEN's CX1DE bit.
     *
     * Capture X1 FIFO DMA Enable
     */
    inline void set_SMDMAEN_CX1DE()
    {
        SMDMAEN |= 1u << 1u;
    }

    /**
     * Clear SMDMAEN's CX1DE bit.
     *
     * Capture X1 FIFO DMA Enable
     */
    inline void clear_SMDMAEN_CX1DE()
    {
        SMDMAEN &= ~(1u << 1u);
    }

    /**
     * Toggle SMDMAEN's CX1DE bit.
     *
     * Capture X1 FIFO DMA Enable
     */
    inline void toggle_SMDMAEN_CX1DE()
    {
        SMDMAEN ^= 1u << 1u;
    }

    /**
     * Get SMDMAEN's CX0DE bit.
     *
     * Capture X0 FIFO DMA Enable
     */
    inline bool get_SMDMAEN_CX0DE()
    {
        return SMDMAEN & (1u << 0u);
    }

    /**
     * Set SMDMAEN's CX0DE bit.
     *
     * Capture X0 FIFO DMA Enable
     */
    inline void set_SMDMAEN_CX0DE()
    {
        SMDMAEN |= 1u << 0u;
    }

    /**
     * Clear SMDMAEN's CX0DE bit.
     *
     * Capture X0 FIFO DMA Enable
     */
    inline void clear_SMDMAEN_CX0DE()
    {
        SMDMAEN &= ~(1u << 0u);
    }

    /**
     * Toggle SMDMAEN's CX0DE bit.
     *
     * Capture X0 FIFO DMA Enable
     */
    inline void toggle_SMDMAEN_CX0DE()
    {
        SMDMAEN ^= 1u << 0u;
    }

    /**
     * Get all of SMDMAEN's bit fields.
     *
     * (read-write) DMA Enable Register
     */
    inline void get_SMDMAEN(bool &VALDE, bool &FAND,
                            PWM1_SMDMAEN_CAPTDE &CAPTDE, bool &CA1DE,
                            bool &CA0DE, bool &CB1DE, bool &CB0DE, bool &CX1DE,
                            bool &CX0DE)
    {
        uint16_t curr = SMDMAEN;

        VALDE = curr & (1u << 9u);
        FAND = curr & (1u << 8u);
        CAPTDE = PWM1_SMDMAEN_CAPTDE((curr >> 6u) & 0b11u);
        CA1DE = curr & (1u << 5u);
        CA0DE = curr & (1u << 4u);
        CB1DE = curr & (1u << 3u);
        CB0DE = curr & (1u << 2u);
        CX1DE = curr & (1u << 1u);
        CX0DE = curr & (1u << 0u);
    }

    /**
     * Set all of SMDMAEN's bit fields.
     *
     * (read-write) DMA Enable Register
     */
    inline void set_SMDMAEN(bool VALDE, bool FAND, PWM1_SMDMAEN_CAPTDE CAPTDE,
                            bool CA1DE, bool CA0DE, bool CB1DE, bool CB0DE,
                            bool CX1DE, bool CX0DE)
    {
        uint16_t curr = SMDMAEN;

        curr &= ~(0b1u << 9u);
        curr |= (VALDE & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (FAND & 0b1u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(CAPTDE) & 0b11u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (CA1DE & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (CA0DE & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (CB1DE & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CB0DE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CX1DE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CX0DE & 0b1u) << 0u;

        SMDMAEN = curr;
    }

    /**
     * Get SMTCTRL's PWAOT0 bit.
     *
     * Output Trigger 0 Source Select
     */
    inline bool get_SMTCTRL_PWAOT0()
    {
        return SMTCTRL & (1u << 15u);
    }

    /**
     * Set SMTCTRL's PWAOT0 bit.
     *
     * Output Trigger 0 Source Select
     */
    inline void set_SMTCTRL_PWAOT0()
    {
        SMTCTRL |= 1u << 15u;
    }

    /**
     * Clear SMTCTRL's PWAOT0 bit.
     *
     * Output Trigger 0 Source Select
     */
    inline void clear_SMTCTRL_PWAOT0()
    {
        SMTCTRL &= ~(1u << 15u);
    }

    /**
     * Toggle SMTCTRL's PWAOT0 bit.
     *
     * Output Trigger 0 Source Select
     */
    inline void toggle_SMTCTRL_PWAOT0()
    {
        SMTCTRL ^= 1u << 15u;
    }

    /**
     * Get SMTCTRL's PWBOT1 bit.
     *
     * Output Trigger 1 Source Select
     */
    inline bool get_SMTCTRL_PWBOT1()
    {
        return SMTCTRL & (1u << 14u);
    }

    /**
     * Set SMTCTRL's PWBOT1 bit.
     *
     * Output Trigger 1 Source Select
     */
    inline void set_SMTCTRL_PWBOT1()
    {
        SMTCTRL |= 1u << 14u;
    }

    /**
     * Clear SMTCTRL's PWBOT1 bit.
     *
     * Output Trigger 1 Source Select
     */
    inline void clear_SMTCTRL_PWBOT1()
    {
        SMTCTRL &= ~(1u << 14u);
    }

    /**
     * Toggle SMTCTRL's PWBOT1 bit.
     *
     * Output Trigger 1 Source Select
     */
    inline void toggle_SMTCTRL_PWBOT1()
    {
        SMTCTRL ^= 1u << 14u;
    }

    /**
     * Get SMTCTRL's TRGFRQ bit.
     *
     * Trigger frequency
     */
    inline bool get_SMTCTRL_TRGFRQ()
    {
        return SMTCTRL & (1u << 12u);
    }

    /**
     * Set SMTCTRL's TRGFRQ bit.
     *
     * Trigger frequency
     */
    inline void set_SMTCTRL_TRGFRQ()
    {
        SMTCTRL |= 1u << 12u;
    }

    /**
     * Clear SMTCTRL's TRGFRQ bit.
     *
     * Trigger frequency
     */
    inline void clear_SMTCTRL_TRGFRQ()
    {
        SMTCTRL &= ~(1u << 12u);
    }

    /**
     * Toggle SMTCTRL's TRGFRQ bit.
     *
     * Trigger frequency
     */
    inline void toggle_SMTCTRL_TRGFRQ()
    {
        SMTCTRL ^= 1u << 12u;
    }

    /**
     * Get SMTCTRL's OUT_TRIG_EN field.
     *
     * Output Trigger Enables
     */
    inline PWM1_SMTCTRL_OUT_TRIG_EN get_SMTCTRL_OUT_TRIG_EN()
    {
        return PWM1_SMTCTRL_OUT_TRIG_EN((SMTCTRL >> 0u) & 0b111111u);
    }

    /**
     * Set SMTCTRL's OUT_TRIG_EN field.
     *
     * Output Trigger Enables
     */
    inline void set_SMTCTRL_OUT_TRIG_EN(PWM1_SMTCTRL_OUT_TRIG_EN value)
    {
        uint16_t curr = SMTCTRL;

        curr &= ~(0b111111u << 0u);
        curr |= (std::to_underlying(value) & 0b111111u) << 0u;

        SMTCTRL = curr;
    }

    /**
     * Get all of SMTCTRL's bit fields.
     *
     * (read-write) Output Trigger Control Register
     */
    inline void get_SMTCTRL(bool &PWAOT0, bool &PWBOT1, bool &TRGFRQ,
                            PWM1_SMTCTRL_OUT_TRIG_EN &OUT_TRIG_EN)
    {
        uint16_t curr = SMTCTRL;

        PWAOT0 = curr & (1u << 15u);
        PWBOT1 = curr & (1u << 14u);
        TRGFRQ = curr & (1u << 12u);
        OUT_TRIG_EN = PWM1_SMTCTRL_OUT_TRIG_EN((curr >> 0u) & 0b111111u);
    }

    /**
     * Set all of SMTCTRL's bit fields.
     *
     * (read-write) Output Trigger Control Register
     */
    inline void set_SMTCTRL(bool PWAOT0, bool PWBOT1, bool TRGFRQ,
                            PWM1_SMTCTRL_OUT_TRIG_EN OUT_TRIG_EN)
    {
        uint16_t curr = SMTCTRL;

        curr &= ~(0b1u << 15u);
        curr |= (PWAOT0 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (PWBOT1 & 0b1u) << 14u;
        curr &= ~(0b1u << 12u);
        curr |= (TRGFRQ & 0b1u) << 12u;
        curr &= ~(0b111111u << 0u);
        curr |= (std::to_underlying(OUT_TRIG_EN) & 0b111111u) << 0u;

        SMTCTRL = curr;
    }

    /**
     * Get SMDISMAP0's DIS0X field.
     *
     * PWM_X Fault Disable Mask 0
     */
    inline uint8_t get_SMDISMAP0_DIS0X()
    {
        return (SMDISMAP0 >> 8u) & 0b1111u;
    }

    /**
     * Set SMDISMAP0's DIS0X field.
     *
     * PWM_X Fault Disable Mask 0
     */
    inline void set_SMDISMAP0_DIS0X(uint8_t value)
    {
        uint16_t curr = SMDISMAP0;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        SMDISMAP0 = curr;
    }

    /**
     * Get SMDISMAP0's DIS0B field.
     *
     * PWM_B Fault Disable Mask 0
     */
    inline uint8_t get_SMDISMAP0_DIS0B()
    {
        return (SMDISMAP0 >> 4u) & 0b1111u;
    }

    /**
     * Set SMDISMAP0's DIS0B field.
     *
     * PWM_B Fault Disable Mask 0
     */
    inline void set_SMDISMAP0_DIS0B(uint8_t value)
    {
        uint16_t curr = SMDISMAP0;

        curr &= ~(0b1111u << 4u);
        curr |= (value & 0b1111u) << 4u;

        SMDISMAP0 = curr;
    }

    /**
     * Get SMDISMAP0's DIS0A field.
     *
     * PWM_A Fault Disable Mask 0
     */
    inline uint8_t get_SMDISMAP0_DIS0A()
    {
        return (SMDISMAP0 >> 0u) & 0b1111u;
    }

    /**
     * Set SMDISMAP0's DIS0A field.
     *
     * PWM_A Fault Disable Mask 0
     */
    inline void set_SMDISMAP0_DIS0A(uint8_t value)
    {
        uint16_t curr = SMDISMAP0;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        SMDISMAP0 = curr;
    }

    /**
     * Get all of SMDISMAP0's bit fields.
     *
     * (read-write) Fault Disable Mapping Register 0
     */
    inline void get_SMDISMAP0(uint8_t &DIS0X, uint8_t &DIS0B, uint8_t &DIS0A)
    {
        uint16_t curr = SMDISMAP0;

        DIS0X = (curr >> 8u) & 0b1111u;
        DIS0B = (curr >> 4u) & 0b1111u;
        DIS0A = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of SMDISMAP0's bit fields.
     *
     * (read-write) Fault Disable Mapping Register 0
     */
    inline void set_SMDISMAP0(uint8_t DIS0X, uint8_t DIS0B, uint8_t DIS0A)
    {
        uint16_t curr = SMDISMAP0;

        curr &= ~(0b1111u << 8u);
        curr |= (DIS0X & 0b1111u) << 8u;
        curr &= ~(0b1111u << 4u);
        curr |= (DIS0B & 0b1111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (DIS0A & 0b1111u) << 0u;

        SMDISMAP0 = curr;
    }

    /**
     * Get SMDTCNT0's DTCNT0 field.
     *
     * DTCNT0
     */
    inline uint16_t get_SMDTCNT0_DTCNT0()
    {
        return (SMDTCNT0 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SMDTCNT0's DTCNT0 field.
     *
     * DTCNT0
     */
    inline void set_SMDTCNT0_DTCNT0(uint16_t value)
    {
        uint16_t curr = SMDTCNT0;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SMDTCNT0 = curr;
    }

    /**
     * Get SMDTCNT1's DTCNT1 field.
     *
     * DTCNT1
     */
    inline uint16_t get_SMDTCNT1_DTCNT1()
    {
        return (SMDTCNT1 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SMDTCNT1's DTCNT1 field.
     *
     * DTCNT1
     */
    inline void set_SMDTCNT1_DTCNT1(uint16_t value)
    {
        uint16_t curr = SMDTCNT1;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SMDTCNT1 = curr;
    }

    /**
     * Get SMCAPTCTRLA's CA1CNT field.
     *
     * Capture A1 FIFO Word Count
     */
    inline uint8_t get_SMCAPTCTRLA_CA1CNT()
    {
        return (SMCAPTCTRLA >> 13u) & 0b111u;
    }

    /**
     * Get SMCAPTCTRLA's CA0CNT field.
     *
     * Capture A0 FIFO Word Count
     */
    inline uint8_t get_SMCAPTCTRLA_CA0CNT()
    {
        return (SMCAPTCTRLA >> 10u) & 0b111u;
    }

    /**
     * Get SMCAPTCTRLA's CFAWM field.
     *
     * Capture A FIFOs Water Mark
     */
    inline uint8_t get_SMCAPTCTRLA_CFAWM()
    {
        return (SMCAPTCTRLA >> 8u) & 0b11u;
    }

    /**
     * Set SMCAPTCTRLA's CFAWM field.
     *
     * Capture A FIFOs Water Mark
     */
    inline void set_SMCAPTCTRLA_CFAWM(uint8_t value)
    {
        uint16_t curr = SMCAPTCTRLA;

        curr &= ~(0b11u << 8u);
        curr |= (value & 0b11u) << 8u;

        SMCAPTCTRLA = curr;
    }

    /**
     * Get SMCAPTCTRLA's EDGCNTA_EN bit.
     *
     * Edge Counter A Enable
     */
    inline bool get_SMCAPTCTRLA_EDGCNTA_EN()
    {
        return SMCAPTCTRLA & (1u << 7u);
    }

    /**
     * Set SMCAPTCTRLA's EDGCNTA_EN bit.
     *
     * Edge Counter A Enable
     */
    inline void set_SMCAPTCTRLA_EDGCNTA_EN()
    {
        SMCAPTCTRLA |= 1u << 7u;
    }

    /**
     * Clear SMCAPTCTRLA's EDGCNTA_EN bit.
     *
     * Edge Counter A Enable
     */
    inline void clear_SMCAPTCTRLA_EDGCNTA_EN()
    {
        SMCAPTCTRLA &= ~(1u << 7u);
    }

    /**
     * Toggle SMCAPTCTRLA's EDGCNTA_EN bit.
     *
     * Edge Counter A Enable
     */
    inline void toggle_SMCAPTCTRLA_EDGCNTA_EN()
    {
        SMCAPTCTRLA ^= 1u << 7u;
    }

    /**
     * Get SMCAPTCTRLA's INP_SELA bit.
     *
     * Input Select A
     */
    inline bool get_SMCAPTCTRLA_INP_SELA()
    {
        return SMCAPTCTRLA & (1u << 6u);
    }

    /**
     * Set SMCAPTCTRLA's INP_SELA bit.
     *
     * Input Select A
     */
    inline void set_SMCAPTCTRLA_INP_SELA()
    {
        SMCAPTCTRLA |= 1u << 6u;
    }

    /**
     * Clear SMCAPTCTRLA's INP_SELA bit.
     *
     * Input Select A
     */
    inline void clear_SMCAPTCTRLA_INP_SELA()
    {
        SMCAPTCTRLA &= ~(1u << 6u);
    }

    /**
     * Toggle SMCAPTCTRLA's INP_SELA bit.
     *
     * Input Select A
     */
    inline void toggle_SMCAPTCTRLA_INP_SELA()
    {
        SMCAPTCTRLA ^= 1u << 6u;
    }

    /**
     * Get SMCAPTCTRLA's EDGA1 field.
     *
     * Edge A 1
     */
    inline PWM1_SMCAPTCTRLA_EDGA1 get_SMCAPTCTRLA_EDGA1()
    {
        return PWM1_SMCAPTCTRLA_EDGA1((SMCAPTCTRLA >> 4u) & 0b11u);
    }

    /**
     * Set SMCAPTCTRLA's EDGA1 field.
     *
     * Edge A 1
     */
    inline void set_SMCAPTCTRLA_EDGA1(PWM1_SMCAPTCTRLA_EDGA1 value)
    {
        uint16_t curr = SMCAPTCTRLA;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        SMCAPTCTRLA = curr;
    }

    /**
     * Get SMCAPTCTRLA's EDGA0 field.
     *
     * Edge A 0
     */
    inline PWM1_SMCAPTCTRLA_EDGA0 get_SMCAPTCTRLA_EDGA0()
    {
        return PWM1_SMCAPTCTRLA_EDGA0((SMCAPTCTRLA >> 2u) & 0b11u);
    }

    /**
     * Set SMCAPTCTRLA's EDGA0 field.
     *
     * Edge A 0
     */
    inline void set_SMCAPTCTRLA_EDGA0(PWM1_SMCAPTCTRLA_EDGA0 value)
    {
        uint16_t curr = SMCAPTCTRLA;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        SMCAPTCTRLA = curr;
    }

    /**
     * Get SMCAPTCTRLA's ONESHOTA bit.
     *
     * One Shot Mode A
     */
    inline bool get_SMCAPTCTRLA_ONESHOTA()
    {
        return SMCAPTCTRLA & (1u << 1u);
    }

    /**
     * Set SMCAPTCTRLA's ONESHOTA bit.
     *
     * One Shot Mode A
     */
    inline void set_SMCAPTCTRLA_ONESHOTA()
    {
        SMCAPTCTRLA |= 1u << 1u;
    }

    /**
     * Clear SMCAPTCTRLA's ONESHOTA bit.
     *
     * One Shot Mode A
     */
    inline void clear_SMCAPTCTRLA_ONESHOTA()
    {
        SMCAPTCTRLA &= ~(1u << 1u);
    }

    /**
     * Toggle SMCAPTCTRLA's ONESHOTA bit.
     *
     * One Shot Mode A
     */
    inline void toggle_SMCAPTCTRLA_ONESHOTA()
    {
        SMCAPTCTRLA ^= 1u << 1u;
    }

    /**
     * Get SMCAPTCTRLA's ARMA bit.
     *
     * Arm A
     */
    inline bool get_SMCAPTCTRLA_ARMA()
    {
        return SMCAPTCTRLA & (1u << 0u);
    }

    /**
     * Set SMCAPTCTRLA's ARMA bit.
     *
     * Arm A
     */
    inline void set_SMCAPTCTRLA_ARMA()
    {
        SMCAPTCTRLA |= 1u << 0u;
    }

    /**
     * Clear SMCAPTCTRLA's ARMA bit.
     *
     * Arm A
     */
    inline void clear_SMCAPTCTRLA_ARMA()
    {
        SMCAPTCTRLA &= ~(1u << 0u);
    }

    /**
     * Toggle SMCAPTCTRLA's ARMA bit.
     *
     * Arm A
     */
    inline void toggle_SMCAPTCTRLA_ARMA()
    {
        SMCAPTCTRLA ^= 1u << 0u;
    }

    /**
     * Get all of SMCAPTCTRLA's bit fields.
     *
     * (read-write) Capture Control A Register
     */
    inline void get_SMCAPTCTRLA(uint8_t &CA1CNT, uint8_t &CA0CNT,
                                uint8_t &CFAWM, bool &EDGCNTA_EN,
                                bool &INP_SELA, PWM1_SMCAPTCTRLA_EDGA1 &EDGA1,
                                PWM1_SMCAPTCTRLA_EDGA0 &EDGA0, bool &ONESHOTA,
                                bool &ARMA)
    {
        uint16_t curr = SMCAPTCTRLA;

        CA1CNT = (curr >> 13u) & 0b111u;
        CA0CNT = (curr >> 10u) & 0b111u;
        CFAWM = (curr >> 8u) & 0b11u;
        EDGCNTA_EN = curr & (1u << 7u);
        INP_SELA = curr & (1u << 6u);
        EDGA1 = PWM1_SMCAPTCTRLA_EDGA1((curr >> 4u) & 0b11u);
        EDGA0 = PWM1_SMCAPTCTRLA_EDGA0((curr >> 2u) & 0b11u);
        ONESHOTA = curr & (1u << 1u);
        ARMA = curr & (1u << 0u);
    }

    /**
     * Set all of SMCAPTCTRLA's bit fields.
     *
     * (read-write) Capture Control A Register
     */
    inline void set_SMCAPTCTRLA(uint8_t CFAWM, bool EDGCNTA_EN, bool INP_SELA,
                                PWM1_SMCAPTCTRLA_EDGA1 EDGA1,
                                PWM1_SMCAPTCTRLA_EDGA0 EDGA0, bool ONESHOTA,
                                bool ARMA)
    {
        uint16_t curr = SMCAPTCTRLA;

        curr &= ~(0b11u << 8u);
        curr |= (CFAWM & 0b11u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (EDGCNTA_EN & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (INP_SELA & 0b1u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(EDGA1) & 0b11u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(EDGA0) & 0b11u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (ONESHOTA & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ARMA & 0b1u) << 0u;

        SMCAPTCTRLA = curr;
    }

    /**
     * Get SMCAPTCOMPA's EDGCNTA field.
     *
     * Edge Counter A
     */
    inline uint8_t get_SMCAPTCOMPA_EDGCNTA()
    {
        return (SMCAPTCOMPA >> 8u) & 0b11111111u;
    }

    /**
     * Get SMCAPTCOMPA's EDGCMPA field.
     *
     * Edge Compare A
     */
    inline uint8_t get_SMCAPTCOMPA_EDGCMPA()
    {
        return (SMCAPTCOMPA >> 0u) & 0b11111111u;
    }

    /**
     * Set SMCAPTCOMPA's EDGCMPA field.
     *
     * Edge Compare A
     */
    inline void set_SMCAPTCOMPA_EDGCMPA(uint8_t value)
    {
        uint16_t curr = SMCAPTCOMPA;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SMCAPTCOMPA = curr;
    }

    /**
     * Get all of SMCAPTCOMPA's bit fields.
     *
     * (read-write) Capture Compare A Register
     */
    inline void get_SMCAPTCOMPA(uint8_t &EDGCNTA, uint8_t &EDGCMPA)
    {
        uint16_t curr = SMCAPTCOMPA;

        EDGCNTA = (curr >> 8u) & 0b11111111u;
        EDGCMPA = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get SMCAPTCTRLB's CB1CNT field.
     *
     * Capture B1 FIFO Word Count
     */
    inline uint8_t get_SMCAPTCTRLB_CB1CNT()
    {
        return (SMCAPTCTRLB >> 13u) & 0b111u;
    }

    /**
     * Get SMCAPTCTRLB's CB0CNT field.
     *
     * Capture B0 FIFO Word Count
     */
    inline uint8_t get_SMCAPTCTRLB_CB0CNT()
    {
        return (SMCAPTCTRLB >> 10u) & 0b111u;
    }

    /**
     * Get SMCAPTCTRLB's CFBWM field.
     *
     * Capture B FIFOs Water Mark
     */
    inline uint8_t get_SMCAPTCTRLB_CFBWM()
    {
        return (SMCAPTCTRLB >> 8u) & 0b11u;
    }

    /**
     * Set SMCAPTCTRLB's CFBWM field.
     *
     * Capture B FIFOs Water Mark
     */
    inline void set_SMCAPTCTRLB_CFBWM(uint8_t value)
    {
        uint16_t curr = SMCAPTCTRLB;

        curr &= ~(0b11u << 8u);
        curr |= (value & 0b11u) << 8u;

        SMCAPTCTRLB = curr;
    }

    /**
     * Get SMCAPTCTRLB's EDGCNTB_EN bit.
     *
     * Edge Counter B Enable
     */
    inline bool get_SMCAPTCTRLB_EDGCNTB_EN()
    {
        return SMCAPTCTRLB & (1u << 7u);
    }

    /**
     * Set SMCAPTCTRLB's EDGCNTB_EN bit.
     *
     * Edge Counter B Enable
     */
    inline void set_SMCAPTCTRLB_EDGCNTB_EN()
    {
        SMCAPTCTRLB |= 1u << 7u;
    }

    /**
     * Clear SMCAPTCTRLB's EDGCNTB_EN bit.
     *
     * Edge Counter B Enable
     */
    inline void clear_SMCAPTCTRLB_EDGCNTB_EN()
    {
        SMCAPTCTRLB &= ~(1u << 7u);
    }

    /**
     * Toggle SMCAPTCTRLB's EDGCNTB_EN bit.
     *
     * Edge Counter B Enable
     */
    inline void toggle_SMCAPTCTRLB_EDGCNTB_EN()
    {
        SMCAPTCTRLB ^= 1u << 7u;
    }

    /**
     * Get SMCAPTCTRLB's INP_SELB bit.
     *
     * Input Select B
     */
    inline bool get_SMCAPTCTRLB_INP_SELB()
    {
        return SMCAPTCTRLB & (1u << 6u);
    }

    /**
     * Set SMCAPTCTRLB's INP_SELB bit.
     *
     * Input Select B
     */
    inline void set_SMCAPTCTRLB_INP_SELB()
    {
        SMCAPTCTRLB |= 1u << 6u;
    }

    /**
     * Clear SMCAPTCTRLB's INP_SELB bit.
     *
     * Input Select B
     */
    inline void clear_SMCAPTCTRLB_INP_SELB()
    {
        SMCAPTCTRLB &= ~(1u << 6u);
    }

    /**
     * Toggle SMCAPTCTRLB's INP_SELB bit.
     *
     * Input Select B
     */
    inline void toggle_SMCAPTCTRLB_INP_SELB()
    {
        SMCAPTCTRLB ^= 1u << 6u;
    }

    /**
     * Get SMCAPTCTRLB's EDGB1 field.
     *
     * Edge B 1
     */
    inline PWM1_SMCAPTCTRLB_EDGB1 get_SMCAPTCTRLB_EDGB1()
    {
        return PWM1_SMCAPTCTRLB_EDGB1((SMCAPTCTRLB >> 4u) & 0b11u);
    }

    /**
     * Set SMCAPTCTRLB's EDGB1 field.
     *
     * Edge B 1
     */
    inline void set_SMCAPTCTRLB_EDGB1(PWM1_SMCAPTCTRLB_EDGB1 value)
    {
        uint16_t curr = SMCAPTCTRLB;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        SMCAPTCTRLB = curr;
    }

    /**
     * Get SMCAPTCTRLB's EDGB0 field.
     *
     * Edge B 0
     */
    inline PWM1_SMCAPTCTRLB_EDGB0 get_SMCAPTCTRLB_EDGB0()
    {
        return PWM1_SMCAPTCTRLB_EDGB0((SMCAPTCTRLB >> 2u) & 0b11u);
    }

    /**
     * Set SMCAPTCTRLB's EDGB0 field.
     *
     * Edge B 0
     */
    inline void set_SMCAPTCTRLB_EDGB0(PWM1_SMCAPTCTRLB_EDGB0 value)
    {
        uint16_t curr = SMCAPTCTRLB;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        SMCAPTCTRLB = curr;
    }

    /**
     * Get SMCAPTCTRLB's ONESHOTB bit.
     *
     * One Shot Mode B
     */
    inline bool get_SMCAPTCTRLB_ONESHOTB()
    {
        return SMCAPTCTRLB & (1u << 1u);
    }

    /**
     * Set SMCAPTCTRLB's ONESHOTB bit.
     *
     * One Shot Mode B
     */
    inline void set_SMCAPTCTRLB_ONESHOTB()
    {
        SMCAPTCTRLB |= 1u << 1u;
    }

    /**
     * Clear SMCAPTCTRLB's ONESHOTB bit.
     *
     * One Shot Mode B
     */
    inline void clear_SMCAPTCTRLB_ONESHOTB()
    {
        SMCAPTCTRLB &= ~(1u << 1u);
    }

    /**
     * Toggle SMCAPTCTRLB's ONESHOTB bit.
     *
     * One Shot Mode B
     */
    inline void toggle_SMCAPTCTRLB_ONESHOTB()
    {
        SMCAPTCTRLB ^= 1u << 1u;
    }

    /**
     * Get SMCAPTCTRLB's ARMB bit.
     *
     * Arm B
     */
    inline bool get_SMCAPTCTRLB_ARMB()
    {
        return SMCAPTCTRLB & (1u << 0u);
    }

    /**
     * Set SMCAPTCTRLB's ARMB bit.
     *
     * Arm B
     */
    inline void set_SMCAPTCTRLB_ARMB()
    {
        SMCAPTCTRLB |= 1u << 0u;
    }

    /**
     * Clear SMCAPTCTRLB's ARMB bit.
     *
     * Arm B
     */
    inline void clear_SMCAPTCTRLB_ARMB()
    {
        SMCAPTCTRLB &= ~(1u << 0u);
    }

    /**
     * Toggle SMCAPTCTRLB's ARMB bit.
     *
     * Arm B
     */
    inline void toggle_SMCAPTCTRLB_ARMB()
    {
        SMCAPTCTRLB ^= 1u << 0u;
    }

    /**
     * Get all of SMCAPTCTRLB's bit fields.
     *
     * (read-write) Capture Control B Register
     */
    inline void get_SMCAPTCTRLB(uint8_t &CB1CNT, uint8_t &CB0CNT,
                                uint8_t &CFBWM, bool &EDGCNTB_EN,
                                bool &INP_SELB, PWM1_SMCAPTCTRLB_EDGB1 &EDGB1,
                                PWM1_SMCAPTCTRLB_EDGB0 &EDGB0, bool &ONESHOTB,
                                bool &ARMB)
    {
        uint16_t curr = SMCAPTCTRLB;

        CB1CNT = (curr >> 13u) & 0b111u;
        CB0CNT = (curr >> 10u) & 0b111u;
        CFBWM = (curr >> 8u) & 0b11u;
        EDGCNTB_EN = curr & (1u << 7u);
        INP_SELB = curr & (1u << 6u);
        EDGB1 = PWM1_SMCAPTCTRLB_EDGB1((curr >> 4u) & 0b11u);
        EDGB0 = PWM1_SMCAPTCTRLB_EDGB0((curr >> 2u) & 0b11u);
        ONESHOTB = curr & (1u << 1u);
        ARMB = curr & (1u << 0u);
    }

    /**
     * Set all of SMCAPTCTRLB's bit fields.
     *
     * (read-write) Capture Control B Register
     */
    inline void set_SMCAPTCTRLB(uint8_t CFBWM, bool EDGCNTB_EN, bool INP_SELB,
                                PWM1_SMCAPTCTRLB_EDGB1 EDGB1,
                                PWM1_SMCAPTCTRLB_EDGB0 EDGB0, bool ONESHOTB,
                                bool ARMB)
    {
        uint16_t curr = SMCAPTCTRLB;

        curr &= ~(0b11u << 8u);
        curr |= (CFBWM & 0b11u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (EDGCNTB_EN & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (INP_SELB & 0b1u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(EDGB1) & 0b11u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(EDGB0) & 0b11u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (ONESHOTB & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ARMB & 0b1u) << 0u;

        SMCAPTCTRLB = curr;
    }

    /**
     * Get SMCAPTCOMPB's EDGCNTB field.
     *
     * Edge Counter B
     */
    inline uint8_t get_SMCAPTCOMPB_EDGCNTB()
    {
        return (SMCAPTCOMPB >> 8u) & 0b11111111u;
    }

    /**
     * Get SMCAPTCOMPB's EDGCMPB field.
     *
     * Edge Compare B
     */
    inline uint8_t get_SMCAPTCOMPB_EDGCMPB()
    {
        return (SMCAPTCOMPB >> 0u) & 0b11111111u;
    }

    /**
     * Set SMCAPTCOMPB's EDGCMPB field.
     *
     * Edge Compare B
     */
    inline void set_SMCAPTCOMPB_EDGCMPB(uint8_t value)
    {
        uint16_t curr = SMCAPTCOMPB;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SMCAPTCOMPB = curr;
    }

    /**
     * Get all of SMCAPTCOMPB's bit fields.
     *
     * (read-write) Capture Compare B Register
     */
    inline void get_SMCAPTCOMPB(uint8_t &EDGCNTB, uint8_t &EDGCMPB)
    {
        uint16_t curr = SMCAPTCOMPB;

        EDGCNTB = (curr >> 8u) & 0b11111111u;
        EDGCMPB = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get SMCAPTCTRLX's CX1CNT field.
     *
     * Capture X1 FIFO Word Count
     */
    inline uint8_t get_SMCAPTCTRLX_CX1CNT()
    {
        return (SMCAPTCTRLX >> 13u) & 0b111u;
    }

    /**
     * Get SMCAPTCTRLX's CX0CNT field.
     *
     * Capture X0 FIFO Word Count
     */
    inline uint8_t get_SMCAPTCTRLX_CX0CNT()
    {
        return (SMCAPTCTRLX >> 10u) & 0b111u;
    }

    /**
     * Get SMCAPTCTRLX's CFXWM field.
     *
     * Capture X FIFOs Water Mark
     */
    inline uint8_t get_SMCAPTCTRLX_CFXWM()
    {
        return (SMCAPTCTRLX >> 8u) & 0b11u;
    }

    /**
     * Set SMCAPTCTRLX's CFXWM field.
     *
     * Capture X FIFOs Water Mark
     */
    inline void set_SMCAPTCTRLX_CFXWM(uint8_t value)
    {
        uint16_t curr = SMCAPTCTRLX;

        curr &= ~(0b11u << 8u);
        curr |= (value & 0b11u) << 8u;

        SMCAPTCTRLX = curr;
    }

    /**
     * Get SMCAPTCTRLX's EDGCNTX_EN bit.
     *
     * Edge Counter X Enable
     */
    inline bool get_SMCAPTCTRLX_EDGCNTX_EN()
    {
        return SMCAPTCTRLX & (1u << 7u);
    }

    /**
     * Set SMCAPTCTRLX's EDGCNTX_EN bit.
     *
     * Edge Counter X Enable
     */
    inline void set_SMCAPTCTRLX_EDGCNTX_EN()
    {
        SMCAPTCTRLX |= 1u << 7u;
    }

    /**
     * Clear SMCAPTCTRLX's EDGCNTX_EN bit.
     *
     * Edge Counter X Enable
     */
    inline void clear_SMCAPTCTRLX_EDGCNTX_EN()
    {
        SMCAPTCTRLX &= ~(1u << 7u);
    }

    /**
     * Toggle SMCAPTCTRLX's EDGCNTX_EN bit.
     *
     * Edge Counter X Enable
     */
    inline void toggle_SMCAPTCTRLX_EDGCNTX_EN()
    {
        SMCAPTCTRLX ^= 1u << 7u;
    }

    /**
     * Get SMCAPTCTRLX's INP_SELX bit.
     *
     * Input Select X
     */
    inline bool get_SMCAPTCTRLX_INP_SELX()
    {
        return SMCAPTCTRLX & (1u << 6u);
    }

    /**
     * Set SMCAPTCTRLX's INP_SELX bit.
     *
     * Input Select X
     */
    inline void set_SMCAPTCTRLX_INP_SELX()
    {
        SMCAPTCTRLX |= 1u << 6u;
    }

    /**
     * Clear SMCAPTCTRLX's INP_SELX bit.
     *
     * Input Select X
     */
    inline void clear_SMCAPTCTRLX_INP_SELX()
    {
        SMCAPTCTRLX &= ~(1u << 6u);
    }

    /**
     * Toggle SMCAPTCTRLX's INP_SELX bit.
     *
     * Input Select X
     */
    inline void toggle_SMCAPTCTRLX_INP_SELX()
    {
        SMCAPTCTRLX ^= 1u << 6u;
    }

    /**
     * Get SMCAPTCTRLX's EDGX1 field.
     *
     * Edge X 1
     */
    inline PWM1_SMCAPTCTRLX_EDGX1 get_SMCAPTCTRLX_EDGX1()
    {
        return PWM1_SMCAPTCTRLX_EDGX1((SMCAPTCTRLX >> 4u) & 0b11u);
    }

    /**
     * Set SMCAPTCTRLX's EDGX1 field.
     *
     * Edge X 1
     */
    inline void set_SMCAPTCTRLX_EDGX1(PWM1_SMCAPTCTRLX_EDGX1 value)
    {
        uint16_t curr = SMCAPTCTRLX;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        SMCAPTCTRLX = curr;
    }

    /**
     * Get SMCAPTCTRLX's EDGX0 field.
     *
     * Edge X 0
     */
    inline PWM1_SMCAPTCTRLX_EDGX0 get_SMCAPTCTRLX_EDGX0()
    {
        return PWM1_SMCAPTCTRLX_EDGX0((SMCAPTCTRLX >> 2u) & 0b11u);
    }

    /**
     * Set SMCAPTCTRLX's EDGX0 field.
     *
     * Edge X 0
     */
    inline void set_SMCAPTCTRLX_EDGX0(PWM1_SMCAPTCTRLX_EDGX0 value)
    {
        uint16_t curr = SMCAPTCTRLX;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        SMCAPTCTRLX = curr;
    }

    /**
     * Get SMCAPTCTRLX's ONESHOTX bit.
     *
     * One Shot Mode Aux
     */
    inline bool get_SMCAPTCTRLX_ONESHOTX()
    {
        return SMCAPTCTRLX & (1u << 1u);
    }

    /**
     * Set SMCAPTCTRLX's ONESHOTX bit.
     *
     * One Shot Mode Aux
     */
    inline void set_SMCAPTCTRLX_ONESHOTX()
    {
        SMCAPTCTRLX |= 1u << 1u;
    }

    /**
     * Clear SMCAPTCTRLX's ONESHOTX bit.
     *
     * One Shot Mode Aux
     */
    inline void clear_SMCAPTCTRLX_ONESHOTX()
    {
        SMCAPTCTRLX &= ~(1u << 1u);
    }

    /**
     * Toggle SMCAPTCTRLX's ONESHOTX bit.
     *
     * One Shot Mode Aux
     */
    inline void toggle_SMCAPTCTRLX_ONESHOTX()
    {
        SMCAPTCTRLX ^= 1u << 1u;
    }

    /**
     * Get SMCAPTCTRLX's ARMX bit.
     *
     * Arm X
     */
    inline bool get_SMCAPTCTRLX_ARMX()
    {
        return SMCAPTCTRLX & (1u << 0u);
    }

    /**
     * Set SMCAPTCTRLX's ARMX bit.
     *
     * Arm X
     */
    inline void set_SMCAPTCTRLX_ARMX()
    {
        SMCAPTCTRLX |= 1u << 0u;
    }

    /**
     * Clear SMCAPTCTRLX's ARMX bit.
     *
     * Arm X
     */
    inline void clear_SMCAPTCTRLX_ARMX()
    {
        SMCAPTCTRLX &= ~(1u << 0u);
    }

    /**
     * Toggle SMCAPTCTRLX's ARMX bit.
     *
     * Arm X
     */
    inline void toggle_SMCAPTCTRLX_ARMX()
    {
        SMCAPTCTRLX ^= 1u << 0u;
    }

    /**
     * Get all of SMCAPTCTRLX's bit fields.
     *
     * (read-write) Capture Control X Register
     */
    inline void get_SMCAPTCTRLX(uint8_t &CX1CNT, uint8_t &CX0CNT,
                                uint8_t &CFXWM, bool &EDGCNTX_EN,
                                bool &INP_SELX, PWM1_SMCAPTCTRLX_EDGX1 &EDGX1,
                                PWM1_SMCAPTCTRLX_EDGX0 &EDGX0, bool &ONESHOTX,
                                bool &ARMX)
    {
        uint16_t curr = SMCAPTCTRLX;

        CX1CNT = (curr >> 13u) & 0b111u;
        CX0CNT = (curr >> 10u) & 0b111u;
        CFXWM = (curr >> 8u) & 0b11u;
        EDGCNTX_EN = curr & (1u << 7u);
        INP_SELX = curr & (1u << 6u);
        EDGX1 = PWM1_SMCAPTCTRLX_EDGX1((curr >> 4u) & 0b11u);
        EDGX0 = PWM1_SMCAPTCTRLX_EDGX0((curr >> 2u) & 0b11u);
        ONESHOTX = curr & (1u << 1u);
        ARMX = curr & (1u << 0u);
    }

    /**
     * Set all of SMCAPTCTRLX's bit fields.
     *
     * (read-write) Capture Control X Register
     */
    inline void set_SMCAPTCTRLX(uint8_t CFXWM, bool EDGCNTX_EN, bool INP_SELX,
                                PWM1_SMCAPTCTRLX_EDGX1 EDGX1,
                                PWM1_SMCAPTCTRLX_EDGX0 EDGX0, bool ONESHOTX,
                                bool ARMX)
    {
        uint16_t curr = SMCAPTCTRLX;

        curr &= ~(0b11u << 8u);
        curr |= (CFXWM & 0b11u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (EDGCNTX_EN & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (INP_SELX & 0b1u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(EDGX1) & 0b11u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(EDGX0) & 0b11u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (ONESHOTX & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ARMX & 0b1u) << 0u;

        SMCAPTCTRLX = curr;
    }

    /**
     * Get SMCAPTCOMPX's EDGCNTX field.
     *
     * Edge Counter X
     */
    inline uint8_t get_SMCAPTCOMPX_EDGCNTX()
    {
        return (SMCAPTCOMPX >> 8u) & 0b11111111u;
    }

    /**
     * Get SMCAPTCOMPX's EDGCMPX field.
     *
     * Edge Compare X
     */
    inline uint8_t get_SMCAPTCOMPX_EDGCMPX()
    {
        return (SMCAPTCOMPX >> 0u) & 0b11111111u;
    }

    /**
     * Set SMCAPTCOMPX's EDGCMPX field.
     *
     * Edge Compare X
     */
    inline void set_SMCAPTCOMPX_EDGCMPX(uint8_t value)
    {
        uint16_t curr = SMCAPTCOMPX;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SMCAPTCOMPX = curr;
    }

    /**
     * Get all of SMCAPTCOMPX's bit fields.
     *
     * (read-write) Capture Compare X Register
     */
    inline void get_SMCAPTCOMPX(uint8_t &EDGCNTX, uint8_t &EDGCMPX)
    {
        uint16_t curr = SMCAPTCOMPX;

        EDGCNTX = (curr >> 8u) & 0b11111111u;
        EDGCMPX = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get SMCVAL0's CAPTVAL0 field.
     *
     * CAPTVAL0
     */
    inline uint16_t get_SMCVAL0_CAPTVAL0()
    {
        return (SMCVAL0 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get SMCVAL0CYC's CVAL0CYC field.
     *
     * CVAL0CYC
     */
    inline uint8_t get_SMCVAL0CYC_CVAL0CYC()
    {
        return (SMCVAL0CYC >> 0u) & 0b1111u;
    }

    /**
     * Get SMCVAL1's CAPTVAL1 field.
     *
     * CAPTVAL1
     */
    inline uint16_t get_SMCVAL1_CAPTVAL1()
    {
        return (SMCVAL1 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get SMCVAL1CYC's CVAL1CYC field.
     *
     * CVAL1CYC
     */
    inline uint8_t get_SMCVAL1CYC_CVAL1CYC()
    {
        return (SMCVAL1CYC >> 0u) & 0b1111u;
    }

    /**
     * Get SMCVAL2's CAPTVAL2 field.
     *
     * CAPTVAL2
     */
    inline uint16_t get_SMCVAL2_CAPTVAL2()
    {
        return (SMCVAL2 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get SMCVAL2CYC's CVAL2CYC field.
     *
     * CVAL2CYC
     */
    inline uint8_t get_SMCVAL2CYC_CVAL2CYC()
    {
        return (SMCVAL2CYC >> 0u) & 0b1111u;
    }

    /**
     * Get SMCVAL3's CAPTVAL3 field.
     *
     * CAPTVAL3
     */
    inline uint16_t get_SMCVAL3_CAPTVAL3()
    {
        return (SMCVAL3 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get SMCVAL3CYC's CVAL3CYC field.
     *
     * CVAL3CYC
     */
    inline uint8_t get_SMCVAL3CYC_CVAL3CYC()
    {
        return (SMCVAL3CYC >> 0u) & 0b1111u;
    }

    /**
     * Get SMCVAL4's CAPTVAL4 field.
     *
     * CAPTVAL4
     */
    inline uint16_t get_SMCVAL4_CAPTVAL4()
    {
        return (SMCVAL4 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get SMCVAL4CYC's CVAL4CYC field.
     *
     * CVAL4CYC
     */
    inline uint8_t get_SMCVAL4CYC_CVAL4CYC()
    {
        return (SMCVAL4CYC >> 0u) & 0b1111u;
    }

    /**
     * Get SMCVAL5's CAPTVAL5 field.
     *
     * CAPTVAL5
     */
    inline uint16_t get_SMCVAL5_CAPTVAL5()
    {
        return (SMCVAL5 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get SMCVAL5CYC's CVAL5CYC field.
     *
     * CVAL5CYC
     */
    inline uint8_t get_SMCVAL5CYC_CVAL5CYC()
    {
        return (SMCVAL5CYC >> 0u) & 0b1111u;
    }
};

static_assert(sizeof(SM_instance) == SM_instance::size);

}; // namespace MIMXRT1176::CM7
