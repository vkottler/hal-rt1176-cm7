/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/PDM_CTRL_1_DISEL.h"
#include "../enums/PDM_CTRL_2_QSEL.h"
#include "../enums/PDM_DC_CTRL_DCCONFIG0.h"
#include "../enums/PDM_DC_CTRL_DCCONFIG1.h"
#include "../enums/PDM_DC_CTRL_DCCONFIG2.h"
#include "../enums/PDM_DC_CTRL_DCCONFIG3.h"
#include "../enums/PDM_DC_CTRL_DCCONFIG4.h"
#include "../enums/PDM_DC_CTRL_DCCONFIG5.h"
#include "../enums/PDM_DC_CTRL_DCCONFIG6.h"
#include "../enums/PDM_DC_CTRL_DCCONFIG7.h"
#include "../enums/PDM_VAD0_CTRL_2_VADHPF.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * PDM
 */
struct [[gnu::packed]] pdm
{
    /* Constant attributes. */
    static constexpr std::size_t size = 172; /*!< pdm's size in bytes. */

    /* Fields. */
    uint32_t CTRL_1; /*!< (read-write) PDM Control register 1 */
    uint32_t CTRL_2; /*!< (read-write) PDM Control register 2 */
    uint32_t STAT;   /*!< (read-write) PDM Status register */
    const uint32_t reserved_padding0 = {};
    uint32_t FIFO_CTRL; /*!< (read-write) PDM FIFO Control register */
    uint32_t FIFO_STAT; /*!< (read-write) PDM FIFO Status register */
    static constexpr std::size_t reserved_padding1_length = 3;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    static constexpr std::size_t DATACH_length = 8;
    uint32_t
        DATACH[DATACH_length]; /*!< (read-write) PDM Output Result Register */
    static constexpr std::size_t reserved_padding2_length = 8;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    uint32_t DC_CTRL; /*!< (read-write) PDM DC Remover Control register */
    static constexpr std::size_t reserved_padding3_length = 3;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    uint32_t RANGE_CTRL; /*!< (read-write) PDM Range Control register */
    const uint32_t reserved_padding4 = {};
    uint32_t RANGE_STAT; /*!< (read-write) PDM Range Status register */
    static constexpr std::size_t reserved_padding5_length = 4;
    const uint32_t reserved_padding5[reserved_padding5_length] = {};
    uint32_t VAD0_CTRL_1;  /*!< (read-write) Voice Activity Detector 0 Control
                              register */
    uint32_t VAD0_CTRL_2;  /*!< (read-write) Voice Activity Detector 0 Control
                              register */
    uint32_t VAD0_STAT;    /*!< (read-write) Voice Activity Detector 0 Status
                              register */
    uint32_t VAD0_SCONFIG; /*!< (read-write) Voice Activity Detector 0 Signal
                              Configuration */
    uint32_t VAD0_NCONFIG; /*!< (read-write) Voice Activity Detector 0 Noise
                              Configuration */
    uint32_t
        VAD0_NDATA; /*!< (read-write) Voice Activity Detector 0 Noise Data */
    uint32_t VAD0_ZCD; /*!< (read-write) Voice Activity Detector 0
                          Zero-Crossing Detector */

    /* Methods. */

    /**
     * Get CTRL_1's MDIS bit.
     *
     * Module Disable
     */
    inline bool get_CTRL_1_MDIS() volatile
    {
        return CTRL_1 & (1u << 31u);
    }

    /**
     * Set CTRL_1's MDIS bit.
     *
     * Module Disable
     */
    inline void set_CTRL_1_MDIS() volatile
    {
        CTRL_1 |= 1u << 31u;
    }

    /**
     * Clear CTRL_1's MDIS bit.
     *
     * Module Disable
     */
    inline void clear_CTRL_1_MDIS() volatile
    {
        CTRL_1 &= ~(1u << 31u);
    }

    /**
     * Toggle CTRL_1's MDIS bit.
     *
     * Module Disable
     */
    inline void toggle_CTRL_1_MDIS() volatile
    {
        CTRL_1 ^= 1u << 31u;
    }

    /**
     * Get CTRL_1's DOZEN bit.
     *
     * DOZE enable
     */
    inline bool get_CTRL_1_DOZEN() volatile
    {
        return CTRL_1 & (1u << 30u);
    }

    /**
     * Set CTRL_1's DOZEN bit.
     *
     * DOZE enable
     */
    inline void set_CTRL_1_DOZEN() volatile
    {
        CTRL_1 |= 1u << 30u;
    }

    /**
     * Clear CTRL_1's DOZEN bit.
     *
     * DOZE enable
     */
    inline void clear_CTRL_1_DOZEN() volatile
    {
        CTRL_1 &= ~(1u << 30u);
    }

    /**
     * Toggle CTRL_1's DOZEN bit.
     *
     * DOZE enable
     */
    inline void toggle_CTRL_1_DOZEN() volatile
    {
        CTRL_1 ^= 1u << 30u;
    }

    /**
     * Get CTRL_1's PDMIEN bit.
     *
     * PDM Enable
     */
    inline bool get_CTRL_1_PDMIEN() volatile
    {
        return CTRL_1 & (1u << 29u);
    }

    /**
     * Set CTRL_1's PDMIEN bit.
     *
     * PDM Enable
     */
    inline void set_CTRL_1_PDMIEN() volatile
    {
        CTRL_1 |= 1u << 29u;
    }

    /**
     * Clear CTRL_1's PDMIEN bit.
     *
     * PDM Enable
     */
    inline void clear_CTRL_1_PDMIEN() volatile
    {
        CTRL_1 &= ~(1u << 29u);
    }

    /**
     * Toggle CTRL_1's PDMIEN bit.
     *
     * PDM Enable
     */
    inline void toggle_CTRL_1_PDMIEN() volatile
    {
        CTRL_1 ^= 1u << 29u;
    }

    /**
     * Get CTRL_1's DBG bit.
     *
     * Debug Mode
     */
    inline bool get_CTRL_1_DBG() volatile
    {
        return CTRL_1 & (1u << 28u);
    }

    /**
     * Set CTRL_1's DBG bit.
     *
     * Debug Mode
     */
    inline void set_CTRL_1_DBG() volatile
    {
        CTRL_1 |= 1u << 28u;
    }

    /**
     * Clear CTRL_1's DBG bit.
     *
     * Debug Mode
     */
    inline void clear_CTRL_1_DBG() volatile
    {
        CTRL_1 &= ~(1u << 28u);
    }

    /**
     * Toggle CTRL_1's DBG bit.
     *
     * Debug Mode
     */
    inline void toggle_CTRL_1_DBG() volatile
    {
        CTRL_1 ^= 1u << 28u;
    }

    /**
     * Get CTRL_1's SRES bit.
     *
     * Software-reset bit
     */
    inline bool get_CTRL_1_SRES() volatile
    {
        return CTRL_1 & (1u << 27u);
    }

    /**
     * Set CTRL_1's SRES bit.
     *
     * Software-reset bit
     */
    inline void set_CTRL_1_SRES() volatile
    {
        CTRL_1 |= 1u << 27u;
    }

    /**
     * Clear CTRL_1's SRES bit.
     *
     * Software-reset bit
     */
    inline void clear_CTRL_1_SRES() volatile
    {
        CTRL_1 &= ~(1u << 27u);
    }

    /**
     * Toggle CTRL_1's SRES bit.
     *
     * Software-reset bit
     */
    inline void toggle_CTRL_1_SRES() volatile
    {
        CTRL_1 ^= 1u << 27u;
    }

    /**
     * Get CTRL_1's DBGE bit.
     *
     * Module Enable in Debug
     */
    inline bool get_CTRL_1_DBGE() volatile
    {
        return CTRL_1 & (1u << 26u);
    }

    /**
     * Set CTRL_1's DBGE bit.
     *
     * Module Enable in Debug
     */
    inline void set_CTRL_1_DBGE() volatile
    {
        CTRL_1 |= 1u << 26u;
    }

    /**
     * Clear CTRL_1's DBGE bit.
     *
     * Module Enable in Debug
     */
    inline void clear_CTRL_1_DBGE() volatile
    {
        CTRL_1 &= ~(1u << 26u);
    }

    /**
     * Toggle CTRL_1's DBGE bit.
     *
     * Module Enable in Debug
     */
    inline void toggle_CTRL_1_DBGE() volatile
    {
        CTRL_1 ^= 1u << 26u;
    }

    /**
     * Get CTRL_1's DISEL field.
     *
     * DMA Interrupt Selection
     */
    inline PDM_CTRL_1_DISEL get_CTRL_1_DISEL() volatile
    {
        return PDM_CTRL_1_DISEL((CTRL_1 >> 24u) & 0b11u);
    }

    /**
     * Set CTRL_1's DISEL field.
     *
     * DMA Interrupt Selection
     */
    inline void set_CTRL_1_DISEL(PDM_CTRL_1_DISEL value) volatile
    {
        uint32_t curr = CTRL_1;

        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(value) & 0b11u) << 24u;

        CTRL_1 = curr;
    }

    /**
     * Get CTRL_1's ERREN bit.
     *
     * Error Interruption Enable
     */
    inline bool get_CTRL_1_ERREN() volatile
    {
        return CTRL_1 & (1u << 23u);
    }

    /**
     * Set CTRL_1's ERREN bit.
     *
     * Error Interruption Enable
     */
    inline void set_CTRL_1_ERREN() volatile
    {
        CTRL_1 |= 1u << 23u;
    }

    /**
     * Clear CTRL_1's ERREN bit.
     *
     * Error Interruption Enable
     */
    inline void clear_CTRL_1_ERREN() volatile
    {
        CTRL_1 &= ~(1u << 23u);
    }

    /**
     * Toggle CTRL_1's ERREN bit.
     *
     * Error Interruption Enable
     */
    inline void toggle_CTRL_1_ERREN() volatile
    {
        CTRL_1 ^= 1u << 23u;
    }

    /**
     * Get CTRL_1's CH7EN bit.
     *
     * Channel 7 Enable
     */
    inline bool get_CTRL_1_CH7EN() volatile
    {
        return CTRL_1 & (1u << 7u);
    }

    /**
     * Set CTRL_1's CH7EN bit.
     *
     * Channel 7 Enable
     */
    inline void set_CTRL_1_CH7EN() volatile
    {
        CTRL_1 |= 1u << 7u;
    }

    /**
     * Clear CTRL_1's CH7EN bit.
     *
     * Channel 7 Enable
     */
    inline void clear_CTRL_1_CH7EN() volatile
    {
        CTRL_1 &= ~(1u << 7u);
    }

    /**
     * Toggle CTRL_1's CH7EN bit.
     *
     * Channel 7 Enable
     */
    inline void toggle_CTRL_1_CH7EN() volatile
    {
        CTRL_1 ^= 1u << 7u;
    }

    /**
     * Get CTRL_1's CH6EN bit.
     *
     * Channel 6 Enable
     */
    inline bool get_CTRL_1_CH6EN() volatile
    {
        return CTRL_1 & (1u << 6u);
    }

    /**
     * Set CTRL_1's CH6EN bit.
     *
     * Channel 6 Enable
     */
    inline void set_CTRL_1_CH6EN() volatile
    {
        CTRL_1 |= 1u << 6u;
    }

    /**
     * Clear CTRL_1's CH6EN bit.
     *
     * Channel 6 Enable
     */
    inline void clear_CTRL_1_CH6EN() volatile
    {
        CTRL_1 &= ~(1u << 6u);
    }

    /**
     * Toggle CTRL_1's CH6EN bit.
     *
     * Channel 6 Enable
     */
    inline void toggle_CTRL_1_CH6EN() volatile
    {
        CTRL_1 ^= 1u << 6u;
    }

    /**
     * Get CTRL_1's CH5EN bit.
     *
     * Channel 5 Enable
     */
    inline bool get_CTRL_1_CH5EN() volatile
    {
        return CTRL_1 & (1u << 5u);
    }

    /**
     * Set CTRL_1's CH5EN bit.
     *
     * Channel 5 Enable
     */
    inline void set_CTRL_1_CH5EN() volatile
    {
        CTRL_1 |= 1u << 5u;
    }

    /**
     * Clear CTRL_1's CH5EN bit.
     *
     * Channel 5 Enable
     */
    inline void clear_CTRL_1_CH5EN() volatile
    {
        CTRL_1 &= ~(1u << 5u);
    }

    /**
     * Toggle CTRL_1's CH5EN bit.
     *
     * Channel 5 Enable
     */
    inline void toggle_CTRL_1_CH5EN() volatile
    {
        CTRL_1 ^= 1u << 5u;
    }

    /**
     * Get CTRL_1's CH4EN bit.
     *
     * Channel 4 Enable
     */
    inline bool get_CTRL_1_CH4EN() volatile
    {
        return CTRL_1 & (1u << 4u);
    }

    /**
     * Set CTRL_1's CH4EN bit.
     *
     * Channel 4 Enable
     */
    inline void set_CTRL_1_CH4EN() volatile
    {
        CTRL_1 |= 1u << 4u;
    }

    /**
     * Clear CTRL_1's CH4EN bit.
     *
     * Channel 4 Enable
     */
    inline void clear_CTRL_1_CH4EN() volatile
    {
        CTRL_1 &= ~(1u << 4u);
    }

    /**
     * Toggle CTRL_1's CH4EN bit.
     *
     * Channel 4 Enable
     */
    inline void toggle_CTRL_1_CH4EN() volatile
    {
        CTRL_1 ^= 1u << 4u;
    }

    /**
     * Get CTRL_1's CH3EN bit.
     *
     * Channel 3 Enable
     */
    inline bool get_CTRL_1_CH3EN() volatile
    {
        return CTRL_1 & (1u << 3u);
    }

    /**
     * Set CTRL_1's CH3EN bit.
     *
     * Channel 3 Enable
     */
    inline void set_CTRL_1_CH3EN() volatile
    {
        CTRL_1 |= 1u << 3u;
    }

    /**
     * Clear CTRL_1's CH3EN bit.
     *
     * Channel 3 Enable
     */
    inline void clear_CTRL_1_CH3EN() volatile
    {
        CTRL_1 &= ~(1u << 3u);
    }

    /**
     * Toggle CTRL_1's CH3EN bit.
     *
     * Channel 3 Enable
     */
    inline void toggle_CTRL_1_CH3EN() volatile
    {
        CTRL_1 ^= 1u << 3u;
    }

    /**
     * Get CTRL_1's CH2EN bit.
     *
     * Channel 2 Enable
     */
    inline bool get_CTRL_1_CH2EN() volatile
    {
        return CTRL_1 & (1u << 2u);
    }

    /**
     * Set CTRL_1's CH2EN bit.
     *
     * Channel 2 Enable
     */
    inline void set_CTRL_1_CH2EN() volatile
    {
        CTRL_1 |= 1u << 2u;
    }

    /**
     * Clear CTRL_1's CH2EN bit.
     *
     * Channel 2 Enable
     */
    inline void clear_CTRL_1_CH2EN() volatile
    {
        CTRL_1 &= ~(1u << 2u);
    }

    /**
     * Toggle CTRL_1's CH2EN bit.
     *
     * Channel 2 Enable
     */
    inline void toggle_CTRL_1_CH2EN() volatile
    {
        CTRL_1 ^= 1u << 2u;
    }

    /**
     * Get CTRL_1's CH1EN bit.
     *
     * Channel 1 Enable
     */
    inline bool get_CTRL_1_CH1EN() volatile
    {
        return CTRL_1 & (1u << 1u);
    }

    /**
     * Set CTRL_1's CH1EN bit.
     *
     * Channel 1 Enable
     */
    inline void set_CTRL_1_CH1EN() volatile
    {
        CTRL_1 |= 1u << 1u;
    }

    /**
     * Clear CTRL_1's CH1EN bit.
     *
     * Channel 1 Enable
     */
    inline void clear_CTRL_1_CH1EN() volatile
    {
        CTRL_1 &= ~(1u << 1u);
    }

    /**
     * Toggle CTRL_1's CH1EN bit.
     *
     * Channel 1 Enable
     */
    inline void toggle_CTRL_1_CH1EN() volatile
    {
        CTRL_1 ^= 1u << 1u;
    }

    /**
     * Get CTRL_1's CH0EN bit.
     *
     * Channel 0 Enable
     */
    inline bool get_CTRL_1_CH0EN() volatile
    {
        return CTRL_1 & (1u << 0u);
    }

    /**
     * Set CTRL_1's CH0EN bit.
     *
     * Channel 0 Enable
     */
    inline void set_CTRL_1_CH0EN() volatile
    {
        CTRL_1 |= 1u << 0u;
    }

    /**
     * Clear CTRL_1's CH0EN bit.
     *
     * Channel 0 Enable
     */
    inline void clear_CTRL_1_CH0EN() volatile
    {
        CTRL_1 &= ~(1u << 0u);
    }

    /**
     * Toggle CTRL_1's CH0EN bit.
     *
     * Channel 0 Enable
     */
    inline void toggle_CTRL_1_CH0EN() volatile
    {
        CTRL_1 ^= 1u << 0u;
    }

    /**
     * Get all of CTRL_1's bit fields.
     *
     * (read-write) PDM Control register 1
     */
    inline void get_CTRL_1(bool &MDIS, bool &DOZEN, bool &PDMIEN, bool &DBG,
                           bool &SRES, bool &DBGE, PDM_CTRL_1_DISEL &DISEL,
                           bool &ERREN, bool &CH7EN, bool &CH6EN, bool &CH5EN,
                           bool &CH4EN, bool &CH3EN, bool &CH2EN, bool &CH1EN,
                           bool &CH0EN) volatile
    {
        uint32_t curr = CTRL_1;

        MDIS = curr & (1u << 31u);
        DOZEN = curr & (1u << 30u);
        PDMIEN = curr & (1u << 29u);
        DBG = curr & (1u << 28u);
        SRES = curr & (1u << 27u);
        DBGE = curr & (1u << 26u);
        DISEL = PDM_CTRL_1_DISEL((curr >> 24u) & 0b11u);
        ERREN = curr & (1u << 23u);
        CH7EN = curr & (1u << 7u);
        CH6EN = curr & (1u << 6u);
        CH5EN = curr & (1u << 5u);
        CH4EN = curr & (1u << 4u);
        CH3EN = curr & (1u << 3u);
        CH2EN = curr & (1u << 2u);
        CH1EN = curr & (1u << 1u);
        CH0EN = curr & (1u << 0u);
    }

    /**
     * Set all of CTRL_1's bit fields.
     *
     * (read-write) PDM Control register 1
     */
    inline void set_CTRL_1(bool MDIS, bool DOZEN, bool PDMIEN, bool DBG,
                           bool SRES, bool DBGE, PDM_CTRL_1_DISEL DISEL,
                           bool ERREN, bool CH7EN, bool CH6EN, bool CH5EN,
                           bool CH4EN, bool CH3EN, bool CH2EN, bool CH1EN,
                           bool CH0EN) volatile
    {
        uint32_t curr = CTRL_1;

        curr &= ~(0b1u << 31u);
        curr |= (MDIS & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (DOZEN & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (PDMIEN & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (DBG & 0b1u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (SRES & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (DBGE & 0b1u) << 26u;
        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(DISEL) & 0b11u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (ERREN & 0b1u) << 23u;
        curr &= ~(0b1u << 7u);
        curr |= (CH7EN & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CH6EN & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (CH5EN & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (CH4EN & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (CH3EN & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CH2EN & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CH1EN & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CH0EN & 0b1u) << 0u;

        CTRL_1 = curr;
    }

    /**
     * Get CTRL_2's QSEL field.
     *
     * Quality Mode
     */
    inline PDM_CTRL_2_QSEL get_CTRL_2_QSEL() volatile
    {
        return PDM_CTRL_2_QSEL((CTRL_2 >> 25u) & 0b111u);
    }

    /**
     * Set CTRL_2's QSEL field.
     *
     * Quality Mode
     */
    inline void set_CTRL_2_QSEL(PDM_CTRL_2_QSEL value) volatile
    {
        uint32_t curr = CTRL_2;

        curr &= ~(0b111u << 25u);
        curr |= (std::to_underlying(value) & 0b111u) << 25u;

        CTRL_2 = curr;
    }

    /**
     * Get CTRL_2's CICOSR field.
     *
     * CIC Decimation Rate
     */
    inline uint8_t get_CTRL_2_CICOSR() volatile
    {
        return (CTRL_2 >> 16u) & 0b1111u;
    }

    /**
     * Set CTRL_2's CICOSR field.
     *
     * CIC Decimation Rate
     */
    inline void set_CTRL_2_CICOSR(uint8_t value) volatile
    {
        uint32_t curr = CTRL_2;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        CTRL_2 = curr;
    }

    /**
     * Get CTRL_2's CLKDIV field.
     *
     * Clock Divider
     */
    inline uint8_t get_CTRL_2_CLKDIV() volatile
    {
        return (CTRL_2 >> 0u) & 0b11111111u;
    }

    /**
     * Set CTRL_2's CLKDIV field.
     *
     * Clock Divider
     */
    inline void set_CTRL_2_CLKDIV(uint8_t value) volatile
    {
        uint32_t curr = CTRL_2;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        CTRL_2 = curr;
    }

    /**
     * Get all of CTRL_2's bit fields.
     *
     * (read-write) PDM Control register 2
     */
    inline void get_CTRL_2(PDM_CTRL_2_QSEL &QSEL, uint8_t &CICOSR,
                           uint8_t &CLKDIV) volatile
    {
        uint32_t curr = CTRL_2;

        QSEL = PDM_CTRL_2_QSEL((curr >> 25u) & 0b111u);
        CICOSR = (curr >> 16u) & 0b1111u;
        CLKDIV = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of CTRL_2's bit fields.
     *
     * (read-write) PDM Control register 2
     */
    inline void set_CTRL_2(PDM_CTRL_2_QSEL QSEL, uint8_t CICOSR,
                           uint8_t CLKDIV) volatile
    {
        uint32_t curr = CTRL_2;

        curr &= ~(0b111u << 25u);
        curr |= (std::to_underlying(QSEL) & 0b111u) << 25u;
        curr &= ~(0b1111u << 16u);
        curr |= (CICOSR & 0b1111u) << 16u;
        curr &= ~(0b11111111u << 0u);
        curr |= (CLKDIV & 0b11111111u) << 0u;

        CTRL_2 = curr;
    }

    /**
     * Get STAT's BSY_FIL bit.
     *
     * Busy Flag
     */
    inline bool get_STAT_BSY_FIL() volatile
    {
        return STAT & (1u << 31u);
    }

    /**
     * Get STAT's FIR_RDY bit.
     *
     * Filter Data Ready
     */
    inline bool get_STAT_FIR_RDY() volatile
    {
        return STAT & (1u << 30u);
    }

    /**
     * Get STAT's LOWFREQF bit.
     *
     * Low Frequency Flag
     */
    inline bool get_STAT_LOWFREQF() volatile
    {
        return STAT & (1u << 29u);
    }

    /**
     * Set STAT's LOWFREQF bit.
     *
     * Low Frequency Flag
     */
    inline void set_STAT_LOWFREQF() volatile
    {
        STAT |= 1u << 29u;
    }

    /**
     * Clear STAT's LOWFREQF bit.
     *
     * Low Frequency Flag
     */
    inline void clear_STAT_LOWFREQF() volatile
    {
        STAT &= ~(1u << 29u);
    }

    /**
     * Toggle STAT's LOWFREQF bit.
     *
     * Low Frequency Flag
     */
    inline void toggle_STAT_LOWFREQF() volatile
    {
        STAT ^= 1u << 29u;
    }

    /**
     * Get STAT's CH7F bit.
     *
     * Channel 7 Output Data Flag
     */
    inline bool get_STAT_CH7F() volatile
    {
        return STAT & (1u << 7u);
    }

    /**
     * Set STAT's CH7F bit.
     *
     * Channel 7 Output Data Flag
     */
    inline void set_STAT_CH7F() volatile
    {
        STAT |= 1u << 7u;
    }

    /**
     * Clear STAT's CH7F bit.
     *
     * Channel 7 Output Data Flag
     */
    inline void clear_STAT_CH7F() volatile
    {
        STAT &= ~(1u << 7u);
    }

    /**
     * Toggle STAT's CH7F bit.
     *
     * Channel 7 Output Data Flag
     */
    inline void toggle_STAT_CH7F() volatile
    {
        STAT ^= 1u << 7u;
    }

    /**
     * Get STAT's CH6F bit.
     *
     * Channel 6 Output Data Flag
     */
    inline bool get_STAT_CH6F() volatile
    {
        return STAT & (1u << 6u);
    }

    /**
     * Set STAT's CH6F bit.
     *
     * Channel 6 Output Data Flag
     */
    inline void set_STAT_CH6F() volatile
    {
        STAT |= 1u << 6u;
    }

    /**
     * Clear STAT's CH6F bit.
     *
     * Channel 6 Output Data Flag
     */
    inline void clear_STAT_CH6F() volatile
    {
        STAT &= ~(1u << 6u);
    }

    /**
     * Toggle STAT's CH6F bit.
     *
     * Channel 6 Output Data Flag
     */
    inline void toggle_STAT_CH6F() volatile
    {
        STAT ^= 1u << 6u;
    }

    /**
     * Get STAT's CH5F bit.
     *
     * Channel 5 Output Data Flag
     */
    inline bool get_STAT_CH5F() volatile
    {
        return STAT & (1u << 5u);
    }

    /**
     * Set STAT's CH5F bit.
     *
     * Channel 5 Output Data Flag
     */
    inline void set_STAT_CH5F() volatile
    {
        STAT |= 1u << 5u;
    }

    /**
     * Clear STAT's CH5F bit.
     *
     * Channel 5 Output Data Flag
     */
    inline void clear_STAT_CH5F() volatile
    {
        STAT &= ~(1u << 5u);
    }

    /**
     * Toggle STAT's CH5F bit.
     *
     * Channel 5 Output Data Flag
     */
    inline void toggle_STAT_CH5F() volatile
    {
        STAT ^= 1u << 5u;
    }

    /**
     * Get STAT's CH4F bit.
     *
     * Channel 4 Output Data Flag
     */
    inline bool get_STAT_CH4F() volatile
    {
        return STAT & (1u << 4u);
    }

    /**
     * Set STAT's CH4F bit.
     *
     * Channel 4 Output Data Flag
     */
    inline void set_STAT_CH4F() volatile
    {
        STAT |= 1u << 4u;
    }

    /**
     * Clear STAT's CH4F bit.
     *
     * Channel 4 Output Data Flag
     */
    inline void clear_STAT_CH4F() volatile
    {
        STAT &= ~(1u << 4u);
    }

    /**
     * Toggle STAT's CH4F bit.
     *
     * Channel 4 Output Data Flag
     */
    inline void toggle_STAT_CH4F() volatile
    {
        STAT ^= 1u << 4u;
    }

    /**
     * Get STAT's CH3F bit.
     *
     * Channel 3 Output Data Flag
     */
    inline bool get_STAT_CH3F() volatile
    {
        return STAT & (1u << 3u);
    }

    /**
     * Set STAT's CH3F bit.
     *
     * Channel 3 Output Data Flag
     */
    inline void set_STAT_CH3F() volatile
    {
        STAT |= 1u << 3u;
    }

    /**
     * Clear STAT's CH3F bit.
     *
     * Channel 3 Output Data Flag
     */
    inline void clear_STAT_CH3F() volatile
    {
        STAT &= ~(1u << 3u);
    }

    /**
     * Toggle STAT's CH3F bit.
     *
     * Channel 3 Output Data Flag
     */
    inline void toggle_STAT_CH3F() volatile
    {
        STAT ^= 1u << 3u;
    }

    /**
     * Get STAT's CH2F bit.
     *
     * Channel 2 Output Data Flag
     */
    inline bool get_STAT_CH2F() volatile
    {
        return STAT & (1u << 2u);
    }

    /**
     * Set STAT's CH2F bit.
     *
     * Channel 2 Output Data Flag
     */
    inline void set_STAT_CH2F() volatile
    {
        STAT |= 1u << 2u;
    }

    /**
     * Clear STAT's CH2F bit.
     *
     * Channel 2 Output Data Flag
     */
    inline void clear_STAT_CH2F() volatile
    {
        STAT &= ~(1u << 2u);
    }

    /**
     * Toggle STAT's CH2F bit.
     *
     * Channel 2 Output Data Flag
     */
    inline void toggle_STAT_CH2F() volatile
    {
        STAT ^= 1u << 2u;
    }

    /**
     * Get STAT's CH1F bit.
     *
     * Channel 1 Output Data Flag
     */
    inline bool get_STAT_CH1F() volatile
    {
        return STAT & (1u << 1u);
    }

    /**
     * Set STAT's CH1F bit.
     *
     * Channel 1 Output Data Flag
     */
    inline void set_STAT_CH1F() volatile
    {
        STAT |= 1u << 1u;
    }

    /**
     * Clear STAT's CH1F bit.
     *
     * Channel 1 Output Data Flag
     */
    inline void clear_STAT_CH1F() volatile
    {
        STAT &= ~(1u << 1u);
    }

    /**
     * Toggle STAT's CH1F bit.
     *
     * Channel 1 Output Data Flag
     */
    inline void toggle_STAT_CH1F() volatile
    {
        STAT ^= 1u << 1u;
    }

    /**
     * Get STAT's CH0F bit.
     *
     * Channel 0 Output Data Flag
     */
    inline bool get_STAT_CH0F() volatile
    {
        return STAT & (1u << 0u);
    }

    /**
     * Set STAT's CH0F bit.
     *
     * Channel 0 Output Data Flag
     */
    inline void set_STAT_CH0F() volatile
    {
        STAT |= 1u << 0u;
    }

    /**
     * Clear STAT's CH0F bit.
     *
     * Channel 0 Output Data Flag
     */
    inline void clear_STAT_CH0F() volatile
    {
        STAT &= ~(1u << 0u);
    }

    /**
     * Toggle STAT's CH0F bit.
     *
     * Channel 0 Output Data Flag
     */
    inline void toggle_STAT_CH0F() volatile
    {
        STAT ^= 1u << 0u;
    }

    /**
     * Get all of STAT's bit fields.
     *
     * (read-write) PDM Status register
     */
    inline void get_STAT(bool &BSY_FIL, bool &FIR_RDY, bool &LOWFREQF,
                         bool &CH7F, bool &CH6F, bool &CH5F, bool &CH4F,
                         bool &CH3F, bool &CH2F, bool &CH1F,
                         bool &CH0F) volatile
    {
        uint32_t curr = STAT;

        BSY_FIL = curr & (1u << 31u);
        FIR_RDY = curr & (1u << 30u);
        LOWFREQF = curr & (1u << 29u);
        CH7F = curr & (1u << 7u);
        CH6F = curr & (1u << 6u);
        CH5F = curr & (1u << 5u);
        CH4F = curr & (1u << 4u);
        CH3F = curr & (1u << 3u);
        CH2F = curr & (1u << 2u);
        CH1F = curr & (1u << 1u);
        CH0F = curr & (1u << 0u);
    }

    /**
     * Set all of STAT's bit fields.
     *
     * (read-write) PDM Status register
     */
    inline void set_STAT(bool LOWFREQF, bool CH7F, bool CH6F, bool CH5F,
                         bool CH4F, bool CH3F, bool CH2F, bool CH1F,
                         bool CH0F) volatile
    {
        uint32_t curr = STAT;

        curr &= ~(0b1u << 29u);
        curr |= (LOWFREQF & 0b1u) << 29u;
        curr &= ~(0b1u << 7u);
        curr |= (CH7F & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CH6F & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (CH5F & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (CH4F & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (CH3F & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CH2F & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CH1F & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CH0F & 0b1u) << 0u;

        STAT = curr;
    }

    /**
     * Get FIFO_CTRL's FIFOWMK field.
     *
     * FIFO Watermark Control
     */
    inline uint8_t get_FIFO_CTRL_FIFOWMK() volatile
    {
        return (FIFO_CTRL >> 0u) & 0b111u;
    }

    /**
     * Set FIFO_CTRL's FIFOWMK field.
     *
     * FIFO Watermark Control
     */
    inline void set_FIFO_CTRL_FIFOWMK(uint8_t value) volatile
    {
        uint32_t curr = FIFO_CTRL;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        FIFO_CTRL = curr;
    }

    /**
     * Get FIFO_STAT's FIFOUND7 bit.
     *
     * FIFO Underflow Exception flag for Channel 7
     */
    inline bool get_FIFO_STAT_FIFOUND7() volatile
    {
        return FIFO_STAT & (1u << 15u);
    }

    /**
     * Set FIFO_STAT's FIFOUND7 bit.
     *
     * FIFO Underflow Exception flag for Channel 7
     */
    inline void set_FIFO_STAT_FIFOUND7() volatile
    {
        FIFO_STAT |= 1u << 15u;
    }

    /**
     * Clear FIFO_STAT's FIFOUND7 bit.
     *
     * FIFO Underflow Exception flag for Channel 7
     */
    inline void clear_FIFO_STAT_FIFOUND7() volatile
    {
        FIFO_STAT &= ~(1u << 15u);
    }

    /**
     * Toggle FIFO_STAT's FIFOUND7 bit.
     *
     * FIFO Underflow Exception flag for Channel 7
     */
    inline void toggle_FIFO_STAT_FIFOUND7() volatile
    {
        FIFO_STAT ^= 1u << 15u;
    }

    /**
     * Get FIFO_STAT's FIFOUND6 bit.
     *
     * FIFO Underflow Exception flag for Channel 6
     */
    inline bool get_FIFO_STAT_FIFOUND6() volatile
    {
        return FIFO_STAT & (1u << 14u);
    }

    /**
     * Set FIFO_STAT's FIFOUND6 bit.
     *
     * FIFO Underflow Exception flag for Channel 6
     */
    inline void set_FIFO_STAT_FIFOUND6() volatile
    {
        FIFO_STAT |= 1u << 14u;
    }

    /**
     * Clear FIFO_STAT's FIFOUND6 bit.
     *
     * FIFO Underflow Exception flag for Channel 6
     */
    inline void clear_FIFO_STAT_FIFOUND6() volatile
    {
        FIFO_STAT &= ~(1u << 14u);
    }

    /**
     * Toggle FIFO_STAT's FIFOUND6 bit.
     *
     * FIFO Underflow Exception flag for Channel 6
     */
    inline void toggle_FIFO_STAT_FIFOUND6() volatile
    {
        FIFO_STAT ^= 1u << 14u;
    }

    /**
     * Get FIFO_STAT's FIFOUND5 bit.
     *
     * FIFO Underflow Exception flag for Channel 5
     */
    inline bool get_FIFO_STAT_FIFOUND5() volatile
    {
        return FIFO_STAT & (1u << 13u);
    }

    /**
     * Set FIFO_STAT's FIFOUND5 bit.
     *
     * FIFO Underflow Exception flag for Channel 5
     */
    inline void set_FIFO_STAT_FIFOUND5() volatile
    {
        FIFO_STAT |= 1u << 13u;
    }

    /**
     * Clear FIFO_STAT's FIFOUND5 bit.
     *
     * FIFO Underflow Exception flag for Channel 5
     */
    inline void clear_FIFO_STAT_FIFOUND5() volatile
    {
        FIFO_STAT &= ~(1u << 13u);
    }

    /**
     * Toggle FIFO_STAT's FIFOUND5 bit.
     *
     * FIFO Underflow Exception flag for Channel 5
     */
    inline void toggle_FIFO_STAT_FIFOUND5() volatile
    {
        FIFO_STAT ^= 1u << 13u;
    }

    /**
     * Get FIFO_STAT's FIFOUND4 bit.
     *
     * FIFO Underflow Exception flag for Channel 4
     */
    inline bool get_FIFO_STAT_FIFOUND4() volatile
    {
        return FIFO_STAT & (1u << 12u);
    }

    /**
     * Set FIFO_STAT's FIFOUND4 bit.
     *
     * FIFO Underflow Exception flag for Channel 4
     */
    inline void set_FIFO_STAT_FIFOUND4() volatile
    {
        FIFO_STAT |= 1u << 12u;
    }

    /**
     * Clear FIFO_STAT's FIFOUND4 bit.
     *
     * FIFO Underflow Exception flag for Channel 4
     */
    inline void clear_FIFO_STAT_FIFOUND4() volatile
    {
        FIFO_STAT &= ~(1u << 12u);
    }

    /**
     * Toggle FIFO_STAT's FIFOUND4 bit.
     *
     * FIFO Underflow Exception flag for Channel 4
     */
    inline void toggle_FIFO_STAT_FIFOUND4() volatile
    {
        FIFO_STAT ^= 1u << 12u;
    }

    /**
     * Get FIFO_STAT's FIFOUND3 bit.
     *
     * FIFO Underflow Exception flag for Channel 3
     */
    inline bool get_FIFO_STAT_FIFOUND3() volatile
    {
        return FIFO_STAT & (1u << 11u);
    }

    /**
     * Set FIFO_STAT's FIFOUND3 bit.
     *
     * FIFO Underflow Exception flag for Channel 3
     */
    inline void set_FIFO_STAT_FIFOUND3() volatile
    {
        FIFO_STAT |= 1u << 11u;
    }

    /**
     * Clear FIFO_STAT's FIFOUND3 bit.
     *
     * FIFO Underflow Exception flag for Channel 3
     */
    inline void clear_FIFO_STAT_FIFOUND3() volatile
    {
        FIFO_STAT &= ~(1u << 11u);
    }

    /**
     * Toggle FIFO_STAT's FIFOUND3 bit.
     *
     * FIFO Underflow Exception flag for Channel 3
     */
    inline void toggle_FIFO_STAT_FIFOUND3() volatile
    {
        FIFO_STAT ^= 1u << 11u;
    }

    /**
     * Get FIFO_STAT's FIFOUND2 bit.
     *
     * FIFO Underflow Exception flag for Channel 2
     */
    inline bool get_FIFO_STAT_FIFOUND2() volatile
    {
        return FIFO_STAT & (1u << 10u);
    }

    /**
     * Set FIFO_STAT's FIFOUND2 bit.
     *
     * FIFO Underflow Exception flag for Channel 2
     */
    inline void set_FIFO_STAT_FIFOUND2() volatile
    {
        FIFO_STAT |= 1u << 10u;
    }

    /**
     * Clear FIFO_STAT's FIFOUND2 bit.
     *
     * FIFO Underflow Exception flag for Channel 2
     */
    inline void clear_FIFO_STAT_FIFOUND2() volatile
    {
        FIFO_STAT &= ~(1u << 10u);
    }

    /**
     * Toggle FIFO_STAT's FIFOUND2 bit.
     *
     * FIFO Underflow Exception flag for Channel 2
     */
    inline void toggle_FIFO_STAT_FIFOUND2() volatile
    {
        FIFO_STAT ^= 1u << 10u;
    }

    /**
     * Get FIFO_STAT's FIFOUND1 bit.
     *
     * FIFO Underflow Exception flag for Channel 1
     */
    inline bool get_FIFO_STAT_FIFOUND1() volatile
    {
        return FIFO_STAT & (1u << 9u);
    }

    /**
     * Set FIFO_STAT's FIFOUND1 bit.
     *
     * FIFO Underflow Exception flag for Channel 1
     */
    inline void set_FIFO_STAT_FIFOUND1() volatile
    {
        FIFO_STAT |= 1u << 9u;
    }

    /**
     * Clear FIFO_STAT's FIFOUND1 bit.
     *
     * FIFO Underflow Exception flag for Channel 1
     */
    inline void clear_FIFO_STAT_FIFOUND1() volatile
    {
        FIFO_STAT &= ~(1u << 9u);
    }

    /**
     * Toggle FIFO_STAT's FIFOUND1 bit.
     *
     * FIFO Underflow Exception flag for Channel 1
     */
    inline void toggle_FIFO_STAT_FIFOUND1() volatile
    {
        FIFO_STAT ^= 1u << 9u;
    }

    /**
     * Get FIFO_STAT's FIFOUND0 bit.
     *
     * FIFO Underflow Exception flag for Channel 0
     */
    inline bool get_FIFO_STAT_FIFOUND0() volatile
    {
        return FIFO_STAT & (1u << 8u);
    }

    /**
     * Set FIFO_STAT's FIFOUND0 bit.
     *
     * FIFO Underflow Exception flag for Channel 0
     */
    inline void set_FIFO_STAT_FIFOUND0() volatile
    {
        FIFO_STAT |= 1u << 8u;
    }

    /**
     * Clear FIFO_STAT's FIFOUND0 bit.
     *
     * FIFO Underflow Exception flag for Channel 0
     */
    inline void clear_FIFO_STAT_FIFOUND0() volatile
    {
        FIFO_STAT &= ~(1u << 8u);
    }

    /**
     * Toggle FIFO_STAT's FIFOUND0 bit.
     *
     * FIFO Underflow Exception flag for Channel 0
     */
    inline void toggle_FIFO_STAT_FIFOUND0() volatile
    {
        FIFO_STAT ^= 1u << 8u;
    }

    /**
     * Get FIFO_STAT's FIFOOVF7 bit.
     *
     * FIFO Overflow Exception flag for Channel 7
     */
    inline bool get_FIFO_STAT_FIFOOVF7() volatile
    {
        return FIFO_STAT & (1u << 7u);
    }

    /**
     * Set FIFO_STAT's FIFOOVF7 bit.
     *
     * FIFO Overflow Exception flag for Channel 7
     */
    inline void set_FIFO_STAT_FIFOOVF7() volatile
    {
        FIFO_STAT |= 1u << 7u;
    }

    /**
     * Clear FIFO_STAT's FIFOOVF7 bit.
     *
     * FIFO Overflow Exception flag for Channel 7
     */
    inline void clear_FIFO_STAT_FIFOOVF7() volatile
    {
        FIFO_STAT &= ~(1u << 7u);
    }

    /**
     * Toggle FIFO_STAT's FIFOOVF7 bit.
     *
     * FIFO Overflow Exception flag for Channel 7
     */
    inline void toggle_FIFO_STAT_FIFOOVF7() volatile
    {
        FIFO_STAT ^= 1u << 7u;
    }

    /**
     * Get FIFO_STAT's FIFOOVF6 bit.
     *
     * FIFO Overflow Exception flag for Channel 6
     */
    inline bool get_FIFO_STAT_FIFOOVF6() volatile
    {
        return FIFO_STAT & (1u << 6u);
    }

    /**
     * Set FIFO_STAT's FIFOOVF6 bit.
     *
     * FIFO Overflow Exception flag for Channel 6
     */
    inline void set_FIFO_STAT_FIFOOVF6() volatile
    {
        FIFO_STAT |= 1u << 6u;
    }

    /**
     * Clear FIFO_STAT's FIFOOVF6 bit.
     *
     * FIFO Overflow Exception flag for Channel 6
     */
    inline void clear_FIFO_STAT_FIFOOVF6() volatile
    {
        FIFO_STAT &= ~(1u << 6u);
    }

    /**
     * Toggle FIFO_STAT's FIFOOVF6 bit.
     *
     * FIFO Overflow Exception flag for Channel 6
     */
    inline void toggle_FIFO_STAT_FIFOOVF6() volatile
    {
        FIFO_STAT ^= 1u << 6u;
    }

    /**
     * Get FIFO_STAT's FIFOOVF5 bit.
     *
     * FIFO Overflow Exception flag for Channel 5
     */
    inline bool get_FIFO_STAT_FIFOOVF5() volatile
    {
        return FIFO_STAT & (1u << 5u);
    }

    /**
     * Set FIFO_STAT's FIFOOVF5 bit.
     *
     * FIFO Overflow Exception flag for Channel 5
     */
    inline void set_FIFO_STAT_FIFOOVF5() volatile
    {
        FIFO_STAT |= 1u << 5u;
    }

    /**
     * Clear FIFO_STAT's FIFOOVF5 bit.
     *
     * FIFO Overflow Exception flag for Channel 5
     */
    inline void clear_FIFO_STAT_FIFOOVF5() volatile
    {
        FIFO_STAT &= ~(1u << 5u);
    }

    /**
     * Toggle FIFO_STAT's FIFOOVF5 bit.
     *
     * FIFO Overflow Exception flag for Channel 5
     */
    inline void toggle_FIFO_STAT_FIFOOVF5() volatile
    {
        FIFO_STAT ^= 1u << 5u;
    }

    /**
     * Get FIFO_STAT's FIFOOVF4 bit.
     *
     * FIFO Overflow Exception flag for Channel 4
     */
    inline bool get_FIFO_STAT_FIFOOVF4() volatile
    {
        return FIFO_STAT & (1u << 4u);
    }

    /**
     * Set FIFO_STAT's FIFOOVF4 bit.
     *
     * FIFO Overflow Exception flag for Channel 4
     */
    inline void set_FIFO_STAT_FIFOOVF4() volatile
    {
        FIFO_STAT |= 1u << 4u;
    }

    /**
     * Clear FIFO_STAT's FIFOOVF4 bit.
     *
     * FIFO Overflow Exception flag for Channel 4
     */
    inline void clear_FIFO_STAT_FIFOOVF4() volatile
    {
        FIFO_STAT &= ~(1u << 4u);
    }

    /**
     * Toggle FIFO_STAT's FIFOOVF4 bit.
     *
     * FIFO Overflow Exception flag for Channel 4
     */
    inline void toggle_FIFO_STAT_FIFOOVF4() volatile
    {
        FIFO_STAT ^= 1u << 4u;
    }

    /**
     * Get FIFO_STAT's FIFOOVF3 bit.
     *
     * FIFO Overflow Exception flag for Channel 3
     */
    inline bool get_FIFO_STAT_FIFOOVF3() volatile
    {
        return FIFO_STAT & (1u << 3u);
    }

    /**
     * Set FIFO_STAT's FIFOOVF3 bit.
     *
     * FIFO Overflow Exception flag for Channel 3
     */
    inline void set_FIFO_STAT_FIFOOVF3() volatile
    {
        FIFO_STAT |= 1u << 3u;
    }

    /**
     * Clear FIFO_STAT's FIFOOVF3 bit.
     *
     * FIFO Overflow Exception flag for Channel 3
     */
    inline void clear_FIFO_STAT_FIFOOVF3() volatile
    {
        FIFO_STAT &= ~(1u << 3u);
    }

    /**
     * Toggle FIFO_STAT's FIFOOVF3 bit.
     *
     * FIFO Overflow Exception flag for Channel 3
     */
    inline void toggle_FIFO_STAT_FIFOOVF3() volatile
    {
        FIFO_STAT ^= 1u << 3u;
    }

    /**
     * Get FIFO_STAT's FIFOOVF2 bit.
     *
     * FIFO Overflow Exception flag for Channel 2
     */
    inline bool get_FIFO_STAT_FIFOOVF2() volatile
    {
        return FIFO_STAT & (1u << 2u);
    }

    /**
     * Set FIFO_STAT's FIFOOVF2 bit.
     *
     * FIFO Overflow Exception flag for Channel 2
     */
    inline void set_FIFO_STAT_FIFOOVF2() volatile
    {
        FIFO_STAT |= 1u << 2u;
    }

    /**
     * Clear FIFO_STAT's FIFOOVF2 bit.
     *
     * FIFO Overflow Exception flag for Channel 2
     */
    inline void clear_FIFO_STAT_FIFOOVF2() volatile
    {
        FIFO_STAT &= ~(1u << 2u);
    }

    /**
     * Toggle FIFO_STAT's FIFOOVF2 bit.
     *
     * FIFO Overflow Exception flag for Channel 2
     */
    inline void toggle_FIFO_STAT_FIFOOVF2() volatile
    {
        FIFO_STAT ^= 1u << 2u;
    }

    /**
     * Get FIFO_STAT's FIFOOVF1 bit.
     *
     * FIFO Overflow Exception flag for Channel 1
     */
    inline bool get_FIFO_STAT_FIFOOVF1() volatile
    {
        return FIFO_STAT & (1u << 1u);
    }

    /**
     * Set FIFO_STAT's FIFOOVF1 bit.
     *
     * FIFO Overflow Exception flag for Channel 1
     */
    inline void set_FIFO_STAT_FIFOOVF1() volatile
    {
        FIFO_STAT |= 1u << 1u;
    }

    /**
     * Clear FIFO_STAT's FIFOOVF1 bit.
     *
     * FIFO Overflow Exception flag for Channel 1
     */
    inline void clear_FIFO_STAT_FIFOOVF1() volatile
    {
        FIFO_STAT &= ~(1u << 1u);
    }

    /**
     * Toggle FIFO_STAT's FIFOOVF1 bit.
     *
     * FIFO Overflow Exception flag for Channel 1
     */
    inline void toggle_FIFO_STAT_FIFOOVF1() volatile
    {
        FIFO_STAT ^= 1u << 1u;
    }

    /**
     * Get FIFO_STAT's FIFOOVF0 bit.
     *
     * FIFO Overflow Exception flag for Channel 0
     */
    inline bool get_FIFO_STAT_FIFOOVF0() volatile
    {
        return FIFO_STAT & (1u << 0u);
    }

    /**
     * Set FIFO_STAT's FIFOOVF0 bit.
     *
     * FIFO Overflow Exception flag for Channel 0
     */
    inline void set_FIFO_STAT_FIFOOVF0() volatile
    {
        FIFO_STAT |= 1u << 0u;
    }

    /**
     * Clear FIFO_STAT's FIFOOVF0 bit.
     *
     * FIFO Overflow Exception flag for Channel 0
     */
    inline void clear_FIFO_STAT_FIFOOVF0() volatile
    {
        FIFO_STAT &= ~(1u << 0u);
    }

    /**
     * Toggle FIFO_STAT's FIFOOVF0 bit.
     *
     * FIFO Overflow Exception flag for Channel 0
     */
    inline void toggle_FIFO_STAT_FIFOOVF0() volatile
    {
        FIFO_STAT ^= 1u << 0u;
    }

    /**
     * Get all of FIFO_STAT's bit fields.
     *
     * (read-write) PDM FIFO Status register
     */
    inline void get_FIFO_STAT(bool &FIFOUND7, bool &FIFOUND6, bool &FIFOUND5,
                              bool &FIFOUND4, bool &FIFOUND3, bool &FIFOUND2,
                              bool &FIFOUND1, bool &FIFOUND0, bool &FIFOOVF7,
                              bool &FIFOOVF6, bool &FIFOOVF5, bool &FIFOOVF4,
                              bool &FIFOOVF3, bool &FIFOOVF2, bool &FIFOOVF1,
                              bool &FIFOOVF0) volatile
    {
        uint32_t curr = FIFO_STAT;

        FIFOUND7 = curr & (1u << 15u);
        FIFOUND6 = curr & (1u << 14u);
        FIFOUND5 = curr & (1u << 13u);
        FIFOUND4 = curr & (1u << 12u);
        FIFOUND3 = curr & (1u << 11u);
        FIFOUND2 = curr & (1u << 10u);
        FIFOUND1 = curr & (1u << 9u);
        FIFOUND0 = curr & (1u << 8u);
        FIFOOVF7 = curr & (1u << 7u);
        FIFOOVF6 = curr & (1u << 6u);
        FIFOOVF5 = curr & (1u << 5u);
        FIFOOVF4 = curr & (1u << 4u);
        FIFOOVF3 = curr & (1u << 3u);
        FIFOOVF2 = curr & (1u << 2u);
        FIFOOVF1 = curr & (1u << 1u);
        FIFOOVF0 = curr & (1u << 0u);
    }

    /**
     * Set all of FIFO_STAT's bit fields.
     *
     * (read-write) PDM FIFO Status register
     */
    inline void set_FIFO_STAT(bool FIFOUND7, bool FIFOUND6, bool FIFOUND5,
                              bool FIFOUND4, bool FIFOUND3, bool FIFOUND2,
                              bool FIFOUND1, bool FIFOUND0, bool FIFOOVF7,
                              bool FIFOOVF6, bool FIFOOVF5, bool FIFOOVF4,
                              bool FIFOOVF3, bool FIFOOVF2, bool FIFOOVF1,
                              bool FIFOOVF0) volatile
    {
        uint32_t curr = FIFO_STAT;

        curr &= ~(0b1u << 15u);
        curr |= (FIFOUND7 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (FIFOUND6 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (FIFOUND5 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (FIFOUND4 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (FIFOUND3 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (FIFOUND2 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (FIFOUND1 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (FIFOUND0 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (FIFOOVF7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (FIFOOVF6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (FIFOOVF5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (FIFOOVF4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (FIFOOVF3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (FIFOOVF2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (FIFOOVF1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (FIFOOVF0 & 0b1u) << 0u;

        FIFO_STAT = curr;
    }

    /**
     * Get DATACH's DATA field.
     *
     * Channel n Data
     */
    inline uint32_t get_DATACH_DATA(std::size_t index) volatile
    {
        return (DATACH[index] >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get DC_CTRL's DCCONFIG7 field.
     *
     * Channel 7 DC Remover Configuration
     */
    inline PDM_DC_CTRL_DCCONFIG7 get_DC_CTRL_DCCONFIG7() volatile
    {
        return PDM_DC_CTRL_DCCONFIG7((DC_CTRL >> 14u) & 0b11u);
    }

    /**
     * Set DC_CTRL's DCCONFIG7 field.
     *
     * Channel 7 DC Remover Configuration
     */
    inline void set_DC_CTRL_DCCONFIG7(PDM_DC_CTRL_DCCONFIG7 value) volatile
    {
        uint32_t curr = DC_CTRL;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        DC_CTRL = curr;
    }

    /**
     * Get DC_CTRL's DCCONFIG6 field.
     *
     * Channel 6 DC Remover Configuration
     */
    inline PDM_DC_CTRL_DCCONFIG6 get_DC_CTRL_DCCONFIG6() volatile
    {
        return PDM_DC_CTRL_DCCONFIG6((DC_CTRL >> 12u) & 0b11u);
    }

    /**
     * Set DC_CTRL's DCCONFIG6 field.
     *
     * Channel 6 DC Remover Configuration
     */
    inline void set_DC_CTRL_DCCONFIG6(PDM_DC_CTRL_DCCONFIG6 value) volatile
    {
        uint32_t curr = DC_CTRL;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        DC_CTRL = curr;
    }

    /**
     * Get DC_CTRL's DCCONFIG5 field.
     *
     * Channel 5 DC Remover Configuration
     */
    inline PDM_DC_CTRL_DCCONFIG5 get_DC_CTRL_DCCONFIG5() volatile
    {
        return PDM_DC_CTRL_DCCONFIG5((DC_CTRL >> 10u) & 0b11u);
    }

    /**
     * Set DC_CTRL's DCCONFIG5 field.
     *
     * Channel 5 DC Remover Configuration
     */
    inline void set_DC_CTRL_DCCONFIG5(PDM_DC_CTRL_DCCONFIG5 value) volatile
    {
        uint32_t curr = DC_CTRL;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        DC_CTRL = curr;
    }

    /**
     * Get DC_CTRL's DCCONFIG4 field.
     *
     * Channel 4 DC Remover Configuration
     */
    inline PDM_DC_CTRL_DCCONFIG4 get_DC_CTRL_DCCONFIG4() volatile
    {
        return PDM_DC_CTRL_DCCONFIG4((DC_CTRL >> 8u) & 0b11u);
    }

    /**
     * Set DC_CTRL's DCCONFIG4 field.
     *
     * Channel 4 DC Remover Configuration
     */
    inline void set_DC_CTRL_DCCONFIG4(PDM_DC_CTRL_DCCONFIG4 value) volatile
    {
        uint32_t curr = DC_CTRL;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        DC_CTRL = curr;
    }

    /**
     * Get DC_CTRL's DCCONFIG3 field.
     *
     * Channel 3 DC Remover Configuration
     */
    inline PDM_DC_CTRL_DCCONFIG3 get_DC_CTRL_DCCONFIG3() volatile
    {
        return PDM_DC_CTRL_DCCONFIG3((DC_CTRL >> 6u) & 0b11u);
    }

    /**
     * Set DC_CTRL's DCCONFIG3 field.
     *
     * Channel 3 DC Remover Configuration
     */
    inline void set_DC_CTRL_DCCONFIG3(PDM_DC_CTRL_DCCONFIG3 value) volatile
    {
        uint32_t curr = DC_CTRL;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        DC_CTRL = curr;
    }

    /**
     * Get DC_CTRL's DCCONFIG2 field.
     *
     * Channel 2 DC Remover Configuration
     */
    inline PDM_DC_CTRL_DCCONFIG2 get_DC_CTRL_DCCONFIG2() volatile
    {
        return PDM_DC_CTRL_DCCONFIG2((DC_CTRL >> 4u) & 0b11u);
    }

    /**
     * Set DC_CTRL's DCCONFIG2 field.
     *
     * Channel 2 DC Remover Configuration
     */
    inline void set_DC_CTRL_DCCONFIG2(PDM_DC_CTRL_DCCONFIG2 value) volatile
    {
        uint32_t curr = DC_CTRL;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        DC_CTRL = curr;
    }

    /**
     * Get DC_CTRL's DCCONFIG1 field.
     *
     * Channel 1 DC Remover Configuration
     */
    inline PDM_DC_CTRL_DCCONFIG1 get_DC_CTRL_DCCONFIG1() volatile
    {
        return PDM_DC_CTRL_DCCONFIG1((DC_CTRL >> 2u) & 0b11u);
    }

    /**
     * Set DC_CTRL's DCCONFIG1 field.
     *
     * Channel 1 DC Remover Configuration
     */
    inline void set_DC_CTRL_DCCONFIG1(PDM_DC_CTRL_DCCONFIG1 value) volatile
    {
        uint32_t curr = DC_CTRL;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        DC_CTRL = curr;
    }

    /**
     * Get DC_CTRL's DCCONFIG0 field.
     *
     * Channel 0 DC Remover Configuration
     */
    inline PDM_DC_CTRL_DCCONFIG0 get_DC_CTRL_DCCONFIG0() volatile
    {
        return PDM_DC_CTRL_DCCONFIG0((DC_CTRL >> 0u) & 0b11u);
    }

    /**
     * Set DC_CTRL's DCCONFIG0 field.
     *
     * Channel 0 DC Remover Configuration
     */
    inline void set_DC_CTRL_DCCONFIG0(PDM_DC_CTRL_DCCONFIG0 value) volatile
    {
        uint32_t curr = DC_CTRL;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        DC_CTRL = curr;
    }

    /**
     * Get all of DC_CTRL's bit fields.
     *
     * (read-write) PDM DC Remover Control register
     */
    inline void get_DC_CTRL(PDM_DC_CTRL_DCCONFIG7 &DCCONFIG7,
                            PDM_DC_CTRL_DCCONFIG6 &DCCONFIG6,
                            PDM_DC_CTRL_DCCONFIG5 &DCCONFIG5,
                            PDM_DC_CTRL_DCCONFIG4 &DCCONFIG4,
                            PDM_DC_CTRL_DCCONFIG3 &DCCONFIG3,
                            PDM_DC_CTRL_DCCONFIG2 &DCCONFIG2,
                            PDM_DC_CTRL_DCCONFIG1 &DCCONFIG1,
                            PDM_DC_CTRL_DCCONFIG0 &DCCONFIG0) volatile
    {
        uint32_t curr = DC_CTRL;

        DCCONFIG7 = PDM_DC_CTRL_DCCONFIG7((curr >> 14u) & 0b11u);
        DCCONFIG6 = PDM_DC_CTRL_DCCONFIG6((curr >> 12u) & 0b11u);
        DCCONFIG5 = PDM_DC_CTRL_DCCONFIG5((curr >> 10u) & 0b11u);
        DCCONFIG4 = PDM_DC_CTRL_DCCONFIG4((curr >> 8u) & 0b11u);
        DCCONFIG3 = PDM_DC_CTRL_DCCONFIG3((curr >> 6u) & 0b11u);
        DCCONFIG2 = PDM_DC_CTRL_DCCONFIG2((curr >> 4u) & 0b11u);
        DCCONFIG1 = PDM_DC_CTRL_DCCONFIG1((curr >> 2u) & 0b11u);
        DCCONFIG0 = PDM_DC_CTRL_DCCONFIG0((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of DC_CTRL's bit fields.
     *
     * (read-write) PDM DC Remover Control register
     */
    inline void set_DC_CTRL(PDM_DC_CTRL_DCCONFIG7 DCCONFIG7,
                            PDM_DC_CTRL_DCCONFIG6 DCCONFIG6,
                            PDM_DC_CTRL_DCCONFIG5 DCCONFIG5,
                            PDM_DC_CTRL_DCCONFIG4 DCCONFIG4,
                            PDM_DC_CTRL_DCCONFIG3 DCCONFIG3,
                            PDM_DC_CTRL_DCCONFIG2 DCCONFIG2,
                            PDM_DC_CTRL_DCCONFIG1 DCCONFIG1,
                            PDM_DC_CTRL_DCCONFIG0 DCCONFIG0) volatile
    {
        uint32_t curr = DC_CTRL;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(DCCONFIG7) & 0b11u) << 14u;
        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(DCCONFIG6) & 0b11u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(DCCONFIG5) & 0b11u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(DCCONFIG4) & 0b11u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(DCCONFIG3) & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DCCONFIG2) & 0b11u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(DCCONFIG1) & 0b11u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(DCCONFIG0) & 0b11u) << 0u;

        DC_CTRL = curr;
    }

    /**
     * Get RANGE_CTRL's RANGEADJ7 field.
     *
     * Channel 7 Range Adjustment
     */
    inline uint8_t get_RANGE_CTRL_RANGEADJ7() volatile
    {
        return (RANGE_CTRL >> 28u) & 0b1111u;
    }

    /**
     * Set RANGE_CTRL's RANGEADJ7 field.
     *
     * Channel 7 Range Adjustment
     */
    inline void set_RANGE_CTRL_RANGEADJ7(uint8_t value) volatile
    {
        uint32_t curr = RANGE_CTRL;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        RANGE_CTRL = curr;
    }

    /**
     * Get RANGE_CTRL's RANGEADJ6 field.
     *
     * Channel 6 Range Adjustment
     */
    inline uint8_t get_RANGE_CTRL_RANGEADJ6() volatile
    {
        return (RANGE_CTRL >> 24u) & 0b1111u;
    }

    /**
     * Set RANGE_CTRL's RANGEADJ6 field.
     *
     * Channel 6 Range Adjustment
     */
    inline void set_RANGE_CTRL_RANGEADJ6(uint8_t value) volatile
    {
        uint32_t curr = RANGE_CTRL;

        curr &= ~(0b1111u << 24u);
        curr |= (value & 0b1111u) << 24u;

        RANGE_CTRL = curr;
    }

    /**
     * Get RANGE_CTRL's RANGEADJ5 field.
     *
     * Channel 5 Range Adjustment
     */
    inline uint8_t get_RANGE_CTRL_RANGEADJ5() volatile
    {
        return (RANGE_CTRL >> 20u) & 0b1111u;
    }

    /**
     * Set RANGE_CTRL's RANGEADJ5 field.
     *
     * Channel 5 Range Adjustment
     */
    inline void set_RANGE_CTRL_RANGEADJ5(uint8_t value) volatile
    {
        uint32_t curr = RANGE_CTRL;

        curr &= ~(0b1111u << 20u);
        curr |= (value & 0b1111u) << 20u;

        RANGE_CTRL = curr;
    }

    /**
     * Get RANGE_CTRL's RANGEADJ4 field.
     *
     * Channel 4 Range Adjustment
     */
    inline uint8_t get_RANGE_CTRL_RANGEADJ4() volatile
    {
        return (RANGE_CTRL >> 16u) & 0b1111u;
    }

    /**
     * Set RANGE_CTRL's RANGEADJ4 field.
     *
     * Channel 4 Range Adjustment
     */
    inline void set_RANGE_CTRL_RANGEADJ4(uint8_t value) volatile
    {
        uint32_t curr = RANGE_CTRL;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        RANGE_CTRL = curr;
    }

    /**
     * Get RANGE_CTRL's RANGEADJ3 field.
     *
     * Channel 3 Range Adjustment
     */
    inline uint8_t get_RANGE_CTRL_RANGEADJ3() volatile
    {
        return (RANGE_CTRL >> 12u) & 0b1111u;
    }

    /**
     * Set RANGE_CTRL's RANGEADJ3 field.
     *
     * Channel 3 Range Adjustment
     */
    inline void set_RANGE_CTRL_RANGEADJ3(uint8_t value) volatile
    {
        uint32_t curr = RANGE_CTRL;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        RANGE_CTRL = curr;
    }

    /**
     * Get RANGE_CTRL's RANGEADJ2 field.
     *
     * Channel 2 Range Adjustment
     */
    inline uint8_t get_RANGE_CTRL_RANGEADJ2() volatile
    {
        return (RANGE_CTRL >> 8u) & 0b1111u;
    }

    /**
     * Set RANGE_CTRL's RANGEADJ2 field.
     *
     * Channel 2 Range Adjustment
     */
    inline void set_RANGE_CTRL_RANGEADJ2(uint8_t value) volatile
    {
        uint32_t curr = RANGE_CTRL;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        RANGE_CTRL = curr;
    }

    /**
     * Get RANGE_CTRL's RANGEADJ1 field.
     *
     * Channel 1 Range Adjustment
     */
    inline uint8_t get_RANGE_CTRL_RANGEADJ1() volatile
    {
        return (RANGE_CTRL >> 4u) & 0b1111u;
    }

    /**
     * Set RANGE_CTRL's RANGEADJ1 field.
     *
     * Channel 1 Range Adjustment
     */
    inline void set_RANGE_CTRL_RANGEADJ1(uint8_t value) volatile
    {
        uint32_t curr = RANGE_CTRL;

        curr &= ~(0b1111u << 4u);
        curr |= (value & 0b1111u) << 4u;

        RANGE_CTRL = curr;
    }

    /**
     * Get RANGE_CTRL's RANGEADJ0 field.
     *
     * Channel 0 Range Adjustment
     */
    inline uint8_t get_RANGE_CTRL_RANGEADJ0() volatile
    {
        return (RANGE_CTRL >> 0u) & 0b1111u;
    }

    /**
     * Set RANGE_CTRL's RANGEADJ0 field.
     *
     * Channel 0 Range Adjustment
     */
    inline void set_RANGE_CTRL_RANGEADJ0(uint8_t value) volatile
    {
        uint32_t curr = RANGE_CTRL;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        RANGE_CTRL = curr;
    }

    /**
     * Get all of RANGE_CTRL's bit fields.
     *
     * (read-write) PDM Range Control register
     */
    inline void get_RANGE_CTRL(uint8_t &RANGEADJ7, uint8_t &RANGEADJ6,
                               uint8_t &RANGEADJ5, uint8_t &RANGEADJ4,
                               uint8_t &RANGEADJ3, uint8_t &RANGEADJ2,
                               uint8_t &RANGEADJ1, uint8_t &RANGEADJ0) volatile
    {
        uint32_t curr = RANGE_CTRL;

        RANGEADJ7 = (curr >> 28u) & 0b1111u;
        RANGEADJ6 = (curr >> 24u) & 0b1111u;
        RANGEADJ5 = (curr >> 20u) & 0b1111u;
        RANGEADJ4 = (curr >> 16u) & 0b1111u;
        RANGEADJ3 = (curr >> 12u) & 0b1111u;
        RANGEADJ2 = (curr >> 8u) & 0b1111u;
        RANGEADJ1 = (curr >> 4u) & 0b1111u;
        RANGEADJ0 = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of RANGE_CTRL's bit fields.
     *
     * (read-write) PDM Range Control register
     */
    inline void set_RANGE_CTRL(uint8_t RANGEADJ7, uint8_t RANGEADJ6,
                               uint8_t RANGEADJ5, uint8_t RANGEADJ4,
                               uint8_t RANGEADJ3, uint8_t RANGEADJ2,
                               uint8_t RANGEADJ1, uint8_t RANGEADJ0) volatile
    {
        uint32_t curr = RANGE_CTRL;

        curr &= ~(0b1111u << 28u);
        curr |= (RANGEADJ7 & 0b1111u) << 28u;
        curr &= ~(0b1111u << 24u);
        curr |= (RANGEADJ6 & 0b1111u) << 24u;
        curr &= ~(0b1111u << 20u);
        curr |= (RANGEADJ5 & 0b1111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (RANGEADJ4 & 0b1111u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (RANGEADJ3 & 0b1111u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (RANGEADJ2 & 0b1111u) << 8u;
        curr &= ~(0b1111u << 4u);
        curr |= (RANGEADJ1 & 0b1111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (RANGEADJ0 & 0b1111u) << 0u;

        RANGE_CTRL = curr;
    }

    /**
     * Get RANGE_STAT's RANGEUNF7 bit.
     *
     * Channel 7 Range Underflow Error Flag
     */
    inline bool get_RANGE_STAT_RANGEUNF7() volatile
    {
        return RANGE_STAT & (1u << 23u);
    }

    /**
     * Set RANGE_STAT's RANGEUNF7 bit.
     *
     * Channel 7 Range Underflow Error Flag
     */
    inline void set_RANGE_STAT_RANGEUNF7() volatile
    {
        RANGE_STAT |= 1u << 23u;
    }

    /**
     * Clear RANGE_STAT's RANGEUNF7 bit.
     *
     * Channel 7 Range Underflow Error Flag
     */
    inline void clear_RANGE_STAT_RANGEUNF7() volatile
    {
        RANGE_STAT &= ~(1u << 23u);
    }

    /**
     * Toggle RANGE_STAT's RANGEUNF7 bit.
     *
     * Channel 7 Range Underflow Error Flag
     */
    inline void toggle_RANGE_STAT_RANGEUNF7() volatile
    {
        RANGE_STAT ^= 1u << 23u;
    }

    /**
     * Get RANGE_STAT's RANGEUNF6 bit.
     *
     * Channel 6 Range Underflow Error Flag
     */
    inline bool get_RANGE_STAT_RANGEUNF6() volatile
    {
        return RANGE_STAT & (1u << 22u);
    }

    /**
     * Set RANGE_STAT's RANGEUNF6 bit.
     *
     * Channel 6 Range Underflow Error Flag
     */
    inline void set_RANGE_STAT_RANGEUNF6() volatile
    {
        RANGE_STAT |= 1u << 22u;
    }

    /**
     * Clear RANGE_STAT's RANGEUNF6 bit.
     *
     * Channel 6 Range Underflow Error Flag
     */
    inline void clear_RANGE_STAT_RANGEUNF6() volatile
    {
        RANGE_STAT &= ~(1u << 22u);
    }

    /**
     * Toggle RANGE_STAT's RANGEUNF6 bit.
     *
     * Channel 6 Range Underflow Error Flag
     */
    inline void toggle_RANGE_STAT_RANGEUNF6() volatile
    {
        RANGE_STAT ^= 1u << 22u;
    }

    /**
     * Get RANGE_STAT's RANGEUNF5 bit.
     *
     * Channel 5 Range Underflow Error Flag
     */
    inline bool get_RANGE_STAT_RANGEUNF5() volatile
    {
        return RANGE_STAT & (1u << 21u);
    }

    /**
     * Set RANGE_STAT's RANGEUNF5 bit.
     *
     * Channel 5 Range Underflow Error Flag
     */
    inline void set_RANGE_STAT_RANGEUNF5() volatile
    {
        RANGE_STAT |= 1u << 21u;
    }

    /**
     * Clear RANGE_STAT's RANGEUNF5 bit.
     *
     * Channel 5 Range Underflow Error Flag
     */
    inline void clear_RANGE_STAT_RANGEUNF5() volatile
    {
        RANGE_STAT &= ~(1u << 21u);
    }

    /**
     * Toggle RANGE_STAT's RANGEUNF5 bit.
     *
     * Channel 5 Range Underflow Error Flag
     */
    inline void toggle_RANGE_STAT_RANGEUNF5() volatile
    {
        RANGE_STAT ^= 1u << 21u;
    }

    /**
     * Get RANGE_STAT's RANGEUNF4 bit.
     *
     * Channel 4 Range Underflow Error Flag
     */
    inline bool get_RANGE_STAT_RANGEUNF4() volatile
    {
        return RANGE_STAT & (1u << 20u);
    }

    /**
     * Set RANGE_STAT's RANGEUNF4 bit.
     *
     * Channel 4 Range Underflow Error Flag
     */
    inline void set_RANGE_STAT_RANGEUNF4() volatile
    {
        RANGE_STAT |= 1u << 20u;
    }

    /**
     * Clear RANGE_STAT's RANGEUNF4 bit.
     *
     * Channel 4 Range Underflow Error Flag
     */
    inline void clear_RANGE_STAT_RANGEUNF4() volatile
    {
        RANGE_STAT &= ~(1u << 20u);
    }

    /**
     * Toggle RANGE_STAT's RANGEUNF4 bit.
     *
     * Channel 4 Range Underflow Error Flag
     */
    inline void toggle_RANGE_STAT_RANGEUNF4() volatile
    {
        RANGE_STAT ^= 1u << 20u;
    }

    /**
     * Get RANGE_STAT's RANGEUNF3 bit.
     *
     * Channel 3 Range Underflow Error Flag
     */
    inline bool get_RANGE_STAT_RANGEUNF3() volatile
    {
        return RANGE_STAT & (1u << 19u);
    }

    /**
     * Set RANGE_STAT's RANGEUNF3 bit.
     *
     * Channel 3 Range Underflow Error Flag
     */
    inline void set_RANGE_STAT_RANGEUNF3() volatile
    {
        RANGE_STAT |= 1u << 19u;
    }

    /**
     * Clear RANGE_STAT's RANGEUNF3 bit.
     *
     * Channel 3 Range Underflow Error Flag
     */
    inline void clear_RANGE_STAT_RANGEUNF3() volatile
    {
        RANGE_STAT &= ~(1u << 19u);
    }

    /**
     * Toggle RANGE_STAT's RANGEUNF3 bit.
     *
     * Channel 3 Range Underflow Error Flag
     */
    inline void toggle_RANGE_STAT_RANGEUNF3() volatile
    {
        RANGE_STAT ^= 1u << 19u;
    }

    /**
     * Get RANGE_STAT's RANGEUNF2 bit.
     *
     * Channel 2 Range Underflow Error Flag
     */
    inline bool get_RANGE_STAT_RANGEUNF2() volatile
    {
        return RANGE_STAT & (1u << 18u);
    }

    /**
     * Set RANGE_STAT's RANGEUNF2 bit.
     *
     * Channel 2 Range Underflow Error Flag
     */
    inline void set_RANGE_STAT_RANGEUNF2() volatile
    {
        RANGE_STAT |= 1u << 18u;
    }

    /**
     * Clear RANGE_STAT's RANGEUNF2 bit.
     *
     * Channel 2 Range Underflow Error Flag
     */
    inline void clear_RANGE_STAT_RANGEUNF2() volatile
    {
        RANGE_STAT &= ~(1u << 18u);
    }

    /**
     * Toggle RANGE_STAT's RANGEUNF2 bit.
     *
     * Channel 2 Range Underflow Error Flag
     */
    inline void toggle_RANGE_STAT_RANGEUNF2() volatile
    {
        RANGE_STAT ^= 1u << 18u;
    }

    /**
     * Get RANGE_STAT's RANGEUNF1 bit.
     *
     * Channel 1 Range Underflow Error Flag
     */
    inline bool get_RANGE_STAT_RANGEUNF1() volatile
    {
        return RANGE_STAT & (1u << 17u);
    }

    /**
     * Set RANGE_STAT's RANGEUNF1 bit.
     *
     * Channel 1 Range Underflow Error Flag
     */
    inline void set_RANGE_STAT_RANGEUNF1() volatile
    {
        RANGE_STAT |= 1u << 17u;
    }

    /**
     * Clear RANGE_STAT's RANGEUNF1 bit.
     *
     * Channel 1 Range Underflow Error Flag
     */
    inline void clear_RANGE_STAT_RANGEUNF1() volatile
    {
        RANGE_STAT &= ~(1u << 17u);
    }

    /**
     * Toggle RANGE_STAT's RANGEUNF1 bit.
     *
     * Channel 1 Range Underflow Error Flag
     */
    inline void toggle_RANGE_STAT_RANGEUNF1() volatile
    {
        RANGE_STAT ^= 1u << 17u;
    }

    /**
     * Get RANGE_STAT's RANGEUNF0 bit.
     *
     * Channel 0 Range Underflow Error Flag
     */
    inline bool get_RANGE_STAT_RANGEUNF0() volatile
    {
        return RANGE_STAT & (1u << 16u);
    }

    /**
     * Set RANGE_STAT's RANGEUNF0 bit.
     *
     * Channel 0 Range Underflow Error Flag
     */
    inline void set_RANGE_STAT_RANGEUNF0() volatile
    {
        RANGE_STAT |= 1u << 16u;
    }

    /**
     * Clear RANGE_STAT's RANGEUNF0 bit.
     *
     * Channel 0 Range Underflow Error Flag
     */
    inline void clear_RANGE_STAT_RANGEUNF0() volatile
    {
        RANGE_STAT &= ~(1u << 16u);
    }

    /**
     * Toggle RANGE_STAT's RANGEUNF0 bit.
     *
     * Channel 0 Range Underflow Error Flag
     */
    inline void toggle_RANGE_STAT_RANGEUNF0() volatile
    {
        RANGE_STAT ^= 1u << 16u;
    }

    /**
     * Get RANGE_STAT's RANGEOVF7 bit.
     *
     * Channel 7 Range Overflow Error Flag
     */
    inline bool get_RANGE_STAT_RANGEOVF7() volatile
    {
        return RANGE_STAT & (1u << 7u);
    }

    /**
     * Set RANGE_STAT's RANGEOVF7 bit.
     *
     * Channel 7 Range Overflow Error Flag
     */
    inline void set_RANGE_STAT_RANGEOVF7() volatile
    {
        RANGE_STAT |= 1u << 7u;
    }

    /**
     * Clear RANGE_STAT's RANGEOVF7 bit.
     *
     * Channel 7 Range Overflow Error Flag
     */
    inline void clear_RANGE_STAT_RANGEOVF7() volatile
    {
        RANGE_STAT &= ~(1u << 7u);
    }

    /**
     * Toggle RANGE_STAT's RANGEOVF7 bit.
     *
     * Channel 7 Range Overflow Error Flag
     */
    inline void toggle_RANGE_STAT_RANGEOVF7() volatile
    {
        RANGE_STAT ^= 1u << 7u;
    }

    /**
     * Get RANGE_STAT's RANGEOVF6 bit.
     *
     * Channel 6 Range Overflow Error Flag
     */
    inline bool get_RANGE_STAT_RANGEOVF6() volatile
    {
        return RANGE_STAT & (1u << 6u);
    }

    /**
     * Set RANGE_STAT's RANGEOVF6 bit.
     *
     * Channel 6 Range Overflow Error Flag
     */
    inline void set_RANGE_STAT_RANGEOVF6() volatile
    {
        RANGE_STAT |= 1u << 6u;
    }

    /**
     * Clear RANGE_STAT's RANGEOVF6 bit.
     *
     * Channel 6 Range Overflow Error Flag
     */
    inline void clear_RANGE_STAT_RANGEOVF6() volatile
    {
        RANGE_STAT &= ~(1u << 6u);
    }

    /**
     * Toggle RANGE_STAT's RANGEOVF6 bit.
     *
     * Channel 6 Range Overflow Error Flag
     */
    inline void toggle_RANGE_STAT_RANGEOVF6() volatile
    {
        RANGE_STAT ^= 1u << 6u;
    }

    /**
     * Get RANGE_STAT's RANGEOVF5 bit.
     *
     * Channel 5 Range Overflow Error Flag
     */
    inline bool get_RANGE_STAT_RANGEOVF5() volatile
    {
        return RANGE_STAT & (1u << 5u);
    }

    /**
     * Set RANGE_STAT's RANGEOVF5 bit.
     *
     * Channel 5 Range Overflow Error Flag
     */
    inline void set_RANGE_STAT_RANGEOVF5() volatile
    {
        RANGE_STAT |= 1u << 5u;
    }

    /**
     * Clear RANGE_STAT's RANGEOVF5 bit.
     *
     * Channel 5 Range Overflow Error Flag
     */
    inline void clear_RANGE_STAT_RANGEOVF5() volatile
    {
        RANGE_STAT &= ~(1u << 5u);
    }

    /**
     * Toggle RANGE_STAT's RANGEOVF5 bit.
     *
     * Channel 5 Range Overflow Error Flag
     */
    inline void toggle_RANGE_STAT_RANGEOVF5() volatile
    {
        RANGE_STAT ^= 1u << 5u;
    }

    /**
     * Get RANGE_STAT's RANGEOVF4 bit.
     *
     * Channel 4 Range Overflow Error Flag
     */
    inline bool get_RANGE_STAT_RANGEOVF4() volatile
    {
        return RANGE_STAT & (1u << 4u);
    }

    /**
     * Set RANGE_STAT's RANGEOVF4 bit.
     *
     * Channel 4 Range Overflow Error Flag
     */
    inline void set_RANGE_STAT_RANGEOVF4() volatile
    {
        RANGE_STAT |= 1u << 4u;
    }

    /**
     * Clear RANGE_STAT's RANGEOVF4 bit.
     *
     * Channel 4 Range Overflow Error Flag
     */
    inline void clear_RANGE_STAT_RANGEOVF4() volatile
    {
        RANGE_STAT &= ~(1u << 4u);
    }

    /**
     * Toggle RANGE_STAT's RANGEOVF4 bit.
     *
     * Channel 4 Range Overflow Error Flag
     */
    inline void toggle_RANGE_STAT_RANGEOVF4() volatile
    {
        RANGE_STAT ^= 1u << 4u;
    }

    /**
     * Get RANGE_STAT's RANGEOVF3 bit.
     *
     * Channel 3 Range Overflow Error Flag
     */
    inline bool get_RANGE_STAT_RANGEOVF3() volatile
    {
        return RANGE_STAT & (1u << 3u);
    }

    /**
     * Set RANGE_STAT's RANGEOVF3 bit.
     *
     * Channel 3 Range Overflow Error Flag
     */
    inline void set_RANGE_STAT_RANGEOVF3() volatile
    {
        RANGE_STAT |= 1u << 3u;
    }

    /**
     * Clear RANGE_STAT's RANGEOVF3 bit.
     *
     * Channel 3 Range Overflow Error Flag
     */
    inline void clear_RANGE_STAT_RANGEOVF3() volatile
    {
        RANGE_STAT &= ~(1u << 3u);
    }

    /**
     * Toggle RANGE_STAT's RANGEOVF3 bit.
     *
     * Channel 3 Range Overflow Error Flag
     */
    inline void toggle_RANGE_STAT_RANGEOVF3() volatile
    {
        RANGE_STAT ^= 1u << 3u;
    }

    /**
     * Get RANGE_STAT's RANGEOVF2 bit.
     *
     * Channel 2 Range Overflow Error Flag
     */
    inline bool get_RANGE_STAT_RANGEOVF2() volatile
    {
        return RANGE_STAT & (1u << 2u);
    }

    /**
     * Set RANGE_STAT's RANGEOVF2 bit.
     *
     * Channel 2 Range Overflow Error Flag
     */
    inline void set_RANGE_STAT_RANGEOVF2() volatile
    {
        RANGE_STAT |= 1u << 2u;
    }

    /**
     * Clear RANGE_STAT's RANGEOVF2 bit.
     *
     * Channel 2 Range Overflow Error Flag
     */
    inline void clear_RANGE_STAT_RANGEOVF2() volatile
    {
        RANGE_STAT &= ~(1u << 2u);
    }

    /**
     * Toggle RANGE_STAT's RANGEOVF2 bit.
     *
     * Channel 2 Range Overflow Error Flag
     */
    inline void toggle_RANGE_STAT_RANGEOVF2() volatile
    {
        RANGE_STAT ^= 1u << 2u;
    }

    /**
     * Get RANGE_STAT's RANGEOVF1 bit.
     *
     * Channel 1 Range Overflow Error Flag
     */
    inline bool get_RANGE_STAT_RANGEOVF1() volatile
    {
        return RANGE_STAT & (1u << 1u);
    }

    /**
     * Set RANGE_STAT's RANGEOVF1 bit.
     *
     * Channel 1 Range Overflow Error Flag
     */
    inline void set_RANGE_STAT_RANGEOVF1() volatile
    {
        RANGE_STAT |= 1u << 1u;
    }

    /**
     * Clear RANGE_STAT's RANGEOVF1 bit.
     *
     * Channel 1 Range Overflow Error Flag
     */
    inline void clear_RANGE_STAT_RANGEOVF1() volatile
    {
        RANGE_STAT &= ~(1u << 1u);
    }

    /**
     * Toggle RANGE_STAT's RANGEOVF1 bit.
     *
     * Channel 1 Range Overflow Error Flag
     */
    inline void toggle_RANGE_STAT_RANGEOVF1() volatile
    {
        RANGE_STAT ^= 1u << 1u;
    }

    /**
     * Get RANGE_STAT's RANGEOVF0 bit.
     *
     * Channel 0 Range Overflow Error Flag
     */
    inline bool get_RANGE_STAT_RANGEOVF0() volatile
    {
        return RANGE_STAT & (1u << 0u);
    }

    /**
     * Set RANGE_STAT's RANGEOVF0 bit.
     *
     * Channel 0 Range Overflow Error Flag
     */
    inline void set_RANGE_STAT_RANGEOVF0() volatile
    {
        RANGE_STAT |= 1u << 0u;
    }

    /**
     * Clear RANGE_STAT's RANGEOVF0 bit.
     *
     * Channel 0 Range Overflow Error Flag
     */
    inline void clear_RANGE_STAT_RANGEOVF0() volatile
    {
        RANGE_STAT &= ~(1u << 0u);
    }

    /**
     * Toggle RANGE_STAT's RANGEOVF0 bit.
     *
     * Channel 0 Range Overflow Error Flag
     */
    inline void toggle_RANGE_STAT_RANGEOVF0() volatile
    {
        RANGE_STAT ^= 1u << 0u;
    }

    /**
     * Get all of RANGE_STAT's bit fields.
     *
     * (read-write) PDM Range Status register
     */
    inline void get_RANGE_STAT(bool &RANGEUNF7, bool &RANGEUNF6,
                               bool &RANGEUNF5, bool &RANGEUNF4,
                               bool &RANGEUNF3, bool &RANGEUNF2,
                               bool &RANGEUNF1, bool &RANGEUNF0,
                               bool &RANGEOVF7, bool &RANGEOVF6,
                               bool &RANGEOVF5, bool &RANGEOVF4,
                               bool &RANGEOVF3, bool &RANGEOVF2,
                               bool &RANGEOVF1, bool &RANGEOVF0) volatile
    {
        uint32_t curr = RANGE_STAT;

        RANGEUNF7 = curr & (1u << 23u);
        RANGEUNF6 = curr & (1u << 22u);
        RANGEUNF5 = curr & (1u << 21u);
        RANGEUNF4 = curr & (1u << 20u);
        RANGEUNF3 = curr & (1u << 19u);
        RANGEUNF2 = curr & (1u << 18u);
        RANGEUNF1 = curr & (1u << 17u);
        RANGEUNF0 = curr & (1u << 16u);
        RANGEOVF7 = curr & (1u << 7u);
        RANGEOVF6 = curr & (1u << 6u);
        RANGEOVF5 = curr & (1u << 5u);
        RANGEOVF4 = curr & (1u << 4u);
        RANGEOVF3 = curr & (1u << 3u);
        RANGEOVF2 = curr & (1u << 2u);
        RANGEOVF1 = curr & (1u << 1u);
        RANGEOVF0 = curr & (1u << 0u);
    }

    /**
     * Set all of RANGE_STAT's bit fields.
     *
     * (read-write) PDM Range Status register
     */
    inline void set_RANGE_STAT(bool RANGEUNF7, bool RANGEUNF6, bool RANGEUNF5,
                               bool RANGEUNF4, bool RANGEUNF3, bool RANGEUNF2,
                               bool RANGEUNF1, bool RANGEUNF0, bool RANGEOVF7,
                               bool RANGEOVF6, bool RANGEOVF5, bool RANGEOVF4,
                               bool RANGEOVF3, bool RANGEOVF2, bool RANGEOVF1,
                               bool RANGEOVF0) volatile
    {
        uint32_t curr = RANGE_STAT;

        curr &= ~(0b1u << 23u);
        curr |= (RANGEUNF7 & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (RANGEUNF6 & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (RANGEUNF5 & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (RANGEUNF4 & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (RANGEUNF3 & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (RANGEUNF2 & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (RANGEUNF1 & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (RANGEUNF0 & 0b1u) << 16u;
        curr &= ~(0b1u << 7u);
        curr |= (RANGEOVF7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (RANGEOVF6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (RANGEOVF5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (RANGEOVF4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (RANGEOVF3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (RANGEOVF2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (RANGEOVF1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RANGEOVF0 & 0b1u) << 0u;

        RANGE_STAT = curr;
    }

    /**
     * Get VAD0_CTRL_1's VADCHSEL field.
     *
     * Voice Activity Detector Channel Selector
     */
    inline uint8_t get_VAD0_CTRL_1_VADCHSEL() volatile
    {
        return (VAD0_CTRL_1 >> 24u) & 0b111u;
    }

    /**
     * Set VAD0_CTRL_1's VADCHSEL field.
     *
     * Voice Activity Detector Channel Selector
     */
    inline void set_VAD0_CTRL_1_VADCHSEL(uint8_t value) volatile
    {
        uint32_t curr = VAD0_CTRL_1;

        curr &= ~(0b111u << 24u);
        curr |= (value & 0b111u) << 24u;

        VAD0_CTRL_1 = curr;
    }

    /**
     * Get VAD0_CTRL_1's VADCICOSR field.
     *
     * Voice Activity Detector CIC Oversampling Rate
     */
    inline uint8_t get_VAD0_CTRL_1_VADCICOSR() volatile
    {
        return (VAD0_CTRL_1 >> 16u) & 0b1111u;
    }

    /**
     * Set VAD0_CTRL_1's VADCICOSR field.
     *
     * Voice Activity Detector CIC Oversampling Rate
     */
    inline void set_VAD0_CTRL_1_VADCICOSR(uint8_t value) volatile
    {
        uint32_t curr = VAD0_CTRL_1;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        VAD0_CTRL_1 = curr;
    }

    /**
     * Get VAD0_CTRL_1's VADINITT field.
     *
     * Voice Activity Detector Initialization Time
     */
    inline uint8_t get_VAD0_CTRL_1_VADINITT() volatile
    {
        return (VAD0_CTRL_1 >> 8u) & 0b11111u;
    }

    /**
     * Set VAD0_CTRL_1's VADINITT field.
     *
     * Voice Activity Detector Initialization Time
     */
    inline void set_VAD0_CTRL_1_VADINITT(uint8_t value) volatile
    {
        uint32_t curr = VAD0_CTRL_1;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        VAD0_CTRL_1 = curr;
    }

    /**
     * Get VAD0_CTRL_1's VADST10 bit.
     *
     * Voice Activity Detector Internal Filters Initialization
     */
    inline bool get_VAD0_CTRL_1_VADST10() volatile
    {
        return VAD0_CTRL_1 & (1u << 4u);
    }

    /**
     * Set VAD0_CTRL_1's VADST10 bit.
     *
     * Voice Activity Detector Internal Filters Initialization
     */
    inline void set_VAD0_CTRL_1_VADST10() volatile
    {
        VAD0_CTRL_1 |= 1u << 4u;
    }

    /**
     * Clear VAD0_CTRL_1's VADST10 bit.
     *
     * Voice Activity Detector Internal Filters Initialization
     */
    inline void clear_VAD0_CTRL_1_VADST10() volatile
    {
        VAD0_CTRL_1 &= ~(1u << 4u);
    }

    /**
     * Toggle VAD0_CTRL_1's VADST10 bit.
     *
     * Voice Activity Detector Internal Filters Initialization
     */
    inline void toggle_VAD0_CTRL_1_VADST10() volatile
    {
        VAD0_CTRL_1 ^= 1u << 4u;
    }

    /**
     * Get VAD0_CTRL_1's VADERIE bit.
     *
     * Voice Activity Detector Error Interruption Enable
     */
    inline bool get_VAD0_CTRL_1_VADERIE() volatile
    {
        return VAD0_CTRL_1 & (1u << 3u);
    }

    /**
     * Set VAD0_CTRL_1's VADERIE bit.
     *
     * Voice Activity Detector Error Interruption Enable
     */
    inline void set_VAD0_CTRL_1_VADERIE() volatile
    {
        VAD0_CTRL_1 |= 1u << 3u;
    }

    /**
     * Clear VAD0_CTRL_1's VADERIE bit.
     *
     * Voice Activity Detector Error Interruption Enable
     */
    inline void clear_VAD0_CTRL_1_VADERIE() volatile
    {
        VAD0_CTRL_1 &= ~(1u << 3u);
    }

    /**
     * Toggle VAD0_CTRL_1's VADERIE bit.
     *
     * Voice Activity Detector Error Interruption Enable
     */
    inline void toggle_VAD0_CTRL_1_VADERIE() volatile
    {
        VAD0_CTRL_1 ^= 1u << 3u;
    }

    /**
     * Get VAD0_CTRL_1's VADIE bit.
     *
     * Voice Activity Detector Interruption Enable
     */
    inline bool get_VAD0_CTRL_1_VADIE() volatile
    {
        return VAD0_CTRL_1 & (1u << 2u);
    }

    /**
     * Set VAD0_CTRL_1's VADIE bit.
     *
     * Voice Activity Detector Interruption Enable
     */
    inline void set_VAD0_CTRL_1_VADIE() volatile
    {
        VAD0_CTRL_1 |= 1u << 2u;
    }

    /**
     * Clear VAD0_CTRL_1's VADIE bit.
     *
     * Voice Activity Detector Interruption Enable
     */
    inline void clear_VAD0_CTRL_1_VADIE() volatile
    {
        VAD0_CTRL_1 &= ~(1u << 2u);
    }

    /**
     * Toggle VAD0_CTRL_1's VADIE bit.
     *
     * Voice Activity Detector Interruption Enable
     */
    inline void toggle_VAD0_CTRL_1_VADIE() volatile
    {
        VAD0_CTRL_1 ^= 1u << 2u;
    }

    /**
     * Get VAD0_CTRL_1's VADRST bit.
     *
     * Voice Activity Detector Reset
     */
    inline bool get_VAD0_CTRL_1_VADRST() volatile
    {
        return VAD0_CTRL_1 & (1u << 1u);
    }

    /**
     * Set VAD0_CTRL_1's VADRST bit.
     *
     * Voice Activity Detector Reset
     */
    inline void set_VAD0_CTRL_1_VADRST() volatile
    {
        VAD0_CTRL_1 |= 1u << 1u;
    }

    /**
     * Clear VAD0_CTRL_1's VADRST bit.
     *
     * Voice Activity Detector Reset
     */
    inline void clear_VAD0_CTRL_1_VADRST() volatile
    {
        VAD0_CTRL_1 &= ~(1u << 1u);
    }

    /**
     * Toggle VAD0_CTRL_1's VADRST bit.
     *
     * Voice Activity Detector Reset
     */
    inline void toggle_VAD0_CTRL_1_VADRST() volatile
    {
        VAD0_CTRL_1 ^= 1u << 1u;
    }

    /**
     * Get VAD0_CTRL_1's VADEN bit.
     *
     * Voice Activity Detector Enable
     */
    inline bool get_VAD0_CTRL_1_VADEN() volatile
    {
        return VAD0_CTRL_1 & (1u << 0u);
    }

    /**
     * Set VAD0_CTRL_1's VADEN bit.
     *
     * Voice Activity Detector Enable
     */
    inline void set_VAD0_CTRL_1_VADEN() volatile
    {
        VAD0_CTRL_1 |= 1u << 0u;
    }

    /**
     * Clear VAD0_CTRL_1's VADEN bit.
     *
     * Voice Activity Detector Enable
     */
    inline void clear_VAD0_CTRL_1_VADEN() volatile
    {
        VAD0_CTRL_1 &= ~(1u << 0u);
    }

    /**
     * Toggle VAD0_CTRL_1's VADEN bit.
     *
     * Voice Activity Detector Enable
     */
    inline void toggle_VAD0_CTRL_1_VADEN() volatile
    {
        VAD0_CTRL_1 ^= 1u << 0u;
    }

    /**
     * Get all of VAD0_CTRL_1's bit fields.
     *
     * (read-write) Voice Activity Detector 0 Control register
     */
    inline void get_VAD0_CTRL_1(uint8_t &VADCHSEL, uint8_t &VADCICOSR,
                                uint8_t &VADINITT, bool &VADST10,
                                bool &VADERIE, bool &VADIE, bool &VADRST,
                                bool &VADEN) volatile
    {
        uint32_t curr = VAD0_CTRL_1;

        VADCHSEL = (curr >> 24u) & 0b111u;
        VADCICOSR = (curr >> 16u) & 0b1111u;
        VADINITT = (curr >> 8u) & 0b11111u;
        VADST10 = curr & (1u << 4u);
        VADERIE = curr & (1u << 3u);
        VADIE = curr & (1u << 2u);
        VADRST = curr & (1u << 1u);
        VADEN = curr & (1u << 0u);
    }

    /**
     * Set all of VAD0_CTRL_1's bit fields.
     *
     * (read-write) Voice Activity Detector 0 Control register
     */
    inline void set_VAD0_CTRL_1(uint8_t VADCHSEL, uint8_t VADCICOSR,
                                uint8_t VADINITT, bool VADST10, bool VADERIE,
                                bool VADIE, bool VADRST, bool VADEN) volatile
    {
        uint32_t curr = VAD0_CTRL_1;

        curr &= ~(0b111u << 24u);
        curr |= (VADCHSEL & 0b111u) << 24u;
        curr &= ~(0b1111u << 16u);
        curr |= (VADCICOSR & 0b1111u) << 16u;
        curr &= ~(0b11111u << 8u);
        curr |= (VADINITT & 0b11111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (VADST10 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (VADERIE & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (VADIE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (VADRST & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (VADEN & 0b1u) << 0u;

        VAD0_CTRL_1 = curr;
    }

    /**
     * Get VAD0_CTRL_2's VADFRENDIS bit.
     *
     * Voice Activity Detector Frame Energy Disable
     */
    inline bool get_VAD0_CTRL_2_VADFRENDIS() volatile
    {
        return VAD0_CTRL_2 & (1u << 31u);
    }

    /**
     * Set VAD0_CTRL_2's VADFRENDIS bit.
     *
     * Voice Activity Detector Frame Energy Disable
     */
    inline void set_VAD0_CTRL_2_VADFRENDIS() volatile
    {
        VAD0_CTRL_2 |= 1u << 31u;
    }

    /**
     * Clear VAD0_CTRL_2's VADFRENDIS bit.
     *
     * Voice Activity Detector Frame Energy Disable
     */
    inline void clear_VAD0_CTRL_2_VADFRENDIS() volatile
    {
        VAD0_CTRL_2 &= ~(1u << 31u);
    }

    /**
     * Toggle VAD0_CTRL_2's VADFRENDIS bit.
     *
     * Voice Activity Detector Frame Energy Disable
     */
    inline void toggle_VAD0_CTRL_2_VADFRENDIS() volatile
    {
        VAD0_CTRL_2 ^= 1u << 31u;
    }

    /**
     * Get VAD0_CTRL_2's VADPREFEN bit.
     *
     * Voice Activity Detector Pre Filter Enable
     */
    inline bool get_VAD0_CTRL_2_VADPREFEN() volatile
    {
        return VAD0_CTRL_2 & (1u << 30u);
    }

    /**
     * Set VAD0_CTRL_2's VADPREFEN bit.
     *
     * Voice Activity Detector Pre Filter Enable
     */
    inline void set_VAD0_CTRL_2_VADPREFEN() volatile
    {
        VAD0_CTRL_2 |= 1u << 30u;
    }

    /**
     * Clear VAD0_CTRL_2's VADPREFEN bit.
     *
     * Voice Activity Detector Pre Filter Enable
     */
    inline void clear_VAD0_CTRL_2_VADPREFEN() volatile
    {
        VAD0_CTRL_2 &= ~(1u << 30u);
    }

    /**
     * Toggle VAD0_CTRL_2's VADPREFEN bit.
     *
     * Voice Activity Detector Pre Filter Enable
     */
    inline void toggle_VAD0_CTRL_2_VADPREFEN() volatile
    {
        VAD0_CTRL_2 ^= 1u << 30u;
    }

    /**
     * Get VAD0_CTRL_2's VADFOUTDIS bit.
     *
     * Voice Activity Detector Force Output Disable
     */
    inline bool get_VAD0_CTRL_2_VADFOUTDIS() volatile
    {
        return VAD0_CTRL_2 & (1u << 28u);
    }

    /**
     * Set VAD0_CTRL_2's VADFOUTDIS bit.
     *
     * Voice Activity Detector Force Output Disable
     */
    inline void set_VAD0_CTRL_2_VADFOUTDIS() volatile
    {
        VAD0_CTRL_2 |= 1u << 28u;
    }

    /**
     * Clear VAD0_CTRL_2's VADFOUTDIS bit.
     *
     * Voice Activity Detector Force Output Disable
     */
    inline void clear_VAD0_CTRL_2_VADFOUTDIS() volatile
    {
        VAD0_CTRL_2 &= ~(1u << 28u);
    }

    /**
     * Toggle VAD0_CTRL_2's VADFOUTDIS bit.
     *
     * Voice Activity Detector Force Output Disable
     */
    inline void toggle_VAD0_CTRL_2_VADFOUTDIS() volatile
    {
        VAD0_CTRL_2 ^= 1u << 28u;
    }

    /**
     * Get VAD0_CTRL_2's VADFRAMET field.
     *
     * Voice Activity Detector Frame Time
     */
    inline uint8_t get_VAD0_CTRL_2_VADFRAMET() volatile
    {
        return (VAD0_CTRL_2 >> 16u) & 0b111111u;
    }

    /**
     * Set VAD0_CTRL_2's VADFRAMET field.
     *
     * Voice Activity Detector Frame Time
     */
    inline void set_VAD0_CTRL_2_VADFRAMET(uint8_t value) volatile
    {
        uint32_t curr = VAD0_CTRL_2;

        curr &= ~(0b111111u << 16u);
        curr |= (value & 0b111111u) << 16u;

        VAD0_CTRL_2 = curr;
    }

    /**
     * Get VAD0_CTRL_2's VADINPGAIN field.
     *
     * Voice Activity Detector Input Gain
     */
    inline uint8_t get_VAD0_CTRL_2_VADINPGAIN() volatile
    {
        return (VAD0_CTRL_2 >> 8u) & 0b1111u;
    }

    /**
     * Set VAD0_CTRL_2's VADINPGAIN field.
     *
     * Voice Activity Detector Input Gain
     */
    inline void set_VAD0_CTRL_2_VADINPGAIN(uint8_t value) volatile
    {
        uint32_t curr = VAD0_CTRL_2;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        VAD0_CTRL_2 = curr;
    }

    /**
     * Get VAD0_CTRL_2's VADHPF field.
     *
     * Voice Activity Detector High-Pass Filter
     */
    inline PDM_VAD0_CTRL_2_VADHPF get_VAD0_CTRL_2_VADHPF() volatile
    {
        return PDM_VAD0_CTRL_2_VADHPF((VAD0_CTRL_2 >> 0u) & 0b11u);
    }

    /**
     * Set VAD0_CTRL_2's VADHPF field.
     *
     * Voice Activity Detector High-Pass Filter
     */
    inline void set_VAD0_CTRL_2_VADHPF(PDM_VAD0_CTRL_2_VADHPF value) volatile
    {
        uint32_t curr = VAD0_CTRL_2;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        VAD0_CTRL_2 = curr;
    }

    /**
     * Get all of VAD0_CTRL_2's bit fields.
     *
     * (read-write) Voice Activity Detector 0 Control register
     */
    inline void get_VAD0_CTRL_2(bool &VADFRENDIS, bool &VADPREFEN,
                                bool &VADFOUTDIS, uint8_t &VADFRAMET,
                                uint8_t &VADINPGAIN,
                                PDM_VAD0_CTRL_2_VADHPF &VADHPF) volatile
    {
        uint32_t curr = VAD0_CTRL_2;

        VADFRENDIS = curr & (1u << 31u);
        VADPREFEN = curr & (1u << 30u);
        VADFOUTDIS = curr & (1u << 28u);
        VADFRAMET = (curr >> 16u) & 0b111111u;
        VADINPGAIN = (curr >> 8u) & 0b1111u;
        VADHPF = PDM_VAD0_CTRL_2_VADHPF((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of VAD0_CTRL_2's bit fields.
     *
     * (read-write) Voice Activity Detector 0 Control register
     */
    inline void set_VAD0_CTRL_2(bool VADFRENDIS, bool VADPREFEN,
                                bool VADFOUTDIS, uint8_t VADFRAMET,
                                uint8_t VADINPGAIN,
                                PDM_VAD0_CTRL_2_VADHPF VADHPF) volatile
    {
        uint32_t curr = VAD0_CTRL_2;

        curr &= ~(0b1u << 31u);
        curr |= (VADFRENDIS & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (VADPREFEN & 0b1u) << 30u;
        curr &= ~(0b1u << 28u);
        curr |= (VADFOUTDIS & 0b1u) << 28u;
        curr &= ~(0b111111u << 16u);
        curr |= (VADFRAMET & 0b111111u) << 16u;
        curr &= ~(0b1111u << 8u);
        curr |= (VADINPGAIN & 0b1111u) << 8u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(VADHPF) & 0b11u) << 0u;

        VAD0_CTRL_2 = curr;
    }

    /**
     * Get VAD0_STAT's VADINITF bit.
     *
     * Voice Activity Detector Initialization Flag
     */
    inline bool get_VAD0_STAT_VADINITF() volatile
    {
        return VAD0_STAT & (1u << 31u);
    }

    /**
     * Get VAD0_STAT's VADINSATF bit.
     *
     * Voice Activity Detector Input Saturation Flag
     */
    inline bool get_VAD0_STAT_VADINSATF() volatile
    {
        return VAD0_STAT & (1u << 16u);
    }

    /**
     * Set VAD0_STAT's VADINSATF bit.
     *
     * Voice Activity Detector Input Saturation Flag
     */
    inline void set_VAD0_STAT_VADINSATF() volatile
    {
        VAD0_STAT |= 1u << 16u;
    }

    /**
     * Clear VAD0_STAT's VADINSATF bit.
     *
     * Voice Activity Detector Input Saturation Flag
     */
    inline void clear_VAD0_STAT_VADINSATF() volatile
    {
        VAD0_STAT &= ~(1u << 16u);
    }

    /**
     * Toggle VAD0_STAT's VADINSATF bit.
     *
     * Voice Activity Detector Input Saturation Flag
     */
    inline void toggle_VAD0_STAT_VADINSATF() volatile
    {
        VAD0_STAT ^= 1u << 16u;
    }

    /**
     * Get VAD0_STAT's VADEF bit.
     *
     * Voice Activity Detector Event Flag
     */
    inline bool get_VAD0_STAT_VADEF() volatile
    {
        return VAD0_STAT & (1u << 15u);
    }

    /**
     * Get VAD0_STAT's VADIF bit.
     *
     * Voice Activity Detector Interrupt Flag
     */
    inline bool get_VAD0_STAT_VADIF() volatile
    {
        return VAD0_STAT & (1u << 0u);
    }

    /**
     * Set VAD0_STAT's VADIF bit.
     *
     * Voice Activity Detector Interrupt Flag
     */
    inline void set_VAD0_STAT_VADIF() volatile
    {
        VAD0_STAT |= 1u << 0u;
    }

    /**
     * Clear VAD0_STAT's VADIF bit.
     *
     * Voice Activity Detector Interrupt Flag
     */
    inline void clear_VAD0_STAT_VADIF() volatile
    {
        VAD0_STAT &= ~(1u << 0u);
    }

    /**
     * Toggle VAD0_STAT's VADIF bit.
     *
     * Voice Activity Detector Interrupt Flag
     */
    inline void toggle_VAD0_STAT_VADIF() volatile
    {
        VAD0_STAT ^= 1u << 0u;
    }

    /**
     * Get all of VAD0_STAT's bit fields.
     *
     * (read-write) Voice Activity Detector 0 Status register
     */
    inline void get_VAD0_STAT(bool &VADINITF, bool &VADINSATF, bool &VADEF,
                              bool &VADIF) volatile
    {
        uint32_t curr = VAD0_STAT;

        VADINITF = curr & (1u << 31u);
        VADINSATF = curr & (1u << 16u);
        VADEF = curr & (1u << 15u);
        VADIF = curr & (1u << 0u);
    }

    /**
     * Set all of VAD0_STAT's bit fields.
     *
     * (read-write) Voice Activity Detector 0 Status register
     */
    inline void set_VAD0_STAT(bool VADINSATF, bool VADIF) volatile
    {
        uint32_t curr = VAD0_STAT;

        curr &= ~(0b1u << 16u);
        curr |= (VADINSATF & 0b1u) << 16u;
        curr &= ~(0b1u << 0u);
        curr |= (VADIF & 0b1u) << 0u;

        VAD0_STAT = curr;
    }

    /**
     * Get VAD0_SCONFIG's VADSFILEN bit.
     *
     * Voice Activity Detector Signal Filter Enable
     */
    inline bool get_VAD0_SCONFIG_VADSFILEN() volatile
    {
        return VAD0_SCONFIG & (1u << 31u);
    }

    /**
     * Set VAD0_SCONFIG's VADSFILEN bit.
     *
     * Voice Activity Detector Signal Filter Enable
     */
    inline void set_VAD0_SCONFIG_VADSFILEN() volatile
    {
        VAD0_SCONFIG |= 1u << 31u;
    }

    /**
     * Clear VAD0_SCONFIG's VADSFILEN bit.
     *
     * Voice Activity Detector Signal Filter Enable
     */
    inline void clear_VAD0_SCONFIG_VADSFILEN() volatile
    {
        VAD0_SCONFIG &= ~(1u << 31u);
    }

    /**
     * Toggle VAD0_SCONFIG's VADSFILEN bit.
     *
     * Voice Activity Detector Signal Filter Enable
     */
    inline void toggle_VAD0_SCONFIG_VADSFILEN() volatile
    {
        VAD0_SCONFIG ^= 1u << 31u;
    }

    /**
     * Get VAD0_SCONFIG's VADSMAXEN bit.
     *
     * Voice Activity Detector Signal Maximum Enable
     */
    inline bool get_VAD0_SCONFIG_VADSMAXEN() volatile
    {
        return VAD0_SCONFIG & (1u << 30u);
    }

    /**
     * Set VAD0_SCONFIG's VADSMAXEN bit.
     *
     * Voice Activity Detector Signal Maximum Enable
     */
    inline void set_VAD0_SCONFIG_VADSMAXEN() volatile
    {
        VAD0_SCONFIG |= 1u << 30u;
    }

    /**
     * Clear VAD0_SCONFIG's VADSMAXEN bit.
     *
     * Voice Activity Detector Signal Maximum Enable
     */
    inline void clear_VAD0_SCONFIG_VADSMAXEN() volatile
    {
        VAD0_SCONFIG &= ~(1u << 30u);
    }

    /**
     * Toggle VAD0_SCONFIG's VADSMAXEN bit.
     *
     * Voice Activity Detector Signal Maximum Enable
     */
    inline void toggle_VAD0_SCONFIG_VADSMAXEN() volatile
    {
        VAD0_SCONFIG ^= 1u << 30u;
    }

    /**
     * Get VAD0_SCONFIG's VADSGAIN field.
     *
     * Voice Activity Detector Signal Gain
     */
    inline uint8_t get_VAD0_SCONFIG_VADSGAIN() volatile
    {
        return (VAD0_SCONFIG >> 0u) & 0b1111u;
    }

    /**
     * Set VAD0_SCONFIG's VADSGAIN field.
     *
     * Voice Activity Detector Signal Gain
     */
    inline void set_VAD0_SCONFIG_VADSGAIN(uint8_t value) volatile
    {
        uint32_t curr = VAD0_SCONFIG;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        VAD0_SCONFIG = curr;
    }

    /**
     * Get all of VAD0_SCONFIG's bit fields.
     *
     * (read-write) Voice Activity Detector 0 Signal Configuration
     */
    inline void get_VAD0_SCONFIG(bool &VADSFILEN, bool &VADSMAXEN,
                                 uint8_t &VADSGAIN) volatile
    {
        uint32_t curr = VAD0_SCONFIG;

        VADSFILEN = curr & (1u << 31u);
        VADSMAXEN = curr & (1u << 30u);
        VADSGAIN = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of VAD0_SCONFIG's bit fields.
     *
     * (read-write) Voice Activity Detector 0 Signal Configuration
     */
    inline void set_VAD0_SCONFIG(bool VADSFILEN, bool VADSMAXEN,
                                 uint8_t VADSGAIN) volatile
    {
        uint32_t curr = VAD0_SCONFIG;

        curr &= ~(0b1u << 31u);
        curr |= (VADSFILEN & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (VADSMAXEN & 0b1u) << 30u;
        curr &= ~(0b1111u << 0u);
        curr |= (VADSGAIN & 0b1111u) << 0u;

        VAD0_SCONFIG = curr;
    }

    /**
     * Get VAD0_NCONFIG's VADNFILAUTO bit.
     *
     * Voice Activity Detector Noise Filter Auto
     */
    inline bool get_VAD0_NCONFIG_VADNFILAUTO() volatile
    {
        return VAD0_NCONFIG & (1u << 31u);
    }

    /**
     * Set VAD0_NCONFIG's VADNFILAUTO bit.
     *
     * Voice Activity Detector Noise Filter Auto
     */
    inline void set_VAD0_NCONFIG_VADNFILAUTO() volatile
    {
        VAD0_NCONFIG |= 1u << 31u;
    }

    /**
     * Clear VAD0_NCONFIG's VADNFILAUTO bit.
     *
     * Voice Activity Detector Noise Filter Auto
     */
    inline void clear_VAD0_NCONFIG_VADNFILAUTO() volatile
    {
        VAD0_NCONFIG &= ~(1u << 31u);
    }

    /**
     * Toggle VAD0_NCONFIG's VADNFILAUTO bit.
     *
     * Voice Activity Detector Noise Filter Auto
     */
    inline void toggle_VAD0_NCONFIG_VADNFILAUTO() volatile
    {
        VAD0_NCONFIG ^= 1u << 31u;
    }

    /**
     * Get VAD0_NCONFIG's VADNMINEN bit.
     *
     * Voice Activity Detector Noise Minimum Enable
     */
    inline bool get_VAD0_NCONFIG_VADNMINEN() volatile
    {
        return VAD0_NCONFIG & (1u << 30u);
    }

    /**
     * Set VAD0_NCONFIG's VADNMINEN bit.
     *
     * Voice Activity Detector Noise Minimum Enable
     */
    inline void set_VAD0_NCONFIG_VADNMINEN() volatile
    {
        VAD0_NCONFIG |= 1u << 30u;
    }

    /**
     * Clear VAD0_NCONFIG's VADNMINEN bit.
     *
     * Voice Activity Detector Noise Minimum Enable
     */
    inline void clear_VAD0_NCONFIG_VADNMINEN() volatile
    {
        VAD0_NCONFIG &= ~(1u << 30u);
    }

    /**
     * Toggle VAD0_NCONFIG's VADNMINEN bit.
     *
     * Voice Activity Detector Noise Minimum Enable
     */
    inline void toggle_VAD0_NCONFIG_VADNMINEN() volatile
    {
        VAD0_NCONFIG ^= 1u << 30u;
    }

    /**
     * Get VAD0_NCONFIG's VADNDECEN bit.
     *
     * Voice Activity Detector Noise Decimation Enable
     */
    inline bool get_VAD0_NCONFIG_VADNDECEN() volatile
    {
        return VAD0_NCONFIG & (1u << 29u);
    }

    /**
     * Set VAD0_NCONFIG's VADNDECEN bit.
     *
     * Voice Activity Detector Noise Decimation Enable
     */
    inline void set_VAD0_NCONFIG_VADNDECEN() volatile
    {
        VAD0_NCONFIG |= 1u << 29u;
    }

    /**
     * Clear VAD0_NCONFIG's VADNDECEN bit.
     *
     * Voice Activity Detector Noise Decimation Enable
     */
    inline void clear_VAD0_NCONFIG_VADNDECEN() volatile
    {
        VAD0_NCONFIG &= ~(1u << 29u);
    }

    /**
     * Toggle VAD0_NCONFIG's VADNDECEN bit.
     *
     * Voice Activity Detector Noise Decimation Enable
     */
    inline void toggle_VAD0_NCONFIG_VADNDECEN() volatile
    {
        VAD0_NCONFIG ^= 1u << 29u;
    }

    /**
     * Get VAD0_NCONFIG's VADNOREN bit.
     *
     * Voice Activity Detector Noise OR Enable
     */
    inline bool get_VAD0_NCONFIG_VADNOREN() volatile
    {
        return VAD0_NCONFIG & (1u << 28u);
    }

    /**
     * Set VAD0_NCONFIG's VADNOREN bit.
     *
     * Voice Activity Detector Noise OR Enable
     */
    inline void set_VAD0_NCONFIG_VADNOREN() volatile
    {
        VAD0_NCONFIG |= 1u << 28u;
    }

    /**
     * Clear VAD0_NCONFIG's VADNOREN bit.
     *
     * Voice Activity Detector Noise OR Enable
     */
    inline void clear_VAD0_NCONFIG_VADNOREN() volatile
    {
        VAD0_NCONFIG &= ~(1u << 28u);
    }

    /**
     * Toggle VAD0_NCONFIG's VADNOREN bit.
     *
     * Voice Activity Detector Noise OR Enable
     */
    inline void toggle_VAD0_NCONFIG_VADNOREN() volatile
    {
        VAD0_NCONFIG ^= 1u << 28u;
    }

    /**
     * Get VAD0_NCONFIG's VADNFILADJ field.
     *
     * Voice Activity Detector Noise Filter Adjustment
     */
    inline uint8_t get_VAD0_NCONFIG_VADNFILADJ() volatile
    {
        return (VAD0_NCONFIG >> 8u) & 0b11111u;
    }

    /**
     * Set VAD0_NCONFIG's VADNFILADJ field.
     *
     * Voice Activity Detector Noise Filter Adjustment
     */
    inline void set_VAD0_NCONFIG_VADNFILADJ(uint8_t value) volatile
    {
        uint32_t curr = VAD0_NCONFIG;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        VAD0_NCONFIG = curr;
    }

    /**
     * Get VAD0_NCONFIG's VADNGAIN field.
     *
     * Voice Activity Detector Noise Gain
     */
    inline uint8_t get_VAD0_NCONFIG_VADNGAIN() volatile
    {
        return (VAD0_NCONFIG >> 0u) & 0b1111u;
    }

    /**
     * Set VAD0_NCONFIG's VADNGAIN field.
     *
     * Voice Activity Detector Noise Gain
     */
    inline void set_VAD0_NCONFIG_VADNGAIN(uint8_t value) volatile
    {
        uint32_t curr = VAD0_NCONFIG;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        VAD0_NCONFIG = curr;
    }

    /**
     * Get all of VAD0_NCONFIG's bit fields.
     *
     * (read-write) Voice Activity Detector 0 Noise Configuration
     */
    inline void get_VAD0_NCONFIG(bool &VADNFILAUTO, bool &VADNMINEN,
                                 bool &VADNDECEN, bool &VADNOREN,
                                 uint8_t &VADNFILADJ,
                                 uint8_t &VADNGAIN) volatile
    {
        uint32_t curr = VAD0_NCONFIG;

        VADNFILAUTO = curr & (1u << 31u);
        VADNMINEN = curr & (1u << 30u);
        VADNDECEN = curr & (1u << 29u);
        VADNOREN = curr & (1u << 28u);
        VADNFILADJ = (curr >> 8u) & 0b11111u;
        VADNGAIN = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of VAD0_NCONFIG's bit fields.
     *
     * (read-write) Voice Activity Detector 0 Noise Configuration
     */
    inline void set_VAD0_NCONFIG(bool VADNFILAUTO, bool VADNMINEN,
                                 bool VADNDECEN, bool VADNOREN,
                                 uint8_t VADNFILADJ, uint8_t VADNGAIN) volatile
    {
        uint32_t curr = VAD0_NCONFIG;

        curr &= ~(0b1u << 31u);
        curr |= (VADNFILAUTO & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (VADNMINEN & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (VADNDECEN & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (VADNOREN & 0b1u) << 28u;
        curr &= ~(0b11111u << 8u);
        curr |= (VADNFILADJ & 0b11111u) << 8u;
        curr &= ~(0b1111u << 0u);
        curr |= (VADNGAIN & 0b1111u) << 0u;

        VAD0_NCONFIG = curr;
    }

    /**
     * Get VAD0_NDATA's VADNDATA field.
     *
     * Voice Activity Detector Noise Data
     */
    inline uint16_t get_VAD0_NDATA_VADNDATA() volatile
    {
        return (VAD0_NDATA >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get VAD0_ZCD's VADZCDTH field.
     *
     * Zero-Crossing Detector Threshold
     */
    inline uint16_t get_VAD0_ZCD_VADZCDTH() volatile
    {
        return (VAD0_ZCD >> 16u) & 0b1111111111u;
    }

    /**
     * Set VAD0_ZCD's VADZCDTH field.
     *
     * Zero-Crossing Detector Threshold
     */
    inline void set_VAD0_ZCD_VADZCDTH(uint16_t value) volatile
    {
        uint32_t curr = VAD0_ZCD;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        VAD0_ZCD = curr;
    }

    /**
     * Get VAD0_ZCD's VADZCDADJ field.
     *
     * Zero-Crossing Detector Adjustment
     */
    inline uint8_t get_VAD0_ZCD_VADZCDADJ() volatile
    {
        return (VAD0_ZCD >> 8u) & 0b1111u;
    }

    /**
     * Set VAD0_ZCD's VADZCDADJ field.
     *
     * Zero-Crossing Detector Adjustment
     */
    inline void set_VAD0_ZCD_VADZCDADJ(uint8_t value) volatile
    {
        uint32_t curr = VAD0_ZCD;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        VAD0_ZCD = curr;
    }

    /**
     * Get VAD0_ZCD's VADZCDAND bit.
     *
     * Zero-Crossing Detector AND Behavior
     */
    inline bool get_VAD0_ZCD_VADZCDAND() volatile
    {
        return VAD0_ZCD & (1u << 4u);
    }

    /**
     * Set VAD0_ZCD's VADZCDAND bit.
     *
     * Zero-Crossing Detector AND Behavior
     */
    inline void set_VAD0_ZCD_VADZCDAND() volatile
    {
        VAD0_ZCD |= 1u << 4u;
    }

    /**
     * Clear VAD0_ZCD's VADZCDAND bit.
     *
     * Zero-Crossing Detector AND Behavior
     */
    inline void clear_VAD0_ZCD_VADZCDAND() volatile
    {
        VAD0_ZCD &= ~(1u << 4u);
    }

    /**
     * Toggle VAD0_ZCD's VADZCDAND bit.
     *
     * Zero-Crossing Detector AND Behavior
     */
    inline void toggle_VAD0_ZCD_VADZCDAND() volatile
    {
        VAD0_ZCD ^= 1u << 4u;
    }

    /**
     * Get VAD0_ZCD's VADZCDAUTO bit.
     *
     * Zero-Crossing Detector Automatic Threshold
     */
    inline bool get_VAD0_ZCD_VADZCDAUTO() volatile
    {
        return VAD0_ZCD & (1u << 2u);
    }

    /**
     * Set VAD0_ZCD's VADZCDAUTO bit.
     *
     * Zero-Crossing Detector Automatic Threshold
     */
    inline void set_VAD0_ZCD_VADZCDAUTO() volatile
    {
        VAD0_ZCD |= 1u << 2u;
    }

    /**
     * Clear VAD0_ZCD's VADZCDAUTO bit.
     *
     * Zero-Crossing Detector Automatic Threshold
     */
    inline void clear_VAD0_ZCD_VADZCDAUTO() volatile
    {
        VAD0_ZCD &= ~(1u << 2u);
    }

    /**
     * Toggle VAD0_ZCD's VADZCDAUTO bit.
     *
     * Zero-Crossing Detector Automatic Threshold
     */
    inline void toggle_VAD0_ZCD_VADZCDAUTO() volatile
    {
        VAD0_ZCD ^= 1u << 2u;
    }

    /**
     * Get VAD0_ZCD's VADZCDEN bit.
     *
     * Zero-Crossing Detector Enable
     */
    inline bool get_VAD0_ZCD_VADZCDEN() volatile
    {
        return VAD0_ZCD & (1u << 0u);
    }

    /**
     * Set VAD0_ZCD's VADZCDEN bit.
     *
     * Zero-Crossing Detector Enable
     */
    inline void set_VAD0_ZCD_VADZCDEN() volatile
    {
        VAD0_ZCD |= 1u << 0u;
    }

    /**
     * Clear VAD0_ZCD's VADZCDEN bit.
     *
     * Zero-Crossing Detector Enable
     */
    inline void clear_VAD0_ZCD_VADZCDEN() volatile
    {
        VAD0_ZCD &= ~(1u << 0u);
    }

    /**
     * Toggle VAD0_ZCD's VADZCDEN bit.
     *
     * Zero-Crossing Detector Enable
     */
    inline void toggle_VAD0_ZCD_VADZCDEN() volatile
    {
        VAD0_ZCD ^= 1u << 0u;
    }

    /**
     * Get all of VAD0_ZCD's bit fields.
     *
     * (read-write) Voice Activity Detector 0 Zero-Crossing Detector
     */
    inline void get_VAD0_ZCD(uint16_t &VADZCDTH, uint8_t &VADZCDADJ,
                             bool &VADZCDAND, bool &VADZCDAUTO,
                             bool &VADZCDEN) volatile
    {
        uint32_t curr = VAD0_ZCD;

        VADZCDTH = (curr >> 16u) & 0b1111111111u;
        VADZCDADJ = (curr >> 8u) & 0b1111u;
        VADZCDAND = curr & (1u << 4u);
        VADZCDAUTO = curr & (1u << 2u);
        VADZCDEN = curr & (1u << 0u);
    }

    /**
     * Set all of VAD0_ZCD's bit fields.
     *
     * (read-write) Voice Activity Detector 0 Zero-Crossing Detector
     */
    inline void set_VAD0_ZCD(uint16_t VADZCDTH, uint8_t VADZCDADJ,
                             bool VADZCDAND, bool VADZCDAUTO,
                             bool VADZCDEN) volatile
    {
        uint32_t curr = VAD0_ZCD;

        curr &= ~(0b1111111111u << 16u);
        curr |= (VADZCDTH & 0b1111111111u) << 16u;
        curr &= ~(0b1111u << 8u);
        curr |= (VADZCDADJ & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (VADZCDAND & 0b1u) << 4u;
        curr &= ~(0b1u << 2u);
        curr |= (VADZCDAUTO & 0b1u) << 2u;
        curr &= ~(0b1u << 0u);
        curr |= (VADZCDEN & 0b1u) << 0u;

        VAD0_ZCD = curr;
    }
};

static_assert(sizeof(pdm) == pdm::size);

static volatile pdm *const PDM = reinterpret_cast<pdm *>(0x40C20000);

}; // namespace MIMXRT1176::CM7
