/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * MECC64
 */
struct [[gnu::packed]] mecc1
{
    /* Constant attributes. */
    static constexpr std::size_t size = 264; /*!< mecc1's size in bytes. */

    /* Fields. */
    uint32_t ERR_STATUS;  /*!< (read-write) Error Interrupt Status Register */
    uint32_t ERR_STAT_EN; /*!< (read-write) Error Interrupt Status Enable
                             Register */
    uint32_t ERR_SIG_EN;  /*!< (read-write) Error Interrupt Enable Register */
    uint32_t ERR_DATA_INJ_LOW0;  /*!< (read-write) Error Injection On LOW 32
                                    bits Of OCRAM Bank0 Write Data */
    uint32_t ERR_DATA_INJ_HIGH0; /*!< (read-write) Error Injection On HIGH 32
                                    bits Of OCRAM Bank0 Write Data */
    uint32_t ERR_ECC_INJ0; /*!< (read-write) Error Injection On 8 bits ECC code
                              Of OCRAM Bank0 Write Data */
    uint32_t ERR_DATA_INJ_LOW1;  /*!< (read-write) Error Injection On LOW 32
                                    bits Of OCRAM Bank1 Write Data */
    uint32_t ERR_DATA_INJ_HIGH1; /*!< (read-write) Error Injection On HIGH 32
                                    bits Of OCRAM Bank1 Write Data */
    uint32_t ERR_ECC_INJ1; /*!< (read-write) Error Injection On 8 bits ECC code
                              Of OCRAM Bank1 Write Data */
    uint32_t ERR_DATA_INJ_LOW2;  /*!< (read-write) Error Injection On LOW 32
                                    bits Of OCRAM Bank2 Write Data */
    uint32_t ERR_DATA_INJ_HIGH2; /*!< (read-write) Error Injection On HIGH 32
                                    bits Of OCRAM Bank2 Write Data */
    uint32_t ERR_ECC_INJ2; /*!< (read-write) Error Injection On 8 bits ECC code
                              Of OCRAM Bank2 Write Data */
    uint32_t ERR_DATA_INJ_LOW3;  /*!< (read-write) Error Injection On LOW 32
                                    bits Of OCRAM Bank3 Write Data */
    uint32_t ERR_DATA_INJ_HIGH3; /*!< (read-write) Error Injection On HIGH 32
                                    bits Of OCRAM Bank3 Write Data */
    uint32_t ERR_ECC_INJ3; /*!< (read-write) Error Injection On 8 bits ECC code
                              Of OCRAM Bank3 Write Data */
    uint32_t SINGLE_ERR_ADDR_ECC0;  /*!< (read-write) Single Error Address And
                                       ECC code On OCRAM Bank0 */
    uint32_t SINGLE_ERR_DATA_LOW0;  /*!< (read-write) LOW 32 Bits Single Error
                                       Read Data On OCRAM Bank0 */
    uint32_t SINGLE_ERR_DATA_HIGH0; /*!< (read-write) HIGH 32 Bits Single Error
                                       Read Data On OCRAM Bank0 */
    uint32_t SINGLE_ERR_POS_LOW0;   /*!< (read-write) LOW Single Error Bit
                                       Position On OCRAM Bank0 */
    uint32_t SINGLE_ERR_POS_HIGH0;  /*!< (read-write) HIGH Single Error Bit
                                       Position On OCRAM Bank0 */
    uint32_t SINGLE_ERR_ADDR_ECC1;  /*!< (read-write) Single Error Address And
                                       ECC code On OCRAM Bank1 */
    uint32_t SINGLE_ERR_DATA_LOW1;  /*!< (read-write) LOW 32 Bits Single Error
                                       Read Data On OCRAM Bank1 */
    uint32_t SINGLE_ERR_DATA_HIGH1; /*!< (read-write) HIGH 32 Bits Single Error
                                       Read Data On OCRAM Bank1 */
    uint32_t SINGLE_ERR_POS_LOW1;   /*!< (read-write) LOW Single Error Bit
                                       Position On OCRAM Bank1 */
    uint32_t SINGLE_ERR_POS_HIGH1;  /*!< (read-write) HIGH Single Error Bit
                                       Position On OCRAM Bank1 */
    uint32_t SINGLE_ERR_ADDR_ECC2;  /*!< (read-write) Single Error Address And
                                       ECC code On OCRAM Bank2 */
    uint32_t SINGLE_ERR_DATA_LOW2;  /*!< (read-write) LOW 32 Bits Single Error
                                       Read Data On OCRAM Bank2 */
    uint32_t SINGLE_ERR_DATA_HIGH2; /*!< (read-write) HIGH 32 Bits Single Error
                                       Read Data On OCRAM Bank2 */
    uint32_t SINGLE_ERR_POS_LOW2;   /*!< (read-write) LOW Single Error Bit
                                       Position On OCRAM Bank2 */
    uint32_t SINGLE_ERR_POS_HIGH2;  /*!< (read-write) HIGH Single Error Bit
                                       Position On OCRAM Bank2 */
    uint32_t SINGLE_ERR_ADDR_ECC3;  /*!< (read-write) Single Error Address And
                                       ECC code On OCRAM Bank3 */
    uint32_t SINGLE_ERR_DATA_LOW3;  /*!< (read-write) LOW 32 Bits Single Error
                                       Read Data On OCRAM Bank3 */
    uint32_t SINGLE_ERR_DATA_HIGH3; /*!< (read-write) HIGH 32 Bits Single Error
                                       Read Data On OCRAM Bank3 */
    uint32_t SINGLE_ERR_POS_LOW3;   /*!< (read-write) LOW Single Error Bit
                                       Position On OCRAM Bank3 */
    uint32_t SINGLE_ERR_POS_HIGH3;  /*!< (read-write) HIGH Single Error Bit
                                       Position On OCRAM Bank3 */
    uint32_t MULTI_ERR_ADDR_ECC0;  /*!< (read-write) Multiple Error Address And
                                      ECC code On OCRAM Bank0 */
    uint32_t MULTI_ERR_DATA_LOW0;  /*!< (read-write) LOW 32 Bits Multiple Error
                                      Read Data On OCRAM Bank0 */
    uint32_t MULTI_ERR_DATA_HIGH0; /*!< (read-write) HIGH 32 Bits Multiple
                                      Error Read Data On OCRAM Bank0 */
    uint32_t MULTI_ERR_ADDR_ECC1;  /*!< (read-write) Multiple Error Address And
                                      ECC code On OCRAM Bank1 */
    uint32_t MULTI_ERR_DATA_LOW1;  /*!< (read-write) LOW 32 Bits Multiple Error
                                      Read Data On OCRAM Bank1 */
    uint32_t MULTI_ERR_DATA_HIGH1; /*!< (read-write) HIGH 32 Bits Multiple
                                      Error Read Data On OCRAM Bank1 */
    uint32_t MULTI_ERR_ADDR_ECC2;  /*!< (read-write) Multiple Error Address And
                                      ECC code On OCRAM Bank2 */
    uint32_t MULTI_ERR_DATA_LOW2;  /*!< (read-write) LOW 32 Bits Multiple Error
                                      Read Data On OCRAM Bank2 */
    uint32_t MULTI_ERR_DATA_HIGH2; /*!< (read-write) HIGH 32 Bits Multiple
                                      Error Read Data On OCRAM Bank2 */
    uint32_t MULTI_ERR_ADDR_ECC3;  /*!< (read-write) Multiple Error Address And
                                      ECC code On OCRAM Bank3 */
    uint32_t MULTI_ERR_DATA_LOW3;  /*!< (read-write) LOW 32 Bits Multiple Error
                                      Read Data On OCRAM Bank3 */
    uint32_t MULTI_ERR_DATA_HIGH3; /*!< (read-write) HIGH 32 Bits Multiple
                                      Error Read Data On OCRAM Bank3 */
    static constexpr std::size_t reserved_padding0_length = 17;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t PIPE_ECC_EN;  /*!< (read-write) OCRAM Pipeline And ECC Enable */
    uint32_t PENDING_STAT; /*!< (read-write) Pending Status */

    /* Methods. */

    /**
     * Get ERR_STATUS's ADDR_ERR3 bit.
     *
     * OCRAM Access Error On Bank3
     */
    inline bool get_ERR_STATUS_ADDR_ERR3() volatile
    {
        return ERR_STATUS & (1u << 15u);
    }

    /**
     * Set ERR_STATUS's ADDR_ERR3 bit.
     *
     * OCRAM Access Error On Bank3
     */
    inline void set_ERR_STATUS_ADDR_ERR3() volatile
    {
        ERR_STATUS |= 1u << 15u;
    }

    /**
     * Clear ERR_STATUS's ADDR_ERR3 bit.
     *
     * OCRAM Access Error On Bank3
     */
    inline void clear_ERR_STATUS_ADDR_ERR3() volatile
    {
        ERR_STATUS &= ~(1u << 15u);
    }

    /**
     * Toggle ERR_STATUS's ADDR_ERR3 bit.
     *
     * OCRAM Access Error On Bank3
     */
    inline void toggle_ERR_STATUS_ADDR_ERR3() volatile
    {
        ERR_STATUS ^= 1u << 15u;
    }

    /**
     * Get ERR_STATUS's ADDR_ERR2 bit.
     *
     * OCRAM Access Error On Bank2
     */
    inline bool get_ERR_STATUS_ADDR_ERR2() volatile
    {
        return ERR_STATUS & (1u << 14u);
    }

    /**
     * Set ERR_STATUS's ADDR_ERR2 bit.
     *
     * OCRAM Access Error On Bank2
     */
    inline void set_ERR_STATUS_ADDR_ERR2() volatile
    {
        ERR_STATUS |= 1u << 14u;
    }

    /**
     * Clear ERR_STATUS's ADDR_ERR2 bit.
     *
     * OCRAM Access Error On Bank2
     */
    inline void clear_ERR_STATUS_ADDR_ERR2() volatile
    {
        ERR_STATUS &= ~(1u << 14u);
    }

    /**
     * Toggle ERR_STATUS's ADDR_ERR2 bit.
     *
     * OCRAM Access Error On Bank2
     */
    inline void toggle_ERR_STATUS_ADDR_ERR2() volatile
    {
        ERR_STATUS ^= 1u << 14u;
    }

    /**
     * Get ERR_STATUS's ADDR_ERR1 bit.
     *
     * OCRAM Access Error On Bank1
     */
    inline bool get_ERR_STATUS_ADDR_ERR1() volatile
    {
        return ERR_STATUS & (1u << 13u);
    }

    /**
     * Set ERR_STATUS's ADDR_ERR1 bit.
     *
     * OCRAM Access Error On Bank1
     */
    inline void set_ERR_STATUS_ADDR_ERR1() volatile
    {
        ERR_STATUS |= 1u << 13u;
    }

    /**
     * Clear ERR_STATUS's ADDR_ERR1 bit.
     *
     * OCRAM Access Error On Bank1
     */
    inline void clear_ERR_STATUS_ADDR_ERR1() volatile
    {
        ERR_STATUS &= ~(1u << 13u);
    }

    /**
     * Toggle ERR_STATUS's ADDR_ERR1 bit.
     *
     * OCRAM Access Error On Bank1
     */
    inline void toggle_ERR_STATUS_ADDR_ERR1() volatile
    {
        ERR_STATUS ^= 1u << 13u;
    }

    /**
     * Get ERR_STATUS's ADDR_ERR0 bit.
     *
     * OCRAM Access Error On Bank0
     */
    inline bool get_ERR_STATUS_ADDR_ERR0() volatile
    {
        return ERR_STATUS & (1u << 12u);
    }

    /**
     * Set ERR_STATUS's ADDR_ERR0 bit.
     *
     * OCRAM Access Error On Bank0
     */
    inline void set_ERR_STATUS_ADDR_ERR0() volatile
    {
        ERR_STATUS |= 1u << 12u;
    }

    /**
     * Clear ERR_STATUS's ADDR_ERR0 bit.
     *
     * OCRAM Access Error On Bank0
     */
    inline void clear_ERR_STATUS_ADDR_ERR0() volatile
    {
        ERR_STATUS &= ~(1u << 12u);
    }

    /**
     * Toggle ERR_STATUS's ADDR_ERR0 bit.
     *
     * OCRAM Access Error On Bank0
     */
    inline void toggle_ERR_STATUS_ADDR_ERR0() volatile
    {
        ERR_STATUS ^= 1u << 12u;
    }

    /**
     * Get ERR_STATUS's STRB_ERR3 bit.
     *
     * AXI Strobe Error On OCRAM Bank3
     */
    inline bool get_ERR_STATUS_STRB_ERR3() volatile
    {
        return ERR_STATUS & (1u << 11u);
    }

    /**
     * Set ERR_STATUS's STRB_ERR3 bit.
     *
     * AXI Strobe Error On OCRAM Bank3
     */
    inline void set_ERR_STATUS_STRB_ERR3() volatile
    {
        ERR_STATUS |= 1u << 11u;
    }

    /**
     * Clear ERR_STATUS's STRB_ERR3 bit.
     *
     * AXI Strobe Error On OCRAM Bank3
     */
    inline void clear_ERR_STATUS_STRB_ERR3() volatile
    {
        ERR_STATUS &= ~(1u << 11u);
    }

    /**
     * Toggle ERR_STATUS's STRB_ERR3 bit.
     *
     * AXI Strobe Error On OCRAM Bank3
     */
    inline void toggle_ERR_STATUS_STRB_ERR3() volatile
    {
        ERR_STATUS ^= 1u << 11u;
    }

    /**
     * Get ERR_STATUS's STRB_ERR2 bit.
     *
     * AXI Strobe Error On OCRAM Bank2
     */
    inline bool get_ERR_STATUS_STRB_ERR2() volatile
    {
        return ERR_STATUS & (1u << 10u);
    }

    /**
     * Set ERR_STATUS's STRB_ERR2 bit.
     *
     * AXI Strobe Error On OCRAM Bank2
     */
    inline void set_ERR_STATUS_STRB_ERR2() volatile
    {
        ERR_STATUS |= 1u << 10u;
    }

    /**
     * Clear ERR_STATUS's STRB_ERR2 bit.
     *
     * AXI Strobe Error On OCRAM Bank2
     */
    inline void clear_ERR_STATUS_STRB_ERR2() volatile
    {
        ERR_STATUS &= ~(1u << 10u);
    }

    /**
     * Toggle ERR_STATUS's STRB_ERR2 bit.
     *
     * AXI Strobe Error On OCRAM Bank2
     */
    inline void toggle_ERR_STATUS_STRB_ERR2() volatile
    {
        ERR_STATUS ^= 1u << 10u;
    }

    /**
     * Get ERR_STATUS's STRB_ERR1 bit.
     *
     * AXI Strobe Error On OCRAM Bank1
     */
    inline bool get_ERR_STATUS_STRB_ERR1() volatile
    {
        return ERR_STATUS & (1u << 9u);
    }

    /**
     * Set ERR_STATUS's STRB_ERR1 bit.
     *
     * AXI Strobe Error On OCRAM Bank1
     */
    inline void set_ERR_STATUS_STRB_ERR1() volatile
    {
        ERR_STATUS |= 1u << 9u;
    }

    /**
     * Clear ERR_STATUS's STRB_ERR1 bit.
     *
     * AXI Strobe Error On OCRAM Bank1
     */
    inline void clear_ERR_STATUS_STRB_ERR1() volatile
    {
        ERR_STATUS &= ~(1u << 9u);
    }

    /**
     * Toggle ERR_STATUS's STRB_ERR1 bit.
     *
     * AXI Strobe Error On OCRAM Bank1
     */
    inline void toggle_ERR_STATUS_STRB_ERR1() volatile
    {
        ERR_STATUS ^= 1u << 9u;
    }

    /**
     * Get ERR_STATUS's STRB_ERR0 bit.
     *
     * AXI Strobe Error On OCRAM Bank0
     */
    inline bool get_ERR_STATUS_STRB_ERR0() volatile
    {
        return ERR_STATUS & (1u << 8u);
    }

    /**
     * Set ERR_STATUS's STRB_ERR0 bit.
     *
     * AXI Strobe Error On OCRAM Bank0
     */
    inline void set_ERR_STATUS_STRB_ERR0() volatile
    {
        ERR_STATUS |= 1u << 8u;
    }

    /**
     * Clear ERR_STATUS's STRB_ERR0 bit.
     *
     * AXI Strobe Error On OCRAM Bank0
     */
    inline void clear_ERR_STATUS_STRB_ERR0() volatile
    {
        ERR_STATUS &= ~(1u << 8u);
    }

    /**
     * Toggle ERR_STATUS's STRB_ERR0 bit.
     *
     * AXI Strobe Error On OCRAM Bank0
     */
    inline void toggle_ERR_STATUS_STRB_ERR0() volatile
    {
        ERR_STATUS ^= 1u << 8u;
    }

    /**
     * Get ERR_STATUS's MULTI_ERR3 bit.
     *
     * Multiple Bits Error On OCRAM Bank3
     */
    inline bool get_ERR_STATUS_MULTI_ERR3() volatile
    {
        return ERR_STATUS & (1u << 7u);
    }

    /**
     * Set ERR_STATUS's MULTI_ERR3 bit.
     *
     * Multiple Bits Error On OCRAM Bank3
     */
    inline void set_ERR_STATUS_MULTI_ERR3() volatile
    {
        ERR_STATUS |= 1u << 7u;
    }

    /**
     * Clear ERR_STATUS's MULTI_ERR3 bit.
     *
     * Multiple Bits Error On OCRAM Bank3
     */
    inline void clear_ERR_STATUS_MULTI_ERR3() volatile
    {
        ERR_STATUS &= ~(1u << 7u);
    }

    /**
     * Toggle ERR_STATUS's MULTI_ERR3 bit.
     *
     * Multiple Bits Error On OCRAM Bank3
     */
    inline void toggle_ERR_STATUS_MULTI_ERR3() volatile
    {
        ERR_STATUS ^= 1u << 7u;
    }

    /**
     * Get ERR_STATUS's MULTI_ERR2 bit.
     *
     * Multiple Bits Error On OCRAM Bank2
     */
    inline bool get_ERR_STATUS_MULTI_ERR2() volatile
    {
        return ERR_STATUS & (1u << 6u);
    }

    /**
     * Set ERR_STATUS's MULTI_ERR2 bit.
     *
     * Multiple Bits Error On OCRAM Bank2
     */
    inline void set_ERR_STATUS_MULTI_ERR2() volatile
    {
        ERR_STATUS |= 1u << 6u;
    }

    /**
     * Clear ERR_STATUS's MULTI_ERR2 bit.
     *
     * Multiple Bits Error On OCRAM Bank2
     */
    inline void clear_ERR_STATUS_MULTI_ERR2() volatile
    {
        ERR_STATUS &= ~(1u << 6u);
    }

    /**
     * Toggle ERR_STATUS's MULTI_ERR2 bit.
     *
     * Multiple Bits Error On OCRAM Bank2
     */
    inline void toggle_ERR_STATUS_MULTI_ERR2() volatile
    {
        ERR_STATUS ^= 1u << 6u;
    }

    /**
     * Get ERR_STATUS's MULTI_ERR1 bit.
     *
     * Multiple Bits Error On OCRAM Bank1
     */
    inline bool get_ERR_STATUS_MULTI_ERR1() volatile
    {
        return ERR_STATUS & (1u << 5u);
    }

    /**
     * Set ERR_STATUS's MULTI_ERR1 bit.
     *
     * Multiple Bits Error On OCRAM Bank1
     */
    inline void set_ERR_STATUS_MULTI_ERR1() volatile
    {
        ERR_STATUS |= 1u << 5u;
    }

    /**
     * Clear ERR_STATUS's MULTI_ERR1 bit.
     *
     * Multiple Bits Error On OCRAM Bank1
     */
    inline void clear_ERR_STATUS_MULTI_ERR1() volatile
    {
        ERR_STATUS &= ~(1u << 5u);
    }

    /**
     * Toggle ERR_STATUS's MULTI_ERR1 bit.
     *
     * Multiple Bits Error On OCRAM Bank1
     */
    inline void toggle_ERR_STATUS_MULTI_ERR1() volatile
    {
        ERR_STATUS ^= 1u << 5u;
    }

    /**
     * Get ERR_STATUS's MULTI_ERR0 bit.
     *
     * Multiple Bits Error On OCRAM Bank0
     */
    inline bool get_ERR_STATUS_MULTI_ERR0() volatile
    {
        return ERR_STATUS & (1u << 4u);
    }

    /**
     * Set ERR_STATUS's MULTI_ERR0 bit.
     *
     * Multiple Bits Error On OCRAM Bank0
     */
    inline void set_ERR_STATUS_MULTI_ERR0() volatile
    {
        ERR_STATUS |= 1u << 4u;
    }

    /**
     * Clear ERR_STATUS's MULTI_ERR0 bit.
     *
     * Multiple Bits Error On OCRAM Bank0
     */
    inline void clear_ERR_STATUS_MULTI_ERR0() volatile
    {
        ERR_STATUS &= ~(1u << 4u);
    }

    /**
     * Toggle ERR_STATUS's MULTI_ERR0 bit.
     *
     * Multiple Bits Error On OCRAM Bank0
     */
    inline void toggle_ERR_STATUS_MULTI_ERR0() volatile
    {
        ERR_STATUS ^= 1u << 4u;
    }

    /**
     * Get ERR_STATUS's SINGLE_ERR3 bit.
     *
     * Single Bit Error On OCRAM Bank3
     */
    inline bool get_ERR_STATUS_SINGLE_ERR3() volatile
    {
        return ERR_STATUS & (1u << 3u);
    }

    /**
     * Set ERR_STATUS's SINGLE_ERR3 bit.
     *
     * Single Bit Error On OCRAM Bank3
     */
    inline void set_ERR_STATUS_SINGLE_ERR3() volatile
    {
        ERR_STATUS |= 1u << 3u;
    }

    /**
     * Clear ERR_STATUS's SINGLE_ERR3 bit.
     *
     * Single Bit Error On OCRAM Bank3
     */
    inline void clear_ERR_STATUS_SINGLE_ERR3() volatile
    {
        ERR_STATUS &= ~(1u << 3u);
    }

    /**
     * Toggle ERR_STATUS's SINGLE_ERR3 bit.
     *
     * Single Bit Error On OCRAM Bank3
     */
    inline void toggle_ERR_STATUS_SINGLE_ERR3() volatile
    {
        ERR_STATUS ^= 1u << 3u;
    }

    /**
     * Get ERR_STATUS's SINGLE_ERR2 bit.
     *
     * Single Bit Error On OCRAM Bank2
     */
    inline bool get_ERR_STATUS_SINGLE_ERR2() volatile
    {
        return ERR_STATUS & (1u << 2u);
    }

    /**
     * Set ERR_STATUS's SINGLE_ERR2 bit.
     *
     * Single Bit Error On OCRAM Bank2
     */
    inline void set_ERR_STATUS_SINGLE_ERR2() volatile
    {
        ERR_STATUS |= 1u << 2u;
    }

    /**
     * Clear ERR_STATUS's SINGLE_ERR2 bit.
     *
     * Single Bit Error On OCRAM Bank2
     */
    inline void clear_ERR_STATUS_SINGLE_ERR2() volatile
    {
        ERR_STATUS &= ~(1u << 2u);
    }

    /**
     * Toggle ERR_STATUS's SINGLE_ERR2 bit.
     *
     * Single Bit Error On OCRAM Bank2
     */
    inline void toggle_ERR_STATUS_SINGLE_ERR2() volatile
    {
        ERR_STATUS ^= 1u << 2u;
    }

    /**
     * Get ERR_STATUS's SINGLE_ERR1 bit.
     *
     * Single Bit Error On OCRAM Bank1
     */
    inline bool get_ERR_STATUS_SINGLE_ERR1() volatile
    {
        return ERR_STATUS & (1u << 1u);
    }

    /**
     * Set ERR_STATUS's SINGLE_ERR1 bit.
     *
     * Single Bit Error On OCRAM Bank1
     */
    inline void set_ERR_STATUS_SINGLE_ERR1() volatile
    {
        ERR_STATUS |= 1u << 1u;
    }

    /**
     * Clear ERR_STATUS's SINGLE_ERR1 bit.
     *
     * Single Bit Error On OCRAM Bank1
     */
    inline void clear_ERR_STATUS_SINGLE_ERR1() volatile
    {
        ERR_STATUS &= ~(1u << 1u);
    }

    /**
     * Toggle ERR_STATUS's SINGLE_ERR1 bit.
     *
     * Single Bit Error On OCRAM Bank1
     */
    inline void toggle_ERR_STATUS_SINGLE_ERR1() volatile
    {
        ERR_STATUS ^= 1u << 1u;
    }

    /**
     * Get ERR_STATUS's SINGLE_ERR0 bit.
     *
     * Single Bit Error On OCRAM Bank0
     */
    inline bool get_ERR_STATUS_SINGLE_ERR0() volatile
    {
        return ERR_STATUS & (1u << 0u);
    }

    /**
     * Set ERR_STATUS's SINGLE_ERR0 bit.
     *
     * Single Bit Error On OCRAM Bank0
     */
    inline void set_ERR_STATUS_SINGLE_ERR0() volatile
    {
        ERR_STATUS |= 1u << 0u;
    }

    /**
     * Clear ERR_STATUS's SINGLE_ERR0 bit.
     *
     * Single Bit Error On OCRAM Bank0
     */
    inline void clear_ERR_STATUS_SINGLE_ERR0() volatile
    {
        ERR_STATUS &= ~(1u << 0u);
    }

    /**
     * Toggle ERR_STATUS's SINGLE_ERR0 bit.
     *
     * Single Bit Error On OCRAM Bank0
     */
    inline void toggle_ERR_STATUS_SINGLE_ERR0() volatile
    {
        ERR_STATUS ^= 1u << 0u;
    }

    /**
     * Get all of ERR_STATUS's bit fields.
     *
     * (read-write) Error Interrupt Status Register
     */
    inline void get_ERR_STATUS(bool &ADDR_ERR3, bool &ADDR_ERR2,
                               bool &ADDR_ERR1, bool &ADDR_ERR0,
                               bool &STRB_ERR3, bool &STRB_ERR2,
                               bool &STRB_ERR1, bool &STRB_ERR0,
                               bool &MULTI_ERR3, bool &MULTI_ERR2,
                               bool &MULTI_ERR1, bool &MULTI_ERR0,
                               bool &SINGLE_ERR3, bool &SINGLE_ERR2,
                               bool &SINGLE_ERR1, bool &SINGLE_ERR0) volatile
    {
        uint32_t curr = ERR_STATUS;

        ADDR_ERR3 = curr & (1u << 15u);
        ADDR_ERR2 = curr & (1u << 14u);
        ADDR_ERR1 = curr & (1u << 13u);
        ADDR_ERR0 = curr & (1u << 12u);
        STRB_ERR3 = curr & (1u << 11u);
        STRB_ERR2 = curr & (1u << 10u);
        STRB_ERR1 = curr & (1u << 9u);
        STRB_ERR0 = curr & (1u << 8u);
        MULTI_ERR3 = curr & (1u << 7u);
        MULTI_ERR2 = curr & (1u << 6u);
        MULTI_ERR1 = curr & (1u << 5u);
        MULTI_ERR0 = curr & (1u << 4u);
        SINGLE_ERR3 = curr & (1u << 3u);
        SINGLE_ERR2 = curr & (1u << 2u);
        SINGLE_ERR1 = curr & (1u << 1u);
        SINGLE_ERR0 = curr & (1u << 0u);
    }

    /**
     * Set all of ERR_STATUS's bit fields.
     *
     * (read-write) Error Interrupt Status Register
     */
    inline void set_ERR_STATUS(bool ADDR_ERR3, bool ADDR_ERR2, bool ADDR_ERR1,
                               bool ADDR_ERR0, bool STRB_ERR3, bool STRB_ERR2,
                               bool STRB_ERR1, bool STRB_ERR0, bool MULTI_ERR3,
                               bool MULTI_ERR2, bool MULTI_ERR1,
                               bool MULTI_ERR0, bool SINGLE_ERR3,
                               bool SINGLE_ERR2, bool SINGLE_ERR1,
                               bool SINGLE_ERR0) volatile
    {
        uint32_t curr = ERR_STATUS;

        curr &= ~(0b1u << 15u);
        curr |= (ADDR_ERR3 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (ADDR_ERR2 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (ADDR_ERR1 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (ADDR_ERR0 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (STRB_ERR3 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (STRB_ERR2 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (STRB_ERR1 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (STRB_ERR0 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (MULTI_ERR3 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (MULTI_ERR2 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (MULTI_ERR1 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (MULTI_ERR0 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SINGLE_ERR3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (SINGLE_ERR2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (SINGLE_ERR1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SINGLE_ERR0 & 0b1u) << 0u;

        ERR_STATUS = curr;
    }

    /**
     * Get ERR_STAT_EN's ADDR_ERR3_STAT_EN bit.
     *
     * OCRAM Access Error Status Enable On Bank3
     */
    inline bool get_ERR_STAT_EN_ADDR_ERR3_STAT_EN() volatile
    {
        return ERR_STAT_EN & (1u << 15u);
    }

    /**
     * Set ERR_STAT_EN's ADDR_ERR3_STAT_EN bit.
     *
     * OCRAM Access Error Status Enable On Bank3
     */
    inline void set_ERR_STAT_EN_ADDR_ERR3_STAT_EN() volatile
    {
        ERR_STAT_EN |= 1u << 15u;
    }

    /**
     * Clear ERR_STAT_EN's ADDR_ERR3_STAT_EN bit.
     *
     * OCRAM Access Error Status Enable On Bank3
     */
    inline void clear_ERR_STAT_EN_ADDR_ERR3_STAT_EN() volatile
    {
        ERR_STAT_EN &= ~(1u << 15u);
    }

    /**
     * Toggle ERR_STAT_EN's ADDR_ERR3_STAT_EN bit.
     *
     * OCRAM Access Error Status Enable On Bank3
     */
    inline void toggle_ERR_STAT_EN_ADDR_ERR3_STAT_EN() volatile
    {
        ERR_STAT_EN ^= 1u << 15u;
    }

    /**
     * Get ERR_STAT_EN's ADDR_ERR2_STAT_EN bit.
     *
     * OCRAM Access Error Status Enable On Bank2
     */
    inline bool get_ERR_STAT_EN_ADDR_ERR2_STAT_EN() volatile
    {
        return ERR_STAT_EN & (1u << 14u);
    }

    /**
     * Set ERR_STAT_EN's ADDR_ERR2_STAT_EN bit.
     *
     * OCRAM Access Error Status Enable On Bank2
     */
    inline void set_ERR_STAT_EN_ADDR_ERR2_STAT_EN() volatile
    {
        ERR_STAT_EN |= 1u << 14u;
    }

    /**
     * Clear ERR_STAT_EN's ADDR_ERR2_STAT_EN bit.
     *
     * OCRAM Access Error Status Enable On Bank2
     */
    inline void clear_ERR_STAT_EN_ADDR_ERR2_STAT_EN() volatile
    {
        ERR_STAT_EN &= ~(1u << 14u);
    }

    /**
     * Toggle ERR_STAT_EN's ADDR_ERR2_STAT_EN bit.
     *
     * OCRAM Access Error Status Enable On Bank2
     */
    inline void toggle_ERR_STAT_EN_ADDR_ERR2_STAT_EN() volatile
    {
        ERR_STAT_EN ^= 1u << 14u;
    }

    /**
     * Get ERR_STAT_EN's ADDR_ERR1_STAT_EN bit.
     *
     * OCRAM Access Error Status Enable On Bank1
     */
    inline bool get_ERR_STAT_EN_ADDR_ERR1_STAT_EN() volatile
    {
        return ERR_STAT_EN & (1u << 13u);
    }

    /**
     * Set ERR_STAT_EN's ADDR_ERR1_STAT_EN bit.
     *
     * OCRAM Access Error Status Enable On Bank1
     */
    inline void set_ERR_STAT_EN_ADDR_ERR1_STAT_EN() volatile
    {
        ERR_STAT_EN |= 1u << 13u;
    }

    /**
     * Clear ERR_STAT_EN's ADDR_ERR1_STAT_EN bit.
     *
     * OCRAM Access Error Status Enable On Bank1
     */
    inline void clear_ERR_STAT_EN_ADDR_ERR1_STAT_EN() volatile
    {
        ERR_STAT_EN &= ~(1u << 13u);
    }

    /**
     * Toggle ERR_STAT_EN's ADDR_ERR1_STAT_EN bit.
     *
     * OCRAM Access Error Status Enable On Bank1
     */
    inline void toggle_ERR_STAT_EN_ADDR_ERR1_STAT_EN() volatile
    {
        ERR_STAT_EN ^= 1u << 13u;
    }

    /**
     * Get ERR_STAT_EN's ADDR_ERR0_STAT_EN bit.
     *
     * OCRAM Access Error Status Enable On Bank0
     */
    inline bool get_ERR_STAT_EN_ADDR_ERR0_STAT_EN() volatile
    {
        return ERR_STAT_EN & (1u << 12u);
    }

    /**
     * Set ERR_STAT_EN's ADDR_ERR0_STAT_EN bit.
     *
     * OCRAM Access Error Status Enable On Bank0
     */
    inline void set_ERR_STAT_EN_ADDR_ERR0_STAT_EN() volatile
    {
        ERR_STAT_EN |= 1u << 12u;
    }

    /**
     * Clear ERR_STAT_EN's ADDR_ERR0_STAT_EN bit.
     *
     * OCRAM Access Error Status Enable On Bank0
     */
    inline void clear_ERR_STAT_EN_ADDR_ERR0_STAT_EN() volatile
    {
        ERR_STAT_EN &= ~(1u << 12u);
    }

    /**
     * Toggle ERR_STAT_EN's ADDR_ERR0_STAT_EN bit.
     *
     * OCRAM Access Error Status Enable On Bank0
     */
    inline void toggle_ERR_STAT_EN_ADDR_ERR0_STAT_EN() volatile
    {
        ERR_STAT_EN ^= 1u << 12u;
    }

    /**
     * Get ERR_STAT_EN's STRB_ERR3_STAT_EN bit.
     *
     * AXI Strobe Error Status Enable On OCRAM Bank3
     */
    inline bool get_ERR_STAT_EN_STRB_ERR3_STAT_EN() volatile
    {
        return ERR_STAT_EN & (1u << 11u);
    }

    /**
     * Set ERR_STAT_EN's STRB_ERR3_STAT_EN bit.
     *
     * AXI Strobe Error Status Enable On OCRAM Bank3
     */
    inline void set_ERR_STAT_EN_STRB_ERR3_STAT_EN() volatile
    {
        ERR_STAT_EN |= 1u << 11u;
    }

    /**
     * Clear ERR_STAT_EN's STRB_ERR3_STAT_EN bit.
     *
     * AXI Strobe Error Status Enable On OCRAM Bank3
     */
    inline void clear_ERR_STAT_EN_STRB_ERR3_STAT_EN() volatile
    {
        ERR_STAT_EN &= ~(1u << 11u);
    }

    /**
     * Toggle ERR_STAT_EN's STRB_ERR3_STAT_EN bit.
     *
     * AXI Strobe Error Status Enable On OCRAM Bank3
     */
    inline void toggle_ERR_STAT_EN_STRB_ERR3_STAT_EN() volatile
    {
        ERR_STAT_EN ^= 1u << 11u;
    }

    /**
     * Get ERR_STAT_EN's STRB_ERR2_STAT_EN bit.
     *
     * AXI Strobe Error Status Enable On OCRAM Bank2
     */
    inline bool get_ERR_STAT_EN_STRB_ERR2_STAT_EN() volatile
    {
        return ERR_STAT_EN & (1u << 10u);
    }

    /**
     * Set ERR_STAT_EN's STRB_ERR2_STAT_EN bit.
     *
     * AXI Strobe Error Status Enable On OCRAM Bank2
     */
    inline void set_ERR_STAT_EN_STRB_ERR2_STAT_EN() volatile
    {
        ERR_STAT_EN |= 1u << 10u;
    }

    /**
     * Clear ERR_STAT_EN's STRB_ERR2_STAT_EN bit.
     *
     * AXI Strobe Error Status Enable On OCRAM Bank2
     */
    inline void clear_ERR_STAT_EN_STRB_ERR2_STAT_EN() volatile
    {
        ERR_STAT_EN &= ~(1u << 10u);
    }

    /**
     * Toggle ERR_STAT_EN's STRB_ERR2_STAT_EN bit.
     *
     * AXI Strobe Error Status Enable On OCRAM Bank2
     */
    inline void toggle_ERR_STAT_EN_STRB_ERR2_STAT_EN() volatile
    {
        ERR_STAT_EN ^= 1u << 10u;
    }

    /**
     * Get ERR_STAT_EN's STRB_ERR1_STAT_EN bit.
     *
     * AXI Strobe Error Status Enable On OCRAM Bank1
     */
    inline bool get_ERR_STAT_EN_STRB_ERR1_STAT_EN() volatile
    {
        return ERR_STAT_EN & (1u << 9u);
    }

    /**
     * Set ERR_STAT_EN's STRB_ERR1_STAT_EN bit.
     *
     * AXI Strobe Error Status Enable On OCRAM Bank1
     */
    inline void set_ERR_STAT_EN_STRB_ERR1_STAT_EN() volatile
    {
        ERR_STAT_EN |= 1u << 9u;
    }

    /**
     * Clear ERR_STAT_EN's STRB_ERR1_STAT_EN bit.
     *
     * AXI Strobe Error Status Enable On OCRAM Bank1
     */
    inline void clear_ERR_STAT_EN_STRB_ERR1_STAT_EN() volatile
    {
        ERR_STAT_EN &= ~(1u << 9u);
    }

    /**
     * Toggle ERR_STAT_EN's STRB_ERR1_STAT_EN bit.
     *
     * AXI Strobe Error Status Enable On OCRAM Bank1
     */
    inline void toggle_ERR_STAT_EN_STRB_ERR1_STAT_EN() volatile
    {
        ERR_STAT_EN ^= 1u << 9u;
    }

    /**
     * Get ERR_STAT_EN's STRB_ERR0_STAT_EN bit.
     *
     * AXI Strobe Error Status Enable On OCRAM Bank0
     */
    inline bool get_ERR_STAT_EN_STRB_ERR0_STAT_EN() volatile
    {
        return ERR_STAT_EN & (1u << 8u);
    }

    /**
     * Set ERR_STAT_EN's STRB_ERR0_STAT_EN bit.
     *
     * AXI Strobe Error Status Enable On OCRAM Bank0
     */
    inline void set_ERR_STAT_EN_STRB_ERR0_STAT_EN() volatile
    {
        ERR_STAT_EN |= 1u << 8u;
    }

    /**
     * Clear ERR_STAT_EN's STRB_ERR0_STAT_EN bit.
     *
     * AXI Strobe Error Status Enable On OCRAM Bank0
     */
    inline void clear_ERR_STAT_EN_STRB_ERR0_STAT_EN() volatile
    {
        ERR_STAT_EN &= ~(1u << 8u);
    }

    /**
     * Toggle ERR_STAT_EN's STRB_ERR0_STAT_EN bit.
     *
     * AXI Strobe Error Status Enable On OCRAM Bank0
     */
    inline void toggle_ERR_STAT_EN_STRB_ERR0_STAT_EN() volatile
    {
        ERR_STAT_EN ^= 1u << 8u;
    }

    /**
     * Get ERR_STAT_EN's MULTI_ERR3_STAT_EN bit.
     *
     * Multiple Bits Error Status Enable On OCRAM Bank3
     */
    inline bool get_ERR_STAT_EN_MULTI_ERR3_STAT_EN() volatile
    {
        return ERR_STAT_EN & (1u << 7u);
    }

    /**
     * Set ERR_STAT_EN's MULTI_ERR3_STAT_EN bit.
     *
     * Multiple Bits Error Status Enable On OCRAM Bank3
     */
    inline void set_ERR_STAT_EN_MULTI_ERR3_STAT_EN() volatile
    {
        ERR_STAT_EN |= 1u << 7u;
    }

    /**
     * Clear ERR_STAT_EN's MULTI_ERR3_STAT_EN bit.
     *
     * Multiple Bits Error Status Enable On OCRAM Bank3
     */
    inline void clear_ERR_STAT_EN_MULTI_ERR3_STAT_EN() volatile
    {
        ERR_STAT_EN &= ~(1u << 7u);
    }

    /**
     * Toggle ERR_STAT_EN's MULTI_ERR3_STAT_EN bit.
     *
     * Multiple Bits Error Status Enable On OCRAM Bank3
     */
    inline void toggle_ERR_STAT_EN_MULTI_ERR3_STAT_EN() volatile
    {
        ERR_STAT_EN ^= 1u << 7u;
    }

    /**
     * Get ERR_STAT_EN's MULTI_ERR2_STAT_EN bit.
     *
     * Multiple Bits Error Status Enable On OCRAM Bank2
     */
    inline bool get_ERR_STAT_EN_MULTI_ERR2_STAT_EN() volatile
    {
        return ERR_STAT_EN & (1u << 6u);
    }

    /**
     * Set ERR_STAT_EN's MULTI_ERR2_STAT_EN bit.
     *
     * Multiple Bits Error Status Enable On OCRAM Bank2
     */
    inline void set_ERR_STAT_EN_MULTI_ERR2_STAT_EN() volatile
    {
        ERR_STAT_EN |= 1u << 6u;
    }

    /**
     * Clear ERR_STAT_EN's MULTI_ERR2_STAT_EN bit.
     *
     * Multiple Bits Error Status Enable On OCRAM Bank2
     */
    inline void clear_ERR_STAT_EN_MULTI_ERR2_STAT_EN() volatile
    {
        ERR_STAT_EN &= ~(1u << 6u);
    }

    /**
     * Toggle ERR_STAT_EN's MULTI_ERR2_STAT_EN bit.
     *
     * Multiple Bits Error Status Enable On OCRAM Bank2
     */
    inline void toggle_ERR_STAT_EN_MULTI_ERR2_STAT_EN() volatile
    {
        ERR_STAT_EN ^= 1u << 6u;
    }

    /**
     * Get ERR_STAT_EN's MULTI_ERR1_STAT_EN bit.
     *
     * Multiple Bits Error Status Enable On OCRAM Bank1
     */
    inline bool get_ERR_STAT_EN_MULTI_ERR1_STAT_EN() volatile
    {
        return ERR_STAT_EN & (1u << 5u);
    }

    /**
     * Set ERR_STAT_EN's MULTI_ERR1_STAT_EN bit.
     *
     * Multiple Bits Error Status Enable On OCRAM Bank1
     */
    inline void set_ERR_STAT_EN_MULTI_ERR1_STAT_EN() volatile
    {
        ERR_STAT_EN |= 1u << 5u;
    }

    /**
     * Clear ERR_STAT_EN's MULTI_ERR1_STAT_EN bit.
     *
     * Multiple Bits Error Status Enable On OCRAM Bank1
     */
    inline void clear_ERR_STAT_EN_MULTI_ERR1_STAT_EN() volatile
    {
        ERR_STAT_EN &= ~(1u << 5u);
    }

    /**
     * Toggle ERR_STAT_EN's MULTI_ERR1_STAT_EN bit.
     *
     * Multiple Bits Error Status Enable On OCRAM Bank1
     */
    inline void toggle_ERR_STAT_EN_MULTI_ERR1_STAT_EN() volatile
    {
        ERR_STAT_EN ^= 1u << 5u;
    }

    /**
     * Get ERR_STAT_EN's MULTI_ERR0_STAT_EN bit.
     *
     * Multiple Bits Error Status Enable On OCRAM Bank0
     */
    inline bool get_ERR_STAT_EN_MULTI_ERR0_STAT_EN() volatile
    {
        return ERR_STAT_EN & (1u << 4u);
    }

    /**
     * Set ERR_STAT_EN's MULTI_ERR0_STAT_EN bit.
     *
     * Multiple Bits Error Status Enable On OCRAM Bank0
     */
    inline void set_ERR_STAT_EN_MULTI_ERR0_STAT_EN() volatile
    {
        ERR_STAT_EN |= 1u << 4u;
    }

    /**
     * Clear ERR_STAT_EN's MULTI_ERR0_STAT_EN bit.
     *
     * Multiple Bits Error Status Enable On OCRAM Bank0
     */
    inline void clear_ERR_STAT_EN_MULTI_ERR0_STAT_EN() volatile
    {
        ERR_STAT_EN &= ~(1u << 4u);
    }

    /**
     * Toggle ERR_STAT_EN's MULTI_ERR0_STAT_EN bit.
     *
     * Multiple Bits Error Status Enable On OCRAM Bank0
     */
    inline void toggle_ERR_STAT_EN_MULTI_ERR0_STAT_EN() volatile
    {
        ERR_STAT_EN ^= 1u << 4u;
    }

    /**
     * Get ERR_STAT_EN's SINGLE_ERR3_STAT_EN bit.
     *
     * Single Bit Error Status Enable On OCRAM Bank3
     */
    inline bool get_ERR_STAT_EN_SINGLE_ERR3_STAT_EN() volatile
    {
        return ERR_STAT_EN & (1u << 3u);
    }

    /**
     * Set ERR_STAT_EN's SINGLE_ERR3_STAT_EN bit.
     *
     * Single Bit Error Status Enable On OCRAM Bank3
     */
    inline void set_ERR_STAT_EN_SINGLE_ERR3_STAT_EN() volatile
    {
        ERR_STAT_EN |= 1u << 3u;
    }

    /**
     * Clear ERR_STAT_EN's SINGLE_ERR3_STAT_EN bit.
     *
     * Single Bit Error Status Enable On OCRAM Bank3
     */
    inline void clear_ERR_STAT_EN_SINGLE_ERR3_STAT_EN() volatile
    {
        ERR_STAT_EN &= ~(1u << 3u);
    }

    /**
     * Toggle ERR_STAT_EN's SINGLE_ERR3_STAT_EN bit.
     *
     * Single Bit Error Status Enable On OCRAM Bank3
     */
    inline void toggle_ERR_STAT_EN_SINGLE_ERR3_STAT_EN() volatile
    {
        ERR_STAT_EN ^= 1u << 3u;
    }

    /**
     * Get ERR_STAT_EN's SINGLE_ERR2_STAT_EN bit.
     *
     * Single Bit Error Status Enable On OCRAM Bank2
     */
    inline bool get_ERR_STAT_EN_SINGLE_ERR2_STAT_EN() volatile
    {
        return ERR_STAT_EN & (1u << 2u);
    }

    /**
     * Set ERR_STAT_EN's SINGLE_ERR2_STAT_EN bit.
     *
     * Single Bit Error Status Enable On OCRAM Bank2
     */
    inline void set_ERR_STAT_EN_SINGLE_ERR2_STAT_EN() volatile
    {
        ERR_STAT_EN |= 1u << 2u;
    }

    /**
     * Clear ERR_STAT_EN's SINGLE_ERR2_STAT_EN bit.
     *
     * Single Bit Error Status Enable On OCRAM Bank2
     */
    inline void clear_ERR_STAT_EN_SINGLE_ERR2_STAT_EN() volatile
    {
        ERR_STAT_EN &= ~(1u << 2u);
    }

    /**
     * Toggle ERR_STAT_EN's SINGLE_ERR2_STAT_EN bit.
     *
     * Single Bit Error Status Enable On OCRAM Bank2
     */
    inline void toggle_ERR_STAT_EN_SINGLE_ERR2_STAT_EN() volatile
    {
        ERR_STAT_EN ^= 1u << 2u;
    }

    /**
     * Get ERR_STAT_EN's SINGLE_ERR1_STAT_EN bit.
     *
     * Single Bit Error Status Enable On OCRAM Bank1
     */
    inline bool get_ERR_STAT_EN_SINGLE_ERR1_STAT_EN() volatile
    {
        return ERR_STAT_EN & (1u << 1u);
    }

    /**
     * Set ERR_STAT_EN's SINGLE_ERR1_STAT_EN bit.
     *
     * Single Bit Error Status Enable On OCRAM Bank1
     */
    inline void set_ERR_STAT_EN_SINGLE_ERR1_STAT_EN() volatile
    {
        ERR_STAT_EN |= 1u << 1u;
    }

    /**
     * Clear ERR_STAT_EN's SINGLE_ERR1_STAT_EN bit.
     *
     * Single Bit Error Status Enable On OCRAM Bank1
     */
    inline void clear_ERR_STAT_EN_SINGLE_ERR1_STAT_EN() volatile
    {
        ERR_STAT_EN &= ~(1u << 1u);
    }

    /**
     * Toggle ERR_STAT_EN's SINGLE_ERR1_STAT_EN bit.
     *
     * Single Bit Error Status Enable On OCRAM Bank1
     */
    inline void toggle_ERR_STAT_EN_SINGLE_ERR1_STAT_EN() volatile
    {
        ERR_STAT_EN ^= 1u << 1u;
    }

    /**
     * Get ERR_STAT_EN's SINGLE_ERR0_STAT_EN bit.
     *
     * Single Bit Error Status Enable On OCRAM Bank0
     */
    inline bool get_ERR_STAT_EN_SINGLE_ERR0_STAT_EN() volatile
    {
        return ERR_STAT_EN & (1u << 0u);
    }

    /**
     * Set ERR_STAT_EN's SINGLE_ERR0_STAT_EN bit.
     *
     * Single Bit Error Status Enable On OCRAM Bank0
     */
    inline void set_ERR_STAT_EN_SINGLE_ERR0_STAT_EN() volatile
    {
        ERR_STAT_EN |= 1u << 0u;
    }

    /**
     * Clear ERR_STAT_EN's SINGLE_ERR0_STAT_EN bit.
     *
     * Single Bit Error Status Enable On OCRAM Bank0
     */
    inline void clear_ERR_STAT_EN_SINGLE_ERR0_STAT_EN() volatile
    {
        ERR_STAT_EN &= ~(1u << 0u);
    }

    /**
     * Toggle ERR_STAT_EN's SINGLE_ERR0_STAT_EN bit.
     *
     * Single Bit Error Status Enable On OCRAM Bank0
     */
    inline void toggle_ERR_STAT_EN_SINGLE_ERR0_STAT_EN() volatile
    {
        ERR_STAT_EN ^= 1u << 0u;
    }

    /**
     * Get all of ERR_STAT_EN's bit fields.
     *
     * (read-write) Error Interrupt Status Enable Register
     */
    inline void get_ERR_STAT_EN(
        bool &ADDR_ERR3_STAT_EN, bool &ADDR_ERR2_STAT_EN,
        bool &ADDR_ERR1_STAT_EN, bool &ADDR_ERR0_STAT_EN,
        bool &STRB_ERR3_STAT_EN, bool &STRB_ERR2_STAT_EN,
        bool &STRB_ERR1_STAT_EN, bool &STRB_ERR0_STAT_EN,
        bool &MULTI_ERR3_STAT_EN, bool &MULTI_ERR2_STAT_EN,
        bool &MULTI_ERR1_STAT_EN, bool &MULTI_ERR0_STAT_EN,
        bool &SINGLE_ERR3_STAT_EN, bool &SINGLE_ERR2_STAT_EN,
        bool &SINGLE_ERR1_STAT_EN, bool &SINGLE_ERR0_STAT_EN) volatile
    {
        uint32_t curr = ERR_STAT_EN;

        ADDR_ERR3_STAT_EN = curr & (1u << 15u);
        ADDR_ERR2_STAT_EN = curr & (1u << 14u);
        ADDR_ERR1_STAT_EN = curr & (1u << 13u);
        ADDR_ERR0_STAT_EN = curr & (1u << 12u);
        STRB_ERR3_STAT_EN = curr & (1u << 11u);
        STRB_ERR2_STAT_EN = curr & (1u << 10u);
        STRB_ERR1_STAT_EN = curr & (1u << 9u);
        STRB_ERR0_STAT_EN = curr & (1u << 8u);
        MULTI_ERR3_STAT_EN = curr & (1u << 7u);
        MULTI_ERR2_STAT_EN = curr & (1u << 6u);
        MULTI_ERR1_STAT_EN = curr & (1u << 5u);
        MULTI_ERR0_STAT_EN = curr & (1u << 4u);
        SINGLE_ERR3_STAT_EN = curr & (1u << 3u);
        SINGLE_ERR2_STAT_EN = curr & (1u << 2u);
        SINGLE_ERR1_STAT_EN = curr & (1u << 1u);
        SINGLE_ERR0_STAT_EN = curr & (1u << 0u);
    }

    /**
     * Set all of ERR_STAT_EN's bit fields.
     *
     * (read-write) Error Interrupt Status Enable Register
     */
    inline void set_ERR_STAT_EN(
        bool ADDR_ERR3_STAT_EN, bool ADDR_ERR2_STAT_EN, bool ADDR_ERR1_STAT_EN,
        bool ADDR_ERR0_STAT_EN, bool STRB_ERR3_STAT_EN, bool STRB_ERR2_STAT_EN,
        bool STRB_ERR1_STAT_EN, bool STRB_ERR0_STAT_EN,
        bool MULTI_ERR3_STAT_EN, bool MULTI_ERR2_STAT_EN,
        bool MULTI_ERR1_STAT_EN, bool MULTI_ERR0_STAT_EN,
        bool SINGLE_ERR3_STAT_EN, bool SINGLE_ERR2_STAT_EN,
        bool SINGLE_ERR1_STAT_EN, bool SINGLE_ERR0_STAT_EN) volatile
    {
        uint32_t curr = ERR_STAT_EN;

        curr &= ~(0b1u << 15u);
        curr |= (ADDR_ERR3_STAT_EN & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (ADDR_ERR2_STAT_EN & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (ADDR_ERR1_STAT_EN & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (ADDR_ERR0_STAT_EN & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (STRB_ERR3_STAT_EN & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (STRB_ERR2_STAT_EN & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (STRB_ERR1_STAT_EN & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (STRB_ERR0_STAT_EN & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (MULTI_ERR3_STAT_EN & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (MULTI_ERR2_STAT_EN & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (MULTI_ERR1_STAT_EN & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (MULTI_ERR0_STAT_EN & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SINGLE_ERR3_STAT_EN & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (SINGLE_ERR2_STAT_EN & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (SINGLE_ERR1_STAT_EN & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SINGLE_ERR0_STAT_EN & 0b1u) << 0u;

        ERR_STAT_EN = curr;
    }

    /**
     * Get ERR_SIG_EN's ADDR_ERR3_SIG_EN bit.
     *
     * OCRAM Access Error Interrupt Enable On Bank3
     */
    inline bool get_ERR_SIG_EN_ADDR_ERR3_SIG_EN() volatile
    {
        return ERR_SIG_EN & (1u << 15u);
    }

    /**
     * Set ERR_SIG_EN's ADDR_ERR3_SIG_EN bit.
     *
     * OCRAM Access Error Interrupt Enable On Bank3
     */
    inline void set_ERR_SIG_EN_ADDR_ERR3_SIG_EN() volatile
    {
        ERR_SIG_EN |= 1u << 15u;
    }

    /**
     * Clear ERR_SIG_EN's ADDR_ERR3_SIG_EN bit.
     *
     * OCRAM Access Error Interrupt Enable On Bank3
     */
    inline void clear_ERR_SIG_EN_ADDR_ERR3_SIG_EN() volatile
    {
        ERR_SIG_EN &= ~(1u << 15u);
    }

    /**
     * Toggle ERR_SIG_EN's ADDR_ERR3_SIG_EN bit.
     *
     * OCRAM Access Error Interrupt Enable On Bank3
     */
    inline void toggle_ERR_SIG_EN_ADDR_ERR3_SIG_EN() volatile
    {
        ERR_SIG_EN ^= 1u << 15u;
    }

    /**
     * Get ERR_SIG_EN's ADDR_ERR2_SIG_EN bit.
     *
     * OCRAM Access Error Interrupt Enable On Bank2
     */
    inline bool get_ERR_SIG_EN_ADDR_ERR2_SIG_EN() volatile
    {
        return ERR_SIG_EN & (1u << 14u);
    }

    /**
     * Set ERR_SIG_EN's ADDR_ERR2_SIG_EN bit.
     *
     * OCRAM Access Error Interrupt Enable On Bank2
     */
    inline void set_ERR_SIG_EN_ADDR_ERR2_SIG_EN() volatile
    {
        ERR_SIG_EN |= 1u << 14u;
    }

    /**
     * Clear ERR_SIG_EN's ADDR_ERR2_SIG_EN bit.
     *
     * OCRAM Access Error Interrupt Enable On Bank2
     */
    inline void clear_ERR_SIG_EN_ADDR_ERR2_SIG_EN() volatile
    {
        ERR_SIG_EN &= ~(1u << 14u);
    }

    /**
     * Toggle ERR_SIG_EN's ADDR_ERR2_SIG_EN bit.
     *
     * OCRAM Access Error Interrupt Enable On Bank2
     */
    inline void toggle_ERR_SIG_EN_ADDR_ERR2_SIG_EN() volatile
    {
        ERR_SIG_EN ^= 1u << 14u;
    }

    /**
     * Get ERR_SIG_EN's ADDR_ERR1_SIG_EN bit.
     *
     * OCRAM Access Error Interrupt Enable On Bank1
     */
    inline bool get_ERR_SIG_EN_ADDR_ERR1_SIG_EN() volatile
    {
        return ERR_SIG_EN & (1u << 13u);
    }

    /**
     * Set ERR_SIG_EN's ADDR_ERR1_SIG_EN bit.
     *
     * OCRAM Access Error Interrupt Enable On Bank1
     */
    inline void set_ERR_SIG_EN_ADDR_ERR1_SIG_EN() volatile
    {
        ERR_SIG_EN |= 1u << 13u;
    }

    /**
     * Clear ERR_SIG_EN's ADDR_ERR1_SIG_EN bit.
     *
     * OCRAM Access Error Interrupt Enable On Bank1
     */
    inline void clear_ERR_SIG_EN_ADDR_ERR1_SIG_EN() volatile
    {
        ERR_SIG_EN &= ~(1u << 13u);
    }

    /**
     * Toggle ERR_SIG_EN's ADDR_ERR1_SIG_EN bit.
     *
     * OCRAM Access Error Interrupt Enable On Bank1
     */
    inline void toggle_ERR_SIG_EN_ADDR_ERR1_SIG_EN() volatile
    {
        ERR_SIG_EN ^= 1u << 13u;
    }

    /**
     * Get ERR_SIG_EN's ADDR_ERR0_SIG_EN bit.
     *
     * OCRAM Access Error Interrupt Enable On Bank0
     */
    inline bool get_ERR_SIG_EN_ADDR_ERR0_SIG_EN() volatile
    {
        return ERR_SIG_EN & (1u << 12u);
    }

    /**
     * Set ERR_SIG_EN's ADDR_ERR0_SIG_EN bit.
     *
     * OCRAM Access Error Interrupt Enable On Bank0
     */
    inline void set_ERR_SIG_EN_ADDR_ERR0_SIG_EN() volatile
    {
        ERR_SIG_EN |= 1u << 12u;
    }

    /**
     * Clear ERR_SIG_EN's ADDR_ERR0_SIG_EN bit.
     *
     * OCRAM Access Error Interrupt Enable On Bank0
     */
    inline void clear_ERR_SIG_EN_ADDR_ERR0_SIG_EN() volatile
    {
        ERR_SIG_EN &= ~(1u << 12u);
    }

    /**
     * Toggle ERR_SIG_EN's ADDR_ERR0_SIG_EN bit.
     *
     * OCRAM Access Error Interrupt Enable On Bank0
     */
    inline void toggle_ERR_SIG_EN_ADDR_ERR0_SIG_EN() volatile
    {
        ERR_SIG_EN ^= 1u << 12u;
    }

    /**
     * Get ERR_SIG_EN's STRB_ERR3_SIG_EN bit.
     *
     * AXI Strobe Error Interrupt Enable On OCRAM Bank3
     */
    inline bool get_ERR_SIG_EN_STRB_ERR3_SIG_EN() volatile
    {
        return ERR_SIG_EN & (1u << 11u);
    }

    /**
     * Set ERR_SIG_EN's STRB_ERR3_SIG_EN bit.
     *
     * AXI Strobe Error Interrupt Enable On OCRAM Bank3
     */
    inline void set_ERR_SIG_EN_STRB_ERR3_SIG_EN() volatile
    {
        ERR_SIG_EN |= 1u << 11u;
    }

    /**
     * Clear ERR_SIG_EN's STRB_ERR3_SIG_EN bit.
     *
     * AXI Strobe Error Interrupt Enable On OCRAM Bank3
     */
    inline void clear_ERR_SIG_EN_STRB_ERR3_SIG_EN() volatile
    {
        ERR_SIG_EN &= ~(1u << 11u);
    }

    /**
     * Toggle ERR_SIG_EN's STRB_ERR3_SIG_EN bit.
     *
     * AXI Strobe Error Interrupt Enable On OCRAM Bank3
     */
    inline void toggle_ERR_SIG_EN_STRB_ERR3_SIG_EN() volatile
    {
        ERR_SIG_EN ^= 1u << 11u;
    }

    /**
     * Get ERR_SIG_EN's STRB_ERR2_SIG_EN bit.
     *
     * AXI Strobe Error Interrupt Enable On OCRAM Bank2
     */
    inline bool get_ERR_SIG_EN_STRB_ERR2_SIG_EN() volatile
    {
        return ERR_SIG_EN & (1u << 10u);
    }

    /**
     * Set ERR_SIG_EN's STRB_ERR2_SIG_EN bit.
     *
     * AXI Strobe Error Interrupt Enable On OCRAM Bank2
     */
    inline void set_ERR_SIG_EN_STRB_ERR2_SIG_EN() volatile
    {
        ERR_SIG_EN |= 1u << 10u;
    }

    /**
     * Clear ERR_SIG_EN's STRB_ERR2_SIG_EN bit.
     *
     * AXI Strobe Error Interrupt Enable On OCRAM Bank2
     */
    inline void clear_ERR_SIG_EN_STRB_ERR2_SIG_EN() volatile
    {
        ERR_SIG_EN &= ~(1u << 10u);
    }

    /**
     * Toggle ERR_SIG_EN's STRB_ERR2_SIG_EN bit.
     *
     * AXI Strobe Error Interrupt Enable On OCRAM Bank2
     */
    inline void toggle_ERR_SIG_EN_STRB_ERR2_SIG_EN() volatile
    {
        ERR_SIG_EN ^= 1u << 10u;
    }

    /**
     * Get ERR_SIG_EN's STRB_ERR1_SIG_EN bit.
     *
     * AXI Strobe Error Interrupt Enable On OCRAM Bank1
     */
    inline bool get_ERR_SIG_EN_STRB_ERR1_SIG_EN() volatile
    {
        return ERR_SIG_EN & (1u << 9u);
    }

    /**
     * Set ERR_SIG_EN's STRB_ERR1_SIG_EN bit.
     *
     * AXI Strobe Error Interrupt Enable On OCRAM Bank1
     */
    inline void set_ERR_SIG_EN_STRB_ERR1_SIG_EN() volatile
    {
        ERR_SIG_EN |= 1u << 9u;
    }

    /**
     * Clear ERR_SIG_EN's STRB_ERR1_SIG_EN bit.
     *
     * AXI Strobe Error Interrupt Enable On OCRAM Bank1
     */
    inline void clear_ERR_SIG_EN_STRB_ERR1_SIG_EN() volatile
    {
        ERR_SIG_EN &= ~(1u << 9u);
    }

    /**
     * Toggle ERR_SIG_EN's STRB_ERR1_SIG_EN bit.
     *
     * AXI Strobe Error Interrupt Enable On OCRAM Bank1
     */
    inline void toggle_ERR_SIG_EN_STRB_ERR1_SIG_EN() volatile
    {
        ERR_SIG_EN ^= 1u << 9u;
    }

    /**
     * Get ERR_SIG_EN's STRB_ERR0_SIG_EN bit.
     *
     * AXI Strobe Error Interrupt Enable On OCRAM Bank0
     */
    inline bool get_ERR_SIG_EN_STRB_ERR0_SIG_EN() volatile
    {
        return ERR_SIG_EN & (1u << 8u);
    }

    /**
     * Set ERR_SIG_EN's STRB_ERR0_SIG_EN bit.
     *
     * AXI Strobe Error Interrupt Enable On OCRAM Bank0
     */
    inline void set_ERR_SIG_EN_STRB_ERR0_SIG_EN() volatile
    {
        ERR_SIG_EN |= 1u << 8u;
    }

    /**
     * Clear ERR_SIG_EN's STRB_ERR0_SIG_EN bit.
     *
     * AXI Strobe Error Interrupt Enable On OCRAM Bank0
     */
    inline void clear_ERR_SIG_EN_STRB_ERR0_SIG_EN() volatile
    {
        ERR_SIG_EN &= ~(1u << 8u);
    }

    /**
     * Toggle ERR_SIG_EN's STRB_ERR0_SIG_EN bit.
     *
     * AXI Strobe Error Interrupt Enable On OCRAM Bank0
     */
    inline void toggle_ERR_SIG_EN_STRB_ERR0_SIG_EN() volatile
    {
        ERR_SIG_EN ^= 1u << 8u;
    }

    /**
     * Get ERR_SIG_EN's MULTI_ERR3_SIG_EN bit.
     *
     * Multiple Bits Error Interrupt Enable On OCRAM Bank3
     */
    inline bool get_ERR_SIG_EN_MULTI_ERR3_SIG_EN() volatile
    {
        return ERR_SIG_EN & (1u << 7u);
    }

    /**
     * Set ERR_SIG_EN's MULTI_ERR3_SIG_EN bit.
     *
     * Multiple Bits Error Interrupt Enable On OCRAM Bank3
     */
    inline void set_ERR_SIG_EN_MULTI_ERR3_SIG_EN() volatile
    {
        ERR_SIG_EN |= 1u << 7u;
    }

    /**
     * Clear ERR_SIG_EN's MULTI_ERR3_SIG_EN bit.
     *
     * Multiple Bits Error Interrupt Enable On OCRAM Bank3
     */
    inline void clear_ERR_SIG_EN_MULTI_ERR3_SIG_EN() volatile
    {
        ERR_SIG_EN &= ~(1u << 7u);
    }

    /**
     * Toggle ERR_SIG_EN's MULTI_ERR3_SIG_EN bit.
     *
     * Multiple Bits Error Interrupt Enable On OCRAM Bank3
     */
    inline void toggle_ERR_SIG_EN_MULTI_ERR3_SIG_EN() volatile
    {
        ERR_SIG_EN ^= 1u << 7u;
    }

    /**
     * Get ERR_SIG_EN's MULTI_ERR2_SIG_EN bit.
     *
     * Multiple Bits Error Interrupt Enable On OCRAM Bank2
     */
    inline bool get_ERR_SIG_EN_MULTI_ERR2_SIG_EN() volatile
    {
        return ERR_SIG_EN & (1u << 6u);
    }

    /**
     * Set ERR_SIG_EN's MULTI_ERR2_SIG_EN bit.
     *
     * Multiple Bits Error Interrupt Enable On OCRAM Bank2
     */
    inline void set_ERR_SIG_EN_MULTI_ERR2_SIG_EN() volatile
    {
        ERR_SIG_EN |= 1u << 6u;
    }

    /**
     * Clear ERR_SIG_EN's MULTI_ERR2_SIG_EN bit.
     *
     * Multiple Bits Error Interrupt Enable On OCRAM Bank2
     */
    inline void clear_ERR_SIG_EN_MULTI_ERR2_SIG_EN() volatile
    {
        ERR_SIG_EN &= ~(1u << 6u);
    }

    /**
     * Toggle ERR_SIG_EN's MULTI_ERR2_SIG_EN bit.
     *
     * Multiple Bits Error Interrupt Enable On OCRAM Bank2
     */
    inline void toggle_ERR_SIG_EN_MULTI_ERR2_SIG_EN() volatile
    {
        ERR_SIG_EN ^= 1u << 6u;
    }

    /**
     * Get ERR_SIG_EN's MULTI_ERR1_SIG_EN bit.
     *
     * Multiple Bits Error Interrupt Enable On OCRAM Bank1
     */
    inline bool get_ERR_SIG_EN_MULTI_ERR1_SIG_EN() volatile
    {
        return ERR_SIG_EN & (1u << 5u);
    }

    /**
     * Set ERR_SIG_EN's MULTI_ERR1_SIG_EN bit.
     *
     * Multiple Bits Error Interrupt Enable On OCRAM Bank1
     */
    inline void set_ERR_SIG_EN_MULTI_ERR1_SIG_EN() volatile
    {
        ERR_SIG_EN |= 1u << 5u;
    }

    /**
     * Clear ERR_SIG_EN's MULTI_ERR1_SIG_EN bit.
     *
     * Multiple Bits Error Interrupt Enable On OCRAM Bank1
     */
    inline void clear_ERR_SIG_EN_MULTI_ERR1_SIG_EN() volatile
    {
        ERR_SIG_EN &= ~(1u << 5u);
    }

    /**
     * Toggle ERR_SIG_EN's MULTI_ERR1_SIG_EN bit.
     *
     * Multiple Bits Error Interrupt Enable On OCRAM Bank1
     */
    inline void toggle_ERR_SIG_EN_MULTI_ERR1_SIG_EN() volatile
    {
        ERR_SIG_EN ^= 1u << 5u;
    }

    /**
     * Get ERR_SIG_EN's MULTI_ERR0_SIG_EN bit.
     *
     * Multiple Bits Error Interrupt Enable On OCRAM Bank0
     */
    inline bool get_ERR_SIG_EN_MULTI_ERR0_SIG_EN() volatile
    {
        return ERR_SIG_EN & (1u << 4u);
    }

    /**
     * Set ERR_SIG_EN's MULTI_ERR0_SIG_EN bit.
     *
     * Multiple Bits Error Interrupt Enable On OCRAM Bank0
     */
    inline void set_ERR_SIG_EN_MULTI_ERR0_SIG_EN() volatile
    {
        ERR_SIG_EN |= 1u << 4u;
    }

    /**
     * Clear ERR_SIG_EN's MULTI_ERR0_SIG_EN bit.
     *
     * Multiple Bits Error Interrupt Enable On OCRAM Bank0
     */
    inline void clear_ERR_SIG_EN_MULTI_ERR0_SIG_EN() volatile
    {
        ERR_SIG_EN &= ~(1u << 4u);
    }

    /**
     * Toggle ERR_SIG_EN's MULTI_ERR0_SIG_EN bit.
     *
     * Multiple Bits Error Interrupt Enable On OCRAM Bank0
     */
    inline void toggle_ERR_SIG_EN_MULTI_ERR0_SIG_EN() volatile
    {
        ERR_SIG_EN ^= 1u << 4u;
    }

    /**
     * Get ERR_SIG_EN's SINGLE_ERR3_SIG_EN bit.
     *
     * Single Bit Error Interrupt Enable On OCRAM Bank3
     */
    inline bool get_ERR_SIG_EN_SINGLE_ERR3_SIG_EN() volatile
    {
        return ERR_SIG_EN & (1u << 3u);
    }

    /**
     * Set ERR_SIG_EN's SINGLE_ERR3_SIG_EN bit.
     *
     * Single Bit Error Interrupt Enable On OCRAM Bank3
     */
    inline void set_ERR_SIG_EN_SINGLE_ERR3_SIG_EN() volatile
    {
        ERR_SIG_EN |= 1u << 3u;
    }

    /**
     * Clear ERR_SIG_EN's SINGLE_ERR3_SIG_EN bit.
     *
     * Single Bit Error Interrupt Enable On OCRAM Bank3
     */
    inline void clear_ERR_SIG_EN_SINGLE_ERR3_SIG_EN() volatile
    {
        ERR_SIG_EN &= ~(1u << 3u);
    }

    /**
     * Toggle ERR_SIG_EN's SINGLE_ERR3_SIG_EN bit.
     *
     * Single Bit Error Interrupt Enable On OCRAM Bank3
     */
    inline void toggle_ERR_SIG_EN_SINGLE_ERR3_SIG_EN() volatile
    {
        ERR_SIG_EN ^= 1u << 3u;
    }

    /**
     * Get ERR_SIG_EN's SINGLE_ERR2_SIG_EN bit.
     *
     * Single Bit Error Interrupt Enable On OCRAM Bank2
     */
    inline bool get_ERR_SIG_EN_SINGLE_ERR2_SIG_EN() volatile
    {
        return ERR_SIG_EN & (1u << 2u);
    }

    /**
     * Set ERR_SIG_EN's SINGLE_ERR2_SIG_EN bit.
     *
     * Single Bit Error Interrupt Enable On OCRAM Bank2
     */
    inline void set_ERR_SIG_EN_SINGLE_ERR2_SIG_EN() volatile
    {
        ERR_SIG_EN |= 1u << 2u;
    }

    /**
     * Clear ERR_SIG_EN's SINGLE_ERR2_SIG_EN bit.
     *
     * Single Bit Error Interrupt Enable On OCRAM Bank2
     */
    inline void clear_ERR_SIG_EN_SINGLE_ERR2_SIG_EN() volatile
    {
        ERR_SIG_EN &= ~(1u << 2u);
    }

    /**
     * Toggle ERR_SIG_EN's SINGLE_ERR2_SIG_EN bit.
     *
     * Single Bit Error Interrupt Enable On OCRAM Bank2
     */
    inline void toggle_ERR_SIG_EN_SINGLE_ERR2_SIG_EN() volatile
    {
        ERR_SIG_EN ^= 1u << 2u;
    }

    /**
     * Get ERR_SIG_EN's SINGLE_ERR1_SIG_EN bit.
     *
     * Single Bit Error Interrupt Enable On OCRAM Bank1
     */
    inline bool get_ERR_SIG_EN_SINGLE_ERR1_SIG_EN() volatile
    {
        return ERR_SIG_EN & (1u << 1u);
    }

    /**
     * Set ERR_SIG_EN's SINGLE_ERR1_SIG_EN bit.
     *
     * Single Bit Error Interrupt Enable On OCRAM Bank1
     */
    inline void set_ERR_SIG_EN_SINGLE_ERR1_SIG_EN() volatile
    {
        ERR_SIG_EN |= 1u << 1u;
    }

    /**
     * Clear ERR_SIG_EN's SINGLE_ERR1_SIG_EN bit.
     *
     * Single Bit Error Interrupt Enable On OCRAM Bank1
     */
    inline void clear_ERR_SIG_EN_SINGLE_ERR1_SIG_EN() volatile
    {
        ERR_SIG_EN &= ~(1u << 1u);
    }

    /**
     * Toggle ERR_SIG_EN's SINGLE_ERR1_SIG_EN bit.
     *
     * Single Bit Error Interrupt Enable On OCRAM Bank1
     */
    inline void toggle_ERR_SIG_EN_SINGLE_ERR1_SIG_EN() volatile
    {
        ERR_SIG_EN ^= 1u << 1u;
    }

    /**
     * Get ERR_SIG_EN's SINGLE_ERR0_SIG_EN bit.
     *
     * Single Bit Error Interrupt Enable On OCRAM Bank0
     */
    inline bool get_ERR_SIG_EN_SINGLE_ERR0_SIG_EN() volatile
    {
        return ERR_SIG_EN & (1u << 0u);
    }

    /**
     * Set ERR_SIG_EN's SINGLE_ERR0_SIG_EN bit.
     *
     * Single Bit Error Interrupt Enable On OCRAM Bank0
     */
    inline void set_ERR_SIG_EN_SINGLE_ERR0_SIG_EN() volatile
    {
        ERR_SIG_EN |= 1u << 0u;
    }

    /**
     * Clear ERR_SIG_EN's SINGLE_ERR0_SIG_EN bit.
     *
     * Single Bit Error Interrupt Enable On OCRAM Bank0
     */
    inline void clear_ERR_SIG_EN_SINGLE_ERR0_SIG_EN() volatile
    {
        ERR_SIG_EN &= ~(1u << 0u);
    }

    /**
     * Toggle ERR_SIG_EN's SINGLE_ERR0_SIG_EN bit.
     *
     * Single Bit Error Interrupt Enable On OCRAM Bank0
     */
    inline void toggle_ERR_SIG_EN_SINGLE_ERR0_SIG_EN() volatile
    {
        ERR_SIG_EN ^= 1u << 0u;
    }

    /**
     * Get all of ERR_SIG_EN's bit fields.
     *
     * (read-write) Error Interrupt Enable Register
     */
    inline void get_ERR_SIG_EN(
        bool &ADDR_ERR3_SIG_EN, bool &ADDR_ERR2_SIG_EN, bool &ADDR_ERR1_SIG_EN,
        bool &ADDR_ERR0_SIG_EN, bool &STRB_ERR3_SIG_EN, bool &STRB_ERR2_SIG_EN,
        bool &STRB_ERR1_SIG_EN, bool &STRB_ERR0_SIG_EN,
        bool &MULTI_ERR3_SIG_EN, bool &MULTI_ERR2_SIG_EN,
        bool &MULTI_ERR1_SIG_EN, bool &MULTI_ERR0_SIG_EN,
        bool &SINGLE_ERR3_SIG_EN, bool &SINGLE_ERR2_SIG_EN,
        bool &SINGLE_ERR1_SIG_EN, bool &SINGLE_ERR0_SIG_EN) volatile
    {
        uint32_t curr = ERR_SIG_EN;

        ADDR_ERR3_SIG_EN = curr & (1u << 15u);
        ADDR_ERR2_SIG_EN = curr & (1u << 14u);
        ADDR_ERR1_SIG_EN = curr & (1u << 13u);
        ADDR_ERR0_SIG_EN = curr & (1u << 12u);
        STRB_ERR3_SIG_EN = curr & (1u << 11u);
        STRB_ERR2_SIG_EN = curr & (1u << 10u);
        STRB_ERR1_SIG_EN = curr & (1u << 9u);
        STRB_ERR0_SIG_EN = curr & (1u << 8u);
        MULTI_ERR3_SIG_EN = curr & (1u << 7u);
        MULTI_ERR2_SIG_EN = curr & (1u << 6u);
        MULTI_ERR1_SIG_EN = curr & (1u << 5u);
        MULTI_ERR0_SIG_EN = curr & (1u << 4u);
        SINGLE_ERR3_SIG_EN = curr & (1u << 3u);
        SINGLE_ERR2_SIG_EN = curr & (1u << 2u);
        SINGLE_ERR1_SIG_EN = curr & (1u << 1u);
        SINGLE_ERR0_SIG_EN = curr & (1u << 0u);
    }

    /**
     * Set all of ERR_SIG_EN's bit fields.
     *
     * (read-write) Error Interrupt Enable Register
     */
    inline void set_ERR_SIG_EN(
        bool ADDR_ERR3_SIG_EN, bool ADDR_ERR2_SIG_EN, bool ADDR_ERR1_SIG_EN,
        bool ADDR_ERR0_SIG_EN, bool STRB_ERR3_SIG_EN, bool STRB_ERR2_SIG_EN,
        bool STRB_ERR1_SIG_EN, bool STRB_ERR0_SIG_EN, bool MULTI_ERR3_SIG_EN,
        bool MULTI_ERR2_SIG_EN, bool MULTI_ERR1_SIG_EN, bool MULTI_ERR0_SIG_EN,
        bool SINGLE_ERR3_SIG_EN, bool SINGLE_ERR2_SIG_EN,
        bool SINGLE_ERR1_SIG_EN, bool SINGLE_ERR0_SIG_EN) volatile
    {
        uint32_t curr = ERR_SIG_EN;

        curr &= ~(0b1u << 15u);
        curr |= (ADDR_ERR3_SIG_EN & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (ADDR_ERR2_SIG_EN & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (ADDR_ERR1_SIG_EN & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (ADDR_ERR0_SIG_EN & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (STRB_ERR3_SIG_EN & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (STRB_ERR2_SIG_EN & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (STRB_ERR1_SIG_EN & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (STRB_ERR0_SIG_EN & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (MULTI_ERR3_SIG_EN & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (MULTI_ERR2_SIG_EN & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (MULTI_ERR1_SIG_EN & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (MULTI_ERR0_SIG_EN & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SINGLE_ERR3_SIG_EN & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (SINGLE_ERR2_SIG_EN & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (SINGLE_ERR1_SIG_EN & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SINGLE_ERR0_SIG_EN & 0b1u) << 0u;

        ERR_SIG_EN = curr;
    }

    /**
     * Get ERR_DATA_INJ_LOW0's ERR_DATA_INJ field.
     *
     * Error Injection On LOW 32 bits Of OCRAM Bank0 Write Data
     */
    inline uint32_t get_ERR_DATA_INJ_LOW0_ERR_DATA_INJ() volatile
    {
        return (ERR_DATA_INJ_LOW0 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set ERR_DATA_INJ_LOW0's ERR_DATA_INJ field.
     *
     * Error Injection On LOW 32 bits Of OCRAM Bank0 Write Data
     */
    inline void set_ERR_DATA_INJ_LOW0_ERR_DATA_INJ(uint32_t value) volatile
    {
        uint32_t curr = ERR_DATA_INJ_LOW0;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        ERR_DATA_INJ_LOW0 = curr;
    }

    /**
     * Get ERR_DATA_INJ_HIGH0's ERR_DATA_INJ field.
     *
     * Error Injection On HIGH 32 bits Of OCRAM Bank0 Write Data
     */
    inline uint32_t get_ERR_DATA_INJ_HIGH0_ERR_DATA_INJ() volatile
    {
        return (ERR_DATA_INJ_HIGH0 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Set ERR_DATA_INJ_HIGH0's ERR_DATA_INJ field.
     *
     * Error Injection On HIGH 32 bits Of OCRAM Bank0 Write Data
     */
    inline void set_ERR_DATA_INJ_HIGH0_ERR_DATA_INJ(uint32_t value) volatile
    {
        uint32_t curr = ERR_DATA_INJ_HIGH0;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        ERR_DATA_INJ_HIGH0 = curr;
    }

    /**
     * Get ERR_ECC_INJ0's ERR_ECC_INJ field.
     *
     * Error Injection On 8 bits ECC code Of OCRAM Bank0 Write Data
     */
    inline uint8_t get_ERR_ECC_INJ0_ERR_ECC_INJ() volatile
    {
        return (ERR_ECC_INJ0 >> 0u) & 0b11111111u;
    }

    /**
     * Set ERR_ECC_INJ0's ERR_ECC_INJ field.
     *
     * Error Injection On 8 bits ECC code Of OCRAM Bank0 Write Data
     */
    inline void set_ERR_ECC_INJ0_ERR_ECC_INJ(uint8_t value) volatile
    {
        uint32_t curr = ERR_ECC_INJ0;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        ERR_ECC_INJ0 = curr;
    }

    /**
     * Get ERR_DATA_INJ_LOW1's ERR_DATA_INJ field.
     *
     * Error Injection On LOW 32 bits Of OCRAM Bank1 Write Data
     */
    inline uint32_t get_ERR_DATA_INJ_LOW1_ERR_DATA_INJ() volatile
    {
        return (ERR_DATA_INJ_LOW1 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set ERR_DATA_INJ_LOW1's ERR_DATA_INJ field.
     *
     * Error Injection On LOW 32 bits Of OCRAM Bank1 Write Data
     */
    inline void set_ERR_DATA_INJ_LOW1_ERR_DATA_INJ(uint32_t value) volatile
    {
        uint32_t curr = ERR_DATA_INJ_LOW1;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        ERR_DATA_INJ_LOW1 = curr;
    }

    /**
     * Get ERR_DATA_INJ_HIGH1's ERR_DATA_INJ field.
     *
     * Error Injection On HIGH 32 bits Of OCRAM Bank1 Write Data
     */
    inline uint32_t get_ERR_DATA_INJ_HIGH1_ERR_DATA_INJ() volatile
    {
        return (ERR_DATA_INJ_HIGH1 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Set ERR_DATA_INJ_HIGH1's ERR_DATA_INJ field.
     *
     * Error Injection On HIGH 32 bits Of OCRAM Bank1 Write Data
     */
    inline void set_ERR_DATA_INJ_HIGH1_ERR_DATA_INJ(uint32_t value) volatile
    {
        uint32_t curr = ERR_DATA_INJ_HIGH1;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        ERR_DATA_INJ_HIGH1 = curr;
    }

    /**
     * Get ERR_ECC_INJ1's ERR_ECC_INJ field.
     *
     * Error Injection On 8 bits ECC code Of OCRAM Bank1 Write Data
     */
    inline uint8_t get_ERR_ECC_INJ1_ERR_ECC_INJ() volatile
    {
        return (ERR_ECC_INJ1 >> 0u) & 0b11111111u;
    }

    /**
     * Set ERR_ECC_INJ1's ERR_ECC_INJ field.
     *
     * Error Injection On 8 bits ECC code Of OCRAM Bank1 Write Data
     */
    inline void set_ERR_ECC_INJ1_ERR_ECC_INJ(uint8_t value) volatile
    {
        uint32_t curr = ERR_ECC_INJ1;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        ERR_ECC_INJ1 = curr;
    }

    /**
     * Get ERR_DATA_INJ_LOW2's ERR_DATA_INJ field.
     *
     * Error Injection On LOW 32 bits Of OCRAM Bank2 Write Data
     */
    inline uint32_t get_ERR_DATA_INJ_LOW2_ERR_DATA_INJ() volatile
    {
        return (ERR_DATA_INJ_LOW2 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set ERR_DATA_INJ_LOW2's ERR_DATA_INJ field.
     *
     * Error Injection On LOW 32 bits Of OCRAM Bank2 Write Data
     */
    inline void set_ERR_DATA_INJ_LOW2_ERR_DATA_INJ(uint32_t value) volatile
    {
        uint32_t curr = ERR_DATA_INJ_LOW2;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        ERR_DATA_INJ_LOW2 = curr;
    }

    /**
     * Get ERR_DATA_INJ_HIGH2's ERR_DATA_INJ field.
     *
     * Error Injection On HIGH 32 bits Of OCRAM Bank2 Write Data
     */
    inline uint32_t get_ERR_DATA_INJ_HIGH2_ERR_DATA_INJ() volatile
    {
        return (ERR_DATA_INJ_HIGH2 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Set ERR_DATA_INJ_HIGH2's ERR_DATA_INJ field.
     *
     * Error Injection On HIGH 32 bits Of OCRAM Bank2 Write Data
     */
    inline void set_ERR_DATA_INJ_HIGH2_ERR_DATA_INJ(uint32_t value) volatile
    {
        uint32_t curr = ERR_DATA_INJ_HIGH2;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        ERR_DATA_INJ_HIGH2 = curr;
    }

    /**
     * Get ERR_ECC_INJ2's ERR_ECC_INJ field.
     *
     * Error Injection On 8 bits ECC code Of OCRAM Bank2 Write Data
     */
    inline uint8_t get_ERR_ECC_INJ2_ERR_ECC_INJ() volatile
    {
        return (ERR_ECC_INJ2 >> 0u) & 0b11111111u;
    }

    /**
     * Set ERR_ECC_INJ2's ERR_ECC_INJ field.
     *
     * Error Injection On 8 bits ECC code Of OCRAM Bank2 Write Data
     */
    inline void set_ERR_ECC_INJ2_ERR_ECC_INJ(uint8_t value) volatile
    {
        uint32_t curr = ERR_ECC_INJ2;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        ERR_ECC_INJ2 = curr;
    }

    /**
     * Get ERR_DATA_INJ_LOW3's ERR_DATA_INJ field.
     *
     * Error Injection On LOW 32 bits Of OCRAM Bank3 Write Data
     */
    inline uint32_t get_ERR_DATA_INJ_LOW3_ERR_DATA_INJ() volatile
    {
        return (ERR_DATA_INJ_LOW3 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set ERR_DATA_INJ_LOW3's ERR_DATA_INJ field.
     *
     * Error Injection On LOW 32 bits Of OCRAM Bank3 Write Data
     */
    inline void set_ERR_DATA_INJ_LOW3_ERR_DATA_INJ(uint32_t value) volatile
    {
        uint32_t curr = ERR_DATA_INJ_LOW3;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        ERR_DATA_INJ_LOW3 = curr;
    }

    /**
     * Get ERR_DATA_INJ_HIGH3's ERR_DATA_INJ field.
     *
     * Error Injection On HIGH 32 bits Of OCRAM Bank3 Write Data
     */
    inline uint32_t get_ERR_DATA_INJ_HIGH3_ERR_DATA_INJ() volatile
    {
        return (ERR_DATA_INJ_HIGH3 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Set ERR_DATA_INJ_HIGH3's ERR_DATA_INJ field.
     *
     * Error Injection On HIGH 32 bits Of OCRAM Bank3 Write Data
     */
    inline void set_ERR_DATA_INJ_HIGH3_ERR_DATA_INJ(uint32_t value) volatile
    {
        uint32_t curr = ERR_DATA_INJ_HIGH3;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        ERR_DATA_INJ_HIGH3 = curr;
    }

    /**
     * Get ERR_ECC_INJ3's ERR_ECC_INJ field.
     *
     * Error Injection On 8 bits ECC code Of OCRAM Bank3 Write Data
     */
    inline uint8_t get_ERR_ECC_INJ3_ERR_ECC_INJ() volatile
    {
        return (ERR_ECC_INJ3 >> 0u) & 0b11111111u;
    }

    /**
     * Set ERR_ECC_INJ3's ERR_ECC_INJ field.
     *
     * Error Injection On 8 bits ECC code Of OCRAM Bank3 Write Data
     */
    inline void set_ERR_ECC_INJ3_ERR_ECC_INJ(uint8_t value) volatile
    {
        uint32_t curr = ERR_ECC_INJ3;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        ERR_ECC_INJ3 = curr;
    }

    /**
     * Get SINGLE_ERR_ADDR_ECC0's SINGLE_ERR_ADDR field.
     *
     * Single Error Address On OCRAM Bank0
     */
    inline uint32_t get_SINGLE_ERR_ADDR_ECC0_SINGLE_ERR_ADDR() volatile
    {
        return (SINGLE_ERR_ADDR_ECC0 >> 8u) & 0b1111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_ADDR_ECC0's SINGLE_ERR_ECC field.
     *
     * Single Error ECC code On OCRAM Bank0
     */
    inline uint8_t get_SINGLE_ERR_ADDR_ECC0_SINGLE_ERR_ECC() volatile
    {
        return (SINGLE_ERR_ADDR_ECC0 >> 0u) & 0b11111111u;
    }

    /**
     * Get all of SINGLE_ERR_ADDR_ECC0's bit fields.
     *
     * (read-write) Single Error Address And ECC code On OCRAM Bank0
     */
    inline void get_SINGLE_ERR_ADDR_ECC0(uint32_t &SINGLE_ERR_ADDR,
                                         uint8_t &SINGLE_ERR_ECC) volatile
    {
        uint32_t curr = SINGLE_ERR_ADDR_ECC0;

        SINGLE_ERR_ADDR = (curr >> 8u) & 0b1111111111111111111u;
        SINGLE_ERR_ECC = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get SINGLE_ERR_DATA_LOW0's SINGLE_ERR_DATA field.
     *
     * LOW 32 Bits Single Error Read Data On OCRAM Bank0
     */
    inline uint32_t get_SINGLE_ERR_DATA_LOW0_SINGLE_ERR_DATA() volatile
    {
        return (SINGLE_ERR_DATA_LOW0 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_DATA_HIGH0's SINGLE_ERR_DATA field.
     *
     * HIGH 32 Bits Single Error Read Data On OCRAM Bank0
     */
    inline uint32_t get_SINGLE_ERR_DATA_HIGH0_SINGLE_ERR_DATA() volatile
    {
        return (SINGLE_ERR_DATA_HIGH0 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_POS_LOW0's SINGLE_ERR_POS field.
     *
     * LOW Single Error Bit Position On OCRAM Bank0
     */
    inline uint32_t get_SINGLE_ERR_POS_LOW0_SINGLE_ERR_POS() volatile
    {
        return (SINGLE_ERR_POS_LOW0 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_POS_HIGH0's SINGLE_ERR_POS field.
     *
     * HIGH Single Error Bit Position On OCRAM Bank0
     */
    inline uint32_t get_SINGLE_ERR_POS_HIGH0_SINGLE_ERR_POS() volatile
    {
        return (SINGLE_ERR_POS_HIGH0 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_ADDR_ECC1's SINGLE_ERR_ADDR field.
     *
     * Single Error Address On OCRAM Bank1
     */
    inline uint32_t get_SINGLE_ERR_ADDR_ECC1_SINGLE_ERR_ADDR() volatile
    {
        return (SINGLE_ERR_ADDR_ECC1 >> 8u) & 0b1111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_ADDR_ECC1's SINGLE_ERR_ECC field.
     *
     * Single Error ECC code On OCRAM Bank1
     */
    inline uint8_t get_SINGLE_ERR_ADDR_ECC1_SINGLE_ERR_ECC() volatile
    {
        return (SINGLE_ERR_ADDR_ECC1 >> 0u) & 0b11111111u;
    }

    /**
     * Get all of SINGLE_ERR_ADDR_ECC1's bit fields.
     *
     * (read-write) Single Error Address And ECC code On OCRAM Bank1
     */
    inline void get_SINGLE_ERR_ADDR_ECC1(uint32_t &SINGLE_ERR_ADDR,
                                         uint8_t &SINGLE_ERR_ECC) volatile
    {
        uint32_t curr = SINGLE_ERR_ADDR_ECC1;

        SINGLE_ERR_ADDR = (curr >> 8u) & 0b1111111111111111111u;
        SINGLE_ERR_ECC = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get SINGLE_ERR_DATA_LOW1's SINGLE_ERR_DATA field.
     *
     * LOW 32 Bits Single Error Read Data On OCRAM Bank1
     */
    inline uint32_t get_SINGLE_ERR_DATA_LOW1_SINGLE_ERR_DATA() volatile
    {
        return (SINGLE_ERR_DATA_LOW1 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_DATA_HIGH1's SINGLE_ERR_DATA field.
     *
     * HIGH 32 Bits Single Error Read Data On OCRAM Bank1
     */
    inline uint32_t get_SINGLE_ERR_DATA_HIGH1_SINGLE_ERR_DATA() volatile
    {
        return (SINGLE_ERR_DATA_HIGH1 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_POS_LOW1's SINGLE_ERR_POS field.
     *
     * LOW Single Error Bit Position On OCRAM Bank1
     */
    inline uint32_t get_SINGLE_ERR_POS_LOW1_SINGLE_ERR_POS() volatile
    {
        return (SINGLE_ERR_POS_LOW1 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_POS_HIGH1's SINGLE_ERR_POS field.
     *
     * HIGH Single Error Bit Position On OCRAM Bank1
     */
    inline uint32_t get_SINGLE_ERR_POS_HIGH1_SINGLE_ERR_POS() volatile
    {
        return (SINGLE_ERR_POS_HIGH1 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_ADDR_ECC2's SINGLE_ERR_ADDR field.
     *
     * Single Error Address On OCRAM Bank2
     */
    inline uint32_t get_SINGLE_ERR_ADDR_ECC2_SINGLE_ERR_ADDR() volatile
    {
        return (SINGLE_ERR_ADDR_ECC2 >> 8u) & 0b1111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_ADDR_ECC2's SINGLE_ERR_ECC field.
     *
     * Single Error ECC code On OCRAM Bank2
     */
    inline uint8_t get_SINGLE_ERR_ADDR_ECC2_SINGLE_ERR_ECC() volatile
    {
        return (SINGLE_ERR_ADDR_ECC2 >> 0u) & 0b11111111u;
    }

    /**
     * Get all of SINGLE_ERR_ADDR_ECC2's bit fields.
     *
     * (read-write) Single Error Address And ECC code On OCRAM Bank2
     */
    inline void get_SINGLE_ERR_ADDR_ECC2(uint32_t &SINGLE_ERR_ADDR,
                                         uint8_t &SINGLE_ERR_ECC) volatile
    {
        uint32_t curr = SINGLE_ERR_ADDR_ECC2;

        SINGLE_ERR_ADDR = (curr >> 8u) & 0b1111111111111111111u;
        SINGLE_ERR_ECC = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get SINGLE_ERR_DATA_LOW2's SINGLE_ERR_DATA field.
     *
     * LOW 32 Bits Single Error Read Data On OCRAM Bank2
     */
    inline uint32_t get_SINGLE_ERR_DATA_LOW2_SINGLE_ERR_DATA() volatile
    {
        return (SINGLE_ERR_DATA_LOW2 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_DATA_HIGH2's SINGLE_ERR_DATA field.
     *
     * HIGH 32 Bits Single Error Read Data On OCRAM Bank2
     */
    inline uint32_t get_SINGLE_ERR_DATA_HIGH2_SINGLE_ERR_DATA() volatile
    {
        return (SINGLE_ERR_DATA_HIGH2 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_POS_LOW2's SINGLE_ERR_POS field.
     *
     * LOW Single Error Bit Position On OCRAM Bank2
     */
    inline uint32_t get_SINGLE_ERR_POS_LOW2_SINGLE_ERR_POS() volatile
    {
        return (SINGLE_ERR_POS_LOW2 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_POS_HIGH2's SINGLE_ERR_POS field.
     *
     * HIGH Single Error Bit Position On OCRAM Bank2
     */
    inline uint32_t get_SINGLE_ERR_POS_HIGH2_SINGLE_ERR_POS() volatile
    {
        return (SINGLE_ERR_POS_HIGH2 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_ADDR_ECC3's SINGLE_ERR_ADDR field.
     *
     * Single Error Address On OCRAM Bank3
     */
    inline uint32_t get_SINGLE_ERR_ADDR_ECC3_SINGLE_ERR_ADDR() volatile
    {
        return (SINGLE_ERR_ADDR_ECC3 >> 8u) & 0b1111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_ADDR_ECC3's SINGLE_ERR_ECC field.
     *
     * Single Error ECC code On OCRAM Bank3
     */
    inline uint8_t get_SINGLE_ERR_ADDR_ECC3_SINGLE_ERR_ECC() volatile
    {
        return (SINGLE_ERR_ADDR_ECC3 >> 0u) & 0b11111111u;
    }

    /**
     * Get all of SINGLE_ERR_ADDR_ECC3's bit fields.
     *
     * (read-write) Single Error Address And ECC code On OCRAM Bank3
     */
    inline void get_SINGLE_ERR_ADDR_ECC3(uint32_t &SINGLE_ERR_ADDR,
                                         uint8_t &SINGLE_ERR_ECC) volatile
    {
        uint32_t curr = SINGLE_ERR_ADDR_ECC3;

        SINGLE_ERR_ADDR = (curr >> 8u) & 0b1111111111111111111u;
        SINGLE_ERR_ECC = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get SINGLE_ERR_DATA_LOW3's SINGLE_ERR_DATA field.
     *
     * LOW 32 Bits Single Error Read Data On OCRAM Bank3
     */
    inline uint32_t get_SINGLE_ERR_DATA_LOW3_SINGLE_ERR_DATA() volatile
    {
        return (SINGLE_ERR_DATA_LOW3 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_DATA_HIGH3's SINGLE_ERR_DATA field.
     *
     * HIGH 32 Bits Single Error Read Data On OCRAM Bank3
     */
    inline uint32_t get_SINGLE_ERR_DATA_HIGH3_SINGLE_ERR_DATA() volatile
    {
        return (SINGLE_ERR_DATA_HIGH3 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_POS_LOW3's SINGLE_ERR_POS field.
     *
     * LOW Single Error Bit Position On OCRAM Bank3
     */
    inline uint32_t get_SINGLE_ERR_POS_LOW3_SINGLE_ERR_POS() volatile
    {
        return (SINGLE_ERR_POS_LOW3 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get SINGLE_ERR_POS_HIGH3's SINGLE_ERR_POS field.
     *
     * HIGH Single Error Bit Position On OCRAM Bank3
     */
    inline uint32_t get_SINGLE_ERR_POS_HIGH3_SINGLE_ERR_POS() volatile
    {
        return (SINGLE_ERR_POS_HIGH3 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get MULTI_ERR_ADDR_ECC0's MULTI_ERR_ADDR field.
     *
     * Multiple Error Address On OCRAM Bank0
     */
    inline uint32_t get_MULTI_ERR_ADDR_ECC0_MULTI_ERR_ADDR() volatile
    {
        return (MULTI_ERR_ADDR_ECC0 >> 8u) & 0b1111111111111111111u;
    }

    /**
     * Get MULTI_ERR_ADDR_ECC0's MULTI_ERR_ECC field.
     *
     * Multiple Error ECC code On OCRAM Bank0
     */
    inline uint8_t get_MULTI_ERR_ADDR_ECC0_MULTI_ERR_ECC() volatile
    {
        return (MULTI_ERR_ADDR_ECC0 >> 0u) & 0b11111111u;
    }

    /**
     * Get all of MULTI_ERR_ADDR_ECC0's bit fields.
     *
     * (read-write) Multiple Error Address And ECC code On OCRAM Bank0
     */
    inline void get_MULTI_ERR_ADDR_ECC0(uint32_t &MULTI_ERR_ADDR,
                                        uint8_t &MULTI_ERR_ECC) volatile
    {
        uint32_t curr = MULTI_ERR_ADDR_ECC0;

        MULTI_ERR_ADDR = (curr >> 8u) & 0b1111111111111111111u;
        MULTI_ERR_ECC = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get MULTI_ERR_DATA_LOW0's MULTI_ERR_DATA field.
     *
     * LOW 32 Bits Multiple Error Read Data On OCRAM Bank0
     */
    inline uint32_t get_MULTI_ERR_DATA_LOW0_MULTI_ERR_DATA() volatile
    {
        return (MULTI_ERR_DATA_LOW0 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get MULTI_ERR_DATA_HIGH0's MULTI_ERR_DATA field.
     *
     * HIGH 32 Bits Multiple Error Read Data On OCRAM Bank0
     */
    inline uint32_t get_MULTI_ERR_DATA_HIGH0_MULTI_ERR_DATA() volatile
    {
        return (MULTI_ERR_DATA_HIGH0 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get MULTI_ERR_ADDR_ECC1's MULTI_ERR_ADDR field.
     *
     * Multiple Error Address On OCRAM Bank1
     */
    inline uint32_t get_MULTI_ERR_ADDR_ECC1_MULTI_ERR_ADDR() volatile
    {
        return (MULTI_ERR_ADDR_ECC1 >> 8u) & 0b1111111111111111111u;
    }

    /**
     * Get MULTI_ERR_ADDR_ECC1's MULTI_ERR_ECC field.
     *
     * Multiple Error ECC code On OCRAM Bank1
     */
    inline uint8_t get_MULTI_ERR_ADDR_ECC1_MULTI_ERR_ECC() volatile
    {
        return (MULTI_ERR_ADDR_ECC1 >> 0u) & 0b11111111u;
    }

    /**
     * Get all of MULTI_ERR_ADDR_ECC1's bit fields.
     *
     * (read-write) Multiple Error Address And ECC code On OCRAM Bank1
     */
    inline void get_MULTI_ERR_ADDR_ECC1(uint32_t &MULTI_ERR_ADDR,
                                        uint8_t &MULTI_ERR_ECC) volatile
    {
        uint32_t curr = MULTI_ERR_ADDR_ECC1;

        MULTI_ERR_ADDR = (curr >> 8u) & 0b1111111111111111111u;
        MULTI_ERR_ECC = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get MULTI_ERR_DATA_LOW1's MULTI_ERR_DATA field.
     *
     * LOW 32 Bits Multiple Error Read Data On OCRAM Bank1
     */
    inline uint32_t get_MULTI_ERR_DATA_LOW1_MULTI_ERR_DATA() volatile
    {
        return (MULTI_ERR_DATA_LOW1 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get MULTI_ERR_DATA_HIGH1's MULTI_ERR_DATA field.
     *
     * HIGH 32 Bits Multiple Error Read Data On OCRAM Bank1
     */
    inline uint32_t get_MULTI_ERR_DATA_HIGH1_MULTI_ERR_DATA() volatile
    {
        return (MULTI_ERR_DATA_HIGH1 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get MULTI_ERR_ADDR_ECC2's MULTI_ERR_ADDR field.
     *
     * Multiple Error Address On OCRAM Bank2
     */
    inline uint32_t get_MULTI_ERR_ADDR_ECC2_MULTI_ERR_ADDR() volatile
    {
        return (MULTI_ERR_ADDR_ECC2 >> 8u) & 0b1111111111111111111u;
    }

    /**
     * Get MULTI_ERR_ADDR_ECC2's MULTI_ERR_ECC field.
     *
     * Multiple Error ECC code On OCRAM Bank2
     */
    inline uint8_t get_MULTI_ERR_ADDR_ECC2_MULTI_ERR_ECC() volatile
    {
        return (MULTI_ERR_ADDR_ECC2 >> 0u) & 0b11111111u;
    }

    /**
     * Get all of MULTI_ERR_ADDR_ECC2's bit fields.
     *
     * (read-write) Multiple Error Address And ECC code On OCRAM Bank2
     */
    inline void get_MULTI_ERR_ADDR_ECC2(uint32_t &MULTI_ERR_ADDR,
                                        uint8_t &MULTI_ERR_ECC) volatile
    {
        uint32_t curr = MULTI_ERR_ADDR_ECC2;

        MULTI_ERR_ADDR = (curr >> 8u) & 0b1111111111111111111u;
        MULTI_ERR_ECC = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get MULTI_ERR_DATA_LOW2's MULTI_ERR_DATA field.
     *
     * LOW 32 Bits Multiple Error Read Data On OCRAM Bank2
     */
    inline uint32_t get_MULTI_ERR_DATA_LOW2_MULTI_ERR_DATA() volatile
    {
        return (MULTI_ERR_DATA_LOW2 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get MULTI_ERR_DATA_HIGH2's MULTI_ERR_DATA field.
     *
     * HIGH 32 Bits Multiple Error Read Data On OCRAM Bank2
     */
    inline uint32_t get_MULTI_ERR_DATA_HIGH2_MULTI_ERR_DATA() volatile
    {
        return (MULTI_ERR_DATA_HIGH2 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get MULTI_ERR_ADDR_ECC3's MULTI_ERR_ADDR field.
     *
     * Multiple Error Address On OCRAM Bank3
     */
    inline uint32_t get_MULTI_ERR_ADDR_ECC3_MULTI_ERR_ADDR() volatile
    {
        return (MULTI_ERR_ADDR_ECC3 >> 8u) & 0b1111111111111111111u;
    }

    /**
     * Get MULTI_ERR_ADDR_ECC3's MULTI_ERR_ECC field.
     *
     * Multiple Error ECC code On OCRAM Bank3
     */
    inline uint8_t get_MULTI_ERR_ADDR_ECC3_MULTI_ERR_ECC() volatile
    {
        return (MULTI_ERR_ADDR_ECC3 >> 0u) & 0b11111111u;
    }

    /**
     * Get all of MULTI_ERR_ADDR_ECC3's bit fields.
     *
     * (read-write) Multiple Error Address And ECC code On OCRAM Bank3
     */
    inline void get_MULTI_ERR_ADDR_ECC3(uint32_t &MULTI_ERR_ADDR,
                                        uint8_t &MULTI_ERR_ECC) volatile
    {
        uint32_t curr = MULTI_ERR_ADDR_ECC3;

        MULTI_ERR_ADDR = (curr >> 8u) & 0b1111111111111111111u;
        MULTI_ERR_ECC = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get MULTI_ERR_DATA_LOW3's MULTI_ERR_DATA field.
     *
     * LOW 32 Bits Multiple Error Read Data On OCRAM Bank3
     */
    inline uint32_t get_MULTI_ERR_DATA_LOW3_MULTI_ERR_DATA() volatile
    {
        return (MULTI_ERR_DATA_LOW3 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get MULTI_ERR_DATA_HIGH3's MULTI_ERR_DATA field.
     *
     * HIGH 32 Bits Multiple Error Read Data On OCRAM Bank3
     */
    inline uint32_t get_MULTI_ERR_DATA_HIGH3_MULTI_ERR_DATA() volatile
    {
        return (MULTI_ERR_DATA_HIGH3 >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get PIPE_ECC_EN's ECC_EN bit.
     *
     * ECC Function Enable
     */
    inline bool get_PIPE_ECC_EN_ECC_EN() volatile
    {
        return PIPE_ECC_EN & (1u << 4u);
    }

    /**
     * Set PIPE_ECC_EN's ECC_EN bit.
     *
     * ECC Function Enable
     */
    inline void set_PIPE_ECC_EN_ECC_EN() volatile
    {
        PIPE_ECC_EN |= 1u << 4u;
    }

    /**
     * Clear PIPE_ECC_EN's ECC_EN bit.
     *
     * ECC Function Enable
     */
    inline void clear_PIPE_ECC_EN_ECC_EN() volatile
    {
        PIPE_ECC_EN &= ~(1u << 4u);
    }

    /**
     * Toggle PIPE_ECC_EN's ECC_EN bit.
     *
     * ECC Function Enable
     */
    inline void toggle_PIPE_ECC_EN_ECC_EN() volatile
    {
        PIPE_ECC_EN ^= 1u << 4u;
    }

    /**
     * Get PIPE_ECC_EN's WRITE_ADDR_PIPE_EN bit.
     *
     * Write Address Pipeline Enable
     */
    inline bool get_PIPE_ECC_EN_WRITE_ADDR_PIPE_EN() volatile
    {
        return PIPE_ECC_EN & (1u << 3u);
    }

    /**
     * Set PIPE_ECC_EN's WRITE_ADDR_PIPE_EN bit.
     *
     * Write Address Pipeline Enable
     */
    inline void set_PIPE_ECC_EN_WRITE_ADDR_PIPE_EN() volatile
    {
        PIPE_ECC_EN |= 1u << 3u;
    }

    /**
     * Clear PIPE_ECC_EN's WRITE_ADDR_PIPE_EN bit.
     *
     * Write Address Pipeline Enable
     */
    inline void clear_PIPE_ECC_EN_WRITE_ADDR_PIPE_EN() volatile
    {
        PIPE_ECC_EN &= ~(1u << 3u);
    }

    /**
     * Toggle PIPE_ECC_EN's WRITE_ADDR_PIPE_EN bit.
     *
     * Write Address Pipeline Enable
     */
    inline void toggle_PIPE_ECC_EN_WRITE_ADDR_PIPE_EN() volatile
    {
        PIPE_ECC_EN ^= 1u << 3u;
    }

    /**
     * Get PIPE_ECC_EN's WRITE_DATA_PIPE_EN bit.
     *
     * Write Data Pipeline Enable
     */
    inline bool get_PIPE_ECC_EN_WRITE_DATA_PIPE_EN() volatile
    {
        return PIPE_ECC_EN & (1u << 2u);
    }

    /**
     * Set PIPE_ECC_EN's WRITE_DATA_PIPE_EN bit.
     *
     * Write Data Pipeline Enable
     */
    inline void set_PIPE_ECC_EN_WRITE_DATA_PIPE_EN() volatile
    {
        PIPE_ECC_EN |= 1u << 2u;
    }

    /**
     * Clear PIPE_ECC_EN's WRITE_DATA_PIPE_EN bit.
     *
     * Write Data Pipeline Enable
     */
    inline void clear_PIPE_ECC_EN_WRITE_DATA_PIPE_EN() volatile
    {
        PIPE_ECC_EN &= ~(1u << 2u);
    }

    /**
     * Toggle PIPE_ECC_EN's WRITE_DATA_PIPE_EN bit.
     *
     * Write Data Pipeline Enable
     */
    inline void toggle_PIPE_ECC_EN_WRITE_DATA_PIPE_EN() volatile
    {
        PIPE_ECC_EN ^= 1u << 2u;
    }

    /**
     * Get PIPE_ECC_EN's READ_ADDR_PIPE_EN bit.
     *
     * Read Address Pipeline Enable
     */
    inline bool get_PIPE_ECC_EN_READ_ADDR_PIPE_EN() volatile
    {
        return PIPE_ECC_EN & (1u << 1u);
    }

    /**
     * Set PIPE_ECC_EN's READ_ADDR_PIPE_EN bit.
     *
     * Read Address Pipeline Enable
     */
    inline void set_PIPE_ECC_EN_READ_ADDR_PIPE_EN() volatile
    {
        PIPE_ECC_EN |= 1u << 1u;
    }

    /**
     * Clear PIPE_ECC_EN's READ_ADDR_PIPE_EN bit.
     *
     * Read Address Pipeline Enable
     */
    inline void clear_PIPE_ECC_EN_READ_ADDR_PIPE_EN() volatile
    {
        PIPE_ECC_EN &= ~(1u << 1u);
    }

    /**
     * Toggle PIPE_ECC_EN's READ_ADDR_PIPE_EN bit.
     *
     * Read Address Pipeline Enable
     */
    inline void toggle_PIPE_ECC_EN_READ_ADDR_PIPE_EN() volatile
    {
        PIPE_ECC_EN ^= 1u << 1u;
    }

    /**
     * Get PIPE_ECC_EN's READ_DATA_WAIT_EN bit.
     *
     * Read Data Wait Enable
     */
    inline bool get_PIPE_ECC_EN_READ_DATA_WAIT_EN() volatile
    {
        return PIPE_ECC_EN & (1u << 0u);
    }

    /**
     * Set PIPE_ECC_EN's READ_DATA_WAIT_EN bit.
     *
     * Read Data Wait Enable
     */
    inline void set_PIPE_ECC_EN_READ_DATA_WAIT_EN() volatile
    {
        PIPE_ECC_EN |= 1u << 0u;
    }

    /**
     * Clear PIPE_ECC_EN's READ_DATA_WAIT_EN bit.
     *
     * Read Data Wait Enable
     */
    inline void clear_PIPE_ECC_EN_READ_DATA_WAIT_EN() volatile
    {
        PIPE_ECC_EN &= ~(1u << 0u);
    }

    /**
     * Toggle PIPE_ECC_EN's READ_DATA_WAIT_EN bit.
     *
     * Read Data Wait Enable
     */
    inline void toggle_PIPE_ECC_EN_READ_DATA_WAIT_EN() volatile
    {
        PIPE_ECC_EN ^= 1u << 0u;
    }

    /**
     * Get all of PIPE_ECC_EN's bit fields.
     *
     * (read-write) OCRAM Pipeline And ECC Enable
     */
    inline void get_PIPE_ECC_EN(bool &ECC_EN, bool &WRITE_ADDR_PIPE_EN,
                                bool &WRITE_DATA_PIPE_EN,
                                bool &READ_ADDR_PIPE_EN,
                                bool &READ_DATA_WAIT_EN) volatile
    {
        uint32_t curr = PIPE_ECC_EN;

        ECC_EN = curr & (1u << 4u);
        WRITE_ADDR_PIPE_EN = curr & (1u << 3u);
        WRITE_DATA_PIPE_EN = curr & (1u << 2u);
        READ_ADDR_PIPE_EN = curr & (1u << 1u);
        READ_DATA_WAIT_EN = curr & (1u << 0u);
    }

    /**
     * Set all of PIPE_ECC_EN's bit fields.
     *
     * (read-write) OCRAM Pipeline And ECC Enable
     */
    inline void set_PIPE_ECC_EN(bool ECC_EN, bool WRITE_ADDR_PIPE_EN,
                                bool WRITE_DATA_PIPE_EN,
                                bool READ_ADDR_PIPE_EN,
                                bool READ_DATA_WAIT_EN) volatile
    {
        uint32_t curr = PIPE_ECC_EN;

        curr &= ~(0b1u << 4u);
        curr |= (ECC_EN & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (WRITE_ADDR_PIPE_EN & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (WRITE_DATA_PIPE_EN & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (READ_ADDR_PIPE_EN & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (READ_DATA_WAIT_EN & 0b1u) << 0u;

        PIPE_ECC_EN = curr;
    }

    /**
     * Get PENDING_STAT's WRITE_ADDR_PIPE_PENDING bit.
     *
     * Write Address Pipeline Pending
     */
    inline bool get_PENDING_STAT_WRITE_ADDR_PIPE_PENDING() volatile
    {
        return PENDING_STAT & (1u << 3u);
    }

    /**
     * Get PENDING_STAT's WRITE_DATA_PIPE_PENDING bit.
     *
     * Write Data Pipeline Pending
     */
    inline bool get_PENDING_STAT_WRITE_DATA_PIPE_PENDING() volatile
    {
        return PENDING_STAT & (1u << 2u);
    }

    /**
     * Get PENDING_STAT's READ_ADDR_PIPE_PENDING bit.
     *
     * Read Address Pipeline Pending
     */
    inline bool get_PENDING_STAT_READ_ADDR_PIPE_PENDING() volatile
    {
        return PENDING_STAT & (1u << 1u);
    }

    /**
     * Get PENDING_STAT's READ_DATA_WAIT_PENDING bit.
     *
     * Read Data Wait Pending
     */
    inline bool get_PENDING_STAT_READ_DATA_WAIT_PENDING() volatile
    {
        return PENDING_STAT & (1u << 0u);
    }

    /**
     * Get all of PENDING_STAT's bit fields.
     *
     * (read-write) Pending Status
     */
    inline void get_PENDING_STAT(bool &WRITE_ADDR_PIPE_PENDING,
                                 bool &WRITE_DATA_PIPE_PENDING,
                                 bool &READ_ADDR_PIPE_PENDING,
                                 bool &READ_DATA_WAIT_PENDING) volatile
    {
        uint32_t curr = PENDING_STAT;

        WRITE_ADDR_PIPE_PENDING = curr & (1u << 3u);
        WRITE_DATA_PIPE_PENDING = curr & (1u << 2u);
        READ_ADDR_PIPE_PENDING = curr & (1u << 1u);
        READ_DATA_WAIT_PENDING = curr & (1u << 0u);
    }
};

static_assert(sizeof(mecc1) == mecc1::size);

static volatile mecc1 *const MECC1 = reinterpret_cast<mecc1 *>(0x40014000);

static volatile mecc1 *const MECC2 = reinterpret_cast<mecc1 *>(0x40018000);

}; // namespace MIMXRT1176::CM7
