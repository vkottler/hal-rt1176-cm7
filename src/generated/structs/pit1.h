/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../ifgen/common.h"
#include "TIMER_instance.h"

namespace MIMXRT1176::CM7
{

/**
 * PIT
 */
struct [[gnu::packed]] pit1
{
    /* Constant attributes. */
    static constexpr std::size_t size = 296; /*!< pit1's size in bytes. */

    /* Fields. */
    uint32_t MCR; /*!< (read-write) PIT Module Control Register */
    static constexpr std::size_t reserved_padding0_length = 55;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t LTMR64H; /*!< (read-write) PIT Upper Lifetime Timer Register */
    uint32_t LTMR64L; /*!< (read-write) PIT Lower Lifetime Timer Register */
    static constexpr std::size_t TIMER_length = 4;
    TIMER_instance TIMER[TIMER_length]; /*!< no description available */

    /* Methods. */

    /**
     * Get MCR's MDIS bit.
     *
     * Module Disable for PIT
     */
    inline bool get_MCR_MDIS() volatile
    {
        return MCR & (1u << 1u);
    }

    /**
     * Set MCR's MDIS bit.
     *
     * Module Disable for PIT
     */
    inline void set_MCR_MDIS() volatile
    {
        MCR |= 1u << 1u;
    }

    /**
     * Clear MCR's MDIS bit.
     *
     * Module Disable for PIT
     */
    inline void clear_MCR_MDIS() volatile
    {
        MCR &= ~(1u << 1u);
    }

    /**
     * Toggle MCR's MDIS bit.
     *
     * Module Disable for PIT
     */
    inline void toggle_MCR_MDIS() volatile
    {
        MCR ^= 1u << 1u;
    }

    /**
     * Get MCR's FRZ bit.
     *
     * Freeze
     */
    inline bool get_MCR_FRZ() volatile
    {
        return MCR & (1u << 0u);
    }

    /**
     * Set MCR's FRZ bit.
     *
     * Freeze
     */
    inline void set_MCR_FRZ() volatile
    {
        MCR |= 1u << 0u;
    }

    /**
     * Clear MCR's FRZ bit.
     *
     * Freeze
     */
    inline void clear_MCR_FRZ() volatile
    {
        MCR &= ~(1u << 0u);
    }

    /**
     * Toggle MCR's FRZ bit.
     *
     * Freeze
     */
    inline void toggle_MCR_FRZ() volatile
    {
        MCR ^= 1u << 0u;
    }

    /**
     * Get all of MCR's bit fields.
     *
     * (read-write) PIT Module Control Register
     */
    inline void get_MCR(bool &MDIS, bool &FRZ) volatile
    {
        uint32_t curr = MCR;

        MDIS = curr & (1u << 1u);
        FRZ = curr & (1u << 0u);
    }

    /**
     * Set all of MCR's bit fields.
     *
     * (read-write) PIT Module Control Register
     */
    inline void set_MCR(bool MDIS, bool FRZ) volatile
    {
        uint32_t curr = MCR;

        curr &= ~(0b1u << 1u);
        curr |= (MDIS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (FRZ & 0b1u) << 0u;

        MCR = curr;
    }

    /**
     * Get LTMR64H's LTH field.
     *
     * Life Timer value
     */
    inline uint32_t get_LTMR64H_LTH() volatile
    {
        return (LTMR64H >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get LTMR64L's LTL field.
     *
     * Life Timer value
     */
    inline uint32_t get_LTMR64L_LTL() volatile
    {
        return (LTMR64L >> 0u) & 0b11111111111111111111111111111111u;
    }
};

static_assert(sizeof(pit1) == pit1::size);

static volatile pit1 *const PIT1 = reinterpret_cast<pit1 *>(0x400D8000);

static volatile pit1 *const PIT2 = reinterpret_cast<pit1 *>(0x40CB0000);

}; // namespace MIMXRT1176::CM7
