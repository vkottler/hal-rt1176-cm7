/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * FlexCAN wrapper
 */
struct [[gnu::packed]] can1_wrapper
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        2532; /*!< can1_wrapper's size in bytes. */

    /* Fields. */
    static constexpr std::size_t reserved_padding0_length = 632;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t GFWR; /*!< (read-write) Glitch Filter Width Register */

    /* Methods. */

    /**
     * Get GFWR's GFWR field.
     *
     * Glitch Filter Width
     */
    inline uint8_t get_GFWR_GFWR() volatile
    {
        return (GFWR >> 0u) & 0b11111111u;
    }

    /**
     * Set GFWR's GFWR field.
     *
     * Glitch Filter Width
     */
    inline void set_GFWR_GFWR(uint8_t value) volatile
    {
        uint32_t curr = GFWR;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        GFWR = curr;
    }
};

static_assert(sizeof(can1_wrapper) == can1_wrapper::size);

static volatile can1_wrapper *const CAN1_WRAPPER =
    reinterpret_cast<can1_wrapper *>(0x400C4000);

static volatile can1_wrapper *const CAN2_WRAPPER =
    reinterpret_cast<can1_wrapper *>(0x400C8000);

static volatile can1_wrapper *const CAN3_WRAPPER =
    reinterpret_cast<can1_wrapper *>(0x40C3C000);

}; // namespace MIMXRT1176::CM7
