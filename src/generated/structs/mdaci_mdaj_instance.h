/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/XRDC2_D0_MDAC_MDA_W1_PA.h"
#include "../enums/XRDC2_D0_MDAC_MDA_W1_SA.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * no description available
 */
struct [[gnu::packed]] mdaci_mdaj_instance
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        8; /*!< mdaci_mdaj_instance's size in bytes. */

    /* Fields. */
    uint32_t MDAC_MDA_W0; /*!< (read-write) Master Domain Assignment */
    uint32_t MDAC_MDA_W1; /*!< (read-write) Master Domain Assignment */

    /* Methods. */

    /**
     * Get MDAC_MDA_W0's MATCH field.
     *
     * Match
     */
    inline uint16_t get_MDAC_MDA_W0_MATCH()
    {
        return (MDAC_MDA_W0 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set MDAC_MDA_W0's MATCH field.
     *
     * Match
     */
    inline void set_MDAC_MDA_W0_MATCH(uint16_t value)
    {
        uint32_t curr = MDAC_MDA_W0;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        MDAC_MDA_W0 = curr;
    }

    /**
     * Get MDAC_MDA_W0's MASK field.
     *
     * Mask
     */
    inline uint16_t get_MDAC_MDA_W0_MASK()
    {
        return (MDAC_MDA_W0 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set MDAC_MDA_W0's MASK field.
     *
     * Mask
     */
    inline void set_MDAC_MDA_W0_MASK(uint16_t value)
    {
        uint32_t curr = MDAC_MDA_W0;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        MDAC_MDA_W0 = curr;
    }

    /**
     * Get all of MDAC_MDA_W0's bit fields.
     *
     * (read-write) Master Domain Assignment
     */
    inline void get_MDAC_MDA_W0(uint16_t &MATCH, uint16_t &MASK)
    {
        uint32_t curr = MDAC_MDA_W0;

        MATCH = (curr >> 16u) & 0b1111111111111111u;
        MASK = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of MDAC_MDA_W0's bit fields.
     *
     * (read-write) Master Domain Assignment
     */
    inline void set_MDAC_MDA_W0(uint16_t MATCH, uint16_t MASK)
    {
        uint32_t curr = MDAC_MDA_W0;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (MATCH & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (MASK & 0b1111111111111111u) << 0u;

        MDAC_MDA_W0 = curr;
    }

    /**
     * Get MDAC_MDA_W1's VLD bit.
     *
     * Valid
     */
    inline bool get_MDAC_MDA_W1_VLD()
    {
        return MDAC_MDA_W1 & (1u << 31u);
    }

    /**
     * Set MDAC_MDA_W1's VLD bit.
     *
     * Valid
     */
    inline void set_MDAC_MDA_W1_VLD()
    {
        MDAC_MDA_W1 |= 1u << 31u;
    }

    /**
     * Clear MDAC_MDA_W1's VLD bit.
     *
     * Valid
     */
    inline void clear_MDAC_MDA_W1_VLD()
    {
        MDAC_MDA_W1 &= ~(1u << 31u);
    }

    /**
     * Toggle MDAC_MDA_W1's VLD bit.
     *
     * Valid
     */
    inline void toggle_MDAC_MDA_W1_VLD()
    {
        MDAC_MDA_W1 ^= 1u << 31u;
    }

    /**
     * Get MDAC_MDA_W1's DL bit.
     *
     * Descriptor Lock
     */
    inline bool get_MDAC_MDA_W1_DL()
    {
        return MDAC_MDA_W1 & (1u << 30u);
    }

    /**
     * Set MDAC_MDA_W1's DL bit.
     *
     * Descriptor Lock
     */
    inline void set_MDAC_MDA_W1_DL()
    {
        MDAC_MDA_W1 |= 1u << 30u;
    }

    /**
     * Clear MDAC_MDA_W1's DL bit.
     *
     * Descriptor Lock
     */
    inline void clear_MDAC_MDA_W1_DL()
    {
        MDAC_MDA_W1 &= ~(1u << 30u);
    }

    /**
     * Toggle MDAC_MDA_W1's DL bit.
     *
     * Descriptor Lock
     */
    inline void toggle_MDAC_MDA_W1_DL()
    {
        MDAC_MDA_W1 ^= 1u << 30u;
    }

    /**
     * Get MDAC_MDA_W1's SA field.
     *
     * Secure attribute
     */
    inline XRDC2_D0_MDAC_MDA_W1_SA get_MDAC_MDA_W1_SA()
    {
        return XRDC2_D0_MDAC_MDA_W1_SA((MDAC_MDA_W1 >> 26u) & 0b11u);
    }

    /**
     * Set MDAC_MDA_W1's SA field.
     *
     * Secure attribute
     */
    inline void set_MDAC_MDA_W1_SA(XRDC2_D0_MDAC_MDA_W1_SA value)
    {
        uint32_t curr = MDAC_MDA_W1;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        MDAC_MDA_W1 = curr;
    }

    /**
     * Get MDAC_MDA_W1's PA field.
     *
     * Privileged attribute
     */
    inline XRDC2_D0_MDAC_MDA_W1_PA get_MDAC_MDA_W1_PA()
    {
        return XRDC2_D0_MDAC_MDA_W1_PA((MDAC_MDA_W1 >> 24u) & 0b11u);
    }

    /**
     * Set MDAC_MDA_W1's PA field.
     *
     * Privileged attribute
     */
    inline void set_MDAC_MDA_W1_PA(XRDC2_D0_MDAC_MDA_W1_PA value)
    {
        uint32_t curr = MDAC_MDA_W1;

        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(value) & 0b11u) << 24u;

        MDAC_MDA_W1 = curr;
    }

    /**
     * Get MDAC_MDA_W1's DID field.
     *
     * Domain Identifier
     */
    inline uint8_t get_MDAC_MDA_W1_DID()
    {
        return (MDAC_MDA_W1 >> 16u) & 0b1111u;
    }

    /**
     * Set MDAC_MDA_W1's DID field.
     *
     * Domain Identifier
     */
    inline void set_MDAC_MDA_W1_DID(uint8_t value)
    {
        uint32_t curr = MDAC_MDA_W1;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        MDAC_MDA_W1 = curr;
    }

    /**
     * Get all of MDAC_MDA_W1's bit fields.
     *
     * (read-write) Master Domain Assignment
     */
    inline void get_MDAC_MDA_W1(bool &VLD, bool &DL,
                                XRDC2_D0_MDAC_MDA_W1_SA &SA,
                                XRDC2_D0_MDAC_MDA_W1_PA &PA, uint8_t &DID)
    {
        uint32_t curr = MDAC_MDA_W1;

        VLD = curr & (1u << 31u);
        DL = curr & (1u << 30u);
        SA = XRDC2_D0_MDAC_MDA_W1_SA((curr >> 26u) & 0b11u);
        PA = XRDC2_D0_MDAC_MDA_W1_PA((curr >> 24u) & 0b11u);
        DID = (curr >> 16u) & 0b1111u;
    }

    /**
     * Set all of MDAC_MDA_W1's bit fields.
     *
     * (read-write) Master Domain Assignment
     */
    inline void set_MDAC_MDA_W1(bool VLD, bool DL, XRDC2_D0_MDAC_MDA_W1_SA SA,
                                XRDC2_D0_MDAC_MDA_W1_PA PA, uint8_t DID)
    {
        uint32_t curr = MDAC_MDA_W1;

        curr &= ~(0b1u << 31u);
        curr |= (VLD & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (DL & 0b1u) << 30u;
        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(SA) & 0b11u) << 26u;
        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(PA) & 0b11u) << 24u;
        curr &= ~(0b1111u << 16u);
        curr |= (DID & 0b1111u) << 16u;

        MDAC_MDA_W1 = curr;
    }
};

static_assert(sizeof(mdaci_mdaj_instance) == mdaci_mdaj_instance::size);

}; // namespace MIMXRT1176::CM7
