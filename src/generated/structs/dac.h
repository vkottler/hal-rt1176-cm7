/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/DAC_PARAM_FIFOSZ.h"
#include "../enums/DAC_VERID_FEATURE.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * DAC
 */
struct [[gnu::packed]] dac
{
    /* Constant attributes. */
    static constexpr std::size_t size = 24; /*!< dac's size in bytes. */

    /* Fields. */
    uint32_t VERID; /*!< (read-write) Version Identifier Register */
    uint32_t PARAM; /*!< (read-write) Parameter Register */
    uint32_t DATA;  /*!< (read-write) DAC Data Register */
    uint32_t CR;    /*!< (read-write) DAC Status and Control Register */
    uint32_t PTR;   /*!< (read-write) DAC FIFO Pointer Register */
    uint32_t CR2;   /*!< (read-write) DAC Status and Control Register 2 */

    /* Methods. */

    /**
     * Get VERID's MAJOR field.
     *
     * Major version number
     */
    inline uint8_t get_VERID_MAJOR() volatile
    {
        return (VERID >> 24u) & 0b11111111u;
    }

    /**
     * Get VERID's MINOR field.
     *
     * Minor version number
     */
    inline uint8_t get_VERID_MINOR() volatile
    {
        return (VERID >> 16u) & 0b11111111u;
    }

    /**
     * Get VERID's FEATURE field.
     *
     * Feature Identification Number
     */
    inline DAC_VERID_FEATURE get_VERID_FEATURE() volatile
    {
        return DAC_VERID_FEATURE((VERID >> 0u) & 0b1111111111111111u);
    }

    /**
     * Get all of VERID's bit fields.
     *
     * (read-write) Version Identifier Register
     */
    inline void get_VERID(uint8_t &MAJOR, uint8_t &MINOR,
                          DAC_VERID_FEATURE &FEATURE) volatile
    {
        uint32_t curr = VERID;

        MAJOR = (curr >> 24u) & 0b11111111u;
        MINOR = (curr >> 16u) & 0b11111111u;
        FEATURE = DAC_VERID_FEATURE((curr >> 0u) & 0b1111111111111111u);
    }

    /**
     * Get PARAM's FIFOSZ field.
     *
     * FIFO size
     */
    inline DAC_PARAM_FIFOSZ get_PARAM_FIFOSZ() volatile
    {
        return DAC_PARAM_FIFOSZ((PARAM >> 0u) & 0b111u);
    }

    /**
     * Set DATA's DATA0 field.
     *
     * FIFO DATA0
     */
    inline void set_DATA_DATA0(uint16_t value) volatile
    {
        uint32_t curr = DATA;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        DATA = curr;
    }

    /**
     * Get CR's WML field.
     *
     * Watermark Level Select
     */
    inline uint8_t get_CR_WML() volatile
    {
        return (CR >> 24u) & 0b11111111u;
    }

    /**
     * Set CR's WML field.
     *
     * Watermark Level Select
     */
    inline void set_CR_WML(uint8_t value) volatile
    {
        uint32_t curr = CR;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        CR = curr;
    }

    /**
     * Get CR's DMAEN bit.
     *
     * DMA Enable Select
     */
    inline bool get_CR_DMAEN() volatile
    {
        return CR & (1u << 23u);
    }

    /**
     * Set CR's DMAEN bit.
     *
     * DMA Enable Select
     */
    inline void set_CR_DMAEN() volatile
    {
        CR |= 1u << 23u;
    }

    /**
     * Clear CR's DMAEN bit.
     *
     * DMA Enable Select
     */
    inline void clear_CR_DMAEN() volatile
    {
        CR &= ~(1u << 23u);
    }

    /**
     * Toggle CR's DMAEN bit.
     *
     * DMA Enable Select
     */
    inline void toggle_CR_DMAEN() volatile
    {
        CR ^= 1u << 23u;
    }

    /**
     * Get CR's SWRST bit.
     *
     * Software reset
     */
    inline bool get_CR_SWRST() volatile
    {
        return CR & (1u << 22u);
    }

    /**
     * Set CR's SWRST bit.
     *
     * Software reset
     */
    inline void set_CR_SWRST() volatile
    {
        CR |= 1u << 22u;
    }

    /**
     * Clear CR's SWRST bit.
     *
     * Software reset
     */
    inline void clear_CR_SWRST() volatile
    {
        CR &= ~(1u << 22u);
    }

    /**
     * Toggle CR's SWRST bit.
     *
     * Software reset
     */
    inline void toggle_CR_SWRST() volatile
    {
        CR ^= 1u << 22u;
    }

    /**
     * Get CR's FIFORST bit.
     *
     * FIFO Reset
     */
    inline bool get_CR_FIFORST() volatile
    {
        return CR & (1u << 21u);
    }

    /**
     * Set CR's FIFORST bit.
     *
     * FIFO Reset
     */
    inline void set_CR_FIFORST() volatile
    {
        CR |= 1u << 21u;
    }

    /**
     * Clear CR's FIFORST bit.
     *
     * FIFO Reset
     */
    inline void clear_CR_FIFORST() volatile
    {
        CR &= ~(1u << 21u);
    }

    /**
     * Toggle CR's FIFORST bit.
     *
     * FIFO Reset
     */
    inline void toggle_CR_FIFORST() volatile
    {
        CR ^= 1u << 21u;
    }

    /**
     * Get CR's UVIE bit.
     *
     * Underflow and overflow interrupt enable
     */
    inline bool get_CR_UVIE() volatile
    {
        return CR & (1u << 18u);
    }

    /**
     * Set CR's UVIE bit.
     *
     * Underflow and overflow interrupt enable
     */
    inline void set_CR_UVIE() volatile
    {
        CR |= 1u << 18u;
    }

    /**
     * Clear CR's UVIE bit.
     *
     * Underflow and overflow interrupt enable
     */
    inline void clear_CR_UVIE() volatile
    {
        CR &= ~(1u << 18u);
    }

    /**
     * Toggle CR's UVIE bit.
     *
     * Underflow and overflow interrupt enable
     */
    inline void toggle_CR_UVIE() volatile
    {
        CR ^= 1u << 18u;
    }

    /**
     * Get CR's SWMD bit.
     *
     * DAC FIFO Mode Select
     */
    inline bool get_CR_SWMD() volatile
    {
        return CR & (1u << 17u);
    }

    /**
     * Set CR's SWMD bit.
     *
     * DAC FIFO Mode Select
     */
    inline void set_CR_SWMD() volatile
    {
        CR |= 1u << 17u;
    }

    /**
     * Clear CR's SWMD bit.
     *
     * DAC FIFO Mode Select
     */
    inline void clear_CR_SWMD() volatile
    {
        CR &= ~(1u << 17u);
    }

    /**
     * Toggle CR's SWMD bit.
     *
     * DAC FIFO Mode Select
     */
    inline void toggle_CR_SWMD() volatile
    {
        CR ^= 1u << 17u;
    }

    /**
     * Get CR's FIFOEN bit.
     *
     * FIFO Enable
     */
    inline bool get_CR_FIFOEN() volatile
    {
        return CR & (1u << 16u);
    }

    /**
     * Set CR's FIFOEN bit.
     *
     * FIFO Enable
     */
    inline void set_CR_FIFOEN() volatile
    {
        CR |= 1u << 16u;
    }

    /**
     * Clear CR's FIFOEN bit.
     *
     * FIFO Enable
     */
    inline void clear_CR_FIFOEN() volatile
    {
        CR &= ~(1u << 16u);
    }

    /**
     * Toggle CR's FIFOEN bit.
     *
     * FIFO Enable
     */
    inline void toggle_CR_FIFOEN() volatile
    {
        CR ^= 1u << 16u;
    }

    /**
     * Get CR's DACEN bit.
     *
     * DAC Enable
     */
    inline bool get_CR_DACEN() volatile
    {
        return CR & (1u << 15u);
    }

    /**
     * Set CR's DACEN bit.
     *
     * DAC Enable
     */
    inline void set_CR_DACEN() volatile
    {
        CR |= 1u << 15u;
    }

    /**
     * Clear CR's DACEN bit.
     *
     * DAC Enable
     */
    inline void clear_CR_DACEN() volatile
    {
        CR &= ~(1u << 15u);
    }

    /**
     * Toggle CR's DACEN bit.
     *
     * DAC Enable
     */
    inline void toggle_CR_DACEN() volatile
    {
        CR ^= 1u << 15u;
    }

    /**
     * Get CR's DACRFS bit.
     *
     * DAC Reference Select
     */
    inline bool get_CR_DACRFS() volatile
    {
        return CR & (1u << 14u);
    }

    /**
     * Set CR's DACRFS bit.
     *
     * DAC Reference Select
     */
    inline void set_CR_DACRFS() volatile
    {
        CR |= 1u << 14u;
    }

    /**
     * Clear CR's DACRFS bit.
     *
     * DAC Reference Select
     */
    inline void clear_CR_DACRFS() volatile
    {
        CR &= ~(1u << 14u);
    }

    /**
     * Toggle CR's DACRFS bit.
     *
     * DAC Reference Select
     */
    inline void toggle_CR_DACRFS() volatile
    {
        CR ^= 1u << 14u;
    }

    /**
     * Get CR's TRGSEL bit.
     *
     * DAC Trigger Select
     */
    inline bool get_CR_TRGSEL() volatile
    {
        return CR & (1u << 13u);
    }

    /**
     * Set CR's TRGSEL bit.
     *
     * DAC Trigger Select
     */
    inline void set_CR_TRGSEL() volatile
    {
        CR |= 1u << 13u;
    }

    /**
     * Clear CR's TRGSEL bit.
     *
     * DAC Trigger Select
     */
    inline void clear_CR_TRGSEL() volatile
    {
        CR &= ~(1u << 13u);
    }

    /**
     * Toggle CR's TRGSEL bit.
     *
     * DAC Trigger Select
     */
    inline void toggle_CR_TRGSEL() volatile
    {
        CR ^= 1u << 13u;
    }

    /**
     * Get CR's SWTRG bit.
     *
     * DAC Software Trigger
     */
    inline bool get_CR_SWTRG() volatile
    {
        return CR & (1u << 12u);
    }

    /**
     * Set CR's SWTRG bit.
     *
     * DAC Software Trigger
     */
    inline void set_CR_SWTRG() volatile
    {
        CR |= 1u << 12u;
    }

    /**
     * Clear CR's SWTRG bit.
     *
     * DAC Software Trigger
     */
    inline void clear_CR_SWTRG() volatile
    {
        CR &= ~(1u << 12u);
    }

    /**
     * Toggle CR's SWTRG bit.
     *
     * DAC Software Trigger
     */
    inline void toggle_CR_SWTRG() volatile
    {
        CR ^= 1u << 12u;
    }

    /**
     * Get CR's WTMIE bit.
     *
     * Watermark Interrupt Enable
     */
    inline bool get_CR_WTMIE() volatile
    {
        return CR & (1u << 10u);
    }

    /**
     * Set CR's WTMIE bit.
     *
     * Watermark Interrupt Enable
     */
    inline void set_CR_WTMIE() volatile
    {
        CR |= 1u << 10u;
    }

    /**
     * Clear CR's WTMIE bit.
     *
     * Watermark Interrupt Enable
     */
    inline void clear_CR_WTMIE() volatile
    {
        CR &= ~(1u << 10u);
    }

    /**
     * Toggle CR's WTMIE bit.
     *
     * Watermark Interrupt Enable
     */
    inline void toggle_CR_WTMIE() volatile
    {
        CR ^= 1u << 10u;
    }

    /**
     * Get CR's EMPTIE bit.
     *
     * Nearly Empty Interrupt Enable
     */
    inline bool get_CR_EMPTIE() volatile
    {
        return CR & (1u << 9u);
    }

    /**
     * Set CR's EMPTIE bit.
     *
     * Nearly Empty Interrupt Enable
     */
    inline void set_CR_EMPTIE() volatile
    {
        CR |= 1u << 9u;
    }

    /**
     * Clear CR's EMPTIE bit.
     *
     * Nearly Empty Interrupt Enable
     */
    inline void clear_CR_EMPTIE() volatile
    {
        CR &= ~(1u << 9u);
    }

    /**
     * Toggle CR's EMPTIE bit.
     *
     * Nearly Empty Interrupt Enable
     */
    inline void toggle_CR_EMPTIE() volatile
    {
        CR ^= 1u << 9u;
    }

    /**
     * Get CR's FULLIE bit.
     *
     * Full Interrupt Enable
     */
    inline bool get_CR_FULLIE() volatile
    {
        return CR & (1u << 8u);
    }

    /**
     * Set CR's FULLIE bit.
     *
     * Full Interrupt Enable
     */
    inline void set_CR_FULLIE() volatile
    {
        CR |= 1u << 8u;
    }

    /**
     * Clear CR's FULLIE bit.
     *
     * Full Interrupt Enable
     */
    inline void clear_CR_FULLIE() volatile
    {
        CR &= ~(1u << 8u);
    }

    /**
     * Toggle CR's FULLIE bit.
     *
     * Full Interrupt Enable
     */
    inline void toggle_CR_FULLIE() volatile
    {
        CR ^= 1u << 8u;
    }

    /**
     * Get CR's OVFF bit.
     *
     * Overflow Flag
     */
    inline bool get_CR_OVFF() volatile
    {
        return CR & (1u << 4u);
    }

    /**
     * Set CR's OVFF bit.
     *
     * Overflow Flag
     */
    inline void set_CR_OVFF() volatile
    {
        CR |= 1u << 4u;
    }

    /**
     * Clear CR's OVFF bit.
     *
     * Overflow Flag
     */
    inline void clear_CR_OVFF() volatile
    {
        CR &= ~(1u << 4u);
    }

    /**
     * Toggle CR's OVFF bit.
     *
     * Overflow Flag
     */
    inline void toggle_CR_OVFF() volatile
    {
        CR ^= 1u << 4u;
    }

    /**
     * Get CR's UDFF bit.
     *
     * Underflow Flag
     */
    inline bool get_CR_UDFF() volatile
    {
        return CR & (1u << 3u);
    }

    /**
     * Set CR's UDFF bit.
     *
     * Underflow Flag
     */
    inline void set_CR_UDFF() volatile
    {
        CR |= 1u << 3u;
    }

    /**
     * Clear CR's UDFF bit.
     *
     * Underflow Flag
     */
    inline void clear_CR_UDFF() volatile
    {
        CR &= ~(1u << 3u);
    }

    /**
     * Toggle CR's UDFF bit.
     *
     * Underflow Flag
     */
    inline void toggle_CR_UDFF() volatile
    {
        CR ^= 1u << 3u;
    }

    /**
     * Get CR's WMF bit.
     *
     * FIFO Watermark Status Flag
     */
    inline bool get_CR_WMF() volatile
    {
        return CR & (1u << 2u);
    }

    /**
     * Set CR's WMF bit.
     *
     * FIFO Watermark Status Flag
     */
    inline void set_CR_WMF() volatile
    {
        CR |= 1u << 2u;
    }

    /**
     * Clear CR's WMF bit.
     *
     * FIFO Watermark Status Flag
     */
    inline void clear_CR_WMF() volatile
    {
        CR &= ~(1u << 2u);
    }

    /**
     * Toggle CR's WMF bit.
     *
     * FIFO Watermark Status Flag
     */
    inline void toggle_CR_WMF() volatile
    {
        CR ^= 1u << 2u;
    }

    /**
     * Get CR's NEMPTF bit.
     *
     * Nearly Empty Flag
     */
    inline bool get_CR_NEMPTF() volatile
    {
        return CR & (1u << 1u);
    }

    /**
     * Set CR's NEMPTF bit.
     *
     * Nearly Empty Flag
     */
    inline void set_CR_NEMPTF() volatile
    {
        CR |= 1u << 1u;
    }

    /**
     * Clear CR's NEMPTF bit.
     *
     * Nearly Empty Flag
     */
    inline void clear_CR_NEMPTF() volatile
    {
        CR &= ~(1u << 1u);
    }

    /**
     * Toggle CR's NEMPTF bit.
     *
     * Nearly Empty Flag
     */
    inline void toggle_CR_NEMPTF() volatile
    {
        CR ^= 1u << 1u;
    }

    /**
     * Get CR's FULLF bit.
     *
     * Full Flag
     */
    inline bool get_CR_FULLF() volatile
    {
        return CR & (1u << 0u);
    }

    /**
     * Set CR's FULLF bit.
     *
     * Full Flag
     */
    inline void set_CR_FULLF() volatile
    {
        CR |= 1u << 0u;
    }

    /**
     * Clear CR's FULLF bit.
     *
     * Full Flag
     */
    inline void clear_CR_FULLF() volatile
    {
        CR &= ~(1u << 0u);
    }

    /**
     * Toggle CR's FULLF bit.
     *
     * Full Flag
     */
    inline void toggle_CR_FULLF() volatile
    {
        CR ^= 1u << 0u;
    }

    /**
     * Get all of CR's bit fields.
     *
     * (read-write) DAC Status and Control Register
     */
    inline void get_CR(uint8_t &WML, bool &DMAEN, bool &SWRST, bool &FIFORST,
                       bool &UVIE, bool &SWMD, bool &FIFOEN, bool &DACEN,
                       bool &DACRFS, bool &TRGSEL, bool &SWTRG, bool &WTMIE,
                       bool &EMPTIE, bool &FULLIE, bool &OVFF, bool &UDFF,
                       bool &WMF, bool &NEMPTF, bool &FULLF) volatile
    {
        uint32_t curr = CR;

        WML = (curr >> 24u) & 0b11111111u;
        DMAEN = curr & (1u << 23u);
        SWRST = curr & (1u << 22u);
        FIFORST = curr & (1u << 21u);
        UVIE = curr & (1u << 18u);
        SWMD = curr & (1u << 17u);
        FIFOEN = curr & (1u << 16u);
        DACEN = curr & (1u << 15u);
        DACRFS = curr & (1u << 14u);
        TRGSEL = curr & (1u << 13u);
        SWTRG = curr & (1u << 12u);
        WTMIE = curr & (1u << 10u);
        EMPTIE = curr & (1u << 9u);
        FULLIE = curr & (1u << 8u);
        OVFF = curr & (1u << 4u);
        UDFF = curr & (1u << 3u);
        WMF = curr & (1u << 2u);
        NEMPTF = curr & (1u << 1u);
        FULLF = curr & (1u << 0u);
    }

    /**
     * Set all of CR's bit fields.
     *
     * (read-write) DAC Status and Control Register
     */
    inline void set_CR(uint8_t WML, bool DMAEN, bool SWRST, bool FIFORST,
                       bool UVIE, bool SWMD, bool FIFOEN, bool DACEN,
                       bool DACRFS, bool TRGSEL, bool SWTRG, bool WTMIE,
                       bool EMPTIE, bool FULLIE, bool OVFF, bool UDFF,
                       bool WMF, bool NEMPTF, bool FULLF) volatile
    {
        uint32_t curr = CR;

        curr &= ~(0b11111111u << 24u);
        curr |= (WML & 0b11111111u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (DMAEN & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (SWRST & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (FIFORST & 0b1u) << 21u;
        curr &= ~(0b1u << 18u);
        curr |= (UVIE & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (SWMD & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (FIFOEN & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (DACEN & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (DACRFS & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (TRGSEL & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (SWTRG & 0b1u) << 12u;
        curr &= ~(0b1u << 10u);
        curr |= (WTMIE & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (EMPTIE & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (FULLIE & 0b1u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (OVFF & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (UDFF & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (WMF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (NEMPTF & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (FULLF & 0b1u) << 0u;

        CR = curr;
    }

    /**
     * Get PTR's DACRFP field.
     *
     * DACRFP
     */
    inline uint8_t get_PTR_DACRFP() volatile
    {
        return (PTR >> 16u) & 0b11111111u;
    }

    /**
     * Get PTR's DACWFP field.
     *
     * DACWFP
     */
    inline uint8_t get_PTR_DACWFP() volatile
    {
        return (PTR >> 0u) & 0b11111111u;
    }

    /**
     * Get all of PTR's bit fields.
     *
     * (read-write) DAC FIFO Pointer Register
     */
    inline void get_PTR(uint8_t &DACRFP, uint8_t &DACWFP) volatile
    {
        uint32_t curr = PTR;

        DACRFP = (curr >> 16u) & 0b11111111u;
        DACWFP = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get CR2's IREF bit.
     *
     * Internal Current Reference Select
     */
    inline bool get_CR2_IREF() volatile
    {
        return CR2 & (1u << 6u);
    }

    /**
     * Set CR2's IREF bit.
     *
     * Internal Current Reference Select
     */
    inline void set_CR2_IREF() volatile
    {
        CR2 |= 1u << 6u;
    }

    /**
     * Clear CR2's IREF bit.
     *
     * Internal Current Reference Select
     */
    inline void clear_CR2_IREF() volatile
    {
        CR2 &= ~(1u << 6u);
    }

    /**
     * Toggle CR2's IREF bit.
     *
     * Internal Current Reference Select
     */
    inline void toggle_CR2_IREF() volatile
    {
        CR2 ^= 1u << 6u;
    }

    /**
     * Get CR2's IREF1 bit.
     *
     * Internal ZTC (Zero Temperature Coefficient) Current Reference Select
     */
    inline bool get_CR2_IREF1() volatile
    {
        return CR2 & (1u << 5u);
    }

    /**
     * Set CR2's IREF1 bit.
     *
     * Internal ZTC (Zero Temperature Coefficient) Current Reference Select
     */
    inline void set_CR2_IREF1() volatile
    {
        CR2 |= 1u << 5u;
    }

    /**
     * Clear CR2's IREF1 bit.
     *
     * Internal ZTC (Zero Temperature Coefficient) Current Reference Select
     */
    inline void clear_CR2_IREF1() volatile
    {
        CR2 &= ~(1u << 5u);
    }

    /**
     * Toggle CR2's IREF1 bit.
     *
     * Internal ZTC (Zero Temperature Coefficient) Current Reference Select
     */
    inline void toggle_CR2_IREF1() volatile
    {
        CR2 ^= 1u << 5u;
    }

    /**
     * Get CR2's IREF2 bit.
     *
     * Internal PTAT (Proportional To Absolute Temperature) Current Reference
     * Select
     */
    inline bool get_CR2_IREF2() volatile
    {
        return CR2 & (1u << 4u);
    }

    /**
     * Set CR2's IREF2 bit.
     *
     * Internal PTAT (Proportional To Absolute Temperature) Current Reference
     * Select
     */
    inline void set_CR2_IREF2() volatile
    {
        CR2 |= 1u << 4u;
    }

    /**
     * Clear CR2's IREF2 bit.
     *
     * Internal PTAT (Proportional To Absolute Temperature) Current Reference
     * Select
     */
    inline void clear_CR2_IREF2() volatile
    {
        CR2 &= ~(1u << 4u);
    }

    /**
     * Toggle CR2's IREF2 bit.
     *
     * Internal PTAT (Proportional To Absolute Temperature) Current Reference
     * Select
     */
    inline void toggle_CR2_IREF2() volatile
    {
        CR2 ^= 1u << 4u;
    }

    /**
     * Get CR2's BFHS bit.
     *
     * Buffer High Speed Select
     */
    inline bool get_CR2_BFHS() volatile
    {
        return CR2 & (1u << 3u);
    }

    /**
     * Set CR2's BFHS bit.
     *
     * Buffer High Speed Select
     */
    inline void set_CR2_BFHS() volatile
    {
        CR2 |= 1u << 3u;
    }

    /**
     * Clear CR2's BFHS bit.
     *
     * Buffer High Speed Select
     */
    inline void clear_CR2_BFHS() volatile
    {
        CR2 &= ~(1u << 3u);
    }

    /**
     * Toggle CR2's BFHS bit.
     *
     * Buffer High Speed Select
     */
    inline void toggle_CR2_BFHS() volatile
    {
        CR2 ^= 1u << 3u;
    }

    /**
     * Get CR2's BFMS bit.
     *
     * Buffer Middle Speed Select
     */
    inline bool get_CR2_BFMS() volatile
    {
        return CR2 & (1u << 2u);
    }

    /**
     * Set CR2's BFMS bit.
     *
     * Buffer Middle Speed Select
     */
    inline void set_CR2_BFMS() volatile
    {
        CR2 |= 1u << 2u;
    }

    /**
     * Clear CR2's BFMS bit.
     *
     * Buffer Middle Speed Select
     */
    inline void clear_CR2_BFMS() volatile
    {
        CR2 &= ~(1u << 2u);
    }

    /**
     * Toggle CR2's BFMS bit.
     *
     * Buffer Middle Speed Select
     */
    inline void toggle_CR2_BFMS() volatile
    {
        CR2 ^= 1u << 2u;
    }

    /**
     * Get CR2's OEN bit.
     *
     * Optional Enable
     */
    inline bool get_CR2_OEN() volatile
    {
        return CR2 & (1u << 1u);
    }

    /**
     * Set CR2's OEN bit.
     *
     * Optional Enable
     */
    inline void set_CR2_OEN() volatile
    {
        CR2 |= 1u << 1u;
    }

    /**
     * Clear CR2's OEN bit.
     *
     * Optional Enable
     */
    inline void clear_CR2_OEN() volatile
    {
        CR2 &= ~(1u << 1u);
    }

    /**
     * Toggle CR2's OEN bit.
     *
     * Optional Enable
     */
    inline void toggle_CR2_OEN() volatile
    {
        CR2 ^= 1u << 1u;
    }

    /**
     * Get CR2's BFEN bit.
     *
     * Buffer Enable
     */
    inline bool get_CR2_BFEN() volatile
    {
        return CR2 & (1u << 0u);
    }

    /**
     * Set CR2's BFEN bit.
     *
     * Buffer Enable
     */
    inline void set_CR2_BFEN() volatile
    {
        CR2 |= 1u << 0u;
    }

    /**
     * Clear CR2's BFEN bit.
     *
     * Buffer Enable
     */
    inline void clear_CR2_BFEN() volatile
    {
        CR2 &= ~(1u << 0u);
    }

    /**
     * Toggle CR2's BFEN bit.
     *
     * Buffer Enable
     */
    inline void toggle_CR2_BFEN() volatile
    {
        CR2 ^= 1u << 0u;
    }

    /**
     * Get all of CR2's bit fields.
     *
     * (read-write) DAC Status and Control Register 2
     */
    inline void get_CR2(bool &IREF, bool &IREF1, bool &IREF2, bool &BFHS,
                        bool &BFMS, bool &OEN, bool &BFEN) volatile
    {
        uint32_t curr = CR2;

        IREF = curr & (1u << 6u);
        IREF1 = curr & (1u << 5u);
        IREF2 = curr & (1u << 4u);
        BFHS = curr & (1u << 3u);
        BFMS = curr & (1u << 2u);
        OEN = curr & (1u << 1u);
        BFEN = curr & (1u << 0u);
    }

    /**
     * Set all of CR2's bit fields.
     *
     * (read-write) DAC Status and Control Register 2
     */
    inline void set_CR2(bool IREF, bool IREF1, bool IREF2, bool BFHS,
                        bool BFMS, bool OEN, bool BFEN) volatile
    {
        uint32_t curr = CR2;

        curr &= ~(0b1u << 6u);
        curr |= (IREF & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (IREF1 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (IREF2 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (BFHS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (BFMS & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (OEN & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (BFEN & 0b1u) << 0u;

        CR2 = curr;
    }
};

static_assert(sizeof(dac) == dac::size);

static volatile dac *const DAC = reinterpret_cast<dac *>(0x40064000);

}; // namespace MIMXRT1176::CM7
