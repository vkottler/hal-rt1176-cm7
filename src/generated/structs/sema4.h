/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/SEMA4_Gate_GTFSM.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * IPS_Semaphores
 */
struct [[gnu::packed]] sema4
{
    /* Constant attributes. */
    static constexpr std::size_t size = 262; /*!< sema4's size in bytes. */

    /* Fields. */
    static constexpr std::size_t Gate_length = 16;
    uint8_t Gate[Gate_length]; /*!< (read-write) Semaphores Gate n Register */
    static constexpr std::size_t reserved_padding0_length = 12;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    static constexpr std::size_t CPINE_length = 2;
    uint16_t CPINE[CPINE_length]; /*!< (read-write) Semaphores Processor n IRQ
                                     Notification Enable */
    static constexpr std::size_t reserved_padding1_length = 15;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    static constexpr std::size_t CPNTF_length = 2;
    uint16_t CPNTF[CPNTF_length]; /*!< (read-write) Semaphores Processor n IRQ
                                     Notification */
    static constexpr std::size_t reserved_padding2_length = 31;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    uint16_t RSTGT; /*!< (read-write) Semaphores (Secure) Reset Gate n */
    static constexpr std::size_t reserved_padding3_length = 2;
    const uint8_t reserved_padding3[reserved_padding3_length] = {};
    uint16_t
        RSTNTF; /*!< (read-write) Semaphores (Secure) Reset IRQ Notification */

    /* Methods. */

    /**
     * Get Gate's GTFSM field.
     *
     * Gate Finite State Machine.
     */
    inline SEMA4_Gate_GTFSM get_Gate_GTFSM(std::size_t index) volatile
    {
        return SEMA4_Gate_GTFSM((Gate[index] >> 0u) & 0b11u);
    }

    /**
     * Set Gate's GTFSM field.
     *
     * Gate Finite State Machine.
     */
    inline void set_Gate_GTFSM(std::size_t index,
                               SEMA4_Gate_GTFSM value) volatile
    {
        uint8_t curr = Gate[index];

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        Gate[index] = curr;
    }

    /**
     * Get CPINE's INE8 bit.
     *
     * Interrupt Request Notification Enable 8. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 8.
     */
    inline bool get_CPINE_INE8(std::size_t index) volatile
    {
        return CPINE[index] & (1u << 15u);
    }

    /**
     * Set CPINE's INE8 bit.
     *
     * Interrupt Request Notification Enable 8. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 8.
     */
    inline void set_CPINE_INE8() volatile
    {
        CPINE |= 1u << 15u;
    }

    /**
     * Clear CPINE's INE8 bit.
     *
     * Interrupt Request Notification Enable 8. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 8.
     */
    inline void clear_CPINE_INE8() volatile
    {
        CPINE &= ~(1u << 15u);
    }

    /**
     * Toggle CPINE's INE8 bit.
     *
     * Interrupt Request Notification Enable 8. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 8.
     */
    inline void toggle_CPINE_INE8() volatile
    {
        CPINE ^= 1u << 15u;
    }

    /**
     * Get CPINE's INE9 bit.
     *
     * Interrupt Request Notification Enable 9. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 9.
     */
    inline bool get_CPINE_INE9(std::size_t index) volatile
    {
        return CPINE[index] & (1u << 14u);
    }

    /**
     * Set CPINE's INE9 bit.
     *
     * Interrupt Request Notification Enable 9. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 9.
     */
    inline void set_CPINE_INE9() volatile
    {
        CPINE |= 1u << 14u;
    }

    /**
     * Clear CPINE's INE9 bit.
     *
     * Interrupt Request Notification Enable 9. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 9.
     */
    inline void clear_CPINE_INE9() volatile
    {
        CPINE &= ~(1u << 14u);
    }

    /**
     * Toggle CPINE's INE9 bit.
     *
     * Interrupt Request Notification Enable 9. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 9.
     */
    inline void toggle_CPINE_INE9() volatile
    {
        CPINE ^= 1u << 14u;
    }

    /**
     * Get CPINE's INE10 bit.
     *
     * Interrupt Request Notification Enable 10. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 10.
     */
    inline bool get_CPINE_INE10(std::size_t index) volatile
    {
        return CPINE[index] & (1u << 13u);
    }

    /**
     * Set CPINE's INE10 bit.
     *
     * Interrupt Request Notification Enable 10. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 10.
     */
    inline void set_CPINE_INE10() volatile
    {
        CPINE |= 1u << 13u;
    }

    /**
     * Clear CPINE's INE10 bit.
     *
     * Interrupt Request Notification Enable 10. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 10.
     */
    inline void clear_CPINE_INE10() volatile
    {
        CPINE &= ~(1u << 13u);
    }

    /**
     * Toggle CPINE's INE10 bit.
     *
     * Interrupt Request Notification Enable 10. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 10.
     */
    inline void toggle_CPINE_INE10() volatile
    {
        CPINE ^= 1u << 13u;
    }

    /**
     * Get CPINE's INE11 bit.
     *
     * Interrupt Request Notification Enable 11. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 11.
     */
    inline bool get_CPINE_INE11(std::size_t index) volatile
    {
        return CPINE[index] & (1u << 12u);
    }

    /**
     * Set CPINE's INE11 bit.
     *
     * Interrupt Request Notification Enable 11. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 11.
     */
    inline void set_CPINE_INE11() volatile
    {
        CPINE |= 1u << 12u;
    }

    /**
     * Clear CPINE's INE11 bit.
     *
     * Interrupt Request Notification Enable 11. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 11.
     */
    inline void clear_CPINE_INE11() volatile
    {
        CPINE &= ~(1u << 12u);
    }

    /**
     * Toggle CPINE's INE11 bit.
     *
     * Interrupt Request Notification Enable 11. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 11.
     */
    inline void toggle_CPINE_INE11() volatile
    {
        CPINE ^= 1u << 12u;
    }

    /**
     * Get CPINE's INE12 bit.
     *
     * Interrupt Request Notification Enable 12. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 12.
     */
    inline bool get_CPINE_INE12(std::size_t index) volatile
    {
        return CPINE[index] & (1u << 11u);
    }

    /**
     * Set CPINE's INE12 bit.
     *
     * Interrupt Request Notification Enable 12. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 12.
     */
    inline void set_CPINE_INE12() volatile
    {
        CPINE |= 1u << 11u;
    }

    /**
     * Clear CPINE's INE12 bit.
     *
     * Interrupt Request Notification Enable 12. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 12.
     */
    inline void clear_CPINE_INE12() volatile
    {
        CPINE &= ~(1u << 11u);
    }

    /**
     * Toggle CPINE's INE12 bit.
     *
     * Interrupt Request Notification Enable 12. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 12.
     */
    inline void toggle_CPINE_INE12() volatile
    {
        CPINE ^= 1u << 11u;
    }

    /**
     * Get CPINE's INE13 bit.
     *
     * Interrupt Request Notification Enable 13. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 13.
     */
    inline bool get_CPINE_INE13(std::size_t index) volatile
    {
        return CPINE[index] & (1u << 10u);
    }

    /**
     * Set CPINE's INE13 bit.
     *
     * Interrupt Request Notification Enable 13. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 13.
     */
    inline void set_CPINE_INE13() volatile
    {
        CPINE |= 1u << 10u;
    }

    /**
     * Clear CPINE's INE13 bit.
     *
     * Interrupt Request Notification Enable 13. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 13.
     */
    inline void clear_CPINE_INE13() volatile
    {
        CPINE &= ~(1u << 10u);
    }

    /**
     * Toggle CPINE's INE13 bit.
     *
     * Interrupt Request Notification Enable 13. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 13.
     */
    inline void toggle_CPINE_INE13() volatile
    {
        CPINE ^= 1u << 10u;
    }

    /**
     * Get CPINE's INE14 bit.
     *
     * Interrupt Request Notification Enable 14. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 14.
     */
    inline bool get_CPINE_INE14(std::size_t index) volatile
    {
        return CPINE[index] & (1u << 9u);
    }

    /**
     * Set CPINE's INE14 bit.
     *
     * Interrupt Request Notification Enable 14. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 14.
     */
    inline void set_CPINE_INE14() volatile
    {
        CPINE |= 1u << 9u;
    }

    /**
     * Clear CPINE's INE14 bit.
     *
     * Interrupt Request Notification Enable 14. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 14.
     */
    inline void clear_CPINE_INE14() volatile
    {
        CPINE &= ~(1u << 9u);
    }

    /**
     * Toggle CPINE's INE14 bit.
     *
     * Interrupt Request Notification Enable 14. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 14.
     */
    inline void toggle_CPINE_INE14() volatile
    {
        CPINE ^= 1u << 9u;
    }

    /**
     * Get CPINE's INE15 bit.
     *
     * Interrupt Request Notification Enable 15. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 15.
     */
    inline bool get_CPINE_INE15(std::size_t index) volatile
    {
        return CPINE[index] & (1u << 8u);
    }

    /**
     * Set CPINE's INE15 bit.
     *
     * Interrupt Request Notification Enable 15. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 15.
     */
    inline void set_CPINE_INE15() volatile
    {
        CPINE |= 1u << 8u;
    }

    /**
     * Clear CPINE's INE15 bit.
     *
     * Interrupt Request Notification Enable 15. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 15.
     */
    inline void clear_CPINE_INE15() volatile
    {
        CPINE &= ~(1u << 8u);
    }

    /**
     * Toggle CPINE's INE15 bit.
     *
     * Interrupt Request Notification Enable 15. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 15.
     */
    inline void toggle_CPINE_INE15() volatile
    {
        CPINE ^= 1u << 8u;
    }

    /**
     * Get CPINE's INE0 bit.
     *
     * Interrupt Request Notification Enable 0
     */
    inline bool get_CPINE_INE0(std::size_t index) volatile
    {
        return CPINE[index] & (1u << 7u);
    }

    /**
     * Set CPINE's INE0 bit.
     *
     * Interrupt Request Notification Enable 0
     */
    inline void set_CPINE_INE0() volatile
    {
        CPINE |= 1u << 7u;
    }

    /**
     * Clear CPINE's INE0 bit.
     *
     * Interrupt Request Notification Enable 0
     */
    inline void clear_CPINE_INE0() volatile
    {
        CPINE &= ~(1u << 7u);
    }

    /**
     * Toggle CPINE's INE0 bit.
     *
     * Interrupt Request Notification Enable 0
     */
    inline void toggle_CPINE_INE0() volatile
    {
        CPINE ^= 1u << 7u;
    }

    /**
     * Get CPINE's INE1 bit.
     *
     * Interrupt Request Notification Enable 1
     */
    inline bool get_CPINE_INE1(std::size_t index) volatile
    {
        return CPINE[index] & (1u << 6u);
    }

    /**
     * Set CPINE's INE1 bit.
     *
     * Interrupt Request Notification Enable 1
     */
    inline void set_CPINE_INE1() volatile
    {
        CPINE |= 1u << 6u;
    }

    /**
     * Clear CPINE's INE1 bit.
     *
     * Interrupt Request Notification Enable 1
     */
    inline void clear_CPINE_INE1() volatile
    {
        CPINE &= ~(1u << 6u);
    }

    /**
     * Toggle CPINE's INE1 bit.
     *
     * Interrupt Request Notification Enable 1
     */
    inline void toggle_CPINE_INE1() volatile
    {
        CPINE ^= 1u << 6u;
    }

    /**
     * Get CPINE's INE2 bit.
     *
     * Interrupt Request Notification Enable 2
     */
    inline bool get_CPINE_INE2(std::size_t index) volatile
    {
        return CPINE[index] & (1u << 5u);
    }

    /**
     * Set CPINE's INE2 bit.
     *
     * Interrupt Request Notification Enable 2
     */
    inline void set_CPINE_INE2() volatile
    {
        CPINE |= 1u << 5u;
    }

    /**
     * Clear CPINE's INE2 bit.
     *
     * Interrupt Request Notification Enable 2
     */
    inline void clear_CPINE_INE2() volatile
    {
        CPINE &= ~(1u << 5u);
    }

    /**
     * Toggle CPINE's INE2 bit.
     *
     * Interrupt Request Notification Enable 2
     */
    inline void toggle_CPINE_INE2() volatile
    {
        CPINE ^= 1u << 5u;
    }

    /**
     * Get CPINE's INE3 bit.
     *
     * Interrupt Request Notification Enable 3
     */
    inline bool get_CPINE_INE3(std::size_t index) volatile
    {
        return CPINE[index] & (1u << 4u);
    }

    /**
     * Set CPINE's INE3 bit.
     *
     * Interrupt Request Notification Enable 3
     */
    inline void set_CPINE_INE3() volatile
    {
        CPINE |= 1u << 4u;
    }

    /**
     * Clear CPINE's INE3 bit.
     *
     * Interrupt Request Notification Enable 3
     */
    inline void clear_CPINE_INE3() volatile
    {
        CPINE &= ~(1u << 4u);
    }

    /**
     * Toggle CPINE's INE3 bit.
     *
     * Interrupt Request Notification Enable 3
     */
    inline void toggle_CPINE_INE3() volatile
    {
        CPINE ^= 1u << 4u;
    }

    /**
     * Get CPINE's INE4 bit.
     *
     * Interrupt Request Notification Enable 4. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 4.
     */
    inline bool get_CPINE_INE4(std::size_t index) volatile
    {
        return CPINE[index] & (1u << 3u);
    }

    /**
     * Set CPINE's INE4 bit.
     *
     * Interrupt Request Notification Enable 4. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 4.
     */
    inline void set_CPINE_INE4() volatile
    {
        CPINE |= 1u << 3u;
    }

    /**
     * Clear CPINE's INE4 bit.
     *
     * Interrupt Request Notification Enable 4. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 4.
     */
    inline void clear_CPINE_INE4() volatile
    {
        CPINE &= ~(1u << 3u);
    }

    /**
     * Toggle CPINE's INE4 bit.
     *
     * Interrupt Request Notification Enable 4. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 4.
     */
    inline void toggle_CPINE_INE4() volatile
    {
        CPINE ^= 1u << 3u;
    }

    /**
     * Get CPINE's INE5 bit.
     *
     * Interrupt Request Notification Enable 5. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 5.
     */
    inline bool get_CPINE_INE5(std::size_t index) volatile
    {
        return CPINE[index] & (1u << 2u);
    }

    /**
     * Set CPINE's INE5 bit.
     *
     * Interrupt Request Notification Enable 5. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 5.
     */
    inline void set_CPINE_INE5() volatile
    {
        CPINE |= 1u << 2u;
    }

    /**
     * Clear CPINE's INE5 bit.
     *
     * Interrupt Request Notification Enable 5. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 5.
     */
    inline void clear_CPINE_INE5() volatile
    {
        CPINE &= ~(1u << 2u);
    }

    /**
     * Toggle CPINE's INE5 bit.
     *
     * Interrupt Request Notification Enable 5. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 5.
     */
    inline void toggle_CPINE_INE5() volatile
    {
        CPINE ^= 1u << 2u;
    }

    /**
     * Get CPINE's INE6 bit.
     *
     * Interrupt Request Notification Enable 6. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 6.
     */
    inline bool get_CPINE_INE6(std::size_t index) volatile
    {
        return CPINE[index] & (1u << 1u);
    }

    /**
     * Set CPINE's INE6 bit.
     *
     * Interrupt Request Notification Enable 6. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 6.
     */
    inline void set_CPINE_INE6() volatile
    {
        CPINE |= 1u << 1u;
    }

    /**
     * Clear CPINE's INE6 bit.
     *
     * Interrupt Request Notification Enable 6. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 6.
     */
    inline void clear_CPINE_INE6() volatile
    {
        CPINE &= ~(1u << 1u);
    }

    /**
     * Toggle CPINE's INE6 bit.
     *
     * Interrupt Request Notification Enable 6. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 6.
     */
    inline void toggle_CPINE_INE6() volatile
    {
        CPINE ^= 1u << 1u;
    }

    /**
     * Get CPINE's INE7 bit.
     *
     * Interrupt Request Notification Enable 7. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 7.
     */
    inline bool get_CPINE_INE7(std::size_t index) volatile
    {
        return CPINE[index] & (1u << 0u);
    }

    /**
     * Set CPINE's INE7 bit.
     *
     * Interrupt Request Notification Enable 7. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 7.
     */
    inline void set_CPINE_INE7() volatile
    {
        CPINE |= 1u << 0u;
    }

    /**
     * Clear CPINE's INE7 bit.
     *
     * Interrupt Request Notification Enable 7. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 7.
     */
    inline void clear_CPINE_INE7() volatile
    {
        CPINE &= ~(1u << 0u);
    }

    /**
     * Toggle CPINE's INE7 bit.
     *
     * Interrupt Request Notification Enable 7. This field is a bitmap to
     * enable the generation of an interrupt notification from a failed attempt
     * to lock gate 7.
     */
    inline void toggle_CPINE_INE7() volatile
    {
        CPINE ^= 1u << 0u;
    }

    /**
     * Get all of CPINE's bit fields.
     *
     * (read-write) Semaphores Processor n IRQ Notification Enable
     */
    inline void get_CPINE(std::size_t index, bool &INE8, bool &INE9,
                          bool &INE10, bool &INE11, bool &INE12, bool &INE13,
                          bool &INE14, bool &INE15, bool &INE0, bool &INE1,
                          bool &INE2, bool &INE3, bool &INE4, bool &INE5,
                          bool &INE6, bool &INE7) volatile
    {
        uint16_t curr = CPINE[index];

        INE8 = curr & (1u << 15u);
        INE9 = curr & (1u << 14u);
        INE10 = curr & (1u << 13u);
        INE11 = curr & (1u << 12u);
        INE12 = curr & (1u << 11u);
        INE13 = curr & (1u << 10u);
        INE14 = curr & (1u << 9u);
        INE15 = curr & (1u << 8u);
        INE0 = curr & (1u << 7u);
        INE1 = curr & (1u << 6u);
        INE2 = curr & (1u << 5u);
        INE3 = curr & (1u << 4u);
        INE4 = curr & (1u << 3u);
        INE5 = curr & (1u << 2u);
        INE6 = curr & (1u << 1u);
        INE7 = curr & (1u << 0u);
    }

    /**
     * Set all of CPINE's bit fields.
     *
     * (read-write) Semaphores Processor n IRQ Notification Enable
     */
    inline void set_CPINE(std::size_t index, bool INE8, bool INE9, bool INE10,
                          bool INE11, bool INE12, bool INE13, bool INE14,
                          bool INE15, bool INE0, bool INE1, bool INE2,
                          bool INE3, bool INE4, bool INE5, bool INE6,
                          bool INE7) volatile
    {
        uint16_t curr = CPINE[index];

        curr &= ~(0b1u << 15u);
        curr |= (INE8 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (INE9 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (INE10 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (INE11 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (INE12 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (INE13 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (INE14 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (INE15 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (INE0 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (INE1 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (INE2 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (INE3 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (INE4 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (INE5 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (INE6 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (INE7 & 0b1u) << 0u;

        CPINE[index] = curr;
    }

    /**
     * Get CPNTF's GN8 bit.
     *
     * Gate 8 Notification
     */
    inline bool get_CPNTF_GN8(std::size_t index) volatile
    {
        return CPNTF[index] & (1u << 15u);
    }

    /**
     * Get CPNTF's GN9 bit.
     *
     * Gate 9 Notification
     */
    inline bool get_CPNTF_GN9(std::size_t index) volatile
    {
        return CPNTF[index] & (1u << 14u);
    }

    /**
     * Get CPNTF's GN10 bit.
     *
     * Gate 10 Notification
     */
    inline bool get_CPNTF_GN10(std::size_t index) volatile
    {
        return CPNTF[index] & (1u << 13u);
    }

    /**
     * Get CPNTF's GN11 bit.
     *
     * Gate 11 Notification
     */
    inline bool get_CPNTF_GN11(std::size_t index) volatile
    {
        return CPNTF[index] & (1u << 12u);
    }

    /**
     * Get CPNTF's GN12 bit.
     *
     * Gate 12 Notification
     */
    inline bool get_CPNTF_GN12(std::size_t index) volatile
    {
        return CPNTF[index] & (1u << 11u);
    }

    /**
     * Get CPNTF's GN13 bit.
     *
     * Gate 13 Notification
     */
    inline bool get_CPNTF_GN13(std::size_t index) volatile
    {
        return CPNTF[index] & (1u << 10u);
    }

    /**
     * Get CPNTF's GN14 bit.
     *
     * Gate 14 Notification
     */
    inline bool get_CPNTF_GN14(std::size_t index) volatile
    {
        return CPNTF[index] & (1u << 9u);
    }

    /**
     * Get CPNTF's GN15 bit.
     *
     * Gate 15 Notification
     */
    inline bool get_CPNTF_GN15(std::size_t index) volatile
    {
        return CPNTF[index] & (1u << 8u);
    }

    /**
     * Get CPNTF's GN0 bit.
     *
     * Gate 0 Notification
     */
    inline bool get_CPNTF_GN0(std::size_t index) volatile
    {
        return CPNTF[index] & (1u << 7u);
    }

    /**
     * Get CPNTF's GN1 bit.
     *
     * Gate 1 Notification
     */
    inline bool get_CPNTF_GN1(std::size_t index) volatile
    {
        return CPNTF[index] & (1u << 6u);
    }

    /**
     * Get CPNTF's GN2 bit.
     *
     * Gate 2 Notification
     */
    inline bool get_CPNTF_GN2(std::size_t index) volatile
    {
        return CPNTF[index] & (1u << 5u);
    }

    /**
     * Get CPNTF's GN3 bit.
     *
     * Gate 3 Notification
     */
    inline bool get_CPNTF_GN3(std::size_t index) volatile
    {
        return CPNTF[index] & (1u << 4u);
    }

    /**
     * Get CPNTF's GN4 bit.
     *
     * Gate 4 Notification
     */
    inline bool get_CPNTF_GN4(std::size_t index) volatile
    {
        return CPNTF[index] & (1u << 3u);
    }

    /**
     * Get CPNTF's GN5 bit.
     *
     * Gate 5 Notification
     */
    inline bool get_CPNTF_GN5(std::size_t index) volatile
    {
        return CPNTF[index] & (1u << 2u);
    }

    /**
     * Get CPNTF's GN6 bit.
     *
     * Gate 6 Notification
     */
    inline bool get_CPNTF_GN6(std::size_t index) volatile
    {
        return CPNTF[index] & (1u << 1u);
    }

    /**
     * Get CPNTF's GN7 bit.
     *
     * Gate 7 Notification
     */
    inline bool get_CPNTF_GN7(std::size_t index) volatile
    {
        return CPNTF[index] & (1u << 0u);
    }

    /**
     * Get all of CPNTF's bit fields.
     *
     * (read-write) Semaphores Processor n IRQ Notification
     */
    inline void get_CPNTF(std::size_t index, bool &GN8, bool &GN9, bool &GN10,
                          bool &GN11, bool &GN12, bool &GN13, bool &GN14,
                          bool &GN15, bool &GN0, bool &GN1, bool &GN2,
                          bool &GN3, bool &GN4, bool &GN5, bool &GN6,
                          bool &GN7) volatile
    {
        uint16_t curr = CPNTF[index];

        GN8 = curr & (1u << 15u);
        GN9 = curr & (1u << 14u);
        GN10 = curr & (1u << 13u);
        GN11 = curr & (1u << 12u);
        GN12 = curr & (1u << 11u);
        GN13 = curr & (1u << 10u);
        GN14 = curr & (1u << 9u);
        GN15 = curr & (1u << 8u);
        GN0 = curr & (1u << 7u);
        GN1 = curr & (1u << 6u);
        GN2 = curr & (1u << 5u);
        GN3 = curr & (1u << 4u);
        GN4 = curr & (1u << 3u);
        GN5 = curr & (1u << 2u);
        GN6 = curr & (1u << 1u);
        GN7 = curr & (1u << 0u);
    }

    /**
     * Get RSTGT's RSTGTN field.
     *
     * Reset Gate Number
     */
    inline uint8_t get_RSTGT_RSTGTN() volatile
    {
        return (RSTGT >> 8u) & 0b11111111u;
    }

    /**
     * Set RSTGT's RSTGTN field.
     *
     * Reset Gate Number
     */
    inline void set_RSTGT_RSTGTN(uint8_t value) volatile
    {
        uint16_t curr = RSTGT;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        RSTGT = curr;
    }

    /**
     * Get RSTGT's RSTGSM_RSTGMS_RSTGDP field.
     *
     * This field contains sub-fields that vary depending on whether it is
     * being read or written
     */
    inline uint8_t get_RSTGT_RSTGSM_RSTGMS_RSTGDP() volatile
    {
        return (RSTGT >> 0u) & 0b11111111u;
    }

    /**
     * Set RSTGT's RSTGSM_RSTGMS_RSTGDP field.
     *
     * This field contains sub-fields that vary depending on whether it is
     * being read or written
     */
    inline void set_RSTGT_RSTGSM_RSTGMS_RSTGDP(uint8_t value) volatile
    {
        uint16_t curr = RSTGT;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        RSTGT = curr;
    }

    /**
     * Get all of RSTGT's bit fields.
     *
     * (read-write) Semaphores (Secure) Reset Gate n
     */
    inline void get_RSTGT(uint8_t &RSTGTN,
                          uint8_t &RSTGSM_RSTGMS_RSTGDP) volatile
    {
        uint16_t curr = RSTGT;

        RSTGTN = (curr >> 8u) & 0b11111111u;
        RSTGSM_RSTGMS_RSTGDP = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of RSTGT's bit fields.
     *
     * (read-write) Semaphores (Secure) Reset Gate n
     */
    inline void set_RSTGT(uint8_t RSTGTN,
                          uint8_t RSTGSM_RSTGMS_RSTGDP) volatile
    {
        uint16_t curr = RSTGT;

        curr &= ~(0b11111111u << 8u);
        curr |= (RSTGTN & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (RSTGSM_RSTGMS_RSTGDP & 0b11111111u) << 0u;

        RSTGT = curr;
    }

    /**
     * Get RSTNTF's RSTNTN field.
     *
     * Reset Notification Number
     */
    inline uint8_t get_RSTNTF_RSTNTN() volatile
    {
        return (RSTNTF >> 8u) & 0b11111111u;
    }

    /**
     * Set RSTNTF's RSTNTN field.
     *
     * Reset Notification Number
     */
    inline void set_RSTNTF_RSTNTN(uint8_t value) volatile
    {
        uint16_t curr = RSTNTF;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        RSTNTF = curr;
    }

    /**
     * Get RSTNTF's RSTNSM_RSTNMS_RSTNDP field.
     *
     * This field contains sub-fields that vary depending on whether it is
     * being read or written
     */
    inline uint8_t get_RSTNTF_RSTNSM_RSTNMS_RSTNDP() volatile
    {
        return (RSTNTF >> 0u) & 0b11111111u;
    }

    /**
     * Set RSTNTF's RSTNSM_RSTNMS_RSTNDP field.
     *
     * This field contains sub-fields that vary depending on whether it is
     * being read or written
     */
    inline void set_RSTNTF_RSTNSM_RSTNMS_RSTNDP(uint8_t value) volatile
    {
        uint16_t curr = RSTNTF;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        RSTNTF = curr;
    }

    /**
     * Get all of RSTNTF's bit fields.
     *
     * (read-write) Semaphores (Secure) Reset IRQ Notification
     */
    inline void get_RSTNTF(uint8_t &RSTNTN,
                           uint8_t &RSTNSM_RSTNMS_RSTNDP) volatile
    {
        uint16_t curr = RSTNTF;

        RSTNTN = (curr >> 8u) & 0b11111111u;
        RSTNSM_RSTNMS_RSTNDP = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of RSTNTF's bit fields.
     *
     * (read-write) Semaphores (Secure) Reset IRQ Notification
     */
    inline void set_RSTNTF(uint8_t RSTNTN,
                           uint8_t RSTNSM_RSTNMS_RSTNDP) volatile
    {
        uint16_t curr = RSTNTF;

        curr &= ~(0b11111111u << 8u);
        curr |= (RSTNTN & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (RSTNSM_RSTNMS_RSTNDP & 0b11111111u) << 0u;

        RSTNTF = curr;
    }
};

static_assert(sizeof(sema4) == sema4::size);

static volatile sema4 *const SEMA4 = reinterpret_cast<sema4 *>(0x40CC8000);

}; // namespace MIMXRT1176::CM7
