/**
 * \file
 * \brief Generated by ifgen (3.3.0).
 */
#pragma once

#include "../enums/CCM_OBS_OBSERVE_AUTHEN_WHITE_LIST.h"
#include "../ifgen/common.h"

namespace MIMXRT1176::CM7
{

/**
 * Clock root section.
 */
struct [[gnu::packed]] OBSERVE_instance
{
    /* Constant attributes. */
    static constexpr std::size_t size =
        76; /*!< OBSERVE_instance's size in bytes. */

    /* Fields. */
    uint32_t OBSERVE_CONTROL;     /*!< (read-write) Observe control */
    uint32_t OBSERVE_CONTROL_SET; /*!< (read-write) Observe control */
    uint32_t OBSERVE_CONTROL_CLR; /*!< (read-write) Observe control */
    uint32_t OBSERVE_CONTROL_TOG; /*!< (read-write) Observe control */
    static constexpr std::size_t reserved_padding0_length = 4;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t OBSERVE_STATUS0; /*!< (read-write) Observe status */
    static constexpr std::size_t reserved_padding1_length = 3;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    uint32_t OBSERVE_AUTHEN;     /*!< (read-write) Observe access control */
    uint32_t OBSERVE_AUTHEN_SET; /*!< (read-write) Observe access control */
    uint32_t OBSERVE_AUTHEN_CLR; /*!< (read-write) Observe access control */
    uint32_t OBSERVE_AUTHEN_TOG; /*!< (read-write) Observe access control */
    uint32_t OBSERVE_FREQUENCY_CURRENT; /*!< (read-write) Current frequency
                                           detected */
    uint32_t
        OBSERVE_FREQUENCY_MIN; /*!< (read-write) Minimum frequency detected */
    uint32_t
        OBSERVE_FREQUENCY_MAX; /*!< (read-write) Maximum frequency detected */

    /* Methods. */

    /**
     * Get OBSERVE_CONTROL's OFF bit.
     *
     * Turn off
     */
    inline bool get_OBSERVE_CONTROL_OFF()
    {
        return OBSERVE_CONTROL & (1u << 24u);
    }

    /**
     * Set OBSERVE_CONTROL's OFF bit.
     *
     * Turn off
     */
    inline void set_OBSERVE_CONTROL_OFF()
    {
        OBSERVE_CONTROL |= 1u << 24u;
    }

    /**
     * Clear OBSERVE_CONTROL's OFF bit.
     *
     * Turn off
     */
    inline void clear_OBSERVE_CONTROL_OFF()
    {
        OBSERVE_CONTROL &= ~(1u << 24u);
    }

    /**
     * Toggle OBSERVE_CONTROL's OFF bit.
     *
     * Turn off
     */
    inline void toggle_OBSERVE_CONTROL_OFF()
    {
        OBSERVE_CONTROL ^= 1u << 24u;
    }

    /**
     * Get OBSERVE_CONTROL's DIVIDE field.
     *
     * Divider for observe signal
     */
    inline uint8_t get_OBSERVE_CONTROL_DIVIDE()
    {
        return (OBSERVE_CONTROL >> 16u) & 0b11111111u;
    }

    /**
     * Set OBSERVE_CONTROL's DIVIDE field.
     *
     * Divider for observe signal
     */
    inline void set_OBSERVE_CONTROL_DIVIDE(uint8_t value)
    {
        uint32_t curr = OBSERVE_CONTROL;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        OBSERVE_CONTROL = curr;
    }

    /**
     * Get OBSERVE_CONTROL's RESET bit.
     *
     * Reset observe divider
     */
    inline bool get_OBSERVE_CONTROL_RESET()
    {
        return OBSERVE_CONTROL & (1u << 15u);
    }

    /**
     * Set OBSERVE_CONTROL's RESET bit.
     *
     * Reset observe divider
     */
    inline void set_OBSERVE_CONTROL_RESET()
    {
        OBSERVE_CONTROL |= 1u << 15u;
    }

    /**
     * Clear OBSERVE_CONTROL's RESET bit.
     *
     * Reset observe divider
     */
    inline void clear_OBSERVE_CONTROL_RESET()
    {
        OBSERVE_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle OBSERVE_CONTROL's RESET bit.
     *
     * Reset observe divider
     */
    inline void toggle_OBSERVE_CONTROL_RESET()
    {
        OBSERVE_CONTROL ^= 1u << 15u;
    }

    /**
     * Get OBSERVE_CONTROL's INV bit.
     *
     * Invert
     */
    inline bool get_OBSERVE_CONTROL_INV()
    {
        return OBSERVE_CONTROL & (1u << 13u);
    }

    /**
     * Set OBSERVE_CONTROL's INV bit.
     *
     * Invert
     */
    inline void set_OBSERVE_CONTROL_INV()
    {
        OBSERVE_CONTROL |= 1u << 13u;
    }

    /**
     * Clear OBSERVE_CONTROL's INV bit.
     *
     * Invert
     */
    inline void clear_OBSERVE_CONTROL_INV()
    {
        OBSERVE_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle OBSERVE_CONTROL's INV bit.
     *
     * Invert
     */
    inline void toggle_OBSERVE_CONTROL_INV()
    {
        OBSERVE_CONTROL ^= 1u << 13u;
    }

    /**
     * Get OBSERVE_CONTROL's RAW bit.
     *
     * Observe raw signal
     */
    inline bool get_OBSERVE_CONTROL_RAW()
    {
        return OBSERVE_CONTROL & (1u << 12u);
    }

    /**
     * Set OBSERVE_CONTROL's RAW bit.
     *
     * Observe raw signal
     */
    inline void set_OBSERVE_CONTROL_RAW()
    {
        OBSERVE_CONTROL |= 1u << 12u;
    }

    /**
     * Clear OBSERVE_CONTROL's RAW bit.
     *
     * Observe raw signal
     */
    inline void clear_OBSERVE_CONTROL_RAW()
    {
        OBSERVE_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle OBSERVE_CONTROL's RAW bit.
     *
     * Observe raw signal
     */
    inline void toggle_OBSERVE_CONTROL_RAW()
    {
        OBSERVE_CONTROL ^= 1u << 12u;
    }

    /**
     * Get OBSERVE_CONTROL's SELECT field.
     *
     * Observe signal selector
     */
    inline uint16_t get_OBSERVE_CONTROL_SELECT()
    {
        return (OBSERVE_CONTROL >> 0u) & 0b111111111u;
    }

    /**
     * Set OBSERVE_CONTROL's SELECT field.
     *
     * Observe signal selector
     */
    inline void set_OBSERVE_CONTROL_SELECT(uint16_t value)
    {
        uint32_t curr = OBSERVE_CONTROL;

        curr &= ~(0b111111111u << 0u);
        curr |= (value & 0b111111111u) << 0u;

        OBSERVE_CONTROL = curr;
    }

    /**
     * Get all of OBSERVE_CONTROL's bit fields.
     *
     * (read-write) Observe control
     */
    inline void get_OBSERVE_CONTROL(bool &OFF, uint8_t &DIVIDE, bool &RESET,
                                    bool &INV, bool &RAW, uint16_t &SELECT)
    {
        uint32_t curr = OBSERVE_CONTROL;

        OFF = curr & (1u << 24u);
        DIVIDE = (curr >> 16u) & 0b11111111u;
        RESET = curr & (1u << 15u);
        INV = curr & (1u << 13u);
        RAW = curr & (1u << 12u);
        SELECT = (curr >> 0u) & 0b111111111u;
    }

    /**
     * Set all of OBSERVE_CONTROL's bit fields.
     *
     * (read-write) Observe control
     */
    inline void set_OBSERVE_CONTROL(bool OFF, uint8_t DIVIDE, bool RESET,
                                    bool INV, bool RAW, uint16_t SELECT)
    {
        uint32_t curr = OBSERVE_CONTROL;

        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (DIVIDE & 0b11111111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (RESET & 0b1u) << 15u;
        curr &= ~(0b1u << 13u);
        curr |= (INV & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (RAW & 0b1u) << 12u;
        curr &= ~(0b111111111u << 0u);
        curr |= (SELECT & 0b111111111u) << 0u;

        OBSERVE_CONTROL = curr;
    }

    /**
     * Get OBSERVE_CONTROL_SET's OFF bit.
     *
     * Turn off
     */
    inline bool get_OBSERVE_CONTROL_SET_OFF()
    {
        return OBSERVE_CONTROL_SET & (1u << 24u);
    }

    /**
     * Set OBSERVE_CONTROL_SET's OFF bit.
     *
     * Turn off
     */
    inline void set_OBSERVE_CONTROL_SET_OFF()
    {
        OBSERVE_CONTROL_SET |= 1u << 24u;
    }

    /**
     * Clear OBSERVE_CONTROL_SET's OFF bit.
     *
     * Turn off
     */
    inline void clear_OBSERVE_CONTROL_SET_OFF()
    {
        OBSERVE_CONTROL_SET &= ~(1u << 24u);
    }

    /**
     * Toggle OBSERVE_CONTROL_SET's OFF bit.
     *
     * Turn off
     */
    inline void toggle_OBSERVE_CONTROL_SET_OFF()
    {
        OBSERVE_CONTROL_SET ^= 1u << 24u;
    }

    /**
     * Get OBSERVE_CONTROL_SET's DIVIDE field.
     *
     * Divider for observe signal
     */
    inline uint8_t get_OBSERVE_CONTROL_SET_DIVIDE()
    {
        return (OBSERVE_CONTROL_SET >> 16u) & 0b11111111u;
    }

    /**
     * Set OBSERVE_CONTROL_SET's DIVIDE field.
     *
     * Divider for observe signal
     */
    inline void set_OBSERVE_CONTROL_SET_DIVIDE(uint8_t value)
    {
        uint32_t curr = OBSERVE_CONTROL_SET;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        OBSERVE_CONTROL_SET = curr;
    }

    /**
     * Get OBSERVE_CONTROL_SET's RESET bit.
     *
     * Reset observe divider
     */
    inline bool get_OBSERVE_CONTROL_SET_RESET()
    {
        return OBSERVE_CONTROL_SET & (1u << 15u);
    }

    /**
     * Set OBSERVE_CONTROL_SET's RESET bit.
     *
     * Reset observe divider
     */
    inline void set_OBSERVE_CONTROL_SET_RESET()
    {
        OBSERVE_CONTROL_SET |= 1u << 15u;
    }

    /**
     * Clear OBSERVE_CONTROL_SET's RESET bit.
     *
     * Reset observe divider
     */
    inline void clear_OBSERVE_CONTROL_SET_RESET()
    {
        OBSERVE_CONTROL_SET &= ~(1u << 15u);
    }

    /**
     * Toggle OBSERVE_CONTROL_SET's RESET bit.
     *
     * Reset observe divider
     */
    inline void toggle_OBSERVE_CONTROL_SET_RESET()
    {
        OBSERVE_CONTROL_SET ^= 1u << 15u;
    }

    /**
     * Get OBSERVE_CONTROL_SET's INV bit.
     *
     * Invert
     */
    inline bool get_OBSERVE_CONTROL_SET_INV()
    {
        return OBSERVE_CONTROL_SET & (1u << 13u);
    }

    /**
     * Set OBSERVE_CONTROL_SET's INV bit.
     *
     * Invert
     */
    inline void set_OBSERVE_CONTROL_SET_INV()
    {
        OBSERVE_CONTROL_SET |= 1u << 13u;
    }

    /**
     * Clear OBSERVE_CONTROL_SET's INV bit.
     *
     * Invert
     */
    inline void clear_OBSERVE_CONTROL_SET_INV()
    {
        OBSERVE_CONTROL_SET &= ~(1u << 13u);
    }

    /**
     * Toggle OBSERVE_CONTROL_SET's INV bit.
     *
     * Invert
     */
    inline void toggle_OBSERVE_CONTROL_SET_INV()
    {
        OBSERVE_CONTROL_SET ^= 1u << 13u;
    }

    /**
     * Get OBSERVE_CONTROL_SET's RAW bit.
     *
     * Observe raw signal
     */
    inline bool get_OBSERVE_CONTROL_SET_RAW()
    {
        return OBSERVE_CONTROL_SET & (1u << 12u);
    }

    /**
     * Set OBSERVE_CONTROL_SET's RAW bit.
     *
     * Observe raw signal
     */
    inline void set_OBSERVE_CONTROL_SET_RAW()
    {
        OBSERVE_CONTROL_SET |= 1u << 12u;
    }

    /**
     * Clear OBSERVE_CONTROL_SET's RAW bit.
     *
     * Observe raw signal
     */
    inline void clear_OBSERVE_CONTROL_SET_RAW()
    {
        OBSERVE_CONTROL_SET &= ~(1u << 12u);
    }

    /**
     * Toggle OBSERVE_CONTROL_SET's RAW bit.
     *
     * Observe raw signal
     */
    inline void toggle_OBSERVE_CONTROL_SET_RAW()
    {
        OBSERVE_CONTROL_SET ^= 1u << 12u;
    }

    /**
     * Get OBSERVE_CONTROL_SET's SELECT field.
     *
     * Observe signal selector
     */
    inline uint16_t get_OBSERVE_CONTROL_SET_SELECT()
    {
        return (OBSERVE_CONTROL_SET >> 0u) & 0b111111111u;
    }

    /**
     * Set OBSERVE_CONTROL_SET's SELECT field.
     *
     * Observe signal selector
     */
    inline void set_OBSERVE_CONTROL_SET_SELECT(uint16_t value)
    {
        uint32_t curr = OBSERVE_CONTROL_SET;

        curr &= ~(0b111111111u << 0u);
        curr |= (value & 0b111111111u) << 0u;

        OBSERVE_CONTROL_SET = curr;
    }

    /**
     * Get all of OBSERVE_CONTROL_SET's bit fields.
     *
     * (read-write) Observe control
     */
    inline void get_OBSERVE_CONTROL_SET(bool &OFF, uint8_t &DIVIDE,
                                        bool &RESET, bool &INV, bool &RAW,
                                        uint16_t &SELECT)
    {
        uint32_t curr = OBSERVE_CONTROL_SET;

        OFF = curr & (1u << 24u);
        DIVIDE = (curr >> 16u) & 0b11111111u;
        RESET = curr & (1u << 15u);
        INV = curr & (1u << 13u);
        RAW = curr & (1u << 12u);
        SELECT = (curr >> 0u) & 0b111111111u;
    }

    /**
     * Set all of OBSERVE_CONTROL_SET's bit fields.
     *
     * (read-write) Observe control
     */
    inline void set_OBSERVE_CONTROL_SET(bool OFF, uint8_t DIVIDE, bool RESET,
                                        bool INV, bool RAW, uint16_t SELECT)
    {
        uint32_t curr = OBSERVE_CONTROL_SET;

        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (DIVIDE & 0b11111111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (RESET & 0b1u) << 15u;
        curr &= ~(0b1u << 13u);
        curr |= (INV & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (RAW & 0b1u) << 12u;
        curr &= ~(0b111111111u << 0u);
        curr |= (SELECT & 0b111111111u) << 0u;

        OBSERVE_CONTROL_SET = curr;
    }

    /**
     * Get OBSERVE_CONTROL_CLR's OFF bit.
     *
     * Turn off
     */
    inline bool get_OBSERVE_CONTROL_CLR_OFF()
    {
        return OBSERVE_CONTROL_CLR & (1u << 24u);
    }

    /**
     * Set OBSERVE_CONTROL_CLR's OFF bit.
     *
     * Turn off
     */
    inline void set_OBSERVE_CONTROL_CLR_OFF()
    {
        OBSERVE_CONTROL_CLR |= 1u << 24u;
    }

    /**
     * Clear OBSERVE_CONTROL_CLR's OFF bit.
     *
     * Turn off
     */
    inline void clear_OBSERVE_CONTROL_CLR_OFF()
    {
        OBSERVE_CONTROL_CLR &= ~(1u << 24u);
    }

    /**
     * Toggle OBSERVE_CONTROL_CLR's OFF bit.
     *
     * Turn off
     */
    inline void toggle_OBSERVE_CONTROL_CLR_OFF()
    {
        OBSERVE_CONTROL_CLR ^= 1u << 24u;
    }

    /**
     * Get OBSERVE_CONTROL_CLR's DIVIDE field.
     *
     * Divider for observe signal
     */
    inline uint8_t get_OBSERVE_CONTROL_CLR_DIVIDE()
    {
        return (OBSERVE_CONTROL_CLR >> 16u) & 0b11111111u;
    }

    /**
     * Set OBSERVE_CONTROL_CLR's DIVIDE field.
     *
     * Divider for observe signal
     */
    inline void set_OBSERVE_CONTROL_CLR_DIVIDE(uint8_t value)
    {
        uint32_t curr = OBSERVE_CONTROL_CLR;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        OBSERVE_CONTROL_CLR = curr;
    }

    /**
     * Get OBSERVE_CONTROL_CLR's RESET bit.
     *
     * Reset observe divider
     */
    inline bool get_OBSERVE_CONTROL_CLR_RESET()
    {
        return OBSERVE_CONTROL_CLR & (1u << 15u);
    }

    /**
     * Set OBSERVE_CONTROL_CLR's RESET bit.
     *
     * Reset observe divider
     */
    inline void set_OBSERVE_CONTROL_CLR_RESET()
    {
        OBSERVE_CONTROL_CLR |= 1u << 15u;
    }

    /**
     * Clear OBSERVE_CONTROL_CLR's RESET bit.
     *
     * Reset observe divider
     */
    inline void clear_OBSERVE_CONTROL_CLR_RESET()
    {
        OBSERVE_CONTROL_CLR &= ~(1u << 15u);
    }

    /**
     * Toggle OBSERVE_CONTROL_CLR's RESET bit.
     *
     * Reset observe divider
     */
    inline void toggle_OBSERVE_CONTROL_CLR_RESET()
    {
        OBSERVE_CONTROL_CLR ^= 1u << 15u;
    }

    /**
     * Get OBSERVE_CONTROL_CLR's INV bit.
     *
     * Invert
     */
    inline bool get_OBSERVE_CONTROL_CLR_INV()
    {
        return OBSERVE_CONTROL_CLR & (1u << 13u);
    }

    /**
     * Set OBSERVE_CONTROL_CLR's INV bit.
     *
     * Invert
     */
    inline void set_OBSERVE_CONTROL_CLR_INV()
    {
        OBSERVE_CONTROL_CLR |= 1u << 13u;
    }

    /**
     * Clear OBSERVE_CONTROL_CLR's INV bit.
     *
     * Invert
     */
    inline void clear_OBSERVE_CONTROL_CLR_INV()
    {
        OBSERVE_CONTROL_CLR &= ~(1u << 13u);
    }

    /**
     * Toggle OBSERVE_CONTROL_CLR's INV bit.
     *
     * Invert
     */
    inline void toggle_OBSERVE_CONTROL_CLR_INV()
    {
        OBSERVE_CONTROL_CLR ^= 1u << 13u;
    }

    /**
     * Get OBSERVE_CONTROL_CLR's RAW bit.
     *
     * Observe raw signal
     */
    inline bool get_OBSERVE_CONTROL_CLR_RAW()
    {
        return OBSERVE_CONTROL_CLR & (1u << 12u);
    }

    /**
     * Set OBSERVE_CONTROL_CLR's RAW bit.
     *
     * Observe raw signal
     */
    inline void set_OBSERVE_CONTROL_CLR_RAW()
    {
        OBSERVE_CONTROL_CLR |= 1u << 12u;
    }

    /**
     * Clear OBSERVE_CONTROL_CLR's RAW bit.
     *
     * Observe raw signal
     */
    inline void clear_OBSERVE_CONTROL_CLR_RAW()
    {
        OBSERVE_CONTROL_CLR &= ~(1u << 12u);
    }

    /**
     * Toggle OBSERVE_CONTROL_CLR's RAW bit.
     *
     * Observe raw signal
     */
    inline void toggle_OBSERVE_CONTROL_CLR_RAW()
    {
        OBSERVE_CONTROL_CLR ^= 1u << 12u;
    }

    /**
     * Get OBSERVE_CONTROL_CLR's SELECT field.
     *
     * Observe signal selector
     */
    inline uint16_t get_OBSERVE_CONTROL_CLR_SELECT()
    {
        return (OBSERVE_CONTROL_CLR >> 0u) & 0b111111111u;
    }

    /**
     * Set OBSERVE_CONTROL_CLR's SELECT field.
     *
     * Observe signal selector
     */
    inline void set_OBSERVE_CONTROL_CLR_SELECT(uint16_t value)
    {
        uint32_t curr = OBSERVE_CONTROL_CLR;

        curr &= ~(0b111111111u << 0u);
        curr |= (value & 0b111111111u) << 0u;

        OBSERVE_CONTROL_CLR = curr;
    }

    /**
     * Get all of OBSERVE_CONTROL_CLR's bit fields.
     *
     * (read-write) Observe control
     */
    inline void get_OBSERVE_CONTROL_CLR(bool &OFF, uint8_t &DIVIDE,
                                        bool &RESET, bool &INV, bool &RAW,
                                        uint16_t &SELECT)
    {
        uint32_t curr = OBSERVE_CONTROL_CLR;

        OFF = curr & (1u << 24u);
        DIVIDE = (curr >> 16u) & 0b11111111u;
        RESET = curr & (1u << 15u);
        INV = curr & (1u << 13u);
        RAW = curr & (1u << 12u);
        SELECT = (curr >> 0u) & 0b111111111u;
    }

    /**
     * Set all of OBSERVE_CONTROL_CLR's bit fields.
     *
     * (read-write) Observe control
     */
    inline void set_OBSERVE_CONTROL_CLR(bool OFF, uint8_t DIVIDE, bool RESET,
                                        bool INV, bool RAW, uint16_t SELECT)
    {
        uint32_t curr = OBSERVE_CONTROL_CLR;

        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (DIVIDE & 0b11111111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (RESET & 0b1u) << 15u;
        curr &= ~(0b1u << 13u);
        curr |= (INV & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (RAW & 0b1u) << 12u;
        curr &= ~(0b111111111u << 0u);
        curr |= (SELECT & 0b111111111u) << 0u;

        OBSERVE_CONTROL_CLR = curr;
    }

    /**
     * Get OBSERVE_CONTROL_TOG's OFF bit.
     *
     * Turn off
     */
    inline bool get_OBSERVE_CONTROL_TOG_OFF()
    {
        return OBSERVE_CONTROL_TOG & (1u << 24u);
    }

    /**
     * Set OBSERVE_CONTROL_TOG's OFF bit.
     *
     * Turn off
     */
    inline void set_OBSERVE_CONTROL_TOG_OFF()
    {
        OBSERVE_CONTROL_TOG |= 1u << 24u;
    }

    /**
     * Clear OBSERVE_CONTROL_TOG's OFF bit.
     *
     * Turn off
     */
    inline void clear_OBSERVE_CONTROL_TOG_OFF()
    {
        OBSERVE_CONTROL_TOG &= ~(1u << 24u);
    }

    /**
     * Toggle OBSERVE_CONTROL_TOG's OFF bit.
     *
     * Turn off
     */
    inline void toggle_OBSERVE_CONTROL_TOG_OFF()
    {
        OBSERVE_CONTROL_TOG ^= 1u << 24u;
    }

    /**
     * Get OBSERVE_CONTROL_TOG's DIVIDE field.
     *
     * Divider for observe signal
     */
    inline uint8_t get_OBSERVE_CONTROL_TOG_DIVIDE()
    {
        return (OBSERVE_CONTROL_TOG >> 16u) & 0b11111111u;
    }

    /**
     * Set OBSERVE_CONTROL_TOG's DIVIDE field.
     *
     * Divider for observe signal
     */
    inline void set_OBSERVE_CONTROL_TOG_DIVIDE(uint8_t value)
    {
        uint32_t curr = OBSERVE_CONTROL_TOG;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        OBSERVE_CONTROL_TOG = curr;
    }

    /**
     * Get OBSERVE_CONTROL_TOG's RESET bit.
     *
     * Reset observe divider
     */
    inline bool get_OBSERVE_CONTROL_TOG_RESET()
    {
        return OBSERVE_CONTROL_TOG & (1u << 15u);
    }

    /**
     * Set OBSERVE_CONTROL_TOG's RESET bit.
     *
     * Reset observe divider
     */
    inline void set_OBSERVE_CONTROL_TOG_RESET()
    {
        OBSERVE_CONTROL_TOG |= 1u << 15u;
    }

    /**
     * Clear OBSERVE_CONTROL_TOG's RESET bit.
     *
     * Reset observe divider
     */
    inline void clear_OBSERVE_CONTROL_TOG_RESET()
    {
        OBSERVE_CONTROL_TOG &= ~(1u << 15u);
    }

    /**
     * Toggle OBSERVE_CONTROL_TOG's RESET bit.
     *
     * Reset observe divider
     */
    inline void toggle_OBSERVE_CONTROL_TOG_RESET()
    {
        OBSERVE_CONTROL_TOG ^= 1u << 15u;
    }

    /**
     * Get OBSERVE_CONTROL_TOG's INV bit.
     *
     * Invert
     */
    inline bool get_OBSERVE_CONTROL_TOG_INV()
    {
        return OBSERVE_CONTROL_TOG & (1u << 13u);
    }

    /**
     * Set OBSERVE_CONTROL_TOG's INV bit.
     *
     * Invert
     */
    inline void set_OBSERVE_CONTROL_TOG_INV()
    {
        OBSERVE_CONTROL_TOG |= 1u << 13u;
    }

    /**
     * Clear OBSERVE_CONTROL_TOG's INV bit.
     *
     * Invert
     */
    inline void clear_OBSERVE_CONTROL_TOG_INV()
    {
        OBSERVE_CONTROL_TOG &= ~(1u << 13u);
    }

    /**
     * Toggle OBSERVE_CONTROL_TOG's INV bit.
     *
     * Invert
     */
    inline void toggle_OBSERVE_CONTROL_TOG_INV()
    {
        OBSERVE_CONTROL_TOG ^= 1u << 13u;
    }

    /**
     * Get OBSERVE_CONTROL_TOG's RAW bit.
     *
     * Observe raw signal
     */
    inline bool get_OBSERVE_CONTROL_TOG_RAW()
    {
        return OBSERVE_CONTROL_TOG & (1u << 12u);
    }

    /**
     * Set OBSERVE_CONTROL_TOG's RAW bit.
     *
     * Observe raw signal
     */
    inline void set_OBSERVE_CONTROL_TOG_RAW()
    {
        OBSERVE_CONTROL_TOG |= 1u << 12u;
    }

    /**
     * Clear OBSERVE_CONTROL_TOG's RAW bit.
     *
     * Observe raw signal
     */
    inline void clear_OBSERVE_CONTROL_TOG_RAW()
    {
        OBSERVE_CONTROL_TOG &= ~(1u << 12u);
    }

    /**
     * Toggle OBSERVE_CONTROL_TOG's RAW bit.
     *
     * Observe raw signal
     */
    inline void toggle_OBSERVE_CONTROL_TOG_RAW()
    {
        OBSERVE_CONTROL_TOG ^= 1u << 12u;
    }

    /**
     * Get OBSERVE_CONTROL_TOG's SELECT field.
     *
     * Observe signal selector
     */
    inline uint16_t get_OBSERVE_CONTROL_TOG_SELECT()
    {
        return (OBSERVE_CONTROL_TOG >> 0u) & 0b111111111u;
    }

    /**
     * Set OBSERVE_CONTROL_TOG's SELECT field.
     *
     * Observe signal selector
     */
    inline void set_OBSERVE_CONTROL_TOG_SELECT(uint16_t value)
    {
        uint32_t curr = OBSERVE_CONTROL_TOG;

        curr &= ~(0b111111111u << 0u);
        curr |= (value & 0b111111111u) << 0u;

        OBSERVE_CONTROL_TOG = curr;
    }

    /**
     * Get all of OBSERVE_CONTROL_TOG's bit fields.
     *
     * (read-write) Observe control
     */
    inline void get_OBSERVE_CONTROL_TOG(bool &OFF, uint8_t &DIVIDE,
                                        bool &RESET, bool &INV, bool &RAW,
                                        uint16_t &SELECT)
    {
        uint32_t curr = OBSERVE_CONTROL_TOG;

        OFF = curr & (1u << 24u);
        DIVIDE = (curr >> 16u) & 0b11111111u;
        RESET = curr & (1u << 15u);
        INV = curr & (1u << 13u);
        RAW = curr & (1u << 12u);
        SELECT = (curr >> 0u) & 0b111111111u;
    }

    /**
     * Set all of OBSERVE_CONTROL_TOG's bit fields.
     *
     * (read-write) Observe control
     */
    inline void set_OBSERVE_CONTROL_TOG(bool OFF, uint8_t DIVIDE, bool RESET,
                                        bool INV, bool RAW, uint16_t SELECT)
    {
        uint32_t curr = OBSERVE_CONTROL_TOG;

        curr &= ~(0b1u << 24u);
        curr |= (OFF & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (DIVIDE & 0b11111111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (RESET & 0b1u) << 15u;
        curr &= ~(0b1u << 13u);
        curr |= (INV & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (RAW & 0b1u) << 12u;
        curr &= ~(0b111111111u << 0u);
        curr |= (SELECT & 0b111111111u) << 0u;

        OBSERVE_CONTROL_TOG = curr;
    }

    /**
     * Get OBSERVE_STATUS0's OFF bit.
     *
     * Turn off slice
     */
    inline bool get_OBSERVE_STATUS0_OFF()
    {
        return OBSERVE_STATUS0 & (1u << 24u);
    }

    /**
     * Get OBSERVE_STATUS0's DIVIDE field.
     *
     * Divide value status. The clock will be divided by DIVIDE + 1.
     */
    inline uint8_t get_OBSERVE_STATUS0_DIVIDE()
    {
        return (OBSERVE_STATUS0 >> 16u) & 0b11111111u;
    }

    /**
     * Get OBSERVE_STATUS0's RESET bit.
     *
     * Reset state
     */
    inline bool get_OBSERVE_STATUS0_RESET()
    {
        return OBSERVE_STATUS0 & (1u << 15u);
    }

    /**
     * Get OBSERVE_STATUS0's INV bit.
     *
     * Polarity of the observe target
     */
    inline bool get_OBSERVE_STATUS0_INV()
    {
        return OBSERVE_STATUS0 & (1u << 13u);
    }

    /**
     * Get OBSERVE_STATUS0's RAW bit.
     *
     * Observe raw signal
     */
    inline bool get_OBSERVE_STATUS0_RAW()
    {
        return OBSERVE_STATUS0 & (1u << 12u);
    }

    /**
     * Get OBSERVE_STATUS0's SELECT field.
     *
     * Select value
     */
    inline uint16_t get_OBSERVE_STATUS0_SELECT()
    {
        return (OBSERVE_STATUS0 >> 0u) & 0b111111111u;
    }

    /**
     * Get all of OBSERVE_STATUS0's bit fields.
     *
     * (read-write) Observe status
     */
    inline void get_OBSERVE_STATUS0(bool &OFF, uint8_t &DIVIDE, bool &RESET,
                                    bool &INV, bool &RAW, uint16_t &SELECT)
    {
        uint32_t curr = OBSERVE_STATUS0;

        OFF = curr & (1u << 24u);
        DIVIDE = (curr >> 16u) & 0b11111111u;
        RESET = curr & (1u << 15u);
        INV = curr & (1u << 13u);
        RAW = curr & (1u << 12u);
        SELECT = (curr >> 0u) & 0b111111111u;
    }

    /**
     * Get OBSERVE_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_OBSERVE_AUTHEN_LOCK_MODE()
    {
        return OBSERVE_AUTHEN & (1u << 20u);
    }

    /**
     * Set OBSERVE_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_OBSERVE_AUTHEN_LOCK_MODE()
    {
        OBSERVE_AUTHEN |= 1u << 20u;
    }

    /**
     * Clear OBSERVE_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_OBSERVE_AUTHEN_LOCK_MODE()
    {
        OBSERVE_AUTHEN &= ~(1u << 20u);
    }

    /**
     * Toggle OBSERVE_AUTHEN's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_OBSERVE_AUTHEN_LOCK_MODE()
    {
        OBSERVE_AUTHEN ^= 1u << 20u;
    }

    /**
     * Get OBSERVE_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_OBSERVE_AUTHEN_DOMAIN_MODE()
    {
        return OBSERVE_AUTHEN & (1u << 16u);
    }

    /**
     * Set OBSERVE_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_OBSERVE_AUTHEN_DOMAIN_MODE()
    {
        OBSERVE_AUTHEN |= 1u << 16u;
    }

    /**
     * Clear OBSERVE_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_OBSERVE_AUTHEN_DOMAIN_MODE()
    {
        OBSERVE_AUTHEN &= ~(1u << 16u);
    }

    /**
     * Toggle OBSERVE_AUTHEN's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_OBSERVE_AUTHEN_DOMAIN_MODE()
    {
        OBSERVE_AUTHEN ^= 1u << 16u;
    }

    /**
     * Get OBSERVE_AUTHEN's LOCK_LIST bit.
     *
     * Lock white list
     */
    inline bool get_OBSERVE_AUTHEN_LOCK_LIST()
    {
        return OBSERVE_AUTHEN & (1u << 12u);
    }

    /**
     * Set OBSERVE_AUTHEN's LOCK_LIST bit.
     *
     * Lock white list
     */
    inline void set_OBSERVE_AUTHEN_LOCK_LIST()
    {
        OBSERVE_AUTHEN |= 1u << 12u;
    }

    /**
     * Clear OBSERVE_AUTHEN's LOCK_LIST bit.
     *
     * Lock white list
     */
    inline void clear_OBSERVE_AUTHEN_LOCK_LIST()
    {
        OBSERVE_AUTHEN &= ~(1u << 12u);
    }

    /**
     * Toggle OBSERVE_AUTHEN's LOCK_LIST bit.
     *
     * Lock white list
     */
    inline void toggle_OBSERVE_AUTHEN_LOCK_LIST()
    {
        OBSERVE_AUTHEN ^= 1u << 12u;
    }

    /**
     * Get OBSERVE_AUTHEN's WHITE_LIST field.
     *
     * White list
     */
    inline CCM_OBS_OBSERVE_AUTHEN_WHITE_LIST get_OBSERVE_AUTHEN_WHITE_LIST()
    {
        return CCM_OBS_OBSERVE_AUTHEN_WHITE_LIST((OBSERVE_AUTHEN >> 8u) &
                                                 0b1111u);
    }

    /**
     * Set OBSERVE_AUTHEN's WHITE_LIST field.
     *
     * White list
     */
    inline void set_OBSERVE_AUTHEN_WHITE_LIST(
        CCM_OBS_OBSERVE_AUTHEN_WHITE_LIST value)
    {
        uint32_t curr = OBSERVE_AUTHEN;

        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(value) & 0b1111u) << 8u;

        OBSERVE_AUTHEN = curr;
    }

    /**
     * Get OBSERVE_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_OBSERVE_AUTHEN_LOCK_TZ()
    {
        return OBSERVE_AUTHEN & (1u << 4u);
    }

    /**
     * Set OBSERVE_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_OBSERVE_AUTHEN_LOCK_TZ()
    {
        OBSERVE_AUTHEN |= 1u << 4u;
    }

    /**
     * Clear OBSERVE_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_OBSERVE_AUTHEN_LOCK_TZ()
    {
        OBSERVE_AUTHEN &= ~(1u << 4u);
    }

    /**
     * Toggle OBSERVE_AUTHEN's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_OBSERVE_AUTHEN_LOCK_TZ()
    {
        OBSERVE_AUTHEN ^= 1u << 4u;
    }

    /**
     * Get OBSERVE_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_OBSERVE_AUTHEN_TZ_NS()
    {
        return OBSERVE_AUTHEN & (1u << 1u);
    }

    /**
     * Set OBSERVE_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_OBSERVE_AUTHEN_TZ_NS()
    {
        OBSERVE_AUTHEN |= 1u << 1u;
    }

    /**
     * Clear OBSERVE_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_OBSERVE_AUTHEN_TZ_NS()
    {
        OBSERVE_AUTHEN &= ~(1u << 1u);
    }

    /**
     * Toggle OBSERVE_AUTHEN's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_OBSERVE_AUTHEN_TZ_NS()
    {
        OBSERVE_AUTHEN ^= 1u << 1u;
    }

    /**
     * Get OBSERVE_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline bool get_OBSERVE_AUTHEN_TZ_USER()
    {
        return OBSERVE_AUTHEN & (1u << 0u);
    }

    /**
     * Set OBSERVE_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void set_OBSERVE_AUTHEN_TZ_USER()
    {
        OBSERVE_AUTHEN |= 1u << 0u;
    }

    /**
     * Clear OBSERVE_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void clear_OBSERVE_AUTHEN_TZ_USER()
    {
        OBSERVE_AUTHEN &= ~(1u << 0u);
    }

    /**
     * Toggle OBSERVE_AUTHEN's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_OBSERVE_AUTHEN_TZ_USER()
    {
        OBSERVE_AUTHEN ^= 1u << 0u;
    }

    /**
     * Get all of OBSERVE_AUTHEN's bit fields.
     *
     * (read-write) Observe access control
     */
    inline void get_OBSERVE_AUTHEN(
        bool &LOCK_MODE, bool &DOMAIN_MODE, bool &LOCK_LIST,
        CCM_OBS_OBSERVE_AUTHEN_WHITE_LIST &WHITE_LIST, bool &LOCK_TZ,
        bool &TZ_NS, bool &TZ_USER)
    {
        uint32_t curr = OBSERVE_AUTHEN;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = CCM_OBS_OBSERVE_AUTHEN_WHITE_LIST((curr >> 8u) & 0b1111u);
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of OBSERVE_AUTHEN's bit fields.
     *
     * (read-write) Observe access control
     */
    inline void set_OBSERVE_AUTHEN(
        bool LOCK_MODE, bool DOMAIN_MODE, bool LOCK_LIST,
        CCM_OBS_OBSERVE_AUTHEN_WHITE_LIST WHITE_LIST, bool LOCK_TZ, bool TZ_NS,
        bool TZ_USER)
    {
        uint32_t curr = OBSERVE_AUTHEN;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(WHITE_LIST) & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        OBSERVE_AUTHEN = curr;
    }

    /**
     * Get OBSERVE_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_OBSERVE_AUTHEN_SET_LOCK_MODE()
    {
        return OBSERVE_AUTHEN_SET & (1u << 20u);
    }

    /**
     * Set OBSERVE_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_OBSERVE_AUTHEN_SET_LOCK_MODE()
    {
        OBSERVE_AUTHEN_SET |= 1u << 20u;
    }

    /**
     * Clear OBSERVE_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_OBSERVE_AUTHEN_SET_LOCK_MODE()
    {
        OBSERVE_AUTHEN_SET &= ~(1u << 20u);
    }

    /**
     * Toggle OBSERVE_AUTHEN_SET's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_OBSERVE_AUTHEN_SET_LOCK_MODE()
    {
        OBSERVE_AUTHEN_SET ^= 1u << 20u;
    }

    /**
     * Get OBSERVE_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_OBSERVE_AUTHEN_SET_DOMAIN_MODE()
    {
        return OBSERVE_AUTHEN_SET & (1u << 16u);
    }

    /**
     * Set OBSERVE_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_OBSERVE_AUTHEN_SET_DOMAIN_MODE()
    {
        OBSERVE_AUTHEN_SET |= 1u << 16u;
    }

    /**
     * Clear OBSERVE_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_OBSERVE_AUTHEN_SET_DOMAIN_MODE()
    {
        OBSERVE_AUTHEN_SET &= ~(1u << 16u);
    }

    /**
     * Toggle OBSERVE_AUTHEN_SET's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_OBSERVE_AUTHEN_SET_DOMAIN_MODE()
    {
        OBSERVE_AUTHEN_SET ^= 1u << 16u;
    }

    /**
     * Get OBSERVE_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock white list
     */
    inline bool get_OBSERVE_AUTHEN_SET_LOCK_LIST()
    {
        return OBSERVE_AUTHEN_SET & (1u << 12u);
    }

    /**
     * Set OBSERVE_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock white list
     */
    inline void set_OBSERVE_AUTHEN_SET_LOCK_LIST()
    {
        OBSERVE_AUTHEN_SET |= 1u << 12u;
    }

    /**
     * Clear OBSERVE_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock white list
     */
    inline void clear_OBSERVE_AUTHEN_SET_LOCK_LIST()
    {
        OBSERVE_AUTHEN_SET &= ~(1u << 12u);
    }

    /**
     * Toggle OBSERVE_AUTHEN_SET's LOCK_LIST bit.
     *
     * Lock white list
     */
    inline void toggle_OBSERVE_AUTHEN_SET_LOCK_LIST()
    {
        OBSERVE_AUTHEN_SET ^= 1u << 12u;
    }

    /**
     * Get OBSERVE_AUTHEN_SET's WHITE_LIST field.
     *
     * White list
     */
    inline uint8_t get_OBSERVE_AUTHEN_SET_WHITE_LIST()
    {
        return (OBSERVE_AUTHEN_SET >> 8u) & 0b1111u;
    }

    /**
     * Set OBSERVE_AUTHEN_SET's WHITE_LIST field.
     *
     * White list
     */
    inline void set_OBSERVE_AUTHEN_SET_WHITE_LIST(uint8_t value)
    {
        uint32_t curr = OBSERVE_AUTHEN_SET;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        OBSERVE_AUTHEN_SET = curr;
    }

    /**
     * Get OBSERVE_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_OBSERVE_AUTHEN_SET_LOCK_TZ()
    {
        return OBSERVE_AUTHEN_SET & (1u << 4u);
    }

    /**
     * Set OBSERVE_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_OBSERVE_AUTHEN_SET_LOCK_TZ()
    {
        OBSERVE_AUTHEN_SET |= 1u << 4u;
    }

    /**
     * Clear OBSERVE_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_OBSERVE_AUTHEN_SET_LOCK_TZ()
    {
        OBSERVE_AUTHEN_SET &= ~(1u << 4u);
    }

    /**
     * Toggle OBSERVE_AUTHEN_SET's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_OBSERVE_AUTHEN_SET_LOCK_TZ()
    {
        OBSERVE_AUTHEN_SET ^= 1u << 4u;
    }

    /**
     * Get OBSERVE_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_OBSERVE_AUTHEN_SET_TZ_NS()
    {
        return OBSERVE_AUTHEN_SET & (1u << 1u);
    }

    /**
     * Set OBSERVE_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_OBSERVE_AUTHEN_SET_TZ_NS()
    {
        OBSERVE_AUTHEN_SET |= 1u << 1u;
    }

    /**
     * Clear OBSERVE_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_OBSERVE_AUTHEN_SET_TZ_NS()
    {
        OBSERVE_AUTHEN_SET &= ~(1u << 1u);
    }

    /**
     * Toggle OBSERVE_AUTHEN_SET's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_OBSERVE_AUTHEN_SET_TZ_NS()
    {
        OBSERVE_AUTHEN_SET ^= 1u << 1u;
    }

    /**
     * Get OBSERVE_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline bool get_OBSERVE_AUTHEN_SET_TZ_USER()
    {
        return OBSERVE_AUTHEN_SET & (1u << 0u);
    }

    /**
     * Set OBSERVE_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void set_OBSERVE_AUTHEN_SET_TZ_USER()
    {
        OBSERVE_AUTHEN_SET |= 1u << 0u;
    }

    /**
     * Clear OBSERVE_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void clear_OBSERVE_AUTHEN_SET_TZ_USER()
    {
        OBSERVE_AUTHEN_SET &= ~(1u << 0u);
    }

    /**
     * Toggle OBSERVE_AUTHEN_SET's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_OBSERVE_AUTHEN_SET_TZ_USER()
    {
        OBSERVE_AUTHEN_SET ^= 1u << 0u;
    }

    /**
     * Get all of OBSERVE_AUTHEN_SET's bit fields.
     *
     * (read-write) Observe access control
     */
    inline void get_OBSERVE_AUTHEN_SET(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                       bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                       bool &LOCK_TZ, bool &TZ_NS,
                                       bool &TZ_USER)
    {
        uint32_t curr = OBSERVE_AUTHEN_SET;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of OBSERVE_AUTHEN_SET's bit fields.
     *
     * (read-write) Observe access control
     */
    inline void set_OBSERVE_AUTHEN_SET(bool LOCK_MODE, bool DOMAIN_MODE,
                                       bool LOCK_LIST, uint8_t WHITE_LIST,
                                       bool LOCK_TZ, bool TZ_NS, bool TZ_USER)
    {
        uint32_t curr = OBSERVE_AUTHEN_SET;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        OBSERVE_AUTHEN_SET = curr;
    }

    /**
     * Get OBSERVE_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_OBSERVE_AUTHEN_CLR_LOCK_MODE()
    {
        return OBSERVE_AUTHEN_CLR & (1u << 20u);
    }

    /**
     * Set OBSERVE_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_OBSERVE_AUTHEN_CLR_LOCK_MODE()
    {
        OBSERVE_AUTHEN_CLR |= 1u << 20u;
    }

    /**
     * Clear OBSERVE_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_OBSERVE_AUTHEN_CLR_LOCK_MODE()
    {
        OBSERVE_AUTHEN_CLR &= ~(1u << 20u);
    }

    /**
     * Toggle OBSERVE_AUTHEN_CLR's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_OBSERVE_AUTHEN_CLR_LOCK_MODE()
    {
        OBSERVE_AUTHEN_CLR ^= 1u << 20u;
    }

    /**
     * Get OBSERVE_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_OBSERVE_AUTHEN_CLR_DOMAIN_MODE()
    {
        return OBSERVE_AUTHEN_CLR & (1u << 16u);
    }

    /**
     * Set OBSERVE_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_OBSERVE_AUTHEN_CLR_DOMAIN_MODE()
    {
        OBSERVE_AUTHEN_CLR |= 1u << 16u;
    }

    /**
     * Clear OBSERVE_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_OBSERVE_AUTHEN_CLR_DOMAIN_MODE()
    {
        OBSERVE_AUTHEN_CLR &= ~(1u << 16u);
    }

    /**
     * Toggle OBSERVE_AUTHEN_CLR's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_OBSERVE_AUTHEN_CLR_DOMAIN_MODE()
    {
        OBSERVE_AUTHEN_CLR ^= 1u << 16u;
    }

    /**
     * Get OBSERVE_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock white list
     */
    inline bool get_OBSERVE_AUTHEN_CLR_LOCK_LIST()
    {
        return OBSERVE_AUTHEN_CLR & (1u << 12u);
    }

    /**
     * Set OBSERVE_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock white list
     */
    inline void set_OBSERVE_AUTHEN_CLR_LOCK_LIST()
    {
        OBSERVE_AUTHEN_CLR |= 1u << 12u;
    }

    /**
     * Clear OBSERVE_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock white list
     */
    inline void clear_OBSERVE_AUTHEN_CLR_LOCK_LIST()
    {
        OBSERVE_AUTHEN_CLR &= ~(1u << 12u);
    }

    /**
     * Toggle OBSERVE_AUTHEN_CLR's LOCK_LIST bit.
     *
     * Lock white list
     */
    inline void toggle_OBSERVE_AUTHEN_CLR_LOCK_LIST()
    {
        OBSERVE_AUTHEN_CLR ^= 1u << 12u;
    }

    /**
     * Get OBSERVE_AUTHEN_CLR's WHITE_LIST field.
     *
     * White list
     */
    inline uint8_t get_OBSERVE_AUTHEN_CLR_WHITE_LIST()
    {
        return (OBSERVE_AUTHEN_CLR >> 8u) & 0b1111u;
    }

    /**
     * Set OBSERVE_AUTHEN_CLR's WHITE_LIST field.
     *
     * White list
     */
    inline void set_OBSERVE_AUTHEN_CLR_WHITE_LIST(uint8_t value)
    {
        uint32_t curr = OBSERVE_AUTHEN_CLR;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        OBSERVE_AUTHEN_CLR = curr;
    }

    /**
     * Get OBSERVE_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_OBSERVE_AUTHEN_CLR_LOCK_TZ()
    {
        return OBSERVE_AUTHEN_CLR & (1u << 4u);
    }

    /**
     * Set OBSERVE_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_OBSERVE_AUTHEN_CLR_LOCK_TZ()
    {
        OBSERVE_AUTHEN_CLR |= 1u << 4u;
    }

    /**
     * Clear OBSERVE_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_OBSERVE_AUTHEN_CLR_LOCK_TZ()
    {
        OBSERVE_AUTHEN_CLR &= ~(1u << 4u);
    }

    /**
     * Toggle OBSERVE_AUTHEN_CLR's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_OBSERVE_AUTHEN_CLR_LOCK_TZ()
    {
        OBSERVE_AUTHEN_CLR ^= 1u << 4u;
    }

    /**
     * Get OBSERVE_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_OBSERVE_AUTHEN_CLR_TZ_NS()
    {
        return OBSERVE_AUTHEN_CLR & (1u << 1u);
    }

    /**
     * Set OBSERVE_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_OBSERVE_AUTHEN_CLR_TZ_NS()
    {
        OBSERVE_AUTHEN_CLR |= 1u << 1u;
    }

    /**
     * Clear OBSERVE_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_OBSERVE_AUTHEN_CLR_TZ_NS()
    {
        OBSERVE_AUTHEN_CLR &= ~(1u << 1u);
    }

    /**
     * Toggle OBSERVE_AUTHEN_CLR's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_OBSERVE_AUTHEN_CLR_TZ_NS()
    {
        OBSERVE_AUTHEN_CLR ^= 1u << 1u;
    }

    /**
     * Get OBSERVE_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline bool get_OBSERVE_AUTHEN_CLR_TZ_USER()
    {
        return OBSERVE_AUTHEN_CLR & (1u << 0u);
    }

    /**
     * Set OBSERVE_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void set_OBSERVE_AUTHEN_CLR_TZ_USER()
    {
        OBSERVE_AUTHEN_CLR |= 1u << 0u;
    }

    /**
     * Clear OBSERVE_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void clear_OBSERVE_AUTHEN_CLR_TZ_USER()
    {
        OBSERVE_AUTHEN_CLR &= ~(1u << 0u);
    }

    /**
     * Toggle OBSERVE_AUTHEN_CLR's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_OBSERVE_AUTHEN_CLR_TZ_USER()
    {
        OBSERVE_AUTHEN_CLR ^= 1u << 0u;
    }

    /**
     * Get all of OBSERVE_AUTHEN_CLR's bit fields.
     *
     * (read-write) Observe access control
     */
    inline void get_OBSERVE_AUTHEN_CLR(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                       bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                       bool &LOCK_TZ, bool &TZ_NS,
                                       bool &TZ_USER)
    {
        uint32_t curr = OBSERVE_AUTHEN_CLR;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of OBSERVE_AUTHEN_CLR's bit fields.
     *
     * (read-write) Observe access control
     */
    inline void set_OBSERVE_AUTHEN_CLR(bool LOCK_MODE, bool DOMAIN_MODE,
                                       bool LOCK_LIST, uint8_t WHITE_LIST,
                                       bool LOCK_TZ, bool TZ_NS, bool TZ_USER)
    {
        uint32_t curr = OBSERVE_AUTHEN_CLR;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        OBSERVE_AUTHEN_CLR = curr;
    }

    /**
     * Get OBSERVE_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline bool get_OBSERVE_AUTHEN_TOG_LOCK_MODE()
    {
        return OBSERVE_AUTHEN_TOG & (1u << 20u);
    }

    /**
     * Set OBSERVE_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void set_OBSERVE_AUTHEN_TOG_LOCK_MODE()
    {
        OBSERVE_AUTHEN_TOG |= 1u << 20u;
    }

    /**
     * Clear OBSERVE_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void clear_OBSERVE_AUTHEN_TOG_LOCK_MODE()
    {
        OBSERVE_AUTHEN_TOG &= ~(1u << 20u);
    }

    /**
     * Toggle OBSERVE_AUTHEN_TOG's LOCK_MODE bit.
     *
     * Lock low power and access mode
     */
    inline void toggle_OBSERVE_AUTHEN_TOG_LOCK_MODE()
    {
        OBSERVE_AUTHEN_TOG ^= 1u << 20u;
    }

    /**
     * Get OBSERVE_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline bool get_OBSERVE_AUTHEN_TOG_DOMAIN_MODE()
    {
        return OBSERVE_AUTHEN_TOG & (1u << 16u);
    }

    /**
     * Set OBSERVE_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void set_OBSERVE_AUTHEN_TOG_DOMAIN_MODE()
    {
        OBSERVE_AUTHEN_TOG |= 1u << 16u;
    }

    /**
     * Clear OBSERVE_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void clear_OBSERVE_AUTHEN_TOG_DOMAIN_MODE()
    {
        OBSERVE_AUTHEN_TOG &= ~(1u << 16u);
    }

    /**
     * Toggle OBSERVE_AUTHEN_TOG's DOMAIN_MODE bit.
     *
     * Low power and access control by domain
     */
    inline void toggle_OBSERVE_AUTHEN_TOG_DOMAIN_MODE()
    {
        OBSERVE_AUTHEN_TOG ^= 1u << 16u;
    }

    /**
     * Get OBSERVE_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock white list
     */
    inline bool get_OBSERVE_AUTHEN_TOG_LOCK_LIST()
    {
        return OBSERVE_AUTHEN_TOG & (1u << 12u);
    }

    /**
     * Set OBSERVE_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock white list
     */
    inline void set_OBSERVE_AUTHEN_TOG_LOCK_LIST()
    {
        OBSERVE_AUTHEN_TOG |= 1u << 12u;
    }

    /**
     * Clear OBSERVE_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock white list
     */
    inline void clear_OBSERVE_AUTHEN_TOG_LOCK_LIST()
    {
        OBSERVE_AUTHEN_TOG &= ~(1u << 12u);
    }

    /**
     * Toggle OBSERVE_AUTHEN_TOG's LOCK_LIST bit.
     *
     * Lock white list
     */
    inline void toggle_OBSERVE_AUTHEN_TOG_LOCK_LIST()
    {
        OBSERVE_AUTHEN_TOG ^= 1u << 12u;
    }

    /**
     * Get OBSERVE_AUTHEN_TOG's WHITE_LIST field.
     *
     * White list
     */
    inline uint8_t get_OBSERVE_AUTHEN_TOG_WHITE_LIST()
    {
        return (OBSERVE_AUTHEN_TOG >> 8u) & 0b1111u;
    }

    /**
     * Set OBSERVE_AUTHEN_TOG's WHITE_LIST field.
     *
     * White list
     */
    inline void set_OBSERVE_AUTHEN_TOG_WHITE_LIST(uint8_t value)
    {
        uint32_t curr = OBSERVE_AUTHEN_TOG;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        OBSERVE_AUTHEN_TOG = curr;
    }

    /**
     * Get OBSERVE_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline bool get_OBSERVE_AUTHEN_TOG_LOCK_TZ()
    {
        return OBSERVE_AUTHEN_TOG & (1u << 4u);
    }

    /**
     * Set OBSERVE_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void set_OBSERVE_AUTHEN_TOG_LOCK_TZ()
    {
        OBSERVE_AUTHEN_TOG |= 1u << 4u;
    }

    /**
     * Clear OBSERVE_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void clear_OBSERVE_AUTHEN_TOG_LOCK_TZ()
    {
        OBSERVE_AUTHEN_TOG &= ~(1u << 4u);
    }

    /**
     * Toggle OBSERVE_AUTHEN_TOG's LOCK_TZ bit.
     *
     * Lock truszone setting
     */
    inline void toggle_OBSERVE_AUTHEN_TOG_LOCK_TZ()
    {
        OBSERVE_AUTHEN_TOG ^= 1u << 4u;
    }

    /**
     * Get OBSERVE_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline bool get_OBSERVE_AUTHEN_TOG_TZ_NS()
    {
        return OBSERVE_AUTHEN_TOG & (1u << 1u);
    }

    /**
     * Set OBSERVE_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void set_OBSERVE_AUTHEN_TOG_TZ_NS()
    {
        OBSERVE_AUTHEN_TOG |= 1u << 1u;
    }

    /**
     * Clear OBSERVE_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void clear_OBSERVE_AUTHEN_TOG_TZ_NS()
    {
        OBSERVE_AUTHEN_TOG &= ~(1u << 1u);
    }

    /**
     * Toggle OBSERVE_AUTHEN_TOG's TZ_NS bit.
     *
     * Non-secure access
     */
    inline void toggle_OBSERVE_AUTHEN_TOG_TZ_NS()
    {
        OBSERVE_AUTHEN_TOG ^= 1u << 1u;
    }

    /**
     * Get OBSERVE_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline bool get_OBSERVE_AUTHEN_TOG_TZ_USER()
    {
        return OBSERVE_AUTHEN_TOG & (1u << 0u);
    }

    /**
     * Set OBSERVE_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void set_OBSERVE_AUTHEN_TOG_TZ_USER()
    {
        OBSERVE_AUTHEN_TOG |= 1u << 0u;
    }

    /**
     * Clear OBSERVE_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void clear_OBSERVE_AUTHEN_TOG_TZ_USER()
    {
        OBSERVE_AUTHEN_TOG &= ~(1u << 0u);
    }

    /**
     * Toggle OBSERVE_AUTHEN_TOG's TZ_USER bit.
     *
     * User access
     */
    inline void toggle_OBSERVE_AUTHEN_TOG_TZ_USER()
    {
        OBSERVE_AUTHEN_TOG ^= 1u << 0u;
    }

    /**
     * Get all of OBSERVE_AUTHEN_TOG's bit fields.
     *
     * (read-write) Observe access control
     */
    inline void get_OBSERVE_AUTHEN_TOG(bool &LOCK_MODE, bool &DOMAIN_MODE,
                                       bool &LOCK_LIST, uint8_t &WHITE_LIST,
                                       bool &LOCK_TZ, bool &TZ_NS,
                                       bool &TZ_USER)
    {
        uint32_t curr = OBSERVE_AUTHEN_TOG;

        LOCK_MODE = curr & (1u << 20u);
        DOMAIN_MODE = curr & (1u << 16u);
        LOCK_LIST = curr & (1u << 12u);
        WHITE_LIST = (curr >> 8u) & 0b1111u;
        LOCK_TZ = curr & (1u << 4u);
        TZ_NS = curr & (1u << 1u);
        TZ_USER = curr & (1u << 0u);
    }

    /**
     * Set all of OBSERVE_AUTHEN_TOG's bit fields.
     *
     * (read-write) Observe access control
     */
    inline void set_OBSERVE_AUTHEN_TOG(bool LOCK_MODE, bool DOMAIN_MODE,
                                       bool LOCK_LIST, uint8_t WHITE_LIST,
                                       bool LOCK_TZ, bool TZ_NS, bool TZ_USER)
    {
        uint32_t curr = OBSERVE_AUTHEN_TOG;

        curr &= ~(0b1u << 20u);
        curr |= (LOCK_MODE & 0b1u) << 20u;
        curr &= ~(0b1u << 16u);
        curr |= (DOMAIN_MODE & 0b1u) << 16u;
        curr &= ~(0b1u << 12u);
        curr |= (LOCK_LIST & 0b1u) << 12u;
        curr &= ~(0b1111u << 8u);
        curr |= (WHITE_LIST & 0b1111u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (LOCK_TZ & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (TZ_NS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TZ_USER & 0b1u) << 0u;

        OBSERVE_AUTHEN_TOG = curr;
    }

    /**
     * Get OBSERVE_FREQUENCY_CURRENT's FREQUENCY field.
     *
     * Frequency
     */
    inline uint32_t get_OBSERVE_FREQUENCY_CURRENT_FREQUENCY()
    {
        return (OBSERVE_FREQUENCY_CURRENT >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get OBSERVE_FREQUENCY_MIN's FREQUENCY field.
     *
     * Frequency
     */
    inline uint32_t get_OBSERVE_FREQUENCY_MIN_FREQUENCY()
    {
        return (OBSERVE_FREQUENCY_MIN >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get OBSERVE_FREQUENCY_MAX's FREQUENCY field.
     *
     * Frequency
     */
    inline uint32_t get_OBSERVE_FREQUENCY_MAX_FREQUENCY()
    {
        return (OBSERVE_FREQUENCY_MAX >> 0u) &
               0b11111111111111111111111111111111u;
    }
};

static_assert(sizeof(OBSERVE_instance) == OBSERVE_instance::size);

}; // namespace MIMXRT1176::CM7
